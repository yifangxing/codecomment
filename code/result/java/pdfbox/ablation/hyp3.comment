1 Sets the current text matrix in the graphics state. @param value transformation matrix to apply to text
2 Sets the text line matrix in the current graphics state. @param value new transformation matrix for text lines
3 Sets the non-stroking color in the current graphics state. @param color PDColor object representing the new non-stroking color
4 Sets the stroking color in the current graphics context. @param color PDColor object representing the new stroke color
5 Handles exceptions during PDF operator processing. Logs errors or warnings based on exception type and operator. Throws other exceptions to be handled further up the call stack. @param operator the PDF operator causing the exception @param operands list of operands for the operator @param exception the IOException encountered
6 Retrieves the current text matrix from the graphics state. @return the current transformation matrix for text rendering
7 Creates a scaling transformation matrix. @param x scale factor for the x-axis @param y scale factor for the y-axis @return Matrix representing the scaling transformation
8 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation transformation
9 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx translation x component @param ty translation y component @return Matrix representing the rotation and translation
10 Retrieves the current text line matrix from the graphics state. @return The current text line matrix used in rendering text
11 Transforms a point using the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
12 Transforms the given width according to the current transformation matrix. @param width original width value @return transformed width considering scaling and shear factors
13 Determines the text direction based on transformation matrix. @return Direction angle (0, 90, 180, 270) representing text orientation.
14 Retrieves or creates an Operator instance for a given PDF operator string. @param operator PDF operator string, must not start with '/' @return Operator object associated with the provided operator string
15 Retrieves the current non-stroking color from the graphics state. @return PDColor object representing the non-stroking color
16 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object representing the non-stroking color space
17 Retrieves the current stroking color from the graphics state. @return PDColor object representing the stroke color
18 Retrieves the current stroking color space. @return PDColorSpace object representing the stroking color space
19 Constructs a new PDMarkedContent with the specified tag and properties. @param tag COSName representing the content tag @param properties COSDictionary containing content properties
20 Retrieves a RenderState from its COSName. @param state the COSName representing the render state @return the corresponding RenderState or null if not found
21 Returns the BaseState corresponding to the given COSName. @param state COSName representing the state @return BaseState object, defaults to ON if null input
22 Retrieves the type of the pattern. @return "Pattern" as a string representing the pattern type.
23 Returns the type of shading. @return "Shading" as a string representing the COSName
24 Retrieves the default value of the button. @return The default value as a string, or an empty string if not set.
25 Unchecks the checkbox by setting its value to "Off". @throws IOException if an I/O error occurs during the operation
26 Constructs a COSBoolean with specified boolean value. @param aValue standard boolean value to be encapsulated
27 Private constructor to create a COSName. @param aName string representation of the name
28 Private constructor to prevent instantiation. Ensures only one singleton instance of COSNull exists.
29 Constructs a COSString from byte array. @param bytes the byte array to be used as the string's data @param forceHex true if the string should always use hexadecimal form
30 Initializes a new empty COSDictionary. Creates an associated COSUpdateState for tracking updates.
31 Constructs a COSObject wrapping a given COSBase. @param object the COSBase to wrap
32 Initializes a COSObject with a given COSBase and parser. @param object the underlying COSBase object @param parser the ICOSParser instance for handling PDF parsing
33 Constructs a COSObject with the given key and parser. @param key object identifier @param parser PDF parser for handling object data
34 Retrieves the x-coordinate of the lower-left corner. @return float value representing the x-coordinate
35 Retrieves the y-coordinate of the lower-left corner. @return y-coordinate as a float
36 Retrieves the x-coordinate of the upper-right corner. @return x-coordinate as a float
37 Retrieves the Y-coordinate of the upper right corner. @return Y-coordinate as a float
38 Retrieves the font size from the PDFontSetting. @return font size as a float value
39 Retrieves the red component value. @return float representing the red color component
40 Retrieves the green component value. @return Green color component as a float
41 Retrieves the blue component value. @return Blue color component as a float
42 Retrieves the X tristimulus value. @return X component as a float
43 Retrieves the Y tristimulus value. @return Y value as a float
44 Retrieves the Z tristimulus value. @return float representing the Z component
45 Retrieves an integer value at a specified index with a default fallback. @param index position of the element to retrieve @param defaultValue value to return if the element is not a COSNumber @return integer value or default if out of bounds or not a number
46 Retrieves the name of a COSBase object at a specified index. @param index the position in the array @param defaultValue default value to return if not a COSName @return the name as a string or the default value
47 Finds the index of a specified COSBase object in the array. @param object the COSBase object to search for @return index of the object or -1 if not found
48 Constructs a COSArrayList. @param actualList list of COS objects @param cosArray associated COSArray
49 Evaluates the exponential interpolation function. @param input array containing a single float value @return interpolated result as an array of floats @throws IOException if an error occurs during evaluation
50 Returns a string representation of the COSArrayList. @return A formatted string showing the underlying COSArray's contents
51 Retrieves file filters from the PDF stream. @return List of filter names or empty list if none exist
52 Converts standard boolean to COSBoolean. @param value standard boolean value @return corresponding COSBoolean (TRUE or FALSE)
53 Writes a COSBoolean to the PDF stream. @param output the output stream to write to @param cosBoolean the COSBoolean object to write @throws IOException if an I/O error occurs
54 Creates a new COSDictionary by copying another. @param dict source dictionary to copy items from
55 Returns the number of key-value pairs in the COSDictionaryMap. @return integer count of items
56 Retrieves a COSObject by its key. @param key the key associated with the COSObject to retrieve @return COSObject if found, otherwise null
57 Retrieves an item from the dictionary by primary or secondary key. @param firstKey primary key to search for @param secondKey secondary key if primary is not found @return COSBase object or null if both keys are missing
58 Returns the number of recipients in the encryption settings. @return Number of recipients configured for encryption
59 Retrieves the recipient string at a specified index. @param i the index of the recipient in the recipients array @return COSString representing the recipient or null if not found
60 Retrieves the direction of the transition. @return COSBase object representing the direction or zero if not set
61 Retrieves all metadata keys from the PDF document. @return A sorted set of metadata keys as strings
62 Retrieves all attribute names from the COSDictionary, excluding the 'O' key. @return List of attribute names as strings
63 Adds trailer information to the cross-reference stream. @param trailerDict dictionary containing trailer entries
64 Determines if a dictionary represents an info dictionary. @param dictionary the COSDictionary to check @return true if the dictionary is an info dictionary, false otherwise
65 Checks if font descriptor contains width information. @return true if WIDTHS or MISSING_WIDTH keys are present, false otherwise
66 Checks if the font descriptor contains missing width information. @return true if missing width is defined, false otherwise
67 Checks if the PDF contains XFA (XML Forms Architecture). @return true if XFA is present, false otherwise
68 Retrieves an Encoding instance based on the provided COSName. @param name the COSName representing the encoding type @return Encoding object or null if not found
69 Returns the index of the selected radio button. @return Index of selected button or -1 if none is selected
70 Constructs a COSDocument instance. @param streamCacheCreateFunction function to create the stream cache @param parser PDF parser for document processing
71 Constructs a COSFloat from a string representation. Handles various formats and edge cases for PDF compatibility. @param aFloat string representing the float value @throws IOException if the input is not a valid float
72 Returns string representation of COSFloat. Uses formatString() to format float value. @return formatted string in "COSFloat{value}" format
73 Writes formatted float value to PDF stream. @param output OutputStream to write the PDF data @throws IOException if an I/O error occurs during writing
74 Converts current state to an increment. @return COSIncrement instance representing the update
75 Determines if the COS object needs to be updated. @return true if the update state indicates an update is needed, false otherwise
76 Retrieves or creates a COSInteger instance for the given value. @param val the integer value to represent @return COSInteger object with the specified value
77 Checks equality based on integer value. @param o object to compare @return true if objects are equal, false otherwise
78 Writes a COS integer to the output stream. @param output the OutputStream to write to @param cosInteger the COSInteger object to write @throws IOException if an I/O error occurs
79 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation value (must be non-negative) @param index stream index
80 Adds a cross-reference entry to the stream. @param entry XReferenceEntry to add
81 Sets the cross-reference for a given object key. @param objKey unique identifier of the PDF object @param offset byte position in the PDF file
82 Generates cross-reference ranges for PDF entries. @param xRefEntriesList List of XReferenceEntry objects @return Array of Long representing start and count of ranges
83 Writes an object reference to the output stream. @param output the target output stream @param indirectReference the COSObjectKey to write @throws IOException if I/O error occurs
84 Compares this XReferenceEntry with another based on their referenced keys. @param xReferenceEntry the entry to compare against @return negative if less, zero if equal, positive if greater
85 Creates a raw input stream for the COSStream. @return InputStream for reading the stream's data @throws IOException if the stream is closed or not properly initialized
86 Creates an output stream for writing raw data to the COSStream. Ensures only one writer is open and initializes caching. @return OutputStream for writing data @throws IOException if I/O error occurs or stream is closed
87 Retrieves the list of filters applied to the PDF stream. @return List of COSName representing the filters or an empty list if none
88 Retrieves the list of filters applied to the stream. @return List of Filter objects representing the stream's filters @throws IOException if an invalid filter type is encountered
89 Constructs a COSString from the given text. @param text input string to be encoded @param forceHex if true, forces hexadecimal representation
90 Decodes a hexadecimal string to a byte array. @param s the input hexadecimal string @return decoded byte array or empty if invalid characters are found
91 Retrieves the string representation of the byte array. Handles UTF-16BE and UTF-16LE encoding based on BOM, defaults to PDFDocEncoding. @return Decoded string or '?' for unsupported characters
92 Checks if the document is accepting updates. @return true if the document is open for modifications, false otherwise
93 Reads bytes from ASCII85 encoded input stream. @param data buffer to store read bytes @param offset starting position in the buffer @param len number of bytes to read @return actual number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
94 Writes a byte to the ASCII85 encoded output stream. @param b the byte to write @throws IOException if an I/O error occurs
95 Flushes the ASCII85 encoded data to the output stream. Handles any remaining bytes, transforms them to ASCII85, and writes with proper formatting.
96 Initializes DecodeOptions with specified source region coordinates. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width width of the source region @param height height of the source region
97 Finds an appropriate ImageReader for the specified format. @param formatName the name of the image format @param errorCause additional information about the error @return ImageReader instance if found, otherwise throws MissingImageReaderException
98 Finds an appropriate raster image reader for a given format. @param formatName the name of the image format @param errorCause additional information about the error if no reader is found @return ImageReader that can read raster images or throws MissingImageReaderException if none available
99 Reads the next byte from the decoded data stream. @return the next byte as an integer or -1 if end of stream is reached @throws IOException if an I/O error occurs during reading
100 Reads decompressed data into a byte array. @param data buffer to store the read bytes @param offset starting position in the buffer @param length number of bytes to read @return actual number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
101 Encodes raw data using LZW compression. @param rawData input stream containing data to compress @param encoded output stream for compressed data @param parameters additional encoding parameters (not used here) @throws IOException if an I/O error occurs during processing
102 Decodes a row of image data using the specified predictor algorithm. @param predictor type of prediction algorithm to apply @param colors number of color components per pixel @param bitsPerComponent number of bits per color component @param columns width of the image in pixels @param actline current row of image data to decode @param lastline previous row of image data for predictors using context
103 Initializes a LayerUtility for manipulating layers in a PDF document. @param targetDoc the PDDocument to be manipulated
104 Sets the bounding box for the form XObject. @param bbox PDRectangle representing the new bounding box or null to remove it
105 Adds a source PDF file to the merger by path. @param source file path of the PDF to be added @throws FileNotFoundException if the specified file does not exist
106 Closes the PDF document and releases all associated resources. Ensures that all IO streams are closed properly and logs any exceptions.
107 Closes the FDF document and associated streams. @throws IOException if an I/O error occurs during closure
108 Returns the underlying COS object. @return COSDictionary or COSStream representing the PDF function
109 Initializes a new PDXObject with the specified PDStream and subtype. @param stream PDStream containing the object's data @param subtype COSName representing the object's subtype
110 Retrieves the underlying COSStream object. @return COSStream representing the PDF stream
111 Retrieves metadata from the ICC profile stream. @return COSStream containing metadata or null if not found
112 Sets the metadata for the ICC profile. @param metadata COSStream containing the metadata to be set
113 Checks if the given widget is a signature annotation. @param annotations list of PDF annotations @param widget PDF annotation widget to check @return true if widget is a signature annotation, false otherwise
114 Compares this annotation for equality with another object. @param o the object to compare with @return true if equal, false otherwise
115 Checks if the given signature field exists in the document. @param fieldIterator iterator over fields of a PDF document @param signatureField the signature field to check for existence @return true if the signature field is found, false otherwise
116 Initializes a PDFStreamParser with a content stream. @param pdContentstream the content stream to parse @throws IOException if an I/O error occurs
117 Initializes the parser with a byte array containing PDF data. @param bytes PDF file content as a byte array
118 Checks if the next character in the source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs while reading from the source
119 Reads a string of digits from the PDF source. @return StringBuilder containing the read number as a string @throws IOException if an I/O error occurs or the number exceeds MAX_LENGTH_LONG
120 Checks if next character in source is an ASCII space. @return true if next character is a space, false otherwise @throws IOException if an I/O error occurs while reading the source
121 Skips a line break in the PDF source. @param linebreak character code of the current line break @return true if a valid line break is skipped, false otherwise
122 Checks if the current position is at the end of a string in a PDF. @param bracesParameter count of open braces @return updated brace count or 0 if end of string is detected
123 Checks if the character is an end-of-line (EOL). @param c character to check @return true if the character is a line feed or carriage return, false otherwise
124 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs while reading from the source
125 Parses the startxref value from the PDF. @return the byte offset of the first object in the cross-reference table, or -1 if not found @throws IOException if an I/O error occurs
126 Searches for the last EOF marker in the PDF data stream. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs
127 Searches for all xref tables in the PDF. @return List of offsets where xref tables are found @throws IOException if an I/O error occurs
128 Searches for XRef streams in the PDF. @return List of offsets where XRef streams are found @throws IOException if an I/O error occurs
129 Retrieves the cross-reference table. @return Map of COSObjectKey to object number or null if trailer is unresolved
130 Reads and parses the PDF file to find the startxref offset. @return The offset of the startxref entry in the PDF file. @throws IOException if an I/O error occurs or required markers are missing.
131 Reads data until "endstream" or "endobj" is found. @param out stream for filtered output @return length of the content written to the output stream @throws IOException if an I/O error occurs
132 Parses a PDF object by its number. @param objectNumber the object number to parse @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
133 Reads object numbers and their offsets from the PDF stream. @return Map of object numbers to their offsets @throws IOException if an I/O error occurs during reading
134 Parses all objects in a PDF object stream. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs
135 Checks if the next character in the source is a space or newline. @return true if the next character is a space or newline, false otherwise @throws IOException if an I/O error occurs while reading from the source
136 Parses the trailer section of a PDF document. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
137 Initializes a new cross-reference object and maps it to a byte position. @param startBytePos starting byte position of the cross-reference @param type type of cross-reference (e.g., TABLE)
138 Resets all cross-reference objects and clears current and resolved trailers.
139 Initializes a free object reference. @param key unique identifier for the COS object @param nextFreeObject pointer to the next free object
140 Constructs an ObjectStreamXReference. @param objectStreamIndex index of the object stream @param key referenced object key @param object associated COSBase object @param parentKey parent object's key
141 Retrieves the numeric value of the XReference type. @return long representing the reference type's numeric value
142 Returns a string representation of the free reference. @return formatted string with key, nextFreeObject, and type details
143 Generates a string representation of the ObjectStreamEntry. @return formatted string with key, type, object stream index, and parent key
144 Returns the generation number of the referenced key. @return The generation part of the object key
145 Returns the byte offset of the referenced object. @return byte offset position in the PDF file
146 Retrieves the generation number of the referenced object. @return The generation part of the COSObjectKey representing the reference
147 Generates a string representation of the XReference entry. @return formatted string with key, type, and byte offset information
148 Returns the object number of the parent key. @return The number part of the COSObjectKey representing the parent object's key
149 Returns the index of the object stream. @return The index identifying the object stream
150 Writes bytes to the output stream without starting a new line. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write
151 Writes a single byte to the output stream. Ensures data is written on the current line without advancing to a new one. @param b byte to be written
152 Writes an end-of-line sequence if not already at the start of a new line. Ensures proper formatting by maintaining line integrity.
153 Initializes a new COSWriter with the given output stream and compression parameters. @param outputStream the OutputStream to write PDF data to @param compressParameters parameters for PDF compression settings
154 Initializes a new COSWriter for incremental PDF updates. @param outputStream the output stream to write the updated PDF @param inputData the input data stream of the existing PDF @throws IOException if an I/O error occurs
155 Checks if compression is enabled for PDF objects. @return true if compression is enabled, false otherwise
156 Adds a cross-reference entry to the PDF document. @param entry XReferenceEntry object to be added
157 Writes the FDF document to an output stream. @param doc FDFDocument to be written @throws IOException if an I/O error occurs during writing
158 Retrieves a PDF object from the pool by its key. @param key unique identifier of the PDF object @return COSBase object or null if not found
159 Retrieves the highest cross-reference object number from the pool. @return The highest XRef object number managed by the COSWriterCompressionPool.
160 Writes a COSArray to the output stream. @param output the OutputStream to write to @param cosArray the COSArray to serialize @throws IOException if an I/O error occurs
161 Constructs a new DefaultResourceCache with stable cache enabled.
162 Constructs a resource cache with stable caching enabled by default.
163 Initializes a new content stream for a PDF appearance. @param appearance the PDAppearanceStream to write to @param outputStream the OutputStream to write the content stream to
164 Initializes a new content stream for a PDF appearance stream. @param doc the PDDocument to write to @param appearance the PDAppearanceStream to use @param outputStream the OutputStream to write the content stream to
165 Writes string to output stream using ASCII encoding. @param text string to be written @throws IOException if an I/O error occurs during writing
166 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs while writing to the output stream
167 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs while writing to the output stream @throws IllegalArgumentException if comment contains newline characters
168 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs while writing to the output stream
169 Adds a comment to the PDF content stream. @param comment text to be added as a comment (must not contain newlines) @throws IOException if an I/O error occurs while writing to the output stream
170 Closes the PDF appearance content stream. Ends text mode with a warning if still active and closes the output stream. @throws IOException if an I/O error occurs while closing the stream
171 Closes the PDF content stream. Ends text mode with a warning if still active and closes the output stream. @throws IOException if an I/O error occurs while closing the stream
172 Closes the content stream. Ends text mode with a warning if still active and closes the output stream. @throws IOException if an I/O error occurs while closing the stream
173 Closes the pattern content stream. Ends text mode if still active and closes the output stream. @throws IOException if an I/O error occurs while closing the stream
174 Applies GSUB rules to transform and encode glyphs. @param gsubWorker worker for applying GSUB transformations @param out output stream for encoded glyphs @param font font used for encoding @param word input text to be processed @return list of transformed glyph IDs
175 Sets stroking color based on PDColor. @param color PDColor object representing the desired color @return true if color is successfully set, false otherwise
176 Sets non-stroking color on demand. @param color PDColor object to be applied @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
177 Initializes a PDDestinationNameTreeNode from a COSDictionary. @param dic dictionary representing the node's data
178 Initializes an embedded files name tree node from a COSDictionary. @param dic dictionary representing the node's data
179 Constructs a PDJavascriptNameTreeNode from a COSDictionary. @param dic dictionary representing the node's data
180 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic dictionary representing the node's data
181 Initializes a new PDDocument instance. @param doc COSDocument representing the PDF content @param source RandomAccessRead for accessing the PDF data @param permission AccessPermission specifying user permissions
182 Initializes a new FDFDocument. @param doc associated COSDocument @param source input stream for the FDF data
183 Constructs a PDMetadata instance from a COSStream. @param str underlying COSStream object containing metadata
184 Constructs a PDObjectStream from a COSStream. @param str underlying COSStream object
185 Constructs an embedded file from a COSStream. @param str underlying COSStream object representing the embedded file
186 Initializes a PDFunction from a COSBase object. @param function underlying COSBase object representing the PDF function
187 Initializes a PDXObject with a given COSStream and subtype. @param stream underlying COSStream object @param subtype the type of XObject (e.g., Image, Form)
188 Initializes an extended graphics state from a COSDictionary. @param dictionary PDF dictionary containing graphics state properties
189 Wraps a COSDictionary with type information. @param dictionary the underlying COSDictionary to wrap
190 Initializes a new PDAttributeObject with a given COSDictionary. @param dictionary the underlying COSDictionary to wrap
191 Constructs a new PDUserProperty instance. @param dictionary the underlying COSDictionary to wrap @param userAttributeObject the user attribute object associated with this property
192 Initializes a new PDOutlineNode with the given COSDictionary. @param dict the underlying COSDictionary representing the outline node
193 Constructs a PDTransition object. @param dictionary the COSDictionary representing the transition properties
194 Creates a child node from a COS dictionary. @param dic the COS dictionary representing the child node @return a new PDNumberTreeNode instance with the given dictionary and value type
195 Returns a string representation of the FunctionType2. @return formatted string with C0, C1, and N values
196 Executes the sequence of instructions within a given context. @param context execution context containing operators and stack
197 Constructs a PDStructureElement from a COSDictionary. @param dic the underlying COSDictionary representing the structure element
198 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic the underlying COSDictionary representing the structure tree root
199 Checks for changes between entries and notifies of change. @param oldEntry the original entry value @param newEntry the updated entry value
200 Retrieves an object by its index. @param index position of the object in the list @return managed object at the specified index
201 Returns the number of objects managed. @return Count of objects in the collection
202 Retrieves the revision number at a specific index. @param index position of the revision number in the list @return Integer representing the revision number at the given index
203 Adds an object with its associated revision number. @param object the object to be added @param revisionNumber the revision number for the object
204 Sets the revision number for a specific object. @param object the object to update @param revisionNumber the new revision number
205 Adds text to the PDF marked content. @param text TextPosition object representing the text to be added
206 Adds marked content to the document's contents list. @param markedContent PDMarkedContent object to be added
207 Adds an XObject to the list of contents. @param xobject graphical object to be added
208 Sets printing permission for a PDF document. @param allowPrinting true to enable printing, false to disable
209 Sets permission to modify the PDF document. @param allowModifications true to allow modifications, false otherwise
210 Sets permission to extract content from PDF. @param allowExtraction true to allow extraction, false to deny
211 Sets permission to modify annotations in a PDF. @param allowAnnotationModification true to allow modification, false to disallow
212 Enables or disables form filling permission for a PDF document. @param allowFillingInForm true to allow, false to disallow form filling
213 Sets permission to extract content for accessibility. @param allowExtraction true to allow extraction, false to disallow
214 Sets permission to assemble document. @param allowAssembly true to allow assembling, false otherwise
215 Sets the permission to print a PDF faithfully. @param canPrintFaithful true to enable faithful printing, false otherwise
216 Checks if printing permission is granted. @return true if print permission is enabled, false otherwise
217 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
218 Checks if content extraction permission is enabled. @return true if content can be extracted, false otherwise
219 Checks if annotation modification permission is enabled. @return true if annotations can be modified, false otherwise
220 Checks if the fill-in-form permission is granted. @return true if fill-in-form permission is enabled, false otherwise
221 Checks if extracting content for accessibility purposes is permitted. @return true if extraction for accessibility is allowed, false otherwise
222 Checks if document assembly permission is granted. @return true if assemble document permission is enabled, false otherwise
223 Checks if printing of the PDF document in its original form is allowed. @return true if faithful print permission is enabled, false otherwise
224 Calculates the final encryption key for a PDF object. @param objectNumber unique identifier of the object @param genNumber generation number of the object @return derived encryption key as byte array
225 Default constructor for SecurityHandler.
226 Sets the encryption key for RC4. @param key byte array representing the encryption key (1-32 bytes)
227 Encrypts and writes a single byte to the output stream. @param aByte plaintext byte to encrypt @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
228 Checks if a Unicode code point is prohibited in SASL. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
229 Initializes the SecurityHandler with a specified protection policy. @param protectionPolicy defines encryption settings and access permissions
230 Computes the PDF encryption version based on key length and AES preference. @return Version number for encryption settings
231 Creates a security handler for a given protection policy. @param policy the ProtectionPolicy to create a handler for @return SecurityHandler instance or null if no handler is registered
232 Creates a security handler for a given filter name. @param name the name of the security filter @return SecurityHandler instance or null if not found
233 Initializes an FDF caret annotation from a COSDictionary. @param a dictionary containing annotation properties
234 Constructs a circular annotation from a given COSDictionary. @param a dictionary representing the annotation's properties
235 Constructs an FDF file attachment annotation from a COSDictionary. @param a dictionary representing the annotation's properties
236 Constructs a free text annotation from a COSDictionary. @param a dictionary containing annotation properties
237 Constructs an ink annotation from a COSDictionary. @param a dictionary containing annotation properties
238 Constructs a line annotation from a COSDictionary. @param a dictionary containing annotation properties
239 Initializes a hyperlink annotation from a COSDictionary. @param a dictionary containing annotation properties
240 Constructs an FDF polygon annotation from a COSDictionary. @param a dictionary representing the annotation's properties
241 Initializes a polyline annotation from a COSDictionary. @param a dictionary representing the annotation's properties
242 Constructs a sound annotation from a COSDictionary. @param a dictionary representing the annotation's properties
243 Constructs a square annotation from a COSDictionary. @param a dictionary representing the annotation's properties
244 Initializes a stamp annotation with a given COSDictionary. @param a dictionary representing the annotation's properties
245 Initializes a text annotation with a given COSDictionary. @param a dictionary representing the annotation's properties
246 Constructs a text markup annotation from a COSDictionary. @param a dictionary containing annotation properties
247 Extracts and returns PANOSE classification data. @return PDPanoseClassification object containing font classification info
248 Loads font metrics from an AFM file. @param fontName the name of the font to load metrics for @throws IOException if the AFM resource is not found or parsing fails
249 Maps a font name to its corresponding FontName object. @param baseName the FontName object representing the base font
250 Applies transformation to the given vector. @param vector input vector to transform @return transformed Vector object
251 Scales the vector by a given factor. @param sxy scaling factor for both x and y coordinates @return new Vector with scaled coordinates
252 Converts character code to CID. @param code character code to convert @return CID (Character Identifier) corresponding to the code
253 Determines if the font is one of the standard 14 PDF fonts. @return true if the font is a standard 14 font, false otherwise
254 Retrieves the Adobe Glyph List. @return predefined Adobe Glyph List instance
255 Converts character code to glyph ID. @param code character encoding code @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
256 Retrieves the glyph name in the font. @param name original glyph name @return glyph name if available, otherwise ".notdef" @throws IOException if an I/O error occurs
257 Retrieves the font name for a given glyph. @param name glyph name to search for @return font name or ".notdef" if not found @throws IOException if an I/O error occurs
258 Initializes built-in encoding with mappings from code to name. @param codeToName map of font encoding codes to character names
259 Constructs a GlyphList from an input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries for efficient map sizing @throws IOException if an I/O error occurs while loading the list
260 Constructs a GlyphList by copying another and loading additional glyphs. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing additional glyph data @throws IOException if an I/O error occurs while loading
261 Initializes Mac OS Roman encoding with predefined mappings.
262 Creates a Type1Encoding instance from an existing FontBox Encoding. @param encoding source FontBox Encoding object @return new Type1Encoding with mappings from the source
263 Retrieves a composite instance for blending images. @param blendMode the blend mode to apply during compositing @param constantAlpha the alpha value for transparency (0.0f to 1.0f) @return Composite object configured with specified blend mode and alpha
264 Constructs a PDColor instance. @param components array of color components @param patternName name of the pattern associated with the color @param colorSpace color space for the color
265 Constructs a SoftMask with specified parameters. @param paint the paint object to be used for rendering @param mask the BufferedImage representing the mask @param bboxDevice the device space bounding box @param backdropColor the background color for blending @param transferFunction the function for color transformation
266 Initializes CMYK color space with ICC profile. Ensures thread-safe initialization and handles potential JVM bugs. @throws IOException if ICC profile cannot be loaded
267 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
268 Chooses the best PNG filtered row for writing. @return byte array of the row with optimal compression sum
269 Applies a mask to an image. @param image original BufferedImage object @param mask BufferedImage representing the mask @param interpolateMask true for smooth scaling of mask, false otherwise @param isSoft true if soft mask, false otherwise @param matte float array for matte values @return masked BufferedImage
270 Retrieves the COS dictionary containing image parameters. @return COSDictionary with image attributes
271 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
272 Initializes a new PDShadingPattern with a given COSDictionary. @param resourceDictionary the COSDictionary representing the shading properties
273 Constructs a new PDTilingPattern with given dictionary and resource cache. @param dictionary the COSDictionary representing the pattern properties @param resourceCache the ResourceCache for managing resources
274 Constructs an AxialShadingPaint object. @param shadingType2 the axial shading effect to be applied @param matrix the transformation matrix for the shading
275 Constructs a RadialShadingPaint object with specified radial shading and transformation. @param shading the PDShadingType3 object representing the radial gradient @param matrix the transformation matrix for applying the gradient
276 Constructs a Type1ShadingPaint object with specified shading and transformation. @param shading the PDShadingType1 instance representing the shading pattern @param matrix the transformation matrix for applying the shading
277 Constructs a Type4ShadingPaint object. @param shading the type 4 shading effect to be applied @param matrix the transformation matrix for the shading
278 Constructs a Type5ShadingPaint instance. @param shading PDShadingType5 object representing the shading effect @param matrix transformation matrix for rendering
279 Constructs a Type6ShadingPaint object with specified shading and transformation. @param shading the PDShadingType6 instance defining the shading effect @param matrix the transformation matrix for applying the shading
280 Constructs a Type7ShadingPaint object with specified shading and transformation. @param shading PDShadingType7 object representing the shading effect @param matrix transformation matrix for applying to the shading
281 Initializes a cubic Bezier curve with given control points and detail level. @param ctrlPnts array of control points defining the curve @param l level of detail for point generation
282 Initializes a Line with two points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for the starting point @param c1 color array for the ending point
283 Constructs a PDShadingType1 instance from a COSDictionary. @param shadingDictionary the dictionary containing Type 1 shading properties
284 Constructs a PDShadingType2 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 2 shading properties
285 Retrieves the number of color components. @return Number of color components or -1 if not initialized @throws IOException if an I/O error occurs during retrieval
286 Retrieves the number of color components for shading. @return Number of color components or -1 if not initialized @throws IOException if an I/O error occurs during retrieval
287 Determines if an edge is a line based on control points. @param ctl array of control points defining the edge @return true if the edge can be considered a line, false otherwise
288 Checks if a point is inside the shaded triangle. @param p point to check @return true if point is within or on the edge of the triangle, false otherwise
289 Calculates interpolated color at a given point. @param p point for which to calculate color @return float array representing interpolated color
290 Intersects the current clipping path with a new GeneralPath. @param path the GeneralPath to intersect with the clipping path
291 Intersects the current clipping path with a new Area. @param area the Area to intersect with the clipping path
292 Transfers the current clipping path to the provided graphics context. @param graphics the target graphics context for applying the clipping path
293 Creates a PDSoftMask from a COSBase object. @param dictionary the COSBase object containing soft mask properties @param resourceCache cache for managing resources @return PDSoftMask instance or null if invalid input
294 Initializes a soft mask from a dictionary. @param dictionary PDF dictionary containing soft mask properties
295 Initializes PlainText with given text, splitting into paragraphs. @param textValue raw text input to be processed
296 Constructs an embedded Go-To action from a COS dictionary. @param a COSDictionary containing action details
297 Constructs a PDActionGoTo with the given COSDictionary. @param a COSDictionary representing the action details
298 Constructs a PDActionHide with the given COSDictionary. @param a COSDictionary representing the hide action details
299 Constructs a PDActionImportData with the given COSDictionary. @param a COSDictionary representing the import action details
300 Constructs a PDActionJavaScript with the given COSDictionary. @param a COSDictionary representing the JavaScript action details
301 Constructs a PDActionLaunch with the given COSDictionary. @param a COSDictionary representing the launch action details
302 Constructs a PDActionMovie from a COSDictionary. @param a dictionary containing movie action details
303 Constructs a named PDF action. @param a COSDictionary containing action details
304 Constructs a remote navigation action from a COSDictionary. @param a dictionary representing the action details
305 Constructs a PDActionResetForm with the given COSDictionary. @param a COSDictionary representing the reset action details
306 Constructs a PDActionSound with the given COSDictionary. @param a COSDictionary representing sound action details
307 Constructs a PDActionSubmitForm from a COSDictionary. @param a dictionary containing action details
308 Constructs a PDActionThread with the given COSDictionary. @param a COSDictionary representing thread action details
309 Constructs a PDActionURI from a COSDictionary. @param a COSDictionary representing the URI action details
310 Ensures polygon vertices are in counterclockwise order. @param points array of Points2D.Double representing the polygon vertices
311 Retrieves the template height by fetching the page height. @return Height of the signature template in points
312 Reads and sets the image from an input stream. @param stream InputStream containing the image data @throws IOException if there is an I/O error reading the stream
313 Sets the position of the signature image. @param x horizontal coordinate for positioning @param y vertical coordinate for positioning @return reference to this PDVisibleSignDesigner instance
314 Constructs a PDPageFitDestination from a COSArray. @param arr the COSArray representing the destination in the PDF document
315 Initializes a PDPageFitHeightDestination with a given COSArray. @param arr the COSArray representing the destination in the PDF document
316 Constructs a PDPageFitRectangleDestination from a COSArray. @param arr the COSArray representing the destination rectangle in the PDF document
317 Constructs a PDPageFitWidthDestination with the given COSArray. @param arr COSArray representing the destination in the PDF document
318 Constructs a PDPageXYZDestination from a COSArray. @param arr the COSArray representing the destination in the PDF document
319 Ensures the provided outline item has no siblings. Throws an exception if the node is not a single node. @param node the PDOutlineItem to validate
320 Converts lists of keys and values into a list of KeyValue objects. @param key list of unique identifiers @param value list of associated data @return List of KeyValue objects
321 Returns the field tree associated with this form. @return PDFieldTree instance managing form fields
322 Constructs a PDNonTerminalField instance. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
323 Constructs a PDTerminalField instance. @param acroForm the AcroForm containing the field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
324 Parses XML from an input stream without namespace awareness. @param is InputStream containing XML data @return parsed Document object @throws IOException on parsing error
325 Initializes a new instance of PDRectlinearMeasureDictionary. @param dictionary the underlying COSDictionary to manage rectilinear measurements
326 Removes backdrop from a group image. @param backdrop the background image to remove @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
327 Draws a tiling pattern on the specified graphics context. @param g Graphics2D context for drawing @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor for filling the pattern @param patternMatrix Matrix defining the transformation of the pattern
328 Retrieves the horizontal scaling factor of the text. @return The X scaling factor from the transformation matrix.
329 Creates a paint context for rendering tiling patterns. @param cm color model for the paint context @param deviceBounds bounding box of the device space @param userBounds bounding box of the user space @param xform transformation matrix for the paint @param hints rendering hints for the paint context @return PaintContext object for tiling pattern rendering
330 Retrieves the vertical scaling factor of the text. @return The vertical scaling factor as a float
331 Calculates the X rotation based on given angle. @param rotation angle of rotation in degrees @return adjusted X coordinate after applying rotation
332 Calculates the Y coordinate of the lower-left corner after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return adjusted Y coordinate based on rotation and text matrix translation
333 Calculates the width of a rotated text element. @param rotation angle of rotation in degrees @return absolute width based on rotation
334 Writes text characters to the output. @param text TextPosition object containing character data
335 Returns the Unicode string in visually ordered form. @return Visually ordered Unicode string or original if no reversal needed
336 Determines if the text is a diacritic character. @return true if the text is a diacritic, false otherwise
337 Returns the Unicode representation of the text. @return Unicode string representing the text content
338 Begins processing an article in the PDF. @param isLTR true if text direction is left-to-right, false otherwise @throws IOException if writing to the output fails
339 Ends the current article by writing its ending position to the output. @throws IOException if an I/O error occurs during writing
340 Writes the configured line separator to the output. @throws IOException if an I/O error occurs during writing
341 Writes the word separator to the output. Uses the current word separator character.
342 Writes extracted text to output stream. @param text the string to be written @param textPositions list of TextPosition objects (unused in this method) @throws IOException if an I/O error occurs
343 Writes the start of a new paragraph. Ends current paragraph if one is open, then writes paragraph start string.
344 Writes the start of a new page to the output. @throws IOException if an I/O error occurs during writing
345 Writes the end marker for a PDF page to the output. @throws IOException if an I/O error occurs during writing
346 Matches the current text position against list item patterns. @param pw PositionWrapper containing the text position to check @return Pattern object if a match is found, null otherwise
347 Normalizes a word by handling Unicode normalization and direction. @param word the input string to normalize @return normalized string with correct text direction
348 Inserts a diacritic character at a specified position. @param i index where diacritic should be inserted @param diacritic TextPosition object containing the diacritic to insert
349 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
350 Converts a byte array to a hexadecimal string. @param bytes input byte array @return String representing the hexadecimal form of the input bytes
351 Converts a byte to its hexadecimal byte representation. @param b input byte @return byte array containing two hex bytes
352 Converts a byte array to its ASCII hexadecimal representation. @param bytes input byte array @return byte array containing ASCII hex values
353 Writes a byte as two hexadecimal characters to an output stream. @param b the byte to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
354 Sorts an array iteratively using the merge sort algorithm. @param arr array to be sorted @param cmp comparator defining the order of elements
355 Creates a deep copy of the current matrix. @return A new Matrix object with identical transformation parameters
356 Concatenates another transformation matrix. @param matrix Matrix to concatenate with this one
357 Applies translation to the matrix. @param tx horizontal translation factor @param ty vertical translation factor
358 Scales the transformation matrix by given factors. @param sx scale factor along X-axis @param sy scale factor along Y-axis
359 Multiplies this matrix with another matrix. @param other the second transformation matrix to multiply @return a new Matrix representing the result of the multiplication
360 Formats a float value into ASCII byte representation. @param value the float to format @param maxFractionDigits maximum number of fraction digits @param asciiBuffer buffer to store ASCII bytes @return new offset after formatting or -1 if invalid input
361 Adds a byte sequence path with an associated value. @param value the value to associate with the path @param parts variable number of byte arrays representing the path
362 Sets default value at the root of the trie. @param defaultValue the default value to be associated with the root node
363 Searches for a value based on a byte sequence. @param bytes input byte array to search for @return associated value or default if not found
364 Processes a PDF operator and its operands. @param operator the PDF operator to process @param operands list of operands for the operator @throws IOException if an I/O error occurs during processing
365 Initializes the LegacyPDFStreamEngine with text rendering operators. Sets up PDF text handling operations for accurate text extraction and rendering.
366 Retrieves or creates a COSName instance for the given PDF name. @param aName string representation of the PDF name @return COSName object associated with the input name
367 Constructs a COSString from a byte array. @param bytes the byte array to be used as the string's data
368 Constructs an empty COSArray with direct storage.
369 Constructs a COSArray from a list of COSObjectable objects. @param cosObjectables list of COSObjectable objects to manage
370 Initializes a new COSStream with a specified cache. @param streamCache the cache for managing stream data
371 Wraps a COSDictionary in an unmodifiable view. @param dict the original COSDictionary to wrap
372 Creates a default DecodeResult instance. @return DecodeResult object initialized with an empty COSDictionary
373 Constructs a new PDDocumentInformation instance. Initializes an empty COSDictionary to store document metadata.
374 Initializes a new PDResources object. Creates an empty COSDictionary for storing resources and initializes caches.
375 Converts a standard map to a COSDictionary. @param someMap the source map with String keys and COSObjectable values @return COSDictionary populated with items from the input map
376 Constructs a new empty PDDictionaryWrapper. Initializes an associated COSDictionary and COSUpdateState.
377 Initializes a new empty PDNameTreeNode. Creates an associated COSDictionary for storing name-value pairs.
378 Initializes a new PDNumberTreeNode with a specified value class. @param valueClass the type of numeric values managed by this node
379 Constructs a PDPageLabelRange with default settings. Initializes using an empty COS dictionary.
380 Constructs a new PDMarkInfo instance. Initializes an empty COSDictionary to store marking metadata.
381 Initializes a new PDPropertyList with an empty COSDictionary.
382 Initializes a new instance of PDBoxStyle with an empty COSDictionary.
383 Initializes a new empty cryptographic filter dictionary.
384 Initializes a new instance of PDEncryption. Creates an empty COSDictionary for storing encryption settings.
385 Constructs a new FDFCatalog instance. Initializes the internal COSDictionary to store catalog data.
386 Initializes a new empty FDFDictionary. Creates an associated COSDictionary for managing FDF data.
387 Constructs a new FDFField with an empty dictionary.
388 Initializes a new FDFIconFit with an empty COSDictionary.
389 Initializes a new FDFJavaScript object with an empty COSDictionary.
390 Initializes a new named page reference with an empty dictionary. Creates an associated COSUpdateState for tracking updates.
391 Constructs a new FDFPage with an empty COSDictionary. Initializes the underlying data structure for storing page information.
392 Initializes a new FDFPageInfo with an empty COSDictionary.
393 Initializes a new FDFTemplate with an empty COSDictionary.
394 Constructs a new PDDeviceNAttributes instance. Initializes an empty COSDictionary to store attributes.
395 Constructs a new PDDeviceNProcess with an empty dictionary.
396 Initializes a new empty PDShading instance. Creates an associated COSDictionary for storing shading properties.
397 Initializes a new instance of PDAdditionalActions. Creates an empty COSDictionary to store action data.
398 Initializes a new instance of PDAnnotationAdditionalActions. Creates an empty COSDictionary to store annotation actions.
399 Initializes new PDF document catalog actions. Sets up an empty COSDictionary to store action definitions.
400 Initializes a new instance of PDFormFieldAdditionalActions. Creates an empty COSDictionary to store field actions.
401 Initializes a new instance of PDPageAdditionalActions. Creates an empty COSDictionary to store page actions.
402 Constructs a new PDTargetDirectory. Initializes an empty COSDictionary for storing directory properties.
403 Initializes a new empty URI dictionary.
404 Initializes launch parameters with a new COSDictionary.
405 Constructs a new PDBorderEffectDictionary with an empty COSDictionary.
406 Constructs a new border style dictionary. Initializes an empty COSDictionary for storing border properties.
407 Initializes a new PDPropBuild with an empty COSDictionary. Sets the dictionary to use direct objects as per specifications.
408 Initializes a new empty dictionary for digital signature properties. Sets the dictionary to use direct objects as per the specification.
409 Initializes a new instance of PDSeedValueMDP with an empty COSDictionary. Sets the dictionary to be direct for efficient updates.
410 Initializes a new PDSeedValueTimeStamp with an empty COSDictionary. Sets the dictionary to be direct for efficient updates.
411 Constructs a PDField instance with default settings. @param acroForm the AcroForm containing the field
412 Constructs a new PDViewportDictionary with an empty COSDictionary.
413 Initializes viewer preferences with an empty dictionary.
414 Constructs a COSObject with a given COSBase and key. @param object The underlying COSBase object. @param objectKey The identifier for the COSObject.
415 Calculates the width of the rectangle. @return width as a float value
416 Checks if the rectangle contains a specified point. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
417 Calculates the height of the rectangle. @return Height as a float
418 Transforms the rectangle using a given matrix. @param matrix transformation matrix to apply @return GeneralPath representing the transformed rectangle
419 Converts the rectangle to a GeneralPath for graphical representation. @return GeneralPath object representing the rectangle's boundary
420 Returns a string representation of the rectangle. @return String in the format "[x1,y1,x2,y2]" representing the lower-left and upper-right corners
421 Retrieves an integer value at a specified index. @param index position of the element to retrieve @return integer value or -1 if out of bounds or not a number
422 Retrieves the name of a COSBase object at a specified index. @param index the position in the array @return the name as a string or null if not a COSName
423 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs are present, false otherwise
424 Constructs a COSDocument instance using memory-only stream cache. @param parser PDF parser for document processing
425 Constructs a COSDocument instance with default PDF parser. @param streamCacheCreateFunction function to create the stream cache
426 Writes a COSFloat to the PDF stream. @param output OutputStream to write the float value @param cosFloat COSFloat object to serialize @throws IOException if an I/O error occurs during writing
427 Converts the current update state to a COSIncrement. @return COSIncrement instance representing the update
428 Checks if a COS object needs to be updated. @param base the COSBase object to check @return true if the object needs an update, false otherwise
429 Converts a string to a COSNumber (COSFloat or COSInteger). Handles various numeric formats and edge cases. @param number string representation of the number @return COSNumber object representing the input @throws IOException if the input is not a valid number
430 Appends a child element reference by MCID. @param mcid Marked content identifier, must be non-negative
431 Retrieves or creates a COSInteger instance representing degrees. @return COSInteger object with the specified degree value
432 Constructs a COSObjectKey with default stream index. @param num object number (must be non-negative) @param gen generation value (must be non-negative)
433 Determines the file suffix based on image filters. @return File suffix as a String or null if unknown filter
434 Creates an OutputStream for writing to the COSStream. @param filters filter list for stream data @return OutputStream for writing filtered data @throws IOException if I/O error occurs or multiple writers are opened
435 Constructs a COSString from the given text. @param text input string to be encoded
436 Retrieves a string value at the specified index. @param index position of the object in the array @param defaultValue default string to return if not found or not a COSString @return Decoded string or default value if not applicable
437 Retrieves the file name as a string. @return Decoded file name or '?' for unsupported characters
438 Retrieves the name of the named destination. Handles both COSString and COSName types. @return The string representation of the named destination or null if unsupported
439 Retrieves pairable items from a COSBase object. @param items COSBase object containing key-value pairs @param pairIdx index to access within nested arrays (0 or 1) @return List of strings extracted from the COSBase object
440 Retrieves export values for the button. @return List of export values or empty list if none
441 Retrieves the default appearance string for a text field. @return Decoded default appearance string or null if not applicable
442 Updates the document's modification state. @param updated true to mark as modified, false otherwise
443 Closes the ASCII85OutputStream, flushing any remaining data and releasing resources. Ensures proper closure of the underlying stream and clears internal buffers.
444 Closes all overlay objects and documents. Ensures proper resource release and clears internal maps.
445 Constructs a new PDFormXObject with the given PDStream. @param stream PDStream containing the form's data
446 Constructs a PDImageXObject from a given stream and resources. @param stream PDStream containing image data @param resources PDResources associated with the image
447 Parses the PDF header to extract version information. @return true if parsing is successful, false otherwise
448 Parses the FDF document header. @return true if parsing is successful, false otherwise
449 Skips leading whitespaces and line breaks in the PDF source. @throws IOException if an I/O error occurs
450 Attempts to skip a line break in the PDF source. @return true if a valid line break is skipped, false otherwise
451 Reads a line of text from the PDF source. Handles end-of-line characters and returns the line as a string. Throws IOException if EOF is reached unexpectedly.
452 Skips whitespace and comments in the PDF source. @throws IOException if an I/O error occurs
453 Searches for the nearest XRef table or stream to a given offset. @param xrefOffset The reference offset in the PDF @return The nearest offset of an XRef table or stream, or -1 if not found @throws IOException if an I/O error occurs during search
454 Initializes a new COSWriter with default compression. @param outputStream the OutputStream to write PDF data to
455 Initializes a new COSWriter with specific objects to write. @param outputStream the output stream to write the PDF @param inputData the input data stream of the existing PDF @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
456 Writes an integer operand to the output stream. @param integer the integer value to be written @throws IOException if an I/O error occurs during writing
457 Writes a PDF operator followed by a newline. @param text the PDF operator to be written @throws IOException if an I/O error occurs during writing
458 Encodes text for GSUB transformations. @param gsubWorker worker for applying GSUB rules @param glyphIds set to collect transformed glyph IDs @param font font used for encoding @param text input text to be encoded @return byte array of encoded text
459 Creates and returns a new PDDocument instance. @return PDDocument object initialized with document content, source, and access permissions @throws IOException if an error occurs during document creation
460 Constructs a PDDocument instance. @param doc COSDocument representing the PDF content @param source RandomAccessRead for accessing the PDF data
461 Retrieves the metadata from the PDF stream. @return PDMetadata object or null if no metadata is present
462 Retrieves metadata from the image object. @return PDMetadata object or null if no metadata is available
463 Retrieves the extended object stream. @return PDObjectStream representing the extended object or null if none exists
464 Constructs a PDFunctionType0 instance from a COSBase object. @param function underlying COSBase object representing the PDF function
465 Constructs a PDFunctionType3 from a COSBase object. @param functionStream underlying COSBase object representing the PDF function
466 Constructs a PDPostScriptXObject from a COSStream. @param stream PostScript content as a COSStream
467 Constructs a PDFormXObject from a COSStream. @param stream underlying COSStream object representing the form XObject
468 Constructs a PDFormXObject from a COSStream and resource cache. @param stream underlying COSStream object representing the form XObject @param cache ResourceCache for managing shared resources
469 Constructs a new PDDefaultAttributeObject wrapping a given COSDictionary. @param dictionary the underlying COSDictionary to manage PDF attributes
470 Initializes a new PDUserAttributeObject with a given COSDictionary. @param dictionary the underlying COSDictionary to wrap
471 Constructs a PDStandardAttributeObject with a specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
472 Constructs a new PDOutlineItem from a COSDictionary. @param dic the underlying COSDictionary representing the outline item
473 Processes a character sequence as a token. Converts it to string and delegates to the overloaded token method. @param text the character sequence to be processed
474 Generates a string representation of the Revisions object. @return A formatted string containing objects and their revision numbers
475 Checks if the user has all owner permissions for a PDF document. @return true if all owner permissions are granted, false otherwise
476 Checks if any of the revision 3 permissions are set. @return true if any revision 3 permission is granted, false otherwise
477 Default constructor for PublicKeySecurityHandler.
478 Default constructor for StandardSecurityHandler.
479 Encrypts and writes an array of bytes to the output stream. @param data plaintext byte array to encrypt @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
480 Encrypts and writes a byte array to the output stream. @param data byte array containing plaintext data @param offset starting index in the data array @param len number of bytes to encrypt and write @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
481 Initializes PublicKeySecurityHandler with specified public key protection policy. @param publicKeyProtectionPolicy defines encryption settings and access permissions for public keys
482 Constructs a StandardSecurityHandler with specified protection policy. @param standardProtectionPolicy defines encryption settings and access permissions
483 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key bytes @param data input stream containing original data @param output output stream for encrypted/decrypted data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
484 Encrypts or decrypts data using AES-256. @param data input stream containing the data to be processed @param output output stream for the processed data @param decrypt true for decryption, false for encryption @throws IOException if an I/O error occurs during processing
485 Computes user password for PDF encryption. @param password user-provided password @param owner owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @return encrypted user password byte array @throws IOException if an I/O error occurs during encryption
486 Computes the owner password for PDF encryption. @param ownerPassword user-provided owner password @param userPassword user-provided user password @param encRevision PDF encryption revision @param length desired key length @return encrypted owner password as byte array @throws IOException if expected length is not met
487 Constructs an FDFAnnotationHighlight from a COSDictionary. @param a dictionary containing annotation properties
488 Constructs a squiggly line annotation from a COSDictionary. @param a dictionary containing annotation properties
489 Constructs an FDF strikeout annotation from a COSDictionary. @param a dictionary containing annotation properties
490 Constructs an underline annotation from a COSDictionary. @param a dictionary containing annotation properties
491 Retrieves or loads a font based on its format and PostScript name. @return FontBoxFont object or null if loading fails
492 Loads font information from disk cache. @param files list of font files to check against cache @return list of FSFontInfo objects or null if cache is invalid
493 Saves font information to disk cache. Writes each FSFontInfo to a BufferedWriter. Handles exceptions by logging warnings or debug messages.
494 Retrieves font metrics for a given font name. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if not found
495 Sets the font provider and updates font mappings. @param fontProvider new FontProvider instance
496 Generates a mapping from glyph ID to character code. @return Map of glyph IDs to character codes @throws IOException if an I/O error occurs during font processing
497 Loads a glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries for efficient map sizing @return GlyphList object or throws RuntimeException on error
498 Validates PNG chunk integrity. @param chunk the PNG chunk to validate @return true if valid, false otherwise
499 Constructs a new PDTilingPattern with given dictionary. @param dictionary the COSDictionary representing the pattern properties
500 Initializes a ShadedTriangle with given points and colors. @param p array of triangle vertices @param c 2D array of color values for each vertex
501 Constructs a PDShadingType3 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing Type 3 shading properties
502 Constructs a new instance of PDShadingType4. @param shadingDictionary COSDictionary containing shading properties
503 Constructs a new instance of PDShadingType5. @param shadingDictionary COSDictionary containing shading properties
504 Ends text clipping by applying buffered clips and resetting state.
505 Sets the current clipping path on the graphics context. Updates the clipping paths if they have changed since the last update.
506 Creates a PDSoftMask from a COSBase object. @param dictionary the COSBase object containing soft mask properties @return PDSoftMask instance or null if invalid input
507 Initializes the signature designer with an image from the input stream. @param imageStream InputStream containing the signature image data @throws IOException if there is an I/O error reading the stream
508 Sets the signature image from a file path. @param path file path to the signature image @return PDVisibleSignDesigner instance for method chaining @throws IOException if there is an I/O error reading the file
509 Generates a unique partial name for a signature field. @return Unique partial name for the signature field
510 Constructs a PDButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField, if any
511 Constructs a PDSignatureField instance. @param acroForm the AcroForm containing the signature field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
512 Constructs a PDVariableText instance. @param acroForm the AcroForm containing the variable text field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
513 Retrieves adjusted X direction based on current direction. @return Adjusted X coordinate after applying text direction
514 Initializes a TextPosition object with specified properties. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of each character in the text @param spaceWidth width of a space character @param unicode Unicode string representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font in user space units @param fontSizeInPt size of the font in points
515 Adjusts the Y coordinate based on text direction. @return Adjusted Y coordinate for rendering text correctly.
516 Retrieves the width of the text element. @return absolute width considering current rotation
517 Gets adjusted width of text considering its direction. @return Width based on rotation angle determining text orientation.
518 Begins processing an article in the PDF with left-to-right text direction. @throws IOException if writing to the output fails
519 Writes a line of text to the output stream. @param line list of WordWithTextPositions objects representing words in the line @throws IOException if an I/O error occurs
520 Writes the end of a paragraph. Ensures proper paragraph closure and updates state. @throws IOException if an I/O error occurs during writing
521 Creates a WordWithTextPositions object with normalized text. @param word the original word to process @param wordPositions list of TextPosition objects for the word @return WordWithTextPositions containing normalized word and its positions
522 Converts Calendar to PDF date string. @param cal GregorianCalendar instance @return formatted date string or null if input is null
523 Converts Calendar to ISO 8601 formatted string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string with timezone
524 Converts byte array to hexadecimal string. @return Hexadecimal representation of the internal byte array
525 Writes an external CMS signature to the PDF document. @param cmsSignature byte array containing the CMS signature @throws IOException if there's an error writing the signature or insufficient space
526 Writes the COSName to a PDF output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
527 Writes an array of bytes as hexadecimal characters to an output stream. @param bytes the byte array to convert and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
528 Sorts a list using the iterative merge sort algorithm. @param list list to be sorted @param cmp comparator defining the order of elements
529 Rotates the matrix by a specified angle around the origin. @param theta angle of rotation in radians
530 Applies translation to the current text matrix. @param tx horizontal translation factor @param ty vertical translation factor
531 Applies translation to the matrix using vector coordinates. @param vector Vector containing translation factors
532 Concatenates two matrices. @param a first transformation matrix @param b second transformation matrix @return new Matrix representing concatenated transformations
533 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs during writing
534 Detects the file type from a BufferedInputStream. @param inputStream input stream containing file data @return FileType object or null if type cannot be determined @throws IOException if stream does not support mark/reset or ends prematurely
535 Processes a PDF operator by its string representation and operands. @param operation PDF operator string @param arguments list of operands for the operator @throws IOException if an I/O error occurs during processing
536 Initializes a new PDFMarkedContentExtractor with specified encoding. Sets up operators for handling marked content sequences and drawing objects. @param encoding character encoding to use for text extraction
537 Initializes PDFTextStripper with operators for handling marked content.
538 Creates a new PDMarkedContent instance. @param tag COSName representing the content tag @param properties COSDictionary containing content properties @return PDArtifactMarkedContent if tag is ARTIFACT, else PDMarkedContent
539 Retrieves an item from the dictionary by its string key. @param key the string representation of the PDF name @return the COSBase object or null if the key is not found
540 Checks if the dictionary contains a key by its string representation. @param name string representation of the PDF name @return true if the key exists, false otherwise
541 Retrieves a PDF filter by its name. @param filterName the name of the filter to retrieve @return the Filter instance or throws an exception if not found @throws IOException if the specified filter is invalid
542 Parses a COSName from the PDF source. @return COSName object representing the parsed name @throws IOException if an I/O error occurs or parsing fails
543 Initializes a PDColor from a COSArray and color space. @param array COSArray containing color components and optional pattern name @param colorSpace associated color space for the color
544 Parses a hexadecimal string into a COSString. @param hex the hexadecimal string to parse @return COSString object representing the parsed bytes @throws IOException if the hex string is invalid and FORCE_PARSING is false
545 Creates a COSArray from a list of integers. @param integer list of integers to convert @return COSArray containing COSInteger objects
546 Creates a COSArray from a list of strings. @param strings list of string names to convert @return COSArray containing COSName objects
547 Creates a COSArray from a list of strings. @param strings list of string values to be converted @return COSArray containing COSString objects
548 Initializes a new COSArrayList with empty underlying structures. @param none @return void
549 Initializes a COSArrayList with a dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key in the dictionary for this list
550 Constructs a new PDPageDestination with an empty COSArray.
551 Constructs a PDRectangle from coordinates and dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
552 Constructs a PDRectangle from a BoundingBox. @param box the bounding box defining rectangle coordinates
553 Sets the list of filters for the PDF stream. @param filters list of filter names to apply
554 Sets alternate color spaces for the PDF stream. @param list of PDColorSpace objects representing alternate color spaces
555 Creates a new COSStream for storing data. @return newly created COSStream object
556 Initializes a new COSStream without a specific cache. Uses null as the default stream cache.
557 Constructs a COSStream with a cache and a read view. @param streamCache the cache for managing stream data @param randomAccessReadView the view for reading stream data @throws IOException if an I/O error occurs
558 Returns an unmodifiable view of this dictionary. @return COSDictionary with restricted modifications
559 Retrieves the current decode result. Returns a default DecodeResult if none are available. @return DecodeResult object
560 Retrieves resources associated with the form XObject. @return PDResources object or empty resources if key exists but is null, null if not found
561 Default constructor for PDAttributeObject. Initializes a new empty PDDictionaryWrapper.
562 Constructs a new PDUserProperty with the specified user attribute object. @param userAttributeObject the user attribute object to manage
563 Constructs a new empty PDOutlineNode.
564 Constructs a new empty PDDestinationNameTreeNode. Initializes with a default COSDictionary for storing destinations.
565 Constructs a new PDEmbeddedFilesNameTreeNode. Initializes an empty node with an associated COSDictionary.
566 Constructs a new PDJavascriptNameTreeNode. Initializes with an empty COSDictionary.
567 Initializes a new empty PDNameTreeNode. Creates an associated COSDictionary for storing name-value pairs.
568 Constructs a PDNonTerminalField instance. @param acroForm the AcroForm containing the field
569 Initializes a new terminal field within a PDF form. @param acroForm the AcroForm containing the field
570 Clips the current graphics state to a specified rectangle. @param rectangle the PDRectangle to use for clipping
571 Retrieves the bounding box of an appearance stream after applying its transformation matrix. @param appearanceStream the appearance stream to process @return Rectangle2D representing the transformed bounding box
572 Initializes graphics state with a given page rectangle. @param page PDRectangle representing the page boundaries
573 Retrieves the left position of the bounding box. @return integer value representing the left coordinate
574 Retrieves the left coordinate of the rectangle. @return left coordinate as an integer
575 Retrieves the bottom coordinate of the rectangle. @return integer value representing the bottom coordinate
576 Retrieves the right coordinate of the rectangle. @return integer value representing the right coordinate
577 Retrieves the top coordinate of the rectangle. @return top coordinate as an integer
578 Retrieves the top coordinate of the bounding box. @return integer value representing the top coordinate
579 Retrieves the left coordinate of the destination. @return integer value representing the left position or -1 if invalid
580 Retrieves the top coordinate of the destination. @return integer value representing the top position or -1 if out of bounds
581 Checks if the destination fits the bounding box. @return true if the destination type is bounded, false otherwise
582 Checks if the destination fits the bounding box. @return true if it fits, false otherwise
583 Checks if the destination fits the bounding box. @return true if the type is bounded, false otherwise
584 Constructs a COSDocument instance with an in-memory stream cache.
585 Initializes the COSParser with PDF source and security settings. @param source PDF file to be parsed @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param keyAlias alias of the key in the keystore @param streamCacheCreateFunction function to create the stream cache @throws IOException if an I/O error occurs during initialization
586 Retrieves or creates a COSObjectKey using object number and generation. Utilizes caching for performance optimization in large PDFs. @param num object number (must be non-negative) @param gen generation value (must be non-negative) @return COSObjectKey associated with the given number and generation
587 Searches for PDF objects by scanning from the start to the last EOF marker. Uses whitespace and object markers to identify and record object IDs and offsets.
588 Searches for object stream offsets in a PDF. @return Map of offsets to COSObjectKey or empty if none found @throws IOException if an I/O error occurs
589 Parses cross-reference stream entries. @param resolver object to resolve parsed xref entries @throws IOException if an I/O error occurs during parsing
590 Finds and validates the COSObjectKey at a given offset. @param objectKey initial object key to search for @param offset file position to start searching @param xrefOffset map of object keys to their offsets @return validated COSObjectKey or null if not found @throws IOException if an I/O error occurs during reading
591 Parses an XRef table in a PDF document. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
592 Creates an OutputStream for writing to the COSStream without filters. @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
593 Creates an OutputStream for writing to the PDF stream with specified filter. @param filter the filter to be applied during data writing @return OutputStream for filtered data writing @throws IOException if I/O error occurs or multiple writers are opened
594 Initializes a new instance with an empty file name.
595 Sets the file name for this specification. @param fileName name of the file to be set
596 Initializes a named destination from a given string. @param dest destination name as a string
597 Sets the named destination. @param dest destination string to be set @throws IOException if an I/O error occurs
598 Retrieves a string value at the specified index. @param index position of the object in the array @return Decoded string or null if not found or not a COSString
599 Retrieves the current value of the button. @return The string representation of the button's value or "Off" if not set.
600 Sets whether the COS object needs an update. @param flag true if the object requires updating, false otherwise
601 Marks the document as modified. Calls update(boolean) with true.
602 Initializes a new PDTransparencyGroup with a given PDStream. @param stream PDStream containing the transparency group's data
603 Creates a thumbnail image from a COSStream. @param cosStream the stream containing the thumbnail data @return PDImageXObject representing the thumbnail
604 Retrieves the mask associated with the image. @return PDImageXObject representing the mask or null if none exists
605 Retrieves the soft mask image associated with this image. @return PDImageXObject representing the soft mask or null if none exists
606 Reads a string from the PDF source. @return the read string @throws IOException if an I/O error occurs
607 Reads and verifies an expected string from the PDF source. @param expectedString the string to expect in the PDF @param skipSpaces flag to determine if leading spaces should be skipped @throws IOException if the expected string is not found or an I/O error occurs
608 Reads a string of specified length from the PDF source. @param length maximum number of characters to read @return read string or empty if no valid characters found @throws IOException if an I/O error occurs
609 Reads and parses an integer from the PDF source. @return parsed integer value @throws IOException if an I/O error occurs or parsing fails
610 Reads a long integer from the PDF source. @return parsed long value @throws IOException if an I/O error occurs or parsing fails
611 Calculates a fixed offset for an XRef table/stream. @param objectOffset the initial offset of the XRef table/stream @return the corrected offset or 0 if not found @throws IOException if an I/O error occurs during calculation
612 Saves the FDF document to an output stream. @param output the OutputStream to write FDF data to @throws IOException if an I/O error occurs during writing
613 Begins a text block in the PDF content stream. Throws an exception if already in text mode.
614 Ends text mode and writes the "ET" operator. @throws IOException if an I/O error occurs during writing
615 Moves the cursor to the next line in text mode. @throws IOException if an I/O error occurs during writing
616 Saves the current graphics state. Throws IllegalStateException if in text mode. Duplicates top elements of color and font stacks. Writes 'q' operator to PDF stream. @throws IOException if an I/O error occurs during writing
617 Restores the previous graphics state. Throws exception if called within text mode. Pops from color space stacks and writes restore operator. @throws IOException if an I/O error occurs during writing
618 Strokes the current path. Throws exception if in text mode. @throws IOException if I/O error occurs during writing
619 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
620 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs during writing
621 Applies even-odd rule to fill the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during writing
622 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
623 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs during writing
624 Closes the path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
625 Closes path, fills it using even-odd rule, and strokes it. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
626 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
627 Clips the current path to the non-zero winding rule. @throws IOException if an I/O error occurs during writing
628 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
629 Sets the line join style for PDF drawing. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
630 Sets the line cap style. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
631 Ends marked content in the PDF stream. @throws IOException if an I/O error occurs during writing
632 Sets the text rendering mode. @param rm the new RenderingMode to be applied @throws IOException if an I/O error occurs during writing
633 Constructs a PDDocument instance. @param doc COSDocument representing the PDF content
634 Constructs a PDAppearanceStream from a COSStream. @param stream underlying COSStream object representing the appearance stream
635 Initializes a PDTransparencyGroup from a COSStream and resource cache. @param stream underlying COSStream object representing the transparency group @param cache ResourceCache for managing shared resources
636 Constructs a PDLayoutAttributeObject with a specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
637 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
638 Constructs a PDPrintFieldAttributeObject with a specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
639 Constructs a PDTableAttributeObject with a specified COSDictionary. @param dictionary the underlying COSDictionary representing table attributes
640 Retrieves current document access permissions. Initializes with full access rights for owners if not set. @return AccessPermission object representing current permissions
641 Computes the appropriate PDF revision number based on document version and permissions. @param version current document version @return computed revision number for security settings
642 Encrypts data using RC4 algorithm. @param finalKey encryption key (1-32 bytes) @param input plaintext byte array to encrypt @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
643 Reads from an input stream and writes encrypted data to an output stream. @param data InputStream containing plaintext data @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
644 Prepares a string for SASL use with unassigned codepoints allowed. @param str input string to prepare @return normalized and validated string or throws exception if invalid
645 Prepares a stored string for SASL use. @param str input string to prepare @return normalized and validated string or throws exception if invalid
646 Computes user password for PDF encryption. @param ownerPassword user-provided owner password @param owner document's owner entry @param encRevision PDF encryption revision @param length desired key length @return byte array containing the computed user password @throws IOException if an I/O error occurs during encryption
647 Adds TrueType collection fonts to the font provider. @param ttcFile TrueType collection file to process
648 Adds TrueType font information to the list. @param fontHeaders font header data @param file font file @param hash font hash
649 Adds a Type1 font from the specified PFB file. @param pfbFile PFB font file to add
650 Retrieves the current FontProvider. Initializes with DefaultFontProvider if not set. @return FontProvider instance
651 Writes CID to Unicode mappings to an output stream in CMap format. @param out OutputStream to write the CMap data @throws IOException if an I/O error occurs
652 Validates the state of a PNGConverter. @param state the converter state to validate @return true if valid, logs errors and returns false otherwise
653 Initializes a new CoonsPatch with specified control points and colors. @param points array of control points defining the patch shape @param color 2D array representing corner colors for shading
654 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects representing vertices and colors @return List of ShadedTriangle objects forming the patch
655 Initializes a TensorPatch with specified control points and colors. @param tcp array of 16 control points in specific order @param color 2D array representing corner colors
656 Retrieves data to be signed for a PDF document. @return InputStream containing the data ready for signing @throws IOException if an I/O error occurs
657 Constructs a PDCheckBox instance. @param acroForm the AcroForm containing the checkbox @param field the COSDictionary representing checkbox attributes @param parent the parent PDNonTerminalField, if any
658 Constructs a PDPushButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField, if any
659 Constructs a PDRadioButton instance. @param acroForm the AcroForm containing the button @param field the COSDictionary representing button attributes @param parent the parent PDNonTerminalField, if any
660 Constructs a PDChoice instance. @param acroForm the AcroForm containing the choice field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
661 Constructs a PDTextField instance. @param acroForm the AcroForm containing the text field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
662 Merges a diacritic character into the text position. @param diacritic TextPosition object containing the diacritic to merge
663 Determines if a new paragraph should start based on text position. @param position current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line's position wrapper @param maxHeightForLine maximum height for a line
664 Checks if the current TextPosition contains another TextPosition. @param tp2 the other TextPosition to check @return true if there is significant overlap in both X and Y coordinates, false otherwise
665 Checks if the current TextPosition completely contains another. @param tp2 The other TextPosition to check. @return True if this TextPosition fully encompasses tp2, otherwise false.
666 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs during writing
667 Normalizes and adds words to the line builder. @param normalized list to store processed words @param lineBuilder builds the current line of text @param wordPositions positions of words in the document @param item current LineItem being processed @return updated lineBuilder after processing the item
668 Converts a date string to a Calendar instance. @param text input date string to convert @return Calendar object or null if conversion fails
669 Writes a COSName to the PDF output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
670 Writes a COSName operand to the PDF stream. @param name the COSName to write @throws IOException if an I/O error occurs
671 Writes a byte array as a PDF string to the given output stream. Handles ASCII and non-ASCII characters accordingly. @param bytes the byte array to write @param forceHex forces writing in hexadecimal format @param output the OutputStream to write to @throws IOException if an I/O error occurs
672 Saves the current graphics state by cloning and pushing onto the stack.
673 Saves the current graphics stack by creating a clone of its top state. @return The original graphics stack before saving
674 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs during writing
675 Moves the text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during writing
676 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs during writing
677 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
678 Sets the stroking color to a grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during writing
679 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs during writing
680 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
681 Sets the non-stroking color to a grayscale value. @param g grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
682 Adds a rectangle to the PDF content stream. @param x The x-coordinate of the lower-left corner. @param y The y-coordinate of the lower-left corner. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException if an I/O error occurs during writing
683 Draws a cubic Bézier curve. @param x1,y1,x2,y2 control points for the curve @param x3,y3 end point of the curve @throws IOException if an I/O error occurs during writing
684 Draws a cubic Bezier curve with initial point replicated. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs during writing
685 Draws a cubic Bézier curve with the first control point replicated. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point @param y3 y-coordinate of the end point @throws IOException if an I/O error occurs during writing
686 Moves the current point to (x, y) in the graphics state. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
687 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during writing
688 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if an I/O error occurs during writing
689 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
690 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IOException if an I/O error occurs during writing
691 Writes an affine transformation matrix to the output stream. @param transform the AffineTransform object to write @throws IOException if an I/O error occurs during writing
692 Sets character spacing in the PDF content stream. @param spacing the spacing value to apply @throws IOException if an I/O error occurs during writing
693 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs during writing
694 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs during writing
695 Sets the text rise value. @param rise the amount to adjust text position vertically @throws IOException if an I/O error occurs during writing
696 Initializes PDF graphics stream engine for a page. @param page PDPage to render graphics on
697 Default constructor initializes PDFMarkedContentExtractor with no specific encoding. Uses null as default encoding in the primary constructor.
698 Constructs a new PDFTextStripperByArea instance. Initializes text extraction without bead separation.
699 Parses a hexadecimal string from the source. @return COSString object representing the parsed bytes @throws IOException if parsing fails due to invalid characters or missing closing bracket
700 Sets file filters for the PDF stream. @param filters list of filter names to apply
701 Constructs a default PDRectangle with zero dimensions at the origin.
702 Constructs a PDRectangle with specified width and height at origin. @param width rectangle width @param height rectangle height
703 Creates a PDRectangle based on bounding box coordinates. @return PDRectangle representing the bounding box area
704 Calculates the difference rectangle between annotation and bounding box. @return PDRectangle representing the difference or null if no annotation rect
705 Returns a new PDRectangle with specified padding applied to the original. @param rectangle original PDRectangle @param padding amount of padding to add (in all directions) @return new PDRectangle with adjusted dimensions and position
706 Adjusts a rectangle by adding differences to its dimensions. @param rectangle the original PDRectangle to adjust @param differences array of four floats representing adjustments [left, bottom, right, top] @return new PDRectangle with adjusted dimensions or original if differences are invalid
707 Applies differences to a PDF rectangle. @param rectangle original PDRectangle object @param differences array of 4 floats for x, y, width, height adjustments @return new PDRectangle with applied differences or original if invalid input
708 Applies padding to a rectangle. @param box original PDRectangle @param padding amount of padding to add @return new PDRectangle with applied padding
709 Initializes a new PDFXRefStream with a COS document. @param cosDocument the COS document to associate with this stream
710 Creates a new PDObjectStream within a PDF document. @param document the PDDocument to add the stream to @return newly created PDObjectStream object
711 Initializes a new PDStream associated with a document. @param document PDDocument object to which the stream belongs
712 Initializes a new PDStream with a given document. @param document the COSDocument to associate with this stream
713 Initializes a PDStream from an InputStream. @param doc PDDocument to associate with the stream @param input InputStream containing data for the PDF stream @param filters COSBase object representing filters for the stream data @throws IOException if I/O error occurs during initialization
714 Creates a COSStream from an InputStream for PDF document. @param document PDDocument to store the stream @param rawInput InputStream containing raw data @return COSStream created from input data @throws IOException if I/O error occurs
715 Encodes input stream into output stream. @param input source data stream @param encoded destination for encoded data @param parameters configuration settings for encoding @param index current filter index (unused)
716 Constructs a new PDDefaultAttributeObject. Initializes an empty COSDictionary to manage PDF attributes.
717 Initializes a new PDUserAttributeObject. Sets the owner to OWNER_USER_PROPERTIES by default.
718 Default constructor initializes an empty COSDictionary.
719 Constructs a new empty PDF outline item.
720 Constructs a PDVariableText instance. @param acroForm the AcroForm containing the field
721 Initializes the COSParser with PDF source and security settings. @param source PDF file to be parsed @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param keyAlias alias of the key in the keystore @throws IOException if an I/O error occurs during initialization
722 Initializes a PDFParser with specified PDF source and security settings. @param source PDF file to be parsed @param decryptionPassword password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create the stream cache @throws IOException if an I/O error occurs during initialization
723 Parses a COS dictionary value from PDF source. @return Parsed COSBase object or null if invalid @throws IOException if I/O error occurs during parsing
724 Retrieves COS object offsets using brute force search. @return Map of COSObjectKey to offset @throws IOException if an I/O error occurs during parsing
725 Creates an OutputStream for writing to the PDF stream without filters. @return OutputStream for writing data @throws IOException if I/O error occurs or multiple writers are opened
726 Writes byte array to the appearance stream's output stream. @param data byte array containing data to write @param appearanceStream PDAppearanceStream object to write to @throws IOException if I/O error occurs during writing
727 Initializes a new content stream for PDF appearance with optional compression. @param appearance the PDAppearanceStream to write to @param compress whether to enable compression (FLATE_DECODE) @throws IOException if I/O error occurs or multiple writers are opened
728 Clears all elements from the COSArray and marks it as modified.
729 Removes all specified COSBase objects from the array. @param objectsList collection of COSBase objects to remove
730 Retains only the elements contained in the specified collection. @param objectsList collection of COSBase objects to retain
731 Sets an integer value at a specified index. @param index position in the array @param intVal integer value to set
732 Removes and returns the element at the specified index. @param i index of the element to remove @return the removed COSBase object or null if index is out of bounds
733 Removes a COSBase object from the array. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
734 Clears all key-value pairs from the dictionary and marks it as modified.
735 Removes an item from the dictionary by its key. @param key the COSName key of the item to remove
736 Updates the document state if origins differ. @param updateState current update state to compare and potentially update
737 Sets the base object to null and marks the document as modified.
738 Sets the origin document state for this update. @param originDocumentState the new origin document state @param dereferencing true if dereferencing is in progress
739 Reads and validates the generation number from a PDF. @return parsed generation number @throws IOException if invalid or I/O error occurs
740 Reads and validates an object number from the PDF source. @return parsed object number @throws IOException if parsing fails or number exceeds threshold
741 Saves the FDF document to a specified file. @param fileName the File object representing the output location @throws IOException if an I/O error occurs during writing
742 Begins a text block in the PDF content stream. Throws an exception if already in text mode.
743 Begins a text block in the PDF content stream. Throws an exception if already in text mode.
744 Begins a text block in the PDF content stream. Throws an exception if already in text mode.
745 Begins a text block in the PDF content stream. Throws an exception if already in text mode.
746 Ends text mode and writes the "ET" operator. @throws IOException if an I/O error occurs during writing
747 Ends text mode and writes the "ET" operator. @throws IOException if an I/O error occurs during writing
748 Ends text mode and writes the "ET" operator. Ensures beginText() was called prior. @throws IOException if an I/O error occurs during writing
749 Ends text mode and writes the "ET" operator. Must be preceded by beginText(). @throws IOException if an I/O error occurs during writing
750 Moves the cursor to the next line in text mode. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if not in text mode
751 Moves the cursor to the next line in text mode. Throws an exception if not in text mode.
752 Moves the cursor to the next line in text mode. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if not in text mode
753 Moves the cursor to the next line in text mode. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if not in text mode
754 Saves the current graphics state. Throws IllegalStateException if in text mode. Duplicates top elements of color and font stacks. Writes 'q' operator to PDF stream. @throws IOException if an I/O error occurs during writing
755 Saves the current graphics state. Throws IllegalStateException if in text mode. Duplicates top elements of color and font stacks. Writes 'q' operator to PDF stream. @throws IOException if an I/O error occurs during writing
756 Saves the current graphics state. Throws IllegalStateException if in text mode. Duplicates top elements of color and font stacks. Writes 'q' operator to PDF stream. @throws IOException if an I/O error occurs during writing
757 Saves the current graphics state. Throws IllegalStateException if in text mode. Duplicates top elements of color and font stacks. Writes 'q' operator to PDF stream. @throws IOException if an I/O error occurs during writing
758 Restores the previous graphics state. Throws exception if called within text mode. Pops from color space stacks and writes restore operator. @throws IOException if an I/O error occurs during writing
759 Restores the previous graphics state. Throws exception if called within text mode. Pops from color space stacks and writes restore operator. @throws IOException if an I/O error occurs during writing
760 Restores the previous graphics state. Throws exception if called within text mode. Pops from color space stacks and writes restore operator. @throws IOException if an I/O error occurs during writing
761 Restores the previous graphics state. Throws exception if called within text mode. Pops from color space stacks and writes restore operator. @throws IOException if an I/O error occurs during writing
762 Strokes the current path. Throws exception if in text mode. @throws IOException if I/O error occurs during writing
763 Strokes the current path in the PDF form. Throws exception if called within a text block. @throws IOException if I/O error occurs during writing
764 Strokes the current path. Throws exception if in text mode. @throws IOException if I/O error occurs during writing
765 Strokes the current path in the PDF content stream. Throws exception if called within a text block. @throws IOException if I/O error occurs during writing
766 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
767 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
768 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
769 Closes the current path and strokes it. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
770 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs during writing
771 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs during writing
772 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs during writing
773 Fills the current path using non-zero winding rule. Throws exception if called within a text block. @throws IOException if an I/O error occurs during writing
774 Applies even-odd rule to fill the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during writing
775 Applies even-odd rule to fill the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during writing
776 Applies even-odd rule to fill the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during writing
777 Applies even-odd rule to fill the current path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during writing
778 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
779 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
780 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
781 Fills and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
782 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs during writing
783 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs during writing
784 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs during writing
785 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs during writing
786 Closes the path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
787 Closes the path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
788 Closes the path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
789 Closes the path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
790 Closes path, fills it using even-odd rule, and strokes it. Throws IllegalStateException if called within a text block.
791 Closes path, fills it using even-odd rule, and strokes it. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
792 Closes path, fills it using even-odd rule, and strokes it. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
793 Closes path, fills it using even-odd rule, and strokes it. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
794 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
795 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
796 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
797 Closes the current path in the PDF content stream. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
798 Clips the current path to the non-zero winding rule. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
799 Clips the current path to the non-zero winding rule. Throws an exception if called within a text block. @throws IOException if an I/O error occurs during writing
800 Clips the current path to the non-zero winding rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
801 Clips the current path using non-zero winding rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
802 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
803 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
804 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
805 Clips the current path using the even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs during writing
806 Sets the line join style for PDF drawing. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
807 Sets the line join style in PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style values
808 Sets the line join style for PDF drawing. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
809 Sets the line join style in a PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if the line join style is invalid
810 Sets the line cap style in PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
811 Sets the line cap style in a PDF form content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is not within valid range
812 Sets the line cap style. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
813 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during writing
814 Ends marked content in the PDF stream. @throws IOException if an I/O error occurs during writing
815 Ends marked content in the PDF stream. @throws IOException if an I/O error occurs during writing
816 Ends marked content in the PDF stream. @throws IOException if an I/O error occurs during writing
817 Ends marked content in the PDF stream. @throws IOException if an I/O error occurs during writing
818 Sets the text rendering mode. @param rm the new RenderingMode to be applied @throws IOException if an I/O error occurs during writing
819 Sets the text rendering mode. @param rm the new RenderingMode to be applied @throws IOException if an I/O error occurs during writing
820 Sets the text rendering mode. @param rm the new RenderingMode to be applied @throws IOException if an I/O error occurs during writing
821 Sets the text rendering mode. @param rm the new RenderingMode to be applied @throws IOException if an I/O error occurs during writing
822 Retrieves the appearance stream for this entry. @return PDAppearanceStream object representing the appearance stream @throws IllegalStateException if the entry is not a stream
823 Constructs a PDExportFormatAttributeObject with a specified COSDictionary. @param dictionary the underlying COSDictionary to wrap
824 Parses input text using a tokenizer and syntax handler. @param input the CharSequence to be parsed @param handler the SyntaxHandler for processing tokens
825 Encrypts data using RC4 algorithm. @param finalKey byte array representing the encryption key (1-32 bytes) @param input InputStream containing plaintext data @param output OutputStream for encrypted data @throws IOException if an I/O error occurs
826 Computes encrypted key for PDF based on encryption revision. @param password user or owner password @param o owner entry bytes @param u user entry bytes @param oe owner encryption entry @param ue user encryption entry @param permissions document access permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword flag indicating if it's the owner password @return encrypted key byte array @throws IOException if encryption fails
827 Validates user password for PDF encryption. @param password user-provided password @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException if an I/O error occurs during validation
828 Adds TrueType or OpenType font information to the list. @param ttfFile TrueType/OpenType font file
829 Finds a font by format and PostScript name with various fallbacks. @param format the font format to match @param postScriptName the PostScript name of the font @return FontBoxFont instance if found, otherwise null
830 Constructs a new instance of PDShadingType6. @param shadingDictionary COSDictionary containing Type 6 shading properties
831 Constructs a new instance of PDShadingType7. @param shadingDictionary COSDictionary containing Type 7 shading properties
832 Constructs a PDComboBox instance. @param acroForm the AcroForm containing the combo box field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
833 Constructs a PDListBox instance. @param acroForm the AcroForm containing the list box field @param field the COSDictionary representing the field attributes @param parent the parent PDNonTerminalField, if any
834 Processes a TextPosition, handling duplicates and diacritics. @param text TextPosition object to process
835 Processes a TextPosition for extraction, handling duplicates and diacritics. @param text the TextPosition to process
836 Removes spaces contained within other text positions. @param textList list of TextPosition objects to process
837 Handles line separation and paragraph formatting during text extraction. @param current current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line's position wrapper @param maxHeightForLine maximum height for a line @return updated last line start position @throws IOException if an I/O error occurs during writing
838 Normalizes and extracts words from a line of text. @param line list of LineItem objects representing the line @return List of WordWithTextPositions containing normalized words and their positions
839 Converts a COSString to a Calendar instance. @param text input date string in COSString format @return Calendar object or null if conversion fails
840 Begins marked content in PDF with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
841 Begins a marked content sequence in the PDF. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs during writing
842 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs during writing
843 Writes a COSString to the given output stream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
844 Writes a byte array as a PDF string to the given output stream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
845 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs during writing
846 Sets the text leading in the PDF content stream. @param leading distance between lines of text @throws IOException if an I/O error occurs during writing
847 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs during writing
848 Sets the text leading in the PDF content stream. @param leading the distance between lines of text @throws IOException if an I/O error occurs during writing
849 Moves the text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during writing or if not in text mode
850 Moves the text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
851 Moves the text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during writing or if not in text mode
852 Moves the text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during writing or not in text mode
853 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if an I/O error occurs during writing
854 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs during writing
855 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if an I/O error occurs during writing
856 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs during writing
857 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if an I/O error occurs
858 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
859 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs while writing to the content stream
860 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
861 Sets the stroking color to a grayscale value. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range 0..1 @throws IOException if an I/O error occurs during writing
862 Sets the stroking color to a grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during writing
863 Sets the stroking color to a grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during writing
864 Sets the stroking color to a grayscale value. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs during writing
865 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside the range [0, 1] @throws IOException if an I/O error occurs during writing
866 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs during writing
867 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if an I/O error occurs during writing
868 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside the range 0..1 @throws IOException if an I/O error occurs during writing
869 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if an I/O error occurs
870 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
871 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
872 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs
873 Sets the non-stroking color to a grayscale value. @param g grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing or invalid parameter
874 Sets the non-stroking color to a grayscale value. @param g grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
875 Sets the non-stroking color to a grayscale value. @param g grayscale value (must be between 0 and 1) @throws IllegalArgumentException if the parameter is outside the valid range @throws IOException if an I/O error occurs during writing
876 Sets the non-stroking color to a grayscale value. @param g grayscale value (must be between 0 and 1) @throws IOException if an I/O error occurs during writing
877 Adds a rectangle to the PDF content stream. @param x The x-coordinate of the lower-left corner. @param y The y-coordinate of the lower-left corner. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
878 Adds a rectangle to the PDF content stream. @param x The x-coordinate of the lower-left corner. @param y The y-coordinate of the lower-left corner. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
879 Adds a rectangle to the PDF content stream. @param x The x-coordinate of the lower-left corner. @param y The y-coordinate of the lower-left corner. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
880 Adds a rectangle to the PDF content stream. @param x The x-coordinate of the lower-left corner. @param y The y-coordinate of the lower-left corner. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException if an I/O error occurs or if called within a text block
881 Draws a cubic Bézier curve. @param x1,y1,x2,y2 control points for the curve @param x3,y3 end point of the curve @throws IOException if an I/O error occurs during writing
882 Draws a cubic Bézier curve. @param x1,y1,x2,y2 control points for the curve @param x3,y3 end point of the curve @throws IOException if an I/O error occurs during writing
883 Draws a cubic Bézier curve. @param x1,y1,x2,y2 control points for the curve @param x3,y3 end point of the curve @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
884 Draws a cubic Bézier curve. @param x1,y1,x2,y2 control points for the curve @param x3,y3 end point of the curve @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs during writing
885 Draws a cubic Bezier curve with initial point replicated. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs during writing or text mode is active
886 Draws a cubic Bezier curve with initial point replicated. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs during writing
887 Draws a cubic Bezier curve with initial point replicated. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs or called within a text block
888 Draws a cubic Bezier curve with initial point replicated. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs during writing or text mode is active
889 Draws a cubic Bézier curve with the first control point replicated. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point @param y3 y-coordinate of the end point @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs during writing
890 Draws a cubic Bézier curve with the first control point replicated. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point @param y3 y-coordinate of the end point @throws IOException if an I/O error occurs during writing
891 Draws a cubic Bézier curve with the first control point replicated. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point @param y3 y-coordinate of the end point @throws IOException if an I/O error occurs during writing or if called within a text block
892 Draws a cubic Bézier curve with the first control point replicated. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the end point @param y3 y-coordinate of the end point @throws IOException if an I/O error occurs during writing or text mode is active
893 Moves the current point to (x, y) in the graphics state. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
894 Moves the current point to (x, y) in the graphics state. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
895 Moves the current point to (x, y) in the graphics state. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
896 Moves the current point to (x, y) in the graphics state. @param x the x-coordinate of the new position @param y the y-coordinate of the new position @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
897 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during writing or if called within a text block
898 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during writing or if called within a text block
899 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
900 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during writing or if called within text mode
901 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if an I/O error occurs during writing
902 Sets the line width for drawing operations in PDF. @param lineWidth the desired line width @throws IOException if an I/O error occurs during writing
903 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if an I/O error occurs during writing
904 Sets the line width for drawing operations. @param lineWidth the desired line width in points @throws IOException if an I/O error occurs during writing
905 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
906 Sets the line dash pattern for drawing lines in a PDF form. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
907 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
908 Sets the line dash pattern for drawing lines. @param pattern array of float values representing dash lengths and gaps @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
909 Sets the miter limit for line joins. @param miterLimit the miter limit value to set (must be greater than 0) @throws IllegalArgumentException if miterLimit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
910 Sets the miter limit for line joins. @param miterLimit the miter limit value to set (must be > 0) @throws IOException if an I/O error occurs during writing
911 Sets the miter limit for line joins. @param miterLimit the miter limit value to set (must be greater than 0) @throws IOException if an I/O error occurs during writing
912 Sets the miter limit for line joins. @param miterLimit the miter limit value to set (must be > 0) @throws IOException if an I/O error occurs during writing
913 Sets the text matrix for transforming text in PDF. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during writing
914 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during writing
915 Sets character spacing in the PDF content stream. @param spacing the spacing value to apply @throws IOException if an I/O error occurs during writing
916 Sets character spacing in the PDF content stream. @param spacing the spacing value to apply @throws IOException if an I/O error occurs during writing
917 Sets character spacing in the PDF content stream. @param spacing the spacing value to apply @throws IOException if an I/O error occurs during writing
918 Sets character spacing in the PDF content stream. @param spacing the spacing value to apply @throws IOException if an I/O error occurs during writing
919 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs during writing
920 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs during writing
921 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs during writing
922 Sets word spacing in the current text state. @param spacing the desired word spacing value @throws IOException if an I/O error occurs during writing
923 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs during writing
924 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs during writing
925 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs during writing
926 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs during writing
927 Sets text rise value. @param rise vertical adjustment amount for text position @throws IOException if I/O error occurs during writing
928 Sets the text rise value. @param rise the amount to adjust text position vertically @throws IOException if an I/O error occurs during writing
929 Sets the text rise value for subsequent text. @param rise vertical adjustment amount for text position @throws IOException if an I/O error occurs during writing
930 Sets the text rise value for pattern content. @param rise vertical adjustment amount for text position @throws IOException if I/O error occurs during writing
931 Initializes a new PageDrawer with specified parameters. @param parameters configuration settings for rendering
932 Parses a COS string from the PDF source. Handles both regular and hexadecimal strings, including escape sequences. @return COSString object representing the parsed string @throws IOException if parsing fails due to invalid characters or format
933 Constructs an immutable rectangle with specified dimensions. @param width the width of the rectangle @param height the height of the rectangle
934 Retrieves the bounding box rectangle of the cloud-like shape. @return PDRectangle representing the bounding box area
935 Initializes a new PDMetadata object for a PDF document. @param document PDDocument object to which the metadata belongs
936 Constructs a new PDEmbeddedFile instance. @param document PDF document to associate the embedded file with
937 Constructs a PDXObject with a specified document and subtype. @param document PDDocument object to which the XObject belongs @param subtype COSName representing the subtype of the XObject
938 Constructs a PDImageXObject from a PDF document. @param document PDDocument containing the image data
939 Initializes a PDStream from an InputStream. @param doc PDDocument to associate with the stream @param input InputStream containing data for the PDF stream @throws IOException if I/O error occurs during initialization
940 Initializes a PDStream from an InputStream with a specific filter. @param doc PDDocument to associate with the stream @param input InputStream containing data for the PDF stream @param filter COSName representing the filter for the stream data @throws IOException if I/O error occurs during initialization
941 Initializes a PDStream from an InputStream with specified filters. @param doc PDDocument to associate with the stream @param input InputStream containing data for the PDF stream @param filters COSArray object representing filters for the stream data @throws IOException if I/O error occurs during initialization
942 Constructs a PDImageXObject from an encoded stream. @param document PDF document to store the image @param encodedStream InputStream containing encoded image data @param cosFilter COSBase object representing filter type @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace for the image @throws IOException if I/O error occurs during stream creation
943 Initializes a new PDLayoutAttributeObject with OWNER_LAYOUT as owner.
944 Initializes a new PDListAttributeObject with list owner.
945 Constructs a new PDPrintFieldAttributeObject with default settings. Sets the owner to OWNER_PRINT_FIELD by default.
946 Initializes a new table attribute object. Sets the owner to OWNER_TABLE by default.
947 Initializes the COSParser with a PDF source. @param source PDF file to be parsed @throws IOException if an I/O error occurs during initialization
948 Initializes a PDFParser with specified PDF source and security settings. @param source PDF file to be parsed @param decryptionPassword password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @throws IOException if an I/O error occurs during initialization
949 Validates and corrects cross-reference offsets using brute force if necessary. @throws IOException if an I/O error occurs during validation or parsing
950 Initializes a new content stream for a PDF appearance. @param appearance the PDAppearanceStream to write to @throws IOException if I/O error occurs
951 Initializes a new content stream for a PDF form XObject. @param form the PDFormXObject to write to @throws IOException if I/O error occurs or multiple writers are opened
952 Initializes a new content stream for a PDF appearance stream. @param doc the PDDocument to write to @param appearance the PDAppearanceStream to use @throws IOException if I/O error occurs or multiple writers are opened
953 Sets the highest value in the color table. @param high the maximum value to be set
954 Sets the page number for the destination. @param pageNumber the target page number
955 Removes a specified element from the list. @param o the element to remove @return true if the element was successfully removed, false otherwise @throws UnsupportedOperationException if the list is filtered
956 Removes element at specified index. @param index position of the element to remove @return removed COSBase object @throws UnsupportedOperationException if list is filtered
957 Clears all key-value pairs from both maps and marks them as modified.
958 Removes an entry by key from both the COSDictionary and the internal map. @param key the string representation of the PDF name to remove @return the value associated with the removed key, or null if not found
959 Recursively collects COSBase objects for document updates. @param array COSArray containing objects to process @return true if any descendant object demands parent update, false otherwise
960 Sets the origin document state without dereferencing. @param originDocumentState the new origin document state
961 Dereferences a child object and updates its origin document state. @param child the child object to dereference
962 Saves the FDF document to a specified file. @param fileName path to the output file @throws IOException if an I/O error occurs during writing
963 Draws a shape with specified line width, stroke, and fill options. @param lineWidth the width of the line @param hasStroke true if the shape should be stroked @param hasFill true if the shape should be filled @throws IOException if an I/O error occurs during drawing
964 Parses a CharSequence into an InstructionSequence. @param text the input text to be parsed @return the resulting InstructionSequence object
965 Encrypts or decrypts PDF object data. @param objectNumber unique identifier of the object @param genNumber generation number of the object @param data input stream containing original data @param output output stream for encrypted/decrypted data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
966 Validates owner password for given encryption revision. @param ownerPassword user-provided owner password @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException if an I/O error occurs during validation or unknown revision
967 Validates user password for PDF encryption. @param password user-provided password as a String @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException if an I/O error occurs during validation
968 Finds a FontBoxFont by PostScript name in various formats. @param postScriptName the PostScript name of the font @return FontBoxFont instance if found, otherwise null
969 Processes and writes text from a PDF page to output. Handles sorting, spacing, and formatting of text positions. @throws IOException if an I/O error occurs during processing
970 Begins marked content in PDF with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
971 Begins marked content block in PDF. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
972 Begins marked content in PDF with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
973 Begins marked content in PDF with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
974 Begins a marked content sequence in the PDF. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs during writing or invalid mcid
975 Begins a marked content sequence in the PDF. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs during writing or if mcid is negative
976 Begins a marked content sequence in the PDF. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence @throws IllegalArgumentException if mcid is negative @throws IOException if an I/O error occurs during writing
977 Begins a marked content sequence in the PDF. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence @throws IOException if an I/O error occurs during writing or if mcid is negative
978 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs during writing
979 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs during writing
980 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs during writing
981 Sets a marked content point in the PDF stream. @param tag COSName representing the marked content tag @throws IOException if an I/O error occurs during writing
982 Writes a COSString to the specified output stream and appends a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
983 Displays text at the current position in a PDF document. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
984 Draws a circle on the PDF content stream. @param cs the appearance content stream to draw on @param x the x-coordinate of the circle's center @param y the y-coordinate of the circle's center @param r the radius of the circle @throws IOException if an I/O error occurs during drawing
985 Draws a circle on the PDF content stream. @param cs the appearance content stream to draw on @param x the x-coordinate of the circle's center @param y the y-coordinate of the circle's center @param r the radius of the circle @throws IOException if an I/O error occurs during drawing
986 Draws an arrow on the PDF content stream. @param cs appearance content stream to draw on @param x starting x-coordinate of the arrow @param y starting y-coordinate of the arrow @param len length of the arrow @throws IOException if an I/O error occurs during drawing
987 Draws a diamond shape at the specified coordinates. @param cs content stream for drawing @param x center x-coordinate of the diamond @param y center y-coordinate of the diamond @param r radius of the diamond from its center to a vertex @throws IOException if an I/O error occurs during drawing
988 Draws a paperclip shape on the PDF content stream. @param contentStream the appearance content stream to draw on @throws IOException if an I/O error occurs during drawing
989 Sets line width for drawing operations, avoiding default value. @param lineWidth the desired line width @throws IOException if an I/O error occurs during writing
990 Sets the text matrix for transforming text in PDF. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during writing or if not in text mode
991 Sets the text matrix for transforming text in PDF. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during writing or not in text mode
992 Sets the text matrix for transforming text. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
993 Sets the text matrix for transforming text in a pattern content stream. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during writing
994 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during writing or text mode is active
995 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during writing or if in text mode
996 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during writing
997 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within text mode
998 Creates and configures a PageDrawer for rendering. @param parameters configuration settings for rendering @return configured PageDrawer instance
999 Constructs a PDFormXObject with a specified document. @param document PDDocument object to which the XObject belongs
1000 Initializes PDMetadata with a document and input stream. @param doc PDDocument to associate the metadata with @param str InputStream containing metadata data @throws IOException if I/O error occurs during initialization
1001 Constructs a PDEmbeddedFile from an InputStream. @param doc PDDocument to associate with the embedded file @param str InputStream containing data for the embedded file @throws IOException if I/O error occurs during initialization
1002 Constructs a PDEmbeddedFile object. @param doc PDDocument to associate with the embedded file @param input InputStream containing the file data @param filter COSName representing the filter for the stream data @throws IOException if I/O error occurs during initialization
1003 Prepares a PDImageXObject from byte array. @param document PDF document to store the image @param byteArray input image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace for the image @return PDImageXObject instance ready for PDF inclusion @throws IOException if I/O error occurs during processing
1004 Constructs a PDExportFormatAttributeObject. @param owner identifier for the attribute object's owner
1005 Initializes the FDFParser with a given FDF source. @param source FDF file to be parsed @throws IOException if an I/O error occurs during initialization
1006 Constructs a PDFParser with a PDF source and decryption password. @param source PDF file to be parsed @param decryptionPassword password for encrypted PDFs @throws IOException if an I/O error occurs during initialization
1007 Collects a COSBase object for processing. @param base the COSBase object to collect @return true if any descendant object demands parent update, false otherwise
1008 Sets the document's trailer dictionary and updates its state. @param newTrailer the new trailer dictionary to set
1009 Updates the document state and sets the origin document state for a child. @param child the child object to update
1010 Updates the document state and propagates changes to child objects. @param children iterable collection of COSBase objects representing child elements
1011 Retrieves the underlying COSBase object. Handles dereferencing and updates its state. @return COSBase object or null if not dereferenced
1012 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum unique identifier of the object @param genNum generation number of the object @throws IOException on I/O errors or security exceptions
1013 Encrypts a PDF stream using specified object number and generation number. @param stream the COSStream to be encrypted @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @throws IOException if I/O errors occur during encryption
1014 Decrypts a COSString using the specified object and generation numbers. @param string the COSString to decrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return decrypted COSBase object or original if decryption fails
1015 Encrypts a PDF string using specified object and generation numbers. @param string the COSString to be encrypted @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return encrypted COSBase object @throws IOException on I/O errors or security exceptions
1016 Validates owner password for a PDF document. Converts string password to bytes and delegates validation. @param password user-provided owner password as string @param user stored user entry bytes @param owner stored owner entry bytes @param permissions document access permissions @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes desired output key length in bytes @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException if an I/O error occurs during validation or unknown revision
1017 Initializes FileSystemFontProvider with a cache and loads fonts from local system. @param cache FontCache instance for caching font information
1018 Writes text from specified regions in a PDF page. Iterates over defined areas, processes and outputs text. @throws IOException if an I/O error occurs during processing
1019 Writes a COSBase object as a token to the PDF output stream. @param base the COSBase object to write @throws IOException if an I/O error occurs
1020 Writes text with positioning to PDF content stream. @param textWithPositioningArray array of Strings and Floats for text and positions @throws IOException if an I/O error occurs during writing
1021 Displays text at the current position in a PDF document. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
1022 Draws annotation style on PDF content stream. @param style type of annotation style to draw @param cs appearance content stream to draw on @param x starting x-coordinate @param y starting y-coordinate @param width dimension for shapes @param hasStroke true if the shape should be stroked @param hasBackground true if background color should be applied @param ending flag indicating arrow direction @throws IOException if an I/O error occurs during drawing
1023 Initializes a new PDTransparencyGroup with a specified PDF document. @param document PDDocument object to which the transparency group belongs
1024 Constructs a PDAppearanceStream with a specified PDF document. @param document PDDocument object to which the appearance stream belongs
1025 Creates a JPEG-encoded PDImageXObject from a BufferedImage. @param document PDF document to store the image @param image input BufferedImage @param quality JPEG compression quality (0.0f - 1.0f) @param dpi dots per inch for image resolution @return PDImageXObject containing the JPEG-encoded image @throws IOException if I/O error occurs during image processing
1026 Constructs a PDFParser with a PDF source. @param source PDF file to be parsed @throws IOException if an I/O error occurs during initialization
1027 Collects a COSDictionary for processing. @param dictionary the COSDictionary to collect @return true if any descendant object demands parent update, false otherwise
1028 Returns the set of collected COSBase objects. Initializes collection if not already done. @return Set of COSBase objects
1029 Adds a COSBase object to the array. @param object The COSBase object to add
1030 Adds a COSBase object at the specified index. Handles direct and indirect objects appropriately. @param i Index where the object should be added @param object The COSBase object to add
1031 Sets a COSBase object at the specified index. @param index position in the array @param object COSBase object to set
1032 Sets an item in the dictionary with a given key. @param key the COSName key for the item @param value the COSBase value to set or null to remove
1033 Adds all COSBase objects from the provided list to the array. @param objectsList collection of COSBase objects to add
1034 Adds all elements from the specified collection to this array at the specified position. @param i index at which to insert the first element from the specified collection @param objectList collection of COSBase objects to be added
1035 Updates document state with provided children. @param children COSArray of child elements to update
1036 Retrieves the COSBase object at the specified index. Handles dereferencing and updates its state. @param index position of the object in the array @return COSBase object or null if not dereferenced
1037 Removes a COSBase object from the array. If not found directly, checks for nested COSObjects and removes if match is found. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1038 Finds the index of a COSBase object in the array. Handles null and dereferenced objects. @param object the COSBase object to find @return index of the object or -1 if not found
1039 Checks if the dictionary contains a specific value. @param value the value to search for @return true if the value is found, false otherwise
1040 Retrieves the key associated with a given value. @param value the value to search for @return COSName key or null if not found
1041 Retrieves value by key from the dictionary. Handles COSObject dereferencing and COSNull conversion. @param key unique identifier for the value @return COSBase object or null if not found or is COSNull
1042 Collects indirect object keys from the dictionary and its nested structures. @param indirectObjects collection to store collected keys
1043 Retrieves the linearized dictionary from the PDF document. Searches through objects in ascending order by offset. @return COSDictionary containing linearization information or null if not found
1044 Closes the PDF document, releasing resources and streams. Ensures all COSStreams are closed and logs any exceptions.
1045 Collects and processes COSObject for PDF document updates. @param object the COSObject to collect and process @return true if any descendant demands parent update, false otherwise
1046 Accepts a visitor to process the underlying COSBase object. If the object is null, processes the COSNull instance instead. @param visitor ICOSVisitor instance for processing
1047 Checks if there is a self-reference in the PDF structure. @param parent the parent COSBase object @param value the COSBase object to check for self-reference @return true if self-reference exists, otherwise false
1048 Retrieves the length as a COSNumber from the given base object. Handles direct and referenced COSNumber objects. @param lengthBaseObj the base object containing the length information @return COSNumber representing the length or null if not found @throws IOException if there is an issue with reading the length
1049 Constructs a NormalXReference with specified byte offset, key, and object. @param byteOffset the byte offset of the referenced object in the PDF file @param key the COSObjectKey representing the reference @param object the COSBase object being referenced
1050 Retrieves or assigns a unique object key for a given PDF object. Handles COSObject instances by dereferencing and updating keys if necessary. @param obj the PDF object to process @return the assigned or existing COSObjectKey
1051 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object, or null if not found
1052 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
1053 Prepares a PDF stream object for writing. Adds the key and object to preparation lists if both are non-null. @param key unique identifier for the COS object @param object the COSBase object to prepare
1054 Outputs a curl template by drawing curves. @param template array of points defining the template @param x offset for x-coordinate @param y offset for y-coordinate @throws IOException if an I/O error occurs during writing
1055 Generates an arc segment for a PDF ellipse. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center x-coordinate @param cy center y-coordinate @param rx radius x @param ry radius y @param out list to store points if not null @param addMoveTo flag to add initial move-to command @throws IOException if I/O error occurs during writing
1056 Writes text with positioning to PDF content stream. @param textWithPositioningArray array of Strings and Floats for text and positions @throws IOException if an I/O error occurs during writing
1057 Writes text with positioning to PDF content stream. @param textWithPositioningArray array of Strings and Floats for text and positions @throws IOException if an I/O error occurs during writing
1058 Writes text with specified positions to PDF content stream. @param textWithPositioningArray array of Strings and Floats for text and positions @throws IOException if an I/O error occurs during writing
1059 Writes text with positioning to PDF content stream. @param textWithPositioningArray array of Strings and Floats for text and positions @throws IOException if an I/O error occurs during writing
1060 Displays text and writes a space followed by the SHOW_TEXT operator. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
1061 Displays text at the current position in a PDF document. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
1062 Displays text at the current position in a PDF document and writes a space. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
1063 Displays text at current position and appends a space. @param text the string to be displayed @throws IOException if an I/O error occurs during text display
1064 Creates a JPEG-encoded PDImageXObject from a BufferedImage. @param document PDF document to store the image @param image input BufferedImage @param quality JPEG compression quality (0.0f - 1.0f) @return PDImageXObject containing the JPEG-encoded image @throws IOException if I/O error occurs during image processing
1065 Returns an iterator over collected COSBase objects. Utilizes the getObjects() method to initialize and retrieve the collection. @return Iterator for COSBase objects
1066 Adds a COSObjectable object to the array. @param object The COSObjectable object to add
1067 Grows the array to a specified size, filling with a given COSBase object. @param size Desired size of the array @param object COSBase object to fill the array with
1068 Sets the array with float values. @param value array of floats to be set
1069 Retrieves and configures the cross-reference stream for a PDF document. @return Configured COSStream object @throws IOException if I/O operations fail
1070 Initializes a COSArrayList with an initial object and its associated COS structures. @param actualObject the actual Java object to manage @param item the COSBase item representing the object in PDF structure @param dictionary the parent COSDictionary containing this list @param dictionaryKey the key in the dictionary for this list
1071 Converts a list of objects to a COSArray. @param cosObjectableList List of objects to convert @return COSArray containing converted COSBase objects
1072 Initializes a PDRange with default values from 0 to 1. Sets up the internal COSArray with these bounds.
1073 Initializes a new FDFOptionElement with default empty strings.
1074 Initializes a new PDFontSetting with default settings. Sets up the fontSetting array with null and default size.
1075 Converts color components to a COSArray. @return COSArray containing color components and pattern name if applicable
1076 Initializes a PDDeviceN object with base DeviceN color space settings.
1077 Initializes a PDGamma object with zero RGB values. Constructs a COSArray and adds three COSFloat.ZERO elements to represent initial color values.
1078 Retrieves the alternate color space for the ICC profile. @return PDColorSpace instance representing the alternate color space @throws IOException if an error occurs during retrieval or creation
1079 Initializes a new PDIndexed object with default settings. Sets up the color space array for indexed RGB colors.
1080 Generates default range array for LAB color space. @return COSArray with min and max values for L, a, b components
1081 Initializes a PDPattern with given resources. @param resources PDF document resources
1082 Initializes a new PDSeparation object with default settings. Sets up the internal COSArray with separation type and placeholders.
1083 Initializes a PDTristimulus with zero values for X, Y, and Z.
1084 Initializes PDTristimulus with tristimulus values. @param array float array containing X, Y, Z values (up to 3 elements)
1085 Sets the transformation matrix for the form XObject. @param transform the AffineTransform object defining the transformation
1086 Creates a PDImageXObject from a JPEG byte array. @param document PDF document to add the image to @param byteArray JPEG image data as a byte array @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
1087 Converts the matrix to a COSArray for PDF representation. @return A COSArray containing transformation parameters.
1088 Sets a COSObjectable object at the specified index. @param index position in the array @param object COSObjectable object to set
1089 Sets an integer value at the specified index. @param index position in the array @param value integer to store
1090 Sets a PDF name at the specified index. @param index position in the array @param name string representation of the PDF name
1091 Sets a string at the specified index in the array. @param index position in the array @param string input string to be stored
1092 Sets the minimum value of the range. @param min the new minimum value for the range
1093 Sets the maximum value of the range. @param max the new maximum value to be set
1094 Sets the X coordinate of the lower-left corner. @param value the X coordinate to be set
1095 Sets the lower-left Y coordinate of the rectangle. @param value the Y coordinate value
1096 Sets the X coordinate of the upper-right corner. @param value the X coordinate to be set
1097 Sets the Y-coordinate of the upper right corner. @param value the Y-coordinate value
1098 Sets color at specified index. @param index position in the array @param colour PDGamma object representing the color
1099 Decrypts each element in the provided COSArray. @param array COSArray to be decrypted @param objNum object number for decryption context @param genNum generation number for decryption context
1100 Sets the option value. @param opt option string to be set
1101 Sets default appearance string. @param da appearance string to be set
1102 Sets the font size for the PDF document. @param size the desired font size
1103 Sets colorant names for DeviceN color space. @param names list of colorant names
1104 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to set or null to remove
1105 Sets the alternate color space. @param cs PDColorSpace object to set as alternate
1106 Sets the red component of the color. @param r value for the red component (0.0 to 1.0)
1107 Sets the green component of the color. @param g green value as float
1108 Sets the blue component of the color. @param b blue value to be set
1109 Sets the base color space. @param base PDColorSpace object to be set as base color space
1110 Sets the colorant name in the PDF document. @param name the new colorant name to set
1111 Sets the alternate color space for PDF rendering. @param colorSpace PDColorSpace object to set as alternate
1112 Sets the X tristimulus value. @param x the new X value
1113 Sets the Y tristimulus value. @param y the new Y value
1114 Sets the Z tristimulus value. @param z the Z component of the color
1115 Sets an item in the dictionary with a given key. @param key the COSName key for the item @param value the COSObjectable value to set or null to remove
1116 Sets a boolean value in the dictionary. @param key PDF name key for the boolean value @param value boolean value to set
1117 Sets a boolean value in the dictionary. @param key the COSName key for the item @param value the boolean value to set
1118 Sets an item in the dictionary using a string key. @param key the PDF name key for the item @param value the COSBase value to set or null to remove
1119 Sets a PDF name in the dictionary. @param key the COSName key for the item @param value string representation of the PDF name
1120 Sets a string value in the dictionary. @param key the COSName key for the item @param value the string value to set or null to remove
1121 Sets an integer item in the dictionary. @param key the COSName key for the item @param value the integer value to set
1122 Sets a long value in the dictionary. @param key the COSName key for the item @param value the long value to set
1123 Sets a float value in the dictionary. @param key the COSName key for the item @param value the float value to set
1124 Creates a COSStream from a dictionary and position data. @param dictionary source dictionary for stream items @param startPosition start position of the stream in the document @param streamLength length of the stream @return new COSStream object @throws IOException if an I/O error occurs
1125 Sets the encryption dictionary in the document's trailer. @param encDictionary the COSDictionary containing encryption settings
1126 Sets the document ID in the PDF trailer. @param id COSArray containing the document ID
1127 Merges entries from source dictionary into destination dictionary. @param src source PDF COSDictionary to merge from @param dst destination PDF COSDictionary to merge into @param cloner utility for cloning COSBase objects @param exclude set of keys to exclude from merging @throws IOException if an I/O error occurs during cloning
1128 Parses the next token from the PDF content stream. @return Parsed object (COSBase or Operator) or null if end of stream is reached @throws IOException if an I/O error occurs during parsing
1129 Initializes a new PDDocument with a custom stream cache function. @param streamCacheCreateFunction function to create stream caches
1130 Sets document information. @param info PDDocumentInformation object to be set
1131 Initializes a new PDDocumentCatalog. @param doc the PDF document to associate with this catalog
1132 Sets the document's thread list. @param threads list of PDThread objects representing threads in the document
1133 Sets the output intents for the document. @param outputIntents list of PDOutputIntent objects representing output intents
1134 Sets the crop box for the PDF page. @param cropBox PDRectangle defining the new crop box or null to remove it
1135 Sets the content streams of the PDF page. @param contents list of PDStream objects representing content streams
1136 Sets thread beads for the page. @param beads list of PDThreadBead objects representing annotations
1137 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to add
1138 Sets the viewports for the page. @param viewports list of PDViewportDictionary objects or null to remove
1139 Initializes a new PDPageTree with an empty page structure. Sets up the root dictionary and initializes necessary attributes.
1140 Adds an element to the list and updates parent dictionary. @param o element to add @return true if element was added successfully
1141 Clears all elements and resets associated dictionary. If a parent dictionary exists, sets the item to null.
1142 Sets an element in the COSArrayList. @param index position in the list @param element new element to set @return replaced element @throws UnsupportedOperationException if list is filtered
1143 Adds an element at the specified index. @param index position where the element should be added @param element the COSBase object to add Throws UnsupportedOperationException if adding is filtered.
1144 Puts a key-value pair into the dictionary. @param key The PDF name as a string key @param value The COSBase value to be stored @return The previous value associated with the key, or null if none
1145 Constructs and returns a COSDictionary representing page labels. @return A COSDictionary containing page indices and their corresponding labels
1146 Initializes a new complex file specification. Sets up the internal dictionary and marks it as a FileSpec type.
1147 Constructs a PDComplexFileSpecification from a given dictionary. Initializes the file specification with default values if no dictionary is provided. @param dict existing COSDictionary or null to create a new one
1148 Sets range values for the PDF function. @param rangeValues COSArray containing the range values to set
1149 Sets the domain values for the PDF function. @param domainValues COSArray representing the domain range
1150 Sets encoding values for the function. @param encodeValues array of COSBase representing the encoding values
1151 Sets the decode values for the function. @param decodeValues array containing decode parameters
1152 Sets the K value in the COS dictionary. @param k the COSBase value to set for key K
1153 Sets the class map for the structure tree. @param classMap mapping of class names to attributes or lists of PDAttributeObjects
1154 Sets user properties for the document. @param userProperties list of PDUserProperty objects to set
1155 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern or null to reset
1156 Sets the cryptographic filter method for PDF encryption. @param cfm the COSName representing the crypt filter method
1157 Sets the encryption filter for PDF documents. @param filter name of the filter to apply
1158 Sets the owner encryption key. @param o byte array representing the owner key
1159 Sets the user encryption key. @param u byte array representing the user key
1160 Sets the owner encryption key for PDF document. @param oe byte array representing the owner encryption key @throws IOException if an I/O error occurs while setting the key
1161 Sets the user encryption key. @param ue byte array representing the user encryption key @throws IOException if an error occurs during setting the item
1162 Sets the encryption recipients. @param recipients array of recipient byte arrays @throws IOException if an I/O error occurs
1163 Sets the name of the stream filter. @param streamFilterName the COSName representing the stream filter
1164 Sets the name of the string filter. @param stringFilterName the COSName representing the string filter
1165 Sets permissions for the PDF document. @param perms byte array representing permissions @throws IOException if an I/O error occurs
1166 Removes V4.5 filters from the encryption settings. Clears CF, STM_F, and STR_F entries in the dictionary.
1167 Initializes a new FDFAnnotation with an empty COSDictionary. Sets the annotation type to "Annot".
1168 Sets the annotation's color. @param c Color object representing the new color or null to reset
1169 Sets rich content of the annotation. @param rc rich content string to be applied
1170 Sets the interior color of the circle annotation. @param color Color object representing the desired interior color
1171 Sets the callout line points for the annotation. @param callout array of float values representing the callout line points
1172 Sets the ink list for the annotation. @param inklist List of float arrays representing ink coordinates
1173 Sets the coordinates of the line annotation. @param line array containing start and end coordinates [x1, y1, x2, y2]
1174 Sets the interior color of the line annotation. @param color Color object representing the new interior color or null to remove it
1175 Sets the polygon vertices. @param vertices array of vertex coordinates
1176 Sets the interior color of the polygon. @param color the Color object to set, or null for no fill
1177 Sets the vertex coordinates of the polyline annotation. @param vertices array of float values representing vertex coordinates
1178 Sets the interior color of the polyline annotation. @param color Color object representing the desired interior color
1179 Sets the interior color of the square annotation. @param color the Color object to set or null for no fill
1180 Sets coordinates for text markup annotation. @param coords array of float values representing the coordinates
1181 Sets the document ID in the FDF dictionary. @param id COSArray representing the document ID
1182 Sets the list of form fields in the FDF document. @param fields List of FDFField objects representing form fields
1183 Sets the list of FDF pages. @param pages list of FDFPage objects to manage
1184 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to set
1185 Sets differences stream in FDF document. @param diff COSStream containing differences data
1186 Sets the list of embedded FDF files in the document. @param embedded list of PDFileSpecification objects representing embedded FDFs
1187 Sets the child fields of this FDFField. @param kids list of child FDFField objects
1188 Sets the value of the field. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during setting the value
1189 Sets the value of the form field. @param value the new value to be set
1190 Sets the field flags for the form field. @param ff integer representing the field flags
1191 Sets the field flags for the form field. @param ff the integer value representing the field flags
1192 Sets clear field flags for the form field. @param ff integer representing the clear field flags
1193 Sets widget field flags. @param f integer representing the field flags
1194 Sets the widget field flags. @param ff integer representing field flags or null to clear
1195 Sets the clear widget field flags. @param ff integer representing field flags
1196 Sets rich text value for the field. @param rv COSString containing the rich text value
1197 Sets rich text content for the field. @param rv COSStream containing rich text data
1198 Sets JavaScript code to execute before form submission. @param before JavaScript code string
1199 Sets the JavaScript action to execute after form processing. @param after script to be executed after form actions
1200 Sets document-level JavaScript actions from a map. @param map key-value pairs of action names and PDActionJavaScript objects
1201 Sets the list of templates for this FDF page. @param templates list of FDFTemplate objects to be set
1202 Sets form fields in the FDF template. @param fields list of FDFField objects to be added
1203 Builds CID font widths array for embedding. @param cidToGid mapping of CIDs to GIDs @throws IOException if an I/O error occurs
1204 Initializes a new PDFont instance. Sets up the font dictionary and initializes related attributes.
1205 Initializes a new PDFontDescriptor with a COSDictionary. Sets the dictionary type to FONT_DESC.
1206 Sets the font name for the PDF font descriptor. @param fontName the name of the font to set
1207 Sets the font family for this descriptor. @param fontFamily name of the font family to set
1208 Sets the font stretch for the PDFontDescriptor. @param fontStretch string representation of the font stretch value
1209 Sets the font bounding box. @param rect PDRectangle defining the bounding box
1210 Sets the character set for the font. @param charSet character set name or null to reset
1211 Sets the gamma correction value. @param value the gamma value to be applied
1212 Sets the gamma value for the color space. @param gamma PDGamma object representing the gamma values or null to reset
1213 Sets the transformation matrix for color conversion. @param matrix the 3x3 transformation matrix to set
1214 Sets the colorants for the DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
1215 Initializes a new transparency group with default settings. Sets the 'S' key to 'Transparency' in the underlying COSDictionary.
1216 Sets image filters. @param filters list of filter names to apply
1217 Initializes a new optional content membership dictionary. Sets the dictionary type to "OCMD".
1218 Sets the visibility policy for optional content. @param visibilityPolicy COSName representing the visibility policy
1219 Sets the transformation matrix for the pattern. @param transform AffineTransform object defining the matrix
1220 Sets the bounding box for the tiling pattern. @param bbox PDRectangle object defining the bounding box or null to remove it
1221 Sets the background color for shading. @param newBackground COSArray representing the background color
1222 Sets the bounding box for the shading. @param newBBox the new bounding box rectangle
1223 Sets the color space for shading. @param colorSpace PDColorSpace object to set or null to remove
1224 Sets the shading function array. @param newFunctions COSArray containing the new functions
1225 Sets the transformation matrix for the shading. @param transform the AffineTransform object representing the matrix
1226 Sets the domain for the shading. @param newDomain COSArray representing the new domain values
1227 Sets the extend values for the shading. @param newExtend COSArray containing extend values
1228 Sets the domain for the shading. @param newDomain COSArray representing the new domain values
1229 Sets the coordinates for the shading. @param newCoords array of COSArray containing the new coordinates
1230 Sets the decode values for shading. @param decodeValues array containing decode parameters
1231 Initializes a new empty extended graphics state. Sets the dictionary type to 'ExtGState' and clears the cache.
1232 Sets the blending mode for graphics rendering. @param bm BlendMode object to define the blending mode
1233 Sets a float item in the dictionary. @param key the COSName key for the item @param value the float value to set or null to remove
1234 Sets the transfer function in the graphics state. @param transfer COSBase object representing the transfer function
1235 Sets the TR2 transfer function in the graphics state. @param transfer2 COSBase object representing the transfer function
1236 Sets the sequence of subsequent actions. @param next list of PDAction objects representing the next actions
1237 Sets the 'T' item in the action dictionary. @param t the COSBase value to set for the 'T' item
1238 Sets the visibility flag for the action. @param h boolean value indicating whether elements should be hidden
1239 Sets the fields to be reset in the PDF form. @param array COSArray containing field names to reset
1240 Sets the sound stream for the PDF action. @param sound COSStream containing the audio data
1241 Sets the form fields to be submitted. @param array COSArray containing field names
1242 Sets the destination for the action. @param d COSBase object representing the destination
1243 Sets the 'B' item in the action dictionary. @param b the COSBase value to set or null to remove
1244 Sets the relationship type for the target directory. @param relationship the relationship type (must be 'P' or 'C') @throws IllegalArgumentException if the relationship is not 'P' or 'C'
1245 Initializes a new PDAnnotation with default settings. Sets up an empty COSDictionary and marks it as an annotation type.
1246 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
1247 Sets the border style of the annotation. @param borderArray COSArray representing the border properties
1248 Sets rectangle margin differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1249 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1250 Sets the callout line coordinates. @param callout array of float values representing the callout line
1251 Sets the ink list for the annotation. @param inkList 2D array of floats representing ink paths
1252 Sets the line coordinates. @param l array of float values representing the line points
1253 Sets the quadrilateral points defining the link's appearance. @param quadPoints array of float values representing the corner points
1254 Sets rich content text for the annotation. @param rc rich content string to be set
1255 Sets the vertices of the polygon annotation. @param points array of float values representing the vertices
1256 Sets the vertices of the polyline. @param points array of float values representing vertex coordinates
1257 Sets the parent markup annotation. @param annot the parent PDAnnotationMarkup object
1258 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1259 Sets the quad points defining the text markup area. @param quadPoints array of float values representing the quad points
1260 Initializes a new PDAppearanceDictionary with a required normal appearance.
1261 Sets the dash style of the border using a COSArray. @param dashArray array representing the dash pattern
1262 Initializes a new PDSeedValue with a COSDictionary. Sets the type to 'SV' and marks it as a direct object.
1263 Sets the filter for digital signature. @param filter the COSName representing the filter type
1264 Sets the sub-filter types for digital signatures. @param subfilter list of sub-filter names
1265 Sets the digest method for digital signatures. @param digestMethod list of allowed digest names @throws IllegalArgumentException if any digest name is not allowed
1266 Sets the list of signature reasons. @param reasons list of string reasons for signing
1267 Sets the MDP (Modifications Permission Document) for digital signature. @param mdp PDSeedValueMDP object representing the MDP settings
1268 Sets the timestamp for the digital signature. @param timestamp PDSeedValueTimeStamp object containing timestamp information
1269 Sets the legal attestation for the digital signature. @param legalAttestation list of strings representing legal attestations
1270 Constructs a new PDSeedValueCertificate with an initialized dictionary. Sets the type to SV_CERT and marks it as direct.
1271 Sets the subject attribute of the certificate. @param subjects list of byte arrays representing the subject
1272 Sets the subject distinguished name (DN) for the certificate. @param subjectDN list of maps containing DN attributes and values
1273 Sets the key usage extensions in the certificate. @param keyUsageExtensions list of key usage extension strings
1274 Sets the issuer attribute in the certificate. @param issuers list of issuer byte arrays
1275 Sets the OID (Object Identifier) in the certificate. @param oidByteStrings list of byte arrays representing the OID
1276 Initializes a new PDSignature instance. Sets up an empty COSDictionary and marks it as a signature type.
1277 Sets the type of the digital signature. @param type COSName representing the signature type
1278 Sets the filter type for the signature. @param filter COSName representing the filter type
1279 Sets the sub-filter type for the signature. @param subfilter the COSName representing the sub-filter
1280 Sets the byte range for the signature. @param range an array of 4 integers representing the byte range
1281 Sets the signature contents from a byte array. @param bytes the byte array containing the signature data
1282 Sets the text color for the outline item. @param textColor the desired text color
1283 Initializes a new PDAcroForm for the given PDF document. @param doc the PDF document to associate with this form
1284 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
1285 Sets the calculation order of form fields. @param fields list of PDField objects representing form fields
1286 Constructs a new PDButton instance. @param acroForm the AcroForm containing the button
1287 Sets export values for the button. @param values list of string values to be exported
1288 Initializes a new PDChoice instance. @param acroForm the AcroForm containing the choice field
1289 Sets the child fields of this non-terminal field. @param children list of child PDField objects
1290 Sets the value of the field. @param object the COSBase object representing the new value
1291 Sets the default value of the field. @param value the COSBase value to set as default or null to remove
1292 Constructs a new PDSignatureField within the given AcroForm. @param acroForm the AcroForm to which this signature field belongs
1293 Initializes a new PDTextField instance. @param acroForm the AcroForm containing the field
1294 Sets the default style string for the text field. @param defaultStyleString the new default style string or null to remove it
1295 Sets the rich text value for the PDF variable text field. @param richTextValue the rich text content to set or null to remove it
1296 Sets the coordinate system origin. @param coordSystemOrigin array containing x and y origin coordinates
1297 Initializes a new PDThread with a COSDictionary. Sets the type of the dictionary to "Thread".
1298 Sets the transition direction. @param direction the PDTransitionDirection to apply
1299 Sets the duration of the transition. @param duration the duration in seconds
1300 Sets the fly transition scale. @param scale the scaling factor for the fly effect
1301 Sets whether the fly area is opaque. @param opaque true if fly area should be opaque, false otherwise
1302 Adds all elements from the specified collection to this list. @param c collection containing elements to be added @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding to a filtered list
1303 Processes font color setting for form fields. @param operands list of COSBase objects representing color components @throws IOException if there are missing operands or invalid size
1304 Inserts all elements from a collection into this list at the specified position. Throws UnsupportedOperationException if the list is filtered. Updates parent dictionary if applicable. @param index insertion point @param c collection of COSBase objects to add @return true if the list changed as a result of the call
1305 Adds all elements from the given COSArray to this array. @param objectList COSArray containing objects to add
1306 Converts the COSArray to a float array. @return float array containing values from COSBase objects, or 0 if not a number
1307 Converts COSArray to a list of Floats. @return List of Float objects, null for non-COSNumber elements
1308 Converts COSArray to a list of Integer values. @return List of Integer or null for non-COSNumber elements
1309 Updates parent entry in COSArray. @param kArray array of COSBase objects @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
1310 Retrieves the minimum value of the range. @return minimum value as a float
1311 Retrieves the maximum value of the range. @return maximum value as a float
1312 Retrieves PDGamma by index. @param index position in the array @return PDGamma object or null if not a COSArray
1313 Retrieves the string value of the first option. @return Decoded string representation of the option or '?' for unsupported characters
1314 Retrieves the default appearance string of the option. @return Decoded default appearance string or '?' for unsupported characters
1315 Retrieves a blend mode instance from a COSBase object. Supports both COSName and COSArray inputs. @param cosBlendMode COSBase object representing the blend mode @return BlendMode instance or NORMAL if not found
1316 Retrieves colorant names from the DeviceN color space. @return List of colorant names as strings
1317 Retrieves the alternate color space. @return PDColorSpace instance or throws IOException if creation fails
1318 Retrieves the colorant name from the array. @return The string representation of the colorant name
1319 Creates a PDDestination object from a COSBase representation. @param base the COSBase object representing the destination @return PDDestination object or null if input is null @throws IOException if the destination type is unknown or conversion fails
1320 Retrieves the target page from the destination. @return PDPage object or null if not found
1321 Retrieves the page number from the destination. @return page number or -1 if not found
1322 Retrieves the zoom level for the PDF destination. @return zoom level as a float, or -1 if not found
1323 Constructs a Matrix from a COSArray. @param array COSArray containing matrix elements
1324 Retrieves value by key from the dictionary. @param key string representation of the PDF name @return COSBase object or null if not found or is COSNull
1325 Retrieves value by first key, or second key if first is null. @param firstKey primary key to search @param secondKey fallback key if primary not found @return COSBase object or null if both keys are missing or invalid
1326 Retrieves a COSName value by key from the dictionary. @param key unique identifier for the COSName value @return COSName object or null if not found or not a COSName
1327 Retrieves a COSDictionary by key. @param key unique identifier for the dictionary @return COSDictionary object or null if not found or not a dictionary
1328 Retrieves a COSStream by key. @param key unique identifier for the stream @return COSStream object or null if not found or not a stream
1329 Retrieves a COSArray by key. @param key unique identifier for the array @return COSArray object or null if not found or not an array
1330 Retrieves a COSName value by key from the dictionary. @param key unique identifier for the value @param defaultValue default COSName to return if not found or not a COSName @return COSName object or defaultValue if not found or incorrect type
1331 Retrieves the string representation of a value by key. Handles COSName and COSString types. @param key unique identifier for the value @return String representation or null if not found
1332 Retrieves string value by key from the dictionary. @param key unique identifier for the value @return Decoded string or null if not found or not a COSString
1333 Retrieves date value by key from the dictionary. @param key unique identifier for the date value @return Calendar object or null if not found or conversion fails
1334 Retrieves a long value by key from the dictionary. @param key unique identifier for the value @param defaultValue default value if key not found or not a COSNumber @return long value associated with the key or default value
1335 Retrieves a float value by key from the dictionary. @param key unique identifier for the value @param defaultValue default float value if key not found or not a COSNumber @return float value associated with the key or default value
1336 Wraps existing page content in a save/restore pair for controlled additions. @param page PDPage to be modified @throws IOException if I/O error occurs or unsupported content type
1337 Retrieves content streams of the PDF page. @return Iterator over PDStream objects representing page content
1338 Checks if the page has content. @return true if the page contains content, false otherwise
1339 Converts a COSDictionary to a COSDictionaryMap with basic types. @param map the PDF COSDictionary to convert @return COSDictionaryMap containing key-value pairs of basic types @throws IOException if an unknown object type is encountered
1340 Removes an attribute object from the structure element. @param attributeObject the attribute to remove
1341 Retrieves class names associated with the element. @return Revisions object containing class names and their revision numbers
1342 Removes a class name from the PDF structure. @param className the class name to remove
1343 Appends a child node to the current structure node. Handles cases with no children, one child, or multiple children. @param object the COSBase object representing the child node to append
1344 Inserts a new child node before a reference node. @param newKid the new child node to insert @param refKid the reference node before which to insert
1345 Removes a child node from the current structure node. @param object the COSBase object representing the child node to remove @return true if the child was successfully removed, false otherwise
1346 Retrieves the value associated with key 'K' in the structure dictionary. @return COSBase object or null if not found
1347 Retrieves the value of the user property. @return COSBase object representing the value or null if not found
1348 Determines if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
1349 Retrieves the owner encryption key. @return byte array of length 32 containing the owner's encryption key, or null if not found
1350 Retrieves the user encryption key for PDF security. @return A copy of the user encryption key as a byte array, or null if not set. @throws IOException if an I/O error occurs while accessing the dictionary.
1351 Retrieves permissions for the PDF document. @return byte array of permissions or null if not set
1352 Retrieves the page number of the annotation. @return Page number as an Integer, or null if not set
1353 Retrieves the COSBase value of the field. Handles specific types and throws exception for unknown types. @return COSBase object or null if not found @throws IOException if an error occurs during retrieval
1354 Retrieves the field flags of the form field. @return Integer representing field flags or null if not set
1355 Retrieves the set field flags. @return Integer value of the field flags or null if not found
1356 Retrieves clear field flags. @return Integer value of clear field flags or null if not set
1357 Retrieves widget field flags. @return Integer representing field flags or null if not found
1358 Retrieves the set widget field flags. @return Integer representing the field flags or null if not found
1359 Retrieves clear widget field flags. @return Integer representing the field flags or null if not found
1360 Retrieves the default width of CID font. @return Default width as a float, falls back to 1000 if not specified
1361 Retrieves the color space associated with the device. @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs during retrieval
1362 Retrieves the color space for the transparency group. @param resources PDF resources for context @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
1363 Constructs a PDOptionalContentGroup from a given COSDictionary. @param dict COSDictionary representing the optional content group @throws IllegalArgumentException if dictionary is not of type 'OCG'
1364 Initializes a PDOptionalContentMembershipDictionary from a given COSDictionary. Validates that the dictionary's type is 'OCMD'. @param dict COSDictionary representing optional content membership
1365 Retrieves the overprint mode from the graphics state. @return Integer representing the overprint mode or null if not set
1366 Retrieves the soft mask from the graphics state. @return PDSoftMask instance or null if not present
1367 Retrieves float value from dictionary by key. @param key unique identifier for the value @return Float object or null if not found or not a COSNumber
1368 Retrieves the transfer function from the dictionary. @return COSBase object representing the transfer function or null if invalid
1369 Retrieves the transfer function for color component two. @return COSBase object representing the transfer function or null if invalid
1370 Retrieves the backdrop color array. @return COSArray representing the backdrop color or null if not set
1371 Determines the open mode for the PDF action. @return OpenMode enum indicating how to open the linked content
1372 Retrieves the 'T' item from the action dictionary. @return COSBase object representing the 'T' item or null if not found
1373 Determines the open mode for launching a file. @return OpenMode indicating new or same window, defaults to user preference if not specified
1374 Determines the open mode for the remote action. @return OpenMode enum indicating new or same window, or user preference if not specified
1375 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
1376 Initializes a PDAnnotation with a given dictionary. Sets default annotation type if not specified. @param dict the COSDictionary containing annotation data
1377 Retrieves the contents of the digital signature. @return A byte array containing the signature content, or an empty array if not found
1378 Retrieves XFA resource from the form's dictionary. @return PDXFAResource object or null if not found
1379 Retrieves options for the choice field. @return List of option strings available in the choice field
1380 Retrieves display values for choice options. @return List of display strings for the choice field options
1381 Retrieves the value associated with a given key from the dictionary. Handles both single string and array of strings values. @param name unique identifier for the value @return List of string values or empty list if not found
1382 Retrieves inheritable attribute from the field or its ancestors. @param key unique identifier for the attribute @return COSBase object representing the attribute value, or null if not found
1383 Retrieves the value of the non-terminal field. @return COSBase object representing the field's value or null if not found
1384 Retrieves the field value as a string. @return Field value as a string or empty string if not found
1385 Retrieves the default value of the field. @return COSBase object representing the default value or null if not set
1386 Converts COSDictionary to a string representation. @return string representation of the dictionary or an error message if an exception occurs
1387 Collects indirect object keys from the array and its nested structures. @param indirectObjects collection to store collected keys
1388 Updates the highest object number in the document based on imported page. @param importedPage the page being imported
1389 Closes the SignatureOptions, releasing resources. Ensures visual signature and PDF source are properly closed.
1390 Writes a PDF object to the output stream. @param key unique identifier for the PDF object @param obj the COSBase object to write @throws IOException if an I/O error occurs during writing
1391 Writes a PDF object reference to the standard output stream. @param obj the COSBase object to write @throws IOException if an I/O error occurs during writing
1392 Retrieves the COSObjectKey for a given COSBase object from the pool. @param object the COSBase object to find the key for @return COSObjectKey associated with the object, or null if not found
1393 Adds a COSBase object to the pool with a specified or generated key. @param key unique identifier for the object (may be null) @param object the COSBase object to add @return the actual key assigned to the object, or null if not added
1394 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
1395 Creates PDF object streams from the pool. @return List of COSWriterObjectStream objects
1396 Adds the first intermediate curl to a cloud-like shape. @param angleCur current angle in radians @param r radius of the arc @param alpha angular offset for curl @param cx center x-coordinate @param cy center y-coordinate @throws IOException if I/O error occurs during writing
1397 Generates intermediate curl template for a PDF cloud shape. @param angleCur current angle in radians @param r radius of the curl @return array of Point2D.Double representing curl points @throws IOException if I/O error occurs during processing
1398 Generates an arc for a PDF ellipse. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius x @param ry radius y @param cx center x-coordinate @param cy center y-coordinate @param out list to store points if not null @param addMoveTo flag to add initial move-to command @throws IOException if I/O error occurs during writing
1399 Processes and formats a list of lines with specified alignment. @param lines List of Line objects to be processed @param isFirstParagraph Flag indicating if the current paragraph is the first one @throws IOException if an I/O error occurs during processing
1400 Creates a JPEG-encoded PDImageXObject from a BufferedImage with default quality. @param document PDF document to store the image @param image input BufferedImage @return PDImageXObject containing the JPEG-encoded image @throws IOException if I/O error occurs during image processing
1401 Initializes a PDICCBased object with an ICC profile. @param doc PDDocument to which the ICC color space belongs
1402 Constructs a PDPattern with specified resources and color space. @param resources PDF document resources @param colorSpace underlying color space for the pattern
1403 Sets the list of optional content groups. @param ocgs List of PDPropertyList objects representing OCGs
1404 Sets the X-axis changes in number format. @param changeXs array of PDNumberFormatDictionary objects representing X-axis changes
1405 Sets the Y-axis change values. @param changeYs array of PDNumberFormatDictionary objects representing Y changes
1406 Sets the distances in the measurement dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
1407 Sets the areas in the measurement dictionary. @param areas an array of PDNumberFormatDictionary objects representing the areas
1408 Sets the angles in the measurement dictionary. @param angles array of PDNumberFormatDictionary representing angles
1409 Sets the line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1410 Grows the array to a specified size. @param size Desired size of the array
1411 Clones a PDF element based on its type. @param src source PDF element to clone @param dstParent parent destination for cloned elements @param currentPageDict dictionary of the current page @return cloned COSBase object or original if not cloneable
1412 Sets decode parameters for the PDF stream. @param decodeParams list of decode parameters to set
1413 Sets file decode parameters. @param decodeParams list of decode parameters to set
1414 Sets the child nodes (kids) of this structure node. @param kids List of child objects to be set as kids
1415 Sets options for the form field. @param options list of option values to set
1416 Retrieves the color range for a specific component. @param n index of the color component @return PDRange object representing the range or default if not specified
1417 Builds font widths for CID font. @param cidFont dictionary to store font widths @throws IOException if an I/O error occurs
1418 Sets the line dash pattern. @param dashPattern the new dash pattern to apply
1419 Sets the guide line color. @param color PDColor object representing the new color
1420 Sets the color of the annotation. @param c PDColor object representing the new color
1421 Sets the interior color of the line annotation. @param ic PDColor object representing the interior color
1422 Sets the interior color of the polygon. @param ic PDColor object representing the interior color
1423 Sets the interior color of the polyline annotation. @param ic PDColor object representing the interior color
1424 Sets the interior color of the annotation. @param ic PDColor object representing the interior color
1425 Sets the border color of the annotation. @param c PDColor object representing the new border color
1426 Sets the background color of the annotation. @param c PDColor object representing the new background color
1427 Sets the text color for the outline item. @param textColor the color to apply to the text
1428 Creates a PDImageXObject from a JPEG input stream. @param document PDF document to add the image to @param stream input stream containing JPEG data @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
1429 Sets the primary font for the document. @param font PDFont object to be used as the main font
1430 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1431 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1432 Sets the target page for navigation. @param page PDPage object representing the destination page
1433 Creates a new rectangle with the same dimensions. @return A new PDRectangle with the same width and height
1434 Sets the first color in the collection. @param colour PDGamma object representing the color to be set
1435 Sets the second color in the collection. @param colour PDGamma object representing the new color
1436 Sets the start color using PDGamma. @param colour PDGamma object representing the start color
1437 Sets the end color using a PDGamma object. @param colour PDGamma object representing the color to be set as the end color
1438 Decrypts a PDF object. @param obj the COSBase object to decrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @return decrypted COSBase object or original if not applicable @throws IOException on I/O errors or security exceptions
1439 Sets an item in the dictionary with a given string key. @param key string representation of the PDF name @param value the COSObjectable value to set or null to remove
1440 Sets the AcroForm for the PDF document. @param acroForm the PDAcroForm to set or null to remove
1441 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object containing viewer settings
1442 Sets the document outline. @param outlines PDDocumentOutline object to be set
1443 Sets the metadata of the PDF document. @param meta PDMetadata object containing metadata to be set
1444 Sets the open action for the document. @param action the PDDestinationOrAction to execute on opening
1445 Sets additional actions for the document. @param actions PDDocumentCatalogAdditionalActions object containing action definitions
1446 Sets the document's name dictionary. @param names PDDocumentNameDictionary containing named destinations and other names
1447 Sets the mark information in the document catalog. @param markInfo PDMarkInfo object containing marking properties
1448 Sets the URI dictionary in the document catalog. @param uri PDURIDictionary object containing URI information
1449 Sets the structure tree root of the document. @param treeRoot PDStructureTreeRoot object representing the structure tree
1450 Sets page labels for the document. @param labels PDPageLabels object containing page label configurations
1451 Sets destinations in the name dictionary. @param dests destination tree node to set
1452 Sets the embedded files in the document. @param ef the PDEmbeddedFilesNameTreeNode containing embedded files
1453 Sets the JavaScript associated with the document. @param js PDJavascriptNameTreeNode object containing JavaScript elements
1454 Constructs a new PDPage with specified media box. @param mediaBox the dimensions and boundaries of the page
1455 Sets the resources for the PDF page. @param resources PDResources object containing page resources
1456 Sets the media box for the page. @param mediaBox the new media box dimensions or null to remove it
1457 Sets or removes the bleed box for this page. @param bleedBox PDRectangle representing the bleed box or null to remove it
1458 Sets the trim box for the page. @param trimBox the rectangle defining the trim box or null to remove it
1459 Sets the art box of the page. @param artBox the new art box or null to remove it
1460 Sets the content stream of the PDF page. @param contents PDStream containing the page's content
1461 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata to be set
1462 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing actions to be set
1463 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
1464 Sets the transition effect and duration for the page. @param transition PDTransition object defining the transition effect @param duration float value specifying the transition duration in seconds
1465 Sets the associated PDF page for marked content. @param page PDPage object representing the page to associate
1466 Sets the referenced annotation object. @param annotation PDAnnotation to be referenced
1467 Sets the referenced object. @param xobject the PDXObject to reference
1468 Sets the associated page for this PDF object reference. @param page PDPage object to associate with this reference
1469 Sets the parent node of the current element. @param structureNode the parent PDStructureNode to set
1470 Sets the page associated with this structure element. @param page PDPage object to associate
1471 Sets attributes for the structure element. @param attributes collection of attribute objects with revisions
1472 Sets the ID tree node for structure elements. @param idTree the PDNameTreeNode representing the ID tree
1473 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent tree
1474 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
1475 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the border style
1476 Sets the border effect dictionary of the annotation. @param be PDBorderEffectDictionary representing the border effect
1477 Sets the fringe dimensions of the caret annotation. @param fringe PDRectangle representing the fringe dimensions
1478 Sets the fringe dimensions of the circle annotation. @param fringe PDRectangle representing the fringe dimensions
1479 Sets the fringe rectangle of the annotation. @param fringe PDRectangle representing the fringe bounds
1480 Sets the fringe dimensions of the annotation. @param fringe PDRectangle representing the fringe dimensions
1481 Sets the FDF dictionary in the catalog. @param fdf the FDFDictionary to be set
1482 Sets the digital signature for the FDF document. @param sig PDSignature object representing the signature to be set
1483 Sets the file specification in the FDF dictionary. @param fs PDFileSpecification object to be set
1484 Sets the JavaScript associated with the FDF document. @param js FDFJavaScript object to be set
1485 Sets the FDF catalog in the document's trailer. @param cat FDFCatalog to be set as the root of the document
1486 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary to be set
1487 Sets the appearance stream reference for the field. @param ref FDFNamedPageReference object representing the appearance stream
1488 Sets the icon fit properties. @param fit FDFIconFit object defining how to scale and position the icon
1489 Sets an action associated with the field. @param a PDAction to be set or null to remove
1490 Sets additional actions for the field. @param aa PDAdditionalActions object to be set
1491 Sets fractional space allocation for icon. @param space PDRange defining the space allocation
1492 Sets the file specification for the named page reference. @param fs PDFileSpecification object representing the file spec
1493 Sets the page information. @param info FDFPageInfo object containing page details
1494 Sets the template reference. @param tRef FDFNamedPageReference object to be set
1495 Sets the font file stream. @param type1Stream the PDStream containing the font data
1496 Sets the font file 2 stream. @param ttfStream TrueType font stream to be set
1497 Sets the font file (CID) for the font descriptor. @param stream PDStream containing the CID font data
1498 Sets the CIDSet stream in the font descriptor. @param stream PDStream containing CIDSet data
1499 Sets the white point for the color space. @param whitepoint PDTristimulus object containing white point coordinates @throws IllegalArgumentException if whitepoint is null
1500 Sets the black point for the color space. @param blackpoint PDTristimulus object representing the black point
1501 Sets the extended graphics state for shading. @param extendedGraphicsState the graphics state to set
1502 Sets the shading pattern. @param shadingResources the new shading resources to apply
1503 Sets the resources for the tiling pattern. @param resources PDResources object containing pattern resources
1504 Sets a new shading function. @param newFunction the PDFunction to set
1505 Sets font settings in the graphics state. @param fs PDFontSetting object containing font properties
1506 Sets the destination for this GoToE action. @param d PDDestination object representing the target location
1507 Sets the file specification for the embedded action. @param fs PDFileSpecification object representing the file to be set
1508 Sets the target directory for the action. @param targetDirectory PDTargetDirectory object representing the target
1509 Sets the destination for navigation. @param d PDDestination object representing the target location
1510 Sets the file specification for the PDF action. @param fs PDFileSpecification object representing the file to be imported
1511 Sets the file specification for the launch action. @param fs PDFileSpecification object representing the file to be launched
1512 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing Windows launch settings
1513 Sets the file specification for the remote navigation action. @param fs PDFileSpecification object representing the target file
1514 Sets the file specification for the form submission. @param fs PDFileSpecification object representing the file
1515 Sets the file specification for the action. @param fs PDFileSpecification object representing the file
1516 Sets the 'F' (File) action in the PDF document. @param action the PDAction to be associated with the 'F' key
1517 Sets the E (Enter) action for the annotation. @param e the PDAction to be executed on entering the annotation
1518 Sets the X action for the annotation. @param x the X action to be performed
1519 Sets the D (default) action for the annotation. @param d PDAction object representing the default action
1520 Sets the action to be performed on mouse-up. @param u PDAction to execute on mouse-up
1521 Sets the form object action. @param fo PDAction representing the form object action
1522 Sets the action for button release. @param bl the action to be performed on button release
1523 Sets the action associated with printing (PO). @param po PDAction object defining the print behavior
1524 Sets the page close action. @param pc the action to perform on page close
1525 Sets the action associated with the "PV" key. @param pv the PDAction to be set or null to remove
1526 Sets the print action for the annotation. @param pi the print action to be set
1527 Sets the WC (Web Capture) action in the document catalog. @param wc PDAction representing the web capture action to be set
1528 Sets the action to be performed on document window opening. @param ws the PDAction to execute on window open
1529 Sets the document save action. @param ds the action to be executed on document save
1530 Sets the action triggered on page opening. @param wp the action to be performed on page opening
1531 Sets the document processing action. @param dp the PDAction to set or null to remove
1532 Sets the K action in the form field's additional actions. @param k PDAction object representing the K action
1533 Sets the 'F' action associated with form fields. @param f PDAction object representing the action to be set
1534 Sets the action associated with the 'V' key. @param v the PDAction to be set or null to remove
1535 Sets an action for the 'C' key. @param c PDAction to be set or null to remove
1536 Sets the "Open" action for the PDF page. @param o the PDAction to be set as the open action
1537 Sets the C action for this PDF page. @param c the PDAction object representing the C action
1538 Sets the target directory in the dictionary. @param targetDirectory PDTargetDirectory object to be stored
1539 Sets the named destination for this target directory. @param dest PDNamedDestination object to set or null to remove
1540 Sets the appearance dictionary of the annotation. @param appearance the PDAppearanceDictionary to set or null to remove
1541 Sets optional content property. @param oc PDPropertyList representing optional content
1542 Sets the page associated with this annotation. @param page PDPage object to be set
1543 Sets the file specification for this annotation. @param file PDFileSpecification object representing the attachment details
1544 Sets the border effect dictionary. @param be PDBorderEffectDictionary to apply or null to remove
1545 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
1546 Sets the action associated with this link annotation. @param action PDAction object representing the action to be performed
1547 Sets the border style dictionary. @param bs the border style to apply
1548 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
1549 Sets the previous URI action. @param pa PDActionURI object representing the URI action
1550 Sets the popup associated with this annotation. @param popup PDAnnotationPopup object to be set or null to remove
1551 Sets the annotation this one is in reply to. @param irt the PDAnnotation that this annotation replies to
1552 Sets external data for the annotation. @param externalData PDExternalDataDictionary object containing external data
1553 Sets the border style of the annotation. @param bs the new border style dictionary
1554 Sets the border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
1555 Sets the border effect dictionary of the annotation. @param be PDBorderEffectDictionary representing the border effect
1556 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the difference in coordinates
1557 Sets the appearance characteristics of the annotation. @param appearanceCharacteristics dictionary containing appearance properties
1558 Sets the action associated with the annotation. @param action the PDAction to be set
1559 Sets the additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing the actions to be set
1560 Sets the border style of the annotation. @param bs PDBorderStyleDictionary object representing the new border style
1561 Sets the parent terminal field of this annotation. @param field the parent PDTerminalField to set @throws IllegalArgumentException if the field shares a dictionary with its only widget
1562 Sets the normal appearance of the annotation. @param entry the PDAppearanceEntry representing the normal state appearance
1563 Sets the normal appearance of an annotation. @param ap PDAppearanceStream representing the normal state appearance
1564 Sets the rollover appearance for an annotation. @param entry the PDAppearanceEntry representing the rollover state
1565 Sets the rollover appearance stream. @param ap the appearance stream for the rollover state
1566 Sets the down appearance of an annotation. @param entry the PDAppearanceEntry representing the appearance in the down state
1567 Sets the down appearance stream for an annotation. @param ap the appearance stream to be set
1568 Sets the filter property in the digital signature. @param filter PDPropBuildDataDict object representing the filter settings
1569 Sets publication security properties in the digital signature. @param pubSec PDPropBuildDataDict containing security settings
1570 Sets application-specific properties in the dictionary. @param app PDPropBuildDataDict object containing application data
1571 Sets the seed value certificate. @param certificate PDSeedValueCertificate object to set
1572 Sets the property build information in the signature dictionary. @param propBuild PDPropBuild object containing property details
1573 Sets the previous sibling of this outline item. @param outlineNode the PDOutlineNode to be set as the previous sibling
1574 Sets the next sibling of this outline item. @param outlineNode the PDOutlineNode to be set as the next sibling
1575 Sets the destination for this outline item. @param dest the PDDestination object representing the target location
1576 Sets an action associated with this outline item. @param action the PDAction to be set or null to remove any existing action
1577 Sets the structure element associated with this outline item. @param structureElement the PDStructureElement to associate
1578 Sets the first child node of this outline. @param outlineNode the PDOutlineNode to be set as the first child
1579 Sets the last child node in the outline. @param outlineNode the last child PDOutlineNode to be set
1580 Sets default resources for form fields. @param dr PDResources object containing default resources
1581 Sets the XFA resource for the form. @param xfa the PDXFAResource object to set
1582 Sets the digital signature value. @param value PDSignature object representing the signature @throws IOException if an I/O error occurs during setting
1583 Sets the default signature value. @param value PDSignature object representing the default signature
1584 Sets the seed value for the signature field. @param sv PDSeedValue object representing the seed value
1585 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
1586 Sets the list of annotation widgets associated with this field. @param children List of PDAnnotationWidget objects to be set as children
1587 Sets the bounding box of the viewport. @param rectangle PDRectangle object representing the new bounding box
1588 Sets the measurement dictionary for the viewport. @param measure PDMeasureDictionary containing measurement details
1589 Sets document information for the thread. @param info PDDocumentInformation object containing metadata
1590 Assigns a thread to the bead. @param thread the PDThread object representing the thread
1591 Sets the next bead in the thread. @param next the subsequent PDThreadBead object
1592 Sets the previous bead in the thread. @param previous the previous PDThreadBead object
1593 Sets the associated page for this thread bead. @param page the PDPage to associate with this bead
1594 Sets the rectangle defining the bead's position. @param rect PDRectangle object representing the bead's bounds
1595 Sets the marked status of the PDF element. @param value true if marked, false otherwise
1596 Sets the user properties flag in the PDF document's marking information. @param userProps flag indicating whether user properties are enabled
1597 Sets the suspect flag in the PDF marking info. @param suspect boolean indicating if the element is suspected
1598 Sets whether mouse position tracking is enabled for the URI action. @param value true to enable, false to disable
1599 Sets the popup annotation's open state. @param open true to open, false to close the popup
1600 Sets the FD (Fixed Decimal) flag in the number format dictionary. @param fd boolean value indicating whether to use fixed decimal formatting
1601 Sets the volatile status of the file. @param fileIsVolatile true if the file is volatile, false otherwise
1602 Sets whether metadata should be encrypted. @param encryptMetaData true to encrypt metadata, false otherwise
1603 Sets whether the line annotation has a caption. @param cap true if the line has a caption, false otherwise
1604 Sets whether the icon should scale to fit within the annotation. @param value true to scale to fit, false otherwise
1605 Sets the rename flag in the FDF template. @param value boolean indicating whether renaming is enabled
1606 Sets whether anti-aliasing is enabled. @param antiAlias true to enable anti-aliasing, false otherwise
1607 Sets stroking overprint control. @param op true to enable overprint, false otherwise
1608 Sets non-stroking overprint control. @param op true to enable overprint, false otherwise
1609 Sets the automatic stroke adjustment flag. @param sa true to enable automatic stroke adjustment, false otherwise
1610 Sets the alpha source flag. @param alpha boolean value to enable or disable alpha source
1611 Sets the text knockout flag. @param tk true to enable text knockout, false otherwise
1612 Sets whether to open the destination in a new window. @param value the open mode preference (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1613 Sets whether the launched file should open in a new window. @param value OpenMode indicating the desired behavior
1614 Sets the window behavior for opening the linked content. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1615 Sets whether the sound should be played synchronously. @param synchronous true if sound should play before proceeding
1616 Sets whether the sound should repeat. @param repeat true if sound should loop, false otherwise
1617 Sets whether sound mixing is enabled. @param mix true to enable sound mixing, false otherwise
1618 Sets whether the line annotation has a caption. @param cap true if the line has a caption, false otherwise
1619 Sets whether the text annotation is open. @param open true if the annotation should be displayed open, false otherwise
1620 Sets the pre-release status of the digital signature. @param preRelease boolean indicating if it's a pre-release version
1621 Sets the flag to suppress warnings about non-embedded fonts. @param noEmbedFontWarning true to suppress warnings, false otherwise
1622 Sets the trusted mode flag in the PDF signature properties. @param trustedMode boolean indicating if the document is in trusted mode
1623 Sets the need for appearance streams. @param value true if appearance streams are required, false otherwise
1624 Sets toolbar visibility preference. @param value true to hide toolbar, false to show it
1625 Sets whether the menu bar is hidden. @param value true to hide menubar, false to show
1626 Sets whether to hide the window UI in the PDF viewer. @param value true to hide, false to show
1627 Sets whether the PDF viewer window should fit the page size. @param value true to enable fitting the window to the page, false otherwise
1628 Sets whether the PDF viewer window should be centered. @param value true to center the window, false otherwise
1629 Sets whether to display the document title in the viewer window. @param value true to display the document title, false otherwise
1630 Sets a PDF name in the dictionary using string keys and values. @param key string representation of the COSName key @param value string representation of the PDF name
1631 Sets the page mode of the PDF document. @param mode the desired page mode setting
1632 Sets the document's page layout. @param layout desired page layout configuration
1633 Sets the document version. @param version the version string to be set
1634 Sets the trapped status of the document. @param value the trapped status ("True", "False", or "Unknown") @throws IllegalArgumentException if value is not one of the valid options
1635 Sets the page label style. @param style the desired style or null to remove it
1636 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF object
1637 Sets the owner of the attribute. @param owner string representation of the owner
1638 Constructs a new PDMarkedContentReference with an initialized dictionary. Sets the "Type" entry in the dictionary to "StructElem".
1639 Initializes a new PDObjectReference with an empty COSDictionary. Sets the 'Type' entry in the dictionary to indicate the object type.
1640 Sets the structure type of the PDF element. @param structureType the new structure type to be assigned
1641 Sets the class names for a PDF structure element. @param classNames Revisions containing class names and their revision numbers
1642 Initializes a new structure node with a specified type. @param type the type of the structure node
1643 Sets the guideline style. @param style string representation of the guideline style
1644 Sets the sub-filter for encryption. @param subfilter the name of the sub-filter to use
1645 Sets the annotation's intent. @param intent the purpose of the annotation (e.g., "Link", "Widget")
1646 Sets the line ending style for the annotation. @param style the line ending style as a string
1647 Sets the icon for the annotation. @param icon string representation of the icon to be used
1648 Sets the document version in the FDF catalog. @param version string representation of the document version
1649 Sets the encoding for the FDF document. @param encoding the character encoding to use
1650 Sets the scaling option for the icon. @param option the scaling configuration to apply
1651 Sets the scaling type for an icon. @param scale type of scaling to apply ("Fit", "FitR", etc.)
1652 Initializes a new PDF pattern with default settings. Sets up the pattern dictionary and specifies its type as "Pattern".
1653 Sets the type of the PDF action. @param type string representing the action type
1654 Sets the subtype of the PDAction. @param s the subtype string to be set
1655 Sets the subtype of the annotation. @param subType the subtype to be assigned
1656 Sets the appearance state of the annotation. @param as the appearance state to be set
1657 Sets the attachment name. @param name the new name for the attachment
1658 Sets the line ending style for the annotation. @param style the line ending style to apply
1659 Sets the caption positioning for the line annotation. @param captionPositioning string defining the caption's position
1660 Sets the highlight mode for the link annotation. @param mode the highlight mode (e.g., "Invert", "Outline")
1661 Sets the reply type of the annotation. @param rt string representation of the reply type
1662 Sets the intent of the annotation. @param it string representing the annotation's intent
1663 Sets the name of the rubber stamp annotation. @param name string representation of the annotation's name
1664 Sets the name of the text annotation. @param name the new name for the annotation
1665 Sets the annotation's highlighting mode. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T'
1666 Sets the border style. @param s the style to be applied
1667 Initializes a new external data dictionary for PDF annotations. Sets the type attribute to "ExData".
1668 Sets the subtype of the external data dictionary. @param subtype string representing the subtype to be set
1669 Sets the name in the digital signature properties. @param name the name to set
1670 Sets the URL type in the certificate. @param urlType the type of URL to be set
1671 Initializes a new PDF document outline. Sets the type to "Outlines" in the underlying COS dictionary.
1672 Initializes a new PDDocumentOutline from an existing COSDictionary. @param dic the underlying COSDictionary representing the outline structure
1673 Initializes a new measurement dictionary. Sets up the underlying COSDictionary and type attribute.
1674 Sets the subtype of the measurement dictionary. @param subtype string representing the subtype to be set
1675 Initializes a new PDNumberFormatDictionary with an empty COSDictionary. Sets the type to "PDFNumFormat".
1676 Sets the name of the viewport. @param name string representation of the viewport's name
1677 Initializes a new PDTransition with the specified style. @param style the transition style to be applied
1678 Sets the transition dimension. @param dimension the PDTransitionDimension to apply
1679 Sets the motion style of the transition. @param motion PDTransitionMotion enum representing the motion type
1680 Sets the non-full screen page mode preference. @param value the desired page mode (e.g., USE_OUTLINES)
1681 Sets the reading direction preference. @param value the desired reading direction (e.g., LEFT_TO_RIGHT)
1682 Sets the view area preference. @param value the boundary type to be set as view area
1683 Sets the view clipping boundary preference. @param value the desired clipping boundary setting
1684 Sets the print area preference. @param value boundary type for printing (e.g., MEDIABOX, CROPBOX)
1685 Sets the print clip boundary. @param value the boundary type to be applied during printing
1686 Sets duplex printing preference. @param value duplex mode setting (simplex, duplexFlipLongEdge, duplexFlipShortEdge)
1687 Sets the print scaling preference. @param value the desired print scaling option
1688 Sets a date value in the dictionary. @param key the COSName key for the item @param date GregorianCalendar instance representing the date
1689 Sets a string value in the dictionary using a given key. @param key the PDF name key for the item @param value the string value to set or null to remove
1690 Sets the language of the PDF document. @param language ISO 639-1 language code (e.g., "en" for English)
1691 Sets the title of the PDF document. @param title the new title to set for the document
1692 Sets the author of the PDF document. @param author the name of the document's author
1693 Sets the subject of the PDF document. @param subject the subject to be set or null to remove
1694 Sets the keywords of the PDF document. @param keywords comma-separated list of keywords
1695 Sets the creator of the PDF document. @param creator the name or identifier of the creator
1696 Sets the producer of the PDF document. @param producer name of the producer application
1697 Sets the page label prefix. @param prefix the prefix string to set or null to remove
1698 Sets the Unicode name of the embedded file. @param file Unicode filename to be set
1699 Sets the file name in the PDF specification. @param file the name of the file to be set
1700 Sets the file description. @param description the description of the file
1701 Sets the identifier for the PDF element. @param id unique identifier string for the element
1702 Sets the title of the PDF structure element. @param title the new title to set
1703 Sets the language attribute of the PDF element. @param language the language code to be set
1704 Sets the alternate description for the PDF element. @param alternateDescription alternative text describing the element
1705 Sets the expanded form text. @param expandedForm the full text of the element
1706 Sets the actual text of the element. @param actualText the text to be set or null to remove
1707 Sets the modification date of the annotation. @param date the new date string to set
1708 Sets the name of the annotation. @param name the name to assign to the annotation
1709 Sets the content of the annotation. @param contents text to be displayed in the annotation
1710 Sets the title of the annotation. @param title the new title to set
1711 Sets the subject of the annotation. @param subject the subject text to assign
1712 Sets the annotation symbol. @param symbol the symbol to set ("paragraph" maps to "P")
1713 Sets the default appearance of the annotation. @param appearance the string defining the default appearance
1714 Sets the default style of the free text annotation. @param style the string representing the style to be applied
1715 Sets the style of the line annotation's caption. @param captionStyle the style to apply to the caption
1716 Sets the state of the annotation. @param state new state value to assign
1717 Sets the state model of the annotation. @param stateModel the state model to set or null to remove
1718 Sets the document status. @param status the new status value
1719 Sets the target URL for the FDF document. @param target the URL to be set or null to remove
1720 Sets the partial field name. @param partial the partial name to assign
1721 Sets the name of the referenced page. @param name the new name to assign to the page reference
1722 Sets the name of the optional content group. @param name new name for the OCG
1723 Initializes a new instance of PDOptionalContentProperties. Sets up the COSDictionary with OCGs and default dictionary settings.
1724 Sets the JavaScript action string. @param sAction JavaScript code to be executed
1725 Sets the file specification for the launch action. @param f the file path or URL to be launched
1726 Sets the destination string for the launch action. @param d the destination string to be set
1727 Sets the operating system specific launch command. @param o the OS-specific command string
1728 Sets the file path for the launch action. @param p the file path to be launched
1729 Sets the URI for the PDF action. @param uri the URL to be assigned to the action
1730 Sets the filename for the target directory. @param filename the name of the file to be set
1731 Sets the annotation name in the dictionary. @param name the string value to set as the annotation name
1732 Sets the filename for the launch parameters. @param file the name of the file to be launched
1733 Sets the directory path. @param dir the directory path to set
1734 Sets the operation type. @param op the operation to perform (e.g., "open", "print")
1735 Sets the execution parameter. @param param the parameter value to set
1736 Sets the contents of the annotation. @param value the string content to be set
1737 Sets the modified date of the annotation. @param m the new modification date as a string
1738 Sets the name of the annotation. @param nm the name to assign to the annotation
1739 Sets the default appearance string for the annotation. @param daValue the default appearance value to set
1740 Sets the default style string for the annotation. @param defaultStyleString the style string to apply as default
1741 Sets the title popup text for the annotation. @param t the title string to set or null to remove
1742 Sets the subject of the annotation. @param subj the subject string to assign
1743 Sets the state of the text annotation. @param state the new state value to set
1744 Sets the state model of the text annotation. @param stateModel the state model to set
1745 Sets the normal caption for an annotation. @param caption the text to display as the normal caption
1746 Sets the rollover caption for annotation. @param caption the text to display on rollover
1747 Sets the alternate caption for the annotation. @param caption the string to be used as an alternate caption
1748 Sets the date property in the digital signature dictionary. @param date the date string to set
1749 Sets the URL attribute in the certificate. @param url the URL to be set or null to remove
1750 Sets the URL in the COSDictionary. @param url the URL to be stored
1751 Sets the signature name in the COSDictionary. @param name the name of the signature to set
1752 Sets the location information for the signature. @param location the location string to set
1753 Sets the reason for the digital signature. @param reason the reason string to be set in the signature
1754 Sets the contact information in the digital signature. @param contactInfo the contact details to be stored
1755 Sets the title of the outline item. @param title the new title to set or null to remove
1756 Sets the default appearance string for form fields. @param daValue the default appearance string to set
1757 Sets the default value for the choice field. @param value the default option to be selected
1758 Sets the partial name of the PDF field. @param name the partial name to set (must not contain '.')
1759 Sets the alternate field name. @param alternateFieldName the alternate name for the field
1760 Sets the mapping name of the field. @param mappingName the new mapping name to assign
1761 Sets the field value. @param value the new value for the field @throws IOException if an I/O error occurs
1762 Sets the field's value in the PDF text field. @param value the string value to set @throws IOException if an I/O error occurs
1763 Sets the default value of the text field. @param value the default string value
1764 Sets the default appearance string for text fields. @param daValue the default appearance string to set
1765 Sets the scale ratio for measurements. @param scaleRatio the new scale ratio as a string
1766 Sets an integer item in the dictionary using a string key. @param key the PDF name as a string @param value the integer value to set
1767 Sets the structure parent index for the PDF page. @param structParents index of the structure parent
1768 Sets the rotation of the PDF page. @param rotation angle in degrees (0, 90, 180, 270)
1769 Sets the starting page number for the label range. @param start the starting page number (must be positive)
1770 Sets the number of bits per sample. @param bps the bits per sample value to set
1771 Sets the Marker Context Identifier (MCID) for the marked content. @param mcid the MCID value to assign
1772 Sets the revision number of the PDF structure element. @param revisionNumber non-negative integer representing the revision
1773 Sets the next key in the parent tree. @param parentTreeNextKey the integer value for the next key
1774 Sets the encryption key length. @param length the desired key length in bits
1775 Sets the encryption version. @param version the encryption version number
1776 Sets the encryption length. @param length the encryption key length in bits
1777 Sets the encryption revision level. @param revision the revision level to set
1778 Sets the encryption permissions. @param permissions bit flag representing allowed actions
1779 Sets the annotation's page number. @param page the page index where the annotation is located
1780 Sets the justification of the free text annotation. @param justification "left", "centered", or "right"
1781 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation
1782 Sets the field flags for the form field. @param ff integer representing the field flags to be set
1783 Sets field flags. @param ff field flag value to be set
1784 Sets clear field flags. @param ff integer value representing field flags to be cleared
1785 Sets widget field flags. @param f flag value to be set
1786 Sets widget field flags. @param ff integer value representing field flags
1787 Sets the clear widget field flags. @param ff integer value representing the field flags
1788 Sets font descriptor flags. @param flags integer representing font attributes
1789 Sets character widths in the font dictionary. @param font PDFBox font dictionary to update @param glyphList Glyph list for mapping names to Unicode @throws IOException if an I/O error occurs
1790 Sets the paint type of the pattern. @param paintType the integer value representing the paint type
1791 Sets the type of the pattern. @param patternType the integer representing the pattern type
1792 Sets the paint type of the tiling pattern. @param paintType the integer value representing the paint type
1793 Sets the tiling type of the pattern. @param tilingType the integer value representing the tiling type
1794 Sets the shading type in the PDF shading dictionary. @param shadingType integer representing the shading type
1795 Sets the number of bits per flag for shading. @param bitsPerFlag the integer value representing bits per flag
1796 Sets the number of vertices per row in the shading. @param verticesPerRow the number of vertices to set
1797 Sets the number of bits per color component. @param bitsPerComponent the number of bits for each color component
1798 Sets the number of bits per coordinate. @param bitsPerCoordinate the number of bits for each coordinate
1799 Sets the line cap style. @param style integer representing the line cap style
1800 Sets the line join style. @param style the line join style to apply
1801 Sets the overprint mode. @param overprintMode the new overprint mode value or null to remove it
1802 Sets action flags for form reset. @param flags integer representing action flags
1803 Sets action flags. @param flags integer representing action configuration
1804 Sets the page number for the target directory. @param pageNumber the page number to set; if negative, removes the page number entry
1805 Sets the annotation index in the dictionary. @param index the annotation index to set; if negative, removes the annotation key
1806 Sets annotation flags. @param flags integer representing annotation properties
1807 Sets the structure parent index for this annotation. @param structParent the new structure parent index
1808 Sets the quadding mode of the free text annotation. @param q the quadding mode (0 - left, 1 - centered, 2 - right)
1809 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation
1810 Sets the P value for signature configuration. @param p integer value (0-3) representing a specific configuration setting
1811 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
1812 Sets the count of open child nodes. @param openCount number of open children
1813 Sets the quadding mode for text fields. @param q the quadding mode value (0=left, 1=center, 2=right)
1814 Sets the field flags. @param flags bitmask representing field attributes
1815 Sets the top index of displayed items in the list box. @param topIndex index of the top item to display, or null to remove the setting
1816 Sets the maximum length of the text field. @param maxLen the maximum number of characters allowed
1817 Sets the Q attribute of the text field. @param q the value to set for the Q attribute
1818 Sets a long value in the dictionary using a string key. @param key string representation of the PDF name @param value the long value to set
1819 Sets the revision number of the digital signature. @param revision the revision value to set
1820 Sets the minimum required revision level. @param revision the revision number to set
1821 Sets a float value in the dictionary using a string key. @param key the PDF name as a string @param value the float value to set
1822 Sets the user unit for the PDF page. @param userUnit the scaling factor to apply; must be positive
1823 Sets the guideline width. @param width the new width value
1824 Sets the opacity of the annotation. @param opacity the opacity value to set (0.0 - fully transparent, 1.0 - fully opaque)
1825 Sets the leader length of the line annotation. @param leaderLength the length of the leader line
1826 Sets the leader extend of the line annotation. @param leaderExtend the float value representing the leader extend
1827 Sets the leader offset of the line annotation. @param leaderOffset the distance from the start point to the leader line
1828 Sets the font weight. @param fontWeight the weight value to assign to the font
1829 Sets the italic angle of the font. @param angle the italic angle to set
1830 Sets the font's ascent value. @param ascent the ascent metric of the font
1831 Sets the font's descent value. @param descent the descent value to set
1832 Sets the leading (line spacing) of the font. @param leading the line spacing value to set
1833 Sets the cap height of the font. @param capHeight the cap height value to set
1834 Sets the X-Height of the font. @param xHeight the X-Height value to set
1835 Sets the vertical stem width of the font. @param stemV the vertical stem width value to set
1836 Sets the horizontal stem height. @param stemH the horizontal stem height value to set
1837 Sets the average width of the font. @param averageWidth the average width value to set
1838 Sets the maximum width of the font. @param maxWidth the maximum width value to set
1839 Sets the missing width for the font descriptor. @param missingWidth the width to be set for missing glyphs
1840 Sets the horizontal step of the tiling pattern. @param xStep the horizontal distance between pattern tiles
1841 Sets the vertical step size for tiling pattern. @param yStep the vertical distance between pattern tiles
1842 Sets the sound volume. @param volume the volume level between -1.0 and 1.0
1843 Sets the length of the leader line. @param leaderLineLength the desired length for the leader line
1844 Sets the extension length of the leader line. @param leaderLineExtensionLength the desired length for the leader line extension
1845 Sets the offset length of the leader line. @param leaderLineOffsetLength the new offset length for the leader line
1846 Sets constant opacity for the annotation. @param ca float value representing opacity (0.0 to 1.0)
1847 Sets the border width. @param w the width value to set
1848 Sets the minimum required capability level. @param minimumRequiredCapability float value representing capability level
1849 Sets the CYX value in the PDF dictionary. @param cyx the float value for CYX attribute
1850 Parses a COSStream from the given dictionary. @param dic dictionary containing stream data @return parsed COSStream object @throws IOException if parsing fails or I/O error occurs
1851 Clones and merges PDF objects. @param base the original COSObjectable to clone from @param target the target COSObjectable to merge into @throws IOException if an I/O error occurs during cloning
1852 Parses a COS dictionary from the PDF source. @param isDirect flag indicating if the dictionary is direct @return COSDictionary object parsed from the source @throws IOException if an I/O error occurs during parsing
1853 Parses the entire PDF content stream. @return List of parsed objects from the stream @throws IOException if an I/O error occurs during parsing
1854 Retrieves the bounding box of a glyph in a Type 3 font. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs during parsing
1855 Retrieves character width from PDF operators. @return parsed width as float @throws IOException if an I/O error occurs or unexpected end of stream
1856 Constructs a new PDDocument with default memory-only stream cache.
1857 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object representing the file specification @return PDFileSpecification object or null if base is null @throws IOException if the base type is unknown
1858 Constructs a new FDFAnnotationCaret with default settings.
1859 Initializes a new circular annotation. Sets the subtype to "Circle".
1860 Constructs a new FDFAnnotationFileAttachment. Initializes with default settings and sets the annotation subtype to "FileAttachment".
1861 Initializes a new free text annotation. Sets the subtype to "FreeText".
1862 Initializes a new FDFAnnotationInk with default settings. Sets the annotation subtype to "INK".
1863 Initializes a new FDF line annotation. Sets the subtype to "Line".
1864 Initializes a new FDFAnnotationLink with default settings. Sets the annotation subtype to "Link".
1865 Initializes a new polygon annotation. Sets the subtype to "PolyLine".
1866 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
1867 Initializes a new sound annotation. Sets the subtype to "Sound".
1868 Constructs a new FDFAnnotationSquare with default properties. Initializes the annotation type to "Square".
1869 Initializes a new FDFAnnotationStamp with subtype set to "Stamp".
1870 Constructs a new FDFAnnotationText. Initializes the annotation with subtype "Text".
1871 Default constructor initializes a text markup annotation.
1872 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID
1873 Builds vertical metrics for CID font embedding. @param cidFont the COSDictionary representing the CID font
1874 Constructs a new PDSimpleFont instance. Initializes default settings for simple font management.
1875 Sets the decode values for shading. @param decodeValues array containing decode parameters
1876 Sets the decode values for shading. @param decodeValues array containing decode parameters
1877 Sets the line width for drawing operations. @param width the desired line width
1878 Sets the miter limit for line joins. @param miterLimit the miter limit value to set
1879 Sets the flatness tolerance for graphics rendering. @param flatness the flatness value to set or null to remove
1880 Sets the smoothness tolerance for rendering. @param smoothness float value representing the smoothness level
1881 Sets the stroking alpha constant. @param alpha the alpha value for stroking operations
1882 Sets the non-stroking alpha constant. @param alpha the alpha value to set (0.0 to 1.0)
1883 Constructs a new PDAnnotationLink with default settings. Initializes the annotation's subtype to "Link".
1884 Constructs a new PDAnnotationMarkup. Initializes a markup annotation with default settings.
1885 Creates a new PDAnnotationPopup. Initializes the annotation with subtype "PopUp".
1886 Constructs a new PDAnnotationWidget. Initializes the annotation with default settings and sets its subtype.
1887 Sets uniform rectangle margin differences. @param difference margin difference for all sides
1888 Sets uniform rectangle differences for all sides. @param difference margin difference for all sides
1889 Sets equal rectangle differences for all sides of the annotation. @param difference uniform margin difference for left, top, right, and bottom
1890 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing the checkbox
1891 Initializes a new PDComboBox instance. @param acroForm the AcroForm containing the combo box field
1892 Initializes a new PDListBox instance. @param acroForm the AcroForm containing the list box field
1893 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1894 Constructs a PDLineDashPattern from a COSArray and phase. @param array COSArray representing dash lengths @param phase initial dash pattern phase, adjusted if negative
1895 Returns a string representation of the range. @return formatted string with min and max values
1896 Evaluates Function Type 4 using given input. @param input array of float values as input @return array of float values as output after processing @throws IOException if an error occurs during evaluation
1897 Sets the color component range in the PDF stream. @param range PDRange object defining the min and max values @param n index of the color component
1898 Reads and processes a patch from the input stream. @param input image input stream @param isFree indicates if the patch is free @param implicitEdge predefined edge points (if not free) @param implicitCornerColor predefined corner colors (if not free) @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points @return Patch object or null if EOF occurs
1899 Reads and processes vertex data from an image stream. @param input ImageInputStream to read from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX Range for X coordinates @param rangeY Range for Y coordinates @param colRangeTab Array of ranges for color components @param matrix Transformation matrix @param xform Additional affine transform @return Vertex object with transformed position and interpolated colors @throws IOException if reading fails or invalid parameters are provided
1900 Retrieves the first color value (PDGamma) from the collection. @return PDGamma object representing the first color or null if not found
1901 Retrieves the second color (index 1) from the collection. @return PDGamma object representing the second color or null if not found
1902 Retrieves the start color from the collection. @return PDGamma object representing the start color or null if not found
1903 Retrieves the end color (fourth color). @return PDGamma object representing the end color
1904 Retrieves the blend mode from the graphics state dictionary. @return BlendMode instance representing the blending mode or NORMAL if not found
1905 Retrieves the destination associated with this action. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1906 Retrieves the destination associated with this navigation action. @return PDDestination object representing the target location @throws IOException if there is an issue creating the destination
1907 Retrieves the destination associated with this link annotation. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1908 Retrieves the destination associated with this outline item. @return PDDestination object or null if not found @throws IOException if the destination type is unknown or conversion fails
1909 Creates a Matrix from a COSBase object. @param base COSBase object to convert @return Matrix instance or default identity matrix if conversion fails
1910 Retrieves an object from a specified path within the PDF structure. @param objPath path to the desired object, using '.' as a separator @return COSBase object or null if not found
1911 Retrieves a destination by name from the PDF document. @param name the destination name to look up @return PDDestination object or null if not found @throws IOException if an I/O error occurs during retrieval
1912 Retrieves the value of an attribute by name. @param attrName the name of the attribute to retrieve @return the COSBase object representing the attribute value, or null if not found
1913 Retrieves attribute value by name with default handling. @param attrName name of the attribute @param defaultValue default value to return if attribute is absent or null @return COSBase object representing the attribute value or default value
1914 Checks if an attribute is specified. @param name attribute name to check @return true if the attribute exists, false otherwise
1915 Retrieves an array of strings by key from the COSDictionary. @param name key for the dictionary object @return array of string names or null if not found
1916 Sets an array of strings as a PDF attribute. @param name key for the attribute @param values array of string values to set
1917 Retrieves a single or array of names from the dictionary. @param name key for the attribute in the dictionary @param defaultValue default value to return if not found @return String or String[] representing the name(s) or default value
1918 Sets an array of names as a PDF attribute. @param name the key for the attribute @param values array of string names to set
1919 Retrieves a number or name from the dictionary. @param name key for the attribute in the PDF dictionary @param defaultValue default value to return if not found or null @return float value if COSNumber, string value if COSName, otherwise defaultValue
1920 Retrieves a number or array of numbers from the dictionary. @param name key for the attribute @param defaultValue default value to return if not found @return float or array of floats, or null if unspecified
1921 Sets an array of numbers as a PDF attribute. @param name the key for the attribute @param values float array to be set
1922 Retrieves color gamma settings by name. @param name attribute key for the color gamma @return PDGamma object or null if not found
1923 Retrieves color or four-color object by name. @param name attribute key for the color array @return PDGamma or PDFourColours object, or null if not found
1924 Retrieves a COSDictionary using specified keys. @param firstKey primary key to search @param secondKey fallback key if primary not found @return COSDictionary object or null if neither key is valid
1925 Retrieves a boolean value by key(s). @param firstKey primary key to search @param secondKey fallback key if primary not found @param defaultValue default boolean value if keys are missing or invalid @return boolean value associated with the keys, or default value
1926 Retrieves integer value by key(s). @param firstKey primary key to search @param secondKey fallback key if primary not found @param defaultValue default integer value if keys are missing or invalid @return integer value from dictionary or default value
1927 Retrieves the list of filters applied to the image. @return List of filter names as strings
1928 Retrieves the color space associated with the shading. @return PDColorSpace instance or throws IOException if creation fails
1929 Determines if a dictionary represents a PDF catalog. @param dictionary the dictionary to check @return true if the dictionary is a catalog, false otherwise
1930 Initializes a PDPageTree with a given root dictionary and document. Handles cases where the root is a page dict instead of a page tree. @param root COSDictionary representing the root of the page tree @param document PDDocument to which this page tree belongs
1931 Checks if a given dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1932 Retrieves the encryption method from the cryptographic filter dictionary. @return COSName representing the encryption method or null if not found
1933 Retrieves the stream filter name for encryption. @return COSName representing the stream filter or IDENTITY if not set
1934 Retrieves the string filter name for encryption. @return COSName representing the string filter, defaulting to IDENTITY if not set
1935 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if conversion fails
1936 Creates a PDXObject based on the given COSBase and resources. @param base underlying data stream for the object @param resources resource cache for managing resources @return PDXObject instance or throws IOException if invalid type
1937 Retrieves the subtype of the soft mask. @return COSName representing the subtype or null if not found
1938 Retrieves the relationship type of the target directory. @return COSName representing the relationship or null if not found
1939 Retrieves the appearance state of the annotation. @return COSName representing the appearance state or null if not found
1940 Sets an embedded string in the dictionary. @param embedded key for the embedded dictionary @param key key for the item within the embedded dictionary @param value string value to set or null to remove
1941 Sets an integer in a nested dictionary. @param embeddedDictionary key to the embedded COSDictionary @param key the COSName key for the item @param value the integer value to set
1942 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
1943 Retrieves the encryption dictionary from the document's trailer. @return COSDictionary containing encryption settings or null if not found
1944 Updates page references in the PDF structure tree. @param cloner utility for cloning objects @param parentTreeEntry root dictionary of the structure tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
1945 Performs the initial parsing of the FDF document to retrieve the root dictionary. Throws an IOException if the root object is missing.
1946 Performs initial parsing of the PDF document. Sets up the root object and checks for missing catalog type. Marks the document as decrypted upon completion.
1947 Retrieves or creates the document information dictionary. @return PDDocumentInformation object containing metadata
1948 Retrieves the document catalog of the PDF. Initializes if not already created. @return PDDocumentCatalog object representing the document's catalog
1949 Retrieves or creates the AcroForm from the PDF document. Applies fixes if provided and different from previously applied. @param acroFormFixup optional fixup for the AcroForm @return PDAcroForm object or null if not found
1950 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
1951 Retrieves or creates the additional actions dictionary. @return PDDocumentCatalogAdditionalActions object representing the actions
1952 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1953 Retrieves the document's named destinations. @return PDDocumentNameDestinationDictionary object or null if not found
1954 Retrieves the mark info dictionary of the document. @return PDMarkInfo object or null if not found
1955 Retrieves URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
1956 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
1957 Retrieves optional content properties of the document. @return PDOptionalContentProperties object or null if not found
1958 Initializes a PDDocumentNameDictionary from the given document catalog. @param cat PDF document catalog
1959 Retrieves the destination name tree node. @return PDDestinationNameTreeNode object or null if not found
1960 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
1961 Retrieves the JavaScript dictionary from the document's name tree. @return PDJavascriptNameTreeNode object or null if not found
1962 Retrieves or creates additional actions for the page. @return PDPageAdditionalActions object representing page actions
1963 Retrieves the transition effect for the page. @return PDTransition object or null if no transition is set
1964 Retrieves an indirect COSObject from resources. @param kind type of resource dictionary @param name specific resource name @return COSObject if found, otherwise null
1965 Retrieves a resource object by type and name. @param kind the type of resource (e.g., font, image) @param name the unique identifier for the resource @return COSBase object or null if not found
1966 Retrieves resource names by type. @param kind the type of resource (e.g., font, color space) @return an iterable set of COSName keys or empty set if none found
1967 Creates a unique COSName key for resources. @param kind type of resource dictionary @param prefix base string for the key @return unique COSName key
1968 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, color space) @param name unique identifier for the resource @param object the COSObjectable resource to add/update
1969 Retrieves the page associated with the marked content. @return PDPage object or null if not found
1970 Retrieves the associated PDF page. @return PDPage object or null if not found
1971 Retrieves the associated PDF page. @return PDPage object or null if not found
1972 Retrieves the ID tree node for structure elements. @return PDNameTreeNode representing the ID tree or null if not found
1973 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
1974 Retrieves the class map from the COSDictionary. @return Map of class names to PDAttributeObject or List of PDAttributeObject
1975 Retrieves the cryptographic filter dictionary by name. @param cryptFilterName unique identifier for the cryptographic filter @return PDCryptFilterDictionary object or null if not found
1976 Sets the cryptographic filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary dictionary containing crypt filter settings
1977 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
1978 Retrieves the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
1979 Retrieves digital signature from the FDF catalog. @return PDSignature object or null if not found
1980 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if not found
1981 Retrieves the appearance dictionary for the field. @return PDAppearanceDictionary object or null if not found
1982 Retrieves the appearance stream reference for the field. @return FDFNamedPageReference object or null if not found
1983 Retrieves and initializes the icon fit settings for the field. @return FDFIconFit object or null if not found
1984 Retrieves additional actions associated with the field. @return PDAdditionalActions object or null if no actions are defined
1985 Retrieves page information. @return FDFPageInfo object or null if not found
1986 Retrieves the template reference from the FDF template. @return FDFNamedPageReference object or null if not found
1987 Retrieves CID system information from the font dictionary. @return PDCIDSystemInfo object or null if not found
1988 Retrieves the PANOSE classification of the font. @return PDPanose object or null if not found or invalid
1989 Retrieves font resources. @return PDResources object or null if not available
1990 Retrieves the character procedures dictionary. @return COSDictionary containing character procedures or null if not found
1991 Retrieves and initializes separation colorants from PDF resources. @param resources the resource dictionary for context @return Map of separation colorant names to PDSeparation objects @throws IOException if an I/O error occurs during processing
1992 Retrieves the DeviceN process from the attributes. @return PDDeviceNProcess object or null if not found
1993 Retrieves the render state for a given destination. @param destination target rendering destination (PRINT, VIEW, or EXPORT) @return corresponding RenderState or null if not found
1994 Retrieves the extended graphics state associated with this shading pattern. @return PDExtendedGraphicsState object or null if not found
1995 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found
1996 Retrieves the target directory for the action. @return PDTargetDirectory object or null if not found
1997 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
1998 Retrieves the target directory from the current dictionary. @return PDTargetDirectory object or null if not found
1999 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
2000 Retrieves the page associated with this annotation. @return PDPage object or null if no page is associated
2001 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2002 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2003 Retrieves the previous URI action. @return PDActionURI object or null if not found
2004 Retrieves the external data dictionary of the annotation. @return PDExternalDataDictionary object or null if not found
2005 Retrieves the border style of the annotation. @return PDBorderStyleDictionary object or null if not found
2006 Retrieves the border effect dictionary of the polygon annotation. @return PDBorderEffectDictionary object or null if not found
2007 Retrieves the border effect dictionary for the annotation. @return PDBorderEffectDictionary object or null if not found
2008 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
2009 Retrieves the additional actions for this annotation. @return PDAnnotationAdditionalActions object or null if none defined
2010 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2011 Retrieves the normal appearance of the annotation. @return PDAppearanceEntry object or null if not found
2012 Retrieves the filter properties from the PDF. @return PDPropBuildDataDict object containing filter details or null if not found
2013 Retrieves publication security properties. @return PDPropBuildDataDict object containing security settings or null if not found
2014 Retrieves application-specific properties from the PDF document. @return PDPropBuildDataDict object containing app properties or null if not found
2015 Retrieves MDP seed value configuration. @return PDSeedValueMDP object or null if not found
2016 Retrieves the seed value certificate. @return PDSeedValueCertificate object or null if not found
2017 Retrieves the timestamp information from the seed value. @return PDSeedValueTimeStamp object or null if not found
2018 Retrieves the property build from the digital signature. @return PDPropBuild object or null if not found
2019 Retrieves the structure element associated with this outline item. @return PDStructureElement object or null if not found
2020 Checks if this outline node has child nodes. @return true if there are child nodes, false otherwise
2021 Retrieves default resources for the form. @return PDResources object or null if not found
2022 Retrieves additional actions for the field. @return PDFormFieldAdditionalActions object or null if not found
2023 Retrieves the signature value. @return PDSignature object or null if not found
2024 Retrieves the default signature value. @return PDSignature object or null if not found
2025 Retrieves the seed value associated with the signature field. @return PDSeedValue object or null if not found
2026 Retrieves the measure dictionary for the viewport. @return PDMeasureDictionary object or null if not found
2027 Retrieves document information associated with the thread. @return PDDocumentInformation object or null if not found
2028 Retrieves the first bead associated with the thread. @return PDThreadBead object or null if no bead is found
2029 Retrieves the thread associated with this bead. @return PDThread object or null if no thread is found
2030 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
2031 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead or null if not found
2032 Retrieves the associated PDF page. @return PDPage object or null if not found
2033 Retrieves the metadata of the PDF document. @return PDMetadata object or null if not present
2034 Retrieves metadata associated with the PDF page. @return PDMetadata object or null if no metadata is found
2035 Retrieves the differences stream from the FDF document. @return COSStream object representing differences or null if not found
2036 Retrieves the font file associated with the font descriptor. @return PDStream object containing the font file or null if not found
2037 Retrieves the second font file stream. @return PDStream object for FontFile2 or null if not found
2038 Retrieves the font file 3 stream. @return PDStream object for font file 3 or null if not found
2039 Retrieves the CID set stream. @return PDStream object representing the CID set or null if not found
2040 Retrieves the sound content associated with the action. @return COSStream object containing sound data or null if not found
2041 Retrieves the normal icon of the annotation. @return PDFormXObject representing the normal icon or null if not found
2042 Retrieves the rollover icon for an annotation. @return PDFormXObject representing the rollover icon or null if not found
2043 Retrieves the alternate icon of the annotation. @return PDFormXObject representing the alternate icon or null if not found
2044 Retrieves appearance streams from a sub-dictionary. @return Map of COSName to PDAppearanceStream for valid entries @throws IllegalStateException if the entry is not a sub-dictionary
2045 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
2046 Writes the PDF document trailer. @param doc COSDocument to write the trailer for @throws IOException if an I/O error occurs
2047 Retrieves or creates the list of threads in the document. @return List of PDThread objects representing threads in the PDF
2048 Retrieves all output intents from the document. @return List of PDOutputIntent objects representing output intents
2049 Adds an output intent to the document's catalog. @param outputIntent PDOutputIntent object representing the output intent
2050 Retrieves thread beads from the page. @return List of PDThreadBead objects representing thread beads or an empty list if none found
2051 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none found
2052 Retrieves child dictionaries from a given node. @param node parent COSDictionary node @return List of COSDictionary representing child nodes
2053 Retrieves child nodes of the current node. @return List of PDNameTreeNode objects representing children or null if none exist
2054 Retrieves a map of names and their corresponding values from the node. @return Immutable map of names to PD objects or null if no names array is found @throws IOException if an error occurs during retrieval or conversion
2055 Retrieves the upper limit value from the limits array. @return The upper limit string or null if not found
2056 Sets the upper limit for name range in the PDNameTreeNode. @param upper the upper bound string to set
2057 Retrieves the lower limit from the limits array. @return Lower limit as a string or null if not found
2058 Sets the lower limit for the name tree. @param lower the lower limit string to be set
2059 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing child nodes
2060 Retrieves and converts numeric values from the PDF document. @return A map of integer keys to COSObjectable values or null if invalid data is found @throws IOException if conversion fails
2061 Retrieves the upper limit from the node's limits array. @return Integer representing the upper limit or null if not found
2062 Sets the upper limit for a node. @param upper the upper limit value or null to remove it
2063 Retrieves the lower limit from the node's limits array. @return Integer representing the lower limit or null if not found
2064 Sets the lower limit for a node. @param lower the lower limit value or null to remove it
2065 Retrieves the range values for the function. @return COSArray containing range values or null if not set
2066 Retrieves the domain values of the PDF function. @return COSArray containing domain values or null if not found
2067 Retrieves the size array of the function. @return COSArray representing the size or null if not found
2068 Retrieves or constructs the decode values for the function. @return COSArray containing decode values, defaults to range values if decode is not set
2069 Retrieves the array of child functions. @return COSArray containing function objects or null if not found
2070 Retrieves the bounds array for the function. @return COSArray representing the bounds or null if not found
2071 Retrieves the encoding array for function evaluation. @return COSArray representing the encoding or null if not found
2072 Retrieves owner user properties associated with the document. @return List of PDUserProperty objects representing owner properties
2073 Adds a user property to the document. @param userProperty the PDUserProperty object to add
2074 Removes a user property from the document. @param userProperty the PDUserProperty object to remove
2075 Retrieves or initializes the guideline color. @return PDColor object representing the guideline color
2076 Checks if an edge is attached. @param edge the edge to check @return true if edge is in the attached list, false otherwise
2077 Retrieves the color of the annotation. @return Color object or null if not set
2078 Retrieves the interior color of the annotation. @return Color object representing the interior color, or null if not set
2079 Retrieves callout coordinates of the annotation. @return float array with callout points or null if not set
2080 Retrieves the ink list from the annotation. @return List of float arrays representing ink coordinates, or null if not found
2081 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not found
2082 Sets the starting style of the line annotation. @param style string representing the style to be set
2083 Retrieves the starting point ending style of the line annotation. @return the ending style as a string or LE_NONE if not set
2084 Sets the ending style for the line annotation. @param style string representing the ending style
2085 Retrieves the ending style of the line annotation. @return the ending style as a string, or default if not set
2086 Retrieves the interior color of the line annotation. @return Color object representing the interior color, or null if not set
2087 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
2088 Retrieves the horizontal offset of the line annotation's caption. @return float value representing the horizontal offset, default is 0.0 if not set
2089 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value to set
2090 Retrieves vertical offset of the line annotation's caption. @return float value representing the vertical offset, or 0 if not set
2091 Retrieves the vertices of the polygon annotation. @return float array of vertex coordinates or null if not found
2092 Retrieves the interior color of the polygon annotation. @return Color object representing the interior color, or null if not set
2093 Retrieves the vertices of the polyline annotation. @return Array of floats representing vertex coordinates, or null if not found
2094 Sets the starting point ending style for the polyline annotation. @param style string representing the line ending style
2095 Retrieves the ending style of the polyline's start point. @return the ending style as a string or default if not found
2096 Sets the ending style for the polyline annotation's endpoint. @param style the desired ending style as a string
2097 Retrieves the ending style of a polyline annotation's endpoint. @return the ending style as a string or LE_NONE if not found
2098 Retrieves the interior color of the polyline annotation. @return Color object representing the interior color, or null if not set
2099 Retrieves the interior color of the annotation. @return Color object representing the interior color, or null if not set
2100 Retrieves coordinates for text markup annotation. @return float array of coordinates or null if not found
2101 Retrieves the ID array of the FDF document. @return COSArray containing the document ID or null if not found
2102 Retrieves form fields from the FDF document. @return List of FDFField objects or null if no fields exist
2103 Retrieves a list of FDFPage objects from the FDF document. @return List of FDFPage objects or null if no pages are found
2104 Retrieves child fields of the current field. @return List of FDFField objects representing child fields or null if none exist
2105 Retrieves options associated with the field. @return List of option strings or FDFOptionElement objects, or null if no options are found
2106 Retrieves templates from the FDF page. @return List of FDFTemplate objects or null if no templates are found
2107 Retrieves form fields from the FDF template. @return List of FDFField objects or null if no fields are present
2108 Retrieves font character widths. @return List of Float objects representing character widths, empty list if none found
2109 Retrieves the white point of the color space. @return PDTristimulus object representing the white point, defaulting to (1, 1, 1) if not set
2110 Retrieves the black point for the color space. @return PDTristimulus object representing the black point, defaulting to (0, 0, 0) if not set
2111 Retrieves the gamma values for the color space. @return PDGamma object representing the gamma values
2112 Retrieves the transformation matrix for color conversion. @return float array representing the transformation matrix or identity matrix if not found
2113 Retrieves the list of component names from the color space. @return List of component names as strings
2114 Retrieves the 'a' component range for LAB color space. Uses default range if not specified in dictionary. @return PDRange object representing 'a' component range
2115 Retrieves the range for the B component of LAB color space. @return PDRange object representing the B component range
2116 Retrieves or initializes the background color array. @return COSArray representing the background colors, or null if not set
2117 Retrieves the domain of the shading. @return COSArray representing the domain or null if not found
2118 Retrieves the extend array for the shading. @return COSArray representing the extend property or null if not found
2119 Retrieves the domain array for the shading. @return COSArray representing the domain or null if not found
2120 Retrieves the coordinates array for the shading. @return COSArray containing the coordinates or null if not found
2121 Retrieves or initializes the decode values. @return COSArray containing decode values or null if not found
2122 Retrieves and initializes a PDFontSetting object from the dictionary. @return PDFontSetting object or null if no font setting is found
2123 Retrieves the fields associated with the reset action. @return COSArray containing field names or null if not found
2124 Retrieves form fields associated with the action. @return COSArray containing field names or null if not found
2125 Retrieves the border array of the annotation. @return COSArray representing the annotation's border, defaulting to [0, 0, 1] if not set
2126 Retrieves rectangle margin differences for the annotation. @return float array of margin differences or empty array if not found
2127 Retrieves rectangle differences for the annotation. @return float array of rectangle differences or empty array if not found
2128 Retrieves the callout coordinates for the annotation. @return float array of callout points or null if not set
2129 Retrieves the ink list from the annotation. @return 2D array of floats representing ink paths or an empty array if not found
2130 Retrieves line coordinates. @return float array of coordinates or null if not found
2131 Sets the starting style of a line annotation. @param style the style to apply; defaults to LE_NONE if null
2132 Retrieves the starting style of the line annotation. @return The starting style as a string or LE_NONE if not set
2133 Sets the end point style of the line annotation. @param style string representing the end point style
2134 Retrieves the end point style of the line annotation. @return The ending style as a string or LE_NONE if not set
2135 Sets the horizontal offset for the caption of a line annotation. @param offset the horizontal offset value
2136 Retrieves the horizontal offset of the line annotation's caption. @return Horizontal offset as a float, defaulting to 0 if not set
2137 Sets the vertical offset for the caption of a line annotation. @param offset the vertical offset value
2138 Retrieves the vertical offset of the caption. @return float value representing the vertical offset, or 0 if not found
2139 Retrieves quad points for the annotation. @return float array of quad points or null if not found
2140 Retrieves the vertices of the polygon annotation. @return float array representing the vertices or null if not found
2141 Retrieves the polygon's path as a 2D float array. @return 2D float array representing the polygon vertices, or null if not found
2142 Sets the starting style of the polyline annotation. @param style the style to apply at the start (null for no style)
2143 Retrieves the starting point style of the polyline. @return String representing the starting point style or default if not set
2144 Sets the ending style of the polyline annotation's endpoint. @param style string representing the ending style or null for default
2145 Retrieves the ending style of the polyline's endpoint. @return String representing the endpoint style or default if not found
2146 Retrieves vertex coordinates of the polyline. @return array of floats representing vertices or null if not found
2147 Retrieves rectangle differences for the annotation. @return float array of rectangle differences or empty array if not found
2148 Retrieves the quad points defining the text markup area. @return float array of quad points or null if not found
2149 Sets the operating system information for digital signatures. @param os name of the operating system or null to remove the entry
2150 Retrieves sub-filter names for digital signature. @return List of sub-filter names or empty list if not found
2151 Retrieves the list of digest methods used in digital signatures. @return List of digest method names as strings
2152 Retrieves the list of reasons for digital signatures. @return List of reason strings or empty list if not found
2153 Retrieves legal attestation fields from the PDF document. @return List of legal attestation field names as strings
2154 Retrieves the subject from a digital signature certificate. @return List of byte arrays representing the subject or null if not found
2155 Adds a subject to the certificate. @param subject byte array representation of the subject
2156 Removes a subject from the certificate's subject list. @param subject byte array representing the subject to remove
2157 Retrieves the list of key usage extensions from the certificate. @return List of key usage strings or null if not found
2158 Adds key usage extension to the certificate. @param keyUsageExtension string containing '0', '1', or 'X' characters
2159 Removes a specific key usage extension from the certificate. @param keyUsageExtension the key usage extension to remove
2160 Retrieves issuer information from the certificate. @return List of byte arrays representing issuer data or null if not found
2161 Adds an issuer to the certificate's issuer list. @param issuer byte array representing the issuer
2162 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
2163 Retrieves the list of OIDs from the certificate. @return List of byte arrays representing OIDs or null if not found
2164 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
2165 Removes an OID from the certificate's OID list. @param oid byte array representing the OID to remove
2166 Retrieves the ByteRange of the signature. @return Array of integers representing the ByteRange or empty array if not found
2167 Retrieves the text color of the outline item. @return PDColor object representing the text color or default black if not set
2168 Retrieves the calculation order of form fields. @return List of PDField objects in calculation order
2169 Retrieves indices of selected options in a choice field. @return List of Integer representing selected option indices or empty list if none selected
2170 Retrieves an array of PDNumberFormatDictionary objects for X-axis changes. @return Array of PDNumberFormatDictionary or null if not found
2171 Retrieves the change Y values as an array of PDNumberFormatDictionary. @return Array of PDNumberFormatDictionary objects or null if not found
2172 Retrieves distance measurement dictionaries. @return Array of PDNumberFormatDictionary or null if not found
2173 Retrieves area measurement dictionaries. @return Array of PDNumberFormatDictionary or null if not found
2174 Retrieves angle measurement formats. @return Array of PDNumberFormatDictionary objects or null if not found
2175 Retrieves line slope number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
2176 Retrieves the coordinate system origin from the PDF document. @return float array representing the origin coordinates, or null if not found
2177 Retrieves the visibility policy. @return COSName representing the visibility policy or ANY_ON if not set
2178 Retrieves or creates a COSName instance and returns its string representation. @param key unique identifier for the value @return String representation of the COSName or null if not found
2179 Retrieves the string representation of a value by key with a default fallback. @param key unique identifier for the value @param defaultValue value to return if key not found @return String representation or default value
2180 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset of the cross-reference table @return true if it's a valid XRef stream, false otherwise @throws IOException if an I/O error occurs during reading
2181 Retrieves the page display mode of the PDF document. @return PageMode enum representing the current page mode, defaulting to USE_NONE if invalid or not set
2182 Retrieves the page layout of the PDF document. @return PageLayout enum representing the current page layout, default is SINGLE_PAGE
2183 Retrieves the version of the PDF document. @return Version string or null if not found
2184 Retrieves the trapped status of the PDF document. @return Trapped status as a string or null if not found
2185 Retrieves the page numbering style. @return String representing the page numbering style or null if not found
2186 Retrieves the type of the PDF object. @return Type as a string or null if not found
2187 Creates a PDAttributeObject based on the dictionary's owner. @param dictionary COSDictionary containing attribute data @return Specific PDAttributeObject or default if no match found
2188 Retrieves the owner of the attribute. @return Owner's name as a string or null if not found
2189 Retrieves the structure type of the PDF element. @return String representing the structure type or null if not found
2190 Creates a PDStructureNode from a COSDictionary. @param node the underlying COSDictionary representing the structure node @return PDStructureNode instance based on the dictionary type @throws IllegalArgumentException if dictionary type is invalid
2191 Retrieves the type of the structure node. @return String representing the node's type or null if not found
2192 Retrieves the name of the user property. @return Name as a string or null if not found
2193 Retrieves the language of marked content. @return Language string or null if not found
2194 Retrieves the type of the marked content artifact. @return Type as a string or null if not found
2195 Retrieves the subtype of the marked content artifact. @return Subtype as a string or null if not found
2196 Retrieves the encryption filter name. @return Filter name as a string or null if not found
2197 Retrieves the SubFilter property of the encryption dictionary. @return String representation of the SubFilter or null if not found
2198 Creates an FDFAnnotation based on the provided COSDictionary. @param fdfDic dictionary containing annotation properties @return FDFAnnotation object or null if unsupported type
2199 Retrieves the intent of the annotation. @return Intent as a string or null if not found
2200 Retrieves the line ending style of the annotation. @return String representation of the line ending style or null if not found
2201 Retrieves the version of the FDF document. @return version string or null if not found
2202 Retrieves the encoding of the FDF document. @return String representing the encoding, default is "PDFDocEncoding"
2203 Retrieves the scale option for icon fitting. @return Scale option as a string, defaulting to SCALE_OPTION_ALWAYS if not set
2204 Retrieves the scale type for icon fitting. @return Scale type as a string, defaulting to proportional if not specified
2205 Retrieves the base font name from the font dictionary. @return Base font name as a string or null if not found
2206 Retrieves the font type. @return String representing the font type or null if not found
2207 Retrieves the subtype of the font. @return Subtype as a string or null if not found
2208 Retrieves the font name from the PDF descriptor. @return Font name as a string or null if not found
2209 Retrieves the font stretch attribute. @return String representation of font stretch or null if not found
2210 Retrieves the base font name from the font dictionary. @return Base font name as a string or null if not found
2211 Retrieves the base font name from the font dictionary. @return Base font name as a string or null if not found
2212 Retrieves the base font name. @return Base font name as a string or null if not found
2213 Retrieves the base font name. @return Base font name as a string or null if not found
2214 Checks if the DeviceN color space has NChannel subtype. @return true if NChannel, false otherwise
2215 Retrieves the type of the PDF action. @return String representing the action type or null if not found
2216 Retrieves the subtype of the PDF action. @return Subtype as a string or null if not found
2217 Creates a PDAction from a COS dictionary. @param action COSDictionary containing action details @return PDAction object or null if unsupported type
2218 Retrieves the subtype of the annotation. @return The string representation of the annotation's subtype or null if not found
2219 Retrieves the caption positioning of the line annotation. @return String representation of the caption positioning or null if not found
2220 Retrieves the intent of the annotation. @return String representation of the annotation's intent or null if not found
2221 Retrieves the subtype of the external data dictionary. @return Subtype as a string or null if not found
2222 Retrieves the name of the digital signature property. @return Name as a string or null if not found
2223 Retrieves the filter name associated with the digital signature. @return Filter name as a string or null if not found
2224 Retrieves the URL type from the certificate. @return URL type as a string or null if not found
2225 Retrieves the filter name of the digital signature. @return String representing the filter or null if not found
2226 Retrieves the sub-filter type of the digital signature. @return Sub-filter as a string or null if not found
2227 Retrieves the field type as a string. @return Field type identifier or null if not found
2228 Retrieves the name of the viewport. @return Name as a string or null if not found
2229 Retrieves the duplex printing preference. @return String representation of duplex setting or null if not found
2230 Retrieves string value by key from the dictionary. @param key unique identifier for the value @return Decoded string or null if not found or not a COSString
2231 Retrieves string value by key with a default fallback. @param key unique identifier for the value @param defaultValue value to return if key is not found or null @return Decoded string from dictionary or provided default
2232 Retrieves the language of the PDF document. @return Language code as a string or null if not specified
2233 Retrieves the title of the PDF document. @return Title as a string or null if not set
2234 Retrieves the author of the PDF document. @return Author's name as a string or null if not set
2235 Retrieves the subject of the PDF document. @return Subject string or null if not found
2236 Retrieves keywords from PDF document metadata. @return Keywords string or null if not found
2237 Retrieves the creator of the PDF document. @return Creator string or null if not found
2238 Retrieves the producer of the PDF document. @return String representing the producer or null if not found
2239 Retrieves the prefix for page labels. @return Prefix string or null if not found
2240 Retrieves the Unicode file name. @return File name in Unicode or null if not found
2241 Retrieves the file name from the PDF specification. @return File name as a string or null if not found
2242 Retrieves DOS file specification. @return DOS file name or null if not found
2243 Retrieves the MAC attribute of the file. @return MAC string or null if not found
2244 Retrieves the Unix file name. @return File name as string or null if not found
2245 Retrieves the file description. @return Description of the file as a string or null if not found
2246 Retrieves the unique identifier of the PDF element. @return The ID string or null if not found
2247 Retrieves the title of the PDF structure element. @return Title string or null if not found
2248 Retrieves the language attribute of the PDF element. @return Language string or null if not set
2249 Retrieves alternate description of the PDF element. @return Alt text or null if not found
2250 Retrieves the expanded form of the element. @return Expanded form as a string or null if not found
2251 Retrieves the actual text associated with the element. @return The actual text as a string, or null if not found
2252 Retrieves formatted value of the property. @return Formatted string value or null if not found
2253 Retrieves the actual text of the marked content. @return The actual text as a string, or null if not found or properties are missing
2254 Retrieves alternate description of marked content. @return Alternate description string or null if not available
2255 Retrieves the expanded form of marked content. @return Expanded form as a string or null if not found
2256 Retrieves the date of the annotation. @return Date string or null if not found
2257 Retrieves the name of the annotation. @return Name of the annotation or null if not found
2258 Retrieves the content of the annotation. @return Annotation's content as a string or null if not found
2259 Retrieves the title of the annotation. @return Title string or null if not found
2260 Retrieves the subject of the annotation. @return Subject string or null if not found
2261 Retrieves the symbol associated with the caret annotation. @return Symbol string or null if not found
2262 Retrieves rotation angle of the annotation. @return Rotation angle as string or null if not set
2263 Retrieves default appearance string of the annotation. @return Default appearance string or null if not found
2264 Retrieves the default style of the annotation. @return Default style as a string or null if not found
2265 Retrieves the caption style of the line annotation. @return The caption style as a string or null if not set
2266 Retrieves the state of the annotation. @return State string or null if not found
2267 Retrieves the state model of the annotation. @return State model as a string or null if not found
2268 Retrieves the status of the FDF document. @return Decoded string representing the document's status or null if not found
2269 Retrieves the target URL from the FDF document. @return Target URL as a string or null if not found
2270 Retrieves the partial name of the form field. @return Partial field name as a string or null if not found
2271 Retrieves the name of the referenced page. @return Name of the page or null if not found
2272 Retrieves the font family name. @return Font family as a string or null if not found
2273 Retrieves the character set of the font. @return Character set string or null if not found
2274 Retrieves the name of the optional content group. @return Name of the OCG or null if not found
2275 Retrieves names of optional content groups. @return Array of group names or empty array if none found
2276 Retrieves the file specification for the launch action. @return File path or URL to be launched
2277 Retrieves the destination file specification. @return Destination string or null if not found
2278 Retrieves the file path or URL to be opened. @return File path or URL as a string, or null if not found
2279 Retrieves the preferred application to launch. @return Application name or null if not specified
2280 Retrieves the URI from the PDF action. @return Decoded URI string or null if not found
2281 Retrieves the filename associated with the target directory. @return Filename as a string or null if not found
2282 Retrieves the annotation name from the dictionary. @return Annotation name as a string or null if not found
2283 Retrieves the filename from launch parameters. @return Filename as a string or null if not found
2284 Retrieves directory path from parameters. @return Directory path as a string or null if not found
2285 Retrieves execution parameter from PDF dictionary. @return Execution parameter string or null if not found
2286 Retrieves the contents of the annotation. @return Annotation content as a string or null if not found
2287 Retrieves the modified date of the annotation. @return The modification date as a string or null if not found
2288 Retrieves the name of the annotation. @return The name as a string or null if not found
2289 Retrieves the default appearance string of the annotation. @return Default appearance settings as a string or null if not found
2290 Retrieves the default style string of the annotation. @return Default style string or null if not found
2291 Retrieves the title popup text of the annotation. @return The title popup as a string or null if not set
2292 Retrieves the subject of the annotation. @return Subject string or null if not found
2293 Retrieves the state of the text annotation. @return The current state as a string or null if not found
2294 Retrieves the state model of the annotation. @return The state model as a string or null if not found
2295 Retrieves the normal caption of the annotation. @return Normal caption as a string or null if not found
2296 Retrieves the rollover caption of the annotation. @return Rollover caption as a string or null if not set
2297 Retrieves the alternate caption of the annotation. @return Alternate caption as a string or null if not found
2298 Retrieves the date of the digital signature. @return Date string from the dictionary or null if not found
2299 Retrieves the operating system information from the digital signature. @return OS name as a string or null if not found
2300 Retrieves subject distinguished names from the certificate. @return List of maps containing key-value pairs for each DN or null if not found
2301 Retrieves the URL from the certificate's dictionary. @return The URL as a string or null if not found
2302 Retrieves the URL associated with the digital signature. @return The URL as a string or null if not found
2303 Retrieves the name of the digital signature. @return Name of the signature or null if not found
2304 Retrieves the location information from the digital signature. @return Location string or null if not found
2305 Retrieves the reason for the digital signature. @return Reason string or null if not found
2306 Retrieves contact information from the signature. @return Decoded contact info string or null if not found
2307 Retrieves the title of the outline item. @return Title string or null if not found
2308 Retrieves the partial name of the field. @return Partial name as a string or null if not found
2309 Retrieves the alternate field name. @return Alternate field name as a string or null if not found
2310 Retrieves the mapping name of the field. @return The string value associated with COSName.TM, or null if not found.
2311 Retrieves default style string from COS object. @return Default style string or null if not found
2312 Retrieves the scale ratio from the PDF dictionary. @return Scale ratio as a string or null if not found
2313 Retrieves date value by key from the dictionary. @param key unique identifier for the date value @return Calendar object or null if not found or conversion fails
2314 Retrieves date value by key; returns default if not found. @param key unique identifier for the date value @param defaultValue Calendar object to return if key is not found @return Calendar object or specified default value
2315 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not available
2316 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
2317 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an I/O error occurs while accessing the PDF document
2318 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found
2319 Retrieves the signing date of the PDF signature. @return Calendar object representing the signing date or null if not found
2320 Retrieves a long value by key from the dictionary. @param key unique identifier for the value @return long value associated with the key or default value (-1)
2321 Retrieves a long value by key from the dictionary. @param key unique identifier for the value @return long value associated with the key or default value (-1)
2322 Retrieves a long value by key from the dictionary. @param key unique identifier for the value @param defaultValue default value if key not found or not a COSNumber @return long value associated with the key or default value
2323 Decodes an input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param options DecodeOptions specifying additional decode settings @param results List for storing DecodeResult objects (optional) @return RandomAccessRead object with decoded data @throws IOException if an I/O error occurs during decoding
2324 Sets the startxref byte position and resolves cross-reference trailers. @param startxrefBytePosValue starting byte position of xref table
2325 Retrieves float value by key from the dictionary. @param key unique identifier for the value @return float value associated with the key or default value (-1)
2326 Retrieves a float value by key from the dictionary. @param key unique identifier for the value @return float value associated with the key or default value of -1
2327 Retrieves a float value by key from the dictionary. @param key unique identifier for the value @param defaultValue default float value if key not found or not a COSNumber @return float value associated with the key or default value
2328 Retrieves the user unit of the PDF page. @return user unit value or default to 1.0 if not positive
2329 Retrieves the guideline width. @return float representing the guideline width, default is 1 if not set
2330 Retrieves the opacity of the annotation. @return opacity value between 0 (invisible) and 1 (fully visible)
2331 Retrieves the font weight. @return font weight as a float or 0 if not specified
2332 Retrieves the italic angle of the font. @return float value representing the italic angle or 0 if not specified
2333 Retrieves the ascent value of the font. @return font's ascent in points or 0 if not specified
2334 Retrieves the font descent value. @return float representing the descent of the font or 0 if not found
2335 Retrieves the leading (line spacing) of the font. @return line spacing value as a float
2336 Retrieves the cap height of the font. @return float value representing the cap height or absolute value if negative
2337 Retrieves the x-height of the font. @return absolute value of x-height as a float
2338 Retrieves the vertical stem width of the font. @return vertical stem width as a float value or 0 if not found
2339 Retrieves stem height value. @return stem height as float or default value of 0 if not found
2340 Retrieves the average width of the font. @return average width value or 0 if not found
2341 Retrieves the maximum width of the font. @return maximum width value or 0 if not specified
2342 Retrieves the missing width of the font. @return float value representing the missing width or 0 if not specified
2343 Retrieves gamma correction value. @return gamma value from dictionary or default of 1.0f
2344 Retrieves the horizontal step of the tiling pattern. @return horizontal spacing between pattern tiles
2345 Retrieves the Y step of the tiling pattern. @return Y step value as a float
2346 Retrieves the sound volume. @return volume level between -1 and 1, defaulting to 1 if out of range
2347 Retrieves the length of the leader line. @return length of the leader line or default value if not found
2348 Retrieves the leader line extension length. @return leader line extension length as a float value; default is 0 if not set
2349 Retrieves the leader line offset length of the annotation. @return float value representing the leader line offset length or default (0)
2350 Retrieves the constant opacity of the annotation. @return float value representing opacity or default value if not set
2351 Retrieves the border width. @return float value of the border width or default value if not set
2352 Retrieves the duration of the transition. @return duration in seconds, default is 1 second if not specified
2353 Retrieves the scale factor for fly transition. @return scale factor as a float, default is 1 if not specified
2354 Writes an operator token to the PDF output stream. @param op the Operator object to write @throws IOException if an I/O error occurs
2355 Extracts text from specified regions on a given PDF page. @param page the PDF page to extract text from @throws IOException if an I/O error occurs during processing
2356 Retrieves the role map from the PDF structure. @return Map containing role mappings or an empty map if not found
2357 Appends a child node to the current structure node. @param objectable the COSObjectable object representing the child node
2358 Inserts a COSObjectable before a reference object. @param newKid the new child node to insert @param refKid the reference node before which to insert
2359 Removes a child node that can be converted to a COSBase. @param objectable the object representing the child node to remove @return true if the child was successfully removed, false otherwise
2360 Sets the value of the user property and notifies if changed. @param value new value for the property
2361 Retrieves the color space for the transparency group. @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
2362 Creates a PDPropertyList based on the COSDictionary type. @param dict COSDictionary representing the property list @return PDPropertyList instance or subclass specific to the dictionary type
2363 Retrieves the line width from the graphics state. @return Float value representing the line width, or null if not set
2364 Retrieves the miter limit value. @return Miter limit as a Float or null if not found
2365 Retrieves flatness tolerance value. @return Float object representing flatness tolerance or null if not found
2366 Retrieves smoothness tolerance value. @return Float representing smoothness or null if not found
2367 Retrieves the stroking alpha constant. @return Float value representing the alpha constant or null if not found
2368 Retrieves non-stroking alpha constant. @return Float value of non-stroking alpha or null if not found
2369 Constructs a PDAnnotationLink from a COSDictionary. @param field dictionary containing link annotation data
2370 Constructs a PDAnnotationMarkup from a given dictionary. @param dict the COSDictionary containing annotation data
2371 Constructs a PDAnnotationPopup instance. @param field COSDictionary containing popup annotation data
2372 Constructs a PDAnnotationUnknown with a given dictionary. @param dic the COSDictionary containing annotation data
2373 Constructs a PDAnnotationWidget from a COSDictionary. Initializes the annotation with a specific subtype. @param field the COSDictionary containing annotation data
2374 Retrieves export values for the choice field. @return List of export value strings available in the choice field
2375 Retrieves the current value(s) of the choice field. @return List of selected values or empty list if none selected
2376 Retrieves the default value(s) for the choice field. @return List of default values or empty list if none set
2377 Writes a PDF object to the output stream. @param obj the COSBase object to write @throws IOException if an I/O error occurs during writing
2378 Writes a COSBase object to the output stream. Handles various COS types and uses compression pool if applicable. @param output target OutputStream for writing @param object COSBase object to write @param topLevel flag indicating if it's a top-level object @throws IOException if an I/O error occurs
2379 Adds a corner curl effect to the PDF border. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius radius of the arc @param cx center x-coordinate @param cy center y-coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo flag to add initial move-to command @throws IOException if I/O error occurs during writing
2380 Draws a basic ellipse in the PDF. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary @throws IOException if I/O error occurs during drawing
2381 Initializes a new PDPageFitDestination. Sets up the destination to fit a page view by growing the array and setting the type.
2382 Sets the page view to fit the bounding box. @param fitBoundingBox flag indicating whether to fit the bounding box
2383 Initializes a new PDPageFitHeightDestination. Sets up the destination to fit page height with specific parameters.
2384 Sets the left position of the destination. @param x left position value or -1 to reset
2385 Sets whether the destination fits the bounding box. @param fitBoundingBox flag to enable or disable bounding box fitting
2386 Initializes a new PDF page destination focused on a rectangle. Grows the internal array to accommodate rectangle coordinates and sets the type.
2387 Sets the left coordinate of the rectangle. @param x left coordinate value or -1 to clear it
2388 Sets the bottom coordinate of the rectangle. @param y bottom coordinate value
2389 Sets the right coordinate of the rectangle. @param x right coordinate value
2390 Sets the top coordinate of the rectangle. @param y top coordinate value
2391 Initializes a new PDPageFitWidthDestination. Sets up the destination to fit page width with default parameters.
2392 Sets the top position for page fitting. @param y vertical coordinate or -1 to clear
2393 Sets whether to fit the bounding box of the page. @param fitBoundingBox true to fit bounding box, false otherwise
2394 Initializes a new PDPageXYZDestination with default settings. Sets up an internal array and specifies the destination type.
2395 Sets the left position of the destination. @param x horizontal coordinate or -1 to clear
2396 Sets the top position of the destination. @param y vertical coordinate for top positioning
2397 Sets the zoom level for the PDF destination. @param zoom zoom factor to apply; -1 indicates no zoom
2398 Resolves the bounding box for a form field's appearance. @param fieldWidget widget representing the form field @param appearanceStream stream defining the visual appearance @return resolved bounding box, using field widget's rectangle if necessary
2399 Decrypts a PDF dictionary. @param dictionary the COSDictionary to decrypt @param objNum unique identifier of the PDF object @param genNum generation number of the PDF object @throws IOException on I/O errors or security exceptions
2400 Sets the bounding box for a layout element. @param bbox PDRectangle object defining the new bounding box
2401 Sets a color attribute by name. @param name the attribute key @param value the PDGamma color value to set or null to remove
2402 Sets four color values for a named attribute. @param name the attribute key @param value PDFourColours object representing the colors
2403 Constructs a new PDPage with letter size.
2404 Retrieves or creates the FDF dictionary for the catalog. @return FDFDictionary object associated with the catalog
2405 Initializes a new FDFDocument instance. Sets up default values for document state, version, and catalog.
2406 Retrieves or creates the FDF catalog. @return FDFCatalog instance associated with the document
2407 Retrieves or initializes the fractional space allocation for icon. @return PDRange object representing the space allocation
2408 Builds and sets the CIDSet for embedding Type 2 CID fonts. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O error occurs during stream creation
2409 Initializes a new PDTilingPattern. Sets default properties and resources as per PDF specification.
2410 Inserts a sibling before the current outline item. @param newSibling the PDOutlineItem to insert as a sibling
2411 Inserts a new sibling outline item after the current item. @param newSibling the PDOutlineItem to insert as a new sibling
2412 Sets the first bead of the thread. @param bead the PDThreadBead object to set as the first bead
2413 Initializes a new PDThreadBead with an empty dictionary and sets itself as both the next and previous bead.
2414 Sets the role map for the structure tree. @param roleMap mapping of PDF roles to string values
2415 Sets a PDF name attribute and notifies of change if updated. @param name the attribute key @param value the attribute value to set
2416 Sets the rendering intent for graphics. @param ri string representation of the rendering intent
2417 Sets the name associated with the action. @param name the name to be set
2418 Sets the style of the border effect. @param s string representation of the style
2419 Initializes PDPageLabels with a given PDF document. Sets up a default page label range starting from page 0. @param document the PDDocument to manage page labels for
2420 Constructs a new PDF structure element. @param structureType the type of the structure element @param parent the parent PDStructureNode
2421 Initializes a new PDF structure tree root. @param TYPE the type of the structure node
2422 Initializes a new PDF shading pattern. Sets the pattern type to "Shading".
2423 Constructs a new PDAction with an empty dictionary and sets its type.
2424 Retrieves the document outline. @return PDDocumentOutline object or null if not found
2425 Retrieves the parent outline node. @return PDOutlineNode or PDDocumentOutline object, or null if no parent exists
2426 Initializes a new measurement dictionary. Sets up the subtype to "RectlinearMeasure".
2427 Constructs a PDTransition with default right-to-left style.
2428 Sets a date value in the dictionary using a string key. @param key string representation of the PDF name @param date GregorianCalendar instance representing the date
2429 Sets a date in an embedded dictionary. @param embedded key for the embedded dictionary @param key key for the date entry @param date GregorianCalendar instance representing the date
2430 Sets the creation date of the PDF document. @param date GregorianCalendar instance representing the creation date
2431 Sets the modification date of the PDF document. @param date GregorianCalendar instance representing the modification date
2432 Sets the creation date of the annotation. @param date GregorianCalendar instance representing the creation date
2433 Sets the modification date of the annotation. @param c GregorianCalendar instance representing the new modification date
2434 Sets the creation date of the annotation. @param creationDate GregorianCalendar instance representing the creation date
2435 Sets the signing date of the digital signature. @param cal GregorianCalendar instance representing the signing date
2436 Sets a custom metadata value in the PDF document. @param fieldName the name of the metadata field @param fieldValue the value to set for the metadata field
2437 Sets a string value in the PDF dictionary. @param name key for the attribute @param value string value to set or remove if null
2438 Sets the 'Base' URI string in the COSDictionary. @param base the base URI string to be set
2439 Sets the application version in the PDF property dictionary. @param applicationVersion the version string to set
2440 Sets the units of measurement in the number format dictionary. @param units the string representing the units (e.g., "mm", "in")
2441 Sets the fractional display style for number formatting. @param fractionalDisplay the desired display style ("D", "F", "R", "T", or null) @throws IllegalArgumentException if the value is not one of the allowed options
2442 Sets the thousands separator for numerical values. @param thousandsSeparator the character to use as a thousands separator
2443 Sets the decimal separator in the number format. @param decimalSeparator the character to use as the decimal separator
2444 Sets the label prefix string in the PDF number format dictionary. @param labelPrefixString the prefix string to be set
2445 Sets the label suffix string in the COSDictionary. @param labelSuffixString the suffix to be appended to labels
2446 Sets the label position to value. @param labelPositionToValue position setting ("S", "P", or null)
2447 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if an error occurs during processing
2448 Constructs a new optional content group with a specified name. @param name the name of the OCG to be created
2449 Sets an integer attribute in the COS dictionary. @param name key for the attribute @param value integer value to set
2450 Sets an integer attribute in the PDF dictionary. @param name the attribute key as a string @param value the integer value to set
2451 Sets the denominator for numerical formatting. @param denominator integer value to represent the denominator
2452 Creates a PDImageXObject from a BufferedImage. @param document PDF document to store the image @param image input 1-bit black and white BufferedImage @return PDImageXObject ready for PDF inclusion @throws IOException if image processing fails
2453 Sets the number of bits per color component. @param bitsPerComponent the number of bits for each color component
2454 Sets the number of bits per color component for shading. @param bitsPerComponent the number of bits for each color component
2455 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits for each coordinate
2456 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits for each coordinate
2457 Sets a float number in the dictionary by name. @param name key for the attribute @param value float value to set
2458 Sets the intensity of the border effect. @param i the intensity value to set
2459 Sets the conversion factor for numerical values. @param conversionFactor the conversion factor to apply
2460 Parses a directory object from the PDF source. Handles various types like dictionaries, strings, numbers, and arrays. @return COSBase object representing the parsed directory object @throws IOException if an I/O error occurs during parsing
2461 Retrieves file specification from the PDF stream. @return PDFileSpecification object representing the file or null if not found @throws IOException if there's an issue with creating the file specification
2462 Retrieves file specification associated with the FDF document. @return PDFileSpecification object or null if not found @throws IOException if an error occurs during retrieval
2463 Retrieves embedded FDF files. @return List of PDFileSpecification objects or null if none found @throws IOException if an error occurs while creating file specifications
2464 Retrieves file specification from named page reference. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2465 Retrieves file specification associated with this action. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2466 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2467 Retrieves the file specification for the launch action. @return PDFileSpecification object representing the file to be launched @throws IOException if an error occurs while creating the file specification
2468 Retrieves file specification associated with the remote goto action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs during retrieval
2469 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2470 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2471 Retrieves the file specification of the attachment. @return PDFileSpecification object representing the attached file @throws IOException if an error occurs while creating the file specification
2472 Default constructor initializes a highlight annotation. Sets the subtype to "Highlight".
2473 Constructs a new squiggly line annotation. Initializes the subtype to "Squiggly".
2474 Initializes a strikeout annotation.
2475 Default constructor initializes an underline annotation.
2476 Initializes a new file attachment annotation. Sets the subtype to 'FileAttachment'.
2477 Constructs a new PDAnnotationInk. Initializes an ink annotation with subtype set to "INK".
2478 Constructs a new PDAnnotationLine. Initializes the annotation with default settings and sets arbitrary line coordinates.
2479 Constructs a new polygon annotation. Initializes the annotation's subtype in the PDF document.
2480 Constructs a new PDAnnotationPolyline. Initializes a polyline annotation with default settings.
2481 Initializes a new rubber stamp annotation. Sets the subtype to indicate it is a rubber stamp.
2482 Constructs a new square or circle annotation. @param subType specifies the type of annotation ("Square" or "Circle")
2483 Initializes a new text annotation. Sets the subtype to 'Text' in the PDF object.
2484 Initializes a new text markup annotation. @param subType subtype of the annotation (e.g., "Highlight")
2485 Retrieves the bounding box of the marked content. @return PDRectangle object or null if not found
2486 Retrieves the bounding box for the layout attribute. @return PDRectangle object representing the bounding box or null if not found
2487 Retrieves the bounding rectangle of the annotation. @return PDRectangle object or null if not found
2488 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not set
2489 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not set
2490 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe or null if not set
2491 Retrieves the fringe dimensions of the annotation. @return PDRectangle object representing the fringe or null if not set
2492 Retrieves the font bounding box. @return PDRectangle object representing the font's bounding box or null if not found
2493 Retrieves the font bounding box. @return PDRectangle object representing the font's bounding box or null if not found
2494 Retrieves the bounding box of the form XObject. @return PDRectangle object representing the bounding box or null if not set
2495 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
2496 Retrieves the bounding box of the shading. @return PDRectangle object representing the bounding box or null if not defined
2497 Retrieves the rectangle associated with the annotation. @return PDRectangle object or null if invalid or missing
2498 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the rectangle difference or null if not set
2499 Retrieves the rectangle difference for the annotation. @return PDRectangle object representing the difference or null if not set
2500 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
2501 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if not found
2502 Sets the line dash pattern for rendering. @param array COSArray representing dash lengths @param phase initial dash pattern phase, adjusted if negative
2503 Retrieves or creates the line dash pattern for guidelines. @return PDLineDashPattern object representing the line style
2504 Retrieves the line dash pattern from the graphics state. @return PDLineDashPattern object or null if not found
2505 Retrieves the dash style of the border. @return PDLineDashPattern object representing the dash pattern
2506 Generates a stencil image from PDImage. @param pdImage the PDF image to process @param paint the color used for masking @return BufferedImage with applied mask @throws IOException if an I/O error occurs
2507 Retrieves the transformation matrix of the form XObject. @return Matrix representing the affine transformation or identity matrix if not set
2508 Retrieves the transformation matrix of the pattern. @return Matrix representing the pattern's transformation or identity matrix if not set
2509 Retrieves the transformation matrix for the shading. @return Matrix object representing the transformation or default identity matrix if not found
2510 Sets an attribute value by name. @param attrName the name of the attribute to set @param attrValue the COSBase value to assign to the attribute
2511 Retrieves an inheritable attribute from a PDF page node. @param node the current COSDictionary node @param key the attribute key to search for @return COSBase object of the attribute or null if not found
2512 Retrieves a boolean value by key. @param key primary key to search @param defaultValue default boolean value if key is missing or invalid @return boolean value associated with the key, or default value
2513 Retrieves integer value by key. @param key primary key to search @param defaultValue default integer value if key is missing or invalid @return integer value from dictionary or default value
2514 Retrieves integer value by key(s) with default of -1. @param firstKey primary key to search @param secondKey fallback key if primary not found @return integer value from dictionary or -1
2515 Initializes a PDInlineImage with given parameters, data, and resources. Decodes image data using specified filters. @param parameters PDF dictionary containing image attributes @param data raw image byte data @param resources PDF resources associated with the image @throws IOException if decoding fails or invalid filters are used
2516 Determines the file suffix based on image filters. @return File suffix as a string ("jpg", "tiff", or "png")
2517 Retrieves COSObjects by specified types from the document. @param type1 primary type to match @param type2 optional secondary type to match @return List of COSObjects matching the given types
2518 Searches for PDF trailer and validates its contents. @param trailer dictionary to populate with found entries @return true if valid trailer is found, false otherwise
2519 Searches for and sets document catalog and info dictionary in the trailer. @param trailer COSDictionary representing the PDF trailer @return true if a catalog object is found, false otherwise @throws IOException if an I/O error occurs during parsing
2520 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
2521 Initializes a PDPageTree with a given root dictionary. @param root COSDictionary representing the root of the page tree
2522 Converts a character code to its Unicode representation using a custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
2523 Retrieves the transparency group associated with the soft mask. Initializes resources and creates a PDXObject if necessary. @return PDTransparencyGroup instance or null if not found @throws IOException if an error occurs during resource creation
2524 Sets the Mac OS subtype for the embedded file. @param macSubtype the Mac OS subtype to set or null to remove
2525 Sets the Mac OS creator attribute for the embedded file. @param macCreator the Mac OS creator string to set or null to remove
2526 Sets the Mac resource fork of the embedded file. @param macResFork string representing the Mac resource fork data
2527 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
2528 Parses an FDF document and returns it as an FDFDocument object. Handles I/O errors and ensures resources are closed properly. @return FDFDocument parsed from the input source @throws IOException if parsing fails or resources cannot be accessed
2529 Parses a PDF document with specified leniency. @param lenient true to enable lenient parsing, false otherwise @return PDDocument object parsed from the input @throws IOException if an error occurs during parsing
2530 Retrieves or creates the AcroForm with default fixes. @return PDAcroForm object or null if not found
2531 Finds the page destination for a given named destination. @param namedDest the named destination to look up @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs during retrieval
2532 Retrieves a PDColorSpace by name. @param name the unique identifier for the color space @param wasDefault indicates if this is the default color space @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
2533 Checks if a color space resource exists by name. @param name unique identifier for the color space @return true if the color space exists, false otherwise
2534 Retrieves an extended graphics state by name. @param name the unique identifier for the graphics state @return PDExtendedGraphicsState object or null if not found
2535 Checks if the resource is an image XObject. @param name the unique identifier for the resource @return true if the resource is an image XObject, false otherwise
2536 Retrieves all color space names from the PDF resources. @return an iterable set of COSName keys representing color spaces or empty set if none found
2537 Retrieves names of XObjects in PDF resources. @return iterable set of COSName keys or empty set if none found
2538 Retrieves all font names from PDF resources. @return iterable set of COSName keys representing font names or empty set if none found
2539 Retrieves property names from PDF resources. @return an iterable set of COSName keys representing properties or empty set if none found
2540 Retrieves shading resource names. @return iterable set of COSName keys or empty set if none found
2541 Retrieves pattern names from resources. @return iterable set of COSName keys representing patterns or empty if none found
2542 Retrieves external graphics state names. @return an iterable set of COSName keys or empty set if none found
2543 Adds or retrieves a resource in the PDF document. @param kind type of resource (e.g., font, color space) @param prefix base string for the key @param object the COSObjectable resource to add/update @return unique COSName key for the resource
2544 Adds or updates a font resource in the PDF document. @param name unique identifier for the font resource @param font the PDFont object to add/update
2545 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace the PDColorSpace to add/update
2546 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState the PDExtendedGraphicsState object to add/update
2547 Adds or updates a shading resource in the PDF document. @param name unique identifier for the shading resource @param shading the PDShading object to add/update
2548 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern @param pattern the PDAbstractPattern resource to add/update
2549 Adds or updates a property list resource. @param name unique identifier for the resource @param properties the PDPropertyList to add/update
2550 Adds or updates an XObject resource in the PDF document. @param name unique identifier for the XObject @param xobject the XObject resource to add/update
2551 Sets the embedded file in the PDF specification. @param file the PDEmbeddedFile to set or null to remove
2552 Sets the embedded file with Unicode name. @param file PDEmbeddedFile to be set
2553 Retrieves the standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
2554 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
2555 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary dictionary containing crypt filter settings
2556 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary dictionary containing crypt filter settings
2557 Retrieves the character procedure for a given encoding code. @param code the encoding code @return PDType3CharProc object or null if not found
2558 Retrieves the base state of optional content. @return BaseState representing the current state, defaults to ON if not set
2559 Sets the base state of optional content. @param state BaseState object representing the new state
2560 Enables or disables an optional content group. @param group the PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was successfully modified, false otherwise
2561 Initializes a new content stream for a tiling pattern. @param pattern the PDTilingPattern to write to @throws IOException if I/O error occurs or multiple writers are opened
2562 Retrieves or initializes the appearance dictionary for an annotation. @return PDAppearanceDictionary object, never null
2563 Retrieves the rollover appearance of the annotation. @return PDAppearanceEntry object for rollover state or normal appearance if not found
2564 Retrieves the down appearance of the annotation. @return PDAppearanceEntry object or normal appearance if not found
2565 Retrieves the first child outline item. @return PDOutlineItem object or null if no children exist
2566 Retrieves the last child outline item. @return PDOutlineItem object representing the last child or null if not found
2567 Retrieves the digital signature. @return PDSignature object or null if not set
2568 Appends a new bead to the thread. @param append PDThreadBead object to be appended
2569 Retrieves the normal appearance stream of the annotation. @return PDAppearanceStream object or null if not found
2570 Retrieves the value representing the 'on' state of the checkbox. @return The string representation of the 'on' value, or an empty string if not found.
2571 Validates and processes the pages dictionary in a PDF document. @param root the root dictionary of the PDF document @throws IOException if the page tree is invalid or missing
2572 Retrieves the value associated with a given name. @param name key to search for in the tree @return value of type T if found, otherwise null @throws IOException if an error occurs during retrieval
2573 Retrieves the value at a specified index from the tree. @param index the position of the value to retrieve @return the value at the specified index or null if not found @throws IOException if an I/O error occurs during retrieval
2574 Sets the child nodes (kids) for this tree node. Updates limits based on first and last kid's limits. @param kids list of child PDNumberTreeNode objects
2575 Sets the numeric values and their limits for a PDF node. @param numbers map of integers to COSObjectable values
2576 Retrieves the number of output parameters for the function. Uses cached value if available, otherwise calculates based on range values. @return Number of output parameters
2577 Retrieves the output range for a specified parameter. @param n index of the output parameter @return PDRange object representing the range or null if not set
2578 Clips each input value to its corresponding specified range. @param inputValues array of values to clip @return array of clipped values within defined ranges
2579 Retrieves the number of input parameters for the PDF function. @return Number of input parameters
2580 Retrieves the domain range for a specific input parameter. @param n index of the input parameter @return PDRange object representing the domain or null if not found
2581 Calculates the sample index based on input vector. @param vector array of integer coordinates @return calculated index for interpolation
2582 Retrieves or constructs the encode values for the function. @return COSArray containing encode values, defaulting to [0 (size[0]-1) 0 (size[1]-1) ...] if not specified
2583 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
2584 Retrieves and initializes the encoding range for a specified parameter. @param n index of the parameter @return PDRange object representing the encoding range
2585 Checks if the top edge of the content is attached. @return true if the top edge is attached, false otherwise
2586 Checks if the bottom edge of the content is attached. @return true if bottom edge is attached, false otherwise
2587 Checks if the left edge of the marked content artifact is attached. @return true if the left edge is attached, false otherwise
2588 Checks if the right edge of the content is attached. @return true if the right edge is attached, false otherwise
2589 Initializes a PDCIDFont with the given dictionary and parent. @param fontDictionary COSDictionary containing font data @param parent PDType0Font that owns this CID font
2590 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding type, e.g., COSName.STANDARD_ENCODING @param differences array of character code differences to apply @throws IllegalArgumentException if the base encoding is invalid
2591 Initializes a DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary containing the font encoding information
2592 Initializes a new DictionaryEncoding instance. @param fontEncoding the COSDictionary containing encoding information @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
2593 Initializes a color space with RGB data. @param rgb COSArray containing RGB color information
2594 Sets the A component range for LAB color space. @param range PDRange object defining min and max values
2595 Sets the range for the 'b' component in LAB color space. @param range PDRange object defining min and max values for 'b'
2596 Retrieves an optional content group by name. @param name the name of the optional content group @return PDOptionalContentGroup object or null if not found
2597 Adds an optional content group to the PDF document. @param ocg the PDOptionalContentGroup to add
2598 Retrieves all optional content groups. @return Collection of PDOptionalContentGroup objects
2599 Initializes a ShadingContext for rendering PDF shading. @param shading PDShading object representing the shading @param cm ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails
2600 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2601 Retrieves the color associated with annotation's C key. @return PDColor object or null if not found
2602 Retrieves the border color of an annotation. @return PDColor object representing the border color or null if not found
2603 Retrieves background color of the annotation. @return PDColor object representing the background color or null if not found
2604 Adds key usage extension to the certificate. @param digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly, decipherOnly characters representing key usage permissions ('0', '1', or 'X')
2605 Retrieves the signature content from a PDF file. @param pdfFile InputStream of the PDF containing the signature @return byte array of the signature content @throws IOException if an I/O error occurs
2606 Extracts and converts signature contents from a PDF file. @param pdfFile the byte array of the PDF document @return byte[] containing the converted signature content @throws IOException if an I/O error occurs
2607 Extracts signed content from a PDF file using the specified byte range. @param pdfFile InputStream of the PDF document @return byte array containing the signed content @throws IOException if an I/O error occurs
2608 Retrieves the signed content of a PDF file. @param pdfFile byte array representing the PDF document @return byte array containing the signed content @throws IOException if an I/O error occurs
2609 Retrieves the string value associated with a given key. @param name unique identifier for the attribute @return String representation of the attribute or null if not found
2610 Retrieves the rendering intent from the graphics state dictionary. @return RenderingIntent enum or null if not found
2611 Retrieves the name associated with the PDF action. @return String representation of the action's name or null if not found
2612 Retrieves the string representation of a value by key with a default fallback. @param key unique identifier for the value @param defaultValue value to return if key not found @return String representation or default value
2613 Retrieves the guideline style as a string. @return style of the guideline or default solid style if not specified
2614 Retrieves the icon name of the annotation. @return Icon name as a string or default note icon if not specified
2615 Retrieves the attachment name. @return Name of the attachment or default push pin icon if not specified
2616 Retrieves the line ending style of the annotation. @return String representing the line ending style or default if not set
2617 Retrieves the highlight mode of the link annotation. @return String representing the highlight mode or default value if not set
2618 Retrieves the reply type of the annotation. @return reply type as a string or default value if not found
2619 Retrieves the name of the rubber stamp annotation. Uses default value if not found in COS object. @return Name of the annotation or "Draft" if not specified
2620 Retrieves the name of the annotation. @return Name as a string or default note if not specified
2621 Retrieves the highlighting mode of the annotation. @return Highlighting mode as a string ("Invert", "Outline", etc.) or default "I"
2622 Retrieves the border style of the annotation. @return The style as a string ("S" for solid, default if not found)
2623 Retrieves the type of external data. @return Type as a string, defaulting to "ExData" if not found
2624 Retrieves the style of the transition effect. @return String representing the transition style or default value if not set
2625 Retrieves the dimension of the transition. @return String representation of the dimension or default value if not found
2626 Retrieves the motion style of the transition. @return motion style as a string or default if not set
2627 Retrieves the non-full screen page mode preference. @return Page mode as a string or "UseNone" if not specified
2628 Retrieves the reading direction preference. @return String representation of the reading direction or default value "L2R"
2629 Retrieves the view area preference. @return String representation of the view area or CropBox if not specified
2630 Retrieves the view clipping preference. @return String representation of the view clip setting or default boundary if not found
2631 Retrieves the print area setting. @return String representation of the print area or default boundary if not set
2632 Retrieves print clipping setting. @return String representation of print clip or default boundary
2633 Retrieves print scaling preference. @return current print scaling setting or default value if not set
2634 Checks if the given XRef offset is valid. @param startXRefOffset starting offset of the cross-reference table @return validated offset or -1 if invalid @throws IOException if an I/O error occurs during validation
2635 Retrieves the PDF document version. Checks both document header and catalog for version information. Returns the higher of the two versions if available. @return Version number as a float, or header version if catalog version is not applicable
2636 Retrieves and organizes attributes of the structure element. @return Revisions object containing PDAttributeObjects with associated revisions
2637 Checks if the attribute object has no entries except for its owner. @return true if empty, false otherwise
2638 Retrieves the parent structure node. @return PDStructureNode instance or null if no parent exists
2639 Creates an object from a given COSBase node. Handles different types of COSBase, including dictionaries and integers. @param kid the COSBase node to process @return created object or integer value if applicable, otherwise null
2640 Sets the user property's name and notifies of changes. @param name new name for the user property
2641 Initializes PDEncryption with a given COSDictionary. @param dictionary PDFBox dictionary containing encryption settings
2642 Retrieves the configured security handler. @return SecurityHandler instance or throws exception if not set @throws IOException if no security handler is available for the current filter
2643 Retrieves all annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist @throws IOException if an error occurs during retrieval
2644 Checks if the character set of a font matches the given CID system info. @param cidSystemInfo CID system information to match against @param info Font information containing character set details @return true if character sets match, false otherwise
2645 Checks if the DeviceN color space has an NChannel subtype. @return true if NChannel, false otherwise
2646 Retrieves the open action specified in the document's catalog. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs during retrieval
2647 Retrieves an action associated with the field. @return PDAction object or null if no action is defined
2648 Retrieves JavaScript actions from the document. @return Map of named JavaScript actions or null if none found
2649 Retrieves the next action(s) in a PDF sequence. @return List of PDAction objects or null if none found
2650 Retrieves action associated with key 'F'. @return PDAction object or null if not found
2651 Retrieves the "E" action associated with annotations. @return PDAction object for the "E" event or null if not found
2652 Retrieves the X action associated with the annotation. @return PDAction object or null if not found
2653 Retrieves the 'D' action associated with PDF annotations. @return PDAction object representing the 'D' action or null if not found
2654 Retrieves the action associated with the 'U' key. @return PDAction object or null if not found
2655 Retrieves the "FO" action associated with PDF annotations. @return PDAction object or null if not found
2656 Retrieves the 'BL' action associated with annotations. @return PDAction object for 'BL' or null if not found
2657 Retrieves the action associated with a PDF annotation's "Page Open" event. @return PDAction object or null if no such action is defined
2658 Retrieves the action associated with printing changes. @return PDAction object or null if not found
2659 Retrieves the action associated with the 'PV' key. @return PDAction object or null if not found
2660 Retrieves the page initialization action. @return PDAction object or null if not found
2661 Retrieves the "WillClose" action from the PDF document's catalog. @return PDAction object or null if not found
2662 Retrieves the web capture action. @return PDAction object or null if not found
2663 Retrieves the document save action. @return PDAction object for document save or null if not found
2664 Retrieves the action associated with the 'WP' event. @return PDAction object or null if not found
2665 Retrieves the document processing action. @return PDAction object or null if not found
2666 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
2667 Retrieves the F action from form field actions. @return PDAction object or null if not found
2668 Retrieves the action associated with key 'V'. @return PDAction object or null if not found
2669 Retrieves the action associated with key 'C'. @return PDAction object or null if not found
2670 Retrieves the opening action for the PDF page. @return PDAction object representing the opening action or null if not set
2671 Retrieves the C action associated with the PDF page. @return PDAction object or null if not found
2672 Retrieves the action associated with this annotation. @return PDAction object or null if no action is set
2673 Retrieves the action associated with this annotation. @return PDAction object or null if no action is defined
2674 Retrieves action associated with this outline item. @return PDAction object or null if none exists
2675 Retrieves the value of a specified property as a string. @param propertyKey key of the property to retrieve @return String value of the property or null if not found
2676 Retrieves custom metadata value by field name. @param fieldName unique identifier for the metadata field @return Value of the specified metadata field or null if not found
2677 Retrieves string value by attribute name. @param name unique identifier for the attribute @return Decoded string or null if not found
2678 Retrieves the 'Base' string from the URI dictionary. @return Decoded base URL or null if not found
2679 Retrieves the version information from the digital signature properties. @return Version string or null if not found
2680 Retrieves units from number format settings. @return units string or null if not found
2681 Retrieves string value by key with a default fallback. @param key unique identifier for the value @param defaultValue value to return if key is not found or null @return Decoded string from dictionary or provided default
2682 Retrieves a string value from an embedded dictionary. @param embedded key for the embedded dictionary @param key unique identifier for the string value @param defaultValue fallback value if not found @return decoded string or default value
2683 Retrieves the operation type. @return Operation type as a string, defaulting to "Open"
2684 Retrieves the default appearance string for form fields. @return Decoded default appearance string or empty if not found
2685 Retrieves the file name using multiple sources. @return File name as a string or null if not found
2686 Sets the formatted value of the property and notifies if changed. @param formattedValue new formatted string value to set
2687 Checks if an optional content group exists. @param groupName name of the group to check @return true if group exists, false otherwise
2688 Constructs the fully qualified name of the field. @return Fully qualified name including parent names if applicable
2689 Retrieves date value by key; returns default if not found. @param key unique identifier for the date value @param defaultValue Calendar object to return if key is not found @return Calendar object or specified default value
2690 Retrieves a date value from an embedded dictionary. @param embedded key for the embedded dictionary @param key unique identifier for the date value @param defaultValue Calendar object to return if not found @return Calendar object or specified default value
2691 Retrieves the revision number of the digital signature. @return revision number as a long value
2692 Retrieves the minimum revision level required. @return minimum revision as a long value
2693 Creates a COSInputStream for decoding PDF data. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded PDF data @param options DecodeOptions specifying additional decode settings @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
2694 Creates a view of the stream's data. @return RandomAccessRead object for accessing decoded data @throws IOException if an I/O error occurs
2695 Creates an input stream for the PDF stream with optional filter exclusion. @param stopFilters list of filters to exclude from decoding @return InputStream for reading the decoded data @throws IOException if an I/O error occurs
2696 Retrieves a number attribute by name. @param name attribute key @return float value of the attribute or default (-1)
2697 Retrieves conversion factor from the COSDictionary. @return float value representing the conversion factor or -1 if not found
2698 Initializes a PDFunctionType2 with given PDF function. @param function COSBase object representing the PDF function
2699 Retrieves the leader length of the line annotation. @return float value representing the leader length or default value of -1
2700 Retrieves the leader extend of the line annotation. @return float value representing the leader extend or default value of -1
2701 Retrieves the leader line offset. @return float value representing the leader line offset
2702 Retrieves the version number from the dictionary. @return float representing the version number or default value of -1 if not found
2703 Retrieves the CYX coordinate from the PDF dictionary. @return float value of CYX or default value of -1
2704 Retrieves a number from the COSDictionary by key. @param name unique identifier for the value @param defaultValue default float value if key not found or not a COSNumber @return float value associated with the key or default value
2705 Retrieves the intensity of the border effect. @return float representing the intensity value, defaulting to 0 if not found
2706 Computes the font height for rendering. @param font PDFont object representing the font @return float value of the computed font height @throws IOException if an I/O error occurs
2707 Writes a sequence of tokens to the PDF output stream. @param tokens array of objects to write (COSBase or Operator) @throws IOException if an I/O error occurs or unknown type is encountered
2708 Writes a list of tokens to the PDF output stream. @param tokens list of objects to write (COSBase or Operator) @throws IOException if an I/O error occurs or unknown type is encountered
2709 Retrieves decode parameters for the stream. @return List of decode parameters or null if not found @throws IOException if an error occurs while processing the stream
2710 Retrieves file decode parameters. @return List of decode parameters or null if not found @throws IOException if an error occurs while processing the stream
2711 Appends a child element to the current structure node. @param structureElement the PDStructureElement to add as a child
2712 Inserts a child structure element before a reference node. @param newKid the new child element to insert @param refKid the reference node before which to insert
2713 Removes a child element from the current node. @param structureElement the child PDStructureElement to remove @return true if the child was successfully removed, false otherwise
2714 Retrieves default position vector for a CID. @param cid Character Identifier @return Vector representing the default position
2715 Retrieves and caches a PDPropertyList by name. @param name the unique identifier for the property list @return PDPropertyList instance or null if not found
2716 Retrieves the optional content properties. @return PDPropertyList object or null if not found
2717 Retrieves the optional content properties of the image. @return PDPropertyList representing optional content or null if not present
2718 Retrieves the list of Optional Content Groups (OCGs). @return List of PDPropertyList objects representing OCGs
2719 Retrieves the optional content properties of the annotation. @return PDPropertyList instance representing optional content or null if not present
2720 Constructs a PDAnnotationCaret from a given dictionary. @param field the COSDictionary containing annotation data
2721 Constructs a file attachment annotation from a given dictionary. @param field COSDictionary containing annotation data
2722 Constructs a PDAnnotationFreeText from a given dictionary. @param field the COSDictionary containing annotation data
2723 Constructs a PDAnnotationInk from a given dictionary. @param dict the COSDictionary containing annotation data
2724 Constructs a PDAnnotationLine from a given dictionary. @param field the COSDictionary containing annotation data
2725 Constructs a PDAnnotationPolygon from a given dictionary. @param dict the COSDictionary containing annotation data
2726 Constructs a PDAnnotationPolyline from a given dictionary. @param dict the COSDictionary containing annotation data
2727 Constructs a PDAnnotationRubberStamp from a given dictionary. @param field COSDictionary containing annotation data
2728 Constructs a PDAnnotationSound from a given COSDictionary. @param field the COSDictionary containing annotation data
2729 Constructs a PDAnnotationSquareCircle from a given dictionary. @param dict the COSDictionary containing annotation data
2730 Constructs a PDAnnotationText from a given dictionary. @param field the COSDictionary containing annotation data
2731 Constructs a text markup annotation from a given dictionary. @param field COSDictionary containing annotation data
2732 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
2733 Retrieves widgets associated with the terminal field. @return List of PDAnnotationWidget objects representing field widgets
2734 Writes prepared COSBase objects to a PDF object stream. @param stream target COSStream for writing @return the updated COSStream with written objects @throws IOException if an I/O error occurs
2735 Writes a COSDictionary to the output stream. Handles dictionary entries and uses compression pool for efficient data management. @param output target OutputStream for writing @param cosDictionary COSDictionary object to write @throws IOException if an I/O error occurs
2736 Renders a cloudy polygon or ellipse border in a PDF document. @param vertices array of points defining the polygon @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during rendering
2737 Encodes image data for PDF compression. @return PDImageXObject with encoded image or null if unsupported format @throws IOException if I/O error occurs during encoding
2738 Sets the destination page for this outline item. @param page the target PDF page
2739 Initializes a new PDActionEmbeddedGoTo with the specified subtype.
2740 Constructs a new PDActionGoTo with a specific subtype. Initializes the action type for navigating to destinations in PDFs.
2741 Initializes a new PDActionHide to hide elements in a PDF.
2742 Constructs a new PDActionImportData instance. Initializes the action with the import data subtype.
2743 Constructs a new JavaScript action. Initializes the action with the specific subtype for JavaScript.
2744 Constructs a new PDActionLaunch with default settings.
2745 Initializes a new action specifically for movies. Sets the subtype to 'Movie' for PDF document interactivity.
2746 Constructs a PDActionNamed with a specific subtype. Initializes the action by setting its subtype to "Named".
2747 Constructs a new remote go-to action. Initializes the action with specific subtype.
2748 Constructs a new reset form action. Initializes the action subtype to "Reset".
2749 Constructs a new PDActionSound. Initializes the action with the specific subtype for sound actions.
2750 Constructs a new PDActionSubmitForm. Initializes the action with the specific subtype for form submission.
2751 Initializes a new PDActionThread. Sets the subtype to "Thread".
2752 Constructs a new PDActionURI with an empty dictionary and sets its subtype.
2753 Parses XML for stamp annotation appearance. @param appearanceXML XML element defining the appearance @return COSDictionary with parsed appearance elements or default if unsupported @throws IOException if parsing fails
2754 Parses a COSArray from the PDF source. @return COSArray containing parsed objects @throws IOException if an I/O error occurs during parsing
2755 Creates a new highlight annotation. Initializes with default subtype.
2756 Constructs a new squiggly line annotation.
2757 Initializes a new strikeout annotation.
2758 Initializes a new underline annotation.
2759 Generates a BufferedImage for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor for filling the pattern @param xform AffineTransform for scaling @param anchorRect Rectangle2D defining the anchor area @return BufferedImage of the rendered tiling pattern @throws IOException if rendering fails
2760 Calculates the anchor rectangle for a tiling pattern. @param pattern the PDTilingPattern object @return Rectangle2D representing the scaled bounding box @throws IOException if required parameters are missing or invalid
2761 Retrieves the stencil image for this PDF image. @param paint the color used for masking @return BufferedImage with applied mask @throws IOException if an I/O error occurs or image is not a stencil
2762 Retrieves raw raster data from a PDF image. @param pdImage PDImage object containing the image data @return WritableRaster representing the raw pixel data @throws IOException if an I/O error occurs during retrieval or invalid parameters are found
2763 Converts a PDImage to a BufferedImage with optional color key masking and clipping. @param pdImage the PDF image to process @param region the rectangle defining the area to clip @param subsampling the subsampling factor @param colorKey the color key array defining transparency (optional) @return a BufferedImage representation of the PDImage or null if an error occurs @throws IOException if an I/O error occurs during processing
2764 Retrieves the PDResources object for this page. Initializes resources if not already present. @return PDResources containing page's resources or null if missing
2765 Retrieves the page's media box dimensions. Uses inherited attribute if available, defaults to U.S. Letter otherwise. @return PDRectangle representing the media box
2766 Retrieves the rotation angle of the PDF page. @return Rotation angle in degrees, multiples of 90 (0, 90, 180, 270)
2767 Retrieves or creates a COSName instance for the given PDF name and returns its boolean value. @param key string representation of the PDF name @param defaultValue default boolean value if key is missing or invalid @return boolean value associated with the key, or default value
2768 Checks if the file specification is volatile. @return true if volatile, false otherwise
2769 Checks if the property is hidden. @return true if hidden, false otherwise
2770 Checks if metadata encryption is enabled. @return true if metadata is encrypted, false otherwise (default is true)
2771 Retrieves whether the line annotation has a caption. @return true if the annotation has a caption, false otherwise
2772 Determines if icons should scale to fit within annotations. @return true if scaling is enabled, false otherwise
2773 Determines if renaming is enabled. @return true if renaming is allowed, false otherwise
2774 Checks if the transparency group is isolated. @return true if isolated, false otherwise
2775 Determines if knockout mode is enabled. @return true if knockout mode is active, false otherwise
2776 Retrieves anti-aliasing setting from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
2777 Retrieves stroking overprint control setting. @return true if stroking overprint is enabled, false otherwise
2778 Retrieves whether automatic stroke adjustment is enabled. @return true if automatic stroke adjustment is enabled, false otherwise
2779 Retrieves alpha source flag from dictionary. @return boolean value of alpha source flag, defaulting to false if not found
2780 Retrieves the text knockout flag. @return true if text knockout is enabled, false otherwise
2781 Retrieves the 'H' flag indicating visibility. @return boolean value of the 'H' flag, defaulting to true if missing
2782 Checks if the sound action is synchronous. @return true if synchronous, false otherwise
2783 Determines if the sound should repeat. @return true if sound repeats, false otherwise
2784 Retrieves whether sound should be mixed. @return true if sounds should be mixed; otherwise, false
2785 Checks if the line annotation has a caption. @return true if the annotation has a caption, false otherwise
2786 Retrieves whether the annotation is open. @return true if the annotation is open, false otherwise
2787 Retrieves pre-release status flag from the digital signature properties. @return true if pre-release is enabled, false otherwise
2788 Retrieves non-EFont no warn flag. @return boolean value indicating if non-EFont warnings are disabled
2789 Retrieves trusted mode status. @return true if trusted mode is enabled, false otherwise
2790 Determines if form field appearances need to be regenerated. @return true if appearances should be refreshed, false otherwise
2791 Checks if the fly area is opaque. @return true if the fly area is opaque, false otherwise
2792 Determines if the toolbar should be hidden. @return true if the toolbar is set to be hidden, false otherwise
2793 Determines if the menu bar should be hidden. @return true if menu bar is hidden, false otherwise
2794 Determines if the window UI should be hidden. @return true if window UI is hidden, false otherwise
2795 Checks if the PDF viewer window should fit the page. @return true if window should fit the page, false otherwise
2796 Checks if the PDF window should be centered. @return true if centering is enabled, false otherwise
2797 Determines if document title should be displayed. @return true if document title is enabled, false otherwise
2798 Sets a flag in the dictionary for a given field. @param field key for the item in the dictionary @param bitFlag specific bit to modify @param value true to set the flag, false to clear it
2799 Retrieves an integer from a nested dictionary. @param embeddedDictionary name of the embedded dictionary to search @param key primary key to retrieve the integer value @param defaultValue default integer value if key is missing or invalid @return integer value from the embedded dictionary or default value
2800 Retrieves integer value by key. @param key string representation of the PDF name @return integer value from dictionary or default value (-1)
2801 Fetches integer value by key. @param key primary key to search @return integer value from dictionary or default value (-1)
2802 Retrieves integer value by key. @param key string representation of the PDF name @param defaultValue default integer value if key is missing or invalid @return integer value from dictionary or default value
2803 Checks if a specific flag is set in the integer value associated with a field. @param field key for the field to check @param bitFlag the flag to verify @return true if the flag is set, false otherwise
2804 Recursively retrieves a COSDictionary representing a page by its 1-based index. @param pageNum 1-based index of the page to retrieve @param node current node in the page tree @param encountered number of pages already processed @return COSDictionary of the specified page or throws exception if not found
2805 Retrieves the count of pages in the PDF document. @return integer representing the number of pages or 0 if not specified
2806 Retrieves the starting page number. @return starting page number or 1 if not specified
2807 Retrieves the order of the function. @return integer representing the order or default value of 1
2808 Retrieves the revision number of the PDF element. @return integer value representing the revision number or 0 if not specified
2809 Retrieves encryption key length. @return integer representing key length or default value of 40
2810 Retrieves the encryption version. @return encryption version as an integer or 0 if not specified
2811 Retrieves encryption key length. @return key length as an integer (default is 40 if not specified)
2812 Retrieves the encryption revision of the PDF document. @return integer representing the revision version
2813 Retrieves document permissions. @return integer representing encryption permissions
2814 Retrieves justification of the free text annotation. @return justification value as string ("0", "1", or "2")
2815 Retrieves font descriptor flags. @return integer representing font flags or default value if not set
2816 Creates a PDAbstractPattern based on the dictionary's pattern type. @param dictionary COSDictionary containing pattern properties @param resourceCache ResourceCache for managing resources @return PDAbstractPattern instance or throws IOException for unknown types
2817 Retrieves the paint type of the tiling pattern. @return integer representing the paint type or default value if missing
2818 Retrieves the tiling type of the pattern. @return integer representing the tiling type or default value if not set
2819 Creates a PDShading object based on the given dictionary. @param shadingDictionary COSDictionary with shading properties @return PDShading instance corresponding to the shading type @throws IOException if unknown shading type is encountered
2820 Retrieves bits per flag from the shading dictionary. @return integer value representing bits per flag or -1 if not found
2821 Retrieves the number of vertices per row. @return integer value representing vertices per row or -1 if not specified
2822 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from COS object. @return bits per color component or -1 if not set
2823 Retrieves bits per coordinate for shading. @return number of bits used to represent each coordinate
2824 Retrieves action flags. @return integer representing action flags
2825 Retrieves action flags. @return integer representing action flags or default value if not set
2826 Retrieves the page number associated with the target directory. @return page number or -1 if not specified
2827 Retrieves annotation index. @return annotation index or -1 if not found
2828 Retrieves annotation flags. @return integer representing annotation flags
2829 Retrieves the quadding mode of the annotation. @return integer representing quadding mode (0 - left, 1 - center, 2 - right)
2830 Retrieves the rotation angle of the annotation. @return rotation angle in degrees or 0 if not specified
2831 Checks if timestamping is required. @return true if timestamping is required, false otherwise
2832 Retrieves the count of open outline items. @return integer representing the number of open items
2833 Retrieves the quadding mode of the text field. @return integer representing the quadding mode (0 = left, 1 = center, 2 = right)
2834 Retrieves the top index of the list box. @return integer value representing the top index or default (0) if not set
2835 Retrieves COSObjects by primary type from the document. @param type primary type to match @return List of COSObjects matching the given type
2836 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
2837 Recursively updates page references in the PDF structure tree. @param cloner utility for cloning objects @param numberTreeAsMap map of integer keys to COSObjectable values @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
2838 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument parsed from the file @throws IOException if an I/O error occurs during loading or parsing
2839 Loads and parses an FDF document from an input stream. @param input stream containing the FDF data @return parsed FDFDocument object @throws IOException if I/O error occurs during loading or parsing
2840 Parses PDF document with lenient mode enabled. @return PDDocument object parsed from the input @throws IOException if an error occurs during parsing
2841 Removes page-specific resources from the cache. Ensures only page resources are purged, not inherited ones.
2842 Retrieves a PDColorSpace by name. @param name the unique identifier for the color space @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
2843 Adds a font to the PDF resources. @param font the PDFont object to add @return unique COSName key for the added font resource
2844 Adds or retrieves a color space resource. @param colorSpace the PDColorSpace to manage @return unique COSName key for the color space resource
2845 Adds an extended graphics state to the PDF document. @param extGState the PDExtendedGraphicsState object to add @return unique COSName key for the added graphics state
2846 Adds a shading to the PDF document resources. @param shading PDShading object to add @return unique COSName key for the shading resource
2847 Adds a pattern to PDF resources. @param pattern PDAbstractPattern object to add @return unique COSName key for the added pattern
2848 Adds a property list to the PDF document resources. @param properties PDPropertyList object to add @return unique COSName key for the added resource
2849 Adds an image to the PDF resources. @param image PDImageXObject to be added @return unique COSName key for the image resource
2850 Adds a form XObject to PDF resources. @param form PDFormXObject to be added @return unique COSName key for the resource
2851 Adds or retrieves an XObject resource. @param xobject the PDXObject to add/update @param prefix base string for the key @return unique COSName key for the resource
2852 Retrieves the embedded file. @return PDEmbeddedFile object or null if not found
2853 Retrieves the embedded file for DOS. @return PDEmbeddedFile object or null if not found
2854 Retrieves the embedded file for Mac. @return PDEmbeddedFile object or null if not found
2855 Retrieves the embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
2856 Retrieves embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
2857 Checks if an optional content group is enabled. @param group the optional content group to check @return true if the group is enabled, false otherwise
2858 Enables or disables an optional content group by name. @param groupName the name of the OCG to modify @param enable true to enable, false to disable @return true if the group was successfully modified, false otherwise
2859 Retrieves or initializes the normal appearance for an annotation. @return PDAppearanceEntry object representing the normal state appearance
2860 Retrieves or initializes the rollover appearance for an annotation. @return PDAppearanceEntry object representing the rollover state
2861 Retrieves or initializes the down appearance of an annotation. If the down appearance is a sub-dictionary, it creates a new COSStream and updates the appearance dictionary. @return PDAppearanceEntry representing the down appearance
2862 Sets the value of the button by index. @param index position of the export value to set @throws IOException if an I/O error occurs
2863 Prepends a new child to the outline. @param newChild the PDOutlineItem to prepend
2864 Appends a new child to the outline. @param newChild the PDOutlineItem to be added as a child
2865 Finds the PDSignatureField associated with a given PDSignature. @param fieldIterator iterator for PDF fields @param sigObject PDSignature object to match @return PDSignatureField if found, otherwise null
2866 Retrieves the appearance stream of a PDF annotation. @param annotation the annotation to process @return PDAppearanceStream object or null if not found
2867 Adds fonts from annotation widgets to AcroForm resources. @param acroFormResources PDResources of the AcroForm @param annotation PDAnnotation widget to process
2868 Retrieves all on values for the button. @return Set of on values or empty set if none found
2869 Checks if the checkbox is in the 'on' state. @return true if checked, false otherwise
2870 Checks the checkbox by setting its value to the 'on' state. @throws IOException if an I/O error occurs during the operation
2871 Finds the index of a specific PDF page. @param page PDPage object to search for @return Index of the page or -1 if not found
2872 Sets the parent node and recalculates limits. @param parentNode the new parent node
2873 Sets the child nodes for this tree node. @param kids list of child nodes to set
2874 Sets the names and their corresponding values in the node. @param names map of name-value pairs to set
2875 Initializes page labels for a PDF document. @param document the PDDocument to manage labels for @param dict COS dictionary containing label data @throws IOException if an I/O error occurs during initialization
2876 Retrieves the encode range for a specific parameter. @param paramNum index of the parameter @return PDRange object representing the encode range or null if not found
2877 Constructs a PDCalGray object representing the CALGRAY color space.
2878 Constructs a PDCalRGB object representing the CALRGB color space.
2879 Initializes a new LAB color space.
2880 Constructs PDCalGray from COSArray. @param array COSArray representing CALGRAY color space data
2881 Constructs a PDCalRGB from a COSArray. @param rgb array representing RGB components
2882 Initializes a LAB color space. @param lab COSArray containing LAB color data
2883 Initializes an AxialShadingContext for rendering PDF axial shading. @param shading PDShadingType2 object representing the shading @param colorModel ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails
2884 Initializes a RadialShadingContext for rendering radial gradients. @param shading PDShadingType3 object representing the radial shading @param colorModel ColorModel to be used for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device boundaries @throws IOException if initialization fails
2885 Constructs a TriangleBasedShadingContext for rendering PDF shading. @param shading PDShading object representing the shading @param cm ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails
2886 Initializes a Type1ShadingContext for rendering PDF shading. @param shading PDShadingType1 object representing the shading @param colorModel ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails
2887 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2888 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2889 Retrieves the string representation of an attribute. @param name unique identifier for the attribute @param defaultValue value to return if attribute not found @return String representation or default value
2890 Retrieves the border style. @return String representing the border style or default solid style if not set
2891 Sets the border line properties for a PDF annotation. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray containing border settings @throws IOException if an I/O error occurs during writing
2892 Creates a new PDF document with metadata and settings copied from the source document. @return PDDocument object representing the newly created split document
2893 Sets the PDF document's version. @param newVersion the new version number to be set
2894 Retrieves the root of the structure tree. @return PDStructureTreeRoot instance or null if not found
2895 Retrieves child elements of the structure node. @return List of child objects or empty list if none found
2896 Retrieves the encryption settings of the PDF document. @return PDEncryption object containing encryption details or null if not encrypted
2897 Prepares PDF document for decryption. Initializes encryption and security handler based on document's encryption settings. @throws IOException if preparation fails or unsupported encryption method is used
2898 Reads and sets the font encoding. Handles predefined CMaps and custom encodings. Checks for CID mappings and CJK descendant fonts. @throws IOException if an error occurs during reading or validation
2899 Repairs the Length1 value by finding the 'exec' binary offset. @param bytes byte array containing font data @param length1 initial Length1 value to repair @return corrected Length1 value or original if no changes needed
2900 Repairs Length2 if it's out of bounds. @param bytes font data array @param length1 first length value @param length2 second length value to be repaired @return corrected Length2 or adjusted length if invalid
2901 Retrieves the fractional display setting. @return string representing fractional display or default value
2902 Retrieves thousands separator. @return string representing thousands separator or default comma if not set
2903 Retrieves the decimal separator used in number formatting. @return the decimal separator as a string, default is "."
2904 Retrieves label prefix string. @return Label prefix or space if not found
2905 Retrieves label suffix string. @return Suffix string from COSDictionary or space if not found
2906 Retrieves label position to value setting. @return decoded string from dictionary or default suffix
2907 Retrieves a string value from an embedded dictionary. @param embedded key for the embedded dictionary @param key unique identifier for the string value @return decoded string or null if not found
2908 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDF font descriptor to match against @param cidSystemInfo CID system information for character set matching @return PriorityQueue containing FontMatch objects ranked by similarity score
2909 Retrieves an embedded date value from the dictionary. @param embedded key for the embedded dictionary @param key unique identifier for the date value @return Calendar object or null if not found
2910 Creates a COSInputStream with default decode options. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded PDF data @return COSInputStream with decoded data @throws IOException if an I/O error occurs during decoding
2911 Initializes the PDFObjectStreamParser with a given COSStream and document. @param stream the COSStream representing the object stream @param document the COSDocument containing the stream @throws IOException if required entries are missing or invalid
2912 Initializes the PDFXrefStreamParser with a given COSStream. @param stream COSStream containing cross-reference data @throws IOException if an I/O error occurs during initialization
2913 Initializes a PDCIDFontType0 with the given dictionary and parent. Handles embedded CFF fonts and substitutes if necessary. @param fontDictionary COSDictionary containing font data @param parent PDType0Font that owns this CID font @throws IOException if an I/O error occurs during font processing
2914 Initializes a PDCIDFontType2 with the given font dictionary, parent, and TrueType font. @param fontDictionary COSDictionary containing font data @param parent PDType0Font that owns this CID font @param trueTypeFont TrueTypeFont instance or null if not provided @throws IOException if an I/O error occurs during font processing
2915 Reads and parses a CMap from a COSBase object. @param base the COSBase object containing the CMap data @return parsed CMap object or null if not found @throws IOException if an error occurs during reading or parsing
2916 Constructs a circular annotation from a given COSDictionary. @param field the COSDictionary containing annotation data
2917 Constructs a PDAnnotationSquareCircle from a given dictionary. @param field the COSDictionary containing annotation data
2918 Constructs a highlight annotation from a given dictionary. @param dict COSDictionary containing annotation data
2919 Constructs a squiggly line annotation from a given dictionary. @param dict COSDictionary containing annotation data
2920 Constructs a strikeout annotation from a given dictionary. @param dict COSDictionary containing annotation data
2921 Constructs an underline annotation from a given dictionary. @param dict COSDictionary containing annotation data
2922 Writes the body of a PDF document. @param doc the COSDocument to write @throws IOException if an I/O error occurs during writing
2923 Creates a cloudy polygon border from a path. @param path array of float arrays representing vertices or curve segments @throws IOException if an I/O error occurs during rendering
2924 Renders a cloudy rectangle or ellipse border in a PDF document. @param left x-coordinate of the lower-left corner @param bottom y-coordinate of the lower-left corner @param right x-coordinate of the upper-right corner @param top y-coordinate of the upper-right corner @param isEllipse flag indicating if the shape should be an ellipse @throws IOException if an I/O error occurs during rendering
2925 Constructs a new JavaScript action with specified script. @param js JavaScript code to be executed
2926 Initializes a TilingPaint object for rendering. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor for filling the pattern @param xform AffineTransform for scaling @throws IOException if initialization fails due to invalid parameters or rendering issues
2927 Retrieves an opaque image from a PDF document. @param region the rectangle defining the area to clip @param subsampling the subsampling factor @return a BufferedImage representation of the opaque image or null if an error occurs @throws IOException if an I/O error occurs during processing
2928 Converts a PDImage to a BufferedImage with optional color key masking. @param pdImage the PDF image to process @param colorKey the color key array defining transparency (optional) @return a BufferedImage representation of the PDImage or null if an error occurs @throws IOException if an I/O error occurs during processing
2929 Pushes and returns the current resource context for a content stream. @param contentStream PDF content stream to process @return Previous resource context
2930 Calculates transformation for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay content @return AffineTransform to center the overlay
2931 Clips a given rectangle to the page's media box. @param box rectangle to clip @return clipped rectangle within media box bounds
2932 Retrieves the rotated media box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with adjusted dimensions if rotated, otherwise original media box
2933 Checks if the PDF element is marked. @return true if marked, false otherwise
2934 Checks if user properties are enabled. @return true if UserProperties is set to true, otherwise false
2935 Checks if the PDF element is marked as suspect. @return true if the element is flagged as suspect, false otherwise
2936 Determines if mouse position should be tracked. @return true if mouse position tracking is enabled, false otherwise
2937 Retrieves the open state of the popup annotation. @return true if the popup is open, false otherwise
2938 Checks if the number format dictionary has FD flag set. @return true if FD flag is enabled, false otherwise
2939 Sets the visibility of the user property. @param hidden true to hide, false to show
2940 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, false otherwise
2941 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
2942 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
2943 Sets the visibility of the annotation. @param hidden true to hide, false to show
2944 Sets whether the annotation is printable. @param printed true to mark as printable, false otherwise
2945 Sets the "No Zoom" flag for the annotation. @param noZoom true to disable zooming, false otherwise
2946 Sets whether the annotation should not rotate. @param noRotate true to disable rotation, false to allow it
2947 Sets whether the annotation should not be visible. @param noView true to hide the annotation, false to show it
2948 Sets the read-only flag of the annotation. @param readOnly true to make the annotation read-only, false otherwise
2949 Sets the locked state of the annotation. @param locked true to lock, false to unlock
2950 Sets the 'no view' flag for the annotation. @param toggleNoView true to hide the annotation from view, false to show it
2951 Sets whether annotation contents are locked. @param lockedContents true to lock contents, false otherwise
2952 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
2953 Sets the visibility of the annotation. @param hidden true to hide, false to show
2954 Sets the printed flag of the annotation. @param printed true if the annotation is to be printed, false otherwise
2955 Sets whether the annotation should not be zoomed. @param noZoom true to disable zooming, false otherwise
2956 Sets the 'no rotate' flag for the annotation. @param noRotate true to prevent rotation, false otherwise
2957 Sets the annotation's visibility flag. @param noView true to hide the annotation, false to show it
2958 Sets the read-only flag of the annotation. @param readOnly true to make the annotation read-only, false otherwise
2959 Sets the lock status of the annotation. @param locked true to lock, false to unlock
2960 Toggles the visibility of the annotation. @param toggleNoView true to hide, false to show
2961 Sets the locked contents flag of the annotation. @param lockedContents true to lock contents, false to unlock
2962 Sets whether a filter is required. @param flag true to require filter, false otherwise
2963 Sets whether sub-filter is required. @param flag true if sub-filter is mandatory, false otherwise
2964 Sets whether digest method is required. @param flag true if required, false otherwise
2965 Sets whether V (signature) field is required. @param flag true to require V field, false otherwise
2966 Sets whether reason field is required. @param flag true to require reason, false otherwise
2967 Sets whether legal attestation is required. @param flag true if legal attestation is required, false otherwise
2968 Sets whether adding revision information is required. @param flag true to require revision info, false otherwise
2969 Sets whether the subject field is required. @param flag true to make subject required, false otherwise
2970 Sets whether the issuer is required in the certificate. @param flag true if issuer is required, false otherwise
2971 Sets whether OID (Object Identifier) is required. @param flag true to require OID, false otherwise
2972 Sets whether the subject distinguished name (DN) is required. @param flag true if required, false otherwise
2973 Sets whether key usage is required in the certificate. @param flag true to require key usage, false otherwise
2974 Sets whether URL is required in the certificate. @param flag true if URL is required, false otherwise
2975 Sets the italic style flag for the outline item. @param italic true to apply italic style, false otherwise
2976 Sets the bold flag for this outline item. @param bold true to make text bold, false otherwise
2977 Sets the flag indicating whether signatures exist in the form. @param signaturesExist true if signatures are present, false otherwise
2978 Sets the append-only flag for the form. @param appendOnly true to enable append-only mode, false otherwise
2979 Enables or disables sorting of choice options. @param sort true to enable sorting, false to disable
2980 Enables or disables multi-selection in the choice field. @param multiSelect true to allow multiple selections, false otherwise
2981 Sets whether spell checking is disabled for the choice field. @param doNotSpellCheck true to disable spell check, false to enable it
2982 Sets whether changes should be committed upon selection. @param commitOnSelChange true to enable auto-commit on selection change, false otherwise
2983 Sets whether the choice field is a combo box. @param combo true if combo box, false otherwise
2984 Sets the editable state of the combo box. @param edit true to make the combo box editable, false otherwise
2985 Sets the read-only state of the field. @param readonly true to make the field read-only, false otherwise
2986 Sets the field as required. @param required true to make the field required, false otherwise
2987 Sets the No Export flag for the field. @param noExport true to prevent export, false to allow it
2988 Constructs a new PDPushButton instance. @param acroForm the AcroForm containing the button
2989 Initializes a new radio button field in the given PDF form. @param acroForm the AcroForm containing the radio button
2990 Sets whether radio buttons operate in unison. @param radiosInUnison true if radio buttons should act as a group
2991 Enables or disables multiline input for the text field. @param multiline true to enable multiline, false otherwise
2992 Enables or disables password protection for the text field. @param password true to enable password protection, false otherwise
2993 Enables or disables file selection in the text field. @param fileSelect true to enable file selection, false otherwise
2994 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable it
2995 Sets whether the text field should not scroll. @param doNotScroll true to disable scrolling, false otherwise
2996 Sets the comb flag to enable or disable comb formatting. @param comb true to enable comb formatting, false otherwise
2997 Enables or disables rich text formatting. @param richText true to enable rich text, false otherwise
2998 Retrieves an integer from a nested dictionary with a default value. @param embeddedDictionary name of the embedded dictionary to search @param key primary key to retrieve the integer value @return integer value from the embedded dictionary or -1 if not found
2999 Retrieves the denominator value from the number format settings. @return integer value of the denominator or default (-1) if not found
3000 Wraps output stream with PredictorOutputStream if predictor is greater than 1. @param out underlying output stream for writing image data @param decodeParams dictionary containing decoding parameters @return wrapped output stream or original if no prediction needed
3001 Retrieves the structure parent index of the page. @return integer value representing the structure parent or -1 if not set
3002 Removes a page node from the PDF document's page tree. @param node the COSDictionary representing the page to remove
3003 Adds a page to the PDF document. @param page PDPage object to be added
3004 Retrieves bits per sample for function. @return integer value representing bits per sample or default (-1)
3005 Retrieves the Marker Context Identifier (MCID) of the marked content. @return MCID value as an integer
3006 Retrieves the next key in the parent tree. @return integer value representing the next key or default value (-1)
3007 Retrieves the MCID (Marked Content Identifier) of the content. @return MCID value or -1 if properties are not set
3008 Creates a PDImageXObject from a TIFF file. @param document PDF document to store the image @param reader source of the TIFF data @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails
3009 Retrieves the line cap style. @return integer representing the line cap style
3010 Retrieves line join style. @return integer representing line join style from dictionary
3011 Retrieves the structure parent index of the annotation. @return The integer value representing the structure parent or -1 if not set.
3012 Retrieves the P value from the digital signature configuration. @return integer value of P or default (-1) if not found
3013 Retrieves maximum length of text field. @return maximum character limit or default value (-1)
3014 Retrieves an integer attribute by key. @param name string representation of the PDF name @param defaultValue default integer value if key is missing or invalid @return integer value from dictionary or default value
3015 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
3016 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
3017 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
3018 Checks if the annotation disables zooming. @return true if zooming is disabled, false otherwise
3019 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
3020 Checks if annotation is not visible. @return true if no view flag is set
3021 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3022 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3023 Checks if the annotation should be hidden when printed. @return true if the annotation is set to toggle off visibility during printing, false otherwise
3024 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
3025 Checks if annotation is invisible. @return true if annotation is invisible, false otherwise
3026 Checks if the annotation is hidden. @return true if hidden, false otherwise
3027 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
3028 Checks if "No Zoom" flag is set. @return true if zooming is disabled, false otherwise
3029 Checks if the annotation should not be rotated. @return true if no rotate flag is set, false otherwise
3030 Checks if the annotation should not be visible. @return true if no view flag is set, false otherwise
3031 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3032 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3033 Checks if the annotation is set to toggle visibility. @return true if the annotation should toggle its visibility, false otherwise
3034 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
3035 Checks if filter is required for digital signature. @return true if filter is required, false otherwise
3036 Checks if subfilter is required. @return true if subfilter flag is set, false otherwise
3037 Checks if digest method is required. @return true if digest method is required, false otherwise
3038 Checks if the V flag (visual representation) is required. @return true if V flag is set, false otherwise
3039 Checks if reason field is required. @return true if reason is mandatory, false otherwise
3040 Checks if legal attestation is required for the digital signature. @return true if legal attestation is required, false otherwise
3041 Checks if adding revision information is required. @return true if revision info is required, false otherwise
3042 Checks if subject attribute is required in the certificate. @return true if subject is required, false otherwise
3043 Checks if issuer information is required. @return true if issuer is required, false otherwise
3044 Checks if OID (Object Identifier) is required. @return true if OID is mandatory, false otherwise
3045 Checks if the subject distinguished name (DN) is required. @return true if subject DN is required, false otherwise
3046 Checks if key usage is required. @return true if key usage flag is set, false otherwise
3047 Checks if URL field is required. @return true if URL flag is set, false otherwise
3048 Checks if the text in this outline item is italic. @return true if italic flag is set, false otherwise
3049 Checks if the outline item's text is bold. @return true if bold flag is set, false otherwise
3050 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
3051 Checks if the signature field is append-only. @return true if the append-only flag is set, false otherwise
3052 Determines if the button is a push button. @return true if the button is a push button, false otherwise
3053 Determines if this button is a radio button. @return true if the button is a radio button, false otherwise
3054 Checks if sorting is enabled for the choice field. @return true if sorting is enabled, false otherwise
3055 Determines if the choice field supports multiple selections. @return true if multi-select is enabled, false otherwise
3056 Checks if spell-checking is disabled for the choice field. @return true if spell-checking is disabled, false otherwise
3057 Checks if changes should be committed upon selection. @return true if commit on select change is enabled, false otherwise
3058 Checks if the choice field is a combo box. @return true if the field is a combo box, false otherwise
3059 Determines if the combo box is editable. @return true if editable, false otherwise
3060 Checks if the field is read-only. @return true if the field is read-only, false otherwise
3061 Checks if the field is required. @return true if the field is marked as required, false otherwise
3062 Checks if the field should not be exported. @return true if the no-export flag is set, false otherwise
3063 Checks if radio buttons operate in unison. @return true if radios are linked, false otherwise
3064 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
3065 Checks if the text field is password-protected. @return true if password protection is enabled, false otherwise
3066 Checks if the text field supports file selection. @return true if file selection is enabled, false otherwise
3067 Checks if spell-checking is disabled for the text field. @return true if spell-checking is disabled, false otherwise
3068 Determines if the text field should not scroll. @return true if scrolling is disabled, false otherwise
3069 Checks if the text field is in comb mode. @return true if comb mode is enabled, false otherwise
3070 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
3071 Retrieves a page by its 0-based index. @param index 0-based index of the page to retrieve @return PDPage object representing the specified page
3072 Returns the total number of pages in the PDF document. @return integer representing the number of pages
3073 Adds an attribute to the structure element. @param attributeObject the PDAttributeObject to add
3074 Updates the revision number for a changed attribute. @param attributeObject the updated PDAttributeObject
3075 Adds a class name to the PDF element's COS object. @param className the class name to add
3076 Increments the revision number of the PDF structure element by one.
3077 Prepares document for decryption using public key cryptography. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial used for decryption @throws IOException if decryption preparation fails or invalid material is provided
3078 Retrieves the owner encryption key. @return byte array containing the owner key or null if not found @throws IOException if an error occurs during retrieval
3079 Retrieves the user encryption key. @return byte array containing the user key or null if not found
3080 Calculates character displacement vector. @param code character code @return Vector representing x-displacement in PDF units, y-displacement is zero @throws IOException if an I/O error occurs while retrieving character width
3081 Calculates the total width of a string in PDF units. @param text input string to measure @return total width of the string in PDF units @throws IOException if an I/O error occurs during processing
3082 Retrieves a PDAbstractPattern by name. @param name the unique identifier for the pattern @return PDAbstractPattern instance or throws IOException if not found
3083 Processes operators in a PDF content stream. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
3084 Retrieves a PDShading object by name. @param name the unique identifier for the shading resource @return PDShading instance or null if not found @throws IOException if an error occurs during creation
3085 Retrieves the PDShading object associated with this pattern. @return PDShading instance or null if not found @throws IOException if an error occurs during shading creation
3086 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from COS object. @return bits per color component or -1 if not set
3087 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from COS object. @return bits per color component or -1 if not set
3088 Retrieves bits per coordinate for shading. @return number of bits used to represent each coordinate
3089 Retrieves bits per coordinate for shading. @return number of bits used to represent each coordinate
3090 Checks if the node has any open outline items. @return true if there are open items, false otherwise
3091 Creates a PDField instance based on the field type. @param form the AcroForm containing the field @param field the COSDictionary representing field attributes @param parent the parent PDNonTerminalField, if any @return PDField object or null if unsupported type
3092 Initializes a new PDFPrintable instance. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch setting for printing quality @param center flag to center pages during printing @param renderer the PDFRenderer used for rendering pages
3093 Initializes the PDFRenderer with a given document. @param document PDDocument to be rendered
3094 Loads and parses an FDF document from a file. @param filename path to the FDF file @return FDFDocument parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3095 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3096 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3097 Sets the stroking color space to DeviceRGB. @param operator PDF operator being processed @param arguments command arguments (not used)
3098 Retrieves an XObject by name from the PDF resources. @param name the name of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
3099 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs during writing
3100 Sets graphics state parameters in the PDF document. @param state PDExtendedGraphicsState object containing new settings @throws IOException if an I/O error occurs during writing
3101 Fills the current path with a shading pattern. @param shading PDShading object to apply @throws IOException if an I/O error occurs or called within text mode
3102 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the content @throws IOException if an I/O error occurs during writing
3103 Sets a marked content point with properties in the PDF stream. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3104 Draws an image at specified position and dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3105 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs during drawing
3106 Draws a form XObject on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing
3107 Checks if an optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
3108 Checks if an optional content group is enabled in the PDF document. @param group the optional content group to check @return true if the group is enabled or no optional content properties exist, false otherwise
3109 Adds a new child as the first item in the outline. @param newChild the PDOutlineItem to add
3110 Adds a child item to the end of the outline. @param newChild the PDOutlineItem to be added as a child
3111 Validates button value against allowed options. @param value to be checked @throws IllegalArgumentException if value is invalid
3112 Fixes destinations in the destination document by updating page references. @param destinationDocument the PDF document to fix destinations in
3113 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs during retrieval
3114 Initializes a GouraudShadingContext for PDF rendering. @param shading PDShading object representing the shading @param colorModel ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if initialization fails
3115 Creates a new PDF document if splitting is necessary. Handles document creation and initialization for the split process.
3116 Writes the PDF header to the document. Adjusts version if compression is enabled and writes standard header strings. @param doc the COSDocument to write the header for @throws IOException if an I/O error occurs
3117 Sets the optional content properties for the PDF document. Ensures the document version is at least 1.5 if OC groups are used. @param ocProperties PDOptionalContentProperties object to set
3118 Retrieves the role map from the PDF structure. @return Map containing role mappings or an empty map if not found
3119 Writes a PDF document with optional signing. @param doc the PDDocument to write @param signInterface the SignatureInterface for signing (optional) @throws IOException if an I/O error occurs
3120 Adds a PDF object to the compression pool. Handles conditions for adding, updating, and managing object streams. @param key unique identifier for the object (may be null) @param base the COSBase object to add @return the actual key assigned to the object, or null if not added
3121 Protects the PDF document with a specified security policy. @param policy the ProtectionPolicy to apply @throws IOException if no security handler is available for the policy
3122 Prepares a PDF document for encryption using public key cryptography. @param doc the PDDocument to encrypt @throws IOException if I/O or security operations fail
3123 Retrieves the glyph name for a given character code. @param code character code to find the glyph name for @return glyph name as Unicode string or ".notdef" if not found
3124 Converts character code to glyph ID. @param code character code to convert @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
3125 Retrieves the Mac OS subtype of the embedded file. @return MAC subtype as a string or null if not found
3126 Retrieves the Mac OS creator of the embedded file. @return Creator string or null if not found
3127 Retrieves the Mac OS resource fork of the embedded file. @return resource fork string or null if not found
3128 Retrieves a CID font mapping for a given base font and descriptor. @param baseFont the base font name @param fontDescriptor PDF font descriptor @param cidSystemInfo CID system information @return CIDFontMapping with matched fonts or last resort substitute
3129 Creates a decoded input stream using default decode options. @return COSInputStream with decoded PDF data @throws IOException if an I/O error occurs during decoding
3130 Searches for object streams using brute force. @param xrefTable cross-reference table to update with found objects @throws IOException if an I/O error occurs during parsing
3131 Parses a PDF object from a stream. @param objstmObjNr object number of the stream @param key unique identifier for the COSObject @return parsed COSBase object or null if not found @throws IOException if parsing fails
3132 Parses an object stream and updates cross-reference data. @param objByteOffset byte offset of the object @param isStandalone flag indicating if the xref is standalone @return previous xref table offset or -1 if not found @throws IOException if an I/O error occurs during parsing
3133 Retrieves the content stream of the PDF page. @return InputStream representing the page's contents @throws IOException if an I/O error occurs
3134 Constructs a PDCIDFontType2 with specified font dictionary and parent font. @param fontDictionary COSDictionary containing font data @param parent PDType0Font that owns this CID font @throws IOException if an I/O error occurs during font processing
3135 Retrieves the CID font instance. @return PDCIDFontType2 object representing the embedded CID font @throws IOException if an I/O error occurs during font processing
3136 Creates a PDAnnotation based on the given COSBase. @param base the COSBase object representing the annotation data @return PDAnnotation instance or throws IOException if unsupported type
3137 Creates a cloudy rectangle border in a PDF document. @param rd PDRectangle defining the dimensions and position of the rectangle @throws IOException if an I/O error occurs during rendering
3138 Renders a cloudy ellipse border in a PDF document. @param leftOrig x-coordinate of the lower-left corner @param bottomOrig y-coordinate of the lower-left corner @param rightOrig x-coordinate of the upper-right corner @param topOrig y-coordinate of the upper-right corner @throws IOException if I/O error occurs during rendering
3139 Initializes a TilingPaint object for rendering. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param xform AffineTransform for scaling @throws IOException if initialization fails due to invalid parameters or rendering issues
3140 Retrieves an opaque image from the PDF document. @return a BufferedImage representation of the opaque image or null if an error occurs @throws IOException if an I/O error occurs during processing
3141 Initializes a PDPageContentStream for content manipulation. @param document PDDocument object to which the stream belongs @param sourcePage PDPage where content is added or modified @param appendContent mode to determine how new content is appended @param compress flag to enable compression of the content stream @param resetContext flag to reset the graphics context before adding new content @throws IOException if I/O error occurs during content manipulation
3142 Retrieves the page's crop box dimensions. Uses inherited attribute if available, defaults to media box otherwise. @return PDRectangle representing the crop box
3143 Draws an inline image at specified position using its intrinsic width and height. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3144 Draws an inline image at specified position and size. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3145 Draws an inline image at the specified position and size. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3146 Draws an inline image at the specified position and size. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3147 Draws an inline image at a specified position and size. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3148 Initializes an FDFAnnotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3149 Decodes a JPEG2000 image from an input stream and writes it to an output stream. @param encoded input stream containing the encoded JPX data @param decoded output stream for the decoded image data @param parameters dictionary of decoding parameters @param index filter index @param options decoding options @return DecodeResult object with decoding results and parameters @throws IOException if an I/O error occurs during decoding
3150 Decodes LZW-encoded data from input stream to output stream. @param encoded input stream containing compressed LZW data @param decoded output stream for decompressed data @param parameters COSDictionary with decoding settings @param index index of the filter in the filter list @return DecodeResult object with decoding parameters @throws IOException if I/O error occurs during decoding
3151 Removes a page by its 1-based index. @param index 1-based index of the page to remove
3152 Removes a page from the PDF document. @param page PDPage object to be removed
3153 Adds a new page to the PDF document. @param page PDPage object representing the page to be added
3154 Inserts a new page before an existing page in the PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page should be inserted @throws IllegalArgumentException if the next page is not found in the tree
3155 Inserts a new page after a specified previous page in the PDF. @param newPage the page to be inserted @param prevPage the page after which the new page should be inserted @throws IllegalArgumentException if the previous page is an orphan
3156 Appends a marked content element as a child. @param markedContent the PDMarkedContent to append @throws IllegalArgumentException if MCID is negative or doesn't exist
3157 Fetches UCS2 CMap for composite or descendant CID fonts. Handles predefined and Identity-H/V encodings. @throws IOException if an error occurs during CMap retrieval
3158 Creates a PDImageXObject from a byte array. @param document PDF document to store the image @param byteArray source of the TIFF data as a byte array @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3159 Creates a PDImageXObject from a TIFF file. @param document PDF document to store the image @param file source TIFF file @param number page number to extract (0-based) @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3160 Sets the display options for a choice field. @param displayValues list of string values to set as options
3161 Sets the options for a choice field. @param exportValues list of export values @param displayValues list of display values
3162 Sets the indices of selected options for multi-select choice fields. @param values list of integer indices representing selected options
3163 Determines if the text field should use comb mode. @return true if comb mode is enabled and meets criteria, false otherwise
3164 Retrieves a page by its 0-based index. @param pageIndex 0-based index of the page to retrieve @return PDPage object representing the specified page
3165 Initializes PageExtractor with a PDF document. @param sourceDocument the original PDF document to extract pages from
3166 Initializes a new PDFPageable instance. @param document the PDDocument to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag to display page borders @param dpi resolution for rendering @param center flag to center content on pages
3167 Notifies the associated structure element of a change.
3168 Prepares PDF for decryption by validating passwords and setting encryption keys. @param encryption PDEncryption object containing document's encryption details @param documentIDArray array of document IDs @param decryptionMaterial material required for decryption @throws IOException if decryption fails or materials are incompatible
3169 Retrieves the width of a space character in the font. Uses various methods to determine the width, defaulting to 250 if unable to calculate. @return Width of the space character in PDF units
3170 Inserts generated appearance for a combination field. @param contents content stream to write appearance @param appearanceStream appearance stream to modify @param font font used for text @param fontSize size of the font @throws IOException if an I/O error occurs
3171 Determines if the font has fixed pitch. @return true if the font is monospaced, false otherwise
3172 Checks if the font has a serif style. @return true if the font is serif, false otherwise
3173 Checks if the font is symbolic. @return true if the font is symbolic, false otherwise
3174 Determines if the font is a script font. @return true if the font has the script flag set, false otherwise
3175 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
3176 Checks if the font is italic. @return true if the italic flag is set, false otherwise
3177 Checks if the font is all capital. @return true if the font is all capital, false otherwise
3178 Checks if the font supports small caps. @return true if small cap feature is enabled, false otherwise
3179 Determines if the font should be force bold. @return true if force bold flag is set, false otherwise
3180 Sets or clears the fixed pitch flag. @param flag true to set fixed pitch, false otherwise
3181 Sets or clears the serif flag. @param flag true to enable serif, false to disable
3182 Sets or clears the symbolic font flag. @param flag true to set, false to clear the symbolic flag
3183 Sets or clears the script font attribute. @param flag true to enable script style, false otherwise
3184 Sets or clears the non-symbolic font flag. @param flag true to mark as non-symbolic, false otherwise
3185 Sets or clears the italic style flag. @param flag true to enable italic, false to disable
3186 Sets or clears the all-cap flag. @param flag true to enable all-caps, false to disable
3187 Enables or disables small caps in the font. @param flag true to enable small caps, false to disable
3188 Sets or clears the force bold flag. @param flag true to force bold, false otherwise
3189 Retrieves a PDAbstractPattern associated with the given PDColor. @param color the PDColor object from which to get the pattern name @return PDAbstractPattern instance if found, otherwise throws IOException
3190 Processes a PDF transparency group. @param group PDTransparencyGroup to process @throws IOException if an I/O error occurs
3191 Processes a Type 3 character stream. @param charProc the character procedure to render @param textRenderingMatrix the transformation matrix for text rendering @throws IOException if an I/O error occurs during processing
3192 Processes annotations by rendering their appearance streams. @param annotation the PDF annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs during processing
3193 Processes a tiling pattern by setting up resources, transforming matrices, and rendering content. @param tilingPattern the tiling pattern to process @param color the color of the pattern @param colorSpace the color space for the pattern @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
3194 Processes a PDF content stream, managing resources and graphics state. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
3195 Updates the open count of parent outline nodes recursively. @param delta change in open count (positive or negative)
3196 Creates a PDField instance from a dictionary. @param form the AcroForm containing the field @param field the COSDictionary representing field attributes @param parent the parent PDNonTerminalField, if any @return PDField object or null if unsupported type
3197 Constructs a new PDFPrintable instance with default renderer. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch setting for printing quality @param center flag to center pages during printing
3198 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3199 Loads and parses a PDF document from a file. @param file the PDF file to load @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3200 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3201 Loads and parses a PDF document from a random access read source without encryption. @param randomAccessRead input source for the PDF @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3202 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF @param password decryption password for encrypted PDFs @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3203 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3204 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF @param password decryption password for encrypted PDFs @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3205 Sets visual signature from a PDF file. @param file PDF file containing the signature @throws IOException if an error occurs during initialization or parsing
3206 Sets visual signature from input stream. @param is InputStream containing the signature data @throws IOException if an error occurs during initialization or parsing
3207 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs during writing
3208 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs during writing
3209 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs during writing
3210 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs during writing
3211 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
3212 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3213 Sets graphics state parameters in the PDF document. @param state PDExtendedGraphicsState object containing new settings @throws IOException if an I/O error occurs during writing
3214 Sets graphics state parameters in the PDF document. @param state PDExtendedGraphicsState object containing new settings @throws IOException if an I/O error occurs during writing
3215 Sets graphics state parameters in the PDF document. @param state PDExtendedGraphicsState object containing new settings @throws IOException if an I/O error occurs during writing
3216 Sets graphics state parameters for the pattern content stream. @param state PDExtendedGraphicsState object with new settings @throws IOException if an I/O error occurs during writing
3217 Fills the current path with a shading pattern. @param shading PDShading object to apply @throws IOException if an I/O error occurs or called within text mode
3218 Fills the current path with a shading pattern. @param shading PDShading object to apply @throws IOException if an I/O error occurs or called within text mode
3219 Fills the current path with a shading pattern. @param shading PDShading object to apply @throws IOException if an I/O error occurs or called within text mode
3220 Fills the current path with a shading pattern. @param shading PDShading object to apply @throws IOException if an I/O error occurs or called within text mode
3221 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the content @throws IOException if an I/O error occurs during writing
3222 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the content @throws IOException if an I/O error occurs during writing
3223 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the content @throws IOException if an I/O error occurs during writing
3224 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the content @throws IOException if an I/O error occurs during writing
3225 Sets a marked content point with properties in the PDF stream. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3226 Sets a marked content point with properties in the PDF stream. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3227 Sets a marked content point with properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3228 Sets a marked content point with properties in the PDF stream. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3229 Draws an image at specified position and dimensions in a PDF. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3230 Draws an image at a specified position and size in the PDF form. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3231 Draws an image on the PDF page at specified position and dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3232 Draws an image at specified position and dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing or if called within a text block
3233 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs during drawing or if in text mode
3234 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs during drawing
3235 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs during drawing or text mode is active
3236 Draws an image on the PDF canvas within a pattern context. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if an I/O error occurs during drawing or text mode is active
3237 Draws a form XObject on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing
3238 Draws a form XObject on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
3239 Draws a form XObject on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
3240 Draws a form XObject on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during drawing or text mode is active
3241 Prepares a PDF document for encryption by setting up the encryption dictionary. @param document PDDocument object to be encrypted @throws IOException if an I/O error occurs during encryption setup
3242 Sets the default value of the button. @param value default value to be assigned
3243 Sets button value and updates appearance. @param value new value to set for the button @throws IOException if an I/O error occurs
3244 Retrieves the page number of the destination. @return page number or -1 if not found
3245 Imports optional content properties from a source document to the target document. @param srcDoc source PDF document containing OC properties @throws IOException if an I/O error occurs during processing
3246 Builds and embeds a subset of CID font into PDF. @param ttfSubset input stream for the TTF subset data @param tag string to prepend to the current font name @param gidToCid mapping from GID to CID for subsetting @throws IOException if I/O error occurs during processing
3247 Retrieves the standard structure type of the PDF element. @return Standardized structure type as a String
3248 Writes a PDF document without signing. @param doc the PDDocument to write @throws IOException if an I/O error occurs
3249 Saves the PDF document incrementally to an output stream. @param output the OutputStream to save the document to @throws IOException if an I/O error occurs
3250 Saves the PDF document incrementally. @param output the OutputStream to write the PDF @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
3251 Adds a PDF structure to the compression pool. Handles COSStream, COSDictionary, and COSArray types. Recursively processes nested structures. @param current the COSBase object to add @throws IOException if an I/O error occurs
3252 Converts stream content to a text string. @return Decoded text string or empty if an error occurs
3253 Creates a decoded input stream using default decode options. @return COSInputStream with decoded PDF data @throws IOException if an I/O error occurs during decoding
3254 Collects and processes patches from a PDF shading dictionary. @param xform additional affine transform @param matrix transformation matrix @param controlPoints number of control points @return List of Patch objects or empty list if no valid patches found @throws IOException if an I/O error occurs during processing
3255 Rebuilds the PDF trailer using cross-reference table. @param xrefTable map of COSObjectKey to offset @return COSDictionary representing the rebuilt trailer @throws IOException if an I/O error occurs during processing
3256 Parses a PDF object dynamically. @param objKey unique identifier for the COSObject @param requireExistingNotCompressedObj flag to ensure object exists and is not compressed @return parsed COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
3257 Parses cross-reference tables and trailers in a PDF document. @param document the COSDocument to process @param startXRefOffset starting offset of the xref table @return COSDictionary representing the parsed trailer @throws IOException if an I/O error occurs during parsing
3258 Creates a descendant CID font from a COS dictionary. @param dictionary COSDictionary containing font data @param parent PDType0Font that owns this CID font @return PDCIDFont object based on the font subtype @throws IOException if an I/O error occurs or invalid font type is found
3259 Retrieves annotations from the PDF page. @param annotationFilter filter to apply to annotations @return list of filtered PDAnnotation objects
3260 Retrieves the referenced PDF object. @return COSObjectable instance or null if not found or invalid type
3261 Retrieves the annotation in reply to this one. @return PDAnnotation instance or null if none exists @throws IOException if an error occurs during retrieval
3262 Retrieves the parent markup annotation. @return PDAnnotationMarkup instance or null if not found or invalid type
3263 Creates a cloudy ellipse border within the specified rectangle. @param rd Rectangle defining the border's dimensions @throws IOException if I/O error occurs during rendering
3264 Retrieves or initializes the normal appearance as a content stream. @param compress whether to enable compression @return PDAppearanceContentStream for writing appearance data @throws IOException if I/O error occurs or resources are not accessible
3265 Initializes a PDPageContentStream for overwriting page content. @param document PDDocument object to which the stream belongs @param sourcePage PDPage where content is added or modified @throws IOException if I/O error occurs during content manipulation
3266 Initializes a PDPageContentStream for content manipulation. @param document PDDocument object to which the stream belongs @param sourcePage PDPage where content is added or modified @param appendContent mode to determine how new content is appended @param compress flag to enable compression of the content stream @throws IOException if I/O error occurs during content manipulation
3267 Initializes the current page for rendering. @param page PDPage to be initialized @throws IllegalArgumentException if page is null
3268 Retrieves the page's bleed box dimensions. @return PDRectangle representing the bleed box or crop box if not defined
3269 Retrieves the page's trim box dimensions. Uses inherited attribute if available, defaults to crop box otherwise. @return PDRectangle representing the trim box or crop box if not found
3270 Retrieves the page's art box dimensions. Uses inherited attribute if available, defaults to crop box otherwise. @return PDRectangle representing the art box
3271 Retrieves the rotated crop box of a PDF page. Adjusts dimensions if page is rotated 90 or 270 degrees. @param page PDF page to process @return PDRectangle representing the adjusted crop box
3272 Draws an inline image at the specified position using its intrinsic dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3273 Draws an inline image at the specified position using its intrinsic dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3274 Draws an inline image at the specified position using its intrinsic dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3275 Draws an inline image at a specified position using its intrinsic dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3276 Initializes a caret annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3277 Initializes a circular annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3278 Constructs an FDF file attachment annotation from an XML element. @param element XML element containing the annotation data @throws IOException if required attributes are missing or invalid
3279 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3280 Initializes an FDFAnnotationInk from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3281 Constructs a line annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3282 Initializes a hyperlink annotation from an XML element. @param element XML element representing the annotation @throws IOException if there's an error processing the element
3283 Constructs a polygon annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3284 Constructs an FDFAnnotationPolyline from an XML element. @param element XML element containing annotation data @throws IOException if required attributes or elements are missing or invalid
3285 Initializes an FDFAnnotationSound from an XML element. @param element XML element containing sound annotation data @throws IOException if required attributes are missing or invalid
3286 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3287 Initializes a stamp annotation from an XML element. @param element XML element containing stamp annotation data @throws IOException if required attributes are missing or invalid
3288 Constructs an FDFAnnotationText from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3289 Constructs a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3290 Removes a page from the PDF document by its 1-based index. @param pageNumber 1-based index of the page to remove
3291 Removes a specified page from the PDF document. @param page PDPage object to be removed
3292 Imports a page from another PDF document. @param page PDPage object representing the source page @return PDPage object representing the imported page @throws IOException if an I/O error occurs
3293 Creates a PDF template with the specified page. @param page PDPage object to be added to the template @throws IOException if an I/O error occurs during template creation
3294 Creates a PDImageXObject from a byte array. @param document PDF document to store the image @param byteArray source of the TIFF data as a byte array @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3295 Creates a PDImageXObject from a TIFF file. @param document PDF document to store the image @param file source TIFF file @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3296 Sets the value of a single-select choice field. @param value the string value to set @throws IOException if an error occurs during processing
3297 Updates selected options index for choice fields. @param values list of selected option values @param options list of available option values
3298 Calculates and sets the page size for signature design. @param document PDF document to process @param page 1-based index of the target page
3299 Finds the destination page for this outline item. @param doc PDF document containing the outline @return PDPage object representing the target page or null if not found @throws IOException if an I/O error occurs during retrieval
3300 Constructs a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed
3301 Initializes a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed @param orientation page orientation (e.g., portrait, landscape)
3302 Constructs a new PDFPageable instance. @param document the PDDocument to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag to display page borders
3303 Constructor initializes a new PDFPageable instance with default centering. @param document the PDDocument to be paginated and printed @param orientation page orientation (e.g., portrait, landscape) @param showPageBorder flag to display page borders @param dpi resolution for rendering
3304 Retrieves page indices mapped to their labels. @return Map with page labels as keys and indices as values
3305 Retrieves labels for all pages in the document. @return array of page labels corresponding to page indices
3306 Checks for value change and notifies if changed. @param oldBase previous attribute base @param newBase current attribute base
3307 Processes and displays a glyph from a PDF document. @param textRenderingMatrix current text rendering matrix @param font PDFont object representing the font @param code character code to process @param displacement vector for character positioning @throws IOException if an I/O error occurs
3308 Splits paragraph text into lines based on font and width constraints. @param font PDFont used for measuring text width @param fontSize size of the font in points @param width maximum line width in PDF units @return List of Line objects representing formatted text lines @throws IOException if an I/O error occurs during processing
3309 Retrieves the symbolic flag of the font. @return Boolean value indicating if the font is symbolic, or null if descriptor is unavailable
3310 Determines a fallback font name based on PDFontDescriptor properties. @param fontDescriptor descriptor for the font @return fallback font name as a string
3311 Builds a PDFontDescriptor from a Type 1 font. @param type1 the source Type 1 font @return a configured PDFontDescriptor object @throws IOException if an I/O error occurs
3312 Builds a PDFontDescriptor from FontMetrics. @param metrics font metrics data @return configured PDFontDescriptor object
3313 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont object to create descriptor from @return PDFontDescriptor with set properties @throws IOException if required tables are missing
3314 Retrieves the Paint object for a given PDColor. @param color PDColor to be rendered @return Paint object suitable for rendering the color @throws IOException if an error occurs during pattern or shading processing
3315 Renders a PDF transparency group. @param form PDTransparencyGroup to render @throws IOException if an I/O error occurs
3316 Processes a PDF transparency group with soft mask. @param group PDTransparencyGroup to process @throws IOException if an I/O error occurs
3317 Renders a Type 3 glyph using the specified matrix and font. @param textRenderingMatrix transformation matrix for text rendering @param font PDType3Font object containing character procedures @param code encoding code of the glyph to render @param displacement vector for additional positioning (not used in method) @throws IOException if an I/O error occurs during rendering
3318 Renders a PDF annotation by processing its appearance stream. @param annotation the annotation to render @throws IOException if an I/O error occurs during rendering
3319 Processes a tiling pattern using default matrix. @param tilingPattern the tiling pattern to process @param color the color of the pattern @param colorSpace the color space for the pattern @throws IOException if an I/O error occurs during processing
3320 Renders a form XObject on the current page. @param form the form XObject to render @throws IOException if an I/O error occurs during rendering
3321 Retrieves all fields from the form. @return List of PDField objects representing form fields
3322 Recursively finds a child field by its name. @param name array of field names in hierarchy @param nameIndex current index in the name array @return PDField object or null if not found
3323 Retrieves child fields of the non-terminal field. @return List of PDField objects representing child fields
3324 Constructs a new PDFPrintable instance with default subsampling. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch setting for printing quality
3325 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted PDFs @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3326 Loads and parses a PDF document from a file. @param file the PDF file to load @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3327 Loads and parses a PDF document from a file. @param file the PDF file to load @param password decryption password for encrypted PDFs @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3328 Loads and parses a PDF document from a file. @param file the PDF file to load @param password decryption password for encrypted PDFs @param streamCacheCreateFunction function to create the stream cache @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3329 Loads and parses a PDF document from a file. @param file the PDF file to load @param password decryption password for encrypted PDFs @param keyStore input stream of the keystore for decryption @param alias alias of the key in the keystore @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3330 Sets visual signature using properties. @param visSignatureProperties object containing signature properties @throws IOException if an error occurs during initialization or parsing
3331 Sets the stroking color for PDF content using a Java Color object. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
3332 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
3333 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
3334 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
3335 Sets the stroking color for PDF content. @param color PDColor object representing the new stroke color @throws IOException if an I/O error occurs during writing
3336 Sets the non-stroking color for PDF content from a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
3337 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3338 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3339 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3340 Sets the non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3341 Imports a page from a source document as a form XObject. @param sourceDoc the source PDF document containing the page @param page the PDF page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3342 Writes a PDF document. @param doc COSDocument representing the PDF content @throws IOException if an I/O error occurs
3343 Saves the PDF document to an output stream with specified compression. @param output the OutputStream to write the PDF data to @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
3344 Initializes a COSWriterCompressionPool for the given PDF document and compression parameters. @param document PDDocument to compress @param parameters optional CompressParameters; defaults to new if null @throws IOException if an I/O error occurs during initialization
3345 Retrieves string representation of a COSBase object. Handles COSString and COSStream types, returns empty string for others. @param base the COSBase object to process @return string value or empty if unsupported type
3346 Retrieves the value of the field. Handles various COSBase types and converts them to appropriate objects. @return The field's value as an Object or null if not found @throws IOException if an unknown type is encountered
3347 Retrieves rich text value of the field. @return Rich text as String or null if not available
3348 Retrieves JavaScript action before form submission. @return JavaScript code as string or null if not found
3349 Retrieves the "After" JavaScript action from the FDF dictionary. @return String representation of the "After" action or null if not found
3350 Retrieves JavaScript action as a string. @return JavaScript code or null if not found or unsupported type
3351 Retrieves rich content of the annotation. @return Decoded rich content string or null if not found
3352 Converts a COSBase to its string representation. Handles COSString and COSStream types, returning an empty string for others. @param base the COSBase object to convert @return String representation of the base object or empty string if unsupported
3353 Creates a LayoutPage for the given PDF page. @param page PDPage object to be processed @return LayoutPage with combined content and resources @throws IOException if I/O error occurs during stream handling
3354 Converts PDF stream to a byte array. @return byte array containing the PDF data @throws IOException if an I/O error occurs during conversion
3355 Retrieves and initializes the sample array for interpolation. @return 2D array of integers representing sample values
3356 Loads ICC profile and initializes color space. Handles alternate color space if necessary. @throws IOException if an I/O error occurs during loading
3357 Initializes a PatchMeshesShadingContext for rendering PDF mesh-based shading. @param shading PDMeshBasedShadingType object representing the shading @param colorModel ColorModel to be used for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds for rendering @param controlPoints number of control points for patch collection @throws IOException if initialization fails or I/O error occurs
3358 Initializes Type4ShadingContext for PDF rendering. @param shading PDShadingType4 object representing the shading @param cm ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device area @throws IOException if initialization fails
3359 Initializes Type5ShadingContext for PDF rendering. @param shading PDShadingType5 object representing the shading @param cm ColorModel to be used @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the pixel area @throws IOException if initialization fails
3360 Retrieves and validates the PDF trailer. Handles parsing, rebuilding, and decryption as needed. @return COSDictionary representing the parsed or rebuilt trailer @throws IOException if an I/O error occurs during processing
3361 Renders a PDF form onto the graphics context. @param form the PDFormXObject to render @throws IOException if an I/O error occurs during rendering
3362 Begins a marked content sequence, checking for hidden optional content groups. @param tag the marked content tag name @param properties dictionary containing properties of the marked content
3363 Retrieves all annotations from the PDF page. @return list of PDAnnotation objects @throws IOException if an error occurs while accessing the annotations
3364 Retrieves normal appearance as content stream without compression. @return PDAppearanceContentStream for writing appearance data @throws IOException if I/O error occurs or resources are not accessible
3365 Appends a form as a new layer to the target page. @param targetPage the page to add the layer to @param form the PDFormXObject to be added as a layer @param transform the transformation matrix for the form @param layerName the name of the new optional content group (layer) @return the newly created PDOptionalContentGroup @throws IOException if an I/O error occurs during processing
3366 Processes a PDF page for rendering. @param page PDPage to be processed @throws IOException if an I/O error occurs during processing
3367 Processes a child content stream for rendering. @param contentStream the PDF content stream to process @param page the PDPage associated with the content stream @throws IllegalStateException if page is already being processed @throws IOException if an I/O error occurs during processing
3368 Retrieves the page format for a given PDF page index. @param pageIndex 0-based index of the PDF page @return PageFormat object representing the page's layout and orientation
3369 Constructs a highlight annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3370 Constructs a squiggly annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3371 Constructs a strikeout annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3372 Initializes an underline annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
3373 Sets selected values for a choice field. @param values list of selected option values @throws IOException if an I/O error occurs
3374 Initializes the signature designer with a PDF document and an image stream. @param document PDF document to process @param imageStream InputStream containing the image data for the signature @param page 1-based index of the target page in the document @throws IOException if there is an I/O error reading the stream or setting up the page size
3375 Initializes the visible signature designer with a PDF document, image, and page. @param document PDF document to process @param image BufferedImage to be used as the signature @param page 1-based index of the target page
3376 Formats and displays text content with specified alignment and wrapping. @throws IOException if an I/O error occurs during processing
3377 Calculates the appropriate font size for a given PDF form field. @param font the font to be used @param contentRect the rectangle defining the content area @return the calculated font size or default if auto-sizing is not enabled @throws IOException if an I/O error occurs during processing
3378 Reads and assigns the font encoding. Handles both COSName and COSDictionary encoding types. Initializes glyph list based on the font name.
3379 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, or null if indeterminate
3380 Retrieves a TrueType font by base name or descriptor. @param baseFont base font name to search for @param fontDescriptor PDFontDescriptor for additional matching criteria @return FontMapping containing the matched TrueTypeFont and a boolean indicating if it's a fallback
3381 Retrieves a FontBoxFont by base name or fallback. @param baseFont base font name to search for @param fontDescriptor descriptor for the font @return FontMapping containing the found FontBoxFont and a flag indicating if it's a fallback
3382 Embeds a Type 1 font into a PDF document. @param doc PDDocument to embed the font into @param dict COSDictionary for font properties @param pfbStream InputStream containing PFB font data @param encoding optional custom Encoding, defaults to Type1Encoding if null @throws IOException if I/O error occurs during embedding
3383 Constructs a PDFont object for a given base font. @param baseFont the name of the base font Initializes font descriptor and maps, throws exception if AFM not found.
3384 Initializes TrueType font embedding for a PDF document. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param embedSubset true if subsetting is enabled @throws IOException if embedding permissions are not granted or unsupported formats are used
3385 Renders a glyph from the specified PDFont at given coordinates. @param textRenderingMatrix transformation matrix for text rendering @param font the PDFont object representing the font to use @param code character code of the glyph to render @param displacement vector indicating additional position adjustments @throws IOException if an I/O error occurs during rendering
3386 Opens the current outline node. If the node is not already open, it switches the node count and updates parent nodes recursively.
3387 Closes the current outline node. If the node is open, it switches its state and updates parent nodes recursively.
3388 Exports form data to an FDF document. @return FDFDocument containing exported form fields
3389 Determines if XFA is dynamic. @return true if XFA is present and form fields are empty, false otherwise
3390 Constructs a new PDFPrintable instance with default subsampling. @param document the PDDocument to be printed @param scaling the scaling option for rendering @param showPageBorder flag to indicate if page borders should be shown
3391 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @return PDDocument object parsed from the input @throws IOException if an I/O error occurs during loading or parsing
3392 Loads and parses a PDF document from a file. @param file the PDF file to load @param password decryption password for encrypted PDFs @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3393 Loads and parses a PDF document from a file. @param file the PDF file to load @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing
3394 Sets the stroking color for PDF content using a Java Color object. Converts Java Color to PDColor and delegates to setStrokingColor(PDColor). @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
3395 Sets the stroking color for PDF content using a Java Color object. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
3396 Sets the stroking color using a Java Color object. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
3397 Sets the stroking color using a Java Color object. Converts the Color to RGB components and applies it to the PDF content stream. @param color Java Color object representing the new stroke color @throws IOException if an I/O error occurs during writing
3398 Sets the non-stroking color for PDF content. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
3399 Sets the non-stroking color for PDF content. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
3400 Sets the non-stroking color for PDF content from a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
3401 Sets the non-stroking color for PDF content. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing
3402 Initializes the appearance content for a PDF annotation widget. @param widget PDAnnotationWidget representing the form field @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary for styling @param appearanceStream PDAppearanceStream to write the appearance content to @throws IOException if an I/O error occurs during writing
3403 Writes font settings to the appearance content stream. @param contents PDAppearanceContentStream for writing @param zeroFontSize default font size if current is zero @throws IOException if an I/O error occurs during writing
3404 Imports a specific page from a PDF document as a form XObject. @param sourceDoc the source PDF document containing the page @param pageNumber 0-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3405 Saves the PDF document to an output stream with default compression. @param output the OutputStream to write the PDF data to @throws IOException if an I/O error occurs or the document is closed
3406 Saves the PDF document to a file with specified compression. @param file the File object where the PDF will be saved @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
3407 Writes the body of a PDF document with compression. @param document COSDocument to write @throws IOException if an I/O error occurs during writing
3408 Retrieves rich content of the annotation. @return string representation of rich content or empty if not found
3409 Writes the field and its children to an XML writer. @param output Writer object to write XML data @throws IOException if I/O error occurs during writing
3410 Retrieves rich text value from PDF variable text field. @return Rich text content as a string or empty if not set
3411 Retrieves and creates a layout page from the first page of the document. @param doc PDDocument object containing the PDF pages @return LayoutPage for the first page or throws IOException if an error occurs
3412 Constructs a PDFunctionType4 instance from a COSBase object. @param functionStream underlying COSBase object representing the PDF function @throws IOException if an I/O error occurs during processing
3413 Recursively interpolates float values based on coordinates and step index. @param coord array of integer coordinates @param step current step index in the interpolation process @return interpolated float values as an array
3414 Initializes a PDF ICC-based color space from an array. @param iccArray COSArray containing ICC profile data @throws IOException if an I/O error occurs during initialization
3415 Initializes a Type6ShadingContext for rendering PDF Type 6 shading. @param shading PDShadingType6 object representing the shading @param colorModel ColorModel to be used for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds for rendering @throws IOException if initialization fails or I/O error occurs
3416 Initializes a Type7ShadingContext for rendering PDF Type 7 shading. @param shading PDShadingType7 object representing the shading @param colorModel ColorModel to be used for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds for rendering @throws IOException if initialization fails or I/O error occurs
3417 Retrieves bytes from XFA resource. Handles both single and split XFA parts. @return byte array of XFA data or empty if not found @throws IOException if an I/O error occurs
3418 Updates structure parent entries for a PDF page. Adjusts struct parent indices and annotations by a given offset. @param page the PDF page to update @param structParentOffset the offset to adjust struct parents @throws IOException if an error occurs while updating annotations
3419 Clones the structure tree from source to destination document. @param destinationDocument target PDF document for cloning @throws IOException if an error occurs during cloning
3420 Processes and clones annotations from a PDF page. @param imported the PDPage to process @throws IOException if an error occurs during processing
3421 Builds a map of pages to their associated widget annotations. @param fields list of PDF form fields @param pages PDPageTree containing all pages in the document @return Map associating COSDictionary (page) with Set of COSDictionary (widgets) @throws IOException if an error occurs while accessing annotations
3422 Processes a PDF page by setting rotation, size, and translation. @param page PDPage to be processed @throws IOException if an I/O error occurs during processing
3423 Constructs an FDFDictionary from an XML element. @param fdfXML XML element representing the FDF document
3424 Imports field data from an FDFField into the current PDField. Handles different COSBase types and updates field flags accordingly. @param fdfField source FDF field containing import data @throws IOException if an error occurs during import
3425 Initializes a new PDVisibleSignDesigner with an image and PDF source. @param documentSource input source for the PDF @param imageStream InputStream containing the signature image data @param page 1-based index of the target page in the PDF @throws IOException if there is an I/O error during initialization
3426 Initializes a new PDVisibleSignDesigner with a PDF source, signature image, and target page. @param documentSource input source for the PDF document @param image BufferedImage to be used as the signature @param page 1-based index of the target page in the PDF @throws IOException if an I/O error occurs during processing
3427 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic; defaults to true if indeterminate
3428 Constructs a PDType1Font instance by embedding it into a PDF document. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @param encoding optional custom Encoding, defaults to embedded font's encoding if null @throws IOException if I/O error occurs during embedding
3429 Constructs a PDSimpleFont object. @param baseFont the name of the base font Initializes font descriptor and glyph list, throws exception if AFM not found.
3430 Initializes a PDFont with a given dictionary. @param fontDictionary the COSDictionary containing font information
3431 Constructs a PDCIDFontType2Embedder for embedding CID fonts in PDFs. @param document the PDF document to embed into @param dict the font dictionary @param ttf the TrueTypeFont to use @param embedSubset whether to subset the font @param parent the parent PDType0Font @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during setup
3432 Constructs a PDTrueTypeFontEmbedder for embedding TrueType fonts in PDF documents. @param document PDDocument to embed the font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @throws IOException if an I/O error occurs during embedding
3433 Checks if the given AcroForm has dynamic XFA. @param acroForm the PDF AcroForm to check @return true if XFA is dynamic and form fields are empty, false otherwise
3434 Constructs a new PDFPrintable instance without showing page borders. @param document the PDDocument to be printed @param scaling the scaling option for rendering
3435 Loads and parses a PDF document from a file. @param file the PDF file to load @return PDDocument object parsed from the file @throws IOException if an I/O error occurs during loading or parsing @deprecated Use Loader.loadPDF instead
3436 Generates and inserts appearance for a form field widget. @param widget annotation widget to modify @param appearanceStream stream defining the visual appearance @param output stream to write appearance content @throws IOException if an I/O error occurs
3437 Builds a PDF document with integrated visual signatures. @param properties configuration for the visible signature design @return InputStream representing the serialized signed PDF @throws IOException if I/O operations fail
3438 Saves the PDF document to a specified file with default compression. @param file the File object where the PDF will be saved @throws IOException if an I/O error occurs or the document is closed
3439 Saves the PDF document to a specified file with given compression settings. @param fileName path to the file where the PDF will be saved @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs or the document is closed
3440 Writes FDF document details to an XML writer. @param output Writer object to write XML data @throws IOException if I/O error occurs during writing
3441 Creates a PDFunction instance based on the provided COSBase object. @param function underlying COSBase object representing the PDF function @return PDFunction object corresponding to the specified function type @throws IOException if an I/O error occurs or function type is unknown
3442 Initiates recursive interpolation process. @return interpolated float values as an array
3443 Creates a PDICCBased color space from an ICC array. @param iccArray COSArray containing ICC profile data @param resources PDF resources for caching @return PDICCBased object or new instance if not cached @throws IOException if I/O error occurs during creation
3444 Creates a PDImageXObject from a BufferedImage for PDF inclusion. Handles grayscale and RGB images, using predictor encoding if enabled. @param document the PDDocument to add the image to @param image the source BufferedImage @return PDImageXObject ready for PDF embedding @throws IOException if I/O error occurs during processing
3445 Extracts and converts the matte values from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float array of RGB matte values or null if invalid @throws IOException if unable to process the matte values
3446 Draws an image at a specified position using its natural dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3447 Retrieves and parses the XFA document. @return parsed XML Document object @throws IOException if parsing fails or I/O error occurs
3448 Draws a PDF page onto the specified graphics context. @param g Graphics2D to render the page on @param pageSize size of the PDF page @throws IOException if an I/O error occurs
3449 Processes a PDF page for splitting. Imports the page into the destination document, handles resources and annotations. @param page PDPage object to be processed @throws IOException if an I/O error occurs
3450 Processes a PDF page by setting rotation, size, and translation. @param page PDPage to be processed @throws IOException if an I/O error occurs during processing
3451 Processes a PDF page for text extraction. @param page PDPage to be processed @throws IOException if an I/O error occurs during processing
3452 Constructs an FDF catalog from an XML element. @param element XML element representing the FDF document
3453 Constructs a PDType1Font instance by embedding it into a PDF document. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @throws IOException if I/O error occurs during embedding
3454 Constructs a PDType1Font instance. @param baseFont the FontName specifying the base font Initializes font dictionary, sets encoding, and checks for fallback fonts.
3455 Constructs a PDSimpleFont instance. @param fontDictionary COSDictionary containing font information
3456 Constructs a PDType0Font from a font dictionary. Initializes descendant fonts and encoding. @param fontDictionary COSDictionary containing font data @throws IOException if an error occurs during initialization
3457 Initializes a PDType0Font for embedding TrueType fonts in PDFs. @param document PDF document to embed into @param ttf TrueTypeFont object @param embedSubset whether to subset the font @param closeTTF whether to register or close the TTF @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during setup
3458 Constructs a PDTrueTypeFont object for embedding TrueType fonts in PDF documents. @param document PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @param closeTTF flag indicating whether to close the TTF after embedding @throws IOException if an I/O error occurs during embedding
3459 Returns an iterator to traverse PDFields in the PDAcroForm. @return Iterator<PDField> for iterating through form fields
3460 Constructs a new PDFPrintable instance with default scaling. @param document the PDDocument to be printed
3461 Initializes the PDVisibleSignDesigner with a PDF file and an image stream. @param filename path to the PDF file @param imageStream InputStream containing the signature image data @param page 1-based index of the target page @throws IOException if there is an I/O error during initialization
3462 Initializes the PDVisibleSignDesigner with a PDF file, signature image, and page number. @param filename path to the PDF file @param image BufferedImage to be used as the signature @param page 1-based index of the target page @throws IOException if an I/O error occurs during file loading or processing
3463 Builds a PDF with a visible signature. Initializes template creation and sets the signature image. @throws IOException if I/O operations fail during PDF building
3464 Saves the PDF document to a specified file. @param fileName path where the PDF will be saved @throws IOException if an I/O error occurs or the document is closed
3465 Writes FDF catalog data to an XML writer. @param output Writer object to write XML data @throws IOException if I/O error occurs during writing
3466 Evaluates input through a stitching function. @param input array of input values @return evaluated output as a float array @throws IOException if an I/O error occurs during evaluation
3467 Initializes a PDDeviceN instance with DeviceN color space data. @param deviceN COSArray containing DeviceN color space information @param resources PDResources for resource management @throws IOException if an I/O error occurs during initialization
3468 Retrieves or creates the tint transformation function. @return PDFunction representing the tint transform @throws IOException if an I/O error occurs during creation
3469 Initializes a PDSeparation object. @param separation COSArray containing separation details @param resources PDResources for color space creation @throws IOException if initialization fails due to invalid tint transform or alternate colorspace
3470 Retrieves the shading function. @return PDFunction object or null if not found @throws IOException if an I/O error occurs
3471 Retrieves the functions array associated with the shading. @return PDFunction[] containing the shading functions @throws IOException if the function type is unknown or I/O error occurs
3472 Retrieves the transfer function associated with the soft mask. @return PDFunction object or null if not found @throws IOException if an I/O error occurs during retrieval
3473 Constructs a PDIndexed color space. @param indexedArray COSArray representing the indexed color space @param resources PDF resources for color space initialization @throws IOException if an error occurs during initialization
3474 Evaluates input values using linear interpolation. @param input array of input float values @return interpolated output values as a float array @throws IOException if range missing in function /Decode entry
3475 Constructs a PDF image object from PNG data. @param document PDF document to add the image to @param state PNG conversion state containing image properties @return PDImageXObject or null if creation fails @throws IOException if I/O error occurs during processing
3476 Creates a PDImageXObject from a file based on its extension. Supports JPEG, TIFF, GIF, BMP, and PNG formats. @param file the source image file @param doc the PDDocument to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or unsupported format is used
3477 Creates a PDImageXObject from a file by detecting its content. @param file source image file @param doc PDF document to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or file type is unsupported
3478 Retrieves the image as a BufferedImage. @param region optional rectangle defining the area to clip @param subsampling subsampling factor for rendering @return BufferedImage representation of the image or null if an error occurs
3479 Draws an image at a specified position using its natural dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3480 Draws an image at a specified position using its natural dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3481 Draws an image at a specified position using its natural dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3482 Draws an image at a specified position using its natural dimensions. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3483 Renders a PDF page as an image. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB, RGB) @param destination where the rendered image will be saved @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3484 Renders a specific PDF page to a graphics context. @param pageIndex 0-based index of the page to render @param graphics target Graphics2D for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis @param destination RenderDestination where the page will be drawn @throws IOException if an I/O error occurs during rendering
3485 Processes specified range of pages from the source document. @throws IOException if an I/O error occurs during page processing
3486 Processes each page in the PDF document for text extraction. @param pages PDPageTree containing all pages to be processed @throws IOException if an I/O error occurs during processing
3487 Constructs an FDFDocument from a Document object. @param doc XML Document representing the FDF content @throws IOException if the root element is not 'xfdf'
3488 Retrieves the default font for rendering text. Initializes a Helvetica font if not already set. @return PDType1Font instance representing the default font
3489 Retrieves or creates a FontBoxFont for the given base name. @param baseName the FontName specifying the base font @return FontBoxFont object associated with the base name
3490 Initializes a PDTrueTypeFont from a font dictionary. @param fontDictionary COSDictionary containing font information @throws IOException if an I/O error occurs during font parsing
3491 Initializes a PDType1CFont from a COSDictionary. @param fontDictionary dictionary containing font information @throws IOException if an I/O error occurs
3492 Constructs a PDType1Font instance from a font dictionary. Handles embedded Type 1 fonts and repairs length values if necessary. @param fontDictionary COSDictionary containing font information @throws IOException if an I/O error occurs during font processing
3493 Constructs a PDType3Font instance. @param fontDictionary COSDictionary containing font information @param resourceCache ResourceCache for managing font resources @throws IOException if an I/O error occurs during initialization
3494 Loads a Type 0 font from a random access read source. @param doc PDF document to associate the font with @param randomAccessRead source of TrueType font data @param embedSubset whether to subset the font during embedding @param vertical whether the font supports vertical text @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3495 Loads a Type 0 font into a PDF document. @param doc PDF document to load the font into @param ttf TrueTypeFont object @param embedSubset whether to subset the font @return PDType0Font instance @throws IOException if an I/O error occurs during loading
3496 Loads a vertical Type 0 font into a PDF document. @param doc PDF document to load the font into @param ttf TrueTypeFont object @param embedSubset whether to subset the font @return PDType0Font instance configured for vertical text @throws IOException if an I/O error occurs during loading
3497 Loads a TrueType font into a PDF document. @param doc PDDocument to embed the font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @return PDTrueTypeFont instance for text rendering @throws IOException if an I/O error occurs during embedding
3498 Loads a TrueType font from a PDF document. @param doc PDDocument to load the font into @param randomAccessRead source of the TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object for embedding @throws IOException if an I/O error occurs during loading
3499 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects representing signature fields
3500 Refreshes the appearances of all terminal fields in the form. @throws IOException if an I/O error occurs during appearance construction
3501 Returns an iterator to traverse form fields in the PDF document. @return Iterator<PDField> for iterating through form fields
3502 Enables or disables caching of form fields. @param cache true to enable caching, false to disable
3503 Retrieves a form field by its fully qualified name. @param fullyQualifiedName the full path of the field within the form @return PDField object if found, otherwise null
3504 Applies overlays to specific pages of a PDF document. @param specificPageOverlayMap map of page numbers and corresponding overlay file paths @return PDDocument object with applied overlays @throws IOException if an I/O error occurs during processing
3505 Applies overlays to specified pages of a PDF document. @param specificPageOverlayDocumentMap map of page numbers and corresponding overlay documents @return modified PDDocument with applied overlays @throws IOException if an I/O error occurs during processing
3506 Writes FDF document data to an XML writer. @param output Writer object to write XML data @throws IOException if I/O error occurs during writing
3507 Evaluates shading functions with given input. @param input array of input values for the function @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if an I/O error occurs during evaluation
3508 Creates a PDColorSpace from a COSBase object. @param colorSpace the COSBase representing the color space @param resources PDF resources for context @param wasDefault flag indicating if default color space is used @return PDColorSpace object or null if creation fails @throws IOException if an I/O error occurs during creation
3509 Constructs a PDIndexed color space. @param indexedArray COSArray representing the indexed color space @throws IOException if an error occurs during initialization
3510 Creates a PDImageXObject from an image file path. @param imagePath path to the image file @param doc the PDDocument to add the image to @return PDImageXObject representing the image @throws IOException if an I/O error occurs or unsupported format is used
3511 Retrieves the full image without clipping or subsampling. @return BufferedImage representation of the image @throws IOException if an error occurs during retrieval
3512 Renders a PDF page as an image with specified options. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., ARGB, RGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3513 Renders a specific PDF page to a graphics context. @param pageIndex 0-based index of the page to render @param graphics target Graphics2D for rendering @param scaleX scale factor along X-axis @param scaleY scale factor along Y-axis
3514 Splits a PDF document into multiple smaller documents. @param document the source PDF document to split @return List of PDDocument objects representing the split documents @throws IOException if an I/O error occurs during splitting
3515 Writes extracted text from a PDF document to an output stream. @param doc PDDocument containing the PDF content @param outputStream Writer for outputting the extracted text @throws IOException if an I/O error occurs during processing
3516 Loads XFDF document from an InputStream. @param input stream containing XFDF data @return FDFDocument object @throws IOException on parsing error
3517 Renders a string of text using the current font and text state. @param string byte array containing the text to render @throws IOException if an I/O error occurs during rendering
3518 Retrieves the glyph path for a given font and glyph name. @param baseName the FontName specifying the base font @param glyphName the glyph name to retrieve the path for @return GeneralPath object representing the glyph's path or an empty path if not found @throws IOException if an I/O error occurs during retrieval
3519 Constructs a PDMMType1Font instance from a COSDictionary. @param fontDictionary COSDictionary containing font information @throws IOException if an I/O error occurs during font processing
3520 Constructs a PDType3Font instance. @param fontDictionary COSDictionary containing font information @throws IOException if an I/O error occurs during initialization
3521 Loads a Type 0 font from a file. @param doc PDF document to associate the font with @param file source file of TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3522 Loads a Type 0 font from an input stream. @param doc PDF document to associate the font with @param input source of TrueType font data @param embedSubset whether to subset the font during embedding @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3523 Loads a vertical Type 0 font from a file. @param doc PDF document to associate the font with @param file TrueType font file @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3524 Loads a vertical Type 0 font from an input stream. @param doc PDF document to associate the font with @param input source of TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3525 Loads a vertical Type 0 font from an input stream. @param doc PDF document to associate the font with @param input source of TrueType font data @param embedSubset whether to subset the font during embedding @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3526 Loads a TrueType font from a PDF document using a file. @param doc PDDocument to load the font into @param file source file of the TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object for embedding @throws IOException if an I/O error occurs during loading
3527 Loads a TrueType font from an input stream. @param doc PDDocument to load the font into @param input source of the TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object for embedding @throws IOException if an I/O error occurs during loading
3528 Retrieves all signature dictionaries from the PDF document. @return List of PDSignature objects representing the signatures
3529 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options SignatureOptions specifying signature details @throws IOException if an I/O error occurs during processing
3530 Imports form data from an FDF document into the current PDF. Iterates through FDF fields and updates corresponding PDF form fields. @param fdf source FDF document containing form data @throws IOException if an error occurs during import
3531 Saves FDF document as XFDF in XML format. @param output Writer object to write XFDF data @throws IOException if I/O error occurs during writing or closing
3532 Evaluates shading functions with a single input value. @param inputValue the input value for the function @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if an I/O error occurs during evaluation
3533 Evaluates shading function and converts to RGB. @param values input values for the shading function @return RGB color value @throws IOException if an I/O error occurs during evaluation or conversion
3534 Retrieves the non-stroking paint with applied soft mask. @return Paint object for non-stroking operations @throws IOException if an error occurs during processing
3535 Renders a transparency group onto the specified graphics context. @param form PDTransparencyGroup to render @param graphics Graphics2D context for rendering @throws IOException if an error occurs during processing
3536 Renders a PDF page as an RGB image. @param pageIndex index of the PDF page to render @param scale scaling factor for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3537 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi desired dots per inch for rendering @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3538 Renders a PDF page as an image with specified DPI. @param pageIndex index of the PDF page to render @param dpi dots per inch for rendering @param imageType desired image type (e.g., ARGB, RGB) @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3539 Renders a specific PDF page to a graphics context with uniform scaling. @param pageIndex 0-based index of the page to render @param graphics target Graphics2D for rendering @param scale uniform scale factor for both axes
3540 Extracts a range of pages from the source PDF document. @return PDDocument containing the extracted pages @throws IOException if an I/O error occurs during extraction
3541 Extracts and returns text from a PDF document. @param doc PDDocument containing the PDF content @return String of extracted text @throws IOException if an I/O error occurs during processing
3542 Loads XFDF document from a file. @param filename path to the XFDF file @return FDFDocument object @throws IOException on parsing error
3543 Loads XFDF document from a file. @param file File containing XFDF data @return FDFDocument object @throws IOException on parsing error
3544 Renders a string of text using the current font and text state. @param string byte array containing the text to render @throws IOException if an I/O error occurs during rendering
3545 Renders text strings from a PDF array. @param array COSArray containing text and spacing data @throws IOException if an I/O error occurs during rendering
3546 Creates a PDFont from a COS dictionary. @param dictionary COSDictionary containing font data @param resourceCache cache for resources @return PDFont object or throws IOException if unsupported subtype
3547 Loads a Type 0 font from an input stream with subsetting. @param doc PDF document to associate the font with @param input source of TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during loading
3548 Retrieves the last signature dictionary from the PDF document. @return PDSignature object or null if no signatures exist
3549 Prepares PDF document for external signing and writes it to the output stream. @param output OutputStream to write the PDF content @return ExternalSigningSupport object for further signing operations @throws IOException if an I/O error occurs during processing
3550 Flattens specified form fields into the PDF document. @param fields list of PDField objects to flatten @param refreshAppearances flag to indicate if field appearances should be refreshed @throws IOException if an I/O error occurs during flattening
3551 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param options SignatureOptions specifying signature details @throws IOException if an I/O error occurs during processing
3552 Adds a digital signature to the PDF document using default options. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs during processing
3553 Saves FDF document as XFDF in XML format to a specified file. @param fileName the destination file for saving the XFDF data @throws IOException if I/O error occurs during writing or closing
3554 Draws a glyph on the PDF page. @param path The GeneralPath representing the glyph's shape. @param font The PDFont used for rendering the glyph. @param code The character code of the glyph. @param displacement The Vector indicating the position and size of the glyph. @param at The AffineTransform for scaling and positioning. @throws IOException if an error occurs during rendering
3555 Builds a PDImageXObject from indexed PNG data. @param doc PDF document to add the image to @param state PNG conversion state containing image properties @return PDImageXObject or null if creation fails @throws IOException if I/O error occurs during processing
3556 Renders a PDF page as an RGB image. @param pageIndex index of the PDF page to render @return BufferedImage representing the rendered PDF page @throws IOException if an I/O error occurs during rendering
3557 Renders a specific PDF page to a graphics context with default scaling. @param pageIndex 0-based index of the page to render @param graphics target Graphics2D for rendering
3558 Retrieves a PDFont by name from resources. @param name the unique identifier for the font resource @return PDFont object or null if not found @throws IOException if an I/O error occurs
3559 Creates a PDFont from a COS dictionary. @param dictionary COSDictionary containing font data @return PDFont object or throws IOException if unsupported subtype
3560 Flattens all form fields in the PDF document. Does not support flattening dynamic XFA forms. @throws IOException if an I/O error occurs during flattening
3561 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs during processing
3562 Saves FDF document as XFDF in XML format to a specified file. @param fileName path of the destination file for saving the XFDF data @throws IOException if I/O error occurs during writing or closing
3563 Calculates pixel table for a list of shaded triangles. @param triangleList list of ShadedTriangle objects to process @param array 2D array to store RGB values @param deviceBounds Rectangle defining the bounds of the device context @throws IOException if an I/O error occurs during processing
3564 Fills and strokes the current path on a PDF page. @param windingRule rule for determining the interior of the path @throws IOException if an error occurs during rendering
3565 Converts a PNG image to a PDF-compatible PDImageXObject. @param doc PDF document to add the image to @param state PNG conversion state containing image properties @return PDImageXObject or null if conversion fails @throws IOException if I/O error occurs during processing
3566 Processes the set font operator with operands. @param operands list of COSBase objects representing the font name and size @throws IOException if an I/O error occurs or operands are invalid
3567 Copies necessary resources to the appearance stream. Ensures the specified font is available in the stream's resources. @param appearanceStream target appearance stream for resource copying
3568 Retrieves the font from the font settings. @return PDFont object or null if not found @throws IOException if unsupported subtype is encountered
3569 Appends the pages of a source document to this document. @param srcDoc The source document whose pages will be appended. @throws IOException If an error occurs during the merging process.
3570 Converts a PNG image to a PDF-compatible PDImageXObject. @param doc PDF document to add the image to @param imageData byte array containing PNG data @return PDImageXObject or null if conversion fails @throws IOException if I/O error occurs during processing
3571 Processes PDF operators for font and color settings. @param operator the PDF operator to process @param operands list of COSBase objects representing the operator's operands
3572 Sets the appearance content for a form field widget. @param widget annotation widget to modify @param appearanceStream stream defining the visual appearance @throws IOException if an I/O error occurs
3573 Copies extended graphics state properties into a PDGraphicsState object. @param gs the target graphics state to copy properties into @throws IOException if an error occurs during property retrieval or setting
3574 Merges multiple PDF documents into a single output file. Handles document loading, merging, and saving with compression. @param streamCacheCreateFunction function to create stream caches @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs during the process
3575 Creates a PDImageXObject from a byte array. @param document PDF document to add the image to @param byteArray source of the image data as a byte array @param name name of the image file @param customFactory optional factory for custom image processing @return PDImageXObject or null if conversion fails @throws IOException if an I/O error occurs during processing
3576 Processes appearance string operators from PDF content. @param content byte array containing PDF data @throws IOException if an I/O error occurs during processing
3577 Merges documents based on the current merge mode. @param streamCacheCreateFunction function to create stream caches @param compressParameters parameters for PDF compression settings @throws IOException if an I/O error occurs during merging
3578 Creates a PDImageXObject from a byte array. @param document PDF document to add the image to @param byteArray source of the image data as a byte array @param name name of the image file @return PDImageXObject or null if conversion fails @throws IOException if an I/O error occurs during processing
3579 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance COSString containing default appearance settings @param defaultResources PDResources for resource management @throws IOException if an I/O error occurs during processing
3580 Merges PDF documents with default compression settings. @param streamCacheCreateFunction function to create stream caches @throws IOException if an I/O error occurs during merging
3581 Retrieves the default appearance string for the text field. @return PDDefaultAppearanceString object configured with appearance and resources @throws IOException if an I/O error occurs during resource retrieval
3582 Sets the appearance value for form fields. Handles multiline and default appearance settings. @param apValue initial field value @throws IOException if an I/O error occurs during processing
3583 Initializes the AppearanceGeneratorHelper for a variable text field. Validates font resources and retrieves the default appearance string. @param field PDVariableText field to configure appearance for @throws IOException if an I/O error occurs during validation or retrieval
