1 Sets the text matrix in the current graphics state. @param value Matrix to be set as the new text matrix
2 Sets the matrix for text line layout in the current graphics state. @param value Matrix representing text line positions
3 Sets the non-stroking color in the graphics state. @param color PDColor object representing the new color
4 Sets the stroking color in the current graphics state. @param color PDColor object to be used for stroking
5 Handles exceptions during operator execution. Logs errors or warnings based on exception type. @param operator the operator causing the exception @param operands list of operands involved in operation @param exception the IOException thrown
6 Retrieves the current text matrix from the graphics state. @return Matrix representing the text layout in the current graphics state
7 Creates a scaling transformation matrix. @param x scale factor for the x-axis @param y scale factor for the y-axis @return Matrix representing the scaling transformation
8 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
9 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx translation along X-axis @param ty translation along Y-axis @return Matrix representing the rotation and translation
10 Retrieves the current text line matrix from graphics state. @return Matrix object representing the text line transformation
11 Transforms a point using the current transformation matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return transformed Point2D.Float object
12 Transforms the given width using the current transformation matrix. @param width original width to be transformed @return transformed width as a float
13 Determines the text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
14 Retrieves or creates an Operator object. @param operator the operator string to be processed @return Operator object associated with the input string
15 Retrieves the current non-stroking color. @return PDColor representing the non-stroking color
16 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object representing the non-stroking color space
17 Retrieves the current stroking color from the graphics state. @return PDColor representing the current stroking color
18 Retrieves the current stroking color space from the graphics state. @return PDColorSpace object representing the stroking color space
19 Initializes a new instance of PDMarkedContent. @param tag the COSName tag for the content @param properties dictionary containing properties of the content
20 Converts COSName to corresponding RenderState. @param state COSName representing the render state @return RenderState object or null if state is null
21 Returns the BaseState corresponding to the given COSName. @param state COSName representing the state @return BaseState object, defaults to ON if null input
22 Returns the type as "Pattern". @return String representing the entity type
23 Retrieves the type name associated with shading. @return String representing the shading type
24 Retrieves the default value of an attribute. @return String representing the default value or empty string if none
25 Unchecks the item by setting its value to "Off". @throws IOException if an I/O error occurs during operation
26 Constructs a COSBoolean instance. @param aValue boolean value to set
27 Initializes a COSName with the given name. @param aName the name to initialize the COSName with
28 Private constructor to restrict instantiation.
29 Constructs a COSString from byte array. @param bytes input byte array @param forceHex if true, forces hexadecimal representation
30 Initializes a new COSDictionary instance. Creates and associates a COSUpdateState object with this dictionary.
31 Initializes a COSObject with a given base object. @param object the underlying COSBase object
32 Initializes a new COSObject. @param object the underlying COSBase object @param parser the ICOSParser instance
33 Initializes a COSObject with a given key and parser. @param key unique object identifier @param parser used for parsing PDF content
34 Retrieves the x-coordinate of the lower-left corner. @return x-coordinate as a float
35 Retrieves the lower-left Y coordinate from the rectangle array. @return float value representing the lower-left Y coordinate
36 Retrieves the x-coordinate of the upper right corner. @return x-coordinate as a float
37 Retrieves the upper-right Y coordinate from the rectangle array. @return float value representing the Y coordinate
38 Retrieves font size from settings. @return font size as a float
39 Retrieves the first value as a float. @return float value of the first element in the list
40 Retrieves the second value as a float. @return float value from the second position in the list
41 Retrieves the third element as a float. @return float value of the third list element
42 Retrieves the x-coordinate value. @return float value representing the x-coordinate
43 Retrieves the y-coordinate value. @return y-coordinate as a float
44 Retrieves the Z coordinate value. @return float value of the Z coordinate
45 Retrieves an integer at the specified index or returns a default value. @param index position of the element to retrieve @param defaultValue value to return if index is out of bounds or element is not a COSNumber @return integer value at the given index or default value
46 Retrieves the name at a specified index or returns a default value. @param index position in the collection @param defaultValue fallback string if index is out of bounds or not a COSName @return String name or default value
47 Finds the index of a specified object in the list. @param object the COSBase object to search for @return index of the object or -1 if not found
48 Initializes a COSArrayList with an actual list and a COSArray. @param actualList underlying list of elements @param cosArray associated COSArray object
49 Evaluates a float array using exponential interpolation. @param input array of floats to interpolate @return interpolated result clipped to range
50 Returns string representation of COSArrayList. @return formatted string including array contents
51 Retrieves file filters from the PDF stream. @return List of filter names as strings
52 Converts Boolean object to COSBoolean. @param value Boolean object to convert @return corresponding COSBoolean (TRUE or FALSE)
53 Writes COSBoolean to OutputStream as PDF. @param output the OutputStream to write to @param cosBoolean the COSBoolean object to write @throws IOException if an I/O error occurs
54 Creates a new COSDictionary by copying entries from another. @param dict source dictionary to copy entries from
55 Returns the number of entries in the map. @return integer count of map entries
56 Retrieves COSObject by key. @param key unique identifier for the item @return COSObject or null if not found or not a COSObject
57 Retrieves item by first key, or second key if first is null. @param firstKey primary unique identifier for the item @param secondKey secondary unique identifier for the item (used if first is null) @return COSBase object or null if not found
58 Retrieves the number of recipients. @return number of recipients in the COSArray
59 Retrieves recipient string at specified index. @param i index of the recipient in the recipients list @return COSString object representing the recipient or null if not found
60 Retrieves the direction property from the PDF object. @return COSBase object representing the direction or zero if not found
61 Retrieves metadata keys from the document. @return Sorted set of metadata keys as strings
62 Retrieves attribute names excluding the "O" key. @return List of attribute names as strings
63 Adds trailer information to the stream. @param trailerDict dictionary containing trailer entries
64 Determines if a dictionary represents document info. @param dictionary the COSDictionary to check @return true if it contains info keys, false otherwise
65 Checks if dictionary contains WIDTHS or MISSING_WIDTH keys. @return true if either key is present, false otherwise
66 Checks if the dictionary contains the 'MISSING_WIDTH' key. @return true if 'MISSING_WIDTH' is present, false otherwise
67 Checks if the PDF contains XFA (XML Forms Architecture). @return true if XFA is present, false otherwise
68 Retrieves the appropriate Encoding instance based on the given COSName. @param name unique encoding identifier @return Encoding object or null if not found
69 Returns the index of the first selected widget. @return Index of the selected widget or -1 if none is selected
70 Initializes a COSDocument with a stream cache and parser. @param streamCacheCreateFunction function to create a stream cache @param parser ICOSParser object for document parsing
71 Constructs a COSFloat from a string. @param aFloat string representation of the float @throws IOException if parsing fails
72 Returns string representation of COSFloat. Uses formatString to avoid scientific notation. @return formatted string in the form "COSFloat{value}"
73 Writes formatted numeric value to PDF. @param output stream to write the PDF content @throws IOException if an I/O error occurs during writing
74 Converts update info to a COSIncrement object. @return COSIncrement instance based on update info
75 Determines if the entity needs to be updated. @return true if the entity has been updated, false otherwise
76 Retrieves or creates a COSInteger instance within a specified range. @param val numeric value of the integer @return COSInteger object with the given value
77 Checks if two COSInteger objects are equal. @param o the object to compare with @return true if equal, false otherwise
78 Writes a COSInteger to the OutputStream as PDF. @param output stream to write the PDF content @throws IOException if an I/O error occurs
79 Constructs a COSObjectKey with given number, generation, and stream index. @param num object number @param gen generation number @param index stream index @throws IllegalArgumentException if num or gen is negative
80 Adds an entry to the data stream if its key number is not already present. @param entry XReferenceEntry to be added
81 Sets an XRef entry in the current trailer object. @param objKey unique object key for the XRef entry @param offset file offset of the object
82 Extracts ranges of consecutive numbers from XReference entries. @param xRefEntriesList list of XReferenceEntry objects @return array of Long where each pair represents a range start and count
83 Writes object reference to the given OutputStream. @param output stream to write to @param indirectReference COSObjectKey representing the object reference @throws IOException if an I/O error occurs
84 Compares this XReferenceEntry with another based on their referenced keys. @param xReferenceEntry the entry to compare with @return negative if less, zero if equal, positive if greater
85 Creates a raw input stream from the current state. @throws IOException if access is closed or data not written
86 Creates a raw output stream for writing. @return OutputStream instance for writing data @throws IOException if an I/O error occurs or another writer is open
87 Retrieves the list of filters from a stream. @return A List of COSName objects representing filters or an empty list if none present
88 Retrieves and constructs a list of filters. @return List of Filter objects @throws IOException if an invalid type is encountered in the filter array
89 Constructs a COSString from the given text. @param text input string to convert @param forceHex if true, forces hexadecimal encoding
90 Decodes a hexadecimal string to a byte array. @param s the input hexadecimal string @return decoded byte array or empty if invalid characters are found
91 Converts byte array to string using UTF-16BE/LE or PDFDocEncoding. @return resulting string based on BOM or default encoding
92 Determines if updates are accepted based on document state. @return true if system is not parsing and accepting updates, false otherwise
93 Reads bytes from an Ascii85 encoded stream into a buffer. @param data the byte array to read into @param offset the starting offset in the data array @param len the number of bytes to read @return the actual number of bytes read or -1 if end of stream @throws IOException if an I/O error occurs
94 Writes a byte to the stream and processes it for ASCII85 encoding. @param b byte to be written @throws IOException if an I/O error occurs
95 Flushes the output stream by encoding remaining data and writing to the underlying output. Handles partial input by padding with zeros, transforms it using ASCII85, and writes to out. Ensures line breaks are respected and appends a terminator sequence.
96 Initializes DecodeOptions with specified coordinates and dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width region width @param height region height
97 Finds an ImageReader for the specified image format. @param formatName name of the image format @param errorCause description of the error cause @return ImageReader instance if found, throws MissingImageReaderException otherwise
98 Finds a raster-capable ImageReader for the specified format. @param formatName image format name (e.g., "JPEG") @param errorCause reason for failure if no reader is found @return ImageReader that can read rasters, throws MissingImageReaderException if none available
99 Reads the next byte of data. @return the next byte as an integer, or -1 if end of file is reached @throws IOException on I/O errors during read operations
100 Reads data into a byte array. @param data buffer to store read bytes @param offset starting position in the buffer @param length number of bytes to read @return number of bytes actually read or -1 if at EOF @throws IOException on I/O errors during read operations
101 Encodes raw data using a code table and writes to an output stream. @param rawData input stream containing the raw data to encode @param encoded output stream for the encoded data @param parameters dictionary of encoding parameters (not used)
102 Decodes a predictor row for image data. @param predictor prediction algorithm identifier @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of columns in the row @param actline active line buffer to decode @param lastline previous line buffer for context
103 Initializes a new instance of LayerUtility. @param targetDoc the PDDocument to operate on
104 Sets the bounding box for a PDF element. @param bbox PDRectangle representing the bounding box or null to remove it
105 Adds a source file by path. @param source file path as a string @throws FileNotFoundException if the file does not exist
106 Closes all resources and COSWriter, logging exceptions. @throws IOException if an error occurs during closing
107 Closes the document and associated streams. Throws IOException if any stream fails to close.
108 Returns the underlying COSDictionary object. @return COSDictionary representing the PDF dictionary or stream
109 Initializes a PDXObject with given stream and subtype. @param stream PDF stream containing the object data @param subtype type of XObject (e.g., Image, Form)
110 Returns the underlying COSStream object. @return COSStream representing the PDF stream
111 Retrieves metadata stream from the PDF document. @return COSStream containing metadata or null if not found
112 Sets the metadata for the PDF stream. @param metadata COSStream containing metadata to be set
113 Checks if the widget is a signature annotation. @param annotations list of PDF annotations @param widget annotation widget to check @return true if widget matches any annotation, false otherwise
114 Checks equality based on underlying COSDictionary. @param o object to compare @return true if equal, false otherwise
115 Checks if a signature field exists in the iterator. @param fieldIterator iterator over form fields @param signatureField the signature field to check for @return true if the signature field is found, false otherwise
116 Initializes a new PDF stream parser. @param pdContentstream content stream to parse @throws IOException if an I/O error occurs
117 Initializes a new PDF stream parser. @param bytes PDF data as a byte array
118 Checks if the next character in source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs while reading from source
119 Reads a string representation of a number from the input source. @return StringBuilder containing the read number @throws IOException if an I/O error occurs or the number is too long
120 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs
121 Skips a line break character in the input stream. @param linebreak the character to check and skip @return true if a valid line break is skipped, false otherwise
122 Checks for end of string indicators. @param bracesParameter current count of open braces @return updated count or 0 if end indicator found
123 Checks if character is end of line. @param c character to check @return true if character is line feed or carriage return, false otherwise
124 Checks if the next character in source is whitespace. @return true if next character is whitespace, false otherwise @throws IOException if an I/O error occurs
125 Parses the start XRef position in a PDF file. @return long value representing the start XRef offset, or -1 if not found
126 Searches for the last EOF marker in a PDF source. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs during search
127 Searches for XRef tables in the PDF source. @return List of offsets where XRef tables are found @throws IOException if an I/O error occurs
128 Searches for XRef streams in a PDF file. @return List of offsets where XRef streams are found @throws IOException if an I/O error occurs
129 Retrieves the cross-reference table. @return Map of COSObjectKey to Long or null if xref trailer is unresolved
130 Finds the offset of the last 'startxref' in the file. @return offset of 'startxref' or throws IOException if not found
131 Reads from stream until 'endstream' or 'endobj' is found. @param out output stream for filtered content @return length of filtered content @throws IOException if an I/O error occurs
132 Parses a PDF object by its number. @param objectNumber unique identifier of the PDF object @return COSBase representation of the parsed object or null if not found @throws IOException if an I/O error occurs during parsing
133 Reads and returns object numbers with their offsets. @return Map of object numbers to their offsets @throws IOException if an I/O error occurs
134 Parses all objects from a PDF source. @return Map of COSObjectKey to COSBase objects @throws IOException if an I/O error occurs
135 Checks if the next character in the source is a space or newline. @return true if the next character is a space (ASCII 32), newline (ASCII 10), or carriage return (ASCII 13) @throws IOException if an I/O error occurs while reading from the source
136 Parses the PDF trailer. Skips extra entries and sets the trailer dictionary. @return true if parsing is successful, false otherwise
137 Creates a new XRef object and maps it to a byte position. @param startBytePos starting byte position in the file @param type type of XRef trailer
138 Resets the cross-reference table by clearing all entries and resetting pointers.
139 Creates a new free XReference. @param key object key for the free reference @param nextFreeObject ID of the next free object
140 Constructs an ObjectStreamXReference. @param objectStreamIndex index of the object stream @param key unique identifier for the COS object @param object COSBase object associated with the reference @param parentKey key of the parent COS object
141 Retrieves the numeric value of the first column. @return long representing the numeric value of the column
142 Returns a string representation of the FreeReference. @return String in the format "FreeReference{key=..., nextFreeObject=..., type=...}"
143 Generates a string representation of the ObjectStreamEntry. @return formatted string with key, type, index, and parent information
144 Retrieves the generation number of the referenced key. @return The generation number as a long value.
145 Returns the second column value by getting the byte offset. @return byte offset of the current position
146 Retrieves the generation number of the referenced key. @return The generation number as a long value
147 Returns a string representation of the object. @return formatted string with object details
148 Retrieves the second column value by getting the numeric portion of the parent key. @return The numeric value from the parent key's combined number and generation field.
149 Returns the third column value. @return index value of the object stream
150 Writes a subset of bytes to the output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
151 Writes a single byte to the output stream. @param b byte to be written @throws IOException if an I/O error occurs
152 Writes an end-of-line character if not already on a new line. @throws IOException if an I/O error occurs
153 Initializes a COSWriter with an output stream and compression parameters. @param outputStream the stream to write PDF data to @param compressParameters parameters for PDF compression
154 Initializes a new COSWriter with specified output and input streams. @param outputStream destination for the written data @param inputData source for the input PDF data
155 Determines if compression is enabled based on parameters. @return true if compression is enabled, false otherwise
156 Adds an XReference entry to the list. @param entry the XReferenceEntry to be added
157 Writes an FDF document to the output. @param doc FDFDocument instance to write @throws IOException if an I/O error occurs during writing
158 Retrieves an object from the pool by its key. @param key unique identifier for the object @return COSBase object or null if not found
159 Retrieves the highest XRef object number from the object pool. @return highest XRef object number as a long
160 Writes a COSArray to the OutputStream. @param output the stream to write to @param cosArray the COSArray to write @throws IOException if an I/O error occurs
161 Constructs a DefaultResourceCache with stable caching enabled.
162 Initializes the resource cache with stable caching enabled.
163 Initializes a content stream for PDF appearance. @param appearance appearance stream to write to @param outputStream where the content will be written
164 Initializes a content stream for an appearance stream. @param doc the PDDocument containing the appearance stream @param appearance the PDAppearanceStream to write to @param outputStream where the content will be written
165 Writes string to output stream using ASCII encoding. @param text string to be written @throws IOException if I/O error occurs
166 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if writing fails
167 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if writing fails
168 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if writing fails
169 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IllegalArgumentException if comment includes newline characters @throws IOException if writing fails
170 Closes the output stream and logs a warning if text mode was not properly ended. @throws IOException if an I/O error occurs while closing the stream
171 Closes the output stream, logs a warning if text mode was not ended. @throws IOException if an I/O error occurs during closure
172 Closes the output stream, warning if text mode ended prematurely. @throws IOException if an I/O error occurs while closing
173 Closes the output stream, logging a warning if text mode was not properly ended. @throws IOException if an I/O error occurs while closing
174 Applies GSUB rules to transform and encode glyphs for a given word. @param gsubWorker worker for applying GSUB transformations @param out stream to write encoded glyph data @param font font used for encoding @param word input string to process @return list of transformed glyph IDs
175 Sets stroking color if valid. @param color PDColor object to be used for stroking @return true if color is set, false otherwise
176 Sets non-stroking color on demand. @param color PDColor object representing the color to be set @return true if color is successfully set, false otherwise
177 Creates a PDDestinationNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node
178 Constructs a PDEmbeddedFilesNameTreeNode from a given dictionary. @param dic the COSDictionary representing the embedded files node
179 Constructs a PDJavascriptNameTreeNode from a COSDictionary. @param dic the COSDictionary to initialize the node with
180 Initializes a PDStructureElementNameTreeNode with a given dictionary. @param dic the COSDictionary representing the node
181 Initializes a new PDDocument instance. @param doc COSDocument object representing the PDF document @param source RandomAccessRead object for reading the PDF file @param permission AccessPermission object defining user permissions
182 Initializes a new FDFDocument instance. @param doc the underlying COSDocument object @param source the RandomAccessRead source of the FDF data
183 Constructs a PDMetadata from a COSStream. @param str underlying COSStream object
184 Constructs a PDObjectStream from a COSStream. @param str underlying COSStream object
185 Constructs a PDEmbeddedFile from a COSStream. @param str underlying COSStream object
186 Initializes a PDFunction from a given COSBase object. @param function COSBase object representing the PDF function
187 Initializes a PDXObject with a given stream and subtype. @param stream underlying COSStream object @param subtype type of the XObject
188 Initializes PDExtendedGraphicsState with given COSDictionary. @param dictionary COSDictionary containing graphics state properties
189 Wraps a COSDictionary in a PDTypedDictionary. @param dictionary the underlying COSDictionary to wrap
190 Initializes a new PDAttributeObject with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
191 Initializes a new PDUserProperty with a COSDictionary and a user attribute object. @param dictionary the underlying COSDictionary to wrap @param userAttributeObject the user attribute object associated with this property
192 Initializes a new PDOutlineNode with the given COSDictionary. @param dict the underlying COSDictionary to wrap
193 Initializes a new PDTransition with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
194 Creates a child node from a dictionary. @param dic the COSDictionary representing the node @return PDNumberTreeNode instance initialized with the dictionary and value type
195 Returns a string representation of FunctionType2. @return String containing C0, C1, and N values
196 Executes a sequence of instructions within the given context. @param context execution environment containing operators and stack
197 Initializes a PDStructureElement with a given COSDictionary. @param dic the underlying COSDictionary representing the structure element
198 Initializes a PDStructureTreeRoot with a given COSDictionary. @param dic the underlying COSDictionary representing the structure tree root
199 Notifies of a change if entries differ. @param oldEntry the original entry @param newEntry the updated entry
200 Retrieves an object by index. @param index position of the object in the list @return T type object at specified index or throws IndexOutOfBoundsException if invalid
201 Returns the number of objects in the collection. @return Size of the object list
202 Retrieves a specific revision number by index. @param index position of the revision number in the list @return revision number at the specified index
203 Adds an object with its corresponding revision number. @param object the object to add @param revisionNumber the revision number associated with the object
204 Sets the revision number for a given object. @param object the object to update @param revisionNumber the new revision number
205 Adds a TextPosition to the list of contents. @param text TextPosition object to be added
206 Adds marked content to the list of contents. @param markedContent the content to be added
207 Adds an XObject to the list of contents. @param xobject the XObject to be added
208 Sets printing permission. @param allowPrinting true to enable printing, false to disable
209 Sets permission to modify. @param allowModifications true to enable modification, false otherwise
210 Sets content extraction permission. @param allowExtraction true to allow, false to deny
211 Sets permission to modify annotations. @param allowAnnotationModification true to enable modification, false otherwise
212 Sets the permission to fill in the form. @param allowFillingInForm true to allow, false to disallow filling in the form
213 Sets permission for accessibility content extraction. @param allowExtraction true to enable, false to disable extraction
214 Sets permission to assemble documents. @param allowAssembly true to allow, false to disallow assembly
215 Sets the permission to print faithful reports. @param canPrintFaithful true to allow printing, false otherwise
216 Checks if print permission is granted. @return true if print permission is enabled, false otherwise
217 Checks if modification permission is granted. @return true if modification permission is enabled, false otherwise
218 Determines if content extraction permission is granted. @return true if extraction permission is enabled, false otherwise
219 Checks if annotations can be modified. @return true if modification permission is granted, false otherwise
220 Checks if the user has permission to fill in forms. @return true if permission is granted, false otherwise
221 Checks if permission to extract for accessibility is granted. @return true if permission is granted, false otherwise
222 Determines if the user has permission to assemble documents. @return true if assembly permission is granted, false otherwise
223 Checks if faithful print permission is granted. @return true if permission is set, false otherwise
224 Calculates the final encryption key. @param objectNumber unique object identifier @param genNumber generation number @return byte array representing the final key
225 Initializes a new instance of SecurityHandler.
226 Sets encryption key and initializes salt. @param key byte array representing the encryption key
227 Writes a byte to the output stream after applying a simple encryption. @param aByte the byte to be written and encrypted @param output the OutputStream to write to @throws IOException if an I/O error occurs
228 Determines if a Unicode code point is prohibited. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
229 Initializes a SecurityHandler with a given policy. @param protectionPolicy the security policy to apply
230 Computes version number based on key length and AES preference. @return computed version number
231 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the ProtectionPolicy to configure the handler for @return SecurityHandler instance or null if no handler is found
232 Creates a SecurityHandler instance for a given filter name. @param name the name of the security handler to create @return SecurityHandler instance or null if not found
233 Initializes a caret annotation. @param a COSDictionary representing the annotation
234 Creates a new circle annotation from a PDF dictionary. @param a COSDictionary representing the annotation
235 Initializes a file attachment annotation. @param a COSDictionary containing annotation properties
236 Creates a new free text annotation. @param a COSDictionary containing annotation properties
237 Initializes an ink annotation. @param a COSDictionary representing the ink annotation
238 Creates a new line annotation from a COSDictionary. @param a COSDictionary representing the annotation
239 Constructs a link annotation from a COSDictionary. @param a COSDictionary containing annotation properties
240 Creates a polygon annotation from a PDF dictionary. @param a COSDictionary containing polygon annotation data
241 Creates a polyline annotation from a COSDictionary. @param a dictionary representing the annotation
242 Initializes a sound annotation from a PDF dictionary. @param a COSDictionary containing the annotation data
243 Initializes a square annotation from a PDF dictionary. @param a COSDictionary containing annotation properties
244 Creates a stamp annotation from a PDF dictionary. @param a COSDictionary representing the stamp annotation
245 Initializes a text annotation from a PDF dictionary. @param a COSDictionary containing annotation details
246 Initializes a text markup annotation from a PDF dictionary. @param a COSDictionary representing the annotation
247 Extracts and returns the Panose classification data. @return PDPanoseClassification object containing extracted data
248 Loads font metrics for a given font name. @param fontName the font name to load metrics for @throws IOException if the resource is not found or an error occurs during loading
249 Maps a font name to its alias. @param baseName FontName object to be mapped
250 Transforms a vector using affine transformation matrix. @param vector input vector to be transformed @return transformed vector
251 Scales vector by scalar. @param sxy scaling factor for both x and y components @return new Vector with scaled coordinates
252 Converts a character code to CID. @param code character code to convert @return CID value corresponding to the code
253 Checks if the font is part of the PDF standard 14 fonts. @return true if it's a standard 14 font, false otherwise
254 Retrieves the default Adobe Glyph List. @return GlyphList containing default Adobe glyphs
255 Converts character code to glyph ID. @param code character code to be converted @return glyph ID corresponding to the character code or 0 if not found @throws IOException if an I/O error occurs during processing
256 Retrieves the name of a glyph in the font. @param name the input glyph name @return the glyph name if available, otherwise ".notdef" @throws IOException if an I/O error occurs
257 Retrieves the name of a glyph in the font. @param name the input glyph name @return the glyph name found in the font or ".notdef" if not found
258 Initializes encoding map using provided code-to-name mappings. @param codeToName map of unique codes to their names
259 Initializes glyph list from input stream. @param input InputStream containing glyph data @param numberOfEntries expected number of entries for maps @throws IOException if an I/O error occurs during loading
260 Constructs a GlyphList by copying another and loading from input. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing additional glyph data @throws IOException if an I/O error occurs during loading
261 Initializes MacOSRomanEncoding with custom character mappings.
262 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding instance with mappings from code to name
263 Returns a Composite instance based on blend mode and alpha. @param blendMode blending mode to apply @param constantAlpha opacity level for the composite operation (clamped between 0 and 1) @return Composite object configured with specified parameters
264 Constructs a PDColor object. @param components color components array @param patternName name of the pattern @param colorSpace color space for the color
265 Initializes a SoftMask with specified parameters. @param paint the paint object for rendering @param mask the BufferedImage representing the mask @param bboxDevice the bounding box in device coordinates @param backdropColor the background color as PDColor @param transferFunction the transfer function for color mapping
266 Initializes color space settings for CMYK. Loads ICC profile and sets up AWT color space. @throws IOException if default CMYK profile cannot be loaded
267 Retrieves or creates the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
268 Chooses the best PNG filter row based on compression sum. @return byte array of the selected row with highest compression efficiency
269 Applies a mask to an image. @param image original BufferedImage to apply the mask on @param mask BufferedImage representing the mask @param interpolateMask whether to use interpolation for scaling the mask @param isSoft true if the mask is soft, false otherwise @param matte array of float values for matte calculations @return BufferedImage with applied mask
270 Returns the COS dictionary of parameters. @return COSDictionary containing parameters
271 Parses PNG chunks from image data. @param imageData byte array containing PNG file data @return PNGConverterState object or null if parsing fails
272 Initializes a new PDShadingPattern with a given COSDictionary. @param resourceDictionary the COSDictionary representing the shading pattern
273 Initializes a new PDTilingPattern with the given COSDictionary and resource cache. @param dictionary the COSDictionary representing the tiling pattern @param resourceCache the ResourceCache for managing resources
274 Initializes a new instance of AxialShadingPaint. @param shadingType2 The axial shading object to be used. @param matrix The transformation matrix for the shading.
275 Constructs a RadialShadingPaint instance. @param shading The PDShadingType3 object representing the radial shading. @param matrix The transformation matrix for the shading.
276 Initializes a new instance of Type1ShadingPaint. @param shading The PDShadingType1 object to be used. @param matrix The transformation matrix for the shading.
277 Creates a new instance of Type4ShadingPaint. @param shading The PDShadingType4 object to be used. @param matrix The transformation matrix for the shading.
278 Initializes a new instance of Type5ShadingPaint. @param shading The PDShadingType5 object to be used. @param matrix The transformation matrix for the shading.
279 Constructs a new instance of Type6ShadingPaint. @param shading PDShadingType6 object representing the shading @param matrix transformation matrix for the shading
280 Constructs a new instance of Type7ShadingPaint. @param shading The PDShadingType7 object to be used. @param matrix The transformation matrix for the shading.
281 Constructs a cubic Bezier curve. @param ctrlPnts array of control points defining the curve @param l level of detail (number of segments)
282 Initializes a Line with two points and their respective colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for the starting point @param c1 color array for the ending point
283 Constructs a PDShadingType1 instance from a COSDictionary. @param shadingDictionary the COSDictionary representing the shading
284 Constructs a PDShadingType2 instance. @param shadingDictionary the COSDictionary representing the shading
285 Retrieves the number of color components. @return int representing the number of color components @throws IOException if an I/O error occurs
286 Retrieves the number of color components. @return int representing the number of color components @throws IOException if an I/O error occurs
287 Determines if the edge formed by control points is a line. @param ctl array of control points defining the edge @return true if the edge is a line, false otherwise
288 Determines if a point is within a triangle. @param p the point to check @return true if the point is inside or on the edge of the triangle, false otherwise
289 Calculates interpolated color at a given point. @param p Point2D object for interpolation @return Array of color components at point p
290 Intersects the current clipping path with a new path. @param path the GeneralPath to intersect with
291 Intersects clipping path with an Area. @param area the Area to intersect with
292 Transfers the current clipping path to a Graphics2D object. @param graphics the target Graphics2D object for applying the clipping path
293 Creates a PDSoftMask from a COSBase and ResourceCache. @param dictionary PDF object representing the soft mask @param resourceCache cache for resources used in rendering @return PDSoftMask object or null if invalid
294 Constructs a PDSoftMask from a COSDictionary. @param dictionary PDF object representing the soft mask
295 Constructs a new PlainText object with specified text content. @param textValue the content of the plain text, split into paragraphs
296 Creates a new PDActionEmbeddedGoTo from a COS dictionary. @param a COS dictionary representing the action
297 Creates a new PDActionGoTo from a COS dictionary. @param a COS dictionary representing the action
298 Constructs a PDActionHide from a COS dictionary. @param a COS dictionary representing the hide action
299 Creates a new PDActionImportData from a COS dictionary. @param a COS dictionary representing the action
300 Constructs a JavaScript action from a COS dictionary. @param a COS dictionary representing the action
301 Creates a new PDActionLaunch with the given COS dictionary. @param a COS dictionary representing the action
302 Initializes a new PDActionMovie with the given COS dictionary. @param a COS dictionary representing the movie action
303 Constructs a named PDF action from a COS dictionary. @param a COS dictionary representing the named action
304 Creates a new PDActionRemoteGoTo from a COS dictionary. @param a COS dictionary representing the action
305 Initializes a new PDActionResetForm with the given COS dictionary. @param a COS dictionary representing the form reset action
306 Initializes a new PDActionSound with the given COS dictionary. @param a COS dictionary representing the sound action
307 Initializes a new PDActionSubmitForm with the given COS dictionary. @param a COS dictionary representing the submit form action
308 Initializes a new PDActionThread with the given COS dictionary. @param a COS dictionary representing the thread action
309 Constructs a PDActionURI from a COS dictionary. @param a COS dictionary with URI action data
310 Ensures polygon vertices are in counterclockwise order. @param points array of Point2D.Double representing polygon vertices
311 Retrieves the template height. @return height of the template as a float value
312 Reads an image from an input stream and sets it. @param stream InputStream containing the image data @throws IOException if reading fails
313 Sets the coordinates for a visible sign. @param x horizontal coordinate value @param y vertical coordinate value @return current instance of PDVisibleSignDesigner
314 Creates a new PDPageFitDestination. @param arr COSArray containing destination information
315 Creates a new PDPageFitHeightDestination. @param arr COSArray containing destination information
316 Initializes a new instance of PDPageFitRectangleDestination. @param arr COSArray containing destination information
317 Initializes a new instance of PDPageFitWidthDestination. @param arr COSArray containing destination information
318 Creates a new PDPageXYZDestination from a COSArray. @param arr COSArray containing destination information
319 Ensures the given outline item has no siblings. @param node PDOutlineItem to validate @throws IllegalArgumentException if node has any siblings
320 Converts two lists of keys and values into a list of KeyValue pairs. @param key list of unique key identifiers @param value list of associated values @return List of KeyValue objects
321 Retrieves the field tree associated with this document. @return PDFieldTree object representing the form fields
322 Constructs a new PDNonTerminalField instance. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field, if any
323 Constructs a new PDTerminalField instance. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field, if any
324 Parses XML input stream without namespace awareness. @param is input stream containing XML data @return parsed Document object @throws IOException on parsing errors
325 Initializes a PDRectlinearMeasureDictionary with a given COSDictionary. @param dictionary the COSDictionary to initialize with
326 Removes backdrop from a group image. @param backdrop source image for backdrop removal @param offsetX horizontal offset of backdrop @param offsetY vertical offset of backdrop
327 Draws a tiling pattern on the given graphics context. @param g Graphics2D object to draw on @param pattern PDTilingPattern object representing the pattern @param colorSpace PDColorSpace for color management @param color PDColor to apply to the pattern @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during drawing
328 Retrieves the X scale of the text matrix. @return Absolute value of the X scaling factor
329 Creates a PaintContext with adjusted transformation. @param cm ColorModel for the context @param deviceBounds bounding rectangle in device space @param userBounds bounding rectangle in user space @param xform current AffineTransform @param hints rendering hints @return PaintContext with pattern matrix applied without scaling
330 Retrieves the vertical scaling factor. @return Y scaling factor from text matrix
331 Calculates the X rotation based on given rotation angle. @param rotation angle in degrees (0, 90, 180, 270) @return float representing the calculated X rotation
332 Calculates the Y coordinate of the lower-left corner after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return float representing the Y coordinate
333 Calculates width based on rotation angle. @param rotation current rotation angle in degrees @return calculated width as a float
334 Writes characters from TextPosition to output. @param text TextPosition containing character data
335 Returns the Unicode string in visually ordered form. @return Reversed string if any character is right-to-left, otherwise original string
336 Checks if the character is a diacritic. @return true if the character is a diacritic, false otherwise
337 Returns the string representation of the Unicode value. @return Unicode string representation of the character
338 Writes the starting content of an article to the output. @param isLTR indicates if text direction is left-to-right @throws IOException if writing fails
339 Writes the end text of an article to the output. @throws IOException if an I/O error occurs
340 Writes the system's line separator to the output. @throws IOException if an I/O error occurs
341 Writes the current word separator to the output. @throws IOException if an I/O error occurs
342 Writes a string to the output. @param text the string to write @param textPositions list of text positions (unused) @throws IOException if an I/O error occurs
343 Writes the start tag for a paragraph. Ensures proper nesting by closing any open paragraph before writing a new one. @throws IOException if an I/O error occurs
344 Writes the starting point of the current page to the output. @throws IOException if an I/O error occurs
345 Writes the end of the current page to the output. @throws IOException if an I/O error occurs
346 Matches the current text position against list item patterns. @param pw PositionWrapper containing the current text position @return Compiled regex Pattern for a list item or null if no match
347 Normalizes a word by handling Unicode presentation forms and directionality. @param word input string to normalize @return normalized string with correct formatting and direction
348 Inserts a diacritic at a specified position in the Unicode string. @param i index where to insert the diacritic @param diacritic TextPosition object containing the diacritic character
349 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
350 Converts byte array to hexadecimal string. @param bytes input byte array @return hexadecimal representation of the byte array
351 Converts a byte to its hexadecimal representation. @param b input byte @return array of two bytes representing high and low nibbles in hex
352 Converts a byte array to its ASCII hexadecimal representation. @param bytes input byte array @return byte array containing ASCII hex values
353 Writes a byte as two hex characters to an OutputStream. @param b the byte to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
354 Sorts an array using iterative merge sort. @param arr the array to be sorted @param cmp comparator defining the order of elements
355 Creates a deep copy of the matrix. @return new Matrix instance with cloned elements
356 Concatenates matrices by multiplying them. @param matrix Matrix to concatenate with this one
357 Translates the matrix by given x and y values. @param tx translation in x direction @param ty translation in y direction
358 Scales the matrix by given factors. @param sx scale factor for x-axis @param sy scale factor for y-axis
359 Multiplies this matrix with another. @param other the second matrix to multiply @return a new Matrix representing the product
360 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum number of digits after decimal point @param asciiBuffer destination buffer for ASCII representation @return new offset after formatting or -1 if invalid input
361 Adds a path with a value to the trie. @param value the value associated with the path @param parts byte arrays representing each segment of the path
362 Sets default value for the trie. @param defaultValue to be stored at the root
363 Searches for a value in the trie using byte array. @param bytes input byte array to search @return associated value or default if not found
364 Processes a PDF operator. @param operator the Operator to process @param operands list of COSBase operands @throws IOException if an I/O error occurs
365 Initializes LegacyPDFStreamEngine with text processing operators.
366 Retrieves or creates a COSName for the given PDF name. @param aName the PDF name string @return COSName instance associated with the given name
367 Constructs a COSString from byte array using default settings. @param bytes input byte array
368 Default constructor initializes an empty COSArray with direct flag set.
369 Converts a list of COSObjectable to COSArray. @param cosObjectables list of COSObjectable objects
370 Initializes a new COSStream instance. @param streamCache cache for random access streams
371 Creates an unmodifiable view of the given COSDictionary. @param dict the original COSDictionary to wrap
372 Creates a default DecodeResult with empty parameters. @return DecodeResult object initialized with an empty dictionary
373 Initializes a new PDDocumentInformation instance. Creates and associates a COSDictionary object with this document information.
374 Initializes a new PDResources instance. Creates and associates a COSDictionary object with this resource.
375 Converts a Map to a COSDictionary. @param someMap the input map with String keys and COSObjectable values @return a COSDictionary with items from the map
376 Initializes a new PDDictionaryWrapper instance. Creates and associates a COSDictionary object with this wrapper.
377 Initializes a new PDNameTreeNode instance. Creates and associates a COSDictionary object with this node.
378 Constructs a PDNumberTreeNode with a specified value class. Initializes a COSDictionary instance and sets the value type. @param valueClass the class of values stored in this node
379 Constructs a new PDPageLabelRange with an empty dictionary.
380 Initializes a new PDMarkInfo instance. Creates and associates a COSDictionary object with this instance.
381 Initializes a new PDPropertyList instance. Creates and associates a COSDictionary object with this property list.
382 Initializes a new PDBoxStyle instance. Creates and associates a COSDictionary object with this style.
383 Initializes a new PDCryptFilterDictionary instance. Creates and associates a COSDictionary object with this dictionary.
384 Initializes a new PDEncryption instance. Creates and associates a COSDictionary object with this encryption.
385 Initializes a new FDFCatalog instance. Creates and associates a COSDictionary object with this catalog.
386 Initializes a new FDFDictionary instance. Creates and associates a COSUpdateState object with this dictionary.
387 Initializes a new FDFField instance. Creates and associates a COSDictionary object with this field.
388 Initializes a new FDFIconFit instance. Creates and associates a COSDictionary object with this icon fit.
389 Initializes a new FDFJavaScript instance. Creates and associates a COSDictionary object with this instance.
390 Initializes a new FDFNamedPageReference instance. Creates and associates a COSDictionary object with this reference.
391 Initializes a new FDFPage instance. Creates and associates a COSDictionary object with this page.
392 Initializes a new FDFPageInfo instance. Creates and associates a COSDictionary object with this page info.
393 Initializes a new FDFTemplate instance. Creates and associates a COSDictionary object with this template.
394 Initializes a new PDDeviceNAttributes instance. Creates and associates a COSDictionary object with this attributes instance.
395 Initializes a new PDDeviceNProcess instance. Creates and associates a COSDictionary object with this process.
396 Initializes a new PDShading instance. Creates and associates a COSDictionary object with this shading.
397 Initializes a new instance of PDAdditionalActions. Creates and associates a COSDictionary object for storing actions.
398 Initializes a new PDAnnotationAdditionalActions instance. Creates and associates a COSDictionary object for storing actions.
399 Initializes a new PDDocumentCatalogAdditionalActions instance. Creates and associates a COSDictionary object with this instance.
400 Initializes a new PDFormFieldAdditionalActions instance. Creates and associates a COSDictionary object with this form field.
401 Initializes a new PDPageAdditionalActions instance. Creates and associates a COSDictionary object with this instance.
402 Initializes a new PDTargetDirectory instance. Creates and associates a COSUpdateState object with this dictionary.
403 Initializes a new PDURIDictionary instance. Creates and associates a COSDictionary object with this URI dictionary.
404 Initializes a new PDWindowsLaunchParams instance. Creates and associates a COSDictionary object with this launch parameters.
405 Initializes a new PDBorderEffectDictionary instance. Creates and associates a COSDictionary object with this border effect dictionary.
406 Initializes a new PDBorderStyleDictionary instance. Creates and associates a COSUpdateState object with this dictionary.
407 Initializes a new PDPropBuild instance. Creates and configures a COSDictionary with direct objects as per spec.
408 Initializes a new PDPropBuildDataDict instance. Sets up a COSDictionary with direct object usage as per spec.
409 Initializes a new PDSeedValueMDP instance. Creates and configures a COSDictionary with direct access enabled.
410 Initializes a new PDSeedValueTimeStamp instance. Creates and sets up an associated COSDictionary object.
411 Constructs a new PDField instance with an empty dictionary. @param acroForm the form containing the field
412 Initializes a new PDViewportDictionary instance. Creates and associates a COSDictionary object with this viewport dictionary.
413 Initializes viewer preferences. Creates a new PDF document viewer preferences instance.
414 Initializes a COSObject with an existing COSBase and key. @param object the underlying COSBase object @param objectKey unique object identifier
415 Calculates the width of a rectangle. @return width as a float
416 Checks if a point is within the rectangle bounds. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
417 Calculates height of rectangle. @return float value representing height
418 Transforms a rectangle using an affine transformation matrix. @param matrix the transformation matrix to apply @return GeneralPath object representing the transformed rectangle
419 Converts rectangle coordinates to a GeneralPath. @return GeneralPath representing the rectangle
420 Returns a string representation of the rectangle's coordinates. @return String in format "[x1,y1,x2,y2]" representing lower-left and upper-right corners
421 Retrieves an integer at the specified index. @param index position of the element to retrieve @return integer value at the given index or -1 if not found
422 Fetches the name at a specified index. @param index position in the collection @return String name or null if not found
423 Checks if the map is empty. @return true if no entries are present, false otherwise
424 Initializes a COSDocument with default memory-only stream cache and given parser. @param parser ICOSParser object for document parsing
425 Initializes a COSDocument with a stream cache and no parser. @param streamCacheCreateFunction function to create a stream cache
426 Writes a COSFloat to PDF and appends a space. @param output stream to write the PDF content @param cosFloat the COSFloat to write @throws IOException if an I/O error occurs during writing
427 Converts update state to a COSIncrement object. @return COSIncrement instance representing the update state
428 Checks if the given COSBase object needs to be updated. @param base the COSBase object to check @return true if the object is an instance of COSUpdateInfo and needs update, false otherwise
429 Parses a string into a COSNumber (COSFloat or COSInteger). @param number input string to parse @return COSNumber object representing the parsed value @throws IOException if parsing fails or input is not a valid number
430 Appends a kid with the given MCID. @param mcid Media Content Identifier, must be non-negative
431 Retrieves or creates a COSInteger instance for degrees. @return COSInteger object representing the degrees value
432 Constructs a COSObjectKey with given number and generation. @param num object number @param gen generation number
433 Determines the file suffix based on stream filters. @return File suffix as a String or null if no matching filter is found
434 Creates an output stream for writing PDF content. @param filters COSBase object containing filter specifications @return OutputStream for writing filtered data @throws IOException if I/O error occurs or multiple writers are opened
435 Constructs a COSString from the given text. @param text input string to convert
436 Retrieves string at specified index or default value. @param index position in the collection @param defaultValue fallback if index is out of bounds or not a COSString @return string from collection or default value
437 Retrieves file content as a string. @return content of the file as a UTF-16BE/LE or PDFDocEncoded string
438 Retrieves the name of a destination. @return String representing the destination's name or null if not applicable
439 Extracts pairable items from a COSBase object. @param items COSBase object containing strings or arrays of strings @param pairIdx index to select from nested arrays (0 or 1) @return list of strings extracted based on the index
440 Retrieves export values from PDF attribute. @return List of string values or empty list if not applicable
441 Retrieves the default appearance string. @return the default appearance string or null if not found
442 Updates the document's status. @param updated new status indicating whether the document is updated
443 Closes the encoder by flushing and closing the output stream. Ensures all data is written and resources are released.
444 Closes all overlays and documents, releasing resources. @throws IOException if an error occurs during closing
445 Initializes a PDFormXObject with given PDF stream. @param stream PDF stream containing form object data
446 Initializes a PDImageXObject with given stream and resources. @param stream PDF stream containing the image data @param resources PDF resources associated with the image
447 Parses PDF header to set document version. @return true if parsing is successful, false otherwise
448 Parses FDF document header. @return true if parsing is successful, false otherwise
449 Skips leading white spaces and line breaks in the input stream. @throws IOException if an I/O error occurs
450 Skips the current line break in the input stream. @return true if a valid line break is skipped, false otherwise
451 Reads a line from the input source. @return the read line as a String, or throws IOException if EOF is reached
452 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs
453 Searches for the nearest XRef offset in PDF tables and streams. @param xrefOffset target XRef offset to find @return nearest XRef offset or -1 if not found @throws IOException if an I/O error occurs
454 Initializes a COSWriter with an output stream and default compression parameters. @param outputStream the stream to write PDF data to
455 Initializes a new COSWriter with specified output, input streams, and objects to write. @param outputStream destination for the written data @param inputData source for the input PDF data @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
456 Writes an integer operand to output stream. @param integer value to be written @throws IOException if I/O error occurs
457 Writes operator text followed by a newline. @param text operator string to be written @throws IOException if I/O error occurs
458 Encodes text using GSUB rules and returns byte array. @param gsubWorker worker for applying GSUB transformations @param glyphIds set to collect transformed glyph IDs @param font font used for encoding @param text input string to encode @return encoded byte array of the text @throws IOException if an I/O error occurs
459 Creates a new PDF document. @return PDDocument object initialized with document and access permissions
460 Constructs a new PDDocument instance with default access permissions. @param doc COSDocument object representing the PDF document @param source RandomAccessRead object for reading the PDF file
461 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is found
462 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is present
463 Retrieves the extends object stream. @return PDObjectStream object or null if not found
464 Constructs a PDFunctionType0 from a given COSBase. @param function COSBase object representing the PDF function
465 Constructs a PDFunctionType3 instance from a COSBase object. @param functionStream COSBase object representing the PDF function stream
466 Creates a PDPostScriptXObject from a given COSStream. @param stream the underlying COSStream object containing the PostScript data
467 Constructs a PDFormXObject with a given stream. @param stream underlying COSStream object for the form XObject
468 Initializes a PDFormXObject with a given stream and resource cache. @param stream underlying COSStream object @param cache resource cache for managing resources
469 Constructs a new PDDefaultAttributeObject. @param dictionary the underlying COSDictionary to wrap
470 Constructs a new PDUserAttributeObject. @param dictionary the underlying COSDictionary to wrap
471 Constructs a PDStandardAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
472 Initializes a new PDOutlineItem with the given COSDictionary. @param dic the underlying COSDictionary to wrap
473 Processes a CharSequence as a token. @param text the input text to process
474 Generates a string representation of the object list with their revision numbers. @return formatted string containing objects and their corresponding revision numbers
475 Checks if user has all document owner permissions. @return true if all owner permissions are granted, false otherwise
476 Checks if any of the Revision 3 permissions are set. @return true if at least one permission is granted, false otherwise
477 Initializes a new instance of PublicKeySecurityHandler.
478 Constructs a new StandardSecurityHandler instance.
479 Writes an array of bytes to the output stream with encryption. @param data the byte array to be written and encrypted @param output the OutputStream to write to @throws IOException if an I/O error occurs
480 Writes a subset of byte array to the output stream with encryption. @param data the byte array containing the data @param offset starting index in the byte array @param len number of bytes to write @param output OutputStream to write to @throws IOException if an I/O error occurs
481 Initializes a PublicKeySecurityHandler with a given policy. @param publicKeyProtectionPolicy the security policy to apply using a public key
482 Initializes a StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy the security policy to apply
483 Encrypts or decrypts data using AES/CBC/PKCS5Padding. @param finalKey secret key bytes @param data input stream for reading data @param output output stream for writing encrypted/decrypted data @param decrypt true for decryption, false for encryption @throws IOException if an I/O error occurs or security exception is thrown
484 Encrypts or decrypts data using AES-256. @param data input stream containing the data to be processed @param output output stream for the processed data @param decrypt true if decryption mode, false for encryption @throws IOException if an I/O error occurs during processing
485 Computes user password encryption based on revision. @param password user password as byte array @param owner owner entry bytes @param permissions document permission flags @param id document ID @param encRevision encryption revision @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return encrypted password as byte array or empty if unsupported revision
486 Computes owner password for PDF encryption. @param ownerPassword byte array of the owner's password @param userPassword byte array of the user's password @param encRevision PDF encryption revision @param length desired key length @return encrypted owner password as a byte array
487 Initializes a highlight annotation from a PDF dictionary. @param a COSDictionary representing the annotation
488 Initializes a squiggly annotation from a PDF dictionary. @param a COSDictionary representing the annotation
489 Initializes a strike-out annotation from a PDF dictionary. @param a COSDictionary representing the annotation
490 Creates an underline annotation from a PDF dictionary. @param a COSDictionary representing the annotation
491 Retrieves or loads a FontBoxFont based on format. @return FontBoxFont object or null if loading fails
492 Loads font information from disk cache. @param files list of font files to check @return List of FSFontInfo objects or null if cache is outdated
493 Saves disk cache for font information. Writes each FSFontInfo to a BufferedWriter.
494 Retrieves font metrics for a given font name. @param fontName the font name to retrieve metrics for @return FontMetrics object or null if not found
495 Sets the font provider and updates font info mapping. @param fontProvider new FontProvider instance to set
496 Generates a mapping from glyph ID to character code. @return Map of glyph IDs to corresponding character codes @throws IOException if an I/O error occurs during processing
497 Loads glyph list from specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries for maps @return GlyphList object initialized with data from file @throws RuntimeException if an I/O error occurs during loading
498 Validates a chunk's integrity. @param chunk the Chunk object to validate @return true if valid, false otherwise
499 Constructs a PDTilingPattern with the given COSDictionary. @param dictionary the COSDictionary representing the tiling pattern
500 Initializes a shaded triangle with vertices and colors. @param p array of three Point2D objects representing the triangle's corners @param c 2D array of color values for each corner
501 Constructs a PDShadingType3 instance. @param shadingDictionary the COSDictionary representing the shading
502 Constructs a PDTriangleBasedShadingType instance. @param shadingDictionary COSDictionary representing the triangle-based shading
503 Constructs a PDShadingType5 instance. @param shadingDictionary COSDictionary representing the shading
504 Ends text clipping by applying buffered clip areas. Resets text clippings and updates graphics state.
505 Sets the current clipping path for graphics. Updates the clipping path if different from the last set paths. @param graphics the target Graphics2D object for applying the clipping path
506 Creates a PDSoftMask from a COSBase. @param dictionary PDF object representing the soft mask @return PDSoftMask object or null if invalid
507 Initializes a new instance with an image input stream. @param imageStream InputStream containing the visible signature image @throws IOException if there is an issue reading the image stream
508 Sets the signature image from a file. @param path file path to the signature image @return PDVisibleSignDesigner instance with updated image @throws IOException if file reading fails
509 Generates a unique partial field name for a signature. @return Unique partial name string
510 Constructs a new PDButton instance. @param acroForm the form containing the button @param field the COSDictionary representing the button @param parent the parent non-terminal field, if any
511 Constructs a new PDSignatureField instance. @param acroForm the form containing the signature field @param field the COSDictionary representing the signature field @param parent the parent non-terminal field, if any
512 Constructs a new PDVariableText instance. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field, if any
513 Adjusts X direction based on current direction. @return Adjusted X rotation in degrees (0, 90, 180, 270)
514 Initializes a TextPosition object with specified text and layout parameters. @param pageRotation rotation angle of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode string of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font in user space units @param fontSizeInPt size of the font in points
515 Adjusts Y direction based on page orientation. @return Adjusted Y coordinate
516 Retrieves the width based on the current rotation. @return calculated width as a float
517 Adjusts width based on current direction. @return adjusted width as a float
518 Starts an article with default left-to-right text direction. @throws IOException if writing fails
519 Writes a line of text with word separators. @param line list of words with text positions @throws IOException if an I/O error occurs
520 Writes the end tag for a paragraph. Ensures proper nesting by starting a new paragraph if none is open. @throws IOException if an I/O error occurs
521 Creates a WordWithTextPositions object. @param word the original word as a String @param wordPositions list of TextPosition objects for the word @return WordWithTextPositions with normalized word and positions
522 Converts Calendar to formatted date string. @param cal Calendar object to convert @return Formatted date string or null if input is null
523 Converts Calendar to ISO 8601 format. @param cal Calendar object to convert @return ISO 8601 formatted date-time string
524 Converts internal byte array to a hexadecimal string. @return hexadecimal string representation of bytes
525 Writes external CMS signature to PDF. @param cmsSignature byte array of the CMS signature @throws IOException if writing fails or space is insufficient
526 Writes the PDF name to the given OutputStream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
527 Writes an array of bytes as hex characters to an OutputStream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
528 Sorts a list using iterative merge sort. @param list the list to be sorted @param cmp comparator defining the order of elements
529 Rotates the matrix by a specified angle. @param theta angle of rotation in radians
530 Adjusts the text position by translating the current text matrix. @param tx translation in x direction @param ty translation in y direction
531 Translates the matrix by vector coordinates. @param vector translation vector with x and y components
532 Concatenates two matrices. @param a first matrix @param b second matrix @return concatenated Matrix (b * a)
533 Writes a float operand to the output stream. @param real the float value to write @throws IOException if I/O error occurs
534 Detects file type by reading initial bytes. @param inputStream input stream to read from @return FileType detected or null if not found @throws IOException if input stream does not support mark/reset or ends prematurely
535 Processes a PDF operation by its string representation. @param operation the operator string to be processed @param arguments list of COSBase operands @throws IOException if an I/O error occurs
536 Initializes a PDFMarkedContentExtractor with specified encoding. @param encoding character encoding for PDF processing
537 Initializes a PDFTextStripper with default operators for handling marked content.
538 Creates a new PDMarkedContent instance. @param tag the COSName tag for the content @param properties dictionary containing properties of the content @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
539 Retrieves item by string key. @param key unique identifier for the item @return COSBase object or null if not found
540 Checks if the map contains a key by its PDF name. @param name the PDF name string to check @return true if the key is present, false otherwise
541 Retrieves a PDF filter by its name. @param filterName the name of the filter to retrieve @return the Filter object associated with the given name @throws IOException if the filter is not found
542 Parses a PDF name from the input source. @return COSName instance representing the parsed name @throws IOException if an I/O error occurs during parsing
543 Initializes a PDColor with components and an optional pattern name. @param array COSArray containing color component values @param colorSpace PDColorSpace object defining the color space
544 Parses a hexadecimal string into a COSString. @param hex input hexadecimal string @return COSString object representing the parsed bytes @throws IOException if the hex string is invalid and FORCE_PARSING is false
545 Converts a list of integers to a COSArray. @param integer List of Integer objects @return COSArray containing COSInteger elements
546 Creates a COSArray from a list of PDF names. @param strings list of string names to convert @return COSArray containing COSName objects
547 Creates a COSArray from a list of strings. @param strings list of string values to convert @return COSArray containing COSString objects
548 Initializes a COSArrayList with empty COSArray and ArrayList.
549 Initializes a COSArrayList with a given dictionary and key. @param dictionary the parent dictionary containing the list @param dictionaryKey the key in the dictionary associated with this list
550 Initializes a new PDPageDestination with an empty COSArray.
551 Constructs a PDRectangle with specified dimensions. @param x the lower-left x-coordinate @param y the lower-left y-coordinate @param width the width of the rectangle @param height the height of the rectangle
552 Constructs a PDRectangle from a BoundingBox. @param box BoundingBox defining the rectangle's corners
553 Sets the list of filters for the stream. @param filters list of COSName objects representing filters
554 Sets alternate color spaces for a PDF stream. @param list of PDColorSpace objects representing alternate color spaces
555 Creates a new COSStream instance. @return newly created COSStream object
556 Default constructor initializes COSStream with null.
557 Initializes a COSStream with a cache and read view. @param streamCache cache for random access streams @param randomAccessReadView view for reading data @throws IOException if an I/O error occurs
558 Returns an unmodifiable view of the current COSDictionary. @return UnmodifiableCOSDictionary instance wrapping this dictionary
559 Retrieves the most recent DecodeResult or a default one if none exist. @return DecodeResult object, either the last in list or a new empty one
560 Retrieves resources associated with a PDF object. @return PDResources object or null if no resources are found
561 Initializes a new PDAttributeObject instance.
562 Constructor for PDUserProperty. @param userAttributeObject the attribute object associated with the user property
563 Initializes a new PDOutlineNode instance.
564 Constructs a new PDDestinationNameTreeNode.
565 Initializes a new PDEmbeddedFilesNameTreeNode instance.
566 Constructs a new PDJavascriptNameTreeNode instance. Initializes and associates a COSDictionary object with this node.
567 Initializes a new PDStructureElementNameTreeNode instance. Calls superclass constructor and associates a COSDictionary object.
568 Constructs a new PDNonTerminalField instance. @param acroForm the form containing the field
569 Constructs a new PDTerminalField instance. @param acroForm the form containing the field
570 Clips the current graphics state to a transformed rectangle. @param rectangle the rectangle to clip against
571 Transforms the bounding box of an appearance stream. @param appearanceStream PDF appearance stream to transform @return Transformed bounding box as Rectangle2D
572 Initializes graphics state with a clipping path based on page rectangle. @param page PDRectangle representing the page dimensions
573 Retrieves the left value from the array. @return integer value at index 2 or -1 if not found
574 Retrieves the left value from the array. @return integer value at index 2 or -1 if not found
575 Retrieves the fourth element from an internal array. @return integer value at index 3 or -1 if not found
576 Retrieves the fifth element from the array. @return integer value at index 4 or -1 if not found
577 Retrieves the top element from the array. @return integer value at index 5 or -1 if not found
578 Retrieves the third element from an array. @return integer value at index 2 or -1 if not found
579 Retrieves the left value from an internal array. @return integer value at index 2 or -1 if not found
580 Retrieves the top element from the array. @return integer value at index 3 or -1 if not found
581 Checks if the bounding box is fitted. @return true if the bounding box type matches, false otherwise
582 Checks if bounding box is fitted. @return true if bounding box type matches, false otherwise
583 Checks if the bounding box type is "BOUNDED". @return true if the bounding box type is BOUNDED, false otherwise
584 Initializes a COSDocument with an in-memory stream cache.
585 Initializes a COSParser with PDF source, security info, and cache function. @param source the PDF data to be parsed @param password document decryption password @param keyStore input stream for keystore @param keyAlias alias of the key in the keystore @param streamCacheCreateFunction function to create a stream cache @throws IOException if an I/O error occurs during initialization
586 Retrieves or creates a COSObjectKey for given number and generation. Uses cache to improve performance with large PDFs. @param num object number @param gen generation number @return COSObjectKey instance
587 Searches for PDF objects using a brute-force approach. @throws IOException if an I/O error occurs during search
588 Searches for object stream offsets using backward search. @return Map of object stream offsets to COSObjectKey @throws IOException if an I/O error occurs
589 Parses XRef table entries and sets them in the resolver. @param resolver object to set parsed XRef entries @throws IOException if an I/O error occurs during parsing
590 Finds COSObjectKey by reading from a specified offset. @param objectKey initial object key to find @param offset file position to start reading @param xrefOffset map of object keys to their offsets @return found COSObjectKey or null if not valid @throws IOException if an I/O error occurs
591 Parses an XRef table from the PDF source. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise @throws IOException if I/O error occurs during parsing
592 Creates an output stream for writing PDF content without filters. @return OutputStream for writing unfiltered data @throws IOException if I/O error occurs or multiple writers are opened
593 Creates an output stream for writing filtered PDF content. @param filter COSName specifying the filter type @return OutputStream for writing data with specified filter @throws IOException if I/O error occurs or multiple writers are opened
594 Constructs a PDSimpleFileSpecification with an empty file name.
595 Sets the file name. @param fileName name of the file to be set
596 Constructs a named destination from a given string. @param dest destination name as a string
597 Sets the named destination. @param dest destination string to set
598 Retrieves string at specified index with no default value. @param index position in the collection @return string from collection or null if not found
599 Retrieves the value of an attribute, resolving export values if applicable. @return String representation of the attribute value
600 Sets the update status of the document. @param flag indicates whether the document needs to be updated
601 Updates the document's status to true.
602 Initializes a PDTransparencyGroup with given PDF stream. @param stream PDF stream containing transparency group data
603 Creates a thumbnail image from a COSStream. @param cosStream PDF stream containing the image data @return PDImageXObject representing the thumbnail
604 Retrieves the mask image for this PDF object. @return PDImageXObject representing the mask or null if none exists
605 Retrieves the soft mask image from a PDF object. @return PDImageXObject representing the soft mask or null if none exists
606 Reads a string from the input source. Skips leading spaces and reads characters until end of name is reached. @return read string or empty if no valid string found @throws IOException if an I/O error occurs
607 Reads and verifies an expected string from the input source. @param expectedString the string that is expected to be read @throws IOException if the expected string does not match or an I/O error occurs
608 Reads a string of specified length from the input source. @param length maximum length of the string to read @return the read string or an empty string if no characters are found @throws IOException if an I/O error occurs
609 Reads an integer from the input source. @return parsed integer value @throws IOException if an I/O error occurs or parsing fails
610 Reads a long integer from the input source. @return parsed long value @throws IOException if an I/O error occurs or the number is invalid
611 Calculates the fixed offset for an XRef table or stream. @param objectOffset initial offset of the XRef table or stream @return updated offset if found, otherwise 0 @throws IOException if an I/O error occurs during search
612 Saves the FDF document to the specified output stream. @param output the stream to write FDF data to @throws IOException if an I/O error occurs during writing
613 Begins text mode for PDF operations. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs
614 Ends text mode by writing the END_TEXT operator. Throws an exception if not in text mode.
615 Writes a newline in text mode. @throws IOException if I/O error occurs or not in text mode
616 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto respective stacks. Writes "q" operator to save state.
617 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing operator
618 Strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
619 Closes and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
620 Fills the current area with non-zero values. Throws an exception if called within a text block. @throws IOException if I/O error occurs
621 Fills even-odd pattern. Throws exception if called in text mode. @throws IOException if I/O error occurs
622 Fills and strokes the current path using non-zero winding rule. Throws an exception if called within a text block. @throws IOException if I/O error occurs during operation
623 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
624 Closes path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
625 Closes, fills (even-odd rule), and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
626 Closes the current path by writing an operator. Throws an exception if called within a text block. @throws IOException if I/O error occurs
627 Clips the current path. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs
628 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operators
629 Sets the line join style. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if I/O error occurs during write operations
630 Sets the line cap style for drawing operations. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is out of range
631 Ends marked content in PDF. @throws IOException if I/O error occurs
632 Sets rendering mode for text. @param rm RenderingMode object to be applied @throws IOException if I/O error occurs
633 Constructs a new PDDocument instance with default access permissions. @param doc COSDocument object representing the PDF document
634 Constructs a PDAppearanceStream with a given COSStream. @param stream underlying COSStream object for the appearance stream
635 Initializes a PDTransparencyGroup with a given stream and resource cache. @param stream underlying COSStream object @param cache resource cache for managing resources
636 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
637 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
638 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
639 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
640 Retrieves current user's access permission. Initializes with full permissions if not already set. @return AccessPermission object with all features allowed
641 Computes the appropriate revision number based on version and permissions. @param version current document version @return computed revision number
642 Encrypts data using RC4 algorithm. @param finalKey encryption key as a byte array @param input the data to be encrypted @param output OutputStream to write the encrypted data @throws IOException if an I/O error occurs during encryption
643 Encrypts and writes data from InputStream to OutputStream. @param data InputStream containing the data to be written @param output OutputStream to write the encrypted data to @throws IOException if an I/O error occurs
644 Prepares a string for SASL with unassigned code points allowed. @param str the input string to prepare @return the prepared string or throws IllegalArgumentException if invalid
645 Prepares a stored string for SASL. @param str the input string to prepare @return the prepared string or throws IllegalArgumentException if invalid
646 Generates user password for PDF encryption. @param ownerPassword owner's password as a byte array @param owner user data as a byte array @param encRevision PDF encryption revision @param length desired key length @return encrypted user password as a byte array or empty if unsupported revision
647 Adds TrueType collection fonts to the list. @param ttcFile TrueType collection file
648 Adds a TrueType font to the list. @param fontHeaders font header information @param file font file @param hash file hash
649 Adds a Type 1 font from a PFB file to the font info list. @param pfbFile PFB font file
650 Returns the current FontProvider, initializing with DefaultFontProvider if null. @return FontProvider instance
651 Writes a CID-to-Unicode CMap to an output stream. @param out OutputStream to write the CMap to @throws IOException if an I/O error occurs
652 Validates PNGConverterState by checking all chunks. @param state the PNGConverterState to validate @return true if all chunks are valid, false otherwise
653 Initializes a CoonsPatch with given control points and colors. @param points array of control points defining the patch @param color 2D array of corner colors for shading
654 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects representing vertices and colors @return List of ShadedTriangle objects formed by the grid points
655 Initializes a TensorPatch with given control points and colors. @param tcp array of control points @param color 2D array of corner colors
656 Returns the input stream of data to be signed. @return InputStream containing data for signing @throws IOException if an I/O error occurs
657 Constructs a new PDCheckBox instance. @param acroForm the form containing the checkbox @param field the COSDictionary representing the checkbox @param parent the parent non-terminal field, if any
658 Constructs a new PDPushButton instance. @param acroForm the form containing the button @param field the COSDictionary representing the button @param parent the parent non-terminal field, if any
659 Constructs a new PDRadioButton instance. @param acroForm the form containing the radio button @param field the COSDictionary representing the radio button @param parent the parent non-terminal field, if any
660 Constructs a new PDChoice instance. @param acroForm the form containing the choice field @param field the COSDictionary representing the choice field @param parent the parent non-terminal field, if any
661 Constructs a new PDTextField instance. @param acroForm the form containing the text field @param field the COSDictionary representing the text field @param parent the parent non-terminal field, if any
662 Merges a diacritic into the current text position. @param diacritic TextPosition object containing the diacritic character
663 Determines if a new paragraph should start based on position changes. @param position current text position @param lastPosition previous text position @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a single line
664 Checks if the current TextPosition contains another. @param tp2 the other TextPosition to check @return true if there is significant X and Y overlap, false otherwise
665 Checks if this TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encloses tp2, false otherwise
666 Writes a paragraph separator by closing and reopening a paragraph. @throws IOException if an I/O error occurs
667 Normalizes and appends words to a line. @param normalized list to store normalized words @param lineBuilder StringBuilder for the current line @param wordPositions list of TextPosition objects for the current word @param item LineItem representing the current text element @return updated StringBuilder instance
668 Converts a date string to a Calendar instance. @param text input date string to convert @return Calendar object or null if conversion fails
669 Writes a COSName to the OutputStream followed by a space. @param output the OutputStream to write to @throws IOException if an I/O error occurs
670 Writes a COSName operand followed by a space to the output stream. @param name the COSName to write @throws IOException if an I/O error occurs during writing
671 Writes a byte array as a string to an OutputStream. @param bytes the byte array to write @param forceHex if true, forces writing as hex @param output the OutputStream to write to @throws IOException if an I/O error occurs
672 Saves the current graphics state to the stack.
673 Saves the current graphics stack by cloning its top state. @return the previous graphics stack before saving
674 Sets text leading. @param leading the leading value to apply @throws IOException if I/O error occurs
675 Moves the text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs
676 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if I/O error occurs
677 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
678 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if I/O error occurs
679 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs
680 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
681 Sets non-stroking color to gray. @param g gray level (0.0 to 1.0) @throws IOException if I/O error occurs
682 Adds a rectangle to the output stream. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width rectangle width @param height rectangle height @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
683 Draws a cubic Bezier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if I/O error occurs
684 Draws a cubic Bézier curve with two control points and an endpoint. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point @throws IOException if I/O error occurs
685 Draws a cubic curve with replicated final point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point @throws IOException if I/O error occurs
686 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if I/O error occurs
687 Draws a line to the specified coordinates. @param x the x-coordinate of the endpoint @param y the y-coordinate of the endpoint @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
688 Sets line width in graphics context. @param lineWidth desired width of lines @throws IOException if I/O error occurs
689 Sets line dash pattern and phase. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern @throws IOException if I/O error occurs
690 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs while writing
691 Writes an affine transformation matrix to the output stream. @param transform the AffineTransform object to write @throws IOException if I/O error occurs
692 Sets character spacing in the document. @param spacing the space between characters @throws IOException if I/O error occurs
693 Sets word spacing in PDF. @param spacing the word spacing value @throws IOException if I/O error occurs
694 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
695 Sets text rise by writing operand and operator. @param rise float value representing text rise @throws IOException if I/O error occurs
696 Initializes a PDF graphics stream engine for a given page. @param page PDPage to process graphics operations on
697 Constructs a PDFMarkedContentExtractor with default encoding.
698 Initializes a PDFTextStripperByArea with bead separation disabled.
699 Parses a hexadecimal string from input source. @return COSString object representing the parsed bytes @throws IOException if parsing fails or input is malformed
700 Sets file filters in PDF stream. @param filters list of filter names to apply
701 Constructs a PDRectangle with default zero dimensions.
702 Constructs a PDRectangle with specified width and height at origin. @param width the width of the rectangle @param height the height of the rectangle
703 Creates a PDRectangle from bounding box coordinates. @return PDRectangle object representing the bounding box
704 Calculates the difference rectangle between annotation and bounding box. @return PDRectangle representing the difference or a default square if annotRect is null
705 Returns a new PDRectangle with added padding. @param rectangle original PDRectangle to pad @param padding amount of padding to add @return new PDRectangle with increased padding
706 Adjusts rectangle dimensions by adding differences. @param rectangle original PDRectangle to adjust @param differences array of four floats representing adjustments @return new PDRectangle with adjusted dimensions or original if input is invalid
707 Applies differences to a rectangle's dimensions. @param rectangle original PDRectangle object @param differences array of four floats representing adjustments @return new PDRectangle with adjusted dimensions or original if invalid input
708 Applies padding to a rectangle. @param box original PDRectangle object @param padding amount of padding to add @return new PDRectangle with applied padding
709 Initializes a PDFXRefStream with a new COSStream. @param cosDocument document to create the stream in
710 Creates a new PDObjectStream from the given PDDocument. @param document the PDDocument to create the stream in @return PDObjectStream object with TYPE set to OBJ_STM
711 Initializes PDStream with a new COSStream. @param document PDDocument instance to associate with the stream
712 Creates a PDStream from a given COSDocument. @param document the COSDocument to create the stream in
713 Initializes a PDStream with PDF content from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters COSBase object specifying filter chains @throws IOException if I/O error occurs during processing
714 Creates a raw COSStream from the given input. @param document PDDocument instance to create the stream in @param rawInput InputStream containing data to write into the stream @return COSStream object created from the input @throws IOException if an I/O error occurs during stream creation or transfer
715 Encodes an input stream using given parameters. @param input the InputStream to encode @param encoded the OutputStream for encoded data @param parameters COSDictionary containing encoding parameters @param index unused parameter
716 Constructs and initializes a new PDDefaultAttributeObject instance.
717 Initializes a new user attribute object with owner set to USER_PROPERTIES.
718 Initializes a new PDStandardAttributeObject instance.
719 Constructs a new PDOutlineItem.
720 Constructs a new PDVariableText instance. @param acroForm the form containing the field
721 Initializes a COSParser with PDF source and security info. @param source the PDF data to be parsed @param password document decryption password @param keyStore input stream for keystore @param keyAlias alias of the key in the keystore @throws IOException if an I/O error occurs during initialization
722 Initializes a PDF parser with specified source and security details. @param source the PDF data to be parsed @param decryptionPassword document decryption password @param keyStore input stream for keystore @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create a stream cache @throws IOException if an I/O error occurs during initialization
723 Parses a COS dictionary value from the source. Handles object number and generation parsing. @return parsed COSBase object or null if invalid @throws IOException if an I/O error occurs
724 Retrieves PDF object offsets using brute-force search. @return Map of COSObjectKey to their offsets @throws IOException if an I/O error occurs during search
725 Creates an output stream for writing PDF content without filters. @return OutputStream for writing unfiltered data @throws IOException if I/O error occurs or multiple writers are opened
726 Writes byte data to a PDF appearance stream. @param data byte array containing the data to write @param appearanceStream the target PDF appearance stream @throws IOException if I/O error occurs during writing
727 Creates a content stream for PDF appearance with optional compression. @param appearance appearance stream to write to @param compress true if the output should be compressed, false otherwise @throws IOException if I/O error occurs or multiple writers are opened
728 Clears all objects and updates the document status.
729 Removes all specified objects from the collection and updates the document status. @param objectsList collection of COSBase objects to be removed
730 Retains only the specified elements in this collection. @param objectsList the collection of COSBase objects to retain
731 Sets an integer value at a specified index. @param index position in the list to update @param intVal integer value to set
732 Removes an entry at a specified index. @param i index of the entry to remove @return the removed COSBase object or null if index is out of bounds
733 Removes an object from the collection. @param o COSBase object to remove @return true if object was removed, false otherwise
734 Clears all items and updates the document status.
735 Removes an item by key and updates the document status. @param key COSName representing the item to remove
736 Updates document state if different origin. @param updateState object containing document update information
737 Sets the base object to null and updates its state.
738 Sets the origin document state for this update info. @param originDocumentState the new document state to set @param dereferencing flag indicating if dereferencing is in progress
739 Reads and validates generation number. @return parsed generation number if valid @throws IOException if read fails or number is invalid
740 Reads and validates an object number. @return valid object number as a long @throws IOException if the number is invalid or I/O error occurs
741 Saves FDF document to a specified file. @param fileName the file where FDF data will be saved @throws IOException if an I/O error occurs during writing
742 Begins text mode for PDF operations. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs
743 Starts text mode for PDF operations. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs
744 Begins text mode for PDF operations. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs
745 Begins text mode for PDF operations. @throws IllegalStateException if already in text mode @throws IOException if I/O error occurs
746 Ends text mode by writing the END_TEXT operator. Throws an exception if not in text mode.
747 Ends text mode by writing the END_TEXT operator. Throws an exception if not in text mode.
748 Ends text mode by writing the END_TEXT operator. Throws an exception if not in text mode.
749 Ends text mode by writing the END_TEXT operator. Throws an exception if not in text mode.
750 Writes a newline in text mode. @throws IOException if I/O error occurs or not in text mode
751 Writes a newline in text mode. @throws IOException if I/O error occurs or not in text mode
752 Writes a newline in text mode. @throws IOException if I/O error occurs or not in text mode
753 Writes a newline in text mode. @throws IOException if I/O error occurs or not in text mode
754 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto respective stacks. Writes "q" operator to save state.
755 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto respective stacks. Writes "q" operator to save state.
756 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto respective stacks. Writes "q" operator to save state.
757 Saves the current graphics state. Throws IllegalStateException if called within text mode. Pushes current font and color space states onto respective stacks. Writes "q" operator to save state.
758 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing operator
759 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing operator
760 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing operator
761 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing operator
762 Strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
763 Strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
764 Strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
765 Strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
766 Closes and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
767 Closes and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
768 Closes and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
769 Closes and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
770 Fills the current area with non-zero values. Throws an exception if called within a text block. @throws IOException if I/O error occurs
771 Fills the current area with non-zero values. Throws an exception if called within a text block. @throws IOException if I/O error occurs
772 Fills the current area with non-zero values. Throws an exception if called within a text block. @throws IOException if I/O error occurs
773 Fills the current area with non-zero values. Throws an exception if called within a text block. @throws IOException if I/O error occurs
774 Fills even-odd pattern. Throws exception if called in text mode. @throws IOException if I/O error occurs
775 Fills even-odd pattern. Throws exception if called in text mode. @throws IOException if I/O error occurs
776 Fills even-odd pattern. Throws exception if called in text mode. @throws IOException if I/O error occurs
777 Fills even-odd pattern. Throws exception if called in text mode. @throws IOException if I/O error occurs
778 Fills and strokes the current path using non-zero winding rule. Throws an exception if called within a text block. @throws IOException if I/O error occurs during operation
779 Fills and strokes the current path using non-zero winding rule. Throws an exception if called within a text block. @throws IOException if I/O error occurs during operation
780 Fills and strokes the current path using non-zero winding rule. Throws an exception if called within a text block. @throws IOException if I/O error occurs during operation
781 Fills and strokes the current path using non-zero winding rule. Throws an exception if called within a text block. @throws IOException if I/O error occurs during operation
782 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
783 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
784 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
785 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
786 Closes path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
787 Closes path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
788 Closes path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
789 Closes path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
790 Closes, fills (even-odd rule), and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
791 Closes, fills (even-odd rule), and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
792 Closes, fills (even-odd rule), and strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs
793 Closes, fills (even-odd rule), and strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
794 Closes the current path by writing an operator. Throws an exception if called within a text block. @throws IOException if I/O error occurs
795 Closes the current path by writing an operator. Throws an exception if called within a text block. @throws IOException if I/O error occurs
796 Closes the current path by writing an operator. Throws an exception if called within a text block. @throws IOException if I/O error occurs
797 Closes the current path by writing an operator. Throws an exception if called within a text block. @throws IOException if I/O error occurs
798 Clips the current path. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs
799 Clips the current path. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs
800 Clips the current path. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs
801 Clips the current path. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs
802 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operators
803 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operators
804 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operators
805 Clips the current path using even-odd rule. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operators
806 Sets the line join style. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if I/O error occurs during write operations
807 Sets the line join style. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if I/O error occurs during write operations @throws IllegalArgumentException if lineJoinStyle is out of range
808 Sets the line join style. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if I/O error occurs during write operations
809 Sets the line join style. @param lineJoinStyle integer representing the line join style (0-2) @throws IOException if I/O error occurs during write operations @throws IllegalArgumentException for invalid line join style value
810 Sets the line cap style for drawing operations. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is out of range
811 Sets the line cap style for drawing operations. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is out of range
812 Sets the line cap style for drawing operations. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is out of range
813 Sets the line cap style for drawing operations. @param lineCapStyle integer representing the line cap style (0-2) @throws IOException if I/O error occurs during writing @throws IllegalArgumentException if lineCapStyle is out of range
814 Ends marked content in PDF. @throws IOException if I/O error occurs
815 Ends marked content in PDF. @throws IOException if I/O error occurs
816 Ends marked content in PDF. @throws IOException if I/O error occurs
817 Ends marked content in PDF. @throws IOException if I/O error occurs
818 Sets text rendering mode in PDF. @param rm RenderingMode object to be applied @throws IOException if I/O error occurs
819 Sets rendering mode for text. @param rm RenderingMode object to be applied @throws IOException if I/O error occurs
820 Sets rendering mode for text. @param rm RenderingMode object to be applied @throws IOException if I/O error occurs
821 Sets rendering mode for text. @param rm RenderingMode object to be applied @throws IOException if I/O error occurs
822 Retrieves the appearance stream for a PDF annotation. @return PDAppearanceStream object if valid, otherwise throws exception
823 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
824 Parses input text using a tokenizer and syntax handler. @param input the CharSequence to be parsed @param handler the SyntaxHandler to process tokens
825 Encrypts data using RC4 algorithm. @param finalKey encryption key as byte array @param input InputStream containing data to encrypt @param output OutputStream for encrypted data @throws IOException if I/O error occurs during encryption
826 Computes encrypted key based on encryption revision. @param password user's password for decryption @param o owner entry data @param u user entry data @param oe encrypted owner key @param ue encrypted user key @param permissions document permission flags @param id document ID @param encRevision encryption revision level @param keyLengthInBytes desired output length of the key @param encryptMetadata flag to encrypt metadata @param isOwnerPassword flag indicating if it's the owner password @return encrypted file key as byte array @throws IOException on encryption or decryption errors
827 Validates user password based on encryption revision. @param password user's password as byte array @param user user entry bytes @param owner owner entry bytes @param permissions document permission flags @param id document ID @param encRevision encryption revision level @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException on unknown encryption revision or hashing errors
828 Adds a TrueType or OpenType font to the font info list. @param ttfFile TrueType/OpenType font file
829 Finds a FontBoxFont by format and PostScript name. Handles various cases like null names, substitutes, and Windows-style names. @param format the font format @param postScriptName the PostScript name of the font @return FontBoxFont object or null if not found
830 Constructs a PDShadingType6 instance. @param shadingDictionary COSDictionary representing the shading
831 Constructs a PDMeshBasedShadingType instance. @param shadingDictionary COSDictionary representing the mesh-based shading
832 Constructs a new PDComboBox instance. @param acroForm the form containing the combo box field @param field the COSDictionary representing the combo box field @param parent the parent non-terminal field, if any
833 Constructs a new PDListBox instance. @param acroForm the form containing the list box field @param field the COSDictionary representing the list box field @param parent the parent non-terminal field, if any
834 Processes a text position, handling duplicates and diacritics. @param text TextPosition object to process
835 Processes a TextPosition object, handling diacritics and suppressing duplicates. @param text TextPosition to be processed
836 Removes spaces from the list that are completely contained within another TextPosition. @param textList list of TextPositions to process
837 Handles line separation and paragraph formatting. @param current current text position @param lastPosition previous text position @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a single line @return updated last line start position @throws IOException if an I/O error occurs
838 Normalizes and processes a list of LineItem objects into words. @param line list of LineItem representing text elements @return List of WordWithTextPositions with normalized words and positions
839 Converts COSString to Calendar instance. @param text input COSString containing date @return Calendar object or null if conversion fails
840 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
841 Begins marked content sequence. @param tag COSName representing the marked content tag @param mcid unique identifier for the marked content @throws IOException if I/O error occurs during writing
842 Sets a marked content point with a given tag. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs during writing
843 Writes COSString to OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
844 Writes a byte array as a string to an OutputStream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
845 Sets text leading. @param leading the leading value to apply @throws IOException if I/O error occurs
846 Sets text leading. @param leading the leading value to apply @throws IOException if I/O error occurs
847 Sets text leading. @param leading the leading value to apply @throws IOException if I/O error occurs
848 Sets text leading. @param leading the leading value to apply @throws IOException if I/O error occurs
849 Moves the text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs or not in text mode
850 Moves the text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs or not in text mode
851 Moves the text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs or not in text mode
852 Moves the text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs
853 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside 0..1 @throws IOException if I/O error occurs
854 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if I/O error occurs
855 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0.0, 1.0] @throws IOException if I/O error occurs
856 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if I/O error occurs
857 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs
858 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
859 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs
860 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs
861 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range 0..1 @throws IOException if I/O error occurs while writing
862 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if I/O error occurs
863 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range 0..1 @throws IOException if I/O error occurs during write operations
864 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if I/O error occurs
865 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs while writing operands or operator
866 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if parameters are outside 0..1 range @throws IOException if I/O error occurs
867 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside the range 0..1 @throws IOException if I/O error occurs
868 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if I/O error occurs
869 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if I/O error occurs while writing operands or operator
870 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs while writing
871 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs
872 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs
873 Sets non-stroking color to gray. @param g gray level (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if I/O error occurs during writing
874 Sets non-stroking color to gray. @param g gray level (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if I/O error occurs
875 Sets non-stroking color to gray level. @param g gray level (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range 0..1 @throws IOException if I/O error occurs while writing
876 Sets non-stroking color to gray. @param g gray level (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if I/O error occurs
877 Adds a rectangle to the output stream. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width rectangle width @param height rectangle height @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
878 Adds a rectangle to the output stream. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width rectangle width @param height rectangle height @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
879 Adds a rectangle to the output stream. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width rectangle width @param height rectangle height @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
880 Adds a rectangle to the output stream. @param x top-left corner X coordinate @param y top-left corner Y coordinate @param width rectangle width @param height rectangle height @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
881 Draws a cubic Bezier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs
882 Draws a cubic Bezier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs
883 Draws a cubic Bezier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if I/O error occurs or in text mode
884 Draws a cubic Bezier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if I/O error occurs or called within text mode
885 Draws a cubic Bézier curve with two control points and an endpoint. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point @throws IOException if I/O error occurs or called within a text block
886 Draws a cubic Bézier curve with two control points and an endpoint. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs
887 Draws a cubic Bézier curve with two control points and an endpoint. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
888 Draws a cubic Bézier curve with two control points and an endpoint. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point @throws IOException if I/O error occurs or called within a text block
889 Draws a cubic curve with replicated final point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs
890 Draws a cubic curve with replicated final point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point @throws IOException if I/O error occurs or called within a text block
891 Draws a cubic curve with replicated final point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point @throws IOException if I/O error occurs or if called within text mode
892 Draws a cubic curve with replicated final point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point @throws IOException if I/O error occurs or called within text mode
893 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if I/O error occurs or text mode is active
894 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if I/O error occurs or in text mode
895 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
896 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if I/O error occurs or text mode is active
897 Draws a line to the specified coordinates. @param x the x-coordinate of the endpoint @param y the y-coordinate of the endpoint @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
898 Draws a line to the specified coordinates. @param x the x-coordinate of the endpoint @param y the y-coordinate of the endpoint @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
899 Draws a line to the specified coordinates. @param x the x-coordinate of the endpoint @param y the y-coordinate of the endpoint @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
900 Draws a line to the specified coordinates. @param x the x-coordinate of the endpoint @param y the y-coordinate of the endpoint @throws IOException if I/O error occurs @throws IllegalStateException if called within a text block
901 Sets line width in graphics context. @param lineWidth desired width of lines @throws IOException if I/O error occurs
902 Sets line width in graphics context. @param lineWidth desired width of lines @throws IOException if I/O error occurs
903 Sets line width in graphics context. @param lineWidth desired width of lines @throws IOException if I/O error occurs
904 Sets line width in graphics context. @param lineWidth desired width of lines @throws IOException if I/O error occurs
905 Sets line dash pattern and phase. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern @throws IOException if I/O error occurs
906 Writes line dash pattern and phase to output. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern @throws IOException if I/O error occurs while writing
907 Sets line dash pattern and phase. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern @throws IOException if I/O error occurs
908 Writes line dash pattern and phase to output. @param pattern array of float values defining the dash pattern @param phase offset for the start of the dash pattern @throws IOException if I/O error occurs during writing
909 Sets the miter limit for line joins. @param miterLimit the miter limit value to set (> 0) @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs while writing
910 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs while writing
911 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs while writing
912 Sets the miter limit for line joins. @param miterLimit the miter limit value to set @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs while writing
913 Sets the text transformation matrix. @param matrix the Matrix object defining the transformation @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
914 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if I/O error occurs during transformation application
915 Sets character spacing in the document. @param spacing the space between characters @throws IOException if I/O error occurs
916 Sets character spacing in the document. @param spacing the space between characters @throws IOException if I/O error occurs
917 Sets character spacing in the document. @param spacing the space between characters @throws IOException if I/O error occurs while writing
918 Sets character spacing in the document. @param spacing the space between characters @throws IOException if I/O error occurs
919 Sets word spacing in PDF. @param spacing the word spacing value @throws IOException if I/O error occurs
920 Sets word spacing in PDF. @param spacing the word spacing value @throws IOException if I/O error occurs
921 Sets word spacing in PDF. @param spacing the word spacing value @throws IOException if I/O error occurs
922 Sets word spacing in PDF. @param spacing the word spacing value @throws IOException if I/O error occurs
923 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
924 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
925 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
926 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
927 Sets text rise by writing operand and operator. @param rise float value representing text rise @throws IOException if I/O error occurs
928 Sets text rise by writing operand and operator. @param rise float value representing text rise @throws IOException if I/O error occurs
929 Sets text rise by writing operand and operator. @param rise float value representing text rise @throws IOException if I/O error occurs
930 Sets text rise by writing operand and operator. @param rise float value representing text rise @throws IOException if I/O error occurs
931 Constructs a new PageDrawer with specified parameters. @param parameters configuration settings for the page drawer @throws IOException if an I/O error occurs during initialization
932 Parses a COSString from the input source. @return COSString object representing parsed string @throws IOException if parsing fails or input is malformed
933 Constructs an immutable rectangle with specified dimensions. @param width the width of the rectangle @param height the height of the rectangle
934 Retrieves the bounding box rectangle. @return PDRectangle object representing the bounding box
935 Initializes PDMetadata with a PDF document. @param document PDDocument instance to associate with the metadata
936 Initializes a new PDEmbeddedFile associated with the given PDDocument. @param document PDDocument instance to associate with this embedded file
937 Initializes a PDXObject with a document and subtype. @param document PDDocument to associate with the object @param subtype COSName specifying the subtype of the XObject
938 Creates a PDImageXObject from a PDDocument. Initializes with an empty PDStream and no resources. @param document the source PDDocument
939 Initializes a PDStream with PDF content from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @throws IOException if I/O error occurs during processing
940 Initializes a PDStream with PDF content from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filter COSName specifying filter chains @throws IOException if I/O error occurs during processing
941 Initializes a PDStream with PDF content from an InputStream. @param doc PDDocument to associate the stream with @param input InputStream containing PDF data @param filters COSArray object specifying filter chains @throws IOException if I/O error occurs during processing
942 Creates a PDImageXObject from an encoded stream. @param document PDDocument to associate the image with @param encodedStream InputStream containing encoded image data @param cosFilter COSBase filter for the image @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @throws IOException if an I/O error occurs during stream creation
943 Initializes a new PDLayoutAttributeObject with layout owner.
944 Initializes a new PDListAttributeObject with OWNER_LIST as owner.
945 Initializes a new PDPrintFieldAttributeObject with OWNER_PRINT_FIELD.
946 Initializes a new PDTableAttributeObject with table owner.
947 Initializes a COSParser with PDF source. @param source the PDF data to be parsed @throws IOException if an I/O error occurs during initialization
948 Initializes a PDF parser with specified source and security details. @param source the PDF data to be parsed @param decryptionPassword document decryption password @param keyStore input stream for keystore @param alias alias of the key in the keystore @throws IOException if an I/O error occurs during initialization
949 Validates and corrects PDF cross-reference offsets. Uses brute-force search if initial validation fails. @throws IOException if an I/O error occurs during processing
950 Initializes content stream for PDF annotation. @param appearance PDF annotation appearance stream @throws IOException if I/O error occurs
951 Initializes a content stream for a PDF form. @param form the PDFormXObject to write to @throws IOException if I/O error occurs or multiple writers are opened
952 Initializes a content stream for an appearance stream. @param doc the PDDocument containing the appearance stream @param appearance the PDAppearanceStream to write to @throws IOException if I/O error occurs or multiple writers are opened
953 Sets the highest value in the array. @param high value to be set at index 2
954 Sets the page number in the array. @param pageNumber the new page number to set
955 Removes an object from the list if not filtered. @param o object to remove @return true if object was removed, false otherwise
956 Removes an entry at the specified index. @param index index of the entry to remove @return removed element or null if index is out of bounds @throws UnsupportedOperationException if list is filtered
957 Clears both maps and updates document status.
958 Removes an item by key from the map and updates the document. @param key String representing the item to remove @return The removed value or null if not found
959 Recursively collects and updates COSBase objects in a COSArray. @param array the COSArray to process @return true if any descendant requires parent update, false otherwise
960 Sets the origin document state without dereferencing. @param originDocumentState the new document state to set
961 Sets the origin document state for a child update info. @param child the child COSBase object to process
962 Saves FDF document to a specified file. @param fileName the file where FDF data will be saved @throws IOException if an I/O error occurs during writing
963 Draws a shape with specified line width and optional stroke/fill. @param lineWidth the width of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to fill the shape @throws IOException if I/O error occurs during drawing
964 Parses input text into an instruction sequence. @param text the CharSequence to be parsed @return InstructionSequence representing the parsed operations
965 Encrypts or decrypts data using specified algorithm. @param objectNumber unique object identifier @param genNumber generation number @param data input stream containing the data to be processed @param output output stream for the processed data @param decrypt true if decryption mode, false for encryption @throws IOException if an I/O error occurs during processing
966 Validates owner password against computed hash based on encryption revision. @param ownerPassword provided owner password as a byte array @param user user entry bytes @param owner owner entry bytes including hash and salt @param permissions document permission flags @param id document ID @param encRevision encryption revision @param keyLengthInBytes desired output length in bytes for certain revisions @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException on unknown encryption revision or hashing errors
967 Validates user password based on encryption revision. @param password user's password as string @param user user entry bytes @param owner owner entry bytes @param permissions document permission flags @param id document ID @param encRevision encryption revision level @param keyLengthInBytes desired output length in bytes @param encryptMetadata flag to encrypt metadata @return true if password matches, false otherwise @throws IOException on unknown encryption revision or hashing errors
968 Finds a FontBoxFont by PostScript name, checking various font formats. @param postScriptName the PostScript name of the font @return FontBoxFont object or null if not found
969 Writes content of a page to output. Handles sorting, spacing, and line separation for text positions. @throws IOException if an I/O error occurs
970 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
971 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
972 Begins marked content with specified tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
973 Starts marked content in PDF with a specified tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
974 Begins marked content sequence in PDF. @param tag COSName representing the marked content tag @param mcid unique identifier for the marked content @throws IOException if I/O error occurs during writing
975 Begins a marked content sequence with a specified tag and MCID. @param tag COSName representing the marked content tag @param mcid unique identifier for the marked content; must be non-negative @throws IllegalArgumentException if mcid is negative @throws IOException if I/O error occurs during writing
976 Begins a marked content sequence in the PDF document. @param tag COSName representing the marked content tag @param mcid unique identifier for the marked content; must not be negative @throws IOException if I/O error occurs during writing
977 Begins a marked content sequence with specified tag and ID. @param tag COSName representing the marked content tag @param mcid unique identifier for the marked content @throws IllegalArgumentException if mcid is negative @throws IOException if I/O error occurs during writing
978 Sets a marked content point in a PDF document. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs during writing
979 Sets a marked content point in a PDF document. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs during writing
980 Sets a marked content point in a PDF document. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs during writing
981 Sets a marked content point in a PDF document. @param tag COSName representing the tag for the marked content @throws IOException if an I/O error occurs during writing
982 Writes a COSString to an OutputStream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
983 Displays text using the current font and mode. @param text the string to be displayed @throws IOException if an I/O error occurs
984 Draws a circle on the PDF using Bezier curves. @param cs content stream for drawing @param x center X coordinate @param y center Y coordinate @param r radius of the circle @throws IOException if I/O error occurs during drawing
985 Draws a circle using cubic Bezier curves. @param cs the PDAppearanceContentStream to draw on @param x the X coordinate of the center @param y the Y coordinate of the center @param r the radius of the circle @throws IOException if I/O error occurs
986 Draws an arrow on the given content stream. @param cs PDAppearanceContentStream to draw on @param x starting X coordinate @param y starting Y coordinate @param len length of the arrow @throws IOException if I/O error occurs
987 Draws a diamond on the given content stream. @param cs the content stream to draw on @param x the X coordinate of the center @param y the Y coordinate of the center @param r the radius of the diamond @throws IOException if an I/O error occurs
988 Draws a paperclip shape using the provided content stream. @param contentStream PDAppearanceContentStream to draw on @throws IOException if I/O error occurs during drawing
989 Sets line width on demand, excluding default width of 1. @param lineWidth desired width of lines @throws IOException if I/O error occurs
990 Sets the text transformation matrix. @param matrix the Matrix object defining the transformation @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
991 Sets the text transformation matrix. @param matrix the Matrix object defining the transformation @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
992 Sets the text transformation matrix. @param matrix Matrix object defining the transformation @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
993 Sets the text transformation matrix. @param matrix the Matrix object defining the transformation @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
994 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if I/O error occurs during transformation application @throws IllegalStateException if called within text mode
995 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if I/O error occurs during transformation application
996 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if I/O error occurs during transformation application or in text mode
997 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if I/O error occurs during transformation application @throws IllegalStateException if called within text mode
998 Creates and configures a PageDrawer with specified parameters. @param parameters configuration settings for the page drawer @return configured PageDrawer instance @throws IOException if an I/O error occurs during initialization
999 Initializes a PDFormXObject with a given PDDocument. @param document PDDocument to associate with the form XObject
1000 Initializes a PDMetadata object with PDF content from an InputStream. @param doc PDDocument to associate the metadata with @param str InputStream containing PDF data @throws IOException if I/O error occurs during processing
1001 Creates a PDEmbeddedFile from an InputStream. @param doc PDDocument to associate the embedded file with @param str InputStream containing the file data @throws IOException if I/O error occurs during processing
1002 Creates a PDEmbeddedFile from an InputStream. @param doc PDDocument to associate the file with @param input InputStream containing file data @param filter COSName specifying filter chains @throws IOException if I/O error occurs during processing
1003 Prepares a PDImageXObject from byte array. @param document PDDocument to associate the image with @param byteArray input image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @return PDImageXObject object @throws IOException if an I/O error occurs during processing
1004 Initializes a new PDExportFormatAttributeObject with owner. @param owner layout owner name
1005 Initializes a PDF parser with PDF source. @param source the PDF data to be parsed @throws IOException if an I/O error occurs during initialization
1006 Initializes a PDF parser with specified source and decryption password. @param source the PDF data to be parsed @param decryptionPassword document decryption password @throws IOException if an I/O error occurs during initialization
1007 Collects and updates a COSBase object. @param base the COSBase object to process @return true if any descendant requires parent update, false otherwise
1008 Sets the document's trailer and updates its state. @param newTrailer the new COSDictionary to be set as the trailer
1009 Updates the document and sets the origin document state for a COSUpdateInfo child. @param child the COSBase object to update
1010 Updates document state and iterates through children to set their states. @param children iterable collection of COSBase objects to update
1011 Retrieves the PDF object. @return COSBase object representing the PDF content
1012 Decrypts a PDF stream. @param stream COSStream to be decrypted @param objNum unique object identifier @param genNum generation number @throws IOException if an I/O error occurs during decryption
1013 Encrypts the data in a COSStream. @param stream the COSStream to be encrypted @param objNum unique object identifier @param genNum generation number @throws IOException if an I/O error occurs during encryption
1014 Decrypts a COSString using specified object and generation numbers. @param string the COSString to decrypt @param objNum unique object identifier @param genNum generation number @return decrypted COSBase object or original if decryption fails
1015 Encrypts a COSString using specified object and generation numbers. @param string the COSString to be encrypted @param objNum unique object identifier @param genNum generation number @return the encrypted COSString @throws IOException if an I/O error occurs during encryption
1016 Validates owner password against computed hash. @param password provided owner password as a string @param user user entry bytes @param owner owner entry bytes including hash and salt @param permissions document permission flags @param id document ID @param encRevision encryption revision @param keyLengthInBytes desired output length in bytes for certain revisions @param encryptMetadata flag to encrypt metadata @return true if passwords match, false otherwise @throws IOException on unknown encryption revision or hashing errors
1017 Initializes FileSystemFontProvider by scanning local fonts and caching info. @param cache FontCache object to store font information
1018 Writes content of each region to output. Iterates through regions, setting characters and text for each before calling superclass method. @throws IOException if an I/O error occurs
1019 Writes a COSBase object as a token. @param base the COSBase object to write @throws IOException if an I/O error occurs
1020 Displays text with positioning using an array of strings and floats. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs
1021 Displays and writes text with a space followed by an operator. @param text the string to be displayed and written @throws IOException if an I/O error occurs
1022 Draws a line style on the PDF. @param style type of line style to draw @param cs content stream for drawing @param x starting X coordinate @param y starting Y coordinate @param width line width @param hasStroke whether to apply a stroke @param hasBackground whether to fill the background @param ending direction flag @throws IOException if I/O error occurs during drawing
1023 Initializes a PDTransparencyGroup with a given PDDocument. @param document PDDocument to associate with the transparency group
1024 Initializes a PDAppearanceStream with a given PDDocument. @param document PDDocument to associate with the appearance stream
1025 Creates a PDImageXObject from a BufferedImage as a JPEG. @param document PDDocument to associate the image with @param image input image @param quality compression quality (0.0f - 1.0f) @param dpi dots per inch for metadata @return PDImageXObject containing the JPEG representation of the image @throws IOException if an I/O error occurs during processing
1026 Initializes a PDF parser with specified source. @param source the PDF data to be parsed @throws IOException if an I/O error occurs during initialization
1027 Collects and processes a COSDictionary for incremental updates. @param dictionary the COSDictionary to process @return true if any descendant requires parent update, false otherwise
1028 Retrieves a set of COSBase objects. Initializes by collecting from origin if not already done. @return Set of COSBase objects
1029 Adds a COSBase object to the collection. @param object the COSBase object to add
1030 Adds a COSBase object at the specified index. Handles direct and indirect objects differently. @param i index where the object should be added @param object the COSBase object to add
1031 Sets a COSBase object at the specified index. @param index position in the list to update @param object the COSBase object to set
1032 Sets an item in the dictionary with a given key and value. @param key COSName representing the item's key @param value COSBase object to be set or removed if null
1033 Adds all objects from the provided list to the collection. Updates the document state if additions are successful. @param objectsList iterable collection of COSBase objects to add
1034 Adds all elements from the specified collection to this list at the specified position. @param i index at which to insert the first element from the specified collection @param objectList collection of COSBase objects to be added
1035 Updates document state and iterates through children. @param children COSArray of objects to update
1036 Retrieves PDF object by index. @param index position of the PDF object in the list @return COSBase object representing the PDF content or null if not found
1037 Removes a COSBase object from the collection. @param o COSBase object to remove @return true if object was successfully removed, false otherwise
1038 Finds the index of a PDF object in the collection. @param object the COSBase object to search for @return index of the object or -1 if not found
1039 Checks if the map contains a specific value. Handles both direct and wrapped COSObject values. @param value the value to search for @return true if the value is found, false otherwise
1040 Retrieves the key associated with a given value in the map. @param value the value to search for @return COSName key or null if not found
1041 Retrieves object from dictionary by key. @param key the dictionary key @return COSBase object or null if not found
1042 Collects keys of all indirect objects in the PDF document. @param indirectObjects collection to store indirect object keys
1043 Retrieves the linearized dictionary from PDF objects. @return COSDictionary containing linearization info or null if not found
1044 Closes all open resources and marks the object as closed. Handles multiple exceptions by keeping track of the first one.
1045 Collects and processes a COSObject, updating document state as needed. @param object the COSObject to collect @return true if any descendant requires parent update, false otherwise
1046 Accepts a visitor to process the PDF object. @param visitor ICOSVisitor instance to visit this object @throws IOException if an I/O error occurs during visiting
1047 Checks if the given COSBase value is a self-reference to the parent. @param parent parent COSBase object @param value child COSBase object to check @return true if value references itself, false otherwise
1048 Retrieves the length as a COSNumber from the given base object. @param lengthBaseObj the base object containing the length information @return COSNumber representing the length or null if not found @throws IOException if there's an issue with reading the length
1049 Initializes a NormalXReference with byte offset, key, and PDF object. @param byteOffset the byte offset in the file @param key the COSObjectKey for the reference @param object the COSBase object representing the PDF content
1050 Retrieves or creates a unique key for a PDF object. @param obj the COSBase object to process @return COSObjectKey representing the object's key
1051 Retrieves the key for a given PDF object. @param object COSBase object representing the PDF content @return COSObjectKey associated with the object, or null if not found
1052 Checks if the pool contains a given PDF object. @param object PDF object to check @return true if object is in the pool, false otherwise
1053 Prepares a stream object for later use. @param key unique identifier for the PDF object @param object COSBase object representing the PDF content
1054 Outputs a curl template by drawing cubic Bezier curves. @param template array of control points for the curve @param x horizontal offset for the template @param y vertical offset for the template @throws IOException if I/O error occurs during drawing
1055 Calculates and adds an arc segment to the output list or directly draws it. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center X coordinate @param cy center Y coordinate @param rx radius X @param ry radius Y @param out list to store points, if null curveTo is called directly @param addMoveTo whether to add a move-to command before drawing the arc @throws IOException if I/O error occurs during drawing
1056 Displays text with positioning using an array of strings and floats. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs
1057 Processes an array of text and float objects for display. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs
1058 Displays text with positioning using an array of strings and floats. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs
1059 Processes an array to display text with positioning. @param textWithPositioningArray array containing String and Float objects @throws IOException if I/O error occurs
1060 Displays and writes text followed by an operator. @param text the string to be displayed and written @throws IOException if an I/O error occurs
1061 Displays and writes text with a space followed by an operator. @param text the string to be displayed and written @throws IOException if an I/O error occurs
1062 Displays and writes text followed by an operator. @param text the string to be displayed and written @throws IOException if an I/O error occurs
1063 Displays and writes text with a space followed by an operator. @param text the string to be displayed and written @throws IOException if an I/O error occurs
1064 Creates a PDImageXObject from a BufferedImage as a JPEG with default DPI. @param document PDDocument to associate the image with @param image input image @param quality compression quality (0.0f - 1.0f) @return PDImageXObject containing the JPEG representation of the image @throws IOException if an I/O error occurs during processing
1065 Returns an iterator over COSBase objects. @return Iterator of COSBase objects from the collection
1066 Adds a COSObjectable to the collection. @param object the COSObjectable object to add
1067 Ensures the collection grows to a specified size, adding objects and updating status. @param size desired size of the collection @param object COSBase object to add if needed
1068 Sets a float array in the PDF document. @param value array of float values to be set
1069 Prepares and returns a COSStream for cross-reference data. @return the prepared COSStream object @throws IOException if I/O error occurs during stream creation or writing
1070 Initializes a COSArrayList with an initial object and PDF dictionary entry. @param actualObject the actual Java object to manage @param item the corresponding COSBase item in the PDF @param dictionary the parent COSDictionary containing the list @param dictionaryKey the key under which the list is stored in the dictionary
1071 Converts a list of objects to a COSArray. @param cosObjectableList list of objects to convert @return COSArray containing converted COSBase objects
1072 Initializes a PDRange with default values. Creates a COSArray and sets initial values to zero and one.
1073 Initializes a new FDFOptionElement with two empty strings.
1074 Initializes a PDFontSetting with default settings. Constructs a COSArray, adds null and a COSFloat with value 1.
1075 Converts components and pattern name to a COSArray. @return COSArray containing component elements and optional pattern name
1076 Initializes a PDDeviceN object with default COSArray and placeholders.
1077 Initializes a PDGamma object with default zero values. Constructs a COSArray and adds three COSFloat.ZERO elements.
1078 Retrieves the alternate color space. @return PDColorSpace instance representing the alternate color space @throws IOException if an error occurs during creation or invalid input is found
1079 Initializes a PDIndexed object with default settings. Constructs a COSArray and adds necessary elements for indexed color space.
1080 Creates a default range array with predefined float values. @return COSArray containing four COSFloat objects representing the range
1081 Initializes a PDPattern with given resources. @param resources PDResources to associate with the pattern
1082 Initializes a PDSeparation object with default values. Constructs a COSArray and sets up initial entries for separation.
1083 Initializes a PDTristimulus with zero values. Constructs a COSArray and adds three COSFloat.ZERO elements.
1084 Constructs a PDTristimulus from an array of float values. @param array the array containing up to 3 float values
1085 Sets the transformation matrix for this object. @param transform the AffineTransform to apply
1086 Creates a PDImageXObject from a byte array. @param document PDDocument to add the image to @param byteArray byte array containing image data @return PDImageXObject representing the image @throws IOException if an I/O error occurs
1087 Converts float values to a COSArray. @return COSArray containing COSFloat objects
1088 Sets a COSObjectable at the specified index. @param index position in the list to update @param object the COSObjectable object to set
1089 Sets an integer value at a specified index. @param index position in the list to update @param value numeric value to set
1090 Sets or retrieves a PDF name at the specified index. @param index position in the list to update @param name the PDF name string
1091 Sets a string value at the specified index. @param index position in the list to update @param string input string to set or null to remove
1092 Sets the minimum value of the range. @param min the minimum value to be set
1093 Sets maximum value in the range array. @param max the maximum float value to store
1094 Sets the lower-left X coordinate of the rectangle. @param value the X coordinate to be set
1095 Sets the lower left Y coordinate of the rectangle. @param value the Y coordinate to be set
1096 Sets the x-coordinate of the upper right corner. @param value the x-coordinate value
1097 Sets the upper right Y coordinate of the rectangle. @param value the Y coordinate value to be set
1098 Sets a color at the specified index. @param index position in the list to update @param colour PDGamma object representing the color
1099 Decrypts all elements in a COSArray. @param array the COSArray to decrypt @param objNum object number for decryption context @param genNum generation number for decryption context
1100 Sets an option by converting it to a COSString. @param opt the option string to set
1101 Sets default appearance string. @param da appearance string to apply
1102 Sets the font size in the PDF document. @param size the desired font size
1103 Sets colorant names in PDF. @param names list of colorant names to set
1104 Sets PDDeviceNAttributes for the device. @param attributes PDDeviceNAttributes object to set
1105 Sets the alternate color space. @param cs PDColorSpace object to set
1106 Sets the radius value in the PDF document. @param r the radius to be stored
1107 Sets the green component of a color. @param g green value as float
1108 Sets the B value at index 2. @param b float value to be stored
1109 Sets the base color space. @param base PDColorSpace object to be set
1110 Sets the colorant name in the PDF document. @param name the name of the colorant to set
1111 Sets the alternate color space. @param colorSpace the PDColorSpace to set as alternate
1112 Sets the X coordinate value. @param x the X coordinate to be stored
1113 Sets the Y coordinate value. @param y the Y coordinate to be stored
1114 Sets the Z value in the PDF. @param z the Z coordinate to be stored
1115 Sets an item in the dictionary using a key and a COSObjectable value. @param key COSName representing the item's key @param value COSObjectable object to be converted to COSBase and set
1116 Sets a boolean value in the PDF dictionary. @param key the key for the boolean value @param value the boolean value to set
1117 Sets a boolean value in the PDF dictionary. @param key COSName representing the item's key @param value boolean to be stored
1118 Sets an item in the dictionary using a string key. @param key PDF name as a string @param value COSBase object to be set or removed if null
1119 Sets a PDF name in the dictionary. @param key COSName representing the item's key @param value string value to be converted to COSName
1120 Sets a string item in the dictionary. @param key COSName representing the item's key @param value string to be set or removed if null
1121 Sets an integer value in the PDF dictionary. @param key COSName representing the item's key @param value integer value to be stored
1122 Sets a long value in the dictionary. @param key COSName representing the item's key @param value long value to be stored
1123 Sets a float value in the dictionary. @param key COSName representing the item's key @param value float value to be stored
1124 Creates a COSStream from a dictionary and sets its properties. @param dictionary source dictionary containing key-value pairs @param startPosition starting position in the stream @param streamLength length of the stream @return created COSStream object @throws IOException if an I/O error occurs
1125 Sets the encryption dictionary in the PDF trailer. @param encDictionary COSDictionary containing encryption details
1126 Sets the document ID in the PDF trailer. @param id COSArray containing the document ID
1127 Merges entries from source dictionary into destination dictionary, excluding specified keys. @param src source COSDictionary to merge from @param dst destination COSDictionary to merge into @param cloner PDFCloneUtility for cloning COSBase objects @param exclude set of COSName keys to exclude from merging @throws IOException if an I/O error occurs during cloning
1128 Parses the next token from the input source. @return parsed COSBase object or null if end of stream is reached @throws IOException if an I/O error occurs during parsing
1129 Initializes a new PDDocument with a specified stream cache creation function. @param streamCacheCreateFunction function to create a StreamCache instance
1130 Sets document information. @param info PDDocumentInformation object containing metadata
1131 Initializes a PDDocumentCatalog with the given document. @param doc the PDF document associated with this catalog
1132 Sets the list of threads in the PDF document. @param threads List of PDThread objects representing the threads
1133 Sets the list of output intents in the document. @param outputIntents list of PDOutputIntent objects to set
1134 Sets the crop box for a PDF page. @param cropBox PDRectangle defining the new crop box or null to remove it
1135 Sets the contents of a PDF page. @param contents list of PDStream objects representing content streams
1136 Sets thread beads on a PDF page. @param beads list of PDThreadBead objects representing thread beads
1137 Sets annotations on a PDF page. @param annotations list of PDAnnotation objects to add
1138 Sets the viewports for a PDF page. @param viewports list of PDViewportDictionary objects representing viewports
1139 Initializes a PDPageTree with an empty page structure. Sets up the root dictionary and initializes necessary items.
1140 Adds an element to the collection. Handles special cases for parent dictionaries and strings. @param o element to add @return true if the element was added successfully
1141 Clears all objects and updates the document status.
1142 Replaces an element at the specified index. @param index position of the element to replace @param element new element to set @return replaced element @throws UnsupportedOperationException if list is filtered
1143 Adds an element at the specified index. Throws UnsupportedOperationException if adding is filtered. Updates parent dictionary and array accordingly. @param index position where the element should be added @param element object to add
1144 Stores a key-value pair in the map and updates the PDF dictionary. @param key String key to be stored @param value Value to be stored, must implement COSObjectable @return Previous value associated with the key, or null if none
1145 Converts label map to a PDF dictionary. @return COSDictionary representing the label mapping
1146 Constructs a new PDComplexFileSpecification. Initializes a COSDictionary and sets its type to "Filespec".
1147 Constructs a PDComplexFileSpecification from a dictionary. @param dict the dictionary to use or null for a new one
1148 Sets the range values for a PDF object. @param rangeValues COSArray containing the range values
1149 Sets domain values in the PDF dictionary. @param domainValues COSArray containing domain values
1150 Sets the encode values for a PDF object. @param encodeValues COSArray containing encoding values
1151 Sets the decode values for a PDF object. @param decodeValues array of COSBase objects representing decode values
1152 Sets the K value in the PDF dictionary. @param k COSBase object representing the K value to be set
1153 Sets the class map for the PDF object. @param classMap mapping of attribute names to their values
1154 Sets user properties for a PDF document. @param userProperties list of PDUserProperty objects to be set
1155 Sets the line dash pattern for PDF graphics. @param dashArray COSArray representing the dash pattern or null to clear it
1156 Sets the cryptographic filter method in the dictionary. @param cfm COSName representing the cryptographic filter method
1157 Sets the filter for the PDF object. @param filter name of the filter to be applied
1158 Sets the owner key in the PDF document. @param o byte array representing the owner key @throws IOException if an I/O error occurs
1159 Sets user key in PDF document. @param u byte array representing the user key
1160 Sets the owner encryption key in the PDF document. @param oe byte array representing the encryption key @throws IOException if an I/O error occurs while setting the key
1161 Sets user encryption key in PDF document. @param ue byte array representing the encryption key
1162 Sets the recipients for a PDF document. @param recipients array of byte arrays representing recipient data
1163 Sets the filter name for the stream. @param streamFilterName COSName representing the stream filter
1164 Sets the string filter name in the PDF dictionary. @param stringFilterName COSName representing the filter name
1165 Sets permissions in PDF document. @param perms byte array representing permissions
1166 Removes V4.5 filters from the PDF dictionary.
1167 Constructs a new FDF annotation. Initializes a COSDictionary and sets its type to ANNOT.
1168 Sets the annotation's color. @param c Color object to be set or null to remove color
1169 Sets rich contents of an annotation. @param rc rich content string to be set
1170 Sets the interior color of an annotation. @param color Color object representing the interior color
1171 Sets the callout line coordinates. @param callout array of float values representing the callout points
1172 Sets the ink list for an annotation. @param inklist list of float arrays representing ink data
1173 Sets the annotation's line coordinates. @param line array of float values representing line coordinates
1174 Sets the interior color of an annotation. @param color Color object representing the interior color or null to remove it
1175 Sets the vertices of an annotation. @param vertices array of float values representing vertex coordinates
1176 Sets the interior color of an annotation. @param color Color object representing the interior color
1177 Sets vertex coordinates for an annotation. @param vertices array of float values representing vertex coordinates
1178 Sets the interior color of an annotation. @param color Color object representing the interior color
1179 Sets the interior color of an annotation. @param color Color object representing the interior color
1180 Sets annotation coordinates. @param coords array of float values representing coordinates
1181 Sets the document ID in the FDF. @param id COSArray representing the document ID
1182 Sets PDF form fields in FDF document. @param fields list of FDFField objects to be set
1183 Sets the list of FDF pages in the document. @param pages list of FDFPage objects to be added
1184 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to be set
1185 Sets the differences stream in the FDF document. @param diff COSStream representing the differences data
1186 Sets embedded FDF files in the PDF document. @param embedded list of PDFileSpecification objects representing embedded FDFs
1187 Sets child fields in an FDF form. @param kids list of FDFField objects representing child fields
1188 Sets the value of a PDF field. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during processing
1189 Sets the value of the field. @param value COSBase object representing the new value
1190 Sets the field flags for a PDF form field. @param ff integer representing the field flags
1191 Sets field flags in a PDF form. @param ff integer representing the field flags
1192 Sets clear field flags in a PDF form. @param ff integer representing the field flags
1193 Sets widget field flags. @param f flag value to set
1194 Sets widget field flags. @param ff flag values to set
1195 Sets flags for a clear widget field. @param ff integer representing the flag values
1196 Sets rich text value for the field. @param rv COSString containing rich text data
1197 Sets rich text content in the PDF field. @param rv COSStream containing rich text data
1198 Sets the "before" attribute in the PDF dictionary. @param before text to be set as the "before" attribute
1199 Sets the "after" property in the PDF dictionary. @param after text to be set as the "after" value
1200 Sets document actions from a map. @param map key-value pairs of action names and PDActionJavaScript objects
1201 Sets PDF form templates on a page. @param templates list of FDFTemplate objects to be set
1202 Sets form fields in a PDF template. @param fields list of FDFField objects representing form fields
1203 Builds character width array for CID font. @param cidToGid mapping of CIDs to GIDs @throws IOException if an I/O error occurs
1204 Constructs a PDFont object with default settings. Initializes the COSDictionary and sets its type to "Font".
1205 Initializes a new PDFontDescriptor instance. Sets up a COSDictionary with the type set to FONT_DESC.
1206 Sets the font name in the PDF dictionary. @param fontName the name of the font to be set
1207 Sets the font family in the PDF dictionary. @param fontFamily name of the font family to set
1208 Sets the font stretch in a PDF dictionary. @param fontStretch string representing the font stretch value
1209 Sets the font bounding box in the dictionary. @param rect PDRectangle representing the font bounding box
1210 Sets the character set for a PDF dictionary. @param charSet character set string to be set
1211 Sets the gamma value in the PDF dictionary. @param value the gamma value to be stored
1212 Sets the gamma value in the PDF dictionary. @param gamma PDGamma object representing the gamma value or null to remove it
1213 Sets the transformation matrix in a PDF dictionary. @param matrix 3x3 transformation matrix to be set
1214 Sets the colorants for a PDF document. @param colorants map of color space names to PDColorSpace objects
1215 Initializes a PDTransparencyGroupAttributes object. Creates a COSDictionary and sets the S key to COSName.TRANSPARENCY.
1216 Sets PDF filter names in document parameters. @param filters list of filter names to apply
1217 Initializes a new PDOptionalContentMembershipDictionary. Sets the dictionary type to "OCMD".
1218 Sets the visibility policy in the dictionary. @param visibilityPolicy COSName representing the visibility policy
1219 Sets the transformation matrix in the PDF object. @param transform AffineTransform object representing the transformation
1220 Sets or removes the bounding box for a PDF object. @param bbox PDRectangle representing the bounding box to set, or null to remove it
1221 Sets the background for an object. @param newBackground COSArray representing the new background
1222 Sets the bounding box for a PDF object. @param newBBox PDRectangle representing the new bounding box
1223 Sets the color space for this object. @param colorSpace PDColorSpace to be set or null to remove it
1224 Sets a new array of functions in the PDF object. @param newFunctions COSArray containing the functions to be set
1225 Sets the transformation matrix in a PDF object. @param transform the AffineTransform to be applied
1226 Sets the domain for a PDF object. @param newDomain COSArray representing the new domain
1227 Sets the Extend array in the COS object. @param newExtend COSArray representing the new Extend values
1228 Sets the domain for the current object. @param newDomain COSArray representing the domain to be set
1229 Sets coordinates for an annotation. @param newCoords COSArray containing the new coordinates
1230 Sets decode values for the PDF object. @param decodeValues COSArray containing decode values
1231 Initializes a new PDExtendedGraphicsState instance. Sets up the dictionary with the type "ExtGState".
1232 Sets blend mode in PDF dictionary. @param bm BlendMode object to be applied
1233 Sets or removes a float item in the dictionary. @param key COSName representing the item's key @param value Float value to be set or null to remove the item
1234 Sets the transfer function in the PDF dictionary. @param transfer COSBase object representing the transfer function
1235 Sets the TR2 item in the dictionary. @param transfer2 COSBase object representing the transfer value
1236 Sets the list of next actions. @param next list of PDAction objects representing next actions
1237 Sets the T (Type) item in the action dictionary. @param t COSBase object representing the type to be set
1238 Sets horizontal alignment flag. @param h boolean indicating horizontal alignment
1239 Sets fields in the action dictionary. @param array COSArray containing field data
1240 Sets the sound stream for an action. @param sound COSStream representing the audio to be played
1241 Sets the fields for an action. @param array COSArray containing field data
1242 Sets the destination item in the action dictionary. @param d COSBase object representing the destination
1243 Sets the 'B' item in the action dictionary. @param b COSBase object to be set as the 'B' item
1244 Sets the relationship type in the PDF dictionary. @param relationship COSName representing the relationship (must be 'P' or 'C') @throws IllegalArgumentException if the relationship is not 'P' or 'C'
1245 Initializes a new annotation with a type of "Annot".
1246 Sets the rectangle in the PDF dictionary. @param rectangle PDRectangle to be set
1247 Sets the border of a PDF annotation. @param borderArray COSArray containing border settings
1248 Sets rectangle differences for a PDF object. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1249 Sets rectangle differences for a PDF page. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1250 Sets the callout coordinates. @param callout array of float values representing the callout points
1251 Sets the ink list in a PDF document. @param inkList 2D array of float values representing paths
1252 Sets line coordinates in PDF object. @param l array of float values representing line coordinates
1253 Sets quad points for annotation. @param quadPoints array of float values defining the quadrilateral points
1254 Sets rich content text in the PDF object. @param rc rich content string to be stored
1255 Sets vertices of a shape using an array of floats. @param points array of float values representing vertex coordinates
1256 Sets vertices of a shape using an array of float coordinates. @param points array of float values representing vertex coordinates
1257 Sets the parent annotation of this markup. @param annot PDAnnotationMarkup object representing the parent annotation
1258 Sets rectangle differences for a PDF box. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1259 Sets quad points for annotation. @param quadPoints array of float values representing the quad points
1260 Initializes a new PDAppearanceDictionary with a required "N" entry.
1261 Sets the dash style for line drawing. @param dashArray COSArray containing dash pattern
1262 Initializes a PDSeedValue with a COSDictionary. Sets the "Type" item to "SV". Marks the dictionary as using direct objects.
1263 Sets the filter for the PDF object. @param filter COSName representing the filter type
1264 Sets the sub-filter for a PDF document. @param subfilter list of sub-filter names to be set
1265 Sets the digest method for a PDF document. @param digestMethod list of allowed digest names @throws IllegalArgumentException if any name is not allowed
1266 Sets the list of reasons in the PDF document. @param reasons List of string values representing the reasons
1267 Sets the MDP seed value in the document. @param mdp PDSeedValueMDP object to be set or removed if null
1268 Sets the time stamp in the PDF document. @param timestamp PDSeedValueTimeStamp object to be set
1269 Sets the legal attestation in the PDF document. @param legalAttestation list of string values to be set as legal attestation
1270 Initializes a new PDSeedValueCertificate instance. Creates a COSDictionary and sets its type to SV_CERT.
1271 Sets the document subject using a list of byte arrays. @param subjects list of byte arrays representing the subject
1272 Sets the subject distinguished name (DN) in the PDF document. @param subjectDN list of maps containing key-value pairs for DN attributes
1273 Sets the key usage extensions in the PDF dictionary. @param keyUsageExtensions list of key usage extension strings
1274 Sets the issuer in the PDF document. @param issuers list of byte arrays representing issuers
1275 Sets OID in the dictionary using a list of byte arrays. @param oidByteStrings list of byte arrays representing the OID
1276 Constructs a new PDSignature instance. Initializes its dictionary with the "Type" entry set to "Sig".
1277 Sets the document type. @param type COSName representing the document type
1278 Sets the PDF filter. @param filter COSName representing the filter type
1279 Sets the SubFilter for the PDF dictionary. @param subfilter COSName representing the SubFilter value to be set
1280 Sets byte range for PDF signature. @param range array of four integers defining the byte range
1281 Sets the contents of the PDF object from a byte array. @param bytes input byte array containing the content data
1282 Sets the text color in a PDF document. @param textColor Color object representing the desired text color
1283 Initializes a new PDAcroForm with an empty fields array. @param doc the PDF document to associate with this form
1284 Sets form fields in the document. @param fields list of PDField objects representing form fields
1285 Sets the calculation order of form fields. @param fields list of PDField objects representing the fields in desired order
1286 Constructs a new PDButton instance. @param acroForm the form containing the button field
1287 Sets export values for the PDF object. @param values list of string values to set as export options
1288 Constructs a new PDChoice instance. @param acroForm the form containing the field
1289 Sets the list of child fields for this form. @param children List of PDField objects representing child fields
1290 Sets the value for the key "V" in the COS object. @param object COSBase object to be set
1291 Sets default value in PDF dictionary. @param value COSBase object representing the default value
1292 Constructs a new PDSignatureField instance. @param acroForm the form containing the field
1293 Creates a new PDTextField instance. @param acroForm the form containing the field
1294 Sets or removes the default style string in the PDF document. @param defaultStyleString the style string to set, or null to remove it
1295 Sets the rich text value in the PDF object. @param richTextValue the rich text to set or null to remove it
1296 Sets the coordinate system origin. @param coordSystemOrigin array of float values representing the origin coordinates
1297 Initializes a new PDThread with a COSDictionary. Sets the type to "Thread".
1298 Sets the transition direction for a PDF page. @param direction PDTransitionDirection object representing the direction
1299 Sets the duration of an item in the PDF dictionary. @param duration the duration value to be stored
1300 Sets the fly scale for an object. @param scale the scaling factor to be applied
1301 Sets whether the fly area is opaque. @param opaque boolean indicating opacity status
1302 Adds all elements from the provided collection. Throws UnsupportedOperationException if list is filtered. Updates dictionary item to an array if parentDict exists. @param c collection of elements to add @return true if successful, false otherwise
1303 Processes font color setting based on operands. @param operands list of COSBase objects representing color components @throws IOException if operands are missing or invalid
1304 Adds all elements from a collection at a specified index. @param index position where elements are to be inserted @param c collection of elements to add @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding is not permitted
1305 Adds all objects from the provided list to this array. @param objectList COSArray containing objects to add
1306 Converts PDF objects to a float array. @return float array of values from PDF objects or zeros if not numbers
1307 Converts PDF objects to a list of Floats. @return List of Float values or null for non-COSNumber objects
1308 Converts PDF objects to a list of Integer values. @return List of Integer values or null for non-COSNumber objects
1309 Updates parent entry and structure type for each dictionary in the array. @param kArray array of COSBase objects @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
1310 Retrieves the minimum value of a range. @return minimum value as a float
1311 Retrieves the maximum value from a range array. @return maximum value as a float
1312 Retrieves a PDGamma object by index. @param index position of the PDF object in the list @return PDGamma object or null if not found
1313 Retrieves the first option as a string. @return the string representation of the first option or null if not found
1314 Retrieves the default appearance string from PDF options. @return string representing the default appearance or null if not found
1315 Retrieves a blend mode instance from a COSBase object. @param cosBlendMode PDF object representing the blend mode @return BlendMode object or NORMAL if not found
1316 Retrieves colorant names from the PDF. @return List of colorant names as strings
1317 Retrieves the alternate color space for a PDF object. @return PDColorSpace instance representing the alternate color space or null if not set @throws IOException if creation of the color space fails
1318 Retrieves colorant name from the array. @return String representing the colorant name or null if not found
1319 Creates a PDDestination from a COSBase object. @param base the COSBase object representing the destination @return PDDestination object or null if input is null @throws IOException if the input cannot be converted to a Destination
1320 Retrieves the first PDF page from the array. @return PDPage object or null if no valid page is found
1321 Retrieves the page number from the PDF document. @return page number as an integer, or -1 if not found
1322 Retrieves the zoom level from a PDF document. @return float representing the zoom level or -1 if not found
1323 Initializes a Matrix from a COSArray. @param array COSArray containing matrix values
1324 Retrieves object from dictionary by string key. @param key the dictionary key as a string @return COSBase object or null if not found
1325 Retrieves object from dictionary by first key; if not found, tries second key. @param firstKey primary dictionary key @param secondKey secondary dictionary key (optional) @return COSBase object or null if both keys are not found
1326 Retrieves a COSName object by key. @param key the dictionary key @return COSName object or null if not found
1327 Retrieves COSDictionary by key from the PDF document. @param key the dictionary key @return COSDictionary object or null if not found
1328 Retrieves a COSStream object by key. @param key the dictionary key @return COSStream object or null if not found
1329 Retrieves a COSArray from the dictionary by key. @param key the dictionary key @return COSArray object or null if not found or not an instance of COSArray
1330 Retrieves a COSName from the dictionary by key, returning default if not found. @param key the dictionary key @param defaultValue value to return if key is not present or not a COSName @return COSName object or default value
1331 Retrieves and converts dictionary value to string by key. @param key the dictionary key @return String representation of the value or null if not found
1332 Retrieves string value from dictionary by key. @param key the dictionary key @return string value or null if not found
1333 Retrieves date from dictionary by key. @param key the dictionary key @return Calendar object or null if not found or conversion fails
1334 Retrieves a long value from the dictionary by key. @param key the dictionary key @param defaultValue default value to return if key not found or not a COSNumber @return long value associated with the key or default value
1335 Retrieves a float value from the dictionary by key. @param key the dictionary key @param defaultValue default float value if key not found or not a COSNumber @return float value associated with the key or default value
1336 Wraps existing page content in a save/restore graphics state pair. @param page PDPage object to modify @throws IOException if I/O error occurs
1337 Retrieves content streams from a PDF page. @return Iterator of PDStream objects representing the content streams
1338 Checks if the page has content. @return true if page contains non-empty stream or array, false otherwise
1339 Converts basic COS types in a dictionary to Java objects. @param map COSDictionary containing COSBase objects @return COSDictionaryMap with converted values or null if input is null @throws IOException for unknown object types
1340 Removes an attribute from the PDF object. @param attributeObject the attribute to remove
1341 Retrieves class names from a PDF dictionary. @return Revisions object containing class names and their revision numbers
1342 Removes a class name from the PDF object. @param className the name of the class to remove
1343 Appends a child object to the K entry in the dictionary. @param object the COSBase object to append
1344 Inserts a new PDF object before a reference object. @param newKid the new COSBase object to insert @param refKid the reference object before which to insert
1345 Removes a child object from the kids list. @param object the COSBase object to remove @return true if the object was successfully removed, false otherwise
1346 Retrieves the K value from the PDF dictionary. @return COSBase object representing the K value or null if not found
1347 Retrieves value from dictionary under key "V". @return COSBase object or null if not found
1348 Checks if metadata encryption is enabled. @return boolean indicating whether metadata is encrypted; defaults to true
1349 Retrieves and copies the owner encryption key. @return A new byte array containing the owner encryption key, or null if not found
1350 Retrieves the user encryption key from the dictionary. @return A copy of the user encryption key as a byte array, or null if not found @throws IOException if an I/O error occurs while accessing the dictionary
1351 Retrieves permissions from the dictionary. @return byte array containing permissions or null if not found
1352 Retrieves the page number associated with an annotation. @return Page number as Integer, or null if not found
1353 Retrieves and validates COS value from the field dictionary. @return COSBase object if valid, null if not found @throws IOException if unknown type is encountered
1354 Retrieves field flags from a PDF form field. @return Integer representing field flags or null if not found
1355 Retrieves the set field flags of a PDF form field. @return Integer value representing the set field flags, or null if not found
1356 Retrieves clear field flags from a PDF form field. @return Integer value of clear field flags or null if not set
1357 Retrieves widget field flags. @return Integer value of the flags or null if not found
1358 Retrieves the set widget field flags. @return Integer value of the flags or null if not found
1359 Retrieves clear widget field flags. @return Integer value of the flags or null if not found
1360 Retrieves or sets the default width value. @return the default width as a float
1361 Retrieves the color space from the dictionary. @return PDColorSpace object or null if not found
1362 Retrieves or creates the color space for this object. @param resources PDF resources containing color definitions @return PDColorSpace instance, null if not defined @throws IOException if an error occurs during creation
1363 Initializes a PDOptionalContentGroup with a given COS dictionary. @param dict the COS dictionary representing the optional content group @throws IllegalArgumentException if the dictionary is not of type 'OCG'
1364 Constructs a PDOptionalContentMembershipDictionary from a given COS dictionary. @param dict the COS dictionary representing the optional content membership @throws IllegalArgumentException if the dictionary does not have the correct type (OCMD)
1365 Retrieves the overprint mode from the dictionary. @return Integer representing the overprint mode or null if not found
1366 Retrieves and creates a soft mask from the dictionary. @return PDSoftMask object or null if not found
1367 Retrieves float value from dictionary by key. @param key the dictionary key @return Float value or null if not found or not a number
1368 Retrieves transfer object from dictionary. @return COSBase object or null if invalid
1369 Retrieves transfer object from dictionary. @return COSBase object or null if not found or size mismatch
1370 Retrieves the backdrop color array. @return COSArray representing the backdrop color or null if not set
1371 Determines the open mode for a document. @return OpenMode enum indicating how to open the document
1372 Retrieves the 'T' entry from the action dictionary. @return COSBase object representing the 'T' entry or null if not found
1373 Determines the open mode based on dictionary settings. @return OpenMode enum indicating window behavior
1374 Determines the open mode for a document. @return OpenMode indicating how to open the document
1375 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
1376 Initializes a PDAnnotation with a given dictionary. @param dict the COSDictionary to initialize the annotation with
1377 Retrieves the contents of a PDF object. @return A byte array containing the contents or an empty array if not found
1378 Retrieves XFA resource from PDF dictionary. @return PDXFAResource object or null if not found
1379 Retrieves options from the PDF field. @return list of option strings or empty if none found
1380 Retrieves display values for options. @return List of option display strings
1381 Retrieves and converts a value associated with a COSName key. @param name the COSName key @return List of string values or empty list if no matching object
1382 Retrieves inheritable attribute from dictionary or parent. @param key the attribute key to fetch @return COSBase object of the attribute or null if not found
1383 Retrieves value from PDF dictionary. @return COSBase object associated with key "V"
1384 Retrieves and converts the value associated with key "V" to a string. @return String representation of the value or empty string if not found
1385 Retrieves default value from PDF dictionary. @return COSBase object representing default value or null if not found
1386 Converts the PDF dictionary to a string representation. @return string representation of the PDF dictionary or an error message if an exception occurs
1387 Collects keys of all indirect objects in the PDF document. @param indirectObjects collection to store indirect object keys
1388 Updates the highest XRef object number based on imported page objects. @param importedPage the PDPage to process
1389 Closes the visual signature and PDF source resources. Ensures both are closed even if an exception occurs during closure of one.
1390 Writes a PDF object to the output stream. @param key unique identifier for the PDF object @param obj COSBase object representing the PDF content @throws IOException if an I/O error occurs
1391 Writes a PDF object reference to the standard output. @param obj the COSBase object to reference
1392 Retrieves the key for a given PDF object from the pool. @param object COSBase object representing the PDF content @return COSObjectKey associated with the object, or null if not found
1393 Puts a PDF object in the pool with a specified or generated key. @param key the desired COSObjectKey for the object @param object the COSBase object to store @return the actual COSObjectKey used, or null if not added
1394 Checks if the PDF object pool contains a given PDF object. @param object PDF object to check @return true if object is in the pool, false otherwise
1395 Creates a list of COSWriterObjectStream objects. @return List of COSWriterObjectStream objects
1396 Adds the first intermediate curl to the path. @param angleCur current angle in radians @param r radius of the curl @param alpha additional angle parameter @param cx center X coordinate @param cy center Y coordinate @throws IOException if I/O error occurs during drawing
1397 Generates intermediate curl template points. @param angleCur current angle in radians @param r radius of the curl @return array of Point2D.Double representing curl points @throws IOException if I/O error occurs during point calculation
1398 Draws an arc segment. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius X @param ry radius Y @param cx center X coordinate @param cy center Y coordinate @param out list to store points, if null curveTo is called directly @param addMoveTo whether to add a move-to command before drawing the arc @throws IOException if I/O error occurs during drawing
1399 Processes lines of text for alignment and spacing. @param lines list of Line objects to process @param isFirstParagraph flag indicating if it's the first paragraph @throws IOException if an I/O error occurs during processing
1400 Creates a PDImageXObject from a BufferedImage as a JPEG with default quality. @param document PDDocument to associate the image with @param image input image @return PDImageXObject containing the JPEG representation of the image @throws IOException if an I/O error occurs during processing
1401 Creates a PDICCBased object with an associated PDDocument. Initializes the ICCBased array and adds a PDStream to it. @param doc PDDocument instance for the ICCBased object
1402 Constructs a PDPattern with specified resources and color space. @param resources PDResources object containing pattern resources @param colorSpace PDColorSpace defining the color model for the pattern
1403 Sets the Optional Content Groups (OCGs) in the document. @param ocgs list of PDPropertyList objects representing OCGs
1404 Sets the changeX values in the PDF dictionary. @param changeXs array of PDNumberFormatDictionary objects representing changeX values
1405 Sets the Y-axis number format dictionaries. @param changeYs array of PDNumberFormatDictionary objects
1406 Sets the number format distances. @param distances PDNumberFormatDictionary array representing distances
1407 Sets the areas in the dictionary. @param areas array of PDNumberFormatDictionary objects representing the areas
1408 Sets the angles for a number format. @param angles PDNumberFormatDictionary array containing angle settings
1409 Sets line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1410 Grows the collection to a specified size. @param size desired size of the collection
1411 Creates a clone of a PDF object. @param src source PDF object to clone @param dstParent parent PDF object for the cloned item @param currentPageDict current page dictionary @return cloned PDF object
1412 Sets decode parameters for a stream. @param decodeParams list of objects representing decode parameters
1413 Sets file decode parameters. @param decodeParams list of decode parameters
1414 Sets the list of child nodes (kids) for a PDF object. @param kids List of objects representing child nodes
1415 Sets options for a PDF form field. @param options list of option values to be set
1416 Retrieves the PDRange for a specific color component. @param n index of the color component @return PDRange object representing the range or default if not found
1417 Builds character widths for CID font. @param cidFont COSDictionary to store width data @throws IOException if I/O error occurs during processing
1418 Sets the line dash pattern in the PDF dictionary. @param dashPattern PDLineDashPattern object representing the dash pattern
1419 Sets the guide line color in a PDF document. @param color PDColor object representing the new guide line color
1420 Sets the color in the PDF object. @param c PDColor object to be set
1421 Sets the interior color of a PDF element. @param ic PDColor object representing the interior color
1422 Sets the interior color of a PDF element. @param ic PDColor object representing the interior color to be set
1423 Sets the interior color of a PDF element. @param ic PDColor object representing the interior color to be set
1424 Sets the interior color of the PDF object. @param ic PDColor object representing the interior color
1425 Sets the border color of a PDF object. @param c PDColor representing the border color to be set
1426 Sets the background color. @param c PDColor object representing the background color
1427 Sets text color for PDF content. @param textColor PDColor object representing the text color
1428 Creates a PDImageXObject from an input stream. @param document PDDocument to add the image to @param stream input stream containing image data @return PDImageXObject representing the image @throws IOException if an I/O error occurs
1429 Sets the font for text rendering. @param font PDFont object to apply
1430 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1431 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1432 Sets the first page of the document. @param page PDPage object to be set as the first page
1433 Creates a retranslated rectangle with dimensions set to the current width and height. @return PDRectangle object with updated dimensions
1434 Sets the before color. @param colour PDGamma object representing the color
1435 Sets the after-colour using PDGamma. @param colour PDGamma object representing the color
1436 Sets the start color for a gradient. @param colour PDGamma object representing the start color
1437 Sets the end color of a gradient. @param colour PDGamma object representing the end color
1438 Decrypts a PDF object. @param obj the COSBase object to decrypt @param objNum unique object identifier @param genNum generation number @return decrypted COSBase object or original if not applicable @throws IOException if an I/O error occurs during decryption
1439 Sets an item in the PDF dictionary using a string key and a COSObjectable value. @param key String representing the item's key @param value COSObjectable object to be set in the dictionary
1440 Sets the AcroForm in the document. @param acroForm PDAcroForm object to be set
1441 Sets viewer preferences in the document. @param prefs PDViewerPreferences object containing viewer settings
1442 Sets document outline. @param outlines PDDocumentOutline to be set
1443 Sets metadata in the PDF document. @param meta PDMetadata object containing the metadata to be set
1444 Sets the open action for the document. @param action PDDestinationOrAction to be set as the open action
1445 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions
1446 Sets document name dictionary. @param names PDDocumentNameDictionary containing document names
1447 Sets the Mark Info in the PDF document. @param markInfo PDMarkInfo object containing marking information
1448 Sets URI in the dictionary. @param uri PDURIDictionary object containing the URI information
1449 Sets the structure tree root in the document. @param treeRoot PDStructureTreeRoot object representing the structure tree
1450 Sets page labels for the document. @param labels PDPageLabels object containing page label settings
1451 Sets destination names in the document. @param dests PDDestinationNameTreeNode containing destination information
1452 Sets embedded files in the document. @param ef PDEmbeddedFilesNameTreeNode containing file information
1453 Sets JavaScript dictionary item. @param js PDJavascriptNameTreeNode object to be set
1454 Creates a new PDF page with the specified media box. @param mediaBox rectangle defining the page's dimensions
1455 Sets the resources for a PDF page. @param resources PDResources object to be set or null to remove resources
1456 Sets the media box for the page. @param mediaBox PDRectangle representing the new media box dimensions
1457 Sets or removes the bleed box for a PDF page. @param bleedBox PDRectangle representing the bleed box dimensions; null to remove
1458 Sets or removes the trim box for a page. @param trimBox PDRectangle representing the trim box or null to remove it
1459 Sets or removes the ArtBox for this page. @param artBox PDRectangle representing the new ArtBox or null to remove it
1460 Sets the contents stream of the page. @param contents PDStream representing the page content
1461 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata to be set
1462 Sets additional actions for a PDF page. @param actions PDPageAdditionalActions containing the actions to be set
1463 Sets the transition effect for the PDF page. @param transition PDTransition object representing the transition effect
1464 Sets transition and duration for a PDF page. @param transition PDTransition object defining the transition effect @param duration float representing the transition duration in seconds
1465 Sets the page associated with this document. @param page PDPage object to be set as the page
1466 Sets the referenced object in the PDF annotation. @param annotation PDAnnotation to be referenced
1467 Sets referenced object in PDF document. @param xobject PDXObject to be referenced
1468 Sets the page associated with the current object. @param page PDPage object to be set
1469 Sets the parent structure node. @param structureNode PDStructureNode representing the parent
1470 Sets the page object in the document. @param page PDPage object to be set as the current page
1471 Sets attributes for the structure element. @param attributes list of attribute objects with revision numbers
1472 Sets the ID tree node. @param idTree PDNameTreeNode object representing the ID tree
1473 Sets the parent tree node in the PDF document. @param parentTree PDNumberTreeNode representing the parent tree to be set
1474 Sets the annotation's rectangle. @param rectangle PDRectangle defining the annotation's position and size
1475 Sets the border style of an annotation. @param bs PDBorderStyleDictionary object representing the new border style
1476 Sets the border effect for the annotation. @param be PDBorderEffectDictionary representing the border effect
1477 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe area
1478 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe boundaries
1479 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe dimensions
1480 Sets the fringe rectangle of an annotation. @param fringe PDRectangle representing the fringe dimensions
1481 Sets FDF dictionary in the PDF document's catalog. @param fdf FDFDictionary to be set
1482 Sets the signature in the document catalog. @param sig PDSignature object to be set
1483 Sets file specification in FDF document. @param fs PDFileSpecification object representing the file
1484 Sets JavaScript in the FDF document. @param js FDFJavaScript object to be added
1485 Sets the FDF catalog in the PDF document's trailer. @param cat FDFCatalog object to be set as the root of the document
1486 Sets the appearance dictionary for a field. @param ap PDAppearanceDictionary object to be set
1487 Sets the appearance stream reference for a field. @param ref FDFNamedPageReference object representing the reference
1488 Sets the icon fit properties. @param fit FDFIconFit object defining the icon's display settings
1489 Sets an action for the form field. @param a PDAction object representing the action to be set
1490 Sets additional actions for the form field. @param aa PDAdditionalActions object containing the actions
1491 Sets fractional space to allocate. @param space PDRange object defining the space allocation
1492 Sets file specification in the PDF document. @param fs PDFileSpecification object representing the file details
1493 Sets page information in the PDF document. @param info FDFPageInfo object containing page details
1494 Sets the template reference in the FDF document. @param tRef FDFNamedPageReference object to be set as the template reference
1495 Sets the font file stream in the dictionary. @param type1Stream PDStream containing the font data
1496 Sets the font file stream for FONT_FILE2. @param ttfStream PDStream containing TrueType font data
1497 Sets the font file 3 (CID) in the dictionary. @param stream PDStream containing the CID font data
1498 Sets the CID set in the dictionary. @param stream PDStream containing the CID set data
1499 Sets the white point for the color space. @param whitepoint PDTristimulus object representing the white point coordinates
1500 Sets the black point in the color space. @param blackpoint PDTristimulus representing the black point values
1501 Sets the extended graphics state for the current object. @param extendedGraphicsState PDExtendedGraphicsState to be set
1502 Sets the shading resources for the PDF object. @param shadingResources PDShading object to be set
1503 Sets the resources dictionary. @param resources PDResources object to be set
1504 Sets a new function for the PDF object. @param newFunction PDFunction to be set
1505 Sets font settings in the PDF dictionary. @param fs PDFontSetting object containing font configuration
1506 Sets the destination for a PDF action. @param d PDDestination object representing the target location
1507 Sets file specification in the PDF document. @param fs PDFileSpecification object representing the file
1508 Sets the target directory in the PDF document. @param targetDirectory PDTargetDirectory object representing the target directory
1509 Sets the destination for a PDF action. @param d PDDestination object representing the target location
1510 Sets file specification in action dictionary. @param fs PDFileSpecification object representing the file
1511 Sets the file specification in the PDF document. @param fs PDFileSpecification object representing the file to be set
1512 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing launch settings
1513 Sets file specification in the action. @param fs PDFileSpecification object representing the file
1514 Sets the file specification in the action. @param fs PDFileSpecification object representing the file
1515 Sets file specification in the action. @param fs PDFileSpecification object representing the file
1516 Sets the F (File) action in the PDF. @param action PDAction object representing the file action to be set
1517 Sets an action in the dictionary. @param e PDAction object to be set under key COSName.E
1518 Sets the X action in the document. @param x PDAction object representing the X action to be set
1519 Sets the "D" action in the PDF document. @param d PDAction object to be set
1520 Sets the U action in the dictionary. @param u PDAction object representing the U action
1521 Sets the FO action in the PDF document. @param fo PDAction object representing the FO action
1522 Sets the action for border clicking. @param bl PDAction object representing the action
1523 Sets the action for page opening. @param po PDAction object representing the page opening action
1524 Sets the print control action. @param pc PDAction object representing the print control action
1525 Sets the PV action in the document. @param pv PDAction object representing the action
1526 Sets the action associated with the "PI" key. @param pi PDAction object representing the action to be set
1527 Sets the WC action in the document. @param wc PDAction object representing the WC action
1528 Sets the WS action in the PDF document. @param ws PDAction object representing the action to be set
1529 Sets the digital signature action. @param ds PDAction representing the digital signature
1530 Sets the WP action in the PDF document. @param wp PDAction object representing the action to be set
1531 Sets the DP action in the PDF document. @param dp PDAction object representing the destination or action
1532 Sets the K action in the PDF document. @param k PDAction object representing the action to be set
1533 Sets the F action in the dictionary. @param f PDAction object representing the action
1534 Sets the action associated with key 'V'. @param v PDAction object to be set
1535 Sets the C action in the dictionary. @param c PDAction object representing the action to be set
1536 Sets an action associated with the 'O' key. @param o PDAction object to be set
1537 Sets the action associated with 'C' key. @param c PDAction object to be set
1538 Sets the target directory in the PDF dictionary. @param targetDirectory PDTargetDirectory object to be set
1539 Sets or removes a named destination. @param dest PDNamedDestination object to set; null to remove
1540 Sets the appearance dictionary. @param appearance PDAppearanceDictionary object to be set
1541 Sets optional content property. @param oc PDPropertyList object representing optional content
1542 Sets the page in the document. @param page PDPage object to be set
1543 Sets the file specification in the PDF document. @param file PDFileSpecification representing the file to be set
1544 Sets the border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
1545 Sets the rectangle difference in the PDF object. @param rd PDRectangle representing the rectangle difference
1546 Sets an action for the PDF object. @param action PDAction to be associated with the object
1547 Sets the border style of a PDF annotation. @param bs PDBorderStyleDictionary object representing the border style
1548 Sets the destination in the PDF document. @param dest PDDestination object representing the target location
1549 Sets the previous URI action. @param pa PDActionURI object representing the action
1550 Sets the popup annotation. @param popup PDAnnotationPopup object to be associated
1551 Sets the annotation in reply to another. @param irt PDAnnotation representing the annotation being replied to
1552 Sets external data dictionary. @param externalData PDExternalDataDictionary object to be stored
1553 Sets the border style of the PDF annotation. @param bs PDBorderStyleDictionary object representing the border style
1554 Sets border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
1555 Sets border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
1556 Sets the rectangle difference in the PDF object. @param rd PDRectangle representing the difference
1557 Sets the appearance characteristics of a PDF annotation. @param appearanceCharacteristics dictionary containing appearance settings
1558 Sets an action in the PDF dictionary. @param action PDAction object to be set
1559 Sets additional actions for an annotation. @param actions PDAnnotationAdditionalActions object containing the actions to be set
1560 Sets the border style dictionary. @param bs PDBorderStyleDictionary object representing the border style
1561 Sets the parent field of this terminal field. @param field PDTerminalField object to be set as parent @throws IllegalArgumentException if field shares dictionary with its only widget
1562 Sets the normal appearance of an annotation. @param entry PDAppearanceEntry object representing the normal appearance
1563 Sets the normal appearance stream. @param ap PDAppearanceStream object representing the appearance
1564 Sets rollover appearance for a PDF button. @param entry PDAppearanceEntry representing the appearance details
1565 Sets the rollover appearance for the button. @param ap PDAppearanceStream representing the new rollover appearance
1566 Sets the down appearance for a button. @param entry PDAppearanceEntry describing the appearance state
1567 Sets the down appearance of the button. @param ap PDAppearanceStream object representing the appearance when the button is pressed
1568 Sets the property build filter in the dictionary. @param filter PDPropBuildDataDict object representing the filter
1569 Sets publication security properties in the dictionary. @param pubSec PDPropBuildDataDict object containing security data
1570 Sets the application property in the dictionary. @param app PDPropBuildDataDict object representing the application data
1571 Sets the seed value certificate in the PDF document. @param certificate PDSeedValueCertificate object to be set
1572 Sets the property build in the PDF document. @param propBuild PDPropBuild object representing the property build to be set
1573 Sets the previous sibling node in an outline. @param outlineNode the PDOutlineNode to set as the previous sibling
1574 Sets the next sibling of this outline node. @param outlineNode PDOutlineNode representing the next sibling
1575 Sets the destination in the PDF document. @param dest PDDestination object representing the target location
1576 Sets an action in the PDF document. @param action PDAction object to be set
1577 Sets the structure element in the PDF. @param structureElement PDStructureElement to be set
1578 Sets the first child of an outline node. @param outlineNode PDOutlineNode to be set as the first child
1579 Sets the last child node in an outline. @param outlineNode PDOutlineNode representing the last child
1580 Sets default resources in the document. @param dr PDResources object containing default resources
1581 Sets the XFA resource in the document. @param xfa PDXFAResource object to be set
1582 Sets the signature value in the PDF dictionary. @param value PDSignature object representing the signature @throws IOException if an I/O error occurs while setting the item
1583 Sets default signature value. @param value PDSignature object to be set as default
1584 Sets seed value in the PDF object. @param sv PDSeedValue object to be set
1585 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
1586 Sets the list of annotation widgets as children. @param children list of PDAnnotationWidget objects to be added
1587 Sets the bounding box for the PDF element. @param rectangle PDRectangle defining the bounding box dimensions
1588 Sets the measurement dictionary in the PDF document. @param measure PDMeasureDictionary object containing measurement data
1589 Sets document information in PDF. @param info PDDocumentInformation containing metadata to be stored
1590 Sets the thread for the bead. @param thread PDThread object to be associated with the bead
1591 Sets the next bead in the thread. @param next PDThreadBead representing the next bead
1592 Sets the previous bead in the thread. @param previous PDThreadBead object representing the previous bead
1593 Sets the page in the document. @param page PDPage object to be set
1594 Sets a rectangle in the PDF document. @param rect PDRectangle object representing the rectangle to be set
1595 Sets the marked status in the PDF dictionary. @param value true if marked, false otherwise
1596 Sets user properties flag in PDF dictionary. @param userProps boolean value indicating if user properties are enabled
1597 Sets the suspect flag in the PDF dictionary. @param suspect boolean value to indicate if a user is a suspect
1598 Sets whether mouse position tracking is enabled. @param value true to enable, false to disable
1599 Sets the 'Open' status in the PDF dictionary. @param open boolean value indicating if the document is open
1600 Sets the FD flag in the PDF dictionary. @param fd boolean value to set for FD flag
1601 Sets whether the file is volatile. @param fileIsVolatile flag indicating if the file is volatile
1602 Sets whether metadata is encrypted. @param encryptMetaData flag to enable or disable encryption of metadata
1603 Sets the caption visibility in the annotation. @param cap boolean indicating whether to show the caption
1604 Sets the scale-to-fit annotation property. @param value boolean indicating whether to enable scale-to-fit
1605 Sets the rename flag in the PDF template. @param value boolean indicating whether renaming is enabled
1606 Sets anti-aliasing in PDF dictionary. @param antiAlias boolean indicating if anti-aliasing should be enabled
1607 Sets stroking overprint control in PDF dictionary. @param op boolean value for overprint control
1608 Sets non-stroking overprint control in PDF. @param op boolean value to enable or disable overprint
1609 Sets automatic stroke adjustment in PDF. @param sa boolean indicating whether to enable auto-adjustment
1610 Sets the alpha source flag in the PDF dictionary. @param alpha boolean value to indicate whether to use the alpha channel as a source
1611 Sets the text knockout flag in the PDF dictionary. @param tk boolean value representing the text knockout flag
1612 Sets the open mode for a PDF document. @param value OpenMode indicating how to open the document
1613 Sets the open mode for a PDF document. @param value OpenMode specifying how to open the document
1614 Sets the open mode for a PDF document. @param value OpenMode specifying how to open the document
1615 Sets whether the action is synchronous. @param synchronous boolean indicating if the action should be synchronous
1616 Sets the repeat flag in the PDF action. @param repeat boolean value indicating whether to repeat the action
1617 Sets the mix attribute in the PDF action. @param mix boolean value indicating whether to mix content
1618 Sets the caption visibility in the PDF document. @param cap boolean indicating whether to show or hide the caption
1619 Sets the "Open" status in the PDF object. @param open boolean indicating if the item is open or closed
1620 Sets the pre-release flag in the PDF document. @param preRelease boolean indicating if it's a pre-release version
1621 Sets whether to suppress warnings for non-embedded fonts. @param noEmbedFontWarning flag to disable font warning
1622 Sets the trusted mode flag in the PDF document. @param trustedMode boolean indicating whether the document is trusted
1623 Sets the NeedAppearances flag in the PDF document. @param value boolean indicating whether appearance streams are required
1624 Sets whether the toolbar is hidden in the PDF viewer. @param value true to hide the toolbar, false to show it
1625 Sets whether to hide the menu bar in PDF viewer. @param value true to hide, false to show
1626 Sets the hide window UI preference. @param value boolean indicating whether to hide the window UI
1627 Sets whether to fit PDF window. @param value true to fit window, false otherwise
1628 Sets the center window preference in PDF. @param value boolean indicating whether to center the window
1629 Sets whether to display the document title. @param value true to display, false otherwise
1630 Sets a PDF name using string keys and values. @param key the PDF name string @param value string value to be set
1631 Sets the page display mode in a PDF document. @param mode PageMode enum representing the desired display mode
1632 Sets the page layout for a PDF document. @param layout PageLayout object defining the layout
1633 Sets the PDF document version. @param version string representing the document version
1634 Sets the trapped state in PDF document information. @param value valid values: "True", "False", or "Unknown"
1635 Sets or removes the style attribute in the PDF document. @param style string representing the style to set, or null to remove it
1636 Initializes a typed PDF dictionary. @param type string representing the dictionary type
1637 Sets the owner of the PDF document. @param owner string representing the document owner
1638 Initializes a new PDMarkedContentReference with a COSDictionary. Sets the "Type" entry in the dictionary to "MCR".
1639 Initializes a new PDObjectReference with a dictionary. Sets the "Type" key in the dictionary to the specified type.
1640 Sets the structure type of the PDF object. @param structureType string representing the structure type to be set
1641 Sets class names and their revision numbers in the PDF object. @param classNames Revisions containing class names and revision numbers
1642 Initializes a PDStructureNode with a specified type. @param type string representing the node's type
1643 Sets the guideline style in the PDF dictionary. @param style string representing the guideline style
1644 Sets the SubFilter attribute in the PDF dictionary. @param subfilter string value representing the SubFilter type
1645 Sets the annotation's intent. @param intent string representing the annotation's purpose
1646 Sets the line ending style of an annotation. @param style string representing the line ending style
1647 Sets the icon name for an annotation. @param icon string representing the icon name
1648 Sets the PDF version in the document. @param version string representing the PDF version
1649 Sets the encoding for the FDF document. @param encoding string representing the encoding type
1650 Sets the scale option for PDF fitting. @param option string representing the scaling option
1651 Sets the scaling type for the PDF. @param scale string representing the scaling type
1652 Initializes a new PDAbstractPattern instance. Creates and sets up the pattern dictionary with type "Pattern".
1653 Sets the type of an action in a PDF document. @param type string representing the action type
1654 Sets the subtype of an action. @param s subtype string to be set
1655 Sets the subtype of the PDF object. @param subType string representing the subtype to be set
1656 Sets the appearance state in the PDF object. @param as appearance state to be set
1657 Sets the attachment name in the PDF object. @param name the name to be set as the attachment name
1658 Sets the line ending style in a PDF object. @param style string representing the line ending style
1659 Sets the caption positioning in the PDF object. @param captionPositioning string indicating the caption's position
1660 Sets the highlight mode in the PDF. @param mode string representing the highlight mode
1661 Sets the reply type in the PDF object. @param rt string representing the reply type to be set
1662 Sets the intent of the PDF object. @param it string value representing the intent
1663 Sets the name attribute of the PDF object. @param name string value to be set as the name
1664 Sets the PDF object's name. @param name string value to be set as the object's name
1665 Sets the PDF annotation's highlighting mode. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T'
1666 Sets the style of the PDF object. @param s string representing the style to be set
1667 Initializes a new external data dictionary. Sets the type to "ExData".
1668 Sets the subtype of the PDF object. @param subtype string representing the subtype to be set
1669 Sets the name in the PDF dictionary. @param name string value to be set as the name
1670 Sets the URL type in the PDF dictionary. @param urlType string representing the URL type
1671 Initializes a new PDDocumentOutline instance. Sets the "Type" entry in the outline dictionary to "Outlines".
1672 Initializes a new PDF document outline. @param dic the underlying COSDictionary to wrap
1673 Initializes a new PDMeasureDictionary instance. Creates and sets the measure dictionary with type "Measure".
1674 Sets the subtype of the PDF object. @param subtype string representing the subtype to be set
1675 Initializes a new PDNumberFormatDictionary. Sets up the dictionary with a type identifier.
1676 Sets the name attribute in the PDF object. @param name string value to be set as the name
1677 Initializes a PDTransition with a specified style. @param style transition effect style
1678 Sets the transition dimension in the PDF object. @param dimension PDTransitionDimension representing the dimension to be set
1679 Sets the transition motion in a PDF document. @param motion PDTransitionMotion object representing the motion effect
1680 Sets the non-full screen page mode preference. @param value the desired page mode
1681 Sets the reading direction preference. @param value READING_DIRECTION enum representing the direction
1682 Sets the view area preference. @param value BOUNDARY representing the view area setting
1683 Sets the view clip boundary in preferences. @param value BOUNDARY representing the new clipping area
1684 Sets the print area preference. @param value boundary value to define the print area
1685 Sets print clip boundary preference. @param value BOUNDARY enum representing the print clip setting
1686 Sets duplex printing preference. @param value duplex setting to apply
1687 Sets print scaling preference. @param value PRINT_SCALING enum value representing the scaling option
1688 Sets a date item in the dictionary. @param key COSName representing the item's key @param date Calendar object to convert and set
1689 Sets a string item in the PDF dictionary using a given key. @param key string representing the item's key @param value string to be set or removed if null
1690 Sets the document language. @param language ISO 639-1 language code
1691 Sets the document's title. @param title string to be set as the document's title
1692 Sets the document's author. @param author name of the document author
1693 Sets the document's subject. @param subject string to be set as the document's subject
1694 Sets document keywords. @param keywords comma-separated list of keywords
1695 Sets the document's creator information. @param creator name of the document creator
1696 Sets the PDF producer information. @param producer name of the PDF producer
1697 Sets or removes the prefix for a PDF document. @param prefix string to set as prefix; null to remove it
1698 Sets the Unicode filename in the PDF document. @param file Unicode string representing the filename
1699 Sets the file path in the PDF document. @param file path to the file
1700 Sets the file description. @param description string describing the file
1701 Sets the element identifier in the PDF object. @param id unique identifier to be set
1702 Sets the title of the document. @param title string representing the document's title
1703 Sets the language attribute in the PDF document. @param language ISO 639-1 language code to be set
1704 Sets the alternate description of the PDF object. @param alternateDescription string to be set as alternate description
1705 Sets the expanded form of a PDF object. @param expandedForm string representing the expanded form
1706 Sets the actual text for the annotation. @param actualText the text to be displayed
1707 Sets the annotation's modification date. @param date string representing the modification date
1708 Sets the annotation's name. @param name string representing the annotation's name
1709 Sets the annotation's content text. @param contents text to be set as annotation content
1710 Sets the title of an annotation. @param title string representing the annotation's title
1711 Sets the annotation's subject. @param subject string representing the annotation's subject
1712 Sets the annotation symbol. @param symbol type of symbol to set ("paragraph" or other)
1713 Sets default appearance for an annotation. @param appearance string defining the visual appearance
1714 Sets the default style for an annotation. @param style string representing the annotation's style
1715 Sets the caption style of an annotation. @param captionStyle CSS-like string defining the style
1716 Sets the annotation's state. @param state new state value to be set
1717 Sets the state model of an annotation. @param stateModel string representing the annotation's state model
1718 Sets the status in the FDF document. @param status new status value to be set
1719 Sets the target URL in the FDF document. @param target URL string to be set
1720 Sets the partial field name. @param partial string representing the partial field name
1721 Sets the name of the PDF object. @param name string to be set as the object's name
1722 Sets the name in the PDF dictionary. @param name string to be set as the name
1723 Initializes PDOptionalContentProperties with default settings. Sets up COSDictionary and initializes OCGS and D entries.
1724 Sets an action in the PDF document. @param sAction JavaScript string to be executed as an action
1725 Sets the file path for an action. @param f file path string
1726 Sets the "D" attribute in the PDF action dictionary. @param d string value to be set for the "D" attribute
1727 Sets the "O" string in the action dictionary. @param o the value to be set or removed if null
1728 Sets the P attribute in the action dictionary. @param p string value to be set or removed if null
1729 Sets the URI for an action. @param uri Uniform Resource Identifier to be set
1730 Sets the filename in the PDF document. @param filename name of the file to be set
1731 Sets the annotation's name. @param name the name to be assigned to the annotation
1732 Sets the filename in PDF parameters. @param file name of the file to be set
1733 Sets the directory path in PDF parameters. @param dir directory path as a string
1734 Sets the operation in PDF parameters. @param op operation string to be set
1735 Sets execution parameter in PDF document. @param param string parameter to be set
1736 Sets the contents of the PDF object. @param value string to be set as the contents
1737 Sets the modified date of the PDF object. @param m string representing the modified date
1738 Sets the name of an annotation. @param nm unique name for the annotation
1739 Sets the default appearance for annotations. @param daValue string representing the default appearance
1740 Sets the default style string in the PDF object. @param defaultStyleString the style string to be set
1741 Sets title popup text. @param t title text to be set
1742 Sets the subject of the PDF document. @param subj subject string to be set
1743 Sets the state in the PDF document. @param state string representing the new state
1744 Sets the state model of the PDF document. @param stateModel string representing the state model to be set
1745 Sets the normal caption in the PDF document. @param caption the text to be displayed as the normal caption
1746 Sets the rollover caption in the PDF object. @param caption the string to be set as the rollover caption
1747 Sets the alternate text caption for an image. @param caption the alternative text description
1748 Sets the date in the PDF document. @param date string representing the date to be set
1749 Sets the URL in the PDF dictionary. @param url the URL to be stored
1750 Sets the URL in the PDF document. @param url string representing the URL to be set
1751 Sets the name in the PDF dictionary. @param name string to be set as the name
1752 Sets the document's location. @param location string representing the document's location
1753 Sets the reason for signing. @param reason description of the signing purpose
1754 Sets the contact information. @param contactInfo string containing contact details
1755 Sets the document's title. @param title the title to be set
1756 Sets default appearance for PDF form fields. @param daValue string representing the default appearance settings
1757 Sets default value for field. @param value default string value to be set
1758 Sets the partial name of a PDF field. @param name partial name to be set; must not contain a period
1759 Sets the alternate field name in the PDF dictionary. @param alternateFieldName the alternate name to be set
1760 Sets the mapping name in the PDF dictionary. @param mappingName the name to be mapped
1761 Sets the value for this annotation. @param value string value to be set
1762 Sets the value of the item. @param value string to be set in the PDF object
1763 Sets default value for the field. @param value string representing the default value
1764 Sets the default appearance for annotations. @param daValue the default appearance string value
1765 Sets the scale ratio in the PDF object. @param scaleRatio string representing the scale ratio to be set
1766 Sets an integer value in the PDF dictionary using a string key. @param key string representation of the item's key @param value integer value to be stored
1767 Sets the structure parent index for the PDF page. @param structParents index of the structure parent
1768 Sets the rotation of a PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1769 Sets the starting page number. @param start positive integer representing the starting page number
1770 Sets the bits per sample in the PDF dictionary. @param bps bits per sample value to be stored
1771 Sets the Marked Content Identifier (MCID) in the PDF object. @param mcid integer value representing the MCID to be set
1772 Sets the revision number for a PDF document. @param revisionNumber the revision number to set (must be non-negative)
1773 Sets the next key in the parent tree. @param parentTreeNextkey integer value for the next key
1774 Sets the encryption length. @param length encryption key length in bits
1775 Sets the PDF version. @param version integer representing the PDF version
1776 Sets the length in the PDF dictionary. @param length integer value representing the length
1777 Sets the revision number in the PDF dictionary. @param revision integer value representing the revision number
1778 Sets document permissions. @param permissions permission flags as integer
1779 Sets the page number in the annotation. @param page page number to be set
1780 Sets the justification of text annotation. @param justification type of justification ("centered", "right")
1781 Sets the rotation of an annotation. @param rotation degrees to rotate the annotation (0, 90, 180, or 270)
1782 Sets flags for a PDF form field. @param ff integer representing field flags
1783 Sets flags for PDF form fields. @param ff integer value representing the field flags
1784 Sets clear field flags for the form field. @param ff integer value representing the clear field flags
1785 Sets widget field flags. @param f integer value representing field flags
1786 Sets widget field flags. @param ff integer value representing field flags
1787 Sets flags for clearing widget fields. @param ff flag value to be set
1788 Sets document flags. @param flags integer value representing document flags
1789 Sets character widths in a PDF font dictionary. @param font the font dictionary to update @param glyphList mapping of glyph names to Unicode characters @throws IOException if an I/O error occurs
1790 Sets the paint type in the PDF pattern dictionary. @param paintType integer representing the paint type
1791 Sets the pattern type in the PDF dictionary. @param patternType integer representing the pattern type
1792 Sets the paint type for the PDF object. @param paintType integer representing the paint type
1793 Sets the tiling type in the PDF object. @param tilingType integer value representing the tiling type
1794 Sets the shading type in the PDF dictionary. @param shadingType integer representing the shading type
1795 Sets the number of bits per flag in the PDF object. @param bitsPerFlag integer value representing bits per flag
1796 Sets the number of vertices per row in the PDF. @param verticesPerRow number of vertices to set
1797 Sets the number of bits per color component. @param bitsPerComponent integer value representing bits per component
1798 Sets the number of bits per coordinate in the PDF. @param bitsPerCoordinate number of bits for each coordinate
1799 Sets the line cap style in the PDF dictionary. @param style integer representing the line cap style
1800 Sets the line join style in the PDF dictionary. @param style integer representing the line join style
1801 Sets or removes the overprint mode in the PDF dictionary. @param overprintMode integer value representing the overprint mode; null to remove
1802 Sets action flags. @param flags integer representing action flags to be set
1803 Sets action flags in PDF dictionary. @param flags integer representing the action's flags
1804 Sets the page number in a PDF document. @param pageNumber page number to set; if negative, removes the page number entry
1805 Sets the annotation index in the PDF dictionary. @param index the annotation index to set; if negative, removes the annotation item
1806 Sets annotation flags in PDF. @param flags integer representing annotation properties
1807 Sets the structure parent ID in the PDF object. @param structParent integer representing the structure parent ID
1808 Sets the Q value in the PDF dictionary. @param q integer value to be stored
1809 Sets the rotation of a PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1810 Sets the P value in the PDF dictionary. @param p integer value (0-3) representing the desired state
1811 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
1812 Sets the number of times the PDF document has been opened. @param openCount integer representing the count of document openings
1813 Sets the Q value in the PDF dictionary. @param q integer value to be stored
1814 Sets field flags in the PDF dictionary. @param flags integer representing field flags
1815 Sets or removes the top index in the PDF document. @param topIndex new top index value; null to remove it
1816 Sets the maximum length for a PDF field. @param maxLen integer value representing the maximum length
1817 Sets the Q factor in the PDF dictionary. @param q integer value representing the Q factor
1818 Sets a long value in the PDF dictionary using a string key. @param key the PDF name string key @param value the long value to be stored
1819 Sets the revision number in the PDF document. @param revision long value representing the revision number
1820 Sets the minimum revision number. @param revision long value representing the minimum revision
1821 Sets a float value in the PDF dictionary using a string key. @param key string representing the item's key @param value float value to be stored
1822 Sets the user unit for the page. @param userUnit positive float value representing the user unit @throws IllegalArgumentException if userUnit is not positive
1823 Sets the guideline width in the PDF. @param width float value representing the guideline width
1824 Sets the opacity of an annotation. @param opacity float value representing the opacity level (0.0 to 1.0)
1825 Sets the leader line length of an annotation. @param leaderLength float value representing the length of the leader line
1826 Sets the leader extend value for an annotation. @param leaderExtend float value representing the leader extend
1827 Sets leader offset for annotation. @param leaderOffset float value representing the leader offset
1828 Sets the font weight in the dictionary. @param fontWeight value representing the font weight
1829 Sets the italic angle of a font. @param angle italic angle value to be set
1830 Sets the font ascent value. @param ascent font ascent height in points
1831 Sets the font descent. @param descent value representing the font descent
1832 Sets the leading (line spacing) in the PDF dictionary. @param leading float value representing line spacing
1833 Sets the cap height of the font. @param capHeight the new cap height value
1834 Sets the x-height of a font. @param xHeight new x-height value for the font
1835 Sets the vertical stem width in the font dictionary. @param stemV vertical stem width value to be set
1836 Sets the stem height value in the dictionary. @param stemH float value representing the stem height
1837 Sets the average width of a font. @param averageWidth the average width value to be set
1838 Sets the maximum width. @param maxWidth the maximum width value to be set
1839 Sets the missing width value in the dictionary. @param missingWidth float value representing the missing width
1840 Sets the X step value in the PDF object. @param xStep float value representing the X step
1841 Sets the vertical step value. @param yStep float value representing the vertical step
1842 Sets the audio volume. @param volume float value between -1.0 and 1.0
1843 Sets the leader line length in the PDF object. @param leaderLineLength the length of the leader line to be set
1844 Sets the leader line extension length. @param leaderLineExtensionLength float value for the extension length
1845 Sets the leader line offset length. @param leaderLineOffsetLength float value for the offset length
1846 Sets constant opacity for the PDF object. @param ca float value representing opacity
1847 Sets the width of a PDF object. @param w width value to be set
1848 Sets the minimum required capability. @param minimumRequiredCapability float value representing the capability
1849 Sets the CYX value in the PDF COS object. @param cyx float value to be stored
1850 Parses a COSStream from a dictionary. @param dic source dictionary containing stream data @return parsed COSStream object @throws IOException if an I/O error occurs or length is missing
1851 Clones and merges content from one COSObjectable to another. @param base the source object containing data to be cloned @param target the destination object where data will be merged @throws IOException if an I/O error occurs during cloning
1852 Parses a COS dictionary from the input source. @param isDirect flag indicating if the dictionary is direct @return parsed COSDictionary object @throws IOException on I/O error or invalid dictionary format
1853 Parses all tokens from the input source. @return List of parsed COSBase objects @throws IOException if an I/O error occurs during parsing
1854 Parses and returns the bounding box of a glyph from a PDF stream. @return PDRectangle object representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs during parsing
1855 Parses and retrieves the width from a PDF content stream. @return parsed width as a float @throws IOException if an I/O error occurs or unexpected end of stream
1856 Constructs a new PDDocument using memory-only stream cache.
1857 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object to convert @return PDFileSpecification object or null if base is null @throws IOException if the base type is unknown
1858 Creates a new FDF annotation of type caret. Initializes the annotation and sets its subtype to "Caret".
1859 Creates a new circle annotation. Initializes an FDF annotation and sets its subtype to "Circle".
1860 Creates a new file attachment annotation. Initializes an FDF annotation and sets its subtype.
1861 Initializes a new free text annotation. Sets the subtype to "FreeText".
1862 Constructs an FDF annotation of type "INK". Initializes the annotation and sets its subtype.
1863 Creates a new FDF annotation line. Sets the subtype to "Line".
1864 Creates a new FDF annotation link. Sets the subtype to "Link".
1865 Creates a new polygon annotation. Sets the subtype to "Polygon".
1866 Creates a new polyline annotation. Initializes and sets the subtype to "PolyLine".
1867 Creates a new sound annotation. Initializes and sets the subtype to "Sound".
1868 Creates a new square annotation. Sets the subtype to "Square".
1869 Initializes a new stamp annotation. Sets the subtype to "Stamp".
1870 Creates a new text annotation. Initializes an FDF annotation with subtype set to "Text".
1871 Constructs a new FDF annotation for text markup. Initializes a COSDictionary and sets its type to ANNOT.
1872 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if I/O error occurs
1873 Builds vertical metrics for a CID font. @param cidFont COSDictionary representing the CID font @throws IOException if an error occurs during processing
1874 Constructs a PDSimpleFont object.
1875 Sets decode values for the PDF object. @param decodeValues COSArray containing decode values
1876 Sets decode values for the PDF object. @param decodeValues COSArray containing decode values
1877 Sets the line width in a PDF document. @param width float value representing the line width
1878 Sets the miter limit for the PDF graphics state. @param miterLimit float value representing the miter limit
1879 Sets the flatness tolerance for rendering. @param flatness float value representing the desired flatness
1880 Sets the smoothness tolerance of the PDF. @param smoothness float value representing the smoothness level
1881 Sets the stroking alpha constant. @param alpha float value representing opacity
1882 Sets the constant non-stroking alpha value. @param alpha float value representing transparency for non-stroking operations
1883 Creates a new PDF annotation link. Sets the subtype to "Link".
1884 Creates a new instance of PDAnnotationMarkup.
1885 Constructs a new PDF annotation popup. Initializes the annotation with subtype "PopUp".
1886 Creates a new PDAnnotationWidget with subtype "Widget".
1887 Sets uniform rectangle differences for a PDF object. @param difference margin difference for all sides
1888 Sets uniform rectangle differences for all sides of a PDF page. @param difference margin difference for all sides
1889 Sets uniform rectangle differences for all sides of a PDF box. @param difference margin difference for all sides
1890 Constructs a new PDCheckBox instance. @param acroForm the form containing the checkbox field
1891 Constructs a new PDComboBox instance. @param acroForm the form containing the combo box field
1892 Constructs a new PDListBox instance. @param acroForm the form containing the list box field
1893 Initializes a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1894 Initializes a line dash pattern with given array and phase. @param array COSArray containing dash pattern values @param phase initial phase of the dash pattern
1895 Returns string representation of PDRange. @return formatted string with min and max values
1896 Evaluates input values through a set of instructions. @param input array of input float values @return array of evaluated float values @throws IOException if an I/O error occurs during evaluation
1897 Sets the range for a specific component in the PDF stream. @param range PDRange object defining the min and max values @param n index of the component to set the range for
1898 Reads and processes a patch from an image input stream. @param input the image input stream to read from @param isFree flag indicating if the patch is free-form @param implicitEdge array of points defining implicit edges @param implicitCornerColor array of colors at implicit corners @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX horizontal range for interpolation @param rangeY vertical range for interpolation @param colRange array of color ranges for interpolation @param matrix transformation matrix for points @param xform additional affine transform for points @param controlPoints number of control points in the patch @return Patch object or null if EOF occurs
1899 Reads and processes a vertex from an image stream. @param input ImageInputStream to read data from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRangeTab Array of PDRange for color components @param matrix Transformation matrix for points @param xform Additional affine transformation @return Vertex object with transformed position and interpolated colors @throws IOException if reading fails or parameters are invalid
1900 Retrieves the first color in the list. @return PDGamma object representing the first color or null if not found
1901 Retrieves the second color in the list. @return PDGamma object representing the second color or null if not found
1902 Retrieves the start colour from the list. @return PDGamma object representing the start colour or null if not found
1903 Retrieves the end color from the PDF. @return PDGamma object representing the end color or null if not found
1904 Retrieves the blend mode from the PDF dictionary. @return BlendMode object or NORMAL if not found
1905 Retrieves destination from PDF object. @return PDDestination object or null if not found @throws IOException if the destination cannot be created
1906 Retrieves the destination from the PDF object. @return PDDestination object or null if not found @throws IOException if the COSBase cannot be converted to a Destination
1907 Retrieves the destination from the PDF document. @return PDDestination object or null if not found @throws IOException if an error occurs while retrieving the destination
1908 Retrieves destination from PDF object. @return PDDestination object or null if not found @throws IOException if the destination cannot be created
1909 Creates a Matrix from a COSBase object. @param base the base PDF object to be converted @return a new Matrix instance or an empty Matrix if input is invalid
1910 Retrieves object from a PDF path. @param objPath path to the PDF object @return COSBase object or null if not found
1911 Retrieves a destination from the dictionary by name. @param name the destination name @return PDDestination object or null if not found @throws IOException if the input cannot be converted to a Destination
1912 Retrieves attribute value by name from COS object. @param attrName the attribute name as a string @return COSBase object or null if not found
1913 Retrieves attribute value from COS object. @param attrName name of the attribute to retrieve @param defaultValue default value to return if attribute is not found @return COSBase object or default value if not found
1914 Checks if a specified key exists in the dictionary. @param name the key to check @return true if the key exists, false otherwise
1915 Retrieves an array of strings from a PDF dictionary. @param name key for the dictionary object @return array of strings or null if not found
1916 Sets an array of strings in the PDF dictionary. @param name key for the array in the dictionary @param values array of string values to set
1917 Retrieves a name or an array of names from the PDF object. @param name key to fetch the object from the dictionary @param defaultValue default value if not found @return String or String[] representing the name(s) or defaultValue
1918 Sets an array of PDF names in the dictionary. @param name the key for the dictionary entry @param values array of PDF name strings to be set
1919 Retrieves a number or name from the dictionary. @param name key for the dictionary object @param defaultValue default value if not found or type mismatch @return float if COSNumber, String if COSName, otherwise defaultValue
1920 Retrieves a number or array of numbers from the PDF object. @param name key to access the PDF object @param defaultValue default value if not found @return float or array of floats, or null if unspecified and not found
1921 Sets an array of numbers in the PDF dictionary. @param name key for the array in the dictionary @param values float array to be stored
1922 Retrieves PDGamma by name from dictionary. @param name the dictionary key as a string @return PDGamma object or null if not found
1923 Retrieves color object based on name from COSObject. @param name the key for the dictionary object @return PDGamma or PDFourColours instance, or null if invalid size
1924 Retrieves a COSDictionary from the PDF document using specified keys. @param firstKey primary key to search for in the dictionary @param secondKey secondary key if the first key is not found @return COSDictionary object or null if neither key points to a dictionary
1925 Retrieves boolean value from dictionary by keys; defaults to false. @param firstKey primary dictionary key @param secondKey secondary dictionary key (optional) @return true if found and is COSBoolean.TRUE, otherwise defaultValue
1926 Retrieves integer value from dictionary by keys. @param firstKey primary dictionary key @param secondKey secondary dictionary key (optional) @param defaultValue default integer value if not found @return integer value or default if both keys are not found
1927 Retrieves a list of filter names from the parameters. @return List of filter names as strings
1928 Retrieves the PDColorSpace from the dictionary. @return PDColorSpace instance or throws IOException if creation fails
1929 Checks if a dictionary represents a PDF catalog. @param dictionary the dictionary to check @return true if it's a catalog, false otherwise
1930 Initializes a PDPageTree with the given root dictionary and document. @param root COSDictionary representing the page tree root @param document PDDocument to which the page tree belongs @throws IllegalArgumentException if the root is null
1931 Determines if a dictionary node represents a page tree. @param node the COSDictionary to check @return true if the node is a page tree, false otherwise
1932 Retrieves the encryption filter method from the dictionary. @return COSName object representing the encryption filter method or null if not found
1933 Retrieves the stream filter name from the dictionary. @return COSName object representing the filter, or IDENTITY if not found
1934 Retrieves the string filter name from the dictionary. @return COSName object representing the string filter, defaulting to IDENTITY if not found
1935 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if conversion fails
1936 Creates a PDXObject based on the given COSBase and resources. @param base the underlying PDF object @param resources the resource dictionary @return PDXObject instance or throws IOException for invalid types
1937 Retrieves the subtype of the PDF object. @return COSName representing the subtype or null if not found
1938 Retrieves the relationship type from the dictionary. @return COSName object representing the relationship or null if not found
1939 Retrieves the appearance state of the PDF object. @return COSName representing the appearance state or null if not found
1940 Sets an embedded string in a PDF dictionary. @param embedded key for the embedded dictionary @param key key for the string item within the dictionary @param value string to be set or removed if null
1941 Sets an integer value in a nested dictionary within the PDF document. @param embeddedDictionary key for the nested dictionary @param key the item's key within the nested dictionary @param value integer value to be stored
1942 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
1943 Retrieves encryption dictionary from PDF trailer. @return COSDictionary containing encryption settings or null if not found
1944 Updates page references in the PDF document. @param cloner utility for cloning objects @param parentTreeEntry dictionary containing page and object entries @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during cloning
1945 Initializes parsing by retrieving and validating the PDF's root dictionary. @throws IOException if root object is missing or an I/O error occurs
1946 Parses the PDF trailer and initializes the document. Throws IOException if root object is missing or parsing fails.
1947 Retrieves or creates PDF document information. Initializes document information if not already present. @return PDDocumentInformation object representing the document's metadata
1948 Retrieves the PDF document's catalog. Initializes it if not already created. @return PDDocumentCatalog object
1949 Retrieves or creates the AcroForm from the PDF document. @param acroFormFixup optional fixup to apply to the form @return PDAcroForm object or null if not found
1950 Retrieves and initializes the PDF viewer preferences. @return PDViewerPreferences object or null if not found
1951 Retrieves or creates additional actions for the document catalog. @return PDDocumentCatalogAdditionalActions object containing the actions
1952 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1953 Retrieves name destinations from the PDF document. @return PDDocumentNameDestinationDictionary object or null if not found
1954 Retrieves and initializes PDMarkInfo from the PDF document. @return PDMarkInfo object or null if not found
1955 Retrieves URI dictionary from the PDF document. @return PDURIDictionary object or null if not found
1956 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
1957 Retrieves optional content properties from the PDF document. @return PDOptionalContentProperties object or null if not found
1958 Initializes a PDDocumentNameDictionary with the document's catalog. @param cat the document catalog to associate with this dictionary
1959 Retrieves the destination tree node for named destinations. @return PDDestinationNameTreeNode object or null if not found
1960 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
1961 Retrieves JavaScript dictionary and initializes a PDJavascriptNameTreeNode. @return PDJavascriptNameTreeNode object or null if not found
1962 Retrieves or creates additional actions for a PDF page. @return PDPageAdditionalActions object representing the page's actions
1963 Retrieves the transition effect for a PDF page. @return PDTransition object or null if no transition is defined
1964 Retrieves an indirect COSObject from resources. @param kind the type of resource dictionary @param name the unique identifier for the item @return COSObject if found, otherwise null
1965 Retrieves object from PDF resources dictionary. @param kind the type of resource dictionary @param name the key for the object within the dictionary @return COSBase object or null if not found
1966 Retrieves names associated with a specific kind from PDF resources. @param kind the type of resource to fetch names for @return Iterable of COSName objects or empty set if not found
1967 Creates a unique PDF dictionary key. @param kind type of resource dictionary @param prefix base string for the key @return COSName instance representing the unique key
1968 Adds an item to a resource dictionary. @param kind the type of resource dictionary @param name the key for the item @param object the value to be added
1969 Retrieves a page from the PDF document. @return PDPage object or null if not found
1970 Retrieves the PDPage associated with this object. @return PDPage object or null if not found
1971 Retrieves and constructs a PDPage from the PDF document. @return PDPage object or null if not found
1972 Retrieves the ID tree node for structure elements. @return PDNameTreeNode containing PDStructureElement or null if not found
1973 Retrieves the parent tree node from the PDF document. @return PDNumberTreeNode object representing the parent tree or null if not found
1974 Retrieves and maps COS objects to PDAttributeObjects. @return Map of attribute names to their corresponding PDAttributeObject or List<PDAttributeObject>
1975 Retrieves cryptographic filter dictionary by name. @param cryptFilterName the name of the crypt filter @return PDCryptFilterDictionary object or null if not found
1976 Sets the encryption filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary crypt filter dictionary to set
1977 Retrieves and initializes the border style of an annotation. @return PDBorderStyleDictionary object or null if not found
1978 Retrieves and constructs the border effect dictionary for an annotation. @return PDBorderEffectDictionary object or null if not found
1979 Retrieves and initializes a PDSignature from the PDF document. @return PDSignature object or null if not found
1980 Retrieves and initializes JavaScript from the FDF document. @return FDFJavaScript object or null if not found
1981 Retrieves the appearance dictionary of a PDF field. @return PDAppearanceDictionary object or null if not found
1982 Retrieves the appearance stream reference for a form field. @return FDFNamedPageReference object or null if not found
1983 Retrieves the icon fit dictionary for a PDF field. @return FDFIconFit object or null if not found
1984 Retrieves additional actions for a PDF form field. @return PDAdditionalActions object or null if none found
1985 Retrieves page information from a PDF document. @return FDFPageInfo object or null if not found
1986 Retrieves the template reference dictionary. @return FDFNamedPageReference object or null if not found
1987 Retrieves CID system information from the PDF document. @return PDCIDSystemInfo object or null if not found
1988 Retrieves PDPanose object from font dictionary. @return PDPanose object or null if not found
1989 Retrieves or initializes the PDResources object. @return PDResources object or null if not found
1990 Retrieves the character procedures dictionary. @return COSDictionary containing character procedures or null if not found
1991 Retrieves and initializes colorants from PDF resources. @param resources PDF resources containing colorant information @return Map of colorant names to PDSeparation objects @throws IOException if an error occurs during retrieval or initialization
1992 Retrieves the PDDeviceNProcess from the dictionary. @return PDDeviceNProcess object or null if not found
1993 Retrieves render state for a given destination. @param destination the target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
1994 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not found
1995 Retrieves and initializes PDResources from the PDF document. @return PDResources object or null if not found
1996 Retrieves and initializes the target directory from PDF document. @return PDTargetDirectory object or null if not found
1997 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
1998 Retrieves and initializes the target directory from the PDF document. @return PDTargetDirectory object or null if not found
1999 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
2000 Retrieves a PDF page. @return PDPage object or null if not found
2001 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2002 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
2003 Retrieves the previous URI action. @return PDActionURI object or null if not found
2004 Retrieves external data dictionary from the PDF object. @return PDExternalDataDictionary object or null if not found
2005 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
2006 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2007 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2008 Retrieves appearance characteristics for the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
2009 Gets additional actions for the annotation. @return PDAnnotationAdditionalActions object or null if none exist
2010 Retrieves the border style dictionary for a PDF object. @return PDBorderStyleDictionary object or null if not found
2011 Retrieves the normal appearance of a PDF annotation. @return PDAppearanceEntry object or null if not found
2012 Retrieves the filter property from the PDF document. @return PDPropBuildDataDict object or null if not found
2013 Retrieves public security settings from the PDF document. @return PDPropBuildDataDict object or null if not found
2014 Retrieves the application properties dictionary. @return PDPropBuildDataDict object or null if not found
2015 Retrieves MDP (Modifications Document Permissions) settings. @return PDSeedValueMDP object or null if not found
2016 Retrieves and initializes the seed value certificate. @return PDSeedValueCertificate object or null if not found
2017 Retrieves the time stamp from the PDF document. @return PDSeedValueTimeStamp object or null if not found
2018 Retrieves and initializes PDPropBuild from dictionary. @return PDPropBuild object or null if not found
2019 Retrieves structure element from PDF object. @return PDStructureElement or null if not found
2020 Checks if PDF node has child nodes. @return true if node has children, false otherwise
2021 Retrieves default resources from the PDF document. @return PDResources object or null if not found
2022 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if not found
2023 Retrieves and initializes a PDSignature from the PDF document. @return PDSignature object or null if not found
2024 Retrieves default signature value. @return PDSignature object or null if not found
2025 Retrieves the seed value from the PDF object. @return PDSeedValue object or null if not found
2026 Retrieves the measure dictionary from the PDF document. @return PDMeasureDictionary object or null if not found
2027 Retrieves document information from a thread. @return PDDocumentInformation object or null if not found
2028 Retrieves the first thread bead from the PDF document. @return PDThreadBead object or null if not found
2029 Retrieves and constructs a PDThread from the bead's dictionary. @return PDThread object or null if not found
2030 Retrieves the next thread bead in the document. @return PDThreadBead object or null if not found
2031 Retrieves the previous thread bead. @return PDThreadBead object or null if not found
2032 Retrieves and constructs a PDPage from the document. @return PDPage object or null if not found
2033 Retrieves metadata from the PDF document. @return PDMetadata object or null if not found
2034 Retrieves metadata from a PDF page. @return PDMetadata object or null if not found
2035 Retrieves differences stream from FDF document. @return COSStream object containing differences or null if not found
2036 Retrieves font file stream. @return PDStream object or null if not found
2037 Retrieves Font File 2 stream. @return PDStream object or null if not found
2038 Retrieves Font File 3 stream. @return PDStream object or null if not found
2039 Retrieves the CID set stream from the dictionary. @return PDStream object representing the CID set or null if not found
2040 Retrieves the sound stream from an action. @return COSStream object representing the sound or null if not found
2041 Retrieves the normal icon from a PDF form. @return PDFormXObject representing the normal icon or null if not found
2042 Retrieves the rollover icon as a form XObject. @return PDFormXObject representing the rollover icon or null if not found
2043 Retrieves the alternate icon XObject. @return PDFormXObject representing the alternate icon or null if not found
2044 Retrieves sub-dictionary as a map of appearance streams. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if the entry is not an appearance subdictionary
2045 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
2046 Writes the PDF document's trailer. @param doc COSDocument to write the trailer for @throws IOException if an I/O error occurs
2047 Retrieves or creates a list of threads from the document. Initializes a COSArrayList with PDThread objects. @return List of PDThread objects representing threads in the document
2048 Retrieves output intents from the PDF document. @return List of PDOutputIntent objects representing output intents
2049 Adds an output intent to the document. @param outputIntent PDOutputIntent object to be added
2050 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing the thread beads on the page
2051 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if not found
2052 Retrieves child dictionaries from a PDF node. @param node the parent COSDictionary node @return list of COSDictionary children or empty list if none found
2053 Retrieves child nodes from the PDF dictionary. @return List of PDNameTreeNode objects representing child nodes or null if none exist
2054 Retrieves and converts named entries from a PDF dictionary. @return unmodifiable map of names to corresponding values or null if not found
2055 Retrieves the upper limit from a COSArray. @return string representing the upper limit or null if not found
2056 Sets the upper limit in the COSArray associated with the node. @param upper string representing the upper limit to set
2057 Retrieves the lower limit from a COSArray. @return lower limit as a string or null if not found
2058 Sets the lower limit in the COSArray associated with the "Limits" key. @param lower string representing the lower limit to set
2059 Retrieves and initializes child nodes from the 'Kids' entry in a PDF dictionary. @return List of PDNumberTreeNode objects representing child nodes or null if none found
2060 Retrieves a map of page label numbers and their corresponding COSObjectable values. @return Map with integer keys and COSObjectable values, or null if the array is invalid @throws IOException if conversion fails
2061 Retrieves the upper limit from a COSArray. @return Integer value representing the upper limit or null if not found
2062 Sets the upper limit for a node. @param upper the upper limit value to set or null to remove it
2063 Retrieves the lower limit from a COSArray. @return integer value of the lower limit or null if not found
2064 Sets the lower limit in a PDF node's limits array. @param lower the lower limit value or null to remove it
2065 Retrieves or creates the COSArray for range values. @return COSArray containing range values, may be null if not present
2066 Retrieves domain values from the PDF object. @return COSArray containing domain values or null if not found
2067 Retrieves or initializes the SIZE array from the PDF object. @return COSArray representing the size or null if not found
2068 Retrieves or creates decode array for PDF image. @return COSArray containing decode values
2069 Retrieves the COSArray of functions. @return COSArray containing function objects or null if not found
2070 Retrieves the bounds array from the PDF object. @return COSArray containing bounds or null if not found
2071 Retrieves or initializes the ENCODE array from the COS object. @return COSArray representing the encoding information
2072 Retrieves owner user properties from the PDF document. @return List of PDUserProperty objects representing owner properties
2073 Adds a user property to the document. @param userProperty the PDUserProperty object to add
2074 Removes a user property from the document. @param userProperty the PDUserProperty object to remove
2075 Retrieves or sets the guideline color in RGB. @return PDColor object representing the guideline color
2076 Checks if an edge is attached. @param edge the name of the edge to check @return true if edge is found in the attached list, false otherwise
2077 Retrieves the color from an annotation. @return Color object or null if color data is incomplete
2078 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
2079 Retrieves callout coordinates from annotation. @return float array of coordinates or null if not found
2080 Retrieves the ink list from an annotation. @return List of float arrays representing ink data or null if not found
2081 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not found
2082 Sets the starting point ending style for a line annotation. @param style the style to set or null for no ending style
2083 Retrieves the ending style of a line annotation. @return String representing the ending style or LE_NONE if not specified
2084 Sets the endpoint ending style for an annotation. @param style the style to apply, defaulting to LE_NONE if null
2085 Retrieves the end point ending style of an annotation. @return String representation of the end point style or default if not found
2086 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2087 Sets the horizontal offset for the annotation caption. @param offset the horizontal offset value
2088 Retrieves horizontal offset for annotation caption. @return float value of horizontal offset or 0 if not found
2089 Sets the vertical offset for the annotation caption. @param offset the vertical offset value
2090 Retrieves vertical offset of the annotation caption. @return float value representing the vertical offset or 0 if not found
2091 Retrieves vertices of an annotation. @return float array of vertex coordinates or null if not found
2092 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2093 Retrieves vertices of an annotation. @return float array of vertex coordinates or null if not found
2094 Sets the starting point line ending style for an annotation. @param style the line ending style as a string
2095 Retrieves the ending style of a line annotation. @return String representing the ending style or LE_NONE if not set
2096 Sets the ending style for an annotation line. @param style the ending style to apply or null for none
2097 Retrieves the endpoint style of a line annotation. @return String representing the endpoint style or LE_NONE if not found
2098 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not found
2099 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2100 Retrieves annotation coordinates. @return float array of coordinates or null if not found
2101 Retrieves the ID array from the FDF document. @return COSArray containing the ID or null if not found
2102 Retrieves the list of FDF fields. @return List of FDFField objects or null if none found
2103 Retrieves a list of FDFPage objects. @return List of FDFPage objects or null if not found
2104 Retrieves child fields of a PDF form field. @return List of FDFField objects or null if no children exist
2105 Retrieves options from a PDF field. @return List of option strings or FDFOptionElement objects, or null if not found
2106 Retrieves templates from a PDF page. @return List of FDFTemplate objects or null if no templates are found
2107 Retrieves a list of FDF fields from the template. @return List of FDFField objects or null if no fields are present
2108 Retrieves or computes the list of character widths. @return List of Float values representing character widths
2109 Retrieves or creates the white point for the color space. @return PDTristimulus object representing the white point
2110 Retrieves the black point tristimulus values. @return PDTristimulus object representing the black point, defaulting to (0, 0, 0) if not found
2111 Retrieves or creates a PDGamma object for the gamma values. @return PDGamma object representing gamma settings
2112 Retrieves the transformation matrix from a dictionary. @return float array representing the matrix values or identity matrix if not found
2113 Retrieves a list of component names from the dictionary. @return List of component names or an empty list if none found
2114 Retrieves or creates a default range array. @return PDRange object initialized with the retrieved or default range array
2115 Retrieves the B-range from a PDF dictionary. Returns a default range if not found in the dictionary. @return PDRange object representing the B-range
2116 Retrieves the background array from the PDF dictionary. @return COSArray object representing the background or null if not found
2117 Retrieves the domain array from the PDF object. @return COSArray containing domain information or null if not found
2118 Retrieves the EXTEND array from the PDF object. @return COSArray object representing the EXTEND or null if not found
2119 Retrieves the domain array from the PDF document. @return COSArray object representing the domain or null if not found
2120 Retrieves the coordinates array for a PDF annotation. @return COSArray containing coordinates or null if not found
2121 Retrieves or initializes the DECODE array. @return COSArray containing decode values or null if not present
2122 Retrieves and constructs a PDFontSetting from the dictionary. @return PDFontSetting object or null if not found
2123 Retrieves the fields array from the action dictionary. @return COSArray containing form field entries or null if not found
2124 Retrieves the fields array from the action. @return COSArray containing form fields or null if not found
2125 Retrieves or creates the border array for a PDF annotation. Ensures the array has at least three elements, defaulting missing values to zero. @return COSArray representing the border settings
2126 Retrieves rectangle differences from PDF object. @return float array of rectangle differences or empty if not found
2127 Retrieves rectangle differences from the PDF object. @return float array of rectangle differences or empty if not found
2128 Retrieves the callout array from the PDF object. @return float array of callout values or null if not found
2129 Retrieves the ink list from a PDF object. @return 2D float array representing the ink list or empty if not found
2130 Retrieves line coordinates as a float array. @return float array of line coordinates or null if not found
2131 Sets the starting style of a line annotation. @param style the PDF name string for the starting style
2132 Retrieves the starting point ending style from a COSArray. @return String representing the ending style or default value if not found
2133 Sets the end point style for a line annotation. @param style the style to set; null defaults to LE_NONE
2134 Retrieves the endpoint style of a line. @return String representing the endpoint style or default value if not found
2135 Sets the horizontal offset for the caption. @param offset the horizontal offset value
2136 Retrieves the horizontal offset for the caption. @return float value of the horizontal offset or 0 if not set
2137 Sets the vertical caption offset. @param offset the vertical offset value
2138 Retrieves the vertical offset for a caption. @return float value representing the vertical offset or 0 if not found
2139 Retrieves quad points from the PDF object. @return float array of quad points or null if not found
2140 Retrieves vertices as a float array from the PDF object. @return float array of vertex coordinates or null if not found
2141 Retrieves the path data from a PDF object. @return 2D array of floats representing the path or null if not found
2142 Sets the starting style of a line annotation. @param style the style to apply, or null for default none style
2143 Retrieves the starting point ending style of a line annotation. @return String representing the ending style or default value if not found
2144 Sets the ending style of a line annotation's endpoint. @param style the ending style to set or null for default
2145 Retrieves the endpoint style of a line annotation. @return String representing the endpoint style or default if not found
2146 Retrieves vertex coordinates from a PDF object. @return float array of vertex coordinates or null if not found
2147 Retrieves rectangle differences from PDF object. @return float array of rectangle differences or empty array if not found
2148 Retrieves quad points for annotation. @return float array of quad points or null if not found
2149 Sets the operating system in the PDF document. @param os name of the operating system or null to remove it
2150 Retrieves sub-filter names from the dictionary. @return List of sub-filter names as strings or empty list if not found
2151 Retrieves the digest method from the dictionary. @return List of digest method names as strings or empty list if not found
2152 Retrieves a list of reasons from the dictionary. @return List of reason strings or empty list if not found
2153 Retrieves legal attestation fields from the dictionary. @return List of legal attestation field names as strings, empty if not found
2154 Retrieves subject byte arrays from PDF dictionary. @return List of byte arrays representing the subject or null if not found
2155 Adds a subject to the document's metadata. @param subject byte array representing the subject to add
2156 Removes a subject from the document's metadata. @param subject byte array representing the subject to remove
2157 Retrieves the key usage extensions from the dictionary. @return List of key usage strings or null if not found
2158 Adds a key usage extension to the PDF dictionary. @param keyUsageExtension string containing '0', '1', or 'X' characters
2159 Removes a key usage extension from the certificate's key usage array. @param keyUsageExtension the key usage extension to remove
2160 Retrieves the issuer information as a list of byte arrays. @return List of byte arrays representing the issuer or null if not found
2161 Adds an issuer to the PDF document. @param issuer byte array representing the issuer
2162 Removes an issuer from the dictionary. @param issuer byte array representing the issuer to remove
2163 Retrieves OID values from the PDF dictionary. @return List of byte arrays representing OIDs or null if not found
2164 Adds an OID to the document's OID array. @param oid byte array representing the OID
2165 Removes an OID from the COSArray associated with "OID" key. @param oid byte array representing the OID to remove
2166 Retrieves the byte range from the dictionary. @return array of integers representing byte ranges or empty array if not found
2167 Retrieves or creates the text color. @return PDColor object representing the text color
2168 Retrieves the calculation order of form fields. @return List of PDField objects in calculation order or empty list if none found
2169 Retrieves selected options indices from a PDF object. @return List of Integer values representing selected option indices or empty list if none found
2170 Retrieves an array of number format dictionaries for X changes. @return PDNumberFormatDictionary[] or null if not found
2171 Retrieves number format dictionaries for Y-axis changes. @return array of PDNumberFormatDictionary objects or null if not found
2172 Retrieves an array of number format dictionaries. @return PDNumberFormatDictionary array or null if not found
2173 Retrieves number format areas from the PDF document. @return array of PDNumberFormatDictionary objects or null if not found
2174 Retrieves number format dictionaries for angles. @return array of PDNumberFormatDictionary or null if not found
2175 Retrieves line slope number format dictionaries. @return array of PDNumberFormatDictionary objects or null if not found
2176 Retrieves the coordinate system origin from a PDF object. @return float array representing the origin or null if not found
2177 Retrieves visibility policy from dictionary. @return COSName object representing visibility policy or ANY_ON if not found
2178 Converts a PDF key to its string representation. @param key the PDF key as a string @return String value associated with the key or null if not found
2179 Retrieves and converts dictionary value to string by key with default. @param key the dictionary key @param defaultValue value to return if key not found @return String representation of the value or default if null
2180 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset of the XRef stream @return true if valid XRef stream, false otherwise
2181 Retrieves the page mode from a PDF document. @return PageMode enum instance or USE_NONE if invalid or not found
2182 Retrieves and parses the page layout from a document. @return PageLayout enum representing the document's layout, defaulting to SINGLE_PAGE if invalid or missing
2183 Retrieves the version from the PDF document. @return version as a string or null if not found
2184 Retrieves trapped status from document info. @return Trapped status as string or null if not found
2185 Retrieves style as string from PDF dictionary. @return Style of the element or null if not found
2186 Retrieves the type of the PDF object. @return String representation of the object's type or null if not found
2187 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary the COSDictionary containing attribute data @return PDAttributeObject instance or default if unknown owner
2188 Retrieves the owner name from the PDF document. @return Owner's name as a string or null if not found
2189 Retrieves the structure type from the PDF object. @return String representation of the structure type or null if not found
2190 Creates a PDStructureNode from a COSDictionary. @param node the underlying COSDictionary representing the structure node @return PDStructureTreeRoot or PDStructureElement based on dictionary type @throws IllegalArgumentException if Type is invalid
2191 Retrieves the type of the PDF object. @return String representation of the type or null if not found
2192 Retrieves the name associated with the PDF object. @return Name as a string or null if not found
2193 Retrieves the language of the document. @return Language as a string or null if not set
2194 Retrieves the type property from PDF object properties. @return String representation of the type or null if not found
2195 Retrieves the subtype property as string. @return String representation of the subtype or null if not found
2196 Retrieves filter name from PDF dictionary. @return Filter name as string or null if not found
2197 Retrieves sub-filter from PDF dictionary. @return Sub-filter as string or null if not found
2198 Creates an FDF annotation from a dictionary. @param fdfDic COSDictionary representing the annotation @return FDFAnnotation object or null if unsupported type
2199 Retrieves the intent of the annotation. @return String representation of the annotation's intent or null if not found
2200 Retrieves line ending style of an annotation. @return String representation of the line ending style or null if not found
2201 Retrieves version from the PDF document's catalog. @return version as string or null if not found
2202 Retrieves the encoding value from FDF document. @return Encoding string, defaulting to "PDFDocEncoding" if not found
2203 Retrieves the scale option for a PDF page. @return Scale option as a string, defaults to "Always" if not found
2204 Retrieves the scale type for an image. Uses 'S' key from COS dictionary, defaults to proportional scaling if not found. @return String representing the scale type
2205 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
2206 Retrieves the type from the dictionary. @return String representation of the type or null if not found
2207 Retrieves the subtype from the dictionary. @return String representation of the subtype or null if not found
2208 Retrieves font name from dictionary. @return Font name as string or null if not found
2209 Retrieves the font stretch value. @return String representation of the font stretch or null if not found
2210 Retrieves the base font name from the dictionary. @return String representation of the base font or null if not found
2211 Retrieves the base font name from the dictionary. @return String representation of the base font or null if not found
2212 Retrieves the base font name from the dictionary. @return The base font name as a string, or null if not found
2213 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
2214 Checks if the PDF object subtype is "NChannel". @return true if subtype is "NChannel", false otherwise
2215 Retrieves the type of the action. @return String representation of the action type or null if not found
2216 Retrieves the subtype of an action. @return String representation of the subtype or null if not found
2217 Creates a PDAction based on the action type. @param action COSDictionary representing the action @return PDAction object or null if unsupported type
2218 Retrieves the subtype of the PDF object. @return String representation of the subtype or null if not found
2219 Retrieves caption positioning from PDF object. @return String representation of caption positioning or null if not found
2220 Retrieves the intent of the PDF document. @return String representing the intent or null if not found
2221 Retrieves the subtype of the PDF object. @return String representing the subtype or null if not found
2222 Retrieves the name from the PDF dictionary. @return Name as a string or null if not found
2223 Retrieves filter name from PDF dictionary. @return filter name as string or null if not found
2224 Retrieves the URL type from the dictionary. @return URL type as string or null if not found
2225 Retrieves filter name from PDF dictionary. @return String representation of the filter or null if not found
2226 Retrieves the subfilter type from the dictionary. @return String representation of the subfilter or null if not found
2227 Retrieves the field type of the PDF form. @return String representing the field type or null if not found
2228 Retrieves the name from the COS object. @return String representation of the name or null if not found
2229 Retrieves duplex setting from preferences. @return Duplex setting as string or null if not found
2230 Fetches string value from PDF dictionary by key. @param key the dictionary key as a string @return string value or null if not found
2231 Retrieves string value from dictionary by key with a default. @param key the dictionary key @param defaultValue value to return if key is not found @return string value or provided default if not found
2232 Retrieves the language attribute from the PDF document. @return language string or null if not found
2233 Retrieves the title from PDF document information. @return title string or null if not found
2234 Retrieves the author of the PDF document. @return author's name as a string or null if not found
2235 Retrieves the subject of the PDF document. @return subject string or null if not found
2236 Retrieves keywords from PDF document. @return comma-separated list of keywords or null if not found
2237 Retrieves the creator of the PDF document. @return string value representing the creator or null if not found
2238 Retrieves the producer of the PDF document. @return producer string or null if not found
2239 Retrieves the prefix from the root object. @return prefix as a string or null if not found
2240 Retrieves Unicode file name. @return Unicode string representation of the file or null if not found
2241 Retrieves file name from PDF dictionary. @return file name as string or null if not found
2242 Retrieves DOS attribute from file system. @return DOS attribute as string or null if not found
2243 Retrieves file MAC value. @return MAC value as string or null if not found
2244 Retrieves Unix file path from PDF dictionary. @return Unix file path as string or null if not found
2245 Retrieves file description. @return description of the file as a string or null if not found
2246 Retrieves the element identifier from the PDF object. @return string representation of the ID or null if not found
2247 Retrieves title from PDF document. @return title as string or null if not found
2248 Retrieves language from PDF document. @return language string or null if not found
2249 Retrieves alternate description from PDF object. @return string value of alternate description or null if not found
2250 Retrieves expanded form of the PDF object. @return string value of the 'E' key or null if not found
2251 Retrieves actual text from PDF object. @return string value of actual text or null if not found
2252 Retrieves formatted value from PDF object. @return formatted string or null if not found
2253 Retrieves actual text from PDF properties. @return string value of actual text or null if not found
2254 Retrieves alternate description from document properties. @return alternate description string or null if not found
2255 Retrieves the expanded form of a document property. @return string value of the 'E' key from properties dictionary or null if not found
2256 Retrieves date from annotation. @return date as string or null if not found
2257 Retrieves the name of the annotation. @return the name as a string or null if not found
2258 Retrieves contents of annotation. @return string content of annotation or null if not found
2259 Retrieves the title of an annotation. @return title as a string or null if not present
2260 Retrieves the subject of an annotation. @return subject string or null if not found
2261 Retrieves symbol from annotation. @return symbol as string or null if not found
2262 Retrieves rotation angle of annotation. @return rotation angle as string or null if not found
2263 Retrieves default appearance string from annotation. @return default appearance string or null if not found
2264 Retrieves default style from annotation. @return default style string or null if not found
2265 Retrieves caption style from annotation. @return caption style as string or null if not found
2266 Retrieves the state of an annotation. @return state as a string or null if not found
2267 Retrieves the state model of an annotation. @return string value representing the state model or null if not found
2268 Retrieves the status from the FDF document. @return string value of the status or null if not found
2269 Retrieves target string from FDF dictionary. @return target string or null if not found
2270 Retrieves partial field name from PDF. @return partial field name as string or null if not found
2271 Retrieves the name from the PDF object. @return name as a string or null if not found
2272 Retrieves font family name from dictionary. @return font family as string or null if not found
2273 Retrieves character set from PDF dictionary. @return character set string or null if not found
2274 Retrieves the name from the PDF dictionary. @return name as string or null if not found
2275 Retrieves group names from OCGs array. @return array of group names or empty array if none found
2276 Retrieves the 'F' field from the PDF action dictionary. @return string value of 'F' or null if not found
2277 Retrieves the "D" entry from the action dictionary. @return string value associated with key "D" or null if not found
2278 Retrieves the "O" entry from the action dictionary. @return string value of the "O" entry or null if not found
2279 Retrieves the "P" attribute from the PDF action. @return string value of "P" or null if not found
2280 Retrieves URI from PDF action. @return URI as string or null if not found
2281 Retrieves filename from PDF dictionary. @return filename as string or null if not present
2282 Retrieves the annotation name from the dictionary. @return annotation name as string or null if not found
2283 Retrieves filename from PDF parameters. @return filename as string or null if not found
2284 Retrieves directory path from PDF parameters. @return directory path as string or null if not found
2285 Retrieves the execute parameter from PDF dictionary. @return value associated with key P or null if not found
2286 Retrieves contents from PDF dictionary. @return string content or null if not found
2287 Retrieves the modified date of the PDF document. @return Modified date as a string or null if not found
2288 Retrieves the name of an annotation. @return annotation name as string or null if not found
2289 Retrieves default appearance string from PDF dictionary. @return default appearance string or null if not found
2290 Retrieves default style string from PDF object. @return default style string or null if not found
2291 Retrieves the title popup text. @return title popup string or null if not found
2292 Retrieves the subject of the PDF document. @return subject string or null if not found
2293 Retrieves the state from the COS object. @return string value of the state or null if not found
2294 Retrieves state model from PDF dictionary. @return string value of state model or null if not found
2295 Retrieves normal caption from PDF object. @return string value of normal caption or null if not found
2296 Retrieves rollover caption from PDF object. @return Rollover caption string or null if not found
2297 Retrieves alternate caption from PDF object. @return string value of alternate caption or null if not found
2298 Retrieves date from PDF dictionary. @return Date as string or null if not found
2299 Retrieves the OS information from a PDF document. @return OS name as a String or null if not found
2300 Extracts subject distinguished names from a PDF dictionary. @return List of maps containing key-value pairs for each DN or null if not found
2301 Retrieves URL from PDF dictionary. @return URL as string or null if not found
2302 Retrieves URL from the dictionary. @return URL as a string or null if not found
2303 Retrieves the name from the dictionary. @return string value of the name or null if not found
2304 Retrieves location from PDF document. @return location as string or null if not present
2305 Retrieves the reason from the dictionary. @return the reason as a string or null if not found
2306 Retrieves contact information from the dictionary. @return string value of contact info or null if not found
2307 Retrieves the title of the PDF document. @return title string or null if not found
2308 Retrieves partial name from PDF dictionary. @return partial name as string or null if not found
2309 Retrieves alternate field name from PDF dictionary. @return alternate field name or null if not found
2310 Retrieves the mapping name from the PDF dictionary. @return string value of the mapping name or null if not found
2311 Retrieves default style string from PDF object. @return default style string or null if not found
2312 Retrieves scale ratio from PDF object. @return string value of scale ratio or null if not found
2313 Retrieves date from PDF dictionary by key. @param key the dictionary key as a string @return Calendar object or null if not found or conversion fails
2314 Retrieves date from dictionary by key with a default value. @param key the dictionary key @param defaultValue value to return if key is not found or conversion fails @return Calendar object or provided default value if not found or conversion fails
2315 Retrieves the creation date of the document. @return Calendar object representing the creation date or null if not found
2316 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date, or null if not found
2317 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an I/O error occurs during retrieval
2318 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
2319 Retrieves the signing date from the PDF document. @return Calendar object representing the signing date or null if not found
2320 Retrieves a long value from the PDF dictionary by key. @param key the dictionary key as a string @return long value associated with the key or -1 if not found
2321 Retrieves a long value from the dictionary by key with a default of -1. @param key the dictionary key @return long value associated with the key or -1 if not found or not a COSNumber
2322 Retrieves a long value from the PDF dictionary by key. @param key the dictionary key as a string @param defaultValue default value to return if key not found or not a COSNumber @return long value associated with the key or default value
2323 Decodes an input stream using a list of filters. @param encoded input stream containing encoded data @param filterList list of filters to apply @param parameters decoding parameters dictionary @param options decoding options @param results list to store decode results @return RandomAccessRead object with decoded data @throws IOException if an I/O error occurs
2324 Sets the startxref position and resolves XRef trailers. @param startxrefBytePosValue byte position of the startxref entry
2325 Retrieves a float value from PDF dictionary. @param key dictionary key as string @return float value associated with the key or -1 if not found
2326 Retrieves a float value from the dictionary by key. @param key the dictionary key @return float value associated with the key or -1 if not found
2327 Retrieves a float value from the dictionary by key. @param key the dictionary key as a string @param defaultValue default float value if key not found or not a COSNumber @return float value associated with the key or default value
2328 Retrieves the user unit from a PDF page. @return user unit value or default of 1.0 if not positive
2329 Retrieves guideline width from PDF dictionary. @return float value of guideline width or default to 1 if not found
2330 Retrieves the opacity of an annotation. @return float representing the opacity value (0.0 to 1.0)
2331 Retrieves font weight from dictionary. @return font weight as float or 0 if not found
2332 Retrieves the italic angle of the font. @return italic angle as a float, defaulting to 0 if not found
2333 Retrieves the ascent value from the dictionary. @return float representing the ascent value or 0 if not found
2334 Retrieves the descent value from the dictionary. @return font descent value or 0 if not found
2335 Retrieves leading spacing from PDF dictionary. @return float value representing leading or 0 if not found
2336 Retrieves or calculates the capital height of a font. @return float value representing the capital height
2337 Retrieves the X-Height of the font. @return absolute X-Height value or default if not set
2338 Retrieves stem vertical width. @return float value representing stem vertical width or 0 if not found
2339 Retrieves stem height from PDF dictionary. @return stem height as float or 0 if not found
2340 Retrieves the average width of characters. @return average width value or 0 if not found
2341 Retrieves the maximum width from the dictionary. @return the maximum width as a float, or 0 if not found
2342 Retrieves the missing width from the font dictionary. @return float value representing the missing width or 0 if not found
2343 Retrieves the gamma value from the dictionary. @return gamma value or default of 1.0 if not found
2344 Retrieves the X step value from the PDF object. @return float value of X step or 0 if not found
2345 Retrieves the Y step value from the PDF dictionary. @return Y step as a float or 0 if not found
2346 Retrieves and clamps the volume value from an action. @return clamped volume between -1 and 1, defaulting to 1 if out of range
2347 Retrieves the leader line length from the PDF object. @return leader line length as a float, defaulting to 0 if not found
2348 Retrieves the leader line extension length. @return float value of the leader line extension or 0 if not found
2349 Retrieves the leader line offset length. @return float value representing the leader line offset length or 0 if not set
2350 Retrieves constant opacity value from PDF object. @return float representing constant opacity or default value of 1 if not found
2351 Retrieves the width value from the PDF dictionary. Returns 0 if the width is represented by a COSName, otherwise returns the float value. @return float representing the width or default value of 1
2352 Retrieves duration from PDF dictionary. @return float value of duration or default 1 if not found
2353 Retrieves the fly scale from the PDF object. @return float value representing the fly scale or default of 1 if not found
2354 Writes an operator token to the output stream. @param op the Operator object to write @throws IOException if an I/O error occurs
2355 Extracts text regions from a PDF page. @param page the PDPage to extract regions from @throws IOException if an I/O error occurs
2356 Retrieves and converts role map from PDF document. @return Map with converted role entries or empty map if none found
2357 Appends a COSBase object from a COSObjectable to the K entry. @param objectable the COSObjectable to process
2358 Inserts a PDF object before a reference object. @param newKid the new COSObjectable object to insert @param refKid the reference object before which to insert
2359 Removes a removable kid from the COSBase object. @param objectable the COSObjectable object to remove @return true if removal is successful, false otherwise
2360 Sets the value in the dictionary under key "V". Notifies of a change if the new value differs from the old. @param value COSBase object to be set or removed if null
2361 Retrieves or creates the color space without specific resources. @return PDColorSpace instance, null if not defined @throws IOException if an error occurs during creation
2362 Creates a PDPropertyList based on the dictionary type. @param dict COS dictionary representing the property list @return PDPropertyList object specific to the dictionary type
2363 Retrieves line width from PDF dictionary. @return Float value representing line width or null if not found
2364 Retrieves the miter limit from the PDF dictionary. @return Miter limit as a float, or null if not found or invalid
2365 Retrieves flatness tolerance value. @return Float value representing flatness tolerance or null if not found
2366 Retrieves smoothness tolerance value. @return Float value representing smoothness or null if not found
2367 Retrieves stroking alpha constant from PDF dictionary. @return Float value of stroking alpha or null if not found
2368 Retrieves non-stroking alpha constant. @return Float value of non-stroking alpha or null if not found
2369 Initializes a PDAnnotationLink with a given dictionary. @param field the COSDictionary to initialize the annotation link with
2370 Initializes a PDAnnotationMarkup with a given dictionary. @param dict the COSDictionary to initialize the annotation with
2371 Creates a new PDAnnotationPopup instance. @param field the COSDictionary to initialize the annotation with
2372 Creates an unknown annotation from a given dictionary. @param dic the COSDictionary to initialize the annotation with
2373 Initializes a PDAnnotationWidget with a given dictionary. @param field the COSDictionary to initialize the annotation with
2374 Retrieves export values of options from the PDF field. @return list of option strings or empty if none found
2375 Retrieves and converts values associated with COSName.V. @return List of string values or empty list if no matching object
2376 Retrieves default value from PDF document. @return List of string values representing the default value or empty list if not found
2377 Writes a PDF object to the output stream. @param obj COSBase object representing the PDF content @throws IOException if an I/O error occurs
2378 Writes a PDF object to the given OutputStream. @param output stream to write to @param object COSBase object representing the PDF content @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
2379 Adds a corner curl effect. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius radius of the arc @param cx center X coordinate @param cy center Y coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo whether to add a move-to command before drawing @throws IOException if I/O error occurs during drawing
2380 Draws a basic ellipse. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary @throws IOException if I/O error occurs during drawing
2381 Initializes a new PDPageFitDestination with specific PDF name. Grows the internal array to size 2 and sets the second element to "Fit".
2382 Sets the fit bounding box flag in the PDF array. @param fitBoundingBox flag to enable or disable fit bounding box
2383 Initializes a PDPageFitHeightDestination. Grows the internal array to size 3 and sets the type at index 1.
2384 Sets the left coordinate. @param x left position value; -1 for no position
2385 Sets the fit bounding box option. @param fitBoundingBox flag to enable or disable fit bounding box
2386 Initializes a new PDPageFitRectangleDestination with specific settings. Grows the internal array to size 6 and sets the type at index 1.
2387 Sets the left value in the array. @param x integer value to set; if -1, sets null at index 2
2388 Sets the bottom position of an element. @param y vertical position to set; -1 for no position
2389 Sets the right value in the array. @param x integer value to set; -1 sets null at index 4
2390 Sets the top position in the array. @param y vertical coordinate to set or -1 to clear
2391 Initializes a destination to fit page width. Grows the internal array and sets the type.
2392 Sets the top position in an array. @param y vertical coordinate to set or -1 to clear
2393 Sets the bounding box fitting option. @param fitBoundingBox flag to enable or disable bounding box fitting
2394 Initializes a new PDPageXYZDestination with default size and type.
2395 Sets the left value in the array. @param x integer value to set; -1 sets null at index 2
2396 Sets the top position in an array. @param y vertical coordinate to set or -1 to clear
2397 Sets the zoom level in a PDF document. @param zoom zoom factor to be applied
2398 Resolves the bounding box for a widget's appearance. @param fieldWidget annotation widget to resolve bounding box for @param appearanceStream appearance stream associated with the widget @return PDRectangle representing the bounding box, retranslated if necessary
2399 Decrypts a PDF dictionary. @param dictionary the dictionary to decrypt @param objNum unique object identifier @param genNum generation number @throws IOException if an I/O error occurs during decryption
2400 Sets the bounding box for a PDF object. @param bbox PDRectangle representing the new bounding box
2401 Sets the color value for a given name in the PDF dictionary. @param name key for the color entry @param value PDGamma object representing the color
2402 Sets four colors in the PDF dictionary. @param name key for the color setting @param value PDFourColours object representing the color values
2403 Creates a new PDF page with letter size.
2404 Retrieves or creates the FDF dictionary from the PDF catalog. @return FDFDictionary object associated with the catalog
2405 Initializes a new FDFDocument with default settings. Sets up document state, version, trailer, and catalog.
2406 Retrieves or creates the FDF catalog from the PDF document. @return FDFCatalog object representing the document's catalog
2407 Retrieves or creates the fractional space to allocate. @return PDRange object representing the allocation range
2408 Builds and sets CID set for a font descriptor. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O error occurs during processing
2409 Constructs a new PDTilingPattern instance. Initializes resources and sets default properties as per the PDF specification.
2410 Inserts a sibling before the current outline item. @param newSibling the new sibling to insert
2411 Inserts a new sibling after the current outline item. @param newSibling PDOutlineItem to insert as the next sibling
2412 Sets the first bead and updates the thread. @param bead PDThreadBead object to be set as the first bead
2413 Constructs a new PDThreadBead instance. Initializes the bead dictionary and sets initial next and previous beads to itself.
2414 Sets the role map dictionary for a PDF document. @param roleMap mapping of role names to their corresponding values
2415 Sets a PDF object's name and value. @param name the key for the PDF dictionary @param value the value to be set
2416 Sets the rendering intent of a PDF document. @param ri rendering intent string to be set
2417 Sets the name of an action with key "N". @param name value to be set as the action's name
2418 Sets the style of the object. @param s style string to be applied
2419 Initializes page labels for a PDF document. @param document the PDDocument to apply labels to
2420 Constructs a PDStructureElement with a specified type and parent node. @param structureType string representing the element's structure type @param parent PDStructureNode representing the parent node
2421 Initializes a PDStructureTreeRoot with a specific type.
2422 Initializes a new PDShadingPattern instance. Sets the pattern type to shading pattern in the PDF dictionary.
2423 Initializes a new PDF action. Sets up the action dictionary and type.
2424 Retrieves the document outline. @return PDDocumentOutline object or null if not found
2425 Retrieves the parent outline node. @return PDOutlineNode object or null if no parent exists
2426 Initializes a new PDRectlinearMeasureDictionary instance. Sets the subtype to "Rectlinear".
2427 Constructs a PDTransition with default 'R' (right-to-left) style.
2428 Sets a date item in the PDF dictionary using a string key. @param key string representing the item's key @param date Calendar object to set
2429 Sets a date in an embedded dictionary. @param embedded key for the embedded dictionary @param key key for the date item @param date Calendar object to set
2430 Sets the creation date of a PDF document. @param date Calendar object representing the creation date
2431 Sets the document's modification date. @param date Calendar object representing the new modification date
2432 Sets the creation date of an annotation. @param date Calendar object representing the creation date
2433 Sets the modified date of the PDF object. @param c Calendar object representing the new modification date
2434 Sets the creation date of the PDF document. @param creationDate Calendar object representing the creation date to be set
2435 Sets the signing date in the PDF document. @param cal Calendar object representing the signing date
2436 Sets custom metadata value in PDF. @param fieldName key for the metadata field @param fieldValue value to be set or removed if null
2437 Sets a string item in the PDF dictionary under a specified key. @param name key for the dictionary item @param value string to set or null to remove the item
2438 Sets the base URI in the PDF dictionary. @param base string representing the base URI
2439 Sets the application version in the PDF dictionary. @param applicationVersion string representing the application version
2440 Sets the units of measurement in the PDF dictionary. @param units string representing the units to be set
2441 Sets the fractional display format. @param fractionalDisplay format type ("D", "F", "R", "T", or null) @throws IllegalArgumentException if invalid format is provided
2442 Sets the thousands separator in the PDF dictionary. @param thousandsSeparator string representing the thousands separator to be set
2443 Sets the decimal separator in the PDF document. @param decimalSeparator string representing the new decimal separator
2444 Sets the label prefix string in the PDF dictionary. @param labelPrefixString the prefix string to be set
2445 Sets the label suffix string in the PDF dictionary. @param labelSuffixString the suffix to be added to labels
2446 Sets the label position in a PDF dictionary. @param labelPositionToValue string representing label position ("S", "P", or null) @throws IllegalArgumentException if value is not "S", "P", or null
2447 Constructs an FDFField from an XML element. @param fieldXML XML element representing the field data @throws IOException if an error occurs during processing
2448 Creates an optional content group with a given name. @param name the name of the optional content group
2449 Sets an integer value in the PDF dictionary and notifies of changes. @param name string representation of the item's key @param value integer value to be stored
2450 Sets a number in the PDF dictionary. @param name key for the item in the dictionary @param value integer value to be stored
2451 Sets the denominator in the PDF dictionary. @param denominator integer value to be stored as the denominator
2452 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to associate the image with @param image input 1-bit black and white BufferedImage @return PDImageXObject object created from the image @throws IOException if an I/O error occurs during processing
2453 Sets the number of bits per color component. @param bitsPerComponent integer value representing bits per component
2454 Sets the number of bits per color component. @param bitsPerComponent integer value representing bits per component
2455 Sets the number of bits per coordinate in the PDF. @param bitsPerCoordinate number of bits for each coordinate
2456 Sets the number of bits per coordinate for the PDF. @param bitsPerCoordinate number of bits for each coordinate
2457 Sets a float number in the PDF dictionary. @param name key for the item in the dictionary @param value float value to be set
2458 Sets intensity value in PDF dictionary. @param i intensity value to be stored
2459 Sets the conversion factor in the PDF dictionary. @param conversionFactor float value representing the conversion factor
2460 Parses a directory object from the input source. @return COSBase object representing parsed data or null if unknown type @throws IOException on I/O error during parsing
2461 Retrieves file specification from PDF stream. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2462 Retrieves file specification from FDF document. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2463 Retrieves a list of embedded FDFs. @return List of PDFileSpecification objects representing embedded FDFs @throws IOException if an error occurs during parsing
2464 Retrieves file specification from reference dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2465 Retrieves file specification from PDF dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2466 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2467 Retrieves and creates file specification from PDF dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2468 Retrieves file specification from an action. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2469 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2470 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2471 Retrieves file specification from PDF dictionary. @return PDFileSpecification object or null if not found @throws IOException if the base type is unknown
2472 Creates a new FDF annotation highlight. Initializes the annotation and sets its subtype to "Highlight".
2473 Creates a new FDF annotation for squiggly text markup.
2474 Creates a new FDF annotation for strike-out text markup. Initializes the annotation and sets its subtype to "StrikeOut".
2475 Constructs an underline annotation. Initializes a new FDF annotation and sets its subtype to "Underline".
2476 Creates a new file attachment annotation. Sets the subtype to "FileAttachment".
2477 Initializes a new PDAnnotationInk object. Sets the subtype to "Ink".
2478 Creates a new PDAnnotationLine instance. Initializes the annotation subtype and sets default line coordinates.
2479 Initializes a new PDAnnotationPolygon. Sets the subtype to "Polygon".
2480 Creates a new instance of PDAnnotationPolyline. Initializes the annotation's subtype to "PolyLine".
2481 Initializes a new PDAnnotationRubberStamp with subtype set to "RubberStamp".
2482 Creates a new square or circle annotation. @param subType specifies the type of annotation ("Square" or "Circle")
2483 Initializes a new instance of PDAnnotationText. Sets the subtype to "Text".
2484 Initializes a new text markup annotation. @param subType subtype of the text markup annotation
2485 Retrieves the bounding box for an object. @return PDRectangle representing the bounding box or null if not found
2486 Retrieves the bounding box of the PDF element. @return PDRectangle object or null if not found
2487 Retrieves rectangle from annotation. @return PDRectangle object or null if not found
2488 Retrieves the fringe rectangle of an annotation. @return PDRectangle object representing the fringe or null if not found
2489 Retrieves the fringe rectangle from an annotation. @return PDRectangle object or null if RD array is not found
2490 Retrieves the fringe rectangle of an annotation. @return PDRectangle object representing the fringe or null if not found
2491 Retrieves the fringe rectangle of an annotation. @return PDRectangle object representing the fringe or null if not found
2492 Retrieves the font bounding box. @return PDRectangle representing the font bounding box or null if not found
2493 Retrieves the font bounding box. @return PDRectangle object representing the font's bounding box or null if not found
2494 Retrieves the bounding box of the PDF content. @return PDRectangle object representing the bounding box or null if not present
2495 Retrieves the bounding box of the PDF content. @return PDRectangle object representing the bounding box or null if not found
2496 Retrieves the bounding box of a PDF object. @return PDRectangle object representing the bounding box or null if not set
2497 Retrieves the rectangle from the PDF dictionary. @return PDRectangle object or null if invalid or missing
2498 Retrieves the rectangle difference from the PDF object. @return PDRectangle object representing the difference or null if not found
2499 Retrieves the rectangle difference from the PDF object. @return PDRectangle object representing the difference or null if not found
2500 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not found
2501 Retrieves rectangle from a PDF annotation. @return PDRectangle object or null if not found
2502 Sets the line dash pattern for graphics. @param array COSArray containing dash pattern values @param phase initial phase of the dash pattern
2503 Retrieves or creates the line dash pattern for a PDF object. @return PDLineDashPattern representing the line dash pattern
2504 Retrieves the line dash pattern from a PDF dictionary. @return PDLineDashPattern object or null if not found or invalid format
2505 Retrieves or creates the line dash pattern for a PDF object. @return PDLineDashPattern representing the dash style
2506 Generates a stencil image from a PDF image. @param pdImage PDF image object @param paint color to fill the image @return BufferedImage with alpha channel set based on PDF mask @throws IOException if an error occurs during processing
2507 Retrieves the transformation matrix from the PDF object. @return a Matrix instance representing the transformation or an empty Matrix if not found
2508 Retrieves and creates a Matrix from the COS object. @return Matrix instance or empty Matrix if not found
2509 Retrieves the transformation matrix from the PDF object. @return a new Matrix instance or an empty Matrix if not found
2510 Sets an attribute value by name in the PDF object. @param attrName the attribute name as a string @param attrValue the COSBase object representing the attribute value
2511 Retrieves inheritable attribute from a PDF dictionary. @param node the current dictionary node to search in @param key the attribute key to find @return COSBase object or null if not found
2512 Retrieves boolean value from dictionary by key. @param key primary dictionary key @param defaultValue default boolean value if not found @return true if found and is COSBoolean.TRUE, otherwise defaultValue
2513 Retrieves integer value from dictionary by key. @param key primary dictionary key @param defaultValue default integer value if not found @return integer value or default if key is not found
2514 Retrieves integer value from dictionary by keys. @param firstKey primary dictionary key @param secondKey secondary dictionary key (optional) @return integer value or -1 if both keys are not found
2515 Constructs a PDInlineImage from given parameters, data, and resources. @param parameters COSDictionary containing configuration parameters @param data raw image data as bytes @param resources PDResources object for resource management @throws IOException if decoding fails
2516 Determines the image suffix based on compression filters. @return File suffix ("jpg", "tiff", or "png") based on filter types
2517 Retrieves COS objects by specified types from the xref table. @param type1 first type of COSName to match @param type2 second optional type of COSName to match @return List of COSObjects that match the specified types
2518 Searches for and validates PDF trailer. @param trailer COSDictionary to update with found values @return true if valid trailer is found, false otherwise @throws IOException if an I/O error occurs
2519 Searches for trailer items in the PDF document. @param trailer COSDictionary representing the trailer @return true if a valid root object is found, false otherwise
2520 Retrieves the page tree from the PDF document. @return PDPageTree object representing the pages in the document
2521 Initializes a PDPageTree with the given root dictionary and no document. @param root COSDictionary representing the page tree root
2522 Converts a character code to its Unicode representation using a custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
2523 Retrieves the transparency group for this object. @return PDTransparencyGroup instance or null if not found @throws IOException if an I/O error occurs during retrieval
2524 Sets the MAC subtype in the PDF document's parameters. @param macSubtype subtype string to be set or removed if null
2525 Sets the Mac creator in PDF document parameters. @param macCreator string representing the Mac creator
2526 Sets the Mac resource fork in a PDF dictionary. @param macResFork string representing the Mac resource fork data
2527 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
2528 Parses an FDF document from the input source. @return FDFDocument object representing the parsed FDF data @throws IOException if parsing fails or an I/O error occurs
2529 Parses a PDF or FDF file and returns a PDDocument object. @param lenient if true, parsing continues on errors @return PDDocument object representing the parsed document @throws IOException if an error occurs during parsing
2530 Retrieves or creates the AcroForm from the PDF document with default fixup. @return PDAcroForm object or null if not found
2531 Finds the page destination for a named destination. @param namedDest the named destination to find @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs
2532 Retrieves or creates a PDColorSpace by name. @param name the name of the colorspace @param wasDefault whether it's a default colorspace @return PDColorSpace object @throws IOException if an I/O error occurs
2533 Checks if a color space exists in PDF resources. @param name the key for the color space within the dictionary @return true if color space is present, false otherwise
2534 Retrieves an extended graphics state by name. @param name the unique identifier for the graphics state @return PDExtendedGraphicsState object or null if not found
2535 Checks if the given XObject is an image. @param name the COSName of the XObject to check @return true if the XObject is an image, false otherwise
2536 Retrieves color space names from PDF resources. @return Iterable of COSName objects representing color spaces or empty set if not found
2537 Retrieves XObject names from PDF resources. @return Iterable of COSName objects or empty set if not found
2538 Retrieves font names from PDF resources. @return Iterable of COSName objects representing font names or empty set if none found
2539 Retrieves property names from PDF resources. @return Iterable of COSName objects representing properties or empty set if none found
2540 Retrieves shading resource names from PDF document. @return Iterable of COSName objects representing shading names or empty set if none found
2541 Retrieves pattern names from PDF resources. @return Iterable of COSName objects representing patterns or empty set if none found
2542 Retrieves external graphics state names from PDF resources. @return Iterable of COSName objects representing external graphics states or empty set if none found
2543 Adds an item to a resource dictionary. @param kind type of resource dictionary @param prefix base string for the key @param object value to be added @return unique COSName key for the item
2544 Adds a font resource to the dictionary. @param name the key for the font resource @param font the PDFont object to be added
2545 Adds a colorspace to the resource dictionary. @param name key for the colorspace entry @param colorSpace the colorspace object to add
2546 Adds an extended graphics state to the resource dictionary. @param name unique identifier for the graphics state @param extGState the extended graphics state object to be added
2547 Adds a shading resource to the dictionary. @param name unique key for the shading resource @param shading PDShading object representing the shading
2548 Adds a pattern to the resource dictionary. @param name unique identifier for the pattern @param pattern PDAbstractPattern object to be added
2549 Adds a property to the resource dictionary. @param name key for the property @param properties value containing property details
2550 Adds an XObject to the resources. @param name the key for the XObject @param xobject the XObject to be added
2551 Sets an embedded file in the PDF document. @param file PDEmbeddedFile object to be set
2552 Sets the embedded file with Unicode name. @param file PDEmbeddedFile to be set
2553 Retrieves standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
2554 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
2555 Sets the standard encryption filter dictionary. @param cryptFilterDictionary crypt filter dictionary to set
2556 Sets the default encryption filter dictionary. @param defaultFilterDictionary the crypt filter dictionary to set as default
2557 Retrieves a character procedure for a given code. @param code unique identifier for the character procedure @return PDType3CharProc object or null if not found
2558 Retrieves the base state from a PDF dictionary. @return BaseState object representing the current state, defaults to ON if not found
2559 Sets the base state in the PDF dictionary. @param state BaseState object to be set
2560 Enables or disables an optional content group. @param group the PDOptionalContentGroup to enable/disable @param enable true to enable, false to disable @return true if the group was found and updated, false otherwise
2561 Initializes a content stream for a tiling pattern. @param pattern the PDTilingPattern to write to @throws IOException if I/O error occurs or multiple writers are opened
2562 Retrieves or creates the appearance dictionary for an annotation. @return PDAppearanceDictionary object
2563 Retrieves the rollover appearance of a PDF annotation. @return PDAppearanceEntry object or default normal appearance if not found
2564 Retrieves the down appearance of a PDF annotation. @return PDAppearanceEntry object or normal appearance if not found
2565 Retrieves the first child outline item. @return PDOutlineItem object or null if not found
2566 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if not found
2567 Retrieves the signature from the PDF document. @return PDSignature object or null if not found
2568 Appends a bead to the current thread. @param append PDThreadBead object to be appended
2569 Retrieves the normal appearance stream for a PDF annotation. @return PDAppearanceStream object or null if not found
2570 Retrieves the first non-Off value from the normal appearance dictionary of a widget. @return String representing the name or empty string if not found
2571 Validates and updates page count in PDF document. @param root the root COSDictionary of the PDF @throws IOException if page tree is invalid
2572 Retrieves value by name from a PDF dictionary. @param name key to search for in the dictionary @return value associated with the name or null if not found
2573 Retrieves value at specified index. @param index position in the tree node @return COSObjectable value or null if not found @throws IOException if an I/O error occurs
2574 Sets the child nodes (kids) for a PDF tree node. @param kids list of PDNumberTreeNode children to set
2575 Sets a map of numbers and corresponding COSObjectable values in the PDF node. @param numbers map where keys are integers and values are COSObjectable objects
2576 Calculates the number of output parameters. @return Number of output parameters, 0 if none
2577 Retrieves a PDRange object for a given output index. @param n Output index @return PDRange object initialized with the range values and index
2578 Clips each value in the input array to its corresponding range. @param inputValues array of values to clip @return new float array with clipped values or original if no ranges
2579 Calculates the number of input parameters. Uses domain values to determine count. @return Number of input parameters
2580 Retrieves PDRange for a specific input index. @param n index of the range in the domain values array @return PDRange object initialized with the domain values at index n
2581 Calculates sample index for a given vector. @param vector input vector of indices @return calculated sample index as an integer
2582 Retrieves or initializes the ENCODE array for a PDF object. Initializes with default values if not present. @return COSArray representing the encode values
2583 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2584 Retrieves and initializes a PDRange for a specific parameter. @param n index of the parameter @return PDRange object initialized with encode values at index n
2585 Checks if the "Top" edge is attached. @return true if the "Top" edge is attached, false otherwise
2586 Checks if the bottom edge is attached. @return true if bottom edge is attached, false otherwise
2587 Checks if the left edge is attached. @return true if left edge is attached, false otherwise
2588 Checks if the "Right" edge is attached. @return true if the "Right" edge is attached, false otherwise
2589 Constructs a PDCIDFont from a PDF dictionary. Initializes with font dictionary and parent font, then reads widths and vertical displacements.
2590 Initializes a DictionaryEncoding with base and differences. @param baseEncoding COSName of the base encoding @param differences COSArray containing encoding differences
2591 Initializes a DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary containing font encoding details
2592 Initializes a DictionaryEncoding with the given font encoding. @param fontEncoding the COSDictionary containing the font encoding @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
2593 Initializes a CIEDictionaryBasedColorSpace with RGB data. @param rgb COSArray containing color space data
2594 Sets the first component's range. @param range PDRange object defining min and max values or null to reset defaults
2595 Sets the B component range. @param range PDRange object defining min and max values or null to reset defaults
2596 Retrieves an optional content group by name. @param name the name of the group to find @return PDOptionalContentGroup object or null if not found
2597 Adds a PDF optional content group. @param ocg the optional content group to add
2598 Retrieves and returns a collection of optional content groups. @return Collection of PDOptionalContentGroup objects
2599 Initializes a ShadingContext for PDF shading. @param shading PDShading instance @param cm ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @throws IOException if initialization fails
2600 Retrieves the PDRange for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2601 Retrieves color using predefined COSName. @return PDColor object associated with COSName.C or null if not found
2602 Retrieves the border color of a PDF element. @return PDColor object representing the border color or null if not found
2603 Retrieves background color. @return PDColor object representing the background color or null if not found
2604 Adds key usage extensions to the PDF dictionary. @param digitalSignature '0' or '1' indicating digital signature capability @param nonRepudiation '0' or '1' indicating non-repudiation capability @param keyEncipherment '0' or '1' indicating key encipherment capability @param dataEncipherment '0' or '1' indicating data encipherment capability @param keyAgreement '0' or '1' indicating key agreement capability @param keyCertSign '0' or '1' indicating certificate signing capability @param cRLSign '0' or '1' indicating CRL signing capability @param encipherOnly '0' or 'X' indicating encipher only capability @param decipherOnly '0' or 'X' indicating decipher only capability
2605 Retrieves specific content from a PDF file based on byte range. @param pdfFile input stream of the PDF file @return byte array containing filtered and converted content @throws IOException if an I/O error occurs during processing
2606 Extracts and converts contents from a PDF file based on byte range. @param pdfFile input PDF file as a byte array @return converted byte array of the specified content @throws IOException if an I/O error occurs during processing
2607 Retrieves signed content from a PDF file. @param pdfFile input stream of the PDF file @return byte array containing signed content or empty if not found
2608 Extracts signed content from a PDF file. @param pdfFile byte array of the PDF file @return byte array containing signed content @throws IOException if an I/O error occurs
2609 Retrieves the string value associated with a given PDF key. @param name the PDF key as a string @return String value or null if not found
2610 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
2611 Retrieves the string value associated with the PDF key "N". @return String value or null if not found
2612 Converts PDF dictionary value to string by key with default. @param key the dictionary key as a string @param defaultValue value to return if key not found @return String representation of the value or default if null
2613 Retrieves guideline style from dictionary. @return string representation of guideline style or "solid" if not found
2614 Retrieves icon name from annotation. @return String representation of the icon or default note if not found
2615 Retrieves attachment name from PDF object. @return Name of the attachment or default push pin name if not found
2616 Retrieves line ending style. @return String representation of line ending style or default if not found
2617 Retrieves the highlight mode of the annotation. @return String representation of the highlight mode or default value if not found
2618 Retrieves the reply type from the COS object. @return String representation of the reply type or default if not found
2619 Retrieves name from COS object. @return String representation of the name or "NAME_DRAFT" if not found
2620 Retrieves the name from the COS object. @return String representation of the name or default if not found
2621 Retrieves the highlighting mode of an annotation. @return Highlighting mode as a string, default is "I"
2622 Retrieves the style of an object. @return style as string, defaulting to "Solid"
2623 Retrieves the type of the object as a string. @return Type of the object or "ExData" if not specified
2624 Retrieves style of the transition effect. @return String representation of the transition style or default 'R' if not found
2625 Retrieves the dimension name from the COS object. @return Dimension name as a string or default value if not found
2626 Retrieves motion transition effect as string. @return transition effect name or null if not found
2627 Retrieves non-full screen page mode preference. @return string representation of the non-full screen page mode or "UseNone" if not set
2628 Retrieves reading direction preference. @return String representing reading direction or default L2R if not set
2629 Retrieves view area preference as string. @return String representation of view area or CropBox if not set
2630 Retrieves view clip setting from preferences. @return View clip as string or CropBox if not set
2631 Retrieves print area setting from preferences. @return String representation of print area or CropBox if not found
2632 Retrieves print clip setting. @return String value of print clip or CropBox if not set
2633 Retrieves print scaling preference as string. @return print scaling value or default if not set
2634 Checks if the given XRef offset is valid and returns it. @param startXRefOffset starting offset of the XRef stream or table @return valid XRef offset, or -1 if not found @throws IOException if an I/O error occurs during validation
2635 Retrieves the PDF document's version. Checks both the header and catalog for versions. @return the highest version number as a float
2636 Retrieves and processes attribute objects from the PDF document. @return Revisions object containing PDAttributeObject instances
2637 Checks if the collection has only one item, which is the owner. @return true if empty in context, false otherwise
2638 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
2639 Creates an object from a PDF base element. @param kid PDF base element to process @return COSObjectable instance or integer value, or null if unsupported type
2640 Sets the PDF document's name. @param name new name for the document
2641 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption dictionary
2642 Retrieves the security handler for the PDF document. @return SecurityHandler object configured with ProtectionPolicy @throws IOException if no security handler is available for the current filter
2643 Retrieves annotations from an FDF document. @return List of FDFAnnotation objects or null if no annotations exist @throws IOException if an I/O error occurs
2644 Checks if the character set matches based on CIDSystemInfo and FontInfo. @param cidSystemInfo the CID system info to compare against @param info the font info containing character set details @return true if character sets match, false otherwise
2645 Checks if the PDF object subtype is "NChannel". @return true if subtype is "NChannel", false otherwise
2646 Retrieves the open action or destination from a PDF document. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs during retrieval
2647 Retrieves an action associated with a field. @return PDAction object or null if not found
2648 Retrieves JavaScript actions from document dictionary. @return Map of named PDActionJavaScript objects or null if none found
2649 Retrieves the next action or list of actions from a PDF dictionary. @return List of PDAction objects representing the next actions
2650 Retrieves and creates an action from the PDF document. @return PDAction object or null if not found
2651 Retrieves and creates a PDAction from the 'E' key in actions. @return PDAction object or null if not found
2652 Retrieves and creates a PDAction from the 'X' dictionary. @return PDAction object or null if not found or unsupported type
2653 Retrieves and creates a PDAction from the "D" dictionary entry. @return PDAction object or null if not found
2654 Retrieves and creates a PDAction from the 'U' dictionary entry. @return PDAction object or null if not found
2655 Retrieves and creates a PDAction for the "FO" key. @return PDAction object or null if not found or unsupported type
2656 Retrieves and creates a PDAction for the "BL" entry. @return PDAction object or null if not found
2657 Retrieves and creates a PDAction for the 'PO' entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2658 Retrieves and creates a PDAction for the 'PC' entry in the actions dictionary. @return PDAction object or null if not found
2659 Retrieves and creates a PDAction from the PDF document's PV entry. @return PDAction object or null if not found
2660 Retrieves and creates a PDAction for the "pi" entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2661 Retrieves and creates a PDAction for the WC entry. @return PDAction object or null if not found
2662 Retrieves and creates a Web Screen action from the PDF document. @return PDAction object or null if not found
2663 Retrieves and creates a DS action from the PDF document. @return PDAction object or null if not found
2664 Retrieves and creates a WP action from the PDF document. @return PDAction object or null if not found
2665 Retrieves and creates a PDAction from the DP dictionary. @return PDAction object or null if not found
2666 Retrieves and creates a PDAction from the 'K' entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2667 Retrieves and creates a PDAction from the 'F' dictionary entry. @return PDAction object or null if not found or unsupported type
2668 Retrieves and creates a PDAction from the 'V' entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2669 Retrieves and creates a PDAction from the 'C' key in actions. @return PDAction object or null if not found
2670 Retrieves and creates a PDAction for the 'O' entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2671 Retrieves and creates a PDAction from the 'C' key in the PDF document. @return PDAction object or null if not found or unsupported type
2672 Retrieves and creates a PDAction from the PDF document. @return PDAction object or null if not found
2673 Retrieves and creates an action from the PDF document. @return PDAction object or null if no action is found
2674 Retrieves an action from the PDF object. @return PDAction or null if not found
2675 Retrieves string value of a property. @param propertyKey key for the property in the info dictionary @return string value of the property or null if not found
2676 Retrieves metadata value by field name. @param fieldName the metadata field key as a string @return metadata value or null if not found
2677 Retrieves string value from COS object by key. @param name the dictionary key as a string @return string value or null if not found
2678 Retrieves the base URI from the PDF dictionary. @return base URI as a string or null if not found
2679 Retrieves version from PDF dictionary. @return version string or null if not found
2680 Retrieves units from COS object. @return string representing units or null if not found
2681 Retrieves string value from PDF dictionary by key with a default. @param key the dictionary key as a string @param defaultValue value to return if key is not found @return string value or provided default if not found
2682 Retrieves string from embedded dictionary by key with a default. @param embedded the name of the embedded dictionary @param key the dictionary key @param defaultValue value to return if key is not found @return string value or provided default if not found
2683 Retrieves operation type from parameters. @return operation string or default "OPEN"
2684 Retrieves default appearance string from PDF dictionary. @return default appearance string or empty if not found
2685 Retrieves file name using various methods. @return File name as string or null if not found
2686 Sets the formatted value and notifies if changed. @param formattedValue new formatted string to set
2687 Checks if a group exists by name. @param groupName name of the group to check @return true if group exists, false otherwise
2688 Constructs the fully qualified name by combining partial names. @return fully qualified name as string or null if not found
2689 Fetches date from PDF dictionary by key. @param key the dictionary key as a string @param defaultValue value to return if key is not found or conversion fails @return Calendar object or provided default value if not found or conversion fails
2690 Retrieves a date from an embedded dictionary in the PDF document. @param embedded key for the embedded dictionary @param key the dictionary key for the date @param defaultValue value to return if key is not found or conversion fails @return Calendar object or provided default value if not found or conversion fails
2691 Retrieves the revision number from the dictionary. @return long value representing the revision or -1 if not found
2692 Retrieves the minimum revision number. @return long value representing the minimum revision or -1 if not found
2693 Creates a COSInputStream from an input stream using specified filters. @param filters list of filters to apply during decoding @param parameters dictionary containing decoding parameters @param in InputStream containing encoded data @param options decoding options @return COSInputStream with decoded data @throws IOException if an I/O error occurs
2694 Creates a view of the input stream with decoding applied. @return RandomAccessRead object containing decoded data @throws IOException if an I/O error occurs during processing
2695 Creates an input stream from a PDF stream with optional filter exclusion. @param stopFilters list of filter names to exclude @return InputStream containing decoded data @throws IOException if I/O error occurs or filters are not found
2696 Retrieves a float value from the COS object by key. @param name dictionary key as string @return float value associated with the key or -1 if not found
2697 Retrieves conversion factor from COS object. @return float value representing the conversion factor or -1 if not found
2698 Initializes a PDFunctionType2 object with given COSBase. @param function the COSBase representing the function
2699 Retrieves the leader line length of an annotation. @return float value representing the leader line length or -1 if not found
2700 Retrieves the leader extend value of an annotation. @return float value representing leader extend or -1 if not found
2701 Retrieves the leader offset of the annotation. @return float value representing the leader offset or -1 if not found
2702 Retrieves the 'V' value from the dictionary. @return float value associated with key 'V' or -1 if not found
2703 Retrieves the CYX value from the PDF COS object. @return float value associated with CYX or -1 if not found
2704 Retrieves a float value by name. @param name key to search for in the COS object @param defaultValue default float value if not found @return float value associated with the key or default value
2705 Retrieves intensity value from COS object. @return float representing intensity or 0 if not found
2706 Computes the font height for a given PDFont. @param font the PDFont to compute the height for @return the computed font height in text space @throws IOException if an I/O error occurs
2707 Writes a sequence of tokens to the PDF content stream. @param tokens variable number of objects representing tokens @throws IOException if an I/O error occurs or unknown object type is encountered
2708 Writes a list of tokens to the PDF content stream. @param tokens list of objects to be written @throws IOException if an I/O error occurs
2709 Retrieves decode parameters from PDF stream. @return list of decoded parameters or null if not found @throws IOException for unknown object types
2710 Retrieves file decode parameters. @return list of decoded parameters or null if not found @throws IOException for unknown object types
2711 Appends a child structure element and sets its parent. @param structureElement the PDStructureElement to add as a child
2712 Inserts a structure element before a reference object. @param newKid the new PDStructureElement to insert @param refKid the reference object before which to insert
2713 Removes a child element from the structure. @param structureElement the element to remove @return true if removal is successful, false otherwise
2714 Creates a default position vector. @param cid content identifier @return Vector with x as half of width and y from dw2 array
2715 Retrieves properties by name from PDF resources. @param name the unique identifier for the properties @return PDPropertyList object or null if not found
2716 Retrieves the optional content property list. @return PDPropertyList object or null if not found
2717 Retrieves the optional content property list. @return PDPropertyList object or null if not present
2718 Retrieves OCGs from the dictionary. @return List of PDPropertyList objects representing OCGs or empty list if none found
2719 Retrieves the optional content property list. @return PDPropertyList object or null if not found
2720 Constructs a PDAnnotationCaret from a given dictionary. @param field the COSDictionary to initialize the annotation with
2721 Initializes a PDAnnotationFileAttachment with a given dictionary. @param field COSDictionary to initialize the annotation with
2722 Creates a new PDAnnotationFreeText instance. @param field the COSDictionary to initialize the annotation with
2723 Initializes a PDAnnotationInk with a given dictionary. @param dict the COSDictionary to initialize the annotation with
2724 Initializes a PDAnnotationLine with a given dictionary. @param field the COSDictionary to initialize the annotation with
2725 Initializes a PDAnnotationPolygon with a given dictionary. @param dict the COSDictionary to initialize the annotation with
2726 Initializes a PDAnnotationPolyline with a given dictionary. @param dict the COSDictionary to initialize the annotation with
2727 Creates a PDAnnotationRubberStamp from a COSDictionary. @param field the COSDictionary representing the rubber stamp annotation
2728 Constructs a PDAnnotationSound from a given dictionary. @param field the COSDictionary to initialize the annotation with
2729 Constructs a PDAnnotationSquareCircle from a COSDictionary. @param dict the COSDictionary containing annotation properties
2730 Constructs a PDAnnotationText with a given dictionary. @param field the COSDictionary to initialize the annotation with
2731 Initializes a PDAnnotationTextMarkup with a given dictionary. @param field COSDictionary to initialize the annotation with
2732 Retrieves the popup annotation associated with this annotation. @return PDAnnotationPopup object or null if not found
2733 Retrieves all annotation widgets associated with the field. @return List of PDAnnotationWidget objects
2734 Writes prepared PDF objects to a COSStream. @param stream the COSStream to write to @return the updated COSStream with objects written @throws IOException if an I/O error occurs
2735 Writes a COSDictionary to the OutputStream. @param output stream to write to @param cosDictionary dictionary to write @throws IOException if an I/O error occurs
2736 Renders a polygon with a cloudy effect. @param vertices array of points defining the polygon @param isEllipse flag indicating if ellipse cloud radius should be used @throws IOException if I/O error occurs during rendering
2737 Encodes image data using PNG predictor encoding. @return PDImageXObject with encoded image @throws IOException if I/O error occurs during processing
2738 Sets the destination for a given PDF page. @param page PDPage object representing the target page
2739 Initializes a new embedded Go-To PDF action. Sets the subtype to 'EmbeddedGoTo'.
2740 Initializes a new Go-To action in PDF. Sets the subtype to "GoTo".
2741 Creates a new PDActionHide. Initializes the action with subtype "Hide".
2742 Creates a new Import Data action. Initializes the action with specific subtype.
2743 Initializes a new JavaScript action. Sets the subtype to "JavaScript".
2744 Creates a new launch action. Initializes the action with the subtype "Launch".
2745 Creates a new PDF movie action. Initializes the action with the specific subtype.
2746 Creates a new named PDF action. Initializes the action with the specified subtype.
2747 Creates a new remote goto PDF action. Initializes the action with subtype "GoToR".
2748 Creates a new PDF reset form action. Initializes the action with the specified subtype.
2749 Creates a new sound action in a PDF document. Initializes the action with the subtype "Sound".
2750 Creates a new submit form action. Initializes the action with specific subtype.
2751 Initializes a new thread-based PDF action. Sets the subtype to "Thread."
2752 Initializes a new URI action. Sets the subtype to 'URI'.
2753 Parses XML for stamp annotation appearance and constructs a COSDictionary. @param appearanceXML XML Element representing the appearance @return COSDictionary with parsed data or empty if not applicable @throws IOException if I/O error occurs during parsing
2754 Parses a COSArray from the input source. @return parsed COSArray object @throws IOException if an I/O error occurs during parsing
2755 Creates a new highlight annotation. Initializes with default subtype.
2756 Initializes a new squiggly text markup annotation.
2757 Creates a new strikeout annotation.
2758 Initializes a new underline annotation.
2759 Generates a BufferedImage for a tiling pattern. @param drawer PageDrawer instance to handle rendering @param pattern PDTilingPattern object representing the pattern @param colorSpace PDColorSpace for color management @param color PDColor to apply to the pattern @param xform AffineTransform for device scaling @param anchorRect Rectangle2D defining the anchor area @return BufferedImage containing the rendered tiling pattern @throws IOException if an I/O error occurs during rendering
2760 Calculates the anchor rectangle for a tiling pattern. @param pattern the PD TilingPattern object @return Rectangle2D representing the scaled anchor rectangle @throws IOException if /BBox is missing or other I/O errors occur
2761 Generates a stencil image using the specified paint. @param paint color to fill the stencil @return BufferedImage with alpha channel set based on PDF mask @throws IOException if an error occurs during processing or image is not a stencil
2762 Retrieves raw raster data from a PDF image. @param pdImage PDF image object @return WritableRaster containing pixel data @throws IOException if an I/O error occurs or image is invalid
2763 Converts a PDF image to an RGB BufferedImage with optional color key masking. @param pdImage the source PDF image @param region the clipping area for the image @param subsampling the subsampling factor for both X and Y axes @param colorKey the color key mask array (optional) @return a BufferedImage representation of the PDF image or null if conversion fails @throws IOException if an I/O error occurs during processing
2764 Retrieves or creates page resources. @return PDResources object representing the page's resources
2765 Retrieves the media box of a PDF page. @return PDRectangle representing the media box or default U.S. Letter if not found
2766 Retrieves the rotation angle of a PDF page. @return Rotation angle in degrees, multiples of 90, or 0 if not set
2767 Retrieves boolean value from PDF dictionary by key. @param key primary dictionary key as a string @param defaultValue default boolean value if not found @return true if found and is COSBoolean.TRUE, otherwise defaultValue
2768 Checks if the PDF field is volatile. @return true if the field is marked as volatile, otherwise false
2769 Checks if the object is hidden. @return true if hidden, otherwise false
2770 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
2771 Retrieves caption status from annotation. @return true if caption is enabled, otherwise false
2772 Determines if annotations should scale to fit. @return true if annotations should scale, false otherwise
2773 Determines if renaming is enabled. @return true if RENAME flag is set to true in template, otherwise false
2774 Checks if the object is isolated. @return true if isolated, false otherwise
2775 Checks if knockout is enabled. @return true if knockout is enabled, otherwise false
2776 Retrieves anti-aliasing setting from PDF dictionary. @return true if anti-aliasing is enabled, otherwise false
2777 Retrieves stroking overprint control setting. @return true if stroking overprint is enabled, otherwise false
2778 Retrieves automatic stroke adjustment setting. @return true if automatic stroke adjustment is enabled, otherwise false
2779 Retrieves alpha source flag from dictionary. @return true if alpha source is active, otherwise false
2780 Checks text knockout flag in dictionary. @return true if text knockout is enabled, otherwise false
2781 Retrieves 'h' action flag from PDF dictionary. @return true if 'h' is set to COSBoolean.TRUE, otherwise true by default
2782 Checks if the action is synchronous. @return true if the action is marked as synchronous, otherwise false
2783 Retrieves repeat setting from PDF action. @return true if repeat is enabled, otherwise false
2784 Retrieves mix setting from PDF action. @return true if mix is enabled, otherwise false
2785 Checks if the PDF object has a caption. @return true if the CAP key is set to COSBoolean.TRUE, otherwise false
2786 Checks if the document is open. @return true if 'Open' flag is set to true, otherwise false
2787 Checks if document is pre-release. @return true if document is marked as pre-release, otherwise false
2788 Retrieves non-EFont warning setting. @return true if non-EFont warnings are disabled, otherwise true by default
2789 Checks if the document is in trusted mode. @return true if trusted mode is enabled, otherwise false
2790 Checks if needAppearances is set in PDF document. @return true if needAppearances is explicitly set to true, otherwise false
2791 Checks if the fly area is opaque. @return true if fly area is opaque, otherwise false
2792 Checks if toolbar should be hidden. @return true if toolbar is hidden, otherwise false
2793 Checks if the menubar should be hidden. @return true if menubar is hidden, otherwise false
2794 Checks if window UI should be hidden. @return true if window UI is hidden, otherwise false
2795 Checks if window should fit page. @return true if 'Fit Window' preference is enabled, otherwise false
2796 Checks if window should be centered. @return true if center window is enabled, otherwise false
2797 Determines if document title should be displayed. @return true if document title is enabled, otherwise false
2798 Sets a flag in the PDF dictionary. @param field COSName representing the item's key @param bitFlag integer value of the flag to be set or cleared @param value boolean indicating whether to set or clear the flag
2799 Retrieves integer value from an embedded dictionary. @param embeddedDictionary the name of the embedded dictionary @param key the primary dictionary key @param defaultValue default integer value if not found @return integer value or default if key is not found
2800 Retrieves integer value from PDF dictionary. @param key primary dictionary key as string @return integer value or -1 if not found
2801 Retrieves integer value from dictionary by key. @param key primary dictionary key @return integer value or default (-1) if not found
2802 Retrieves integer value from PDF dictionary by key. @param key primary dictionary key as string @param defaultValue default integer value if not found @return integer value or default if key is not found
2803 Checks if a specific flag is set in the given PDF field. @param field PDF field name @param bitFlag specific flag to check @return true if the flag is set, false otherwise
2804 Retrieves a COSDictionary representing a specific page in a PDF. @param pageNum 1-based index of the desired page @param node starting point in the PDF's structure @param encountered number of pages processed so far @return COSDictionary for the specified page or throws exception if not found
2805 Retrieves count from PDF dictionary. @return integer value of COUNT or 0 if not found
2806 Retrieves start index from PDF dictionary. @return start index as integer, defaulting to 1 if not found
2807 Retrieves order number from PDF COS object. @return order number or default value of 1 if not found
2808 Retrieves revision number from PDF object. @return integer value of revision or 0 if not found
2809 Retrieves the length parameter from the encryption dictionary. @return the length value or default to 40 if not specified
2810 Retrieves the version number from the PDF dictionary. @return version number or 0 if not found
2811 Retrieves length from PDF dictionary. @return integer value of LENGTH or default 40 if not found
2812 Retrieves the revision number from the PDF document. @return revision number or default version if not found
2813 Retrieves permissions from PDF dictionary. @return integer representing permissions or 0 if not found
2814 Retrieves justification type from annotation. @return string representation of justification value or empty string if not found
2815 Retrieves and caches the flags value from the dictionary. @return integer representing the flags value
2816 Creates a PDAbstractPattern based on the dictionary. @param dictionary COSDictionary containing pattern details @param resourceCache ResourceCache for managing resources @return PDAbstractPattern instance or throws IOException if type is unknown
2817 Retrieves the paint type from the PDF object. @return integer representing the paint type or 0 if not found
2818 Retrieves tiling type from PDF object. @return integer representing tiling type or 0 if not found
2819 Creates a PDShading object based on the provided dictionary. @param shadingDictionary COSDictionary containing shading details @return PDShading instance or throws IOException for unknown types
2820 Retrieves bits per flag from PDF object. @return integer value representing bits per flag or -1 if not found
2821 Retrieves vertices per row from PDF object. @return integer value or -1 if not found
2822 Retrieves bits per color component. @return number of bits per color component or default value if not set
2823 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
2824 Retrieves flags from action dictionary. @return integer value of flags or 0 if not found
2825 Retrieves action flags. @return integer value representing action flags or 0 if not found
2826 Retrieves page number from PDF dictionary. @return page number or -1 if not found
2827 Retrieves annotation index from dictionary. @return annotation index or -1 if not found
2828 Retrieves annotation flags. @return integer value representing annotation flags or 0 if not found
2829 Retrieves the Q attribute from the PDF object. @return integer value of Q or 0 if not found
2830 Retrieves the rotation angle of the PDF page. @return rotation angle in degrees (0, 90, 180, or 270)
2831 Checks if timestamp is required. @return true if timestamp is required, false otherwise
2832 Retrieves the open count from the PDF document. @return integer value representing the open count or 0 if not found
2833 Retrieves Q value from PDF dictionary. @return integer value of Q or 0 if not found
2834 Retrieves top index from COS object. @return integer value of top index or 0 if not found
2835 Retrieves COS objects by a single type from the xref table. @param type COSName to match @return List of COSObjects that match the specified type
2836 Retrieves page tree from PDF document. @return PDPageTree object representing the pages
2837 Recursively updates page references in the PDF document. @param cloner utility for cloning objects @param numberTreeAsMap map of page tree entries @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during cloning
2838 Loads and parses an FDF document from a file. @param file the FDF file to be loaded @return FDFDocument object representing the parsed FDF data @throws IOException if an I/O error occurs during loading or parsing
2839 Loads and parses an FDF document from the given input stream. @param input the InputStream containing the FDF data @return FDFDocument object representing the parsed FDF data @throws IOException if an I/O error occurs during loading or parsing
2840 Parses a PDF or FDF file with lenient mode enabled. @return PDDocument object representing the parsed document @throws IOException if an error occurs during parsing
2841 Removes page-specific resources from the cache. Does not affect inherited resources.
2842 Retrieves or creates a PDColorSpace by name. @param name the name of the colorspace @return PDColorSpace object @throws IOException if an I/O error occurs
2843 Adds a font to the resource dictionary. @param font PDFont object to be added @return unique COSName key for the font
2844 Adds a color space to the resource dictionary. @param colorSpace PDColorSpace object to be added @return unique COSName key for the color space
2845 Adds an extended graphics state to the resource dictionary. @param extGState the extended graphics state to add @return unique COSName key for the added graphics state
2846 Adds a shading to the resource dictionary. @param shading PDShading object to be added @return unique COSName key for the shading
2847 Adds a pattern to the resource dictionary. @param pattern PDAbstractPattern object to be added @return unique COSName key for the pattern
2848 Adds a property list to the resource dictionary. @param properties property list to be added @return unique COSName key for the item
2849 Adds an image to the resources. @param image PDImageXObject to be added @return unique COSName key for the image
2850 Adds a PDFormXObject to the resource dictionary. @param form PDF form object to be added @return unique COSName key for the item
2851 Adds an XObject to the resource dictionary. @param xobject PDXObject to be added @param prefix base string for the key @return unique COSName key for the XObject
2852 Retrieves embedded file from the EF dictionary. @return PDEmbeddedFile object or null if not found
2853 Retrieves the embedded file for DOS. @return PDEmbeddedFile object or null if not found
2854 Retrieves embedded file for macOS. @return PDEmbeddedFile object or null if not found
2855 Retrieves the embedded file for UNIX systems. @return PDEmbeddedFile object or null if not found
2856 Retrieves embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
2857 Checks if an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2858 Enables or disables an optional content group by name. @param groupName the name of the optional content group @param enable true to enable, false to disable @return true if the group was found and updated, false otherwise
2859 Retrieves or creates the normal appearance entry for a PDF annotation. @return PDAppearanceEntry object representing the normal appearance
2860 Retrieves or creates the rollover appearance for a PDF annotation. @return PDAppearanceEntry object representing the rollover appearance
2861 Retrieves or creates the down appearance entry for a button. @return PDAppearanceEntry object representing the down appearance
2862 Sets value at specified index. @param index position in export values list @throws IllegalArgumentException if index is out of bounds
2863 Adds a new child at the beginning of the outline. @param newChild PDOutlineItem to prepend
2864 Appends a new child to the outline. @param newChild PDOutlineItem to be added as a child
2865 Finds the PDSignatureField associated with a given PDSignature. @param fieldIterator iterator over PDField objects @param sigObject the PDSignature to match @return PDSignatureField if found, otherwise null
2866 Retrieves the normal appearance stream of a PDF annotation. @param annotation the PDF annotation to query @return PDAppearanceStream object or null if not found
2867 Adds fonts from annotation widget to form resources. @param acroFormResources resources of the PDF form @param annotation PDF annotation containing appearance stream
2868 Retrieves all on-values from PDF annotations. @return Set of string values representing the on-values
2869 Checks if the widget's value matches its on value. @return true if checked, false otherwise
2870 Sets the value to the first non-Off appearance of a widget. @throws IOException if an I/O error occurs during setting the value
2871 Finds the index of a given PDPage in the PDF document. @param page PDPage object to search for @return index of the page or -1 if not found
2872 Sets the parent node and recalculates limits. @param parentNode the new parent node to set
2873 Sets the list of child nodes for this tree node. @param kids list of PDNameTreeNode objects representing children
2874 Sets the names and their associated values in the current node. @param names a map of string keys to T values representing names and their data
2875 Initializes page labels for a PDF document. @param document the PDDocument to set labels for @param dict the COSDictionary containing label data @throws IOException if an I/O error occurs during processing
2876 Retrieves the encoding range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2877 Constructs a PDColor with CalGray color space.
2878 Constructs a PDCalRGB object.
2879 Initializes a PDLab with LAB color space.
2880 Constructs a PDCalGray from a COSArray. @param array the COSArray representing the color
2881 Constructs a PDCalRGB with specified RGB components. @param rgb COSArray containing RGB color components
2882 Initializes a PDLab color space. @param lab COSArray containing Lab color space data
2883 Initializes an AxialShadingContext for PDF axial shading. @param shading PDShadingType2 instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails
2884 Initializes a RadialShadingContext for PDF radial shading. @param shading PDShadingType3 instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails
2885 Constructs a TriangleBasedShadingContext for PDF shading. @param shading PDShading instance @param cm ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @throws IOException if initialization fails
2886 Initializes a Type1ShadingContext for PDF shading. @param shading PDShadingType1 instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @throws IOException if initialization fails
2887 Retrieves the PDRange for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2888 Retrieves the PDRange for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2889 Retrieves name from PDF dictionary. @param name key of the dictionary entry @param defaultValue value to return if key not found @return String representation of the name or default if null
2890 Retrieves the style of the object. @return style as string or default solid if not found
2891 Sets border line properties based on width and style. @param lineWidth desired width of the border line @param bs border style dictionary @param border COSArray containing border settings @throws IOException if I/O error occurs
2892 Creates a new PDF document copying metadata and settings from the source document. @return PDDocument object with copied metadata and settings @throws IOException if an I/O error occurs during document creation
2893 Updates the PDF document's version. @param newVersion new version number to be set
2894 Retrieves the root structure node. @return PDStructureTreeRoot object or null if not found
2895 Retrieves and processes child objects from the PDF dictionary. @return List of processed child objects or empty list if none found.
2896 Retrieves or initializes the PDF encryption. @return PDEncryption object or null if not encrypted
2897 Prepares document for decryption. Sets up encryption and security handler using provided password or keystore. @throws IOException if decryption setup fails
2898 Reads and processes the encoding for a font. Handles both predefined CMaps and custom encodings. Updates internal state based on encoding type.
2899 Repairs the Length1 value by finding the 'exec' sequence. @param bytes byte array containing font data @param length1 initial Length1 value to be repaired @return corrected Length1 value or original if no issues found
2900 Repairs Length2 if it's out of bounds. @param bytes byte array containing the font data @param length1 first length value used to calculate valid range @param length2 second length value to be repaired @return corrected Length2 or maximum possible value within range
2901 Retrieves fractional display format. @return string representing fractional display or default decimal format
2902 Retrieves thousands separator from PDF dictionary. @return string representing thousands separator or default comma if not found
2903 Retrieves decimal separator from PDF dictionary. @return string representing decimal separator or default "."
2904 Retrieves label prefix from COS object. @return string value of "PS" key or space if not found
2905 Retrieves label suffix string from COS object. @return label suffix or space if not found
2906 Retrieves label position to value mapping. @return string value representing label position or default if not found
2907 Retrieves string from embedded dictionary by key. @param embedded the name of the embedded dictionary @param key the dictionary key @return string value or null if not found
2908 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object describing the font @param cidSystemInfo PDCIDSystemInfo object for character set matching @return PriorityQueue of FontMatch objects sorted by match score
2909 Retrieves a date from an embedded dictionary in the PDF document. @param embedded key for the embedded dictionary @param key the dictionary key for the date @return Calendar object or null if not found or conversion fails
2910 Creates a COSInputStream from an input stream using specified filters. @param filters list of filters to apply during decoding @param parameters dictionary containing decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded data @throws IOException if an I/O error occurs
2911 Initializes a PDF object stream parser. @param stream the COSStream containing the object data @param document the parent COSDocument @throws IOException if required entries are missing or invalid
2912 Initializes PDF XRef stream parser. @param stream PDF COSStream containing XRef data @throws IOException if an I/O error occurs during initialization
2913 Constructs a PDCIDFontType0 from a PDF dictionary. Initializes with font dictionary and parent font, handling embedded or fallback fonts. @param fontDictionary the COSDictionary representing the font @param parent the PDType0Font parent font @throws IOException if an I/O error occurs during processing
2914 Constructs a PDCIDFontType2 from a PDF dictionary. Initializes font with TrueType or OpenType font data. @param fontDictionary the font dictionary @param parent the parent PDType0Font @param trueTypeFont optional pre-loaded TrueTypeFont @throws IOException if an I/O error occurs during initialization
2915 Reads and parses a CMap from a COSBase object. @param base COSName or COSStream containing the CMap data @return parsed CMap object @throws IOException if parsing fails or input is invalid
2916 Constructs a PDAnnotationCircle from a COSDictionary. @param field the COSDictionary containing annotation properties
2917 Constructs a PDAnnotationSquareCircle from a COSDictionary. @param field the COSDictionary containing annotation properties
2918 Constructs a PDAnnotationHighlight from a COSDictionary. @param dict dictionary containing highlight annotation properties
2919 Initializes a PDAnnotationSquiggly with a given dictionary. @param dict COSDictionary to initialize the annotation with
2920 Initializes a PDAnnotationStrikeout with a given dictionary. @param dict COSDictionary to initialize the annotation with
2921 Initializes a PDAnnotationUnderline with a given dictionary. @param dict COSDictionary to initialize the annotation with
2922 Writes the body of a PDF document. @param doc the COSDocument to write @throws IOException if an I/O error occurs during writing
2923 Creates a cloudy polygon from given path. @param path array of points defining the polygon vertices @throws IOException if I/O error occurs during rendering or completion
2924 Renders a rectangle with a cloudy effect. @param left X coordinate of the left edge @param bottom Y coordinate of the bottom edge @param right X coordinate of the right edge @param top Y coordinate of the top edge @param isEllipse flag indicating if ellipse cloud radius should be used @throws IOException if I/O error occurs during rendering
2925 Constructs a new JavaScript action. @param js JavaScript string to be executed as an action
2926 Initializes TilingPaint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the pattern @param colorSpace PDColorSpace for color management @param color PDColor to apply to the pattern @param xform AffineTransform for device scaling @throws IOException if an I/O error occurs during initialization
2927 Converts PDF image to an opaque RGB BufferedImage. @param region the clipping area for the image @param subsampling the subsampling factor for both X and Y axes @return a BufferedImage representation of the PDF image or null if conversion fails @throws IOException if an I/O error occurs during processing
2928 Converts a PDF image to an RGB BufferedImage with optional color key masking. @param pdImage the source PDF image @param colorKey the color key mask array (optional) @return a BufferedImage representation of the PDF image or null if conversion fails @throws IOException if an I/O error occurs during processing
2929 Pushes and retrieves resources for a content stream. @param contentStream the content stream to process @return previous PDResources object or null if none
2930 Calculates transformation for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay rectangle @return AffineTransform for centering the overlay
2931 Clips a rectangle to the media box of a PDF page. @param box the rectangle to be clipped @return PDRectangle representing the clipped area
2932 Retrieves the rotated media box of a PDF page. @param page PDPage object representing the PDF page @return PDRectangle with dimensions adjusted for rotation or original if not rotated
2933 Checks if the document is marked. @return true if "Marked" key in dictionary is COSBoolean.TRUE, otherwise false
2934 Checks if PDF uses user properties. @return true if "UserProperties" is set to true in the dictionary, otherwise false
2935 Checks if the entity is marked as a suspect. @return true if "Suspects" key in dictionary is COSBoolean.TRUE, otherwise false
2936 Determines if mouse position tracking is enabled. @return true if tracking is enabled, otherwise false
2937 Checks if the document is open. @return true if the "Open" key in PDF dictionary is COSBoolean.TRUE, otherwise false
2938 Checks if the PDF document has FD (Fast Web View) enabled. @return true if FD is enabled, otherwise false
2939 Sets the hidden state of a PDF object. @param hidden boolean indicating if the object should be hidden
2940 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, otherwise false
2941 Draws an inline image at specified coordinates and dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @param width width of the image @param height height of the image @throws IOException if I/O error occurs during drawing
2942 Sets the annotation's visibility. @param invisible boolean indicating whether to make the annotation invisible
2943 Sets the annotation's visibility. @param hidden true to hide the annotation, false to show it
2944 Sets the printed status of an annotation. @param printed boolean indicating whether the annotation is printed
2945 Sets the 'no zoom' flag in the annotation. @param noZoom boolean indicating whether to restrict zooming
2946 Sets the 'no rotate' flag in the annotation. @param noRotate boolean indicating whether to disable rotation
2947 Sets the "no view" flag for an annotation. @param noView boolean indicating whether to hide the annotation in viewers
2948 Sets the annotation to read-only. @param readOnly boolean indicating whether the annotation should be read-only
2949 Sets the annotation's locked state. @param locked boolean indicating whether to lock the annotation
2950 Toggles the "no view" flag in the annotation. @param toggleNoView boolean indicating whether to enable or disable the no view flag
2951 Sets the locked contents flag in the annotation. @param lockedContents boolean indicating whether to lock or unlock the contents
2952 Sets the visibility of the PDF element. @param invisible boolean indicating whether to make the element invisible
2953 Sets the hidden flag of the PDF object. @param hidden boolean indicating whether to hide the object
2954 Sets the 'printed' flag in the PDF document. @param printed boolean indicating if the document has been printed
2955 Sets the "no zoom" flag in the PDF document. @param noZoom boolean indicating whether to disable zooming
2956 Sets the No Rotate flag in the PDF dictionary. @param noRotate boolean indicating whether to enable or disable the No Rotate flag
2957 Sets the "no view" flag in the PDF dictionary. @param noView boolean indicating whether to set or clear the "no view" flag
2958 Sets the read-only status of a PDF object. @param readOnly boolean indicating whether to set or clear the read-only flag
2959 Sets the locked state of the PDF object. @param locked boolean indicating whether to lock or unlock the object
2960 Toggles the "no view" flag in the PDF document. @param toggleNoView boolean indicating whether to set or clear the flag
2961 Sets the locked contents flag in the PDF dictionary. @param lockedContents boolean indicating whether to lock or unlock contents
2962 Sets whether filtering is required. @param flag boolean indicating filter requirement
2963 Sets whether subfilter is required. @param flag boolean indicating requirement status
2964 Sets whether a digest method is required. @param flag boolean indicating requirement status
2965 Sets the required flag for form field validation. @param flag boolean indicating if the field is required
2966 Sets whether reason is required in PDF form field. @param flag boolean indicating requirement status
2967 Sets the legal attestation required flag in the PDF form. @param flag boolean indicating whether legal attestation is required
2968 Sets whether adding revision information is required. @param flag boolean indicating requirement status
2969 Sets the subject field as required in the PDF. @param flag boolean indicating whether the subject is required
2970 Sets whether issuer is required. @param flag true if issuer is required, false otherwise
2971 Sets the OID required flag in the PDF form field. @param flag boolean indicating whether OID is required
2972 Sets whether subject DN is required. @param flag boolean indicating requirement status
2973 Sets whether key usage is required. @param flag boolean indicating if key usage is mandatory
2974 Sets the URL required flag in the PDF form field. @param flag boolean indicating whether URL is required
2975 Sets the italic flag in the PDF dictionary. @param italic boolean indicating whether to enable or disable italics
2976 Sets the bold style flag in the PDF font. @param bold true to enable bold, false otherwise
2977 Sets whether signatures exist in the document. @param signaturesExist boolean indicating presence of signatures
2978 Sets the append-only flag in the PDF signature. @param appendOnly boolean indicating whether to enable or disable the append-only mode
2979 Sets the sort flag in the PDF form field. @param sort boolean indicating whether sorting is enabled
2980 Sets the multi-select flag for a form field. @param multiSelect boolean indicating if multi-select is enabled
2981 Sets whether spell checking is disabled. @param doNotSpellCheck boolean indicating if spell checking should be disabled
2982 Sets whether to commit changes on selection change. @param commitOnSelChange flag indicating auto-commit behavior
2983 Sets the combo box flag in the PDF form. @param combo boolean indicating whether to enable or disable the combo box
2984 Sets the editable flag for the form field. @param edit boolean indicating whether the field is editable
2985 Sets the read-only property of the form field. @param readonly boolean indicating whether to set or clear the read-only flag
2986 Sets the required flag for the field. @param required boolean indicating if the field is required
2987 Sets the export restriction flag in the PDF form field. @param noExport boolean indicating whether to restrict export
2988 Creates a new push button in a PDF form. @param acroForm the form containing the button field
2989 Constructs a new PDRadioButton instance. @param acroForm the form containing the radio button field
2990 Sets the "Radios In Unison" flag for form fields. @param radiosInUnison boolean indicating whether to enable or disable the feature
2991 Sets the multiline flag for a PDF form field. @param multiline boolean indicating if the field should support multiple lines
2992 Sets the password protection flag in the PDF dictionary. @param password boolean indicating whether to enable or disable password protection
2993 Sets the file select flag in the PDF form field. @param fileSelect boolean indicating whether to enable or disable file selection
2994 Sets the spell check flag for a field. @param doNotSpellCheck boolean indicating whether to disable spell checking
2995 Sets the 'do not scroll' flag for a PDF field. @param doNotScroll boolean indicating whether scrolling is disabled
2996 Sets the 'comb' flag for form fields. @param comb boolean indicating whether to enable or disable the comb feature
2997 Sets the rich text flag in the PDF form field. @param richText boolean indicating whether to enable rich text
2998 Retrieves integer value from an embedded dictionary with a default of -1. @param embeddedDictionary the name of the embedded dictionary @param key the primary dictionary key @return integer value or -1 if key is not found
2999 Retrieves the denominator from the COS object. @return integer value of the denominator or -1 if not found
3000 Wraps an OutputStream with a PredictorOutputStream if predictor algorithm is enabled. @param out underlying output stream @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original if predictor is not enabled
3001 Retrieves structure parent index. @return structure parent index or default (-1) if not found
3002 Removes a PDF dictionary node from its parent and updates ancestor counts. @param node the COSDictionary node to remove
3003 Adds a page to the PDF document. @param page PDPage object to be added
3004 Retrieves bits per sample from PDF dictionary. @return integer value representing bits per sample or default (-1) if not found
3005 Retrieves MCID from COS object. @return integer value of MCID or -1 if not found
3006 Retrieves the next key in the parent tree. @return integer value representing the next key or default (-1) if not found
3007 Retrieves MCID from document properties. @return integer value of MCID or -1 if not found
3008 Creates a PDImageXObject from a TIFF file. @param document PDDocument to associate the image with @param reader RandomAccessRead object for reading the TIFF file @param number Page number to extract (0-based) @return PDImageXObject created from the TIFF page or null if empty @throws IOException if I/O error occurs or invalid TIFF format
3009 Retrieves line cap style from dictionary. @return integer value representing line cap style or default (-1) if not found
3010 Retrieves line join style from dictionary. @return integer value representing line join style or default (-1) if not found
3011 Retrieves the structure parent index. @return integer value or default (-1) if not found
3012 Retrieves the 'P' value from the dictionary. @return integer value associated with key 'P'
3013 Retrieves maximum length from PDF object. @return integer value of MAX_LEN or default (-1) if not found
3014 Retrieves an integer value from the COS object by key. @param name primary dictionary key as string @param defaultValue default integer value if not found @return integer value or default if key is not found
3015 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
3016 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
3017 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
3018 Checks if 'no zoom' flag is set in annotation. @return true if no zoom is allowed, false otherwise
3019 Checks if the annotation does not allow rotation. @return true if no rotate flag is set, false otherwise
3020 Checks if the annotation should not be displayed. @return true if no view flag is set, false otherwise
3021 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3022 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3023 Checks if the annotation's "no view" toggle flag is set. @return true if the flag is set, false otherwise
3024 Checks if the annotation's contents are locked. @return true if contents are locked, false otherwise
3025 Checks if the field is invisible. @return true if the field is invisible, false otherwise
3026 Checks if the PDF field is hidden. @return true if the field is hidden, false otherwise
3027 Checks if the document is marked as printed. @return true if the document is printed, false otherwise
3028 Checks if no zoom flag is set in the PDF field. @return true if no zoom is allowed, false otherwise
3029 Checks if the PDF field has the "no rotate" flag set. @return true if no rotate flag is set, false otherwise
3030 Checks if the PDF field has the "no view" flag set. @return true if the "no view" flag is set, false otherwise
3031 Checks if the PDF field is read-only. @return true if the field is read-only, false otherwise
3032 Checks if the PDF field is locked. @return true if the field is locked, false otherwise
3033 Checks if the 'Toggle No View' flag is set in the PDF field. @return true if the flag is set, false otherwise
3034 Checks if contents are locked in the PDF. @return true if contents are locked, false otherwise
3035 Checks if filter is required for the PDF field. @return true if filter is required, false otherwise
3036 Checks if subfilter is required. @return true if subfilter flag is set, false otherwise
3037 Checks if digest method is required. @return true if digest method is required, false otherwise
3038 Checks if the "V" flag is required in the PDF field. @return true if the "V" flag is set, false otherwise
3039 Checks if reason field is required in PDF form. @return true if reason is required, false otherwise
3040 Checks if legal attestation is required. @return true if legal attestation flag is set, false otherwise
3041 Checks if adding revision information is required. @return true if revision info is required, false otherwise
3042 Checks if the subject field is required. @return true if the subject field is required, false otherwise
3043 Checks if issuer is required. @return true if issuer is required, false otherwise
3044 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
3045 Checks if subject DN (Distinguished Name) is required. @return true if subject DN is required, false otherwise
3046 Checks if key usage is required. @return true if key usage flag is set, false otherwise
3047 Checks if URL is required in the PDF field. @return true if URL is required, false otherwise
3048 Checks if the font is italic. @return true if the font is italic, false otherwise
3049 Checks if the text in the PDF field is bold. @return true if the text is bold, false otherwise
3050 Checks if signatures exist in the document. @return true if signatures are present, false otherwise
3051 Checks if the signature field is append-only. @return true if the append-only flag is set, false otherwise
3052 Checks if the field is a push button. @return true if the field is a push button, false otherwise
3053 Checks if the field is a radio button. @return true if the field is a radio button, false otherwise
3054 Checks if the sort flag is enabled. @return true if sort is enabled, false otherwise
3055 Checks if the field allows multiple selections. @return true if multi-select is enabled, false otherwise
3056 Checks if spell checking is disabled for this field. @return true if spell checking is disabled, false otherwise
3057 Checks if commit on selection change flag is set. @return true if the flag is set, false otherwise
3058 Checks if the field is a combo box. @return true if the field is a combo box, false otherwise
3059 Checks if the field is editable. @return true if the edit flag is set, false otherwise
3060 Checks if the form field is read-only. @return true if the field is read-only, false otherwise
3061 Checks if the field is required. @return true if the field is marked as required, false otherwise
3062 Checks if the form field should not be exported. @return true if the no export flag is set, false otherwise
3063 Checks if radio buttons are in unison mode. @return true if radios are in unison, false otherwise
3064 Checks if the PDF field is multiline. @return true if multiline flag is set, false otherwise
3065 Checks if the PDF field requires a password. @return true if password is required, false otherwise
3066 Checks if the file select flag is set in the PDF field. @return true if file select is enabled, false otherwise
3067 Determines if spell checking is disabled. @return true if spell checking is disabled, false otherwise
3068 Checks if the form field should not scroll. @return true if scrolling is disabled, false otherwise
3069 Checks if the text field is comb. @return true if the FF flag (FLAG_COMB) is set, false otherwise
3070 Checks if the field supports rich text. @return true if rich text is supported, false otherwise
3071 Retrieves a PDF page by index. @param index 0-based index of the desired page @return PDPage object representing the specified page
3072 Returns the number of pages in the PDF document. @return integer count of pages
3073 Adds an attribute to the PDF object. @param attributeObject the PDAttributeObject to add
3074 Updates attribute in PDF object if found; otherwise, adds it with revision number. @param attributeObject the PDAttributeObject to update or add
3075 Adds a class name to the PDF object. @param className the name of the class to add
3076 Increments the revision number of a PDF document.
3077 Prepares decryption for a PDF document. @param encryption PDEncryption object representing the document's encryption settings @param documentIDArray COSArray containing document ID bytes @param decryptionMaterial DecryptionMaterial object with necessary keys and certificates @throws IOException if decryption preparation fails or required data is missing
3078 Retrieves the owner key from the PDF document. @return byte array containing the owner key or null if not found
3079 Retrieves and processes the user key from a PDF dictionary. @return byte array of user key or null if not found @throws IOException if an I/O error occurs
3080 Calculates displacement vector based on character width. @param code character code @return Vector representing horizontal displacement @throws IOException if an I/O error occurs
3081 Calculates the total width of a string based on character encoding. @param text input string to measure @return float value representing total string width @throws IOException if an I/O error occurs during processing
3082 Retrieves a PDAbstractPattern by name. @param name the unique identifier for the pattern @return PDAbstractPattern instance or throws IOException if type is unknown
3083 Processes operators in a PDF content stream. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs during processing
3084 Retrieves a shading pattern by name. @param name the unique identifier for the shading @return PDShading instance or null if not found @throws IOException if an error occurs during creation
3085 Retrieves the shading object from the PDF document. @return PDShading instance or null if not found
3086 Retrieves the number of bits per color component. @return bits per color component or default value if not set
3087 Retrieves bits per color component. @return number of bits per color component or default value if not set
3088 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
3089 Retrieves the number of bits per coordinate. @return the number of bits used for each coordinate
3090 Checks if the node is open. @return true if open count is greater than 0, false otherwise
3091 Creates a PDField instance based on the field type. @param form the containing acroform @param field the COSDictionary representing the field @param parent the parent non-terminal field, if any @return PDField instance or null if invalid field type
3092 Initializes PDFPrintable with document settings. @param document PDDocument object to be printed @param scaling Scaling mode for printing @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality @param center flag to center the pages during print @param renderer PDFRenderer instance for rendering pages
3093 Initializes PDF renderer with document. @param document PDDocument object to render
3094 Loads and parses an FDF document from a file. @param filename path to the FDF file @return FDFDocument object representing the parsed FDF data @throws IOException if an I/O error occurs during loading or parsing
3095 Loads a PDF document from byte array. @param input PDF data as byte array @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3096 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3097 Processes color operators for PDF graphics. Sets stroking color space to DeviceRGB if processing is enabled.
3098 Retrieves an XObject by name from PDF resources. @param name the unique identifier for the XObject @return PDXObject instance or null if not found @throws IOException for invalid types during creation
3099 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3100 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if an I/O error occurs during writing
3101 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing
3102 Begins marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3103 Sets a marked content point with properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties @throws IOException if I/O error occurs during writing
3104 Draws an image at specified position and size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @param width Width of the image to draw @param height Height of the image to draw @throws IOException if I/O error occurs during drawing
3105 Draws an image on the graphics canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if I/O error occurs during drawing
3106 Draws a PDF form object. @param form PDF form object to be drawn @throws IOException if I/O error occurs during drawing
3107 Checks if a PDF optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
3108 Checks if an optional content group is enabled in the PDF document. @param group the PDOptionalContentGroup to check @return true if the group is enabled or no properties exist, false otherwise
3109 Adds a new child outline item at the beginning of the list. @param newChild PDOutlineItem to add
3110 Adds a child item to the outline as the last entry. @param newChild PDOutlineItem to be added
3111 Validates that a given value is either 'Off' or in the set of on-values. @param value the value to check
3112 Fixes destinations in a PDF document. @param destinationDocument the PDF document to fix
3113 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs during processing
3114 Constructs a GouraudShadingContext for PDF shading. @param shading PDShading instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @throws IOException if initialization fails
3115 Creates a new PDF document if necessary. Splits the document at the current page or initializes a new one. @throws IOException if an I/O error occurs during document creation
3116 Writes the header for a PDF or FDF document. @param doc the COSDocument to write the header to @throws IOException if an I/O error occurs
3117 Sets the optional content properties for the PDF. @param ocProperties PDOptionalContentProperties object to set
3118 Retrieves and returns the role map from the PDF document's structure tree. @return Map containing role entries or an empty map if no roles are found
3119 Prepares a PDF document for writing with optional encryption and incremental updates. @param doc PDDocument to be written @param signInterface Signature interface for signing the document @throws IOException if an I/O error occurs
3120 Adds a PDF object to the pool. @param key unique identifier for the object @param base the COSBase object to add @return the added or existing COSBase object
3121 Protects the PDF document with a given protection policy. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
3122 Prepares a PDF document for encryption. @param doc PDDocument to be encrypted @throws IOException if an I/O error occurs during encryption
3123 Retrieves the glyph name for a given character code. @param code character code to convert @return glyph name in uniXXXX format or ".notdef" if not found
3124 Converts character code to GID. @param code character code to convert @return GID value or default mapping if conversion fails
3125 Retrieves the subtype of a Mac resource. @return subtype string or null if not found
3126 Retrieves the Mac creator from PDF document parameters. @return creator string or null if not found
3127 Retrieves Mac resource fork from PDF parameters. @return embedded string value or null if not found
3128 Retrieves CIDFontMapping for a given base font and font descriptor. @param baseFont the base font name @param fontDescriptor PDFontDescriptor describing the font @param cidSystemInfo PDCIDSystemInfo for character set matching @return CIDFontMapping object or null if not found
3129 Creates a COSInputStream using default decoding options. @return COSInputStream with decoded data @throws IOException if an I/O error occurs
3130 Performs brute-force search for object streams and updates xref table. @param xrefTable map of COSObjectKey to their offsets @throws IOException if an I/O error occurs during search or decryption
3131 Parses a PDF object stream by its number and key. @param objstmObjNr the object number of the stream @param key unique identifier for the object within the stream @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
3132 Parses a cross-reference object stream. @param objByteOffset byte offset of the XRef object @param isStandalone flag indicating if this is a standalone XRef @return previous XRef table byte offset or -1 if not found @throws IOException if an I/O error occurs during parsing
3133 Retrieves contents as an InputStream. @return InputStream containing the page's content or an empty stream if none found @throws IOException if an I/O error occurs during processing
3134 Constructs a PDCIDFontType2 from a PDF dictionary. @param fontDictionary the font dictionary @param parent the parent PDType0Font @throws IOException if an I/O error occurs during initialization
3135 Creates and returns a PDCIDFontType2 instance. @return PDCIDFontType2 object initialized with CID font data @throws IOException if an I/O error occurs during initialization
3136 Creates a PDF annotation based on the given COSBase. @param base the COSBase object representing the annotation @return PDAnnotation instance or throws IOException for unsupported types
3137 Creates a cloudy rectangle based on the given difference rectangle. @param rd the difference rectangle defining dimensions and position @throws IOException if I/O error occurs during rendering or path closure
3138 Renders a cloudy ellipse effect. @param leftOrig x-coordinate of the left boundary @param bottomOrig y-coordinate of the bottom boundary @param rightOrig x-coordinate of the right boundary @param topOrig y-coordinate of the top boundary @throws IOException if I/O error occurs during rendering
3139 Initializes TilingPaint with specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the pattern @param xform AffineTransform for device scaling @throws IOException if an I/O error occurs during initialization
3140 Fetches the entire PDF as an opaque RGB image. @return BufferedImage representation of the PDF or null if conversion fails @throws IOException if an I/O error occurs during processing
3141 Initializes a PDPageContentStream for writing to a PDF page. @param document PDDocument instance to associate with the stream @param sourcePage PDPage where content will be written @param appendContent mode specifying how to handle existing content (overwrite, prepend, append) @param compress true if content should be compressed @param resetContext true if graphics context should be reset before writing @throws IOException if I/O error occurs during initialization
3142 Retrieves the crop box of a PDF page. If not set, returns the media box instead. @return PDRectangle representing the crop box or media box
3143 Draws an inline image at specified coordinates using its original dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @throws IOException if I/O error occurs during drawing
3144 Draws an inline image at specified coordinates and dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @param width width of the image @param height height of the image @throws IOException if I/O error occurs during drawing
3145 Draws an inline image on the PDF canvas. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @param width width of the image @param height height of the image @throws IOException if I/O error occurs during drawing
3146 Draws an inline image with specified dimensions and position. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @param width width of the image @param height height of the image @throws IOException if I/O error occurs during drawing
3147 Draws an inline image at specified coordinates and dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @param width width of the image @param height height of the image @throws IOException if I/O error occurs during drawing
3148 Constructs an FDFAnnotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3149 Decodes a JPEG 2000 image from input stream and writes to output stream. @param encoded input stream containing the JPX image data @param decoded output stream for the decoded image data @param parameters dictionary containing decode parameters @param index index of the filter in the filter list (unused) @param options decoding options for the image @return DecodeResult object containing decoding results @throws IOException if an I/O error occurs during processing
3150 Decodes LZW encoded stream with optional predictor. @param encoded input stream containing LZW encoded data @param decoded output stream for the decoded data @param parameters dictionary containing decode parameters @param index filter index in the DecodeParams array @return DecodeResult object @throws IOException if an I/O error occurs during decoding
3151 Removes a PDF page by its 0-based index. @param index page index to remove
3152 Removes a PDF page from its document. @param page PDPage object to be removed
3153 Adds a page to the document and updates XRef object number. @param page PDPage object to be added
3154 Inserts a new page before an existing page in the PDF document. @param newPage the page to be inserted @param nextPage the page after which the new page will be inserted @throws IllegalArgumentException if the next page is an orphan
3155 Inserts a new page after a specified previous page in the PDF document. @param newPage the page to be inserted @param prevPage the page after which the new page should be inserted
3156 Appends a marked content to the list. @param markedContent the marked content to append @throws IllegalArgumentException if MCID is invalid
3157 Fetches UCS-2 CMap for the font. Handles composite fonts using predefined CMaps or descendant CIDFonts. @throws IOException if an I/O error occurs while fetching the CMap
3158 Creates a PDImageXObject from a byte array. @param document PDDocument to associate the image with @param byteArray TIFF file data as a byte array @param number Page number to extract (0-based) @return PDImageXObject created from the TIFF page or null if empty @throws IOException if I/O error occurs or invalid TIFF format
3159 Creates a PDImageXObject from a TIFF file. @param document PDDocument to associate the image with @param file File object representing the TIFF file @param number Page number to extract (0-based) @return PDImageXObject created from the TIFF page or null if empty @throws IOException if I/O error occurs or invalid TIFF format
3160 Sets display options with optional sorting. @param displayValues list of string values to set as options
3161 Sets export and display options for a field. @param exportValues list of export values @param displayValues list of corresponding display values
3162 Sets selected option indices for a multi-select choice field. @param values List of integer indices representing selected options
3163 Determines if the text field should be comb. @return true if conditions for comb are met, false otherwise
3164 Retrieves a PDF page by index. @param pageIndex 0-based index of the desired page @return PDPage object representing the specified page
3165 Initializes the PageExtractor with a PDF document. @param sourceDocument the PDF document to extract pages from
3166 Initializes a PDFPageable object. @param document the PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering @param center flag to center content on pages
3167 Notifies structure element of attribute change.
3168 Prepares decryption for a PDF document. @param encryption PDEncryption object containing encryption data @param documentIDArray array of document IDs @param decryptionMaterial material used for decryption @throws IOException if decryption preparation fails
3169 Determines the space character width. @return float value representing space width
3170 Generates and inserts appearance for a text field with comb option. @param contents content stream to write appearance @param appearanceStream appearance stream of the field @param font font used for text @param fontSize size of the font @throws IOException if an I/O error occurs during processing
3171 Checks if the font has fixed pitch. @return true if fixed pitch flag is set, false otherwise
3172 Checks if the serif font flag is enabled. @return true if serif font is enabled, false otherwise
3173 Checks if the object is symbolic. @return true if the symbolic flag bit is set, false otherwise
3174 Determines if the script flag is set. @return true if the script flag is enabled, false otherwise
3175 Checks if the flag for non-symbolic representation is set. @return true if non-symbolic flag is set, false otherwise
3176 Checks if the italic flag is set. @return true if italic is enabled, false otherwise
3177 Checks if all caps flag is enabled. @return true if all caps flag is set, false otherwise
3178 Determines if the security is classified as small-cap. @return true if the small-cap flag bit is set, false otherwise
3179 Checks if force bold flag is enabled. @return true if force bold is enabled, false otherwise
3180 Sets or clears the fixed pitch flag. @param flag true to enable fixed pitch, false to disable
3181 Sets or clears the serif flag. @param flag true to enable serif, false to disable
3182 Sets or clears the symbolic flag. @param flag true to set, false to clear the symbolic flag
3183 Sets or clears the script execution flag. @param flag true to enable script execution, false to disable
3184 Sets or clears the non-symbolic flag. @param flag true to set, false to clear the non-symbolic flag
3185 Sets or clears the italic flag. @param flag true to enable italic, false to disable
3186 Sets or clears the ALL_CAP flag. @param flag true to enable, false to disable ALL_CAP mode
3187 Sets or clears the small cap flag. @param flag true to enable small cap, false to disable it
3188 Sets or clears the force bold flag. @param flag true to enable force bold, false to disable
3189 Retrieves a PDAbstractPattern by its associated color. @param color the PDColor object containing the pattern name @return PDAbstractPattern instance or throws IOException if not found
3190 Processes a transparency group in a PDF. @param group the PDTransparencyGroup to process @throws IOException if an I/O error occurs during processing
3191 Processes Type 3 character stream with given rendering matrix. @param charProc character procedure to process @param textRenderingMatrix transformation matrix for text rendering @throws IOException if an I/O error occurs during processing
3192 Processes annotation appearance stream. @param annotation the annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs during processing
3193 Processes a tiling pattern with given color and matrix. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
3194 Processes a PDF content stream, applying transformations and clipping. @param contentStream the content stream to process @throws IOException if an I/O error occurs during processing
3195 Updates the open count of the parent outline node. @param delta amount to adjust the open count by
3196 Creates a PDF field from a dictionary. @param form the containing acroform @param field the COSDictionary representing the field @param parent the parent non-terminal field, if any @return PDField instance or null if invalid field type
3197 Initializes PDFPrintable with document and default renderer. @param document PDDocument object to be printed @param scaling Scaling mode for printing @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality @param center flag to center the pages during print
3198 Loads a PDF document from byte array. @param input PDF data as byte array @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3199 Loads a PDF document from a file. @param file the PDF file to load @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3200 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3201 Loads a PDF document from a random access read source without encryption. @param randomAccessRead the source of the PDF data @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3202 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @param password decryption password for the PDF @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3203 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3204 Loads a PDF document from a random access read source. @param randomAccessRead the source of the PDF data @param password decryption password for the PDF @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3205 Sets visual signature from a PDF file. @param file the PDF file containing the signature @throws IOException if an error occurs during file reading or parsing
3206 Sets visual signature from input stream. @param is input stream containing signature data @throws IOException if an error occurs during initialization or parsing
3207 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3208 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3209 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3210 Sets the current font and size for text rendering. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3211 Sets the stroking color for drawing operations. @param color PDColor object representing the new color @throws IOException if I/O error occurs while writing to stream
3212 Sets the non-stroking color in a PDF document. @param color PDColor object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3213 Sets graphics state parameters in a PDF document. @param state the extended graphics state to apply @throws IOException if an I/O error occurs during writing
3214 Sets graphics state parameters. @param state the extended graphics state to apply @throws IOException if an I/O error occurs during writing
3215 Sets graphics state parameters in a PDF document. @param state the extended graphics state to apply @throws IOException if an I/O error occurs during writing
3216 Sets graphics state parameters in a PDF document. @param state the extended graphics state to apply @throws IOException if an I/O error occurs during writing
3217 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing or if called within text mode
3218 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing or if called within a text block
3219 Applies a shading pattern to the current graphics state. Throws an exception if called within a text block. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing
3220 Applies a shading pattern to the current graphics state. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during writing or if called within text mode
3221 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3222 Begins a marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3223 Begins marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3224 Begins marked content sequence with a tag and property list. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if an I/O error occurs during writing
3225 Sets a marked content point with properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties @throws IOException if I/O error occurs during writing
3226 Sets a marked content point with properties in the PDF document. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties @throws IOException if I/O error occurs during writing
3227 Sets a marked content point with properties in the PDF document. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties @throws IOException if I/O error occurs during writing
3228 Writes marked content point with properties to PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties @throws IOException if I/O error occurs during writing
3229 Draws an image at a specified position and size on the PDF page. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @param width Width of the image to draw @param height Height of the image to draw @throws IOException if I/O error occurs during drawing or text mode is active
3230 Draws an image on the PDF page at specified position and size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @param width Width of the image to draw @param height Height of the image to draw @throws IOException if I/O error occurs during drawing or text mode is active
3231 Draws an image on the PDF at a specified position and size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @param width Width of the image @param height Height of the image @throws IOException if I/O error occurs during drawing
3232 Draws an image at specified position and size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @param width Width of the image to draw @param height Height of the image to draw @throws IOException if I/O error occurs during drawing or text mode is active
3233 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if I/O error occurs during drawing or text mode is active
3234 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if I/O error occurs during drawing
3235 Draws an image on the PDF page. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if I/O error occurs during drawing
3236 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning and scaling @throws IOException if I/O error occurs during drawing
3237 Draws a PDF form object. @param form PDF form object to be drawn @throws IOException if I/O error occurs during drawing or if called within text mode
3238 Draws a PDF form object. @param form PDF form object to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3239 Draws a PDF form object. @param form PDF form object to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3240 Draws a PDF form object. @param form PDF form object to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3241 Prepares a PDF document for encryption. Initializes and configures the encryption dictionary based on document version and permissions. @param document PDDocument to be encrypted @throws IOException if an I/O error occurs during encryption setup
3242 Sets default value for a PDF item. @param value the default value to be set
3243 Sets field value and handles updates based on export values. @param value new value to set @throws IOException if an I/O error occurs
3244 Retrieves the page number from a PDF document. @return page number or -1 if not found
3245 Imports optional content properties from a source PDF document to the target document. @param srcDoc the source PDF document containing OC properties @throws IOException if an I/O error occurs during processing
3246 Builds a subset font from an input stream. @param ttfSubset input stream of the TTF font to be subsetted @param tag string to prepend to the font name @param gidToCid mapping from new GID to old CID @throws IOException if I/O error occurs during processing
3247 Retrieves the standard structure type from a PDF document. @return Standardized structure type as a String
3248 Writes a PDF document without signing. @param doc PDDocument to be written @throws IOException if an I/O error occurs
3249 Saves the PDF document incrementally to an output stream. @param output destination for the written data @throws IOException if an I/O error occurs during saving
3250 Saves the PDF document incrementally to the specified output stream. @param output destination for the written data @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
3251 Adds structure to the PDF by processing and pooling COSBase objects. @param current the current COSBase object to process @throws IOException if an I/O error occurs
3252 Converts input stream to text string. @return extracted text or empty string on error
3253 Creates a COSInputStream from the underlying stream. @return COSInputStream with decoded data @throws IOException if an I/O error occurs
3254 Collects patches from an image stream. @param xform affine transform for points @param matrix transformation matrix for points @param controlPoints number of control points in the patch @return List of Patch objects or empty list if no patches found @throws IOException if an I/O error occurs
3255 Rebuilds the PDF trailer using the provided XRef table. @param xrefTable map of COSObjectKey to their offsets @return COSDictionary representing the rebuilt trailer @throws IOException if an I/O error occurs during processing
3256 Parses a PDF object dynamically by key. @param objKey unique identifier for the object @param requireExistingNotCompressedObj flag to check if object must exist and not be compressed @return COSBase object representing the parsed PDF content or null if not found @throws IOException if an I/O error occurs during parsing
3257 Parses the cross-reference (xref) tables and streams in a PDF document. @param document the PDF document to parse @param startXRefOffset initial offset for xref parsing @return COSDictionary representing the parsed trailer @throws IOException if an I/O error occurs during parsing
3258 Creates a descendant CID font from a PDF dictionary. @param dictionary the font dictionary @param parent the parent PDType0Font @return PDCIDFont object or throws IOException if invalid font type
3259 Retrieves and filters annotations from a PDF page. @param annotationFilter filter to apply to annotations @return list of filtered PDAnnotation instances
3260 Retrieves the referenced object from a PDF document. @return COSObjectable instance (PDXObject or PDAnnotation) or null if not found
3261 Retrieves the annotation in reply to this one. @return PDAnnotation instance or null if not found @throws IOException for unsupported annotation types
3262 Retrieves the parent PDAnnotationMarkup of this annotation. @return PDAnnotationMarkup instance or null if not found or type mismatch
3263 Creates a cloudy ellipse within the specified rectangle. @param rd PDRectangle defining the bounding area for the ellipse @throws IOException if I/O error occurs during rendering
3264 Retrieves the normal appearance of an annotation as a content stream. @param compress true if the output should be compressed, false otherwise @return PDAppearanceContentStream object for drawing the normal appearance @throws IOException if I/O error occurs or multiple writers are opened
3265 Creates a PDPageContentStream for writing to a PDF page. @param document PDDocument instance associated with the stream @param sourcePage PDPage where content will be written @throws IOException if I/O error occurs during initialization
3266 Initializes a PDPageContentStream for writing to a PDF page. @param document PDDocument instance to associate with the stream @param sourcePage PDPage where content will be written @param appendContent mode specifying how to handle existing content (overwrite, prepend, append) @param compress true if content should be compressed @throws IOException if I/O error occurs during initialization
3267 Initializes a new page for processing. @param page the PDF page to be initialized @throws IllegalArgumentException if page is null
3268 Retrieves the bleed box of a PDF page. If not set, returns the clipped crop box instead. @return PDRectangle representing the bleed box or clipped crop box
3269 Retrieves the trim box of a PDF page. If not set, returns the cropped area clipped to the media box. @return PDRectangle representing the trim box or clipped crop box
3270 Retrieves the art box of a PDF page. If not set, returns the clipped crop box instead. @return PDRectangle representing the art box or clipped crop box
3271 Retrieves the rotated crop box of a PDF page. Adjusts dimensions if page is rotated 90 or 270 degrees. @param page PDPage object to get the crop box from @return PDRectangle representing the adjusted crop box
3272 Draws an inline image at specified coordinates using its original dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @throws IOException if I/O error occurs during drawing
3273 Draws an inline image at specified coordinates using its original dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @throws IOException if I/O error occurs during drawing
3274 Draws an inline image at specified coordinates using its original dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner
3275 Draws an inline image at specified coordinates using its original dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate for the top-left corner @param y y-coordinate for the top-left corner @throws IOException if I/O error occurs during drawing
3276 Constructs an FDFAnnotationCaret from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3277 Constructs an FDFAnnotationCircle from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3278 Constructs an FDFAnnotationFileAttachment from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3279 Constructs an FDFAnnotationFreeText from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3280 Constructs an FDFAnnotationInk from an XML element. @param element XML element containing annotation attributes @throws IOException if required elements or attributes are missing or invalid
3281 Constructs an FDFAnnotationLine from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3282 Constructs a FDFAnnotationLink from an XML element. Parses the URI action and sets it in the annotation. @param element XML element representing the annotation @throws IOException if there is an error processing the element
3283 Constructs an FDFAnnotationPolygon from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3284 Constructs a polyline annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required data is missing or invalid
3285 Constructs an FDFAnnotationSound from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3286 Constructs an FDFAnnotationSquare from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3287 Constructs a FDFAnnotationStamp from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3288 Constructs a text annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3289 Constructs an FDFAnnotationTextMarkup from an XML element. @param element XML element containing annotation attributes @throws IOException if 'coords' attribute is missing or invalid
3290 Removes a PDF page by its 1-based page number. @param pageNumber 1-based index of the page to remove
3291 Removes a specified PDF page from the document. @param page PDPage object to be removed
3292 Imports a PDPage into the current document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs during processing
3293 Creates a PDF template with the given page. @param page PDPage object to be added to the template
3294 Creates a PDImageXObject from a TIFF byte array. @param document PDDocument to associate the image with @param byteArray TIFF file data as a byte array @return PDImageXObject created from the TIFF page or null if empty @throws IOException if I/O error occurs or invalid TIFF format
3295 Creates a PDImageXObject from a TIFF file. @param document PDDocument to associate the image with @param file File object representing the TIFF file @return PDImageXObject created from the TIFF page or null if empty @throws IOException if I/O error occurs or invalid TIFF format
3296 Sets the value of a form field. @param value string to be set as the field's value @throws IOException if an error occurs during processing
3297 Updates selected option indices for a multi-select choice field. @param values List of selected option values @param options List of all available option values
3298 Calculates the page size and rotation for a given PDF document page. @param document PDDocument object representing the PDF @param page 1-based index of the page to calculate
3299 Finds the destination page in a PDF document. @param doc the PDF document to search @return PDPage object or null if not found @throws IOException if an I/O error occurs
3300 Creates a PDFPageable object with default settings. @param document the PDDocument to be processed
3301 Initializes a PDFPageable object with default settings. @param document the PDDocument to be processed @param orientation page orientation setting
3302 Constructs a PDFPageable with default DPI and centering. @param document the PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to indicate if page borders should be shown
3303 Constructs a PDFPageable object with centered content. @param document the PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering
3304 Retrieves page indices mapped to their labels. @return Map of page labels to their respective indices
3305 Retrieves page labels by their indices. @return array of page labels corresponding to each page index
3306 Notifies of change if values differ. @param oldBase original base object @param newBase new base object
3307 Processes glyph display for PDFTextStripper. @param textRenderingMatrix current text rendering matrix @param font PDFont object representing the font @param code character code to process @param displacement vector for character positioning @throws IOException if an I/O error occurs
3308 Splits text content into lines based on font and width. @param font the font used for text @param fontSize size of the font @param width maximum line width @return List of Line objects representing formatted text @throws IOException if an I/O error occurs during processing
3309 Retrieves the symbolic flag of the font descriptor. @return Boolean value indicating if the font is symbolic, or null if no font descriptor exists
3310 Determines fallback font name based on PDFontDescriptor. @param fontDescriptor descriptor containing font style information @return determined font name as string
3311 Builds a font descriptor from a Type1Font. @param type1 the source Type1Font @return PDFontDescriptor object configured with font details @throws IOException if an I/O error occurs
3312 Builds a PDFontDescriptor from FontMetrics. @param metrics font metrics containing descriptor data @return PDFontDescriptor object configured with metrics
3313 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf the TrueTypeFont to process @return a new PDFontDescriptor instance @throws IOException if required tables are missing
3314 Retrieves the Paint object for a given PDColor. @param color PDColor object representing the color @return Paint object corresponding to the color @throws IOException if an I/O error occurs during pattern retrieval
3315 Displays a PDF transparency group. @param form PDTransparencyGroup to display @throws IOException if an I/O error occurs during processing
3316 Processes a soft mask by setting up graphics state and restoring it. @param group PDTransparencyGroup to process @throws IOException if an I/O error occurs during processing
3317 Renders a Type 3 glyph using the specified matrix and font. @param textRenderingMatrix transformation matrix for text rendering @param font PDType3Font object representing the font @param code unique identifier for the character procedure @param displacement vector for additional displacement (unused) @throws IOException if an I/O error occurs during rendering
3318 Displays a PDF annotation by processing its appearance stream. @param annotation the PDF annotation to display @throws IOException if an I/O error occurs during processing
3319 Processes a tiling pattern using its default matrix. @param tilingPattern the pattern to process @param color the color for non-colored patterns @param colorSpace the color space for the pattern @throws IOException if an I/O error occurs during processing
3320 Displays a form on the current page. @param form the PDF form to display @throws IOException if an I/O error occurs during processing
3321 Retrieves a list of PDF form fields. @return List of PDField instances representing the form fields
3322 Finds a child field by name in the PDF form. @param name array of field names to search for @param nameIndex current index in the name array @return PDField instance or null if not found
3323 Retrieves child fields of the current field. @return List of PDField objects representing child fields
3324 Initializes PDFPrintable with document and default renderer. @param document PDDocument object to be printed @param scaling Scaling mode for printing @param showPageBorder flag to indicate if page borders should be shown @param dpi dots per inch for rendering quality
3325 Loads a PDF document from byte array. @param input PDF data as byte array @param password decryption password for the PDF @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3326 Loads a PDF document from a file without encryption or keystore. @param file the PDF file to load @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3327 Loads a PDF document from a file. @param file the PDF file to load @param password decryption password for the PDF @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3328 Loads a PDF document from a file. @param file the PDF file to load @param password decryption password for the PDF @param streamCacheCreateFunction function to create a stream cache @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3329 Loads a PDF document from a file. @param file the PDF file to load @param password decryption password for the PDF @param keyStore input stream for keystore @param alias alias of the key in the keystore @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3330 Sets visual signature using properties. @param visSignatureProperties properties containing signature data @throws IOException if an error occurs during setting the signature
3331 Sets the stroking color for drawing operations. @param color Color object representing the new color @throws IOException if I/O error occurs while writing to stream
3332 Sets the stroking color for drawing operations. @param color PDColor object representing the new color @throws IOException if I/O error occurs while writing to stream
3333 Sets the stroking color for drawing operations. @param color PDColor object representing the new color @throws IOException if I/O error occurs while writing to stream
3334 Sets the stroking color for PDF drawing operations. @param color PDColor object representing the new color @throws IOException if I/O error occurs while writing to stream
3335 Sets the stroking color for drawing operations. @param color PDColor object representing the new color @throws IOException if I/O error occurs while writing to stream
3336 Sets the non-stroking color in a PDF document. @param color Java Color object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3337 Sets the non-stroking color in a PDF document. @param color PDColor object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3338 Sets the non-stroking color in a PDF document. @param color PDColor object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3339 Sets the non-stroking color in a PDF document. @param color PDColor object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3340 Sets the non-stroking color in a PDF document. @param color PDColor object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3341 Imports a PDF page as a form object. @param sourceDoc the source document containing the page @param page the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3342 Writes a PDF document from COSDocument. @param doc COSDocument object representing the PDF document @throws IOException if an I/O error occurs
3343 Saves the document to an output stream with specified compression parameters. @param output the OutputStream to write the document to @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or the document is closed
3344 Initializes a COSWriterCompressionPool for the given PDDocument. @param document PDDocument to compress @param parameters compression parameters or defaults if null @throws IOException if an I/O error occurs during initialization
3345 Converts COSBase to string, handling COSString and COSStream. @param base input COSBase object @return extracted text or empty string if unsupported type
3346 Retrieves and converts the value of a field. @return Object representing the field's value or null if not found @throws IOException if an error occurs during conversion
3347 Retrieves rich text from a form field. @return the rich text as a string or null if not found
3348 Retrieves the 'Before' text from a dictionary. @return extracted text or null if not found
3349 Retrieves the 'After' value from dictionary. @return string representation of 'After' or null if not found
3350 Retrieves action string from a dictionary. @return JavaScript action as string or null if not found
3351 Retrieves rich content from PDF object. @return string representation of rich content or null if not found
3352 Retrieves string representation of a COSBase object. @param base COSBase object to process @return String value or empty string if not applicable
3353 Creates a LayoutPage from a PDF page. @param page PDPage object to be converted @return LayoutPage object with combined content stream and resources @throws IOException if I/O error occurs during stream operations
3354 Converts COS stream content to a byte array. @return byte array containing the stream data @throws IOException if an I/O error occurs
3355 Retrieves and processes image samples from a PDF stream. @return 2D array of integers representing image samples or null if not initialized
3356 Loads ICC profile or falls back to alternate color space. @throws IOException if an I/O error occurs during loading
3357 Initializes a PatchMeshesShadingContext for PDF rendering. @param shading PDMeshBasedShadingType instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points in each patch @throws IOException if initialization fails or an I/O error occurs
3358 Initializes Type4ShadingContext for PDF rendering. @param shading PDShadingType4 instance @param cm ColorModel object @param xform AffineTransform for coordinate transformation @param matrix additional transformation matrix @param deviceBounds bounding rectangle of the device @throws IOException if initialization fails
3359 Initializes a Type5ShadingContext for PDF shading. @param shading PDShadingType5 instance @param cm ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails
3360 Retrieves the PDF document's trailer. Attempts to parse using startxref; rebuilds if necessary. @return COSDictionary representing the trailer @throws IOException if an I/O error occurs during processing
3361 Displays a form if not hidden by optional content group. @param form the PDFormXObject to show
3362 Begins a marked content sequence if not hidden. @param tag the content tag @param properties dictionary containing OCG properties
3363 Retrieves all annotations from a PDF page. @return list of PDAnnotation instances or empty list if none found
3364 Retrieves the normal appearance of an annotation as a content stream. @return PDAppearanceContentStream object for drawing the normal appearance @throws IOException if I/O error occurs or multiple writers are opened
3365 Appends a form as an optional content group (layer) to a target page. @param targetPage the page to append the form to @param form the PDF form object to be added @param transform the transformation matrix for the form @param layerName the name of the new layer @return PDOptionalContentGroup representing the created layer @throws IOException if an I/O error occurs during operation
3366 Processes a PDF page by initializing it and handling its content stream. @param page the PDF page to be processed @throws IOException if an I/O error occurs during processing
3367 Processes a child content stream for the given page. @param contentStream the PDF content stream to process @param page the PDF page associated with the content stream @throws IOException if an I/O error occurs during processing
3368 Retrieves the page format for a PDF page. @param pageIndex 0-based index of the desired page @return PageFormat object representing the specified page's format
3369 Constructs an FDFAnnotationHighlight from an XML element. @param element XML element containing annotation attributes @throws IOException if 'coords' attribute is missing or invalid
3370 Constructs an FDFAnnotationSquiggly from an XML element. @param element XML element containing annotation attributes @throws IOException if 'coords' attribute is missing or invalid
3371 Creates an FDF annotation for strike-out text. @param element XML element containing annotation attributes @throws IOException if 'coords' attribute is missing or invalid
3372 Constructs an FDFAnnotationUnderline from an XML element. @param element XML element containing annotation attributes @throws IOException if 'coords' attribute is missing or invalid
3373 Sets selected values for a multi-select PDF field. @param values List of selected option values @throws IOException if an I/O error occurs
3374 Initializes a visible signature designer with an image stream and PDF document. @param document PDDocument object representing the PDF @param imageStream InputStream containing the image data for the signature @param page 1-based index of the page to apply the signature @throws IOException if reading the image stream or calculating page size fails
3375 Initializes a visible signature designer with an image and PDF page. @param document PDDocument object representing the PDF @param image BufferedImage to be used as the signature @param page 1-based index of the page to apply the signature
3376 Formats and displays text content with specified alignment and wrapping. @throws IOException if an I/O error occurs during processing
3377 Calculates font size for text within a PDF rectangle. @param font the font used for text @param contentRect the rectangle where text is to be placed @return calculated font size as a float @throws IOException if an I/O error occurs during processing
3378 Reads and sets the encoding for a font. Handles COSName and COSDictionary types, with fallbacks.
3379 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, or null if unknown
3380 Retrieves TrueType font mapping by base name or descriptor. @param baseFont base font name to search for @param fontDescriptor PDFontDescriptor containing font details @return FontMapping of TrueTypeFont, using fallback if necessary
3381 Retrieves a FontBoxFont for a given base font and descriptor. @param baseFont the primary name of the font @param fontDescriptor descriptor containing font style information @return FontMapping object with found or fallback font
3382 Embeds a Type1 font into a PDF document. @param doc PDDocument to embed the font into @param dict COSDictionary for font properties @param pfbStream InputStream containing PFB font data @param encoding FontBox Encoding object or null for default @throws IOException if I/O error occurs during processing
3383 Initializes a PDFont with given base font. @param baseFont FontName object representing the base font @throws IllegalArgumentException if no AFM data is found for the font
3384 Embeds TrueType font in PDF document. @param document PDDocument to embed font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param embedSubset true if subset embedding is required @throws IOException if embedding fails or font does not permit it
3385 Renders a glyph using the specified matrix and font. @param textRenderingMatrix transformation matrix for text rendering @param font PDType3Font object representing the font @param code unique identifier for the character procedure @param displacement vector for additional displacement (unused) @throws IOException if an I/O error occurs during rendering
3386 Opens a node by checking its status and updating counts. @param none @return void
3387 Closes the node by inverting its open count.
3388 Exports form data to an FDF document. @return FDFDocument containing the exported form data @throws IOException if an I/O error occurs
3389 Determines if XFA is dynamic in the PDF. @return true if XFA is present and no form fields, false otherwise
3390 Initializes PDFPrintable with document and default renderer settings. @param document PDDocument object to be printed @param scaling Scaling mode for printing @param showPageBorder flag to indicate if page borders should be shown
3391 Loads a PDF document from byte array without password. @param input PDF data as byte array @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3392 Loads a PDF document from a file. @param file the PDF file to load @param password decryption password for the PDF @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3393 Loads a PDF document from a file without password protection. @param file the PDF file to load @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3394 Sets the stroking color using a Color object. @param color Color object representing the new color @throws IOException if I/O error occurs while writing to stream
3395 Sets the stroking color for drawing operations. @param color Color object representing the new color @throws IOException if I/O error occurs while writing to stream
3396 Sets the stroking color using a Color object. @param color Color object representing the new color @throws IOException if I/O error occurs while writing to stream
3397 Sets the stroking color for drawing operations. @param color Color object representing the new color @throws IOException if I/O error occurs while writing to stream
3398 Sets the non-stroking color using a Java Color object. @param color Java Color object representing the desired color @throws IOException if I/O error occurs while setting the color
3399 Sets the non-stroking color using a Java Color object. @param color Java Color object representing the desired color @throws IOException if I/O error occurs while setting the color
3400 Sets the non-stroking color in a PDF document. @param color Java Color object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3401 Sets the non-stroking color in a PDF document. @param color Java Color object representing the color to set @throws IOException if I/O error occurs while writing to the output stream
3402 Initializes PDF widget appearance content. @param widget annotation widget to process @param appearanceCharacteristics appearance characteristics dictionary @param appearanceStream target appearance stream @throws IOException if I/O error occurs
3403 Writes text appearance settings to the content stream. @param contents PDAppearanceContentStream object for writing @param zeroFontSize default font size if current is zero @throws IOException if I/O error occurs during writing
3404 Imports a PDF page as a form object by page number. @param sourceDoc the source document containing the page @param pageNumber 0-based index of the desired page @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3405 Saves the document to an output stream with default compression. @param output the OutputStream to write the document to @throws IOException if an I/O error occurs or the document is closed
3406 Saves the document to a specified file with given compression parameters. @param file destination file for saving the document @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or the document is closed
3407 Writes the compressed body of a PDF document. @param document COSDocument to write @throws IOException if an I/O error occurs
3408 Retrieves rich content from annotation. @return extracted rich content as string or empty if not found
3409 Writes field data to XML. @param output Writer to write XML to @throws IOException if an error occurs during writing
3410 Retrieves rich text value. @return Rich text string or empty if not found
3411 Retrieves and processes the first page of a PDF document. @param doc PDDocument object containing the PDF @return LayoutPage object for the first page @throws IOException if I/O error occurs during processing
3412 Initializes a PDFunctionType4 from a COSBase object. @param functionStream COSBase object representing the PDF function stream @throws IOException if an I/O error occurs during parsing
3413 Recursively interpolates values based on coordinates and step. @param coord current coordinate array @param step current step index @return interpolated float array or null if not initialized
3414 Initializes a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @throws IOException if an I/O error occurs during initialization
3415 Initializes a Type6ShadingContext for PDF rendering. @param shading PDShadingType6 instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails or an I/O error occurs
3416 Initializes a Type7ShadingContext for PDF rendering. @param shading PDShadingType7 instance @param colorModel ColorModel object @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformation @param deviceBounds Rectangle defining the device bounds @throws IOException if initialization fails or an I/O error occurs
3417 Retrieves bytes from XFA content. Handles both COSArray and COSStream cases. @return byte array of XFA content or empty if not applicable @throws IOException if an I/O error occurs
3418 Updates structure parent indices for a PDF page. @param page the PDF page to update @param structParentOffset offset to apply to structure parents
3419 Clones the structure tree from a source document to a destination document. Handles K values, parent trees, resources, and other attributes. @param destinationDocument PDF document to receive the cloned structure tree @throws IOException if an I/O error occurs during cloning
3420 Processes and clones annotations from a PDF page. @param imported PDPage object to process annotations for @throws IOException if an I/O error occurs during processing
3421 Builds a map of COSDictionary to Set<COSDictionary> for PDF fields and widgets. @param fields list of PDF document fields @param pages PDF page tree @return map of page annotations to widget sets @throws IOException if an I/O error occurs
3422 Processes a PDF page by setting its rotation and handling its crop box. @param page the PDF page to be processed @throws IOException if an I/O error occurs during processing
3423 Constructs an FDFDictionary from XML. @param fdfXML XML element representing the FDF document
3424 Imports FDF data into a PDF field. @param fdfField the FDFField to import @throws IOException if an I/O error occurs
3425 Initializes a visible signature designer for a PDF page. @param documentSource source of the PDF data @param imageStream InputStream containing the signature image @param page 1-based index of the PDF page to apply the signature @throws IOException if an I/O error occurs during processing
3426 Initializes a PDVisibleSignDesigner with an image and calculates the page size. @param documentSource source of the PDF data @param image BufferedImage to be used as the signature @param page 1-based index of the PDF page @throws IOException if an I/O error occurs during processing
3427 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, defaulting to true if unknown
3428 Constructs a PDType1Font object by embedding a Type1 font. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @param encoding FontBox Encoding object or null for default @throws IOException if I/O error occurs during processing
3429 Constructs a PDSimpleFont with a specified base font. @param baseFont FontName object representing the base font
3430 Initializes a PDFont with the given dictionary. @param fontDictionary the COSDictionary representing the font
3431 Constructs a PDCIDFontType2Embedder. @param document PDF document @param dict CID font dictionary @param ttf TrueType font @param embedSubset flag for embedding subset @param parent PDType0Font parent @param vertical vertical orientation flag @throws IOException if I/O error occurs during processing
3432 Embeds a TrueType font in a PDF document. @param document PDDocument to embed font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @throws IOException if embedding fails or font does not permit it
3433 Checks if the given PDF form is dynamic XFA. @param acroForm the PDAcroForm object to check @return true if the form is dynamic XFA, false otherwise
3434 Initializes PDFPrintable with document and default renderer settings. @param document PDDocument object to be printed @param scaling Scaling mode for printing
3435 Loads a PDF document from a file. @param file the PDF file to load @return PDDocument object representing the loaded document @throws IOException if an I/O error occurs during loading
3436 Inserts generated appearance for a PDF widget. @param widget the annotation widget to modify @param appearanceStream the appearance stream of the field @param output the output stream for writing content @throws IOException if an I/O error occurs during processing
3437 Builds a PDF document with a visible signature. @param properties configuration for the visible signature @return InputStream containing the generated PDF @throws IOException if I/O operations fail
3438 Saves the document to a specified file with default compression. @param file destination file for saving the document @throws IOException if an I/O error occurs or the document is closed
3439 Saves the document to a specified file with given compression parameters. @param fileName path to the destination file @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs or the document is closed
3440 Writes FDF document data to XML. @param output Writer to write XML to @throws IOException if an error occurs during writing
3441 Creates a PDFunction based on the given COSBase. @param function COSBase object representing the PDF function @return PDFunction instance or throws IOException for invalid input
3442 Initiates recursive interpolation process. @return interpolated float array or null if not initialized
3443 Creates a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @param resources PDF resources for caching @return PDICCBased color space or new instance if not cached @throws IOException if I/O error occurs during creation
3444 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to associate the image with @param image source BufferedImage @return PDImageXObject object @throws IOException if an I/O error occurs during processing
3445 Extracts matte values from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float array of RGB matte values or null if not applicable @throws IOException if an error occurs during extraction
3446 Draws an image at specified position with its original size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @throws IOException if I/O error occurs during drawing
3447 Parses XML content from PDF bytes. @return parsed Document object @throws IOException on parsing errors
3448 Draws a PDF page with annotations. @param g Graphics2D object to draw on @param pageSize size of the PDF page @throws IOException if an error occurs during rendering
3449 Processes a PDF page for splitting. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3450 Processes a PDF page by setting its rotation and handling its crop box. @param page the PDF page to be processed @throws IOException if an I/O error occurs during processing
3451 Processes a PDF page within specified range and writes its content. @param page PDPage object representing the current page @throws IOException if an I/O error occurs during processing
3452 Constructs an FDFCatalog from XML. @param element XML element representing the FDF document
3453 Constructs a PDType1Font object by embedding a Type1 font. @param doc PDDocument to embed the font into @param pfbIn InputStream containing PFB font data @throws IOException if I/O error occurs during processing
3454 Constructs a PDType1Font with a specified base font. @param baseFont FontName object representing the base font
3455 Constructs a PDSimpleFont from a COSDictionary. @param fontDictionary the COSDictionary representing the font
3456 Initializes a PDType0Font with the given dictionary. Validates and processes descendant fonts and encoding. @param fontDictionary the COSDictionary representing the font @throws IOException if invalid font data or I/O error occurs
3457 Constructs a PDType0Font instance. @param document PDF document @param ttf TrueType font @param embedSubset flag for embedding subset @param closeTTF flag to close the TTF after processing @param vertical vertical orientation flag @throws IOException if I/O error occurs during font processing
3458 Constructs a PDTrueTypeFont object. @param document PDDocument to embed font into @param ttf TrueTypeFont object to be embedded @param encoding character encoding for the font @param closeTTF flag to indicate if TTF should be closed after embedding @throws IOException if embedding fails or font does not permit it
3459 Returns an iterator over PDF form fields. @return Iterator of PDField objects
3460 Initializes PDFPrintable with document and default scaling. @param document PDDocument object to be printed
3461 Initializes a PDVisibleSignDesigner with an image stream and PDF page. @param filename path to the PDF file @param imageStream InputStream containing the signature image @param page 1-based index of the page to apply the signature @throws IOException if there is an I/O error during initialization
3462 Initializes a PDVisibleSignDesigner with an image and calculates the page size. @param filename path to the PDF file @param image BufferedImage for the visible signature @param page 1-based index of the page in the document @throws IOException if an I/O error occurs during processing
3463 Builds a PDF document with a visible signature. @throws IOException if I/O operations fail
3464 Saves the document to a specified file with default compression. @param fileName path to the destination file for saving the document @throws IOException if an I/O error occurs or the document is closed
3465 Writes FDF document data to XML. @param output Writer to write XML to @throws IOException if an error occurs during writing
3466 Evaluates input through a stitching function. @param input array of input values @return evaluated output as a float array @throws IOException if partition not found or invalid input
3467 Initializes a PDDeviceN with device N array and resources. @param deviceN COSArray representing the device N color space @param resources PDResources for resource management @throws IOException if an error occurs during initialization
3468 Retrieves or creates the tint transformation function. @return PDFunction object representing the tint transform @throws IOException if there's an issue creating the function
3469 Initializes a PDSeparation object with given separation array and resources. @param separation COSArray containing separation data @param resources PDResources for color space creation @throws IOException if tint transform has invalid output parameters
3470 Retrieves the PDF function associated with this resource. @return PDFunction instance or null if not found, throws IOException for invalid input
3471 Retrieves the PDFunction array from the COS object. @return PDFunction[] containing PDF functions @throws IOException if mandatory /Function element is invalid
3472 Retrieves the transfer function for PDF processing. @return PDFunction instance or null if not found, throws IOException for invalid input
3473 Initializes a PDIndexed color space. @param indexedArray array representing the indexed color space @param resources resource dictionary for PDF document @throws IOException if an I/O error occurs during initialization
3474 Evaluates input values using linear interpolation based on PDF sample points. @param input array of input values to be processed @return array of interpolated output values @throws IOException if range is missing in function /Decode entry
3475 Builds a PDF image object from PNG data. @param document the PDDocument to add the image to @param state converter state containing PNG details @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs during image creation
3476 Creates a PDImageXObject from a file based on its extension. @param file source image File @param doc PDDocument to add the image to @return PDImageXObject object @throws IOException if I/O error occurs or unsupported format
3477 Creates a PDImageXObject from a file by detecting its content. @param file source File object @param doc PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs or unsupported file type
3478 Retrieves the image with optional masking and caching. @param region clipping area for the image (null for full image) @param subsampling subsampling factor for both X and Y axes @return BufferedImage representation of the image @throws IOException if an I/O error occurs during processing
3479 Draws an image at specified position with its original size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @throws IOException if I/O error occurs during drawing
3480 Draws an image at specified position with its original size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @throws IOException if I/O error occurs during drawing
3481 Draws an image at specified position with its original size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner
3482 Draws an image at specified position using its original size. @param image PDImageXObject to be drawn @param x X coordinate of the top-left corner @param y Y coordinate of the top-left corner @throws IOException if I/O error occurs during drawing
3483 Renders a PDF page as an image. @param pageIndex index of the page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., RGB, ARGB) @param destination where to send the rendered image @return BufferedImage representation of the PDF page @throws IOException if an error occurs during rendering
3484 Renders a PDF page to a Graphics2D object. @param pageIndex index of the PDF page to render @param graphics Graphics2D object for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @param destination RenderDestination for output @throws IOException if an error occurs during rendering
3485 Processes pages within a specified range. @throws IOException if an I/O error occurs during processing
3486 Processes PDF pages within specified bookmarks and writes their content. @param pages PDPageTree object representing all pages in the document @throws IOException if an I/O error occurs during processing
3487 Constructs an FDFDocument from a parsed XML document. @param doc parsed XML Document object @throws IOException if the root element is not 'xfdf'
3488 Retrieves the default Helvetica font. @return PDFont object representing Helvetica font
3489 Retrieves or creates a FontBoxFont for a given base font. @param baseName FontName object representing the base font @return FontBoxFont object from cache or newly created
3490 Constructs a PDTrueTypeFont from a COSDictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if an I/O error occurs during processing
3491 Constructs a PDType1CFont from a COSDictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if an I/O error occurs during processing
3492 Constructs a PDType1Font from a COSDictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if an I/O error occurs
3493 Constructs a PDType3Font from a COSDictionary. @param fontDictionary the COSDictionary representing the font @param resourceCache cache for resources used in the font @throws IOException if an error occurs during font initialization
3494 Loads a TrueType font into a PDF document. @param doc PDF document to load the font into @param randomAccessRead source of the TrueType font data @param embedSubset flag for embedding subset of the font @param vertical vertical orientation flag @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3495 Loads a PDType0Font from a PDF document and TrueType font. @param doc PDF document @param ttf TrueType font @param embedSubset flag for embedding subset @return PDType0Font instance @throws IOException if I/O error occurs during font processing
3496 Loads a vertical PDType0Font from a PDF document and TrueType font. @param doc PDF document @param ttf TrueType font @param embedSubset flag for embedding subset @return PDType0Font instance configured for vertical orientation @throws IOException if I/O error occurs during font processing
3497 Loads a TrueType font into a PDF document. @param doc PDDocument to embed the font into @param ttf TrueTypeFont object @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if embedding fails
3498 Loads a TrueType font into a PDF document. @param doc PDDocument to embed the font into @param randomAccessRead source of the font data @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if embedding fails or font is invalid
3499 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects representing signature fields
3500 Refreshes the appearances of all terminal fields in the document. @throws IOException if an I/O error occurs
3501 Returns an iterator over PDF form fields. @return Iterator of PDField objects
3502 Enables or disables caching of PDF form fields. @param cache true to enable caching, false otherwise
3503 Retrieves a PDF form field by its fully qualified name. @param fullyQualifiedName the unique identifier of the field @return PDField object or null if not found
3504 Applies overlays to specified pages of a PDF. @param specificPageOverlayMap map of page numbers and corresponding overlay file paths @return modified PDDocument with overlays applied @throws IOException if I/O error occurs during processing
3505 Overlays documents onto specified pages. @param specificPageOverlayDocumentMap map of page numbers to overlay documents @return PDDocument with overlays applied @throws IOException if I/O error occurs during processing
3506 Writes XFDF document data to XML. @param output Writer to write XML to @throws IOException if an error occurs during writing
3507 Evaluates input through a series of PDFunctions. @param input array of input values for the function @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if there's an issue with PDFunction evaluation
3508 Creates PDColorSpace from COSBase object. @param colorSpace base PDF object representing the color space @param resources PDF resources for color space creation @param wasDefault flag indicating if default color space is used @return PDColorSpace instance @throws IOException if an error occurs during creation
3509 Initializes a PDIndexed color space with default resources. @param indexedArray array representing the indexed color space @throws IOException if an I/O error occurs during initialization
3510 Creates a PDImageXObject from an image file. @param imagePath path to the image file @param doc PDDocument to add the image to @return PDImageXObject object @throws IOException if I/O error occurs or unsupported format
3511 Retrieves the full image without masking or subsampling. @return BufferedImage representation of the image @throws IOException if an I/O error occurs during processing
3512 Renders a PDF page as an image with specified parameters. @param pageIndex index of the page to render @param scale scaling factor for rendering @param imageType desired image type (e.g., RGB, ARGB) @return BufferedImage representation of the PDF page @throws IOException if an error occurs during rendering
3513 Renders a PDF page to a Graphics2D object using specified scaling. @param pageIndex index of the PDF page to render @param graphics Graphics2D object for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @throws IOException if an error occurs during rendering
3514 Splits a PDF document into multiple documents. @param document the source PDF document to split @return a list of split PDDocument objects @throws IOException if an I/O error occurs during splitting
3515 Writes text from a PDF document to an output stream. @param doc PDDocument to read from @param outputStream Writer for writing the extracted text @throws IOException if an I/O error occurs
3516 Loads XFDF document from input stream. @param input XML data input stream @return FDFDocument object @throws IOException if parsing fails
3517 Renders text using current graphics state. @param string byte array containing text data @throws IOException if an I/O error occurs during rendering
3518 Retrieves the glyph path for a given font name and glyph name. @param baseName FontName object representing the base font @param glyphName the name of the glyph to retrieve @return GeneralPath object representing the glyph or an empty path if not found @throws IOException if an I/O error occurs while retrieving the glyph path
3519 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if an I/O error occurs
3520 Constructs a PDType3Font from a COSDictionary using default resource cache. @param fontDictionary the COSDictionary representing the font @throws IOException if an error occurs during font initialization
3521 Loads TrueType font from a file into a PDF document. @param doc PDF document to load the font into @param file source file of the TrueType font data @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3522 Loads a TrueType font into a PDF document. @param doc PDF document to load the font into @param input source of the TrueType font data @param embedSubset flag for embedding subset of the font @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3523 Loads a TrueType font vertically into a PDF document. @param doc PDF document to load the font into @param file source file of the TrueType font data @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3524 Loads a TrueType font into a PDF document with vertical orientation. @param doc PDF document to load the font into @param input source of the TrueType font data @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3525 Loads a TrueType font vertically into a PDF document. @param doc PDF document to load the font into @param input source of the TrueType font data @param embedSubset flag for embedding subset of the font @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3526 Loads a TrueType font from a file into a PDF document. @param doc PDDocument to embed the font into @param file source file of the font data @param encoding character encoding for the font @return PDTrueTypeFont object or null if not found @throws IOException if embedding fails or font is invalid
3527 Loads a TrueType font into a PDF document from an InputStream. @param doc PDDocument to embed the font into @param input source of the font data as InputStream @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if embedding fails or font is invalid
3528 Retrieves all signature dictionaries from the PDF document. @return List of PDSignature objects representing the signatures
3529 Adds a signature to the PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options SignatureOptions with configuration settings @throws IOException if an I/O error occurs during processing
3530 Imports FDF data into a PDF document. @param fdf the FDFDocument containing form field data @throws IOException if an I/O error occurs during import
3531 Saves XFDF data to a Writer. @param output Writer to save XFDF data to @throws IOException if an error occurs during writing or closing the Writer
3532 Evaluates input through a series of PDFunctions. @param inputValue single input value for the function @return float array containing evaluated results, clamped between 0 and 1 @throws IOException if there's an issue with PDFunction evaluation
3533 Evaluates input through shading function and converts to RGB. @param values array of input values for the function @return integer representing RGB color value @throws IOException if there's an issue with function evaluation or conversion
3534 Retrieves the non-stroking paint with applied soft mask. @return Paint object for non-stroking color or null if not set @throws IOException if an I/O error occurs during processing
3535 Renders a transparency group onto the provided Graphics2D object. @param form PDTransparencyGroup to render @param graphics target Graphics2D for rendering @throws IOException if an I/O error occurs during processing
3536 Renders a PDF page as an RGB image. @param pageIndex index of the page to render @param scale scaling factor for rendering @return BufferedImage representation of the PDF page in RGB format @throws IOException if an error occurs during rendering
3537 Renders a PDF page as an image with specified DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @return BufferedImage representation of the PDF page @throws IOException if an error occurs during rendering
3538 Renders a PDF page as an image with specified DPI. @param pageIndex index of the page to render @param dpi desired dots per inch for rendering @param imageType desired image type (e.g., RGB, ARGB) @return BufferedImage representation of the PDF page @throws IOException if an error occurs during rendering
3539 Renders a PDF page to a Graphics2D object with uniform scaling. @param pageIndex index of the PDF page to render @param graphics Graphics2D object for rendering @param scale uniform scaling factor for both axes @throws IOException if an error occurs during rendering
3540 Extracts a sub-document from the source document. @return PDDocument containing pages from startPage to endPage @throws IOException if an I/O error occurs during extraction
3541 Extracts text from a PDF document. @param doc PDDocument to read from @return String containing the extracted text @throws IOException if an I/O error occurs
3542 Loads XFDF document from file. @param filename path to the XFDF file @return FDFDocument object @throws IOException if file reading fails
3543 Loads XFDF document from a file. @param file input file containing XFDF data @return FDFDocument object @throws IOException if parsing fails
3544 Displays a string using current graphics settings. @param string byte array containing text data @throws IOException if an I/O error occurs during rendering
3545 Renders text strings from a COSArray, applying text adjustments. @param array COSArray containing text and spacing data @throws IOException if an I/O error occurs during rendering
3546 Creates a PDFont object from a given dictionary. @param dictionary the COSDictionary representing the font @param resourceCache the ResourceCache for managing resources @return PDFont object created based on the font type and subtype @throws IOException if an I/O error occurs during font creation
3547 Loads a TrueType font into a PDF document with embedding. @param doc PDF document to load the font into @param input source of the TrueType font data @return PDType0Font instance created from the font data @throws IOException if I/O error occurs during font loading
3548 Retrieves the last signature dictionary from a PDF document. @return PDSignature object representing the last signature or null if none exist
3549 Prepares document for external signing and writes it to output stream. @param output OutputStream to write the PDF document to @return ExternalSigningSupport instance for further signing process @throws IOException if an I/O error occurs during preparation or writing
3550 Flattens specified fields in a PDF document. @param fields list of PDField objects to flatten @param refreshAppearances flag to refresh field appearances before flattening @throws IOException if an I/O error occurs during flattening
3551 Adds a signature to the PDF document with default signature interface. @param sigObject PDSignature object representing the signature @param options SignatureOptions with configuration settings @throws IOException if an I/O error occurs during processing
3552 Adds a signature to the PDF document using default options. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs during processing
3553 Saves XFDF data to a file. @param fileName the file where XFDF data will be saved @throws IOException if an error occurs during file operations
3554 Draws a glyph with specified transformations and rendering mode. @param path the GeneralPath representing the glyph shape @param font the PDFont used for rendering @param code character code of the glyph @param displacement vector for positioning the glyph @param at affine transform applied to the glyph @throws IOException if an I/O error occurs during processing
3555 Builds an indexed image from PNG data. @param doc PDDocument to add the image to @param state converter state containing PNG details @return PDImageXObject or null if creation fails @throws IOException if an I/O error occurs during processing
3556 Renders a PDF page as an RGB image at default scale. @param pageIndex index of the page to render @return BufferedImage representation of the PDF page in RGB format @throws IOException if an error occurs during rendering
3557 Renders a PDF page to a Graphics2D object with default scaling. @param pageIndex index of the PDF page to render @param graphics Graphics2D object for rendering @throws IOException if an error occurs during rendering
3558 Retrieves a PDFont object by name. @param name the unique identifier for the font @return PDFont object or null if not found @throws IOException if an I/O error occurs during retrieval
3559 Creates a PDFont object from a given dictionary. @param dictionary the COSDictionary representing the font @return PDFont object created based on the font type and subtype @throws IOException if an I/O error occurs during font creation
3560 Flattens all form fields in a PDF document. Skips flattening if XFA is dynamic. @throws IOException if an I/O error occurs during processing
3561 Adds a signature to the PDF document with default options. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs during processing
3562 Saves XFDF data to a specified file. @param fileName path to the file where XFDF data will be saved @throws IOException if an error occurs during file operations
3563 Calculates pixel table for shaded triangles within device bounds. @param triangleList list of ShadedTriangle objects to process @param array 2D integer array to store RGB values @param deviceBounds Rectangle defining the rendering area @throws IOException if there's an issue with function evaluation or conversion
3564 Fills and strokes the current path. @param windingRule rule for determining the interior of the path @throws IOException if an I/O error occurs during processing
3565 Converts a PNG image to a PDF image object. @param doc PDDocument to add the image to @param state converter state containing PNG details @return PDImageXObject or null if conversion fails @throws IOException if an I/O error occurs during processing
3566 Processes operands to set font properties. @param operands list of COSBase objects representing operands @throws IOException if an I/O error occurs or operands are invalid
3567 Copies necessary resources to an appearance stream. Ensures the font is added if not already present. @param appearanceStream target appearance stream for resource copying
3568 Retrieves and creates a PDFont object from the font setting. @return PDFont object or null if not found @throws IOException if an I/O error occurs during font creation
3569 Appends the pages from a source PDF document to this document. @param srcCatalog The catalog of the source PDF document. @throws IOException If an I/O error occurs while merging documents.
3570 Converts a PNG image to a PDF image object. @param doc PDDocument to add the image to @param imageData byte array containing PNG file data @return PDImageXObject or null if conversion fails @throws IOException if an I/O error occurs during processing
3571 Processes a PDF operator with its operands. @param operator the PDF operator to process @param operands list of COSBase objects representing operands @throws IOException if processing fails or operands are invalid
3572 Sets the appearance content for a PDF annotation widget. Copies resources and modifies the appearance stream. @param widget the annotation widget to modify @param appearanceStream the appearance stream of the field @throws IOException if an I/O error occurs during processing
3573 Copies graphics state properties from a dictionary to another. @param gs the target PDGraphicsState to copy into @throws IOException if an I/O error occurs during font creation
3574 Merges multiple PDF documents into one. @param streamCacheCreateFunction function to create a StreamCache instance @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during merging or saving
3575 Creates a PDImageXObject from a byte array. @param document PDDocument to associate the image with @param byteArray image data as a byte array @param name image file name for error messages @param customFactory optional factory for custom image processing @return PDImageXObject created from the byte array @throws IOException if I/O error occurs or unsupported image format
3576 Processes PDF appearance stream operators. @param content byte array containing PDF data @throws IOException if parsing or processing fails
3577 Merges documents based on the current merge mode. @param streamCacheCreateFunction function to create a StreamCache instance @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during merging
3578 Creates a PDImageXObject from a byte array. @param document PDDocument to associate the image with @param byteArray image data as a byte array @param name image file name for error messages @return PDImageXObject created from the byte array @throws IOException if I/O error occurs or unsupported image format
3579 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance PDF appearance string @param defaultResources associated resources @throws IOException if processing fails
3580 Merges documents with default compression. @param streamCacheCreateFunction function to create a StreamCache instance @throws IOException if an I/O error occurs during merging
3581 Retrieves the default appearance string for the form field. @return PDDefaultAppearanceString object initialized with appearance and resources @throws IOException if processing fails
3582 Sets the value for a PDF annotation widget and updates its appearance. Handles multiline fields and ensures proper formatting. @param apValue original appearance value of the field @throws IOException if an I/O error occurs during processing
3583 Initializes AppearanceGeneratorHelper with a form field. Validates AcroForm resources and retrieves default appearance string. @param field PDVariableText object representing the form field @throws IOException if processing fails
