1 Sets the text matrix in the current graphics state. @param value new matrix to be set
2 Sets the text line matrix in the current graphics state. @param value Matrix object representing the transformation
3 Sets the non-stroking color in the current graphics state. @param color PDColor object representing the new color
4 Sets the stroking color in the current graphics state. @param color PDColor object representing the stroke color
5 Handles exceptions during operator execution. Logs errors or warnings based on exception type. Throws exception if not specifically handled. @param operator the operator being executed @param operands list of operands for the operator @param exception the exception encountered
6 Retrieves the current text matrix from the graphics state. @return Matrix representing the current text layout
7 Creates a scaling transformation matrix. @param x scale factor for the x-axis @param y scale factor for the y-axis @return Matrix representing the scaling transformation
8 Creates a translation matrix instance. @param x horizontal translation @param y vertical translation @return Matrix object representing the translation
9 Creates a rotation transformation matrix. @param theta angle of rotation in radians @param tx translation along x-axis @param ty translation along y-axis @return Matrix representing rotation and translation
10 Retrieves text line matrix from current graphics state. @return Matrix representing text line positions
11 Transforms a point using the current graphics state's transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
12 Transforms the given width based on the current graphics state. @param width original width value @return transformed width as a float
13 Determines text direction based on transformation matrix. @return Direction in degrees (0, 90, 180, 270)
14 Retrieves or creates an Operator object. @param operator the operator string to be processed @return Operator object associated with the input string
15 Retrieves the non-stroking color from the current graphics state. @return PDColor object representing the non-stroking color
16 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object representing the non-stroking color space
17 Retrieves the current stroking color from the graphics state. @return PDColor object representing the stroke color
18 Retrieves the stroking color space from the current graphics state. @return PDColorSpace object representing the stroking color space
19 Initializes a new PDMarkedContent with a tag and properties. @param tag COSName representing the content tag, can be null @param properties COSDictionary containing content properties
20 Converts COSName to corresponding RenderState. @param state COSName representing the render state @return RenderState object or null if input is null
21 Converts COSName to corresponding BaseState. @param state COSName representing the state @return BaseState object, defaulting to ON if null
22 Returns the type of entity as "Pattern". @return String representing the type "Pattern"
23 Returns the type of shading. @return String representing the shading type
24 Retrieves the default value of an attribute. @return String representation of the default value or empty string if not applicable
25 Unchecks the entity by setting its value to "Off". @throws IOException if an I/O error occurs
26 Constructs a COSBoolean object. @param aValue boolean value to initialize the COSBoolean
27 Constructs a COSName object. @param aName the name to be assigned to the COSName
28 Private constructor to limit instance creation.
29 Constructs a COSString from byte array. @param bytes input byte array @param forceHex true if hex representation is forced
30 Constructs a COSDictionary and initializes its update state. @param this the current dictionary instance
31 Constructs a COSObject with the given base object. Initializes update state and sets dereference flag. @param object the base object to be encapsulated
32 Constructs a COSObject with the given base object and parser. Initializes update state and sets dereference status. @param object the underlying COSBase object @param parser the ICOSParser instance
33 Constructs a COSObject with a given key and parser. @param key the object key @param parser the parser to use for reading data
34 Retrieves the X coordinate of the lower-left corner. @return float value representing the X coordinate
35 Retrieves the lower-left Y coordinate of the rectangle. @return float value representing the lower-left Y coordinate
36 Retrieves the x-coordinate of the upper-right corner. @return float value representing the x-coordinate
37 Retrieves the upper-right Y coordinate from a rectangle array. @return float value representing the Y coordinate
38 Retrieves the font size from the font settings. @return font size as a float
39 Retrieves the float value of the first element in the values list. @return float value of the first COSNumber element
40 Retrieves the second element as a float. @return float value of the second element in the list
41 Retrieves the third value as a float. @return float value from the third position in the values list
42 Retrieves the x-coordinate value. @return float value of the x-coordinate from the first element in values list
43 Retrieves the y-coordinate value. @return float representing the y-coordinate
44 Retrieves the z-coordinate value. @return z-coordinate as a float
45 Retrieves an integer value at a specified index. @param index the position in the collection @param defaultValue the default value to return if the index is out of bounds or not a COSNumber @return the integer value at the given index, or the default value
46 Retrieves the name at the specified index or returns a default value. @param index position of the element in the collection @param defaultValue string to return if index is out of bounds @return name of the entity at the given index or default value
47 Finds the index of a specified COSBase object in the list. @param object the COSBase object to search for @return index of the object or -1 if not found
48 Initializes a COSArrayList with actual and COSArray. @param actualList list of elements @param cosArray corresponding COSArray
49 Performs exponential interpolation on input. @param input array containing the base value @return interpolated float array clipped to range
50 Returns string representation of COSArrayList. @return formatted string including inner array contents
51 Retrieves file filters from a PDF stream. @return List of filter names or empty list if none found
52 Converts Java Boolean object to COSBoolean. @param value Java Boolean object (nullable) @return Corresponding COSBoolean (TRUE or FALSE), null if input is null
53 Writes a COSBoolean to the given OutputStream as PDF. @param output stream to write PDF data @param cosBoolean the boolean value to write @throws IOException if an I/O error occurs
54 Constructs a COSDictionary and initializes it with entries from another dictionary. @param dict source dictionary to copy entries from
55 Returns the number of key-value pairs in the map. @return count of entries in the map
56 Retrieves a COSObject by key. @param key unique identifier of the item @return COSObject or null if not found or not a COSObject
57 Retrieves item by first key, or second key if first is not found. @param firstKey primary unique identifier of the item @param secondKey secondary unique identifier of the item @return COSBase object or null if both keys are not found
58 Retrieves the number of recipients. @return Number of recipients in the COSArray
59 Retrieves recipient string at specified index. @param i index of the recipient in the recipients array @return COSString object or null if not found
60 Retrieves the direction property. @return COSBase object or zero if not found
61 Retrieves metadata keys from the document's information dictionary. @return Sorted set of metadata keys as strings
62 Retrieves attribute names excluding a specific key. @return List of attribute names as strings
63 Adds trailer information to the stream. @param trailerDict dictionary containing trailer entries
64 Determines if a dictionary represents document info. @param dictionary PDF dictionary to check @return true if dictionary contains info keys, false otherwise
65 Checks if dictionary contains WIDTHS or MISSING_WIDTH keys. @return true if either key is present, false otherwise
66 Checks if the dictionary contains the key for missing width. @return true if 'MISSING_WIDTH' is present, false otherwise
67 Checks if the document contains XFA. @return true if XFA is present, false otherwise
68 Returns an Encoding instance based on the provided COSName. @param name the COSName representing the encoding type @return Encoding object or null if not found
69 Returns the index of the first selected widget. @return Index of the selected widget or -1 if none is selected
70 Initializes a COSDocument with a stream cache and parser. @param streamCacheCreateFunction function to create the stream cache @param parser ICOSParser instance for parsing operations
71 Parses and coerces a string to a COSFloat. Handles special cases and exceptions for valid float conversion. @param aFloat input string representing a floating-point number @throws IOException if the input cannot be parsed as a float
72 Returns string representation of COSFloat. Uses formatString to avoid scientific notation. @return formatted float value as string
73 Writes formatted numeric string to PDF output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
74 Converts update info to a COSIncrement object. @return COSIncrement instance initialized with update info
75 Determines if the entity needs to be updated. @return true if the entity has been updated, false otherwise
76 Retrieves or creates a COSInteger instance for the given value. @param val integer value to represent @return COSInteger object with specified value and validity set to true
77 Checks equality with another COSInteger. @param o object to compare @return true if equal, false otherwise
78 Writes a COSInteger to the OutputStream as PDF. @param output target OutputStream for writing @throws IOException if an I/O error occurs
79 Constructs a COSObjectKey with given number, generation, and stream index. @param num object number @param gen generation identifier @param index stream index @throws IllegalArgumentException if num or gen is negative
80 Adds an entry to the stream if its referenced key's number is unique. @param entry XReferenceEntry to be added
81 Sets an XRef entry for a given object key and offset. @param objKey unique identifier for the PDF object @param offset file position of the object
82 Processes a list of XReferenceEntry to determine ranges. @param xRefEntriesList list of cross-reference entries @return Long array containing start and count of consecutive numbers
83 Writes object reference to the output stream. @param output target OutputStream @param indirectReference COSObjectKey representing the object reference @throws IOException if an I/O error occurs
84 Compares XReferenceEntries based on referenced keys. @param xReferenceEntry the entry to compare with @return negative if this is less, zero if equal, positive if greater
85 Creates a raw input stream for reading. @return InputStream for reading the COSStream @throws IOException if the stream is closed or not properly initialized
86 Creates a raw output stream for writing. Ensures only one open writer and handles stream closure. @return OutputStream for writing data @throws IOException if an I/O error occurs
87 Retrieves a list of filter names from the stream. @return A List of COSName objects representing filters or an empty list if none present
88 Retrieves and constructs a list of filters. @return List of Filter objects @throws IOException if an invalid type is found in the filter array
89 Constructs a COSString from input text. @param text input string to convert @param forceHex specifies if hex form should be forced
90 Decodes a hexadecimal string to a byte array. @param s input hexadecimal string @return decoded byte array or empty if decoding fails
91 Converts byte array to string based on encoding. Checks for BOM to determine UTF-16BE or LE, defaults to PDFDocEncoding if none found. @return resulting string from conversion
92 Determines if updates are accepted based on document state. @return true if updates are accepted, false otherwise
93 Reads bytes from the Ascii85 encoded stream into a buffer. @param data byte array to store read bytes @param offset starting index in the data array @param len number of bytes to read @return actual number of bytes read or -1 if end of file @throws IOException if an I/O error occurs
94 Writes a byte to the output stream, encoding it in ASCII85. @param b byte to write @throws IOException if an I/O error occurs
95 Flushes the ASCII85 encoded data to the output stream. Writes any remaining data, handles line breaks, and appends terminator.
96 Constructs DecodeOptions with specified dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width region width @param height region height
97 Finds an ImageReader for a given format. @param formatName the image format name @param errorCause the reason for failure @return ImageReader instance if found, otherwise throws MissingImageReaderException
98 Finds a raster-capable ImageReader for the specified format. @param formatName the image format name @param errorCause additional information about the error @return an ImageReader that can read rasters @throws MissingImageReaderException if no suitable reader is found
99 Reads a single byte from the input stream. @return the next byte as an integer, or -1 if end of stream is reached @throws IOException on I/O errors during fetch
100 Reads data from the input stream into a byte array. @param data buffer to store read bytes @param offset starting position in the buffer @param length number of bytes to read @return number of bytes actually read, or -1 if end of stream @throws IOException on I/O errors
101 Encodes input data using a custom algorithm. @param rawData source of raw data to encode @param encoded destination for encoded output @param parameters encoding parameters (not used)
102 Decodes a predictor row in an image. @param predictor prediction algorithm identifier @param colors number of color components per pixel @param bitsPerComponent bits used for each component @param columns number of columns in the image @param actline current line to decode @param lastline previous line for prediction context
103 Initializes a new instance of LayerUtility. @param targetDoc destination PDF document for operations
104 Sets the bounding box for a PDF element. @param bbox PDRectangle object representing the bounding box or null to remove it
105 Adds a file source to the list. @param source path of the file to be added @throws FileNotFoundException if the specified file does not exist
106 Closes all resources and ensures exceptions are logged. @throws IOException if an error occurs during closing
107 Closes the document and associated streams. @throws IOException if an I/O error occurs during closing
108 Returns the underlying COSDictionary. Checks if functionStream is not null, then returns its COSObject; otherwise, returns functionDictionary.
109 Initializes a PDXObject with a given stream and subtype. @param stream PDStream object containing the data @param subtype COSName representing the subtype of the XObject
110 Returns the underlying COSStream. @return COSStream object
111 Retrieves metadata stream from the PDF document. @return COSStream containing metadata or null if not found
112 Sets metadata in the underlying COSStream. @param metadata COSStream object containing metadata to be set
113 Checks if the widget is a signature annotation. @param annotations list of PDAnnotation objects @param widget PDAnnotationWidget to check @return true if widget is found in annotations, false otherwise
114 Checks equality with another PDAnnotation based on their underlying COSDictionary. @param o the object to compare @return true if equal, false otherwise
115 Checks if a signature field exists in the iterator. @param fieldIterator iterator over PDF fields @param signatureField the signature field to check for @return true if found, false otherwise
116 Initializes a new PDFStreamParser. @param pdContentstream PDContentStream object containing stream content @throws IOException if an I/O error occurs during initialization
117 Initializes a new instance of PDFStreamParser. @param bytes byte array containing PDF data
118 Checks if the next character in source is a digit. @return true if the next character is a digit, false otherwise
119 Reads a numeric string from the input source. @return StringBuilder containing the numeric string @throws IOException if reading fails or number is too long
120 Checks if the next character in source is a space. @return true if the next character is a space, false otherwise
121 Skips a line break character in the input. @param linebreak character to check and skip @return true if a valid line break is skipped, false otherwise
122 Checks if the end of a string is reached based on specific patterns. @param bracesParameter current brace count @return updated brace count or 0 if end pattern is found
123 Checks if character is end of line (EOL). @param c character to check @return true if c is EOL, false otherwise
124 Checks if the next character in source is whitespace. @return true if the next character is whitespace, false otherwise @throws IOException if an I/O error occurs
125 Parses the startxref value from a PDF file. @return byte offset of the first object in the cross-reference table, or -1 if not found
126 Searches for the last EOF marker in a PDF source. @return position of the last valid EOF marker or Long.MAX_VALUE if none found @throws IOException if an I/O error occurs during reading
127 Searches for XRef tables in the PDF source. @return List of offsets where XRef tables are found @throws IOException if an I/O error occurs during reading
128 Searches for XRef stream offsets in a PDF file. @return List of offsets where XRef streams are located @throws IOException if an I/O error occurs during reading
129 Retrieves the cross-reference table from the trailer resolver. @return Map of COSObjectKey to Long or null if trailer is unresolved
130 Reads the file to find the offset of 'startxref'. @return Offset of 'startxref' in the file or throws IOException if not found.
131 Reads from input stream until 'endstream' or 'endobj' is found. @param out EndstreamFilterStream to filter content @return Length of filtered content
132 Parses a COSBase object by its number. @param objectNumber unique identifier of the object to parse @return parsed COSBase object or null if not found
133 Reads object numbers and their offsets. @return Map of object numbers to their offsets @throws IOException if an I/O error occurs while reading
134 Parses all objects from a PDF source. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs
135 Checks if next character in source is space or newline. @return true if next character is space or newline, false otherwise
136 Parses the PDF trailer and sets it. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
137 Creates a new XRef trailer object and associates it with a byte position. @param startBytePos starting byte position in the file @param type type of XRef (TABLE or STREAM)
138 Resets the cross-reference table by clearing all entries and resetting pointers.
139 Constructs a FreeXReference with a specified key and next free object. @param key the COSObjectKey associated with the reference @param nextFreeObject the ID of the next free object in the PDF
140 Constructs an ObjectStreamXReference for a PDF object. @param objectStreamIndex index of the object stream @param key unique identifier for the object @param object the COSBase object @param parentKey identifier for the parent object
141 Retrieves the numeric value of the first column. @return long representing the numeric value of the column type
142 Returns a string representation of the FreeReference. @return formatted string with key, nextFreeObject, and numeric type value
143 Generates a string representation of the ObjectStreamEntry. @return formatted string containing key, type, index, and parent information
144 Retrieves the generation number of the referenced key. @return The generation number as a long value.
145 Returns the value of the second column. @return The byte offset as a long value
146 Retrieves the generation number of the referenced key. @return The generation number as a long value
147 Generates a string representation of the object. @return formatted string with key, type, and byte offset
148 Retrieves the numeric value of the parent key. @return Numeric part of the parent object's key or 0 if no parent exists
149 Retrieves the value of the third column. @return long value representing the index of the object stream
150 Writes bytes to the output stream. @param b byte array containing data to write @param off starting offset in the byte array @param len number of bytes to write
151 Writes a byte to the output stream without starting on a new line. @param b the byte to be written
152 Writes an end-of-line character if not already on a new line.
153 Initializes a COSWriter with given output stream and compression parameters. @param outputStream the OutputStream to write PDF data to @param compressParameters parameters for PDF compression
154 Initializes a new COSWriter for incremental PDF updates. @param outputStream stream to write the updated PDF @param inputData input data of the existing PDF @throws IOException if an I/O error occurs
155 Determines if compression is enabled. @return true if compression parameters are set and enabled, false otherwise
156 Adds a cross-reference entry to the list. @param entry XReferenceEntry object to be added
157 Writes FDF document to output. @param doc FDFDocument to be written @throws IOException if an I/O error occurs during writing
158 Retrieves an object from the pool by its key. @param key unique identifier for the object @return COSBase object or null if not found
159 Retrieves the highest XRef object number from the object pool. @return the highest XRef object number
160 Writes a COSArray to the given OutputStream. @param output target OutputStream for writing @param cosArray the COSArray to write @throws IOException if an I/O error occurs
161 Constructs a DefaultResourceCache with stable caching enabled.
162 Constructs a new instance of DefaultResourceCacheCreateImpl with stable cache enabled.
163 Initializes content stream for PDF appearance. @param appearance the PDAppearanceStream to write to @param outputStream where PDF content is written
164 Initializes a content stream for a PDF appearance. @param doc the PDDocument to write to @param appearance the PDAppearanceStream for appearance properties @param outputStream where PDF content is written
165 Writes a string to output stream in ASCII encoding. @param text string to write @throws IOException if an I/O error occurs
166 Adds a comment to the output stream. @param comment text to add; must not contain newlines @throws IOException if writing fails
167 Adds a comment to the output stream. @param comment text to add; must not contain newlines @throws IOException if writing fails
168 Adds a comment to the output stream. @param comment text to add; must not contain newlines @throws IOException if writing fails
169 Adds a comment to the output stream. @param comment text to add; must not contain newlines @throws IOException if writing fails
170 Closes the output stream and logs a warning if text mode was not ended. @throws IOException if an I/O error occurs while closing the stream
171 Closes the output stream and logs a warning if still in text mode. @throws IOException if an I/O error occurs while closing the stream
172 Closes the output stream and logs a warning if text mode was not ended. @throws IOException if an I/O error occurs while closing the stream
173 Closes the output stream, logging a warning if text mode was not ended. @throws IOException if an I/O error occurs while closing the stream
174 Applies GSUB rules to transform and encode glyphs of a word. @param gsubWorker the worker responsible for applying GSUB transformations @param out output stream to write encoded glyph data @param font the font containing glyph mappings @param word the input word to process @return list of transformed glyph IDs after applying GSUB rules
175 Sets stroking color based on PDColor. @param color PDColor object to set the stroking color from @return true if color is successfully set, false otherwise @throws IOException if I/O error occurs during writing
176 Sets non-stroking color on demand based on PDColor. @param color PDColor object to extract components from @return true if color is set, false otherwise @throws IOException if an I/O error occurs
177 Constructs a destination name tree node from a dictionary. @param dic the COS dictionary representing the node
178 Initializes an embedded files name tree node. @param dic the COS dictionary representing the node
179 Initializes a JavaScript name tree node with a dictionary. @param dic the COS dictionary representing the node
180 Initializes a structure element name tree node with a given dictionary. @param dic COS dictionary representing the node
181 Initializes a new PDDocument instance. @param doc the COSDocument associated with this PDF @param source the RandomAccessRead source of the document @param permission the AccessPermission for the document
182 Constructs an FDFDocument with a given COSDocument and source. @param doc the underlying COSDocument @param source the RandomAccessRead source for the document
183 Constructs a PDMetadata object from a COSStream. @param str the underlying COSStream to be wrapped
184 Constructs a PDObjectStream from a COSStream. @param str the underlying COSStream to be wrapped
185 Constructs a PDEmbeddedFile from a COSStream. @param str the underlying COSStream to be wrapped
186 Initializes a PDFunction with a given COSBase. @param function the underlying COSBase object for the function
187 Initializes a PDXObject with given stream and subtype. @param stream underlying COSStream to be wrapped @param subtype the type of XObject (e.g., Image, Form)
188 Constructs a PDExtendedGraphicsState using a COSDictionary. @param dictionary COSDictionary containing graphics state settings
189 Wraps a COSDictionary in a PDTypedDictionaryWrapper. @param dictionary the COSDictionary to wrap
190 Constructs a PDAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
191 Constructs a PDUserProperty with a given COSDictionary and user attribute object. @param dictionary the COSDictionary to initialize with @param userAttributeObject the user attribute object associated with the property
192 Constructs a PDOutlineNode from a COSDictionary. @param dict the dictionary to initialize with
193 Constructs a new PDTransition with the given COSDictionary. @param dictionary the COSDictionary to wrap
194 Creates a child node from a dictionary. @param dic dictionary containing node data @return PDNumberTreeNode object initialized with the dictionary and value type
195 Returns a string representation of the FunctionType2 object. @return String containing C0, C1, and N values
196 Executes a sequence of instructions using the provided context. @param context execution environment containing operators and stack
197 Initializes a new PDStructureElement with a given COSDictionary. @param dic the underlying COSDictionary
198 Initializes a new PDStructureTreeRoot with a given COSDictionary. @param dic the underlying COSDictionary
199 Checks for changes in an entry and notifies of property change. @param oldEntry the original entry value @param newEntry the updated entry value
200 Retrieves an object by index from the list. @param index position of the object in the list @return T object at the specified index
201 Returns the number of objects in the collection. @return Size of the object list
202 Retrieves a specific revision number by index. @param index position of the revision number in the list @return Integer representing the revision number at the given index
203 Adds an object with its corresponding revision number. @param object the object to add @param revisionNumber the revision number associated with the object
204 Sets the revision number for a specific object. @param object The object to update @param revisionNumber The new revision number
205 Adds a TextPosition to the list of contents. @param text TextPosition object to be added
206 Adds marked content to the list of contents. @param markedContent the content to be added
207 Adds an XObject to the list of contents. @param xobject the XObject to be added
208 Sets the print permission. @param allowPrinting true to enable printing, false to disable
209 Sets modification permission. @param allowModifications true to allow modifications, false otherwise
210 Sets permission to extract content. @param allowExtraction true to allow content extraction, false otherwise
211 Sets permission to modify annotations. @param allowAnnotationModification true to allow modification, false otherwise
212 Sets the form-filling permission. @param allowFillingInForm true to allow, false to disallow
213 Sets permission for accessibility extraction. @param allowExtraction true to allow, false to disallow
214 Sets permission to assemble documents. @param allowAssembly true to enable, false to disable
215 Sets the permission to print faithfully. @param canPrintFaithful true to allow printing, false to disallow
216 Checks if print permission is granted. @return true if print permission is enabled, false otherwise
217 Checks if modification permission is granted. @return true if modification bit is set, false otherwise
218 Determines if content extraction permission is granted. @return true if extraction permission is enabled, false otherwise
219 Checks if annotations can be modified. @return true if modification permission is granted, false otherwise
220 Checks if user has permission to fill in form. @return true if permission bit is set, false otherwise
221 Checks if permission to extract data for accessibility is granted. @return true if permission is granted, false otherwise
222 Checks if user has permission to assemble documents. @return true if permission is granted, false otherwise
223 Checks if the user has permission to print faithfully. @return true if the permission bit is set, false otherwise
224 Calculates the final encryption key for a PDF object. @param objectNumber unique object number in PDF @param genNumber generation number of the object @return byte array representing the final encryption key
225 Initializes a new instance of SecurityHandler.
226 Sets encryption key and initializes salt array. @param key byte array representing the encryption key @throws IllegalArgumentException if key length is outside 1-32 range
227 Writes a byte to the output stream with XOR encryption. @param aByte the byte to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
228 Determines if a Unicode code point is prohibited. @param codepoint the Unicode code point to check @return true if codepoint is prohibited, false otherwise
229 Initializes a SecurityHandler with a given protection policy. @param protectionPolicy the security policy to apply
230 Computes version number based on key length and AES preference. @return version number determined by key length and encryption preference
231 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the ProtectionPolicy to handle @return SecurityHandler instance or null if no handler is found
232 Creates a SecurityHandler for a filter by name. @param name the name of the handler class @return SecurityHandler instance or null if not found
233 Constructs an FDF annotation caret from a COS dictionary. @param a the COS dictionary representing the annotation
234 Constructs an FDF annotation circle from a COS dictionary. @param a the COS dictionary representing the annotation
235 Constructs an FDF file attachment annotation from a COS dictionary. @param a the COS dictionary representing the annotation
236 Constructs an FDF free text annotation from a COS dictionary. @param a the COS dictionary representing the annotation
237 Constructs an ink annotation from a COS dictionary. @param a the COS dictionary representing the annotation
238 Constructs an FDF line annotation from a COS dictionary. @param a the COS dictionary representing the annotation
239 Constructs an FDF annotation link from a COS dictionary. @param a the COS dictionary representing the annotation
240 Constructs an FDF polygon annotation from a COS dictionary. @param a the COS dictionary representing the annotation
241 Constructs an FDF polyline annotation from a COS dictionary. @param a the COS dictionary representing the annotation
242 Constructs an FDF annotation specifically for sound. @param a COS dictionary representing the annotation
243 Constructs an FDF square annotation from a COS dictionary. @param a the COS dictionary representing the annotation
244 Constructs an FDF stamp annotation from a COS dictionary. @param a the COS dictionary representing the annotation
245 Constructs an FDF text annotation from a COS dictionary. @param a the COS dictionary representing the annotation
246 Constructs an FDF annotation text markup from a COS dictionary. @param a the COS dictionary representing the annotation
247 Extracts and returns the Panose classification data. @return PDPanoseClassification object containing extracted data
248 Loads font metrics for a given font name. @param fontName the name of the font @throws IOException if resource not found or parsing fails
249 Maps a FontName to its alias. @param baseName FontName object to be mapped
250 Transforms a given vector using an affine transformation matrix. @param vector input vector to be transformed @return new Vector representing the transformed coordinates
251 Scales vector by a scalar. @param sxy scaling factor @return new Vector with scaled components
252 Converts a character code to CID. @param code character code to convert @return CID value or default if not found
253 Determines if the font is part of the Adobe Standard 14 fonts. @return true if the font is standard and not embedded, false otherwise
254 Retrieves the default Adobe glyph list. @return GlyphList containing default Adobe glyphs
255 Converts a character code to its corresponding glyph ID. @param code the character code @return the glyph ID or 0 if not found @throws IOException if an I/O error occurs during cmap extraction
256 Retrieves the glyph name for a given character in the font. @param name the input character name @return the glyph name or ".notdef" if not found
257 Retrieves the glyph name for a character in the font. @param name the input character or glyph name @return the glyph name if found, otherwise ".notdef" @throws IOException if an I/O error occurs
258 Initializes BuiltInEncoding with mappings from code to name. @param codeToName map containing integer codes and their string names
259 Initializes GlyphList from input stream. @param input InputStream containing glyph data @param numberOfEntries Expected number of entries in the list @throws IOException if reading fails or data is invalid
260 Constructs a GlyphList by copying another and loading additional glyphs. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing additional glyph data @throws IOException if reading fails or data is invalid
261 Initializes MacOSRomanEncoding with custom mappings.
262 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding instance with mappings from code to name
263 Returns a Composite instance based on blend mode and alpha. @param blendMode the blending mode to apply @param constantAlpha the constant alpha value for blending (clamped between 0 and 1) @return AlphaComposite or BlendComposite instance
264 Initializes a PDColor with components, pattern name, and color space. @param components array of color components @param patternName COSName representing the pattern @param colorSpace PDColorSpace object
265 Initializes a soft mask with given parameters. @param paint the painting object for rendering @param mask the mask image @param bboxDevice bounding box in device coordinates @param backdropColor color used as backdrop @param transferFunction function to apply during blending
266 Initializes CMYK color conversion settings. Loads ICC profile and sets up color space. @throws IOException if default CMYK profile cannot be loaded
267 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
268 Chooses the best data row for writing based on compression sum estimates. @return byte array of the row with the highest estimated compression sum
269 Applies a mask to an image. @param image original BufferedImage object @param mask BufferedImage mask to apply @param interpolateMask whether to use interpolation for mask scaling @param isSoft true if mask is soft, false otherwise @param matte float array representing the matte color @return BufferedImage with applied mask
270 Retrieves the COS dictionary containing configuration parameters. @return COSDictionary object with config settings
271 Parses PNG chunks from image data. @param imageData byte array containing PNG file data @return PNGConverterState object or null if parsing fails
272 Initializes a new shading pattern with the given resource dictionary. @param resourceDictionary the COS dictionary representing the pattern resources
273 Initializes a new tiling pattern with the given COS dictionary and resource cache. @param dictionary the COS dictionary representing the pattern @param resourceCache the cache for resources used in the pattern
274 Initializes an AxialShadingPaint with given shading and transformation. @param shadingType2 the axial shading to be applied @param matrix the transformation matrix for the shading
275 Constructs a RadialShadingPaint with specified shading and transformation. @param shading PDShadingType3 object defining the radial shading @param matrix Matrix for transforming the shading
276 Constructs a Type1ShadingPaint with specified shading and matrix. @param shading the PDShadingType1 instance to be used @param matrix the transformation matrix for the shading
277 Constructs a Type4ShadingPaint with specified shading and transformation. @param shading PDShadingType4 object representing the shading @param matrix transformation matrix for the shading
278 Initializes a Type5ShadingPaint with specified shading and transformation. @param shading PDShadingType5 object representing the shading @param matrix transformation matrix for the shading
279 Initializes a Type6ShadingPaint with given shading and transformation matrix. @param shading the Type6 shading to be applied @param matrix the transformation matrix for the shading
280 Constructs a Type7ShadingPaint with specified shading and transformation. @param shading PDShadingType7 object representing the shading pattern @param matrix Matrix for transforming the shading
281 Constructs a cubic Bezier curve. @param ctrlPnts array of control points defining the curve @param l level of detail (number of segments)
282 Initializes a line with start and end points and colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array at start point @param c1 color array at end point
283 Constructs a PDShadingType1 instance with a given dictionary. @param shadingDictionary COSDictionary containing shading data
284 Constructs a new PDShadingType2 instance. @param shadingDictionary COSDictionary containing shading data
285 Retrieves the number of color components. Initializes if not already set. @return the number of color components @throws IOException if an I/O error occurs
286 Retrieves the number of color components. @return the number of color components @throws IOException if an I/O error occurs
287 Determines if an edge is a line based on control points. @param ctl array of control points @return true if the edge is effectively a line, false otherwise
288 Checks if a point is inside a triangle. @param p point to check @return true if point is inside or on the edge of the triangle, false otherwise
289 Calculates interpolated color at a given point. @param p the point for which to calculate the color @return float array representing the interpolated color
290 Adds a GeneralPath to the clipping paths. @param path GeneralPath to add for clipping
291 Intersects clipping path with an area. @param area Area to intersect with current clipping path
292 Transfers the current clipping path to a Graphics2D object. @param graphics target Graphics2D object for setting the clip
293 Creates a PDSoftMask from a given COSBase and ResourceCache. @param dictionary the COSBase containing mask properties @param resourceCache the ResourceCache for managing resources @return PDSoftMask object or null if invalid
294 Constructs a PDSoftMask using a COSDictionary. @param dictionary COSDictionary containing mask properties
295 Initializes a PlainText object with given text value. @param textValue input text to be processed into paragraphs
296 Initializes an embedded GoTo action. @param a COSDictionary representing the action properties
297 Constructs a GoTo action from a COS dictionary. @param a COSDictionary containing action properties
298 Creates a new PDActionHide instance. @param a COSDictionary representing the action properties
299 Constructs an import data action from a COS dictionary. @param a COSDictionary representing the action properties
300 Initializes a JavaScript action with a COS dictionary. @param a COSDictionary representing the action properties
301 Constructs a PDF launch action. @param a COSDictionary representing the action properties
302 Initializes a movie action with a COS dictionary. @param a COSDictionary representing the action properties
303 Initializes a named action with a COS dictionary. @param a COSDictionary representing the action properties
304 Initializes a remote goto action with a COS dictionary. @param a COSDictionary representing the action properties
305 Initializes a reset form action with a COS dictionary. @param a COSDictionary representing the action properties
306 Constructs a sound action from a COS dictionary. @param a COSDictionary representing the sound action properties
307 Initializes a form submission action with a COS dictionary. @param a COSDictionary representing the action properties
308 Constructs a thread action from a COS dictionary. @param a COSDictionary representing the thread properties
309 Initializes an URI action with a COS dictionary. @param a COSDictionary representing the action properties
310 Ensures polygon vertices are in counterclockwise order. @param points array of vertices defining the polygon
311 Retrieves the height of the template. @return height as a float value
312 Reads image from input stream and sets it. @param stream InputStream containing the image data @throws IOException if an I/O error occurs while reading the stream
313 Sets the coordinates for the sign. @param x horizontal position value @param y vertical position value @return current PDVisibleSignDesigner instance
314 Creates a new PDPageFitDestination from a COSArray. @param arr the COSArray representing the page destination
315 Creates a new PDPageFitHeightDestination. @param arr COSArray representing the page destination
316 Initializes a new PDPageFitRectangleDestination with a given COSArray. @param arr the COSArray representing the page destination
317 Creates a new PDPageFitWidthDestination. @param arr COSArray representing the page destination
318 Constructs a PDPageXYZDestination from a COSArray. @param arr the COSArray representing the page destination
319 Ensures the given outline item has no siblings. @param node PDOutlineItem to be checked
320 Converts two lists of keys and values into a list of KeyValue pairs. @param key list of keys @param value list of corresponding values @return List of KeyValue objects
321 Returns the field tree of the form. @return PDFieldTree object representing the form's fields
322 Constructs a PDNonTerminalField instance. @param acroForm the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any
323 Constructs a PDTerminalField instance. @param acroForm the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any
324 Parses XML input stream into a Document. @param is input stream containing XML data @return parsed Document object @throws IOException if parsing fails
325 Initializes a new PDRectlinearMeasureDictionary with the given COSDictionary. @param dictionary the COSDictionary to use as the measure dictionary
326 Removes backdrop from an image by adjusting pixel colors. @param backdrop the backdrop image to remove @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
327 Draws a tiling pattern using specified parameters. @param g Graphics2D context to draw on @param pattern PDTilingPattern to be drawn @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param patternMatrix transformation matrix for the pattern
328 Retrieves the X scaling factor from the text matrix. @return The absolute value of the X scaling factor
329 Creates a PaintContext with adjusted transformation. @param cm ColorModel for the context @param deviceBounds device space bounding box of the graphics primitive being rendered @param userBounds user space bounding box of the graphics primitive being rendered @param xform AffineTransform from user space to device space @param hints rendering hints @return PaintContext with pattern matrix scaling removed
330 Retrieves Y-axis scaling factor from text matrix. @return Y-axis scaling factor or default value if single[3] is zero
331 Calculates X rotation based on given angle. @param rotation the angle of rotation in degrees @return adjusted X translation value based on rotation
332 Calculates the lower-left Y coordinate based on rotation. @param rotation angle in degrees (0, 90, 180, 270) @return Y coordinate as a float
333 Calculates the width based on rotation. @param rotation angle of rotation in degrees @return absolute width considering the rotation
334 Writes text characters to the output. @param text TextPosition object containing character data
335 Checks Unicode string for right-to-left directionality and reverses if necessary. @return Reversed Unicode string if right-to-left, otherwise original text
336 Checks if the character is a diacritic. @return true if the character is a diacritic, false otherwise
337 Returns the Unicode string representation. @return Unicode string value
338 Writes the start of an article to the output. @param isLTR indicates left-to-right text direction (unused)
339 Writes the end of the article to the output. @throws IOException if an I/O error occurs while writing
340 Writes system's line separator to output. @throws IOException if an I/O error occurs
341 Writes the current word separator to the output. @throws IOException if an I/O error occurs
342 Writes a string to the output stream. @param text the string to be written @param textPositions list of text positions (unused in this method) @throws IOException if an I/O error occurs
343 Writes the start tag for a paragraph, ensuring proper closure of any existing paragraph.
344 Writes the starting point of the current page to the output. @throws IOException if an I/O error occurs
345 Writes the end position of the current page to the output. @throws IOException if an I/O error occurs during writing
346 Matches a list item pattern against the current text position. @param pw PositionWrapper containing the text position to match @return Pattern object if a match is found, otherwise null
347 Normalizes a word by handling Unicode presentation forms and direction. @param word input string to normalize @return normalized string with correct direction and formatting
348 Inserts a diacritic at a specified position in the text. @param i index where the diacritic should be inserted @param diacritic TextPosition object representing the diacritic to insert
349 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
350 Converts a byte array to its hexadecimal string representation. @param bytes input byte array @return String containing hexadecimal values of the input bytes
351 Converts a byte to its corresponding hexadecimal representation. @param b input byte @return array of two bytes representing the high and low nibbles in hex
352 Converts a byte array to its ASCII hexadecimal representation. @param bytes input byte array @return byte array containing ASCII hex values
353 Writes a byte as two hex characters to an output stream. @param b the byte to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
354 Sorts an array using iterative merge sort. @param arr the array to be sorted @param cmp comparator defining the order of elements
355 Creates a deep copy of the matrix. @return a new Matrix object with copied data
356 Concatenates this matrix with another matrix. @param matrix the matrix to concatenate with
357 Translates a 3D object by specified amounts. @param tx translation along the X-axis @param ty translation along the Y-axis
358 Scales the first three elements by sx and the last three by sy. @param sx scale factor for x-axis @param sy scale factor for y-axis
359 Multiplies this matrix with another matrix. @param other the second matrix to multiply @return resulting Matrix object after multiplication
360 Formats a float value into an ASCII buffer. @param value the float to format @param maxFractionDigits maximum fraction digits @param asciiBuffer buffer to store formatted number @return new offset after formatting or -1 if invalid input
361 Adds a path to the trie with associated value. @param value the value to be set at the end of the path @param parts variable number of byte arrays representing path segments
362 Sets default value for the trie. @param defaultValue the default value to be assigned to the root node
363 Searches for a value associated with the given byte array. @param bytes input byte array to search in the trie @return T value found or null if no matching path exists
364 Processes a PDF operator with given operands. @param operator the PDF operator to process @param operands list of operands for the operator @throws IOException if an I/O error occurs during processing
365 Initializes LegacyPDFStreamEngine with various PDF operators.
366 Retrieves or creates a COSName object for the given PDF name. @param aName the PDF name string @return COSName instance from cache or newly created if not present
367 Constructs a COSString from byte array with default hex representation. @param bytes input byte array
368 Constructs an empty COSArray with direct flag set to true.
369 Constructs a COSArray from a list of COSObjectable. @param cosObjectables list of COSObjectable elements to include in the array
370 Constructs a COSStream with a given cache. @param streamCache cache for storing stream data
371 Wraps a COSDictionary to make it unmodifiable. @param dict the original COSDictionary to wrap
372 Creates a default decode result. @return DecodeResult object initialized with an empty dictionary
373 Constructs a PDDocumentInformation and initializes its metadata dictionary.
374 Constructs a PDResources object. Initializes resources dictionary and caches.
375 Converts a Map to a COSDictionary. @param someMap input map with String keys and COSObjectable values @return COSDictionary containing converted items from the map
376 Initializes a new PDDictionaryWrapper with an empty dictionary.
377 Initializes a new PDNameTreeNode with an empty dictionary.
378 Constructs a PDNumberTreeNode with a specified value class. @param valueClass the type of values stored in this tree node
379 Creates a new PDPageLabelRange with default COS dictionary.
380 Initializes a new PDMarkInfo with an empty COSDictionary.
381 Initializes a PDPropertyList with an empty COSDictionary.
382 Initializes a new PDBoxStyle with an empty COSDictionary.
383 Constructs a PDCryptFilterDictionary and initializes its internal dictionary.
384 Initializes a PDF encryption object. Constructs and sets up an internal dictionary.
385 Constructs an FDFCatalog and initializes its internal dictionary.
386 Constructs an FDFDictionary by initializing its underlying COSDictionary.
387 Constructs a new FDFField with an initialized COSDictionary.
388 Constructs an FDFIconFit object and initializes its fit dictionary.
389 Constructs an FDFJavaScript object and initializes its dictionary.
390 Constructs an FDFNamedPageReference with a new COSDictionary.
391 Constructs an FDFPage and initializes its internal dictionary.
392 Constructs an FDFPageInfo object. Initializes page info with a COSDictionary.
393 Initializes a FDFTemplate with an empty COSDictionary.
394 Constructs a PDDeviceNAttributes object with an initialized COSDictionary.
395 Constructs a PDDeviceNProcess with an initialized COSDictionary.
396 Constructs a PDShading object and initializes its internal dictionary.
397 Initializes a new instance of PDAdditionalActions. Constructs a COSDictionary to store action entries.
398 Constructs a PDAnnotationAdditionalActions object. Initializes the actions dictionary.
399 Initializes a new instance of PDDocumentCatalogAdditionalActions. Constructs and assigns a COSDictionary to manage additional document actions.
400 Constructs a PDFormFieldAdditionalActions instance. Initializes the actions dictionary.
401 Constructs a PDPageAdditionalActions object. Initializes an internal COSDictionary to store actions.
402 Constructs a PDTargetDirectory and initializes its dictionary.
403 Constructs a PDURIDictionary and initializes its URI dictionary.
404 Constructs a PDWindowsLaunchParams object and initializes its parameters dictionary.
405 Constructs a PDBorderEffectDictionary with an initialized COSDictionary.
406 Constructs a PDBorderStyleDictionary and initializes its internal dictionary.
407 Initializes a PDF property builder with a direct object dictionary.
408 Initializes a PDF property build data dictionary. Sets the dictionary to use direct objects as specified.
409 Initializes a PDF seed value MDP with a direct COSDictionary.
410 Constructs a PDSeedValueTimeStamp with an initialized dictionary. Sets the dictionary to direct update mode.
411 Creates a PDField instance with an empty dictionary. @param acroForm the form containing the field
412 Constructs a PDViewportDictionary and initializes its viewport dictionary.
413 Initializes a PDF viewer preferences object. Constructs a COSDictionary to store preference settings.
414 Constructs a COSObject with a given base object and key. @param object the base object to encapsulate @param objectKey unique identifier for the COSObject
415 Calculates the width of a rectangle. @return float value representing the width
416 Checks if a point (x, y) is within the rectangle bounds. @param x X coordinate of the point @param y Y coordinate of the point @return true if the point is inside the rectangle, false otherwise
417 Calculates the height of a rectangle. @return float value representing the height
418 Transforms a rectangle using an affine transformation matrix. @param matrix the transformation matrix to apply @return GeneralPath representing the transformed rectangle
419 Converts rectangle bounds to a GeneralPath. @return GeneralPath representing the rectangle's outline
420 Returns a string representation of the rectangle. @return String in format "[lowerLeftX, lowerLeftY, upperRightX, upperRightY]"
421 Retrieves an integer value at a specified index with a default of -1. @param index the position in the collection @return the integer value at the given index, or -1 if not found
422 Fetches name at specified index. @param index position of the element in the collection @return name of the entity at the given index or null if out of bounds
423 Checks if the map is empty. @return true if no key-value pairs are present, false otherwise
424 Initializes a COSDocument with default memory-only stream cache. @param parser ICOSParser instance for parsing operations
425 Constructs a COSDocument with a specified stream cache create function. @param streamCacheCreateFunction function to create the stream cache
426 Writes a COSFloat to the PDF output stream followed by a space. @param output OutputStream to write to @param cosFloat COSFloat object to be written @throws IOException if an I/O error occurs
427 Converts update state to a COSIncrement object. @return COSIncrement instance initialized with update info from state
428 Checks if the given COSBase object needs to be updated. @param base the COSBase object to check @return true if the object is an instance of COSUpdateInfo and needs update, false otherwise
429 Parses and returns a COSNumber from a string. Handles integers, floats, and special cases like single characters. @param number input string to parse @return COSNumber object representing the parsed value @throws IOException if parsing fails
430 Appends a kid with the specified MCID. @param mcid Media Content Identifier, must be non-negative
431 Retrieves a COSInteger instance representing degrees. @return COSInteger object with specified degree value
432 Constructs a COSObjectKey with given number and generation. @param num object number @param gen generation identifier
433 Determines file suffix based on stream filters. @return File suffix as String or null if filters are unrecognized
434 Creates an OutputStream for writing to a COSStream. @param filters filter specification for data processing @return FilterOutputStream for writing data with applied filters @throws IOException if I/O error occurs or stream is already open
435 Constructs a COSString from input text without forcing hex form. @param text input string to convert
436 Retrieves a string at the specified index or returns a default value. @param index position in the collection @param defaultValue fallback string if index is out of bounds or object is not COSString @return string from the collection or default value
437 Retrieves the content of the file as a string. @return string representation of the file content
438 Retrieves the name of a destination from a PDF document. @return String representation of the named destination or null if not applicable
439 Extracts pairable items from a COSBase object. @param items COSBase object containing strings or arrays of strings @param pairIdx index specifying the position in nested arrays (0 or 1) @return list of strings extracted based on pairIdx, empty if not applicable
440 Retrieves export values from a PDF attribute. @return List of string values extracted from the OPT attribute
441 Retrieves the default appearance string for a PDF object. @return default appearance as string or null if not found
442 Updates the document's status. @param updated new status indicating if the document is updated
443 Closes the stream, flushing any remaining data. Ensures resources are released and clears internal buffers.
444 Closes all overlays and documents, ensuring resources are released. @throws IOException if an error occurs during closing
445 Creates a PDFormXObject from a given stream. @param stream PDStream containing form data
446 Constructs a PDImageXObject from a given stream and resources. @param stream PDStream containing image data @param resources PDResources for the image
447 Parses PDF header to extract version. @return true if successful, false otherwise @throws IOException if an I/O error occurs
448 Parses FDF header to extract version. @return true if successful, false otherwise @throws IOException if an I/O error occurs
449 Skips leading white spaces and a line break in the input. @throws IOException if an I/O error occurs
450 Attempts to skip a line break in the input source. @return true if a valid line break is skipped, false otherwise
451 Reads a line from the input source. @return the read line as a String, or throws IOException if end-of-file is reached
452 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs
453 Searches for the nearest XRef offset to a given xrefOffset. @param xrefOffset target XRef offset to find nearest match for @return nearest XRef offset or -1 if not found @throws IOException if an I/O error occurs during reading
454 Initializes a COSWriter with given output stream and default compression parameters. @param outputStream the OutputStream to write PDF data to
455 Initializes a new COSWriter with specific objects to write. @param outputStream stream to write the updated PDF @param inputData input data of the existing PDF @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
456 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
457 Writes an operator followed by a newline. @param text operator string to write @throws IOException if I/O error occurs
458 Encodes text for GSUB rules. @param gsubWorker worker to apply GSUB transformations @param glyphIds set to collect transformed glyph IDs @param font the font containing glyph mappings @param text input text to encode @return byte array of encoded glyphs
459 Creates and returns a new PDDocument instance. @return PDDocument object initialized with document, source, and access permission
460 Constructs a new PDDocument instance. @param doc the COSDocument associated with this PDF @param source the RandomAccessRead source of the document
461 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is found
462 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata exists
463 Retrieves the extends object stream. @return PDObjectStream or null if not present
464 Constructs a PDFunctionType0 instance. @param function COSBase object representing the PDF function
465 Constructs a PDFunctionType3 object. @param functionStream the COSBase object representing the function stream
466 Initializes a PDPostScriptXObject with given stream. @param stream underlying COSStream to be wrapped
467 Constructs a PDFormXObject from a PDF stream. @param stream PDF stream containing form object data
468 Initializes a PDFormXObject with given stream and resource cache. @param stream underlying COSStream to be wrapped @param cache resource cache for managing form resources
469 Constructs a PDDefaultAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
470 Constructs a PDUserAttributeObject using a COSDictionary. @param dictionary the COSDictionary to initialize with
471 Constructs a PDStandardAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
472 Constructs a PDOutlineItem from a COSDictionary. @param dic the dictionary to initialize with
473 Processes a CharSequence as a token. Converts input to String and delegates processing. @param text the CharSequence to be processed
474 Generates a string representation of the object list with revision numbers. @return String formatted as "{object=value; revisionNumber=number}"
475 Checks if user has all document owner permissions. @return true if all permissions are granted, false otherwise
476 Checks if any revision 3 permission is set. @return true if any of the permissions are granted, false otherwise
477 Initializes a new instance of PublicKeySecurityHandler.
478 Constructs a new instance of StandardSecurityHandler.
479 Writes an array of bytes to the output stream with XOR encryption. @param data the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
480 Writes a byte array to the output stream with XOR encryption. @param data the byte array to write @param offset starting index in the data array @param len number of bytes to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
481 Initializes a PublicKeySecurityHandler with a given public key protection policy. @param publicKeyProtectionPolicy the security policy for public keys to apply
482 Constructs a StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy the security policy to apply
483 Encrypts or decrypts data using AES. @param finalKey secret key for encryption/decryption @param data input stream of data to process @param output output stream for processed data @param decrypt true for decryption, false for encryption @throws IOException on I/O errors or security exceptions
484 Encrypts or decrypts data using AES-256. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
485 Computes user password encryption based on revision. @param password user's password bytes @param owner document owner bytes @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return encrypted password bytes @throws IOException if an I/O error occurs
486 Computes the owner password for PDF encryption. @param ownerPassword the owner's password byte array @param userPassword the user's password byte array @param encRevision the encryption revision level @param length the desired key length @return encrypted owner password as a byte array
487 Constructs an FDF annotation highlight from a COS dictionary. @param a the COS dictionary representing the annotation
488 Constructs an FDF annotation squiggly from a COS dictionary. @param a the COS dictionary representing the annotation
489 Constructs an FDF annotation strike-out from a COS dictionary. @param a the COS dictionary representing the annotation
490 Constructs an FDF annotation underline from a COS dictionary. @param a the COS dictionary representing the annotation
491 Retrieves or loads a FontBoxFont based on format and file. @return loaded FontBoxFont or null if not found or fails to load
492 Loads font information from disk cache. @param files list of font files to check against the cache @return List of FSFontInfo objects or null if any file is missing or outdated
493 Saves font information to disk cache. Handles file writing and exception logging.
494 Retrieves AFM font metrics by name. @param fontName the name of the font @return FontMetrics object or null if not found
495 Sets the font provider and updates font info mapping. @param fontProvider new FontProvider instance
496 Builds a map of glyph ID to character code. @return Map from glyph ID to character code @throws IOException if an I/O error occurs during cmap extraction
497 Loads a GlyphList from a specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries in the list @return initialized GlyphList object @throws RuntimeException if loading fails
498 Validates a chunk's integrity. @param chunk the Chunk object to validate @return true if valid, false otherwise
499 Constructs a new tiling pattern from a COS dictionary. @param dictionary the COS dictionary representing the pattern
500 Initializes a shaded triangle with vertices and colors. @param p array of 3 Point2D vertices @param c 2D array of color values for each vertex
501 Constructs a new PDShadingType3 instance. @param shadingDictionary COSDictionary containing shading data
502 Constructs a new instance of PDShadingType4. @param shadingDictionary COSDictionary containing the shading data
503 Constructs a new instance of PDShadingType5. @param shadingDictionary COSDictionary containing the shading data
504 Ends text clipping by applying buffered clips and resetting state. @param none @return void
505 Updates the graphics clip based on current state. Transfers new clipping paths to Graphics2D object if changed.
506 Creates a PDSoftMask from a given COSBase. @param dictionary the COSBase containing mask properties @return PDSoftMask object or null if invalid
507 Initializes a new PDVisibleSignDesigner with an image from the given input stream. @param imageStream InputStream containing the signature image data @throws IOException if there is an I/O error reading the stream
508 Sets the signature image from a file. @param path file path to the image @return PDVisibleSignDesigner instance @throws IOException if an I/O error occurs
509 Generates a unique partial name for a signature field. @return Unique string representing the new field name
510 Constructs a PDButton instance. @param acroForm the form containing the button @param field the underlying COS dictionary of the button @param parent the parent non-terminal field, if any
511 Constructs a PDSignatureField instance. @param acroForm the form containing the signature field @param field the underlying COS dictionary of the signature field @param parent the parent non-terminal field, if any
512 Constructs a PDVariableText instance. @param acroForm the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any
513 Adjusts X direction based on current orientation. @return Adjusted X direction in degrees
514 Initializes a TextPosition object. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode string of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font @param fontSizeInPt font size in points
515 Adjusts Y coordinate direction based on page orientation. @return Adjusted Y coordinate as a float
516 Returns the width considering rotation. @return absolute width adjusted for rotation
517 Adjusts width based on direction. @return adjusted width considering text direction
518 Starts an article with default left-to-right text direction. @throws IOException if writing to output fails
519 Writes a line of text with word separators. @param line list of words with text positions to be written @throws IOException if an I/O error occurs
520 Writes the end of a paragraph, ensuring proper closure. If not already in a paragraph, starts one before ending it. @throws IOException if an I/O error occurs
521 Creates a WordWithTextPositions object with normalized word. @param word the original word as a string @param wordPositions list of TextPosition objects @return WordWithTextPositions instance with normalized word
522 Converts Calendar to formatted date-time string with timezone. @param cal Calendar object representing the date and time @return Formatted date-time string or null if input is null
523 Converts Calendar to ISO 8601 format. @param cal input calendar object @return ISO 8601 formatted date-time string
524 Converts byte array to hexadecimal string. @return Hexadecimal representation of the internal bytes
525 Writes an external signature to a PDF. @param cmsSignature CMS signature bytes to be written @throws IOException if I/O error occurs or insufficient space for the signature
526 Writes a PDF name to the given OutputStream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
527 Writes a byte array as hex characters to an output stream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
528 Sorts a list using iterative merge sort. @param list the list to be sorted @param cmp comparator defining the order of elements
529 Rotates the matrix by a specified angle. @param theta angle of rotation in radians
530 Adjusts text position by translating the current text matrix. @param tx translation along the X-axis @param ty translation along the Y-axis
531 Translates an object using a vector. @param vector translation vector specifying X and Y offsets
532 Concatenates two matrices by multiplying them in reverse order. @param a first matrix @param b second matrix @return resulting Matrix object after concatenation
533 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
534 Detects the file type by reading its header bytes. @param inputStream input stream of the file to detect @return FileType object representing the detected file type or null if undetectable @throws IOException if input stream does not support mark/reset or ends prematurely
535 Processes a PDF operation with given arguments. @param operation the operation string to be processed @param arguments list of COSBase arguments for the operation @throws IOException if an I/O error occurs during processing
536 Initializes a PDFMarkedContentExtractor with specified encoding. @param encoding character encoding for processing PDF content
537 Initializes PDFTextStripper with operators for handling marked content.
538 Creates a PDMarkedContent instance based on the tag. @param tag COSName representing the content tag @param properties COSDictionary containing content properties @return PDArtifactMarkedContent if tag is ARTIFACT, otherwise PDMarkedContent
539 Retrieves item by PDF name. @param key unique identifier of the item @return COSBase object or null if not found
540 Checks if map contains key for given PDF name. @param name PDF name string to check @return true if the map contains the key, false otherwise
541 Retrieves or creates a PDF filter by name. @param filterName the name of the filter to retrieve or create @return Filter object associated with the filter name @throws IOException if an error occurs during retrieval or creation
542 Parses a PDF name from the input source. @return COSName instance representing the parsed PDF name @throws IOException if an I/O error occurs during parsing
543 Initializes a PDColor object from a COSArray and color space. @param array COSArray containing color components and optional pattern name @param colorSpace the color space for the color
544 Parses a hexadecimal string into a COSString. @param hex the input hexadecimal string @return COSString representation of the hex data @throws IOException if the hex string is invalid and FORCE_PARSING is false
545 Converts a list of integers to a COSArray. @param integer list of integers to convert @return COSArray containing COSIntegers
546 Converts a list of strings to a COSArray of PDF names. @param strings list of string names @return COSArray containing COSName objects
547 Converts a list of strings to a COSArray of COSStrings. @param strings list of string values @return COSArray containing COSString objects
548 Initializes an empty COSArrayList with underlying COSArray and ArrayList.
549 Initializes a COSArrayList with a given dictionary and key. @param dictionary the parent dictionary containing the list @param dictionaryKey the key in the dictionary for this list
550 Constructs an empty PDPageDestination with a direct flag set to true.
551 Constructs a PDRectangle with specified dimensions. @param x left edge coordinate @param y bottom edge coordinate @param width rectangle width @param height rectangle height
552 Constructs a PDRectangle from a BoundingBox. @param box the bounding box defining rectangle corners
553 Sets the list of filters for the stream. @param filters list of COSName representing filter types
554 Sets alternate color spaces for a PDF document. @param list of PDColorSpace objects to set as alternates
555 Creates and manages a new COSStream. @return Newly created COSStream instance
556 Constructs a COSStream with no stream cache.
557 Constructs a COSStream with a given cache and read view. @param streamCache cache for storing stream data @param randomAccessReadView read view for accessing stream content @throws IOException if an I/O error occurs
558 Converts current dictionary to an unmodifiable version. @return UnmodifiableCOSDictionary instance wrapping this dictionary
559 Retrieves the latest decode result, or creates a default one if none exist. @return Latest DecodeResult object or a new default instance
560 Retrieves resources dictionary from COSObject. @return PDResources object or null if not found
561 Default constructor for PDAttributeObject.
562 Constructs a new PDUserProperty. @param userAttributeObject attribute object associated with the user property
563 Default constructor for PDOutlineNode.
564 Initializes a new PDestinationNameTreeNode with an empty dictionary.
565 Initializes a new PDEmbeddedFilesNameTreeNode with default settings.
566 Initializes a new PDJavascriptNameTreeNode with an empty dictionary.
567 Initializes a new PDStructureElementNameTreeNode. Calls superclass constructor with an empty dictionary.
568 Creates a PDNonTerminalField instance. @param acroForm the form containing the field
569 Constructs a PDTerminalField instance. @param acroForm the form containing the field
570 Clips the current graphics state to a transformed rectangle. @param rectangle PDRectangle to be clipped
571 Transforms the bounding box of an appearance stream. @param appearanceStream the PDF appearance stream to process @return transformed bounding box as Rectangle2D
572 Initializes graphics state with page bounds. @param page rectangle representing the page dimensions
573 Retrieves the left value from an internal array. @return integer value at index 2 of the array, or -1 if not found
574 Retrieves the third element from an array. @return integer value at index 2 or -1 if not found
575 Retrieves the fourth element from an array. @return the integer value at index 3, or -1 if not found
576 Retrieves the fifth element from an internal array. @return integer value at index 4 of the array, or -1 if not found
577 Retrieves the top element from an array. @return integer value at index 5 or -1 if not found
578 Retrieves the third element from an array. @return integer value at index 2 or -1 if not found
579 Retrieves the third element from an internal array. @return the integer value at index 2 of the array, or -1 if not found
580 Retrieves the fourth element from the array. @return integer value at index 3 of the array, or -1 if not found
581 Checks if bounding box type matches. @return true if bounding box type is 'TYPE_BOUNDED', false otherwise
582 Checks if bounding box is fitted. @return true if bounding box type matches, false otherwise
583 Checks if the bounding box fits. @return true if bounding box type matches, false otherwise
584 Constructs a COSDocument with an in-memory stream cache.
585 Initializes a COSParser for parsing PDF files. @param source RandomAccessRead object representing the PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param keyAlias alias of the key in the keystore (null if not needed) @param streamCacheCreateFunction function to create the stream cache @throws IOException if an error occurs during initialization
586 Retrieves or creates a COSObjectKey using object number and generation. Uses caching to improve performance for large PDFs. @param num object number @param gen generation identifier @return COSObjectKey instance
587 Searches for PDF objects by scanning the file. @throws IOException if an I/O error occurs during reading
588 Searches for object stream offsets using backward search. @return Map of offsets to COSObjectKey objects or empty if none found
589 Parses XRef entries and sets them in the resolver. @param resolver object to store parsed XRef data @throws IOException if an I/O error occurs during parsing
590 Finds COSObjectKey by searching for an object at a specific offset. @param objectKey initial key to find @param offset starting position in the stream @param xrefOffset map of existing object keys and their offsets @return found COSObjectKey or null if not found @throws IOException if reading fails
591 Parses an XRef table from the PDF source. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
592 Creates an OutputStream for writing to a COSStream without filters. @return FilterOutputStream for writing data @throws IOException if I/O error occurs or stream is already open
593 Creates an OutputStream for writing to a COSStream. @param filter specifies the data processing filter @return FilterOutputStream for writing filtered data @throws IOException if I/O error occurs or stream is already open
594 Initializes a PDSimpleFileSpecification with an empty file name.
595 Sets the file name. @param fileName name of the file to be set
596 Constructs a PDF named destination from a string. @param dest destination name as a string
597 Sets the named destination. @param dest destination string to set or null to unset @throws IOException if an I/O error occurs during setting
598 Retrieves a string at the specified index. @param index position in the collection @return string from the collection or null if not found
599 Retrieves and processes a value from an attribute. @return Processed string value or "Off" if not applicable
600 Sets the document's update status. @param flag indicates if the document needs to be updated
601 Updates the document's status to true.
602 Creates a PDTransparencyGroup from a given stream. @param stream PDStream containing transparency group data
603 Creates a thumbnail from a COSStream. @param cosStream stream containing image data @return PDImageXObject representing the thumbnail
604 Retrieves the mask image for this XObject. @return PDImageXObject representing the mask or null if none exists
605 Retrieves the soft mask image from the PDF object. @return PDImageXObject representing the soft mask or null if not present
606 Reads a string from the input source. Skips leading spaces and reads characters until end of name is reached. @return the read string @throws IOException if an I/O error occurs
607 Reads and verifies an expected string from the input source. @param expectedString the string to expect in the input @param skipSpaces true if leading/trailing spaces should be skipped @throws IOException if the expected string is not found or an I/O error occurs
608 Reads a string of specified length from the input source. @param length maximum number of characters to read @return read string or empty if no valid characters found @throws IOException if an I/O error occurs
609 Reads and parses an integer from the input source. @return parsed integer value @throws IOException if parsing fails or I/O error occurs
610 Reads a long value from the input source. Skips leading spaces and reads numeric string. @return parsed long value @throws IOException if read fails or format is incorrect
611 Calculates the fixed XRef offset for a given object offset. @param objectOffset target object offset @return fixed XRef offset or 0 if not found @throws IOException if an I/O error occurs during processing
612 Saves this document to an OutputStream. @param output the OutputStream to write PDF data to @throws IOException if an I/O error occurs during writing
613 Begins text mode for document processing. @throws IOException if I/O error occurs during operator writing
614 Ends text mode and writes the END_TEXT operator. @throws IOException if I/O error occurs during writing
615 Writes a newline character in text mode. @throws IOException if I/O error occurs
616 Saves the current graphics state. Throws IllegalStateException if in text mode. Pushes current font and color space states onto respective stacks. Writes 'save' operator to output stream.
617 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing
618 Strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
619 Closes and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing
620 Fills non-zero values in the current block. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
621 Fills the even-odd rule for path operations. @throws IOException if I/O error occurs
622 Fills and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing operator
623 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
624 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
625 Closes, fills, and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
626 Closes the current path in graphics operations. Throws an exception if called during text mode. @throws IOException if I/O error occurs while writing operator
627 Clips the current path using non-zero winding rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
628 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
629 Sets the line join style. @param lineJoinStyle integer value representing the line join style (0-2) @throws IOException if I/O error occurs
630 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid line cap style is provided
631 Ends marked content section. @throws IOException if I/O error occurs while writing
632 Sets rendering mode by writing its integer value and operator. @param rm RenderingMode to set @throws IOException if I/O error occurs
633 Constructs a new PDDocument instance from a COSDocument. @param doc the COSDocument associated with this PDF
634 Constructs a PDAppearanceStream from a PDF stream. @param stream PDF stream containing appearance data
635 Initializes a PDTransparencyGroup with given stream and resource cache. @param stream underlying COSStream to be wrapped @param cache resource cache for managing form resources
636 Constructs a PDLayoutAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
637 Constructs a PDListAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
638 Constructs a PDPrintFieldAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
639 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
640 Returns the current access permission, initializing with full access if null. @return AccessPermission object representing current permissions
641 Computes the appropriate revision number based on version and permissions. @param version current version of the document @return computed revision number
642 Encrypts data using RC4 algorithm. @param finalKey encryption key for RC4 @param input data to encrypt @param output stream to write encrypted data to @throws IOException if an I/O error occurs
643 Reads from InputStream and writes to OutputStream with XOR encryption. @param data the InputStream to read from @param output the OutputStream to write to @throws IOException if an I/O error occurs
644 Prepares a string for SASL with unassigned code points allowed. @param str input string to be processed @return normalized and validated string
645 Prepares a stored string for SASL by normalizing and validating it. @param str input string to be processed @return normalized and validated string
646 Computes the user password based on encryption revision. @param ownerPassword the owner's password as a byte array @param owner the owner data as a byte array @param encRevision the encryption revision level @param length the desired key length @return the computed user password as a byte array or empty if unsupported revision
647 Processes a TrueType collection file. @param ttcFile TrueType collection file to process
648 Adds TrueType font information to the list. @param fontHeaders parsed font headers @param file font file reference @param hash unique font hash
649 Adds a Type 1 font to the font info list. @param pfbFile PFB file of the font
650 Returns the current FontProvider, initializing with a default if none set. @return the FontProvider instance
651 Writes CID-to-Unicode mappings to an OutputStream in CMap format. @param out the destination OutputStream @throws IOException if writing fails
652 Validates PNG conversion state. @param state the PNGConverterState object to validate @return true if valid, false otherwise
653 Initializes a CoonsPatch with given control points and colors. @param points array of input control points @param color 2D array of corner colors
654 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the grid's shaded triangles
655 Initializes a TensorPatch with given control points and colors. @param tcp array of 16 control points @param color 2D array of corner colors
656 Returns input stream for signing PDF. @throws IOException if I/O error occurs
657 Constructs a PDCheckBox instance. @param acroForm the form containing the checkbox @param field the underlying COS dictionary of the checkbox @param parent the parent non-terminal field, if any
658 Constructs a PDPushButton instance. @param acroForm the form containing the button @param field the underlying COS dictionary of the button @param parent the parent non-terminal field, if any
659 Constructs a PDRadioButton instance. @param acroForm the form containing the radio button @param field the underlying COS dictionary of the radio button @param parent the parent non-terminal field, if any
660 Constructs a PDChoice instance. @param acroForm the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any
661 Constructs a PDTextField instance. @param acroForm the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any
662 Merges a diacritic into the text position. @param diacritic TextPosition object representing the diacritic to merge
663 Determines paragraph separation based on vertical and horizontal gaps. @param position current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line
664 Checks if the current TextPosition contains another. @param tp2 TextPosition to compare against @return true if this TextPosition contains tp2 with sufficient overlap, false otherwise
665 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully contains tp2, false otherwise
666 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs
667 Normalizes and appends words to a line. @param normalized list to store processed words @param lineBuilder accumulates characters of the current line @param wordPositions tracks TextPosition objects for the current word @param item represents a text item to process @return updated StringBuilder instance
668 Converts a date string to a Calendar object. @param text input date string @return Calendar object or null if parsing fails
669 Writes a COSName to the OutputStream followed by a space. @param output the OutputStream to write to @throws IOException if an I/O error occurs
670 Writes an operand to the PDF stream. @param name COSName to be written @throws IOException if I/O error occurs during writing
671 Writes a byte array as a string to an output stream. @param bytes the byte array to write @param forceHex flag to force hexadecimal representation @param output the OutputStream to write to @throws IOException if an I/O error occurs
672 Saves current graphics state by cloning and pushing onto stack.
673 Saves the current graphics stack by cloning its top state. @return the original graphics stack before saving
674 Sets text leading by writing operand and operator. @param leading the float value for leading @throws IOException if I/O error occurs
675 Moves text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs
676 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
677 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IOException if an I/O error occurs
678 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
679 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs
680 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
681 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs
682 Adds a rectangle to the output stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
683 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if an I/O error occurs
684 Draws a cubic Bezier curve with two control points. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs
685 Draws a curve with specified control and end points. @param x1,y1 first control point coordinates @param x3,y3 second control and end point coordinates @throws IOException if an I/O error occurs
686 Moves to a specified position. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs
687 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs
688 Sets line width in graphics context. @param lineWidth new line width value @throws IOException if I/O error occurs
689 Sets line dash pattern. @param pattern array of float values for dash lengths @param phase offset at which the pattern starts @throws IOException if I/O error occurs
690 Sets the miter limit for line joins. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if I/O error occurs during writing
691 Writes an affine transformation matrix to the output stream. @param transform AffineTransform object to be written @throws IOException if an I/O error occurs
692 Sets character spacing in the document. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
693 Sets word spacing in PDF. @param spacing the desired word spacing value @throws IOException if I/O error occurs
694 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
695 Sets text rise in document. @param rise amount of text rise @throws IOException if writing fails
696 Initializes a PDF graphics stream engine for rendering on a page. @param page PDPage object representing the page to render on
697 Constructs a PDFMarkedContentExtractor with default encoding.
698 Initializes PDFTextStripperByArea with bead separation disabled.
699 Parses a COSHexString from input source. @return COSString representation of the parsed hex data @throws IOException if parsing fails due to invalid characters or missing closing bracket
700 Sets file filters in PDF stream. @param filters list of filter names to apply
701 Constructs a PDRectangle with default dimensions.
702 Constructs a PDRectangle with specified width and height. @param width rectangle width @param height rectangle height
703 Creates a PDRectangle based on bounding box coordinates. @return PDRectangle object representing the bounding box
704 Calculates the difference rectangle between annotation and bounding box. @return PDRectangle representing the difference or null if annotRect is null
705 Returns a new PDRectangle with added padding. @param rectangle original rectangle to pad @param padding amount of padding to add on each side @return padded PDRectangle object
706 Adjusts a rectangle by adding differences to its dimensions. @param rectangle original PDRectangle object @param differences array of four float values representing adjustments @return new PDRectangle with adjusted dimensions or original if input is invalid
707 Adjusts a rectangle's position and size based on given differences. @param rectangle original PDRectangle to adjust @param differences array of 4 floats: [xOffset, yOffset, widthAdjust, heightAdjust] @return new PDRectangle with applied adjustments or original if input is invalid
708 Applies padding to a rectangle. @param box original PDRectangle object @param padding amount of padding to add @return new PDRectangle with applied padding
709 Initializes a new PDFXRefStream. @param cosDocument document to create stream in
710 Creates a PDObjectStream for the given document. @param document the PDDocument to create the stream in @return newly created PDObjectStream
711 Initializes PDStream with a new COSStream from the given PDDocument. @param document PDDocument instance to create COSStream from
712 Initializes a new PDStream with a COSDocument. @param document PDF document to contain the stream
713 Initializes a PDStream with document and InputStream. @param doc PDDocument instance to associate the stream with @param input InputStream for data to be written into the stream @param filters filter specification for data processing @throws IOException if I/O error occurs during stream creation or data transfer
714 Creates a raw COSStream from the given PDDocument and InputStream. @param document PDDocument instance to create the stream in @param rawInput InputStream containing data to write into the stream @return COSStream with transferred data @throws IOException if an I/O error occurs
715 Encodes input stream to output stream using given parameters. @param input source data stream @param encoded destination for encoded data @param parameters configuration settings for encoding @param index current processing index (unused in this method)
716 Default constructor for PDDefaultAttributeObject.
717 Initializes a new user attribute object. Sets the owner to OWNER_USER_PROPERTIES by default.
718 Default constructor for PDStandardAttributeObject.
719 Default constructor for PDOutlineItem.
720 Constructs a PDVariableText instance. @param acroForm the form containing the field
721 Initializes a COSParser for parsing PDF files. @param source RandomAccessRead object representing the PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param keyAlias alias of the key in the keystore (null if not needed) @throws IOException if an error occurs during initialization
722 Initializes a PDFParser for parsing PDF files. @param source RandomAccessRead object representing the PDF file @param decryptionPassword decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @param streamCacheCreateFunction function to create the stream cache @throws IOException if an error occurs during initialization
723 Parses and retrieves a COSBase object from the PDF document. @return COSBase object or null if parsing fails @throws IOException if an I/O error occurs during parsing
724 Retrieves PDF object offsets using binary search. Triggers a search if not already performed. @return Map of COSObjectKey to their byte offsets @throws IOException if an I/O error occurs during search
725 Creates an OutputStream for writing to a COSStream. @return FilterOutputStream for writing data @throws IOException if I/O error occurs or stream is already open
726 Writes byte array to PDF appearance stream. @param data bytes to write @param appearanceStream target PDF stream @throws IOException if I/O error occurs
727 Initializes content stream for PDF annotation appearance. @param appearance PDAppearanceStream to write to @param compress true to enable compression @throws IOException if I/O error occurs
728 Clears all objects and updates the document's status.
729 Removes all specified objects from the collection and updates the state. @param objectsList collection of COSBase objects to remove
730 Retains only the elements in this collection that are contained in the specified list. Updates the document's status if changes are made. @param objectsList the collection of COSBase objects to retain
731 Sets an integer value at a specified index. @param index position in the list to update @param intVal integer value to set
732 Removes an entry at a specified index. @param i index of the entry to remove @return removed COSBase object or null if index is out of bounds
733 Removes an object from the collection. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
734 Clears all items and updates the document's status.
735 Removes an item by key and updates document status. @param key unique identifier of the item to remove
736 Updates document state if different from origin. @param updateState object holding the current document state
737 Sets the base object to null and updates document status. Updates document status only if baseObject is not null.
738 Sets the origin document state for this and nested COSUpdateInfo objects. @param originDocumentState the new document state to set @param dereferencing flag indicating if dereferencing is in progress
739 Reads and validates a generation number. @return parsed generation number if valid @throws IOException if invalid or I/O error occurs
740 Reads and validates an object number. @return parsed long value if valid @throws IOException if read fails, number is negative, or exceeds threshold
741 Saves this document to a specified file. @param fileName the File object representing the destination @throws IOException if an I/O error occurs during writing
742 Begins text mode for document processing. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs during operator writing
743 Initiates text mode for document processing. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs during operator writing
744 Begins text mode for document processing. @throws IOException if I/O error occurs during operator writing
745 Begins text mode for document processing. Throws IllegalStateException if already in text mode. @throws IOException if I/O error occurs during operator writing
746 Ends text mode and writes the END_TEXT operator. Throws IllegalStateException if not in text mode. @throws IOException if I/O error occurs during writing
747 Ends text mode and writes the END_TEXT operator. @throws IOException if I/O error occurs during writing @throws IllegalStateException if endText is called without a matching beginText call
748 Ends text mode and writes the END_TEXT operator. @throws IOException if I/O error occurs during writing
749 Ends text mode and writes the END_TEXT operator. @throws IOException if I/O error occurs during writing
750 Writes a newline character in text mode. @throws IOException if I/O error occurs
751 Writes a newline character in text mode. @throws IOException if I/O error occurs or not in text mode
752 Writes a newline character in text mode. @throws IOException if I/O error occurs
753 Writes a newline character in text mode. @throws IOException if I/O error occurs or not in text mode
754 Saves the current graphics state. Throws IllegalStateException if in text mode. Pushes current font and color space states onto respective stacks. Writes 'save' operator to output stream.
755 Saves the current graphics state. Throws IllegalStateException if in text mode. Pushes current font and color space states onto respective stacks. Writes 'save' operator to output stream.
756 Saves the current graphics state. Throws IllegalStateException if in text mode. Pushes current font and color space states onto respective stacks. Writes 'save' operator to output stream.
757 Saves the current graphics state. Throws IllegalStateException if in text mode. Pushes current font and color space states onto respective stacks. Writes 'save' operator to output stream.
758 Restores graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing
759 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing
760 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing
761 Restores the graphics state by popping from stacks and writing a restore operator. Throws IllegalStateException if called within text mode. @throws IOException if I/O error occurs while writing
762 Strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
763 Strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
764 Strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
765 Strokes the current path. Throws exception if called in text mode. @throws IOException if I/O error occurs
766 Closes and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing
767 Closes and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing
768 Closes and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing
769 Closes and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing
770 Fills non-zero values in the current block. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
771 Fills non-zero values in the current block. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
772 Fills non-zero values in the current block. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
773 Fills non-zero values in the current block. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
774 Fills the even-odd rule for path operations. Throws an exception if called within a text block. @throws IOException if I/O error occurs
775 Applies the even-odd rule for path operations. Throws an exception if called in text mode.
776 Fills the even-odd rule for path operations. Throws an exception if called in text mode. @throws IOException if I/O error occurs
777 Fills the even-odd rule for path operations. Throws IllegalStateException if called within a text block.
778 Fills and strokes the current path. Throws an exception if called in text mode. @throws IllegalStateException if method is invoked within a text block @throws IOException if I/O error occurs while writing operator
779 Fills and strokes the current path, throws exception if in text mode. @throws IOException if I/O error occurs while writing operator
780 Fills and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing operator
781 Fills and strokes the current path. Throws an exception if called in text mode. @throws IOException if I/O error occurs while writing operator
782 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
783 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
784 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
785 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
786 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
787 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
788 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
789 Closes the current path, fills it using non-zero winding rule, and strokes it. Throws IllegalStateException if called within a text block. @throws IOException if I/O error occurs while writing operator
790 Closes, fills, and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
791 Closes, fills, and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
792 Closes, fills, and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
793 Closes, fills, and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs while writing operator
794 Closes the current path in graphics operations. Throws an exception if called during text mode. @throws IOException if I/O error occurs while writing operator
795 Closes the current path in graphics operations. Throws an exception if called during text mode. @throws IOException if I/O error occurs while writing operator
796 Closes the current path in graphics operations. Throws an exception if called during text mode. @throws IOException if I/O error occurs while writing operator
797 Closes the current path in graphics operations. Throws an exception if called during text mode. @throws IOException if I/O error occurs while writing operator
798 Clips the current path using non-zero winding rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
799 Clips the current path using non-zero winding rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
800 Clips the current path using non-zero winding rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
801 Clips the current path using non-zero winding rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
802 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
803 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
804 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
805 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode. @throws IOException if I/O error occurs during writing operators
806 Sets the line join style. @param lineJoinStyle integer value (0-2) representing the line join style @throws IOException if I/O error occurs during write operations
807 Sets the line join style. @param lineJoinStyle integer value representing the line join style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if lineJoinStyle is out of valid range
808 Sets the line join style. @param lineJoinStyle integer value representing the line join style (0-2) @throws IOException if I/O error occurs
809 Sets the line join style. @param lineJoinStyle integer value representing the line join style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if lineJoinStyle is out of valid range
810 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid line cap style is provided
811 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid line cap style is provided
812 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid line cap style is provided
813 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if I/O error occurs @throws IllegalArgumentException if invalid line cap style is provided
814 Ends marked content section. @throws IOException if I/O error occurs while writing
815 Ends marked content section. @throws IOException if I/O error occurs while writing
816 Ends marked content section by writing an operator. @throws IOException if I/O error occurs while writing
817 Ends marked content section. @throws IOException if I/O error occurs while writing
818 Sets text rendering mode and writes its value to output. @param rm RenderingMode to set @throws IOException if I/O error occurs while writing
819 Sets text rendering mode in PDF. @param rm RenderingMode to apply @throws IOException if I/O error occurs
820 Sets text rendering mode in PDF. @param rm RenderingMode to apply @throws IOException if I/O error occurs
821 Sets text rendering mode by writing its integer value and operator. @param rm RenderingMode to set @throws IOException if I/O error occurs
822 Retrieves the appearance stream for a PDF entry. Throws exception if the entry is not a stream. @return PDAppearanceStream object representing the appearance
823 Constructs a PDExportFormatAttributeObject with a given COSDictionary. @param dictionary the COSDictionary to initialize with
824 Parses input text using a syntax handler. Initializes and runs a tokenizer on the provided input. @param input the character sequence to parse @param handler the syntax handler for processing tokens
825 Encrypts data using RC4 algorithm. @param finalKey encryption key as a byte array @param input InputStream to read data from @param output OutputStream to write encrypted data to @throws IOException if an I/O error occurs during processing
826 Computes encrypted key based on encryption revision. @param password user's or owner's password bytes @param o additional data bytes @param u user entry bytes @param oe owner encryption entry bytes @param ue user encryption entry bytes @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision number @param keyLengthInBytes desired output length @param encryptMetadata flag to encrypt metadata @param isOwnerPassword flag indicating if it's the owner password @return encrypted key bytes of specified length @throws IOException on encryption issues or missing entries
827 Validates user password based on encryption revision. @param password user's password bytes @param user user identifier bytes @param owner document owner bytes @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs
828 Adds TrueType or OpenType font information to the list. @param ttfFile font file reference
829 Finds a FontBoxFont by format and PostScript name, handling various naming conventions. @param format the font format to match @param postScriptName the font's PostScript name @return FontBoxFont object if found, otherwise null
830 Constructs a new instance of PDShadingType6. @param shadingDictionary COSDictionary containing the shading data
831 Constructs a new instance of PDShadingType7. @param shadingDictionary COSDictionary containing the shading data
832 Constructs a PDComboBox instance. @param acroForm the form containing the combo box @param field the underlying COS dictionary of the combo box @param parent the parent non-terminal field, if any
833 Constructs a PDListBox instance. @param acroForm the form containing the list box @param field the underlying COS dictionary of the list box @param parent the parent non-terminal field, if any
834 Processes text position, handling duplicates and diacritics. @param text TextPosition object to process
835 Processes a TextPosition, handling Unicode setting and diacritic merging. @param text the TextPosition to process
836 Removes spaces from the list that are completely contained within another TextPosition. @param textList List of TextPositions to process
837 Handles line separation and paragraph formatting. @param current current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line @return updated last line start position @throws IOException if an I/O error occurs
838 Normalizes and processes a list of LineItem objects into words with text positions. @param line list of LineItem to process @return List of WordWithTextPositions containing normalized words and their TextPosition data
839 Converts COSString to Calendar object. @param text input COSString containing date information @return Calendar object or null if conversion fails
840 Begins marked content in PDF with a given tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
841 Begins a marked content sequence in PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IOException if I/O error occurs during writing
842 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if I/O error occurs during writing
843 Writes a COSString to an output stream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
844 Writes a byte array as a string to an output stream. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
845 Sets text leading by writing operand and operator. @param leading the float value for leading @throws IOException if I/O error occurs
846 Sets text leading by writing operand and operator. @param leading the float value for leading @throws IOException if I/O error occurs
847 Sets text leading by writing operand and operator. @param leading the float value for leading @throws IOException if I/O error occurs
848 Sets text leading by writing operand and operator. @param leading the float value for leading @throws IOException if I/O error occurs
849 Moves text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs or not in text mode
850 Moves text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IllegalStateException if not in text mode @throws IOException if I/O error occurs
851 Moves text cursor to a new position. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs
852 Moves text cursor to a new position within text mode. @param tx x-coordinate offset @param ty y-coordinate offset @throws IOException if I/O error occurs or not in text mode
853 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if an I/O error occurs
854 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the range [0, 1] @throws IOException if an I/O error occurs
855 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if parameters are outside 0..1 @throws IOException if an I/O error occurs
856 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs
857 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs
858 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs while writing to the output stream
859 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs
860 Sets the stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k key (black) component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs during writing
861 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range 0..1 @throws IOException if an I/O error occurs
862 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs while writing
863 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if an I/O error occurs
864 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs
865 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) Validates parameters and writes to output stream. @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs while writing
866 Sets non-stroking color using RGB values. Validates that each component is within 0..1 range. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any component is out of bounds @throws IOException if I/O error occurs during writing
867 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs
868 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs
869 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs
870 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 @throws IOException if I/O error occurs while writing to output stream
871 Sets non-stroking color using CMYK values. Validates input and writes to output stream. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
872 Sets non-stroking color using CMYK values. Validates that each component is within 0..1 range. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
873 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if I/O error occurs or parameter is out of bounds
874 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if parameter is outside the range [0, 1] @throws IOException if I/O error occurs while writing
875 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if I/O error occurs while writing
876 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IllegalArgumentException if g is outside the range [0, 1] @throws IOException if I/O error occurs
877 Adds a rectangle to the output stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
878 Adds a rectangle to the output stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
879 Adds a rectangle to the output stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
880 Adds a rectangle to the output stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs or if called within a text block
881 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
882 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IOException if an I/O error occurs
883 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
884 Draws a cubic Bézier curve. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 end point coordinates @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
885 Draws a cubic Bezier curve with two control points. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs @throws IllegalStateException if called within a text block
886 Draws a cubic Bezier curve with two control points. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs @throws IllegalStateException if called within a text block
887 Draws a cubic Bezier curve with two control points. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
888 Draws a cubic Bezier curve with two control points. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @param y3 third control point's Y coordinate @throws IOException if an I/O error occurs or called within a text block
889 Draws a curve with specified control and end points. @param x1,y1 first control point coordinates @param x3,y3 second control and end point coordinates @throws IOException if an I/O error occurs or if called within a text block
890 Draws a curve with specified control and end points. @param x1,y1 first control point coordinates @param x3,y3 second control and end point coordinates @throws IOException if an I/O error occurs or if called within a text block
891 Draws a curve with specified control and end points. @param x1,y1 first control point coordinates @param x3,y3 second control and end point coordinates @throws IOException if an I/O error occurs or called within a text block
892 Draws a curve with specified control and end points. @param x1,y1 first control point coordinates @param x3,y3 second control and end point coordinates @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs
893 Moves to a specified position in graphics mode. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
894 Moves the cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
895 Moves the cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or called within a text block
896 Moves the drawing cursor to specified coordinates. @param x the X coordinate @param y the Y coordinate @throws IOException if an I/O error occurs or if called within a text block
897 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or if called within a text block
898 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or if called within a text block
899 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or if called within a text block
900 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs or if called within a text block
901 Sets line width in graphics context. @param lineWidth new line width value @throws IOException if I/O error occurs when writing
902 Sets line width in graphics context. @param lineWidth new line width value @throws IOException if I/O error occurs
903 Sets line width in graphics context. @param lineWidth new line width value @throws IOException if I/O error occurs
904 Sets line width in graphics context. @param lineWidth new line width value @throws IOException if I/O error occurs
905 Sets line dash pattern and phase. @param pattern array of float values for dash lengths @param phase offset at which the pattern starts @throws IOException if I/O error occurs
906 Sets line dash pattern. @param pattern array of float values for dash lengths @param phase offset at which the pattern starts @throws IOException if I/O error occurs
907 Sets line dash pattern. @param pattern array of float values for dash lengths @param phase offset at which the pattern starts @throws IOException if I/O error occurs
908 Sets line dash pattern using specified values and phase. @param pattern array of float values for dash lengths @param phase offset at which the pattern starts @throws IOException if I/O error occurs during writing
909 Sets the line miter limit for rendering. @param miterLimit the miter limit value, must be greater than 0 @throws IllegalArgumentException if miter limit is <= 0 @throws IOException if I/O error occurs during writing
910 Sets the miter limit for line joins. @param miterLimit the miter limit value, must be greater than 0 @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs during writing
911 Sets the miter limit for line joins. @param miterLimit the miter limit value, must be greater than 0 @throws IllegalArgumentException if miterLimit is <= 0 @throws IOException if I/O error occurs during writing
912 Sets the miter limit for line joins. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if I/O error occurs during writing
913 Sets the text matrix for transformations. @param matrix Matrix object defining the transformation @throws IOException if I/O error occurs or not in text mode
914 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if I/O error occurs during transformation
915 Sets character spacing in the document. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
916 Sets character spacing in the document. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
917 Sets character spacing in the document. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
918 Sets character spacing in the document. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
919 Sets word spacing in PDF. @param spacing the desired word spacing value @throws IOException if I/O error occurs
920 Sets word spacing in PDF. @param spacing the desired word spacing value @throws IOException if I/O error occurs
921 Sets word spacing in PDF. @param spacing the desired word spacing value @throws IOException if I/O error occurs
922 Sets word spacing in PDF. @param spacing the desired word spacing value @throws IOException if I/O error occurs
923 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
924 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
925 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
926 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
927 Sets text rise in document. @param rise amount of text rise @throws IOException if writing fails
928 Sets text rise in document. @param rise amount of text rise @throws IOException if writing fails
929 Sets text rise in document. @param rise amount of text rise @throws IOException if writing fails
930 Sets text rise in document. @param rise amount of text rise @throws IOException if writing fails
931 Initializes a PageDrawer with specified parameters. @param parameters configuration for page drawing @throws IOException if an I/O error occurs
932 Parses a COSString from the input source. @return COSString object or throws IOException if parsing fails
933 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
934 Retrieves the bounding box rectangle. @return PDRectangle object representing the bounding box
935 Initializes PDMetadata with a new COSStream from the given PDDocument. Sets metadata type and subtype in the COS object. @param document PDDocument instance to create COSStream from
936 Initializes a new embedded file in the given PDF document. @param document PDDocument instance where the embedded file will be created
937 Initializes a PDXObject with a given document and subtype. @param document PDDocument instance for the object @param subtype COSName representing the subtype of the XObject
938 Constructs a PDImageXObject from a given document. @param document PDDocument containing image data
939 Constructs a PDStream from document and InputStream. @param doc PDDocument instance to associate the stream with @param input InputStream for data to be written into the stream @throws IOException if I/O error occurs during stream creation or data transfer
940 Initializes a PDStream with document and InputStream using a filter name. @param doc PDDocument instance to associate the stream with @param input InputStream for data to be written into the stream @param filter COSName specifying the filter for data processing @throws IOException if I/O error occurs during stream creation or data transfer
941 Creates a PDStream with document and InputStream using filters. @param doc PDDocument instance to associate the stream with @param input InputStream for data to be written into the stream @param filters array of COSBase filters for data processing @throws IOException if I/O error occurs during stream creation or data transfer
942 Constructs a PDImageXObject from an encoded stream. @param document PDDocument instance to create the image in @param encodedStream InputStream containing encoded image data @param cosFilter COSBase representing filter applied to the image @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @throws IOException if an I/O error occurs
943 Initializes a PDLayoutAttributeObject with OWNER_LAYOUT as owner.
944 Initializes a PDListAttributeObject with OWNER_LIST as owner.
945 Constructs a PDPrintFieldAttributeObject. Sets the owner to OWNER_PRINT_FIELD by default.
946 Initializes a table attribute object. Sets the owner to OWNER_TABLE.
947 Initializes a COSParser for parsing PDF files without encryption. @param source RandomAccessRead object representing the PDF file @throws IOException if an error occurs during initialization
948 Initializes a PDFParser with specified parameters. @param source RandomAccessRead object representing the PDF file @param decryptionPassword decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @throws IOException if an error occurs during initialization
949 Validates and corrects PDF cross-reference offsets. Uses brute-force parser if validation fails. @throws IOException if an I/O error occurs
950 Initializes content stream for PDF annotation appearance. @param appearance the PDAppearanceStream to write to @throws IOException if I/O error occurs or stream is already open
951 Initializes a content stream for a PDF form. @param form the PDFormXObject to write to @throws IOException if I/O error occurs or stream is already open
952 Initializes a content stream for PDF annotation appearance. @param doc the PDDocument to write to @param appearance the PDAppearanceStream for appearance properties
953 Sets the highest value in the array. @param high integer value to be stored at index 2
954 Sets the page number in the array. @param pageNumber the new page number to set
955 Removes an object from the list. @param o object to remove @return true if object was removed, false otherwise
956 Removes an element at the specified index. @param index position of the element to remove @return removed element or null if index is out of bounds @throws UnsupportedOperationException if list is filtered
957 Clears all entries from both maps and updates their statuses.
958 Removes an item by key from the PDF document and internal map. @param key unique identifier of the item to remove @return value associated with the removed key or null if not found
959 Recursively collects and updates entries in a PDF array. @param array the COSArray to process @return true if any descendant requires parent update, false otherwise
960 Sets the origin document state without dereferencing. @param originDocumentState the new document state to set
961 Updates the origin document state for a child COSBase object. @param child the child object to update
962 Saves document to specified file. @param fileName path to destination file @throws IOException if an I/O error occurs during writing
963 Draws a shape with specified line width and optional stroke/fill. @param lineWidth the width of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to fill the shape @throws IOException if I/O error occurs during drawing
964 Parses input text into an instruction sequence. @param text the character sequence to parse @return InstructionSequence representing parsed instructions
965 Encrypts or decrypts PDF data using AES or RC4. @param objectNumber unique object number in PDF @param genNumber generation number of the object @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security exceptions
966 Validates owner password based on encryption revision. @param ownerPassword bytes of the owner password to validate @param user bytes of the user key @param owner bytes of the owner entry @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if validation fails or unknown revision
967 Validates user password based on encryption revision. @param password user's password string @param user user identifier bytes @param owner document owner bytes @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if an I/O error occurs
968 Attempts to locate a FontBoxFont by PostScript name for various font formats. @param postScriptName the font's PostScript name @return FontBoxFont object if found, otherwise null
969 Writes content of a page to output. Handles sorting, spacing, and line separation. @throws IOException if an I/O error occurs
970 Begins marked content in PDF with a given tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
971 Begins marked content in PDF with a given tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
972 Begins marked content in PDF with a given tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
973 Begins marked content in PDF with a given tag. @param tag COSName representing the content tag @throws IOException if I/O error occurs during writing
974 Begins a marked content sequence in PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content, must not be negative @throws IOException if I/O error occurs during writing
975 Begins a marked content sequence in PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IOException if I/O error occurs during writing or if mcid is negative
976 Begins a marked content sequence in PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content, must be non-negative @throws IOException if I/O error occurs during writing or invalid mcid
977 Begins a marked content sequence in PDF. @param tag COSName representing the content type @param mcid unique identifier for the marked content @throws IllegalArgumentException if mcid is negative @throws IOException if I/O error occurs during writing
978 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if I/O error occurs during writing
979 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if I/O error occurs during writing
980 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if I/O error occurs during writing
981 Sets a marked content point in the PDF. @param tag COSName representing the marked content tag @throws IOException if I/O error occurs during writing
982 Writes a COSString to an OutputStream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
983 Displays text using the current font. @param text the string to display @throws IOException if an I/O error occurs
984 Draws a circle on the given content stream. @param cs PDF appearance content stream @param x center X coordinate @param y center Y coordinate @param r radius of the circle @throws IOException if an I/O error occurs during drawing
985 Draws a circle on the given content stream. @param cs the PDAppearanceContentStream to draw on @param x the X coordinate of the circle's center @param y the Y coordinate of the circle's center @param r the radius of the circle @throws IOException if an I/O error occurs during drawing
986 Draws an arrow at a specified position. @param cs graphics content stream @param x starting X coordinate @param y starting Y coordinate @param len length of the arrow @throws IOException if an I/O error occurs
987 Draws a diamond shape on the given content stream. @param cs PDAppearanceContentStream to draw on @param x center X coordinate of the diamond @param y center Y coordinate of the diamond @param r radius of the diamond from the center @throws IOException if an I/O error occurs during drawing
988 Draws a paperclip using graphics commands. @param contentStream the stream to draw on @throws IOException if an I/O error occurs
989 Sets line width conditionally. @param lineWidth new line width value @throws IOException if I/O error occurs when writing
990 Sets the text matrix for transformations. @param matrix Matrix object defining the transformation @throws IOException if I/O error occurs or not in text mode
991 Sets the text matrix for transformations. @param matrix Matrix object defining the transformation @throws IOException if I/O error occurs or not in text mode
992 Sets the text matrix for transformations. @param matrix Matrix object defining the transformation @throws IOException if I/O error occurs or not in text mode
993 Sets the text matrix for transformations. @param matrix Matrix object defining the transformation @throws IOException if I/O error occurs or not in text mode
994 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if I/O error occurs during transformation or text mode is active
995 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if I/O error occurs during transformation or text mode is active
996 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if I/O error occurs during transformation or text mode is active
997 Applies a transformation to the graphics state. @param matrix transformation matrix to apply @throws IOException if I/O error occurs during transformation or text mode is active
998 Creates a PageDrawer with specified parameters and sets an annotation filter. @param parameters configuration for page drawing @return configured PageDrawer object @throws IOException if an I/O error occurs
999 Creates a PDFormXObject with a specified document. @param document PDDocument instance for the form object
1000 Constructs a PDMetadata object from a document and input stream. @param doc PDDocument instance to associate the metadata with @param str InputStream for metadata XML data @throws IOException if I/O error occurs during metadata creation
1001 Constructs a PDEmbeddedFile from document and InputStream. @param doc PDDocument instance to associate the file with @param str InputStream for the embedded file data @throws IOException if I/O error occurs during creation or data transfer
1002 Initializes a PDEmbeddedFile with document and InputStream using a filter name. @param doc PDDocument instance to associate the file with @param input InputStream for embedded file data @param filter COSName specifying the filter for data processing @throws IOException if I/O error occurs during initialization
1003 Prepares a PDImageXObject from byte array with compression. @param document PDDocument instance to create the image in @param byteArray input image data as bytes @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @return PDImageXObject with compressed image data @throws IOException if an I/O error occurs during processing
1004 Initializes a PDExportFormatAttributeObject with a specified owner. @param owner the owner of the attribute object
1005 Initializes an FDFParser to parse FDF files. @param source RandomAccessRead object representing the FDF file @throws IOException if an error occurs during initialization
1006 Initializes a PDFParser with source and optional decryption password. @param source RandomAccessRead object representing the PDF file @param decryptionPassword decryption password for protected documents (null if not needed) @throws IOException if an error occurs during initialization
1007 Collects and processes a PDF object. @param base the COSBase object to process @return true if any descendant requires parent update, false otherwise
1008 Sets the document's trailer and updates its state. @param newTrailer the new COSDictionary to set as the trailer
1009 Updates the document and sets origin state for COSUpdateInfo children. @param child the child object to update
1010 Updates the document and its children's states. @param children iterable of COSBase objects representing document children
1011 Retrieves the base object by dereferencing if needed. @return COSBase object or null if not found
1012 Decrypts a PDF stream using AES or RC4. @param stream the COSStream to decrypt @param objNum unique object number in PDF @param genNum generation number of the object @throws IOException on I/O errors or security exceptions
1013 Encrypts a PDF stream using AES or RC4. @param stream COSStream to be encrypted @param objNum unique object number in PDF @param genNum generation number of the object @throws IOException on I/O errors or security exceptions
1014 Decrypts a COSString using specified PDF object and generation numbers. @param string the COSString to decrypt @param objNum unique object number in PDF @param genNum generation number of the object @return decrypted COSBase or original if decryption fails
1015 Encrypts a COSString using AES or RC4. @param string the COSString to encrypt @param objNum unique object number in PDF @param genNum generation number of the object @return encrypted COSString @throws IOException on encryption errors
1016 Validates owner password for a document. @param password owner's password as a string @param user bytes of the user key @param owner bytes of the owner entry @param permissions access permissions integer @param id document identifier bytes @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise @throws IOException if validation fails or unknown revision
1017 Initializes font information by scanning local system and using disk cache. @param cache FontCache instance to store font info
1018 Writes content of each region to output. Iterates through regions, sets characters and text, then calls superclass method. @throws IOException if an I/O error occurs
1019 Writes a COSBase object as a token to the output stream. @param base COSBase object to write @throws IOException if an I/O error occurs
1020 Writes text with positioning using an array of Float and String. @param textWithPositioningArray array containing Float for position and String for text @throws IOException if I/O error occurs
1021 Displays and writes text followed by a 'show' operator. @param text the string to display and write @throws IOException if an I/O error occurs
1022 Draws a line style at specified coordinates. @param style line style identifier @param cs graphics content stream @param x starting X coordinate @param y starting Y coordinate @param width line width @param hasStroke whether to apply a stroke @param hasBackground whether to fill the background @param ending direction flag @throws IOException if an I/O error occurs
1023 Initializes a PDTransparencyGroup with a specified document. @param document PDDocument instance for the transparency group
1024 Initializes a new PDAppearanceStream with a specified document. @param document PDDocument instance for the appearance stream
1025 Creates a JPEG image object from a BufferedImage. @param document PDDocument instance to add the image to @param image input image data @param quality JPEG compression quality (0.0f - 1.0f) @param dpi resolution in dots per inch @return PDImageXObject created from the input image @throws IOException if an I/O error occurs
1026 Creates a PDFParser instance without decryption. @param source RandomAccessRead object representing the PDF file @throws IOException if an error occurs during initialization
1027 Collects and processes a PDF dictionary for updates. @param dictionary the COSDictionary to process @return true if any descendant requires parent update, false otherwise
1028 Returns a set of PDF objects. Initializes by collecting objects from incrementOrigin if not already done. @return Set of COSBase objects
1029 Adds a PDF object to the collection. @param object the COSBase object to add
1030 Adds a COSBase object to the list at a specified index. Handles COSDictionary or COSArray by wrapping in COSObject. @param i index where to add the object @param object the COSBase object to add
1031 Sets an item in the COSArray at a specified index. @param index position to set the item @param object the COSBase object to insert
1032 Sets an item in the dictionary. @param key unique identifier for the item @param value the item to set (can be null)
1033 Adds all objects from the provided list to the collection. @param objectsList iterable of COSBase objects to add
1034 Adds all elements from the given collection to this list at the specified position. Updates document state if addition is successful. @param i index at which to insert the first element from the specified collection @param objectList collection containing elements to be added to this list
1035 Updates document and its children's states. @param children COSArray of document children
1036 Retrieves object at specified index, dereferencing if needed. @param index position of the object in the list @return COSBase object or null if not found or is COSNull
1037 Removes a COSBase object from the collection, handling indirect references. @param o the COSBase object to remove @return true if the object was successfully removed, false otherwise
1038 Finds the index of a specified object in the list. @param object the COSBase object to search for @return index of the object or -1 if not found
1039 Checks if the collection contains a specific value, considering COSObject dereferencing. @param value the value to search for @return true if the value is found, false otherwise
1040 Retrieves the key associated with a given value in the map. @param value the value to search for @return COSName key or null if not found
1041 Retrieves a dictionary object by key. @param key the COSName key to look up in the dictionary @return COSBase object or null if not found or is COSNull
1042 Collects keys of indirect objects. @param indirectObjects collection to store object keys
1043 Retrieves the linearized dictionary from PDF XRef table. @return COSDictionary object or null if not found
1044 Closes all open streams and resources, logging exceptions. @throws IOException if an error occurs during closing
1045 Collects and processes a PDF object. @param object the COSObject to be processed @return true if any descendant requires parent update, false otherwise
1046 Accepts a visitor to process the PDF object. @param visitor the visitor to visit this node @throws IOException if an I/O error occurs during processing
1047 Checks if the given COSBase value is a self-reference to the parent. @param parent parent COSBase object @param value child COSBase object @return true if value refers back to parent, false otherwise
1048 Retrieves the length as a COSNumber from a given base object. Handles direct and referenced objects, throws exceptions for invalid types. @param lengthBaseObj base object containing or referencing the length @return COSNumber representing the length or null if not found
1049 Constructs a NormalXReference with specified byte offset, key, and object. @param byteOffset the byte offset of the reference @param key the COSObjectKey associated with this reference @param object the COSBase object referenced
1050 Retrieves or creates a unique key for a PDF object. @param obj PDF object to process @return COSObjectKey representing the object's key
1051 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
1052 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if object is in the pool, false otherwise
1053 Prepares a stream object for processing. @param key unique identifier for the object @param object base object to be processed
1054 Outputs a curl template by drawing cubic Bézier curves. @param template array of control points @param x horizontal offset @param y vertical offset @throws IOException if an I/O error occurs
1055 Generates an arc segment and adds it to the output list or draws it. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center X coordinate @param cy center Y coordinate @param rx radius along X axis @param ry radius along Y axis @param out list to store points, or null to draw directly @param addMoveTo whether to move to the start point first @throws IOException if an I/O error occurs during drawing
1056 Writes text with positioning using an array of Float and String. @param textWithPositioningArray array containing Float for position and String for text @throws IOException if I/O error occurs
1057 Writes text with positioning using an array of Float and String. @param textWithPositioningArray array containing Float for position and String for text @throws IOException if I/O error occurs
1058 Writes text with positioning using an array of Float and String. @param textWithPositioningArray array containing Float for position and String for text @throws IOException if I/O error occurs
1059 Processes an array to display text with positioning. @param textWithPositioningArray array containing Float for position and String for text @throws IllegalArgumentException if array contains invalid types @throws IOException if I/O error occurs during writing
1060 Displays and writes text followed by a 'show' operator. @param text the string to display and write @throws IOException if an I/O error occurs
1061 Displays and writes text followed by a 'show' operator. @param text the string to display and write @throws IOException if an I/O error occurs
1062 Displays and writes text followed by a 'show' operator. @param text the string to display and write @throws IOException if an I/O error occurs
1063 Displays and writes text followed by a 'show' operator. @param text the string to display and write @throws IOException if an I/O error occurs
1064 Creates a JPEG image object from a BufferedImage with default DPI. @param document PDDocument instance to add the image to @param image input image data @param quality JPEG compression quality (0.0f - 1.0f) @return PDImageXObject created from the input image @throws IOException if an I/O error occurs
1065 Returns an iterator over PDF objects. @return Iterator of COSBase objects
1066 Adds a PDF object to the collection. Converts COSObjectable to COSBase and delegates to add(COSBase). @param object the COSObjectable object to add
1067 Grows the collection to specified size by adding objects. @param size desired collection size @param object the COSBase object to add repeatedly
1068 Sets a float array in the PDF document. @param value array of float values to be set
1069 Constructs and returns a COSStream for cross-reference. @return COSStream object configured with necessary entries @throws IOException if I/O error occurs during stream creation or data writing
1070 Initializes a COSArrayList with an initial object and PDF item. @param actualObject the actual object to be managed @param item the corresponding PDF item in the array @param dictionary the parent dictionary containing this list @param dictionaryKey the key for the list in the dictionary
1071 Converts a list of objects to a COSArray. @param cosObjectableList list of objects to convert @return COSArray containing converted COSBase objects
1072 Initializes a PDRange with default values. Constructs a COSArray and sets the initial range from 0 to 1.
1073 Initializes a new FDFOptionElement with default empty strings.
1074 Initializes a PDFontSetting with default values. Creates a COSArray and adds null followed by a COSFloat with value 1.
1075 Converts components to a COSArray, optionally adding a pattern name. @return COSArray containing component elements and possibly the pattern name
1076 Initializes a PDDeviceN object with a COSArray containing "DeviceN" and three null placeholders.
1077 Initializes a PDGamma object with default zero values. Constructs an empty COSArray and adds three COSFloat.ZERO elements.
1078 Retrieves the alternate color space. @return PDColorSpace instance or throws IOException if creation fails
1079 Initializes a PDIndexed object with default properties. Constructs a COSArray and sets up its elements for indexed color spaces.
1080 Creates a default range array for PDF. @return COSArray with predefined float values [-100, 100, -100, 100]
1081 Initializes a PDPattern with given resources. @param resources PDResources object containing pattern information
1082 Initializes a PDSeparation object with default values. Constructs a COSArray, adds separation type and placeholders.
1083 Initializes a PDTristimulus with zero values. Constructs an empty COSArray and adds three COSFloat.ZERO elements.
1084 Constructs a PDTristimulus with float array. @param array of up to 3 float values representing tristimulus values
1085 Sets the transformation matrix for an object. @param transform AffineTransform object defining the matrix values
1086 Creates a PDImageXObject from a byte array. @param document PDDocument to add the image to @param byteArray input byte array containing image data @return PDImageXObject created from the byte array @throws IOException if an I/O error occurs
1087 Converts an array of single values to a PDF COSArray. @return COSArray containing COSFloat objects from the input array elements at specific indices.
1088 Sets an item in the COSArray at a specified index. @param index position to set the item @param object the COSBase object or null to insert
1089 Sets an integer value in the PDF array at a specified index. @param index position to set the integer @param value integer value to store
1090 Sets PDF name at specified index. @param index position in array to update @param name PDF name string to set
1091 Sets a string at the specified index in the array. @param index position to set the string @param string the input string to be stored
1092 Sets the minimum value of the range. @param min the minimum value to be stored
1093 Sets the maximum value in the range array. @param max the maximum value to be stored
1094 Sets the lower-left X coordinate of the rectangle. @param value the X coordinate to be set
1095 Sets the lower-left Y coordinate of the rectangle. @param value the Y coordinate to be set
1096 Sets the upper-right X coordinate of the rectangle. @param value the X coordinate value to be stored
1097 Sets the upper-right Y coordinate of a rectangle. @param value the Y coordinate to be set
1098 Sets color at specified index. @param index position to set the color @param colour PDGamma object representing the color
1099 Decrypts all elements in a COSArray. @param array the COSArray to decrypt @param objNum object number for decryption context @param genNum generation number for decryption context
1100 Sets an option by converting it to a COSString. @param opt the option string to be set
1101 Sets default appearance string for PDF document. @param da appearance string to apply
1102 Sets the font size. @param size the font size to apply
1103 Sets colorant names in a PDF document. @param names list of colorant names
1104 Sets device N attributes. @param attributes PDDeviceNAttributes object to set
1105 Sets the alternate color space. @param cs PDColorSpace object to set as alternate
1106 Sets the red component of a color. @param r float value representing the red component
1107 Sets the green component of a color. @param g green value to be stored
1108 Sets the third value in the array to a float. @param b the float value to be stored
1109 Sets the base color space. @param base PDColorSpace object to be set
1110 Sets the colorant name in the PDF array. @param name the colorant name string
1111 Sets the alternate color space. @param colorSpace the new PDColorSpace for alternates
1112 Sets the X coordinate value. @param x the float value to be stored at index 0
1113 Sets the Y coordinate value. @param y the Y coordinate to be stored
1114 Sets the Z coordinate value. @param z the Z coordinate to be stored
1115 Sets an item in the dictionary using a key and a COSObjectable value. Converts COSObjectable to COSBase before setting. @param key unique identifier for the item @param value the item to set (can be null)
1116 Sets a boolean value in the PDF dictionary. @param key unique identifier for the boolean item @param value Java boolean value to store
1117 Sets a boolean value in the PDF dictionary. @param key unique identifier for the boolean item @param value the boolean value to set
1118 Sets an item in the dictionary using a string key. @param key unique identifier for the item as a string @param value the item to set (can be null)
1119 Sets a PDF dictionary entry with the given key and value. @param key unique identifier for the dictionary entry @param value string to convert to PDF name or null to remove entry
1120 Sets a string value in the PDF dictionary. @param key unique identifier for the item @param value string to be stored (null allowed)
1121 Sets an integer value in the PDF dictionary. @param key unique identifier for the item @param value integer value to store
1122 Sets a long value in the PDF dictionary. @param key unique identifier for the item @param value the long value to store
1123 Sets a float value in the dictionary. @param key unique identifier for the item @param value float value to be stored
1124 Creates a COSStream from a dictionary and sets its items. @param dictionary source dictionary containing stream data @param startPosition start position in the stream @param streamLength length of the stream @return created COSStream object @throws IOException if an I/O error occurs
1125 Sets encryption dictionary in document trailer. @param encDictionary encryption settings to apply
1126 Sets the document ID in the PDF trailer. @param id array representing the document ID
1127 Merges entries from source dictionary to destination dictionary. @param src source COSDictionary to merge from @param dst destination COSDictionary to merge into @param cloner utility for cloning COSBase objects @param exclude set of keys to exclude from merging @throws IOException if an I/O error occurs during cloning
1128 Parses the next token from the content stream. Handles various types including strings, numbers, arrays, and operators. @return parsed object or null if end of stream is reached @throws IOException if an I/O error occurs during parsing
1129 Initializes a new PDDocument with basic PDF structure. @param streamCacheCreateFunction function to create stream cache
1130 Sets document information. @param info PDDocumentInformation object containing metadata
1131 Initializes a PDDocumentCatalog with the given document. @param doc the PDF document to associate with this catalog
1132 Sets the list of threads in the document. @param threads list of PDThread objects to be set
1133 Sets the list of output intents in the document. @param outputIntents list of PDOutputIntent objects representing output intents
1134 Sets or removes the crop box for a PDF page. @param cropBox PDRectangle representing the crop box or null to remove it
1135 Sets the contents of the PDF page. @param contents list of PDStream objects representing content streams
1136 Sets thread beads on the PDF page. @param beads list of PDThreadBead objects representing thread beads
1137 Sets annotations on a PDF page. @param annotations list of PDAnnotation objects to add
1138 Sets viewports for a PDF page. @param viewports list of PDViewportDictionary objects to set
1139 Initializes a new PDPageTree with an empty root dictionary. Sets required items for pages structure in PDF documents.
1140 Adds an element to the collection. Handles special cases for parent dictionary and string conversion. @param o the element to add @return true if the element was added successfully
1141 Clears the current object and updates parent dictionary. If a parent dictionary exists, sets its item to null.
1142 Sets an element in the list at a specified index. @param index position to set the element @param element the new element to insert @return the replaced element Throws UnsupportedOperationException if replacing is not permitted.
1143 Adds an element to the list at a specified index. Throws UnsupportedOperationException if the list is filtered. Updates parent dictionary if present and converts strings to COSString. @param index position where to add the element @param element the element to add
1144 Stores a key-value pair in the map. @param key unique identifier for the item @param value the item to store @return previous value associated with the key or null if none
1145 Converts labels map to a PDF dictionary. @return COSDictionary representing the labels
1146 Initializes a PDF complex file specification. Creates and configures a COSDictionary with type set to FILESPEC.
1147 Initializes a PDComplexFileSpecification with a given dictionary. If no dictionary is provided, creates a new one and sets its type. @param dict existing PDFBox COSDictionary or null
1148 Sets range values for a PDF function. @param rangeValues array of COSBase representing the range
1149 Sets the domain values for a function. @param domainValues array of COSBase objects representing the domain
1150 Sets the encode values for a PDF object. @param encodeValues array of COSBase objects representing encode values
1151 Sets the decode values for the PDF object. @param decodeValues array of decode values to set
1152 Sets the K value in the PDF object. @param k the value to set (can be null)
1153 Sets the class map in the PDF document. @param classMap mapping of names to objects or lists of PDAttributeObjects
1154 Sets user properties for a PDF document. @param userProperties list of PDUserProperty objects to set
1155 Sets the line dash pattern for a PDF object. @param dashArray array defining the dash pattern (can be null)
1156 Sets the cryptographic filter method in the dictionary. @param cfm the cryptographic filter method to set
1157 Sets the PDF filter. @param filter name of the filter to apply
1158 Sets the owner key in the PDF document. @param o byte array representing the owner key
1159 Sets user key in PDF document. @param u byte array representing the user key
1160 Sets the owner encryption key in the PDF document. @param oe byte array representing the owner encryption key
1161 Sets user encryption key in PDF dictionary. @param ue byte array representing the encryption key
1162 Sets the list of recipients for a PDF document. @param recipients array of recipient byte arrays
1163 Sets the stream filter name in the PDF dictionary. @param streamFilterName the filter name to set for the stream
1164 Sets the string filter name in the dictionary. @param stringFilterName unique identifier for the string filter
1165 Sets permissions in PDF document. @param perms byte array representing permissions @throws IOException if an I/O error occurs
1166 Removes V4.5 filters from the PDF dictionary.
1167 Initializes a new FDF annotation with type set to ANNOT.
1168 Sets the color of an annotation. @param c Color object to set or null for no color
1169 Sets rich contents of an annotation. @param rc rich content string to be set
1170 Sets the interior color for an annotation. @param color Color object to set (null resets the color)
1171 Sets the callout coordinates for an annotation. @param callout array of float values representing the callout points
1172 Sets the ink list for an annotation. @param inklist list of float arrays representing ink data
1173 Sets a line in the annotation. @param line array of float values representing the line coordinates
1174 Sets the interior color of an annotation. @param color the desired interior color (null for no color)
1175 Sets vertices for an annotation. @param vertices array of float values representing vertex coordinates
1176 Sets the interior color of an annotation. @param color the Color object to set (can be null)
1177 Sets annotation vertices. @param vertices array of float values representing vertex coordinates
1178 Sets the interior color of an annotation. @param color the desired interior color (null for no color)
1179 Sets the interior color of an annotation. @param color the new interior color (null for no fill)
1180 Sets annotation coordinates. @param coords array of float numbers representing coordinates
1181 Sets the ID for the FDF document. @param id COSArray containing the ID values
1182 Sets form fields in an FDF document. @param fields list of FDFField objects representing the form fields
1183 Sets the list of FDF pages. @param pages List of FDFPage objects to be set
1184 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to set
1185 Sets the differences stream in the FDF document. @param diff COSStream containing the differences data
1186 Sets list of embedded FDF files. @param embedded list of PDFileSpecification objects representing embedded FDFs
1187 Sets the list of child fields. @param kids list of FDFField objects representing child fields
1188 Sets the field value in a PDF document. @param value the value to set (String, List<String>, or COSObjectable) @throws IOException if an error occurs during setting the value
1189 Sets the value of the field. @param value the new value to set (can be null)
1190 Sets field flags for a PDF form field. @param ff integer representing field flags
1191 Sets field flags for a PDF form field. @param ff integer representing the field flags
1192 Sets clear field flags for a PDF form field. @param ff integer representing the clear field flags
1193 Sets widget field flags. @param f integer representing field flags
1194 Sets widget field flags. @param ff field flag integer value
1195 Sets clear widget field flags. @param ff flag values to set
1196 Sets rich text value for a form field. @param rv rich text string to be set
1197 Sets rich text content in the PDF form field. @param rv COSStream containing rich text data
1198 Sets the 'before' attribute in the PDF dictionary. @param before text to be set as the 'before' value
1199 Sets the 'after' property in the PDF dictionary. @param after value to be set for the 'after' property
1200 Sets document actions from a map. @param map key-value pairs of action names and PDActionJavaScript objects
1201 Sets a list of templates on the PDF page. @param templates list of FDFTemplate objects to be set
1202 Sets form fields in a PDF template. @param fields list of FDFField objects to be added
1203 Builds CID to GID mapping with adjusted font widths. @param cidToGid map of CID to GID values @throws IOException if an I/O error occurs
1204 Initializes a PDFont object with default settings. Sets up the COSDictionary and defines it as a font type.
1205 Initializes a PDFontDescriptor with a dictionary. Sets the "Type" entry to "FontDescriptor".
1206 Sets the font name in the PDF dictionary. @param fontName the name of the font to set
1207 Sets the font family for a PDF document. @param fontFamily name of the font family to set
1208 Sets the font stretch attribute in a PDF dictionary. @param fontStretch string representing the font stretch value
1209 Sets the font bounding box in the dictionary. @param rect PDRectangle representing the bounding box or null to remove it
1210 Sets the character set for the document. @param charSet character encoding string to be set
1211 Sets gamma correction value in the PDF dictionary. @param value the gamma value to be applied
1212 Sets the gamma value in the PDF dictionary. @param gamma PDGamma object containing the gamma values
1213 Sets the transformation matrix in a PDF document. @param matrix the Matrix object to be set
1214 Sets colorants in the PDF document. @param colorants map of colorant names and their corresponding PDColorSpace objects
1215 Initializes a PDF transparency group with default settings.
1216 Sets PDF filter names in document parameters. @param filters list of filter names to apply
1217 Initializes an optional content membership dictionary. Sets the type to "OCMD".
1218 Sets the visibility policy in the PDF dictionary. @param visibilityPolicy the policy to set (can be null)
1219 Sets the transformation matrix for a PDF object. Converts an AffineTransform to a COSArray and stores it in the dictionary. @param transform the affine transformation to apply
1220 Sets or removes the bounding box for a PDF object. @param bbox PDRectangle representing the bounding box (null to remove)
1221 Sets the background for the document. @param newBackground array representing the background
1222 Sets the bounding box for a PDF element. @param newBBox the new bounding box rectangle
1223 Sets the color space for a PDF element. @param colorSpace the new color space to apply (can be null)
1224 Updates the function array in a PDF object. @param newFunctions array of COSBase objects representing functions
1225 Sets the transformation matrix in a PDF object. @param transform AffineTransform object defining the transformation
1226 Sets the domain for this field. @param newDomain array representing the domain values
1227 Sets the extend array in the PDF object. @param newExtend the new extend array to set
1228 Sets the domain array. @param newDomain the new domain to be set
1229 Sets coordinates for an annotation. @param newCoords array containing the new coordinates
1230 Sets decode values for a PDF object. @param decodeValues array of decode parameters
1231 Constructs a new PDExtendedGraphicsState object. Initializes its dictionary and sets the type to EXT_G_STATE.
1232 Sets the blend mode in the PDF dictionary. @param bm the blend mode to apply
1233 Sets a float item in the dictionary. @param key unique identifier for the item @param value float value to set (null removes the item)
1234 Sets the transfer object in the dictionary. @param transfer the COSBase object representing the transfer
1235 Sets the TR2 item in the dictionary. @param transfer2 the value to be set for TR2 (can be null)
1236 Sets the next actions in the PDF document. @param next list of PDAction objects representing subsequent actions
1237 Sets the T item in the action dictionary. @param t the value to set (can be null)
1238 Sets horizontal alignment. @param h boolean indicating horizontal alignment
1239 Sets fields in the action dictionary. @param array COSArray containing field data
1240 Sets the sound stream in an action. @param sound COSStream representing the sound to be played
1241 Sets fields in the action dictionary. @param array COSArray containing field data
1242 Sets the destination (D) in the PDF action. @param d the destination to set (can be null)
1243 Sets property B in the action dictionary. @param b value to be set for property B (can be null)
1244 Sets the relationship type in the dictionary. @param relationship must be either COSName.P or COSName.C @throws IllegalArgumentException if relationship is invalid
1245 Initializes a PDF annotation. Constructs a COSDictionary and sets its type to ANNOT.
1246 Sets the rectangle in the PDF dictionary. @param rectangle PDRectangle object to be set
1247 Sets the border of a PDF annotation. @param borderArray array representing the border properties
1248 Sets rectangle differences for PDF annotations. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1249 Sets rectangle differences for PDF annotations. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1250 Sets callout coordinates in PDF annotation. @param callout array of float values representing the callout points
1251 Sets the ink list in the PDF document. @param inkList 2D array of float values representing ink paths
1252 Sets line coordinates in PDF object. @param l array of float numbers representing line coordinates
1253 Sets quad points for annotation. @param quadPoints array of float numbers defining the quadrilateral points
1254 Sets rich content in the PDF object. @param rc rich content string to be set
1255 Sets vertices for a PDF annotation. @param points array of float values representing vertex coordinates
1256 Sets vertices for a PDF annotation. @param points array of float values representing vertex coordinates
1257 Sets the parent annotation. @param annot the parent PDAnnotationMarkup object
1258 Sets rectangle differences for a PDF object. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1259 Sets quadrilateral points in the PDF object. @param quadPoints array of float numbers defining the quad points
1260 Initializes a PDF appearance dictionary. Sets up the 'N' entry as a required field.
1261 Sets the dash style for PDF lines. @param dashArray array defining dash pattern
1262 Initializes a PDSeedValue with a specific type in its dictionary.
1263 Sets the filter for the PDF object. @param filter the filter to apply (can be null)
1264 Sets the SubFilter in the PDF dictionary. @param subfilter list of string names for the SubFilter
1265 Sets the digest method for the PDF document. @param digestMethod list of allowed digest names
1266 Sets the list of reasons in the PDF document. @param reasons list of reason strings to be added
1267 Sets the MDP policy in the document. @param mdp PDSeedValueMDP object containing the policy
1268 Sets the time stamp in the PDF document. @param timestamp PDSeedValueTimeStamp object containing the time stamp to set
1269 Sets the legal attestation in the PDF document. @param legalAttestation list of attestation strings to set
1270 Initializes a PDF seed value certificate. Constructs a COSDictionary and sets its type to SV_CERT.
1271 Sets the document subject. @param subjects List of byte arrays representing the subject
1272 Sets the subject distinguished name (DN) in the PDF document. @param subjectDN list of maps containing DN attributes and values
1273 Sets key usage extensions in the PDF dictionary. @param keyUsageExtensions list of key usage extension strings
1274 Sets issuer information in the PDF document. @param issuers list of byte arrays representing issuer data
1275 Sets OID in the dictionary using a list of byte arrays. @param oidByteStrings List of byte arrays representing the OID
1276 Initializes a PDSignature with a type of "Sig". @param this the current signature instance
1277 Sets the type of the PDF object. @param type the COSName representing the type to set
1278 Sets the PDF filter in the dictionary. @param filter unique identifier for the filter
1279 Sets the SubFilter attribute in the PDF dictionary. @param subfilter the SubFilter value to set
1280 Sets the byte range for a PDF signature. @param range array of 4 integers defining the byte range
1281 Sets PDF contents from byte array. @param bytes content data as byte array
1282 Sets the text color for a PDF object. @param textColor the desired text color
1283 Initializes a new PDAcroForm for the given document. @param doc the PDF document to associate with this form
1284 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
1285 Sets the calculation order of form fields. @param fields list of PDField objects representing form fields
1286 Constructs a PDButton instance. @param acroForm the form containing the button
1287 Sets export values in the PDF document. @param values list of string values to export
1288 Constructs a PDChoice instance. @param acroForm the form containing the field
1289 Sets the child fields of a PDF form. @param children list of PDField objects representing child fields
1290 Sets the value of the PDF object. @param object the COSBase object to set as value
1291 Sets default value for PDF field. @param value the default value to be set
1292 Constructs a PDSignatureField instance. @param acroForm the form containing the field
1293 Constructs a PDTextField instance. @param acroForm the form containing the field
1294 Sets or removes the default style string in the PDF document. @param defaultStyleString the style string to set, or null to remove it
1295 Sets or removes the rich text value. @param richTextValue the rich text to set, null to remove
1296 Sets the coordinate system origin. @param coordSystemOrigin array of float values representing the origin coordinates
1297 Initializes a PDF thread object. Sets up the thread dictionary with the type identifier.
1298 Sets the transition direction in a PDF document. @param direction the desired transition direction
1299 Sets the duration of an object in seconds. @param duration the duration value to be stored
1300 Sets the fly scale for the PDF object. @param scale the scaling factor to apply
1301 Sets whether the fly area is opaque. @param opaque true if the fly area should be opaque, false otherwise
1302 Adds all elements from the provided collection. Throws UnsupportedOperationException if adding to a filtered list. Updates dictionary item if parentDict is present and collection is not empty. @param c collection of elements to add @return true if this list changed as a result of the call
1303 Processes font color setting based on operands. @param operands list of COSBase objects representing color components @throws IOException if operands are missing or invalid
1304 Adds all elements from a collection to the list at a specified position. Converts elements to COSBase objects and updates dictionary if parentDict is present. Throws UnsupportedOperationException if the list is filtered. @param index position at which to insert elements @param c collection containing elements to be added @return true if the list was modified as a result of the call
1305 Adds all elements from the provided COSArray to this array. @param objectList COSArray containing objects to add
1306 Converts collection to a float array. @return float[] containing float values from the collection
1307 Converts list of objects to a list of Floats. @return List<Float> with COSNumber values or null for non-COSNumbers
1308 Converts collection to a list of Integer objects. @return List<Integer> with COSNumber values or null for non-COSNumber elements
1309 Updates parent and structure type for entries in an array. @param kArray array containing dictionary entries to update @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
1310 Retrieves the minimum value from a range array. @return the minimum value as a float
1311 Retrieves the maximum value from a range array. @return maximum value as a float
1312 Retrieves a PDGamma object by index from the array. @param index position of the PDGamma in the list @return PDGamma object or null if not found or not an instance of COSArray
1313 Retrieves and converts the first object in 'option' to a string. @return string representation of the first COSString object or null if not found
1314 Retrieves default appearance string from options. @return default appearance string or null if not found
1315 Retrieves a BlendMode instance from a COSBase object. @param cosBlendMode the input COSBase object representing blend mode @return corresponding BlendMode or NORMAL if not found
1316 Retrieves colorant names from the array. @return List of colorant names as strings
1317 Retrieves or creates the alternate color space. @return PDColorSpace instance or throws IOException if creation fails
1318 Retrieves colorant name from an array. @return String representing the colorant name or null if not found
1319 Creates a PDDestination from a COSBase object. @param base the COSBase object representing the destination @return PDDestination object or null if input is null @throws IOException if base cannot be converted to Destination or unknown type
1320 Retrieves the first PDF page from the array. @return PDPage object or null if no valid page is found
1321 Retrieves the page number from an array of objects. @return the page number as an integer, or -1 if not found or invalid
1322 Retrieves the zoom level from an array. @return float value of zoom or -1 if not found
1323 Initializes a Matrix from a COSArray. @param array COSArray containing matrix elements
1324 Retrieves dictionary object by string key. @param key PDF name as a string @return COSBase object or null if not found
1325 Retrieves a COSBase object by primary or secondary key. @param firstKey the primary COSName key to look up in the dictionary @param secondKey the secondary COSName key if primary lookup fails @return COSBase object or null if not found or is COSNull
1326 Retrieves a COSName from the dictionary by key. @param key the COSName key to look up in the dictionary @return COSName object or null if not found or is not a COSName
1327 Retrieves a COSDictionary by key. @param key the COSName key to look up in the dictionary @return COSDictionary object or null if not found or is not a COSDictionary
1328 Retrieves a COSStream object by key. @param key the COSName key to look up in the dictionary @return COSStream object or null if not found or is not a COSStream
1329 Retrieves a COSArray by key. @param key the COSName key to look up in the dictionary @return COSArray object or null if not found or is not a COSArray
1330 Retrieves a COSName from the dictionary by key, with a default fallback. @param key the COSName key to look up in the dictionary @param defaultValue the default COSName to return if not found or not a COSName @return COSName object or default value if conditions are met
1331 Retrieves and converts a dictionary value to a string by key. @param key the COSName key to look up in the dictionary @return String representation of the dictionary value or null if not applicable
1332 Retrieves string value from dictionary by key. @param key the COSName key to look up in the dictionary @return String representation of the value or null if not found or not a COSString
1333 Retrieves a date from the PDF dictionary. @param key the COSName key for the date field @return Calendar object representing the date or null if not found or invalid
1334 Retrieves a long value from the dictionary by key. @param key the COSName key to look up in the dictionary @param defaultValue default value to return if key not found or is not a COSNumber @return long value associated with the key or default value
1335 Retrieves a float value from the dictionary. @param key the COSName key to look up in the dictionary @param defaultValue default value to return if key not found or is not a number @return float value associated with the key or default value
1336 Wraps existing page content in save/restore operations for controlled graphics state. @param page PDPage to modify @throws IOException if I/O error occurs
1337 Retrieves content streams from a page. @return Iterator over PDStream objects representing the content streams
1338 Checks if the page has content. @return true if page contains non-empty stream or array, false otherwise
1339 Converts a PDF dictionary to a Java map with basic type values. @param map the PDF dictionary to convert @return COSDictionaryMap containing key-value pairs of converted types @throws IOException if an unknown object type is encountered
1340 Removes an attribute from the PDF object. @param attributeObject the attribute to remove
1341 Retrieves class names from a dictionary object. @return Revisions object containing class names and their revision numbers
1342 Removes a class name from the COS object. @param className the name of the class to remove
1343 Appends a PDF object to the list of child objects (kids). @param object the COSBase object to append
1344 Inserts a new item before a reference item in the PDF structure. @param newKid the new item to insert @param refKid the reference item before which to insert the new item
1345 Removes a kid from the COSBase object. @param object the kid to remove @return true if successfully removed, false otherwise
1346 Retrieves the value associated with key "K" from the PDF dictionary. @return COSBase object or null if not found
1347 Retrieves value from dictionary object. @return COSBase object or null if not found
1348 Checks if metadata encryption is enabled. @return boolean indicating whether metadata should be encrypted
1349 Retrieves the owner encryption key from a PDF dictionary. @return A byte array containing the owner encryption key, or null if not found
1350 Retrieves the user encryption key. @return A copy of the first 32 bytes of the user encryption key or null if not found.
1351 Retrieves permissions from a dictionary. @return byte array of permissions or null if not found
1352 Retrieves the page number associated with an annotation. @return page number or null if not found
1353 Retrieves and validates the COSBase value of a field. @return COSBase object or null if not found @throws IOException if the value is of an unknown type
1354 Retrieves field flags from the PDF dictionary. @return Integer representing field flags or null if not found
1355 Retrieves the set field flags. @return Integer value of the set field flags or null if not found
1356 Retrieves clear field flags from a PDF dictionary. @return Integer value of clear field flags or null if not found
1357 Retrieves widget field flags from the PDF dictionary. @return Integer value of the flags or null if not found
1358 Retrieves the set widget field flags. @return Integer value of SET_F flag or null if not found
1359 Retrieves clear widget field flags. @return Integer value of flags or null if not found
1360 Retrieves the default width value. Uses dictionary object if available, otherwise defaults to 1000. @return float representing the default width
1361 Retrieves the color space from the dictionary. @return PDColorSpace object or null if not found
1362 Retrieves or creates the color space from PDF resources. @param resources PDF resources containing color space information @return PDColorSpace instance or null if not found @throws IOException if an error occurs during creation
1363 Initializes a PDOptionalContentGroup with a COSDictionary. Validates that the dictionary is of type 'OCG'. @param dict the COSDictionary to use for initialization
1364 Constructs a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict the COSDictionary to use
1365 Retrieves the overprint mode from the dictionary. @return Integer representing the overprint mode or null if not set
1366 Retrieves and creates a soft mask from the dictionary. @return PDSoftMask object or null if not found
1367 Retrieves a float value from the dictionary by key. @param key the COSName key to look up in the dictionary @return Float value or null if not found or not a number
1368 Retrieves the transfer function from a dictionary. @return COSBase object representing the transfer function or null if invalid
1369 Retrieves and validates TR2 object from dictionary. @return COSBase object or null if invalid
1370 Retrieves the backdrop color array from the PDF object. @return COSArray containing the backdrop color or null if not set
1371 Determines the open mode for a document. @return OpenMode indicating how the document should be opened
1372 Retrieves the "T" entry from the action dictionary. @return COSBase object representing the "T" entry or null if not found
1373 Determines the open mode based on dictionary settings. @return OpenMode indicating how to open a document
1374 Determines the open mode for a document. @return OpenMode indicating how to open the document (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1375 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found
1376 Initializes a PDAnnotation with a given COSDictionary. @param dict the dictionary to initialize the annotation from
1377 Retrieves the contents as a byte array. @return Byte array of contents or empty array if not found
1378 Retrieves XFA resource from the PDF dictionary. @return PDXFAResource object or null if not found
1379 Retrieves options from the PDF field. @return list of option strings or empty if none found
1380 Retrieves display values for options. @return list of option display strings or empty if not applicable
1381 Retrieves and converts a value associated with a given key in a dictionary. @param name the COSName key for which to retrieve the value @return List of string values extracted from the key's value, or empty list if not applicable
1382 Retrieves an inheritable attribute from the dictionary or parent. @param key the COSName key to look up @return COSBase object or null if not found
1383 Retrieves value associated with key "V". @return COSBase object or null if not found
1384 Retrieves and converts the value associated with key 'V' to a string. @return String representation of the field value or an empty string if not found
1385 Retrieves default value from COS object. @return COSBase object representing the default value or null if not found
1386 Converts COSDictionary to a string representation. Handles exceptions by logging and returning an error message. @return string representation of the COSDictionary or error message
1387 Collects keys of indirect objects recursively. @param indirectObjects collection to store object keys
1388 Updates the document's highest XRef object number based on imported page. @param importedPage the PDPage to be processed
1389 Closes resources used by the PDF handler. @throws IOException if an error occurs during closing
1390 Writes a COS object to the output stream with xref entry. @param key unique identifier for the COS object @param obj the COSBase object to write
1391 Writes a PDF object reference to the standard output. @param obj PDF object to write
1392 Retrieves the COSObjectKey from the pool for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
1393 Puts a COSBase object in the pool with a given or generated key. @param key initial key for the COS object @param object the COSBase object to store @return the actual key used for the object, or null if not stored
1394 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if object is in the pool, false otherwise
1395 Creates a list of COSWriterObjectStream objects. @return List of COSWriterObjectStream objects
1396 Adds the first intermediate curl to the path. @param angleCur current angle in radians @param r radius of the curl @param alpha additional angle adjustment @param cx center X coordinate @param cy center Y coordinate @throws IOException if an I/O error occurs during drawing
1397 Generates intermediate curl template points. @param angleCur current angle in radians @param r radius of the curl @return array of Point2D.Double representing curl points @throws IOException if an I/O error occurs during point generation
1398 Draws an arc segment with specified parameters. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius along X axis @param ry radius along Y axis @param cx center X coordinate @param cy center Y coordinate @param out list to store points, or null to draw directly @param addMoveTo whether to move to the start point first @throws IOException if an I/O error occurs during drawing
1399 Processes lines of text for alignment and display. @param lines list of Line objects to process @param isFirstParagraph flag indicating if it's the first paragraph @throws IOException if an I/O error occurs during processing
1400 Creates a JPEG image object from a BufferedImage with default quality. @param document PDDocument instance to add the image to @param image input image data @return PDImageXObject created from the input image @throws IOException if an I/O error occurs
1401 Initializes a PDICCBased object with a document. @param doc PDDocument instance to create the ICCBased stream from
1402 Initializes a PDPattern with specified resources and color space. @param resources PDF resources for pattern usage @param colorSpace underlying color space for the pattern
1403 Sets optional content groups in the dictionary. @param ocgs list of property lists representing OCGs
1404 Sets the X number format dictionaries. @param changeXs array of PDNumberFormatDictionary objects
1405 Sets the Y-axis change formats. @param changeYs array of number format dictionaries for Y-axis changes
1406 Sets an array of number format dictionaries. @param distances array of PDNumberFormatDictionary objects to set
1407 Sets number format areas in the dictionary. @param areas array of PDNumberFormatDictionary objects
1408 Sets the number format angles in a PDF dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
1409 Sets line slopes in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1410 Grows the collection to specified size. @param size desired collection size
1411 Clones a COSBase object recursively. @param src source COSBase object to clone @param dstParent destination parent object @param currentPageDict current page dictionary @return cloned COSBase object or original if not a COSArray or COSDictionary
1412 Sets decoding parameters for a PDF stream. @param decodeParams list of decoding parameters to set
1413 Sets file decode parameters. @param decodeParams list of decode parameters to be set
1414 Sets the list of child objects (kids) in a PDF dictionary. @param kids list of child objects to be set
1415 Sets form field options. @param options list of option values
1416 Retrieves the PDRange for a specific component. @param n index of the component @return PDRange object or default range if not available
1417 Builds character widths for CID font and sets them in the PDF dictionary. @param cidFont COSDictionary to store the widths @throws IOException if an I/O error occurs during width conversion or setting
1418 Sets line dash pattern in the dictionary. @param dashPattern the dash pattern to apply
1419 Sets the guide line color in a PDF document. @param color PDColor object representing the guide line color
1420 Sets the color property in the PDF object. @param c PDColor object representing the color to set
1421 Sets the interior color of a PDF element. @param ic PDColor object representing the new interior color
1422 Sets the interior color of a PDF element. @param ic PDColor object representing the interior color
1423 Sets the interior color of a PDF object. @param ic PDColor object representing the interior color
1424 Sets the interior color of a PDF object. @param ic PDColor object representing the interior color
1425 Sets the border color of a PDF object. @param c PDColor object representing the new border color
1426 Sets the background color of a PDF element. @param c PDColor object representing the background color
1427 Sets the text color in the PDF. @param textColor PDColor object representing the desired text color
1428 Creates a PDImageXObject from an input stream. @param document PDDocument to add the image to @param stream input stream containing image data @return PDImageXObject created from the stream @throws IOException if an I/O error occurs
1429 Sets the font for text rendering. @param font the PDFont object to apply
1430 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1431 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1432 Sets the first page in the document. @param page PDPage object to be set as the first page
1433 Creates a new PDRectangle with dimensions set from current width and height. @return PDRectangle object with updated upper-right coordinates
1434 Sets the color before text. @param colour PDGamma object representing the color
1435 Sets the after color using PDGamma object. @param colour PDGamma object representing the color
1436 Sets the starting color using PDGamma. @param colour PDGamma object representing the start color
1437 Sets the end color of a gradient. @param colour PDGamma object representing the end color
1438 Decrypts a PDF object based on its type. @param obj the COSBase object to decrypt @param objNum unique object number in PDF @param genNum generation number of the object @return decrypted COSBase object or original if not applicable @throws IOException on I/O errors or security exceptions
1439 Sets an item in the dictionary using a string key and a COSObjectable value. Converts the string key to COSName and delegates to setItem(COSName, COSObjectable). @param key unique identifier for the item as a string @param value the item to set (can be null)
1440 Sets the AcroForm for the document. @param acroForm the AcroForm to set (can be null)
1441 Sets viewer preferences in the PDF document. @param prefs PDViewerPreferences object containing the preferences to set
1442 Sets the document outline. @param outlines PDDocumentOutline object to be set
1443 Sets metadata in the PDF document. @param meta PDMetadata object containing metadata to be set
1444 Sets the open action for the document. @param action the action to be performed when the document is opened
1445 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions
1446 Sets document name dictionary in PDF. @param names PDDocumentNameDictionary containing document names
1447 Sets the mark information in the document. @param markInfo PDMarkInfo object containing mark details
1448 Sets URI dictionary in the root. @param uri PDURIDictionary object to be set
1449 Sets the structure tree root in the document. @param treeRoot PDStructureTreeRoot object representing the structure tree
1450 Sets page labels for the document. @param labels PDPageLabels object containing page label information
1451 Sets destination names in the document. @param dests PDDestinationNameTreeNode containing destinations
1452 Sets embedded files in the document. @param ef PDEmbeddedFilesNameTreeNode containing embedded file information
1453 Sets the JavaScript node in the dictionary. @param js the JavaScript node to set (can be null)
1454 Creates a new PDPage with specified media box. @param mediaBox dimensions and position of the page
1455 Sets or removes resources for the page. @param resources PDResources object to set, null to remove
1456 Sets the media box for a PDF page. @param mediaBox the new media box dimensions (can be null)
1457 Sets or removes the bleed box for a PDF page. @param bleedBox the bleed box to set (null to remove)
1458 Sets or removes the trim box for a PDF page. @param trimBox the new trim box rectangle or null to remove it
1459 Sets or removes the art box of a PDF page. @param artBox the new art box to set (null to remove)
1460 Sets the contents stream of a PDF page. @param contents PDStream containing page content
1461 Sets metadata for the PDF page. @param meta PDMetadata object containing metadata to be set
1462 Sets additional actions for a PDF page. @param actions PDPageAdditionalActions object containing actions to be set
1463 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
1464 Sets a transition effect and its duration for a PDF page. @param transition the transition effect to apply @param duration the duration of the transition in seconds
1465 Sets the page in the document. @param page PDPage object to be set
1466 Sets the referenced object in the annotation dictionary. @param annotation PDAnnotation object to reference
1467 Sets a referenced object in the PDF dictionary. @param xobject the XObject to reference
1468 Sets the page associated with this PDF object. @param page PDPage object to be set
1469 Sets the parent node in the PDF structure. @param structureNode the parent PDStructureNode to set
1470 Sets the page in the document. @param page PDPage object representing the page to set
1471 Sets attributes for a PDF object. @param attributes collection of attribute objects with revision numbers
1472 Sets the ID tree in the document. @param idTree the structure element node representing the ID tree
1473 Sets the parent tree node in the COS object. @param parentTree PDNumberTreeNode representing the parent tree to set
1474 Sets the annotation's bounding rectangle. @param rectangle defines the new bounding box for the annotation
1475 Sets the border style of an annotation. @param bs the border style dictionary to apply
1476 Sets the border effect dictionary of an annotation. @param be the border effect dictionary to apply
1477 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe area
1478 Sets the fringe rectangle of an annotation. @param fringe PDRectangle representing the new fringe dimensions
1479 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe dimensions
1480 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe area
1481 Sets the FDF dictionary in the PDF document's catalog. @param fdf the FDF dictionary to set (can be null)
1482 Sets the signature in the document's catalog. @param sig PDSignature object to be set
1483 Sets the file specification in the FDF document. @param fs PDFileSpecification object representing the file to be set
1484 Sets JavaScript in FDF document. @param js FDFJavaScript object to be set
1485 Sets the catalog in the PDF document's trailer. @param cat FDFCatalog object to set as the root of the document
1486 Sets the appearance dictionary for the form field. @param ap the appearance dictionary to set (can be null)
1487 Sets the appearance stream reference for a form field. @param ref FDFNamedPageReference object representing the appearance stream
1488 Sets icon fit properties. @param fit FDFIconFit object defining icon fitting behavior
1489 Sets an action for the field. @param a the PDAction to be associated with the field
1490 Sets additional actions for the form field. @param aa PDAdditionalActions object containing actions
1491 Sets the fractional space to allocate. @param space PDRange representing the space allocation
1492 Sets file specification in reference dictionary. @param fs PDFileSpecification object to be set
1493 Sets page information in the PDF document. @param info FDFPageInfo object containing page details
1494 Sets the template reference for an FDF document. @param tRef FDFNamedPageReference object representing the template reference
1495 Sets the font file in the dictionary. @param type1Stream stream containing the font data
1496 Sets the font file 2 stream in the dictionary. @param ttfStream TrueType font stream to set
1497 Sets the font file stream for Type 3 fonts. @param stream the font file stream to be set
1498 Sets the CIDSet stream in the dictionary. @param stream PDStream containing character set data
1499 Sets the white point for a color space. @param whitepoint PDTristimulus object containing color coordinates @throws IllegalArgumentException if whitepoint is null
1500 Sets the black point in the color space. @param blackpoint PDTristimulus representing the black point values
1501 Sets the extended graphics state for the current object. @param extendedGraphicsState the new graphics state to apply
1502 Sets the shading resource. @param shadingResources PDShading object to be set
1503 Sets the resources dictionary for this PDF object. @param resources PDResources object to be set
1504 Sets a new function for the PDF object. @param newFunction the PDFunction to be set
1505 Sets font setting in the dictionary. @param fs PDFontSetting object representing font settings
1506 Sets the destination for a GoToE action. @param d PDDestination object representing the target destination Validates and sets the destination in the COSDictionary.
1507 Sets file specification in the PDF document. @param fs PDFileSpecification object representing the file
1508 Sets the target directory in the PDF document. @param targetDirectory PDTargetDirectory object to be set
1509 Sets the destination for a PDF action. Validates that the destination is a page dictionary if it's a PDPageDestination. @param d the PDDestination object to set
1510 Sets file specification in the action. @param fs file specification to be set
1511 Sets file specification in the PDF document. @param fs file specification to be set
1512 Sets Windows-specific launch parameters. @param win Windows launch parameters object
1513 Sets file specification in the PDF action. @param fs file specification to be set
1514 Sets the file specification in the action. @param fs file specification to be set
1515 Sets file specification in the action. @param fs PDF file specification
1516 Sets the F (File) action in the PDF document. @param action PDAction object representing the file action to be set
1517 Sets an action associated with key 'E'. @param e PDAction object to be set
1518 Sets an action associated with key 'X'. @param x the PDAction to be set
1519 Sets the action dictionary entry for destination. @param d the action to be associated with the 'D' key
1520 Sets the 'U' action in the actions dictionary. @param u the action to be set (can be null)
1521 Sets an action associated with the "FO" key. @param fo the action to associate (can be null)
1522 Sets the "BL" action in the PDF document. @param bl the action to be set (can be null)
1523 Sets the action associated with "PO". @param po the action to be set (can be null)
1524 Sets the page close action. @param pc action to perform on page close
1525 Sets the PV action in the document. @param pv the PDF action to be set (can be null)
1526 Sets the PI action in the document. @param pi PDAction object representing the PI action
1527 Sets the WC action in the document. @param wc the WC action to be set
1528 Sets the workspace action. @param ws the workspace action to set
1529 Sets the DS action in the document. @param ds the PDAction to be set
1530 Sets the WP action in the document. @param wp the action to be set (can be null)
1531 Sets the DP action in the PDF document. @param dp the action to be set (can be null)
1532 Sets the 'K' action in the PDF document. @param k the action to be set (can be null)
1533 Sets the action associated with the 'F' key. @param f PDAction object representing the action to be set
1534 Sets the action associated with the 'V' key in the actions dictionary. @param v the action to be set (can be null)
1535 Sets the C action in the document. @param c the C action to set (can be null)
1536 Sets the "O" action in the actions dictionary. @param o PDAction object representing the action to be set
1537 Sets the action for 'C' key. @param c the action to set (can be null)
1538 Sets the target directory in the dictionary. @param targetDirectory PDTargetDirectory object to be set
1539 Sets or removes a named destination. @param dest the destination to set (null to remove)
1540 Sets the appearance dictionary. @param appearance the new appearance dictionary to set
1541 Sets optional content properties. @param oc PDPropertyList object representing optional content
1542 Sets the page in the document. @param page PDPage object to set
1543 Sets the file specification in the PDF object. @param file PDFileSpecification to be set
1544 Sets border effect dictionary. @param be border effect dictionary to apply
1545 Sets the rectangle difference in the PDF object. @param rd PDRectangle representing the difference
1546 Sets an action in the PDF object. @param action PDAction to be set (can be null)
1547 Sets the border style of the PDF annotation. @param bs border style dictionary to apply
1548 Sets the destination for this action. @param dest PDDestination object representing the target location
1549 Sets the previous URI action. @param pa PDActionURI object representing the URI action
1550 Sets the popup annotation. @param popup the PDAnnotationPopup object to be associated with this annotation
1551 Sets the annotation that this annotation is in reply to. @param irt the PDAnnotation object representing the annotation being replied to
1552 Sets external data in the PDF document. @param externalData the external data dictionary to be set
1553 Sets the border style dictionary for the annotation. @param bs PDBorderStyleDictionary object representing the border style
1554 Sets the border effect dictionary. @param be the border effect dictionary to apply
1555 Sets border effect dictionary. @param be border effect settings to apply
1556 Sets rectangle difference in PDF object. @param rd PDRectangle representing the difference
1557 Sets appearance characteristics for a PDF annotation. @param appearanceCharacteristics dictionary containing appearance properties
1558 Sets an action associated with the PDF object. @param action PDAction to be set
1559 Sets additional actions for an annotation. @param actions PDAnnotationAdditionalActions object containing the actions
1560 Sets the border style of a PDF annotation. @param bs PDBorderStyleDictionary object representing the border style
1561 Sets parent field. @param field the parent PDTerminalField object Throws IllegalArgumentException if field shares same COSObject
1562 Sets the normal appearance of an annotation. @param entry the appearance entry to set
1563 Sets the normal appearance stream. @param ap the appearance stream to set (can be null)
1564 Sets the rollover appearance for a button. @param entry the appearance entry to set
1565 Sets the rollover appearance stream. @param ap the appearance stream to set (can be null)
1566 Sets the down appearance of an annotation. @param entry PDAppearanceEntry representing the appearance to set
1567 Sets the down appearance for the annotation. @param ap PDAppearanceStream object representing the appearance when pressed
1568 Sets the property build filter in the dictionary. @param filter PDPropBuildDataDict object representing the filter
1569 Sets publication security properties in the document. @param pubSec PDPropBuildDataDict containing security settings
1570 Sets the PDPropBuild application in the dictionary. @param app PDPropBuildDataDict object representing the application
1571 Sets the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object to be stored
1572 Sets the property build in the PDF document. @param propBuild the PDPropBuild object to set
1573 Sets the previous sibling node in an outline. @param outlineNode the PDOutlineNode to set as the previous sibling
1574 Sets the next sibling outline node. @param outlineNode the next sibling node to set
1575 Sets the destination within a PDF document. @param dest PDDestination object representing the target location
1576 Sets an action in the PDF object. @param action the action to be set (can be null)
1577 Sets the structure element in the PDF document. @param structureElement the new structure element to be set
1578 Sets the first child of an outline node. @param outlineNode the PDOutlineNode to be set as the first child
1579 Sets the last child node in the outline. @param outlineNode the PDOutlineNode to be set as the last child
1580 Sets default resources in the document. @param dr PDResources object containing default resources
1581 Sets XFA resource in the PDF document. @param xfa the XFA resource to set (can be null)
1582 Sets the signature value. @param value PDSignature object representing the signature @throws IOException if an I/O error occurs while setting the item
1583 Sets default signature value. @param value PDSignature object to be set as default
1584 Sets the seed value for the PDF object. @param sv PDSeedValue object to set
1585 Sets additional actions for a form field. @param actions PDFormFieldAdditionalActions object containing the actions to be set
1586 Sets the list of annotation widgets. @param children list of PDAnnotationWidget objects
1587 Sets the bounding box for the PDF object. @param rectangle PDRectangle representing the bounding box
1588 Sets the measurement dictionary in the PDF document. @param measure PDMeasureDictionary object containing measurement data
1589 Sets thread information in document metadata. @param info document information to store
1590 Sets the thread for a bead. @param thread the thread to associate with the bead
1591 Sets the next bead in the thread. @param next the next PDThreadBead object
1592 Sets the previous thread bead in the current bead. @param previous the previous PDThreadBead to link
1593 Sets the page associated with a bead. @param page the PDPage object to be set
1594 Sets the rectangle for the bead. @param rect the rectangle to be set
1595 Sets the marked status in the PDF dictionary. @param value boolean indicating if the document is marked
1596 Sets user properties flag in PDF dictionary. @param userProps boolean indicating if user properties are enabled
1597 Sets whether a document is marked as suspicious. @param suspect flag indicating suspicion status
1598 Sets whether mouse position tracking is enabled. @param value true to enable, false to disable
1599 Sets the 'Open' status in the PDF dictionary. @param open boolean value indicating whether the item is open or closed
1600 Sets the FD boolean value in the PDF dictionary. @param fd boolean value to set for FD key
1601 Sets the volatile flag of the PDF file. @param fileIsVolatile indicates if the file is volatile
1602 Sets metadata encryption flag. @param encryptMetaData boolean indicating whether to encrypt metadata
1603 Sets the caption visibility in the annotation. @param cap true to show caption, false to hide it
1604 Sets whether to scale annotation to fit. @param value true to enable scaling, false otherwise
1605 Sets the rename flag in the PDF template. @param value boolean indicating whether renaming is enabled
1606 Sets anti-aliasing preference in PDF dictionary. @param antiAlias boolean value for enabling/disabling anti-aliasing
1607 Sets stroking overprint control in PDF dictionary. @param op boolean value for overprint control
1608 Sets non-stroking overprint control in the PDF dictionary. @param op boolean value for overprint control
1609 Sets automatic stroke adjustment in PDF dictionary. @param sa flag to enable or disable automatic stroke adjustment
1610 Sets the alpha source flag in the PDF dictionary. @param alpha the boolean value to set for the alpha source flag
1611 Sets the text knockout flag in the PDF dictionary. @param tk boolean value indicating the text knockout setting
1612 Sets whether to open in a new window based on mode. @param value OpenMode indicating how to open
1613 Sets the open mode for a document. @param value OpenMode indicating how to open the document
1614 Sets the open mode for a PDF document. @param value the desired open mode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1615 Sets whether the action is synchronous. @param synchronous boolean indicating if action should be synchronous
1616 Sets whether the action should repeat. @param repeat true if the action repeats, false otherwise
1617 Sets the mix state in the PDF action. @param mix boolean value indicating the mix setting
1618 Sets the caption visibility in the PDF document. @param cap boolean indicating if the caption should be visible
1619 Sets the "Open" status in the PDF object. @param open boolean indicating whether the item is open or closed
1620 Sets the pre-release flag in the PDF document. @param preRelease boolean indicating if the document is a pre-release version
1621 Sets warning flag for non-embedded fonts. @param noEmbedFontWarning if true, suppresses warnings about non-embedded fonts
1622 Sets trusted mode in the PDF document. @param trustedMode flag indicating if the document is trusted
1623 Sets the need appearances flag in the PDF document. @param value boolean indicating whether to generate appearance streams for form fields
1624 Sets the preference to hide or show the toolbar. @param value true to hide, false to show the toolbar
1625 Sets whether to hide the menu bar in PDF preferences. @param value true to hide, false otherwise
1626 Sets whether to hide window UI in PDF preferences. @param value true to hide window UI, false otherwise
1627 Sets whether to fit window size in PDF viewer. @param value true to enable, false otherwise
1628 Sets whether to center the PDF window. @param value true to center, false otherwise
1629 Sets whether to display document title. @param value true to display, false otherwise
1630 Sets a PDF dictionary entry with the given key and value. @param key unique identifier for the dictionary entry @param value string to convert to PDF name or null to remove entry
1631 Sets the page display mode in a PDF document. @param mode desired page mode (e.g., USE_NONE, SHOW_OUTLINES)
1632 Sets the page layout of a PDF document. @param layout desired page layout configuration
1633 Sets the PDF document version. @param version string representing the document version
1634 Sets the trapped status in PDF document info. @param value valid values: "True", "False", or "Unknown"
1635 Sets or removes the style attribute of a PDF element. @param style CSS-like style string or null to remove the style
1636 Initializes a typed PDF dictionary wrapper. @param type dictionary type identifier
1637 Sets the PDF document's owner. @param owner name of the document owner
1638 Initializes a PDMarkedContentReference with a COSDictionary. Sets the dictionary's type to "MarkedContent".
1639 Initializes a PDF object reference with a dictionary. Sets the "Type" entry in the dictionary.
1640 Sets the structure type of a PDF object. @param structureType type to be assigned to the PDF object
1641 Sets class names with revision numbers in the PDF object. @param classNames Revisions containing class names and their revision numbers
1642 Initializes a structure node with a specified type. @param type PDF structure type
1643 Sets the guideline style in the PDF dictionary. @param style string representing the guideline style
1644 Sets the sub-filter name in the PDF dictionary. @param subfilter name of the sub-filter to be set
1645 Sets the annotation's intent. @param intent string representing the annotation's purpose
1646 Sets the line ending style for an annotation. @param style string representing the line ending style
1647 Sets the icon name for an annotation. @param icon string representing the icon to be used
1648 Sets the PDF document version. @param version string representing the version to be set
1649 Sets the encoding for the FDF document. @param encoding string representing the character encoding
1650 Sets the scale option for PDF fitting. @param option string representing the scaling option
1651 Sets the scaling type of the PDF. @param scale scaling type as string
1652 Initializes a PDF pattern with type set to "Pattern".
1653 Sets the type of the action in the PDF dictionary. @param type string representing the action type
1654 Sets the subtype of an action in a PDF document. @param s subtype string to be set
1655 Sets the subtype of the PDF object. @param subType string representing the subtype to be set
1656 Sets the appearance state of the object. @param as appearance state value to be set
1657 Sets the attachment name in the PDF object. @param name new name for the attachment
1658 Sets the line ending style in a PDF document. @param style string representing the line ending style
1659 Sets the caption positioning in the PDF document. @param captionPositioning string specifying the caption position
1660 Sets the highlight mode in a PDF dictionary. @param mode string representing the highlight mode to be set
1661 Sets the reply type in a PDF document. @param rt string representing the reply type to be set
1662 Sets the intent of a PDF object. @param it string representing the intent
1663 Sets the name of the PDF object. @param name string to be set as the PDF object's name
1664 Sets the name of the PDF object. @param name string to be set as the object's name
1665 Sets the PDF annotation's highlighting mode. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T'
1666 Sets the style of the PDF object. @param s string representing the style to be set
1667 Initializes an external data dictionary with a specific type.
1668 Sets the subtype of a PDF object. @param subtype string representing the subtype to be set
1669 Sets the PDF name in the dictionary. @param name string to be set as the PDF name
1670 Sets the URL type in the PDF dictionary. @param urlType string representing the URL type
1671 Initializes a new PDF document outline. Sets the type dictionary entry to "Outlines".
1672 Initializes a document outline from a dictionary. @param dic the dictionary to initialize with
1673 Initializes a PDMeasureDictionary with a COSDictionary and sets its type.
1674 Sets the subtype of the PDF object. @param subtype string representing the subtype to be set
1675 Initializes a number format dictionary. Constructs and sets up the dictionary with type information.
1676 Sets the name in the PDF object. @param name string to be set as the name
1677 Initializes a new PDTransition with the specified style. @param style transition effect style
1678 Sets the transition dimension in a PDF document. @param dimension specifies the dimension for the transition effect
1679 Sets the transition motion for a PDF document. @param motion PDTransitionMotion object defining the motion effect
1680 Sets the non-full screen page mode preference. @param value the desired non-full screen page mode
1681 Sets the reading direction preference. @param value the new reading direction
1682 Sets the view area preference. @param value boundary type to define the view area
1683 Sets the view clipping preference. @param value boundary value to define the clip area
1684 Sets print area preference. @param value boundary of the print area to be set
1685 Sets print clip boundary preference. @param value new boundary value to apply
1686 Sets the duplex printing preference. @param value duplex mode to apply (e.g., SIMPLEX, DUAL_SIDED_LONG_EDGE)
1687 Sets print scaling preference. @param value desired print scaling option
1688 Sets a date value in the PDF dictionary. @param key unique identifier for the item @param date Calendar object representing the date and time to be stored
1689 Sets a string value in the PDF dictionary using a given key. @param key unique identifier for the item @param value string to be stored (null allowed)
1690 Sets the document's language. @param language ISO 639-1 language code (e.g., "en")
1691 Sets the document title. @param title string to be set as the document's title (null allowed)
1692 Sets the document's author. @param author name of the author to be set (null allowed)
1693 Sets the document's subject. @param subject the subject of the document (null allowed)
1694 Sets document keywords. @param keywords comma-separated list of keywords
1695 Sets the PDF document's creator. @param creator name of the creator application or tool
1696 Sets the PDF producer information. @param producer name of the PDF producer
1697 Sets or removes the prefix key in the PDF dictionary. @param prefix new prefix value (null to remove)
1698 Sets the Unicode file name in the PDF dictionary. @param file Unicode string representing the file name
1699 Sets file path in PDF dictionary. @param file path to be stored
1700 Sets the file description in the PDF document. @param description string describing the file (null allowed)
1701 Sets the element identifier in the PDF object. @param id unique identifier string for the element
1702 Sets the title of the PDF document. @param title string to be set as the document's title
1703 Sets the document's language. @param language ISO 639-1 language code (e.g., "en")
1704 Sets an alternate description for the PDF object. @param alternateDescription alternative text description (null allowed)
1705 Sets the expanded form of the object. @param expandedForm string representation to be stored
1706 Sets the actual text of the PDF object. @param actualText string representing the actual text (null allowed)
1707 Sets the modification date of an annotation. @param date string representing the new modification date
1708 Sets the name of the annotation. @param name new name for the annotation (null allowed)
1709 Sets the annotation's content text. @param contents text to be displayed in the annotation
1710 Sets the title of an annotation. @param title string to be set as the annotation's title
1711 Sets the subject of an annotation. @param subject string to be set as the annotation's subject
1712 Sets the annotation symbol. @param symbol type of symbol to set ("paragraph" or other)
1713 Sets the default appearance for an annotation. @param appearance string defining the annotation's appearance (null allowed)
1714 Sets the default style for an annotation. @param style string representing the style to be applied
1715 Sets the caption style for an annotation. @param captionStyle the style string to apply (null allowed)
1716 Sets the annotation's state. @param state new state value to be set
1717 Sets the state model of an annotation. @param stateModel string representing the state model to be set
1718 Sets the document status in an FDF object. @param status new status value to be assigned
1719 Sets the target string in the FDF document. @param target the target URL or identifier
1720 Sets the partial field name in the PDF form. @param partial the partial field name to be set (null allowed)
1721 Sets the name in the PDF reference. @param name string to be set as the name (null allowed)
1722 Sets the name in the PDF dictionary. @param name string to be stored (null allowed)
1723 Initializes PDOptionalContentProperties with default settings. Sets up a COSDictionary with OCGS and D entries.
1724 Sets the JavaScript action for a PDF element. @param sAction JavaScript code to be executed
1725 Sets the file path in the PDF action dictionary. @param f file path as a string
1726 Sets the "D" field in the PDF action. @param d string value to be assigned to the "D" field
1727 Sets operation value in the PDF action. @param o operation string to be stored
1728 Sets the value of 'P' in the PDF action dictionary. @param p string value to be stored (null allowed)
1729 Sets the URI for an action. @param uri Uniform Resource Identifier to be assigned
1730 Sets the filename in the PDF document. @param filename name of the file to be stored
1731 Sets the annotation's name in the PDF dictionary. @param name the name to be assigned to the annotation
1732 Sets the filename in PDF parameters. @param file name of the file to be stored
1733 Sets the directory path in PDF parameters. @param dir directory path to be stored
1734 Sets the operation string in the PDF parameters. @param op the operation to be stored (null allowed)
1735 Sets execution parameter in PDF. @param param parameter value to be stored
1736 Sets the contents of a PDF object. @param value string to be stored as contents (null allowed)
1737 Sets the modified date of the PDF document. @param m string representing the modified date
1738 Sets the annotation name in the PDF document. @param nm unique identifier for the annotation
1739 Sets the default appearance string in the PDF document. @param daValue string representing the default appearance settings
1740 Sets the default style string in the PDF object. @param defaultStyleString the style string to be applied (null allowed)
1741 Sets the title popup text. @param t string to be set as the title popup (null allowed)
1742 Sets the subject of the document. @param subj the subject string to be set
1743 Sets the state in the PDF object. @param state string representing the new state (null allowed)
1744 Sets the state model in the PDF object. @param stateModel string representing the state model (null allowed)
1745 Sets the normal display caption. @param caption string to be displayed (null allowed)
1746 Sets the rollover caption for an interactive element. @param caption text to display on rollover
1747 Sets an alternate caption for the PDF object. @param caption string to be used as an alternate caption (null allowed)
1748 Sets the date in the PDF dictionary. @param date string representation of the date to be set
1749 Sets the URL in the PDF dictionary. @param url the URL string to be stored
1750 Sets the URL in the PDF dictionary. @param url string representing the URL to be stored (null allowed)
1751 Sets the name in the PDF dictionary. @param name string to be stored (null allowed)
1752 Sets the document's location in the PDF metadata. @param location string representing the document's location (null allowed)
1753 Sets the reason for the signature. @param reason description of why the document was signed
1754 Sets the contact information in the PDF document. @param contactInfo string containing contact details (null allowed)
1755 Sets the document's title metadata. @param title string representing the document title (null allowed)
1756 Sets the default appearance string in the PDF dictionary. @param daValue default appearance settings as a string
1757 Sets default value in PDF object. @param value string to be set as default (null allowed)
1758 Sets the partial name for a PDF field. @param name partial name to be set (cannot contain a period) @throws IllegalArgumentException if name contains a period character
1759 Sets the alternate field name in the PDF dictionary. @param alternateFieldName alternative name for the form field
1760 Sets the mapping name in the PDF dictionary. @param mappingName name to be mapped (null allowed)
1761 Sets the value of a PDF field. @param value string value to be set (null allowed) @throws IOException if an I/O error occurs while setting the value
1762 Sets the value of the PDF object. @param value string to be set (null allowed) @throws IOException if an I/O error occurs
1763 Sets default value for a PDF field. @param value string representing the default value (null allowed)
1764 Sets the default appearance for annotations. @param daValue string representing the default appearance
1765 Sets the scale ratio in the PDF object. @param scaleRatio string representing the scale ratio (null allowed)
1766 Sets an integer value in the PDF dictionary using a string key. @param key unique identifier for the item @param value integer value to store
1767 Sets the structure parent index for a PDF page. @param structParents index of the structure parent
1768 Sets the rotation of the PDF page. @param rotation degrees to rotate the page (0, 90, 180, 270)
1769 Sets the starting page number. @param start positive integer representing the start page
1770 Sets bits per sample in PDF object. @param bps bits per sample value
1771 Sets the Marked Content Identifier (MCID) in the PDF dictionary. @param mcid unique identifier for marked content
1772 Sets the document's revision number. @param revisionNumber non-negative integer representing the revision
1773 Sets the next key in the parent tree. @param parentTreeNextKey unique identifier for the next key
1774 Sets the encryption length in the PDF dictionary. @param length encryption key length to be set
1775 Sets the PDF version. @param version integer representing the PDF version
1776 Sets the length value in the PDF dictionary. @param length integer value representing the length
1777 Sets the revision number in the PDF document. @param revision new revision value to store
1778 Sets document permissions. @param permissions bitmask representing permissions
1779 Sets the page number for an annotation. @param page the page index to set
1780 Sets the justification for a PDF annotation. @param justification text alignment ("centered", "right")
1781 Sets the rotation of an annotation. @param rotation degrees to rotate the annotation (0, 90, 180, or 270)
1782 Sets field flags in PDF. @param ff integer representing field flags
1783 Sets flags for form fields. @param ff integer value representing field flags
1784 Sets clear field flags in PDF. @param ff flag value to set
1785 Sets flags for a widget field. @param f integer representing field flags
1786 Sets widget field flags in the PDF dictionary. @param ff integer value representing the flags to set
1787 Sets clear widget field flags in PDF. @param ff flag value to set
1788 Sets document flags. @param flags integer value representing document flags
1789 Sets character widths in a PDF font dictionary. @param font the font dictionary to modify @param glyphList mapping of glyph names to Unicode characters @throws IOException if an I/O error occurs
1790 Sets the paint type in the pattern dictionary. @param paintType integer value representing the paint type
1791 Sets the pattern type in the PDF dictionary. @param patternType integer representing the pattern type
1792 Sets the paint type in the PDF object. @param paintType integer value representing the paint type
1793 Sets the tiling type in the PDF object. @param tilingType the type of tiling to apply
1794 Sets the shading type in the PDF dictionary. @param shadingType integer representing the shading type
1795 Sets the number of bits per flag in the PDF object. @param bitsPerFlag integer value representing bits per flag
1796 Sets the number of vertices per row in a PDF object. @param verticesPerRow the count of vertices per row
1797 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
1798 Sets the number of bits per coordinate in the PDF object. @param bitsPerCoordinate integer value representing bits per coordinate
1799 Sets the line cap style in the PDF dictionary. @param style integer representing the line cap style
1800 Sets the line join style in the PDF dictionary. @param style integer value representing the line join style
1801 Sets or removes the overprint mode in a PDF document. @param overprintMode integer value representing the overprint mode; null to remove it
1802 Sets action flags. @param flags integer value representing action flags
1803 Sets action flags in the PDF dictionary. @param flags integer value representing action flags
1804 Sets the page number in a PDF dictionary. @param pageNumber the page number to set
1805 Sets the annotation index in the PDF dictionary. @param index new annotation index; removes item if negative
1806 Sets annotation flags. @param flags integer value representing annotation flags
1807 Sets the structure parent index. @param structParent index of the structure parent
1808 Sets the 'q' value in the PDF dictionary. @param q integer value to store
1809 Sets the page rotation in a PDF document. @param rotation degrees to rotate the page (0, 90, 180, or 270)
1810 Sets the P value in the PDF dictionary. @param p integer value to store (must be between 0 and 3)
1811 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
1812 Sets the open count of a PDF document. @param openCount number of times the document has been opened
1813 Sets the quality factor 'q' in the PDF dictionary. @param q quality factor to store
1814 Sets field flags in PDF dictionary. @param flags integer representing field properties
1815 Sets or removes the top index in the PDF document. @param topIndex the new top index value or null to remove it
1816 Sets the maximum length in the PDF object. @param maxLen maximum length value to store
1817 Sets the Q value in the PDF dictionary. @param q integer value to store
1818 Sets a long value in the PDF dictionary using a string key. @param key unique identifier for the item as a string @param value the long value to store
1819 Sets the revision number in the PDF document. @param revision the new revision number to store
1820 Sets the minimum required revision number. @param revision the minimum revision level
1821 Sets a float value in the PDF dictionary using a string key. @param key unique identifier for the item as a string @param value float value to be stored
1822 Sets the user unit for a PDF page. @param userUnit positive float value representing the user unit
1823 Sets the guideline width in the PDF. @param width the width value to be set
1824 Sets the opacity of an annotation. @param opacity float value representing the opacity level
1825 Sets the leader length of an annotation. @param leaderLength float value representing the leader line length
1826 Sets the leader extend value for an annotation. @param leaderExtend float value representing the leader extend
1827 Sets the leader offset for an annotation. @param leaderOffset float value representing the leader offset
1828 Sets the font weight in the PDF dictionary. @param fontWeight numeric value representing the font weight
1829 Sets the italic angle of a font. @param angle the italic angle value to be set
1830 Sets the ascent value in the dictionary. @param ascent font ascent metric
1831 Sets the font descent value. @param descent font descent metric
1832 Sets the leading property in the dictionary. @param leading line spacing value to be set
1833 Sets the cap height of a font. @param capHeight the new cap height value
1834 Sets the x-height of a font. @param xHeight the new x-height value
1835 Sets the vertical stem width. @param stemV float value representing stem width
1836 Sets the horizontal stem height in the dictionary. @param stemH height value to be stored
1837 Sets the average width of characters. @param averageWidth the average width value to be stored in the dictionary
1838 Sets the maximum width of the element. @param maxWidth the maximum width value to be stored
1839 Sets the missing width value in the dictionary. @param missingWidth float value representing the missing width
1840 Sets the X step value in the PDF object. @param xStep float value representing the X step
1841 Sets the vertical step value in the PDF object. @param yStep float value representing the vertical step
1842 Sets the volume level. @param volume float value representing the volume (-1.0 to 1.0) @throws IllegalArgumentException if volume is outside the valid range
1843 Sets the length of the leader line. @param leaderLineLength float value representing the leader line length
1844 Sets the extension length of a leader line. @param leaderLineExtensionLength float value representing the extension length
1845 Sets the leader line offset length. @param leaderLineOffsetLength float value representing the offset length
1846 Sets constant opacity value. @param ca float value representing opacity
1847 Sets the width of a PDF object. @param w width value to be set
1848 Sets the minimum required capability value. @param minimumRequiredCapability float value representing the capability level
1849 Sets the CYX value in the PDF object. @param cyx float value to be stored
1850 Parses a COSStream from a dictionary. @param dic source dictionary containing stream data @return created COSStream object @throws IOException if an I/O error occurs
1851 Clones and merges content from a source object to a target object. @param base the source COSObjectable @param target the destination COSObjectable @throws IOException if an I/O error occurs during cloning
1852 Parses a COSDictionary from the input source. @param isDirect indicates if the dictionary is direct @return COSDictionary object parsed from the source @throws IOException if an I/O error occurs during parsing
1853 Parses the entire content stream into a list of objects. @return List of parsed objects from the stream @throws IOException if an I/O error occurs during parsing
1854 Parses PDF stream to extract glyph bounding box. @return PDRectangle representing the glyph's bounding box or null if not found @throws IOException if an I/O error occurs during parsing
1855 Parses and returns the width from PDF content. @return parsed width as float @throws IOException if parsing fails or unexpected end of stream occurs
1856 Constructs a new PDDocument with an in-memory stream cache.
1857 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing the file specification @return PDFileSpecification instance or null if base is null @throws IOException if the base type is unknown
1858 Creates a new FDF annotation of type "Caret". Initializes the annotation with its specific subtype.
1859 Initializes a new FDF annotation of type circle.
1860 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment".
1861 Initializes a new FDF annotation of type free text.
1862 Initializes a new FDF annotation with subtype set to "INK".
1863 Initializes a new line annotation. Sets the subtype to "Line".
1864 Initializes a new FDF annotation link with subtype set to "Link".
1865 Initializes a new polygon annotation in an FDF document. Sets the subtype to "Polygon".
1866 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
1867 Initializes a new FDF annotation with subtype set to "Sound".
1868 Initializes a new square annotation in an FDF document. Sets the subtype to 'Square'.
1869 Initializes a new FDF annotation stamp. Sets the subtype to "Stamp".
1870 Initializes a new text annotation in an FDF document. Sets the subtype to "Text".
1871 Initializes a new FDF annotation with type set to ANNOT.
1872 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
1873 Builds vertical metrics for CID font. @param cidFont the CID font dictionary to update @throws IOException if input is invalid or processing fails
1874 Initializes a PDSimpleFont object with default settings.
1875 Sets decode values for a PDF object. @param decodeValues array of decode parameters
1876 Sets decode values and updates PDF object. @param decodeValues array of decode parameters
1877 Sets the line width for PDF graphics. @param width the desired line width (null removes the setting)
1878 Sets the miter limit for PDF line joins. @param miterLimit float value specifying the miter limit (null removes it)
1879 Sets the flatness tolerance for PDF rendering. @param flatness float value representing the flatness tolerance
1880 Sets the smoothness tolerance for rendering. @param smoothness float value representing smoothness (null removes it)
1881 Sets the constant stroking alpha value. @param alpha float value representing transparency (0-1)
1882 Sets non-stroking alpha constant. @param alpha transparency value for non-stroking operations
1883 Initializes a new PDF link annotation. Sets the subtype to "Link".
1884 Initializes a markup annotation for PDF documents.
1885 Initializes a PDF annotation popup. Sets the subtype to Popup in the COS object.
1886 Initializes a PDF annotation widget. Sets the subtype to "Widget".
1887 Sets uniform rectangle differences for PDF annotations. @param difference margin difference for all sides
1888 Sets uniform rectangle differences for PDF annotations. @param difference margin difference for all sides
1889 Sets equal rectangle differences for all sides of a PDF object. @param difference uniform margin difference for all sides
1890 Constructs a PDCheckBox instance. @param acroForm the form containing the checkbox
1891 Constructs a PDComboBox instance. @param acroForm the form containing the combo box field
1892 Constructs a PDListBox instance. @param acroForm the form containing the field
1893 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
1894 Initializes line dash pattern with a float array and phase. @param array COSArray representing the dash pattern @param phase initial phase of the dash pattern
1895 Returns string representation of PDRange. Uses min and max values for display. @return formatted string with range bounds
1896 Evaluates input values using a set of instructions. @param input array of float values to be processed @return array of evaluated float values @throws IOException if an I/O error occurs during evaluation
1897 Sets the range for a specific component in a PDF stream. @param range PDRange object defining the min and max values @param n index of the component to set the range for
1898 Reads and processes a patch from an image input stream. @param input the ImageInputStream to read from @param isFree flag indicating if the patch is free @param implicitEdge array of implicit edge points @param implicitCornerColor array of implicit corner colors @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points @return Patch object or null if EOF encountered
1899 Reads and processes a vertex from an image stream. @param input ImageInputStream to read data from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX Range for X coordinates @param rangeY Range for Y coordinates @param colRangeTab Array of ranges for color components @param matrix Matrix for transforming points @param xform AffineTransform for additional point transformation @return Vertex object with processed data @throws IOException if reading fails or invalid parameters are provided
1900 Retrieves the first color from the list. @return PDGamma object representing the first color or null if not found
1901 Retrieves the second color from the list. @return PDGamma object representing the second color or null if not found
1902 Retrieves the starting color from the list of colors. @return PDGamma object representing the start color or null if not found
1903 Retrieves the end color from the color array. @return PDGamma object representing the end color or null if not found
1904 Retrieves the blend mode from the dictionary. @return BlendMode object or NORMAL if not found
1905 Retrieves destination from PDF object. @return PDDestination object or null if not found @throws IOException if destination cannot be created
1906 Retrieves the destination from the PDF object. @return PDDestination object or null if not found @throws IOException if there is an error processing the COSBase object
1907 Retrieves the destination from the PDF object. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
1908 Retrieves the destination from the PDF object. @return PDDestination object or null if not found @throws IOException if there's an issue with retrieving the destination
1909 Creates a Matrix from a COSBase object. @param base input COSBase object @return Matrix initialized with array elements or default Matrix if invalid
1910 Retrieves object from a path in the PDF document. @param objPath path to the object, using '/' as separator @return COSBase object or null if not found
1911 Retrieves a destination from the PDF document. @param name the destination name to look up @return PDDestination object or null if not found @throws IOException if destination cannot be created
1912 Retrieves attribute value by name from PDF object. @param attrName attribute name as a string @return COSBase object or null if not found
1913 Retrieves attribute value by name. @param attrName attribute name as a string @param defaultValue default value to return if attribute not found @return COSBase object or default value if not found
1914 Checks if specified key exists in dictionary. @param name PDF key to check @return true if key exists, false otherwise
1915 Retrieves an array of strings from a PDF dictionary by key. @param name the key for the dictionary object @return array of strings or null if not found or not an COSArray
1916 Sets an array of strings in the PDF object. @param name key for the item to set @param values array of string values to store
1917 Retrieves a dictionary object by name and returns its value as a string or array of strings. @param name key for the dictionary object @param defaultValue default value if not found @return String or String[] representing the value, or defaultValue if not found
1918 Sets an array of PDF names in the dictionary. @param name key for the array in the dictionary @param values array of string values to be converted to COSName
1919 Retrieves a number or name from the dictionary by key. @param name PDF name as a string @param defaultValue default value to return if not found @return float value if COSNumber, String if COSName, or default value
1920 Retrieves a number or array of numbers from the PDF dictionary. @param name key for the value in the dictionary @param defaultValue default float value if not found @return float or float[] based on dictionary content, or null if unspecified and no default
1921 Sets an array of numbers in the PDF dictionary. @param name key for the array in the dictionary @param values float array to be stored
1922 Retrieves PDGamma object by name. @param name key for the gamma values in the dictionary @return PDGamma object or null if not found
1923 Retrieves color array by name and returns corresponding color object. @param name the key for the color dictionary entry @return PDGamma or PDFourColours object based on array size, or null if not found
1924 Retrieves a COSDictionary by primary or secondary key. @param firstKey the primary COSName key to look up in the dictionary @param secondKey the secondary COSName key if primary lookup fails @return COSDictionary object or null if not found or is not a COSDictionary
1925 Retrieves a boolean value from the dictionary. @param firstKey primary COSName key to look up @param secondKey secondary COSName key if primary lookup fails @param defaultValue default value to return if not found @return boolean value or default if not found or is not a COSBoolean
1926 Retrieves an integer value from a dictionary using primary or secondary key. @param firstKey the primary COSName key to look up in the dictionary @param secondKey the secondary COSName key if primary lookup fails @param defaultValue default integer value to return if no valid number is found @return integer value from the dictionary or default if not found
1927 Retrieves a list of filter names from the parameters. @return List of filter names or empty list if none found
1928 Retrieves the color space for the current object. @return PDColorSpace instance or throws IOException if creation fails
1929 Checks if a dictionary represents a PDF catalog. @param dictionary the COSDictionary to check @return true if it's a catalog or FDF, false otherwise
1930 Constructs a PDPageTree from a given COSDictionary and PDDocument. @param root the root dictionary of the page tree @param document the associated PDDocument @throws IllegalArgumentException if the root is null
1931 Determines if a dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1932 Retrieves the cryptographic filter method from the dictionary. @return COSName object representing the cryptographic filter method or null if not found
1933 Retrieves the stream filter name from the dictionary. @return COSName representing the stream filter or IDENTITY if not found
1934 Retrieves the string filter name from the dictionary. @return COSName representing the string filter or IDENTITY if not found
1935 Converts a character code to its Unicode representation. @param code character code to convert @return Unicode string or null if not found
1936 Creates a PDXObject based on the given COSBase and resources. @param base underlying COSBase object @param resources PDResources for resource management @return PDXObject instance or throws IOException if invalid type
1937 Retrieves the subtype of the current object. @return COSName representing the subtype or null if not found
1938 Retrieves the relationship type from the dictionary. @return COSName representing the relationship or null if not found
1939 Retrieves the appearance state of a PDF object. @return COSName representing the appearance state or null if not found
1940 Sets a string value in an embedded PDF dictionary. @param embedded key for the embedded dictionary @param key unique identifier for the item within the dictionary @param value string to be stored (null allowed)
1941 Sets an integer in a nested dictionary. @param embeddedDictionary key to the outer dictionary @param key key for the integer value @param value integer value to store
1942 Checks if the PDF document is encrypted. @return true if the document has an encryption dictionary, false otherwise
1943 Retrieves the encryption dictionary from the PDF trailer. @return COSDictionary containing encryption information or null if not found
1944 Updates page references in a PDF structure tree. @param cloner utility for cloning objects @param parentTreeEntry dictionary containing the current tree entry @param objMapping mapping of original to cloned COSDictionary objects @throws IOException if an I/O error occurs during cloning
1945 Parses the PDF document's initial structure. Retrieves and validates the root dictionary from the trailer. @throws IOException if root object is missing or an I/O error occurs
1946 Parses the PDF trailer and initializes document settings. Throws IOException if root object is missing.
1947 Retrieves or creates document information. @return PDDocumentInformation object containing metadata
1948 Retrieves or creates the PDF document catalog. Initializes using the trailer's root dictionary if available. @return PDDocumentCatalog instance
1949 Retrieves or creates an AcroForm for the document. @param acroFormFixup optional fixup to apply before retrieval @return PDAcroForm object or null if not found
1950 Retrieves and initializes PDViewerPreferences from the document's root dictionary. @return PDViewerPreferences object or null if not found
1951 Retrieves or creates additional actions dictionary. @return PDDocumentCatalogAdditionalActions object for document catalog actions
1952 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1953 Retrieves document name destination dictionary. @return PDDocumentNameDestinationDictionary or null if not found
1954 Retrieves and returns the PDMarkInfo from the document's root dictionary. @return PDMarkInfo object or null if not found
1955 Retrieves and initializes a PDURIDictionary from the root dictionary. @return PDURIDictionary object or null if URI key is not found
1956 Retrieves and initializes the structure tree root. @return PDStructureTreeRoot object or null if not found
1957 Retrieves PDF optional content properties. @return PDOptionalContentProperties object or null if not found
1958 Initializes a PDDocumentNameDictionary from the given document catalog. @param cat the PDDocumentCatalog to extract or create the NAMES dictionary from
1959 Retrieves the destination name tree node. @return PDDestinationNameTreeNode or null if not found
1960 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
1961 Retrieves the JavaScript name tree node. @return PDJavascriptNameTreeNode object or null if not found
1962 Retrieves or creates additional actions for a PDF page. @return PDPageAdditionalActions object representing the page's actions
1963 Retrieves and initializes a PDTransition from the page's COS dictionary. @return PDTransition object or null if not found
1964 Retrieves an indirect COSObject from resources. @param kind type of resource dictionary @param name key for the item in the dictionary @return COSObject if found, otherwise null
1965 Retrieves a dictionary object from resources by kind and name. @param kind the type of resource dictionary to search in @param name the key for the desired COSBase object within the dictionary @return COSBase object or null if not found
1966 Retrieves names of a specific type from resources. @param kind the type of resource to look up @return Iterable of COSName or empty set if not found
1967 Creates a unique PDF name key. @param kind type of resource dictionary @param prefix base string for the key @return COSName with unique key based on prefix and existing keys in dict
1968 Adds an item to a resource dictionary. @param kind the type of resource dictionary @param name the key for the item @param object the value to set (can be null)
1969 Retrieves the page associated with this object. @return PDPage object or null if not found
1970 Retrieves the PDF page associated with this object. @return PDPage object or null if not found
1971 Retrieves and constructs a PDF page. @return PDPage object or null if not found
1972 Retrieves the ID tree node for structure elements. @return PDNameTreeNode containing PDStructureElement or null if not found
1973 Retrieves the parent tree node. @return PDNumberTreeNode object or null if not found
1974 Retrieves and processes the CLASS_MAP from a COSObject. @return Map containing keys and corresponding PDAttributeObjects or lists of PDAttributeObjects
1975 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName the name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
1976 Sets the encryption filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary the crypt filter dictionary to set
1977 Retrieves the border style dictionary of an annotation. @return PDBorderStyleDictionary object or null if not found
1978 Retrieves the border effect dictionary of an annotation. @return PDBorderEffectDictionary object or null if not found
1979 Retrieves and initializes a PDSignature from the document catalog. @return PDSignature object or null if not found
1980 Retrieves JavaScript dictionary from FDF document. @return FDFJavaScript object or null if not found
1981 Retrieves and constructs the appearance dictionary for a field. @return PDAppearanceDictionary object or null if not found
1982 Retrieves the appearance stream reference for a form field. @return FDFNamedPageReference object or null if not found
1983 Retrieves the icon fit settings for a PDF annotation. @return FDFIconFit object or null if not found
1984 Retrieves additional actions for a PDF field. @return PDAdditionalActions object or null if not found
1985 Retrieves page info from a PDF document. @return FDFPageInfo object or null if no info dictionary exists
1986 Retrieves the template reference from a PDF document. @return FDFNamedPageReference object or null if not found
1987 Retrieves CID system info from the dictionary. @return PDCIDSystemInfo object or null if not found
1988 Retrieves PDPanose object from dictionary. @return PDPanose object or null if not found or invalid data
1989 Retrieves or creates PDF resources. @return PDResources object containing page resources
1990 Retrieves the character procedures dictionary. @return COSDictionary containing character procedures or null if not found
1991 Retrieves and initializes colorants from PDF resources. @param resources PDF resource dictionary @return Map of colorant names to PDSeparation objects @throws IOException if an error occurs during creation
1992 Retrieves and initializes the PDDeviceNProcess from the dictionary. @return PDDeviceNProcess object or null if not found
1993 Retrieves render state for a given destination. @param destination the target rendering destination (PRINT, VIEW, or EXPORT) @return RenderState object or null if not found
1994 Retrieves or creates an extended graphics state. @return PDExtendedGraphicsState object or null if not available
1995 Retrieves and initializes PDResources from the PDF object. @return PDResources object or null if not found
1996 Retrieves the target directory from a PDF object. @return PDTargetDirectory object or null if not found
1997 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
1998 Retrieves and initializes the target directory. @return PDTargetDirectory object or null if not found
1999 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
2000 Retrieves a PDF page. @return PDPage object or null if not found
2001 Retrieves and initializes the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2002 Retrieves the border style dictionary of a PDF annotation. @return PDBorderStyleDictionary object or null if not found
2003 Retrieves the previous URI action. @return PDActionURI object or null if not found
2004 Retrieves external data from a PDF object. @return PDExternalDataDictionary containing external data or null if not present
2005 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
2006 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2007 Retrieves the border effect dictionary from the current object. @return PDBorderEffectDictionary instance or null if not found
2008 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
2009 Retrieves additional actions for the annotation. @return PDAnnotationAdditionalActions object or null if none exist
2010 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found
2011 Retrieves the normal appearance of a PDF annotation. @return PDAppearanceEntry object for normal appearance or null if not found
2012 Retrieves the filter property as a PDPropBuildDataDict. @return PDPropBuildDataDict object or null if not found
2013 Retrieves public security settings from the dictionary. @return PDPropBuildDataDict object or null if not found
2014 Retrieves the application properties from a PDF document. @return PDPropBuildDataDict object containing app properties or null if not found
2015 Retrieves the MDP seed value from the PDF document. @return PDSeedValueMDP object or null if not found
2016 Retrieves the seed value certificate from the dictionary. @return PDSeedValueCertificate object or null if not found
2017 Retrieves the time stamp from the PDF dictionary. @return PDSeedValueTimeStamp object or null if not found
2018 Retrieves a PDPropBuild object from the dictionary. @return PDPropBuild object or null if not found
2019 Retrieves and initializes a structure element from the PDF object. @return PDStructureElement object or null if not found
2020 Checks if the PDF object has child nodes. @return true if there are children, false otherwise
2021 Retrieves default resources from the PDF document. @return PDResources object or null if not found
2022 Retrieves additional form field actions. @return PDFormFieldAdditionalActions object or null if not found
2023 Retrieves the signature value from the PDF object. @return PDSignature object or null if not found
2024 Retrieves default signature from PDF object. @return PDSignature object or null if not found
2025 Retrieves the seed value from a PDF object. @return PDSeedValue object or null if not found
2026 Retrieves the measure dictionary from a PDF object. @return PDMeasureDictionary or null if not found
2027 Retrieves document information from a thread. @return PDDocumentInformation object or null if not found
2028 Retrieves the first bead from a PDF thread. @return PDThreadBead object or null if not found
2029 Retrieves and constructs a PDThread from the bead's dictionary. @return PDThread object or null if not found
2030 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
2031 Retrieves the previous thread bead. @return PDThreadBead object representing the previous bead or null if not found
2032 Retrieves and constructs a PDF page. @return PDPage object or null if dictionary not found
2033 Retrieves PDF metadata. @return PDMetadata object or null if not found
2034 Retrieves and initializes the metadata for a PDF page. @return PDMetadata object or null if no metadata is found
2035 Retrieves differences stream from FDF document. @return COSStream object containing differences or null if not found
2036 Retrieves font file stream from dictionary. @return PDStream object or null if not found
2037 Retrieves font file 2 stream. @return PDStream object or null if not found
2038 Retrieves font file 3 as a PDStream. @return PDStream object or null if not found
2039 Retrieves CID set stream from the dictionary. @return PDStream object or null if not found
2040 Retrieves sound stream from action. @return COSStream object representing sound or null if not found
2041 Retrieves the normal icon from a PDF form. @return PDFormXObject representing the normal icon or null if not present
2042 Retrieves the rollover icon from a PDF form. @return PDFormXObject representing the rollover icon or null if not found
2043 Retrieves the alternate icon as a PDFormXObject. @return PDFormXObject representing the alternate icon or null if not found
2044 Retrieves appearance subdictionary streams. @throws IllegalStateException if not an appearance subdictionary @return Map of COSName to PDAppearanceStream objects
2045 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
2046 Writes the PDF document trailer. @param doc the COSDocument to write the trailer for @throws IOException if I/O error occurs during writing
2047 Retrieves or creates a list of PDThread objects. @return List of PDThread objects
2048 Retrieves a list of PDOutputIntent objects from the document. @return List of PDOutputIntent objects or an empty list if none found
2049 Adds an output intent to the document. @param outputIntent PDOutputIntent object to add
2050 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing thread beads
2051 Retrieves viewport dictionaries from a PDF page. @return List of PDViewportDictionary objects or null if none found
2052 Extracts and returns the list of child dictionaries (kids) from a given PDF node. @param node the COSDictionary representing the PDF node @return List of COSDictionary objects, or empty list if no kids are found
2053 Retrieves child nodes from a PDF name tree node. @return List of PDNameTreeNode objects representing children
2054 Retrieves and converts a map of names from a COSArray. @return Map<String, T> with key-value pairs or null if array is not found
2055 Retrieves the upper limit value from a COSArray. @return String containing the upper limit or null if not found
2056 Sets the upper limit in a COSArray. @param upper the upper limit string to set
2057 Retrieves the lower limit value from a COSArray. @return string representing the lower limit or null if not found
2058 Sets the lower limit in a COSArray. @param lower the string value for the lower limit
2059 Retrieves child nodes from the current node. @return List of PDNumberTreeNode objects representing child nodes
2060 Parses a COSArray of numbers and converts them to a map. @return Unmodifiable map of integers to COSObjectable or null if parsing fails
2061 Retrieves the upper limit from a COSArray. @return Integer value representing the upper limit or null if not found
2062 Sets the upper limit in a COSArray. @param upper the upper limit value (can be null)
2063 Retrieves the lower limit from a COSArray. @return the integer value of the lower limit or null if not found
2064 Sets the lower limit in a PDF node's limits array. @param lower the integer value for the lower limit or null to clear it
2065 Retrieves the range values as a COSArray. @return COSArray containing range values or null if not found
2066 Retrieves the domain values as a COSArray. Caches the result for future calls. @return COSArray containing domain values or null if not found
2067 Retrieves the SIZE array from the PDF object. @return COSArray representing the size or null if not found
2068 Retrieves or constructs the decode array for a PDF object. @return COSArray containing decode values, defaulting to range values if not found
2069 Retrieves the COSArray of functions. @return COSArray containing function objects or null if not found
2070 Retrieves the bounds array for the object. @return COSArray containing bounds data or null if not found
2071 Retrieves the Encode array. @return COSArray object representing the Encode or null if not found
2072 Retrieves owner user properties from a PDF document. @return List of PDUserProperty objects representing the owner properties
2073 Adds a user property to the PDF document. @param userProperty the PDUserProperty object to add
2074 Removes a user property from the document. @param userProperty the PDUserProperty to remove
2075 Retrieves or creates the guideline color from the dictionary. @return PDColor object representing the guideline color
2076 Checks if an edge is attached. @param edge the edge to check for attachment @return true if edge is found in attached list, false otherwise
2077 Retrieves color from annotation. @return Color object or null if not available
2078 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2079 Retrieves callout coordinates as a float array. @return float[] containing callout coordinates or null if not found
2080 Retrieves ink list from annotation. @return List of float arrays representing ink data or null if not found
2081 Retrieves line coordinates from annotation. @return float[] of line coordinates or null if not available
2082 Sets the starting point ending style for a line annotation. @param style the style to apply (null defaults to LE_NONE)
2083 Retrieves the starting point ending style of an annotation. @return String representing the ending style or LE_NONE if not found
2084 Sets the end point style of a line annotation. @param style the ending style to apply (null for default)
2085 Retrieves the ending style of an annotation's line. @return String representing the line ending style or default if not found
2086 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2087 Sets the horizontal offset for the annotation caption. @param offset the horizontal offset value
2088 Retrieves horizontal offset for annotation caption. @return float value representing the offset, or 0 if not found
2089 Sets the vertical offset for a caption annotation. @param offset the vertical offset value
2090 Retrieves vertical offset for caption. @return float value representing vertical offset or 0 if not found
2091 Retrieves vertices as a float array from annotation. @return float[] containing vertex coordinates or null if not found
2092 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2093 Retrieves vertices as a float array from annotation. @return float[] containing vertex coordinates or null if not found
2094 Sets the starting style of a line annotation. @param style the style to apply (can be null for default)
2095 Retrieves the ending style of a line annotation. @return String representing the ending style or default if not found
2096 Sets the end point style for a line annotation. @param style the desired style (null sets to default)
2097 Retrieves the line ending style of an annotation. @return String representing the line ending style or default value if not found
2098 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
2099 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not available
2100 Retrieves quadrilateral coordinates for annotation. @return float[] containing 8 float values representing the coords or null if not found
2101 Retrieves the ID array from the FDF document. @return COSArray containing the ID or null if not found
2102 Retrieves all FDF fields. @return List of FDFField objects or null if no fields are found
2103 Retrieves a list of FDFPage objects. @return List of FDFPage or null if no pages are found
2104 Retrieves child fields of a PDF form field. @return List of FDFField objects or null if no children exist
2105 Retrieves options from a PDF field. @return List of option strings or FDFOptionElement objects, or null if none found
2106 Retrieves templates from a PDF page. @return List of FDFTemplate objects or null if no templates are found
2107 Retrieves FDF form fields from the template. @return List of FDFField objects or null if no fields are found
2108 Retrieves and caches character widths from the dictionary. @return List<Float> of character widths or empty list if not found
2109 Retrieves the white point of a color space. @return PDTristimulus object representing the white point
2110 Retrieves or creates the black point for a color space. @return PDTristimulus object representing the black point
2111 Retrieves or creates the gamma array for a PDF document. @return PDGamma object representing the gamma values
2112 Retrieves the transformation matrix from a dictionary. @return float[] representing the matrix values or identity matrix if not found
2113 Retrieves a list of component names from the dictionary. @return List of component names or an empty list if not found
2114 Retrieves or creates a default PDF range. @return PDRange object representing the range
2115 Retrieves the B-Range from a PDF dictionary. @return PDRange object representing the B-Range or default if not found
2116 Retrieves the background array from the PDF dictionary. @return COSArray representing the background or null if not found
2117 Retrieves the domain as a COSArray. @return COSArray representing the domain or null if not found
2118 Retrieves or creates the EXTEND array. @return COSArray object for EXTEND or null if not found
2119 Retrieves the domain array from a PDF object. @return COSArray representing the domain or null if not found
2120 Retrieves the coordinates array. @return COSArray object containing coordinates or null if not found
2121 Retrieves or creates the DECODE array for this PDF object. @return COSArray representing DECODE values, may be null if not found
2122 Retrieves and initializes a PDFontSetting from the dictionary. @return PDFontSetting object or null if not found
2123 Retrieves the fields array from the action. @return COSArray containing form fields or null if not found
2124 Retrieves the fields array from the action dictionary. @return COSArray of form fields or null if not found
2125 Retrieves or constructs the border array for a PDF object. @return COSArray representing the border with at least three elements
2126 Retrieves rectangle differences as a float array. @return float[] containing rectangle difference values or empty if not found
2127 Retrieves rectangle differences from a PDF object. @return float array of rectangle difference values or empty array if not found
2128 Retrieves and converts the callout array from a COS object. @return float[] containing callout values or null if not found
2129 Retrieves the ink list from a PDF object. @return 2D float array representing the ink list or empty if not found
2130 Retrieves line coordinates from a PDF object. @return float array of line coordinates or null if not found
2131 Sets the starting style of a line annotation. @param style the style to apply; defaults to LE_NONE if null
2132 Retrieves the start point ending style from a COSArray. @return String representing the start point ending style or default value if not found
2133 Sets the end point ending style of an annotation line. @param style the ending style to apply (can be null)
2134 Retrieves the endpoint ending style from a COSArray. @return String representing the endpoint style or default value if not found
2135 Sets the horizontal offset for a caption. @param offset the horizontal offset value
2136 Retrieves the horizontal offset of a caption. @return float value representing the horizontal offset, defaulting to 0 if not found
2137 Sets the vertical offset for captions. @param offset the vertical offset value to be set
2138 Retrieves the vertical offset of a caption. @return float value representing vertical offset or 0 if not found
2139 Retrieves quad points as a float array. @return float[] containing quad point coordinates or null if not found
2140 Retrieves vertex coordinates as a float array. @return float[] containing vertex coordinates or null if not found
2141 Retrieves and converts the PATH COSArray to a 2D float array. @return 2D float array representing the path or null if not found
2142 Sets the starting style of a line annotation. @param style the starting style string or null for default
2143 Retrieves the starting point ending style of a line annotation. @return string representing the ending style or default if not found
2144 Sets the ending style for a line annotation. @param style the ending style string or null for no style
2145 Retrieves the endpoint style of a line annotation. @return String representing the endpoint style or default if not found
2146 Retrieves vertex coordinates as a float array. @return float[] of vertex coordinates or null if not found
2147 Retrieves rectangle differences as a float array. @return float[] containing rectangle difference values or empty if not found
2148 Retrieves quad points for annotation. @return float[] containing quad point coordinates or null if not found
2149 Sets or clears the OS information in the PDF document. @param os operating system name or null to remove
2150 Retrieves sub-filter names from the dictionary. @return List of sub-filter strings or empty list if not found
2151 Retrieves a list of digest method names from the dictionary. @return List of digest method strings or empty list if not found
2152 Retrieves a list of reason strings from the dictionary. @return List of reason strings or empty list if not found
2153 Retrieves legal attestation names from the dictionary. @return List of legal attestation strings or empty list if not found
2154 Retrieves subject data from PDF dictionary. @return List of byte arrays representing the subject or null if not found
2155 Adds a subject to the PDF document. @param subject byte array representing the subject to add
2156 Removes a subject from the document's metadata. @param subject byte array representing the subject to remove
2157 Retrieves key usage extensions from the dictionary. @return List of key usage extension strings or null if not found
2158 Adds a key usage extension to the PDF document. @param keyUsageExtension string containing '0', '1', or 'X' characters @throws IllegalArgumentException if invalid character is found
2159 Removes a key usage extension from the certificate's dictionary. @param keyUsageExtension the key usage extension to remove
2160 Retrieves issuer information as a list of byte arrays. @return List of byte arrays representing the issuer or null if not found
2161 Adds an issuer to the dictionary. @param issuer byte array representing the issuer
2162 Removes an issuer from the certificate's issuer list. @param issuer byte array representing the issuer to remove
2163 Retrieves a list of byte arrays from the OID field. @return List of byte arrays or null if OID is not found
2164 Adds an OID to the PDF dictionary. @param oid byte array representing the OID to add
2165 Removes an OID from the dictionary's COSArray. @param oid byte array representing the OID to remove
2166 Retrieves the byte range from a dictionary. @return int array representing the byte range or empty array if not found
2167 Retrieves or creates the text color for a PDF object. Uses PDColor and COSArray to manage color values. @return PDColor representing the text color
2168 Retrieves the calculation order of form fields. @return List of PDField objects in calculation order or empty list if none found
2169 Retrieves selected options index as a list of integers. @return List<Integer> representing the indices or empty list if none found
2170 Retrieves number format dictionaries for changes. @return array of PDNumberFormatDictionary or null if not found
2171 Retrieves an array of PDNumberFormatDictionary objects. @return Array of PDNumberFormatDictionary or null if none found
2172 Retrieves number format dictionaries for distances. @return array of PDNumberFormatDictionary or null if not found
2173 Retrieves number format areas from the PDF document. @return array of PDNumberFormatDictionary objects or null if not found
2174 Retrieves an array of number format dictionaries. @return PDNumberFormatDictionary[] or null if not found
2175 Retrieves line slope number format dictionaries. @return array of PDNumberFormatDictionary or null if not found
2176 Retrieves the coordinate system origin as a float array. @return float[] representing the origin coordinates or null if not found
2177 Retrieves visibility policy from dictionary. @return COSName representing visibility or default value if not found
2178 Converts a string key to its corresponding PDF name as a string. @param key the string key to convert @return PDF name as a string or null if not applicable
2179 Retrieves a string value by key or returns a default. @param key the COSName key to look up in the dictionary @param defaultValue the default string to return if key is not found @return String representation of the dictionary value or default if null
2180 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset in the PDF file @return true if valid XRef stream, false otherwise
2181 Retrieves the page mode from a PDF document. @return PageMode enum instance or USE_NONE if invalid or not set
2182 Retrieves and converts the page layout from a PDF document. @return PageLayout enum or SINGLE_PAGE if invalid or not found
2183 Retrieves the version from the PDF document. @return version as a string or null if not found
2184 Retrieves trapped status from PDF document information. @return String representation of trapped status or null if not applicable
2185 Retrieves the style value from the PDF document. @return String representation of the style or null if not found
2186 Retrieves the type of the PDF object. @return String representation of the PDF object's type or null if not applicable
2187 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary the COSDictionary containing attribute data @return PDAttributeObject instance or default implementation if not recognized
2188 Retrieves the owner name from the PDF document. @return Owner's name as a string or null if not found
2189 Retrieves the structure type of the PDF object. @return String representation of the structure type or null if not applicable
2190 Creates a PDStructureNode based on the dictionary type. @param node COSDictionary representing the structure node @return PDStructureTreeRoot if type is "StructTreeRoot", otherwise PDStructureElement @throws IllegalArgumentException if type is neither "StructTreeRoot" nor "StructElem"
2191 Retrieves the type of the PDF object. @return String representing the type or null if not applicable
2192 Retrieves the name associated with the PDF object. @return String representation of the name or null if not applicable
2193 Retrieves the language from PDF properties. @return Language string or null if not set
2194 Retrieves the type property from PDF object properties. @return String representation of the type or null if not found
2195 Retrieves the subtype of a PDF object. @return String representation of the subtype or null if not applicable
2196 Retrieves filter name from PDF dictionary. @return String representation of the filter or null if not found
2197 Retrieves the sub-filter type from the PDF document. @return String representing the sub-filter or null if not found
2198 Creates an FDF annotation based on the given COS dictionary. @param fdfDic COS dictionary representing the annotation @return FDFAnnotation object or null if unsupported type
2199 Retrieves the intent of an annotation. @return String representation of the annotation's intent or null if not applicable
2200 Retrieves the line ending style of an annotation. @return String representation of the line ending style or null if not applicable
2201 Retrieves version information from the PDF document. @return Version string or null if not available
2202 Retrieves the encoding type from an FDF document. @return String representing the encoding, defaulting to "PDFDocEncoding"
2203 Retrieves the scale option for a PDF page. @return String representing the scale option, defaulting to SCALE_OPTION_ALWAYS if not specified
2204 Retrieves the scale type of a PDF object. @return String representing the scale type, defaulting to proportional if not specified
2205 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
2206 Retrieves the type of the dictionary. @return Type as a string or null if not found
2207 Retrieves the subtype of a PDF object. @return String representing the subtype or null if not found
2208 Retrieves the font name from the dictionary. @return Font name as a string or null if not found
2209 Retrieves the font stretch value from the dictionary. @return String representation of the font stretch or null if not applicable
2210 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
2211 Retrieves the base font name from the dictionary. @return String representation of the base font or null if not found
2212 Retrieves the base font name from the dictionary. @return String representation of the base font or null if not found
2213 Retrieves the base font name from the dictionary. @return String representation of the base font or null if not found
2214 Checks if the dictionary represents an NChannel. @return true if the subtype is "NChannel", false otherwise
2215 Retrieves the type of an action. @return Type as string or null if not applicable
2216 Retrieves the subtype of an action. @return String representation of the subtype or null if not applicable
2217 Creates a PDAction based on the action type. @param action COSDictionary representing the PDF action properties @return PDAction object or null if unsupported type
2218 Retrieves the subtype of a PDF object. @return Subtype as a string or null if not found
2219 Retrieves the caption positioning as a string. @return String representation of the caption positioning or null if not applicable
2220 Retrieves the intent of the PDF object. @return String representation of the intent or null if not applicable
2221 Retrieves the subtype of a PDF object. @return String representing the subtype or null if not found
2222 Retrieves the name from the dictionary. @return String representation of the 'NAME' key value or null if not applicable
2223 Retrieves the filter name from the PDF dictionary. @return String representation of the filter or null if not found
2224 Retrieves the URL type from the dictionary. @return String representation of the URL type or null if not applicable
2225 Retrieves the filter name from the PDF dictionary. @return Filter name as a string or null if not found
2226 Retrieves the SubFilter value from the dictionary. @return String representation of the SubFilter or null if not found
2227 Retrieves the field type of a PDF form field. @return String representing the field type or null if not found
2228 Retrieves the name from a COS object. @return String representation of the name or null if not applicable
2229 Retrieves duplex setting from preferences. @return String representation of duplex mode or null if not set
2230 Retrieves string value from PDF dictionary by key. @param key the key to look up in the dictionary @return String representation of the value or null if not found
2231 Retrieves string value from dictionary by key or returns default. @param key the COSName key to look up in the dictionary @param defaultValue the value to return if key is not found @return String representation of the value or default if not found
2232 Retrieves the language attribute from the PDF document. @return Language string or null if not found
2233 Retrieves the title from PDF document information. @return Title of the PDF or null if not found
2234 Retrieves the author of the document. @return Author name as a String or null if not found
2235 Retrieves the subject of the document. @return Subject string or null if not found
2236 Retrieves keywords from document metadata. @return String containing keywords or null if not found
2237 Retrieves the creator of the PDF document. @return Creator string or null if not found
2238 Retrieves the producer information from the PDF document. @return Producer string or null if not found
2239 Retrieves the prefix value from the PDF document. @return String representation of the prefix or null if not found
2240 Retrieves Unicode file name. @return File name in Unicode or null if not found
2241 Retrieves file name from PDF dictionary. @return String representation of the file or null if not found
2242 Retrieves DOS file attribute. @return String representation of the DOS attribute or null if not found
2243 Retrieves the MAC value from the file system. @return MAC string or null if not found
2244 Retrieves UNIX file name from PDF dictionary. @return File name as string or null if not found
2245 Retrieves file description from PDF metadata. @return Description of the file or null if not found
2246 Retrieves the identifier of the element. @return String representation of the ID or null if not found
2247 Retrieves the title of the PDF document. @return Title as a string or null if not found
2248 Retrieves the language attribute from the PDF object. @return Language string or null if not found
2249 Retrieves alternate description from PDF object. @return String representation of alternate description or null if not found
2250 Retrieves the expanded form string from the COS object. @return Expanded form as a String or null if not found
2251 Retrieves actual text from PDF object. @return String representation of the actual text or null if not found
2252 Retrieves formatted value from COS object. @return Formatted string or null if not found
2253 Retrieves actual text from PDF properties. @return Actual text as a String or null if not found
2254 Retrieves alternate description from PDF properties. @return Alternate description string or null if not found
2255 Retrieves expanded form from properties. @return Expanded form as a String or null if not found
2256 Retrieves date string from annotation. @return Date string or null if not found
2257 Retrieves the name of the annotation. @return Name as a string or null if not found
2258 Retrieves the contents of an annotation. @return String content or null if not found
2259 Retrieves the title of an annotation. @return Title string or null if not found
2260 Retrieves the subject of an annotation. @return Subject string or null if not found
2261 Retrieves symbol from annotation dictionary. @return Symbol string or null if not found
2262 Retrieves rotation angle of annotation. @return String representing rotation angle or null if not set
2263 Retrieves default appearance string from annotation. @return default appearance string or null if not found
2264 Retrieves default style from annotation. @return default style string or null if not found
2265 Retrieves caption style from annotation. @return String representation of the caption style or null if not found
2266 Retrieves the state of an annotation. @return State string from the annotation or null if not found
2267 Retrieves the state model of an annotation. @return State model as a string or null if not found
2268 Retrieves the status from an FDF document. @return String representation of the status or null if not found
2269 Retrieves target string from FDF document. @return Target URL or null if not found
2270 Retrieves partial field name from PDF dictionary. @return Partial field name as string or null if not found
2271 Retrieves the name from the PDF object. @return Name string or null if not found
2272 Retrieves the font family from the dictionary. @return Font family as a string or null if not found
2273 Retrieves character set from dictionary. @return Character set as string or null if not found
2274 Retrieves the name from the dictionary. @return String value associated with COSName.NAME or null if not found
2275 Retrieves group names from PDF document. @return array of group names or empty array if none found
2276 Retrieves the "F" value from the action dictionary. @return The string value associated with key COSName.F or null if not found
2277 Retrieves the "D" value from the action dictionary. @return String representation of the "D" value or null if not found
2278 Retrieves the "O" value from the PDF action dictionary. @return String representation of the "O" value or null if not found
2279 Retrieves the value of "P" from the action dictionary. @return String value associated with key "P" or null if not found
2280 Retrieves URI from PDF action. @return URI string or null if not found
2281 Retrieves filename from PDF dictionary. @return Filename as string or null if not found
2282 Retrieves annotation name from dictionary. @return String representation of the annotation name or null if not found
2283 Retrieves filename from PDF parameters. @return Filename as string or null if not found
2284 Retrieves directory path from PDF parameters. @return Directory path as a string or null if not found
2285 Retrieves execute parameter from PDF dictionary. @return String value of 'P' key or null if not found
2286 Retrieves contents from the PDF dictionary. @return String representation of the contents or null if not found
2287 Retrieves the modified date of the PDF object. @return the modified date as a string or null if not found
2288 Retrieves annotation name from PDF object. @return String representation of the annotation name or null if not found
2289 Retrieves default appearance string from PDF dictionary. @return Default appearance string or null if not found
2290 Retrieves default style string from PDF document. @return default style as String or null if not found
2291 Retrieves title popup text. @return Title popup string or null if not found
2292 Retrieves the subject of a PDF document. @return The subject as a String or null if not found
2293 Retrieves the state value from the PDF object. @return State as a string or null if not found
2294 Retrieves state model from PDF COS object. @return String value of state model or null if not found
2295 Retrieves the normal caption from the PDF dictionary. @return The string value of the "CA" key or null if not found
2296 Retrieves the rollover caption from PDF annotations. @return Rollover caption as a string or null if not found
2297 Retrieves alternate caption from PDF object. @return String representing the alternate caption or null if not found
2298 Retrieves date string from the PDF dictionary. @return Date string or null if not found
2299 Retrieves the operating system information from a PDF document. @return OS name as a String or null if not found
2300 Extracts subject DN information from a PDF dictionary. @return List of maps containing key-value pairs for each subject DN entry, or null if not found
2301 Retrieves URL from PDF dictionary. @return URL string or null if not found
2302 Retrieves URL from the dictionary. @return URL string or null if not found
2303 Retrieves the name from the dictionary. @return Name string or null if not found
2304 Retrieves location from PDF document metadata. @return Location string or null if not found
2305 Retrieves the reason associated with the document. @return String containing the reason or null if not found
2306 Retrieves contact information from the dictionary. @return String representation of contact info or null if not found
2307 Retrieves the title from the PDF document. @return Title of the document or null if not found
2308 Retrieves partial name from PDF dictionary. @return Partial name as string or null if not found
2309 Retrieves the alternate field name from the dictionary. @return String representation of the alternate field name or null if not found
2310 Retrieves the mapping name from the dictionary. @return String value associated with COSName.TM or null if not found
2311 Retrieves default style string from PDF object. @return String representation of the default style or null if not found
2312 Retrieves scale ratio from PDF object. @return Scale ratio as string or null if not found
2313 Retrieves a date from the PDF dictionary using a string key. @param key the PDF name string for the date field @return Calendar object representing the date or null if not found or invalid
2314 Retrieves a date from the PDF dictionary with a default value. @param key the COSName key for the date field @param defaultValue Calendar object to use if no date is found @return Calendar object representing the date or the provided default value
2315 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
2316 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
2317 Retrieves the creation date of an annotation. @return Calendar object representing the creation date or null if not found
2318 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
2319 Retrieves the signing date from the PDF document. @return Calendar object representing the signing date or null if not found
2320 Retrieves a long value from the PDF dictionary by key. @param key the PDF name string to look up in the dictionary @return long value associated with the key or -1 if not found
2321 Retrieves a long value from the dictionary by key. @param key the COSName key to look up in the dictionary @return long value associated with the key or default value of -1 if not found
2322 Retrieves a long value from a PDF dictionary by key. @param key the key string to look up in the dictionary @param defaultValue default value to return if key not found or is not a COSNumber @return long value associated with the key or default value
2323 Decodes an input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects for decoding @param parameters COSDictionary with decoding parameters @param options DecodeOptions for additional configuration @param results List to store DecodeResult objects (optional) @return RandomAccessRead buffer with decoded output @throws IOException if an I/O error occurs during decoding
2324 Sets the startxref byte position and constructs the XRef trailer. @param startxrefBytePosValue the starting byte position of xref
2325 Retrieves a float value from the PDF dictionary. @param key the PDF name string to look up in the dictionary @return float value associated with the key or -1 if not found
2326 Retrieves a float value from the dictionary. @param key the COSName key to look up in the dictionary @return float value associated with the key or default value of -1 if not found
2327 Retrieves a float value from PDF dictionary using a string key. @param key string representation of the PDF name key @param defaultValue default value if key not found or not a number @return float value associated with the key or default value
2328 Retrieves the user unit from a PDF page. @return positive user unit value or default of 1.0 if not set
2329 Retrieves the guideline width from the PDF dictionary. @return float value representing the guideline width or default of 1 if not found
2330 Retrieves the opacity of an annotation. @return float representing the opacity value (default is 1.0)
2331 Retrieves the font weight from the dictionary. @return float value representing font weight or 0 if not found
2332 Retrieves the italic angle of the font. @return italic angle as a float, defaulting to 0 if not found
2333 Retrieves the ascent value from the dictionary. @return float representing the ascent value or 0 if not found
2334 Retrieves the descent value from the dictionary. @return float representing the descent value or 0 if not found
2335 Retrieves the leading value from the dictionary. @return float representing the leading value or 0 if not found
2336 Retrieves or calculates the capital height of a font. @return float value representing the capital height
2337 Retrieves X height of font. @return absolute X height value from dictionary or default if not found
2338 Retrieves the stem vertical width from the dictionary. @return stem vertical width as a float or 0 if not found
2339 Retrieves stem height from dictionary. @return float value representing stem height or default of 0 if not found
2340 Retrieves the average width of characters. @return average width as a float or 0 if not specified
2341 Retrieves maximum width from dictionary. @return float value representing max width or 0 if not found
2342 Retrieves the missing width value from the dictionary. @return float value representing the missing width or 0 if not found
2343 Retrieves gamma value from PDF dictionary. @return float representing gamma value or default of 1.0 if not found
2344 Retrieves the X step value from the PDF object. @return float value of X step or 0 if not found
2345 Retrieves the Y step value from the PDF object. @return Y step as a float or 0 if not found
2346 Retrieves and clamps the volume value from an action. @return clamped volume between -1 and 1, defaulting to 1 if out of range
2347 Retrieves the leader line length from the PDF object. @return float value representing the leader line length or default (0) if not found
2348 Retrieves the leader line extension length. @return float value representing the leader line extension length or 0 if not found
2349 Retrieves the leader line offset length. @return float value representing the offset length or 0 if not found
2350 Retrieves constant opacity value. @return float representing opacity or default value 1 if not found
2351 Retrieves the width value from a PDF dictionary. @return float representing the width or default value of 1 if not found
2352 Retrieves the duration from the PDF object. @return duration as a float or default value of 1 if not found
2353 Retrieves the fly scale factor from the PDF object. @return float value representing the fly scale or default value of 1 if not found
2354 Writes an Operator to the output stream. @param op Operator object to write @throws IOException if an I/O error occurs
2355 Extracts text regions from a PDF page. @param page the PDPage to extract regions from @throws IOException if an I/O error occurs during processing
2356 Retrieves and converts the role map from a PDF object. @return Map containing key-value pairs of the role map or an empty map if not found
2357 Appends a COSObjectable kid to the list. @param objectable the COSObjectable object to append
2358 Inserts a COSObjectable before a specified reference object. @param newKid the new item to insert, must not be null @param refKid the reference item before which to insert
2359 Removes an objectable's COSBase kid. @param objectable the object to process @return true if successfully removed, false otherwise
2360 Sets new value and notifies if changed. @param value the new value to set (can be null)
2361 Retrieves or creates the color space from PDF resources. @return PDColorSpace instance or null if not found @throws IOException if an error occurs during creation
2362 Creates a PDPropertyList based on the dictionary type. @param dict the COSDictionary to use @return PDOptionalContentGroup, PDOptionalContentMembershipDictionary, or PDPropertyList
2363 Retrieves line width from PDF dictionary. @return Float value representing line width or null if not found
2364 Retrieves the miter limit value from the PDF dictionary. @return Float value representing the miter limit or null if not found
2365 Retrieves the flatness tolerance value from the PDF document. @return Float representing the flatness tolerance or null if not found
2366 Retrieves the smoothness tolerance value. @return Float representing smoothness tolerance or null if not found
2367 Retrieves the stroking alpha constant from the PDF dictionary. @return Float value representing the stroking alpha constant or null if not found
2368 Retrieves the non-stroking alpha constant from the PDF dictionary. @return Float value representing the non-stroking alpha or null if not found
2369 Constructs a PDAnnotationLink from a COSDictionary. @param field the dictionary representing the annotation
2370 Constructs a PDAnnotationMarkup from a COSDictionary. @param dict the dictionary to initialize the annotation from
2371 Constructs a PDAnnotationPopup from a COSDictionary. @param field dictionary containing annotation properties
2372 Creates an unknown annotation from a COS dictionary. @param dic the dictionary to initialize the annotation from
2373 Initializes a PDAnnotationWidget with a given COSDictionary. @param field the dictionary to initialize the annotation from
2374 Retrieves export values of options from a PDF field. @return list of option strings suitable for export or empty if none found
2375 Retrieves values associated with key 'V'. @return List of string values extracted from the 'V' key in a PDF dictionary.
2376 Retrieves default values from PDF dictionary. @return List of default string values or empty list if not found
2377 Writes a PDF object to the output stream. @param obj the COSBase object to write
2378 Writes a PDF object to the output stream. @param output target OutputStream for writing @param object COSBase object to write @param topLevel indicates if the object is at the top level @throws IOException if an I/O error occurs
2379 Adds a corner curl effect. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius curvature radius @param cx center X coordinate @param cy center Y coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo whether to move to the start point first @throws IOException if an I/O error occurs during drawing
2380 Draws a basic ellipse using an arc. @param left x-coordinate of the left boundary @param bottom y-coordinate of the bottom boundary @param right x-coordinate of the right boundary @param top y-coordinate of the top boundary @throws IOException if drawing fails
2381 Initializes a PDF page fit destination. Grows array to size 2 and sets the second element to TYPE.
2382 Sets the fit bounding box option. @param fitBoundingBox flag to enable or disable fitting
2383 Initializes a PDPageFitHeightDestination with specific settings. Grows the internal array to size 3 and sets the type at index 1.
2384 Sets the left position in the PDF array. @param x left position value to set
2385 Sets the fit bounding box flag and updates the PDF type. @param fitBoundingBox boolean flag to enable or disable fit bounding box
2386 Initializes a PDPageFitRectangleDestination with specific settings. Grows the internal array to size 6 and sets the type at index 1.
2387 Sets the left coordinate in a PDF array. @param x x-coordinate value to set; -1 for null
2388 Sets the bottom position of a PDF element. @param y vertical coordinate for the bottom or -1 to clear it
2389 Sets the right coordinate in the PDF array. @param x right coordinate value or -1 to clear
2390 Sets the top position in a PDF array. @param y vertical coordinate or -1 to clear
2391 Initializes a PDPageFitWidthDestination with specific settings. Grows the internal array to size 3 and sets the name at index 1.
2392 Sets the top position in the PDF array. @param y vertical coordinate to set or -1 to clear
2393 Sets PDF bounding box fitting. @param fitBoundingBox flag to enable or disable bounding box fitting
2394 Initializes a PDPageXYZDestination with default settings.
2395 Sets the left position in a PDF array. @param x integer value for left position; -1 sets to null
2396 Sets the top position in a PDF array. @param y vertical coordinate or -1 to clear the entry
2397 Sets the zoom level in a COSArray. @param zoom the zoom factor to be applied
2398 Determines the bounding box for a form field widget. @param fieldWidget the widget associated with the form field @param appearanceStream the appearance stream of the field @return PDRectangle representing the bounding box, using appearance stream if available, otherwise from widget
2399 Decrypts a PDF dictionary. @param dictionary the COSDictionary to decrypt @param objNum unique object number in PDF @param genNum generation number of the object @throws IOException on I/O errors or security exceptions
2400 Sets the bounding box for a PDF rectangle. @param bbox PDRectangle object representing the bounding box to set
2401 Sets a color using a name and PDGamma value. @param name unique identifier for the color @param value PDGamma object representing the color
2402 Sets a four-color attribute in the PDF dictionary. @param name key for the color attribute @param value the PDFourColours object to set (can be null)
2403 Creates a new PDPage with standard letter size.
2404 Retrieves or creates the FDF dictionary from the PDF document's catalog. @return FDFDictionary object associated with the document
2405 Constructs an FDFDocument and initializes its components. Initializes parsing state to false and version to 1.2. Sets up a trailer and root catalog.
2406 Retrieves the FDF catalog from the document. Initializes a new catalog if none exists. @return FDFCatalog object representing the document's catalog
2407 Retrieves or initializes the fractional space allocation. @return PDRange object representing the allocated space
2408 Builds and sets CIDSet for a font descriptor. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O error occurs during stream creation or data transfer
2409 Initializes a PDTilingPattern object. Sets up the COSObject with necessary attributes and resources.
2410 Inserts a sibling before the current outline item. @param newSibling the new sibling to insert
2411 Inserts a new sibling after this outline item. @param newSibling the PDOutlineItem to insert as the next sibling
2412 Sets the first bead and associates it with the thread. @param bead the PDThreadBead to set as the first bead (can be null)
2413 Initializes a PDThreadBead object. Sets up the bead dictionary and links it to itself for next and previous beads.
2414 Sets the role map dictionary in a PDF document. @param roleMap mapping of roles to values
2415 Updates a PDF dictionary entry with a new value. @param name unique identifier for the dictionary entry @param value new string value to set
2416 Sets the rendering intent in the PDF dictionary. @param ri rendering intent value to be set
2417 Sets the "N" entry in the PDF dictionary. @param name value to be set for the "N" key
2418 Sets the style of an object by updating its PDF dictionary. @param s style string to be applied
2419 Initializes page labels for a PDF document. @param document the PDDocument to associate with these labels
2420 Constructs a PDF structure element. @param structureType type of the structure element @param parent parent node in the PDF structure
2421 Initializes a PDF structure tree root node. @param TYPE PDF structure type
2422 Initializes a PDF shading pattern.
2423 Initializes a new PDF action. Constructs a COSDictionary and sets its type.
2424 Retrieves the document's outline. @return PDDocumentOutline object or null if not found
2425 Retrieves the parent of this outline node. @return PDOutlineNode or null if no parent exists
2426 Initializes a PDRectlinearMeasureDictionary and sets its subtype.
2427 Initializes a new PDTransition with default style R.
2428 Sets a date value in the PDF dictionary using a string key. @param key unique identifier for the item @param date Calendar object representing the date and time to be stored
2429 Sets a date in an embedded dictionary. @param embedded key for the embedded dictionary @param key identifier for the date item @param date Calendar object representing the date
2430 Sets the creation date of the PDF document. @param date Calendar object representing the creation date and time
2431 Sets the modification date of the document. @param date Calendar object representing the new modification date
2432 Sets the creation date of an annotation. @param date Calendar object representing the creation date to be stored
2433 Sets the modified date of the PDF object. @param c Calendar object representing the new modification date
2434 Sets the creation date of the PDF document. @param creationDate Calendar object representing the creation date and time
2435 Sets the signing date in the PDF document. @param cal Calendar object representing the sign date
2436 Sets custom metadata value in PDF document. @param fieldName unique key for the metadata field @param fieldValue value to be stored (null allowed)
2437 Sets a string value in the PDF dictionary and notifies of changes. @param name unique identifier for the item @param value string to be stored (null allowed)
2438 Sets the base URI in the PDF dictionary. @param base string representing the base URI (null allowed)
2439 Sets the application version in the PDF dictionary. @param applicationVersion version string to be stored
2440 Sets the units of measurement in the PDF dictionary. @param units string representing the units (e.g., "cm", "in")
2441 Sets the fractional display format for a PDF object. @param fractionalDisplay the desired fractional display type ("D", "F", "R", "T", or null) @throws IllegalArgumentException if the value is invalid
2442 Sets the thousands separator in number format. @param thousandsSeparator character used as thousands separator (null allowed)
2443 Sets the decimal separator in the PDF document. @param decimalSeparator string representing the new decimal separator
2444 Sets the label prefix string in the PDF dictionary. @param labelPrefixString the prefix string to be set
2445 Sets the label suffix string in the PDF dictionary. @param labelSuffixString string to be used as the label suffix (null allowed)
2446 Sets the label position value in the PDF dictionary. @param labelPositionToValue string representing the label position ("O", "S", or "P") @throws IllegalArgumentException if the value is not valid
2447 Constructs an FDFField from an XML element. @param fieldXML XML element representing the field @throws IOException if an error occurs during processing
2448 Initializes an optional content group with a given name. @param name the name of the content group (null allowed)
2449 Sets an integer in the PDF dictionary and notifies of changes. @param name key for the dictionary item @param value integer to store
2450 Sets an integer value in the PDF dictionary. @param name unique identifier for the item @param value integer value to store
2451 Sets the denominator in the PDF dictionary. @param denominator value to be stored as the denominator
2452 Creates a PDImageXObject from a BufferedImage. @param document PDDocument instance to create the image in @param image BufferedImage object (must be 1-bit b/w) @return PDImageXObject with encoded image data @throws IOException if an I/O error occurs or image type is unsupported
2453 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
2454 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
2455 Sets the number of bits per coordinate in the PDF object. @param bitsPerCoordinate integer value representing bits per coordinate
2456 Sets the number of bits per coordinate in the PDF object. @param bitsPerCoordinate integer value representing bits per coordinate
2457 Sets a float number in the PDF dictionary. @param name unique identifier for the item as a string @param value float value to be stored
2458 Sets intensity value in PDF dictionary. @param i intensity value to be stored
2459 Sets the conversion factor in the PDF dictionary. @param conversionFactor value to be stored for conversion settings
2460 Parses a directory object from the input source. @return COSBase object representing the parsed value or null if unknown type @throws IOException if an I/O error occurs during parsing
2461 Retrieves file specification from PDF stream. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2462 Retrieves file specification from FDF dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2463 Retrieves embedded FDF files. @return List of PDFileSpecification objects representing embedded FDFs or null if none found @throws IOException if an error occurs during file specification creation
2464 Retrieves file specification from PDF document. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2465 Retrieves file specification from PDF object. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2466 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2467 Retrieves file specification from PDF object. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2468 Retrieves file specification from an action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2469 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2470 Retrieves file specification from action dictionary. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2471 Retrieves file specification from PDF object. @return PDFileSpecification instance or null if not found @throws IOException if the base type is unknown
2472 Initializes a new FDF annotation of type Highlight.
2473 Initializes a new FDF annotation with type set to "Squiggly".
2474 Creates a new FDF annotation of type strike-out. Initializes the annotation with subtype set to "StrikeOut".
2475 Creates an FDF annotation of type underline. Initializes the annotation with subtype set to "Underline".
2476 Initializes a file attachment annotation. Sets the subtype to "FileAttachment".
2477 Initializes an ink annotation. Sets the subtype to "INK".
2478 Initializes a PDF line annotation. Sets the subtype and default line coordinates.
2479 Initializes a polygon annotation. Sets the subtype to "Polygon".
2480 Initializes a polyline annotation. Sets the subtype to "PolyLine".
2481 Initializes a rubber stamp annotation. Sets the subtype to 'RubberStamp' in the PDF object.
2482 Creates a square or circle annotation. @param subType type of annotation ("Square" or "Circle")
2483 Initializes a text annotation in a PDF document.
2484 Initializes a text markup annotation for PDF documents. @param subType type of text markup annotation (e.g., highlight, underline)
2485 Retrieves bounding box rectangle. @return PDRectangle object or null if not found
2486 Retrieves the bounding box of the page. @return PDRectangle object representing the bounding box or null if not found
2487 Retrieves rectangle from annotation. @return PDRectangle object or null if not found
2488 Retrieves and constructs a PDRectangle from annotation's RD entry. @return PDRectangle object or null if RD is not found or invalid
2489 Retrieves and constructs a PDRectangle from the annotation's RD array. @return PDRectangle object or null if RD array is not found
2490 Retrieves and constructs a PDRectangle from annotation's RD array. @return PDRectangle object or null if RD array is missing
2491 Retrieves and constructs a PDRectangle from annotation's RD entry. @return PDRectangle object or null if RD is not found
2492 Retrieves the font bounding box. @return PDRectangle object representing the font bounding box or null if not found
2493 Retrieves the font bounding box from a PDF dictionary. @return PDRectangle object representing the font bounding box or null if not found
2494 Retrieves the bounding box of a PDF page. @return PDRectangle object representing the bounding box or null if not found
2495 Retrieves the bounding box rectangle of a PDF object. @return PDRectangle representing the bounding box or null if not found
2496 Retrieves the bounding box of the PDF object. @return PDRectangle object representing the bounding box or null if not defined
2497 Retrieves the rectangle from the dictionary. @return PDRectangle object or null if invalid or missing
2498 Retrieves the rectangle difference from the PDF object. @return PDRectangle representing the difference or null if not found
2499 Retrieves the rectangle difference from a PDF object. @return PDRectangle representing the difference or null if not found
2500 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not found
2501 Retrieves rectangle from a PDF annotation. @return PDRectangle object or null if not found
2502 Sets the line dash pattern for graphics. @param array COSArray representing the dash pattern @param phase initial phase of the dash pattern
2503 Retrieves or creates a line dash pattern for the PDF. @return PDLineDashPattern object representing the line dash pattern
2504 Retrieves line dash pattern from dictionary. @return PDLineDashPattern object or null if not found or invalid
2505 Retrieves or creates the line dash pattern for a PDF object. @return PDLineDashPattern instance representing the dash style
2506 Generates a stencil image from a PDF image. @param pdImage source image object @param paint color to fill the mask @return BufferedImage with alpha channel set based on decode array @throws IOException if an error occurs during processing
2507 Retrieves the transformation matrix from the PDF object. @return Matrix representing the transformation or default if not found
2508 Retrieves and creates a matrix from the PDF object. @return Matrix object or default if not found
2509 Retrieves and creates a matrix from PDF dictionary. @return Matrix object or default if not found
2510 Sets an attribute in the PDF object. @param attrName name of the attribute to set @param attrValue value of the attribute to set (can be null)
2511 Retrieves an inheritable attribute from a PDF dictionary. @param node the COSDictionary to search in @param key the COSName key for the attribute @return COSBase object or null if not found
2512 Retrieves a boolean value from the dictionary using a single key. @param key primary COSName key to look up @param defaultValue default value to return if not found @return boolean value or default if not found
2513 Retrieves an integer value from a dictionary using a primary key. @param key the primary COSName key to look up in the dictionary @param defaultValue default integer value to return if no valid number is found @return integer value from the dictionary or default if not found
2514 Retrieves an integer value from a dictionary using primary or secondary key. @param firstKey the primary COSName key to look up in the dictionary @param secondKey the secondary COSName key if primary lookup fails @return integer value from the dictionary or -1 if not found
2515 Initializes a PDInlineImage with given parameters, data, and resources. @param parameters COSDictionary containing image parameters @param data raw image data as byte array @param resources PDResources object for resource management @throws IOException if an error occurs during processing
2516 Determines the image suffix based on filters. @return Suffix like "jpg", "tiff", or "png"
2517 Retrieves COSObjects by specified types from the PDF document. @param type1 primary type to filter objects @param type2 secondary optional type to filter objects @return List of COSObjects matching either type
2518 Searches for a PDF trailer and updates the provided dictionary. @param trailer COSDictionary to update with trailer information @return true if trailer is found and updated, false otherwise
2519 Searches for and sets trailer items in a PDF document. @param trailer the COSDictionary to update with trailer items @return true if a root object is found and set, false otherwise @throws IOException if an I/O error occurs during processing
2520 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
2521 Constructs a PDPageTree from a given COSDictionary. @param root the root dictionary of the page tree
2522 Converts character code to Unicode using custom glyph list. @param code character code to convert @param customGlyphList custom glyph list (unused in this method) @return Unicode string or null if not found
2523 Retrieves the transparency group. @return PDTransparencyGroup instance or null if not found
2524 Sets the MAC subtype in the PDF object's parameters. @param macSubtype MAC subtype string to be set
2525 Sets the Mac creator in PDF document parameters. @param macCreator string representing the Mac creator
2526 Sets the Mac resource fork in PDF document parameters. @param macResFork string representation of Mac resource fork
2527 Checks if the PDF document is encrypted. @return true if the document has an encryption dictionary, false otherwise
2528 Parses an FDF document and returns a new FDFDocument object. @return FDFDocument parsed from the source @throws IOException if parsing fails or header is invalid
2529 Parses a PDF or FDF file and creates a PDDocument. @param lenient whether to be lenient with parsing errors @return PDDocument object representing the parsed document @throws IOException if an error occurs during parsing
2530 Retrieves or creates an AcroForm with default fixup. @return PDAcroForm object or null if not found
2531 Finds the destination page for a named destination. @param namedDest PDNamedDestination object representing the named destination @return PDPageDestination object or null if not found
2532 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace resource @param wasDefault indicates if this is the default colorspace @return PDColorSpace object or null if not found
2533 Checks if a color space exists by name. @param name the key for the desired color space @return true if color space is present, false otherwise
2534 Retrieves an extended graphics state by name. @param name the COSName of the graphics state @return PDExtendedGraphicsState object or null if not found
2535 Checks if the XObject with the given name is an image. @param name the name of the XObject to check @return true if the XObject is an image, false otherwise
2536 Retrieves color space names from resources. @return Iterable of COSName representing color spaces or empty set if none found
2537 Retrieves XObject names from resources. @return Iterable of COSName representing XObjects or empty set if not found
2538 Retrieves font names from resources. @return Iterable of COSName containing font names or empty set if none found
2539 Retrieves property names from resources. @return Iterable of COSName representing property names or empty set if not found
2540 Retrieves shading names from resources. @return Iterable of COSName representing shading names or empty set if none found
2541 Retrieves pattern names from resources. @return Iterable of COSName representing pattern names or empty set if none found
2542 Retrieves external graphics state names. @return Iterable of COSName representing external graphics states
2543 Adds an item to a resource dictionary. @param kind type of resource dictionary @param prefix base string for the unique key @param object value to set (can be null) @return COSName with unique key based on prefix and existing keys in dict
2544 Adds a font resource to the dictionary. @param name unique identifier for the font @param font PDFont object representing the font
2545 Adds a colorspace entry to the resources. @param name key for the colorspace @param colorSpace the colorspace value to set
2546 Adds an extended graphics state to the resources. @param name unique identifier for the graphics state @param extGState the extended graphics state object to add
2547 Adds a shading resource to the PDF document. @param name unique identifier for the shading @param shading PDShading object representing the shading pattern
2548 Adds a pattern to the resource dictionary. @param name unique identifier for the pattern @param pattern PDAbstractPattern object to add
2549 Adds a property to the resource dictionary. @param name the key for the property @param properties the value (PDPropertyList) to set
2550 Adds an XObject to the resources. @param name the key for the XObject @param xobject the XObject to add (can be null)
2551 Sets an embedded file in the PDF document. @param file the PDEmbeddedFile to set (can be null)
2552 Sets an embedded file with Unicode support. @param file the PDEmbeddedFile to set
2553 Retrieves the standard cryptographic filter dictionary. @return PDCryptFilterDictionary object or null if not found
2554 Retrieves the default cryptographic filter dictionary. @return PDCryptFilterDictionary object for the default crypt filter or null if not found
2555 Sets the standard encryption filter dictionary. @param cryptFilterDictionary the crypt filter dictionary to set
2556 Sets the default encryption filter dictionary. @param defaultFilterDictionary the crypt filter dictionary to be set as default
2557 Retrieves a character procedure for a given code. @param code the character code @return PDType3CharProc object or null if not found
2558 Retrieves the base state from a PDF dictionary. @return BaseState object representing the current state, defaulting to ON if not found
2559 Sets the base state in the PDF dictionary. @param state BaseState object to be set
2560 Enables or disables an optional content group. @param group the PDOptionalContentGroup to enable/disable @param enable true to enable, false to disable @return true if the operation was successful, false otherwise
2561 Initializes a content stream for a tiling pattern. @param pattern the PDTilingPattern to write to @throws IOException if I/O error occurs
2562 Retrieves or initializes the PDF appearance dictionary for an annotation. @return the PDAppearanceDictionary object
2563 Retrieves the rollover appearance of a PDF annotation. @return PDAppearanceEntry object for rollover state or normal appearance if not found
2564 Retrieves the down appearance of a PDF annotation. @return PDAppearanceEntry object for down appearance or normal appearance if not found
2565 Retrieves the first child outline item. @return PDOutlineItem object or null if not found
2566 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if not found
2567 Retrieves the signature from the PDF. @return PDSignature object or null if not found
2568 Appends a bead to the current thread. @param append PDThreadBead object to be appended
2569 Retrieves the normal appearance stream of a PDF annotation. @return PDAppearanceStream object or null if not found
2570 Retrieves the first on-value from a PDF annotation widget. @return String representing the on-value or an empty string if not found
2571 Checks and updates page count in PDF document. @param root the root COSDictionary of the PDF document @throws IOException if page tree is not a dictionary or an error occurs
2572 Retrieves the value associated with a given name. @param name key to search for in the node tree @return value of type T or null if not found @throws IOException if an I/O error occurs
2573 Retrieves value by index from a number tree node. @param index the key to search for @return value associated with the index or null if not found @throws IOException if an I/O error occurs
2574 Sets the child nodes (kids) for a PDF tree node. Updates limits based on first and last kid's limits. Removes limits if no kids or numbers are set. @param kids list of PDNumberTreeNode children
2575 Sets numbers and limits in a PDF node. @param numbers map of integer keys to COSObjectable values
2576 Determines the number of output parameters. Uses cached value if available, otherwise calculates based on range values. @return int representing the count of output parameters
2577 Retrieves a PDRange object for specified output index. @param n the index of the range to retrieve @return PDRange object or null if not found
2578 Clips each value in the input array to its corresponding range. @param inputValues array of values to clip @return new float array with clipped values or original if no ranges found
2579 Calculates the number of input parameters. Uses cached domain values to determine count. @return int representing the number of input parameters
2580 Retrieves the PDRange for a specified input index. @param n the input index within the domain @return PDRange object representing the range for the input
2581 Calculates the sample index from a vector. @param vector input vector for index calculation @return calculated sample index as an integer
2582 Retrieves or constructs the ENCODE array for a PDF object. @return COSArray representing the ENCODE values
2583 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2584 Retrieves and constructs a PDRange for a given parameter index. @param n the index of the parameter @return PDRange object representing the range or null if not found
2585 Checks if the "Top" edge is attached. @return true if "Top" edge is attached, false otherwise
2586 Checks if the bottom edge is attached. @return true if bottom edge is attached, false otherwise
2587 Checks if the left edge is attached. @return true if left edge is attached, false otherwise
2588 Checks if the right edge is attached. @return true if right edge is attached, false otherwise
2589 Initializes a PDCIDFont object with given dictionary and parent. Reads widths and vertical displacements for CID metrics.
2590 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding type @param differences array of encoding differences @throws IllegalArgumentException if base encoding is invalid
2591 Initializes a DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary containing font encoding information
2592 Initializes a DictionaryEncoding with given font encoding and built-in encoding. @param fontEncoding the COSDictionary containing font encoding information @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
2593 Initializes a CIE-based color space from RGB array. @param rgb COSArray containing RGB color values
2594 Sets the range for the first component. @param range PDRange object defining min and max values or null to reset to defaults
2595 Sets the B component range. @param range PDRange object defining min and max values or null to reset to defaults
2596 Retrieves an optional content group by name. @param name the name of the group to find @return PDOptionalContentGroup object or null if not found
2597 Adds an optional content group to the document. @param ocg the PDF object representing the optional content group
2598 Retrieves and initializes all optional content groups. @return Collection of PDOptionalContentGroup objects
2599 Initializes a ShadingContext with given parameters. @param shading PDShading object representing the shading pattern @param cm ColorModel for the context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color conversion fails
2600 Retrieves the decoding range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2601 Retrieves a PDColor object using the predefined COSName.C. @return PDColor object or null if not found
2602 Retrieves border color from PDF. @return PDColor object representing border color or null if not found
2603 Retrieves background color from PDF document. @return PDColor object representing background or null if not found
2604 Adds key usage extensions to the PDF document. @param digitalSignature, nonRepudiation, etc. flags indicating key usages ('0', '1', or 'X')
2605 Retrieves and filters contents from a PDF file. @param pdfFile input stream of the PDF file @return byte array containing filtered hexadecimal data @throws IOException if I/O error occurs
2606 Extracts and converts contents from a PDF file. @param pdfFile the PDF file as a byte array @return byte array containing filtered hexadecimal data @throws IOException if I/O error occurs
2607 Converts a PDF input stream to a signed content byte array. @param pdfFile input stream of the PDF file @return byte array of the signed content @throws IOException if an I/O error occurs
2608 Retrieves signed content from a PDF file. @param pdfFile byte array of the PDF file @return byte array of signed content or null if not found @throws IOException if an I/O error occurs
2609 Retrieves PDF name from COS object. @param name key for the PDF name @return PDF name as a string or null if not found
2610 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
2611 Retrieves the PDF name for key "N". @return PDF name as a string or null if not applicable
2612 Retrieves or creates a COSName object and fetches its string value. @param key the PDF name string to look up or create @param defaultValue the default string to return if key is not found @return String representation of the dictionary value or default if null
2613 Retrieves guideline style from dictionary. @return String representation of guideline style or default "Solid"
2614 Retrieves the icon name of an annotation. @return Icon name as string or default note if not found
2615 Retrieves the attachment name from the COS object. @return Name of the attachment or default value if not found
2616 Retrieves the line ending style of an annotation. @return String representing the line ending style or default if not found
2617 Retrieves highlight mode as string. @return Highlight mode or default value if not found
2618 Retrieves the reply type from the COS object. @return String representing the reply type or default if not found
2619 Retrieves the name from the COS object. @return String representation of the name or "NAME_DRAFT" if not found
2620 Retrieves the name from the COS object. @return Name as string or default if not found
2621 Retrieves the highlighting mode of an annotation. @return String representation of the highlighting mode or "I" if not specified
2622 Retrieves the style of the object. @return Style as a string, defaulting to "Solid"
2623 Retrieves the type of the PDF object. @return Type as a string or "ExData" if not specified
2624 Retrieves the transition style as a string. @return Style of the transition or default if not found
2625 Retrieves dimension name from COS object. @return String representation of the dimension or default if not found
2626 Retrieves motion transition effect as string. @return Motion transition effect or default if not found
2627 Retrieves the non-full screen page mode preference. @return String representing the non-full screen page mode or "UseNone" if not set
2628 Retrieves the reading direction preference. @return String representation of the reading direction or default (L2R) if not set
2629 Retrieves the view area setting from preferences. @return String representation of the view area or CropBox if not found
2630 Retrieves the view clip setting from preferences. @return String representation of the view clip or CropBox if not set
2631 Retrieves print area setting. @return String value of print area or CropBox if not set
2632 Retrieves the print clip setting. @return String value of the print clip or default boundary if not found
2633 Retrieves print scaling preference. @return String value of print scaling or default if not set
2634 Checks for a valid XRef offset in a PDF file. @param startXRefOffset initial offset to check @return valid offset or -1 if not found @throws IOException if an I/O error occurs
2635 Retrieves the PDF document's version. Checks both header and catalog for versions >= 1.4. @return highest version as a float or header version if catalog is not applicable
2636 Retrieves and processes attribute objects from the COS dictionary. @return Revisions object containing PDAttributeObject instances with revision numbers.
2637 Checks if the collection contains only one item, the owner. @return true if empty except for the owner, false otherwise
2638 Retrieves the parent structure node. @return PDStructureNode object or null if no parent exists
2639 Creates an object from a COSBase. @param kid the COSBase to process @return COSObjectable or integer value, or null if unsupported type
2640 Sets the name of the PDF object and notifies if changed. @param name new name for the PDF object
2641 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption dictionary
2642 Returns the security handler for the PDF. @return SecurityHandler object configured with ProtectionPolicy @throws IOException if no security handler is found for the filter
2643 Retrieves annotations from an FDF document. @return List of FDFAnnotation objects or null if none found
2644 Determines if the character set matches based on CID system info and font info. @param cidSystemInfo CID System Info object to compare against @param info Font Info object containing character set details @return true if the character sets match, false otherwise
2645 Determines if the channel is an NChannel. @return true if attributes represent an NChannel, false otherwise
2646 Retrieves the open action associated with a PDF document. @return PDDestinationOrAction object or null if not found @throws IOException if an error occurs during destination creation
2647 Retrieves an action from a field. @return PDAction object or null if not found
2648 Extracts JavaScript actions from a PDF document. @return Map of named JavaScript actions or null if none found
2649 Retrieves the next set of PDF actions. @return List of PDAction objects or null if none found
2650 Retrieves and creates an action based on the 'F' key. @return PDAction object or null if unsupported type
2651 Retrieves and creates an action from the 'E' dictionary. @return PDAction object or null if not found or unsupported type
2652 Retrieves and creates a PDAction for the 'X' key. @return PDAction object or null if not found
2653 Retrieves and creates a PDF action from the 'D' entry in actions dictionary. @return PDAction object or null if not found or unsupported type
2654 Retrieves and creates a PDAction for the U key. @return PDAction object or null if not found
2655 Retrieves and creates a PDF action for the "FO" key. @return PDAction object or null if not found
2656 Retrieves and creates a PDAction for the "BL" entry in actions. @return PDAction object or null if not found or unsupported type
2657 Retrieves and creates a PDAction for the 'PO' entry in actions. @return PDAction object or null if not found or unsupported type
2658 Retrieves and creates a PDF action for the 'PC' key. @return PDAction object or null if not found or unsupported type
2659 Retrieves and creates a PDAction for the 'PV' entry. @return PDAction object or null if not found
2660 Retrieves and creates a PDF action for PI. @return PDAction object or null if not found or unsupported type
2661 Retrieves and creates a PDF action for the WC entry. @return PDAction object or null if not found
2662 Retrieves and creates a WS action. @return PDAction object or null if not found or unsupported type
2663 Retrieves and creates a DS action. @return PDAction object or null if not found or unsupported type
2664 Retrieves and creates a PDAction for the WP entry in the actions dictionary. @return PDAction object or null if not found or unsupported type
2665 Retrieves and creates a PDAction for the DP entry. @return PDAction object or null if not found or unsupported type
2666 Retrieves and creates a PDAction from the 'K' COSDictionary. @return PDAction object or null if not found or unsupported type
2667 Retrieves and creates an action from the 'F' key in actions dictionary. @return PDAction object or null if not found or unsupported type
2668 Retrieves and creates a PDAction from the 'V' entry in actions. @return PDAction object or null if not found or unsupported type
2669 Retrieves and creates a PDAction for the 'C' key. @return PDAction object or null if not found
2670 Retrieves and creates a PDAction from the 'O' key in actions. @return PDAction object or null if not found or unsupported type
2671 Retrieves and creates an action for the 'C' key. @return PDAction object or null if not found
2672 Retrieves and creates a PDAction from the PDF object. @return PDAction object or null if not found or unsupported type
2673 Retrieves and creates a PDF action. @return PDAction object or null if no action dictionary is found
2674 Retrieves and creates an action from the PDF object. @return PDAction object or null if unsupported type
2675 Retrieves string value of a property. @param propertyKey key for the property @return String value of the property or null if not found
2676 Retrieves custom metadata value by field name. @param fieldName the key to look up in the metadata dictionary @return String representation of the metadata value or null if not found
2677 Retrieves string value from PDF dictionary by key. @param name the key to look up in the dictionary @return String representation of the value or null if not found
2678 Retrieves the base URI from the COS object. @return Base URI as a string or null if not found
2679 Retrieves the version from the PDF dictionary. @return version string or null if not found
2680 Retrieves units from PDF dictionary. @return String representing units or null if not found
2681 Retrieves string value from PDF dictionary by key or returns default. @param key the PDF name string key to look up in the dictionary @param defaultValue the value to return if key is not found @return String representation of the value or default if not found
2682 Retrieves string value from an embedded dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName key to look up in the dictionary @param defaultValue the value to return if key is not found @return String representation of the value or default if not found
2683 Retrieves operation type from parameters. @return String representing the operation or default if not found
2684 Retrieves default appearance string from PDF dictionary. @return Default appearance as a string or empty if not found
2685 Retrieves file name using various methods. @return File name as string or null if not found
2686 Sets the formatted value and notifies if changed. @param formattedValue new formatted string value
2687 Checks if a specific group exists in the PDF. @param groupName name of the group to check @return true if group exists, false otherwise
2688 Constructs the fully qualified name by combining partial name with parent's FQN. @return Fully qualified name as string or null if no valid name can be constructed
2689 Retrieves a date from the PDF dictionary using a string key. @param key the string key for the date field @param defaultValue Calendar object to use if no date is found @return Calendar object representing the date or the provided default value
2690 Retrieves a date from an embedded dictionary. @param embedded the COSName key for the embedded dictionary @param key the COSName key for the date field within the embedded dictionary @param defaultValue Calendar object to use if no date is found @return Calendar object representing the date or the provided default value
2691 Retrieves the revision number from the PDF dictionary. @return long value representing the revision or -1 if not found
2692 Retrieves the minimum revision number. @return long value representing the minimum revision or default of -1 if not found
2693 Creates a COSInputStream for decoding input stream with specified filters and parameters. @param filters list of Filter objects for decoding @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @param options DecodeOptions for additional configuration @return COSInputStream with decoded output @throws IOException if an I/O error occurs during decoding
2694 Creates a view of the PDF stream. @return RandomAccessRead buffer with decoded content or raw input if no filters are present @throws IOException if an I/O error occurs during stream processing
2695 Creates an input stream for reading with optional filtering. @param stopFilters list of filter names to stop at @return InputStream for the COSStream with applied filters @throws IOException if I/O error occurs during stream creation or decoding
2696 Retrieves a float value by key from the COS object. @param name the key to look up in the COS dictionary @return float value associated with the key or -1 if not found
2697 Retrieves conversion factor from PDF dictionary. @return float value representing the conversion factor or -1 if not found
2698 Initializes a PDFunctionType2 from a COSBase object. @param function the underlying COSBase object representing the function
2699 Retrieves the leader length of an annotation. @return float value representing the leader length or default value if not found
2700 Retrieves the leader extend value of an annotation. @return float value representing leader extend or default value if not found
2701 Retrieves the leader line offset of an annotation. @return float value representing the leader line offset or default value of -1 if not found
2702 Retrieves the 'V' value from the dictionary. @return float value associated with key COSName.V or default value of -1 if not found
2703 Retrieves the CYX value from the COS object. @return float value of CYX or default value if not found
2704 Retrieves a number from the PDF COS object. @param name string key for the number in the COS dictionary @param defaultValue default value if key not found or not a number @return float value associated with the key or default value
2705 Retrieves intensity value from PDF dictionary. @return float representing intensity or 0 if not found
2706 Computes the font height for a given PDFont. @param font the PDFont object to compute height for @return float value representing the computed font height
2707 Writes a sequence of tokens to the output stream. @param tokens variable number of objects to write @throws IOException if an I/O error occurs
2708 Writes a list of tokens to output stream. @param tokens list of objects to write @throws IOException if an I/O error occurs while writing tokens
2709 Retrieves decode parameters from PDF stream. @return list of decoded parameter maps or null if not found @throws IOException if an error occurs during processing
2710 Retrieves file decode parameters from PDF stream. @return list of decoded parameter maps or null if not found @throws IOException if an error occurs during processing
2711 Appends a child structure element and sets its parent. @param structureElement the child PDStructureElement to add
2712 Inserts a PDStructureElement before a specified reference object. @param newKid the new structure element to insert, must not be null @param refKid the reference item before which to insert
2713 Removes a kid from the structure element and clears its parent. @param structureElement the PDStructureElement to remove @return true if removal was successful, false otherwise
2714 Creates a default position vector for given CID. @param cid content identifier @return Vector with x as half of the width and y from dw2 array
2715 Retrieves properties by name. @param name the key for the desired COSBase object within the dictionary @return PDPropertyList object or null if not found
2716 Retrieves the optional content property list. @return PDPropertyList object or null if not present
2717 Retrieves optional content properties. @return PDPropertyList object or null if not found
2718 Retrieves OCGs from the dictionary. @return List of PDPropertyList objects representing OCGs
2719 Retrieves and creates an optional content property list. @return PDPropertyList object or null if not found
2720 Constructs a PDAnnotationCaret from a COSDictionary. @param field the dictionary to initialize the annotation from
2721 Constructs a PDAnnotationFileAttachment from a COSDictionary. @param field the dictionary to initialize the annotation from
2722 Constructs a PDAnnotationFreeText from a COSDictionary. @param field the dictionary to initialize the annotation from
2723 Constructs a PDAnnotationInk from a COSDictionary. @param dict the dictionary to initialize the annotation from
2724 Constructs a PDAnnotationLine from a COSDictionary. @param field dictionary to initialize the annotation from
2725 Constructs a PDAnnotationPolygon from a COSDictionary. @param dict the dictionary to initialize the annotation from
2726 Constructs a PDAnnotationPolyline from a COSDictionary. @param dict the dictionary to initialize the annotation from
2727 Constructs a PDAnnotationRubberStamp from a COSDictionary. @param field the dictionary to initialize the annotation from
2728 Constructs a PDAnnotationSound from a COSDictionary. @param field the dictionary to initialize the sound annotation from
2729 Constructs a PDAnnotationSquareCircle from a COSDictionary. @param dict the dictionary to initialize the annotation from
2730 Constructs a PDAnnotationText from a COSDictionary. @param field the dictionary to initialize the annotation from
2731 Constructs a PDAnnotationTextMarkup from a COSDictionary. @param field the dictionary to initialize the annotation from
2732 Retrieves the associated popup annotation. @return PDAnnotationPopup object or null if none exists
2733 Retrieves all annotation widgets associated with the field. @return List of PDAnnotationWidget objects
2734 Writes prepared PDF objects to a COSStream. @param stream target COSStream for writing @return the same COSStream with written objects @throws IOException if an I/O error occurs
2735 Writes a COSDictionary to the OutputStream. @param output target OutputStream for writing @param cosDictionary COSDictionary object to write @throws IOException if an I/O error occurs
2736 Implements a cloudy effect for a polygon or ellipse. @param vertices array of points defining the polygon @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during drawing
2737 Encodes image data using PNG predictor compression. @return PDImageXObject with compressed image data @throws IOException if an I/O error occurs during processing
2738 Sets destination to a given PDF page. @param page the target PDF page
2739 Creates a new embedded goto action. Sets the subtype to "EmbeddedGoto".
2740 Initializes a new PDF action for navigating to a destination. Sets the subtype to "GoTo".
2741 Initializes a new PDF hide action. Sets the subtype to "Hide".
2742 Initializes a new PDF import data action. Sets the subtype to "Import".
2743 Creates a new JavaScript action. Sets the subtype to "JavaScript".
2744 Creates a new PDF action to launch an application. Sets the subtype to "Launch".
2745 Creates a new PDF movie action. Sets the subtype to "Movie".
2746 Creates a new named PDF action. Sets the subtype to "GoTo".
2747 Initializes a new PDF remote goto action. Sets the subtype to "RemoteGoTo".
2748 Creates a new PDF action to reset form fields. Sets the subtype to "Reset".
2749 Creates a new PDF action for sound. Sets the subtype to "Sound".
2750 Initializes a new PDF action for submitting forms. Sets the subtype to "SubmitForm".
2751 Initializes a new PDF action for threads. Sets the subtype to "Thread".
2752 Creates a new URI action. Initializes the action with a specific subtype.
2753 Parses Appearance XML for a stamp annotation and constructs a COSDictionary. @param appearanceXML root XML Element representing the appearance @return COSDictionary populated with parsed data or empty if not handled
2754 Parses a COSArray from the input source. @return COSArray object representing the parsed array @throws IOException if an I/O error occurs during parsing
2755 Creates a highlight annotation for PDF documents.
2756 Initializes a squiggly text markup annotation.
2757 Initializes a strikeout annotation for PDF documents.
2758 Creates an underline annotation for PDFs.
2759 Generates an image for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param xform AffineTransform for scaling @param anchorRect bounding rectangle for the image @return BufferedImage of the tiling pattern @throws IOException if an I/O error occurs during rendering
2760 Calculates the scaled bounding rectangle for a tiling pattern. @param pattern the PDTilingPattern to process @return Rectangle2D representing the scaled anchor rectangle @throws IOException if pattern's BBox is missing or other I/O errors occur
2761 Generates a stencil image using the specified color. @param paint color to fill the mask @return BufferedImage with alpha channel set based on decode array @throws IOException if an error occurs during processing or image is not a stencil
2762 Retrieves raw raster data from a PDF image. @param pdImage source PDF image object @return WritableRaster containing image data @throws IOException if an error occurs during processing
2763 Converts a PDF image to a BufferedImage with optional color key masking. @param pdImage PDF image object @param region clipping rectangle or null for full image @param subsampling subsampling factor @param colorKey color key array for masking @return RGB BufferedImage or null if conversion fails @throws IOException if an error occurs during processing
2764 Retrieves PDF page resources. @return PDResources object containing page resources
2765 Retrieves the media box of a PDF page. @return PDRectangle representing the media box or default U.S. Letter if not found
2766 Retrieves the rotation angle of a PDF page. @return Rotation angle in degrees, multiples of 90, or 0 if not set
2767 Retrieves a boolean value from PDF dictionary. @param key string key to look up in the PDF @param defaultValue default boolean value if not found @return boolean value or default if not found
2768 Checks if the PDF stream is marked as volatile. @return true if the stream is volatile, false otherwise
2769 Checks if the object is hidden. Uses COSName.H to determine visibility. @return true if hidden, false otherwise
2770 Checks if metadata encryption is enabled. @return boolean indicating whether metadata encryption is enabled
2771 Retrieves whether the annotation has a caption. @return true if the annotation has a caption, false otherwise
2772 Determines if content should scale to fit annotations. @return true if scaling is enabled, false otherwise
2773 Determines if renaming is enabled. @return true if renaming is allowed, false otherwise
2774 Checks if the object is isolated. @return true if isolated, false otherwise
2775 Checks if the knockout attribute is set. @return true if knockout is enabled, false otherwise
2776 Retrieves anti-aliasing setting from PDF dictionary. @return boolean indicating if anti-aliasing is enabled or not
2777 Retrieves stroking overprint control setting. @return boolean indicating if stroking overprint is enabled
2778 Retrieves automatic stroke adjustment setting. @return true if enabled, false otherwise
2779 Retrieves the alpha source flag from the dictionary. @return boolean value indicating whether to use alpha source or not
2780 Retrieves the text knockout flag from the PDF dictionary. @return true if text knockout is enabled, false otherwise
2781 Retrieves the 'H' action attribute as a boolean. @return boolean value of 'H' or true if not found
2782 Checks if the action is synchronous. @return true if synchronous, false otherwise
2783 Checks if the action should repeat. @return true if the action is set to repeat, false otherwise
2784 Retrieves the mix setting from the action dictionary. @return true if mix is enabled, false otherwise
2785 Checks if the PDF object has a caption. @return true if the CAP attribute is set to true, false otherwise
2786 Checks if the document is open. @return true if the document is open, false otherwise
2787 Checks if the document is in pre-release mode. @return true if pre-release mode is enabled, false otherwise
2788 Retrieves non-EFont no warn setting. @return boolean value indicating if warnings are disabled for non-E fonts
2789 Retrieves trusted mode status from PDF dictionary. @return true if trusted mode is enabled, false otherwise
2790 Retrieves the needAppearances flag from the PDF document. @return true if form fields should always be rendered as appearances, false otherwise
2791 Checks if the fly area is opaque. @return true if fly area is opaque, false otherwise
2792 Checks if the toolbar should be hidden. @return true if toolbar is hidden, false otherwise
2793 Checks if the menubar is hidden. @return true if menubar is hidden, false otherwise
2794 Checks if window UI should be hidden. @return true if window UI is set to hidden, false otherwise
2795 Checks if window should fit content. @return true if window should fit content, false otherwise
2796 Checks if window should be centered. @return true if centering is enabled, false otherwise
2797 Checks if document title should be displayed. @return true if document title is enabled, false otherwise
2798 Sets a flag in the PDF dictionary. @param field unique identifier for the item @param bitFlag specific bit to modify @param value boolean indicating whether to set or clear the flag
2799 Retrieves an integer from an embedded dictionary. @param embeddedDictionary the key to find the embedded dictionary @param key the key for the integer value in the dictionary @param defaultValue default integer value if not found @return integer value or default if not found
2800 Retrieves an integer value from a dictionary using a string key. @param key the PDF name string to look up in the dictionary @return integer value from the dictionary or -1 if not found
2801 Retrieves an integer value from a dictionary using a primary key. @param key the primary COSName key to look up in the dictionary @return integer value from the dictionary or -1 if not found
2802 Retrieves an integer value from a PDF dictionary using a key. @param key the PDF name string as key @param defaultValue default integer value to return if not found @return integer value from the dictionary or default if not found
2803 Checks if a specific bit flag is set in an integer value from a PDF dictionary. @param field the COSName key for the dictionary entry @param bitFlag the bit flag to check @return true if the bit flag is set, false otherwise
2804 Retrieves a COSDictionary representing a page by its 1-based index. @param pageNum the page number to fetch @param node the current PDF node being processed @param encountered count of pages already processed @return COSDictionary for the specified page or throws exception if not found
2805 Retrieves the count from the PDF dictionary. @return integer value representing the count or 0 if not found
2806 Retrieves the start value from the root dictionary. @return integer representing the start value or default of 1 if not found
2807 Retrieves order value from PDF dictionary. @return integer order value or default 1 if not found
2808 Retrieves the revision number from the PDF object. @return the revision number or 0 if not found
2809 Retrieves the length of the encryption filter. @return integer value representing the length or default 40 if not specified
2810 Retrieves the version number from the PDF dictionary. @return version number or 0 if not found
2811 Retrieves the length value from the dictionary. @return length as an integer, defaulting to 40 if not found
2812 Retrieves the revision number from the PDF document. @return integer value representing the revision or default version if not found
2813 Retrieves permissions from PDF dictionary. @return integer representing permissions or 0 if not found
2814 Retrieves justification value from annotation. @return string representation of justification integer or empty string if not found
2815 Retrieves and caches the integer value of flags from a dictionary. @return integer value representing flags or default if not found
2816 Creates a PDAbstractPattern instance based on the dictionary. @param dictionary COSDictionary containing pattern details @param resourceCache ResourceCache for caching resources @return PDAbstractPattern object or throws IOException if unknown type
2817 Retrieves the paint type from the PDF object. @return integer representing the paint type or 0 if not specified
2818 Retrieves the tiling type of the PDF object. @return integer representing the tiling type or 0 if not found
2819 Creates a PDShading object based on the shading type. @param shadingDictionary COSDictionary containing the shading data @return PDShading object or throws IOException if unknown type
2820 Retrieves bits per flag from PDF object. @return integer value representing bits per flag or -1 if not found
2821 Retrieves the number of vertices per row. @return integer value representing vertices per row or -1 if not specified
2822 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from PDF dictionary. @return bits per color component or -1 if not specified
2823 Retrieves the number of bits per coordinate. Uses cached value if available; otherwise, fetches from COS object. @return integer representing bits per coordinate or -1 if not set
2824 Retrieves the flags associated with an action. @return integer value representing the flags or 0 if not set
2825 Retrieves action flags. @return integer value representing action flags or 0 if not found
2826 Retrieves the page number from the dictionary. @return page number or -1 if not found
2827 Retrieves annotation index from dictionary. @return index of annotation or -1 if not found
2828 Retrieves annotation flags. @return integer value representing annotation flags or default (0) if not found
2829 Retrieves the Q value from the COS object. @return integer value of Q or 0 if not found
2830 Retrieves the rotation angle of a PDF page. @return integer value representing the rotation angle in degrees (0, 90, 180, or 270)
2831 Checks if timestamp is required. @return true if timestamp is required, false otherwise
2832 Retrieves the open count from the PDF object. @return integer value representing the open count or 0 if not found
2833 Retrieves the Q value from the dictionary. @return integer value of Q or 0 if not found
2834 Retrieves the top index from the COS object. @return integer value of the top index or 0 if not found
2835 Fetches COSObjects by primary type from the PDF document. @param type primary type to filter objects @return List of COSObjects matching the type
2836 Retrieves the page tree of the PDF document. @return PDPageTree object representing the document's pages
2837 Updates page references in a PDF number tree. @param cloner utility for cloning objects @param numberTreeAsMap map of number tree entries @param objMapping mapping of original to cloned COSDictionary objects @throws IOException if an I/O error occurs during cloning
2838 Loads an FDF document from a file. @param file the File object representing the FDF file @return FDFDocument parsed from the file @throws IOException if an error occurs during loading or parsing
2839 Loads and parses an FDF document from the given input stream. @param input InputStream containing the FDF data @return FDFDocument parsed from the input stream @throws IOException if an error occurs during loading or parsing
2840 Parses a PDF or FDF file with lenient error handling. @return PDDocument object representing the parsed document @throws IOException if an error occurs during parsing
2841 Removes page-specific resources from the cache. Ensures only page resources are purged, not inherited ones.
2842 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace resource @return PDColorSpace object or null if not found
2843 Adds a font to the resource dictionary. @param font PDFont object to be added @return COSName with unique key for the font
2844 Adds a color space to the resource dictionary. @param colorSpace the color space to add @return COSName with unique key for the color space
2845 Adds an extended graphics state to the resource dictionary. @param extGState extended graphics state object @return COSName with unique key for the added graphics state
2846 Adds a shading resource to the dictionary. @param shading PDShading object to add @return COSName with unique key for the shading resource
2847 Adds a pattern to the resource dictionary. @param pattern PDAbstractPattern object to add @return COSName with unique key for the added pattern
2848 Adds a property to the resource dictionary. @param properties object representing the properties to be added @return COSName with unique key based on the type of properties
2849 Adds an image to the resources. @param image PDImageXObject to be added @return COSName with unique key for the image resource
2850 Adds a PDF form object to resources. @param form PDFormXObject to be added @return COSName representing the unique key for the added form
2851 Adds an XObject to the resources dictionary. @param xobject the XObject to be added @param prefix base string for generating unique key @return COSName with unique key based on prefix and existing keys
2852 Retrieves embedded file from PDF. @return PDEmbeddedFile object or null if not found
2853 Retrieves embedded file for DOS. @return PDEmbeddedFile object or null if not found
2854 Retrieves the embedded file for macOS. @return PDEmbeddedFile object or null if not found
2855 Retrieves the embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
2856 Retrieves the embedded file with Unicode name. @return PDEmbeddedFile object or null if not found
2857 Determines if an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2858 Enables or disables an optional content group by name. @param groupName the name of the optional content group @param enable true to enable, false to disable @return true if the operation was successful, false otherwise
2859 Retrieves or initializes the normal appearance entry for a PDF annotation. @return PDAppearanceEntry object representing the normal appearance
2860 Retrieves or creates the rollover appearance entry for a PDF annotation. @return PDAppearanceEntry object for rollover state
2861 Retrieves or initializes the down appearance entry for a PDF annotation. @return PDAppearanceEntry object representing the down appearance
2862 Sets field value by index. @param index position of the value in export values list @throws IOException if an I/O error occurs
2863 Prepends a new child to the outline. @param newChild the PDOutlineItem to add as the first child
2864 Appends a new child to the outline. @param newChild the PDOutlineItem to be added as a child
2865 Finds the PDSignatureField associated with a given PDSignature. @param fieldIterator iterator over PDField objects @param sigObject PDSignature object to match @return matching PDSignatureField or null if not found
2866 Retrieves the normal appearance stream of a PDF annotation. @param annotation the PDF annotation to process @return PDAppearanceStream object or null if not found
2867 Adds fonts from annotation widget to AcroForm resources. @param acroFormResources AcroForm resources where fonts are added @param annotation PDF annotation containing the widget
2868 Retrieves all on values from PDF annotations. @return Set of unique on values extracted from the document
2869 Checks if the current value matches the on-value. @return true if values match, false otherwise
2870 Sets the value to the first on-value from a PDF annotation widget. @throws IOException if an I/O error occurs while retrieving the on-value
2871 Finds the index of a given PDF page in the document. @param page PDPage to search for @return Index of the page or -1 if not found
2872 Sets the parent node and recalculates limits. @param parentNode the new parent node to be set
2873 Sets the child nodes for this tree node. @param kids list of child nodes to be set
2874 Sets the names map for a node. @param names key-value pairs representing names and their associated objects
2875 Initializes page labels for a PDF document. @param document the PDDocument to apply labels to @param dict dictionary containing label data @throws IOException if an I/O error occurs during processing
2876 Retrieves the encoding range for a specified parameter. @param paramNum the parameter number @return PDRange object or null if not found
2877 Constructs a PDCalGray color space.
2878 Constructs a PDCalRGB object. Initializes with CALRGB color space.
2879 Initializes a new PDLab color space. Inherits from CIEDictionaryBasedColorSpace with LAB color model.
2880 Constructs a PDCalGray from a COSArray. @param array the COSArray containing color components
2881 Constructs a PDCalRGB with specified RGB array. @param rgb COSArray containing RGB components
2882 Constructs a PDLab color space. @param lab COSArray containing LAB color values
2883 Initializes AxialShadingContext with shading details. @param shading PDShadingType2 object representing axial shading @param colorModel ColorModel for the context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining device bounds @throws IOException if processing fails
2884 Initializes a RadialShadingContext with specified parameters. @param shading PDShadingType3 object representing the radial shading pattern @param colorModel ColorModel for the context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if an I/O error occurs during initialization
2885 Constructs a TriangleBasedShadingContext. @param shading PDShading object for the shading pattern @param cm ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color conversion fails
2886 Initializes a Type1ShadingContext with given parameters. @param shading PDShadingType1 object representing the shading pattern @param colorModel ColorModel for the context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color conversion or inverse transform fails
2887 Retrieves the decoding range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2888 Retrieves the decoding range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
2889 Retrieves or creates a COSName object and fetches its string value. @param name the PDF name string to look up or create @param defaultValue the default string to return if name is not found @return String representation of the dictionary value or default if null
2890 Retrieves the style of the object. @return String representation of the style or default solid if not found
2891 Sets the border line properties for a PDF object. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray containing border settings @throws IOException if I/O error occurs when setting dash pattern or line width
2892 Creates a new PDF document by copying metadata and settings from the source document. @return PDDocument instance with copied properties @throws IOException if an I/O error occurs during document creation
2893 Sets the PDF document's version. @param newVersion the new version number to be set
2894 Retrieves the root of the structure tree. @return PDStructureTreeRoot object or null if not found
2895 Retrieves and processes child objects. @return List of processed child objects or empty list if none found
2896 Retrieves the PDF encryption settings. @return PDEncryption object or null if not encrypted
2897 Prepares decryption by setting up encryption and security handler. @throws IOException if an error occurs during setup
2898 Reads and processes the font encoding. @throws IOException if required CMap is missing or parsing fails
2899 Repairs length1 by finding 'exec' in byte array. @param bytes byte array to search @param length1 initial length value @return corrected length or original if valid
2900 Repairs and validates Length2 for a Type 1 font. @param bytes byte array containing font data @param length1 first length value used for validation @param length2 second length value to be repaired if invalid @return corrected Length2 or default value if original was invalid
2901 Retrieves fractional display setting from PDF dictionary. @return String representation of fractional display or default if not found
2902 Retrieves thousands separator from PDF dictionary. @return String representing thousands separator or default comma if not found
2903 Retrieves the decimal separator from PDF settings. @return String representing the decimal separator, default is "."
2904 Retrieves label prefix string from COS object. @return String representation of label prefix or space if not found
2905 Retrieves label suffix string from PDF dictionary. @return Suffix string or space if not found
2906 Retrieves label position to value mapping. @return String representation of the label position to value or default if not found
2907 Retrieves string value from an embedded dictionary. @param embedded the COSName of the embedded dictionary @param key the COSName key to look up in the dictionary @return String representation of the value or null if not found
2908 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object for comparison @param cidSystemInfo PDCIDSystemInfo object to filter by character set @return PriorityQueue of FontMatch objects sorted by match score
2909 Retrieves a date from an embedded dictionary. @param embedded the COSName key for the embedded dictionary @param key the COSName key for the date field within the embedded dictionary @return Calendar object representing the date or null if not found
2910 Creates a COSInputStream for decoding input stream. @param filters list of Filter objects for decoding @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded output @throws IOException if an I/O error occurs during decoding
2911 Initializes a PDF object stream parser. @param stream COSStream containing the object stream data @param document COSDocument to which the parsed objects belong @throws IOException if required entries are missing or invalid
2912 Initializes a PDF XRef stream parser. @param stream PDF stream containing XRef data @throws IOException if an I/O error occurs during initialization
2913 Initializes a PDCIDFontType0 with given dictionary and parent. Handles embedded CFF fonts or substitutes if not found. @param fontDictionary font dictionary containing CID metrics @param parent parent PDType0Font object @throws IOException if an I/O error occurs during font processing
2914 Initializes a PDCIDFontType2 object with given dictionary, parent, and TrueType font. Handles embedded and substituted fonts, setting up necessary properties. @param fontDictionary PDF font dictionary @param parent PDType0Font parent @param trueTypeFont TrueTypeFont object or null for substitution @throws IOException if an I/O error occurs during font processing
2915 Reads CMap from a COSBase object. @param base COSBase object representing the CMap source @return parsed CMap object @throws IOException if parsing fails
2916 Constructs a PDAnnotationCircle from a COSDictionary. @param field the dictionary to initialize the circle annotation from
2917 Constructs a PDAnnotationSquare from a COSDictionary. @param field the dictionary to initialize the annotation from
2918 Constructs a PDAnnotationHighlight from a COSDictionary. @param dict the dictionary to initialize the annotation from
2919 Constructs a PDAnnotationSquiggly from a COSDictionary. @param dict the dictionary to initialize the annotation from
2920 Constructs a PDAnnotationStrikeout from a COSDictionary. @param dict the dictionary to initialize the annotation from
2921 Constructs a PDAnnotationUnderline from a COSDictionary. @param dict the dictionary to initialize the annotation from
2922 Writes the body of a PDF document. Adds key objects to the write queue and writes them. @param doc COSDocument to process @throws IOException if an I/O error occurs
2923 Creates a cloudy polygon from a given path. @param path array of float arrays representing the polygon vertices @throws IOException if an I/O error occurs during drawing
2924 Renders a cloudy rectangle or ellipse. @param left x-coordinate of the left edge @param bottom y-coordinate of the bottom edge @param right x-coordinate of the right edge @param top y-coordinate of the top edge @param isEllipse flag indicating if the shape should be an ellipse @throws IOException if an I/O error occurs during rendering
2925 Constructs a JavaScript action. @param js JavaScript code to be executed
2926 Initializes TilingPaint with given parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param xform AffineTransform for scaling @throws IOException if an I/O error occurs during setup
2927 Retrieves an opaque image from a PDF page. @param region clipping rectangle or null for full page @param subsampling subsampling factor @return RGB BufferedImage or null if conversion fails @throws IOException if an error occurs during processing
2928 Converts a PDF image to an RGB BufferedImage with optional color key masking. @param pdImage PDF image object @param colorKey color key array for masking @return RGB BufferedImage or null if conversion fails @throws IOException if an error occurs during processing
2929 Pushes and sets resources for a content stream. @param contentStream the content stream to process @return previous resources object
2930 Calculates affine transform for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay rectangle @return AffineTransform object for centering
2931 Clips a rectangle to the media box. @param box the rectangle to clip @return clipped PDRectangle within the media box
2932 Retrieves the rotated media box of a PDF page. @param page PDPage object to process @return PDRectangle representing the rotated media box
2933 Checks if the document is marked. @return true if marked, false otherwise
2934 Checks if user properties are used. @return true if "UserProperties" is enabled in PDF, false otherwise
2935 Checks if the entry is marked as a suspect. @return true if marked as suspect, false otherwise
2936 Determines if mouse position should be tracked. @return true if tracking is enabled, false otherwise
2937 Checks if the document is open. @return true if the document is marked as open, false otherwise
2938 Checks if the PDF document has FD setting. @return true if FD is enabled, false otherwise
2939 Sets the visibility of the PDF object. @param hidden true to hide, false to show
2940 Retrieves non-stroking overprint control setting. @return boolean indicating if non-stroking overprint is enabled
2941 Draws an inline image at specified position with given dimensions. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
2942 Sets annotation visibility. @param invisible boolean indicating if annotation should be invisible
2943 Sets the annotation's visibility. @param hidden true to hide, false to show
2944 Sets the printed flag of an annotation. @param printed boolean indicating if the annotation is printed
2945 Sets the 'no zoom' flag in the annotation. @param noZoom boolean indicating whether to disable zooming
2946 Sets or clears the 'no rotate' flag in the annotation. @param noRotate boolean indicating whether to disable rotation
2947 Sets the "no view" flag for an annotation. @param noView boolean indicating whether to enable or disable the flag
2948 Sets the annotation to read-only. @param readOnly boolean indicating whether to enable read-only mode
2949 Sets the locked state of an annotation. @param locked boolean indicating whether to lock or unlock the annotation
2950 Toggles the 'no view' flag in the annotation. @param toggleNoView boolean indicating whether to enable or disable the flag
2951 Sets the locked contents flag in the annotation. @param lockedContents boolean indicating whether to lock or unlock the contents
2952 Sets the visibility of an object in a PDF. @param invisible boolean indicating whether to make the object invisible
2953 Sets the hidden flag in the PDF object. @param hidden boolean indicating whether to hide the item
2954 Sets the printed flag in the PDF dictionary. @param printed boolean indicating whether the document is printed
2955 Sets or clears the "no zoom" flag in the PDF document. @param noZoom boolean indicating whether to disable zooming
2956 Sets or clears the no rotate flag in the PDF dictionary. @param noRotate boolean indicating whether to disable rotation
2957 Sets the NoView flag in the PDF dictionary. @param noView boolean indicating whether to set or clear the NoView flag
2958 Sets the read-only flag for this PDF object. @param readOnly boolean indicating if the object should be read-only
2959 Sets the locked state of the PDF object. @param locked boolean indicating whether to lock or unlock the object
2960 Toggles the 'No View' flag in the PDF dictionary. @param toggleNoView boolean indicating whether to enable or disable the 'No View' flag
2961 Sets the lock status of document contents. @param lockedContents boolean indicating if contents are locked
2962 Sets whether a filter is required. @param flag boolean indicating requirement status
2963 Sets whether subfilter is required. @param flag true if subfilter is required, false otherwise
2964 Sets whether a digest method is required. @param flag boolean indicating requirement status
2965 Sets the required flag for form field validation. @param flag boolean indicating whether the field is required
2966 Sets whether a reason is required. @param flag true if reason is required, false otherwise
2967 Sets whether legal attestation is required. @param flag boolean indicating requirement status
2968 Sets whether to add revision information. @param flag boolean indicating requirement for revision info
2969 Sets whether the subject field is required. @param flag true if subject is mandatory, false otherwise
2970 Sets whether issuer is required. @param flag true if issuer is required, false otherwise
2971 Sets whether OID is required. @param flag indicates if OID is mandatory
2972 Sets whether subject DN is required. @param flag true if required, false otherwise
2973 Sets the key usage requirement in the PDF dictionary. @param flag boolean indicating whether key usage is required
2974 Sets whether URL is required. @param flag true if URL is required, false otherwise
2975 Sets the italic style flag. @param italic true to enable italic, false otherwise
2976 Sets the bold style of the text. @param bold true to enable bold, false otherwise
2977 Sets the flag indicating if signatures exist in the PDF. @param signaturesExist boolean value to update the flag
2978 Sets the append-only flag in the PDF signature. @param appendOnly boolean indicating whether to enable or disable the flag
2979 Sets the sort flag in the form field. @param sort boolean indicating whether to enable or disable sorting
2980 Sets the multi-select flag for the form field. @param multiSelect boolean indicating if the field supports multiple selections
2981 Sets the spell check flag for a form field. @param doNotSpellCheck boolean indicating whether to disable spell checking
2982 Sets whether to commit changes on selection change. @param commitOnSelChange flag indicating auto-commit behavior
2983 Sets the combo box flag in the PDF form. @param combo boolean indicating whether to enable or disable the combo box
2984 Sets the editable flag for a PDF form field. @param edit boolean indicating whether the field is editable
2985 Sets the read-only flag for the form field. @param readonly boolean indicating whether the field is read-only
2986 Sets whether the field is required. @param required boolean indicating if the field must be filled out
2987 Sets the no-export flag in the PDF form field. @param noExport boolean indicating whether to enable or disable export restrictions
2988 Constructs a PDPushButton instance. @param acroForm the form containing the button
2989 Creates a PDRadioButton instance. @param acroForm the form containing the radio button
2990 Sets whether radio buttons are in unison. @param radiosInUnison true if all selected, false otherwise
2991 Sets whether the text field is multiline. @param multiline true if multiline, false otherwise
2992 Sets the password flag in the PDF form field. @param password boolean indicating whether to enable or disable the password requirement
2993 Sets the file selection flag in the PDF form field. @param fileSelect boolean indicating whether to enable or disable file selection
2994 Sets the spell check flag for a form field. @param doNotSpellCheck boolean indicating whether to disable spell checking
2995 Sets the 'do not scroll' flag for a form field. @param doNotScroll boolean indicating whether scrolling is disabled
2996 Sets the 'comb' flag in the PDF field. @param comb boolean indicating whether to enable or disable the comb option
2997 Enables or disables rich text formatting. @param richText boolean indicating whether to enable rich text
2998 Retrieves an integer from an embedded dictionary. @param embeddedDictionary the key to find the embedded dictionary @param key the key for the integer value in the dictionary @return integer value or -1 if not found
2999 Retrieves the denominator value from the COS object. @return integer representing the denominator or -1 if not found
3000 Wraps an OutputStream with a PredictorOutputStream if predictor value is greater than 1. @param out original output stream @param decodeParams dictionary containing decoding parameters @return wrapped output stream or original if no prediction is needed
3001 Retrieves the structure parent index of the page. @return integer value representing the structure parent index or -1 if not found
3002 Removes a COSDictionary node from its parent and updates ancestor counts. @param node the COSDictionary node to remove
3003 Adds a page to the PDF document's page tree. @param page PDPage object to be added
3004 Retrieves bits per sample from PDF object. @return integer value representing bits per sample or -1 if not found
3005 Retrieves MCID (Marked Content Identifier) from PDF dictionary. @return integer value of MCID or -1 if not found
3006 Retrieves the next key in the parent tree. @return integer value representing the next key or -1 if not found
3007 Retrieves MCID value from PDF properties. @return MCID integer or -1 if not found
3008 Creates a PDImageXObject from a TIFF page. @param document PDDocument instance to create the image in @param reader source of TIFF data @param number page number to extract @return PDImageXObject created from the specified TIFF page or null if no data
3009 Retrieves line cap style from dictionary. @return integer value representing line cap style or -1 if not found
3010 Retrieves line join style from PDF dictionary. @return integer value representing line join style or -1 if not found
3011 Retrieves the structure parent index. @return integer value representing the structure parent or -1 if not found
3012 Retrieves the 'P' value from the PDF dictionary. @return integer value associated with 'P', or -1 if not found
3013 Retrieves the maximum length value from the PDF object. @return integer representing the maximum length or -1 if not found
3014 Retrieves an integer value from the COS object using a key. @param name the PDF name string as key @param defaultValue default integer value to return if not found @return integer value from the COS object or default if not found
3015 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
3016 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
3017 Checks if the annotation is printed. @return true if the annotation's printed flag is set, false otherwise
3018 Checks if zooming is disabled in the annotation. @return true if zooming is disabled, false otherwise
3019 Checks if annotation should not be rotated. @return true if no rotate flag is set, false otherwise
3020 Checks if the annotation should not be displayed. @return true if no-view flag is set, false otherwise
3021 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3022 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3023 Checks if the annotation toggle no view flag is set. @return true if the flag is set, false otherwise
3024 Checks if annotation contents are locked. @return true if contents are locked, false otherwise
3025 Checks if the object is invisible. @return true if the object has the INVISIBLE flag set, false otherwise
3026 Checks if the object is hidden. @return true if hidden, false otherwise
3027 Checks if the document is marked as printed. @return true if the document is printed, false otherwise
3028 Checks if no zoom flag is set in the PDF document. @return true if no zoom is allowed, false otherwise
3029 Checks if the PDF object has the no-rotate flag set. @return true if no-rotate flag is set, false otherwise
3030 Checks if the document should not be displayed in a viewer. @return true if no-view flag is set, false otherwise
3031 Checks if the PDF object is read-only. @return true if the read-only flag is set, false otherwise
3032 Checks if the PDF object is locked. @return true if the locked flag is set, false otherwise
3033 Checks if the 'No View' toggle flag is set in the PDF document. @return true if the 'No View' flag is set, false otherwise
3034 Checks if the contents are locked in a PDF document. @return true if contents are locked, false otherwise
3035 Checks if filter is required based on PDF form field flags. @return true if filter flag is set, false otherwise
3036 Checks if subfilter is required. @return true if subfilter flag is set in the PDF dictionary, false otherwise
3037 Checks if digest method is required. @return true if digest method is required, false otherwise
3038 Checks if the field requires validation. @return true if validation is required, false otherwise
3039 Checks if reason is required based on PDF form field flags. @return true if reason is required, false otherwise
3040 Checks if legal attestation is required based on PDF form flags. @return true if legal attestation is required, false otherwise
3041 Checks if adding revision information is required. @return true if the flag for adding revision info is set, false otherwise
3042 Checks if the subject field is required. @return true if subject is required, false otherwise
3043 Checks if issuer is required. @return true if issuer is required, false otherwise
3044 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
3045 Checks if subject DN is required. @return true if subject DN flag is set, false otherwise
3046 Checks if key usage is required. @return true if key usage flag is set, false otherwise
3047 Checks if URL is required. @return true if URL field flag is set, false otherwise
3048 Checks if the font style is italic. @return true if italic flag is set, false otherwise
3049 Checks if text is bold in a PDF font. @return true if bold flag is set, false otherwise
3050 Checks if signatures exist in the document. @return true if signatures are present, false otherwise
3051 Checks if the document is set to append-only mode. @return true if append-only flag is set, false otherwise
3052 Checks if the annotation is a push button. @return true if it's a push button, false otherwise
3053 Checks if the field is a radio button. @return true if the field is a radio button, false otherwise
3054 Checks if the form field should be sorted. @return true if sort flag is set, false otherwise
3055 Checks if the field allows multiple selections. @return true if multi-select flag is set, false otherwise
3056 Checks if spell checking should be disabled. @return true if spell checking is disabled, false otherwise
3057 Checks if commit on selection change flag is set. @return true if the flag is set, false otherwise
3058 Checks if the combo box flag is set in the PDF form field. @return true if the combo box flag is set, false otherwise
3059 Checks if the form field is editable. @return true if the edit flag is set, false otherwise
3060 Checks if the field is read-only. @return true if the field is read-only, false otherwise
3061 Checks if the field is required. @return true if the 'required' flag is set in the PDF dictionary, false otherwise
3062 Checks if the field should not be exported. @return true if the no export flag is set, false otherwise
3063 Checks if radio buttons are in unison mode. @return true if the 'radiosInUnison' flag is set, false otherwise
3064 Determines if the field allows multiple lines of text. @return true if multiline is enabled, false otherwise
3065 Checks if the field is password protected. @return true if the password flag is set, false otherwise
3066 Checks if file select flag is set in PDF form field. @return true if file select flag is enabled, false otherwise
3067 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
3068 Checks if the form field should not scroll. @return true if the "do not scroll" flag is set, false otherwise
3069 Checks if the text field is in comb mode. @return true if comb mode is enabled, false otherwise
3070 Checks if the form field supports rich text. @return true if rich text is supported, false otherwise
3071 Retrieves a PDF page by its zero-based index. @param index the zero-based index of the page @return PDPage object representing the specified page
3072 Returns the total number of pages in the PDF document. @return integer count of pages
3073 Adds an attribute to the PDF object. @param attributeObject the PDAttributeObject to add
3074 Updates or adds attribute revision in the PDF object. @param attributeObject the attribute whose revision is to be updated
3075 Adds a class name and its revision to the PDF object. @param className name of the class to add
3076 Increments the document's revision number by one.
3077 Prepares decryption for a PDF document using public key material. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial PublicKeyDecryptionMaterial for decryption @throws IOException if decryption preparation fails
3078 Retrieves the owner key from a PDF document. @return byte array containing the owner key or null if not found
3079 Retrieves and processes user key from the PDF dictionary. @return byte array of processed user key or null if not found
3080 Calculates displacement vector for a character. @param code Unicode code point of the character @return Vector representing horizontal displacement @throws IOException if an I/O error occurs while reading font data
3081 Calculates the total width of a string based on character widths. @param text input string to measure @return total width as float @throws IOException if an I/O error occurs during processing
3082 Retrieves a PDAbstractPattern by name. @param name the key for the pattern in resources @return PDAbstractPattern object or null if not found
3083 Processes operators in a PDF content stream. @param contentStream PDContentStream object containing the stream to process @throws IOException if an I/O error occurs during processing
3084 Retrieves a PDShading object by name. @param name the key for the shading resource @return PDShading object or throws IOException if not found
3085 Retrieves or creates the PDShading object for this resource. @return PDShading object or null if not found or unable to create
3086 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from PDF dictionary. @return bits per color component or -1 if not specified
3087 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from PDF dictionary. @return bits per color component or -1 if not specified
3088 Retrieves the number of bits per coordinate. Uses cached value if available; otherwise, fetches from COS object. @return integer representing bits per coordinate or -1 if not set
3089 Retrieves the number of bits per coordinate. Uses cached value if available; otherwise, fetches from COS object. @return integer representing bits per coordinate or -1 if not set
3090 Checks if the node is open. @return true if open count is greater than 0, false otherwise
3091 Creates a PDField instance based on the given dictionary. @param form the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any @return PDField object or null if not recognized
3092 Initializes PDFPrintable with document settings. @param document PDF document to be printed @param scaling scaling strategy for printing @param showPageBorder flag to display page borders @param dpi dots per inch for rendering quality @param center flag to center the content @param renderer PDF renderer instance
3093 Initializes a PDF renderer with the given document. @param document PDDocument to be rendered
3094 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument parsed from the file @throws IOException if an error occurs during loading or parsing
3095 Loads a PDF document from byte array. @param input PDF file as byte array @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3096 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3097 Processes color operators by setting the stroking color space. @param operator the PDF operator being processed @param arguments list of operands for the operator
3098 Retrieves and caches a PDXObject by name. @param name the COSName of the XObject to fetch @return PDXObject instance or null if not found @throws IOException if an error occurs during object creation
3099 Sets the current font and size for text operations. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3100 Sets graphics state parameters in PDF. @param state PDExtendedGraphicsState to be applied @throws IOException if I/O error occurs during writing
3101 Applies a shading fill to the PDF. @param shading PDShading object to apply @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during writing
3102 Begins marked content with a tag and properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3103 Sets a marked content point with properties in the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3104 Draws an image on the PDF page. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image Throws IllegalStateException if in text mode. @throws IOException if I/O error occurs during drawing
3105 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning @throws IOException if I/O error occurs during drawing
3106 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if I/O error occurs during drawing
3107 Checks if an optional content group by name is enabled. @param groupName the name of the optional content group @return true if the group is enabled, false otherwise
3108 Checks if an optional content group is enabled in the PDF document. @param group the PDOptionalContentGroup to check @return true if the group is enabled or no optional content properties are set, false otherwise
3109 Adds a new child as the first item in the outline. @param newChild the PDOutlineItem to add
3110 Adds a new child to the outline. @param newChild the PDOutlineItem to be added as a child
3111 Validates a given value against predefined options. @param value The value to validate
3112 Fixes page destinations in a PDF document. @param destinationDocument the document to update
3113 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found @throws IOException if an I/O error occurs during processing
3114 Constructs a GouraudShadingContext. @param shading PDShading object for the shading pattern @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color conversion fails
3115 Creates a new PDF document if necessary. Checks if the current page is a split point or if no destination document exists. @throws IOException if an I/O error occurs during document creation
3116 Writes the header for a PDF or FDF document. Handles version setting and compression if enabled. @param doc COSDocument to write the header to
3117 Sets optional content properties for the document. @param ocProperties properties to set
3118 Retrieves and returns the role map from the structure tree. @return Map containing the role map or an empty map if not found
3119 Prepares a PDF document for writing with optional encryption. @param doc the PDDocument to process @param signInterface interface for signature operations @throws IOException if an I/O error occurs
3120 Adds a COSBase object to the pool, handling various conditions and constraints. @param key unique identifier for the COS object @param base the COSBase object to add @return the actual COSBase object added or null if not stored
3121 Applies a protection policy to the PDF document. @param policy the ProtectionPolicy to apply @throws IOException if no security handler is found for the policy
3122 Prepares a PDF document for encryption. @param doc PDDocument to be encrypted @throws IOException if an I/O error occurs
3123 Retrieves the glyph name for a given character code. @param code character code to look up @return glyph name in uniXXXX format or ".notdef" if not found
3124 Converts character code to glyph ID. @param code character code to convert @return GID value or 0 if not found Uses CID2GID map for embedded fonts, otherwise falls back to ToUnicode CMap.
3125 Retrieves the MAC subtype from the PDF dictionary. @return String representation of the MAC subtype or null if not found
3126 Retrieves the Mac creator from PDF parameters. @return String representation of the Mac creator or null if not found
3127 Retrieves Mac resource fork from PDF parameters. @return String representation of the Mac resource fork or null if not found
3128 Retrieves a CIDFontMapping for the specified base font. @param baseFont the base font name @param fontDescriptor PDFontDescriptor object for comparison @param cidSystemInfo PDCIDSystemInfo object to filter by character set @return CIDFontMapping object or null if not found
3129 Creates a COSInputStream with default decode options. @return COSInputStream with decoded content @throws IOException if I/O error occurs
3130 Searches for and processes object streams using backward search. @param xrefTable map to store object keys and their offsets @throws IOException if an I/O error occurs during processing
3131 Parses a COSBase object from an object stream. @param objstmObjNr object stream number @param key unique object identifier @return COSBase object or null if not found @throws IOException if parsing fails
3132 Parses an XRef object stream. @param objByteOffset byte offset of the XRef object @param isStandalone true if the XRef is standalone @return previous XRef table's byte offset or -1 if not found @throws IOException if parsing fails
3133 Provides an InputStream for the PDF contents. @return InputStream containing decoded content or empty stream if not available @throws IOException if an I/O error occurs during stream processing
3134 Constructs a PDCIDFontType2 with specified dictionary and parent. Uses default TrueType font by passing null. @param fontDictionary PDF font dictionary @param parent PDType0Font parent @throws IOException if an I/O error occurs during font processing
3135 Creates and returns a PDCIDFontType2 object. @return PDCIDFontType2 instance initialized with cidFont, parent, and ttf @throws IOException if an I/O error occurs during font processing
3136 Creates a PDF annotation from a COSBase object. @param base the COSBase object representing the annotation @return PDAnnotation instance based on the subtype or null if unsupported @throws IOException if the base is not a COSDictionary or an unknown type
3137 Creates a cloudy rectangle based on given dimensions. @param rd PDRectangle defining the initial rectangle bounds @throws IOException if an I/O error occurs during rendering
3138 Renders a cloudy ellipse with specified boundaries. @param leftOrig x-coordinate of the left boundary @param bottomOrig y-coordinate of the bottom boundary @param rightOrig x-coordinate of the right boundary @param topOrig y-coordinate of the top boundary @throws IOException if drawing fails
3139 Initializes TilingPaint with given parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param xform AffineTransform for scaling @throws IOException if an I/O error occurs during setup
3140 Retrieves an opaque image from a PDF page. @return RGB BufferedImage or null if conversion fails @throws IOException if an error occurs during processing
3141 Initializes a PDPageContentStream for writing to a PDF page. @param document PDDocument instance @param sourcePage PDPage to write content to @param appendContent AppendMode specifying how to handle existing content @param compress true if content should be compressed @param resetContext true if graphics context should be reset @throws IOException if I/O error occurs
3142 Retrieves the crop box of a PDF page. @return PDRectangle representing the crop box or media box if not found
3143 Draws an inline image at specified position using its width and height. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3144 Draws an inline image on a PDF page. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3145 Draws an inline image at specified position with given dimensions. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3146 Draws an inline image at specified position with given dimensions. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing or graphics state manipulation
3147 Draws an inline image at the specified position with given dimensions. Throws exception if called within a text block. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during drawing
3148 Constructs an FDF annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3149 Decodes a JPEG 2000 image from an input stream and writes it to an output stream. @param encoded input stream containing the JPX image data @param decoded output stream for the decoded image data @param parameters decoding parameters @param index unused parameter @param options decoding options @return DecodeResult object with decoded parameters @throws IOException if there's an error reading or writing the image
3150 Decodes an LZW encoded input stream. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters dictionary containing configuration settings @param index current filter index @return DecodeResult object with original parameters @throws IOException if I/O error occurs during decoding
3151 Removes a page from the PDF by its 0-based index. @param index the page index to remove
3152 Removes a PDF page from its document. @param page PDPage object representing the page to be removed
3153 Adds a page to the PDF document and updates the highest XRef object number. @param page PDPage object to be added
3154 Inserts a new page before an existing page in a PDF document. @param newPage the new PDPage to insert @param nextPage the PDPage that follows the new page
3155 Inserts a new page after an existing page in the PDF. @param newPage page to be inserted @param prevPage existing page after which to insert
3156 Appends a marked content to the list. @param markedContent PDMarkedContent object to append
3157 Fetches UCS-2 CMap for a composite or descendant CIDFont. Handles predefined and custom mappings based on font properties.
3158 Creates a PDImageXObject from a TIFF page in a byte array. @param document PDDocument instance to create the image in @param byteArray source of TIFF data as a byte array @param number page number to extract @return PDImageXObject created from the specified TIFF page or null if no data
3159 Creates a PDImageXObject from a TIFF file. @param document PDDocument instance to add the image @param file source TIFF file @param number page number in the TIFF file @return PDImageXObject created from the specified TIFF page or null if no data
3160 Sets display options for a form field. Sorts values if sort flag is set, otherwise removes the OPT item. @param displayValues list of string values to display
3161 Sets export and display values for a form field. @param exportValues list of export values @param displayValues list of display values
3162 Sets selected options indices for multi-select fields. @param values list of index values to select
3163 Determines if the text field should be in comb mode. @return true if conditions for comb mode are met, false otherwise
3164 Retrieves a PDF page by its zero-based index. @param pageIndex the zero-based index of the page @return PDPage object representing the specified page
3165 Initializes PageExtractor with a PDF document. @param sourceDocument the PDF document to extract pages from
3166 Initializes a PDFPageable object with specified parameters. @param document PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to display page borders @param dpi dots per inch for rendering @param center flag to center the content
3167 Notifies attribute change to structure element. Updates or adds attribute revision in the PDF object.
3168 Prepares decryption for a PDF document. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray with document IDs @param decryptionMaterial Decryption material to use @throws IOException if decryption preparation fails
3169 Retrieves the width of a space character in the font. Uses various methods to determine the width, falling back to average if necessary. @return float representing the space width
3170 Inserts generated combination appearance for a text field. @param contents content stream to write to @param appearanceStream appearance stream of the field @param font font used for text @param fontSize size of the font @throws IOException if an I/O error occurs
3171 Checks if the audio format uses fixed pitch. @return true if fixed pitch is enabled, false otherwise
3172 Checks if the serif flag is set. @return true if serif flag is on, false otherwise
3173 Checks if the flag bit for symbolic representation is set. @return true if the symbolic flag is on, false otherwise
3174 Determines if the script flag is set. @return true if script flag is on, false otherwise
3175 Checks if the object is non-symbolic. @return true if non-symbolic flag is set, false otherwise
3176 Checks if text formatting includes italics. @return true if italic flag is set, false otherwise
3177 Checks if the 'ALL CAP' flag bit is set. @return true if 'ALL CAP' flag is on, false otherwise
3178 Determines if the asset is classified as small-cap. @return true if the small-cap flag is set, false otherwise
3179 Checks if force bold flag is set. @return true if force bold is enabled, false otherwise
3180 Sets or clears the fixed pitch flag. @param flag true to set, false to clear the fixed pitch flag
3181 Enables or disables serif style. @param flag true to enable, false to disable serif
3182 Sets or clears the symbolic flag. @param flag true to set, false to clear the flag
3183 Sets or clears the script execution flag. @param flag true to enable script execution, false to disable
3184 Sets or clears the non-symbolic flag. @param flag true to set, false to clear the flag
3185 Sets or clears the italic style flag. @param flag true to enable italic, false to disable
3186 Enables or disables all capitalization. @param flag true to enable, false to disable all cap
3187 Sets or clears the small cap flag. @param flag true to enable, false to disable the small cap feature
3188 Sets or clears the force bold flag. @param flag true to enable force bold, false to disable
3189 Retrieves a PDAbstractPattern by color. @param color the color object containing the pattern name @return PDAbstractPattern object or throws IOException if not found
3190 Processes a transparency group in the current PDF page. @param group PDTransparencyGroup object to process @throws IOException if an I/O error occurs during processing
3191 Processes a Type 3 character stream. @param charProc character procedure to process @param textRenderingMatrix matrix for text rendering @throws IOException if an I/O error occurs during processing
3192 Processes annotation appearance by aligning it with the annotation rectangle. @param annotation the annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs during processing
3193 Processes a tiling pattern with specified color and matrix. @param tilingPattern the pattern to process @param color the color for non-stroking operations @param colorSpace the color space for the color @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
3194 Processes a PDF content stream. @param contentStream the content stream to process @throws IOException if an I/O error occurs during processing
3195 Updates the open count of the parent outline node. @param delta amount to adjust the open count by
3196 Creates a PDField instance from a dictionary. @param form the form containing the field @param field the underlying COS dictionary of the field @param parent the parent non-terminal field, if any @return PDField object or null if not recognized
3197 Initializes PDFPrintable with default renderer. @param document PDF document to be printed @param scaling scaling strategy for printing @param showPageBorder flag to display page borders @param dpi dots per inch for rendering quality @param center flag to center the content
3198 Loads a PDF document from byte array. @param input PDF file as byte array @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3199 Loads a PDF document from a file. @param file source PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3200 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3201 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3202 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @param password decryption password for protected documents (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3203 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3204 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead source of the PDF file @param password decryption password for protected documents (null if not needed) @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3205 Sets visual signature from a PDF file. @param file PDF file containing the signature @throws IOException if an error occurs during initialization
3206 Sets visual signature from input stream. @param is InputStream containing the signature image @throws IOException if an error occurs during initialization
3207 Sets the current font and size for text operations. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3208 Sets the current font and size for text operations. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3209 Sets the current font and size for text operations, managing font stack. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3210 Sets the current font and size for text operations. @param font PDFont object to be used @param fontSize size of the font @throws IOException if an I/O error occurs
3211 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3212 Sets the non-stroking color for PDF rendering. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing operations
3213 Sets graphics state parameters in PDF. @param state PDExtendedGraphicsState to be applied @throws IOException if I/O error occurs during writing
3214 Sets graphics state parameters in PDF. @param state PDExtendedGraphicsState to be applied @throws IOException if I/O error occurs during writing
3215 Sets graphics state parameters in PDF. @param state PDExtendedGraphicsState to be applied @throws IOException if I/O error occurs during writing
3216 Writes graphics state parameters to PDF. @param state PDExtendedGraphicsState to be applied @throws IOException if I/O error occurs during writing
3217 Applies a shading fill to the PDF. @param shading PDShading object to apply @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during writing
3218 Applies a shading fill to the PDF. @param shading PDShading object to apply @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during writing
3219 Applies a shading fill to the PDF. @param shading PDShading object to apply @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during writing
3220 Applies a shading fill to the PDF. @param shading PDShading object to apply @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during writing
3221 Begins marked content with a tag and properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3222 Begins marked content with a tag and properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3223 Begins marked content with a tag and properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3224 Begins marked content with a tag and properties. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3225 Sets a marked content point with properties in the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3226 Sets a marked content point with properties in the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3227 Writes a marked content point with properties to the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3228 Sets a marked content point with properties in the PDF. @param tag COSName representing the marked content tag @param propertyList PDPropertyList containing properties for the marked content @throws IOException if I/O error occurs during writing
3229 Draws an image on the PDF page. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image Throws IllegalStateException if in text mode. @throws IOException if I/O error occurs during drawing
3230 Draws an image on the PDF page. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image Throws IllegalStateException if in text mode. @throws IOException if I/O error occurs during drawing
3231 Draws an image on the PDF page. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image Throws IllegalStateException if in text mode. @throws IOException if I/O error occurs during drawing
3232 Draws an image on the PDF page. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image Throws IllegalStateException if in text mode. @throws IOException if I/O error occurs during drawing
3233 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning @throws IOException if I/O error occurs during drawing or illegal state
3234 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning @throws IOException if I/O error occurs during drawing or illegal state
3235 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning @throws IOException if I/O error occurs during drawing or text mode is active
3236 Draws an image on the PDF canvas. @param image PDImageXObject to be drawn @param matrix transformation matrix for positioning @throws IOException if I/O error occurs during drawing or illegal state
3237 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3238 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IllegalStateException if called within a text block @throws IOException if I/O error occurs during drawing
3239 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3240 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if I/O error occurs during drawing or if called within a text block
3241 Prepares a PDF document for encryption. @param document PDDocument to encrypt @throws IOException if an I/O error occurs
3242 Sets default value for a PDF field. @param value the default value to be set
3243 Sets a new value for the field, applying different strategies based on export values. @param value new value to be set @throws IOException if an I/O error occurs during processing
3244 Retrieves the page number from a PDF document. @return Page number or -1 if not found
3245 Imports optional content properties from a source document to a target document. @param srcDoc the source PDF document containing OC properties @throws IOException if an I/O error occurs during property import
3246 Builds a subset of a TTF font, updating mappings and metrics. @param ttfSubset input stream for the TTF subset @param tag prefix to add to the font name @param gidToCid mapping from GIDs to CIDs @throws IOException if I/O error occurs during processing
3247 Retrieves the standard structure type of a PDF object. @return Standardized structure type as a String
3248 Prepares a PDF document for writing without encryption. @param doc the PDDocument to process @throws IOException if an I/O error occurs
3249 Saves the PDF document incrementally to an output stream. Subsets designated fonts and writes updates. @param output stream to save the updated PDF @throws IOException if an I/O error occurs
3250 Saves the PDF document incrementally with specified objects. @param output stream to write the updated PDF @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs during saving
3251 Adds a structure to the pool, handling streams, dictionaries, and arrays. @param current the COSBase object to process @throws IOException if an I/O error occurs
3252 Converts input stream to text string. @return Text representation of the input stream or empty string on error
3253 Creates an input stream from the underlying object. @return COSInputStream with decoded content @throws IOException if I/O error occurs
3254 Collects patches from a COSStream. @param xform additional affine transform @param matrix transformation matrix @param controlPoints number of control points @return List of Patch objects @throws IOException if I/O error occurs
3255 Rebuilds the PDF trailer using cross-reference table. @param xrefTable map of COSObjectKey to their byte offsets @return COSDictionary representing the rebuilt trailer @throws IOException if an I/O error occurs during processing
3256 Parses a PDF object dynamically based on its key and offset. @param objKey unique object identifier @param requireExistingNotCompressedObj flag to enforce non-compressed objects @return COSBase object representing the parsed PDF object or null if not found @throws IOException if parsing fails or object is invalid
3257 Parses the cross-reference table for a PDF document. @param document PDF document to parse @param startXRefOffset starting offset of the XRef table @return COSDictionary representing the parsed trailer @throws IOException if an I/O error occurs during parsing
3258 Creates a descendant CID font based on the dictionary and parent. @param dictionary PDF font dictionary @param parent PDType0Font parent @return PDCIDFont instance or throws IOException for invalid types
3259 Retrieves annotations from a PDF page. @param annotationFilter filter to apply to annotations @return list of filtered PDAnnotation objects @throws IOException if an I/O error occurs
3260 Retrieves the referenced PDF object. @return COSObjectable instance or null if not found or invalid
3261 Retrieves the annotation this one is in reply to. @return PDAnnotation instance or null if not found @throws IOException if an error occurs while creating the annotation
3262 Retrieves the parent annotation as a PDAnnotationMarkup. @return PDAnnotationMarkup instance or null if not found or incorrect type
3263 Creates a cloudy ellipse based on given rectangle. @param rd PDRectangle defining the ellipse boundaries @throws IOException if drawing fails
3264 Retrieves the normal appearance of a PDF annotation as a content stream. @param compress true to enable compression @return PDAppearanceContentStream for writing content @throws IOException if I/O error occurs
3265 Creates a PDPageContentStream to overwrite content on a PDF page. @param document PDDocument instance @param sourcePage PDPage to write content to @throws IOException if I/O error occurs
3266 Initializes a PDPageContentStream for writing to a PDF page. @param document PDDocument instance @param sourcePage PDPage to write content to @param appendContent AppendMode specifying how to handle existing content @param compress true if content should be compressed @throws IOException if I/O error occurs
3267 Initializes a new page for rendering. @param page PDPage object to initialize @throws IllegalArgumentException if page is null
3268 Retrieves the bleed box of a PDF page. @return PDRectangle representing the bleed box or crop box if not found
3269 Retrieves the trim box of a PDF page, or falls back to the crop box if not found. @return PDRectangle representing the trim box or crop box
3270 Retrieves the art box of a PDF page, or falls back to the crop box if not available. @return PDRectangle representing the art box or crop box
3271 Retrieves the rotated crop box of a PDF page. Adjusts dimensions if page is rotated 90 or 270 degrees. @param page PDPage object representing the PDF page @return PDRectangle representing the rotated crop box
3272 Draws an inline image at the specified position. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during drawing
3273 Draws an inline image at the specified coordinates. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3274 Draws an inline image at specified position using its width and height. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3275 Draws an inline image at the specified coordinates using its default width and height. @param inlineImage the PDInlineImage object to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3276 Constructs an FDF annotation caret from a DOM element. Initializes the annotation and sets its properties. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3277 Constructs a circular FDF annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3278 Constructs an FDF file attachment annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3279 Constructs an FDF annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3280 Constructs an FDF annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3281 Constructs an FDF annotation line from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3282 Constructs an FDFAnnotationLink from an XML element. Parses the element for URI actions and sets them in the annotation. @param element XML element representing the annotation @throws IOException if there's an error processing the element
3283 Constructs an FDF polygon annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3284 Constructs an FDF polyline annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required elements or attributes are missing or invalid
3285 Constructs an FDF annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3286 Constructs a square annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3287 Constructs a FDF stamp annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3288 Constructs an FDF annotation from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3289 Constructs an FDF annotation text markup from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3290 Removes a page from the PDF document by its 0-based index. @param pageNumber the page index to remove
3291 Removes a specified PDF page from the document. @param page PDPage object representing the page to be removed
3292 Imports a PDF page into the current document. @param page PDPage object to import @return Imported PDPage object @throws IOException if an I/O error occurs during import
3293 Creates a PDF template from the given page. @param page PDPage object to be included in the template
3294 Creates a PDImageXObject from a TIFF byte array. @param document PDDocument instance to create the image in @param byteArray source of TIFF data as a byte array @return PDImageXObject created from the specified TIFF page or null if no data
3295 Creates a PDImageXObject from a TIFF file. @param document PDDocument instance to add the image @param file source TIFF file @return PDImageXObject created from the first page of the TIFF file or null if no data
3296 Sets the value of a PDF form field. @param value string value to be set in the field
3297 Updates selected options indices for multi-select fields. @param values list of selected option values @param options list of all available option values
3298 Calculates the size and rotation of a PDF page. @param document PDDocument object containing pages @param page one-based index of the target page
3299 Finds the destination PDF page. @param doc PDDocument object containing the document @return PDPage object representing the destination page or null if not found @throws IOException if there is an error processing the PDF document
3300 Creates a PDFPageable object with default settings. @param document PDDocument to be processed
3301 Initializes a PDFPageable object with default settings. @param document PDDocument to be processed @param orientation page orientation setting
3302 Constructs a PDFPageable object with default DPI and centering. @param document PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to display page borders
3303 Initializes a PDFPageable object with specified parameters. @param document PDDocument to be processed @param orientation page orientation setting @param showPageBorder flag to display page borders @param dpi dots per inch for rendering
3304 Generates a map of page labels to their indices. @return Map with page labels as keys and page indices as values
3305 Retrieves page labels for each index in the PDF document. @return array of page labels corresponding to page indices
3306 Notifies change if values differ. @param oldBase original base object @param newBase new base object
3307 Processes a glyph's position and appearance in the PDF. @param textRenderingMatrix current text rendering matrix @param font font used for the glyph @param code character code of the glyph @param displacement vector representing the displacement of the glyph @throws IOException if an I/O error occurs
3308 Splits text content into lines based on font and width constraints. @param font PDFont object representing the font @param fontSize size of the font @param width maximum line width @return List of Line objects containing words @throws IOException if an I/O error occurs during processing
3309 Retrieves symbolic flag from font descriptor. @return Boolean value of symbolic flag or null if font descriptor is absent
3310 Determines a fallback font name based on PDFontDescriptor properties. @param fontDescriptor the descriptor containing font details @return the determined fallback font name as a string
3311 Builds a PDFontDescriptor from a Type1Font. @param type1 the source Type1Font object @return PDFontDescriptor representing the font descriptor
3312 Builds a PDFontDescriptor using FontMetrics. @param metrics font metrics to extract data from @return configured PDFontDescriptor instance
3313 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf the input TrueTypeFont @return PDFontDescriptor object representing font metrics @throws IOException if required tables are missing
3314 Retrieves a Paint object for the given PDColor. Handles different color spaces and patterns. @param color PDColor to render @return Paint object or null if not found
3315 Displays a transparency group by processing it. @param form PDTransparencyGroup object to display @throws IOException if an I/O error occurs during processing
3316 Processes a soft mask by setting up graphics state and restoring it afterward. @param group PDTransparencyGroup object to process @throws IOException if an I/O error occurs during processing
3317 Displays a Type 3 glyph for given parameters. @param textRenderingMatrix matrix for text rendering @param font PDType3Font object @param code character code @param displacement vector for displacement @throws IOException if an I/O error occurs during processing
3318 Displays a PDF annotation by processing its appearance. @param annotation the PDF annotation to display @throws IOException if an I/O error occurs during processing
3319 Processes a tiling pattern with default matrix. @param tilingPattern the pattern to process @param color the color for non-stroking operations @param colorSpace the color space for the color
3320 Displays a form on the current page. @param form the PDFormXObject to display @throws IOException if an I/O error occurs during processing
3321 Retrieves all fields from the form. @return List of PDField objects representing the form's fields
3322 Finds a child field by name in a PDF form. @param name array containing the field names @param nameIndex current index in the name array @return PDField object or null if not found
3323 Retrieves child fields of the current field. @return List of PDField objects representing child fields
3324 Constructs PDFPrintable with default centering. @param document PDF document to be printed @param scaling scaling strategy for printing @param showPageBorder flag to display page borders @param dpi dots per inch for rendering quality
3325 Loads a PDF document from byte array. @param input PDF file as byte array @param password decryption password for protected documents (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3326 Loads a PDF document from a specified file. @param file source PDF file @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3327 Loads a PDF document from a file using a default memory-only stream cache. @param file source PDF file @param password decryption password for protected documents (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3328 Loads a PDF document from a specified file. @param file source PDF file @param password decryption password for protected documents (null if not needed) @param streamCacheCreateFunction function to create the stream cache @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3329 Loads a PDF document from a file. @param file source PDF file @param password decryption password for protected documents (null if not needed) @param keyStore InputStream to keystore file (null if not needed) @param alias alias of the key in the keystore (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3330 Sets visual signature using properties. @param visSignatureProperties object containing signature details @throws IOException if an error occurs during setting the signature
3331 Sets the stroking color for PDF graphics using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during setting the color
3332 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3333 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3334 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3335 Sets the stroking color for PDF graphics. @param color PDColor object representing the new color @throws IOException if an I/O error occurs
3336 Sets non-stroking color for PDF rendering. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing operations
3337 Sets the non-stroking color for PDF rendering. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing operations
3338 Sets the non-stroking color for PDF rendering. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing operations
3339 Sets the non-stroking color for PDF rendering. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing operations
3340 Sets the non-stroking color for PDF rendering. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing operations
3341 Imports a PDF page as a form object. @param sourceDoc source PDF document containing the page @param page PDF page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3342 Converts COSDocument to PDDocument and prepares it for writing. @param doc the COSDocument to be converted @throws IOException if an I/O error occurs during processing
3343 Saves the document to an output stream with specified compression. @param output the OutputStream to write the PDF data to @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during saving or if the document is closed
3344 Initializes a COSWriterCompressionPool for the given PDDocument and compression parameters. @param document the PDF document to compress @param parameters optional compression parameters, defaults to new CompressParameters if null @throws IOException if an I/O error occurs during initialization
3345 Retrieves string representation of a PDF object. @param base PDF object (COSString or COSStream) @return String value or empty if conversion fails
3346 Retrieves and converts the value of a form field. @return Value of the field as Object (String, List<String>, or null) @throws IOException if an error occurs during conversion
3347 Retrieves rich text from a field. @return Rich text as string or null if not found
3348 Retrieves the "Before" value from a dictionary. @return String representation of the "Before" value or null if not found
3349 Retrieves the "After" value from the dictionary. @return String representation of the "After" value or null if not found
3350 Retrieves the JavaScript action as a string. @return JS action string or null if not found
3351 Retrieves rich content from PDF object. @return Rich content as string or null if not found
3352 Retrieves string from COSBase object. @param base COSBase instance to process @return String representation or empty if unsupported type
3353 Creates a layout page from a PDF page. @param page PDPage object to be converted @return LayoutPage instance with combined content stream and resources @throws IOException if I/O error occurs during processing
3354 Converts content to byte array. @return byte array of the content @throws IOException if I/O error occurs
3355 Retrieves and processes sample data from a PDF stream. @return 2D array of integers representing the processed sample values
3356 Loads ICC profile or falls back to alternate color space if necessary. Handles sRGB profiles and ensures display class compliance. Initializes initial color based on profile components.
3357 Initializes a PatchMeshesShadingContext for rendering. @param shading PDMeshBasedShadingType object for the shading pattern @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points @throws IOException if I/O error occurs during patch collection or pixel table creation
3358 Initializes Type4ShadingContext for PDF rendering. @param shading PDShadingType4 object representing the shading pattern @param cm ColorModel for color rendering @param xform AffineTransform for coordinate transformation @param matrix additional transformation matrix @param deviceBounds bounding rectangle of the device @throws IOException if an I/O error occurs during processing
3359 Initializes Type5ShadingContext. @param shading PDShadingType5 object for the shading pattern @param cm ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds bounding rectangle of the device @throws IOException if I/O error occurs during triangle collection or pixel table creation
3360 Retrieves PDF trailer, rebuilding if necessary. @return COSDictionary representing the PDF trailer @throws IOException if an I/O error occurs during processing
3361 Displays a form if not hidden by optional content. @param form the PDF form to display
3362 Begins a marked content sequence with OCG handling. @param tag the content tag @param properties optional content properties
3363 Retrieves all annotations from a PDF page. @return list of PDAnnotation objects or empty list if none found @throws IOException if an I/O error occurs
3364 Retrieves the normal appearance of a PDF annotation as a content stream without compression. @return PDAppearanceContentStream for writing content @throws IOException if I/O error occurs
3365 Appends a form as a new optional content group (layer) to a target page. @param targetPage the page to append the form to @param form the PDFormXObject to be drawn @param transform transformation matrix for the form @param layerName name of the new layer @return PDOptionalContentGroup representing the created layer @throws IOException if an I/O error occurs during processing
3366 Processes a PDF page by initializing it and handling its content stream. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3367 Processes a child PDF content stream on a specified page. @param contentStream the content stream to process @param page PDPage object to initialize and render on @throws IOException if an I/O error occurs during processing
3368 Retrieves the page format for a specified PDF page. @param pageIndex zero-based index of the PDF page @return PageFormat object representing the page's dimensions and orientation
3369 Constructs an FDF annotation highlight from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3370 Constructs an FDF annotation text markup from a DOM element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3371 Initializes a strike-out annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3372 Constructs an underline annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3373 Sets selected values for a multi-select PDF field. @param values list of selected option values @throws IOException if an I/O error occurs
3374 Initializes a visible signature designer with an image and PDF page. @param document PDDocument object containing the target page @param imageStream InputStream containing the signature image @param page one-based index of the target page @throws IOException if an I/O error occurs while processing
3375 Initializes a visible signature designer with a PDF document and an image. @param document PDDocument object containing pages @param image BufferedImage to be used in the signature @param page one-based index of the target page for placement
3376 Formats text content by processing paragraphs and lines. @throws IOException if an I/O error occurs during processing
3377 Calculates font size for text within a content rectangle. @param font PDFont object representing the font @param contentRect PDRectangle defining the content area @return calculated font size as float @throws IOException if an I/O error occurs during processing
3378 Reads and sets the font encoding. Handles COSName and COSDictionary encoding types, with fallbacks.
3379 Determines if a font is symbolic. @return Boolean indicating if the font is symbolic, or null if unsure
3380 Retrieves TrueType font by base name or fallback. @param baseFont the base font name to search for @param fontDescriptor descriptor containing font details @return FontMapping with found TrueTypeFont or last resort if none available
3381 Retrieves a FontBoxFont for a given base font or descriptor. @param baseFont the base font name @param fontDescriptor the PDFontDescriptor containing font details @return FontMapping with found FontBoxFont and boolean indicating if fallback was used
3382 Embeds a Type1 font into a PDF document. @param doc PDDocument to embed the font into @param dict COSDictionary for storing font properties @param pfbStream InputStream containing the font data @param encoding FontBox Encoding object or null for default @throws IOException if I/O error occurs during embedding
3383 Initializes a PDFont with base font details. @param baseFont the base font to initialize from @throws IllegalArgumentException if no AFM is found for the font
3384 Embeds TrueType font into PDF document. @param document PDDocument to embed font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to embed @param embedSubset true if embedding a subset of the font @throws IOException if embedding fails or is not permitted
3385 Displays a glyph based on the font type. @param textRenderingMatrix matrix for text rendering @param font the font to use @param code character code of the glyph @param displacement vector for additional positioning @throws IOException if an I/O error occurs
3386 Opens a node if it's not already open.
3387 Closes the node if it is currently open.
3388 Exports form fields to an FDF document. @return FDFDocument containing the exported fields @throws IOException if an I/O error occurs
3389 Determines if XFA is dynamic by checking presence and field count. @return true if XFA is present and no fields are defined, false otherwise
3390 Constructs PDFPrintable with default rasterization setting. @param document PDF document to be printed @param scaling scaling strategy for printing @param showPageBorder flag to display page borders
3391 Loads a PDF document from byte array without password. @param input PDF file as byte array @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading
3392 Deprecated method to load a PDF document. @param file source PDF file @param password decryption password for protected documents (null if not needed) @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3393 Loads a PDF document from a specified file without encryption. @param file source PDF file @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3394 Sets the stroking color for PDF graphics using a Java Color object. Converts Java Color to PDColor and delegates to setStrokingColor(PDColor). @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during setting the color
3395 Sets the stroking color for PDF graphics using a Java Color object. Converts Java Color to PDColor and delegates to setStrokingColor(PDColor). @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during setting the color
3396 Sets the stroking color for PDF graphics using a Java Color object. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during setting the color
3397 Sets the stroking color for PDF graphics using a Java Color object. Converts Java Color to PDColor and calls setStrokingColor(PDColor). @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during setting the color
3398 Sets non-stroking color for PDF rendering. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing operations
3399 Sets non-stroking color for PDF rendering. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing operations
3400 Sets non-stroking color for PDF rendering. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing operations
3401 Sets non-stroking color for PDF rendering. @param color Java Color object representing the desired color @throws IOException if an I/O error occurs during writing operations
3402 Initializes PDF form field appearance based on characteristics. @param widget the annotation widget to modify @param appearanceCharacteristics style settings for appearance @param appearanceStream stream where appearance is written @throws IOException if an I/O error occurs during processing
3403 Writes text to a PDF content stream with specified font and color. @param contents PDAppearanceContentStream to write to @param zeroFontSize default font size if current is zero @throws IOException if an I/O error occurs during writing
3404 Imports a PDF page as a form object by page number. @param sourceDoc source PDF document containing the page @param pageNumber zero-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs during processing
3405 Saves the document to an output stream with default compression. @param output the OutputStream to write the PDF data to @throws IOException if an I/O error occurs during saving or if the document is closed
3406 Saves the document to a file with specified compression. @param file the File to write the PDF data to @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during saving or if the document is closed
3407 Writes compressed PDF body. @param document COSDocument to write @throws IOException if an I/O error occurs
3408 Retrieves rich contents of an annotation. @return Rich content string or empty if not found
3409 Writes field data to XML. @param output Writer object to write XML to @throws IOException if an error occurs during writing
3410 Retrieves rich text value from PDF attribute. @return Rich text value as a string or empty if unsupported type
3411 Retrieves and converts the first page of a PDF document to a layout page. @param doc PDDocument object containing the PDF pages @return LayoutPage instance representing the first page's content @throws IOException if I/O error occurs during processing
3412 Initializes a PDFunctionType4 with a given COSBase. @param functionStream the underlying COSBase object for the function @throws IOException if I/O error occurs during parsing
3413 Recursively interpolates samples based on coordinates and step. @param coord coordinate array for interpolation @param step current step in the recursive process @return interpolated float array of sample values
3414 Initializes a PDICCBased object from an ICC array. Checks system property for alternate color space usage. Loads ICC profile and initializes stream.
3415 Initializes a Type6ShadingContext for rendering. @param shading PDShadingType6 object for the shading pattern @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
3416 Initializes a Type7ShadingContext for rendering. @param shading PDShadingType7 object for the shading pattern @param colorModel ColorModel for rendering colors @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
3417 Retrieves bytes from XFA content. Handles both COSArray and COSStream cases. @return byte array of XFA data or empty if unsupported type @throws IOException if I/O error occurs
3418 Updates structure parent indices for annotations on a PDF page. @param page the PDF page to update @param structParentOffset offset to add to structure parent indices @throws IOException if an I/O error occurs
3419 Clones the structure tree from a source document to a destination document. Handles K values, parent trees, resources, and other related elements. @param destinationDocument the document to clone the structure tree into @throws IOException if an I/O error occurs during cloning
3420 Processes annotations from a PDF page. Clones and adjusts links, destinations, and references. @param imported PDPage object containing the annotations to process @throws IOException if an I/O error occurs during processing
3421 Builds a map of PDF pages to their annotations. @param fields list of PDField objects representing form fields @param pages PDPageTree object containing all pages @return Map from COSDictionary (page) to set of COSDictionary (widgets) @throws IOException if an I/O error occurs
3422 Processes a PDF page by setting its rotation, size, and translation matrix. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3423 Constructs an FDFDictionary from XML. @param fdfXML root element of the FDF document
3424 Imports FDF field values and flags into the current PDF field. @param fdfField the FDFField to import from @throws IOException if an I/O error occurs during processing
3425 Initializes PDVisibleSignDesigner with a PDF source and image. @param documentSource source of the PDF file @param imageStream InputStream containing the visible signature image @param page one-based index of the target page in the PDF @throws IOException if an I/O error occurs during processing
3426 Initializes a PDVisibleSignDesigner with an image and calculates the PDF page size. @param documentSource source of the PDF file @param image BufferedImage to be set as the signature @param page one-based index of the target page @throws IOException if an error occurs during processing
3427 Determines if a font is symbolic. @return Boolean indicating if the font is symbolic, defaulting to true if unsure
3428 Constructs a PDType1Font object by embedding a Type1 font into a PDF document. @param doc PDDocument to embed the font into @param pfbIn InputStream containing the font data @param encoding FontBox Encoding object or null for default @throws IOException if I/O error occurs during embedding
3429 Constructs a PDSimpleFont with specified base font. @param baseFont the base font for the simple font
3430 Initializes a PDFont with a given dictionary. @param fontDictionary the COSDictionary representing the font
3431 Constructs a PDCIDFontType2Embedder for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param dict COSDictionary representing the font dictionary @param ttf TrueTypeFont object to be embedded @param embedSubset flag indicating if only a subset of glyphs should be embedded @param parent PDType0Font parent font @param vertical flag indicating if the font is used for vertical text @throws IOException if an I/O error occurs during font embedding or CMap creation
3432 Embeds a TrueType font into a PDF document. @param document PDDocument to embed font into @param dict COSDictionary for font properties @param ttf TrueTypeFont object to embed @param encoding character encoding for the font @throws IOException if embedding fails or is not permitted
3433 Checks if the XFA in the PDF form is dynamic. @param acroForm the PDF form to check @return true if XFA is dynamic, false otherwise
3434 Constructs PDFPrintable with default settings. @param document PDF document to be printed @param scaling scaling strategy for printing
3435 Loads a PDF document from a specified file. @param file source PDF file @return PDDocument object representing the loaded document @throws IOException if an error occurs during loading or parsing
3436 Generates appearance for a PDF annotation widget. @param widget the annotation widget to process @param appearanceStream the appearance stream of the widget @param output the output stream for the content @throws IOException if an I/O error occurs
3437 Builds a PDF document with a visible signature. @param properties design properties for the PDF and signature @return InputStream containing the generated PDF data @throws IOException if an error occurs during PDF creation
3438 Saves the document to a file using default compression. @param file the File to write the PDF data to @throws IOException if an I/O error occurs during saving or if the document is closed
3439 Saves the document to a specified file with given compression. @param fileName path where the PDF will be saved @param compressParameters parameters for PDF compression @throws IOException if an I/O error occurs during saving or if the document is closed
3440 Writes FDF document data to XML. @param output Writer object to write XML to @throws IOException if an error occurs during writing
3441 Creates a PDF function based on the provided COSBase. @param function the underlying COSBase object for the function @return PDFunction instance or throws IOException if invalid type
3442 Initiates recursive interpolation. @return interpolated float array of sample values
3443 Creates a PDICCBased object from an ICC array. @param iccArray the COSArray representing the ICC profile @param resources PDF resources to check for cached color spaces @return PDICCBased color space or new instance if not found in cache @throws IOException if there is an error processing the ICC array
3444 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to add the image to @param image source image to convert @return PDImageXObject representing the input image @throws IOException if an I/O error occurs during processing
3445 Extracts matte values from a soft mask image. @param softMask PDImageXObject representing the soft mask @return float[] containing RGB matte values or null if not applicable @throws IOException if an error occurs during processing
3446 Draws an image on the PDF page at specified coordinates. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner Throws IOException if I/O error occurs during drawing.
3447 Parses PDF content into an XML document. @return parsed Document object @throws IOException if parsing fails
3448 Draws a PDF page and its annotations. @param g Graphics2D context to draw on @param pageSize size of the PDF page @throws IOException if an I/O error occurs
3449 Processes a PDF page by importing it into the destination document. Handles resource management and annotation processing. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3450 Processes a PDF page by setting rotation, size, and translation matrix. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3451 Processes a PDF page, handling content separation and writing. @param page PDPage object to process @throws IOException if an I/O error occurs during processing
3452 Constructs an FDF catalog from XML. @param element root element of the FDF document
3453 Constructs a PDType1Font object with default encoding. @param doc PDDocument to embed the font into @param pfbIn InputStream containing the font data @throws IOException if I/O error occurs during embedding
3454 Constructs a PDType1Font with the specified base font. @param baseFont the base font for the Type 1 font
3455 Constructs a PDSimpleFont object using a given dictionary. @param fontDictionary COSDictionary representing the font properties
3456 Initializes a PDType0Font with the given dictionary. Validates and processes descendant fonts and encoding. @param fontDictionary the COSDictionary representing the font @throws IOException if required data is missing or invalid
3457 Initializes a PDType0Font for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param ttf TrueTypeFont object to be embedded @param embedSubset flag indicating if only a subset of glyphs should be embedded @param closeTTF flag indicating if the TTF should be closed after embedding @param vertical flag indicating if the font is used for vertical text @throws IOException if an I/O error occurs during font processing or registration
3458 Constructs a PDTrueTypeFont object. @param document PDDocument to embed font into @param ttf TrueTypeFont object @param encoding character encoding for the font @param closeTTF flag to indicate if TTF should be closed after embedding @throws IOException if font embedding fails
3459 Returns an iterator over PDF form fields. @return Iterator of PDField objects
3460 Constructs PDFPrintable with default scaling. @param document PDF document to be printed
3461 Initializes a PDVisibleSignDesigner with an image stream and PDF file. @param filename path to the PDF file @param imageStream InputStream containing the visible signature image @param page one-based index of the target page in the PDF @throws IOException if an I/O error occurs during initialization
3462 Initializes a PDVisibleSignDesigner with an image and PDF page size. @param filename path to the PDF file @param image BufferedImage for the signature @param page one-based index of the target page @throws IOException if an error occurs during file loading or processing
3463 Builds a PDF with a visible signature. Initializes PDF template and sets the signature stream. @throws IOException if an error occurs during PDF creation
3464 Saves the document to a specified file. @param fileName path where the document should be saved @throws IOException if an I/O error occurs during saving or if the document is closed
3465 Writes PDF document's FDF data to XML. @param output Writer object for XML output @throws IOException if writing fails
3466 Evaluates input through a stitching function. @param input array of input values @return output array after evaluating the selected child function @throws IOException if an error occurs during evaluation
3467 Initializes a PDDeviceN with device N components and resources. @param deviceN COSArray containing device N attributes @param resources PDResources for color space and function creation @throws IOException if there's an error in creating alternateColorSpace or tintTransform
3468 Retrieves the tint transformation function. @return PDFunction instance or throws IOException if invalid type
3469 Initializes a PDSeparation object from given COSArray and resources. @param separation array containing separation details @param resources PDResources for color space creation @throws IOException if tint transform parameters are invalid
3470 Retrieves the PDF function. @return PDFunction instance or null if not found @throws IOException if an I/O error occurs
3471 Retrieves an array of PDFunction objects from the COS object. @return PDFunction[] containing functions defined in the PDF @throws IOException if /Function element is invalid or missing
3472 Retrieves the transfer function for color transformation. @return PDFunction instance or null if not defined @throws IOException if invalid PDF function type encountered
3473 Initializes a PDIndexed color space. @param indexedArray COSArray representing the indexed color space @param resources PDResources for resource lookup @throws IOException if I/O error occurs during initialization
3474 Evaluates input values using linear interpolation. @param input array of input float values @return interpolated output float values @throws IOException if function /Decode entry is missing or invalid
3475 Constructs a PDImageXObject from PNG data. @param document PDF document to add the image to @param state conversion state containing PNG details @return PDImageXObject or null if creation fails
3476 Creates a PDImageXObject from a file based on its extension. @param file source image file @param doc PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs
3477 Creates a PDImageXObject from a file based on its content. @param file source image file @param doc PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs or unsupported image type is detected
3478 Retrieves an image with optional masking. @param region clipping rectangle or null for full image @param subsampling subsampling factor @return BufferedImage with applied mask if applicable @throws IOException if an error occurs during processing
3479 Draws an image on the PDF page at specified coordinates. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner Throws IOException if I/O error occurs during drawing.
3480 Draws an image on the PDF page at specified coordinates. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner Throws IOException if I/O error occurs during drawing.
3481 Draws an image on the PDF page at specified coordinates using its full width and height. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner Throws IOException if I/O error occurs during drawing.
3482 Draws an image on the PDF page at specified coordinates using its full width and height. @param image PDImageXObject to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner Throws IOException if I/O error occurs during drawing.
3483 Renders a PDF page as an image. @param pageIndex zero-based index of the page to render @param scale factor for scaling the rendered image @param imageType desired output image type @param destination target for rendering @return BufferedImage containing the rendered page @throws IOException if an I/O error occurs during rendering
3484 Renders a PDF page to the specified graphics context. @param pageIndex zero-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX factor by which to scale the width @param scaleY factor by which to scale the height @param destination RenderDestination for output @throws IOException if an I/O error occurs
3485 Processes pages from a source PDF document within specified range. @throws IOException if an I/O error occurs during page processing
3486 Processes each page in the PDF document, handling bookmarks and content extraction. @param pages PDPageTree containing all pages to be processed @throws IOException if an I/O error occurs during processing
3487 Initializes an FDFDocument from a given XML document. @param doc XML document containing XFDF data @throws IOException if the root element is not 'xfdf'
3488 Retrieves the default Helvetica font. Initializes it if not already created. @return PDType1Font instance of Helvetica
3489 Retrieves or creates a FontBoxFont for the specified base name. @param baseName the base font name @return FontBoxFont associated with the base name
3490 Creates a PDTrueTypeFont from a font dictionary. @param fontDictionary COSDictionary representing the font properties @throws IOException if an I/O error occurs during font processing
3491 Constructs a PDType1CFont object from a given dictionary. @param fontDictionary COSDictionary representing the font properties @throws IOException if an I/O error occurs during font processing
3492 Constructs a PDType1Font object using a given dictionary. @param fontDictionary COSDictionary representing the font properties
3493 Constructs a PDType3Font object from a given dictionary. @param fontDictionary COSDictionary representing the font properties @param resourceCache ResourceCache for managing font resources @throws IOException if an I/O error occurs during encoding setup
3494 Loads a TrueType font into a PDF document. @param doc PDF document to load the font into @param randomAccessRead source of the TrueType font data @param embedSubset flag indicating if only a subset of glyphs should be embedded @param vertical flag indicating if the font is used for vertical text @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3495 Loads a PDType0Font for embedding TrueType fonts in PDFs. @param doc PDF document to embed the font into @param ttf TrueTypeFont object to be embedded @param embedSubset flag indicating if only a subset of glyphs should be embedded @return PDType0Font object configured for embedding @throws IOException if an I/O error occurs during font processing or registration
3496 Loads a vertical TrueType font into a PDF document. @param doc PDF document to load the font into @param ttf TrueTypeFont object to be loaded @param embedSubset flag indicating if only a subset of glyphs should be embedded @return PDType0Font object for vertical text @throws IOException if an I/O error occurs during font processing or registration
3497 Loads a PDTrueTypeFont into the given document. @param doc PDDocument to embed font into @param ttf TrueTypeFont object @param encoding character encoding for the font @return PDTrueTypeFont object @throws IOException if font embedding fails
3498 Loads a TrueType font into the given PDF document. @param doc PDDocument to embed font into @param randomAccessRead source of the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if font loading fails
3499 Retrieves all signature fields from the document's AcroForm. @return List of PDSignatureField objects representing signature fields
3500 Refreshes the appearances of all terminal fields in the form. Iterates through the field tree and updates visual representations.
3501 Returns an iterator over PDF form fields. @return Iterator of PDField objects
3502 Enables or disables caching of PDF form fields. @param cache true to enable caching, false to disable
3503 Retrieves a PDF form field by its fully qualified name. @param fullyQualifiedName the full path of the field @return PDField object or null if not found
3504 Applies overlays to specific pages of a PDF document. @param specificPageOverlayMap mapping of page numbers to overlay paths @return PDDocument with applied overlays @throws IOException if I/O error occurs during processing
3505 Overlays documents onto a base PDF. @param specificPageOverlayDocumentMap map of page numbers to overlay documents @return modified PDDocument with overlays applied @throws IOException if I/O error occurs during processing
3506 Writes XFDF document to XML. @param output Writer object for XML output @throws IOException if writing fails
3507 Evaluates input through functions and normalizes output. @param input array of input values for evaluation @return float[] containing evaluated results, clamped between 0 and 1 @throws IOException if function retrieval fails
3508 Creates a PDColorSpace from a COSBase object and PDF resources. @param colorSpace the COSBase representing the color space @param resources the PDF resources containing the color space @param wasDefault indicates if it's a default color space @return PDColorSpace instance or throws IOException for invalid input
3509 Initializes a PDIndexed color space using an array. @param indexedArray COSArray representing the indexed color space @throws IOException if I/O error occurs during initialization
3510 Creates a PDImageXObject from an image file path. @param imagePath path to the image file @param doc PDDocument to add the image to @return PDImageXObject created from the file @throws IOException if an I/O error occurs
3511 Retrieves full image without masking. @return BufferedImage of the entire image @throws IOException if an error occurs during processing
3512 Renders a PDF page as an image with specified parameters. @param pageIndex zero-based index of the page to render @param scale factor for scaling the rendered image @param imageType desired output image type @return BufferedImage containing the rendered page @throws IOException if an I/O error occurs during rendering
3513 Renders a PDF page to the specified graphics context. @param pageIndex zero-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX factor by which to scale the width @param scaleY factor by which to scale the height @throws IOException if an I/O error occurs
3514 Splits a PDF document into multiple documents. @param document the source PDF document to split @return a list of PDDocument objects representing the split documents @throws IOException if an I/O error occurs during processing
3515 Writes text from a PDF document to an output stream. @param doc PDDocument to read from @param outputStream Writer to write the extracted text @throws IOException if an I/O error occurs during processing
3516 Loads XFDF data from an input stream. @param input stream containing XFDF XML data @return FDFDocument object initialized with parsed XML @throws IOException if parsing fails
3517 Renders a string of text using current graphics and text states. @param string byte array representing the text to render @throws IOException if an I/O error occurs during rendering
3518 Retrieves the glyph path for a given font name and glyph name. @param baseName the base font name @param glyphName the glyph name to retrieve the path for @return GeneralPath object representing the glyph, or an empty path if not found @throws IOException if an I/O error occurs
3519 Constructs a PDMMType1Font object using a given dictionary. @param fontDictionary COSDictionary representing the font properties
3520 Constructs a PDType3Font object from a given dictionary. @param fontDictionary COSDictionary representing the font properties @throws IOException if an I/O error occurs during encoding setup
3521 Loads TrueType font from a file into a PDF document. @param doc PDF document to load the font into @param file source file of the TrueType font @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3522 Loads a TrueType font into a PDF document. @param doc PDF document to load the font into @param input source of the TrueType font data @param embedSubset flag indicating if only a subset of glyphs should be embedded @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3523 Loads a TrueType font for vertical text into a PDF document. @param doc PDF document to load the font into @param file source file of the TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3524 Loads a TrueType font into a PDF document for vertical text. @param doc PDF document to load the font into @param input source of the TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3525 Loads a vertical TrueType font into a PDF document. @param doc PDF document to load the font into @param input source of the TrueType font data as InputStream @param embedSubset flag indicating if only a subset of glyphs should be embedded @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3526 Loads a TrueType font from a file into the given PDF document. @param doc PDDocument to embed font into @param file source file of the font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if font loading fails
3527 Loads a TrueType font from an InputStream into the given PDF document. @param doc PDDocument to embed font into @param input source of the font data as InputStream @param encoding character encoding for the font @return PDTrueTypeFont object representing the loaded font @throws IOException if font loading fails
3528 Retrieves all signature dictionaries from the document. @return List of PDSignature objects representing the signatures
3529 Adds a signature to a PDF document. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options SignatureOptions specifying preferences and settings @throws IOException if an I/O error occurs while adding the signature
3530 Imports FDF fields into the PDF document. @param fdf FDFDocument containing fields to import @throws IOException if an I/O error occurs during processing
3531 Saves XFDF data to a Writer. @param output Writer object for XML output @throws IOException if writing or closing fails
3532 Evaluates a single input value through functions and normalizes output. @param inputValue single input value for evaluation @return float array containing evaluated results, clamped between 0 and 1 @throws IOException if function retrieval fails
3533 Evaluates input through shading function and converts to RGB. @param values array of input values for evaluation @return RGB value as an integer @throws IOException if function retrieval or evaluation fails
3534 Retrieves the non-stroking paint with applied soft mask. @return Paint object for non-stroking color or null if not found @throws IOException if an error occurs during processing
3535 Renders a transparency group onto the provided graphics context. @param form PDTransparencyGroup to render @param graphics Graphics2D object for drawing @throws IOException if an error occurs during rendering
3536 Renders a PDF page as an RGB image. @param pageIndex zero-based index of the page to render @param scale factor for scaling the rendered image @return BufferedImage containing the rendered page in RGB format @throws IOException if an I/O error occurs during rendering
3537 Renders a PDF page as an image with specified DPI. @param pageIndex zero-based index of the page to render @param dpi dots per inch for rendering quality @return BufferedImage containing the rendered page @throws IOException if an I/O error occurs during rendering
3538 Renders a PDF page as an image with specified DPI. @param pageIndex zero-based index of the page to render @param dpi desired dots per inch for the rendered image @param imageType desired output image type @return BufferedImage containing the rendered page @throws IOException if an I/O error occurs during rendering
3539 Renders a PDF page to the specified graphics context with uniform scaling. @param pageIndex zero-based index of the page to render @param graphics Graphics2D context for rendering @param scale factor by which to scale both width and height @throws IOException if an I/O error occurs
3540 Extracts a sub-document from the source PDF. @return PDDocument containing the specified range of pages @throws IOException if an I/O error occurs during processing
3541 Extracts text from a PDF document. @param doc PDDocument to extract text from @return extracted text as a String @throws IOException if an I/O error occurs during processing
3542 Loads XFDF data from a file. @param filename path to the XFDF file @return FDFDocument object initialized with parsed XML @throws IOException if file reading or parsing fails
3543 Loads XFDF data from a file. @param file File containing XFDF XML data @return FDFDocument object initialized with parsed XML @throws IOException if reading or parsing fails
3544 Renders a string of text using current graphics and text states. @param string byte array representing the text to render @throws IOException if an I/O error occurs during rendering
3545 Renders text strings from a COSArray using current graphics and text states. @param array COSArray containing text data to render @throws IOException if an I/O error occurs during rendering
3546 Creates a PDFont instance based on the given dictionary. @param dictionary COSDictionary representing the font @param resourceCache cache for resources @return PDFont object or null if not found @throws IOException if required data is missing or invalid
3547 Loads a TrueType font into a PDF document. @param doc PDF document to load the font into @param input source of the TrueType font data @return PDType0Font object representing the loaded font @throws IOException if an I/O error occurs during font processing or registration
3548 Retrieves the last signature dictionary from the document. @return PDSignature object or null if no signatures exist
3549 Prepares a PDF document for external signing. @param output the OutputStream to write the signed PDF to @return ExternalSigningSupport instance for further signing steps @throws IOException if an I/O error occurs during preparation
3550 Flattens form fields in a PDF document. @param fields list of PDField objects to flatten @param refreshAppearances flag to refresh field appearances before flattening @throws IOException if an I/O error occurs during processing
3551 Adds a signature to a PDF document. @param sigObject PDSignature object representing the signature @param options SignatureOptions specifying preferences and settings @throws IOException if an I/O error occurs while adding the signature
3552 Adds a signature to a PDF document using default options. @param sigObject PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs while adding the signature
3553 Saves XFDF data to a file. @param fileName destination file for saving XFDF data @throws IOException if writing or closing fails
3554 Draws a glyph with specified transformations and rendering modes. @param path the shape representing the glyph @param font the font used for drawing @param code the character code of the glyph @param displacement the vector displacement for positioning @param at the affine transformation applied to the glyph @throws IOException if an error occurs during rendering
3555 Builds an indexed image from PNG data. @param doc PDF document to add the image to @param state conversion state containing PNG details @return PDImageXObject or null if creation fails
3556 Renders a PDF page as an RGB image at default scale. @param pageIndex zero-based index of the page to render @return BufferedImage containing the rendered page in RGB format @throws IOException if an I/O error occurs during rendering
3557 Renders a PDF page to the specified graphics context using default scaling. @param pageIndex zero-based index of the page to render @param graphics Graphics2D context for rendering @throws IOException if an I/O error occurs
3558 Retrieves a PDFont by name, using cache if available. @param name the COSName of the font to retrieve @return PDFont object or null if not found @throws IOException if an I/O error occurs
3559 Creates a PDFont instance from a COSDictionary. @param dictionary COSDictionary representing the font @return PDFont object or null if not found @throws IOException if required data is missing or invalid
3560 Flattens static PDF form fields. Skips flattening if XFA is dynamic. @throws IOException if an I/O error occurs during processing
3561 Adds a signature to a PDF document with default options. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs while adding the signature
3562 Saves XFDF data to a specified file. @param fileName path where XFDF data should be saved @throws IOException if writing or closing fails
3563 Calculates pixel table for shaded triangles within device bounds. @param triangleList list of ShadedTriangle objects to process @param array 2D integer array representing the pixel table @param deviceBounds Rectangle defining the rendering area @throws IOException if color evaluation fails
3564 Fills and strokes the current path. @param windingRule rule for determining the interior of the path @throws IOException if an error occurs during processing
3565 Converts PNG data to a PDImageXObject. @param doc PDF document to add the image to @param state conversion state containing PNG details @return PDImageXObject or null if conversion fails
3566 Processes font setting from operands. @param operands list of COSBase objects containing font name and size @throws IOException if invalid operands or font retrieval fails
3567 Copies necessary resources to an appearance stream. Ensures the font is added if not already present. @param appearanceStream target appearance stream for copying resources
3568 Retrieves and creates a PDFont instance from the font setting. @return PDFont object or null if not found @throws IOException if required data is missing or invalid
3569 public void append(List<String> sourceFiles, String destFile) throws IOException { PDDocument destDoc = null; try { destDoc = new PDDocument(); for (String srcFile : sourceFiles) { PDDocument srcDoc = PDDocument.load(new File(srcFile)); copyPages(destDoc, srcDoc); copyMetadata(destDoc, srcDoc); srcDoc.close(); } destDoc.save(destFile); } finally { if (destDoc != null && !destDoc.isClosed()) { destDoc.close(); } } }
3570 Converts PNG image data to a PDImageXObject. @param doc PDF document to add the image to @param imageData byte array containing PNG file data @return PDImageXObject or null if conversion fails
3571 Processes an operator with its operands. @param operator the Operator to be processed @param operands list of COSBase objects representing operands @throws IOException if processing fails due to invalid operands or font issues
3572 Sets appearance content for a PDF annotation widget. Copies resources, parses stream, and writes updated content. @param widget the annotation widget to process @param appearanceStream the appearance stream of the widget @throws IOException if an I/O error occurs
3573 Copies graphics state properties from a dictionary to the provided PDGraphicsState. @param gs target PDGraphicsState object to copy into @throws IOException if an I/O error occurs during processing
3574 Merges multiple PDF documents into one. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for PDF compression @throws IOException if an error occurs during merging or saving
3575 Creates a PDImageXObject from a byte array. @param document PDDocument to add the image to @param byteArray source image data as a byte array @param name image file name for error messages @param customFactory optional factory for custom image creation @return PDImageXObject representing the input image @throws IOException if an I/O error occurs during processing
3576 Processes appearance stream operators. Parses content and processes each operator with its operands. @param content byte array containing PDF stream data @throws IOException if an I/O error occurs during processing
3577 Merges PDF documents based on the specified merge mode. @param streamCacheCreateFunction function to create stream cache (optional) @param compressParameters compression parameters for the output document @throws IOException if an I/O error occurs during merging or saving
3578 Creates a PDImageXObject from a byte array. @param document PDDocument to add the image to @param byteArray source image data as a byte array @param name image file name for error messages @return PDImageXObject representing the input image @throws IOException if an I/O error occurs during processing
3579 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance PDF string defining the default appearance @param defaultResources resources for the appearance @throws IOException if processing fails
3580 Merges PDF documents with default compression. @param streamCacheCreateFunction function to create stream cache (optional) @throws IOException if an I/O error occurs during merging or saving
3581 Retrieves the default appearance string for a PDF form field. @return PDDefaultAppearanceString object or null if not found @throws IOException if processing fails
3582 Sets the appearance value for a PDF form field. Handles multiline text and widget-specific appearances. @param apValue original appearance value to set @throws IOException if an I/O error occurs during processing
3583 Initializes AppearanceGeneratorHelper with a PDF form field. Validates AcroForm resources and retrieves default appearance string. @param field PDVariableText object representing the form field @throws IOException if resource validation or appearance processing fails
