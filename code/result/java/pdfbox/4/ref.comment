1 Returns the revision number at the specified position. @param index the position @return the revision number @throws IndexOutOfBoundsException if the index is out of range
2 Returns the stroking color space. @return The stroking color space.
3 Constructor. @param a The action dictionary.
4 Transforms a width using the CTM. @param width the width to be transformed @return the transformed width
5 Returns the non-stroking color. @return The non-stroking color.
6 Returns the object at the specified position. @param index the position @return the object @throws IndexOutOfBoundsException if the index is out of range
7 Sets the stroking color. @param color The new stroking color.
8 Sets the non-stroking color. @param color The new non-stroking color.
9 Returns the stroking color. @return The stroking color.
10 Returns the size. @return the size
11 Returns the non-stroking color space. @return The non-stroking color space.
12 Get the value of the array as an integer, return the default if it does not exist. @param index The value of the array. @param defaultValue The value to return if the value is null. @return The value at the index or the defaultValue.
13 Parse the PNG structure into the PNGConverterState. If we can't handle something, this method will return null. @param imageData the byte array with the PNG data @return null or the converter state with all relevant chunks
14 @return Returns the textLineMatrix.
15 Constructor. @param a The action dictionary.
16 @param value The textLineMatrix to set.
17 Executes the instruction sequence. @param context the execution context
18 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool. @param key The {@link COSObjectKey} a {@link COSBase} is registered for in this compression pool. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey} in this compression pool, if such an object is contained.
19 Constructor. @param a The action dictionary.
20 Constructor @param a the action dictionary
21 This will parse the trailer from the stream and add it to the state. @return false on parsing error @throws IOException If an IO error occurs.
22 Add a source file to the list of files to merge. @param source Full path and file name of source document. @throws FileNotFoundException If the file doesn't exist
23 This will get the selected index. <p> A RadioButton might have multiple same value options which are not selected jointly if they are not set in unison {@link #isRadiosInUnison()}.</p> <p> The method will return the first selected index or -1 if no option is selected.</p> @return the first selected index or -1.
24 Creates a new soft mask. @param dictionary SMask @param resourceCache Resource cache, may be null. @return the newly created instance of PDSoftMask
25 This will get an encoding by name. May return null. @param name The name of the encoding to get. @return The encoding that matches the name.
26 @return Returns the textMatrix.
27 @param value The textMatrix to set.
28 {@inheritDoc}
29 Return the field tree representing all form fields @return the field tree representing all form fields
30 This will get the list of filters that are associated with this stream. @return A (possibly empty) list of all encoding filters to apply to this stream, never null.
31 Clones this object. @return cloned matrix as an object.
32 Creates a new soft mask. @param dictionary The soft mask dictionary.
33 Convenience method to create a scaled instance. Produces the following matrix: x 0 0 0 y 0 0 0 1 @param x The xscale operator. @param y The yscale operator. @return A new matrix with just the x/y scaling
34 Convenience method to create a translating instance. Produces the following matrix: 1 0 0 0 1 0 x y 1 @param x The x translating operator. @param y The y translating operator. @return A new matrix with just the x/y translating.
35 Convenience method to create a rotated instance. @param theta The angle of rotation measured in radians @param tx The x translation. @param ty The y translation. @return A new matrix with the rotation and the x/y translating.
36 Transforms the given vector by this matrix. @param vector 2D vector @return the transformed vector.
37 This will get the list of filters that are associated with this stream. The list is empty if there are none. @return A list of all encoding filters to apply to this stream.
38 Returns a new vector scaled by both x and y. @param sxy x and y scale @return a new vector scaled by both x and y
39 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
40 This will return the index of the entry or -1 if it is not found. @param object The object to search for. @return The index of the object or -1.
41 Returns the z value of the tristimulus. @return the Z value
42 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
43 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
44 Constructor. @param dictionary the corresponding dictionary
45 Performs exponential interpolation {@inheritDoc}
46 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state.
47 Returns the list of filters.
48 Write the given {@link COSBoolean} to the given stream. @param output The stream, that shall be written to. @param cosBoolean The content, that shall be written.
49 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
50 Returns the y value of the tristimulus. @return the Y value
51 Constructor. @param a The action dictionary.
52 Whether the for control points are on a line. @param ctl an edge's control points, the size of ctl is 4 @return true when 4 control points are on a line, otherwise false
53 Constructor. @param a The action dictionary.
54 {@inheritDoc}
55 This is used to create/cache operators in the system. @param operator The operator for the system. @return The operator that matches the operator keyword.
56 Constructor #2. @param a The action dictionary.
57 Constructor. @param a The action dictionary.
58 Finds a suitable image raster reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
59 Finds a suitable image reader for an image format. @param formatName The image format to search for. @param errorCause The probably cause if something goes wrong. @return The image reader for the format. @throws MissingImageReaderException if no image reader is found.
60 Constructor. @param a The action dictionary.
61 Returns a new InputStream which reads the encoded PDF stream data. Experts only! @return InputStream containing raw, encoded PDF stream data. @throws IOException If the stream could not be read.
62 Constructor. @param a The action dictionary.
63 Constructor @param a the action dictionary
64 Returns the x value of the tristimulus. @return the X value
65 Returns the b value of the tristimulus. @return the B value
66 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
67 Returns the g value of the tristimulus. @return the g value
68 Returns the r value of the tristimulus. @return the R value.
69 Constructor. @param a The action dictionary.
70 This will get the size of the font. @return The size of the font.
71 This will get the upper right x coordinate. @return The upper right x .
72 This will get the lower left y coordinate. @return The lower left y.
73 Notifies the user attribute object if the user property is changed. @param oldEntry old entry @param newEntry new entry
74 This will get the lower left x coordinate. @return The lower left x.
75 Constructor. @param a The action dictionary.
76 Constructor. @param a The action dictionary.
77 This will get the upper right y coordinate. @return The upper right y.
78 Whether a point is contained in this ShadedTriangle. @param p the target point @return false if p is outside of this triangle, otherwise true
79 This is a convenience method that will get the dictionary object that is expected to be a COSObject. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSObject.
80 Inserts the diacritic TextPosition to the str of this TextPosition and updates the widths array to include the extra character width. @param i current character @param diacritic The diacritic TextPosition
81 Constructor of class Line. @param p0 one end of a line @param p1 the other end of the line @param c0 color of point p0 @param c1 color of point p1
82 Creates a new soft mask paint. @param paint underlying paint. @param mask soft mask @param bboxDevice bbox of the soft mask in the underlying Graphics2D device space @param backdropColor the color to be used outside the transparency group’s bounding box; if null, black will be used. @param transferFunction the transfer function, may be null.
83 Computes backdrop removal. The backdrop removal equation is given in section 11.4.4 in the PDF 32000-1:2008 standard. It returns the final color <code>C</code> for each pixel in the group:<br> <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code><br> where<br> <code>Cn</code> is the group color including backdrop (read from <code>groupImage</code>),<br> <code>C0</code> is the backdrop color,<br> <code>alpha0</code> is the backdrop alpha,<br> <code>alphagn</code> is the group alpha excluding backdrop (read the alpha channel from <code>groupAlphaImage</code>)<br> <p> The alpha of the result is equal to <code>alphagn</code>, i.e., the alpha channel of <code>groupAlphaImage</code>. <p> The <code>backdrop</code> image may be much larger than <code>groupImage</code> if, for example, the current page is used as the backdrop. Only a specific rectangular region of <code>backdrop</code> is used in the backdrop removal: upper-left corner is at <code>(offsetX, offsetY)</code>; width and height are equal to those of <code>groupImage</code>. @param backdrop group backdrop @param offsetX backdrop left X coordinate @param offsetY backdrop upper Y coordinate
84 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @return The DOM document. @throws IOException It there is an error creating the dom.
85 Constructor. @param aFloat The primitive float object that this object wraps. @throws IOException If aFloat is not a float.
86 Constructor from an existing destination array. @param arr The destination array.
87 Constructor from an existing destination array. @param arr The destination array.
88 Constructor from an existing destination array. @param arr The destination array.
89 Constructor from an existing destination array. @param arr The destination array.
90 Constructor from an existing destination array. @param arr The destination array.
91 Constructor.
92 Creates an encoding from the given FontBox encoding. @param encoding FontBox encoding @return the encoding created from the given FontBox encoding
93 Returns a COSInteger instance with the given value. @param val integer value @return COSInteger instance
94 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
95 Normalize certain Unicode characters. For example, convert the single "fi" ligature to "f" and "i". Also normalises Arabic and Hebrew presentation forms. @param word Word to normalize @return Normalized word
96 Draws the pattern stream to the requested context. @param g The graphics context to draw onto. @param pattern The tiling pattern to be used. @param colorSpace color space for this tiling. @param color color for this tiling. @param patternMatrix the pattern matrix @throws IOException If there is an IO error while drawing the page.
97 Creates a new GlyphList from a glyph list file. @param numberOfEntries number of expected values used to preallocate the correct amount of memory @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
98 Creates a new GlyphList from multiple glyph list files. @param glyphList an existing glyph list to be copied @param input glyph list in Adobe format @throws IOException if the glyph list could not be read
99 Returns the GID for the given character code. @param code character code @return GID (glyph index) @throws IOException if the data could not be read
100 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
101 Maps a PostScript glyph name to the name in the underlying font, for example when using a TTF font we might map "W" to "uni0057".
102 Lazy load the ICC profile, because it's slow. @throws IOException if the ICC profile could not be initialized
103 @param image The image to apply the mask to as alpha channel. @param mask A mask image in 8 bit Gray. Even for a stencil mask image due to {@link #getOpaqueImage()} and {@link SampledImageReader}'s {@code from1Bit()} special handling of DeviceGray. @param interpolateMask interpolation flag of the mask image. @param isSoft {@code true} if a soft mask. If not stencil mask, then alpha will be inverted by this method. @param matte an optional RGB matte if a soft mask. @return an ARGB image (can be the altered original image)
104 Calculate the color of a point. @param p the target point @return an array denotes the point's color
105 Modify the current clipping path by intersecting it with the given path. @param path path to intersect with the clipping path
106 Modify the current clipping path by intersecting it with the given path. @param area area to intersect with the clipping path
107 Transfer clip to the destination device. Override this if you want to avoid to do slow intersecting operations but want the destination device to do this (e.g. SVG). You can get the individual clippings via {@link PDGraphicsState#getCurrentClippingPaths()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5258">PDFBOX-5258</a> for sample code. @param graphics graphics device
108 Constructor of CubicBezierCurve @param ctrlPnts 4 control points [p0, p1, p2, p3] @param l dividing level, if l = 0, one cubic Bezier curve is divided into 2^0 = 1 segments, if l = n, one cubic Bezier curve is divided into 2^n segments
109 Set the stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setStrokingColor(PDColor)
110 This will write the fdf document. @param doc The document to write. @throws IOException If an error occurs while generating the data.
111 Write the given {@link COSInteger} to the given stream. @param output The stream, that shall be written to. @param cosInteger The content, that shall be written.
112 Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. @param xReferenceEntry the object to be compared. @return a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.
113 This will get the X scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The X scaling factor.
114 This will get the Y scaling factor. This is dependent on the current transformation matrix (set by the "cm" operator), the text matrix (set by the "Tm" operator) and the font size (set by the "Tf" operator). @return The Y scaling factor.
115 Returns a new OutputStream for writing encoded PDF data. Experts only! @return OutputStream for raw PDF stream data. @throws IOException If the output stream could not be created.
116 COSWriter constructor. @param outputStream The output stream to write the PDF. @param compressParameters The configuration for the document's compression.
117 COSWriter constructor for incremental updates. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. @param outputStream output stream where the new PDF data will be written. @param inputData random access read containing source PDF data @throws IOException if something went wrong
118 Returns the content of this string as a PDF <i>text string</i>. @return the PDF string representation of the COSString
119 Default constructor.
120 Creates a new <i>text string</i> from a Java String. @param text The string value of the object. @param forceHex forces the hexadecimal presentation of the string if set to true
121 Creates a new instance. @param targetDoc the PDF document to modify
122 Write the given {@link COSArray} to the given stream. @param output The stream, that shall be written to. @param cosArray The content, that shall be written.
123 This is a special case of getItem that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
124 Returns the number of recipients contained in the Recipients field of the dictionary. @return the number of recipients contained in the Recipients field.
125 returns the COSString contained in the Recipients field at position i. @param i the position in the Recipients field array. @return a COSString object containing information about the recipient number i.
126 @return the direction in which the specified transition effect shall move. It can be either a {@link COSInteger} or {@link COSName#NONE}. Default to {@link COSInteger#ZERO} @see PDTransitionDirection
127 This will get the keys of all metadata information fields for the document. @return all metadata key strings. @since Apache PDFBox 1.3.0
128 Gets the attribute names. @return the attribute names
129 Copy all Trailer Information to this file. @param trailerDict dictionary to be added as trailer info
130 Copy Constructor. This will make a shallow copy of this dictionary. @param dict The dictionary to copy.
131 Tell if the dictionary is an info dictionary. @param dictionary the dictionary to be checked @return true if the given dictionary is an info dictionary
132 Returns true if widths are present in the font descriptor. @return true if widths are present in the font descriptor
133 Returns true if the missing widths entry is present in the font descriptor. @return true if the missing widths entry is present in the font descriptor
134 This will tell if the AcroForm has XFA content. @return true if the AcroForm is an XFA form
135 {@inheritDoc}
136 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
137 Uses the managed {@link #updateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on the managed {@link #updateInfo}. @see COSUpdateInfo @see COSIncrement
138 Returns true if this font is one of the "Standard 14" fonts and receives special handling. @return true if this font is one of the "Standard 14" fonts
139 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param len The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
140 Calculate the key to be used for RC4 and AES-128. @param objectNumber The data object number. @param genNumber The data generation number. @return the calculated key.
141 Create a new appearance stream. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
142 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the appearance is part of. @param appearance The appearance stream to add to. @param outputStream The appearances output stream to write to.
143 Transforms a point using the CTM. @param x the x-coordinate of the point to be transformed @param y the y-coordinate of the point to be transformed @return the transformed point
144 Not called in TexturePaint subclasses, which is why we wrap TexturePaint.
145 Concatenates (premultiplies) the given matrix to this matrix. @param matrix The matrix to concatenate.
146 Translates this matrix by the given amount. @param tx x-translation @param ty y-translation
147 Scales this matrix by the given factors. @param sx x-scale @param sy y-scale
148 This method multiplies this Matrix with the specified other Matrix, storing the product in a new instance. It is allowed to have (other == this). @param other the second operand Matrix in the multiplication; required @return the product of the two matrices.
149 Returns a new security handler for the given protection policy, or null none is available. @param policy the protection policy for which to create a security handler @return a new SecurityHandler instance, or null if none is available
150 Returns a new security handler for the given Filter name, or null none is available. @param name the Filter name from the PDF encryption dictionary @return a new SecurityHandler instance, or null if none is available
151 Parse all compressed objects. The stream is closed after parsing. @return a map containing all parsed objects using the object number as key @throws IOException if there is an error while parsing the stream
152 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
153 This will read a chunk of data. @param data The buffer to write data to. @param offset The offset into the data stream. @param length The number of byte to attempt to read. @return The number of bytes actually read. @throws IOException If there is an error reading data from the underlying stream.
154 Read the image stream of the signature and set height and width. @param stream stream of your visible signature image @throws IOException If we can't read, flush, or close stream of image
155 Set the non stroking color. <p> The command is only emitted if the color is not null and the number of components is &gt; 0. @param color The colorspace to write. @return true if the non stroking color was set successfully @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setNonStrokingColor(PDColor)
156 We look which row encoding is the "best" one, ie. has the lowest sum. We don't implement anything fancier to choose the right row encoding. This is just the recommend algorithm in the spec. The get the perfect encoding you would need to do a brute force check how all the different encoded rows compress in the zip stream together. You have would have to check 5*image-height permutations... @return the "best" row encoding of the row encodings
157 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
158 Returns the base state represented by the given {@link COSName}. @param state the state name @return the state enum value
159 Constructor. @param pdContentstream The content stream to parse. @throws IOException If there is an error initializing the stream.
160 Constructor. @param bytes the bytes to parse.
161 Search for/parse the object with the given object number. The stream is closed after parsing the object with the given number. @param objectNumber the number of the object to b e parsed @return the parsed object or null if the object with the given number can't be found @throws IOException if there is an error while parsing the stream
162 Read all object numbers from the compressed object stream. The stream is closed after reading the object numbers. @return a map off all object numbers and the corresponding offset within the object stream. @throws IOException if there is an error while parsing the stream
163 {@inheritDoc}
164 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
165 Ten bytes for the PANOSE classification number for the font. @see <a href="http://www.monotype.com/services/pan1">http://www.monotype.com/services/pan1</a> @return the PANOSE classification number
166 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
167 Adds a text position to the contents. @param text the text position
168 Adds a marked content to the contents. @param markedContent the marked content
169 Adds an XObject to the contents. @param xobject the XObject
170 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
171 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
172 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
173 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
174 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
175 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
176 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
177 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
178 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
179 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
180 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
181 {@inheritDoc}
182 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
183 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
184 Returns the font's glyph list.
185 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
186 Convert this image to a COS object. @return The cos object that matches this image object.
187 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
188 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
189 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
190 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
191 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
192 This will reset the key to be used. @param key The RC4 key used during encryption.
193 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
194 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
195 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
196 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
197 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
198 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
199 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
200 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
201 Returns the stream. @return The stream for this object.
202 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
203 Returns the stream. {@inheritDoc}
204 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
205 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
206 {@inheritDoc}
207 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
208 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
209 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
210 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
211 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
212 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
213 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
214 {@inheritDoc}
215 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
216 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
217 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
218 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
219 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
220 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
221 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
222 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
223 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
224 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
225 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
226 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
227 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
228 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
229 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
230 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
231 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
232 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
233 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
234 add an entry in the x ref table for later dump. @param entry The new entry to add.
235 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
236 Add an new entry to the XRef stream. @param entry new entry to be added
237 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
238 This will return the paint type. @return The type of object that this is.
239 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
240 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
241 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
242 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
243 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
244 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
245 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
246 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
247 Brute force search for the last EOF marker. @throws IOException if something went wrong
248 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
249 Returns the resulting cross reference table. @return
250 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
251 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
252 Returns the default value, if any. @return A non-null string.
253 This will return the type. @return the type of object that this is
254 Brute force search for all xref entries (tables). @throws IOException if something went wrong
255 Private constructor. This will limit the number of COSName objects that are created. @param aName The name of the COSName object.
256 Constructor.
257 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string. @param forceHex forces the hexadecimal presentation of the string if set to true
258 Constructor.
259 Constructor. @param object The object that this encapsulates.
260 Constructor. @param object The object that this encapsulates. @param parser The parser to be used to load the object on demand
261 Constructor. @param key The object number of the encapsulated object. @param parser The parser to be used to load the object on demand
262 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param x x-coordinate of the top-left corner of the region to be decoded @param y y-coordinate of the top-left corner of the region to be decoded @param width Width of the region to be decoded @param height Height of the region to be decoded
263 Sets the given {@link COSObjectKey} as a free reference in a PDF's crossreference stream ({@link PDFXRefStream}). @param key The key, that shall be set as the free reference of the document. @param nextFreeObject The object number of the next free object.
264 Prepares a object stream entry reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param objectStreamIndex The index of the {@link COSObject} in the containing object stream. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry. @param parentKey The {@link COSObjectKey} of the object stream, that is containing the object.
265 Default constructor.
266 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
267 Creates a new attribute object with a given dictionary. @param dictionary the dictionary
268 Constructor. @param aValue The boolean value.
269 Creates a user property with a given dictionary. @param dictionary the dictionary @param userAttributeObject the user attribute object
270 @param dict The dictionary storage.
271 Constructor. @param dic The COS dictionary.
272 Constructor. @param a An existing FDF Annotation.
273 Constructor. @param a An existing FDF Annotation.
274 Constructor. @param a An existing FDF Annotation.
275 Constructor. @param a An existing FDF Annotation.
276 Creates a blend composite @param blendMode Desired blend mode @param constantAlpha Constant alpha, must be in the inclusive range [0.0...1.0] or it will be clipped. @return a blend composite. @throws IllegalArgumentException if blendMode is null.
277 Returns the transparency group attributes dictionary. @return the transparency group attributes dictionary, never null.
278 Creates a new shading pattern from the given COS dictionary. @param resourceDictionary The COSDictionary for this pattern resource.
279 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern. @param resourceCache The resource cache, may be null
280 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
281 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
282 Constructor. @param shadingType2 the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
283 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
284 Constructor. @param shading the shading resources @param matrix the pattern matrix concatenated with that of the parent content stream
285 Constructor. @param a An existing FDF Annotation.
286 Constructor. @param a An existing FDF Annotation.
287 Constructor. @param a An existing FDF Annotation.
288 Constructor. @param a An existing FDF Annotation.
289 Constructor. @param dic The COS dictionary.
290 Constructor. @param dic The COS dictionary.
291 Constructor. @param dic The COS dictionary.
292 Create a child node object. @param dic The dictionary for the child node object to refer to. @return The new child node object.
293 Constructor. This will <b>not</b> set up the /Type and /Subtype entries. @param str The stream parameter.
294 Constructor. @param str The stream parameter.
295 {@inheritDoc}
296 Constructor. @param function The function stream.
297 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
298 creates a new transition for an existing dictionary @param dictionary the dictionary to be used for the new transition
299 Constructor for an existing structure element. @param dic The existing dictionary.
300 Constructor for an existing structure element. @param dic The existing dictionary.
301 Constructor.
302 Constructor. @param a An existing FDF Annotation.
303 Constructor. @param a An existing FDF Annotation.
304 Constructor. @param a An existing FDF Annotation.
305 Constructor. @param a An existing FDF Annotation.
306 Constructor. @param a An existing FDF Annotation.
307 Constructor. @param a An existing FDF Annotation.
308 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
309 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
310 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
311 Write something (if defined) at the start of a page. @throws IOException if something went wrong
312 Write something (if defined) at the end of a page. @throws IOException if something went wrong
313 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
314 @return True if the current character is a diacritic char.
315 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
316 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
317 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
318 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
319 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
320 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
321 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
322 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
323 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
324 Show the string data for this text position. @return A human readable form of this object.
325 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
326 @return template height
327 @param node @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
328 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
329 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
330 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
331 @param x - x coordinate @param y - y coordinate @return Visible Signature Configuration Object
332 Creates a new marked content object. @param tag the tag @param properties the properties
333 Constructor. @param a An existing FDF Annotation.
334 Creates a new tiling pattern from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
335 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node to be created
336 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
337 {@inheritDoc}
338 Generate a unique name for the signature. @return the signature's unique name
339 Constructor.
340 Creates a Form XObject for reading. @param stream The XObject stream @param cache the cache to be used for the resources
341 Constructor used for encryption. @param standardProtectionPolicy The protection policy.
342 Creates a Form XObject for reading. @param stream The XObject stream
343 Creates a PostScript XObject. @param stream The XObject stream
344 Constructor. Uses main memory to buffer PDF streams. @param parser Parser to be used to parse the document on demand
345 Creates a new soft mask. @param dictionary SMask @return the newly created instance of PDSoftMask
346 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
347 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
348 Constructor. @param a An existing FDF Annotation.
349 Constructor used for encryption. @param publicKeyProtectionPolicy The protection policy.
350 Constructor. @param a An existing FDF Annotation.
351 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
352 Constructor. @param a An existing FDF Annotation.
353 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
354 Constructor.
355 Applies a text position adjustment from the TJ operator. May be overridden in subclasses. @param tx x-translation @param ty y-translation
356 Method to determine if the x/y point is inside this rectangle. @param x The x-coordinate to test. @param y The y-coordinate to test. @return True if the point is inside this rectangle.
357 Constructor. @param p an array of the 3 vertices of a triangle @param c an array of color corresponding the vertex array p
358 Sets the font service provider.
359 Saves the font metadata cache to disk.
360 {@inheritDoc} <p> The method returns null if there is there was an error opening the font.
361 Encrypt or decrypt data with AES256. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
362 Encrypt or decrypt data with AES with key length other than 256 bits. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
363 {@inheritDoc}
364 Produces a copy of the first matrix, with the second matrix concatenated. @param a The matrix to copy. @param b The matrix to concatenate. @return a copy of the first matrix with the second matrix concatenated
365 Translates this matrix by the given vector. @param vector 2D vector
366 Constructor. @param functionStream The function .
367 Loads a glyph list from disk.
368 Sets the clipping path using caching for performance. We track lastClip manually because {@link Graphics2D#getClip()} returns a new object instead of the same one passed to {@link Graphics2D#setClip(java.awt.Shape) setClip()}. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more.
369 End buffering the text clipping path, if any.
370 Inverts the font's code -&gt; GID mapping. Any duplicate (GID -&gt; code) mappings will be lost. @return the GID for the given code @throws IOException if the data could not be read
371 This will get the width of this rectangle as calculated by upperRightX - lowerLeftX. @return The width of this rectangle.
372 Rotates this matrix by the given factors. @param theta The angle of rotation measured in radians
373 Write the given {@link COSFloat} to the given stream. @param output The stream, that shall be written to. @param cosFloat The content, that shall be written.
374 {@inheritDoc}
375 Writes a string to the content stream as ASCII. @param text the text to be added to the content stream followed by a newline @throws IOException If the underlying stream has a problem being written to.
376 Writes an integer number to the content stream. @param integer the integer to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
377 Writes a real number to the content stream. @param real the real number to be added to the content stream @throws IOException If the underlying stream has a problem being written to. @throws IllegalArgumentException if the parameter is not a finite number
378 This will get the suffix for this image type, e.g. jpg/png. @return The image suffix or null if not available.
379 Creates an Image XObject with the given stream as its contents and current color spaces. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param stream the XObject stream to read @param resources the current resources
380 Returns a new OutputStream for writing stream data, using and the given filters. @param filters COSArray or COSName of filters to be used. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
381 Get the value of the array as a string. @param index The index into the array. @return The name converted to a string or null if it does not exist.
382 Get the value of the array as an integer. @param index The index into the list. @return The value at that index or -1 if does not exist.
383 This will return a string representation of this rectangle. @return This object as a string.
384 Returns a general path equivalent to this rectangle. This method avoids the problems caused by Rectangle2D not working well with -ve rectangles. @return a general path equivalent to this rectangle
385 Returns a path which represents this rectangle having been transformed by the given matrix. Note that the resulting path need not be rectangular. @param matrix the matrix to be used for the transformation @return the transformed rectangle
386 This will get the height of this rectangle as calculated by upperRightY - lowerLeftY. @return The height of this rectangle.
387 Uses this {@link COSUpdateInfo} as the base object of a new {@link COSIncrement}. @return A {@link COSIncrement} based on this {@link COSUpdateInfo}. @see COSIncrement
388 COSWriter constructor. @param outputStream The output stream to write the PDF.
389 Compute the owner entry in the encryption dictionary. @param ownerPassword The plaintext owner password. @param userPassword The plaintext user password. @param encRevision The revision number of the encryption algorithm. @param length The length of the encryption key. @return The o entry of the encryption dictionary. @throws IOException if the owner password could not be computed
390 This will compute the user password hash. @param password The plain text password. @param owner The owner password hash. @param permissions The document permissions. @param id The document id. @param encRevision The revision of the encryption. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return The user password. @throws IOException if the password could not be computed
391 Set the image for the signature. @param path Path of the image file. @return Visible Signature Configuration Object @throws IOException if the image for the signature could not be set
392 Constructor usable for signing existing signature fields. @param imageStream image as a stream @throws IOException if the new instance of PDVisibleSignDesigner could not be created
393 Creates a new <i>text string</i> from a Java String. @param text The string value of the object.
394 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
395 This will get the (optional) export values. <p>The export values are defined in the field dictionaries /Opt key.</p> <p>The option values are used to define the export values for the field to <ul> <li>hold values in non-Latin writing systems as name objects, which represent the field value, are limited to PDFDocEncoding </li> <li>allow radio buttons having the same export value to be handled independently </li> </ul> @return List containing all possible export values. If there is no /Opt entry an empty list will be returned. @see #getOnValues()
396 Return either one of a list which can have two-element arrays entries. <p> Some entries in a dictionary can either be an array of elements or an array of two-element arrays. This method will either return the elements in the array or in case of two-element arrays, the element designated by the pair index </p> <p> An {@link IllegalArgumentException} will be thrown if the items contain two-element arrays and the index is not 0 or 1. </p> @param items the array of elements or two-element arrays @param pairIdx the index into the two-element array @return a List of single elements
397 This will get the name of the destination. @return The name of the destination.
398 This will get the file name. @return The file name.
399 Get an entry in the array that is expected to be a COSName. @param index The index into the array. @param defaultValue The value to return if it is null. @return The value at the index or defaultValue if none is found.
400 Constructor. @param function The function.
401 Returns the metadata associated with this XObject, or null if there is none. @return the metadata associated with this object.
402 Search for the offset of the given xref table/stream among those found by a brute force search. @param xrefOffset the given offset to be searched for @return the offset of the xref entry @throws IOException if something went wrong
403 Parse the header of a pdf. @return true if a PDF header was found @throws IOException if something went wrong
404 Parse the header of a fdf. @return true if a FDF header was found @throws IOException if something went wrong
405 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf
406 This will read bytes until the first end of line marker occurs. NOTE: The EOL marker may consists of 1 (CR or LF) or 2 (CR and CL) bytes which is an important detail if one wants to unread the line. @return The characters between the current position and the end of the line. @throws IOException If there is an error reading from the stream.
407 Skip one line break, such as CR, LF or CRLF. @return true if a line break was found and removed. @throws IOException if something went wrong
408 Create the resulting document. Maybe overwritten if the parser uses another class as document. @return the resulting document @throws IOException if the method is called before parsing the document
409 @return the value for this direction
410 Examines the a file's first bytes and estimates the file's type. <p> Requires a {@link BufferedInputStream} in order to mark and reset the stream to the position at which it was provided to this method once completed. <p> Requires the stream to contain at least eight bytes. @param inputStream a buffered input stream of the file to examine. @return the file type. @throws IOException if an IO error occurred or the input stream ended unexpectedly.
411 Writes the given byte array as hex value to the given output stream. @param bytes the byte array to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
412 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
413 Write externally created signature of PDF data obtained via {@link #getDataToSign()} method. @param cmsSignature CMS signature byte array @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if source data stream is closed
414 This will take this string and create a hex representation of the bytes that make the string. @return A hex string representing the bytes in this string.
415 Converts the date to ISO 8601 string format: yyyy-mm-ddThh:MM:ss#hh:mm (where '#" is '+' or '-'). @param cal The date to convert. Must not be null. The DST_OFFSET is included in the output value. @return The date represented as an ISO 8601 string.
416 Converts a Calendar to a string formatted as: D:yyyyMMddHHmmss#hh'mm' where # is Z, +, or -. @param cal The date to convert to a string. May be null. The DST_OFFSET is included when computing the output time zone. @return The date as a String to be used in a PDF document, or null if the cal value is null
417 This will skip all spaces and comments that are present. @throws IOException If there is an error reading from the stream.
418 Write something (if defined) at the end of a paragraph. @throws IOException if something went wrong
419 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). This assumes that the primary direction of text is left to right. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
420 This will get the width of the string when text direction adjusted coordinates are used. @return The width of the text in display units.
421 This will get the width of the string when page rotation adjusted coordinates are used. @return The width of the text in display units.
422 This will get the y position of the text, adjusted so that 0,0 is upper left and it is adjusted based on the text direction. This method ignores the page rotation but takes the text rotation and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The adjusted y coordinate of the character.
423 Constructor. @param pageRotation rotation of the page that the text is located in @param pageWidth width of the page that the text is located in @param pageHeight height of the page that the text is located in @param textMatrix text rendering matrix for start of text (in display units) @param endX x coordinate of the end position @param endY y coordinate of the end position @param maxHeight Maximum height of text (in display units) @param individualWidth The width of the given character/string. (in text units) @param spaceWidth The width of the space character. (in display units) @param unicode The string of Unicode characters to be displayed. @param charCodes An array of the internal PDF character codes for the glyphs in this text. @param font The current font for this text position. @param fontSize The new font size. @param fontSizeInPt The font size in pt units (see {@link #getFontSizeInPt()} for details).
424 This will get the text direction adjusted x position of the character. This is adjusted based on text direction so that the first character in that direction is in the upper left at 0,0. This method ignores the page rotation but takes the text rotation (see {@link #getDir() getDir()}) and adjusts the coordinates to awt. This is useful when doing text extraction, to compare the glyph positions when imagining these to be horizontal. See also <a href="https://stackoverflow.com/questions/57067372/">this answer by Michael Klink</a> for further details and <a href="https://issues.apache.org/jira/browse/PDFBOX-4597">PDFBOX-4597</a> for a sample file. @return The x coordinate of the text.
425 This will tell if the access permission corresponds to owner access permission (no restriction). @return true if the access permission does not restrict the use of the document
426 Skip the upcoming CRLF or LF which are supposed to follow a stream. Trailing spaces are removed as well. @throws IOException if something went wrong
427 Indicates if any revision 3 access permission is set or not. @return true if any revision 3 access permission is set
428 Convenience method, so that we get false for types that can't be updated. @param base @return
429 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
430 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
431 A reference to an object stream, of which the current object stream is considered an extension. @return The object that this stream is an extension.
432 This will close the stream. @throws IOException If there is an error closing the wrapped stream.
433 Sets the {@link #updated} state of the managed {@link #updateInfo} to the given state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @param updated The state to set for {@link #updated}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
434 Constructor. @param num The object number. @param gen The object generation number.
435 Returns the metrics for font specified by fontName. Loads the font metrics if not already loaded. @param fontName name of font; either a base name or alias @return the font metrics or null if the name is not one of the known names @throws IllegalArgumentException if no metrics exist for that font.
436 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
437 Creates a Form XObject for reading. @param stream The XObject stream
438 This will encrypt and write the data. @param data The data to encrypt. @param offset The offset into the array to start reading data from. @param len The number of bytes to attempt to read. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
439 Close all input documents which were used for the overlay and opened by this class. @throws IOException if something went wrong
440 Default constructor.
441 Default constructor.
442 Default constructor.
443 Default constructor.
444 Default constructor.
445 Default constructor.
446 Creates a new DeviceN Process Dictionary.
447 Creates a new DeviceN colour space attributes dictionary.
448 Default constructor, creates target directory.
449 Default constructor.
450 Default constructor.
451 Default constructor.
452 Default constructor.
453 Default constructor.
454 Default constructor.
455 Default constructor.
456 Default constructor.
457 Default constructor.
458 creates a new empty crypt filter dictionary.
459 Constructor.
460 Constructor.
461 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object. @throws IllegalStateException if the value of the metadata entry is different from a stream or null
462 Constructor for an existing outline item. @param dic The storage dictionary.
463 Creates a new standard attribute object with a given dictionary. @param dictionary the dictionary
464 Constructor @param dictionary the dictionary
465 Default constructor.
466 Creates a default attribute object with a given dictionary. @param dictionary the dictionary
467 Constructor.
468 Constructor.
469 Constructor. @param acroForm The form that this field is part of.
470 Default constructor.
471 Default constructor.
472 Default constructor.
473 Default constructor.
474 Constructor.
475 Constructor. @param object The object that this encapsulates. @param objectKey The COSObjectKey of the encapsulated object
476 Default Constructor.
477 creates a new empty encryption dictionary.
478 Default Constructor.
479 Constructor for subclasses.
480 Constructor.
481 Creates a new empty page label range object.
482 Constructor.
483 Default constructor
484 Constructor for embedding.
485 Default Constructor.
486 Return a default DecodeResult. @return a default instance of DecodeResult
487 {@inheritDoc}
488 Creates a new stream with an empty dictionary. Data is stored in the given scratch file. @param streamCache Stream cache for writing stream data.
489 This will get a COSName object with that name. @param aName The name of the object. @return A COSName with the specified name.
490 Constructor.
491 Creates a new PDF string from a byte array. This method can be used to read a string from an existing PDF file, or to create a new byte string. @param bytes The raw bytes of the PDF text string or byte string.
492 Creates a Form XObject for reading. @param stream The XObject stream
493 Creates a Transparency Group for reading. @param stream The XObject stream @param cache the cache to be used for the resources
494 Adds a TTC or OTC to the file cache. To reduce memory, the parsed font is not cached.
495 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
496 Adds a Type 1 font to the file cache. To reduce memory, the parsed font is not cached.
497 This constructor is to be used if the array doesn't exist, but is to be created and added to the parent dictionary as soon as the first element is added to the array. @param dictionary The dictionary that holds the item, and will hold the array if an item is added. @param dictionaryKey The key into the dictionary to set the item.
498 Creates a new PrintField attribute object with a given dictionary. @param dictionary the dictionary
499 This will get the resources for this Form XObject. This will return null if no resources are available. @return The resources for this Form XObject.
500 Returns the result of the last filter, for use by repair mechanisms. @return the result of the last filter
501 Returns an unmodifiable view of this dictionary. @return an unmodifiable view of this dictionary
502 Creates a new stream with an empty dictionary. Data is read from the given random accessview. Written data is stored in the given scratch file. @param streamCache Stream cache for writing stream data. @param randomAccessReadView source for the data to be read @throws IOException if the length of the random access view isn't available
503 Creates a new stream with an empty dictionary. <p> Try to avoid using this constructor because it creates a new scratch file in memory. Instead, use {@link COSDocument#createCOSStream() document.getDocument().createCOSStream()} which will use the existing scratch file (in memory or in temp file) of the document. </p>
504 Creates a new COSStream using the current configuration for scratch files. @return the new COSStream
505 Constructor. @param x the x coordinate of the rectangle @param y the y coordinate of the rectangle @param width The width of the rectangle. @param height The height of the rectangle.
506 Constructor to create empty page destination.
507 Default constructor.
508 This will create a COS string from a string of hex characters. @param hex A hex string. @return A cos string with the hex characters converted to their actual bytes. @throws IOException If there is an error with the hex string.
509 Constructor. @param box the bounding box to be used for the rectangle
510 Default constructor.
511 Creates a new user property. @param userAttributeObject the user attribute object
512 Creates a new List attribute object with a given dictionary. @param dictionary the dictionary
513 Creates a new Layout attribute object with a given dictionary. @param dictionary the dictionary
514 Returns the font service provider. Defaults to using FileSystemFontProvider.
515 An assistant method to accomplish type 6 and type 7 shading. @param patchCC all the crossing point coordinates and color of a grid @return a ShadedTriangle list which can compose the grid patch
516 Constructor of a patch for type 6 shading. @param points 12 control points @param color 4 corner colors
517 Constructor. @param acroForm The form that this field is part of.
518 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
519 Constructor. @param acroForm The form that this field is part of.
520 Constructor.
521 Constructor.
522 Constructor.
523 Constructor.
524 Default Constructor.
525 Creates a new Table attribute object with a given dictionary. @param dictionary the dictionary
526 Begin some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest beginText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
527 Set the line join style. @param lineJoinStyle 0 for miter join, 1 for round join, and 2 for bevel join. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line join style.
528 Set line width to the given value. @param lineWidth The width which is used for drawing. @throws IOException If the content stream could not be written
529 Intersects the current clipping path with the current path, using the even-odd rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
530 Intersects the current clipping path with the current path, using the nonzero rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
531 Closes the current subpath. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
532 Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStrokeEvenOdd() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
533 Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall have the same effect as the sequence {@link #closePath() } and then {@link #fillAndStroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
534 Fill and then stroke the path, using the even-odd rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fillEvenOdd() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
535 Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This shall produce the same result as constructing two identical path objects, painting the first with {@link #fill() } and the second with {@link #stroke() }. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
536 Fills the path using the even-odd winding rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
537 Fills the path using the nonzero winding number rule. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
538 Close and stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
539 Stroke the path. @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
540 Draw a line from the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
541 Move the current position to the given coordinates. @param x The x coordinate. @param y The y coordinate. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
542 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x3, y3) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
543 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using the current point and (x2, y2) as the Bézier control points. @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IllegalStateException If the method was called within a text block. @throws IOException If the content stream could not be written.
544 Append a cubic Bézier curve to the current path. The curve extends from the current point to the point (x3, y3), using (x1, y1) and (x2, y2) as the Bézier control points. @param x1 x coordinate of the point 1 @param y1 y coordinate of the point 1 @param x2 x coordinate of the point 2 @param y2 y coordinate of the point 2 @param x3 x coordinate of the point 3 @param y3 y coordinate of the point 3 @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
545 Add a rectangle to the current path. @param x The lower left x coordinate. @param y The lower left y coordinate. @param width The width of the rectangle. @param height The height of the rectangle. @throws IOException If the content stream could not be written. @throws IllegalStateException If the method was called within a text block.
546 Set the non-stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
547 Set the non-stroking color in the DeviceCMYK color space. Range is 0..1. @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream.
548 Set the line cap style. @param lineCapStyle 0 for butt cap, 1 for round cap, and 2 for projecting square cap. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is not a valid line cap style.
549 Set the non-stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
550 Set the line dash pattern. @param pattern The pattern array @param phase The phase of the pattern @throws IOException If the content stream could not be written.
551 End a marked content sequence. @throws IOException If the content stream could not be written
552 Get the user password based on the owner password. @param ownerPassword The plaintext owner password. @param owner The o entry of the encryption dictionary. @param encRevision The encryption revision number. @param length The key length. @return The u entry of the encryption dictionary. @throws IOException If there is an error accessing data while generating the user password.
553 Constructor of a patch for type 7 shading. @param tcp 16 control points @param color 4 corner colors
554 Set the named destination. @param dest The new named destination. @throws IOException If there is an error setting the named destination.
555 Constructor. @param dest The named destination.
556 This will set the file name. @param fileName The name of the file.
557 Constructor.
558 Returns the selected value. <p>Off is the default value which will also be returned if the value hasn't been set at all. @return A non-null string.
559 Get the value of the array as a string. @param index The index into the array. @return The string or null if it does not exist.
560 This will save the document to an output stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
561 Set the text rise value, i.e. move the baseline up or down. This is useful for drawing superscripts or subscripts. @param rise Specifies the distance, in unscaled text space units, to move the baseline up or down from its default location. 0 restores the default location. @throws IOException If the content stream could not be written.
562 Set the text rendering mode. This determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three. @param rm The text rendering mode. @throws IOException If the content stream could not be written.
563 Set the horizontal scaling to scale / 100. @param scale number specifying the percentage of the normal width. Default value: 100 (normal width). @throws IOException If the content stream could not be written.
564 Set the word spacing. The value shall be added to the horizontal or vertical component of the ASCII SPACE character, depending on the writing mode. <p> This will have an effect only with Type1 and TrueType fonts, not with Type0 fonts. The PDF specification tells why: "Word spacing shall be applied to every occurrence of the single-byte character code 32 in a string when using a simple font or a composite font that defines code 32 as a single-byte code. It shall not apply to occurrences of the byte value 32 in multiple-byte codes." @param spacing word spacing @throws IOException If the content stream could not be written.
565 Set the character spacing. The value shall be added to the horizontal or vertical component of the glyph's displacement, depending on the writing mode. @param spacing character spacing @throws IOException If the content stream could not be written.
566 Set the miter limit. @param miterLimit the new miter limit. @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the parameter is \u2264 0.
567 Set the stroking color in the DeviceGray color space. Range is 0..1. @param g The gray value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameter is invalid.
568 Set the stroking color in the DeviceCMYK color space. Range is 0..1 @param c The cyan value. @param m The magenta value. @param y The yellow value. @param k The black value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
569 Set the stroking color in the DeviceRGB color space. Range is 0..1. @param r The red value. @param g The green value. @param b The blue value. @throws IOException If an IO error occurs while writing to the stream. @throws IllegalArgumentException If the parameters are invalid.
570 Constructor. Uses main memory to buffer PDF streams.
571 Saves the entire graphics stack. @return the saved graphics state stack.
572 Pushes the current graphics state to the stack.
573 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
574 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
575 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
576 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
577 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
578 Transforms the given rectangle using the CTM and then intersects it with the current clipping area.
579 Calculate the transformed appearance box. Apply the Matrix (or an identity transform) to the BBox of the appearance stream @param appearanceStream @return the transformed rectangle
580 Constructor with a given page size to initialize the clipping path. @param page the size of the page
581 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
582 Q operator. Restores the current graphics state. @throws IOException If an error occurs while writing to the stream.
583 q operator. Saves the current graphics state. @throws IOException If an error occurs while writing to the stream.
584 The Td operator. Move to the start of the next line, offset from the start of the current line by (tx, ty). @param tx The x translation. @param ty The y translation. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
585 Move to the start of the next line of text. Requires the leading (see {@link #setLeading}) to have been set. @throws IOException If there is an error writing to the stream.
586 Sets the text leading. @param leading The leading in unscaled text units. @throws IOException If there is an error writing to the stream.
587 End some text operations. @throws IOException If there is an error writing to the stream or if you attempt to nest endText calls. @throws IllegalStateException If the method was not allowed to be called at this time.
588 Writes an AffineTransform to the content stream as an array. @param transform AffineTransfrom to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
589 Returns the Soft Mask Image XObject associated with this image, or null if there is none. @return the SMask Image XObject, or null.
590 Returns the Mask Image XObject associated with this image, or null if there is none. @return Mask Image XObject
591 Creates a thumbnail Image XObject from the given COSBase and name. @param cosStream the COS stream @return an XObject
592 This will get a stream that can be written to, with the given filter. @param filter the filter to be used. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
593 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
594 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
595 A flag indicating if this page destination should just fit bounding box of the PDF. @return true If the destination should fit just the bounding box.
596 Get the top y coordinate. Return values of 0 or -1 imply that the current y-coordinate will be used. @return The top y coordinate.
597 Get the left x coordinate. Return values of 0 or -1 imply that the current x-coordinate will be used. @return The left x coordinate.
598 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
599 Get the top y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The top y coordinate.
600 Get the right x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The right x coordinate.
601 Get the bottom y coordinate. A return value of -1 implies that the current y-coordinate will be used. @return The bottom y coordinate.
602 Get the left x coordinate. A return value of -1 implies that the current x-coordinate will be used. @return The left x coordinate.
603 Returns a new OutputStream for writing stream data, using the current filters. @return OutputStream for un-encoded stream data. @throws IOException If the output stream could not be created.
604 Return the {@code SASLPrep}-canonicalised version of the given {@code str} for use as a query string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a query string is.
605 This will encrypt and write the data. @param data The data to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
606 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
607 Computes the revision version of the StandardSecurityHandler to use regarding the version number and the permissions bits set. See PDF Spec 1.6 p98 @param version The version number. @return The computed revision number.
608 Returns the access permissions granted when the document was decrypted. If the document was not decrypted this method returns the access permission for a document owner (ie can do everything). The returned object is in read only mode so that permissions cannot be changed. Methods providing access to content should rely on this object to verify if the current user is allowed to proceed. @return the access permissions for the current user on the document.
609 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps.
610 Try to find a fixed offset for the given xref table/stream. @param objectOffset the given offset where to look at @return the fixed offset @throws IOException if something went wrong
611 This will read an long from the stream. @return The long that was read from the stream. @throws IOException If there is an error reading from the stream.
612 This will read an integer from the stream. @return The integer that was read from the stream. @throws IOException If there is an error reading from the stream.
613 This will read the next string from the stream up to a certain length. @param length The length to stop reading at. @return The string that was read from the stream of length 0 to length. @throws IOException If there is an error reading from the stream.
614 Reads given pattern from {@link #source}. Skipping whitespace at start and end if wanted. @param expectedString pattern to be skipped @param skipSpaces if set to true spaces before and after the string will be skipped @throws IOException if pattern could not be read
615 This will read the next string from the stream. @return The string that was read from the stream, never null. @throws IOException If there is an error reading from the stream.
616 Return the {@code SASLPrep}-canonicalised version of the given @code str} for use as a stored string. This implements the {@code SASLPrep} algorithm defined in <a href="https://tools.ietf.org/html/rfc4013">RFC 4013</a>. @param str The string to canonicalise. @return The canonicalised string. @throws IllegalArgumentException if the string contained prohibited codepoints, or broke the requirements for bidirectional character handling. @see <a href="https://tools.ietf.org/html/rfc3454#section-7">RFC 3454, Section 7</a> for discussion of what a stored string is.
617 Creates a Transparency Group for reading. @param stream The XObject stream
618 Set the update state of the dictionary for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @param flag the update state.
619 Creates a PDColor containing the given color value. @param array a COS array containing the color value @param colorSpace color space in which the color value is defined
620 This will parse the xref table from the stream and add it to the state The XrefTable contents are ignored. @param startByteOffset the offset to start at @return false on parsing error @throws IOException If an IO error occurs.
621 Parses through the unfiltered stream and populates the xrefTable HashMap. @param resolver resolver to read the xref/trailer information @throws IOException If there is an error while parsing the stream.
622 Search for all offsets of object streams within the given pdf @return a map of all offsets for object streams @throws IOException if something went wrong
623 Brute force search for every object in the pdf. @throws IOException if something went wrong
624 Returns the object key for the given combination of object and generation number. The object key from the cross reference table/stream will be reused if available. Otherwise a newly created object will be returned. @param num the given object number @param gen the given generation number @return the COS object key
625 Creates a marked-content sequence. @param tag the tag @param properties the properties @return the marked-content sequence
626 Writes the CMap as ASCII to the given output stream. @param out ASCII output stream @throws IOException if the stream could not be written
627 Calls {@link #update(boolean)} with {@code true} as the new update state.<br> This shall only then have an effect, if {@link #isAcceptingUpdates()} returns {@code true}. @see #update(boolean) @see #updated @see #isAcceptingUpdates()
628 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
629 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
630 Instantiate a new PDFTextStripper object.
631 Constructor. Will apply encoding-specific conversions to the output text. @param encoding The encoding that the output will be written in.
632 Returns a filter instance given its name as a string. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
633 This will parse a PDF name from the stream. @return The parsed PDF name. @throws IOException If there is an error reading from the stream.
634 Merge a single character TextPosition into the current object. This is to be used only for cases where we have a diacritic that overlaps an existing TextPosition. In a graphical display, we could overlay them, but for text extraction we need to merge them. Use the contains() method to test if two objects overlap. @param diacritic TextPosition to merge into the current TextPosition.
635 Determine if this TextPosition logically contains another (i.e. they overlap and should be rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained in the bounding box of this text.
636 writes the paragraph separator string to the output. @throws IOException if something went wrong
637 Determine if this TextPosition perfectly contains another (i.e. the other TextPosition overlaps 100% with this one and fits entirely inside its bounding box when they are rendered on top of each other). @param tp2 The other TestPosition to compare against @return True if tp2 is contained completely inside the bounding box of this text.
638 Write the given {@link COSName} to the given stream. @param output The stream, that shall be written to. @param cosName The content, that shall be written.
639 Writes a COSName to the content stream. @param name the name to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
640 This will output the given text/byte string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
641 Return the stream of PDF data to be signed. Clients should use this method only to create signatures externally. {@link #write(PDDocument)} method should have been called prior. The created signature should be set using {@link #writeExternalSignature(byte[])}. <p> When {@link SignatureInterface} instance is used, COSWriter obtains and writes the signature itself. </p> @return data stream to be signed @throws IllegalStateException if PDF is not prepared for external signing @throws IOException if input data is closed
642 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
643 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
644 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
645 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
646 Default constructor.
647 Default Constructor.
648 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
649 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
650 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
651 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
652 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
653 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
654 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
655 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
656 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
657 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
658 Default constructor
659 Default constructor.
660 Encrypt or decrypt data with RC4. @param finalKey The final key obtained with via {@link #calcFinalKey(long, long)}. @param input The data to encrypt. @param output The output to write the encrypted data to. @throws IOException If there is an error reading the data.
661 This will read a long from the Stream and throw an {@link IOException} if the long value is negative or has more than 10 digits (i.e. : bigger than {@link #OBJECT_NUMBER_THRESHOLD}) @return the object number being read. @throws IOException if an I/O error occurs
662 This will read a integer from the Stream and throw an {@link IllegalArgumentException} if the integer value has more than the maximum object revision (i.e. : bigger than {@link #GENERATION_NUMBER_THRESHOLD}) @return the generation number being read. @throws IOException if an I/O error occurs
663 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
664 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
665 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
666 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
667 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> <p> Additionally to {@link #setOriginDocumentState(COSDocumentState)}, this shall also deny changing {@link #updated}, should the flag {@code dereferencing} indicate, that this is caused by dereferencing a {@link COSObject}. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @param dereferencing {@code true}, if this update of the {@link COSDocumentState} is caused by dereferencing a {@link COSObject}. @see #originDocumentState @see #updated
668 Sets the referenced object to COSNull and removes the initially assigned parser.
669 Check whether the given {@link COSUpdateState}´s {@link COSDocumentState} differs from the {@link COSIncrement}´s known {@link #incrementOrigin}.<br> Should that be the case, the {@link COSUpdateState} originates from another {@link COSDocument} and must be added to the {@link COSIncrement}, hence call {@link COSUpdateState#update()}. @param updateState The {@link COSUpdateState} that shall be updated, if it's originating from another {@link COSDocument}. @see #incrementOrigin
670 This will remove an item for the dictionary. This will do nothing of the object does not exist. @param key The key to the item to remove from the dictionary.
671 This will clear all items in the map.
672 This will remove an element from the array. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
673 This will remove an element from the array. @param i The index of the object to remove. @return The object that was removed.
674 This will remove all of the objects in the collection.
675 Returns all found objects of a brute force search. @return map containing all found objects of a brute force search @throws IOException if something went wrong
676 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
677 This will process a TextPosition object and add the text to the list of characters on a page. It takes care of overlapping text. @param text The text to process.
678 Creates a COS stream from raw (encoded) data.
679 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
680 Creates a new empty PDStream object. @param document The document that the stream will be part of.
681 Creates a new empty PDStream object. @param document The document that the stream will be part of.
682 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
683 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
684 Apply padding to a box. @param box box @return the padded box.
685 Get a rectangle with the differences applied to each side. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
686 Get a rectangle enlarged by the differences. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
687 Get a padded rectangle. <p>Creates a new rectangle with padding applied to each side. . @param rectangle the rectangle. @param padding the padding to apply. @return the padded rectangle.
688 Returns the updated <code>RD</code> entry for Square and Circle annotations. @return Annotation <code>RD</code> value.
689 Returns the updated <code>Rect</code> entry for the annotation. The rectangle completely contains the cloudy border. @return Annotation <code>Rect</code>.
690 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
691 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
692 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
693 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
694 Constructor. @throws IOException If there is an error loading properties.
695 Instantiate a new PDFMarkedContentExtractor object.
696 Constructor. @param page the page the content stream belongs to
697 This will output the given text/byte getString as a PDF object. @param bytes byte array representation of a string to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
698 This will output the given byte getString as a PDF object. @param string COSString to be written @param output The stream to write to. @throws IOException If there is an error writing to the stream.
699 set a marked content point. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
700 Begin a marked content sequence with a reference to the marked content identifier (MCID). @param tag the tag to be added to the content stream @param mcid the marked content identifier (MCID) @throws IOException If the content stream could not be written
701 Begin a marked content sequence. @param tag the tag to be added to the content stream @throws IOException If the content stream could not be written
702 Constructor. Initializes to 0,0,0,0
703 This will parse a PDF dictionary value. @return The parsed Dictionary object. @throws IOException If there is an error parsing the dictionary object.
704 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
705 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
706 {@inheritDoc}
707 {@inheritDoc}
708 {@inheritDoc}
709 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
710 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
711 {@inheritDoc}
712 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
713 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
714 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
715 Draw a paperclip. Shape is from <a href="https://raw.githubusercontent.com/Iconscout/unicons/master/svg/line/paperclip.svg">Iconscout</a> (Apache licensed). @param contentStream @throws IOException
716 Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when drawing a doughnut shape. See "Nonzero Winding Number Rule" for more information. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
717 Add a circle shape to the path in clockwise direction. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
718 Add a square diamond shape (corner on top) to the path. @param cs Content stream @param x @param y @param r Radius (to a corner) @throws IOException If the content stream could not be written
719 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
720 Add the two arms of a horizontal arrow. @param cs Content stream @param x @param y @param len The arm length. Positive goes to the right, negative goes to the left. @throws IOException If the content stream could not be written
721 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
722 Default constructor.
723 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
724 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
725 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
726 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
727 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
728 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
729 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
730 Default constructor.
731 Default constructor.
732 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
733 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
734 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
735 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
736 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
737 {@inheritDoc}
738 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
739 Returns the <code>BBox</code> entry (bounding box) for the appearance stream form XObject. @return Bounding box for appearance stream form XObject.
740 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
741 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
742 Set the page number for a remote destination. For an internal destination, call {@link #setPage(PDPage) setPage(PDPage page)}. @param pageNumber The page for a remote destination.
743 Default constructor.
744 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
745 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
746 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
747 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
748 Parses the given text into an instruction sequence representing a Type 4 function that can be executed. @param text the Type 4 function text @return the instruction sequence
749 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
750 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
751 {@inheritDoc}
752 {@inheritDoc}
753 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
754 Creates a Form Image XObject for writing, in the given document. @param document The current document
755 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
756 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
757 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
758 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
759 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
760 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
761 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
762 Draw a line ending style. @param style @param cs @param x @param y @param width @param hasStroke @param hasBackground @param ending false if left, true if right of an imagined horizontal line (important for arrows). @throws IOException
763 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
764 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
765 Default constructor. @param owner the owner of the attributes
766 Constructor.
767 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
768 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
769 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
770 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
771 This will get the object that this object encapsulates. @return The encapsulated object.
772 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
773 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
774 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
775 Creates a Transparency Group for writing, in the given document. @param document The current document
776 Search in the map for the value that matches the parameter and return the first key that maps to that value. @param value The value to search for in the map. @return The key for the value in the map or null if it does not exist.
777 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
778 @see java.util.Map#containsValue(java.lang.Object) @param value The value to find in the map. @return true if the map contains this value.
779 Creates a Form Image XObject for writing, in the given document. @param document The current document
780 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
781 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
782 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
783 This will add an object to the array. @param object The object to add to the array.
784 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
785 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
786 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
787 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
788 Prepares the given {@link COSObject} to be written to this object stream, using the given {@link COSObjectKey} as it's ID for indirect references. @param key The {@link COSObjectKey}, that shall be used for indirect references to the {@link COSObject}. @param object The {@link COSObject}, that shall be written to this object stream.
789 Returns true, if the given {@link COSBase} is a registered object of this pool. @param object The {@link COSBase} that shall be checked. @return True, if such a {@link COSBase} is registered in this pool.
790 Returns the {@link COSObjectKey} for a given registered {@link COSBase}. Returns null if such an object is not registered. @param object The {@link COSBase} a {@link COSObjectKey} shall be determined for. @return key The {@link COSObjectKey}, that matches the registered {@link COSBase}, or null if such an object is not registered.
791 Prepares a normal reference for the given {@link COSObject} in a PDF's crossreference stream ({@link PDFXRefStream}). @param byteOffset The byte offset of the {@link COSObject} in the PDF file. @param key The {@link COSObjectKey}, that is represented by this entry. @param object The {@link COSObject}, that is represented by this entry.
792 Check whether an element (of an array or a dictionary) points to its parent. @param parent COSArray or COSDictionary @param value an element
793 visitor pattern double dispatch method. @param visitor The object to notify when visiting this object. @throws IOException If an error occurs while visiting this object.
794 This will close all storage and delete the tmp files. @throws IOException If there is an error close resources.
795 Get the dictionary containing the linearization information if the pdf is linearized. @return the dictionary containing the linearization information
796 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
797 This will get an object from the array. This will dereference the object. If the object is COSNull then null will be returned. @param index The index into the array to get the object. @return The object at the requested index.
798 Returns length value referred to or defined in given object.
799 This will return the index of the entry or -1 if it is not found. This method will also find references to indirect objects. @param object The object to search for. @return The index of the object or -1.
800 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
801 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
802 This will get the object key for the object. @param obj The object to get the key for. @return The object key for the object.
803 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
804 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
805 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
806 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
807 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
808 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
809 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
810 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
811 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
812 Default constructor.
813 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
814 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
815 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
816 Constructor from COS object. @param array the array containing the XYZ values
817 This will create a new destination depending on the type of COSBase that is passed in. @param base The base level object. @return A new destination. @throws IOException If the base cannot be converted to a Destination.
818 This will take a COS dictionary and convert it into COSDictionaryMap. All cos objects will be converted to their primitive form. @param map The COS mappings. @return A standard java map. @throws IOException If there is an error during the conversion.
819 Update the key and object maps. @param key The key, that shall be added. @param object The object, that shall be added. @return The actual key, the object has been added for.
820 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
821 This will get the string of one of the available options. A required element. @return An available option.
822 Returns the color component values as a COS array @return the color component values as a COS array
823 Creates a new DeviceN color space.
824 Creates a new gamma. Defaults all values to 0, 0, 0.
825 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
826 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
827 Creates a new Indexed color space. Default DeviceRGB, hival 255.
828 creates a range array with default values (-100..100 -100..100). @return the new range array.
829 Creates a new pattern color space. @param resources The current resources.
830 Creates a new Separation color space.
831 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
832 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
833 Constructor. Defaults all values to 0, 0, 0.
834 This will get the string of default appearance string. A required element. @return A default appearance string.
835 Returns the selected values, or an empty List, for the given key.
836 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
837 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
838 Creates a new JPEG PDImageXObject from a BufferedImage and a given quality. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. The image will be created with a dpi value of 72 to be stored in metadata. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @return a new Image XObject @throws IOException if the JPEG data cannot be written
839 Generates the first intermediate curl for a cloudy polygon.
840 Returns a template for intermediate curls in a cloudy polygon.
841 This will set the string for an available option. @param opt One of the available options.
842 Sets the colour by edge index. @param index the edge index @param colour the colour
843 This will set the size of the font. @param size The new size of the font.
844 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
845 This will set the alternate color space. @param cs The alternate color space.
846 Sets the r value of the tristimulus. @param r the r value for the tristimulus
847 Sets the g value of the tristimulus. @param g the g value for the tristimulus
848 Sets the b value of the tristimulus. @param b he b value for the tristimulus
849 This will set the default appearance string. @param da The default appearance string.
850 This will set the upper right y coordinate. @param value The upper right y.
851 This will set the upper right x coordinate. @param value The upper right x .
852 This will set the lower left y coordinate. @param value The lower left y.
853 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
854 @param duration The duration of the transition effect, in seconds.
855 This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param key The key to the object that we are getting. @return The object that matches the key.
856 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
857 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
858 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
859 This will add all objects to this array. @param objectList The list of objects to add.
860 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
861 This will set the minimum value for the range. @param min The new minimum for the range.
862 This will set the maximum value for the range. @param max The new maximum for the range.
863 This will set the lower left x coordinate. @param value The lower left x.
864 {@inheritDoc}
865 This is a special case of getDictionaryObject that takes multiple keys, it will handle the situation where multiple keys could get the same value, ie if either CS or ColorSpace is used to get the colorspace. This will get an object from this dictionary. If the object is a reference then it will dereference it and get it from the document. If the object is COSNull then null will be returned. @param firstKey The first key to try. @param secondKey The second key to try. @return The object that matches the key.
866 Creates a matrix from a 6-element (a b c d e f) COS array. @param array source array, elements must be or extend COSNumber
867 Returns true, if the given {@link COSBase} is a registered object of this compression pool. @param object The object, that shall be checked. @return True, if the given {@link COSBase} is a registered object of this compression pool.
868 Get the Perms entry in the encryption dictionary. @return A 16 byte array or null if there is no Perms entry. @throws IOException If there is an error accessing the data.
869 This will get the page number or null if it does not exist. @return The page number.
870 Returns the COS value of this field. @return The COS value of the field, maybe <code>null</code>. @throws IOException If there is an error getting the value.
871 This will get the 'Ff' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
872 This will get the 'SetFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
873 This will get the 'ClrFf' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
874 This will get the 'F' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
875 This will get the UE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error accessing the data.
876 This will get the 'SetF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The field flags.
877 This will get the default width. The default value for the default width is 1000. @return The default width for the glyphs in this font.
878 Returns the process color space @return the process color space @throws IOException if the color space cannot be read
879 Returns the group color space or null if it isn't defined. @param resources useful for its cache. Can be null. @return the group color space. @throws IOException if the colorspace could not be created
880 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
881 Creates a new instance based on a given {@link COSDictionary}. @param dict the dictionary
882 This will get the overprint control mode. @return The overprint control mode or null if one has not been set.
883 Returns the soft mask stored in the COS dictionary @return the soft mask or null if there isn't any.
884 This will get the 'ClrF' entry of the FDF field dictionary. If it is not present then this method will return null. @return The widget field flags.
885 Determine the highest object number from the imported page to avoid mixed up numbers when saving the new pdf. @param importedPage the imported page.
886 This will get the OE entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error accessing the data.
887 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set (the default is true)
888 Get the zoom value. Return values of 0 or -1 imply that the current zoom will be used. @return The zoom value for the page.
889 This will get the page number for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return that number, otherwise -1 will be returned. @return The zero-based page number for this destination.
890 This will get the page for this destination. A page destination can either reference a page (for a local destination) or a page number (when doing a remote destination to another PDF). If this object is referencing by page number then this method will return null and {@link #getPageNumber()} should be used. @return The page for this destination.
891 Returns the colorant name. @return the name of the colorant
892 This is a convenience method that will get the dictionary object that is expected to be a name. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COS name.
893 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSDictionary.
894 This is a convenience method that will get the dictionary object that is expected to be a COSStream. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSStream.
895 This is a convenience method that will get the dictionary object that is expected to be a COSArray. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The COSArray.
896 This is a convenience method that will get the dictionary object that is expected to be a name. Default is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The COS name.
897 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
898 This is a convenience method that will get the dictionary object that is expected to be an float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
899 Returns the content streams which make up this page. @return content stream iterator
900 Returns true if this page has one or more content streams. @return true if the page has a non empty content stream, otherwise false
901 Returns the class names together with their revision numbers (C). @return the class names as a list, never null.
902 Returns the K entry. This can be a dictionary representing a structure element, or an array of them. To get it as a list of PDStructureElement objects, use {@link #getKids()} instead. @return the K entry.
903 Returns the property value. @return the property value
904 This will get a float item from the dictionary. @param key The key to the item. @return The value for that item.
905 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
906 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
907 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
908 If the value in the /P entry is a string, this will get a named destination in the current document that provides the page number of the file attachment annotation. @return a named destination or null if the /P entry value is missing or not a string.
909 Returns the /Contents string as a byte array, i.e. the embedded signature between the byterange gap. @return a byte array containing the signature, or an empty array if there isn't any.
910 Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms. @return The xfa resource or null if it does not exist.
911 Returns the given attribute, inheriting from parent nodes if necessary. @param key the key to look up @return COS value for the given key
912 Default constructor.
913 Returns the COSBase value of the "V" entry. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the COSBase value of the "V" entry
914 Returns the default value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @return the new default value
915 Creates a blank font setting, font will be null, size will be 1.
916 Closes the visual signature COSDocument, if any. Do not call this before you're saved your signed PDF document, or saving will fail because COSStream objects held both by the COSDocument and by the signed document would no longer be available. @throws IOException if the document could not be closed
917 This will write a COS object for a predefined key. @param key The key of the object to write. @param obj The object to write. @throws IOException if the output cannot be written
918 Returns the {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool. @param object The {@link COSBase} a {@link COSObjectKey} is registered for in this compression pool. @return The {@link COSObjectKey}, that is registered for the given {@link COSBase} in this compression pool, if such an object is contained.
919 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
920 Constructor with an initial range of 0..1.
921 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
922 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
923 This will get the transfer function of the /TR dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
924 This will get the transfer function of the /TR2 dictionary. @return The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
925 Returns the backdrop color. @return the backdrop color
926 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
927 The annotation or annotations to be hidden or shown @return The T entry of the specific thread action dictionary.
928 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
929 This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference. @return A flag specifying how to open the destination document.
930 This will add an object to the array. @param object The object to add to the array.
931 Creates {@link COSWriterObjectStream}s for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner. Such object streams may be added to a PDF document and shall be declared in a document's {@link PDFXRefStream} accordingly. The objects contained in such a stream must not be added to the document separately. @return The created {@link COSWriterObjectStream}s for all currently registered compressible objects.
932 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
933 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
934 Sets the gamma value. @param gamma the new gamma value
935 Determines the blend mode from the BM entry in the COS ExtGState. @param cosBlendMode name or array @return blending mode
936 Set the gamma value. @param value The new gamma value.
937 {@inheritDoc}
938 Default Constructor.
939 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
940 This will set the range values. @param rangeValues The new range values.
941 This will set the domain values. @param domainValues The new domain values.
942 This will set the encode values. @param encodeValues The new encode values.
943 This will set the decode values. @param decodeValues The new decode values.
944 Removes an attribute object. @param attributeObject the attribute object
945 Removes a class name. @param className the class name
946 Appends a COS base kid. @param object the COS base
947 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
948 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
949 Sets the K entry. @param k the K value
950 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
951 {@inheritDoc}
952 Constructor for embedding.
953 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
954 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
955 Creates a new optional content membership dictionary (OCMD).
956 Creates a group object with /Transparency subtype entry.
957 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
958 This will set the rich text value. @param rv The rich text value for the stream.
959 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
960 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
961 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
962 Sets the base color space. @param base the base color space
963 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
964 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
965 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
966 This will set the character set for the font. @param charSet The new character set for the font.
967 This will set the font stretch. @param fontStretch The new stretch for the font.
968 This will set interior color of the drawn area. @param color The interior color of the circle.
969 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
970 This will set the FDF id. @param id The new id for the FDF.
971 This will set the differences stream. @param diff The new differences stream.
972 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
973 Sets the COS value of this field. @param value COS value.
974 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
975 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
976 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
977 Constructor for embedding.
978 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
979 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
980 This will set the rich text value. @param rv The rich text value for the stream.
981 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
982 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
983 This will set interior color of the drawn area. @param color The interior color of the drawn area.
984 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
985 This will set the font family. @param fontFamily The font family.
986 Sets the filter entry of the encryption dictionary. @param filter The filter name.
987 This will set the font name. @param fontName The new name for the font.
988 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
989 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
990 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
991 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
992 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
993 Package-private constructor, for embedding.
994 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
995 Returns the list of colorants. @return the list of colorants
996 Set the fonts bounding box. @param rect The new bounding box.
997 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
998 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
999 Default constructor.
1000 Set the annotation color. @param c The annotation color.
1001 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
1002 This will set interior color of the drawn area. @param color The interior color of the circle.
1003 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
1004 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
1005 This will get the alternate color space for this separation. @return The alternate color space. @throws IOException If there is an error getting the alternate color space.
1006 visitFromObjRef method comment. @param obj The object that is being visited. @throws IOException If there is an exception while visiting this object.
1007 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
1008 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
1009 This will set the background. @param newBackground the new background
1010 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
1011 This will set the color space for the shading. @param colorSpace the color space
1012 This will take an COSArray of numbers and convert it to a float[]. @return This COSArray as an array of float numbers.
1013 This will return a list of float values if the COSArray consists of COSNumbers only. @return the list of float values of the COSArray of COSNumbers
1014 This will return a list of int values if the COSArray consists of COSNumbers only. @return the list of int values of the COSArray of COSNumbers
1015 This will get the minimum value of the range. @return The min value.
1016 This will get the maximum value of the range. @return The max value.
1017 Gets the colour by edge index. @param index edge index @return the colour
1018 This will get the display values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the display value is the second entry in the two-element array. </p> @return List containing all the display values.
1019 This will get the option values "Opt". <p> For a choice field the options array can either be an array of text strings or an array of a two-element arrays.<br> The method always only returns either the text strings or, in case of two-element arrays, an array of the first element of the two-element arrays </p> <p> Use {@link #getOptionsExportValues()} and {@link #getOptionsDisplayValues()} to get the entries of two-element arrays. </p> @return List containing the export values.
1020 Default constructor.
1021 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
1022 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
1023 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
1024 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
1025 Default constructor.
1026 This will set the dash style used for drawing the border. @param dashArray the dash style to use
1027 Constructor for embedding.
1028 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
1029 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
1030 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
1031 Constructor. @param doc The document that this form is part of.
1032 Sets the colorant name. @param name the name of the colorant
1033 Set the RGB text color for this node. @param textColor The text color for this node.
1034 Sets the contents. @param bytes contents to be used
1035 Sets the byte range. @param range the byte range to be used
1036 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
1037 Set the filter. @param filter the filter to be used
1038 Set the dictionary type. @param type is the dictionary type.
1039 Default constructor.
1040 Sets the alternate color space. @param colorSpace The alternate color space.
1041 Sets the x value of the tristimulus. @param x the x value for the tristimulus
1042 Sets the y value of the tristimulus. @param y the y value for the tristimulus
1043 Sets the z value of the tristimulus. @param z the z value for the tristimulus
1044 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1045 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
1046 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
1047 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1048 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1049 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1050 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1051 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1052 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
1053 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
1054 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
1055 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1056 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
1057 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
1058 @param b The destination.
1059 @param d The destination.
1060 @param array the array of fields
1061 Sets the sound object. @param sound the sound object defining the sound that shall be played.
1062 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
1063 @param h hide flag
1064 @param t annotation or annotations
1065 Constructor.
1066 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
1067 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
1068 Set the blending mode. @param bm blend mode
1069 Default constructor, creates blank graphics state.
1070 This will set the decode values. @param decodeValues the new decode values
1071 Sets the Coords entry for this shading. @param newCoords the coordinates array
1072 Sets the optional Domain entry for this shading. @param newDomain the domain array
1073 Sets the optional Extend entry for this shading. @param newExtend the extend array
1074 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
1075 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
1076 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
1077 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
1078 Constructor. @param dict The annotations dictionary.
1079 @param array the array of fields
1080 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
1081 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1082 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
1083 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
1084 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
1085 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
1086 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
1087 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
1088 This will set the border array. @param borderArray the border array to set.
1089 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
1090 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
1091 This will set the distances. @param distances distances
1092 This will set interior color. @param ic color.
1093 This will set the areas. @param areas areas
1094 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
1095 This will set interior color of the line endings defined in the LE entry. @param ic color.
1096 This will set the background color. @param c the background color
1097 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
1098 This will set the angles. @param angles angles
1099 Set the RGB text color for this node. @param textColor The text color for this node.
1100 Sets the tint transform function. @param tint the tint transform function
1101 This will set the tint transform function. @param tint The tint transform function.
1102 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
1103 Build widths with Identity CIDToGIDMap (for embedding full font).
1104 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
1105 This will set the font for this font setting. @param font The new font.
1106 This will set the changes along the x-axis. @param changeXs changes along the x-axis
1107 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
1108 Get the RGB text color of this node. Default is black and this method will never return null. @return The structure element of this node.
1109 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
1110 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
1111 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
1112 This will set the changes along the y-axis. @param changeYs changes along the y-axis
1113 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
1114 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
1115 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
1116 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
1117 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
1118 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
1119 This will set the border color. @param c the border color
1120 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
1121 Set the page for a local destination. For an external destination, call {@link #setPageNumber(int) setPageNumber(int pageNumber)}. @param page The page for a local destination.
1122 Returns the sign date. @return the sign date
1123 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
1124 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
1125 This will set the vertical offset of the caption. @param offset vertical offset of the caption
1126 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
1127 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
1128 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
1129 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
1130 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
1131 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
1132 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
1133 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
1134 This will retrieve the date and time the annotation was created. @return the creation date/time.
1135 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
1136 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
1137 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
1138 This will set the vertical offset of the caption. @param offset vertical offset of the caption
1139 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
1140 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
1141 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
1142 Sets the property value. @param value the property value
1143 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
1144 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
1145 Adds a user property. @param userProperty the user property
1146 Get the page actions. @return The Actions for this Page
1147 Constructor. @param cat The document catalog that this dictionary is part of.
1148 @return The Additional Actions for this Document
1149 Returns the document's article threads. @return a list of all threads of the document
1150 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
1151 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
1152 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
1153 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
1154 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
1155 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
1156 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
1157 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
1158 This will set the mapping name of the field. @param mappingName the mapping name of the field
1159 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
1160 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
1161 Sets the default value of this field. @param value The name of the selected item.
1162 Set the default appearance. @param daValue a string describing the default appearance
1163 Set the title for this node. @param title The new title for this node.
1164 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
1165 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
1166 Sets the CPU host name or physical location of the signing. @param location the location to be used
1167 Sets the URL. @param url the URL to be set as URL
1168 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
1169 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
1170 This will set the alternate caption. @param caption the alternate caption
1171 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
1172 This will set the rollover caption. @param caption the rollover caption
1173 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
1174 This will set the annotation state. @param state the annotation state
1175 This will set the short description of the subject of the annotation. @param subj short description of the subject.
1176 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
1177 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
1178 Set the default appearance. @param daValue a string describing the default appearance.
1179 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
1180 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
1181 Set the "contents" of the field. @param value the value of the contents.
1182 Set the parameter to pass the executable. @param param The parameter for the executable.
1183 Set the operation to perform.. @param op The operation to perform on the file.
1184 Set the dir to launch from. @param dir The dir of the executable/document to launch.
1185 Set the file to launch. @param file The executable/document to launch.
1186 This will set the normal caption. @param caption the normal caption
1187 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
1188 Sets the default value of this field. @param value Plain text
1189 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
1190 This will set the font flags. @param flags The new font flags.
1191 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
1192 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
1193 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
1194 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
1195 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
1196 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
1197 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
1198 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
1199 This will set the page. @param page The page number.
1200 This will set the permissions bit mask. @param permissions The new permissions bit mask
1201 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
1202 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
1203 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
1204 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
1205 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
1206 Sets the revision number (R). @param revisionNumber the revision number
1207 Sets the marked content identifier. @param mcid the marked content identifier
1208 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
1209 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
1210 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
1211 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
1212 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
1213 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
1214 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1215 This will set the scale ration. @param scaleRatio the scale ratio.
1216 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
1217 Sets the glyph widths in the font dictionary.
1218 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
1219 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
1220 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
1221 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
1222 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
1223 This will set the producer of the document. @param producer The new producer for the document.
1224 This will set the creator of the document. @param creator The new creator for the document.
1225 This will set the keywords of the document. @param keywords The new keywords for the document.
1226 This will set the subject of the document. @param subject The new subject for the document.
1227 This will set the author of the document. @param author The new author for the document.
1228 This will set the title of the document. @param title The new title for the document.
1229 Sets the Language for the document. @param language The new document language.
1230 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
1231 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1232 Set the date object. @param key The key to the date. @param date The date to set.
1233 Set the file description. @param description The file description
1234 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
1235 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
1236 creates a new transition with the given style. @param style the style to be used to create the new transition
1237 This will set the name of the viewport. @param name the name of the viewport
1238 Constructor.
1239 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
1240 Constructor.
1241 Sets the element identifier (ID). @param id the element identifier
1242 Sets the title (T). @param title the title
1243 Sets the language (Lang). @param language the language
1244 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
1245 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
1246 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
1247 @param sAction The JavaScript.
1248 Creates a new optional content properties dictionary.
1249 Sets the name of the optional content group. @param name the name
1250 This will set the name of the referenced page. @param name The referenced page name.
1251 This will set the partial field name. @param partial The partial field name.
1252 This will set the target frame in the browser to open this document. @param target The new target frame.
1253 This will set the status string. @param status The new status string.
1254 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
1255 This will set the annotation state. @param state the annotation state
1256 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
1257 Set the default style string. @param style The new default style string.
1258 Set the default appearance string. @param appearance The new default appearance string.
1259 This will set the symbol that shall be associated with the caret. @param symbol the symbol
1260 A short description of the annotation. @param subject The annotation subject.
1261 Set a unique title for an annotation. @param title The annotation title.
1262 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
1263 Set a unique name for an annotation. @param name The unique annotation name.
1264 The annotation modification date. @param date The date to store in the FDF annotation.
1265 Sets the actual text (ActualText). @param actualText the actual text
1266 Sets the expanded form (E). @param expandedForm the expanded form
1267 Sets the alternate description (Alt). @param alternateDescription the alternate description
1268 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
1269 Constructor for an existing document outline. @param dic The storage dictionary.
1270 Default constructor.
1271 Default constructor.
1272 Default constructor.
1273 Default constructor.
1274 Default constructor.
1275 Default constructor.
1276 Default constructor.
1277 Default constructor.
1278 Default constructor.
1279 Default constructor.
1280 Default constructor.
1281 Default constructor.
1282 Default constructor.
1283 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
1284 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
1285 Appends an objectable kid. @param objectable the objectable
1286 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
1287 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
1288 Creates an empty PDF document. You need to add at least one page for the document to be valid.
1289 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
1290 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
1291 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
1292 Merges two objects of the same type by deep-cloning its members. <br> Base and target must be instances of the same class. @param base the base object to be cloned @param target the merge target @throws IOException if an I/O error occurs
1293 Default constructor.
1294 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
1295 Constructor for embedding.
1296 Draws an ellipse without a cloudy border effect.
1297 Creates a corner curl for polygons and ellipses.
1298 Creates a new JPEG PDImageXObject from a BufferedImage. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @return a new Image XObject @throws IOException if the JPEG data cannot be written
1299 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
1300 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1301 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1302 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1303 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1304 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1305 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1306 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
1307 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
1308 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
1309 Constructor. @param dict The annotations dictionary.
1310 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
1311 Constructor.
1312 Constructor.
1313 Constructor.
1314 Constructor.
1315 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
1316 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
1317 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
1318 This will set the flatness tolerance. @param flatness The new flatness tolerance
1319 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
1320 This will set the line width. @param width The line width for the object.
1321 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
1322 This will set the CYX factor. @param cyx CYX factor
1323 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
1324 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
1325 This will set the flags for this field. @param flags The new flags.
1326 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
1327 Set the open count. This number is automatically managed for you when you add items to the outline. @param openCount The new open count.
1328 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
1329 Set the P value. @param p the value to be set as P
1330 This will set the rotation. @param rotation the rotation as a multiple of 90
1331 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
1332 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
1333 This will set the flags for this field. @param flags The new flags.
1334 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
1335 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
1336 @param flags the flags
1337 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
1338 @param flags the flags
1339 This will set the line join style. @param style The new line join style.
1340 This will set the line cap style for the graphics state. @param style The new line cap style to set.
1341 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
1342 Set the number of bits per component. @param bitsPerComponent the number of bits per component
1343 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
1344 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
1345 This will set the shading type. @param shadingType the new shading type
1346 This will set the tiling type. @param tilingType The new tiling type.
1347 This will set the paint type. @param paintType The new paint type.
1348 This will set the pattern type. @param patternType The new pattern type.
1349 This will set the paint type. @param paintType The new paint type.
1350 This will set the overprint mode(OPM). @param overprintMode The overprint mode
1351 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
1352 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1353 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
1354 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
1355 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
1356 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
1357 This will set the length of the leader line. @param leaderLineLength length of the leader line
1358 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
1359 This will set the YStep value. @param yStep The new YStep value.
1360 This will set the XStep value. @param xStep The new XStep value.
1361 This will set the missing width for the font. @param missingWidth The new missing width for the font.
1362 This will set the max width for the font. @param maxWidth The new max width for the font.
1363 This will set the average width for the font. @param averageWidth The new average width for the font.
1364 This will set the stem H for the font. @param stemH The new stem h for the font.
1365 This will set the stem V for the font. @param stemV The new stem v for the font.
1366 This will set the x height for the font. @param xHeight The new x height for the font.
1367 This will set the cap height for the font. @param capHeight The new cap height for the font.
1368 This will set the leading for the font. @param leading The new leading for the font.
1369 This will set the descent for the font. @param descent The new descent for the font.
1370 This will set the ascent for the font. @param ascent The new ascent for the font.
1371 This will set the italic angle for the font. @param angle The new italic angle for the font.
1372 Set the weight of the font. @param fontWeight The new weight of the font.
1373 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
1374 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
1375 This will set the length of the leader line. @param leaderLength length of the leader line
1376 Set the annotation opacity. @param opacity The new opacity value.
1377 Set the guideline width. @param width The width in default user space units.
1378 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
1379 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
1380 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
1381 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
1382 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
1383 Default Constructor.
1384 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
1385 The name of the software module that was used to create the signature. @param name is the name of the software module
1386 This will set the file in which the destination is located. @param fs The file specification.
1387 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
1388 Sets the target directory. @param targetDirectory the target directory
1389 This will set the file in which the destination is located. @param fs The file specification.
1390 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
1391 This will set the font setting for this graphics state. @param fs The new font setting.
1392 This will set the function for the color conversion. @param newFunction the new function
1393 This will set the resources for this pattern. @param resources The new resources for this pattern.
1394 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
1395 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
1396 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
1397 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
1398 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
1399 Set a stream containing a CIDSet. @param stream The font program stream.
1400 Set the true type font program. @param ttfStream The true type stream.
1401 Set the type 1 font program. @param type1Stream The type 1 stream.
1402 This will set the template reference. @param tRef The template reference.
1403 This will set the page info. @param info The new page info dictionary.
1404 This will set the file specification for this named page reference. @param fs The file specification to set.
1405 This will set frational space to allocate. @param space The space to allocate.
1406 This will set the additional actions that are associated with this field. @param aa The additional actions.
1407 This will set the action that is associated with this field. @param a The new action.
1408 This will set the icon fit 'IF' entry. @param fit The icon fit object.
1409 This will set the named page references. @param ref The named page references.
1410 This will set the appearance dictionary. @param ap The appearance dictionary.
1411 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
1412 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
1413 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
1414 This will set the file in which the destination is located. @param fs The file specification.
1415 This will set the file in which the destination is located. @param fs The file specification.
1416 Set the attached file. @param file The file that is attached.
1417 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
1418 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
1419 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
1420 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
1421 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
1422 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
1423 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
1424 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
1425 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
1426 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
1427 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
1428 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
1429 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
1430 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
1431 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
1432 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
1433 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
1434 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
1435 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
1436 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
1437 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
1438 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
1439 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
1440 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
1441 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
1442 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
1443 Set the F action. @param action Get the F action.
1444 This will set the file in which the destination is located. @param fs The file specification.
1445 This will set the JavaScript entry. @param js The javascript entries.
1446 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
1447 This will set the file specification. @param fs The file specification.
1448 This will set the FDF document. @param fdf The new FDF dictionary.
1449 Sets the document level URI. @param uri The new document level URI.
1450 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
1451 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
1452 Sets the additional actions for the document. @param actions The actions that are associated with this document.
1453 Sets the Document Open Action for this object. @param action The action you want to perform.
1454 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
1455 Sets the document outlines. @param outlines The new document outlines.
1456 Sets the viewer preferences. @param prefs The new viewer preferences.
1457 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
1458 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
1459 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
1460 Sets the colour for the end edge. @param colour the colour for the end edge
1461 Sets the colour for the start edge. @param colour the colour for the start edge
1462 Sets the document's structure tree root. @param treeRoot The new structure tree.
1463 Sets the colour for the after edge. @param colour the colour for the after edge
1464 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
1465 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
1466 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
1467 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
1468 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
1469 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
1470 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
1471 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
1472 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
1473 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
1474 Sets the colour for the before edge. @param colour the colour for the before edge
1475 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
1476 Set the named destinations that are associated with this document. @param dests The destination names.
1477 Set the named embedded files that are associated with this document. @param ef The new embedded files
1478 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1479 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1480 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
1481 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
1482 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
1483 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
1484 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
1485 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
1486 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
1487 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
1488 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
1489 Sets the referenced XObject. @param xobject the referenced XObject
1490 Sets the referenced annotation. @param annotation the referenced annotation
1491 Sets the page. @param page the page
1492 Sets the value of a given named resource.
1493 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
1494 @param transition The new transition to set on this page.
1495 Set the page actions. @param actions The actions for the page.
1496 Set the metadata for this object. This can be null. @param meta The meta data for this object.
1497 This will set the contents of this page. @param contents The new contents of the page.
1498 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
1499 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
1500 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
1501 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
1502 This will set the resources for this page. @param resources The new resources for this page.
1503 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
1504 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
1505 This will set the signature that is associated with this catalog. @param sig The new signature.
1506 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1507 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
1508 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1509 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
1510 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
1511 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
1512 Sets the page layout. @param layout The new page layout.
1513 Sets the page mode. @param mode The new page mode.
1514 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1515 Sets an array of float numbers. @param name the attribute name @param values the float numbers
1516 Sets an array of name values. @param name the attribute name @param values the array of name values
1517 Sets an array of strings. @param name the attribute name @param values the array of strings
1518 Set the display doc title preference. @param value Set the display doc title preference.
1519 Set the center window preference. @param value Set the center window preference.
1520 Set the fit window preference. @param value Set the fit window preference.
1521 Set the window UI preference. @param value Set the window UI preference.
1522 Creates a new instance with a given type. @param type the type (Type)
1523 Set the menubar preference. @param value Set the menubar preference.
1524 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
1525 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
1526 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
1527 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
1528 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
1529 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
1530 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
1531 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
1532 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
1533 This will specify whether to open the destination document in a new window. @param value The flag value.
1534 This will specify whether to open the destination document in a new window. @param value The flag value.
1535 This will specify whether to open the destination document in a new window. @param value The flag value.
1536 This will set the text knockout flag. @param tk The text knockout flag.
1537 Set the toolbar preference. @param value Set the toolbar preference.
1538 Sets the owner of the attributes. @param owner the owner of the attributes
1539 Default constructor
1540 Default Constructor.
1541 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
1542 Constructor.
1543 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
1544 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
1545 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
1546 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
1547 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
1548 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
1549 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
1550 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
1551 This will set the line ending style. @param style The new style.
1552 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
1553 This will set the annotations appearance state name. @param as The name of the appearance stream.
1554 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
1555 This will set the type of action that the actions dictionary describes. @param s The new type of action.
1556 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
1557 Creates a new Pattern dictionary.
1558 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
1559 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
1560 This will set the encoding. @param encoding The new encoding.
1561 This will set the version of the FDF document. @param version The new version for the FDF document.
1562 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
1563 This will set the line ending style. @param style The new style.
1564 The intent of the annotation. @param intent The annotation's intent.
1565 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
1566 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
1567 Constructor. @param type the type
1568 Sets the structure type (S). @param structureType the structure type
1569 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
1570 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
1571 This will set the overprint control(OP). @param op The overprint control.
1572 This will set the overprint control(OP). @param op The overprint control.
1573 Set the action for this node. @param action The new action for this node.
1574 Set the page destination for this node. @param dest The new page destination for this node.
1575 Set the next sibling, this will be maintained by this class. @param outlineNode The new next sibling.
1576 Set the previous sibling, this will be maintained by this class. @param outlineNode The new previous sibling.
1577 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
1578 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
1579 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
1580 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
1581 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
1582 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
1583 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1584 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
1585 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1586 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
1587 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1588 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
1589 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1590 Set the actions of the field. @param actions The field actions.
1591 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
1592 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
1593 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1594 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1595 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1596 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1597 This will set the external data dictionary. @param externalData the external data dictionary
1598 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
1599 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
1600 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
1601 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
1602 Set the structure element for this node. @param structureElement The new structure element for this node.
1603 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
1604 Set the last child, this will be maintained by this class. @param outlineNode The new last child.
1605 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
1606 This will set if the fields can be renamed. @param value The flag value.
1607 This will tell the icon to scale. @param value The flag value.
1608 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
1609 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
1610 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
1611 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
1612 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
1613 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
1614 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
1615 Set if the structure elements contain user properties. @param userProps The new value for this property.
1616 Set if this is a tagged PDF. @param value The new marked value.
1617 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
1618 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
1619 Set the previous bead in the thread. @param previous The previous bead.
1620 Set the next bead in the thread. @param next The next bead.
1621 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
1622 Set the thread info, can be null. @param info The info dictionary about this thread.
1623 This will set the measure dictionary. @param measure the measure dictionary
1624 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
1625 Set the actions of the field. @param actions The field actions.
1626 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
1627 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
1628 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
1629 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
1630 This will set the default resources for the acroform. @param dr The new default resources.
1631 Set the first child, this will be maintained by this class. @param outlineNode The new first child.
1632 Tell if the dictionary is a PDF or FDF catalog. @param dictionary the dictionary to be tested @return true if the given dictionary is a root dictionary
1633 This will retrieve the rollover icon. @return the rollover icon
1634 This will get the stroking alpha constant. @return The stroking alpha constant or null if one has not been set.
1635 This will get the smothness tolerance. @return The smothness tolerance or null if one has not been set.
1636 This will get the flatness tolerance. @return The flatness tolerance or null if one has not been set.
1637 This will get the miter limit. @return null or the ML value in the dictionary.
1638 This will get the line width. This will return null if there is no line width @return null or the LW value of the dictionary.
1639 Creates a property list from the given dictionary. @param dict COS dictionary @return a new instance of a PDPropertyList using the given dictionary
1640 Returns the group color space or null if it isn't defined. @return the group color space. @throws IOException if the colorspace could not be created
1641 Process the page to extract the region text. @param page The page to extract the regions from. @throws IOException If there is an error while extracting text.
1642 @return The starting or ending scale at which the changes shall be drawn or the default 1 if no scale is found. Only for {@link PDTransitionStyle#Fly}.
1643 @return The duration in seconds of the transition effect or the default 1 if no duration is found.
1644 This will retrieve the border width in points, 0 = no border. @return The width of the border in points.
1645 This will retrieve the constant opacity value used when rendering the annotation (excluing any popup). @return the constant opacity value.
1646 This will retrieve the length of the leader line offset. @return the length of the leader line offset
1647 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
1648 This will get the descent for the font. @return The descent.
1649 This will get the leading for the font. @return The leading.
1650 This will get the CapHeight for the font. @return The cap height.
1651 This will get the x height for the font. @return The x height.
1652 This will get the stemV for the font. @return The stem v value.
1653 This will get the stemH for the font. @return The stem h value.
1654 This will get the non stroking alpha constant. @return The non stroking alpha constant or null if one has not been set.
1655 This will get the average width for the font. @return The average width value.
1656 This will get the missing width for the font from the /MissingWidth dictionary entry. @return The missing width value, or 0 if there is no such dictionary entry.
1657 This will get the gamma value. If none is present then the default of 1 will be returned. @return The gamma value.
1658 This will return the XStep value. @return The XStep value
1659 This will return the YStep value. @return The YStep value
1660 Sets the volume. @return The volume at which to play the sound, in the range −1.0 to 1.0. Default value: 1.0.
1661 This will retrieve the length of the leader line. @return the length of the leader line
1662 This will get the max width for the font. @return The max width value.
1663 This will get the ascent for the font. @return The ascent.
1664 This will write a COS object. @param obj The object to write. @throws IOException if the output cannot be written
1665 Creates an attribute object. @param dictionary the dictionary @return the attribute object
1666 This will always return "Font" for fonts. @return The type of object that this is.
1667 The PostScript name of the font. @return The postscript name of the font.
1668 This will get the scale type. See the SCALE_TYPE_XXX constants. This is guaranteed to never return null. Default: Proportional @return The scale type.
1669 This will get the scale option. See the SCALE_OPTION_XXX constants. This is guaranteed to never return null. Default: Always @return The scale option.
1670 The encoding to be used for a FDF field. The default is PDFDocEncoding and this method will never return null. @return The encoding value.
1671 This will get the version that was specified in the catalog dictionary. @return The FDF version.
1672 This will retrieve the line ending style. @return The ending style for the start point.
1673 Get the intent of the annotation. @return The intent of the annotation.
1674 Create the correct FDFAnnotation. @param fdfDic The FDF dictionary. @return A newly created FDFAnnotation
1675 Get the name of the subfilter. @return The subfilter name contained in this encryption dictionary.
1676 Get the name of the filter. @return The filter name contained in this encryption dictionary.
1677 Gets the subtype (Subtype). @return the subtype
1678 Gets the type (Type). @return the type
1679 Gets the language (Lang). @return the language
1680 Returns the property name. @return the property name
1681 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
1682 Check if the cross reference stream can be found at the current offset. @param startXRefOffset the expected start offset of the XRef stream @return the revised offset @throws IOException if something went wrong
1683 Returns the page display mode. @return the PageMode of the document, if not present PageMode.USE_NONE is returned
1684 Returns the page layout. @return the PageLayout of the document, if not present PageLayout.SINGLE_PAGE is returned
1685 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. "1.4")
1686 This will get the trapped value for the document. This will return null if one is not found. @return The trapped value for the document.
1687 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
1688 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
1689 Gets the type. @return the type
1690 Returns the owner of the attributes. @return the owner of the attributes
1691 Returns the structure type (S). @return the structure type
1692 Creates a node in the structure tree. Can be either a structure tree root, or a structure element. @param node the node dictionary @return the structure node
1693 Returns the type. @return the type
1694 Returns the numbering style for this page range. @return one of the STYLE_* constants
1695 This will get the italic angle for the font. @return The italic angle.
1696 The weight of the font. According to the PDF spec "possible values are 100, 200, 300, 400, 500, 600, 700, 800 or 900" Where a higher number is more weight and appears to be more bold. @return The font weight.
1697 Get the opacity value. @return The opacity of the annotation.
1698 This will retrieve the set of quadpoints which encompass the areas of this annotation which will activate. @return An array of floats representing the quad points.
1699 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
1700 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
1701 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
1702 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
1703 Get one or more disjoint paths that make this annotation. @return An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates.
1704 This will get the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
1705 This will get the margin between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
1706 This will get the margin between the annotations "outer" rectangle defined by /Rect and the boundaries of the underlying caret. @return the differences. If the entry hasn't been set am empty array is returned.
1707 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
1708 An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry @return the array of fields
1709 This will get the font setting of the graphics state. @return The font setting.
1710 Returns all decode values as COSArray. @return the decode array
1711 This will get the Coords values for this shading. @return the coordinate values
1712 This will get the optional Domain values for this shading. @return the domain values
1713 This will get the optional Extend values for this shading. @return the extend values
1714 This will get the optional Domain values of a function based shading. @return the domain values
1715 This will get the list of FDF Pages. This will return a list of FDFPage objects. @return A list of FDF pages.
1716 This will get the list of kids. This will return a list of FDFField objects. This will return null if the underlying list is null. @return The list of kids.
1717 This will return a list of options for a choice field. The values in the list will be 1 of 2 types:<ul> <li><code>String</code> </li> <li>{@link FDFOptionElement}</li> </ul> @return A list of all options.
1718 This will get a list of FDFTemplage objects that describe the named pages that serve as templates. @return A list of templates.
1719 This will get a list of fields that are part of this template. @return A list of fields.
1720 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
1721 The widths of the characters. This will be null for the standard 14 fonts. @return The widths of the characters.
1722 Returns the linear interpretation matrix, which is an array of nine numbers. If the underlying dictionary contains null then the identity matrix will be returned. @return the linear interpretation matrix
1723 Returns the names of the color components. @return the names of the color components
1724 This will return the background. @return the background
1725 PDF 2.0: This will retrieve the arrays that shall represent the alternating horizontal and vertical coordinates for path building. @return An array of float arrays, each supplying the operands for a path building operator (m, l or c). The first array should have 2 elements, the others should have 2 or 6 elements.
1726 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point, LE_NONE if missing, never null.
1727 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point, LE_NONE if missing, never null.
1728 This will return the angles. @return angles
1729 This will return the sloaps of a line. @return the sloaps of a line
1730 This will return the origin of the coordinate system. @return the origin
1731 Get the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @return the visibility policy, never null.
1732 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
1733 This is a convenience method that will get the dictionary object that is expected to be an long. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The long value.
1734 This will return the areas. @return areas
1735 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
1736 Sets the byte position of the first XRef (has to be called after very last startxref was read). This is used to resolve chain of active XRef/trailer. In case startxref position is not found we output a warning and use all XRef/trailer objects combined in byte position order. Thus for incomplete PDF documents with missing startxref one could call this method with parameter value -1. @param startxrefBytePosValue starting position of the first XRef
1737 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
1738 This is a convenience method that will get the dictionary object that is expected to be an float. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The float value.
1739 This is a convenience method that will get the dictionary object that is expected to be a float. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The float value.
1740 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch, or 1 if it hasn't been set. This is supported by PDF 1.6 and higher. @return the user unit.
1741 Get the width of the of the guideline in default user space units. The default is 1. @return The width of the guideline.
1742 This will get the subtype of font. @return the subtype
1743 This will return the distances. @return distances
1744 This will return the changes along the x-axis. @return changes along the x-axis
1745 This will retrieve the numbers that shall represent the alternating horizontal and vertical coordinates. @return An array of floats representing the alternating horizontal and vertical coordinates.
1746 This will get the differences between the annotations "outer" rectangle defined by /Rect and the border. @return the differences. If the entry hasn't been set am empty array is returned.
1747 This will retrieve the set of quadpoints which encompass the areas of this annotation. @return An array of floats representing the quad points.
1748 If <b>SubFilter</b> is not null and the {@link #isSubFilterRequired()} indicates this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If {@link #isSubFilterRequired()} indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If it is not available, a different encoding may be used instead. @return the subfilter that shall be used by the signature handler
1749 An array of names indicating acceptable digest algorithms to use when signing. The value shall be one of <b>SHA1</b>, <b>SHA256</b>, <b>SHA384</b>, <b>SHA512</b>, <b>RIPEMD160</b>. The default value is implementation-specific. @return the digest method that shall be used by the signature handler
1750 If the Reasons array is provided and {@link #isReasonRequired()} indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise signing shall not take place. If the {@link #isReasonRequired()} indicates Reasons is an optional constraint, one of the reasons in the array may be chose or a custom reason can be provided. @return the reasons that should be used by the signature handler
1751 This will return the changes along the y-axis. @return changes along the y-axis
1752 (Optional, PDF 1.6) An array of text strings that specifying possible legal attestations. @return the reasons that should be used by the signature handler
1753 Returns list of key usages of certificate strings where each string is 9 characters long and each character is one of these values {0, 1, X} 0 for must not set, 1 for must set, X for don't care. each index in the string represents a key usage: <ol> <li>digitalSignature</li> <li>non-Repudiation</li> <li>keyEncipherment</li> <li>dataEncipherment</li> <li>keyAgreement</li> <li>keyCertSign</li> <li>cRLSign</li> <li>encipherOnly</li> <li>decipherOnly</li> </ol> @return list of key usages of certificate strings
1754 Returns list of array of bytes of DER-encoded X.509v3 certificates @return list of array of bytes of DER-encoded X.509v3 certificates
1755 Returns A list of array of bytes that contain Object Identifiers (OIDs) of the certificate policies that must be present in the signing certificate @return list of array of bytes that contain Object Identifiers of the certificate policies
1756 Read out the byterange from the file. @return an integer array with the byterange, or an empty array if there is none.
1757 Return the calculation order in which field values should be recalculated when the value of any field changes. (Read about "Trigger Events" in the PDF specification) @return field list. Note these objects may not be identical to PDField objects retrieved from other methods (depending on cache setting). The best strategy is to call {@link #getCOSObject()} to check for identity. The list is not backed by the /CO COSArray in the document.
1758 This will get the indices of the selected options - the 'I' key. <p> This is only needed if a choice field allows multiple selections and two different items have the same export value or more than one values is selected. </p> <p>The indices are zero-based</p> @return List containing the indices of all selected options.
1759 Returns list of byte arrays that contains DER-encoded X.509v3 certificates @return list of byte arrays containing DER-encoded X.509v3 certificates
1760 Get the font name. @return The name of the font.
1761 A string representing the preferred font stretch. According to the PDF Spec: The font stretch value; it must be one of the following (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. @return The stretch of the font.
1762 Returns the PostScript name of the font. @return the PostScript name of the font
1763 Indicates the operating system. The string format isn't specified yet. In its PDF Signature Build Dictionary Specifications Adobe differently specifies the value type to store operating system string:<ul> <li>Specification for PDF v1.5 specifies type as string;</li> <li>Specification for PDF v1.7 specifies type as array and provided example for <code>/PropBuild</code> dictionary indicate it as array of names.</li> </ul> This method supports both types to retrieve the value. @return the operating system id or name.
1764 The build date of the software module. This string is normally produced by the compiler that is used to compile the software, for example using the Date and Time preprocessor flags. As such, this not likely to be in PDF Date format. @return the build date of the software module
1765 This will retrieve the alternate caption. @return the alternate caption.
1766 This will retrieve the rollover caption. @return the rollover caption.
1767 This will retrieve the normal caption. @return the normal caption.
1768 This will retrieve the annotation state model. @return the annotation state model
1769 This will retrieve the annotation state. @return the annotation state
1770 This will retrieve the short description of the subject of the annotation. @return the subject.
1771 Retrieve the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @return The title of the popup.
1772 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
1773 Get the default appearance. @return a string describing the default appearance.
1774 This will get the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @return The identifying name for the Annotation.
1775 This will retrieve the date and time the annotation was modified. @return the modified date/time (often in date format, but can be an arbitrary string).
1776 Get the "contents" of the field. @return the value of the contents.
1777 A parameter to pass the executable. @return The parameter to pass the executable.
1778 The dir to launch from. @return The dir of the executable/document to launch.
1779 The file to launch. @return The executable/document to launch.
1780 Removes a user property. @param userProperty the user property
1781 Returns the PDF name for the state. @return the name of the state
1782 Returns list of maps that contains subject distinguished names like [(cn: John Doe, o: Doe), (cn: John Smith)] both keys are typically of the form 'cn', 'o', 'email', '2.5.4.43'; and values are text strings. @return list maps that contains subject distinguished names
1783 Lists all optional content group names. @return an array of all names
1784 This will get the string specifying the default directory in standard DOS syntax. @return The D entry of the specific Windows launch parameter dictionary.
1785 This will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @return The O entry of the specific Windows launch parameter dictionary.
1786 This will get a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @return The P entry of the specific Windows launch parameter dictionary.
1787 This will get the uniform resource identifier to resolve. It should be encoded in 7-bit ASCII, but UTF-8 and UTF-16 are supported too. @return The URI entry of the specific URI action dictionary or null if there isn't any.
1788 Get the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @return a filename or null if there is none.
1789 If the value in the /A entry is a string, this will get the value of the /NM entry in the annotation dictionary. @return the /NM value of an annotation dictionary or null if the /A entry value is missing or not a string.
1790 This will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @return The F entry of the specific Windows launch parameter dictionary.
1791 returns String of the URL @return string of the URL
1792 Returns the URL. @return the URL
1793 Returns the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @return the name
1794 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
1795 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
1796 Gets a colour. @param name the attribute name @return the colour
1797 Returns a unique key for a new resource.
1798 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
1799 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
1800 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
1801 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
1802 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
1803 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
1804 Get the page destination of this node. @return The page destination of this node. @throws IOException If there is an error creating the destination.
1805 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
1806 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
1807 Gets an array of strings. @param name the attribute name @return the array of strings
1808 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
1809 Returns the CPU host name or physical location of the signing. @return the location
1810 Returns the reason for the signing, such as (I agree...). @return the reason
1811 Returns the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @return the contact info
1812 Get the title of this node. @return The title of this node.
1813 Returns the partial name of the field. @return the name of the field
1814 Gets the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). @return the alternate name of the field
1815 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
1816 Gets the mapping name of the field. The mapping name shall be used when exporting interactive form field data from the document. @return the mapping name of the field
1817 This will return the scale ration. @return the scale ratio.
1818 Returns the role map. @return the role map
1819 Returns the selected values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
1820 Returns the default values, or an empty List. This list always contains a single item unless {@link #isMultiSelect()} is true. @return A non-null string.
1821 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
1822 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
1823 Get the default style string. The default style string defines the default style for rich text fields. @return the DS element of the dictionary object
1824 This will get the list of FDF Fields. This will return a list of FDFField objects. @return A list of FDF fields.
1825 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
1826 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
1827 This will get the unicode file name. @return The file name.
1828 Returns the page label prefix for this page range. @return the page label prefix for this page range, or {@code null} if no prefix has been defined.
1829 This will get the producer of the document. This will return null if no producer exists. @return The producer of the document.
1830 This will get the creator of the document. This will return null if no creator exists. @return The creator of the document.
1831 This will get the keywords of the document. This will return null if no keywords exists. @return The keywords of the document.
1832 This will get the subject of the document. This will return null if no subject exists. @return The subject of the document.
1833 This will get the author of the document. This will return null if no author exists. @return The author of the document.
1834 This will get the title of the document. This will return null if no title exists. @return The title of the document.
1835 Returns the language for the document, or null. @return the language of the document if present, otherwise null
1836 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
1837 This is a convenience method that will get the dictionary object that is expected to be a string. Null is returned if the entry does not exist in the dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
1838 Get the Duplex preference. See DUPLEX enumeration. @return the Duplex preference.
1839 This will retrieve the name of the viewport. @return the name of the viewport
1840 {@inheritDoc} <p><b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance.
1841 Returns the subfilter. @return the subfilter
1842 Returns the filter. @return the filter
1843 A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific use for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> @return string of URL type
1844 Returns the PostScript name of the font. @return the PostScript name of the font
1845 Returns the PostScript name of the font. @return the PostScript name of the font
1846 Returns the PostScript name of the font. @return the PostScript name of the font
1847 Returns true if this is an NChannel (PDF 1.6) color space. @return true if this is an NChannel color space.
1848 This will get the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @return The Type of PDF object.
1849 This will get the file name. @return The file name.
1850 This will get the type of action that the actions dictionary describes. @return The S entry of actions dictionary.
1851 This will retrieve the subtype of the annotation. @return The subtype of this annotation, see the SUB_TYPE_XXX constants.
1852 This will retrieve the caption positioning. @return the caption positioning
1853 This will retrieve the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @return the intent
1854 returns the subtype of the external data dictionary. @return the subtype of the external data dictionary
1855 The name of the software module that was used to create the signature. @return the name of the software module
1856 If <b>Filter</b> is not null and the {@link #isFilterRequired()} indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If {@link #isFilterRequired()} indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead. @return the filter that shall be used by the signature handler
1857 This will create the correct type of action based on the type specified in the dictionary. @param action An action dictionary. @return An action of the correct type.
1858 This will get the name representing a Dos file. @return The file name.
1859 This will get the name representing a Mac file. @return The file name.
1860 This will get the name representing a Unix file. @return The file name.
1861 Get the default appearance string. @return The default appearance of the annotation.
1862 Get the default style string. @return The default style of the annotation.
1863 This will retrieve the caption positioning. @return the caption positioning
1864 This will retrieve the annotation state. @return the annotation state
1865 This will retrieve the annotation state model. @return the annotation state model
1866 This will get the status string to be displayed as the result of an action. @return The status.
1867 This will get the clockwise rotation in degrees. @return The number of degrees of clockwise rotation.
1868 This will get the target frame in the browser to open this document. @return The target frame.
1869 This will get the name of the referenced page. A required parameter. @return The name of the referenced page.
1870 A string representing the preferred font family. @return The font family.
1871 This will get the character set for the font. @return The character set value.
1872 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
1873 Get the highest value for a key in the name map. @return The highest value for a key in the map.
1874 This will get the "T" entry in the field dictionary. A partial field name. Where the fully qualified field name is a concatenation of the parent's fully qualified field name and "." as a separator. For example<br> Address.State<br> Address.City<br> @return The partial field name.
1875 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
1876 This will retrieve the symbol that shall be associated with the caret. @return the symbol
1877 Get the annotation title. @return The title of the annotation.
1878 This will get the description. @return The file description.
1879 Returns the element identifier (ID). @return the element identifier
1880 Returns the title (T). @return the title
1881 Returns the language (Lang). @return the language
1882 Returns the alternate description (Alt). @return the alternate description
1883 Returns the expanded form (E). @return the expanded form
1884 Get the description of the annotation. @return The subject of the annotation.
1885 Returns the actual text (ActualText). @return the actual text
1886 Gets the actual text (ActualText). @return the actual text
1887 Gets the alternate description (Alt). @return the alternate description
1888 Gets the expanded form (E). @return the expanded form
1889 Modification date. @return The date as a string.
1890 Get the annotation name. @return The unique name of the annotation.
1891 Get the text, or a description, of the annotation. @return The text, or a description, of the annotation.
1892 Returns the string for the property value. @return the string for the property value
1893 This is the FDF id. @return The FDF ID.
1894 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
1895 This will retrieve the interior color of the drawn area. @return object representing the color.
1896 Returns the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. @return the parent tree.
1897 Returns the ID tree. @return the ID tree
1898 Returns the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @return the page on which some or all of the content items designated by the K entry shall be rendered
1899 Get the page on which the object shall be rendered. @return the referenced page or null.
1900 Gets the page. @return the page
1901 Returns the resource names of the given kind.
1902 Returns the resource with the given name and kind, or null.
1903 Returns the resource with the given name and kind as an indirect object, or null.
1904 @return The page transition associated with this page or null if no transition is defined
1905 Get the document level JavaScript name tree. When the document is opened, all the JavaScript actions in it shall be executed, defining JavaScript functions for use by other scripts in the document. @return The document level JavaScript name tree.
1906 Get the embedded files named tree node. The values in this name tree will be PDComplexFileSpecification objects. @return The embedded files name tree node.
1907 Get the destination named tree node. The values in this name tree will be PDPageDestination objects. @return The destination name tree node.
1908 Get the optional content properties dictionary associated with this document. @return the optional properties dictionary or null if it is not present
1909 Get the document's structure tree root, or null if none exists. @return the structure tree root if present, otherwise null
1910 Returns the document-level URI. @return the document level URI if present, otherwise null
1911 Get info about doc's usage of tagged features. This will return null if there is no information. @return The new mark info.
1912 Sets the ClassMap. @return the ClassMap, never null. The elements are either {@link PDAttributeObject} or lists of it.
1913 @return The named destinations dictionary for this document or null if none exists.
1914 Returns the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @return the crypt filter with the given name if available
1915 This will retrieve the border style dictionary, describing the effect applied to the border described by the BS entry. @return the border effect dictionary.
1916 Get the target directory. If this entry is absent, the current document is the target file containing the destination. @return the target directory or null if the current document is the target file containing the destination.
1917 This will get a dictionary containing Windows-specific launch parameters. @return The Win entry of of the specific launch action dictionary.
1918 Get the target directory. @return the target directory or null if there is none.
1919 This will get the resources for this pattern. This will return null if no resources are available at this level. @return The resources for this pattern.
1920 This will get the external graphics state for this pattern. @return The extended graphics state for this pattern.
1921 @param destination to be rendered @return state or null if undefined
1922 Returns the DeviceN Process Dictionary, or null if it is missing. @return the DeviceN Process Dictionary, or null if it is missing.
1923 Returns the dictionary containing all streams to be used to render the glyphs. @return the dictionary containing all glyph streams.
1924 Returns the optional resources of the type3 stream. @return the resources bound to be used when parsing the type3 stream
1925 Returns the Panose entry of the Style dictionary, if any. @return A Panose wrapper object.
1926 Returns the CIDSystemInfo, or null if it is missing (which isn't allowed but could happen). @return the CIDSystemInfo, or null
1927 This is the template reference. @return The template reference.
1928 This will get a list of additional actions that will get executed based on events. @return The 'AA' entry in this FDF field dictionary or null.
1929 This will get the icon fit that is associated with this field. @return The 'IF' entry.
1930 This will get named page references. @return The named page references or <code>null</code>.
1931 This will get the appearance dictionary that specifies the appearance of a pushbutton field. @return The AP entry of this dictionary.
1932 This will get the java script entry. @return The java script entry describing javascript commands.
1933 This will get the signature or null if there is none. @return The signature.
1934 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @return the border style dictionary.
1935 @return The names dictionary for this document or null if none exist.
1936 Get the viewer preferences associated with this document or null if they do not exist. @return The document's viewer preferences.
1937 Get the documents AcroForm. This will return null if no AcroForm is part of the document. Dependent on setting <code>acroFormFixup</code> some fixing/changes will be done to the AcroForm. If you need to ensure that there are no fixes applied call <code>getAcroForm</code> with <code>null</code>. Using <code>getAcroForm(PDDocumentFixup acroFormFixup)</code> might change the original content and subsequent calls with <code>getAcroForm(null)</code> will return the changed content. @param acroFormFixup the fix up action or null @return The document's AcroForm.
1938 This will parse a PDF dictionary. @param isDirect indicates whether the dictionary to be read is a direct object @return The parsed dictionary, never null. @throws IOException If there is an error reading the stream.
1939 Returns the blending mode stored in the COS dictionary @return the blending mode
1940 Gets the colour for the end edge. @return the colour for the end edge
1941 Gets the colour for the start edge. @return the colour for the start edge
1942 Gets the colour for the after edge. @return the colour for the after edge
1943 Gets the colour for the before edge. @return the colour for the before edge
1944 Read a vertex from the bit input stream performs interpolations. @param input bit input stream @param maxSrcCoord max value for source coordinate (2^bits-1) @param maxSrcColor max value for source color (2^bits-1) @param rangeX dest range for X @param rangeY dest range for Y @param colRangeTab dest range array for colors @param matrix the pattern matrix concatenated with that of the parent content stream @param xform the affine transformation @return a new vertex with the flag and the interpolated values @throws IOException if something went wrong
1945 Read a single patch from a data stream, a patch contains information of its coordinates and color parameters. @param input the image source data stream @param isFree whether this is a free patch @param implicitEdge implicit edge when a patch is not free, otherwise it's not used @param implicitCornerColor implicit colors when a patch is not free, otherwise it's not used @param maxSrcCoord the maximum coordinate value calculated from source data @param maxSrcColor the maximum color value calculated from source data @param rangeX range for coordinate x @param rangeY range for coordinate y @param colRange range for color @param matrix the pattern matrix concatenated with that of the parent content stream @param xform transformation for user to device space @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return a single patch @throws IOException when something went wrong
1946 {@inheritDoc}
1947 {@inheritDoc}
1948 Creates a new line dash pattern from a dash array and phase. @param array the dash array @param phase the phase
1949 Constructor. @param array An array of numbers as specified in the PDF Reference for a rectangle type.
1950 Convenience method to be used when creating a matrix from unverified data. If the parameter is a COSArray with at least six numbers, a Matrix object is created from the first six numbers and returned. If not, then the identity Matrix is returned. @param base a COS object, preferably a COSArray with six numbers. @return a Matrix object.
1951 This is a convenience method that will get the dictionary object that is expected to be a COSDictionary. Null is returned if the entry does not exist in the dictionary. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The COSDictionary.
1952 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
1953 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
1954 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws IOException If something went wrong.
1955 This will get the encryption dictionary if the document is encrypted or null if the document is not encrypted. @return The encryption dictionary.
1956 This will tell if this is an encrypted document. @return true If this document is encrypted.
1957 Returns the annotations appearance state, which selects the applicable appearance stream from an appearance subdictionary. @return the annotations appearance state
1958 Get the relationship between the current document and the target (which may be an intermediate target). @return the relationship as a name. Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). Invalid values or null are also returned.
1959 Returns the subtype of the soft mask (Alpha, Luminosity) - S entry @return the subtype of the soft mask
1960 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @return Unicode character(s)
1961 Returns the name of the filter which is used for de/encrypting strings. Default value is "Identity". @return the name of the filter
1962 Returns the name of the filter which is used for de/encrypting streams. Default value is "Identity". @return the name of the filter
1963 This will get the appearance dictionary associated with this annotation. This may return null. @return This annotations appearance.
1964 This will return the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @return the name of the crypt filter method.
1965 Get the coordinates of individual words or group of words. @see #setCoords(float[]) @return the array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
1966 This will get the color space or null if none exists. @return the color space for the shading @throws IOException if there is an error getting the color space
1967 Returns A list of filters applied to this stream. @return A (possibly empty) list of filters applied to this stream, never null.
1968 Returns true if the node is a page tree node (i.e. and intermediate).
1969 This will retrieve the corresponding page of this annotation. See also <a href="https://stackoverflow.com/a/36894982/535646">this answer</a> about what to do if the page isn't available. @return The corresponding page or null if not available.
1970 This will get the FDF page info object. @return The Page info.
1971 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
1972 This will get the document ID. @return The document id.
1973 This will retrieve the alternate icon. @return the alternate icon.
1974 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
1975 This will retrieve the normal icon. @return the normal icon.
1976 Gets the sound object. @return The sound object defining the sound that shall be played.
1977 Get the CIDSet stream. @return A stream containing a CIDSet.
1978 Get the list of OutputIntents defined in the document. @return The list of PDOutputIntent, never null.
1979 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
1980 A stream containing a true type font program. @return A stream containing a true type font program.
1981 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
1982 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
1983 A stream containing a Type 1 font program. @return A stream containing a Type 1 font program.
1984 This will get the incremental updates since the PDF was last opened. @return The differences entry of the FDF dictionary.
1985 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
1986 Get the metadata that is part of the document catalog. This will return null if there is no meta data for this object. @return The metadata for this object.
1987 Get the page that this bead is part of. @return The page that this bead is part of.
1988 A stream containing a font program that is not true type or type 1. @return A stream containing a font program.
1989 This will get a list of PDThreadBead objects, which are article threads in the document. This will return an empty list if there are no thread beads. @return A list of article threads on this page, never null. The returned list is backed by the beads COSArray, so any adding or deleting in this list will change the document too.
1990 Get the viewports. @return a list of viewports or null if there is no /VP entry.
1991 Return the children of this node. This list will contain PDNameTreeNode objects. @return The list of children or null if there are no children.
1992 Returns all bounds values as COSArray. @return the bounds array.
1993 Returns all functions values as COSArray. @return the functions array.
1994 Returns all decode values as COSArray. @return the decode array.
1995 The "Size" entry, which is the number of samples in each input dimension of the sample table. @return A List of java.lang.Integer objects.
1996 Returns all domains for the input values as COSArray. Required for all function types. @return the domains array.
1997 Returns all ranges for the output values as COSArray . Required for type 0 and type 4 functions @return the ranges array.
1998 Get the lowest value for a key in the number map. @return The lowest value for a key in the map or null if missing.
1999 Get the highest value for a key in the number map. @return The highest value for a key in the map or null if missing.
2000 Returns the user properties. @return the user properties
2001 Is the artifact attached to the given edge? @param edge the edge @return <code>true</code> if the artifact is attached to the given edge, <code>false</code> otherwise
2002 Get the annotation color. @return The annotation color, or null if there is none.
2003 This will retrieve the interior color of the drawn area. @return object representing the color.
2004 This will get the coordinates of the callout line. @return An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
2005 Get the paths making up the freehand "scribble". @see #setInkList(List) @return the List of arrays representing the paths.
2006 This will return a map of numbers on this level. The key will be a java.lang.Integer, the value will depend on where this class is being used. @return A map of COS objects. @throws IOException If there is a problem creating the values.
2007 This will retrieve the start and end coordinates of the line (or leader line if LL entry is set). @return array of floats [x1, y1, x2, y2] line start and end points in default user space.
2008 Return the children of this node. This list will contain PDNumberTreeNode objects. @return The list of children or null if there are no children.
2009 This will return a map of names on this level. The key will be a string, and the value will depend on where this class is being used. @return ordered map of COS objects or <code>null</code> if the dictionary contains no 'Names' entry on this level. @throws IOException If there is an error while creating the sub types. @see #getKids()
2010 Returns all encode values as COSArray. @return the encode array.
2011 This will retrieve the horizontal offset of the caption. @return the horizontal offset of the caption
2012 This will get the previous bead. If this bead is the first bead in the list then this will return the last bead. @return The previous bead in the list or the last bead if this is the first bead.
2013 Get the structure element of this node. @return The structure element of this node.
2014 This will get the default resources for the AcroForm. @return The default resources or null if there is none.
2015 @return true if the node has at least one child
2016 This will retrieve the vertical offset of the caption. @return the vertical offset of the caption
2017 PDF signature build dictionary. Provides information about the signature handler. @return the pdf signature build dictionary.
2018 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @return the timestamp dictionary as PDSeedValueTimeStamp
2019 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @return dictionary
2020 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @return the mdp dictionary as PDSeedValueMDP
2021 A build data dictionary for the viewing application software module that was used to create the parent signature. @return the App as PDPropBuildApp object
2022 A build data dictionary for the PubSec software module that was used to create the parent signature. @return the PubSec as PDPropBuildPubSec object
2023 A build data dictionary for the signature handler that was used to create the parent signature. @return the Filter as PDPropBuildFilter object
2024 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
2025 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2026 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
2027 Get the additional actions for this field. This will return null if there are no additional actions for this field. As of PDF 1.6 this is only used for Widget Annotations. @return The actions of the field.
2028 Returns the appearance characteristics dictionary. @return the appearance characteristics dictionary
2029 This will retrieve the interior color of the line endings defined in the LE entry. @return object representing the color.
2030 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
2031 Returns the signature contained in this field. @return A signature dictionary.
2032 This will get the next bead. If this bead is the last bead in the list then this will return the first bead. @return The next bead in the list or the first bead if this is the last bead.
2033 This will get the thread that this bead is part of. This is only required for the first bead in a thread, so other beads 'may' return null. @return The thread that this bead is part of.
2034 This will set the previous URI action, in case it's needed. @return The previous URI.
2035 This will get the coordinates of the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2036 This will get interior color of the drawn area. @return object representing the color.
2037 This will get the coordinates of the the vertices. @return array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
2038 This will return the external data dictionary. @return the external data dictionary
2039 Get the additional actions for this field. This will return null if there are no additional actions for this field. @return The actions of the field.
2040 Get the first bead in the thread, or null if it has not been set yet. This is a required field for this object. @return The first bead in the thread.
2041 This will retrieve the measure dictionary. @return the measure dictionary
2042 This will retrieve the border style dictionary, specifying the width and dash pattern used in drawing the line. @return the border style dictionary.
2043 This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section. @return The ending style for the start point.
2044 This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section. @return The ending style for the end point.
2045 <p>(Optional; PDF 1.5) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @return the seed value dictionary as PDSeedValue
2046 Returns the default value, if any. @return A signature dictionary.
2047 Get info about the thread, or null if there is nothing. @return The thread information.
2048 This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line. @return The border effect dictionary
2049 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
2050 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
2051 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2052 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
2053 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2054 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
2055 This will get the fonts bounding box. @return The fonts bounding box.
2056 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2057 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
2058 Constructor, creates a new FDF document.
2059 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
2060 Sets the bounding box. @param bbox the bounding box
2061 Sets a colour. @param name the attribute name @param value the colour
2062 Sets four colours. @param name the attribute name @param value the four colours
2063 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
2064 This will get the FDF dictionary. @return The FDF dictionary.
2065 Adds the given resource if it does not already exist.
2066 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
2067 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
2068 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
2069 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
2070 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
2071 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
2072 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
2073 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
2074 Gets the bounding box. @return the bounding box.
2075 The rectangle associated with this annotation. @return The annotation rectangle.
2076 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
2077 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
2078 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2079 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
2080 This will retrieve the rectangle specifying the location of the viewport. @return the location
2081 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
2082 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
2083 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
2084 This will tell if this document is encrypted or not. @return true If this document is encrypted.
2085 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
2086 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
2087 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
2088 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
2089 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
2090 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
2091 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
2092 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
2093 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
2094 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
2095 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2096 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
2097 @param array dash array @param phase dash phase
2098 This will get the dash pattern. @return null or the D value in the dictionary.
2099 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
2100 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
2101 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
2102 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
2103 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
2104 This will get the optional Matrix of a function based shading. @return the matrix
2105 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
2106 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
2107 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
2108 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
2109 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
2110 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
2111 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
2112 This will decrypt a dictionary. @param dictionary The dictionary to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error creating a new string.
2113 This will set the label for the units. @param units the label for the units
2114 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
2115 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
2116 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
2117 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
2118 Constructor.
2119 @return The parent of this node or null if there is no parent.
2120 Get the outline associated with this document or null if it does not exist. @return The document's outline.
2121 Default constructor.
2122 Creates a new shading pattern.
2123 Default Constructor.
2124 Returns the collection of all optional content groups. @return the optional content groups
2125 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
2126 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
2127 Sets a string attribute value. @param name the attribute name @param value the string attribute value
2128 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
2129 Set the sign date. @param cal the date to be used as sign date
2130 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
2131 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
2132 Sets the string for the property value. @param formattedValue the string for the property value
2133 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
2134 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
2135 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
2136 Set the creation date. @param date The date the annotation was created.
2137 This will set the modification date of the document. @param date The new modification date for the document.
2138 This will set the creation date of the document. @param date The new creation date for the document.
2139 Sets the property name. @param name the property name
2140 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
2141 This will set the name of the action to be performed. @param name The name of the action to be performed.
2142 Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The right x coordinate.
2143 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
2144 Default constructor.
2145 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
2146 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2147 Default constructor.
2148 Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate will be used. @param x The left x coordinate.
2149 Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate will be used. @param y The top ycoordinate.
2150 Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The bottom y coordinate.
2151 Set the zoom value for the page, values 0 or -1 imply that the current zoom will be used. @param zoom The zoom value.
2152 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
2153 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
2154 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
2155 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
2156 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
2157 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
2158 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
2159 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2160 This will set the rendering intent for the graphics state. @param ri The new rendering intent
2161 Sets a name value. @param name the attribute name @param value the name value
2162 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
2163 Default constructor.
2164 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
2165 Insert a single sibling after this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
2166 Insert a single sibling before this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
2167 Default constructor.
2168 Get the annotations appearance dictionary. <p> This will get the annotations appearance dictionary. If this is not existent an empty appearance dictionary will be created. @return the annotations appearance dictionary
2169 Creates a new tiling pattern.
2170 Default constructor.
2171 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
2172 Default constructor.
2173 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
2174 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
2175 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
2176 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
2177 This will return the label for the units. @return the label for the units
2178 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
2179 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
2180 Gets a string attribute value. @param name the attribute name @return the string attribute value
2181 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
2182 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
2183 Get the action of this node. @return The action of this node.
2184 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
2185 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
2186 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
2187 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
2188 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
2189 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
2190 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
2191 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
2192 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
2193 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
2194 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
2195 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
2196 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
2197 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
2198 This will retrieve the background color. @return the background color.
2199 This will retrieve the border color. @return the border color.
2200 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
2201 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
2202 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
2203 Get the default appearance. @return the DA element of the dictionary object
2204 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
2205 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
2206 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
2207 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
2208 This will retrieve the dash style used for drawing the border. @return the dash style of the border
2209 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
2210 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
2211 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
2212 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
2213 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
2214 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
2215 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
2216 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
2217 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
2218 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
2219 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
2220 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
2221 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
2222 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
2223 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
2224 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
2225 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
2226 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
2227 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
2228 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
2229 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
2230 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
2231 Get the F action. @return The F action.
2232 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
2233 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
2234 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
2235 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
2236 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
2237 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
2238 Constructor.
2239 Constructor.
2240 Constructor.
2241 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
2242 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
2243 Constructor.
2244 Constructor.
2245 Default constructor.
2246 Default constructor.
2247 Default constructor.
2248 Default constructor.
2249 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
2250 Constructor.
2251 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
2252 Constructor.
2253 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
2254 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
2255 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2256 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2257 Constructor. @param dict The annotations dictionary.
2258 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2259 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
2260 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2261 Constructor. @param dict The annotations dictionary.
2262 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2263 Constructor. @param dict The annotations dictionary.
2264 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2265 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2266 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2267 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
2268 Constructor. @param dict The annotations dictionary.
2269 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
2270 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
2271 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
2272 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
2273 Constructor for reading. @param root A page tree root.
2274 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
2275 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
2276 Returns all encode values as COSArray. @return the encode array.
2277 Constructor. @param function The function.
2278 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
2279 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
2280 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
2281 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
2282 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
2283 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
2284 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
2285 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
2286 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
2287 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
2288 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
2289 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
2290 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
2291 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
2292 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
2293 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
2294 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
2295 This will set the conversion factor. @param conversionFactor the conversion factor
2296 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
2297 Sets a float number. @param name the attribute name @param value the float number
2298 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
2299 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
2300 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
2301 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
2302 Set the mac ResFork. @param macResFork The mac ResFork.
2303 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
2304 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
2305 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
2306 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
2307 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
2308 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
2309 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
2310 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
2311 Returns the standard crypt filter. @return the standard crypt filter if available.
2312 Set the mac Creator. @param macCreator The mac Creator.
2313 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
2314 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
2315 Returns the base state for optional content groups. @return the base state
2316 Creates a new optional content group (OCG). @param name the name of the content group
2317 This will return the CYX factor. @return CYX factor
2318 Set the mac subtype. @param macSubtype The mac subtype.
2319 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
2320 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
2321 This will retrieve the length of the leader line. @return the length of the leader line
2322 This will return the conversion factor. @return the conversion factor
2323 Gets a number value. @param name the attribute name @return the number value
2324 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
2325 This will retrieve the length of the leader line offset. @return the length of the leader line offset
2326 Sets an integer. @param name the attribute name @param value the integer
2327 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
2328 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
2329 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
2330 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
2331 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
2332 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
2333 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
2334 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
2335 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
2336 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
2337 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
2338 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
2339 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
2340 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
2341 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
2342 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
2343 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
2344 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
2345 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
2346 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
2347 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2348 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
2349 @return The first child or null if there is no child.
2350 @return The last child or null if there is no child.
2351 Get the signature dictionary. @return the signature dictionary
2352 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
2353 Sets an integer number. @param name the attribute name @param value the integer number
2354 Adds an optional content group (OCG). @param ocg the optional content group
2355 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
2356 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
2357 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
2358 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
2359 This will get the name of the action to be performed. @return The name of the action to be performed.
2360 This will get the rendering intent. @return null or the RI value in the dictionary.
2361 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
2362 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
2363 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
2364 Gets a name value. @param name the attribute name @return the name value
2365 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
2366 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
2367 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
2368 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
2369 Get a list of optional content groups. @return List of optional content groups, never null.
2370 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
2371 Returns the default position vector (v). @param cid CID
2372 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
2373 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
2374 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
2375 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
2376 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
2377 Get the reading direction preference. @return the reading direction preference.
2378 Get the non full screen page mode preference. @return the non full screen page mode preference.
2379 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
2380 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
2381 @return the style for this transition @see PDTransitionStyle#valueOf(String)
2382 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
2383 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
2384 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
2385 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
2386 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
2387 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
2388 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
2389 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
2390 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
2391 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
2392 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
2393 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
2394 Checks the check box. @throws IOException if the appearance couldn't be generated.
2395 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
2396 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
2397 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
2398 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
2399 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
2400 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
2401 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
2402 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
2403 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
2404 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
2405 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
2406 This will return the text to be concatenated after the label specified by U. @return label suffix
2407 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
2408 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
2409 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
2410 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
2411 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
2412 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
2413 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
2414 Constructor.
2415 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
2416 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
2417 Returns the page tree. @return the page tree
2418 Constructor.
2419 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
2420 Default constructor.
2421 Default constructor.
2422 Default Constructor
2423 Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
2424 Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
2425 Default constructor.
2426 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
2427 Constructor.
2428 Constructor.
2429 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2430 Cloudy rectangle implementation is based on converting the rectangle to a polygon.
2431 Creates a cloudy border for a Polygon annotation. @param path polygon path @throws IOException If there is an error writing to the stream.
2432 Constructor. @param dict The annotations dictionary.
2433 Constructor. @param dict The annotations dictionary.
2434 Constructor. @param dict The annotations dictionary.
2435 Constructor. @param dict The annotations dictionary.
2436 Creates a new Lab color space from a PDF array. @param lab the color space array
2437 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
2438 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
2439 Creates a new Lab color space.
2440 Creates a new CalRGB color space.
2441 Create a new CalGray color space.
2442 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
2443 Default constructor.
2444 Default constructor.
2445 Default constructor.
2446 Default constructor.
2447 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
2448 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
2449 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
2450 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
2451 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
2452 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
2453 A convenience method that will create an XYZ destination using only the defaults. @param page The page to refer to.
2454 Reads the font's Encoding entry, which should be a CMap name/stream.
2455 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
2456 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
2457 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
2458 Default constructor.
2459 Constructor #1.
2460 Default constructor.
2461 Default Constructor
2462 Default constructor.
2463 Default constructor.
2464 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
2465 Get the annotations normal appearance. <p> This will get the annotations normal appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the normal appearance.
2466 Get the annotations rollover appearance. <p> This will get the annotations rollover appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the rollover appearance.
2467 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
2468 Get the annotations down appearance. <p> This will get the annotations down appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the down appearance.
2469 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
2470 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
2471 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
2472 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
2473 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
2474 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
2475 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
2476 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
2477 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
2478 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
2479 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
2480 Get the center window preference. @return the center window preference.
2481 Get the fit window preference. @return the fit window preference.
2482 Get the menubar preference. @return the menubar preference.
2483 Get the toolbar preference. @return the toolbar preference.
2484 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
2485 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
2486 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
2487 Get the display doc title preference. @return the display doc title preference.
2488 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
2489 Returns the revision number (R). @return the revision number
2490 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
2491 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
2492 A set of flags specifying various characteristics of the action @return the flags
2493 A set of flags specifying various characteristics of the action @return the flags
2494 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
2495 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
2496 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
2497 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
2498 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
2499 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
2500 This will return the tiling type. @return The tiling type
2501 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
2502 This will get the font flags. @return The font flags.
2503 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
2504 This will get the permissions bit mask. @return The permissions bit mask.
2505 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
2506 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
2507 This will return the paint type. @return The paint type
2508 This will get the flags for this field. @return flags The set of flags.
2509 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
2510 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
2511 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
2512 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
2513 {@inheritDoc} The returned images are not cached.
2514 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
2515 Returns the pattern image in parent stream coordinates.
2516 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
2517 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
2518 A dictionary containing any resources required by the page.
2519 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
2520 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
2521 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
2522 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
2523 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
2524 This will get the text knockout flag. @return The text knockout flag.
2525 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
2526 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
2527 This will get the overprint control. @return The overprint control or null if one has not been set.
2528 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
2529 This will return the AntiAlias value. @return the AntiAlias value
2530 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
2531 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
2532 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
2533 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
2534 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
2535 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
2536 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
2537 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
2538 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
2539 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
2540 Get the window UI preference. @return the window UI preference.
2541 Indicates if a timestamp is required. @return true if a timestamp is required
2542 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
2543 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
2544 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
2545 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
2546 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
2547 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
2548 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
2549 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
2550 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
2551 Returns the structure tree root. @return the structure tree root
2552 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
2553 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
2554 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
2555 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
2556 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
2557 Get the embedded unicode file. @return The embedded unicode file for this file spec.
2558 Get the embedded Unix file. @return The embedded file for this file spec.
2559 Get the embedded Mac file. @return The embedded Mac file for this file spec.
2560 Get the embedded file. @return The embedded file for this file spec.
2561 Get the number of open nodes or a negative number if this node is closed. See PDF Reference 32000-1:2008 table 152 and 153 for more details. This value is updated as you append children and siblings. @return The Count attribute of the outline dictionary.
2562 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
2563 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
2564 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
2565 This will get the top index "TI" value. @return the top index, default value 0.
2566 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
2567 Get the embedded dos file. @return The embedded dos file for this file spec.
2568 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
2569 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
2570 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
2571 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
2572 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
2573 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
2574 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
2575 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
2576 Creates a cloudy border for a rectangular annotation. The rectangle is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. <p> This can be used for Square and FreeText annotations. However, this does not produce the text and the callout line for FreeTexts. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
2577 Cloudy ellipse implementation.
2578 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
2579 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
2580 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
2581 Set the locked flag. @param locked The new locked flag.
2582 Set the readOnly flag. @param readOnly The new readOnly flag.
2583 Set the noView flag. @param noView The new noView flag.
2584 Set the noRotate flag. @param noRotate The new noRotate flag.
2585 Set the noZoom flag. @param noZoom The new noZoom flag.
2586 Set the printed flag. @param printed The new printed flag.
2587 Set the hidden flag. @param hidden The new hidden flag.
2588 Set the invisible flag. @param invisible The new invisible flag.
2589 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
2590 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
2591 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
2592 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
2593 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
2594 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
2595 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
2596 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
2597 Constructor. @param js Some javascript code.
2598 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
2599 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
2600 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
2601 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
2602 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
2603 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
2604 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
2605 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
2606 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
2607 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
2608 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
2609 Creates a new PDFRenderer. @param document the document to render
2610 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
2611 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
2612 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
2613 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
2614 Increments th revision number.
2615 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
2616 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
2617 Set the Sort bit. @see #isSort() @param sort The value for Sort.
2618 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
2619 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
2620 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
2621 Set the Combo bit. @param combo The value for Combo.
2622 Set the Edit bit. @param edit The value for Edit.
2623 sets the field to be read-only. @param readonly The new flag for readonly.
2624 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
2625 sets the field to be not exported. @param noExport The new flag for noExport.
2626 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2627 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
2628 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
2629 Set the multiline bit. @param multiline The value for the multiline.
2630 Set the password bit. @param password The value for the password.
2631 Set the file select bit. @param fileSelect The value for the fileSelect.
2632 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
2633 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
2634 Set the comb bit. @param comb The value for the comb.
2635 Set the richText bit. @param richText The value for the richText.
2636 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
2637 Set the bold property of the text. @param bold The new bold flag.
2638 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
2639 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
2640 Set the locked flag. @param locked The new locked flag.
2641 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
2642 Set the noView flag. @param noView The new noView flag.
2643 Set the noRotate flag. @param noRotate The new noRotate flag.
2644 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
2645 Set the noZoom flag. @param noZoom The new noZoom flag.
2646 Set the hidden flag. @param hidden The new hidden flag.
2647 Set the invisible flag. @param invisible The new invisible flag.
2648 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
2649 Set the italic property of the text. @param italic The new italic flag.
2650 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
2651 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
2652 Adds the given node to the top of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
2653 Adds the given node to the bottom of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
2654 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
2655 Set the printed flag. @param printed The new printed flag.
2656 Set the readOnly flag. @param readOnly The new readOnly flag.
2657 Get the printed flag. @return The printed flag.
2658 This will get the line join style. @return null or the LJ value in the dictionary.
2659 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
2660 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
2661 This will return the precision or denominator of a fractional amount. @return the precision or denominator
2662 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
2663 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
2664 Get the noView flag. @return The noView flag.
2665 @return true if this node count is greater than zero, false otherwise.
2666 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
2667 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
2668 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
2669 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
2670 Get the noRotate flag. @return The noRotate flag.
2671 This will get the line cap style. @return null or the LC value of the dictionary.
2672 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
2673 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
2674 Gets the marked content identifier. @return the marked content identifier
2675 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
2676 Adds a class name. @param className the class name
2677 Updates the revision number for the given attribute object. @param attributeObject the attribute object
2678 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
2679 Get the invisible flag. @return The invisible flag.
2680 Get the LockedContents flag. @return The LockedContents flag.
2681 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
2682 Get the noZoom flag. @return The noZoom flag.
2683 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
2684 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
2685 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
2686 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
2687 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
2688 Get the toggleNoView flag. @return The toggleNoView flag.
2689 Get the locked flag. @return The locked flag.
2690 Get the readOnly flag. @return The readOnly flag.
2691 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
2692 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
2693 Pushes the given stream's resources, returning the previous resources.
2694 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
2695 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
2696 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
2697 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
2698 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
2699 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
2700 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
2701 Get the noRotate flag. @return The noRotate flag.
2702 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
2703 Returns the descendant CIDFont.
2704 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
2705 Get the printed flag. @return The printed flag.
2706 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
2707 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
2708 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
2709 Get the mac subtype. @return The mac subtype.
2710 Returns the role map. @return the role map
2711 @return true if the Filter is required
2712 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
2713 Determines if MultiSelect is set. @return true if multi select is allowed.
2714 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
2715 Get the hidden flag. @return The hidden flag.
2716 Adds the given page to this page tree. @param page The page to add.
2717 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
2718 Get the hidden flag. @return The hidden flag.
2719 Determines if radio button bit is set. @return true if type of button field is a radio button.
2720 Determines if push button bit is set. @return true if type of button field is a push button.
2721 @return true if the SubFilter is required
2722 @return true if the DigestMethod is required
2723 @return true if the V entry is required
2724 @return true if the Reason is required
2725 @return true if the LegalAttestation is required
2726 @return true if the AddRevInfo is required
2727 @return true if the Subject is required
2728 @return true if the Issuer is required
2729 @return true if the OID is required
2730 @return true if the Subject DN is required
2731 @return true if the KeyUsage is required
2732 @return true if the URL is required
2733 A flag telling if the text should be italic. @return The italic flag.
2734 A flag telling if the text should be bold. @return The bold flag.
2735 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
2736 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
2737 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
2738 Removes the given COS page.
2739 Get the mac Creator. @return The mac Creator.
2740 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
2741 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
2742 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
2743 Get the mac ResFork. @return The mac ResFork.
2744 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
2745 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
2746 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
2747 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
2748 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
2749 Get the invisible flag. @return The invisible flag.
2750 Get the readOnly flag. @return The readOnly flag.
2751 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
2752 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
2753 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
2754 Return the P value. @return the P value
2755 Get the noZoom flag. @return The noZoom flag.
2756 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
2757 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
2758 Get the locked flag. @return The locked flag.
2759 @return true if the field is required to have a value at the time it is exported by a submit-form action.
2760 Clips the given box to the bounds of the media box.
2761 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
2762 Get the toggleNoView flag. @return The toggleNoView flag.
2763 Adds an attribute object. @param attributeObject the attribute object
2764 Determines if Combo is set. @return true if value the choice is a combo box..
2765 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
2766 @return true if the field is readonly
2767 @return true if the field is not to be exported.
2768 Get the noView flag. @return The noView flag.
2769 @return true if the field is multiline
2770 @return true if the field is a password field.
2771 @return true if the field is a file select field.
2772 @return true if the field is not suppose to spell check.
2773 @return true if the field is not suppose to scroll.
2774 @return true if the field is not suppose to comb the text display.
2775 @return true if the field is a rich text field.
2776 @return true If the flag is set for radios in unison.
2777 A convenience method that sets the flag bit. @param flag The flag value.
2778 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
2779 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
2780 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
2781 Returns the page number for this destination, regardless of whether this is a page number or a reference to a page. @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem @return the 0-based page number, or -1 if the destination type is unknown.
2782 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
2783 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
2784 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
2785 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
2786 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
2787 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
2788 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
2789 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
2790 Creates a new instance of PageExtractor @param sourceDocument The document to split.
2791 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
2792 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
2793 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
2794 The count parameter needs to be updated when you add, remove, open or close outline items. @param delta The amount to update by.
2795 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
2796 A convenience method that sets the flag bit. @param flag The flag value.
2797 A convenience method that sets the flag bit. @param flag The flag value.
2798 A convenience method that sets the flag bit. @param flag The flag value.
2799 A convenience method that sets the flag bit. @param flag The flag value.
2800 A convenience method that sets the flag bit. @param flag The flag value.
2801 A convenience method that sets the flag bit. @param flag The flag value.
2802 A convenience method that sets the flag bit. @param flag The flag value.
2803 A convenience method that sets the flag bit. @param flag The flag value.
2804 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
2805 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
2806 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
2807 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
2808 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
2809 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
2810 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
2811 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
2812 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
2813 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
2814 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
2815 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
2816 Creates a cloudy border for a Circle annotation. The ellipse is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
2817 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
2818 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
2819 Notifies the attribute object change listeners about a change in this attribute object.
2820 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
2821 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
2822 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
2823 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
2824 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
2825 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
2826 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
2827 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
2828 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
2829 Removes the page with the given index from the page tree. @param index zero-based page index
2830 {@inheritDoc}
2831 {@inheritDoc}
2832 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
2833 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
2834 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
2835 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
2836 A convenience method that checks the flag bit. @return The flag value.
2837 A convenience method that checks the flag bit. @return The flag value.
2838 A convenience method that checks the flag bit. @return The flag value.
2839 A convenience method that checks the flag bit. @return The flag value.
2840 A convenience method that checks the flag bit. @return The flag value.
2841 A convenience method that checks the flag bit. @return The flag value.
2842 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
2843 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
2844 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
2845 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
2846 A convenience method that checks the flag bit. @return The flag value.
2847 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
2848 Removes the given page from the page tree. @param page The page to remove.
2849 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
2850 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
2851 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
2852 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
2853 A convenience method that checks the flag bit. @return The flag value.
2854 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
2855 A convenience method that checks the flag bit. @return The flag value.
2856 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2857 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2858 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2859 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2860 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2861 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2862 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2863 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2864 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
2865 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
2866 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
2867 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2868 {@inheritDoc}
2869 {@inheritDoc}
2870 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
2871 This method will attempt to find the page in this PDF document that this outline points to. If the outline does not point to anything then this method will return null. If the outline is an action that is not a GoTo action then this method will also return null. @param doc The document to get the page from. @return The page that this outline will go to when activated or null if it does not point to anything. @throws IOException If there is an error when trying to find the page.
2872 Each page of document can be different sizes. This method calculates the page size based on the page media box. @param document @param page The 1-based page number for which the page size should be calculated. @throws IllegalArgumentException if the page argument is lower than 0.
2873 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
2874 Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template Structure. @param page the page to be added @throws IOException if the document could not be created
2875 Creates a new PDFPageable. @param document the document to print
2876 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
2877 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
2878 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
2879 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
2880 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
2881 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
2882 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2883 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
2884 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
2885 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2886 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2887 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
2888 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2889 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
2890 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
2891 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
2892 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
2893 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
2894 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
2895 Attempts to find a good fallback based on the font descriptor.
2896 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
2897 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
2898 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
2899 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
2900 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
2901 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
2902 Initializes the stream engine for the given page.
2903 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
2904 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
2905 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
2906 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
2907 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
2908 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
2909 This will get the javascript that is executed before the import. @return Some javascript code.
2910 This will get the javascript that is executed after the import. @return Some javascript code.
2911 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2912 Load the ICC profile, or init alternateColorSpace color space.
2913 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
2914 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
2915 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
2916 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
2917 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
2918 Get all sample values of this function. @return an array with all samples.
2919 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
2920 Create a LayoutPage object from given PDPage object. @return @throws IOException
2921 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
2922 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
2923 @return The Javascript Code.
2924 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
2925 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
2926 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
2927 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
2928 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
2929 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
2930 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
2931 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
2932 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
2933 Creates a new font descriptor dictionary for the given TTF.
2934 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @return the appearance entry representing the normal appearance. @throws IOException
2935 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
2936 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
2937 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
2938 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
2939 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
2940 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
2941 Format the text block. @throws IOException if there is an error writing to the stream.
2942 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2943 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2944 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
2945 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
2946 Constructor. @param document Already created PDDocument of your PDF document. @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated.
2947 Constructor. @param document Already created PDDocument of your PDF document. @param imageStream Image as a stream. @param page The 1-based page number for which the page size should be calculated. @throws IOException If we can't read, flush, or can't close stream.
2948 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
2949 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
2950 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
2951 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
2952 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
2953 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
2954 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
2955 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
2956 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
2957 Get the fields rich text value. @return the rich text value string
2958 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
2959 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
2960 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
2961 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
2962 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
2963 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
2964 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
2965 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
2966 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2967 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
2968 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
2969 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
2970 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
2971 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
2972 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
2973 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
2974 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
2975 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. It will be uncompressed. @return the appearance entry representing the normal appearance. @throws IOException
2976 This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will be closed. This will do nothing if the node is already open.
2977 Close this node.
2978 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
2979 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
2980 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
2981 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
2982 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
2983 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
2984 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
2985 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
2986 Creates a new TrueType font for embedding.
2987 Calculate the interpolation. @return interpolated result sample
2988 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
2989 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
2990 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
2991 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
2992 Constructor. @param documentSource Original PDF document as RandomAccessRead @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
2993 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
2994 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
2995 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
2996 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
2997 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
2998 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
2999 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
3000 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
3001 Constructor. @param fontDictionary Font dictionary.
3002 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
3003 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
3004 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
3005 Build a PDF with a visible signature step by step, and return it as a stream. @param properties properties to be used for the creation @return InputStream stream containing the pdf holding the visible signature @throws IOException if the PDF could not be created
3006 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
3007 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
3008 Generate and insert text content and clipping around it.
3009 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
3010 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3011 Constructor. @param documentSource Original PDF document as RandomAccessRead @param imageStream Image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3012 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
3013 Constructor for reading. @param acroForm the AcroForm containing the fields.
3014 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
3015 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
3016 Creates a new TrueType font for embedding.
3017 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
3018 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
3019 Constructor. @param fontDictionary Font dictionary.
3020 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
3021 Constructor. @param filename Path of the PDF file @param imageStream image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3022 Constructor. @param filename Path of the PDF file @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
3023 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
3024 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
3025 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
3026 Creates a new PDFPrintable. @param document the document to print
3027 Returns an iterator which walks all fields in the tree, in order.
3028 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
3029 start building of visible signature @throws IOException if the output could not be written
3030 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3031 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3032 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
3033 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
3034 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
3035 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
3036 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
3037 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
3038 {@inheritDoc}
3039 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3040 {@inheritDoc}
3041 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
3042 {@inheritDoc}
3043 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
3044 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
3045 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3046 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
3047 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
3048 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
3049 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
3050 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3051 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3052 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3053 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3054 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
3055 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
3056 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
3057 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
3058 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
3059 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
3060 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
3061 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
3062 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
3063 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
3064 {@inheritDoc} The returned images are cached via a SoftReference.
3065 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
3066 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
3067 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
3068 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
3069 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
3070 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
3071 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
3072 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
3073 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
3074 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
3075 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
3076 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
3077 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3078 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
3079 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
3080 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
3081 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3082 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3083 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
3084 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3085 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3086 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
3087 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3088 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
3089 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
3090 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
3091 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
3092 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
3093 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
3094 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
3095 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
3096 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
3097 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
3098 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3099 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
3100 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
3101 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
3102 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
3103 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3104 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
3105 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
3106 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
3107 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3108 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
3109 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
3110 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
3111 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
3112 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
3113 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
3114 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
3115 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
3116 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
3117 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
3118 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
3119 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
3120 Constructs and sets new contents for given appearance stream.
3121 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3122 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
3123 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
3124 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
3125 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
3126 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
3127 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
3128 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
