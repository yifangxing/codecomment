1 Default constructor for the OperatorName class.
2 Initializes the OperatorProcessor with a PDFStreamEngine context. @param context The PDFStreamEngine providing the processing context.
3 Protected constructor. Provides a default initialization.
4 Initializes the COSUpdateState with the provided update info. @param updateInfo The COSUpdateInfo object containing update details.
5 Default constructor. Initializes the DecodeOptions object.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion Region of the image to decode.
7 Creates a DecodeOptions object with specified subsampling. @param subsampling Subsampling factor for both X and Y directions.
8 Protected default constructor. Initializes a new Filter object.
9 Constructs a PageExtractor with source document and page range. @param sourceDocument PDF document to extract pages from @param startPage Starting page number (inclusive) @param endPage Ending page number (inclusive)
10 Constructs an AbstractXReference with the given reference type. @param type The type of the XReference.
11 Initializes the ContentStreamWriter with the provided output stream. @param out The output stream to write to.
12 Creates a resource cache instance with stable caching enabled. @param enableStableCache flag to enable stable caching
13 Constructs a `PDDocumentCatalog` with a document and root dictionary.
14 Initializes the PDDocumentInformation with a COSDictionary. @param dic The COSDictionary containing document information.
15 Initializes the dictionary with a COSDictionary. @param dict The COSDictionary containing destination names.
16 Constructs a `PDDocumentNameDictionary` with a catalog and name dictionary. @param cat The document catalog. @param names The name dictionary.
17 Constructs a PDPage with the given COSDictionary. @param pageDictionary The COSDictionary representing the page.
18 Constructs a PDPage instance with a page dictionary and resource cache. @param pageDictionary Page dictionary for the page. @param resourceCache Resource cache to use.
19 Initializes the wrapper with a COSDictionary object. @param dictionary The COSDictionary to wrap.
20 Creates a `PDNameTreeNode` from a COSDictionary. @param dict The COSDictionary representing the node.
21 Initializes a `PDPageLabelRange` object from a COSDictionary. @param dict The COSDictionary containing page label information.
22 Initializes PDRange with a COSArray representing the range. @param range The COSArray containing the range data.
23 Constructs a PDRange with a COSArray and starting index. @param range The COSArray representing the range. @param index The starting index of the range.
24 Initializes a PDStream object with a COSStream. @param str the COSStream to wrap
25 Initializes a PDMarkInfo object with the provided COSDictionary. @param dic The COSDictionary containing marking information.
26 Initializes a `PDMarkedContentReference` with a COSDictionary. @param dictionary The COSDictionary containing reference data.
27 Initializes a PDObjectReference with the provided COSDictionary. @param theDictionary The COSDictionary this reference is associated with.
28 Constructs a `PDStructureNode` with the given COS dictionary. @param dictionary The COS dictionary for this node.
29 Default constructor. Initializes a new Revisions object.
30 Initializes a PDPropertyList with the given COSDictionary. @param dict The COSDictionary associated with the property list.
31 Constructs a `PDBoxStyle` from a `COSDictionary`. @param dic The `COSDictionary` containing style attributes.
32 Default constructor. Initializes the permission object.
33 Creates an `AccessPermission` object with specified permission bits. @param permissions Integer representing permission bits.
34 Initializes the dictionary with a provided COSDictionary. @param d The COSDictionary to use for initialization.
35 Default constructor. Initializes the salt array for RC4 cipher.
36 Constructs an FDFAnnotation from a COSDictionary. @param a The COSDictionary representing the annotation.
37 Constructs a new FDFCatalog with the given catalog dictionary. @param cat The COSDictionary representing the FDF catalog.
38 Initializes the FDF dictionary with a COSDictionary. @param fdfDictionary The COSDictionary to use.
39 Constructs a FDFField object from a COSDictionary. @param f The COSDictionary representing the field.
40 Initializes FDFIconFit with a COSDictionary for icon fitting data. @param f The COSDictionary containing fitting information.
41 Initializes FDFJavaScript with a COSDictionary. @param javaScript The COSDictionary containing JavaScript data.
42 Initializes a `FDFNamedPageReference` with a COS dictionary. @param r The COS dictionary representing the reference.
43 Creates a new FDFOptionElement from a COS array. @param o The COS array representing the option.
44 Constructs a FDFPage with the given COSDictionary. @param p The COSDictionary representing the page data.
45 Constructs a FDFPageInfo with the given COSDictionary. @param p The COSDictionary containing page information.
46 Initializes the FDFTemplate with a COSDictionary. @param t The COSDictionary representing the template.
47 Initializes a PDFontDescriptor with a COSDictionary. @param desc The COSDictionary containing font descriptor data.
48 Initializes PDFontSetting with a font setting array. @param fs COSArray representing the font settings.
49 Default constructor. Initializes the dash pattern with an empty array and phase 0.
50 Creates a PDColor instance with a pattern and color space. @param patternName Color pattern name. @param colorSpace Associated color space.
51 Initializes PDDeviceNAttributes with the provided COSDictionary. @param attributes COSDictionary containing device-n attributes
52 Initializes PDDeviceNProcess with the provided attributes dictionary. @param attributes COSDictionary containing device color space attributes
53 Creates a PDGamma object from a COSArray. @param array COSArray containing gamma values.
54 Initializes a PDTristimulus object with tristimulus values from a COSArray.
55 Initializes the attributes with a COSDictionary. @param dic The COSDictionary to use for initialization.
56 Initializes the PDOptionalContentProperties with a COSDictionary. @param props The COSDictionary containing optional content properties.
57 Constructs a PDAbstractPattern from a COSDictionary. @param dictionary The COSDictionary containing pattern data.
58 Initializes PDShading with a shading dictionary. @param shadingDictionary The shading dictionary to use.
59 Constructs a `PDExtendedGraphicsState` with a dictionary and resource cache. @param dictionary COSDictionary containing extended graphics state data. @param resourceCache Resource cache for managing resources.
60 Constructs a PDSoftMask with a dictionary and resource cache. @param dictionary COSDictionary for mask properties. @param resourceCache Resource cache for accessing resources.
61 Initializes a Paragraph object with the given text content. @param text The text content of the paragraph.
62 Creates a Word object with the given text content. @param text The text content of the word.
63 Constructs a PDAction with the given COSDictionary. @param a The COSDictionary representing the action.
64 Private constructor to prevent instantiation. Utility class.
65 Initializes PDAdditionalActions with a COSDictionary. @param a The COSDictionary containing action data.
66 Initializes the object with the provided COSDictionary. @param a The COSDictionary containing action definitions.
67 Initializes the object with the provided COSDictionary. @param a The COSDictionary containing action data.
68 Initializes the object with the provided COSDictionary. @param a The COSDictionary containing form field actions.
69 Initializes the PDPageAdditionalActions with a COSDictionary. @param a The COSDictionary containing the actions.
70 Constructs a PDTargetDirectory from a COSDictionary. @param dictionary COSDictionary containing target directory data.
71 Initializes the PDURIDictionary with a COSDictionary. @param dictionary The COSDictionary to use.
72 Initializes a PDWindowsLaunchParams object with a COSDictionary. @param p The COSDictionary containing launch parameters.
73 Initializes the dictionary with a COSDictionary object. @param dict The COSDictionary to use for appearance characteristics.
74 Initializes the PDAppearanceDictionary with a COSDictionary. @param dictionary The COSDictionary to use for appearance data.
75 Creates a PDAppearanceEntry from a COSDictionary. @param entry The COSDictionary representing the appearance entry.
76 Initializes the PDBorderEffectDictionary with a COSDictionary. @param dict The COSDictionary to use for border effect properties.
77 Initializes a PDBorderStyleDictionary with a COSDictionary. @param dict The COSDictionary containing border style properties.
78 Initializes the external data dictionary with a COSDictionary. @param dictionary The COSDictionary to use.
79 Constructs a CloudyBorder with provided stream, intensity, width, and rectangle.
80 Initializes a PDPropBuild object with a COSDictionary. @param dict The COSDictionary to associate with this builder.
81 Initializes the dictionary with the provided COSDictionary. @param dict The COSDictionary to wrap.
82 Constructs a PDSeedValue from a COSDictionary. @param dict The COSDictionary containing seed value data.
83 Constructs a `PDSeedValueCertificate` from a COSDictionary. @param dict The COSDictionary containing certificate data.
84 Constructs a PDSeedValueMDP with the given COSDictionary. @param dict The COSDictionary to use for the seed value.
85 Initializes the PDSeedValueTimeStamp with a COSDictionary. @param dict The COSDictionary to associate with this object.
86 Initializes a PDSignature object with the provided COSDictionary. @param dict The COSDictionary containing signature data.
87 Default constructor. Initializes the signature options with a default page number.
88 Initializes PDFTemplateCreator with a PDFTemplateBuilder. @param templateBuilder Builder for PDF template structure.
89 Private constructor, prevents instantiation of the utility class.
90 Constructs a PDField with an AcroForm, field dictionary, and parent.
91 Initializes PDXFAResource with an XFA base object. @param xfaBase The COS base object representing the XFA resource.
92 Initializes a PDMeasureDictionary with the given COSDictionary. @param dictionary The COSDictionary to associate with this object.
93 Initializes the dictionary with a COSDictionary. @param dictionary The COSDictionary to use.
94 Constructs a PDViewportDictionary with the given COSDictionary. @param dictionary The COSDictionary to wrap.
95 Initializes a PDThread object with a COSDictionary. @param t The COSDictionary representing the thread.
96 Initializes a PDThreadBead with the provided COSDictionary. @param b The COSDictionary representing the bead.
97 Initializes PDViewerPreferences with a COSDictionary. @param dic The COSDictionary containing viewer preferences.
98 Constructs a `PageDrawerParameters` object with the given settings. @param renderer PDF renderer @param page The PDF page to render
99 Default constructor. Initializes a LineItem with null textPosition.
100 Default constructor. Initializes the transformation matrix.
101 Creates a Matrix from a float array. @param src The float array to initialize the matrix.
102 Creates a 3x3 transformation matrix with specified values. @param a, b, c, d, e, f matrix elements
103 Private constructor, prevents external instantiation of XMLUtil.
104 Protected constructor for PDFStreamEngine. No arguments.
105 Adds an operator to the operator map. @param op The operator processor to add.
106 Sets the terminator character for ASCII85 encoding. @param term Terminator character (118-126, excluding 'z') @throws IllegalArgumentException if term is invalid.
107 Sets the split page. @param split The page number to split the PDF at.
108 Sets the starting page for splitting. @param start The starting page number (must be > 0).
109 Sets the end page for splitting. @param end The ending page number. Must be greater than 0.
110 Sets lenient parsing mode. Throws exception if parsing is done. @param lenient boolean value indicating lenient mode
111 Creates CompressParameters with specified object stream size. @param objectStreamSize Size of the object stream in bytes.
112 Sets the blend mode to the provided value. @param blendMode The blend mode to set; null is not allowed.
113 Creates a PDFieldTree for the given PDAcroForm. @param acroForm The form to build the tree from. @throws IllegalArgumentException if acroForm is null.
114 Gets the length of the stream. Throws exception if stream is open.
115 Default constructor. Initializes the PDFMergerUtility object.
116 Initializes the COSWriterObjectStream with a compression pool. @param compressionPool COSWriterCompressionPool instance
117 Initializes the list to store text clipping areas.
118 Adds a PDF source file to the list of files to be merged. @param source The PDF file to add as a source.
119 Adds a PDF source to the list of files to be merged. @param source The RandomAccessRead PDF source to add.
120 Adds a name to the instruction sequence. @param name The name to add as an instruction.
121 Adds a child instruction sequence to the instruction list. @param child The instruction sequence to add.
122 Adds a public key recipient to the managed collection. @param recipient The recipient to add.
123 Adds a region with a name and rectangle to the collection. @param regionName Name of the region. @param rect Rectangle defining the region's area.
124 Sets the trailer dictionary for the current cross-reference trailer object. @param trailer The COSDictionary representing the trailer.
125 Retrieves a COSBase object from the key pool. @param key The key identifying the COSBase object. @return The COSBase object associated with the key.
126 Retrieves an operator by its name. @param operatorName Name of the operator to retrieve. @return Operator object or null if not found.
127 Maps a Unicode sequence to a glyph name. @param unicodeSequence Unicode sequence to map. @return Glyph name or ".notdef" if not found.
128 Retrieves the top graphics state from the graphics stack. @return The current graphics state, or null if empty.
129 Restores the graphics state from the stack. Pops the last graphics state from the graphics stack.
130 Returns the current size of the graphics stack.
131 Transforms a point (x, y) using the transformation matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
132 Decrements the level. Logs an error if level becomes negative.
133 Adds an integer value to the instruction sequence. @param value The integer to add.
134 Throws IOException if stream is closed. Checks if stream is usable.
135 Throws an IOException to indicate reset functionality is unsupported.
136 Throws an IOException, indicating that resetting the stream is unsupported.
137 Returns the document's encryption details. Throws IOException if the document hasn't been parsed.
138 Gets the AccessPermission object. Throws IOException if the document hasn't been parsed.
139 Constructs an InvalidPasswordException with a custom error message. @param message The error message describing the invalid password.
140 Creates an Operator object. @param aOperator The operator string. Throws exception if starts with "/".
141 Returns a string representation of the PDF operator.
142 Returns a string representation of the COSArray.
143 Returns a string representation of this COSObject. Includes the object's key for identification.
144 Retrieves a filter by name. @param filterName Name of the filter to retrieve. @return The filter object or throws IOException if not found.
145 Adds a real number (float) to the instruction sequence. @param value The float value to add.
146 Sets the visible signature width. @param width The width of the signature in points. @return This PDVisibleSignDesigner object.
147 Sets the visible signature height. @param height The height of the signature in pixels. @return This PDVisibleSignDesigner object.
148 Calculates the distance between two points. @param ps Starting point. @param pe Ending point. @return Distance between the points.
149 Calculates the edge equation value at a point. @param p Point to evaluate. @param p1 First point defining the edge. @param p2 Second point defining the edge.
150 Constructs a `PDMarkedContent` object with a tag and properties. @param tag The tag associated with the content. @param properties COS dictionary holding content properties.
151 Returns the type name, which is "PATTERN".
152 Returns the type name, which is always "Shading".
153 Returns the default value of the button. Returns "" if no default value is set.
154 Unchecks the checkbox, setting its value to 'Off'.
155 Checks if the white point is (1, 1, 1). Uses Float.compare.
156 Calculates the color table for axial shading. Returns an integer array representing the color map.
157 Calculates the color table for radial shading. Returns an integer array representing color values.
158 Creates a code table for LZW compression/decompression. Initializes with INITIAL_CODE_TABLE. Returns a List<byte[]>
159 Retrieves a COSBase object at the specified index. @param index index of the object to retrieve @return COSBase object at the given index
160 Retrieves the element at the specified index. @param index the index of the element to retrieve @return the element at the given index
161 Returns the number of objects in this COSArray.
162 Returns the number of elements in this COSArrayList.
163 Returns the number of public key recipients.
164 Checks if the array is empty. Delegates to the internal list.
165 Checks if the list is empty. Delegates to the underlying list's isEmpty() method.
166 Removes a recipient from the list. @param recipient The recipient to remove. @return True if the recipient was removed.
167 Returns an iterator for the collection of COSBase objects.
168 Returns an iterator for this collection, delegating to actual.
169 Returns an iterator to traverse the list of recipients.
170 Converts the COSArray's objects to a List. Returns a new ArrayList.
171 Converts COS objects to a list of their names as strings.
172 Converts COS objects to a list of strings. @return List of strings extracted from COS objects.
173 Creates a COSBoolean from a Java Boolean object. @param value The Java Boolean value to wrap. @return A COSBoolean representing the input value.
174 Returns the String representation of the boolean value.
175 Writes the boolean value to the output stream as PDF bytes. @param output the output stream to write to
176 Writes the PDF null bytes to the given output stream. @param output Output stream to write to.
177 Writes a byte array to the output stream. @param data The byte array to write. @throws IOException If an I/O error occurs.
178 Returns a set view of the dictionary's key-value mappings.
179 Checks if a property entry has changed. Returns true if oldEntry is null or not equal to newEntry.
180 Returns the number of items in the dictionary.
181 Retrieves a value from the dictionary using the provided key. @param key The key to look up in the dictionary. @return The COSBase value associated with the key.
182 Returns a set view of the dictionary's keys.
183 Returns a collection of all values stored in the dictionary.
184 Adds all entries from another COSDictionary to this one. @param dict The COSDictionary whose entries to add.
185 Checks if the dictionary contains the given key. @param name The key to check for. @return True if the key exists, false otherwise.
186 Splits a string into tokens based on space delimiters. @param s The string to tokenize. @return An array of string tokens.
187 Parses a string token as a signed decimal integer. @param token String to parse @return Parsed integer value
188 Returns a string representation of the function type.
189 Sets the encryption key length to 40, 128, or 256. @param l the desired encryption key length
190 Sets the starting page for text extraction. @param startPageValue The 1-based starting page number.
191 Sets the ending page for text extraction. @param endPageValue The ending page number (1-based).
192 Initializes the parser with a COSDocument and COSParser. @param cosDocument The PDF document to parse. @param cosParser The parser for COS objects.
193 Default constructor. Sets the xref type to XRefType.TABLE.
194 Creates a new XrefTrailerObj with default XRefType TABLE.
195 Constructs PDResources with a COSDictionary. @param resourceDictionary Dictionary containing resource data. @throws IllegalArgumentException if resourceDictionary is null.
196 Constructs a PDResources object. @param resourceDictionary COSDictionary for resources @param resourceCache Resource cache to use
197 Initializes the Operators class by populating the operator map.
198 Constructs a PDAcroForm with a document and form dictionary. @param doc The parent document. @param form The form dictionary.
199 Returns the number of cross-reference entries.
200 Retrieves a COSObject from the object pool by key. @param key COSObjectKey to look up; creates object if absent. @return COSObject or null if key is null.
201 Parses a string token as a float. @param token The string to parse. @return The parsed float value.
202 Coerces a float value to a valid PDF representation. Handles infinity and values smaller than Float.MIN_NORMAL.
203 Returns the text direction (0, 90, 180, or 270). Calculates direction based on transformation matrix.
204 Checks if two COSFloat objects are equal based on their float values.
205 Computes the hash code based on the float value.
206 Formats the float value to a string, handling exponential notation.
207 Writes a COS null object to the output stream. Uses ISO-8859-1 encoding for the "null" string.
208 Initializes COSIncrement with the provided update origin. @param incrementOrigin COSUpdateInfo object representing origin
209 Initializes the utility with a destination PDF document. @param dest The destination PDDocument for cloning.
210 Constructs a DefaultResourceCache with stable cache enabled. @param enableStableCache flag to enable/disable stable caching
211 Checks if the COS object needs updating. Uses the internal update state to determine this.
212 Checks if the collection or processed objects contains the base. @param base The COSBase object to search for. @return True if found, false otherwise.
213 Checks if a COSBase object is excluded from processing. @param base The COSBase object to check. @return True if excluded, false otherwise.
214 Adds a COSBase object to the internal collection. @param object The COSBase object to add, null is ignored.
215 Adds a processed COSObject to the collection, if not null. @param base The COSObject to add.
216 Registers a TrueType font to be closed later. @param ttf The TrueTypeFont object to register.
217 Initializes the ASCII85InputStream with an InputStream. @param is The input stream to read ASCII85 encoded data from.
218 Creates a CCITTFaxDecoderStream with specified parameters. @param stream Input stream for fax data. @param columns Number of columns in the image.
219 Checks if two COSInteger objects have the same integer value.
220 Returns a string representation of this COSInteger object.
221 Writes the integer value as an ISO-8859-1 encoded string. @param output Output stream to write to.
222 Retrieves the value associated with the given key. @param key the key to look up @return the value or null if the key is not found
223 Returns the mapped FontName for the given font name. @param fontName Font name to map. @return Mapped FontName or null if not found.
224 Retrieves selected export values. Returns all if none are selected.
225 Checks if the COS name is empty. Delegates to String.isEmpty().
226 Adds a comment to the output stream. @param comment The comment string to add. @throws IllegalArgumentException if comment contains newline.
227 Writes a newline character to the output stream.
228 Converts a string to a UTF-16BE hexadecimal char array. @param text String to convert. @return Hexadecimal char array representation of the string.
229 Dereferences the COS object and returns the base object. Returns null if dereferencing fails.
230 Constructs a COSObjectKey with number, generation, and stream index. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative) @param index Stream index associated with the object key
231 Calculates hash code based on the combined number and generation.
232 Returns the scaling factor X. Handles rotation-induced complexities.
233 Returns the vertical scaling factor. Uses sqrt if single[3] != 0.
234 Constructs an ASCII85OutputStream with the given OutputStream. @param out the OutputStream to write to
235 Initializes the COSStandardOutputStream with the given OutputStream.
236 Creates a COSStandardOutputStream with specified output stream and position. @param out the output stream @param position the current writing position
237 Returns a copy of the internal byte array.
238 Writes the existing PDF and incremental update to the output. Uses RandomAccessInputStream for transfer and ByteArrayOutputStream.
239 Returns the string representation using US-ASCII encoding.
240 Checks if the origin document is accepting updates. Returns true if the origin document state is not null.
241 Converts a byte array to a String, handling encoding. Uses CODE_TO_UNI for character mapping, defaulting to '?' if out of range.
242 Reads a PDF operator from the input source. Returns the operator string or empty string if EOF.
243 Converts a string to a byte array using the character mapping. @param text The string to convert. @return Byte array representation of the string.
244 Checks if a character exists in the Unicode to code mapping.
245 Checks if the map contains the specified key. @param key the key to check @return true if the map contains the key, false otherwise
246 Checks if the ALIASES map contains the given font name. @param fontName The font name to check. @return True if the font name exists, false otherwise.
247 Returns an unmodifiable map of code to name mappings.
248 Returns an unmodifiable map of name to code mappings.
249 Throws an exception, as setting needToBeUpdated is unsupported.
250 Reads a single byte from the ASCII85 encoded stream. Returns -1 if end of stream is reached.
251 Closes the input stream, releasing resources.
252 Writes a byte to the output stream, encoding it as ASCII85. @param b The byte to be written.
253 Flushes the buffer to the output stream, encoding data as ASCII85. Handles line breaks and writes a terminator sequence.
254 Truncates or pads a password to a fixed length. @param password the password to truncate or pad @return padded password byte array
255 Closes the content stream, logs warning if endText() is missing.
256 Imports XMP metadata from a byte array into the document. @param xmp XMP metadata as a byte array. @throws IOException if an I/O error occurs.
257 Checks if the document should be split at the given page. @param pageNumber The page number to check. @return True if split is needed, false otherwise.
258 Throws an exception as modification is not supported.
259 Throws an exception, as this instance is immutable and cannot be modified.
260 Throws an exception, as subsamplingY cannot be modified.
261 Throws an exception as this instance is immutable.
262 Throws an exception as subsampling offset Y is immutable.
263 Throws an UnsupportedOperationException, encoding not implemented.
264 Throws an exception as the class is immutable.
265 Throws an exception as the class is immutable.
266 Throws an exception as the class is immutable.
267 Throws an exception as the class is immutable.
268 Returns the signature text. Currently throws an exception.
269 Throws an UnsupportedOperationException, signature text not implemented.
270 Throws an exception; String values aren't supported. Use setValue(PDSignature).
271 Gets the compression level from system property, else default. Parses property, handles exceptions, and limits the value.
272 Checks if the list contains the specified object. @param o The object to search for. @return True if found, false otherwise.
273 Initializes the decoder with an input stream, skipping the zlib header. @param inputStream Input stream for compressed data. @throws IOException If an I/O error occurs.
274 Ends the zlib decompression and closes the superclass.
275 Sets the signature image and updates related dimensions. @param image The BufferedImage to set as the signature image.
276 Decodes a predictor row based on the predictor type. @param predictor Predictor type. @param colors Number of colors.
277 Checks if a COS object with the given key exists in the pool. @param key The COSObjectKey to check for. @return True if the key exists, false otherwise.
278 Checks if the encoding contains a given name. @param name The name to check for. @return True if the name exists, false otherwise.
279 Checks if a given code exists in the code-to-name mapping. @param code The integer code to check for existence. @return True if the code exists, false otherwise.
280 Escapes a string for inclusion in an XML document. Handles special characters like <, >, ", &, and \'.
281 Sets the bounding box of the XObject. Null value removes it. @param bbox The rectangle representing the bounding box.
282 Decodes a hexadecimal string into a byte array. Handles \\n and \\r characters. Returns byte array.
283 Closes the PDF document, releasing resources and handling exceptions.
284 Closes the COSDocument and associated resources, handling exceptions.
285 Returns the underlying COSDictionary object. Returns stream dict if available, otherwise the dictionary.
286 Constructs a PDXObject with a stream and subtype. @param stream The underlying PDF stream. @param subtype The subtype of the XObject.
287 Returns the underlying COSStream object representing the stream.
288 Retrieves the metadata stream from the underlying COSStream.
289 Sets the metadata for the color space. @param metadata COSStream containing the metadata.
290 Checks if this annotation is equal to another based on COSDictionary. @param o The object to compare with. @return True if equal, false otherwise.
291 Returns the set of keys from the underlying 'actuals' map.
292 Returns a collection of the map's values.
293 Initializes the BaseParser with a PDF source. @param pdfSource RandomAccessRead object representing PDF source.
294 Checks if the next character is a digit. Uses peek() to look ahead without consuming.
295 Adds an XRef entry to the xref table, avoiding overwrites. @param objKey COSObjectKey for the entry. @param offset Offset value for the entry.
296 Adds a code-to-name mapping and updates the inverted index. @param code The font code. @param name The corresponding name.
297 Checks if the next character is a whitespace character.
298 Skips a line break character (CR, LF, or CRLF). @param linebreak The line break character to skip. @return True if line break was skipped, false otherwise.
299 Checks for end of string based on next bytes. @param bracesParameter Remaining braces count. @return 0 if end of string, otherwise bracesParameter.
300 Checks if the character is an end-of-line character (LF or CR). @param c The character to check. @return True if the character is EOL, false otherwise.
301 Reads a string representing a number from the source. Throws IOException if the number exceeds MAX_LENGTH_LONG.
302 Decodes a buffer, using UTF-8 or an alternative charset. @param buffer The byte array buffer to decode. @return Decoded string representation of the buffer.
303 Reads a character from the source and verifies it matches expectedChar.
304 Checks if the next character is whitespace. Delegates to isWhitespace(char) for actual check.
305 Parses the startXref offset from the PDF stream. @return Offset of the first object or -1 if not found.
306 Searches for the last EOF marker in the PDF source. Returns marker position or Long.MAX_VALUE if not found.
307 Finds offsets of XRef tables in the PDF source. Returns a list of Long offsets.
308 Returns the number of color components. Caches the value.
309 Finds offsets of XRef streams within the PDF source. @return List of Long offsets to XRef streams.
310 Returns the cross-reference table from the resolver.
311 Finds the startxref offset by parsing the trailer bytes. @return Offset of the startxref location. @throws IOException if parsing fails.
312 Reads stream until "endstream" keyword is found. Returns length of filtered content.
313 Default constructor. Initializes the writer with default mode.
314 Sets a label range for a specific start page. @param startPage The starting page index. @param item The PDPageLabelRange to set.
315 Adds a CID-to-Unicode mapping. @param cid Character identifier (0-65535) @param text Unicode string representation
316 Checks if the stream has no following binary data. Uses a test array to determine binary data presence.
317 Checks if the next character is whitespace. @return True if the next character is whitespace.
318 Adds a cross-reference entry if its object number is new. @param entry The XReferenceEntry to add.
319 Calculates column widths based on XRefStream entries. Returns an array representing the calculated widths.
320 Constructs a COSObjectPool with a specified highest cross-reference number. @param highestXRefObjectNumber The highest cross-reference object number.
321 Gets the first trailer from the xref table. Returns null if the xref table is empty.
322 Gets the trailer dictionary from the last Xref offset. Returns null if bytePosToXrefMap is empty.
323 Gets object numbers contained within the xref table. @param objstmObjNr The object stream object number. @return A set of object numbers or null if xref is null.
324 Returns the numeric value of the reference type.
325 Returns the generation number from the referenced key.
326 Returns a string representation of the FreeReference object.
327 Returns the byte offset of the referenced object.
328 Returns the generation number of the referenced object.
329 Returns a string representation of the NormalXReference object.
330 Returns the number from the parent COS object's key.
331 Returns the object stream index for the third column value.
332 Returns a string representation of this ObjectStreamEntry.
333 Writes data to the output stream, preventing new line. @param b The byte array to write. @param off Offset from where to start writing. @param len Number of bytes to write.
334 Writes a byte to the output stream and increments the position.
335 Writes a carriage return and line feed if not already on a new line.
336 Checks if object stream compression is enabled. Returns true if compression parameters are present and enabled.
337 Adds an XRefEntry to the list of cross-reference entries. @param entry The XReferenceEntry to add.
338 Writes an indirect object reference to the output stream. @param output output stream to write to @param indirectReference COS object key
339 Gets an MD5 MessageDigest instance. @return MD5 MessageDigest or throws RuntimeException.
340 Returns a SHA-1 MessageDigest instance. Throws RuntimeException if SHA-1 is unavailable.
341 Returns a SHA-256 MessageDigest instance. Throws RuntimeException if SHA-256 is unavailable.
342 Returns the highest cross-reference object number from pool.
343 Returns a list of prepared keys. The list is unmodifiable.
344 Overwrites a code-to-name mapping, removing the reverse if needed. @param code The integer code to overwrite. @param name The new name associated with the code.
345 Removes a region and its area from the collection. @param regionName Name of the region to remove.
346 Sets the maximum fraction digits for number formatting. @param fractionDigitsNumber Maximum fraction digits to set.
347 Initializes the content stream with document, output stream, and resources.
348 Gets the vertical displacement vector Y for a CID code. @param code CID code to look up. @return The vertical displacement vector Y value.
349 Returns standardValue if not null, otherwise returns defaultValue.
350 Zooms the signature image. @param percent Zoom percentage (e.g., 100 for no change) @return PDVisibleSignDesigner instance, for chaining.
351 Returns the width of the signature image.
352 Returns the height of the signature image.
353 Adjusts signature appearance based on page rotation. Updates affine transform and image dimensions as needed.
354 Creates an AffineTransform from the matrix elements.
355 Encodes a string into a byte array using the font's encoding. @param text The string to encode. @return Byte array representation of the encoded string.
356 Converts a code point to its glyph name, or ".notdef" if not found. @param codePoint integer representing a Unicode code point @return String glyph name
357 Applies GSUB rules, converts characters to glyph IDs, and writes them. @param gsubWorker Applies transformations to glyph IDs. @param out Output stream for writing glyph IDs.
358 Constructs a PDDocument from a COSDocument and source. @param doc The COSDocument to represent. @param source Source for reading the PDF. @param permission Access permission for the document.
359 Constructs a FDFDocument from a COSDocument and source. @param doc The COSDocument to use. @param source The RandomAccessRead source.
360 Converts this list to an array. @return An array of objects representing the list elements.
361 Returns the index of the first occurrence of the object.
362 Checks if this list equals another object. @param o The object to compare with. @return True if the lists are equal, false otherwise.
363 Returns the hash code value, delegated to the underlying list.
364 Returns the last index of the specified object. @param o object to search for
365 Returns a list iterator for the elements in this list.
366 Returns a list iterator over the elements, starting at the given index.
367 Returns a view of the list from fromIndex (inclusive) to toIndex (exclusive).
368 Checks if the COSDictionaryMap contains the specified value. @param value the value to search for @return true if the value is present, false otherwise
369 Returns a view of the map entries as an unmodifiable set.
370 Returns a set of font aliases. Uses unmodifiable view.
371 Returns a string representation of the internal map.
372 Converts a COSBase object to a PDNumberTreeNode. @param base The COSBase object to convert. @return A COSObjectable representing the converted value.
373 Generates a letter-based label (e.g., "AA") for a given number.
374 Returns the number of page ranges defined.
375 Retrieves a PDPageLabelRange object for the specified start page. @param startPage The starting page index. @return PDPageLabelRange object for the given start page.
376 Returns a navigable set of page indices represented by labels.
377 Returns a copy of the dash pattern array.
378 Creates a PDColor instance with given components and color space. @param components Color components (cloned). @param colorSpace The color space for the color.
379 Returns the color components. Clones or copies based on color space.
380 Creates a CoordinateColorPair with given coordinate and color. @param p the coordinate @param c the color values
381 Returns a string representation of the FunctionType2 object.
382 Calculates the bounding box of the triangle. Returns an int array representing the boundary coordinates.
383 Pops a number from the stack. Returns null if stack is empty.
384 Pops the integer value from the stack. Returns null if the stack is empty.
385 Pops a real number from the stack and returns it as a float.
386 Adds a boolean value to the instruction sequence. @param value The boolean value to add.
387 Constructs an ExecutionContext with the given operator set. @param operatorSet The set of PDF operators to handle.
388 Returns a list of patterns for extracting list items. Lazily initializes the list if it's null.
389 Converts an object array to a comma-separated string. Uses StringJoiner for efficient string concatenation.
390 Converts a float array to a comma-separated string.
391 Adds a text element at a specified position. @param text The text element to add.
392 Adds a marked content element to the content list. @param markedContent The marked content to add.
393 Adds an XObject to the content list. @param xobject The XObject to add.
394 Sets the print permission if not in read-only mode. @param allowPrinting True to allow printing, false otherwise.
395 Sets the modification permission if not read-only. @param allowModifications True to allow modifications.
396 Sets the content extraction permission if not in read-only mode. @param allowExtraction True to allow, false to disallow.
397 Sets/clears the permission to modify annotations. Only applies if the document is not read-only.
398 Sets/clears the permission to fill in the form. @param allowFillingInForm True to allow, false to disallow.
399 Sets EXTRACT_FOR_ACCESSIBILITY_BIT if not read-only. @param allowExtraction True to allow, false to disallow.
400 Sets the canAssembleDocument permission bit if not read-only. @param allowAssembly True to allow assembly, false otherwise.
401 Sets the faithful printing permission if not read-only. @param canPrintFaithful True to allow faithful printing.
402 Checks if the PDF document allows printing. Uses isPermissionBitOn to determine print permission.
403 Checks if modification permission is enabled. Uses `isPermissionBitOn` to determine modification access.
404 Checks if content extraction is permitted. Uses isPermissionBitOn to determine extraction rights.
405 Checks if annotation modification is permitted. Uses `isPermissionBitOn` to determine permission status.
406 Checks if the form filling permission bit is enabled. Returns true if enabled, false otherwise.
407 Checks if content extraction for accessibility is allowed. Uses isPermissionBitOn to determine permission status.
408 Checks if the document assembly permission is enabled. Uses `isPermissionBitOn` to determine the bit's status.
409 Checks if the faithful printing permission is enabled. Returns true if enabled, false otherwise.
410 Retrieves the private key from the keystore using alias or first alias. @throws KeyStoreException if key not found or unrecoverable.
411 Returns a SecureRandom instance, using custom if provided.
412 Initializes the cipher with a key. @param key encryption key, length between 1 and 32 bytes
413 Encrypts a byte using RC4 and writes it to the output stream. @param aByte The byte to encrypt. @param output The output stream to write to.
414 Combines diacritic characters, returning a normalized string. Uses DIACRITICS map; normalizes if not found.
415 Checks if a codepoint is prohibited for SASL use. Returns true if any of the tagging checks fail.
416 Calculates the version number based on key length and AES preference.
417 Returns the singleton BouncyCastle security provider. Lazily initializes if not already present.
418 Extracts text content from a given XML element node. @param node The XML element to extract text from. @return String containing the concatenated text content.
419 Writes the given string to the output stream.
420 Retrieves a predefined CMap by name, caching it for reuse. @param cMapName Name of the CMap to retrieve. @return CMap object or null if not found.
421 Parses a CMap from the provided RandomAccessRead. @param randomAccessRead Input stream for CMap data. @return Parsed CMap object, or null if input is null.
422 Generates a set of PostScript names, including variations. @param postScriptName The initial PostScript name. @return A set of PostScript names.
423 Calculates a set of points representing a line between (x0, y0) and (x1, y1).
424 Calculates the number of unique points within the given array.
425 Adds a font to the cache, associating FontInfo with a SoftReference. @param info FontInfo object as key. @param font FontBoxFont to be cached.
426 Retrieves a FontBoxFont from the cache, or null if not found. @param info FontInfo object used as cache key.
427 Adds a font substitute mapping. @param match Font name to match. @param replace Font name to substitute with.
428 Retrieves FontInfo by PostScript name and format. @param format Font format @param postScriptName PostScript font name @return FontInfo object or null if not found
429 Retrieves font substitutes for a PostScript name. @param postScriptName PostScript font name (spaces removed, lowercase) @return List of substitute font names or an empty list.
430 Retrieves the name associated with a given font code. @param code The font code to look up. @return The name associated with the code, or ".notdef".
431 Gets the Type 2 char string for a CID. Returns null if not found.
432 Converts a code point to a CID (Content Identifier). @param code The code point to convert. @return The corresponding CID value.
433 Converts color components to an RGB integer value. Converts color space components to RGB, scaling to 0-255.
434 Calculates a backdrop removal color value. @param groupRGB Group RGB value. @param backdropRGB Backdrop RGB value. @param shift Shift value. @param alphaFactor Alpha factor for blending. @return Adjusted color value between 0 and 255.
435 Returns a copy of the data segment defined by start and length.
436 Returns the default Adobe Glyph List instance.
437 Extracts and stores relevant cmap subtables from the font. Uses platform and encoding IDs to identify specific cmap entries.
438 Checks if font embedding is permitted based on OS2 Windows metrics. @param ttf TrueTypeFont object to check permissions. @return True if embedding is allowed, false otherwise.
439 Checks if font subsetting is permitted based on OS2 data. Returns false if subsetting is explicitly disallowed.
440 Converts a glyph name to its Unicode representation. @param name Glyph name to convert. @return Unicode string or null if not found.
441 Creates a PDColor instance with given components, pattern, and color space. @param components Color components (e.g., RGB values) @param patternName Pattern name associated with the color @param colorSpace The color space for the color
442 Creates a raw image from a raster and AWT color space. @param raster WritableRaster containing image data. @param awtColorSpace AWT ColorSpace for the image. @return BufferedImage representing the raw image.
443 Converts a raster to an RGB BufferedImage using AWT. @param raster WritableRaster to convert. @param colorSpace ColorSpace of the raster.
444 Checks if an ICC profile represents the sRGB color space. @param profile The ICC profile to check.
445 Gets the color space type based on ICC profile or alternate color space.
446 Initializes the PredictorEncoder with document and image data. Sets up internal arrays and variables based on image properties.
447 Scales a BufferedImage to specified dimensions, using interpolation. @param image Image to scale. @param width Target width. @param height Target height.
448 Returns the COSDictionary containing image parameters.
449 Constructs a Patch object with the given color coordinates. @param color 2D array representing color values at corners
450 Returns the current clipping path, caching the result. Returns an Area object representing the combined clipping paths.
451 Creates a new TextAttribute with the given name. @param name The name of the text attribute.
452 Computes a hash code based on the annotation dictionary.
453 Returns a translation matrix, offsetting by bbox dimensions.
454 Computes polygon parameters based on input values. @param length polygon segment length, returns -1 if 0. @param array stores computed alpha and dx values. @return Number of intermediate curls.
455 Flattens an ellipse into an array of points. @param left Left boundary of the ellipse. @param bottom Bottom boundary of the ellipse. @param right Right boundary of the ellipse. @param top Top boundary of the ellipse. @return An array of Point2D.Double representing the ellipse.
456 Checks if a GeneralPath is rectangular. Returns false if non-linear segments are present.
457 Returns the height of the signature template. Delegates to getPageHeight().
458 Sets the X and Y coordinates of the visible signature. @param x The X coordinate. @param y The Y coordinate. @return A reference to this {@link PDVisibleSignDesigner} object.
459 Applies an affine transform to the signature. @param affineTransform Transformation to apply. @return The current PDVisibleSignDesigner instance.
460 Ensures the node is a single node with no siblings. Throws exception if node has siblings.
461 Returns an iterable collection of child outline items.
462 Applies rendering hints to the graphics context. @param renderingHints Map of rendering hints to apply.
463 Adjusts the clip path based on the graphics transform. Handles scaling and minimum size constraints.
464 Calculates image subsampling based on transform and image size. @param pdImage Image to subsample. @param at AffineTransform applied to the image. @return Subsampling factor.
465 Rounds a double up to the nearest integer. Uses BigDecimal for accurate ceiling rounding.
466 Calculates X position based on rotation. Returns X translation or 0 if rotation is not 0, 90, 180, 270.
467 Calculates the Y coordinate of the lower-left corner, considering rotation.
468 Calculates width based on rotation. Returns width along Y if rotated 90/270, otherwise X.
469 Writes Unicode characters from a TextPosition to the output.
470 Returns the Unicode string representation of this text position.
471 Retrieves text for a specified region. @param regionName Name of the region to extract text from. @return String containing the extracted text or null.
472 Starts a new PDF article, writing the start string to output.
473 Ends the current PDF article by writing its end string.
474 Writes the line separator to the output stream.
475 Writes the word separator string to the output stream.
476 Writes paragraph start marker to the output stream. Marks the beginning of a new paragraph in the extracted text.
477 Writes the start string for the current PDF page to the output.
478 Writes the page end marker to the output stream.
479 Handles bidirectional text direction for a word. Processes and reorders characters based on Bidi levels.
480 Parses Bidi file, extracts char mappings, ignores comments. @param inputStream Input stream containing the Bidi file. @throws IOException if an I/O error occurs.
481 Returns visually ordered Unicode string; reverses if RTL.
482 Processes text position, extracting if within defined regions.
483 Checks if this text position represents a diacritic character. Returns false for prolonged sound marks.
484 Updates the TimeZone ID based on its raw offset.
485 Converts a byte to its hexadecimal string representation.
486 Converts a byte array to a hexadecimal string representation. @param bytes The byte array to convert. @return Hexadecimal string.
487 Converts a byte to its hexadecimal byte representation. @param b The byte to convert. @return A byte array containing the hex representation.
488 Converts a byte array to its hexadecimal byte representation. @param bytes The byte array to convert. @return Hexadecimal byte array.
489 Writes a byte as two hex characters to the output stream. @param b The byte to convert to hex. @param output The output stream to write to.
490 Decodes a Base64 encoded string into a byte array. @param base64Value Base64 encoded string to decode. @return Decoded byte array.
491 Creates a Matrix from an AffineTransform, populating its elements. @param at AffineTransform object used to initialize the matrix.
492 Transforms a point using the matrix. @param point The point to transform.
493 Formats a float value into an ASCII byte array. @param value Float to format. @param maxFractionDigits Digits after decimal. @return Offset in the buffer or -1 if formatting fails.
494 Retrieves the PDFBox version from properties file. Returns null if unable to load version.
495 Parses an XML document from an input stream. @param is Input stream containing XML data. @param nsAware Enables namespace awareness during parsing. @return Document object representing the parsed XML.
496 Finds a value by traversing the trie based on the byte array. @param bytes The byte array to search for. @return The value found at the end of the path, or initial value.
497 Creates a COSBoolean object with the given boolean value. @param aValue The boolean value to be encapsulated.
498 Initializes a COSName with the given string name. @param aName The string representation of the name.
499 Private constructor to limit COSNull instance creation.
500 Creates a COSString from a byte array, optionally forcing hex form. @param bytes The byte array to represent the string. @param forceHex Whether to force hex encoding.
501 Initializes a new COSDictionary with an associated update state.
502 Constructs a COSObject wrapping the given COSBase object. @param object The COSBase object to wrap.
503 Constructs a COSObject with a base object and parser. @param object The COSBase object to wrap. @param parser The parser used to create the object.
504 Constructs a COSObject with a key and parser. @param key The COSObjectKey for identification. @param parser The parser used to create the object.
505 Constructs DecodeOptions with specified rectangle coordinates. @param x x coordinate of rectangle. @param y y coordinate of rectangle. @param width rectangle width. @param height rectangle height.
506 Constructs a FreeXReference with a given key and next free object. @param key The COS object key. @param nextFreeObject The next free object identifier.
507 Constructs an `ObjectStreamXReference` with given parameters. @param objectStreamIndex Index within the object stream.
508 Creates a resource cache instance with stable caching enabled.
509 Initializes the wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
510 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
511 Creates a PDUserProperty with a COSDictionary and user attribute. @param dictionary The COSDictionary to wrap. @param userAttributeObject The associated user attribute object.
512 Initializes the node with a COSDictionary object. @param dict The COSDictionary to wrap.
513 Constructs a PDTransition object from a COSDictionary. @param dictionary The COSDictionary representing the transition.
514 Creates a `PDDestinationNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
515 Creates a `PDNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
516 Creates a `PDJavascriptNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
517 Creates a PDStructureElementNameTreeNode from a COSDictionary. @param dic The COSDictionary representing the node.
518 Creates a child node using the provided COS dictionary. @param dic COS dictionary for the child node.
519 Initializes PDMetadata with a COSStream. @param str the COSStream to use for initialization
520 Initializes a PDObjectStream with a COSStream. @param str the COSStream to wrap
521 Initializes a PDEmbeddedFile with a COSStream. @param str the COSStream to wrap
522 Initializes PDFunction with a COSBase object (stream or dict). @param function The function representation (COSStream or COSDictionary)
523 Constructs a PDXObject with a stream and subtype. @param stream The COSStream to wrap in a PDStream. @param subtype The subtype of the XObject.
524 Creates a `PDSimpleFileSpecification` with the given file name. @param fileName The name of the file as a COSString.
525 Constructs a `PDStructureElement` using the provided COS dictionary. @param dic The COS dictionary for the element.
526 Constructs a `PDStructureTreeRoot` using the provided COSDictionary. @param dic The COSDictionary containing structure tree data.
527 Creates a StandardDecryptionMaterial with the given password. @param pwd The password used for decryption.
528 Default constructor. Initializes a new PublicKeyProtectionPolicy.
529 Constructs a StandardProtectionPolicy with given passwords & permissions. @param ownerPassword Owner password for the PDF document. @param userPassword User password for access. @param permissions Access permissions for the document.
530 Default constructor. Initializes the SecurityHandler object.
531 Constructs an FDFAnnotationCaret from a COSDictionary. @param a The COSDictionary representing the annotation.
532 Constructs a `FDFAnnotationCircle` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
533 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a The COSDictionary representing the attachment.
534 Constructs a `FDFAnnotationFreeText` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
535 Constructs an FDFAnnotationInk from a COSDictionary. @param a The COSDictionary representing the annotation.
536 Constructs a `FDFAnnotationLine` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
537 Constructs an FDFAnnotationLink from a COSDictionary. @param a The COSDictionary representing the link.
538 Constructs a FDFAnnotationPolygon from a COSDictionary. @param a The COSDictionary representing the annotation.
539 Constructs a `FDFAnnotationPolyline` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
540 Creates an FDFAnnotationSound from a COSDictionary. @param a The COSDictionary representing the annotation.
541 Constructs a FDFAnnotationSquare from a COSDictionary. @param a The COSDictionary representing the annotation.
542 Constructs an FDFAnnotationStamp from a COSDictionary. @param a The COSDictionary representing the stamp.
543 Constructs an FDFAnnotationText from a COSDictionary. @param a The COSDictionary representing the annotation.
544 Constructs a `FDFAnnotationTextMarkup` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
545 Returns the PANOSE classification data as a PDPanoseClassification.
546 Returns a Composite instance, handling alpha and blend mode. @param blendMode Blend mode for compositing. @param constantAlpha Alpha value for blending (clamped to [0,1]). @return Composite instance.
547 Returns the transparency group attributes, or null if none exist.
548 Constructs a PDShadingPattern from a COSDictionary. @param resourceDictionary The COSDictionary containing data.
549 Constructs a PDTilingPattern from a COSDictionary and ResourceCache. @param dictionary Pattern data in a COSDictionary. @param resourceCache Cache for resources used by the pattern.
550 Initializes a PDShadingType1 object from a shading dictionary. @param shadingDictionary The shading dictionary to use.
551 Initializes the PDShadingType2 with a shading dictionary. @param shadingDictionary The shading dictionary to use.
552 Constructs an AxialShadingPaint with the given shading type and matrix.
553 Constructs a RadialShadingPaint with shading and transformation matrix.
554 Constructs a Type1ShadingPaint with a shading and transformation matrix.
555 Constructs a Type4ShadingPaint with the given shading and matrix.
556 Constructs a Type5ShadingPaint with a shading and transformation matrix.
557 Constructs a Type6ShadingPaint with the given shading and matrix.
558 Constructs a Type7ShadingPaint with the given shading and matrix.
559 Constructs a `PDExtendedGraphicsState` with a COSDictionary. @param dictionary COSDictionary containing extended graphics state data.
560 Constructs a PDSoftMask with a dictionary. @param dictionary COSDictionary for mask properties.
561 Creates a PlainText object from a string, splitting into paragraphs. @param textValue The plain text string to parse.
562 Constructs a PDActionEmbeddedGoTo using a COSDictionary. @param a The COSDictionary representing the action.
563 Constructs a PDActionGoTo with the given COSDictionary. @param a The COSDictionary representing the action.
564 Constructs a PDActionHide using a COSDictionary. @param a The COSDictionary representing the hide action.
565 Constructs a PDActionImportData with the given COSDictionary. @param a The COSDictionary representing the action.
566 Constructs a PDActionJavaScript with the given COSDictionary. @param a The COSDictionary representing the action.
567 Constructs a PDActionLaunch from a COSDictionary. @param a The COSDictionary representing the action.
568 Constructs a PDActionMovie using the provided COSDictionary. @param a The COSDictionary representing the movie action.
569 Constructs a PDActionNamed with the provided COSDictionary. @param a The COSDictionary representing the named action.
570 Constructs a `PDActionRemoteGoTo` with the provided COSDictionary. @param a The COSDictionary representing the action.
571 Constructs a PDActionResetForm using a COSDictionary. @param a The COSDictionary representing the reset action.
572 Constructs a PDActionSound using a COSDictionary. @param a The COSDictionary representing the sound action.
573 Constructs a PDActionSubmitForm using the provided COSDictionary. @param a The COSDictionary representing the submit form action.
574 Constructs a PDActionThread with the given COSDictionary. @param a The COSDictionary representing the action.
575 Constructs a PDActionURI with the given COSDictionary. @param a The COSDictionary representing the URI action.
576 Creates a new PDVisibleSigBuilder instance, initializing PDF structure.
577 Initializes a PDNamedDestination with a COSString identifier. @param dest COSString representing the named destination
578 Constructs a PDNamedDestination with the given destination name. @param dest The COSName representing the named destination.
579 Default constructor for PDNamedDestination. Does nothing, providing a default instance.
580 Constructs a `PDPageDestination` from a COS array. @param arr The COS array representing the destination.
581 Constructs a PDNonTerminalField with an AcroForm, field dictionary, and parent.
582 Constructs a PDTerminalField with an AcroForm, field dictionary, and parent.
583 Initializes PDRectlinearMeasureDictionary with a COSDictionary. @param dictionary The COSDictionary to associate with this object.
584 Creates and returns a copy of this Matrix object.
585 Creates a scaling transformation matrix. @param x Scale factor along the x-axis. @param y Scale factor along the y-axis.
586 Creates a 3x3 translation matrix. @param x Translation along the x-axis. @param y Translation along the y-axis.
587 Creates a rotation matrix with specified angle and translation. @param theta Rotation angle in radians. @param tx Translation along the x-axis. @param ty Translation along the y-axis.
588 Transforms a vector using the matrix. @param vector The vector to transform. @return The transformed vector.
589 Scales the vector by a factor. @param sxy The scaling factor. @return New Vector with scaled coordinates.
590 Initializes MacExpertEncoding by populating the encoding table.
591 Initializes MacRomanEncoding by mapping characters from table.
592 Initializes the StandardEncoding by iterating over the table. Adds encoding entries from the table to the encoding map.
593 Initializes the SymbolEncoding by iterating through the encoding table.
594 Default constructor for Type1Encoding.
595 Creates a Type1Encoding from FontMetrics, adding char metrics. @param fontMetrics FontMetrics object containing character data.
596 Initializes WinAnsiEncoding by populating encoding mappings.
597 Initializes the encoding by mapping char codes to names.
598 Creates and returns a PDFieldTree representing the form's fields.
599 Retrieves an object from the revision collection at the given index. @param index index of the object to retrieve @return object at the specified index
600 Returns the number of objects in the revision collection.
601 Gets the revision number at the specified index. @param index index of the revision number to retrieve @return int revision number at the given index
602 Parses PNG chunks from image data to extract image state. @param imageData byte array containing PNG image data @return PNGConverterState object or null if parsing fails
603 Returns the Encoding instance for a given COSName, or null. @param name The encoding name to retrieve.
604 Creates a PDSoftMask from a COSBase dictionary and resource cache. @param dictionary COSBase representing the mask properties. @param resourceCache Resource cache for accessing resources.
605 Finds the index of the selected radio button widget. Returns -1 if no widget is selected.
606 Adds a PDF source file to be merged. @param source Path to the PDF file to add.
607 Parses the PDF trailer and resolves the xref trailer. @return True if parsing was successful, false otherwise.
608 Retrieves a COSBase object from the object pool. @param key The key identifying the COSBase object. @return The COSBase object associated with the key.
609 Executes the instruction sequence within the given context. Pushes non-string objects onto the stack and executes string commands.
610 Returns the transformation matrix for text lines.
611 Sets the text line matrix for the current graphics state. @param value The new text line matrix.
612 Retrieves the text matrix from the current graphics state.
613 Sets the text matrix using the current graphics state. @param value The new text matrix to set.
614 Transforms a width value using the current transformation matrix. Uses scale and shear factors to adjust the width. @param width The width to transform.
615 Gets the non-stroking color from the graphics state.
616 Sets the non-stroking color for the current graphics state. @param color The PDColor to set as the non-stroking color.
617 Retrieves the non-stroking color space from the graphics state.
618 Returns the current stroking color from the graphics state.
619 Sets the stroking color using the current graphics context. @param color The color to set as the new stroking color.
620 Gets the stroking color space from the current graphics state. @return PDColorSpace object, or null if none is set.
621 Creates an InputStream for reading stream data. Throws IOException if stream is closed or data not written.
622 Finds an ImageReader for the given format name. @param formatName image format name @param errorCause error cause string @throws MissingImageReaderException if no reader is found
623 Finds a raster-capable ImageReader for the given format. @param formatName image format name @param errorCause reason for failure, used in exception @return ImageReader or throws MissingImageReaderException
624 Retrieves an Operator object. Caches operators; creates if absent. @param operator The operator string to retrieve.
625 Returns a string representation of the COSArrayList.
626 Checks if the edge is a line based on control points. Uses edge equation values and point coordinates.
627 Returns the x-coordinate of the lower-left corner. Retrieves the value from the rectangle array.
628 Returns the Y coordinate of the lower-left corner.
629 Returns the X coordinate of the rectangle's upper-right corner.
630 Returns the Y coordinate of the rectangle's upper-right corner.
631 Gets the font size from the font setting. @return Font size as a float value.
632 Returns the red color component as a float.
633 Returns the green color component as a float.
634 Returns the blue color component as a float.
635 Returns the X tristimulus value as a float.
636 Returns the Y tristimulus value as a float.
637 Returns the Z tristimulus value as a float.
638 Gets an integer at the given index, returns defaultValue if not found.
639 Gets COS name at index, or defaultValue if out of bounds. @param index Element index. @param defaultValue Default value if index is out of bounds. @return COS name or defaultValue.
640 Finds the index of the first occurrence of an object. @param object The object to search for. @return Index of the object, or -1 if not found.
641 Retrieves a list of filters associated with the stream. Returns an empty list if no filters are found.
642 Evaluates the Function Type 2 with given input. @param input Input array for evaluation. @return Float array representing the evaluation result.
643 Returns a list of filters applied to the stream. Returns an empty list if no filters are present.
644 Retrieves the file filters from the stream dictionary. Returns a list of filter names or an empty list if none.
645 Writes a COSBoolean object to the output stream, followed by a space. @param output the output stream to write to @param cosBoolean the boolean object to write
646 Writes a string to the output stream as US-ASCII bytes. @param text The string to write. @throws IOException If an I/O error occurs.
647 Notifies listeners if the property entry has changed. Calls userPropertyChanged if a change is detected.
648 Returns the number of key-value pairs in the COSDictionaryMap.
649 Retrieves a COSObject from the dictionary by key. @param key The key to look up. @return COSObject or null if not found/not a COSObject.
650 Retrieves a value by firstKey, or secondKey if firstKey is null. @param firstKey The primary key to retrieve. @param secondKey Fallback key if firstKey is not found. @return The COSBase value or null if neither key exists.
651 Returns the number of recipients in the PDF document. Uses COSName.RECIPIENTS to retrieve the recipient array.
652 Gets the recipient string at the specified index. @param i Index of the recipient string to retrieve. @return COSString object representing the recipient.
653 Retrieves the transition direction. Returns COSInteger.ZERO if null.
654 Returns a set of metadata keys present in the document info.
655 Retrieves a list of attribute names from the COSDictionary. Filters out the owner name.
656 Adds specified trailer dictionary entries to the stream. Adds INFO, ROOT, ENCRYPT, ID, PREV keys to the stream.
657 Constructs a COSDictionary from another COSDictionary. @param dict The COSDictionary to copy from.
658 Checks if a dictionary is an Info dictionary. Returns true if it contains Info-related keys.
659 Checks if font widths or missing widths are defined.
660 Checks if the font descriptor has a missing width value. @return True if missing width exists, false otherwise.
661 Checks if the form dictionary contains the XFA key. @return True if XFA key exists, false otherwise.
662 Initializes the XrefParser with a COSParser. @param cosParser The COSParser to use for parsing.
663 Returns a string representation of the COSFloat object.
664 Writes the PDF representation of the float to the output stream.
665 Writes a COSArray to the output stream, handling nulls and objects. @param output Output stream to write to @param cosArray COSArray to be written
666 Creates a new COSIncrement using the update info. @return COSIncrement object for tracking updates.
667 Initializes the utility with a target PDF document and cloner. @param targetDoc The PDF document to work with.
668 Constructs a DefaultResourceCache with stable caching enabled.
669 Checks if a COSBase object needs updating. Returns true if it's a COSUpdateInfo; otherwise false.
670 Writes the FDF document to a PDF document. @param doc The FDF document to write. @throws IOException if an I/O error occurs.
671 Writes a COS integer object to the output stream, followed by a space. @param output Output stream to write to @param cosInteger COS integer object to write
672 Retrieves a COSBase object at the given index. Dereferences COSObjects and handles COSNull values.
673 Finds the index of a COSBase object within the array. @param object COSBase object to search for @return Index of the object or -1 if not found.
674 Checks if the dictionary contains a value or dereferenced COS object. @param value The value to search for. @return True if found, false otherwise.
675 Finds the key associated with a given value. Returns null if no matching key is found.
676 Retrieves a dictionary value by key, dereferencing COS objects. @param key the key to look up in the dictionary @return COSBase value or null if not found or is COSNull
677 Retrieves linearized dictionary from xref table. Returns null if not found.
678 Closes the document, closing COSStreams and caches. Retains and rethrows the first encountered exception.
679 Accepts a visitor to process the object or NULL. @param visitor The visitor object to call accept. @throws IOException if an I/O error occurs.
680 Checks if a COSBase object has a self-reference to its parent. Logs a warning if a self-reference is found.
681 Gets the length from a COSBase object. Returns null if null. Throws IOException if type is invalid or content is missing.
682 Constructs a NormalXReference with offset, key, and object. @param byteOffset Offset of the referenced object. @param key Key of the referenced object. @param object The referenced COSBase object.
683 Gets the key associated with a COSBase object. Returns the key or attempts to retrieve it via object.
684 Checks if the pool contains the given COSBase object.
685 Prepares a COS object for writing. @param key COSObjectKey, identifies the object @param object COSBase object to prepare
686 Constructs a COSObjectKey with number and generation. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative)
687 Compares this entry to another based on referenced key. Returns -1, 0, or 1 based on key comparison.
688 Returns the horizontal scaling factor from the text matrix.
689 Returns the vertical scaling factor from the text matrix.
690 Creates a raw OutputStream for writing to the stream. Returns a FilterOutputStream for writing data.
691 Creates a COSWriter with the given output stream and compression parameters. @param outputStream The output stream for writing PDF data. @param compressParameters Compression parameters for the PDF.
692 Creates a COSWriter instance for PDF writing. @param outputStream Output stream for PDF data. @param inputData RandomAccessRead object for incremental updates.
693 Sets the updated flag if updates are currently accepted. @param updated The new value for the updated flag.
694 Returns the string value, handling UTF-16 or using PDFDocEncoding.
695 Creates a COSString. @param text The string to encode. @param forceHex Whether to force hex encoding.
696 Checks if the font is a Standard 14 font. @return True if Standard 14, false otherwise.
697 Reads ASCII85 encoded bytes into the provided byte array. @param data Destination array for decoded bytes. @param offset Offset within the array to start writing. @param len Number of bytes to read. @return Number of bytes read, or -1 if end of stream.
698 Closes the stream, flushing data and releasing resources. Flushes buffer and calls super.close(), then nulls data.
699 Reads a single byte from the decoded data stream. Returns -1 if end of stream is reached.
700 Reads data from the stream into the provided byte array. @param data buffer to store read bytes @param offset offset within the data array @param length number of bytes to read @return number of bytes read
701 Reads image from input stream and sets it as the signature image. @param stream Input stream containing the image data. @throws IOException if an I/O error occurs.
702 Encodes raw data into a compressed LZW stream. Uses createCodeTable, findPatternCode, and writeBits.
703 Selects the best data row to write based on compression sum. @return The best data row to write.
704 Returns RenderState from COSName, or null if null. @param state COSName representing the rendering state
705 Returns the BaseState for a given COSName. @param state COSName representing the state. @return BaseState, defaults to ON if state is null.
706 Closes overlays & releases resources held by the Overlay object.
707 Constructs a PDFormXObject with a stream. @param stream The underlying PDF stream for the form.
708 Creates a PDFStreamParser with content from a given stream. @param pdContentstream The PDF content stream to parse.
709 Creates a PDFStreamParser with a byte array as input. @param bytes The byte array representing the PDF stream.
710 Parses a PDF object by its number. @param objectNumber The object number to parse. @return COSBase object or null if not found.
711 Reads object numbers and offsets from the stream. @return Map of object numbers to their offsets.
712 Skips whitespace characters and handles line breaks.
713 Skips a line break character. Rewinds if not a line break.
714 Reads a line from the PDF source. @return String representing the line, or throws IOException.
715 Skips whitespace and comment characters in the PDF source.
716 Finds nearest XRef table/stream offset. @param xrefOffset Offset to find the nearest XRef. @return Nearest XRef offset or -1 if not found.
717 Parses the PDF header and extracts version info. Uses default version if parsing fails.
718 Parses the FDF header and extracts the version. Uses parseHeader with FDF_HEADER and FDF_DEFAULT_VERSION.
719 Parses all objects from the object stream. Returns a map of COSObjectKey to COSBase for each object.
720 Calculates the final encryption key based on object and generation numbers. @param objectNumber Object number for key derivation. @param genNumber Generation number for key derivation.
721 Creates a content stream from an appearance stream. @param appearance The parent appearance stream. @param outputStream Output stream for the content.
722 Creates a content stream with document, appearance, and output stream.
723 Transforms a point using the current graphics state's matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
724 Creates a paint context with transformed pattern matrix. @param xform transformation applied to the pattern @return PaintContext object for rendering
725 Concatenates the given matrix with the current matrix. @param matrix Matrix to concatenate; its 'single' array is used.
726 Translates the matrix by the given amounts. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
727 Scales the matrix by sx and sy. @param sx Scaling factor for x-axis. @param sy Scaling factor for y-axis.
728 Multiplies this Matrix with another. @param other The other Matrix to multiply by. @return The resulting Matrix.
729 Creates a PDDocument from the COSDocument and source.
730 Constructs a PDDocument from a COSDocument and source. @param doc The COSDocument to represent. @param source Source for reading the PDF.
731 Creates a SecurityHandler for a given ProtectionPolicy. @param policy ProtectionPolicy used to instantiate handler. @return SecurityHandler instance or null if not found.
732 Creates a SecurityHandler for a given filter name. @param name Filter name to retrieve handler for. @return SecurityHandler instance or null if not found.
733 Sets the stroking color if a color is provided. @param color The color to set, or null to skip. @return True if the color was set, false otherwise.
734 Sets the non-stroking color if a color is provided. @param color The color to set, or null to skip. @return True if color was set, false otherwise.
735 Checks if the document owner permission is enabled. Returns true if all permission bits are set.
736 Checks if any revision 3 permission bits are set. Returns true if any of the permission bits are enabled.
737 Encrypts data and writes it to the output stream. @param data The byte array to encrypt. @param output The output stream to write to.
738 Writes an array of bytes to the output stream, encrypting each. @param data Byte array to encrypt. @param offset Start index in the array. @param len Number of bytes to write. @param output Output stream to write to.
739 Inserts a diacritic character at a specific index. @param i index of insertion @param diacritic TextPosition representing the diacritic
740 Constructs a Line object with given points and colors. @param p0 Start point of the line. @param p1 End point of the line. @param c0 Color at the start point. @param c1 Color at the end point.
741 Creates a SoftMask with specified paint, mask, bbox, backdrop color, and transfer function.
742 Removes a backdrop from a group image. @param backdrop Backdrop image to remove. @param offsetX Offset for backdrop position. @param offsetY Offset for backdrop position.
743 Retrieves FontMetrics for the given font name. @param fontName Font name to retrieve metrics for. @return FontMetrics object or null if not found.
744 Constructs a GlyphList from an input stream. @param input Input stream containing glyph list data. @param numberOfEntries Initial capacity of hash maps. @throws IOException if an I/O error occurs.
745 Constructs a GlyphList, copying from another and loading from stream. @param glyphList Source GlyphList to copy mappings from. @param input Input stream containing glyph list data.
746 Retrieves the GID for a given code point. @param code The code point to look up. @return The GID or 0 if not found.
747 Finds font name, tries Unicode name if embedded/glyph missing. @param name Font name to search for. @return Font name or ".notdef" if not found.
748 Retrieves font name, trying alternatives and Unicode names. @param name Glyph name to search for. @return Font name or ".notdef" if not found.
749 Initializes PDJPXColorSpace with an AWT ColorSpace. @param colorSpace The AWT ColorSpace to use.
750 Initializes the CMYK color space, loading ICC profile. Throws IOException if profile loading fails.
751 Applies a mask to an image, handling scaling and composition. @param image Input image. @param mask Mask image. @param interpolateMask Interpolation flag for mask.
752 Initializes the curve with control points and detail level. @param ctrlPnts Control points for the Bezier curve. @param l Detail level for generating points on the curve.
753 Checks if a point is inside the triangle, including edges. @param p Point to check for containment. @return True if point is inside, false otherwise.
754 Calculates color at point p based on triangle's shading. @param p Point at which to calculate color. @return Array of color components at the given point.
755 Intersects the current clipping path with a given path. @param path The GeneralPath to intersect with.
756 Intersects the clipping path with a given area. @param area The Area object to intersect with.
757 Transfers the current clipping path to the graphics context. Handles empty clipping paths to prevent rendering issues.
758 Draws a tiling pattern onto the graphics context. @param g Graphics2D object to draw on.
759 Calculates X position adjusted for text direction. Uses getDir() to determine direction, then uses getXRot.
760 Constructs a TextPosition object with specified parameters. @param pageRotation Page rotation angle.
761 Calculates the adjusted Y coordinate based on text direction.
762 Returns the width of the text, considering rotation.
763 Calculates the width adjusted for text direction. Uses getDir() to determine the text direction.
764 Starts a new PDF article. Delegates to overloaded method.
765 Writes paragraph end marker. Writes start if not already in paragraph.
766 Normalizes a word, handling specific Unicode ranges and forms. @param word The word to normalize.
767 Converts a Calendar object to a formatted string (yyyyMMddHHmmss'timezone'). @param cal Calendar object to format. Null if no value. @return Formatted date/time string or null if cal is null.
768 Converts a Calendar to an ISO 8601 formatted string. @param cal Calendar object to convert. @return ISO 8601 formatted date and time string.
769 Converts the string's byte array to a hexadecimal string.
770 Writes an external signature to the PDF, handling space constraints. @param cmsSignature CMS signature byte array. @throws IOException if signature is too large or PDF not prepared.
771 Writes the COS name to the specified PDF output stream. @param output The output stream to write to.
772 Writes byte array as hex characters to an output stream. @param bytes The byte array to convert to hex. @param output The output stream to write to.
773 Parses XML from an input stream, without namespace awareness. @param is Input stream containing XML data. @return Document object representing the parsed XML.
774 Detects file type from an input stream using magic numbers. @param inputStream BufferedInputStream to read file content @return FileType object representing detected file type
775 Initializes the LegacyPDFStreamEngine by adding various operators.
776 Retrieves a COSName by its string representation. Creates and registers if not found, ensuring thread safety.
777 Creates a COSFloat object with the given float value. @param aFloat The float value to be represented.
778 Constructs a COSFloat with a float value and its string representation.
779 Creates a COSFloat from a string, handling various PDF float formats. @param aFloat The string representation of the float value.
780 Constructs a COSInteger with a given value and validity. @param val the integer value @param valid indicates if the value is valid
781 Creates a COSString from a byte array, using default encoding. @param bytes The byte array to represent the string.
782 Constructs a COSArray with a new ArrayList and direct flag true.
783 Constructs a COSStream with a RandomAccessStreamCache. @param streamCache Cache for accessing random-access streams.
784 Creates an unmodifiable COSDictionary from a given dictionary. @param dict The COSDictionary to wrap.
785 Creates a DecodeResult with default parameters using a new COSDictionary.
786 Initializes a new PDDocumentInformation object. Creates a COSDictionary to store document information.
787 Default constructor. Initializes the PDResources object.
788 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
789 Default constructor. Initializes the node with a new COSDictionary.
790 Default constructor, initializes with a new COSDictionary.
791 Creates a new PDMarkInfo object with an empty COSDictionary.
792 Constructs a new PDPropertyList with an empty COSDictionary.
793 Creates a new PDBoxStyle object with an empty COSDictionary.
794 Initializes a new PDCryptFilterDictionary with a COSDictionary.
795 Initializes a new PDEncryption object with a COSDictionary.
796 Creates a new FDFCatalog instance, initializing the catalog.
797 Constructs a new FDFDictionary, initializing the internal COSDictionary.
798 Creates a new FDFField object, initializing its COSDictionary.
799 Default constructor. Initializes the 'fit' COSDictionary.
800 Creates a new FDFJavaScript instance with an empty COSDictionary.
801 Initializes a new FDFNamedPageReference with an empty COSDictionary.
802 Constructs a new FDFPage with an empty COSDictionary.
803 Creates a new FDFPageInfo with an empty COSDictionary.
804 Creates a new FDFTemplate instance, initializing the template.
805 Initializes a new `PDDeviceNAttributes` object with a new COSDictionary.
806 Creates a new PDDeviceNProcess object, initializing its dictionary.
807 Initializes a new PDShading object with an empty dictionary.
808 Creates a new PDAdditionalActions object with an empty COSDictionary.
809 Initializes the PDAnnotationAdditionalActions with an empty actions dictionary.
810 Initializes a new `PDDocumentCatalogAdditionalActions` instance.
811 Initializes a new `PDFormFieldAdditionalActions` object. Creates a new `COSDictionary` to hold actions.
812 Creates a new PDPageAdditionalActions object with a COSDictionary.
813 Creates a new PDTargetDirectory with an empty COSDictionary.
814 Initializes a new PDURIDictionary with an empty COSDictionary.
815 Creates a new PDWindowsLaunchParams object, initializing parameters.
816 Initializes a new PDBorderEffectDictionary with a COSDictionary.
817 Creates a new PDBorderStyleDictionary with an empty COSDictionary.
818 Initializes a new PDPropBuild instance with a COSDictionary.
819 Initializes a new PDPropBuildDataDict, creating a COSDictionary.
820 Creates a new PDSeedValueMDP with an empty COSDictionary.
821 Initializes a new PDSeedValueTimeStamp with an empty COSDictionary.
822 Constructs a PDField with an AcroForm.
823 Creates a new PDViewportDictionary with an empty COSDictionary.
824 Initializes a new PDViewerPreferences object. Creates a new COSDictionary to store preferences.
825 Constructs a COSObject with a base object and key. @param object The COSBase object being wrapped. @param objectKey Object key for identification.
826 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
827 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
828 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
829 Initializes the outline item with a COSDictionary. @param dic The COSDictionary to wrap.
830 Retrieves the metadata stream. @return PDMetadata object or null if no metadata exists.
831 Retrieves the PDF metadata as a PDMetadata object. Returns null if no metadata is present.
832 Retrieves the extends stream from the COS object. Returns a PDObjectStream or null if not present.
833 Initializes PDFunctionType0 with a COSBase object (stream or dict). @param function The function representation (COSStream or COSDictionary)
834 Initializes PDFunctionType3 with a function stream (COSStream/COSDictionary). @param functionStream The function representation.
835 Constructs a PDPostScriptXObject with a stream. @param stream The COSStream containing PostScript data.
836 Constructs a PDFormXObject with a COSStream. @param stream The COSStream representing the form data.
837 Constructs a PDFormXObject with a stream and resource cache. @param stream The COSStream for the form. @param cache The resource cache to use.
838 Default constructor. Initializes the PublicKeySecurityHandler.
839 Default constructor. Initializes the SecurityHandler object.
840 Constructs a PublicKeySecurityHandler with a given policy. @param publicKeyProtectionPolicy Encryption policy.
841 Constructs a StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy Encryption policy parameters.
842 Creates a FDFAnnotationHighlight from a COSDictionary. @param a The COSDictionary representing the annotation.
843 Constructs a `FDFAnnotationSquiggly` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
844 Constructs a `FDFAnnotationStrikeOut` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
845 Constructs an `FDFAnnotationUnderline` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
846 Constructs a PDTilingPattern from a COSDictionary. @param dictionary Pattern data in a COSDictionary.
847 Constructs a PDShadingType3 using the provided shading dictionary. @param shadingDictionary The shading dictionary to use.
848 Initializes the shading with a dictionary. @param shadingDictionary The shading dictionary to use.
849 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
850 Constructs a `PDPageFitDestination` from a COS array. @param arr The COS array representing the destination.
851 Constructs a `PDPageFitHeightDestination` from a COS array. @param arr The COS array representing the destination.
852 Constructs a `PDPageFitRectangleDestination` from a COS array. @param arr The COS array representing the destination.
853 Constructs a `PDPageFitWidthDestination` from a COS array. @param arr The COS array representing the destination.
854 Constructs a `PDPageDestination` from a COS array. @param arr The COS array representing the destination.
855 Constructs a PDButton with an AcroForm, field dictionary, and parent.
856 Constructs a PDSignatureField with an AcroForm, field dict, and parent.
857 Constructs a PDVariableText object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
858 Initializes MacOSRomanEncoding with character mappings from table.
859 Creates a Type1Encoding from an Apache FontBox encoding. @param encoding FontBox encoding to use for creating Type1Encoding @return Type1Encoding instance
860 Generates a unique partial name for a signature field. Increments a counter until a unique name is found.
861 Returns a string representation of revisions, formatted as "object=X, revisionNumber=Y".
862 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase representing the mask properties.
863 Constructs a COSDocument using a memory-only stream cache. @param parser Parses the PDF document.
864 Creates a `PDMarkedContent` object based on tag. @param tag Content tag; ARTIFACT creates a `PDArtifactMarkedContent`. @param properties COS dictionary holding content properties.
865 Calculates the rectangle's width. Subtracts lower-left X from upper-right X.
866 Checks if the rectangle contains the given point (x, y). @param x The x-coordinate of the point. @param y The y-coordinate of the point.
867 Calculates the height of the rectangle. Subtracts lower-left Y from upper-right Y.
868 Transforms the rectangle using the given matrix. @param matrix Transformation matrix to apply @return GeneralPath representing the transformed rectangle
869 Creates a GeneralPath representing the rectangle's shape. Uses lower-left and upper-right coordinates to define it.
870 Returns a string representation of the rectangle's coordinates.
871 Gets an integer at the given index, returns -1 if not found.
872 Gets COS name at index, or null if out of bounds. @param index Element index. @return COS name or null.
873 Creates an OutputStream for writing to the stream, applying filters. @param filters COSBase object representing filters to apply. @return OutputStream for writing to the stream.
874 Constructs a PDImageXObject with a stream and resources. @param stream The underlying PDF stream. @param resources Resources associated with the image.
875 Determines image suffix based on stream filters. Returns null if no match found; logs a warning.
876 Writes a float operand to the output stream, handling non-finite values. @param real The float value to write.
877 Writes an integer operand to the output stream, formatted as a decimal.
878 Writes an operator string followed by a newline. @param text Operator string to write. @throws IOException If an I/O error occurs.
879 Checks if the COSDictionaryMap is empty. Returns true if the map contains no key-value pairs.
880 Writes a COSFloat object to the output stream, followed by a space. @param output The output stream to write to. @param cosFloat The COSFloat object to write.
881 Creates a COSIncrement from the current update state. @return COSIncrement object representing the updates.
882 Converts the COSArray to a float array. Returns 0.0 for non-numeric COSBase objects.
883 Converts COS numbers in the array to a List of Floats. Returns null for non-COSNumber elements.
884 Converts COSNumber elements to a List of Integers. Returns null for non-COSNumber elements.
885 Returns the minimum value of the range as a float.
886 Returns the maximum value of the range as a float.
887 Retrieves a PDGamma object at the specified index. @param index Index of the color to retrieve. @return PDGamma object or null if index is out of bounds.
888 Gets a BlendMode from a COSBase object. @param cosBlendMode COSBase representing the blend mode @return BlendMode or NORMAL if not found
889 Gets colorant names from the array. Returns a list of colorant names as strings.
890 Returns the alternate color space, creating it if null. Uses array.getObject(ALTERNATE_CS) to initialize.
891 Gets the colorant name from the array. Returns the name as a String.
892 Retrieves the target page as a PDPage object. Returns null if the array is empty or page is invalid.
893 Returns the page number. Returns -1 if the array is empty.
894 Returns the zoom level as a float. Returns -1 if not a COSNumber.
895 Initializes matrix from COSArray. @param array COSArray containing transformation values.
896 Gets a dictionary value by firstKey. If null, tries secondKey. @param firstKey The primary key to retrieve. @param secondKey Fallback key if firstKey is null. @return COSBase value or null if not found.
897 Retrieves a COSName value by key from the dictionary. @param key the key to look up @return COSName value or null if not found.
898 Retrieves a COSDictionary by key. @param key the key to retrieve the dictionary by @return COSDictionary object or null if not found.
899 Retrieves a COSStream object by key. @param key the key to look up in the dictionary @return COSStream object or null if not found.
900 Retrieves a COSArray value by key. @param key the key to look up in the dictionary @return COSArray object or null if not found.
901 Retrieves a COSName value by key, using defaultValue if not found. @param key the key to look up @param defaultValue default value if key is not present @return COSName value or defaultValue
902 Gets the long value associated with a key, or default if absent. @param key key to look up @param defaultValue default value if key is not found @return long value or default if not found
903 Gets a float value from the dictionary, using defaultValue if not found. @param key the key to look up @param defaultValue the default value to return if not found @return float value or defaultValue if not found
904 Returns an iterator over the page's content streams. Handles COSStream or COSArray as content.
905 Checks if the page content stream or array is empty. Returns true if content exists; otherwise, false.
906 Retrieves class names from the COS object. Returns a Revisions object containing the class names.
907 Retrieves the value associated with the key "K" from the dictionary. @return COSBase value or null if not found.
908 Returns the value of the property. Retrieves the value from the dictionary using the 'V' key.
909 Checks if metadata encryption is enabled. Returns true by default if encryption status is missing.
910 Gets the owner encryption key from the dictionary. Returns null if no key is found. Key is 32 bytes.
911 Gets the user encryption key from the dictionary. Returns null if the key is not present.
912 Retrieves the permissions byte array from the document. @return byte array representing permissions or null if absent.
913 Gets the page number the annotation is associated with. @return Page number as Integer, or null if not specified.
914 Retrieves the COS value from the field dictionary. @return COSBase value or null if not found. @throws IOException if the value type is unknown.
915 Retrieves the field flags as an integer value. Returns null if the field flags are not set.
916 Returns the value of the SET field flag. @return Integer representing the SET flag value, or null.
917 Gets the clear field flags. @return Integer representing clear field flags, or null.
918 Retrieves the widget field flags from the field's dictionary. @return Integer representing flags, or null if not present.
919 Gets the set widget field flags from the field's dictionary. @return Integer representing flags, or null if not present.
920 Gets the clear widget field flags. @return Integer representing the flags or null if not set.
921 Gets the default width of the CID font. Uses DW dictionary entry, defaults to 1000 if not found.
922 Retrieves the color space associated with this device. @return PDColorSpace object or null if not defined.
923 Gets the color space, creating it if necessary. @param resources PDResources object @return PDColorSpace instance or null
924 Creates an OptionalContentGroup from a COSDictionary. @param dict The COSDictionary representing the OCG. @throws IllegalArgumentException if the dictionary isn't an OCG.
925 Creates a new dictionary for optional content membership. @param dict The COSDictionary containing the membership data.
926 Gets the overprint mode from the dictionary. Returns null if not found or not a COSNumber.
927 Retrieves the soft mask from the dictionary. Returns null if no soft mask is present.
928 Retrieves a float value associated with the given key. @param key the key to look up in the dictionary @return float value or null if not found.
929 Gets the transfer function. Returns null if it's not a COSArray of size 4.
930 Gets the TR2 value from the dictionary. Returns null if TR2 is not a COSArray of size 4.
931 Gets the backdrop color array for the soft mask. @return COSArray representing the backdrop color, or null.
932 Determines if content should open in a new window. Returns OpenMode.NEW_WINDOW if COSBoolean is true, otherwise USER_PREFERENCE.
933 Gets the 'T' item from the action dictionary. @return COSBase value or null if not found.
934 Determines if the action should open in a new window. Returns OpenMode.USER_PREFERENCE if not specified.
935 Determines if the action opens in a new window. Returns OpenMode.USER_PREFERENCE if not specified.
936 Retrieves the named destination associated with this target. @return PDNamedDestination object or null if not found.
937 Gets the signature contents as bytes. Returns empty array if contents is not a COSString.
938 Retrieves the XFA resource from the dictionary. @return PDXFAResource object or null if not found.
939 Gets an inheritable attribute value; searches parent fields. @param key Attribute key to retrieve. @return Attribute value or null if not found.
940 Returns the value of the field. @return COSBase value or null if not found.
941 Gets the field's value as a string. @return Field value as string, or "" if null.
942 Gets the default value of the field. @return COSBase default value or null if not found
943 Closes the visual signature and PDF source, releasing resources.
944 Clones a COSBase object for a new document, reusing if possible. @param base The COSBase object to clone. @return Cloned COSBase object or the original if already cloned.
945 Writes a COS object to the output stream with associated key. @param key COSObjectKey identifying the object @param obj COSBase object to write
946 Retrieves the key for a given COSBase object from the pool. @param object The COSBase object to retrieve the key for. @return The key associated with the object.
947 Checks if the object pool contains the given COSBase object.
948 Creates a list of COSWriterObjectStreams for compressing objects. @return List of COSWriterObjectStream instances.
949 Retrieves a COSObjectKey, using a cache for performance. @param num Object number. @param gen Generation number.
950 Searches for PDF objects, extracting object IDs and offsets. Uses heuristics to handle potentially truncated PDFs.
951 Searches for object stream offsets and associates them with keys. Returns a map of offsets to COSObjectKeys.
952 Parses cross-reference stream, extracting object details. @param resolver XrefTrailerResolver to manage xref entries
953 Parses the Xref table, validating structure and entries. Returns true on success, false otherwise.
954 Retrieves or creates a COSObjectKey for a given COSBase object. @param obj The COSBase object to get the key for.
955 Adds a COSBase object to the pool, managing keys and xref numbers. @param key The COSObjectKey for the object. @return The actual COSObjectKey used, or null if duplicate.
956 Creates a COSWriter with the given output stream. @param outputStream The output stream for writing PDF data.
957 Sets whether the COS object needs updating. @param flag True if the object needs updating.
958 Sets the updated flag to true, indicating updates are accepted.
959 Gets string at index, returns defaultValue if not a COSString. @param index Element index. @param defaultValue Default string value. @return String at index or defaultValue.
960 Gets the name as a String from a COS object. @param key the key to look up in the dictionary @return String value or null if not found.
961 Retrieves a string value from the dictionary by key. @param key the key to look up in the dictionary @return String value or null if not found.
962 Converts a COSDictionary to a COSDictionaryMap. @param map The COSDictionary to convert. @return COSDictionaryMap or null if input is null.
963 Returns the file name as a string.
964 Gets the option string value from the COS object.
965 Gets the default appearance string from the option. Returns a string value from a COSString object.
966 Gets the named destination string. Returns null if it's neither COSString nor COSName.
967 Extracts string items from a COSBase object. @param items COSBase object to extract from @param pairIdx Index to access in COSArray @return List of extracted strings.
968 Gets export values from button attributes. Returns a list of strings or an empty list if no values exist.
969 Retrieves the value for a choice field. @param name COSName of the field, returns list of strings.
970 Gets the default appearance string from the field's attributes. Returns null if the attribute is not a COSString.
971 Creates a COSString from a string. @param text The string to encode.
972 Creates a PDVisibleSignDesigner with an image from the stream. @param imageStream Input stream containing the signature image. @throws IOException if an I/O error occurs.
973 Sets the signature image from a file path. @param path Path to the image file. @throws IOException if an I/O error occurs.
974 Constructs a PDTransparencyGroup with the given stream. @param stream The underlying PDF stream.
975 Parses a COSDictionary from the PDF source. @param isDirect Whether the dictionary is direct. @return COSDictionary object or partial dictionary on error.
976 Reads a string from the PDF source until the end of a name. @return The string read from the source.
977 Reads an expected string from the source, throwing IOException on mismatch. @param expectedString String to match @param skipSpaces Whether to skip spaces before/after
978 Reads a string from the PDF source with a specified length. @param length The maximum length of the string to read. @return The read string.
979 Reads an integer from the PDF source. Throws IOException if not a valid integer.
980 Reads a long value from the PDF source. Parses the string representation to a primitive long.
981 Calculates the fixed offset for a given object offset. @param objectOffset The object offset to search for. @return Fixed offset or 0 if not found.
982 Computes user password encryption based on revision. @param password User password for encryption.
983 Computes the owner password encryption. @param ownerPassword Owner password. @param userPassword User password. @param encRevision Encryption revision. @param length Key length. @return Encrypted owner password bytes.
984 Rotates the matrix by a specified angle. @param theta Rotation angle in radians.
985 Adjusts the text matrix by the given translation amounts. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
986 Translates the matrix by the given vector's components. @param vector Vector containing translation amounts (x, y).
987 Concatenates two matrices by multiplying b with a. @param a The first matrix. @param b The second matrix. @return The concatenated Matrix.
988 Constructs a PDDocument from a COSDocument. @param doc The COSDocument to represent.
989 Processes a CharSequence as a token, delegating to the String token method.
990 Returns the current access permission, or owner permission if null.
991 Computes the document revision number based on version and permissions.
992 Encrypts/decrypts data using AES. @param finalKey encryption key @param data input stream @param output output stream @param decrypt decrypt flag
993 Encrypts/decrypts data using AES-256. @param data input stream @param output output stream @param decrypt decrypt flag
994 Encrypts data using RC4 cipher. @param finalKey Encryption key. @param input Data to encrypt. @param output Output stream.
995 Encrypts data from an input stream and writes to an output stream. @param data Input stream to encrypt. @param output Output stream to write encrypted data.
996 Prepares a string for SASL, allowing unassigned codepoints. @param str Input string to prepare. @return Prepared string.
997 Prepares a string for SASL storage, normalizing characters. Uses `saslPrep` with unassigned codepoints disallowed.
998 Retrieves a FontBoxFont from the cache or loads it based on format. @return FontBoxFont object or null if not found/failed to load.
999 Saves font information to a disk cache file. Writes font info to file; handles IO/security exceptions.
1000 Sets the font provider and initializes font info map. @param fontProvider The provider of font information.
1001 Constructs a ShadedTriangle with given points and colors. @param p Array of triangle corner points. @param c Array of colors at each corner.
1002 Writes the CMap data to an output stream. Writes CMap data to the provided OutputStream.
1003 Loads a GlyphList from a resource file. @param filename resource filename @param numberOfEntries number of entries in the file @return GlyphList object
1004 Creates/retrieves a map of GID to code point. Creates if empty, otherwise returns existing map.
1005 Creates a PDICCBased object from an ICC profile array. @param iccArray COSArray containing the ICC profile data. @throws IOException if an I/O error occurs.
1006 Ends the text clip, intersecting the current clipping path. Resets textClippings and lastClips for subsequent operations.
1007 Updates the graphics clip based on current clipping paths. Applies initial clip if available and updates lastClippingPaths.
1008 Returns an InputStream for signing the PDF. Throws IllegalStateException if PDF isn't prepared.
1009 Merges a diacritic character into this TextPosition. @param diacritic TextPosition representing the diacritic
1010 Checks if this TextPosition contains another TextPosition. @param tp2 The TextPosition to check for containment. @return True if tp2 is contained within this TextPosition.
1011 Checks if this TextPosition completely contains another. @param tp2 The TextPosition to check for containment. @return True if this TextPosition contains tp2, false otherwise.
1012 Writes a paragraph separator by ending and starting a paragraph.
1013 Writes a COS name to the output stream, followed by a space. @param output The stream to write to. @param cosName The COS name to write.
1014 Writes a PDF operand (COSName) to the output stream, followed by a space.
1015 Writes a string to the output stream, escaping as needed. @param bytes The byte array representing the string. @param forceHex Whether to force hexadecimal encoding. @param output The output stream to write to.
1016 Constructs a PDFMarkedContentExtractor with the given encoding. @param encoding The character encoding used for the PDF.
1017 Default constructor. Adds operators for marked content sequences.
1018 Retrieves a dictionary value by key. @param key The key to look up in the dictionary. @return COSBase value or null if not found.
1019 Retrieves a value from the dictionary by key. @param key The key to look up. @return The COSBase value or null if not found.
1020 Checks if the dictionary contains a key represented by a String. @param name The key to check. @return True if the key exists, false otherwise.
1021 Retrieves a filter by name. @param filterName Name of the filter to retrieve. @return The filter object.
1022 Parses a COS name from the PDF source. Reads and decodes the name, handling hex escapes. @return A COSName object representing the parsed name. @throws IOException if an I/O error occurs.
1023 Creates a PDColor instance from a COSArray and color space. @param array COSArray containing color components/pattern name @param colorSpace PDColorSpace for the color
1024 Returns a COSInteger for the given value, caching if within range. @param val the integer value @return COSInteger object
1025 Parses a hex string and creates a COSString. @param hex Hexadecimal string to parse. @return COSString representation of the hex string.
1026 Initializes a new COSArrayList with an empty COSArray and ArrayList.
1027 Constructs a COSArrayList with a parent dictionary and key. @param dictionary Parent COSDictionary. @param dictionaryKey Key for the parent dictionary.
1028 Constructs a new PDPageDestination with an empty COSArray.
1029 Creates a PDRectangle with specified coordinates and dimensions. @param x The x-coordinate of the rectangle's origin. @param y The y-coordinate of the rectangle's origin. @param width The width of the rectangle. @param height The height of the rectangle.
1030 Constructs a PDRectangle from a BoundingBox. @param box The BoundingBox containing rectangle coordinates.
1031 Creates a new COSStream and adds it to the streams list. @return The newly created COSStream object.
1032 Constructs a COSStream with no initial stream cache.
1033 Constructs a COSStream with a RandomAccessStreamCache and view. @param streamCache Cache for stream access @param randomAccessReadView View for reading the stream
1034 Returns an unmodifiable view of this COSDictionary.
1035 Returns the last DecodeResult or a default if none exist.
1036 Retrieves the resources associated with this XObject. Returns null if no resources are defined.
1037 Default constructor for PDAttributeObject.
1038 Constructs a PDUserProperty with a given user attribute object. @param userAttributeObject the user attribute object
1039 Default constructor for PDOutlineNode.
1040 Default constructor. Initializes the node with a new COSDictionary.
1041 Default constructor. Initializes the node.
1042 Default constructor. Initializes a new PDJavascriptNameTreeNode.
1043 Default constructor. Initializes the node.
1044 Constructs a PDNonTerminalField with the given AcroForm.
1045 Constructs a PDTerminalField with the provided AcroForm.
1046 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
1047 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
1048 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
1049 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
1050 Constructs a PDAppearanceStream from a COSStream. @param stream The COSStream representing the appearance data.
1051 Constructs a PDTransparencyGroup with a stream and resource cache. @param stream The COSStream for the group. @param cache The resource cache to use.
1052 Adds a TrueType collection font file. @param ttcFile The TrueType collection file to add.
1053 Adds a TrueType font, handling errors and missing data. @param fontHeaders Font headers object. @param file The font file. @param hash Hash of the font file.
1054 Adds a Type1 font to the list, handling errors and skipping invalid fonts. @param pfbFile The PFB file containing the Type1 font.
1055 Creates a PDDestination from a COSBase object. @param base COSBase representing the destination. @return PDDestination object or null if base is null. @throws IOException on conversion errors.
1056 Constructs a PDCheckBox with an AcroForm, field dictionary, and parent.
1057 Constructs a PDPushButton with an AcroForm, field dictionary, and parent.
1058 Constructs a PDRadioButton with an AcroForm, field, and parent.
1059 Constructs a PDChoice object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
1060 Constructs a PDTextField object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
1061 Saves the current graphics state onto the graphics stack. Clones the top graphics state and pushes it onto the stack.
1062 Saves the current graphics stack and pushes a clone. @return The saved graphics stack.
1063 Constructs a COSDocument using a memory-only stream cache.
1064 Returns a string representation of the COSDictionary. Handles potential IOExceptions, returning an error message.
1065 Clips the current graphics state to a rectangle. @param rectangle The rectangle to clip to.
1066 Gets the bounding box of the transformed appearance. @param appearanceStream Appearance stream to transform. @return Rectangle2D representing the transformed bounding box.
1067 Initializes PDGraphicsState with a clipping path from the page rectangle. @param page The page rectangle defining the clipping path.
1068 Gets the left coordinate from the array. Returns -1 if not found.
1069 Returns the left coordinate of the rectangle. Uses array.getInt(2) to fetch the value.
1070 Returns the bottom coordinate of the rectangle.
1071 Returns the right coordinate of the rectangle. Uses `array.getInt(4)` to retrieve the value.
1072 Returns the top coordinate of the rectangle from the array.
1073 Returns the top coordinate from the array. Uses `getInt` to fetch the value at index 2.
1074 Gets the left coordinate from the array. Returns -1 if not found.
1075 Gets the top coordinate from the array. Returns -1 if not found.
1076 Checks if the destination type is TYPE_BOUNDED. Returns true if so, false otherwise.
1077 Checks if the destination type is bounded by height. Returns true if TYPE_BOUNDED, false otherwise.
1078 Checks if the destination type is TYPE_BOUNDED. Returns true if so, false otherwise.
1079 Creates an OutputStream for writing to the stream. Overloads createOutputStream(COSBase) with no filters.
1080 Creates an OutputStream for the stream, applying the specified filter. @param filter COSName representing the filter to apply. @return OutputStream for writing to the stream.
1081 Creates a thumbnail image object from a COS stream. @param cosStream The COS stream representing the image data. @return A PDImageXObject representing the thumbnail.
1082 Retrieves the mask for the image object, or null if none exists.
1083 Retrieves the soft mask for the image object, or null if none exists.
1084 Writes the matrix representation of an AffineTransform. @param transform AffineTransform object to write.
1085 Starts a new text mode. Throws exception if nested. Writes BEGIN_TEXT operator and sets inTextMode to true.
1086 Ends the current text mode. Throws exception if not in text mode.
1087 Sets the leading (vertical space) for text. @param leading The leading value to set.
1088 Writes a newline operator. Throws exception if not in text mode.
1089 Moves the current text position to the specified offset. @param tx X offset. @param ty Y offset.
1090 Saves the current graphics state onto a stack. Throws exception if in text mode. Pushes state onto stacks.
1091 Restores the graphics state, popping values from stacks. Throws exception if called within a text object.
1092 Sets the stroking color to RGB values. @param r Red component (0.0-1.0) @param g Green component (0.0-1.0) @param b Blue component (0.0-1.0) @throws IOException If an I/O error occurs.
1093 Sets the stroking color using CMYK values. @param c,m,y,k CMYK color components (0.0 to 1.0) @throws IOException If an I/O error occurs.
1094 Sets the stroking color to gray. @param g Gray value (0.0-1.0). Throws IllegalArgumentException if out of range.
1095 Sets the non-stroking color to RGB values. @param r Red value (0..1) @param g Green value (0..1) @param b Blue value (0..1) @throws IOException If an I/O error occurs.
1096 Sets the non-stroking CMYK color and writes it to the stream. @param c, m, y, k CMYK color components (0.0-1.0) @throws IOException If an I/O error occurs.
1097 Sets the non-stroking gray color value. @param g Gray value (0.0-1.0) to set. @throws IllegalArgumentException if g is outside [0, 1].
1098 Adds a rectangle to the content stream. @param x x-coordinate of the rectangle. @param y y-coordinate of the rectangle. @param width Rectangle width. @param height Rectangle height.
1099 Draws a cubic Bezier curve. @param x1, y1, x2, y2, x3, y3 Curve control points. @throws IOException If an I/O error occurs.
1100 Draws a cubic Bezier curve. @param x2, y2, x3, y3 Coordinates of the curve's control points. @throws IOException If an I/O error occurs.
1101 Draws a cubic Bezier curve. @param x1, y1, x3, y3 Coordinates of the curve's control points. @throws IOException If an I/O error occurs.
1102 Moves the current point to the specified coordinates. @param x The x-coordinate. @param y The y-coordinate.
1103 Draws a line to the specified coordinates. @param x x-coordinate of the line endpoint. @param y y-coordinate of the line endpoint.
1104 Draws the outline of the current path. Throws exception if called within a text block.
1105 Closes the current subpath and strokes it. Throws exception if called within a text block.
1106 Fills the current content stream with the non-zero fill operator. Throws exception if called within a text block.
1107 Fills the content stream with even-odd fill operation. Throws exception if called within a text mode block.
1108 Fills and strokes the current path. Throws exception if in text mode.
1109 Fills and strokes the content with even-odd rule. Throws exception if called within a text block.
1110 Closes path, fills, and strokes it. Throws exception in text mode.
1111 Closes, fills, and strokes the content stream with even-odd rule. Throws exception if called within a text block.
1112 Closes the current path. Throws exception if in text mode. Writes the CLOSE_PATH operator.
1113 Clips the content stream to the current path. Throws exception if called within a text block.
1114 Clips the current path using the even-odd rule. Throws exception if called within a text block.
1115 Sets the line width for drawing. @param lineWidth The desired line width. @throws IOException If an I/O error occurs.
1116 Sets the line join style. @param lineJoinStyle Line join style value (0-2). @throws IOException If an I/O error occurs.
1117 Sets the line cap style. @param lineCapStyle Line cap style value (0-2). @throws IOException If an I/O error occurs.
1118 Sets the line dash pattern and phase. @param pattern The dash pattern array. @param phase The phase of the dash pattern.
1119 Sets the miter limit for line drawing. @param miterLimit The miter limit value. @throws IllegalArgumentException if miterLimit is invalid.
1120 Writes the "END_MARKED_CONTENT" operator to finish a marked content sequence.
1121 Sets the character spacing value. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
1122 Sets the word spacing. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
1123 Sets the horizontal scaling for text rendering. @param scale Horizontal scaling factor. @throws IOException If an I/O error occurs.
1124 Sets the text rendering mode. @param rm The rendering mode to set. @throws IOException If an I/O error occurs.
1125 Sets the text rise value. @param rise The vertical offset of the text baseline. @throws IOException If an I/O error occurs.
1126 Creates a PDRectangle from a COSArray, handling invalid values. @param array Array containing rectangle data.
1127 Creates a PDLineDashPattern from a COSArray and phase. @param array COSArray representing the dash pattern. @param phase Initial phase value for the dash pattern.
1128 Returns a string representation of the PDRange object.
1129 Evaluates the PDF type 4 function with given input. @param input Input values to the function. @return Float array of output values.
1130 Reads and generates a patch from the input stream. @param input Input stream for reading patch data.
1131 Reads and constructs a Vertex from the input stream. @param input Input stream for reading vertex data.
1132 Retrieves the first color (at index 0). Returns the PDGamma object at the beginning of the collection.
1133 Retrieves the second color (index 1) as a PDGamma object.
1134 Retrieves the start color (index 2) as a PDGamma object.
1135 Retrieves the fourth color (index 3) from the collection.
1136 Gets the blend mode from the dictionary. Returns BlendMode or NORMAL if not found.
1137 Creates a Matrix from a COSBase. Returns an empty Matrix if invalid. @param base COSBase to create Matrix from.
1138 Sets the highest imported object number in the document. @param importedPage The imported PDF page.
1139 Gets a COSDictionary by firstKey, falls back to secondKey. @param firstKey Primary key for dictionary lookup. @param secondKey Fallback key if firstKey is null. @return COSDictionary or null if not found.
1140 Gets a boolean value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key. @param defaultValue Default value if not found.
1141 Gets an integer value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key. @param defaultValue Default value if not found.
1142 Gets the image filters. Returns a list of filter names.
1143 Gets the color space associated with this shading. @return PDColorSpace object or null if not defined.
1144 Checks if a dictionary is a catalog. Checks if the dictionary has type CATALOG or contains FDF.
1145 Checks if a dictionary is a page tree node. @param node The dictionary to check. @return True if it's a page tree node, false otherwise.
1146 Retrieves the cryptographic filter method from the dictionary. @return COSName representing the filter method, or null.
1147 Gets the stream filter name from the dictionary. Returns IDENTITY if no filter is specified.
1148 Retrieves the string filter name from the dictionary. Returns COSName.IDENTITY if no filter is specified.
1149 Decrypts values within a COSDictionary. @param dictionary Dictionary to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
1150 Converts a character code to its Unicode representation. @param code the character code to convert @return Unicode string or null if conversion is not possible
1151 Returns the soft mask subtype. Lazily initializes if null.
1152 Retrieves the relationship name from the dictionary. @return COSName representing the relationship or null.
1153 Gets the appearance state name from the COSDictionary. @return COSName representing the appearance state.
1154 Checks if the document is encrypted. Returns true if encryption dictionary exists.
1155 Retrieves the encryption dictionary from the trailer. @return COSDictionary containing encryption details, or null.
1156 Parses the FDF document's trailer and root object. Throws IOException if the root object is missing.
1157 Retrieves the PDF AcroForm, applying fixes if necessary. @param acroFormFixup Fixup object, may apply fixes. @return PDAcroForm object or null if not found.
1158 Retrieves viewer preferences from the document catalog. @return PDViewerPreferences object or null if not present.
1159 Retrieves the document names dictionary. Returns null if no names dictionary exists.
1160 Retrieves the document's destination dictionary. @return PDDocumentNameDestinationDictionary or null.
1161 Retrieves the mark information dictionary. @return PDMarkInfo object or null if not present.
1162 Gets the URI dictionary from the document root. @return PDURIDictionary object or null if not present.
1163 Retrieves the structure tree root dictionary. @return PDStructureTreeRoot object or null if not found.
1164 Retrieves optional content properties dictionary. @return PDOptionalContentProperties object or null.
1165 Retrieves the destination name tree node. @return PDDestinationNameTreeNode or null if not found.
1166 Retrieves the embedded files name tree node. @return PDEmbeddedFilesNameTreeNode or null if not found.
1167 Retrieves the JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode or null if not present.
1168 Retrieves the page transition. @return PDTransition object or null if no transition exists.
1169 Retrieves an indirect object from resources by kind and name. @param kind Resource kind (e.g., Fonts, Images). @param name Object name within the resource. @return COSObject or null if not found or not an indirect object.
1170 Retrieves a value from the resources dictionary. @param kind resource kind (e.g., Fonts, Images) @param name resource name @return COSBase value or null if not found.
1171 Gets resource names of a specific kind. @param kind the resource kind (e.g., Font, Image) @return Set of COS names for the given kind.
1172 Retrieves the page associated with this reference. @return A PDPage object or null if no page is found.
1173 Retrieves the PDF page associated with this reference. @return PDPage object or null if no page is found.
1174 Retrieves the PDF page associated with this element. @return PDPage object or null if no page is found.
1175 Retrieves the ID tree as a PDNameTreeNode. Returns null if the ID tree dictionary is not found.
1176 Retrieves the parent tree node, or null if it doesn't exist.
1177 Retrieves a map of class attributes from the COSDictionary. Returns an empty map if no class map dictionary exists.
1178 Retrieves the crypt filter dictionary by name. @param cryptFilterName Name of the crypt filter. @return PDCryptFilterDictionary or null if not found.
1179 Gets the border style dictionary. @return PDBorderStyleDictionary or null if not present.
1180 Retrieves the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1181 Retrieves the signature dictionary. @return PDSignature object or null if no signature exists.
1182 Retrieves the JavaScript dictionary from the FDF. @return FDFJavaScript object or null if not present.
1183 Retrieves the appearance dictionary for the field. @return PDAppearanceDictionary object or null if not found.
1184 Gets the appearance stream reference. @return FDFNamedPageReference or null if not found.
1185 Retrieves the icon fit data. @return FDFIconFit object or null if no icon fit data exists.
1186 Returns the additional actions associated with this field. Returns null if no additional actions are defined.
1187 Retrieves page info from the page's COSDictionary. @return FDFPageInfo object or null if no info dictionary.
1188 Retrieves the template reference. @return FDFNamedPageReference object or null if not found.
1189 Retrieves CID system info from the font dictionary. @return PDCIDSystemInfo object or null if not present.
1190 Retrieves the Panose font classification. @return PDPanose object or null if not found.
1191 Returns the resources dictionary for this font. Creates and caches if not already present.
1192 Retrieves the character procedures dictionary. Lazily initializes if null. @return COSDictionary containing character procedures.
1193 Retrieves the PDDeviceNProcess object associated with the color space. @return PDDeviceNProcess object or null if no process is defined.
1194 Gets the RenderState based on the destination (PRINT, VIEW, EXPORT). @param destination RenderDestination for state lookup @return RenderState or null if not found.
1195 Returns the extended graphics state, creating it if null. Retrieves the extended graphics state dictionary.
1196 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found.
1197 Retrieves the target directory. @return PDTargetDirectory object or null if not found.
1198 Gets Windows launch parameters from the action. @return PDWindowsLaunchParams object or null if not present.
1199 Retrieves the target directory. @return PDTargetDirectory object or null if not found.
1200 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found.
1201 Retrieves the page associated with this annotation. @return PDPage object or null if page is not found.
1202 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if not found.
1203 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found.
1204 Retrieves the previous URI action. Returns null if not found.
1205 Retrieves the external data dictionary, or null if it's absent.
1206 Gets the border style dictionary. @return PDBorderStyleDictionary or null if not present.
1207 Retrieves the border effect dictionary, or null if it's missing.
1208 Retrieves the border effect dictionary. Returns null if not present.
1209 Retrieves appearance characteristics dictionary. Returns null if no MK dictionary exists.
1210 Retrieves the annotation's additional actions. @return PDAnnotationAdditionalActions object or null.
1211 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not present.
1212 Gets the normal appearance. Returns null if it doesn't exist.
1213 Retrieves the filter dictionary. @return Filter dictionary or null if not present.
1214 Retrieves the publication security dictionary. @return PDPropBuildDataDict object or null if not present.
1215 Retrieves the application data dictionary. @return Application data dictionary or null if not present.
1216 Retrieves the MDP (Metadata Dictionary) as a PDSeedValueMDP. @return PDSeedValueMDP object or null if not found.
1217 Retrieves the seed value certificate from the dictionary. @return PDSeedValueCertificate object or null if not present.
1218 Retrieves the time stamp COSDictionary. @return PDSeedValueTimeStamp object or null if not found.
1219 Retrieves the PDPropBuild object from the dictionary. @return PDPropBuild object or null if not present.
1220 Retrieves the structure element from the COS dictionary. @return PDStructureElement object or null if not found.
1221 Checks if the node has child nodes. Returns true if FIRST entry exists in COSDictionary.
1222 Retrieves the default resources (DR) from the form dictionary. @return PDResources object or null if DR dictionary is missing.
1223 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if none.
1224 Gets the signature value. @return PDSignature object or null if not present.
1225 Retrieves the default value for the signature. @return PDSignature object or null if no default value exists.
1226 Retrieves the seed value. @return PDSeedValue object or null if not present.
1227 Retrieves the measure dictionary for viewport settings. @return PDMeasureDictionary object or null if not found.
1228 Retrieves document information for the thread. @return PDDocumentInformation object or null if not found.
1229 Retrieves the first bead associated with the thread. Returns a PDThreadBead object or null if no bead exists.
1230 Retrieves the PDThread object associated with this bead. @return PDThread object or null if thread dictionary is missing.
1231 Returns the next bead in the thread. @return PDThreadBead object representing the next bead.
1232 Retrieves the previous bead in the thread. Uses the COSDictionary associated with the 'V' key.
1233 Retrieves the page associated with this bead. @return PDPage object or null if page is not found.
1234 Retrieves the PDF metadata object. @return PDMetadata object or null if not present.
1235 Retrieves the page metadata as a PDMetadata object. @return PDMetadata object or null if no metadata exists.
1236 Retrieves the differences stream from the FDF document. @return COSStream object representing differences or null.
1237 Retrieves the font file as a PDStream. @return PDStream object representing the font file or null.
1238 Retrieves the font file 2 as a PDStream. @return PDStream object or null if not found.
1239 Retrieves the font file 3 as a PDStream. @return PDStream object or null if not found.
1240 Returns the CID set as a PDStream, or null if not present.
1241 Retrieves the sound stream associated with the action. @return COSStream object representing the sound, or null.
1242 Retrieves the normal icon as a PDFormXObject. Returns null if the icon stream is not found.
1243 Returns the rollover icon as a PDFormXObject, or null. Uses COSName.RI to retrieve the icon stream.
1244 Retrieves the alternate icon as a PDFormXObject. @return PDFormXObject representing the alternate icon, or null.
1245 Retrieves the document ID from the trailer dictionary. Returns a COSArray object representing the document ID.
1246 Retrieves a list of output intents from the document. Returns an empty list if no output intents are found.
1247 Retrieves thread beads from the page's COS array. @return List of PDThreadBead objects, or empty list if none.
1248 Retrieves a list of viewport dictionaries from the page. Returns null if no viewports are defined.
1249 Retrieves child nodes. @return List of child nodes or null if none exist.
1250 Retrieves names from the node's COS array. Returns null if no names array exists.
1251 Retrieves child nodes (PDNumberTreeNode) from the COS array. Returns null if no children exist.
1252 Retrieves numbers from the node's NUMS array. Returns a map of Integer keys to COSObjectable values.
1253 Gets the upper limit from the node's LIMITS array. Returns null if the array or upper limit is not found.
1254 Gets the lower limit from the node's LIMITS array. Returns null if the array or value is not found.
1255 Retrieves the range values from the COS object. @return COSArray representing the range values, or null.
1256 Retrieves the domain values from the COS object. @return COSArray representing domain values or null.
1257 Returns the size of the PDF function. Lazily initializes the size from the COS object.
1258 Retrieves the decode values for the PDF function. @return COSArray object containing decode values.
1259 Retrieves the functions array from the COS object. Lazily initializes if not already present. @return COSArray containing the functions, or null.
1260 Retrieves the bounds array for the Type 3 function. Lazily initializes if not already present. @return COSArray representing the bounds, or null.
1261 Gets the encode array. Lazily initializes if null. @return COSArray representing the encode array.
1262 Retrieves a list of owner user properties from the COSArray. Returns an empty list if no properties are found.
1263 Checks if an edge is attached based on properties. @param edge The edge to check for attachment. @return True if the edge is attached, false otherwise.
1264 Retrieves the annotation's color as an RGB value. @return Color object representing the annotation's color.
1265 Retrieves the interior color of the annotation. Returns null if no color is specified.
1266 Gets the callout appearance as a float array. Returns null if the callout array is not found.
1267 Retrieves a list of ink data as float arrays from the annotation. Returns null if inklist is not found.
1268 Retrieves the line coordinates as a float array from the annotation. Returns null if the line array is not found.
1269 Gets the style of the line's starting point. @return COS name or PDAnnotationLine.LE_NONE if null.
1270 Gets the ending style of the line annotation's endpoint. @return COS name representing the style, or LE_NONE if null.
1271 Retrieves the interior color of the line annotation. Returns null if no color is defined.
1272 Gets the horizontal offset of the caption. Returns 0.f if the array is null.
1273 Gets the vertical offset of the annotation caption. Returns 0.f if the COSArray is null.
1274 Retrieves the polygon's vertices as a float array. Returns null if no vertices are defined.
1275 Retrieves the interior color of the polygon annotation. Returns null if no color is defined.
1276 Gets the vertices of the polyline annotation. @return float array of vertices or null if not present.
1277 Gets the start point ending style from the annotation. @return COS name representing the style, or LE_NONE if null.
1278 Gets the endpoint ending style from the annotation. @return COS name representing the style, or LE_NONE if null.
1279 Retrieves the interior color of the polyline annotation. Returns null if no color is defined.
1280 Retrieves the interior color of the annotation. Returns null if no color is defined.
1281 Retrieves the coordinates of the text markup annotation. @return float array of coordinates or null if not found.
1282 Retrieves the ID value from the FDF document. @return COSArray object representing the ID, or null.
1283 Retrieves a list of FDF fields from the FDF document. @return List of FDFField objects or null if no fields exist.
1284 Retrieves a list of FDF pages from the FDF document. Returns null if no pages are found.
1285 Retrieves child FDFFields from the field's COSArray. @return List of child FDFFields or null if no kids exist.
1286 Retrieves field options from COSArray; returns null if empty.
1287 Retrieves a list of FDF templates from the page. Returns null if no templates are found.
1288 Retrieves a list of FDF fields from the template's FIELDS array. @return List of FDFField objects or null if FIELDS array is missing.
1289 Retrieves the font widths as a list of floats. Uses cached value if available, otherwise fetches from dict.
1290 Gets the color transformation matrix. @return float array representing the matrix, or default if null.
1291 Retrieves component names from the color space dictionary. @return List of component names or an empty list if not found.
1292 Retrieves the background shading array. Lazily initializes if null.
1293 Returns the domain array for the Type 1 shading. Lazily initializes if not already present.
1294 Gets the extend array from the COS object. Lazily initializes if null. @return COSArray representing the extend values.
1295 Retrieves the shading domain COSArray. Lazily initializes if null.
1296 Returns the shading coordinates. Lazily initializes if null.
1297 Retrieves the decode array; fetches it if null. @return COSArray containing decode values, or null.
1298 Retrieves the font setting. @return PDFontSetting object or null if no font setting exists.
1299 Retrieves the fields array from the action. @return COSArray representing the fields or null.
1300 Retrieves the fields array from the action. @return COSArray object containing field definitions.
1301 Calculates rectangle margin differences from COS array. Returns an empty array if margin is null.
1302 Calculates rectangle differences from RD array. @return float array representing rectangle differences.
1303 Retrieves the callout coordinates as a float array. Returns null if no callout is defined.
1304 Retrieves the ink list as a 2D float array. Returns an empty array if no ink list is found.
1305 Retrieves the line coordinates as a float array. Returns null if the line array is not found.
1306 Gets the ending style of the line annotation. Returns LE_NONE if the array is null or too short.
1307 Gets the end point style from the line's appearance. @return String representing the style, or LE_NONE if not found.
1308 Gets the horizontal offset of the caption. Returns 0.f if the offset is not defined.
1309 Gets the vertical offset of the caption. Returns 0.f if no offset is defined.
1310 Retrieves the quad points as a float array. Returns null if no quad points are defined.
1311 Retrieves the polygon vertices as a float array. Returns null if no vertices are defined.
1312 Retrieves the polygon's path as a 2D float array. @return Path array or null if no path is defined.
1313 Gets the start point ending style from the line ending array. Returns LE_NONE if the array is null or too short.
1314 Gets the endpoint ending style from the LE array. Returns LE_NONE if array is null or too short.
1315 Retrieves the vertices of the polyline as a float array. Returns null if no vertices are defined.
1316 Retrieves rectangle differences from the annotation. Returns an empty array if no differences exist.
1317 Retrieves the quad points as a float array. Returns null if no quad points are defined.
1318 Gets the subfilter list from the dictionary. Returns an empty list if no subfilter is present.
1319 Retrieves the digest method names from the dictionary. Returns an empty list if no digest method is found.
1320 Retrieves the reasons associated with the seed value. @return List of reasons as strings, or an empty list if null.
1321 Retrieves legal attestations as a list of strings. Returns an empty list if no attestations are found.
1322 Retrieves the subject byte arrays from the certificate dictionary. @return List of byte arrays or null if the subject is absent.
1323 Retrieves the key usage OIDs from the certificate dictionary. @return List of key usage strings or null if not present.
1324 Retrieves the issuer byte arrays from the dictionary. @return List of byte arrays representing the issuer or null.
1325 Retrieves the OID values as byte arrays from the dictionary. @return List of byte arrays representing the OID values, or null.
1326 Retrieves the byte range array from the signature dictionary. Returns an empty array if no byte range is found.
1327 Retrieves form fields in calculation order. Returns an empty list if no calculation order is defined.
1328 Gets the indices of selected options. Returns empty list if no options are selected.
1329 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return PDNumberFormatDictionary[] or null if COSArray X is missing.
1330 Retrieves an array of PDNumberFormatDictionary objects from Y array. Returns null if Y array is not present.
1331 Retrieves an array of PDNumberFormatDictionary objects for distances. @return Array of dictionaries or null if no distances are defined.
1332 Retrieves an array of PDNumberFormatDictionary objects representing areas. Returns null if no areas are defined.
1333 Retrieves an array of PDNumberFormatDictionary objects for angles. Returns null if no angles are defined in the dictionary.
1334 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return PDNumberFormatDictionary[] or null if COSArray is null.
1335 Retrieves the coordinate system origin as a float array. Returns null if the origin is not found in the dictionary.
1336 Retrieves the visibility policy name from the dictionary. Returns ANY_ON if the policy is not defined.
1337 Gets the long value associated with a key, or -1 if absent. @param key key to look up @return long value or -1 if not found
1338 Gets the long value associated with a key, or -1 if absent. @param key key to look up @return long value or -1 if not found
1339 Gets the long value associated with a key, or defaultValue. @param key key to look up @param defaultValue default value if key is not found
1340 Sets the startxref position and resolves xref trailer data. @param startxrefBytePosValue StartXref byte position.
1341 Gets a float value by key. Returns -1 if not found. @param key the key to look up @return float value or -1 if not found
1342 Gets a float value from the dictionary. @param key the key to look up @return float value or -1 if not found
1343 Gets a float value from the dictionary, using defaultValue if not found. @param key the key to look up @param defaultValue the default value to return if not found
1344 Gets the user unit value from the page, defaulting to 1.0f.
1345 Returns the guideline width from the dictionary. Defaults to 1 if not found.
1346 Gets the opacity of the annotation. Uses 1f as default if not found in the dictionary.
1347 Retrieves the font weight from the dictionary. Returns 0 if the weight is not specified.
1348 Gets the italic angle from the dictionary, defaults to 0.
1349 Returns the ascent value from the dictionary, 0 if not found.
1350 Returns the font descent value. @return Font descent value, 0 if not found.
1351 Gets the leading value from the dictionary, defaults to 0.
1352 Returns the cap height of the font. Uses absolute value if negative.
1353 Returns the x-height of the font. Handles potential negative values.
1354 Gets the vertical stem width from the dictionary. @return StemV value or 0 if not found.
1355 Gets the stem height from the dictionary. Returns 0 if the value is not found.
1356 Gets the average font width. @return Average width or 0 if not found.
1357 Gets the maximum width of the font. @return Maximum width or 0 if not found.
1358 Gets the missing width from the dictionary. @return float value or 0 if not found.
1359 Gets the gamma value from the dictionary, defaults to 1.0f.
1360 Returns the x-step value from the COS object, defaulting to 0.
1361 Gets the Y step value from the COS object, defaulting to 0.
1362 Gets the volume of the action. Returns 1 if out of range.
1363 Gets the leader line length from the COS object. Returns 0 if the property is not found.
1364 Gets the leader line extension length from the COS object. Returns 0 if the value is not found.
1365 Gets the leader line offset length from the COS object. Returns 0 if the value is not found.
1366 Gets the constant opacity of the annotation. Returns 1 if the value is not found in the dictionary.
1367 Retrieves the border width. Returns 0 if COSName, otherwise defaultValue.
1368 Gets the transition duration in seconds. Defaults to 1 if not present.
1369 Gets the fly scale value. Returns 1 if not found.
1370 Extracts text from defined regions on a PDF page. @param page The PDF page to extract text from.
1371 Gets the color space. Delegates to getColorSpace(PDResources).
1372 Creates a PDPropertyList or subtype based on the dictionary type. @param dict The COSDictionary to create the property list from.
1373 Gets the line width from the dictionary. @return Line width as a Float or null if not found.
1374 Retrieves the miter limit value from the dictionary. @return Miter limit value as Float or null if not found.
1375 Gets the flatness tolerance value from the graphics state.
1376 Gets the smoothness tolerance value from the dictionary.
1377 Retrieves the stroking alpha constant from the dictionary.
1378 Gets the non-stroking alpha constant from the dictionary.
1379 Retrieves COS object offsets after triggering a brute-force search. Returns a map of COSObjectKey to Long (offset).
1380 Writes a COSBase object to the output stream. @param obj The COSBase object to write.
1381 Writes a reference to a COSBase object to the output stream. @param obj The COSBase object to write a reference for.
1382 Saves the FDF document to the provided output stream. @param output The output stream to write the FDF data to. @throws IOException if an I/O error occurs.
1383 Removes all elements from the array, resetting its state.
1384 Removes and returns the element at the specified index. @param i index of the element to remove @return The removed COSBase object
1385 Removes an element from the array. @param o COSBase object to remove @return True if the element was removed.
1386 Removes all items from the dictionary and updates its state.
1387 Removes a key-value pair from the dictionary. @param key The key of the item to remove.
1388 Updates the origin document state if different. @param updateState COSUpdateState object to compare.
1389 Sets the COSObject to null, updating its state if not already null.
1390 Sets origin doc state, recursively updates child update infos. @param originDocumentState State of the origin document. @param dereferencing Flag indicating whether dereferencing.
1391 Gets string at index, returns null if not a COSString. @param index Element index. @return String at index or null.
1392 Gets the name as a String from the dictionary. @param key the key to look up in the dictionary @return String value or null if not found
1393 Gets name as string, using default if not found. @param key The key to look up. @param defaultValue Value if key is not present.
1394 Checks if a XRef stream exists at the given offset. @param startXRefOffset Offset to check for a XRef stream. @return True if a XRef stream exists, false otherwise.
1395 Gets the page mode from the document catalog. Returns PageMode.USE_NONE if mode is null or invalid.
1396 Gets the PageLayout from the document catalog. Returns PageLayout.SINGLE_PAGE if invalid or empty.
1397 Gets the PDF version number. @return String representing the PDF version, or null.
1398 Gets the trapped status of the PDF document. @return String value or null if not found.
1399 Gets the style name from the root dictionary. @return Style name or null if not found.
1400 Returns the type name of the COSDictionary. Uses COSName.TYPE to retrieve the type.
1401 Gets the owner of the attribute. @return String representation of the owner, or null.
1402 Returns the structure type as a String, using COSName.S.
1403 Creates a PDStructureNode based on the provided COSDictionary. @param node The COSDictionary representing the structure node. @return A PDStructureNode (PDStructureTreeRoot or PDStructureElement).
1404 Returns the type of this structure node. @return String representing the node's type.
1405 Gets the property name as a String. Uses COSName.N to retrieve the name.
1406 Gets the language of the marked content. Returns null if properties are not set.
1407 Returns the type of the artifact. @return String representing the artifact's type.
1408 Gets the subtype of the marked content artifact. Uses `getProperties().getNameAsString(COSName.SUBTYPE)`
1409 Gets the filter name from the dictionary. @return Filter name as String, or null if not found.
1410 Gets the subfilter name from the dictionary. @return Subfilter name as String, or null if not found.
1411 Creates an FDFAnnotation based on the subtype in a COSDictionary. @param fdfDic The COSDictionary representing the annotation. @return An FDFAnnotation or null if the type is unsupported.
1412 Gets the annotation's intent. @return String representing the intent, or null if not set.
1413 Gets the line ending style from the annotation's dictionary.
1414 Gets the FDF version from the catalog. @return String representing the FDF version, or null.
1415 Returns the document encoding, defaulting to "PDFDocEncoding".
1416 Gets the scale option from the fit object. Returns SCALE_OPTION_ALWAYS if not found.
1417 Returns the scale type, defaulting to proportional if null.
1418 Gets the base font name from the font dictionary. @return Base font name or null if not found.
1419 Gets the font type. @return Font type string or null if not found.
1420 Gets the font subtype from the dictionary. @return Subtype string or null if not found.
1421 Retrieves the font name from the font dictionary. @return Font name as String, or null if not found.
1422 Gets the font stretch value. @return Font stretch value or null if not present.
1423 Gets the base font name from the font dictionary. @return Base font name as String, or null if not found.
1424 Retrieves the base font name from the font dictionary. @return Base font name as a String, or null if not found.
1425 Gets the base font name from the font dictionary. @return Base font name or null if not present.
1426 Gets the base font name. @return Base font name as String, or null if not present.
1427 Checks if the DeviceN color space subtype is "NChannel".
1428 Gets the action type. @return String representing the action type, or null.
1429 Gets the action subtype. @return Subtype string or null if not found.
1430 Creates a PDAction based on the action type in a COSDictionary. @param action The COSDictionary representing the action. @return A PDAction object or null if action is invalid.
1431 Gets the subtype of the annotation from the COSDictionary.
1432 Gets the caption positioning from the COS object. @return String value or null if not found.
1433 Retrieves the intent of the annotation. @return String representing the intent, or null if not set.
1434 Gets the subtype of the external data dictionary. @return Subtype string or null if not found.
1435 Gets the name of the property dictionary. Uses `getNameAsString` to retrieve the name.
1436 Gets the filter name from the dictionary. @return Filter name as String, or null if not found.
1437 Gets the URL type from the certificate dictionary. @return URL type string or null if not present.
1438 Gets the signature filter name. @return Filter name or null if not present.
1439 Gets the subfilter name from the dictionary. @return String representing the subfilter, or null.
1440 Returns the field type as a String. Uses COSName.FT to retrieve the field type.
1441 Gets the name of the viewport. @return String representing the viewport's name.
1442 Gets the duplex setting. @return String value or null if not found.
1443 Retrieves a string value from the dictionary by key. @param key the key to look up in the dictionary @return String value or null if not found
1444 Gets a string value by key, using defaultValue if null. @param key The key to retrieve. @param defaultValue Default value if key is not found.
1445 Retrieves the document's language code from the catalog. @return String representing the language code, or null.
1446 Retrieves the PDF document title. @return String representing the document title or null.
1447 Retrieves the PDF document author. @return Author string or null if not present.
1448 Retrieves the PDF document subject. @return Subject string or null if not found.
1449 Retrieves the PDF document's keywords. @return String containing keywords or null if absent.
1450 Retrieves the PDF document creator. @return Creator string or null if not found.
1451 Retrieves the PDF producer. @return Producer string or null if not found.
1452 Retrieves the prefix associated with the page label range. @return Prefix string or null if not found.
1453 Retrieves the file Unicode name from the file system. @return Unicode file name or null if not found.
1454 Retrieves the file name from the file specification dictionary.
1455 Retrieves the DOS filename from the file system dictionary.
1456 Retrieves the MAC address from the file system dictionary.
1457 Retrieves the file's UNIX timestamp. @return UNIX timestamp as a string, or null if not found.
1458 Retrieves the file description from the file system. @return File description string, or null if not found.
1459 Retrieves the element identifier from the COS object. @return String identifier or null if not found.
1460 Retrieves the title of the PDF structure element. @return The title string, or null if not present.
1461 Retrieves the language code of this element. @return Language code string, or null if not set.
1462 Gets the alternate description from the COS object. Uses COSName.ALT as the key.
1463 Returns the expanded-form title. Uses COSName.E to retrieve the value.
1464 Retrieves the actual text content of the element. Uses COSName.ACTUAL_TEXT as the key.
1465 Returns the formatted value of the property. Retrieves the formatted value string from the COS object.
1466 Retrieves the actual text associated with this marked content. Returns null if no properties are set.
1467 Gets the alternate description from properties. Returns null if properties are null or ALT is not found.
1468 Gets the expanded form string from properties, or null.
1469 Gets the date associated with the annotation. @return Date string or null if not present.
1470 Gets the annotation name. @return Annotation name or null if not set.
1471 Retrieves the contents of the annotation. @return String containing the annotation's contents, or null.
1472 Gets the annotation title. @return Annotation title string, or null if not set.
1473 Retrieves the annotation subject. @return Subject string or null if not found.
1474 Gets the symbol string for the annotation. @return The symbol string, or null if not found.
1475 Gets the rotation angle of the annotation. @return Rotation angle as a string, or null if not set.
1476 Retrieves the default appearance string from the annotation. @return Default appearance string or null if not found.
1477 Retrieves the default style of the annotation. @return String representing the default style, or null.
1478 Retrieves the caption style from the annotation dictionary. @return Caption style string or null if not found.
1479 Returns the state of the annotation. @return String representing the annotation's state, or null.
1480 Retrieves the state model for the annotation. @return String representing the state model or null.
1481 Retrieves the status value from the FDF dictionary. @return String representing the status, or null if absent.
1482 Retrieves the target value from the FDF dictionary. @return String representing the target, or null if absent.
1483 Gets the partial field name from the field dictionary. Returns null if the name is not found.
1484 Gets the name of the named page reference. @return The name as a String, or null if not found.
1485 Retrieves the font family name from the dictionary. @return Font family name or null if not found.
1486 Retrieves the character set name from the dictionary. @return Character set name or null if not found.
1487 Retrieves the name of the optional content group. @return The name of the OCG, or null if not set.
1488 Retrieves the names of optional content groups. @return String array of group names, empty if no groups exist.
1489 Retrieves the 'F' parameter from the action dictionary. @return String value of 'F' or null if not found.
1490 Retrieves the "D" parameter value from the action dictionary.
1491 Retrieves the 'O' parameter from the action dictionary. @return String value of 'O' or null if not found.
1492 Retrieves the value associated with the "P" key in the action dictionary.
1493 Retrieves the URI string from the action dictionary. Returns null if no URI is found or decoding fails.
1494 Retrieves the filename associated with this target directory. @return Filename string or null if not present.
1495 Retrieves the annotation name from the dictionary. @return Annotation name or null if not found.
1496 Retrieves the filename from the parameters dictionary. @return Filename string or null if not found.
1497 Retrieves the directory path from the parameters. @return Directory path string, or null if not found.
1498 Retrieves the execute parameter from the dictionary. @return String value or null if not found.
1499 Retrieves the annotation contents from the dictionary. @return String containing the annotation contents, or null.
1500 Gets the modification date of the annotation. @return String representing the modification date, or null.
1501 Retrieves the annotation name from the COSDictionary. @return Annotation name string or null if not found.
1502 Gets the default appearance string from the COS object.
1503 Retrieves the default style string from the COS object.
1504 Returns the title of the popup. Retrieves the title from the COS object.
1505 Retrieves the annotation subject. @return Annotation subject string or null if not found.
1506 Retrieves the annotation's state from the COS object. @return String representing the state, or null if not found.
1507 Gets the state model from the annotation's dictionary. @return String representing the state model, or null.
1508 Retrieves the normal caption from the underlying dictionary.
1509 Retrieves the rollover caption from the underlying dictionary. Returns null if the caption is not found.
1510 Retrieves the alternate caption from the appearance dictionary. @return String alternate caption or null if not found.
1511 Retrieves the date property from the dictionary. @return Date string or null if not found.
1512 Retrieves the operating system name from the dictionary. Returns name from COSArray or directly from dictionary.
1513 Retrieves Subject DN as list of maps. @return List of maps or null if not present.
1514 Retrieves the URL associated with the certificate. @return URL string or null if not present.
1515 Retrieves the URL from the dictionary. @return String URL or null if not found.
1516 Retrieves the signature name from the dictionary. @return Signature name or null if not found.
1517 Gets the signature location from the dictionary. @return Signature location string or null if not found.
1518 Retrieves the signature reason from the dictionary. @return The signature reason string or null if not present.
1519 Retrieves the contact information from the signature dictionary. @return Contact information string or null if not present.
1520 Retrieves the title of the outline item. @return The title string, or null if not present.
1521 Retrieves the partial name of the field from the dictionary.
1522 Gets the alternate field name from the dictionary. @return Alternate field name or null if not found.
1523 Retrieves the mapping name from the dictionary. @return String representing the mapping name, or null.
1524 Gets the default style string from the COS object. Returns the style string or null if not found.
1525 Gets the scale ratio from the COSDictionary. @return Scale ratio as a string, or null if not found.
1526 Retrieves the role map from the COSDictionary. Returns an empty map if no role map exists.
1527 Retrieves the available options for the choice field. Uses getCOSObject and getPairableItems to fetch options.
1528 Retrieves display values for choice options. Uses getCOSObject and FieldUtils.getPairableItems.
1529 Gets the button's value, potentially from export values. Returns "Off" if no value is set.
1530 Gets the value(s) of the choice field. Returns a list of strings representing selected options.
1531 Retrieves the default value for the choice field. Returns a list of strings representing the default value.
1532 Creates a new, empty PDSimpleFileSpecification. Initializes the file to an empty COSString.
1533 Sets the file name for the specification. @param fileName The name of the file.
1534 Initializes a `PDNamedDestination` with a `COSString`. @param dest The COSString representing the named destination.
1535 Sets the named destination. Null if dest is null. @param dest The name of the destination.
1536 Reads the generation number from the PDF source. Throws IOException if invalid (negative or > GENERATION_NUMBER_THRESHOLD).
1537 Reads an object number from the PDF source, validating its range. @return The object number as a long. @throws IOException if the object number is invalid.
1538 Generates user password based on revision. @param ownerPassword Owner password. @param owner Owner data.
1539 Constructs a TensorPatch with control points and color coordinates. @param tcp Array of control points. @param color Color coordinates for the patch.
1540 Encrypts data using RC4 cipher. @param finalKey Encryption key. @param input Input stream to encrypt. @param output Output stream for encrypted data.
1541 Returns the font provider. Sets a default if none is set.
1542 Generates shaded triangles from coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects. @return List of ShadedTriangle objects.
1543 Creates a PDICCBased object, caching if possible. @param iccArray ICC profile array. @param resources PDResources object. @return PDICCBased object.
1544 Constructs a CoonsPatch with color coordinates and reshapes control points. @param points Array of control points. @param color 2D array of color values.
1545 Processes a text position, suppressing duplicates based on overlap. Handles diacritic merging for accurate text rendering.
1546 Processes a TextPosition, handling Unicode and suppression. Considers article division and diacritic merging.
1547 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
1548 Starts a marked content sequence with the given tag. @param tag The tag associated with the marked content.
1549 Begins a marked content sequence with a tag and MCID. @param tag Content tag. @param mcid Marked content ID.
1550 Sets the marked content point. @param tag COSName representing the tag. @throws IOException If an I/O error occurs.
1551 Writes a COSString to an OutputStream. @param string The COSString to write. @param output The OutputStream to write to.
1552 Writes a byte array as a string to an output stream. @param bytes The byte array to write. @param output The output stream to write to.
1553 Initializes the engine with a page and adds graphics operators. @param page The PDF page to associate with this engine.
1554 Constructs a PDFMarkedContentExtractor with default encoding.
1555 Default constructor. Initializes bead separation to false.
1556 Retrieves a COSBase object from a path within the dictionary. @param objPath Path to the object, delimited by PATH_SEPARATOR. @return COSBase object at the specified path, or null if not found.
1557 Retrieves the value of a specified attribute. @param attrName The name of the attribute to retrieve. @return COSBase value or null if not found.
1558 Gets attribute value, returning default if not found. @param attrName Attribute name. @param defaultValue Value if attribute is missing.
1559 Checks if an attribute is specified in the dictionary. @param name Attribute name to check. @return True if attribute is specified, false otherwise.
1560 Extracts an array of strings from a COSArray. @param name Name of the COSArray to extract from. @return String array or null if not a COSArray.
1561 Gets name or array of names, or default if not found. @param name Name to retrieve. @param defaultValue Value if name/array not found.
1562 Gets number or name value, returns default if not found. @param name Attribute name. @param defaultValue Default value if not found.
1563 Gets number or array of numbers. Returns default if not found.
1564 Retrieves color value by name. @param name The name of the color. @return PDGamma object or null if not found.
1565 Creates a unique key for a resource dictionary. @param kind Resource kind (e.g., Font, Image). @param prefix Prefix for the key. @return A unique COSName representing the key.
1566 Sets the COSInteger at the specified index. @param index The index of the element to set. @param intVal The integer value for the element.
1567 Parses a string to a COSNumber (Integer or Float). @param number String representation of the number. @return COSNumber object.
1568 Appends a kid element to the current element. @param mcid The MCID of the kid element to append.
1569 Returns the COSBase representation of the transition angle. @return COSBase object representing the transition angle.
1570 Parses a COSHexString from the source. Returns COSString or throws IOException on error.
1571 Creates a default PDRectangle with zero coordinates and dimensions.
1572 Creates a PDRectangle with specified width and height at origin (0,0). @param width Rectangle width. @param height Rectangle height.
1573 Creates a PDRectangle based on bboxMinX, bboxMinY, bboxMaxX, bboxMaxY.
1574 Calculates a rectangle representing the difference from a base rectangle. Returns a PDRectangle object.
1575 Calculates a padded rectangle by adding padding to all sides. @param rectangle The original rectangle. @param padding The padding to apply to each side.
1576 Adjusts a rectangle by given differences. @param rectangle The rectangle to adjust. @param differences Array of differences [x, y, width, height] @return New rectangle with adjusted dimensions.
1577 Applies differences to a rectangle. @param rectangle The rectangle to modify. @param differences Array of differences [x, y, width, height] @return Modified rectangle.
1578 Applies padding to a rectangle. @param box The rectangle to pad. @param padding The padding amount. @return A new PDRectangle with applied padding.
1579 Initializes the XRefStream with a new COSStream from the document. @param cosDocument The COSDocument to get the stream from.
1580 Creates a new PDObjectStream from a PDF document. @param document the PDF document to create the stream from @return A new PDObjectStream object.
1581 Creates a PDStream associated with the given document. @param document The PDF document to associate with the stream.
1582 Creates a PDStream associated with a COSDocument. @param document The COSDocument the stream belongs to.
1583 Creates a PDStream from an InputStream, applying filters. @param input Input stream for the stream data. @param filters COS filters to apply to the stream.
1584 Creates a COSStream from an InputStream, copying its contents. @param document The PDF document. @param rawInput Input stream to copy from. @return COSStream containing the copied data.
1585 Encodes input stream to output stream using filter parameters.
1586 Default constructor for PDDefaultAttributeObject.
1587 Creates a new PDUserAttributeObject, sets the owner to OWNER_USER_PROPERTIES.
1588 Protected default constructor for PDStandardAttributeObject.
1589 Default constructor for PDOutlineItem, calls superclass constructor.
1590 Constructs a PDVariableText object with the provided AcroForm.
1591 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
1592 Returns the appearance stream for this entry. Throws IllegalStateException if not a stream.
1593 Returns sub-dictionary appearance streams. Throws exception if not a sub-dictionary.
1594 Creates a PDXObject based on the provided COSBase and resources. @param base The COSBase object representing the XObject. @param resources The PDResources object for resource management.
1595 Adds a TrueType font. Handles OTF/TTF differences and errors. @param ttfFile The TrueType font file.
1596 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
1597 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
1598 Retrieves a PDDestination by name. @param name The name of the destination. @return PDDestination object or null if not found.
1599 Retrieves the destination object for this action. Uses COSName.D to get the destination from the COS object.
1600 Gets the destination object. @return PDDestination object representing the destination. @throws IOException if an error occurs during creation.
1601 Retrieves the destination object for this annotation link. Uses COSName.DEST to find the destination within the COS object.
1602 Retrieves the destination object for this outline item. @return PDDestination object or null if destination is missing.
1603 Constructs a PDComboBox object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
1604 Constructs a PDListBox object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
1605 Constructs a COSParser with a source, password, keyStore, and keyAlias. @param source Source stream. @param password Password for decryption. @param keyStore KeyStore for decryption. @param keyAlias Key alias for decryption.
1606 Creates an OutputStream for writing to the stream.
1607 Writes data to the appearance stream. @param data byte array to write @param appearanceStream the appearance stream
1608 Creates a content stream from an appearance stream, optionally compressing it. @param appearance The parent appearance stream. @param compress Whether to compress the content stream.
1609 Sets the text matrix using the provided matrix. @param matrix Matrix object representing the transformation @throws IOException If an I/O error occurs
1610 Applies a matrix transformation to the content stream. @param matrix Matrix object representing the transformation. @throws IOException If an I/O error occurs.
1611 Returns the bounding box of the artifact. @return PDRectangle object or null if not defined.
1612 Retrieves the bounding box of the object. @return PDRectangle object or null if bounding box is missing.
1613 Gets the rectangle associated with the annotation. @return PDRectangle object or null if not present.
1614 Retrieves the fringe rectangle of the annotation. @return PDRectangle object or null if fringe data is missing.
1615 Gets the fringe rectangle. @return PDRectangle representing the fringe or null if absent.
1616 Retrieves the rectangle defining the annotation's fringe. @return PDRectangle object or null if fringe data is missing.
1617 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe, or null.
1618 Retrieves the font bounding box from the font descriptor. @return PDRectangle object representing the bounding box, or null.
1619 Gets the font bounding box. @return PDRectangle object or null if not present.
1620 Gets the bounding box of the XObject. @return PDRectangle object or null if not defined.
1621 Retrieves the bounding box of the tiling pattern. @return PDRectangle object or null if not defined.
1622 Returns the bounding box of the shading. Creates it if null. Uses COSName.BBOX to retrieve.
1623 Retrieves the rectangle associated with the annotation. Returns a PDRectangle or null if invalid.
1624 Calculates the difference rectangle. @return PDRectangle object or null if RD is missing.
1625 Calculates the rectangle difference. @return PDRectangle object or null if not present.
1626 Returns the bounding box of the viewport. @return PDRectangle object or null if bounding box is missing.
1627 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if rectangle doesn't exist.
1628 Sets the line dash pattern using a COSArray and phase. @param array COSArray representing the dash pattern @param phase Initial phase value for the dash pattern
1629 Retrieves the line dash pattern from the graphics state. Returns PDLineDashPattern or null if not found/invalid.
1630 Creates a stencil image from a PDImage with a given paint. @param pdImage Image to create stencil from. @param paint Paint used for the stencil background.
1631 Retrieves the transformation matrix from the COS object.
1632 Returns the pattern's matrix from the COSDictionary. Uses COSName.MATRIX to retrieve the matrix value.
1633 Retrieves the shading matrix from the dictionary. Returns a Matrix object, created from COSBase.
1634 Gets an inheritable attribute from a COSDictionary. @param node Dictionary to search, recursively up the tree. @param key Attribute key to retrieve. @return COSBase value or null if not found.
1635 Gets a boolean value for the given key, using a default if absent. @param key The key to retrieve the boolean value for. @param defaultValue The default value if the key is not found.
1636 Gets an integer value from the dictionary. @param key Primary key. @param defaultValue Default if key not found.
1637 Gets an integer value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key.
1638 Creates a PDInlineImage with decoding parameters, data, and resources. @param parameters Decoding parameters as COSDictionary. @param data Raw image data as byte array. @param resources Resources associated with the image.
1639 Gets the image suffix based on its filters. Returns "png" if no filters.
1640 Retrieves COS objects matching specified types. @param type1 First COS object type. @param type2 Second COS object type. @return List of COS objects of the specified types.
1641 Converts a character code to its Unicode representation. @param code character code to convert @param customGlyphList unused parameter @return Unicode string or null if conversion fails
1642 Checks if the PDF document is encrypted. Delegates to the underlying document's encryption check.
1643 Parses the FDF document and returns an FDFDocument object. Throws IOException if parsing fails.
1644 Retrieves the PDF AcroForm, applying default fixups. @return PDAcroForm object or null if not found.
1645 Retrieves a color space by name, caching if available. @param name Color space name. @param wasDefault Whether the color space was default. @return PDColorSpace object or new instance.
1646 Checks if a color space exists with the given name. @param name The name of the color space to check. @return True if the color space exists, false otherwise.
1647 Retrieves an extended graphics state by name, caching results. @param name Name of the extended graphics state. @return PDExtendedGraphicsState object or null if not found.
1648 Checks if a resource is an image XObject. @param name resource name @return true if resource is an image XObject, false otherwise
1649 Gets the color space names. @return Set of COS names for color spaces.
1650 Gets the XObject resource names. Uses `getNames` to retrieve names of type XOBJECT.
1651 Gets font resource names. @return Set of COS names for fonts.
1652 Gets the names of properties resources. Uses getNames to retrieve the property names.
1653 Gets the names of all shading resources. Uses `getNames` to retrieve names of type SHADING.
1654 Gets the names of all pattern resources. Calls getNames with COSName.PATTERN.
1655 Gets the names of the Ext GState resources. Uses getNames with COSName.EXT_G_STATE. @return Set of COS names for Ext GState resources.
1656 Retrieves the standard crypt filter dictionary. Uses COSName.STD_CF to identify the filter.
1657 Retrieves the default crypt filter dictionary. Uses COSName.DEFAULT_CRYPT_FILTER to find the dictionary.
1658 Retrieves a character procedure for a given code. @param code The character code to retrieve. @return PDType3CharProc object or null if not found.
1659 Gets the rollover appearance. Returns normal appearance if null.
1660 Gets the down appearance. Returns normal appearance if null.
1661 Returns the first child outline item. Uses `getOutlineItem` to retrieve it by name.
1662 Retrieves the last child outline item. Uses `getOutlineItem` with the `COSName.LAST` constant.
1663 Gets the signature value. @return PDSignature object or null if not present.
1664 Retrieves a value from the node, searching numbers or children. @param index The index of the value to retrieve.
1665 Returns the number of output parameters. Uses range values to calculate the count.
1666 Creates a PDRange object for output, using range values and index n. @param n Index for the range. @return PDRange object.
1667 Clips input values to defined ranges. @param inputValues array of values to clip @return Clipped array, or original if no range defined.
1668 Returns the number of input parameters. Caches the value after retrieving domain values.
1669 Creates a PDRange object using domain values and an index. @param n Index for the PDRange object. @return PDRange object with domain values and index.
1670 Calculates a sample index from a coordinate vector. @param vector Array of coordinate values. @return The calculated sample index.
1671 Retrieves the decode range for a given parameter number. @param paramNum Parameter index for which to get decode range. @return PDRange object or null if not found.
1672 Gets the encode array for a parameter. @param n Parameter index. @return PDRange object containing the encode array.
1673 Checks if the top edge of the artifact is attached. Delegates to the isAttached method with "Top" as the edge.
1674 Checks if the bottom edge is attached. Delegates to isAttached with "Bottom" as the edge.
1675 Checks if the left edge is attached. Uses isAttached method with "Left" as the edge name.
1676 Checks if the right edge is attached. Uses `isAttached` method with "Right" as the edge.
1677 Constructs a PDCIDFont object. @param fontDictionary CID font dictionary. @param parent Parent PDType0Font object.
1678 Creates a DictionaryEncoding with a font encoding. @param fontEncoding The font encoding dictionary.
1679 Constructs a `DictionaryEncoding` with base encoding. @param fontEncoding Font encoding dictionary. @param isNonSymbolic Whether the font is non-symbolic. @param builtIn Font's built-in encoding.
1680 Constructs a ShadingContext with provided shading data and transforms. @param shading The PDShading object.
1681 Gets the PDRange for a given parameter number. @param paramNum Parameter index; must be within decode range. @return PDRange object or null if parameter is out of range.
1682 Reads the signed content from the PDF file. @param pdfFile Input stream for the PDF file. @return Byte array containing the signed content.
1683 Extracts the signed content from a PDF file. @param pdfFile Byte array representing the PDF file @return Byte array containing the signed content @throws IOException If an I/O error occurs
1684 Gets the revision number from the dictionary. @return Revision number, or -1 if not present.
1685 Gets the minimum revision number from the dictionary. @return Minimum revision number, or -1 if not found.
1686 Creates a view of the stream data, applying filters if present. Returns a RandomAccessRead object for stream access.
1687 Gets the float value associated with the given name. @param name the name of the attribute @return float value or -1 if not found
1688 Gets the conversion factor from the COSDictionary. Returns -1 if not found.
1689 Gets the leader line length from the annotation. Returns a float value, or -1 if not found.
1690 Gets the leader extend value from the annotation. @return float value or -1 if not found
1691 Gets the leader offset from the annotation dictionary. @return Leader offset value, or -1 if not found.
1692 Gets the value of the 'V' parameter from the dictionary.
1693 Gets the CYX value from the COSDictionary. @return CYX float value or -1 if not found.
1694 Gets a number from the dictionary, using defaultValue if not found. @param name attribute name @param defaultValue default value if not found
1695 Gets the intensity of the border effect. Returns 0 if the "I" property is not found.
1696 Computes font height, adjusting for bounding box and descriptors. @param font The PDFont object to process. @return Font height in text space.
1697 Returns the default position vector for a given CID. @param cid The CID value.
1698 Retrieves a PDPropertyList by name, caching if available. @param name Name of the property list. @return PDPropertyList or null if not found.
1699 Gets the optional content property list, or null if absent.
1700 Gets the optional content dictionary, or null if absent. Returns a PDPropertyList or null.
1701 Retrieves optional content groups (OCGs) from the dictionary. Returns a list of PDPropertyLists or an empty list if not found.
1702 Gets the optional content property list, or null if absent.
1703 Validates xref offsets, falling back to brute-force search if needed.
1704 Saves the FDF document to the specified file. @param fileName File to save the FDF data to. @throws IOException if an I/O error occurs.
1705 Removes the specified object from the list. @param o object to be removed @return true if object was found and removed, false otherwise
1706 Removes the element at the specified index. @param index index of the element to remove @return The removed element.
1707 Removes an object from the array, handling dereferenced objects. @param o COSBase object to remove @return True if the object was removed.
1708 Removes a user property from the COS array. @param userProperty The property to remove.
1709 Removes the specified subject from the certificate's subject array. @param subject The subject to remove as a byte array.
1710 Removes a specified key usage extension from the dictionary. @param keyUsageExtension The key usage extension to remove.
1711 Removes the specified issuer from the issuer array. @param issuer The issuer byte array to remove.
1712 Removes an OID from the OID array in the dictionary. @param oid The OID to remove as a byte array.
1713 Clears the internal map and actuals collection.
1714 Removes a key-value pair. Removes from both map and actuals. @param key The key to remove. @return The removed value, or null if not found.
1715 Recursively collects dictionaries for PDF updates. Checks exclusion, updates origin, and processes children.
1716 Collects COS objects and their updates recursively. @param object The COSObject to collect. @return False, always.
1717 Sets the origin document state, recursively updating child infos. @param originDocumentState State of the origin document.
1718 Gets the upper limit from the node's limits array. @return String representing the upper limit, or null.
1719 Gets the lower limit string from the node's limits array. Returns null if the array or string at index 0 is absent.
1720 Retrieves the attribute value by name. @param name The name of the attribute to retrieve.
1721 Gets the RenderingIntent from the dictionary. @return RenderingIntent or null if not found.
1722 Gets the action name "N" from the action dictionary.
1723 Gets name as string, using default if not found. @param key The key to look up. @param defaultValue Value if key is not present.
1724 Gets the guideline style. Returns default if not found.
1725 Gets the icon name. Uses default if not found.
1726 Retrieves the attachment name. Uses default if not found.
1727 Gets the line ending style. @return Line ending style, LE_NONE if not found.
1728 Gets the highlight mode. @return Highlight mode string, defaults to HIGHLIGHT_MODE_INVERT.
1729 Gets the reply type. @return Reply type string, or default RT_REPLY if not found.
1730 Gets the name of the rubber stamp. Uses default name if not found.
1731 Gets the annotation name. @return Annotation name string, or default if not found.
1732 Gets the highlighting mode. @return Highlighting mode string, "I" if not found.
1733 Gets the border style. Returns STYLE_SOLID if not found.
1734 Gets the type of the external data dictionary. Returns "ExData" if the type is not explicitly defined.
1735 Retrieves the transition style name. @return Style name as string, uses default if not found.
1736 Gets the dimension of the transition. @return Dimension string, or default if not found.
1737 Gets the transition motion. @return Motion string, defaults to 'I' if not found.
1738 Gets the non-fullscreen page mode. @return Page mode string, "UseNone" if not found.
1739 Gets the reading direction from preferences. @return Reading direction string (e.g., "L2R").
1740 Gets the view area preference. @return View area string, or default CropBox.
1741 Gets the view clip setting, defaulting to CropBox.
1742 Gets the print area. @return Print area string, or default crop box.
1743 Gets the print clip setting. @return Print clip string, "CropBox" if not found.
1744 Gets the print scaling preference. @return Print scaling string or default if not set.
1745 Checks for a valid XRef offset, returning it or -1 if not found. @param startXRefOffset Offset to check for a valid XRef table.
1746 Checks if the attribute is empty (only has an owner).
1747 Retrieves the parent structure node. @return Parent PDStructureNode or null if not present.
1748 Creates a PDF object from a COSBase object. @param kid The base object to create from. @return A PDF object or null if creation fails.
1749 Initializes PDEncryption with a COSDictionary. @param dictionary COSDictionary containing encryption settings
1750 Returns the security handler. Throws IOException if no handler exists.
1751 Retrieves a list of FDF annotations from the FDF document. Returns an empty list if no annotations are present.
1752 Checks if font CID system info matches, using registry/ordering or code page range. @param cidSystemInfo CID system info to compare against. @param info Font info to check.
1753 Checks if the DeviceN color space subtype is \"NChannel\".
1754 Gets the document's open action (destination or action). @return PDDestinationOrAction or null if no open action. @throws IOException on conversion errors.
1755 Retrieves the action associated with the field. @return PDAction object representing the field's action.
1756 Retrieves JavaScript actions from the document dictionary. @return Map of action names to PDActionJavaScript objects.
1757 Retrieves the "F" action from the action dictionary. Uses PDActionFactory to create a PDAction object.
1758 Retrieves the "E" action. @return PDAction object or null if not found.
1759 Retrieves the action associated with the "X" key. @return PDAction object or null if no action is found.
1760 Retrieves the "D" action. @return PDAction object or null if not found.
1761 Retrieves the 'U' action. @return PDAction object or null if not found.
1762 Retrieves the "FO" action. @return PDAction object or null if not found.
1763 Retrieves the "BL" action. @return PDAction object or null if not found.
1764 Retrieves the PO action. @return PDAction object or null if not found.
1765 Retrieves the PC action. @return PDAction object or null if not found.
1766 Retrieves the PV action. @return PDAction object or null if not found.
1767 Retrieves the "PI" action. @return PDAction object representing the "PI" action, or null.
1768 Retrieves the "WC" action. @return PDAction object or null if not found.
1769 Retrieves the document will-show action. @return PDAction object or null if no action is defined.
1770 Retrieves the document's document-level signature action. @return PDAction object or null if no signature action exists.
1771 Retrieves the "WP" action from the document's actions. @return PDAction object or null if no WP action is found.
1772 Retrieves the DP action. @return PDAction object representing the DP action, or null.
1773 Retrieves the "K" action. @return PDAction object or null if not found.
1774 Retrieves the 'F' action. @return PDAction object or null if not found.
1775 Retrieves the "V" action. @return PDAction object or null if not found.
1776 Retrieves the 'C' action from the actions dictionary. @return PDAction object or null if 'C' action is missing.
1777 Retrieves the "O" action from the actions dictionary. @return PDAction object or null if no action is defined.
1778 Retrieves the "C" action from the actions dictionary. @return PDAction object or null if "C" action is not found.
1779 Retrieves the action associated with this annotation. @return PDAction object or null if no action is defined.
1780 Retrieves the action associated with the annotation. Returns a PDAction object or null if no action is defined.
1781 Creates a PDAction from the action dictionary. @return PDAction object representing the action, or null.
1782 Retrieves the string value for a given property key. @param propertyKey the key of the property to retrieve @return String value or null if not found
1783 Retrieves a custom metadata value by field name. @param fieldName Name of the metadata field. @return Metadata value or null if not found.
1784 Retrieves a string attribute value by name. @param name the name of the attribute to retrieve @return String value or null if not found
1785 Retrieves the 'Base' string from the underlying COSDictionary.
1786 Retrieves the PDF document's version string. @return Version string or null if not found.
1787 Retrieves the units string from the COSDictionary. Returns "U" value or null if not found.
1788 Gets a string value by key, using defaultValue if null. @param key The key to retrieve. @param defaultValue Default value if key is not found.
1789 Gets embedded string value by key, using defaultValue if null. @param embedded The embedded dictionary. @param key The key to retrieve. @param defaultValue Default value if key is not found.
1790 Retrieves the operation parameter, defaults to OPERATION_OPEN.
1791 Gets the default appearance string from the form dictionary. Returns "" if DA is not found.
1792 Retrieves the file name, trying Unicode, DOS, MAC, UNIX, then default.
1793 Checks if an optional content group exists. @param groupName Name of the group to check. @return True if the group exists, false otherwise.
1794 Returns the fully qualified name of the field. Combines parent name (if present) with the field's name.
1795 Returns a list of values associated with the choice field options.
1796 Encrypts/decrypts data based on configuration. @param objectNumber Object number for key derivation. @param genNumber Generation number for key derivation.
1797 Computes an encrypted key based on revision and parameters. @param password Password bytes. @param o Owner password.
1798 Checks user password based on encryption revision. @param password User password. @return True if password is valid, false otherwise.
1799 Finds a FontBoxFont by format and PostScript name. @param format Font format @param postScriptName PostScript font name @return FontBoxFont or null if not found.
1800 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
1801 Writes a COSString to the output stream, followed by a space. @param output The output stream to write to. @param cosString The COSString to write.
1802 Displays text on the PDF canvas. @param text The string to display.
1803 Constructs a PageDrawer with provided parameters. @param parameters PageDrawerParameters object for initialization.
1804 Retrieves the color of the annotation. Delegates to getColor(COSName.C) to get the color.
1805 Retrieves the border color using the 'BC' item name. @return PDColor object representing the border color.
1806 Retrieves the background color of the annotation. Uses getColor to fetch the color associated with COSName.BG.
1807 Sets the high value in the color table array. @param high The high value to set.
1808 Sets the page number for the destination. @param pageNumber The target page number.
1809 Parses a COSString from the input source. Handles hex strings, escaped characters, and line breaks.
1810 Extracts signature contents from PDF file. @param pdfFile Input stream of the PDF file. @return Byte array representing the signature contents.
1811 Extracts signature contents from PDF file. @param pdfFile PDF file byte array. @return Signature contents as byte array.
1812 Creates an immutable rectangle with specified width and height. @param width Rectangle width. @param height Rectangle height.
1813 Returns the bounding rectangle for the cloudy border.
1814 Creates a PDMetadata object associated with the given document. @param document The PDF document to associate with metadata.
1815 Constructs a PDEmbeddedFile associated with the given PDF document. @param document The PDF document this file is associated with.
1816 Initializes a PDXObject with a stream and subtype. @param document The PDF document. @param subtype The subtype of the XObject.
1817 Constructs a PDImageXObject using a PDDocument. @param document The PDF document to use for the stream.
1818 Creates a PDStream from an InputStream. @param doc PDF document. @param input Input stream for the stream data.
1819 Creates a PDStream from an InputStream, using a COSName filter. @param input Input stream for stream data. @param filter COS filter to apply.
1820 Creates a PDStream from an InputStream with filters. @param input Input stream for stream data. @param filters COS filters to apply.
1821 Creates a PDImageXObject from a stream, dimensions, and color space. @param document PDF document. @param encodedStream Image data stream.
1822 Default constructor, sets the owner to OWNER_LAYOUT.
1823 Default constructor. Sets the owner to OWNER_LIST.
1824 Constructs a PDPrintFieldAttributeObject, setting the owner.
1825 Default constructor. Sets the owner to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the owner name in the dictionary. @param dictionary The COSDictionary containing attribute data.
1827 Gets the normal appearance stream. Returns null if not found.
1828 Gets the "on" value from the checkbox appearance dictionary. Returns empty string if not found.
1829 Retrieves the PDTransparencyGroup object, creating it if null. Returns the group or null if no group is defined.
1830 Finds a PDPageDestination by named destination. @param namedDest The named destination to find. @return PDPageDestination or null if not found.
1831 Constructs a COSParser with a source stream. @param source The input stream for parsing.
1832 Creates a PDFParser with a key store and alias for decryption. @param source Input stream for PDF content. @param decryptionPassword Password for decryption. @param keyStore Key store for decryption. @param alias Alias for the key store.
1833 Creates a content stream from a parent appearance stream. @param appearance The parent appearance stream.
1834 Creates a PDFormContentStream associated with a form. @param form The PDF form to associate with this stream.
1835 Creates a content stream with document and appearance stream. @param doc The PDF document. @param appearance The appearance stream.
1836 Constructs a `PDPatternContentStream` for a tiling pattern. @param pattern The tiling pattern to associate with the stream.
1837 Draws an arrow on the content stream at the specified coordinates. @param cs content stream to draw on @param x x-coordinate of the arrow base @param y y-coordinate of the arrow base @param len length of the arrow
1838 Draws a shape with stroke, fill, or end path based on parameters.
1839 Draws a diamond shape on the content stream. @param cs Content stream for drawing. @param x X-coordinate of the diamond's center. @param y Y-coordinate of the diamond's center. @param r Radius of the diamond.
1840 Draws a circle on the content stream at (x, y) with radius r.
1841 Draws a circle on the content stream using Bezier curves. @param cs content stream to draw on @param x x-coordinate of the circle's center @param y y-coordinate of the circle's center @param r radius of the circle
1842 Draws a paperclip shape onto the content stream. Draws a paperclip appearance for file attachments.
1843 Sets line width if not equal to the default value of 1. @param lineWidth The desired line width. @throws IOException if an I/O error occurs.
1844 Creates a BufferedImage from a tiling pattern. @param drawer PageDrawer for rendering the pattern.
1845 Calculates anchor rectangle for tiling pattern. @param pattern Tiling pattern object. @return Rectangle2D object with applied scaling.
1846 Returns the stencil image for this object. @param paint Paint used for the stencil background @throws IllegalStateException if the image is not a stencil
1847 Creates a WritableRaster from a PDImage. @param pdImage The PDImage to read from. @return WritableRaster representation of the image.
1848 Creates a BufferedImage from a PDImage. @param pdImage The image to decode. @param region Clip region. @param subsampling Subsampling factor. @param colorKey Color key array. @return BufferedImage representation of the image.
1849 Gets the page resources. Retrieves resources, inheriting from parent if needed.
1850 Gets the media box for the page. Returns PDRectangle.LETTER if not found.
1851 Gets the page rotation angle, defaults to 0 if not set.
1852 Gets a boolean value for the given key, using a default. @param key The key to retrieve the boolean value for. @param defaultValue Default value if key is not found.
1853 Checks if the file specification is volatile. Returns true if volatile, false otherwise.
1854 Checks if the property is hidden. Returns true if hidden, false otherwise.
1855 Checks if metadata encryption is enabled. Returns true by default, as per PDF standard.
1856 Retrieves the caption value for the annotation. Returns false if the caption is not set.
1857 Checks if the icon should scale to fit the annotation. Returns true if FB is true, false otherwise.
1858 Checks if the template should be renamed. Returns true if the rename flag is set, false otherwise.
1859 Checks if the transparency group is isolated. Returns true if isolated, false otherwise.
1860 Checks if the transparency group has knockout enabled. Returns true if knockout is enabled, false otherwise.
1861 Gets the anti-alias setting from the dictionary. Returns true if set, false otherwise.
1862 Gets the stroking overprint control from the dictionary. Returns true if overprint is enabled, false otherwise.
1863 Returns true if automatic stroke adjustment is enabled. Uses default false if the property is not present.
1864 Gets the alpha source flag from the dictionary. Returns true if set, false otherwise.
1865 Returns the text knockout flag, defaulting to true if absent.
1866 Returns the value of the 'H' flag, defaulting to true if absent.
1867 Checks if the action is synchronous. Returns true if synchronous, false otherwise.
1868 Gets the repeat count for the action. Returns false if the repeat property is not set.
1869 Gets the mix value for the action. Returns true if mix is enabled, false otherwise.
1870 Checks if the line annotation has a caption. Returns true if caption exists, false otherwise.
1871 Checks if the annotation is open. Returns true if "Open" property exists, otherwise false.
1872 Checks if the digital signature is a pre-release version. Returns true if pre-release, false otherwise.
1873 Gets the value of the NON_EFONT_NO_WARN flag. Returns true if the flag is not present.
1874 Returns the trusted mode flag. Defaults to false if absent.
1875 Checks if form needs appearances. Returns true if present, false otherwise.
1876 Checks if the fly area is opaque. Returns false if not set.
1877 Checks if the toolbar is hidden based on preferences. Returns true if hidden, false otherwise.
1878 Checks if the menubar is hidden based on preferences. Returns true if hidden, false otherwise, using a default.
1879 Checks if the window UI is hidden, using false as default.
1880 Checks if the PDF document should fit the window. @return True if fit window is enabled, false otherwise.
1881 Checks if the PDF window should be centered. @return True if centered, false otherwise.
1882 Checks if the document title should be displayed. Uses a default of false if the preference is absent.
1883 Gets an integer from embedded dictionary, or default if null. @param embeddedDictionary Embedded dictionary key. @param key Primary key. @param defaultValue Default value if key not found.
1884 Gets an integer value from the dictionary. @param key Primary key. Returns -1 if key not found.
1885 Gets an integer value from the dictionary. @param key Primary key. Returns -1 if not found.
1886 Gets an integer value from the dictionary. @param key Primary key. @param defaultValue Default if key not found.
1887 Checks if a bit flag is set in the dictionary for a field. @param field COSName representing the field. @param bitFlag The bit flag to check. @return True if the bit flag is set, false otherwise.
1888 Gets the number of pages in the page tree. Returns 0 if the COUNT key is not found.
1889 Gets the starting page number. Returns 1 if not found.
1890 Returns the order of the function, defaults to 1.
1891 Gets the revision number from the COS object, default 0.
1892 Gets the length of the crypt filter dictionary. Returns 40 if the LENGTH key is not found.
1893 Gets the PDF version from the dictionary. @return PDF version integer, 0 if not found.
1894 Gets the length of the encryption data. @return Length of encryption data, defaults to 40.
1895 Gets the PDF revision number. @return Revision number, defaults to DEFAULT_VERSION.
1896 Retrieves the document's permissions from the dictionary. @return Permissions integer value, 0 if not found.
1897 Gets the justification of the annotation. Returns 0 if not found in the dictionary.
1898 Returns the font flags. Retrieves from dictionary if not set.
1899 Creates a PDAbstractPattern from a COSDictionary. @param dictionary COSDictionary containing pattern definition. @param resourceCache Resource cache for pattern resources. @return PDAbstractPattern instance.
1900 Gets the paint type of the tiling pattern. Returns 0 if the paint type is not specified.
1901 Gets the tiling type. Returns 0 if not found in dictionary.
1902 Creates a PDShading object based on the shading dictionary type. @param shadingDictionary Dictionary containing shading properties. @return PDShading object of the appropriate type.
1903 Gets the bits per flag value from the COS object, -1 if not found.
1904 Gets the number of vertices per row, -1 if not defined.
1905 Gets the bits per color component. Returns -1 if not found in COS object.
1906 Gets the bits per coordinate value, caching the result. Returns -1 if not found in COS object.
1907 Gets the action flags. Returns 0 if not found.
1908 Gets the action flags from the action dictionary. @return Integer value representing the action flags.
1909 Returns the page number of the target directory. Returns -1 if the page number is not specified.
1910 Gets the annotation index from the dictionary. Returns -1 if the key is not found.
1911 Gets the annotation flags from the COSDictionary. Returns 0 if the key is not found.
1912 Gets the Q value from the COS object, defaults to 0.
1913 Gets the rotation angle of the annotation. Returns 0 if the rotation key is not found.
1914 Checks if timestamp is required, based on dictionary value.
1915 Gets the number of open child nodes, defaulting to 0.
1916 Gets the Q value from the dictionary, defaults to 0.
1917 Gets the top index of the list box. Returns 0 if the key is not found.
1918 Retrieves COS objects of a specified type. @param type COS object type to retrieve. @return List of COS objects of the specified type.
1919 Removes page resources from the resource cache. Cleans up page-specific resources, not inherited ones.
1920 Retrieves a color space by name. @param name Color space name. @return PDColorSpace object or new instance.
1921 Retrieves the embedded file as a PDEmbeddedFile or null. Uses COSName.F to get the embedded file stream.
1922 Retrieves the embedded file's DOS object. @return PDEmbeddedFile or null if not a COSStream.
1923 Retrieves the embedded MAC file as a PDEmbeddedFile. @return PDEmbeddedFile object or null if not found.
1924 Retrieves the embedded file from the EF dictionary using UNIX key. @return PDEmbeddedFile object or null if not a COSStream.
1925 Gets the embedded file with Unicode encoding. @return PDEmbeddedFile object or null if not found.
1926 Creates an AxialShadingContext with specified parameters. @param shading The shading object. @param colorModel The color model. @param xform Transform.
1927 Creates a `RadialShadingContext` with specified parameters. @param shading The radial shading type. @param colorModel The color model. @param xform Transform matrix. @param matrix Matrix. @param deviceBounds Rectangle defining device bounds.
1928 Constructs a TriangleBasedShadingContext with provided data. @param shading The PDShading object.
1929 Creates a Type1ShadingContext with specified parameters. @param shading The Type 1 shading object.
1930 Constructs a PDFObjectStreamParser from a COSStream. @param stream COSStream to parse. @param document COSDocument containing the stream.
1931 Constructs a PDCIDFontType0, parsing and validating font data. Handles embedded or fallback fonts, logging warnings/errors.
1932 Constructs a PDCIDFontType2 with font dictionary, parent, and TrueType font. @param fontDictionary Font dictionary. @param parent Parent PDType0Font. @param trueTypeFont TrueType font or null.
1933 Reads a CMap from a COSBase object (Name or Stream). @param base COSBase object containing CMap data. @return CMap object or throws IOException if invalid.
1934 Writes the body of the PDF document, including trailer info. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
1935 Saves the FDF document to the file specified by the name. @param fileName File name to save the FDF data to. @throws IOException if an I/O error occurs.
1936 Recursively collects COS objects, returning false if already collected.
1937 Sets the document trailer and updates its origin document state. @param newTrailer The new COSDictionary to set as the trailer.
1938 Updates the document state based on a child object. @param child The child object to update.
1939 Retrieves a value by name, searching names or child nodes. @param name Name of the value to retrieve. @return Value associated with the name or null if not found.
1940 Gets attribute name, using default if not found. @param name Attribute name to retrieve. @param defaultValue Default value if name is absent.
1941 Gets the border style. Returns STYLE_SOLID if not found.
1942 Retrieves the root of the structure tree. Returns null if no root is found.
1943 Retrieves the kids (child objects) of this node. Returns a list of PDF objects or an empty list if none.
1944 Gets the encryption object for the document. Lazily initializes if the document is encrypted.
1945 Prepares decryption settings, handling encryption and keys. @throws IOException if an I/O error occurs during decryption.
1946 Reads and initializes the font encoding and CMap. Handles predefined and custom CMap types, and checks for CID mappings.
1947 Repairs an invalid Length1 value, scanning for "exec". @param bytes font data @param length1 initial Length1 value @return corrected Length1 value
1948 Repairs an invalid length2 value, returning a safe value. @param bytes The byte array representing the font data. @param length1 First length value. @param length2 Second length value to repair.
1949 Gets the fractional display string from the COSDictionary. Returns FRACTIONAL_DISPLAY_DECIMAL if not found.
1950 Gets the thousands separator from the COSDictionary. Returns "," if not found.
1951 Gets the decimal separator string from the COSDictionary. Returns "." if not found.
1952 Gets the label prefix string from the COSDictionary. Returns " " as default if prefix is not found.
1953 Gets the label suffix string from the COSDictionary. Returns " " as default if not found.
1954 Gets the label position to value string from the COSDictionary.
1955 Gets embedded string value by key, returns null if not found. @param embedded The embedded dictionary. @param key The key to retrieve.
1956 Finds font matches based on descriptor and CID system info. @param fontDescriptor Font descriptor object. @param cidSystemInfo CID system info for filtering.
1957 Checks if the owner password is valid based on encryption revision. @param ownerPassword Owner password bytes.
1958 Parses the given text into an InstructionSequence. @param text CharSequence to parse. @return InstructionSequence object.
1959 Decrypts a PDF stream. @param stream COSStream to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
1960 Encrypts a PDF stream. @param stream COSStream to encrypt. @param objNum Object number for encryption. @param genNum Generation number for encryption.
1961 Decrypts a COSString using provided object and generation numbers. @param string The COSString to decrypt. @param objNum Object number for key derivation. @param genNum Generation number for key derivation.
1962 Encrypts a COSString using provided object and generation numbers. @param string The COSString to encrypt. @param objNum Object number for key derivation. @param genNum Generation number for key derivation. @return Encrypted COSString.
1963 Checks user password based on encryption revision. @param password User password string. @return True if password is valid, false otherwise.
1964 Finds a FontBoxFont by PostScript name, prioritizing PFB, TTF, OTF. @param postScriptName PostScript font name to search for. @return FontBoxFont or null if not found.
1965 Writes the content of a page to the PDF document. This method handles text positioning, spacing estimation, line breaking, and paragraph formatting. It also manages font and size changes to accurately represent the text layout.
1966 Retrieves a date value as a Calendar object by key. @param key COSName representing the date key @return Calendar object or null if not a COSString.
1967 Writes a PDF token to the output stream. @param base The token (COSBase) to write. @throws IOException if an error occurs during writing.
1968 Writes a COSBase object to the output stream, handling types. @param output Output stream to write to @param object COSBase object to write @param topLevel Flag indicating top-level object
1969 Displays text and floats with positioning. @param textWithPositioningArray Array of text/float pairs. @throws IOException If an I/O error occurs.
1970 Displays text and adds the SHOW_TEXT operator. @param text The text string to display.
1971 Creates a PageDrawer with provided parameters and annotation filter. @param parameters PageDrawerParameters for initialization @return PageDrawer instance
1972 Creates a form XObject. @param document The PDF document.
1973 Creates a Metadata object for a PDF document and stream. @param doc PDF document. @param str Input stream for metadata data.
1974 Creates an embedded file from a document and input stream. @param doc PDF document. @param str Input stream for file data.
1975 Creates an embedded file object. @param doc PDF document. @param input Input stream. @param filter COS filter.
1976 Creates a PDImageXObject from a byte array, dimensions, & color space. @param document PDF document. @param byteArray Image data. @return PDImageXObject.
1977 Constructs a PDExportFormatAttributeObject with the given owner. @param owner The owner string for this attribute object.
1978 Retrieves a collection of PDAttributeObjects associated with this element.
1979 Gets the normal appearance stream from the annotation. @param annotation The annotation to retrieve the stream from. @return The appearance stream, or null if not found.
1980 Adds font resources from a widget's appearance stream to AcroForm. Ignores subsetted fonts.
1981 Retrieves a set of "on" values from button attributes and widgets.
1982 Checks if the checkbox is checked by comparing its value.
1983 Checks the checkbox by setting its value to the \"on\" value.
1984 Initializes the provider with a font cache and scans/loads fonts. @param cache The font cache to use.
1985 Constructs an FDFParser with the given input source. @param source The input stream for parsing.
1986 Creates a PDFParser with a source and optional decryption password. @param source Input stream for PDF content. @param decryptionPassword Password for decryption.
1987 Draws a line style on the content stream. @param style Line style to draw. @param cs Content stream for drawing. @param x X-coordinate. @param y Y-coordinate. @param width Width of the line.
1988 Creates a TilingPaint with a pattern, color space, color, and transform. @param drawer PageDrawer for rendering the pattern
1989 Creates a BufferedImage from the image object. @param region Clip region. @param subsampling Subsampling factor.
1990 Decodes a PDImage into a BufferedImage using default region and subsampling. @param pdImage The image to decode. @param colorKey Color key array. @return BufferedImage representation of the image.
1991 Pushes resources from a content stream. @param contentStream The content stream to get resources from. @return The previous resources.
1992 Calculates an affine transform to center the overlay. @param page The page to calculate transform for. @param overlayMediaBox Overlay's media box. @return AffineTransform object.
1993 Gets the rotated media box for a page, swapping width/height if rotated. @param page The PDF page to get the media box from. @return PDRectangle representing the rotated media box.
1994 Checks if the element is marked. @return True if marked, false otherwise.
1995 Checks if the dictionary uses user properties, returns false if not.
1996 Checks if the element is marked as suspect. Returns true if "Suspects" key exists and is true.
1997 Checks if mouse position should be tracked based on action. @return True if "IsMap" is true in the action dictionary.
1998 Checks if the popup is open. Returns true if open, false otherwise.
1999 Checks if the PDF number format dictionary has the "FD" flag set. Returns true if set, false otherwise.
2000 Gets the non-stroking overprint control from the dictionary. Returns true if enabled, false otherwise.
2001 Gets an integer from embedded dictionary, or -1 if null. @param embeddedDictionary Embedded dictionary key. @param key Primary key.
2002 Gets the denominator value from the underlying COSDictionary.
2003 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out Original OutputStream. @param decodeParams Dictionary containing predictor parameters. @return Wrapped OutputStream or original if predictor <= 1.
2004 Returns the struct parents count for the page. @return Integer value; -1 if not found.
2005 Gets the bits per sample value from the COS object.
2006 Gets the Marker Context Identifier (MCID) from the COSDictionary.
2007 Gets the next key for the parent tree. Returns -1 if not found.
2008 Gets the MCID value from the marked content properties. Returns -1 if properties are null.
2009 Gets the line cap style from the dictionary. Returns -1 if not found.
2010 Gets the line join style from the dictionary. Returns -1 if not found.
2011 Gets the structural parent of the annotation. Returns -1 if not found.
2012 Gets the value of the 'P' property from the dictionary. Returns -1 if the property is not found.
2013 Gets the maximum length allowed for the text field. Returns -1 if not specified in the dictionary.
2014 Gets an integer value from the dictionary with a default. @param name Attribute name. @param defaultValue Value if attribute is not found.
2015 Checks if the annotation is invisible. Uses getFlag to determine invisibility status.
2016 Checks if the annotation is hidden. Uses getFlag to determine the hidden state.
2017 Checks if the annotation is flagged as printed. Uses getFlag to determine the printed flag status.
2018 Checks if the "no zoom" flag is set for the annotation. Returns true if the flag is set, false otherwise.
2019 Checks if the annotation has the "no rotate" flag set. Uses getFlag to determine if the flag is present.
2020 Checks if the "No View" flag is set for the annotation. Uses getFlag to determine if the flag is present.
2021 Checks if the annotation is read-only. Uses getFlag to determine read-only status.
2022 Checks if the annotation is locked. Uses getFlag to determine the locked status.
2023 Checks if the "Toggle No View" flag is set on the annotation.
2024 Checks if the annotation contents are locked. Uses getFlag to determine the locked contents status.
2025 Checks if the annotation is invisible based on the dictionary.
2026 Checks if the annotation is hidden. Uses the COSDictionary to determine the hidden state.
2027 Checks if the annotation is marked as printed. Uses COSName.F and FLAG_PRINTED to determine print status.
2028 Checks if the annotation has the no-zoom flag set. @return True if no-zoom is enabled, false otherwise.
2029 Checks if the annotation has no rotation. Uses COSName.F and FLAG_NO_ROTATE flags.
2030 Checks if the annotation has the "no view" flag set. Uses the COSDictionary to determine the flag status.
2031 Checks if the annotation is read-only. Uses getCOSObject to check the read-only flag.
2032 Checks if the annotation is locked. Uses COSDictionary flag to determine lock status.
2033 Checks if the "Toggle No View" flag is set. Uses COSDictionary to determine the flag's status.
2034 Checks if the annotation's contents are locked. Uses COSName.F and FLAG_LOCKED_CONTENTS to determine.
2035 Checks if filter is required based on the seed value's flag.
2036 Checks if the subfilter flag is set in the COS object.
2037 Checks if digest method is required based on the dictionary.
2038 Checks if the "V" flag is set in the COS object.
2039 Checks if the reason field is required based on the COS object.
2040 Checks if legal attestation is required based on the COS object.
2041 Checks if adding revision info is required. Uses COSName.FF and FLAG_ADD_REV_INFO to determine.
2042 Checks if the subject flag is set in the dictionary.
2043 Checks if the issuer flag is set in the dictionary.
2044 Checks if the OID flag is required in the certificate dictionary.
2045 Checks if the Subject DN flag is required in the dictionary.
2046 Checks if the key usage flag is required in the dictionary.
2047 Checks if the URL flag is set in the dictionary. Returns true if the flag is set, false otherwise.
2048 Checks if the outline item's text is italicized. Uses COSName.F and ITALIC_FLAG to check the flag.
2049 Checks if the outline item's text is bold. Uses COSName.F and BOLD_FLAG to determine boldness.
2050 Checks if signatures exist in the form dictionary. Uses getFlag to determine signature presence.
2051 Checks if the form field is append-only. Uses dictionary to determine append-only flag status.
2052 Checks if the button is a push button. Uses getFlag to determine the button type.
2053 Checks if the button is a radio button. Uses getFlag to determine the radio button flag.
2054 Checks if the choice field's sorting flag is set.
2055 Checks if the choice field allows multiple selections. Uses getFlag to determine the multi-select flag.
2056 Checks if spell checking is disabled for this choice field.
2057 Checks if changes to the choice field should commit on selection.
2058 Checks if the choice field is a combo box. Uses getFlag to determine the combo box flag.
2059 Checks if the combo box is editable. Uses getFlag to determine editability status.
2060 Checks if the field is read-only. Uses dictionary to determine read-only status.
2061 Checks if the field is required. Uses dictionary to check the FLAG_REQUIRED flag.
2062 Checks if the "no export" flag is set for the field. Uses dictionary to determine if the flag is present.
2063 Checks if radio buttons are in unison (synchronized). Uses getFlag to determine the unison state.
2064 Checks if the text field supports multiline input. Uses getFlag to determine if the multiline flag is set.
2065 Checks if the field is password-protected. Uses COSName.FF to determine password status.
2066 Checks if the file select flag is set for the field. Returns true if the flag is set, false otherwise.
2067 Checks if spell checking is disabled for the field.
2068 Checks if the "do not scroll" flag is set for the field. Returns true if the flag is set, false otherwise.
2069 Checks if the field is a combo box. Uses getFlag to determine combo box status.
2070 Checks if the text field supports rich text formatting. Uses getFlag to determine the rich text flag status.
2071 Prepares decryption process based on provided materials. @param encryption Encryption object containing filter data. @param documentIDArray Document ID array. @param decryptionMaterial Decryption material for decryption.
2072 Gets the owner key for the PDF document. @return Owner key as bytes, or null if not set.
2073 Retrieves the user key from the dictionary. @return User key as byte array or null if not found.
2074 Calculates the horizontal displacement for a character. @param code The character code. Returns a Vector representing displacement.
2075 Calculates the width of a string encoded with this font. @param text The string to calculate width for. @return The total width of the string.
2076 Retrieves a PDAbstractPattern by name, using cache if available. @param name Pattern name. @return PDAbstractPattern or null if not found.
2077 Retrieves a PDShading object by name, using caching if available. @param name Shading object name. @return PDShading object or null if not found.
2078 Returns the shading object or creates it if it doesn't exist. @return PDShading object representing the shading pattern.
2079 Checks if the node is open (has child nodes). Uses getOpenCount() to determine open status.
2080 Creates a PDF field based on its type and properties. @param form AcroForm. @param field Field dictionary. @param parent Parent field.
2081 Retrieves a PDXObject by name, caching if applicable. @param name XObject name. @return PDXObject or null if not found.
2082 Constructs a `GouraudShadingContext` with provided parameters. @param shading The shading object. @param colorModel The color model. @param xform The affine transform. @param matrix The matrix.
2083 Creates a COSInputStream for reading stream data. Uses default decoding options. @return COSInputStream for reading the stream.
2084 Parses an object stream object, returning COSBase or null. @param objstmObjNr Object stream number. @param key COSObjectKey for the object.
2085 Returns a stream for reading the page content. Returns an empty stream if no content exists.
2086 Constructs a PDCIDFontType2 with a font dictionary and parent font. @param fontDictionary Font dictionary. @param parent Parent PDType0Font.
2087 Returns a PDCIDFontType2 instance using the font, parent, and TTF.
2088 Recursively collects COSArray entries, tracking update needs. @param array The COSArray to process. @return True if parent needs update based on descendants.
2089 Returns a set of COS objects managed by this increment. Collects objects if not already initialized.
2090 Adds a COSBase object to the array, wrapping if needed. @param object The COSBase object to add.
2091 Adds a COSBase object to the array at the specified index. @param i Index to insert the object. @param object The COSBase object to add.
2092 Sets the object at the given index. Wraps if not direct. @param index Index of the object to set. @param object The COSBase object to set.
2093 Sets a key-value pair in the dictionary. @param key The key of the item to set. @param value The value to associate with the key.
2094 Updates child COSBase objects with origin document state. @param children Iterable of child COSBase objects to update
2095 Retrieves the role map from the structure tree root. Returns empty map if no root or role map exists.
2096 Adds a COSBase object to the pool, handling key management. @param key The COSObjectKey for the object. @param base The COSBase object to add. @return The dereferenced COSBase object.
2097 Protects the document with a given protection policy. Applies security settings and throws exception if handler missing.
2098 Gets the glyph name for a given character code. @param code The character code to look up.
2099 Maps a character code to a glyph ID, handling embedded/non-embedded fonts. @param code The character code to map. @return Glyph ID or default value if mapping fails.
2100 Gets the Mac subtype from the embedded file parameters. Returns null if parameters are not found.
2101 Gets the Mac Creator string from the embedded file parameters. Returns null if the parameter dictionary is not found.
2102 Gets the Mac Resource Fork string from the embedded file. Returns null if the parameter dictionary is not found.
2103 Gets a CIDFontMapping based on base font and CID info. @param baseFont Base font name. @param fontDescriptor Font descriptor. @param cidSystemInfo CID system info.
2104 Checks if the provided owner password is valid. @param password Owner password string @return True if valid, false otherwise.
2105 Writes content of defined regions to the output. Iterates through regions, retrieves character lists, and writes.
2106 Retrieves a date value as a Calendar object by key. @param key String representing the date key @return Calendar object or null if not a COSString.
2107 Gets a date value, using defaultValue if null. @param key COSName representing the date key @param defaultValue Default Calendar object if date is null @return Calendar object or defaultValue if date is null
2108 Retrieves the PDF creation date as a Calendar object. Returns null if the creation date is not available.
2109 Retrieves the document's modification date. @return Calendar object representing the modification date.
2110 Retrieves the annotation's creation date. @return Calendar object representing creation date or null.
2111 Retrieves the creation date of the annotation. Returns a Calendar object or null if not found.
2112 Retrieves the signature date as a Calendar object. Uses the 'M' key from the dictionary.
2113 Writes a PDF operator to the output stream. @param op The operator to write. @throws IOException if an I/O error occurs.
2114 Writes prepared COS objects to a stream, creating a compressed stream. @param stream COSStream to write to @return Updated COSStream object
2115 Writes a COSDictionary to the output stream. @param output Output stream to write to. @param cosDictionary Dictionary to write.
2116 Creates a PDTransparencyGroup, initializing with a PDF document. @param document The PDF document.
2117 Creates a PDAppearanceStream, associating it with a PDF document. @param document The PDF document.
2118 Creates a PDImageXObject from a BufferedImage. @param document PDF document @param image BufferedImage to encode @param quality JPEG quality @param dpi Dots per inch
2119 Validates a button value against allowed options. @param value The value to check. Throws exception if invalid.
2120 Loads an FDF document from a file. @param file The file containing the FDF document. @return FDFDocument object. @throws IOException if an I/O error occurs.
2121 Loads an FDF document from an input stream. @param input Input stream containing the FDF data. @return FDFDocument object or null if parsing fails. @throws IOException if an I/O error occurs.
2122 Creates a PDFParser with a source and empty decryption password. @param source Input stream for PDF content.
2123 Creates a TilingPaint with a pattern and transform. @param drawer PageDrawer for rendering the pattern @param pattern PDTilingPattern to use for tiling @param xform AffineTransform for pattern transformation
2124 Creates a BufferedImage from the image object. Uses default region and subsampling factor.
2125 Decodes LZW data from input stream to output stream. @param encoded Input stream. @param decoded Output stream. @param parameters Decoding parameters. @param index Index. @return DecodeResult object.
2126 Appends a kid with the given MCID. @param markedContent Marked content to append, must not be null.
2127 Fetches the CMap UCS2 based on font properties and CID system info.
2128 Checks if the field is a combo box with specific properties.
2129 Prepares decryption by setting filters, lengths, and keys. Handles encryption versions 4-6 and AES variants.
2130 Gets the width of a space character in the font. Caches the value; returns default if not found.
2131 Checks if the font is fixed-pitch. Uses isFlagBitOn to determine the font's fixed-pitch status.
2132 Checks if the font is a serif font. Uses isFlagBitOn to determine the serif flag.
2133 Checks if the font is symbolic. Uses isFlagBitOn to determine symbolic font status.
2134 Checks if the script flag is set in the font descriptor.
2135 Checks if the font is non-symbolic. Uses isFlagBitOn to check the FLAG_NON_SYMBOLIC bit.
2136 Checks if the font is italic. Uses isFlagBitOn to determine italic status.
2137 Checks if the font is all caps. Uses isFlagBitOn to determine the flag status.
2138 Checks if the font is a small cap font. Uses isFlagBitOn to determine the value of the FLAG_SMALL_CAP.
2139 Checks if the font's bold flag is forced. Uses isFlagBitOn to determine the flag's state.
2140 Retrieves a pattern by name from resources. @param color The color object containing the pattern name. @return PDAbstractPattern or throws IOException if not found.
2141 Creates a PDField using the provided form, dictionary, and parent.
2142 Converts stream content to a String. Returns empty string if an IOException occurs.
2143 Creates a COSInputStream for reading stream data. Delegates to the underlying COSStream's createInputStream.
2144 Collects patches from a shading dictionary. @param xform Affine transform. @param matrix Transformation matrix. @param controlPoints Control points count. @return List of patches or empty list on error.
2145 Creates a descendant font based on dictionary and parent font. @param dictionary Font dictionary. @param parent Parent PDType0Font. @throws IOException if font type is invalid.
2146 Returns an iterator for the managed COS objects. Uses the internal object collection's iterator.
2147 Adds a COSObjectable object to the array. @param object The object to add, unwrapping if needed.
2148 Grows the array to a specified size, filling with a default object. @param size target size of the array @param object default object to fill the array with
2149 Sets the array's elements to the given float array. @param value The float array to set as the array's elements.
2150 Parses a COS array from the PDF source. Returns a COSArray object containing parsed elements.
2151 Creates and returns a COSStream representing the XRef stream. Populates stream data, calculates widths, and sets direct flags.
2152 Constructs a PDRange with default values: 0.0 to 1.0.
2153 Gets the encode values array. Creates if null. Uses size values to generate default encoding.
2154 Constructs a PDFunctionType2 from a COSBase object. @param function The COSBase object representing the function.
2155 Initializes a new FDFOptionElement with an empty COS array.
2156 Initializes a PDFontSetting object with a default COSArray.
2157 Gets the whitepoint value as a PDTristimulus object. Returns (1, 1, 1) if whitepoint is not defined.
2158 Retrieves the black point as a PDTristimulus object. Creates a default black point if one doesn't exist.
2159 Converts color components to a COSArray. Includes pattern name if present. @return COSArray representation of the color.
2160 Constructs a PDDeviceN object with an empty DeviceN color space.
2161 Constructs a PDGamma object with initial gamma values of zero.
2162 Retrieves the alternate color space. Creates if null. @return PDColorSpace object, or null if not found.
2163 Constructs a PDIndexed object, initializing the color array.
2164 Creates and returns the default range array for LAB colors. Returns a COSArray containing default range values.
2165 Constructs a PDPattern object using provided resources. @param resources The PDResources object to use.
2166 Constructs a PDSeparation object, initializing the color separation array.
2167 Initializes a PDTristimulus object with zero tristimulus values.
2168 Initializes PDTristimulus with X, Y, Z values from array. @param array Array containing X, Y, Z tristimulus values.
2169 Sets the transformation matrix for the XObject. @param transform AffineTransform object representing the matrix.
2170 Creates a PDImageXObject from a byte array. @param document The PDF document. @param byteArray The byte array containing the image data. @return A PDImageXObject representing the image.
2171 Converts the single array to a COSArray object. @return COSArray representation of the single array.
2172 Sets the object at the given index, handling null objects. @param index Index to set the object at. @param object The COSObjectable object to set.
2173 Sets an integer value at the specified index in the array. @param index Index where the integer value is set. @param value The integer value to set.
2174 Sets the COSName object at the specified index. @param index Index of the object to set. @param name The name to set as a COSName.
2175 Sets the COSBase object at the given index to a COSString. @param index Index of the object to set. @param string String to encode, or null to clear.
2176 Sets the minimum value of the range. @param min The minimum value to set.
2177 Sets the maximum value of the range. @param max The maximum float value for the range.
2178 Sets the x-coordinate of the rectangle's lower-left corner. @param value The new x-coordinate value.
2179 Sets the Y coordinate of the rectangle's lower-left corner. @param value The new Y coordinate value.
2180 Sets the X coordinate of the upper-right corner. @param value The new X coordinate value.
2181 Sets the Y coordinate of the rectangle's upper-right corner. @param value The new Y coordinate value.
2182 Sets the color at the specified index. @param index Index of the color to set. @param colour The PDGamma object representing the color.
2183 Decrypts each element in a COS array. @param array COSArray to decrypt. objNum, genNum for decryption context.
2184 Sets the option value. @param opt The option string value to set.
2185 Sets the default appearance string for the option. @param da The default appearance string to set.
2186 Sets the font size within the PDF document. @param size The font size to be set.
2187 Sets the device N attributes. Removes if null, adds/sets otherwise. @param attributes The PDDeviceNAttributes to set.
2188 Sets the alternate color space and updates the underlying array. @param cs The alternate color space to set.
2189 Sets the red color component (R) of the color value. @param r The red color component (0.0 - 1.0)
2190 Sets the green color component (G) of the color value. @param g The green color component to set.
2191 Sets the blue (B) component of the color value. @param b The blue color component (0.0 - 1.0)
2192 Sets the range for a component in the PDF color space. @param range PDRange object containing min/max values. @param n Component index.
2193 Sets the base color space for indexed color space. @param base The PDColorSpace object to set.
2194 Sets the colorant name in the array. @param name The name of the colorant.
2195 Sets the alternate color space and updates the array. @param colorSpace The PDColorSpace object to set.
2196 Sets the X tristimulus value. @param x The X value to set.
2197 Sets the Y tristimulus value. @param y The Y color component value.
2198 Sets the Z tristimulus value. @param z The Z value to set.
2199 Sets a key-value pair, handling null values. @param key The key of the item to set. @param value The value to associate with the key.
2200 Sets a boolean value associated with the given key. @param key The key for the boolean value. @param value The boolean value to set.
2201 Sets a boolean value in the dictionary. @param key The key for the boolean value.
2202 Sets a key-value pair in the dictionary. @param key The key of the item to set. @param value The value to associate with the key.
2203 Sets the name in the dictionary. @param key The key of the name. @param value The name string.
2204 Sets a string value associated with the given key in the dictionary. @param key The key for the string value. @param value The string value to set.
2205 Sets an integer value associated with the given key. @param key The key for the integer value. @param value The integer value to set.
2206 Sets a long value associated with a given key in the dictionary. @param key The key for the long value. @param value The long value to set.
2207 Sets a float value in the dictionary with the given key. @param key The key for the float value. @param value The float value to set.
2208 Creates a COSStream with given parameters and sets items. @param dictionary Dictionary for stream key and items. @param startPosition Stream start position. @param streamLength Stream length. @return COSStream object.
2209 Sets the encryption dictionary in the trailer. @param encDictionary The encryption dictionary to set.
2210 Sets the document ID in the trailer dictionary. @param id The document ID as a COSArray.
2211 Wraps page content in save/restore graphics state (q/Q). @param page The PDF page to wrap. @throws IOException if an error occurs during processing.
2212 Updates parent entries and structure type in a COSDictionary array. @param kArray Array of COSDictionary entries to update.
2213 Searches for a trailer dictionary within the PDF source. Uses brute force to locate and validate the trailer. @param trailer The trailer dictionary to populate.
2214 Searches for and sets trailer items (root/info). Iterates offsets, identifies dictionaries, and sets values.
2215 Performs initial parsing of the PDF document. Retrieves root object, handles missing type, and decrypts.
2216 Parses the next token from the input source. Returns a COS object or null if end of stream.
2217 Writes PDF document and signature data. Handles encryption, ID generation, and incremental updates.
2218 Gets the document information. Creates if it doesn't exist. Returns PDDocumentInformation object.
2219 Sets document information and updates the trailer dictionary. @param info Document information object to set.
2220 Initializes a PDDocumentCatalog with the given document. @param doc The PDF document associated with this catalog.
2221 Retrieves a list of PDF threads. Creates if none exist. @return List of PDThread objects.
2222 Retrieves additional actions from the document catalog. Creates a new dictionary if none exists. @return PDDocumentCatalogAdditionalActions object
2223 Adds an output intent to the document's output intent array. @param outputIntent The PDOutputIntent object to add.
2224 Initializes with a PDF catalog, retrieving or creating the names dictionary. @param cat The PDF document catalog.
2225 Sets the crop box for the page. Null value removes it. @param cropBox The rectangle defining the crop box.
2226 Retrieves the page's additional actions. Creates if they don't exist. @return PDPageAdditionalActions object.
2227 Constructs a new, empty PDPageTree with an initialized root dictionary.
2228 Extracts child dictionaries from a PDF node. @param node The COSDictionary node to process. @return List of COSDictionary objects representing children.
2229 Clears the list, updating the parent dictionary if present.
2230 Creates a COSDictionary representing page labels. Returns a dictionary containing page label key-value pairs.
2231 Creates a new PDComplexFileSpecification with a FILESPEC type.
2232 Constructs a `PDComplexFileSpecification` from a COSDictionary. @param dict The COSDictionary to use, or null for a new one.
2233 Sets the range values for the function. @param rangeValues The array representing the range values.
2234 Sets the domain values for the function. @param domainValues The array of domain values.
2235 Sets the encode values for the function. @param encodeValues COSArray representing the encode values.
2236 Sets the decode values for the function. @param decodeValues Array of COSBase objects representing decode values.
2237 Sets the value of an attribute. @param attrName Attribute name. @param attrValue Attribute value to set.
2238 Removes an attribute object from the structure element. @param attributeObject The attribute object to remove.
2239 Handles attribute changes, updating the COS array or creating it. @param attributeObject The attribute object that changed.
2240 Adds a class name and revision number to the COS array. @param className The class name to add.
2241 Removes a class name from the element's class name array. @param className The class name to remove.
2242 Appends a child node (COSBase) to the current node's kids. Handles single, multiple, or no existing child nodes.
2243 Inserts a new node before a reference node. @param newKid The node to insert. @param refKid The reference node.
2244 Removes a child node (kid) from the node's list of children. @param object The COSBase object to remove. @return True if the object was removed, false otherwise.
2245 Sets the value of the 'K' key in the COSDictionary. @param k The value to associate with the 'K' key.
2246 Sets the property value and notifies listeners of changes. @param value The new value for the property.
2247 Retrieves the guideline color. Defaults to black if not defined. @return PDColor representing the guideline color.
2248 Retrieves the line dash pattern. Creates a default if missing. @return PDLineDashPattern object representing the dash pattern.
2249 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern.
2250 Sets the cryptographic filter method. @param cfm The cryptographic filter method to set.
2251 Sets the filter for the PDF dictionary. @param filter The filter string to set.
2252 Sets the owner key for the PDF document. @param o The owner key as a byte array.
2253 Sets the user key for PDF encryption. @param u The user key as a byte array.
2254 Sets the owner encryption key for the PDF document. @param oe Owner encryption key as a byte array. @throws IOException if an I/O error occurs.
2255 Sets the user encryption key for the PDF document. @param ue User encryption key as a byte array.
2256 Sets the document recipients as an array of byte arrays. @param recipients Recipient data; each is a byte array.
2257 Sets the crypt filter dictionary for a PDF document. @param cryptFilterName Filter name. @param cryptFilterDictionary Crypt filter dictionary.
2258 Sets the stream filter name in the dictionary. @param streamFilterName The name of the stream filter.
2259 Sets the name of the string filter. @param stringFilterName The name of the string filter.
2260 Sets the permissions for the PDF document. @param perms The byte array representing permissions.
2261 Removes V45 filters from the dictionary.
2262 Creates a new FDFAnnotation with a COSDictionary and type.
2263 Sets the color of the annotation. @param c The color to set; null for no color.
2264 Sets the rich contents of the annotation. @param rc The rich contents string to set.
2265 Sets the interior color of the circle annotation. @param color The Color object representing the interior color.
2266 Sets the callout line coordinates for the annotation. @param callout Array of floats representing callout coordinates.
2267 Sets the line coordinates for the annotation. @param line Array of floats representing line coordinates.
2268 Sets the interior color of the annotation. @param color The color to set, or null for default.
2269 Sets the horizontal offset of the line annotation's caption. @param offset The horizontal offset value.
2270 Sets the vertical offset of the line annotation's caption. @param offset The vertical offset value.
2271 Sets the polygon vertices. @param vertices Array of floats representing vertex coordinates.
2272 Sets the interior color of the polygon annotation. @param color The color to set for the interior.
2273 Sets the vertices of the polyline annotation. @param vertices Array of floats representing vertex coordinates.
2274 Sets the interior color of the polyline annotation. @param color The color to set; null for no color.
2275 Sets the interior color of the annotation. @param color The color to set, or null for default.
2276 Sets the coordinates of the text markup annotation. @param coords Array of floats representing the coordinates.
2277 Sets the ID of the FDF document. @param id The ID value to set as a COSArray.
2278 Sets the differences stream in the FDF dictionary. @param diff The COSStream representing the differences.
2279 Sets the field value, handling lists, strings, and COSObjects. @param value The value to set for the field. @throws IOException if the value type is unrecognized.
2280 Sets the field's value. @param value The new value for the field.
2281 Sets the field flags to the given integer value. @param ff The field flags as an integer.
2282 Sets the field flags to the given integer value. @param ff The field flags to set, or null to clear.
2283 Sets the clear field flags for the field. @param ff The clear field flags integer value.
2284 Sets the widget field flags to the given integer value. @param f The integer value representing the field flags.
2285 Sets the widget field flags for the field. @param ff The field flags to set, or null to clear.
2286 Sets the clear widget field flags. @param ff The clear widget field flags integer value.
2287 Sets the rich text value for the field. @param rv The rich text value (COSString) to set.
2288 Sets the rich text content stream for the field. @param rv The COSStream representing the rich text content.
2289 Sets the 'Before' action to execute before form submission. @param before The JavaScript code to execute.
2290 Sets the "After" value in the dictionary as a COSString. @param after The string value to set for the "After" field.
2291 Constructs a PDFont object, initializing its internal data.
2292 Creates a new PDFontDescriptor with a font descriptor type.
2293 Sets the font name in the dictionary. @param fontName The name of the font.
2294 Sets the font family name. @param fontFamily The name of the font family.
2295 Sets the font stretch value. @param fontStretch The font stretch string, or null to clear.
2296 Sets the font bounding box in the dictionary. @param rect The rectangle representing the font bounding box.
2297 Sets the character set for the font descriptor. @param charSet The character set string to set.
2298 Creates a DictionaryEncoding with base encoding and differences. @param baseEncoding Base encoding COSName. @param differences Differences COSArray.
2299 Sets the gamma value for the CALGRAY color space. @param value The gamma value to set.
2300 Retrieves the gamma array, creating a default if none exists. Returns a PDGamma object representing the gamma values.
2301 Sets the gamma color values in the dictionary. @param gamma The PDGamma object containing gamma values.
2302 Sets the color transformation matrix. @param matrix The 3x3 matrix to set.
2303 Retrieves colorants from the dictionary. @param resources PDResources object @return Map of colorant names to PDSeparation objects
2304 Creates a new PDTransparencyGroupAttributes object. Initializes the dictionary with the transparency group key.
2305 Initializes the dictionary with the OCMD type.
2306 Sets the visibility policy for the optional content. @param visibilityPolicy The visibility policy to set.
2307 Sets the pattern's matrix based on the provided AffineTransform. @param transform The AffineTransform representing the matrix.
2308 Sets the bounding box of the tiling pattern. @param bbox The rectangle defining the pattern's bounds.
2309 Sets the background shading array and adds it to the dictionary. @param newBackground The new background shading array.
2310 Sets the bounding box for the shading. @param newBBox The new bounding box rectangle.
2311 Sets the color space for the shading. @param colorSpace The PDColorSpace to set, or null to remove.
2312 Sets the function array for the shading. @param newFunctions The new array of functions.
2313 Sets the shading matrix from an AffineTransform. @param transform The AffineTransform representing the matrix.
2314 Sets the shading domain. @param newDomain The new domain array.
2315 Sets the extend value for the shading. @param newExtend The new extend array to set.
2316 Sets the shading domain. @param newDomain The new domain array for the shading.
2317 Sets the shading coordinates. @param newCoords The new coordinates array.
2318 Sets the decode values for shading. @param decodeValues COSArray containing decode values.
2319 Creates a new PDExtendedGraphicsState with an empty dictionary. Sets the type to EXT_G_STATE.
2320 Sets the blend mode for graphics rendering. @param bm The blend mode to apply.
2321 Sets a float value for a given key in the dictionary. @param key The key for the float value. @param value The float value to set, or null to remove.
2322 Sets the transfer function for graphics rendering. @param transfer The transfer function COSBase object.
2323 Sets the transfer function 2 (TR2) in the dictionary. @param transfer2 The transfer function 2 value.
2324 Sets the 'T' item in the action dictionary. @param t The value to associate with the 'T' key.
2325 Sets the 'H' flag to indicate whether elements should be hidden. @param h The boolean value for the 'H' flag.
2326 Sets the fields array in the action dictionary. @param array COSArray representing the fields to set.
2327 Sets the sound content for the action. @param sound The COSStream representing the sound data.
2328 Sets the form fields array in the action dictionary. @param array COSArray representing the form fields.
2329 Sets the 'D' action parameter. @param d The value to set for the 'D' parameter.
2330 Sets the value of action parameter 'B'. @param b The value to associate with parameter 'B'.
2331 Sets the relationship type. Valid types are 'P' or 'C'. @param relationship The relationship type to set. @throws IllegalArgumentException if invalid relationship type.
2332 Constructs a new PDAnnotation with a COSDictionary and type.
2333 Constructs a PDAnnotation from a COSDictionary. Sets annotation type to ANNOT if missing or incorrect.
2334 Sets the rectangle property of the annotation. @param rectangle The PDRectangle object representing the rectangle.
2335 Sets the annotation's border using a COSArray. @param borderArray The array defining the border properties.
2336 Sets rectangle margin differences and adds them to the COS object. @param differenceLeft Left margin difference. @param differenceTop Top margin difference. @param differenceRight Right margin difference. @param differenceBottom Bottom margin difference.
2337 Sets rectangle differences for the annotation. @param differenceLeft Left difference value. @param differenceTop Top difference value. @param differenceRight Right difference value. @param differenceBottom Bottom difference value.
2338 Sets the callout rectangle for the annotation. @param callout float array representing the callout rectangle.
2339 Sets the ink list for the annotation. @param inkList 2D float array representing ink paths.
2340 Sets the line coordinates. @param l array of floats representing line coordinates
2341 Sets the horizontal offset of the caption. @param offset The offset value for the caption.
2342 Sets the vertical offset for the caption. @param offset The offset value in PDF coordinates.
2343 Sets the quad points for the annotation link. @param quadPoints Array of floats defining the quad points.
2344 Sets the rich contents for the annotation. @param rc The rich contents string to set.
2345 Sets the polygon's vertices. @param points Array of floats representing the vertices.
2346 Sets the polyline vertices. @param points Array of floats representing vertex coordinates.
2347 Sets the parent annotation. @param annot The parent PDAnnotationMarkup object.
2348 Sets the rectangular differences for the annotation. @param differenceLeft Left difference value. @param differenceTop Top difference value. @param differenceRight Right difference value. @param differenceBottom Bottom difference value.
2349 Sets the quad points for the annotation. @param quadPoints Array of floats defining the quad points.
2350 Creates a new PDAppearanceDictionary with a required 'N' entry.
2351 Sets the dash style for the border. @param dashArray COSArray representing the dash pattern.
2352 Retrieves the line dash pattern. Creates a default if none exists.
2353 Sets the operating system string in the dictionary. If null, removes the OS entry; otherwise, updates the array.
2354 Creates a new PDSeedValue object. Initializes the dictionary with type SV and sets it as direct.
2355 Sets the filter value in the dictionary. @param filter The filter to set.
2356 Sets the MPD (Manifest Properties Dictionary) to the dictionary. @param mdp The PDSeedValueMDP object to set.
2357 Sets the timestamp for the seed value. @param timestamp The timestamp object to set.
2358 Creates a new PDSeedValueCertificate with a COSDictionary.
2359 Adds a subject to the certificate's subject array. @param subject The subject as a byte array.
2360 Adds a key usage extension to the certificate dictionary. @param keyUsageExtension The key usage extension string.
2361 Adds the issuer to the certificate dictionary as a COSString. @param issuer The issuer byte array to add.
2362 Adds an OID (Object Identifier) to the certificate dictionary. @param oid The OID as a byte array.
2363 Creates a new PDSignature object with default signature type.
2364 Sets the signature type. @param type The type of the signature.
2365 Sets the filter for the signature dictionary. @param filter The filter COSName to set.
2366 Sets the subfilter for the signature dictionary. @param subfilter The subfilter COSName to set.
2367 Sets the byte range for the signature. @param range int array containing the byte range values.
2368 Sets the signature contents as a byte array, forcing hex form. @param bytes The byte array representing the signature contents.
2369 Sets the text color of the outline item. @param textColor The PDF color to set.
2370 Constructs a PDAcroForm associated with a PDDocument. Initializes the form's dictionary and fields array.
2371 Constructs a PDButton associated with the given AcroForm. Sets the field type to "Btn" in the button's dictionary.
2372 Constructs a PDChoice object, initializing its field type to CH. @param acroForm The parent AcroForm object.
2373 Sets the value of the field. @param object The new value to set for the field.
2374 Sets the default value for the field. @param value The default value to set.
2375 Constructs a PDSignatureField associated with an AcroForm. Initializes signature field properties and sets a partial name.
2376 Constructs a PDTextField associated with an AcroForm. Sets the field type to text.
2377 Sets the default style string or removes it if null. @param defaultStyleString The default style string to set.
2378 Sets the rich text value for the variable text field. @param richTextValue The rich text string to set, or null to clear.
2379 Sets the coordinate system origin. @param coordSystemOrigin Array of floats representing the origin.
2380 Constructs a new PDThread object. Initializes the thread dictionary and sets its type.
2381 Sets the transition direction. @param direction The direction of the transition.
2382 Sets the transition duration. @param duration The duration of the transition in seconds.
2383 Sets the fly scale transition property. @param scale The scale factor for the fly transition.
2384 Sets whether the fly area is opaque. @param opaque True to make the fly area opaque, false otherwise.
2385 Adds all elements from another COSArray to this array. Updates the array's state if elements are added. @param objectList COSArray containing elements to add
2386 Gets the standard structure type, potentially mapping it.
2387 Adds structure elements to the pool, handling dereferencing. Dereferences objects and adds them to the pool if needed.
2388 Gets a date value, using defaultValue if null. @param key COSName representing the date key @param defaultValue Default Calendar object if date is null
2389 Gets an embedded date value, using defaultValue if null. @param embedded COSName of embedded dictionary @param key COSName representing the date key @param defaultValue Default Calendar object if date is null
2390 Inserts generated combined appearance for a text field. @param contents Content stream for appearance. @param appearanceStream Appearance stream. @param font PDFont used for rendering. @param fontSize Font size.
2391 Creates a PDImageXObject from a BufferedImage with default DPI. @param document PDF document @param image BufferedImage to encode @param quality JPEG quality
2392 Loads an FDF document from a file. @param filename Path to the FDF file. @return FDFDocument object. @throws IOException if an I/O error occurs.
2393 Adds the first intermediate curl segment to the shape. Uses getArcSegment to draw elliptical arc segments.
2394 Generates an array of points forming a curl template. @param angleCur angle for curl calculation @param r radius for the curl @return Array of Point2D.Double objects representing the curl.
2395 Shows a glyph, performing legacy calculations and transformations.
2396 Splits text into lines based on width, font, and size. @param font The font to use for width calculation. @param fontSize The font size. @param width The maximum line width. @return List of Line objects representing text lines.
2397 Gets the symbolic flag from the font descriptor, or null.
2398 Determines a fallback font name based on descriptor flags. @param fontDescriptor Font descriptor object @return Font name string
2399 Creates a Paint object from a PDColor, handling various color types. @param color The PDColor object to create a Paint from. @return A Paint object or transparent color if an error occurs.
2400 Retrieves a list of PDF form fields from the form dictionary. Returns an empty list if no fields are found.
2401 Recursively finds a child field by name. @param name Field name array, @param nameIndex Current name index @return PDField object or null if not found
2402 Retrieves child PDFields. Returns an empty list if no children exist.
2403 Retrieves string value from COSBase, handling strings/streams. Returns "" if null or unsupported type.
2404 Retrieves the field value, handling various COS object types. @return Field value or null if no value is present. @throws IOException if an unknown type is encountered.
2405 Retrieves the rich text value of the field. Returns null if RV is null, COSString, or COSStream.
2406 Gets the "Before" action. Returns null if not a COSString/Stream.
2407 Gets the value of the "After" key, as a String or null.
2408 Retrieves the action string from the dictionary. Returns null if the action is not a COSString or COSStream.
2409 Retrieves rich text contents from annotation. Returns null if no RC object is found.
2410 Retrieves string value from COSString or COSStream. Returns "" if neither type.
2411 Creates a LayoutPage for the given PDF page. @param page The PDF page to create the layout for. @return LayoutPage object representing the page layout.
2412 Reads stream data into a byte array. @return byte array representing stream content @throws IOException if an I/O error occurs
2413 Retrieves the sample array, calculating and populating it if null. Uses PDF stream data to populate the array with interpolated values.
2414 Constructs a `PatchMeshesShadingContext` with provided data. @param shading The PDMeshBasedShadingType object.
2415 Constructs a `Type4ShadingContext` with shading parameters. @param shading The PDF shading object.
2416 Constructs a `Type5ShadingContext` with shading parameters. @param shading The Type 5 shading object.
2417 Adds an attribute object to the structure element's attribute array. @param attributeObject The attribute to add.
2418 Adds a user property to the PDUserAttributeObject. @param userProperty The user property to add.
2419 Constructs a PDICCBased object, initializing its array and stream. @param doc The PDF document to associate with the stream.
2420 Constructs a PDPattern with given resources and color space. @param resources Resource object for the pattern. @param colorSpace Color space used by the pattern.
2421 Sets the change Xs array in the dictionary. @param changeXs Array of PDNumberFormatDictionary objects.
2422 Sets the change Y values to the dictionary as a COSArray. @param changeYs Array of PDNumberFormatDictionary objects.
2423 Sets the distances to be stored in the COSDictionary. @param distances Array of PDNumberFormatDictionary objects.
2424 Sets the areas to be stored in the dictionary as a COSArray. @param areas Array of PDNumberFormatDictionary objects.
2425 Sets the angles measurement data to the dictionary. @param angles Array of PDNumberFormatDictionary objects.
2426 Sets the line slopes to the COSDictionary as a COSArray. @param lineSloaps Array of PDNumberFormatDictionary objects.
2427 Grows the array to the specified size, filling with null objects. @param size target size of the array
2428 Retrieves the text color as a PDColor object. Creates if null.
2429 Clones a COSBase object. Handles arrays and dictionaries. @param src Source COSBase to clone. @return Cloned COSBase object.
2430 Parses a PDF directory object. Handles various object types. @return COSBase object or null on error. @throws IOException if an I/O error occurs.
2431 Creates a PDFXrefStreamParser from a COSStream. @param stream COSStream to parse; throws IOException on failure.
2432 Retrieves the next action(s) in a sequence. Returns a list of PDAction objects or null if none.
2433 Returns a PDRange for the specified component. @param n The component index. @return A PDRange object.
2434 Gets the encode range for a parameter. @param paramNum Parameter index to get encode range for. @return PDRange object or null if not found.
2435 Retrieves color or four-color object from dictionary. @param name Attribute name. Returns null if not found.
2436 Builds and sets the CID width array in the font dictionary. @param cidFont The CID font dictionary to update.
2437 Sets the line dash pattern in the graphics state dictionary. @param dashPattern The line dash pattern to set.
2438 Constructs a color space with a given RGB array and caches whitepoint. @param rgb RGB array defining the color space.
2439 Sets the guideline color in the COSDictionary. @param color The PDF color to set, or null for default.
2440 Sets the color of the annotation using the provided PDColor object. @param c The PDColor object representing the color to set.
2441 Sets the interior color of the annotation. @param ic The PDColor object representing the color.
2442 Sets the interior color of the polygon annotation. @param ic The PDColor object representing the new color.
2443 Sets the polyline's interior color. @param ic The PDColor object representing the color.
2444 Sets the interior color of the annotation. @param ic The PDColor object representing the color.
2445 Sets the border color of the annotation. @param c The PDColor object representing the border color.
2446 Sets the background color of the annotation. @param c The PDColor object representing the background color.
2447 Sets the text color of the outline item. @param textColor The color to set, converted to COSArray.
2448 Retrieves the color range for this PDLab. Returns a PDRange object; uses default if RANGE is null.
2449 Retrieves the BRange COSArray. Uses default if null. @return PDRange object representing the BRange.
2450 Creates a PDImageXObject from an input stream. @param document The PDF document. @param stream Input stream containing image data. @return A PDImageXObject representing the image.
2451 Sets the font setting to the given font. @param font The PDFont object to set.
2452 Sets the tint transform for color conversions. @param tint The PDFunction representing the tint transform.
2453 Sets the tint transform for color separation. @param tint The PDFunction representing the tint transform.
2454 Sets the PDF page for this destination. @param page The PDF page to set.
2455 Sets the upper limit in the LIMITS array. @param upper The upper limit value, or null to clear.
2456 Sets the lower limit for the node. @param lower The lower limit value (Integer) or null.
2457 Sets the line's start point ending style. @param style The style string, or null for LE_NONE.
2458 Sets the end point ending style of the line annotation. @param style The style string, or null for no style.
2459 Sets the start point ending style. @param style The style string, or null for LE_NONE.
2460 Sets the endpoint ending style of the polyline annotation. @param style The style string, or null for LE_NONE.
2461 Sets the line's start point ending style. @param style The style string, or null for LE_NONE.
2462 Sets the end point line ending style. @param style The style string, or null for default.
2463 Sets the start point ending style. @param style The style string, or null for LE_NONE.
2464 Sets the endpoint style for the polyline annotation. @param style The style string, or null for LE_NONE.
2465 Sets the upper limit value in the node's LIMITS array. @param upper The upper limit value to set.
2466 Sets the lower limit string in the LIMITS array. Creates array if it doesn't exist.
2467 Clips a rectangle to the media box dimensions. @param box The rectangle to clip. @return A new PDRectangle representing the clipped area.
2468 Creates a new rectangle with the same width and height. Returns the newly created PDRectangle object.
2469 Sets the color at index 0 to the provided PDGamma object. @param colour The PDGamma object representing the color.
2470 Sets the color at index 1 (after colour) to the provided PDGamma object. @param colour The PDGamma object representing the color.
2471 Sets the start color (at index 2) to the given PDGamma object. @param colour The PDGamma object representing the start color.
2472 Sets the end color (at index 3) to the provided PDGamma object. @param colour The PDGamma object representing the end color.
2473 Decrypts a COSBase object (string, stream, dict, array). @param obj Object to decrypt. @param objNum, genNum for decryption.
2474 Sets a key-value pair, using the provided string key. @param key The key to set. @param value The value to associate with the key.
2475 Sets the AcroForm for the PDF document. @param acroForm The AcroForm object to set.
2476 Sets the viewer preferences for the PDF document. @param prefs The viewer preferences object to set.
2477 Sets the document outline. @param outlines The document outline object.
2478 Sets the document metadata. @param meta The metadata object to set.
2479 Sets the open action for the PDF document. @param action The destination or action to execute.
2480 Sets the additional actions for the document catalog. @param actions The additional actions object to set.
2481 Sets the document names dictionary. @param names The document names dictionary to set.
2482 Sets the Mark Info object in the document's root dictionary. @param markInfo The MarkInfo object to set.
2483 Sets the URI dictionary for the document. @param uri The URI dictionary to set.
2484 Sets the root of the document's structure tree. @param treeRoot The structure tree root object.
2485 Sets the page labels for the PDF document. @param labels The `PDPageLabels` object to set.
2486 Sets the destination tree for named destinations. @param dests The destination tree to set.
2487 Sets the embedded files name tree node in the name dictionary. @param ef The embedded files name tree node.
2488 Sets the JavaScript action for the document. @param js The JavaScript action node.
2489 Creates a new PDPage with the specified media box. @param mediaBox The rectangle defining the page's dimensions.
2490 Sets the page resources. @param resources The PDResources object to set, or null to remove.
2491 Sets the media box rectangle for the page. @param mediaBox The media box rectangle, or null to remove.
2492 Sets the bleed box for the page. Null value removes the bleed box. @param bleedBox The rectangle defining the bleed box, or null.
2493 Sets the trim box rectangle for the page. @param trimBox The trim box rectangle, or null to remove it.
2494 Sets the art box (art rectangle) of the page. @param artBox The art box rectangle, or null to remove it.
2495 Sets the page content stream. @param contents The PDStream object representing the page content.
2496 Sets the page metadata. @param meta The metadata object to set.
2497 Sets the page's additional actions. @param actions The PDPageAdditionalActions object to set.
2498 Sets the transition object for the page. @param transition The transition object to set.
2499 Sets the page transition and duration. @param transition The transition object. @param duration Transition duration in seconds.
2500 Adds a resource to the specified dictionary. @param kind Resource kind (e.g., Fonts, Images) @param name Resource name @param object The resource object to add
2501 Sets the embedded file for this specification. @param file The embedded file to set, or null to clear.
2502 Sets the Unicode embedded file for the specification. @param file The embedded file to set, or null to clear.
2503 Sets the page associated with this marked content reference. @param page The PDPage object to associate.
2504 Sets the referenced object to the provided annotation. @param annotation The annotation to set as the referenced object.
2505 Sets the referenced object for this PDObjectReference. @param xobject The PDXObject to be set as the referenced object.
2506 Sets the page associated with this object reference. @param page The PDPage object to associate.
2507 Sets the parent node for this structure element. @param structureNode The parent PDStructureNode.
2508 Sets the page associated with this element. @param page The PDPage object to associate.
2509 Sets the parent tree node. @param parentTree The parent tree node to set.
2510 Sets the rectangle defining the annotation's bounds. @param rectangle The PDRectangle object representing the rectangle.
2511 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary to set.
2512 Sets the border effect for the annotation. @param be The PDBorderEffectDictionary to set.
2513 Sets the fringe rectangle of the annotation. @param fringe The rectangle defining the fringe.
2514 Sets the fringe rectangle for the annotation. @param fringe The rectangle representing the fringe.
2515 Sets the fringe rectangle for the annotation. @param fringe The rectangle defining the fringe.
2516 Sets the fringe rectangle of the annotation. @param fringe The rectangle defining the fringe.
2517 Sets the FDF dictionary associated with the catalog. @param fdf The FDF dictionary to set.
2518 Sets the signature for the FDF catalog. @param sig The signature object to associate with the catalog.
2519 Sets the file specification for the FDF document. @param fs The file specification to associate with the FDF.
2520 Sets the JavaScript object for the FDF document. @param js The JavaScript object to associate with the document.
2521 Sets the FDF catalog in the document's trailer dictionary. @param cat The FDF catalog to associate with the document.
2522 Sets the appearance dictionary for the field. @param ap The appearance dictionary to set.
2523 Sets the appearance stream reference for the field. @param ref The FDFNamedPageReference to set.
2524 Sets the icon fit property of the field. @param fit The FDFIconFit object to set.
2525 Sets the action associated with the field. @param a The action to set for the field.
2526 Sets the additional actions for the field. @param aa The PDAdditionalActions object to set.
2527 Sets the fractional space allocated to the icon. @param space The PDRange object representing the space.
2528 Sets the file specification for the named page reference. @param fs The file specification object to set.
2529 Sets the page information. @param info The FDFPageInfo object to set.
2530 Sets the template reference for the FDF page. @param tRef The FDFNamedPageReference to set.
2531 Sets the font file for the descriptor. @param type1Stream The PDStream representing the font file.
2532 Sets the font file 2 stream. @param ttfStream The PDF stream for the font file 2.
2533 Sets the font file 3 data. @param stream The PDStream object containing font data.
2534 Sets the CID set for the font descriptor. @param stream The CID set as a PDStream object.
2535 Sets the white point for the color space. @param whitepoint Whitepoint tristimulus value. @throws IllegalArgumentException if whitepoint is null.
2536 Sets the black point value in the dictionary. @param blackpoint The black point tristimulus value.
2537 Sets the extended graphics state. @param extendedGraphicsState The extended graphics state to set.
2538 Sets the shading resources. @param shadingResources The shading resources to set.
2539 Sets the resources for the tiling pattern. @param resources The resources object to associate.
2540 Sets the shading function. @param newFunction The new PDFunction to set.
2541 Sets the font setting in the graphics state dictionary. @param fs The PDFontSetting object to set.
2542 Sets the destination for the embedded GoTo action. @param d The destination object to set.
2543 Sets the file specification for the embedded action. @param fs The file specification object.
2544 Sets the target directory for the embedded action. @param targetDirectory The directory to navigate to.
2545 Sets the destination for the GoTo action. @param d The destination object to set.
2546 Sets the file specification for the interactive action. @param fs The file specification object.
2547 Sets the file specification for the launch action. @param fs The file specification object.
2548 Sets Windows launch parameters for the action. @param win The Windows launch parameters to set.
2549 Sets the file specification for the action. @param fs The file specification to associate with the action.
2550 Sets the file specification for the action. @param fs The file specification to associate with the action.
2551 Sets the file specification for the action. @param fs The file specification to associate with the action.
2552 Sets the 'F' action to the provided action. @param action The action to set for the 'F' key.
2553 Sets the action to be performed when the annotation is executed. @param e The action to set.
2554 Sets the action to be performed when the annotation is clicked. @param x The action to set for the 'X' key.
2555 Sets the 'D' action for the annotation. @param d The action to be set.
2556 Sets the 'U' action for the annotation. @param u The action to associate with the 'U' key.
2557 Sets the 'FO' action for the annotation. @param fo The action to associate with the 'FO' key.
2558 Sets the 'BL' action for the annotation. @param bl The action to associate with the 'BL' key.
2559 Sets the PO action. @param po The PO action to set.
2560 Sets the PC action. @param pc The action to set for the PC event.
2561 Sets the PV action. @param pv The action to set for PV.
2562 Sets the PI action for the annotation. @param pi The action to set for the PI event.
2563 Sets the document's Will Close action. @param wc The action to be executed when the document closes.
2564 Sets the document's "WS" action. @param ws The action to set for the "WS" event.
2565 Sets the document submission action. @param ds The document submission action to set.
2566 Sets the WP action. @param wp The action to set for the WP event.
2567 Sets the document's "DP" action. @param dp The document action to set.
2568 Sets the 'K' action for the form field. @param k The action to associate with the 'K' key.
2569 Sets the 'F' action for the form field. @param f The action to associate with the 'F' key.
2570 Sets the 'V' action for the form field. @param v The action to associate with the 'V' key.
2571 Sets the 'C' action for the form field. @param c The action to associate with the 'C' key.
2572 Sets the open action for the page. @param o The action to execute when the page is opened.
2573 Sets the 'C' action for the PDF page. @param c The action to set for the 'C' key.
2574 Sets the target directory for the PDF navigation. @param targetDirectory The target directory object.
2575 Sets the named destination for the target directory. @param dest The named destination object to set, or null to remove.
2576 Sets the appearance dictionary for the annotation. @param appearance The appearance dictionary to set.
2577 Sets the optional content property list for the annotation. @param oc The PDPropertyList representing optional content.
2578 Sets the page this annotation is associated with. @param page The page object to associate.
2579 Sets the file specification for the attachment. @param file The file specification object.
2580 Sets the border effect for the annotation. @param be The PDBorderEffectDictionary to set.
2581 Sets the rectangle difference for the annotation. @param rd The rectangle difference object.
2582 Sets the action associated with the annotation. @param action The action to be performed when the link is activated.
2583 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object.
2584 Sets the destination of the annotation link. @param dest The destination object to set.
2585 Sets the URI for a previous action. @param pa The URI action to associate with the link.
2586 Sets the annotation popup. @param popup The popup object to associate with annotation.
2587 Sets the annotation this markup is a reply to. @param irt The annotation this markup replies to.
2588 Sets the external data dictionary for the annotation. @param externalData The external data dictionary to set.
2589 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary representing the border style.
2590 Sets the border effect for the polygon annotation. @param be The PDBorderEffectDictionary to set.
2591 Sets the border effect of the annotation. @param be The PDBorderEffectDictionary to set.
2592 Sets the rectangle difference for the annotation. @param rd The rectangle difference to set.
2593 Sets the appearance characteristics dictionary for the annotation. @param appearanceCharacteristics The appearance characteristics.
2594 Sets the action to be performed when the annotation is activated. @param action The action to set, can be null.
2595 Sets the actions associated with the annotation. @param actions The actions to set, can be null.
2596 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object for the border.
2597 Sets the parent terminal field. @param field The parent field; throws exception if same dictionary.
2598 Sets the normal appearance of the annotation. @param entry The PDAppearanceEntry object for normal state.
2599 Sets the normal appearance of the annotation. @param ap The PDAppearanceStream representing the normal appearance.
2600 Sets the rollover appearance of the annotation. @param entry The PDAppearanceEntry object for rollover.
2601 Sets the rollover appearance of the annotation. @param ap The PDAppearanceStream object for rollover.
2602 Sets the down appearance of the annotation. @param entry The PDAppearanceEntry object for the down state.
2603 Sets the down appearance stream for the annotation. @param ap The PDAppearanceStream representing the down appearance.
2604 Sets the filter for the PDPropBuildDataDict. @param filter The filter to set.
2605 Sets the publication security data dictionary. @param pubSec The PDPropBuildDataDict object to set.
2606 Sets the application data dictionary for the PDPropBuild. @param app The PDPropBuildDataDict to set as the application data.
2607 Sets the certificate associated with the seed value. @param certificate The certificate object to set.
2608 Sets the property build object to the dictionary. @param propBuild The property build object to set.
2609 Sets the previous sibling of this outline node. @param outlineNode The previous sibling node.
2610 Sets the next sibling outline node. @param outlineNode The next sibling node.
2611 Sets the destination for this outline item. @param dest The destination object to set.
2612 Sets the action to be performed on this outline item. @param action The action to associate with the item.
2613 Sets the structure element for this outline item. @param structureElement The structure element to set.
2614 Sets the first child outline node. @param outlineNode The first child node to set.
2615 Sets the last child outline node. @param outlineNode The last child node to set.
2616 Sets the default resources for the form. @param dr The default resources object to set.
2617 Sets the XFA resource for the form. @param xfa The XFA resource to set.
2618 Sets the signature value. @param value The signature value to set.
2619 Sets the default value for the signature field. @param value The default value to set.
2620 Sets the seed value for the signature field. @param sv The seed value to set; null to unset.
2621 Sets the additional actions for the form field. @param actions The additional actions to set.
2622 Sets the bounding box for the viewport. @param rectangle The PDRectangle representing the bounding box.
2623 Sets the measure attribute for the viewport. @param measure The PDMeasureDictionary to set.
2624 Sets the thread information. @param info The document information to associate with the thread.
2625 Sets the thread associated with this bead. @param thread The PDThread object to associate.
2626 Sets the next bead in the thread sequence. @param next The next PDThreadBead object.
2627 Sets the previous bead in the thread. @param previous The previous PDThreadBead object.
2628 Sets the page associated with this bead. @param page The PDPage to associate with the bead.
2629 Sets the rectangle associated with the bead. @param rect The rectangle object to set.
2630 Sets the "Marked" flag in the COSDictionary to the given value. @param value The boolean value for the "Marked" flag.
2631 Sets the UserProperties value in the COSDictionary. @param userProps The boolean value for UserProperties.
2632 Sets the "Suspects" flag to false in the COSDictionary.
2633 Sets whether to track mouse position for this action. @param value True to track mouse position, false otherwise.
2634 Sets the 'Open' state of the annotation popup. @param open `true` to open, `false` to close.
2635 Sets the "FD" boolean value in the underlying COSDictionary. @param fd The boolean value to set for "FD".
2636 Sets the volatile status of the file. @param fileIsVolatile Boolean indicating volatility.
2637 Sets the hidden status of the property. Notifies listeners and updates the underlying COS object.
2638 Sets whether to encrypt metadata. @param encryptMetaData True to encrypt metadata.
2639 Sets whether the annotation has a caption. @param cap True if the annotation should have a caption.
2640 Sets the scale-to-fit flag for the annotation. @param value True to scale icon to fit annotation.
2641 Sets the rename flag in the template dictionary. @param value True to enable renaming, false otherwise.
2642 Sets the anti-aliasing flag in the dictionary. @param antiAlias boolean value for anti-aliasing
2643 Sets the stroking overprint control to the specified value. @param op The overprint control flag (true/false)
2644 Sets the non-stroking overprint control to the given value. @param op The boolean value for non-stroking overprint control.
2645 Sets the automatic stroke adjustment flag. @param sa boolean value for automatic stroke adjustment
2646 Sets the alpha source flag (AIS) in the dictionary. @param alpha boolean value for the alpha source flag
2647 Sets the text knockout flag to the specified value. @param tk The text knockout flag (true/false)
2648 Sets whether the action opens in a new window based on OpenMode. @param value The desired OpenMode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2649 Sets whether the launched content opens in a new window. @param value OpenMode enum: USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW
2650 Sets whether the action opens in a new window based on OpenMode. @param value The OpenMode enum value.
2651 Sets the synchronous flag for the action. @param synchronous True to play synchronously, false otherwise.
2652 Sets the repeat flag for the action. @param repeat True to repeat the action, false otherwise.
2653 Sets the mix setting for the action to the specified value. @param mix The mix setting (true/false)
2654 Sets the caption flag to the specified boolean value. @param cap The new caption flag.
2655 Sets the 'Open' flag to the specified boolean value. @param open The boolean value for the 'Open' flag.
2656 Sets the pre-release flag in the dictionary. @param preRelease True if pre-release, false otherwise.
2657 Sets the 'nonEmbedFontNoWarn' flag to the specified value. @param noEmbedFontWarning Flag to suppress no-embed font warning.
2658 Sets the trusted mode flag in the dictionary. @param trustedMode The trusted mode value (true/false).
2659 Sets whether form fields require appearance updates. @param value Boolean indicating whether appearances are needed.
2660 Sets whether the toolbar should be hidden. @param value `true` to hide, `false` to show.
2661 Sets whether the menu bar is hidden. @param value True to hide, false to show.
2662 Sets whether the window UI is hidden. @param value True to hide the UI, false otherwise.
2663 Sets whether the PDF document should fit the window. @param value `true` to fit, `false` otherwise.
2664 Sets whether the PDF window should be centered. @param value `true` to center, `false` otherwise.
2665 Sets whether to display the document title. @param value True to display, false otherwise.
2666 Sets an array of strings to the dictionary under the given name. @param name The name of the array. @param values The array of strings to set.
2667 Sets an array of COSNames for a given name in the dictionary. @param name Name of the array to set. @param values Array of values to be added to the array.
2668 Sets an array of numbers to the dictionary under the given name. @param name Array key @param values Array of float values
2669 Parses stamp annotation appearance XML to COSDictionary. @param appearanceXML XML element representing appearance. @return COSDictionary representing parsed appearance.
2670 Sets the name in the dictionary using a PDF name. @param key The key of the name. @param value The name string.
2671 Sets the page display mode for the document. @param mode The desired PageMode enum value.
2672 Sets the page layout for the document. @param layout The page layout to set.
2673 Sets the PDF version number. @param version The version string to set.
2674 Sets the trapped status of the PDF document. @param value "True", "False", or "Unknown" value.
2675 Sets the style for the page label. Null value removes the style.
2676 Creates a PDTypedDictionaryWrapper with the given type name. @param type The type name to associate with the dictionary.
2677 Sets the owner of the attribute. @param owner The owner string to set.
2678 Constructs a new PDMarkedContentReference with default type.
2679 Constructs a new PDObjectReference with a default type.
2680 Sets the structure type of the element. @param structureType The structure type string.
2681 Creates a new PDStructureNode with the specified type. @param type The type of the structure node.
2682 Sets the property name. @param name The new name for the property.
2683 Sets the guideline style in the dictionary. @param style The style string to set.
2684 Sets the subfilter for the dictionary. @param subfilter The subfilter string to set.
2685 Sets the annotation intent. @param intent The intent string to set.
2686 Sets the line ending style of the annotation. @param style The line ending style string.
2687 Sets the icon name for the annotation. @param icon The icon string to set.
2688 Sets the FDF version. @param version The FDF version string.
2689 Sets the encoding of the FDF document. @param encoding The encoding string to set.
2690 Sets the scaling option for the icon. @param option The scaling option string.
2691 Sets the icon scaling type. @param scale The scaling type string (e.g., "fit").
2692 Initializes a new PDAbstractPattern with a type name. Creates a COSDictionary and sets its type to Pattern.
2693 Sets the action type. @param type The type of the action.
2694 Sets the action subtype. @param s The subtype string to set.
2695 Sets the annotation subtype. @param subType The subtype string to set.
2696 Sets the appearance state of the annotation. @param as The appearance state string.
2697 Sets the attachment name. @param name The new attachment name.
2698 Sets the line ending style for the annotation. @param style The line ending style string.
2699 Sets the caption positioning string. @param captionPositioning The positioning string.
2700 Sets the highlight mode for the annotation. @param mode The highlight mode string.
2701 Sets the reply type for the annotation. @param rt The reply type string.
2702 Sets the intent of the annotation. @param it The intent string to set.
2703 Sets the name of the rubber stamp annotation. @param name The new name for the annotation.
2704 Sets the annotation name. @param name The new name for the annotation.
2705 Sets the highlighting mode. Valid values: 'N', 'I', 'O', 'P', 'T'. @param highlightingMode The highlighting mode string.
2706 Sets the border style. @param s The border style string.
2707 Creates a new PDExternalDataDictionary with type "ExData".
2708 Sets the subtype of the external data dictionary. @param subtype The subtype string to set.
2709 Sets the name property in the dictionary. @param name The name to set.
2710 Sets the URL type in the dictionary. @param urlType The URL type string to set.
2711 Initializes a new PDDocumentOutline object. Sets the document type to "Outlines".
2712 Initializes the outline from a COSDictionary. @param dic The COSDictionary containing outline data.
2713 Sets the default value for the button. @param value The default value to set.
2714 Creates a new PDMeasureDictionary with a COSDictionary. Sets the dictionary's type to TYPE.
2715 Sets the subtype of the measurement dictionary. @param subtype The subtype string to set.
2716 Creates a new PDNumberFormatDictionary with default type.
2717 Sets the name of the viewport. @param name The new name for the viewport.
2718 Constructs a PDTransition with the specified transition style. @param style The transition style to apply.
2719 Sets the transition dimension. @param dimension The transition dimension object.
2720 Sets the transition motion. @param motion The transition motion object.
2721 Sets the date value associated with the given key. @param key The key for the date value. @param date Calendar object representing the date.
2722 Sets a string value for the given key in the dictionary. @param key The key for the string value. @param value The string value to set.
2723 Sets a string value for a key within an embedded dictionary. @param embedded The embedded object. @param key The key for the string value. @param value The string value to set.
2724 Sets the document language. @param language The language code (e.g., "en-US").
2725 Sets the title of the PDF document. @param title The title to set.
2726 Sets the author of the PDF document. @param author The author's name to set.
2727 Sets the PDF document's subject. @param subject The subject string to set.
2728 Sets the keywords for the PDF document. @param keywords Keywords string to set.
2729 Sets the creator of the PDF document. @param creator The creator string to set.
2730 Sets the producer string in the PDF document's info dictionary. @param producer The producer string to set.
2731 Sets the prefix for page labels. Removes if prefix is null.
2732 Sets the Unicode file name. @param file The Unicode file name to set.
2733 Sets the file name associated with the specification. @param file The name of the file.
2734 Sets the file description. @param description The description string to set.
2735 Sets the element identifier. @param id The identifier string to set.
2736 Sets the title of the element. @param title The title string to set.
2737 Sets the language associated with this element. @param language The language code to set.
2738 Sets the alternate description for the element. @param alternateDescription The alternate description string.
2739 Sets the expanded form string value. @param expandedForm The expanded form string to set.
2740 Sets the actual text value for the element. @param actualText The text to associate with the element.
2741 Sets the formatted value of the property and notifies listeners. @param formattedValue The new formatted value to set.
2742 Sets the date value for the annotation. @param date The date string to set.
2743 Sets the annotation name. @param name The name of the annotation.
2744 Sets the annotation contents. @param contents The string content of the annotation.
2745 Sets the title of the annotation. @param title The title string to set.
2746 Sets the annotation subject. @param subject The subject string to set.
2747 Sets the symbol for the annotation. @param symbol The symbol to set; "paragraph" sets it to "P".
2748 Sets the default appearance string for the annotation. @param appearance The default appearance string to set.
2749 Sets the default style for the annotation. @param style The default style string to set.
2750 Sets the style for the line annotation's caption. @param captionStyle The style string to set.
2751 Sets the annotation's state to the given string value. @param state The string representing the annotation's state.
2752 Sets the state model for the annotation. @param stateModel The state model string to set.
2753 Sets the status of the FDF document. @param status The status string to set.
2754 Sets the target field value in the FDF dictionary. @param target The target string value to set.
2755 Sets the partial field name. @param partial The partial field name to set.
2756 Sets the name of the named page reference. @param name The name to associate with the reference.
2757 Sets the name of the optional content group. @param name The new name for the optional content group.
2758 Constructs a `PDOptionalContentProperties` object, initializing its dictionary and default properties.
2759 Sets the JavaScript action string for the interactive element. @param sAction The JavaScript action string to set.
2760 Sets the 'F' value of the action to the provided string. @param f The string value for the 'F' parameter.
2761 Sets the 'D' action parameter to the specified string value. @param d The string value for the 'D' action parameter.
2762 Sets the 'O' parameter for the action, specifying the file to open. @param o The file path or application to launch.
2763 Sets the 'P' parameter for the action, using the provided string value.
2764 Sets the URI associated with the action. @param uri The URI to set.
2765 Sets the filename associated with the target directory. @param filename The filename to set.
2766 Sets the name of the annotation. @param name The name to associate with the annotation.
2767 Sets the filename for the launch parameters. @param file The name of the file to be launched.
2768 Sets the directory for the launch parameters. @param dir The directory path to set.
2769 Sets the operation type. @param op The operation to be performed.
2770 Sets the execution parameter value. @param param The value of the execution parameter.
2771 Sets the annotation content. @param value The content string to set.
2772 Sets the modification date of the annotation. @param m The modification date string.
2773 Sets the annotation name. @param nm The new annotation name.
2774 Sets the default appearance value for the annotation. @param daValue The default appearance string value.
2775 Sets the default style string for the annotation. @param defaultStyleString The string representing the default style.
2776 Sets the title popup string. @param t The title popup string to set.
2777 Sets the subject of the annotation. @param subj The subject string to set.
2778 Sets the annotation state. @param state The state string to set.
2779 Sets the state model for the annotation. @param stateModel The state model string to set.
2780 Sets the normal caption for the annotation. @param caption The caption string to set.
2781 Sets the rollover caption for the annotation. @param caption The string to use as the rollover caption.
2782 Sets the alternate caption for the annotation. @param caption The alternate caption string to set.
2783 Sets the date property in the dictionary. @param date The date string to set.
2784 Sets the URL associated with the certificate. @param url The URL to set.
2785 Sets the URL value in the dictionary. @param url The URL to be set.
2786 Sets the name of the signature. @param name The name to set for the signature.
2787 Sets the location of the signature. @param location The location string to set.
2788 Sets the reason for the signature. @param reason The reason string to set.
2789 Sets the contact information in the signature dictionary. @param contactInfo The contact information string.
2790 Sets the title of the outline item. @param title The title to set for the outline item.
2791 Sets the default appearance value for the form field. @param daValue The string value representing the default appearance.
2792 Sets the default value for the choice field. @param value The default value to set.
2793 Sets the field's partial name. Throws exception if name contains ".". @param name The field's partial name.
2794 Sets the alternate field name for the field. @param alternateFieldName The alternate field name to set.
2795 Sets the mapping name for the field. @param mappingName The name to associate with the field.
2796 Sets the value of the field. @param value The new string value for the field.
2797 Sets the field's value. @param value The new value for the text field.
2798 Sets the default value for the text field. @param value The default string value to set.
2799 Sets the default appearance value for the text field. @param daValue The default appearance string to set.
2800 Sets the scale ratio for rectilinear measurements. @param scaleRatio The scale ratio value as a string.
2801 Sets an integer value for the given key. @param key The key for the integer value. @param value The integer value to set.
2802 Sets an integer value within an embedded dictionary. @param embeddedDictionary Key to the embedded dictionary. @param key The key for the integer value. @param value The integer value to set.
2803 Sets a bit flag in a dictionary entry. @param field Key of the dictionary entry. @param bitFlag The bit flag to set/unset. @param value True to set, false to unset.
2804 Sets the structParents value for the page. @param structParents Integer value representing struct parents.
2805 Sets the page rotation angle. @param rotation Rotation angle in degrees (0, 90, 180, 270)
2806 Constructs a PDPageTree from a COSDictionary, handling edge cases. @param root The root COSDictionary of the page tree. @param document The parent PDDocument.
2807 Removes a node from the page tree and updates ancestor counts. @param node The COSDictionary representing the node to remove.
2808 Adds a page to the page tree, updating parent and ancestor counts. @param page The PDPage object to add to the tree.
2809 Sets the starting page number. @param start The starting page number (must be positive).
2810 Sets the bits per sample for the PDF function. @param bps The number of bits per sample.
2811 Sets the Marker Context Identifier (MCID) for this reference. @param mcid The MCID to set.
2812 Sets the revision number for the PDF structure element. @param revisionNumber The revision number to set. Must be >= 0.
2813 Sets the next key for the parent tree. @param parentTreeNextkey The next key value.
2814 Sets the length of the cryptographic filter dictionary. @param length The length value to set.
2815 Sets the PDF version number. @param version The PDF version to set.
2816 Sets the length of the encrypted content. @param length The length of the encrypted content.
2817 Sets the revision number of the PDF dictionary. @param revision The revision number to set.
2818 Sets the permissions for the PDF document. @param permissions Integer representing the permission flags.
2819 Sets the page number the annotation belongs to. @param page The page number (starting from 0)
2820 Sets the justification of the annotation. @param justification Justification string ("left", "centered", "right")
2821 Sets the rotation angle of the annotation. @param rotation Rotation angle in degrees.
2822 Sets the field flags to the specified value. @param ff The field flags to set.
2823 Sets the field flags for the FDF field. @param ff The field flags to set.
2824 Sets the clear field flags for the field. @param ff The clear field flags to set.
2825 Sets the widget field flags for the field. @param f The widget field flags to set.
2826 Sets the widget field flags for the field. @param ff The widget field flags to set.
2827 Sets the clear widget field flags to the given value. @param ff The flag value to set for clearing the widget.
2828 Sets the font flags and stores them in the dictionary. @param flags The flags value to set.
2829 Sets glyph widths in the font dictionary. Uses font encoding to map glyphs and calculate widths.
2830 Sets the paint type for the pattern. @param paintType The integer value representing the paint type.
2831 Sets the pattern type in the pattern dictionary. @param patternType The integer representing the pattern type.
2832 Sets the paint type for the tiling pattern. @param paintType The integer representing the paint type.
2833 Sets the tiling type. @param tilingType The integer representing the tiling type.
2834 Sets the shading type in the dictionary. @param shadingType The shading type to set.
2835 Sets the bits per flag value. @param bitsPerFlag The number of bits per flag.
2836 Sets the number of vertices per row in the shading. @param verticesPerRow Number of vertices per row.
2837 Sets the bits per color component. @param bitsPerComponent Number of bits per color component.
2838 Sets the bits per coordinate and stores the value. @param bitsPerCoordinate Number of bits representing a coordinate.
2839 Sets the line cap style. @param style The line cap style to set.
2840 Sets the line join style. @param style The line join style value.
2841 Sets the overprint mode. Null value removes the property. @param overprintMode The overprint mode value.
2842 Sets the reset form flags. @param flags The integer value representing the flags.
2843 Sets the submission flags for the action. @param flags Integer representing the submission flags.
2844 Sets the page number for the target directory. @param pageNumber The page number; removes if negative.
2845 Sets the annotation index in the dictionary. If negative, removes the annotation index.
2846 Sets the annotation flags. @param flags The flags to set for the annotation.
2847 Sets the parent structure element for this annotation. @param structParent Integer representing the parent structure.
2848 Sets the Q value for the annotation. @param q The Q value to set.
2849 Sets the rotation angle for the annotation. @param rotation The rotation angle in degrees.
2850 Sets the 'P' value in the dictionary. @param p The value to set; must be between 0 and 3.
2851 Sets the timestamp required flag in the dictionary. @param flag True if timestamp is required, false otherwise.
2852 Sets the number of open child nodes. @param openCount The number of open child outline nodes.
2853 Sets the 'Q' value in the form dictionary. @param q The integer value to set for the 'Q' flag.
2854 Sets the field flags to the specified value. @param flags The field flags to set.
2855 Sets the top index of the list box. Null removes the value. @param topIndex The index of the first visible item.
2856 Sets the maximum length for the text field. @param maxLen The maximum number of characters allowed.
2857 Sets the Q attribute value. @param q The Q attribute value to set.
2858 Sets a long value for a given key in the dictionary. @param key The key for the long value. @param value The long value to set.
2859 Writes the PDF document trailer data to the output stream. Handles incremental updates and sorts cross-reference entries.
2860 Sets the revision number for the digital signature. @param revision The revision number to set.
2861 Sets the minimum revision number for the digital signature. @param revision The minimum revision number to set.
2862 Sets a float value in the dictionary. @param key The key for the float value. @param value The float value to set.
2863 Sets the user unit value for the page. @param userUnit The user unit value (must be positive).
2864 Sets the width of the guideline. @param width The width of the guideline (in points).
2865 Sets the opacity of the annotation. @param opacity The opacity value to set (0.0-1.0).
2866 Sets the leader length of the annotation. @param leaderLength The length of the leader line.
2867 Sets the leader extend value for the annotation. @param leaderExtend The extend value for the leader line.
2868 Sets the leader offset for the line annotation. @param leaderOffset Offset value for the leader line.
2869 Sets the font weight in the dictionary. @param fontWeight The weight of the font.
2870 Sets the italic angle for the font. @param angle The italic angle in degrees.
2871 Sets the ascent value in the dictionary. @param ascent The ascent value to set.
2872 Sets the descent value in the dictionary. @param descent The descent value for the font.
2873 Sets the leading value in the dictionary. @param leading The leading value to set.
2874 Sets the cap height of the font and stores it in the dictionary. @param capHeight The cap height value to set.
2875 Sets the x-height of the font and stores it in the dictionary. @param xHeight The x-height value to set.
2876 Sets the vertical stem width in the font dictionary. @param stemV The vertical stem width value.
2877 Sets the stem height for the font descriptor. @param stemH The stem height value to set.
2878 Sets the average character width for the font. @param averageWidth The average width of a character.
2879 Sets the maximum width for the font in the dictionary. @param maxWidth The maximum width value to set.
2880 Sets the missing width for the font. @param missingWidth The missing width value to set.
2881 Sets the x-step value for the tiling pattern. @param xStep The x-step value to set.
2882 Sets the Y step value for the tiling pattern. @param yStep The vertical step size for the pattern.
2883 Sets the volume of the action. @param volume Volume level between -1.0 and 1.0.
2884 Sets the length of the leader line. @param leaderLineLength Length of the leader line.
2885 Sets the length of the leader line extension. @param leaderLineExtensionLength Length of the extension.
2886 Sets the leader line offset length. @param leaderLineOffsetLength The offset length value.
2887 Sets the constant opacity of the annotation. @param ca The constant opacity value (0.0 to 1.0).
2888 Sets the border width. If an integer, sets as int; otherwise, as float.
2889 Sets the 'V' value (minimum required capability) in the dictionary. @param minimumRequiredCapability The value to set for 'V'.
2890 Sets the CYX value in the COSDictionary. @param cyx The CYX value to set.
2891 Parses a COS stream from the dictionary. @param dic The COSDictionary containing stream data. @return A COSStream object. @throws IOException if an I/O error occurs.
2892 Clones and merges COS objects from base to target. Returns if base is null or equal to target.
2893 Parses a PDF document. @param lenient Whether to parse leniently. @return PDDocument object or null if parsing fails.
2894 Processes PDF operators from a content stream. Parses tokens and executes operators, managing color processing.
2895 Parses PDF stream tokens and returns them as a list. Returns null if end of stream is reached.
2896 Retrieves the glyph bounding box from the font stream. Parses stream tokens to extract x, y, width, and height.
2897 Retrieves the width of the character. Parses operators and returns width, or throws IOException.
2898 Writes the PDF document to the output stream. @param doc The PDF document to write.
2899 Saves the document incrementally to the specified output stream. @param output Output stream for saving the incremental PDF.
2900 Constructs a PDDocument using a memory-only stream cache.
2901 Gets the document catalog. Creates one if it doesn't exist.
2902 Retrieves a COSDictionary representing a page. @param pageNum 1-based page index. @param node Starting COSDictionary node. @param encountered Pages encountered so far.
2903 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing the file specification @return PDFileSpecification or null if base is null @throws IOException if the base object is of an unknown type
2904 Notifies the structure element of changes to this attribute.
2905 Appends a COSBase object to the current node's kids. Handles null input and uses appendKid to add the object.
2906 Inserts a COSObjectable before a reference node. @param newKid The node to insert. @param refKid The reference node.
2907 Removes a child node (COSBase) from the node. @param objectable The COSObjectable object to remove. @return True if removed, false otherwise.
2908 Sets the standard crypt filter dictionary. @param cryptFilterDictionary The filter dictionary to set.
2909 Sets the default crypt filter dictionary for the PDF. @param defaultFilterDictionary Crypt filter dictionary to set.
2910 Constructs a new FDFAnnotationCaret, initializing the subtype.
2911 Constructs a new FDFAnnotationCircle. Initializes subtype name in the annotation dictionary.
2912 Creates a new FDFAnnotationFileAttachment. Sets the subtype of the annotation.
2913 Initializes the free text annotation, setting its subtype.
2914 Creates a new FDFAnnotationInk with subtype set to SUBTYPE.
2915 Initializes a new FDFAnnotationLine with subtype. Sets the subtype name for the annotation.
2916 Initializes the FDFAnnotationLink with a subtype.
2917 Constructs a new FDFAnnotationPolygon. Sets the subtype name to SUBTYPE in the annotation dictionary.
2918 Constructs a new FDFAnnotationPolyline. Sets the subtype of the annotation to SUBTYPE.
2919 Default constructor. Initializes the subtype name.
2920 Constructs a new FDFAnnotationSquare. Sets the subtype name to SUBTYPE in the annotation dictionary.
2921 Initializes the stamp annotation with the subtype.
2922 Constructs a new FDFAnnotationText. Sets the annotation subtype to SUBTYPE.
2923 Default constructor for FDFAnnotationTextMarkup.
2924 Builds vertical font metrics and sets them in the CID font dictionary.
2925 Default constructor. Initializes a PDSimpleFont object.
2926 Retrieves an OptionalContentGroup by its name. @param name Name of the group to retrieve. @return PDOptionalContentGroup or null if not found.
2927 Retrieves a collection of optional content groups (OCGs). Returns an empty collection if no OCGs are found.
2928 Sets the line width for graphics rendering. @param width The line width value, or null to remove.
2929 Sets the miter limit value. @param miterLimit The miter limit value to set.
2930 Sets the flatness tolerance value. @param flatness The flatness tolerance value to set.
2931 Sets the smoothness tolerance value in the graphics state. @param smoothness The smoothness tolerance value.
2932 Sets the stroking alpha constant. @param alpha The alpha value for stroking, or null to remove.
2933 Sets the non-stroking alpha constant. @param alpha The alpha value to set, or null to remove.
2934 Constructs a PDAnnotationLink with subtype set to SUB_TYPE.
2935 Default constructor for PDAnnotationMarkup.
2936 Constructs a PDAnnotationPopup with a subtype name. Sets the annotation subtype to SUB_TYPE.
2937 Constructs a PDAnnotationWidget with the subtype set to SUB_TYPE.
2938 Constructs a PDAnnotationLink from a COSDictionary. @param field The COSDictionary containing link data.
2939 Constructs a PDAnnotationMarkup from a COSDictionary.
2940 Constructs a PDAnnotationPopup from a COSDictionary. @param field The COSDictionary containing popup data.
2941 Constructs a PDAnnotationUnknown from a COSDictionary.
2942 Constructs a PDAnnotationWidget from a COSDictionary. Sets the subtype to SUB_TYPE.
2943 Sets rectangle margin differences equally. @param difference Margin difference applied to all sides.
2944 Sets rectangle differences for the annotation. @param difference Value for left, top, right, and bottom differences.
2945 Sets rectangular differences for the annotation. @param difference Value applied to all difference sides.
2946 Sets the border line style and width. @param lineWidth The line width. @param bs Border style dictionary. @param border Border array.
2947 Adds key usage flags to certificate, then adds to dictionary. @param digitalSignature-decipherOnly Key usage flags.
2948 Constructs a PDCheckBox associated with the given AcroForm.
2949 Constructs a PDComboBox, initializing it with the provided AcroForm. @param acroForm The parent AcroForm object.
2950 Constructs a PDListBox object, initializing its parent. @param acroForm The parent AcroForm object.
2951 Sets the value of the choice field. @param value The new value to set for the choice field.
2952 Retrieves the annotation border as a COSArray. Creates a new one if needed.
2953 Creates a COSWriterCompressionPool with a PDF document and parameters. @param document The PDF document to compress. @param parameters Compression parameters, or null for defaults.
2954 Gets an embedded date value, using null as default. @param embedded COSName of embedded dictionary @param key COSName representing the date key
2955 Creates a PDImageXObject from a BufferedImage with default DPI. @param document PDF document @param image BufferedImage to encode @return PDImageXObject representing the image
2956 Adds a corner curl shape using elliptical arcs. @param anglePrev Previous angle. @param angleCur Current angle.
2957 Draws a basic ellipse border using calculated parameters. @param left Left coordinate of the ellipse. @param bottom Bottom coordinate of the ellipse. @param right Right coordinate of the ellipse. @param top Top coordinate of the ellipse.
2958 Formats text content, applying alignment and wrapping.
2959 Calculates the font size based on content and rectangle size. @param font The PDFont to use for calculations. @param contentRect The rectangle to fit content within.
2960 Reads and sets the font encoding based on dictionary values. Handles different encoding types and falls back if needed.
2961 Determines if the font is symbolic based on flags and encoding. Returns true if symbolic, false otherwise, null if unknown.
2962 Finds a TrueType font by name, or uses a fallback if not found. @param baseFont Base font name. @param fontDescriptor Font descriptor. @return FontMapping object.
2963 Finds a FontBoxFont by base font name, using fallback if needed. @param baseFont Base font name. @param fontDescriptor Font descriptor. @return FontMapping with FontBoxFont or fallback.
2964 Checks if the form is dynamic (XFA) by verifying XFA key & empty fields.
2965 Retrieves the rich contents of the annotation. Returns "" if null or unsupported type.
2966 Writes field data to an XML Writer, handling values and kids.
2967 Gets the rich text value from the RV attribute. Returns an empty string if the attribute is missing.
2968 Creates a PDFunctionType4 from a COSBase stream. @param functionStream COSBase representing the function stream @throws IOException if an I/O error occurs
2969 Recursively interpolates float values based on coordinates & step. @param coord Coordinate vector. @param step Current step index.
2970 Constructs a `Type6ShadingContext` with provided shading data. @param shading The PDShadingType6 object.
2971 Initializes Type7ShadingContext with shading data and transforms. @param shading The PDShadingType7 object.
2972 Extracts bytes from XFA data, handling COSArray or COSStream. Returns empty byte array if no data is found.
2973 Constructs a PDPageFitDestination with a TYPE name.
2974 Sets the fit bounding box type. @param fitBoundingBox True if bounding box is used, false otherwise.
2975 Constructs a `PDPageFitHeightDestination` with initial values.
2976 Sets the left margin of the page fit destination. @param x The left margin value; -1 indicates no margin.
2977 Sets the fit bounding box type based on the input. @param fitBoundingBox True for bounded box, false for default.
2978 Constructs a `PDPageFitRectangleDestination` with a size of 6.
2979 Sets the left coordinate of the rectangle. @param x The x-coordinate; null if unknown.
2980 Sets the bottom coordinate (y) of the rectangle. @param y The y-coordinate; null if not applicable.
2981 Sets the right coordinate of the rectangle. @param x The x coordinate; null if unset.
2982 Sets the top coordinate of the rectangle. @param y The y coordinate; -1 sets to null.
2983 Constructs a PDPageFitWidthDestination object. Initializes the internal array with type information.
2984 Sets the top coordinate of the page fitting destination. @param y The top coordinate; -1 indicates no top boundary.
2985 Sets the fit bounding box type. @param fitBoundingBox True if bounding box is used.
2986 Constructs a PDPageXYZDestination with an initial array size.
2987 Sets the left coordinate. Null if -1, otherwise sets the value. @param x The left coordinate.
2988 Sets the top coordinate of the view. @param y The y coordinate; null if not specified.
2989 Sets the zoom level for the destination. @param zoom The zoom level to set; -1 disables zoom.
2990 Parses a COS dictionary value, handling object numbers & generations. @return COSBase object or null if parsing fails. @throws IOException if an I/O error occurs.
2991 Retrieves decode parameters from the stream. Uses COSName.DECODE_PARMS or COSName.DP. @return List of decode parameters or null.
2992 Retrieves file decode parameters. @return List of decode params or null if not found.
2993 Constructs a PDCalGray object, initializing with CALGRAY color space.
2994 Constructs a PDCalRGB object, initializing with the CALRGB name.
2995 Constructs a PDLab color space using COSName.LAB.
2996 Constructs a PDCalGray object from a COSArray. @param array The COSArray representing the CALGRAY data.
2997 Constructs a PDCalRGB object from a COSArray. @param rgb The RGB color components in a COSArray.
2998 Constructs a PDLab color space from a given CIE LAB array. @param lab CIE LAB color array.
2999 Loads the ICC profile, falling back to alternate if needed. Handles exceptions during profile loading and validation.
3000 Sets the A component range. @param range The PDRange object for the A component.
3001 Sets the blue component range. @param range The PDRange object for the blue component.
3002 Gets the crop box for the page, or the media box if none. Uses inherited value or defaults to media box dimensions.
3003 Gets the bounding box of an appearance stream. If null, uses the widget's rectangle. @param fieldWidget Widget with rectangle to use. @param appearanceStream Appearance stream to get bbox from. @return PDRectangle object representing bounding box.
3004 Sets the Bounding Box (BBOX) attribute to the given rectangle. @param bbox The rectangle representing the BBOX, or null.
3005 Sets the color value for the specified name. @param name The name of the color attribute. @param value The new color value (PDGamma).
3006 Sets the four colors for a given name, notifying of changes. @param name Attribute name. @param value The PDFourColours value to set.
3007 Creates a new PDPage with default LETTER dimensions.
3008 Adds a resource to the dictionary, returning its key. @param kind Resource kind, prefix, and object to add.
3009 Adds a font resource to the dictionary. @param name Font name @param font The font object to add
3010 Adds a color space resource to the dictionary. @param name COSName identifying the color space @param colorSpace The PDColorSpace object to add
3011 Adds an extended graphics state resource to the dictionary. @param name Resource name @param extGState The extended graphics state object
3012 Adds a shading resource to the dictionary. @param name Shading resource name @param shading The shading object to add
3013 Adds a pattern resource to the dictionary. @param name Pattern name @param pattern The pattern object to add
3014 Adds properties to the specified resource dictionary. @param name Resource name @param properties Properties to associate with the resource
3015 Adds an XObject to the resource dictionary. @param name XObject name @param xobject The XObject to add
3016 Gets the FDF dictionary associated with the catalog. Returns a new FDFDictionary object.
3017 Creates a new FDFDocument with default settings and an empty catalog.
3018 Returns the FDF catalog. Creates one if it doesn't exist.
3019 Gets the fractional space allocated to the icon. Returns a PDRange object representing the space.
3020 Default constructor. Initializes a PDTilingPattern object. Sets type, pattern type, and resources.
3021 Gets the annotation's appearance dictionary, creating it if null.
3022 Inserts a new sibling outline item before the current one. @param newSibling The outline item to insert.
3023 Inserts a new sibling outline item after the current one. @param newSibling The outline item to insert.
3024 Appends a new child outline item to this node. Sets parent, siblings, and last child relationships.
3025 Inserts a new child outline item at the beginning. Sets parent and adjusts sibling references accordingly.
3026 Sets the first bead for the thread, linking the bead to the thread. @param bead The PDThreadBead to set as the first bead.
3027 Constructs a new PDThreadBead object, initializing its properties.
3028 Appends a bead to the thread, updating links to neighbors. @param append The PDThreadBead to append to the thread.
3029 Sets the name in the dictionary to the given value. @param name The key of the name. @param value The name string.
3030 Sets the rendering intent in the dictionary. @param ri Rendering intent string (e.g., "Fast", "Duotone")
3031 Sets the name of the action. @param name The name to associate with the action.
3032 Sets the border style. @param s The border style string.
3033 Initializes PDPageLabels with a default label range for page 0. @param document The PDF document this labels applies to.
3034 Creates a new PDStructureElement with given type and parent. @param structureType The type of the structure element. @param parent The parent PDStructureNode.
3035 Creates a new PDStructureTreeRoot using the TYPE constant.
3036 Constructs a new PDShadingPattern with the correct pattern type.
3037 Creates a new PDAction with the specified action type.
3038 Retrieves the document outline. @return PDDocumentOutline object or null if no outline exists.
3039 Retrieves the parent outline node, or null if none exists.
3040 Sets the button's value based on the provided index. @param index The index of the value to set. @throws IllegalArgumentException if index is out of bounds.
3041 Creates a new PDRectlinearMeasureDictionary, setting its subtype.
3042 Constructs a PDTransition with the default transition style (R).
3043 Sets the date value for a given key. @param key The key for the date value. @param date Calendar object representing the date.
3044 Sets the date value for a given key within an embedded dictionary. @param embedded Embedded object. @param key Key for the date value. @param date Calendar object representing the date.
3045 Sets the PDF creation date. @param date Calendar object representing the creation date.
3046 Sets the PDF document's modification date. @param date Calendar object representing the modification date.
3047 Sets the creation date of the annotation. @param date Calendar object representing the creation date.
3048 Sets the modification date of the annotation. @param c Calendar object representing the modification date.
3049 Sets the creation date of the annotation. @param creationDate Calendar object representing the date.
3050 Sets the signature date using the provided Calendar object. @param cal Calendar object representing the signature date.
3051 Sets a custom metadata value for the specified field. @param fieldName Name of the metadata field. @param fieldValue Value to set for the field.
3052 Sets the string value for a given attribute name. @param name Attribute name. @param value String value to set.
3053 Sets the 'Base' string value in the underlying COSDictionary. @param base The string value to set for the 'Base' key.
3054 Sets the application version in the dictionary. @param applicationVersion Version string to set.
3055 Sets the units for numerical values in the PDF. @param units The units to set (e.g., "mm", "in").
3056 Sets the fractional display type. @param fractionalDisplay "D", "F", "R", "T", or null.
3057 Sets the thousands separator for numerical values in the PDF. @param thousandsSeparator The string to use as the separator.
3058 Sets the decimal separator for numerical formatting. @param decimalSeparator The decimal separator string.
3059 Sets the label prefix string in the COSDictionary. @param labelPrefixString The string to set as the label prefix.
3060 Sets the label suffix string in the COSDictionary. @param labelSuffixString The suffix to set for the label.
3061 Sets the label position to value in the COSDictionary. @param labelPositionToValue Value must be "S", "P", or null.
3062 Sets the Mac Subtype value for the embedded file. @param macSubtype The subtype string to set.
3063 Sets the Mac Creator attribute for the embedded file. @param macCreator The creator string to set.
3064 Sets the Mac Resource Fork data for the embedded file. @param macResFork The string data for the Mac Resource Fork.
3065 Creates a FDFField from an XML element. @param fieldXML XML element representing the field. @throws IOException if an I/O error occurs.
3066 Constructs a new PDOptionalContentGroup with the given name. @param name The name of the optional content group.
3067 Adds an optional content group to the OCGs array and order. @param ocg The optional content group to add.
3068 Gets the base state of the optional content group. @return BaseState representing the group's initial state.
3069 Sets the enabled state of an optional content group. @param group The optional content group to modify. @param enable True to enable, false to disable. @return True if the group was found and modified.
3070 Sets an integer value for a given attribute name. @param name Attribute name. @param value Integer value to set.
3071 Sets an integer value for a given attribute name. @param name Attribute name. @param value Integer value to set.
3072 Sets the denominator value for PDF number formatting. @param denominator The denominator value to set.
3073 Sets the invisible flag for the annotation. @param invisible True to make annotation invisible.
3074 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
3075 Sets the printed flag for the annotation. @param printed True if printed, false otherwise.
3076 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false to enable.
3077 Sets the "no rotate" flag for the annotation. @param noRotate True to disable rotation, false otherwise.
3078 Sets the "No View" flag for the annotation. @param noView True to set the flag, false to clear it.
3079 Sets the read-only flag for the annotation. @param readOnly True to set read-only, false otherwise.
3080 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
3081 Sets the "Toggle No View" flag for the annotation. @param toggleNoView True to set, false to unset.
3082 Sets the locked contents flag for the annotation. @param lockedContents True to lock, false to unlock contents.
3083 Sets the invisible flag for the annotation. @param invisible True to make the annotation invisible.
3084 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
3085 Sets the printed flag for the annotation. @param printed True if annotation is printed, false otherwise.
3086 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false otherwise.
3087 Sets the "No Rotate" flag for the annotation. @param noRotate True to disable rotation, false otherwise.
3088 Sets the "No View" flag for the annotation. @param noView True to set, false to unset the flag.
3089 Sets the read-only flag for the annotation. @param readOnly True to make annotation read-only.
3090 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
3091 Sets the "Toggle No View" flag on the annotation. @param toggleNoView True to enable, false to disable.
3092 Sets whether the annotation's contents are locked. @param lockedContents True to lock contents, false otherwise.
3093 Sets whether a filter is required for the seed value. @param flag True if filter is required, false otherwise.
3094 Sets the subfilter required flag. @param flag True if subfilter is required, false otherwise.
3095 Sets whether a digest method is required for the seed value. @param flag True if required, false otherwise.
3096 Sets the 'V' required flag in the COSDictionary. @param flag True if 'V' is required, false otherwise.
3097 Sets whether a reason is required for the digital signature. @param flag True if reason is required, false otherwise.
3098 Sets whether a legal attestation is required for the seed. @param flag True if legal attestation is required, false otherwise.
3099 Sets whether additional revision information is required. @param flag True if revision info is required, false otherwise.
3100 Sets the 'Subject' attribute as required in the certificate. @param flag True to mark 'Subject' as required, false otherwise.
3101 Sets the issuer flag to indicate whether it's required. @param flag True if issuer is required, false otherwise.
3102 Sets the OID required flag in the certificate dictionary. @param flag True if OID is required, false otherwise.
3103 Sets whether the Subject DN is a required flag. @param flag True if required, false otherwise.
3104 Sets the Key Usage Required flag in the certificate dictionary. @param flag True to require, false to unset.
3105 Sets the URL required flag in the dictionary. @param flag True if URL is required, false otherwise.
3106 Sets the italic flag in the COS object. @param italic True to set italic, false to unset.
3107 Sets the bold flag in the COS object. @param bold True to set bold, false to unset.
3108 Sets the signatures exist flag in the form dictionary. @param signaturesExist True if signatures exist, false otherwise.
3109 Sets the append-only flag for the form. @param appendOnly True to enable, false to disable.
3110 Sets the sort flag for choice fields. @param sort True to enable sorting, false otherwise.
3111 Sets whether the choice field allows multiple selections. @param multiSelect True to enable multi-select, false otherwise.
3112 Sets the "do not spell check" flag for the choice field. @param doNotSpellCheck True to enable, false to disable.
3113 Sets the "commit on selection change" flag. @param commitOnSelChange True to commit changes on selection.
3114 Sets the combo flag for the choice field. @param combo True to enable combo mode, false otherwise.
3115 Sets the edit flag for the combo box. @param edit True to enable editing, false otherwise.
3116 Sets the read-only status of the field. @param readonly True to make the field read-only.
3117 Sets the required flag for the field. @param required True if the field is required, false otherwise.
3118 Sets the 'no export' flag for the field. @param noExport True to disable export, false otherwise.
3119 Constructs a PDPushButton associated with a PDAcroForm. Sets the button's field type to "Btn" in its dictionary.
3120 Constructs a PDRadioButton associated with a PDAcroForm. Sets the radio button field flag in the COS object.
3121 Sets whether radio buttons operate in unison. @param radiosInUnison True if radios are in unison, false otherwise.
3122 Sets the multiline flag for the text field. @param multiline True enables multiline input.
3123 Sets the password flag for the text field. @param password True to enable password protection.
3124 Sets the file select flag. @param fileSelect True to enable, false to disable.
3125 Sets the "Do Not Spell Check" flag for the text field. @param doNotSpellCheck True to disable spell check.
3126 Sets the "Do Not Scroll" flag for the text field. @param doNotScroll True to set the flag, false to unset it.
3127 Sets the COMB flag for the text field. @param comb True to set the COMB flag, false to unset.
3128 Sets the rich text flag for the text field. @param richText True to enable rich text, false otherwise.
3129 Decodes JPX data from input stream to output stream. @param encoded Input stream with JPX data @param decoded Output stream for decoded data @param parameters Decoding parameters
3130 Checks the pages dictionary and throws exception if missing. @param root The root COSDictionary to check.
3131 Returns a PDPageTree representing the document's page tree. Uses the PAGES dictionary from the root COSDictionary.
3132 Constructs a PDPageTree from a COSDictionary. @param root The root COSDictionary of the page tree.
3133 Removes a page from the page tree. @param page The PDPage object to remove.
3134 Inserts a new page before an existing page in the tree. @param newPage The page to insert. @param nextPage Page before which to insert the new page.
3135 Inserts a new page after a specified previous page. @param newPage The page to insert. @param prevPage The page to insert after.
3136 Increments the revision number of the structure element.
3137 Creates a PDImageXObject from a BufferedImage. Supports only 1-bit black and white images. @param document PDF document. @param image BufferedImage to convert. @return PDImageXObject representing the image.
3138 Creates a CCITT image from a TIFF reader. @param document PDF document. @param reader RandomAccessRead object for TIFF file. @param number Number of pages to skip. @return PDImageXObject or null if no image data.
3139 Sets a float value in the dictionary and notifies changes. @param name Attribute name. @param value Float value to set.
3140 Sets the border effect intensity. @param i The intensity value to set.
3141 Sets the conversion factor for numerical values in the PDF. @param conversionFactor The conversion factor to apply.
3142 Parses cross-reference object stream, extracts object details. @param objByteOffset Offset of the object; @param isStandalone flag @return Previous object offset.
3143 Parses a PDF document leniently. @return PDDocument object or null if parsing fails.
3144 Processes a transparency group, managing graphics state and operators. @param group The transparency group to process. @throws IOException if an I/O error occurs.
3145 Processes a Type3 stream, applying transformations and operators. @param charProc Type3 character stream to process @param textRenderingMatrix Transformation matrix for rendering
3146 Processes a PDF annotation, handling appearance and transformations. @param annotation The annotation to process. @param appearance The appearance stream for the annotation.
3147 Processes a PDF tiling pattern, applying color and transformations. @param tilingPattern The tiling pattern to process.
3148 Processes a content stream, applying transformations and operators. @param contentStream The PDF content stream to process.
3149 Writes a COSDocument to an output stream as a PDF document. @param doc The COSDocument to write.
3150 Saves the PDF document to the specified output stream. @param output The output stream to write to. @param compressParameters Compression parameters for saving.
3151 Gets the PDF version number. @return String representing the PDF version.
3152 Retrieves a page at the specified index. @param index 0-based index of the page to retrieve. @return PDPage object representing the page.
3153 Removes a page from the page tree at the specified index. @param index 0-based index of the page to remove.
3154 Finds the index of a page within the page tree. @param page The page to search for. @return The index of the page, or -1 if not found.
3155 Gets the file specification associated with this stream. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
3156 Gets the file specification from the FDF dictionary. Returns a PDFileSpecification or null if not found.
3157 Retrieves embedded FDF files as PDFileSpecifications. Returns null if no embedded FDFs are present.
3158 Retrieves the file specification associated with this reference. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
3159 Retrieves the file specification. Uses COS object to create a PDFileSpecification. @return PDFileSpecification object or null if COS object is null @throws IOException if an error occurs during creation
3160 Retrieves the file specification from the action dictionary. @return PDFileSpecification object or null if file is missing @throws IOException if an I/O error occurs
3161 Retrieves the file specification for this action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
3162 Retrieves the file specification for this action. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
3163 Retrieves the file specification from the action dictionary. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
3164 Gets the file specification associated with the action. Uses createFS to build a PDFileSpecification.
3165 Retrieves the file specification for this annotation. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
3166 Notifies of changes if the attribute value has changed. @param oldBase The old COSBase value. @param newBase The new COSBase value.
3167 Adds a kid element to this node and sets this node as its parent. @param structureElement The element to add as a kid.
3168 Inserts a structure element before a reference node. @param newKid The element to insert. @param refKid The reference node.
3169 Removes a child element and detaches it from this node. @param structureElement The child element to remove. @return True if removed, false otherwise.
3170 Creates a new FDFAnnotationHighlight with subtype set.
3171 Creates a new FDFAnnotationSquiggly instance. Sets the subtype name to SUBTYPE.
3172 Initializes a new FDFAnnotationStrikeOut instance. Sets the subtype name of the annotation.
3173 Default constructor for FDFAnnotationUnderline. Initializes the annotation subtype.
3174 Constructs a new PDAnnotationFileAttachment. Sets the subtype name to SUB_TYPE in the COS object.
3175 Constructs a PDAnnotationInk object, setting its subtype.
3176 Constructs a PDAnnotationLine object. Initializes subtype and line coordinates.
3177 Constructs a new PDAnnotationPolygon with subtype set to SUB_TYPE.
3178 Constructs a PDAnnotationPolyline with subtype set to SUB_TYPE.
3179 Initializes the rubber stamp with the subtype.
3180 Creates a PDAnnotationSquareCircle with the given subtype. @param subType Annotation subtype string.
3181 Initializes a PDAnnotationText object with the subtype.
3182 Creates a new text markup annotation with a subtype. @param subType Annotation subtype string.
3183 Constructs a PDAnnotationCaret from a COSDictionary.
3184 Constructs a PDAnnotationFileAttachment from a COSDictionary.
3185 Constructs a PDAnnotationFreeText from a COSDictionary.
3186 Constructs a PDAnnotationInk from a COSDictionary.
3187 Constructs a PDAnnotationLine from a COSDictionary.
3188 Constructs a PDAnnotationPolygon from a COSDictionary.
3189 Constructs a PDAnnotationPolyline from a COSDictionary.
3190 Constructs a PDAnnotationRubberStamp from a COSDictionary.
3191 Constructs a PDAnnotationSound using a COSDictionary. @param field The COSDictionary containing annotation data.
3192 Constructs a PDAnnotationSquareCircle from a COSDictionary.
3193 Constructs a PDAnnotationText from a COSDictionary.
3194 Constructs a PDAnnotationTextMarkup from a COSDictionary.
3195 Retrieves the annotation popup dictionary. @return PDAnnotationPopup object or null if no popup exists.
3196 Retrieves a list of widgets associated with this field. Returns an empty list if no widgets are found.
3197 Writes the document body, handling compression and encryption. Processes COS objects and streams for efficient PDF creation.
3198 Checks if the font is symbolic. Caches the result for efficiency.
3199 Checks if a PDF form is dynamic (XFA). @param acroForm The form to check. @return True if the form is dynamic, false otherwise.
3200 Initializes the iterator with fields from the form. @param form The PDF form to iterate over.
3201 Creates a PDFunction based on the provided COSBase. @param function COSBase representing the function definition. @throws IOException if the function type is unknown or invalid.
3202 Initiates recursive interpolation using default input values.
3203 Extracts and converts the matte data from a soft mask. @param softMask The soft mask image object. @return Matte array in RGB format, or null if invalid.
3204 Parses XFA data to a Document object. Uses getBytes() to retrieve XFA data. @return Document object representing the parsed XFA data.
3205 Encodes image data, applying PNG filtering for compression. Returns a PDImageXObject with encoded image data.
3206 Sets the destination for this outline item to a page. @param page The PDF page to set as the destination.
3207 Initializes page rendering context. @param page The PDF page to render. Throws IllegalArgumentException if null.
3208 Gets the bleed box, or crop box if bleed box is absent. Returns a PDRectangle representing the bleed area.
3209 Gets the trim box, or crop box if trim box is absent. Returns a PDRectangle representing the trim area.
3210 Gets the art box for the page, clipping to media box if needed. Returns crop box if art box is null.
3211 Gets the rotated crop box for a page, swapping width/height if rotated. @param page The PDF page to get the crop box from. @return A PDRectangle representing the rotated crop box.
3212 Adds a font resource to the dictionary. @param font The PDFont object to add. @return COSName key of the added font.
3213 Adds a color space resource to the dictionary. @param colorSpace The color space object to add. @return COSName key of the added color space.
3214 Adds an extended graphics state resource. @param extGState The extended graphics state object. @return COSName key of the added resource.
3215 Adds a shading resource to the dictionary. @param shading The PDShading object to add. @return COSName key for the added shading.
3216 Adds a pattern resource to the dictionary. @param pattern The pattern object to add. @return COSName key of the added pattern.
3217 Adds a property to the resource dictionary. @param properties Property list to add; optional content group if so. @return COSName key of the added property.
3218 Adds an image resource to the dictionary. @param image The PDImageXObject to add. @return COSName key of the added image resource.
3219 Adds a form XObject resource to the dictionary. @param form The PDFormXObject to add. @return COSName key of the added resource.
3220 Adds an XObject resource to the dictionary. @param xobject The XObject to add. @param prefix Prefix for the resource name. @return COSName key of the added resource.
3221 Exports the form as an FDF document. Creates and populates an FDFDocument object. @return FDFDocument representing the exported form. @throws IOException if an I/O error occurs.
3222 Gets the annotation's down appearance. Creates it if needed.
3223 Gets the rollover appearance entry, creating if needed. Returns the entry or a new one if the existing is invalid.
3224 Gets the annotation's normal appearance, creating it if null.
3225 Adds a child outline item as the last child of this node. Requires the child to be a single node and updates parent count.
3226 Adds a new child outline item as the first child. Requires the new child to be a single node.
3227 Constructs PDPageLabels from a document and COSDictionary. @param document PDF document. @param dict COSDictionary containing page label information.
3228 Creates a new `PDActionEmbeddedGoTo` with the specified sub-type.
3229 Creates a new PDActionGoTo action. Sets the action subtype to SUB_TYPE.
3230 Creates a new PDActionHide, setting its subtype.
3231 Creates a new PDActionImportData, setting its subtype.
3232 Constructs a new PDActionJavaScript with the default sub-type.
3233 Creates a new PDActionLaunch, setting its subtype.
3234 Creates a new PDActionMovie, setting the sub-type.
3235 Creates a new PDActionNamed with the default subtype.
3236 Creates a new `PDActionRemoteGoTo` action, setting its subtype.
3237 Creates a new PDActionResetForm, setting its subtype.
3238 Creates a new PDActionSound, setting its subtype.
3239 Constructs a PDActionSubmitForm, setting its subtype.
3240 Creates a PDActionThread with the defined sub-type.
3241 Creates a new PDActionURI, setting its subtype.
3242 Updates the parent's open count based on a delta. Adjusts open count if parent exists and is open.
3243 Sets the button's value, using export values if available. @param value The new value to associate with the button.
3244 Checks if an optional content group is enabled. @param group the optional content group to check @return true if enabled, false otherwise
3245 Sets the enabled state of an optional content group. @param groupName Name of the group to modify. @param enable True to enable, false to disable. @return True if group found and modified, false otherwise.
3246 Gets the document's page tree from the catalog.
3247 Gets the number of pages in the PDF document.
3248 Sets the fixed-pitch flag. @param flag True to enable, false to disable.
3249 Sets the serif flag to indicate serif font style. @param flag True if serif, false otherwise.
3250 Sets the symbolic flag to the specified value. @param flag True to set, false to clear the symbolic flag.
3251 Sets the script flag to the given value. @param flag True to enable, false to disable.
3252 Sets the non-symbolic flag. @param flag True to set, false to clear.
3253 Sets the italic flag to the specified value. @param flag True to enable italic, false to disable.
3254 Sets/clears the "all caps" flag for the font. @param flag True to set, false to clear.
3255 Sets the small cap flag. @param flag True to enable, false to disable.
3256 Sets the force bold flag. @param flag True to force bold, false to clear.
3257 Creates a CCITT image from a byte array. @param document PDF document. @param byteArray Image data. @param number Number of pages to skip. @return PDImageXObject
3258 Creates a CCITT image from a file. @param document PDF document. @param file File to read from. @param number Pages to skip.
3259 ```java protected FDFAnnotation(Element element) throws IOException { // Initialize the annotation with default values. this(); // Get the page number from the element attribute and parse it to an integer. String page = element.getAttribute("page"); if (page == null || page.isEmpty()) { throw new IOException("Error: missing required attribute 'page'"); } setPage(Integer.parseInt(page)); // Parse the color attribute if present and valid. String color = element.getAttribute("color"); if (color != null && color.length() == 7 && color.charAt(0) == '#') { int colorValue = Integer.parseInt(color.substring(1, 7), 16); setColor(new Color(colorValue)); } // Set the date attribute. setDate(element.getAttribute("date")); // Process the flags attribute to set various annotation properties. String flags = element.getAttribute("flags"); if (flags != null) { String[] flagTokens = flags.split(","); for (String flagToken : flagTokens) { switch (flagToken) { case "invisible": setInvisible(true); break; case "hidden": setHidden(true); break; case "print": setPrinted(true); break; case "nozoom": setNoZoom(true); break; case "norotate": setNoRotate(true); break; case "noview": setNoView(true); break; case "readonly": setReadOnly(true); break; case "locked": setLocked(true); break; case "togglenoview": setToggleNoView(true); break; } } } // Set the annotation name. setName(element.getAttribute("name")); // Parse the rectangle attribute to define the annotation's dimensions and position. String rect = element.getAttribute("rect"); if (rect == null) { throw new IOException("Error: missing attribute 'rect'"); } String[] rectValues = rect.split(","); if (rectValues.length != 4) { throw new IOException("Error: wrong amount of numbers in attribute 'rect'"); } float[] values = new float[4]; for (int i = 0; i < 4; i++) { values[i] = Float.parseFloat(rectValues[i]); } setRectangle(new PDRectangle(COSArray.of(values))); // Set the annotation title. setTitle(element.getAttribute("title")); // Set the creation date. setCreationDate(DateConverter.toCalendar(element.getAttribute("creationdate"))); // Set the annotation opacity if provided. String opac = element.getAttribute("opacity"); if (opac != null && !opac.isEmpty()) { setOpacity(Float.parseFloat(opac)); } // Set the annotation subject. setSubject(element.getAttribute("subject")); // Set the annotation intent. String intent = element.getAttribute("intent"); if (intent.isEmpty()) { // Handle cases where the intent attribute is missing or empty. intent = element.getAttribute("IT"); } if (!intent.isEmpty()) { setIntent(intent); } // Extract the annotation's contents using XPath. XPath xpath = XPathFactory.newInstance().newXPath(); try { setContents(xpath.evaluate("contents[1]", element)); } catch (XPathExpressionException e) { LOG.debug("Error while evaluating XPath expression for richtext contents", e); } // Extract and set the annotation's rich text content. try { Node richContents = (Node) xpath.evaluate("contents-richtext[1]", element, XPathConstants.NODE); if (richContents != null) { setRichContents(richContentsToString(richContents, true)); setContents(richContents.getTextContent().trim()); } } catch (XPathExpressionException e) {
3260 Parses a PDF object dynamically. @param objKey Object key. @param requireExisting Flag for object existence. @return COSBase object or null if not found. @throws IOException if an I/O error occurs.
3261 Parses xref tables and resolves trailer, returning COSDictionary. @param document Document to parse. @param startXRefOffset Starting offset for xref parsing.
3262 Displays a transparency group. @param form The transparency group to show. @throws IOException if an I/O error occurs.
3263 Processes a soft mask transparency group. @param group The transparency group to process. @throws IOException if an I/O error occurs.
3264 Renders a Type3 glyph using the provided character procedure. @param textRenderingMatrix Transformation matrix for rendering
3265 Displays a PDF annotation by processing its appearance stream. @param annotation The annotation to display.
3266 Processes a PDF tiling pattern with default transformation matrix. @param tilingPattern The tiling pattern to process. @param color The color to apply. @param colorSpace The color space to use.
3267 Displays a PDF form. @param form The PDF form to display. @throws IOException if an I/O error occurs.
3268 Saves the PDF document to the specified output stream. @param output The output stream to write to.
3269 Saves the PDF document to a file with compression. @param file The file to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
3270 Creates a new PDF document, copying metadata from source. Copies version, language, viewer preferences, and metadata. @return New PDDocument object.
3271 Sets the PDF document version. Prevents downgrades and updates catalog if >= 1.4. @param newVersion The new PDF version to set.
3272 Returns an iterator to traverse the pages in the page tree.
3273 Retrieves a page from the document at the given index. @param pageIndex 0-based index of the page to retrieve.
3274 Writes the FDF dictionary to an XML Writer. Writes file specification, IDs, and fields to the output.
3275 Prepares a PDF document for encryption. Sets encryption parameters and calculates key.
3276 Creates a new highlight annotation. Initializes the annotation using the SUB_TYPE constant.
3277 Constructs a new PDAnnotationSquiggly with the default subtype.
3278 Initializes a new PDAnnotationStrikeout with the predefined subtype.
3279 Creates a new underline annotation with the default subtype.
3280 Constructs a PDAnnotationCircle from a COSDictionary.
3281 Constructs a PDAnnotationSquare from a COSDictionary.
3282 Constructs a PDAnnotationHighlight from a COSDictionary.
3283 Constructs a PDAnnotationSquiggly from a COSDictionary.
3284 Constructs a PDAnnotationStrikeout using a COSDictionary.
3285 Constructs a PDAnnotationUnderline from a COSDictionary.
3286 Imports field values from an FDF field. Handles various COS types and sets field flags.
3287 Draws an inline image at specified coordinates with given dimensions. @param inlineImage Inline image object to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
3288 Creates a cloudy polygon border from the provided path data. @param path array of points defining the polygon shape
3289 Renders a cloudy rectangle. @param left rectangle left coordinate @param bottom rectangle bottom coordinate
3290 Returns an iterator to traverse the form fields. @return Iterator for PDField objects.
3291 Evaluates the Type 3 function based on input, selecting a child function. @param input Input array, first element is the value to evaluate. @return Float array representing the function's result.
3292 Creates a PDDeviceN object from a COSArray and resources. @param deviceN COSArray representing the DeviceN color space. @param resources Resources for color space creation.
3293 Returns the tint transform PDFunction. Creates it if null. @return PDFunction representing the tint transformation. @throws IOException if an error occurs during function creation.
3294 Creates a PDSeparation object from a COSArray. @param separation COSArray defining the separation. @param resources PDResources for alternate color space creation.
3295 Retrieves the PDFunction object, creating it if necessary. @return PDFunction object or null if no function is defined. @throws IOException if function creation fails.
3296 Retrieves the array of PDFunction objects from the /Function element. Returns null if no functions are found.
3297 Gets the transfer function for the soft mask. @return PDFunction object or null if not defined. @throws IOException if the function is invalid.
3298 Creates a PDIndexed object. @param indexedArray Indexed color array. @param resources PDF resources. @throws IOException if an I/O error occurs.
3299 Evaluates the PDF function with given inputs. @param input Input values; modified during processing. @return Float array of output values.
3300 Decodes image from object. @param region Clip region, null for full image. @param subsampling Subsampling factor. @return BufferedImage representation of the image.
3301 Creates a PDImageXObject from a BufferedImage. Handles grayscale and RGB images, uses predictor encoder. @param document PDF document to embed image in @param image BufferedImage to convert @return PDImageXObject representing the image
3302 Renders a PDF page. @param page The PDF page to render. Throws IOException if error.
3303 Processes a child stream for a page, ensuring proper initialization. @param contentStream Stream to process. @param page The PDF page being processed.
3304 Creates a `PDPageContentStream` for writing to a PDF page. Warns if overwriting existing content.
3305 Sets the font and size for content streaming. @param font The PDFont object to set. @param fontSize The font size.
3306 Sets graphics state parameters. @param state Extended graphics state object. @throws IOException If an I/O error occurs.
3307 Adds a shading fill to the content stream. @param shading The PDShading object to add. @throws IllegalStateException if called in text mode.
3308 Begins a marked content sequence with specified tag and properties. @param tag Tag for the marked content. @param propertyList Properties for the marked content.
3309 Sets a marked content point with associated properties. @param tag Tag identifying the marked content. @param propertyList Properties for the marked content.
3310 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x x-coordinate. @param y y-coordinate. @param width Image width. @param height Image height.
3311 Draws an image at the specified matrix transformation. @param image The image to draw. @param matrix Transformation matrix for the image.
3312 Draws a form to the content stream. @param form The PDFormXObject to draw. @throws IllegalStateException if called in text mode.
3313 Gets the annotation's normal appearance as a content stream. @param compress Whether to compress the content stream. @return PDAppearanceContentStream object. @throws IOException If an I/O error occurs.
3314 Retrieves page labels from the document's catalog. @return PDPageLabels object or null if not present.
3315 Constructs a PDActionJavaScript with the given JavaScript string. @param js The JavaScript action string to initialize with.
3316 Checks if an optional content group is enabled by name. @param groupName Name of the optional content group. @return True if enabled, false otherwise.
3317 Checks if an optional content group is enabled. @param group The optional content group to check. @return True if enabled, false otherwise.
3318 Fixes PDF destinations by setting or nulling associated pages. @param destinationDocument The document to fix.
3319 Adds a page to the document's page tree. @param page The PDPage object to add.
3320 Removes a page from the document. @param page The PDPage object to remove.
3321 Removes a page from the document at the specified index. @param pageNumber 0-based index of the page to remove
3322 Constructs a PDFPrintable with provided document, scaling, and rendering options.
3323 Constructs a PDFRenderer with the given document. @param document The PDF document to render.
3324 Initializes PageExtractor with the source document and sets end page.
3325 Retrieves a map of page labels to their corresponding indices. @return Map of page labels to their indices.
3326 Retrieves page labels for all pages in the PDF document. Returns an array of labels, or null if no labels exist.
3327 Constructs a PDFPageable with specified document and settings. @param document The PDF document. @param orientation Page orientation.
3328 Builds a PDFontDescriptor from a Type1Font. @param type1 The Type1Font to build the descriptor from. @return PDFontDescriptor representing the font.
3329 Builds a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font data. @return PDFontDescriptor object representing the font.
3330 Creates a PDFontDescriptor from a TrueTypeFont. Populates font properties and estimates missing values.
3331 Creates a CCITT image from a byte array. @param document PDF document. @param byteArray Image data. @return PDImageXObject
3332 Creates a CCITT image from a file. @param document PDF document. @param file File to read from.
3333 Creates a FDFAnnotationCaret from an XML element. @param element XML element representing the annotation. @throws IOException if an I/O error occurs.
3334 Creates a FDFAnnotationCircle from an XML element. @param element XML element representing the circle annotation @throws IOException if fringe attribute is invalid
3335 Constructs a FDFAnnotationFileAttachment from an XML element. @param element XML element representing the attachment.
3336 Creates an FDFAnnotationFreeText from an XML element. @param element XML element representing the annotation. @throws IOException if there's an I/O error during processing.
3337 Creates an FDFAnnotationInk from an XML element. @param element XML element containing ink data. @throws IOException if 'gesture' element is missing.
3338 Creates a FDFAnnotationLine from an XML element. Parses attributes like start/end coordinates and styles.
3339 Creates an FDFAnnotationLink from an Element. @param element The XML element representing the link. @throws IOException if an I/O error occurs.
3340 Constructs a FDFAnnotationPolygon from an XML element. @param element XML element containing polygon data. @throws IOException if initialization fails.
3341 Creates a polyline annotation from an XML element. @param element XML element representing the annotation. @throws IOException if initialization fails.
3342 Initializes the annotation from an XML element. @param element XML element representing the annotation.
3343 Constructs a `FDFAnnotationSquare` from an XML element. @param element XML element representing the annotation. @throws IOException if fringe attribute is invalid.
3344 Creates a FDFAnnotationStamp from an Element. @param element XML element representing the stamp. @throws IOException if an I/O error occurs during parsing.
3345 Creates an FDFAnnotationText from an XML element. Sets icon, state, and state model based on attributes.
3346 Constructs FDF annotation from an Element, parsing its "coords" attribute. @param element Element containing annotation data. @throws IOException if "coords" attribute is missing or invalid.
3347 Retrieves the PDF trailer dictionary, rebuilding if necessary. Parses xref tables and handles decryption/object streams. @return COSDictionary representing the trailer. @throws IOException if an I/O error occurs.
3348 Loads a PDF document from byte array, with optional password/keystore. @param input PDF data as byte array @return PDDocument object or null if loading fails
3349 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Source for reading the PDF data. @return PDDocument object representing the loaded PDF.
3350 Loads a PDF document from a RandomAccessRead with optional password. @param randomAccessRead Source for PDF content @param password Password for encrypted PDF (optional) @return PDDocument object representing the loaded PDF
3351 Loads a PDF document with optional password, keystore, and alias. @param randomAccessRead Input stream for PDF content.
3352 Sets visual signature from a file. @param file File containing the visual signature data. @throws IOException if an I/O error occurs.
3353 Sets visual signature from an input stream. @param is Input stream containing signature data. @throws IOException if an I/O error occurs.
3354 Renders a glyph based on font type. @param textRenderingMatrix Rendering matrix. @param font The PDF font.
3355 Builds a PDF document with visual signature properties. @param properties Signature design properties. @return InputStream representing the PDF document.
3356 Saves the PDF document to a file using default compression. @param file The file to save to. @throws IOException if an I/O error occurs.
3357 Saves the PDF document to a file with compression. @param fileName File name to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
3358 Creates a new document if split is needed or destination is null.
3359 Writes the PDF header, including version and comments. Sets PDF version if compression is enabled.
3360 Sets optional content properties and updates PDF version if needed. @param ocProperties Optional content properties to set.
3361 Gets the layout page for the first page of the document. @param doc The PDF document. @return The LayoutPage object for the first page.
3362 Calculates page dimensions from a PDF page. @param document The PDF document. @param page The page number.
3363 Finds the destination page based on the outline item's destination. @param doc The PDF document. @return PDPage object or null if not found.
3364 Gets a page format for the given page index. @param pageIndex 0-based index of the page.
3365 Retrieves the page number from the destination array. Returns -1 if the array is empty.
3366 Writes the FDF dictionary to the given Writer. Uses getFDF() to retrieve the FDF dictionary.
3367 Prepares a PDF document for encryption. Sets encryption parameters and prepares passwords.
3368 Creates a PDAnnotation based on the provided COSBase. @param base COSBase object representing the annotation @return PDAnnotation instance or throws IOException
3369 Draws an image at specified coordinates. @param inlineImage Image object to draw. @param x X coordinate. @param y Y coordinate.
3370 Creates a cloudy rectangle based on the given rectangle. @param rd The rectangle to use for creating the cloudy shape.
3371 Draws a cloudy ellipse based on parameters and intensity. @param leftOrig Left coordinate of the ellipse. @param bottomOrig Bottom coordinate of the ellipse. @param rightOrig Right coordinate of the ellipse. @param topOrig Top coordinate of the ellipse.
3372 Retrieves a list of signature fields from the PDF form. Returns an empty list if no signature fields are found.
3373 Refreshes the appearances of all terminal fields in the form.
3374 Returns an iterator to traverse the form fields.
3375 Sets whether to cache form fields. @param cache True to cache fields, false to clear cache.
3376 Retrieves a PDF field by its fully qualified name. @param fullyQualifiedName Field's name, includes parent names. @return PDField object or null if not found.
3377 Creates a PDColorSpace from a COSBase, handling various types. @param colorSpace COSBase representing the color space. @param resources PDResources object. @param wasDefault Whether the color space was default. @throws IOException if an I/O error occurs.
3378 Evaluates shading functions with given input and returns results. @param input Input array for function evaluation. @return Array of evaluated function values.
3379 Creates a PDIndexed object with an indexed color array. @param indexedArray Indexed color array. @throws IOException if an I/O error occurs.
3380 Returns the image as a BufferedImage. Uses default region and subsampling.
3381 Processes a PDF page, setting rotation, size, and translation matrix. @param page The PDF page to process. Throws IOException if error.
3382 Sets the stroking color, writing operands and operators to the stream. @param color The color object to set. @throws IOException If an I/O error occurs.
3383 Sets the non-stroking color, writing operands and operators. @param color The color object to set. @throws IOException If an I/O error occurs.
3384 Draws an image at specified coordinates. @param image The image to draw. @param x x-coordinate. @param y y-coordinate.
3385 Gets the normal appearance as a content stream. Calls the overloaded method with compression disabled. @return PDAppearanceContentStream object. @throws IOException If an I/O error occurs.
3386 Opens the node if it's currently closed. Calls switchNodeCount() to invert open state.
3387 Closes the node if it's currently open. Calls switchNodeCount to invert open status.
3388 Imports a page into the document. Copies page attributes. @param page The PDPage object to import. @return Imported PDPage object.
3389 Creates a PDF template document and adds a page to it. @param page The PDPage object to add to the template.
3390 Constructs a PDFPrintable with default PDFRenderer. @param document The PDF document to print. @param scaling The scaling factor.
3391 Constructs a PDFPageable with the given PDF document. @param document The PDF document to paginate.
3392 Constructs a PDFPageable with a document and orientation. @param document The PDF document. @param orientation Page orientation.
3393 Constructs a PDFPageable with document, orientation, and border. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show the page border.
3394 Constructs a PDFPageable with document, orientation, border, and DPI. @param document The PDF document. @param orientation Page orientation.
3395 Embeds a Type 1 font into a PDF document. @param doc The PDF document. @param dict The dictionary. @param pfbStream The PFB stream. @param encoding The font encoding.
3396 Embeds a TrueType font into a PDF document. @param document The PDF document to embed into. @param dict Dictionary for font properties. @param ttf The TrueType font to embed. @param embedSubset Whether to embed a subset of the font.
3397 Creates PDImageXObject from file, based on extension. @param file File containing image. @param doc PDF document. @return PDImageXObject representing the image.
3398 Creates a PDImageXObject from a file, detecting file type. @param file File containing image data. @param doc PDF document to embed image in.
3399 Creates a FDFAnnotationHighlight from an XML element. @param element Element containing annotation data. @throws IOException if an I/O error occurs.
3400 Creates a squiggly annotation from an XML element. @param element XML element containing annotation data. @throws IOException if an I/O error occurs.
3401 Constructs a FDF strikeout annotation from an Element. @param element Element containing annotation data. @throws IOException if element data is invalid.
3402 Creates an FDF underline annotation from an Element. @param element Element containing annotation data @throws IOException if an I/O error occurs
3403 Loads a PDF document from a byte array, optionally with password. @param input PDF data as byte array @param password Password for encrypted PDF, if any. @return PDDocument object or null if loading fails.
3404 Loads a PDF document from a file, handling encryption if present. @param file The file to load. @param password Password for decryption, if applicable.
3405 Loads a PDF document from a file, handling encryption. @param file The file to load. @param password Password for decryption, if applicable.
3406 Sets the visual signature using properties. @param visSignatureProperties Properties for the signature. @throws IOException if an I/O error occurs.
3407 Builds a visible signature PDF document using configured properties.
3408 Saves the PDF document to a file. @param fileName The name of the file to save to. @throws IOException if an I/O error occurs.
3409 Imports optional content properties from source document. @param srcDoc Source PDF document to copy properties from.
3410 Creates a PDVisibleSignDesigner with a document, image stream, and page. @param document PDF document. @param imageStream Image stream for the signature. @param page Page number for signature placement.
3411 Constructs a PDVisibleSignDesigner with a PDF document, image, and page. @param document The PDF document. @param image The signature image. @param page The page number.
3412 Writes the FDF document to an XML Writer. Uses getCatalog() to write the FDF catalog.
3413 Retrieves annotations from the page, filtered by AnnotationFilter. @param annotationFilter Filter to apply to annotations @return List of PDAnnotation objects
3414 Retrieves the referenced object (XObject or Annotation). Returns null if no valid object is found or an error occurs.
3415 Retrieves the annotation this is a reply to. @return PDAnnotation or null if no reply-to annotation exists.
3416 Retrieves the parent markup annotation. Returns null if the parent can't be constructed or is incorrect type.
3417 Creates a cloudy ellipse based on a rectangle's dimensions. @param rd The rectangle defining the ellipse's bounds.
3418 Retrieves signature dictionaries from signature fields. Returns a list of PDSignature objects.
3419 Imports field values from an FDF document. @param fdf The FDF document to import from.
3420 Evaluates shading function with a single input value. @param inputValue Input value for function evaluation. @return Array of evaluated function values.
3421 Evaluates shading function and converts result to RGB. @param values Input values for shading function evaluation. @return Integer representing RGB color value.
3422 Gets the non-stroking paint, applying soft masks if present. @return Paint object or null if an error occurs.
3423 Processes a PDF page, conditionally extracting and formatting text. @param page The PDF page to process. Throws IOException if error.
3424 Sets the stroking color, writing operands and operators to stream. @param color The color object to set. @throws IOException If an I/O error occurs.
3425 Sets the non-stroking color, writing operands and operators. @param color The color object to set. @throws IOException If an I/O error occurs.
3426 Appends a form as an optional content layer. @param targetPage Page to append the layer to. @param form Form to append. @param transform Transform to apply to the form. @param layerName Name of the optional content group.
3427 Renders a form, skipping if hidden. Restores linePath if content is rendered.
3428 Renders a transparency group onto a graphics context. Handles optional content, rendering checks & soft masks.
3429 Starts a marked content sequence, handling hidden OCGs. @param tag The tag associated with the sequence. @param properties Properties of the marked content sequence.
3430 Constructs a PDFPrintable with default PDFRenderer. @param document The PDF document to print. @param scaling The scaling factor.
3431 Creates a PDType1Font instance from an input stream. @param doc The document. @param pfbIn Input stream for the PFB data. @param encoding The font encoding, or null to use default.
3432 Constructs a PDFont object from a COSDictionary. @param fontDictionary Font dictionary to initialize from.
3433 Constructs a CID font embedder. @param document The PDF document. @param dict The font dictionary.
3434 Embeds a TrueType font into a PDF document. @param document The PDF document. @param dict Font dictionary. @param ttf The TrueType font. @param encoding Font encoding.
3435 Creates a PDImageXObject from a file path. @param imagePath Path to the image file. @param doc PDF document. @return PDImageXObject representing the image.
3436 Constructs a FDF dictionary from an FDF XML element. @param fdfXML The XML element representing the FDF document.
3437 Loads a PDF document from a byte array. @param input PDF data as byte array @return PDDocument object or null if loading fails.
3438 Loads a PDF document from a file, handling encryption. @param file The file to load. @param password Password for decryption, if applicable.
3439 Loads a PDF document from a file. Uses default password and memory-only stream cache.
3440 Imports a PDF page as a form XObject. @param sourceDoc Source PDF document. @param page The page to import. @return A PDFormXObject representing the imported page.
3441 Creates a PDVisibleSignDesigner with image and page details. @param documentSource PDF source. @param imageStream Image stream. @param page Page number.
3442 Creates a PDVisibleSignDesigner with a signature image and page size. @param documentSource PDF data source @param image Signature image @param page Page number
3443 Saves FDF data to an XML Writer. @param output XML Writer to save to; closes the writer.
3444 Retrieves all annotations from the page. @return List of PDAnnotation objects on the page.
3445 Retrieves the last signature dictionary. Returns null if no signature dictionaries exist.
3446 Saves the document incrementally for external signing. @param output Output stream to write the incremental PDF. @return SigningSupport object for managing the signing process.
3447 Draws a glyph, scaling if necessary, and applies rendering. @param path Glyph path, displacement, transform, font.
3448 Processes PDF pages, extracting text and handling bookmarks. Processes each page, conditionally extracting text.
3449 Initializes appearance content for a widget. Populates appearance stream with visual elements.
3450 Writes appearance settings to a content stream. @param contents Content stream to write to. @param zeroFontSize Fallback font size if default is zero.
3451 Constructs a PDFPrintable with default rasterization. @param document The PDF document to print. @param scaling The scaling factor. @param showPageBorder Whether to show the page border.
3452 Creates a PDType1Font instance from a PFB input stream. @param doc The document. @param pfbIn Input stream for the PFB data.
3453 Initializes a PDSimpleFont with a font dictionary. @param fontDictionary COSDictionary containing font data
3454 Creates a Type 0 font from a dictionary. @param fontDictionary Font dictionary to initialize from. @throws IOException if font data is invalid or missing.
3455 Constructs a `PDType0Font` with given parameters. @param document PDF document. @param ttf TrueType font.
3456 Constructs a PDTrueTypeFont with the given parameters. @param closeTTF Whether to close the TrueType font data source.
3457 Constructs a FDF catalog from an XML element. @param element The XML element representing the FDF catalog.
3458 Loads a PDF document from a file using the default loader. @param file The file to load. @return A PDDocument object.
3459 Imports a page as a form XObject. @param sourceDoc Source PDF document. @param pageNumber Page number to import (0-based). @return A PDFormXObject representing the imported page.
3460 Saves FDF data to a file. @param fileName File to save the FDF data to. @throws IOException if an I/O error occurs.
3461 Updates struct parent entries for a page and its annotations. @param page The PDF page to update. @param structParentOffset Offset to apply to struct parents.
3462 Clones the structure tree from source to destination document. Copies structure elements and resources.
3463 Processes annotations on the imported page, cloning and adjusting them. Handles links, widgets, and popup annotations for accurate splitting.
3464 Adds a signature to the document. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation. @param options Signature options.
3465 Fills and strokes the current path with the given winding rule. Resets the line path after stroking.
3466 Extracts text from a PDF document and writes it to a Writer. @param doc The PDF document to extract text from. @param outputStream Writer to write the extracted text. @throws IOException if an I/O error occurs.
3467 Inserts the generated appearance stream for a widget into the output stream. This method handles various aspects of appearance generation, including: - Calculating padding based on border width. - Setting up clipping paths. - Setting font and color from the /DA string. - Handling multiline text fields and comb boxes. - Generating highlight rectangles for list boxes. This method attempts to replicate the behavior of Adobe Acrobat's appearance generation. @param widget The annotation widget. @param appearanceStream The appearance stream. @param output The output stream to write the generated appearance to. @throws IOException If an I/O error occurs.
3468 Draws a PDF page onto the provided graphics context. Renders graphics, text, and annotations. @param g Graphics2D object for rendering @param pageSize PDRectangle defining page dimensions
3469 Constructs a PDFPrintable with default rasterization. @param document The PDF document to print. @param scaling The scaling factor.
3470 Returns the default PDF font (Helvetica). Lazily initializes if null.
3471 Creates a PDTrueTypeFont from a COSDictionary. @param fontDictionary Font dictionary from the PDF. @throws IOException if an I/O error occurs.
3472 Creates a PDType1CFont from a font dictionary. @param fontDictionary Font dictionary to use for initialization. @throws IOException if an I/O error occurs during processing.
3473 Creates a PDType1Font from a COSDictionary. Handles embedded fonts and repairs length values.
3474 Constructs a `PDType3Font` with a font dictionary and resource cache. @param fontDictionary Font dictionary. @param resourceCache Resource cache.
3475 Loads a PDType0Font from a RandomAccessRead. @param doc PDF document. @param randomAccessRead Font data. @param embedSubset Whether to embed font subset. @param vertical Vertical font. @return A PDType0Font object.
3476 Loads a PDType0Font from a PDF document and TrueType font. @param doc PDF document. @param ttf TrueType font. @param embedSubset Whether to embed subset. @return A PDType0Font object.
3477 Loads a vertical PDType0Font from a TrueTypeFont. @param doc PDF document. @param ttf TrueType font. @param embedSubset Whether to embed subset.
3478 Loads a PDTrueTypeFont from a TrueTypeFont and Encoding. @param doc The document. @param ttf The TrueType font. @param encoding The font encoding. @return A PDTrueTypeFont object.
3479 Loads a PDTrueTypeFont from a RandomAccessRead. @param doc PDF document. @param randomAccessRead Font data. @param encoding Font encoding. @return PDTrueTypeFont object.
3480 Creates an FDFDocument from a Document. @param doc The document containing the xFDF element. @throws IOException if the root element is not "xfdf".
3481 Constructs a PDVisibleSignDesigner with a signature image and page size. @param filename PDF filename. @param imageStream Image stream. @param page Page number.
3482 Constructs a PDVisibleSignDesigner with image and page data. @param filename PDF file path. @param image Signature image. @param page Page number.
3483 Saves FDF data to a file. @param fileName File name to save the FDF data to. @throws IOException if an I/O error occurs.
3484 Processes a PDF page, importing it and handling resources. @param page The PDPage object to process.
3485 Adds a signature to the document using provided options. @param sigObject The signature object to add. @param options Signature options.
3486 Adds a signature to the document using default signature options. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation.
3487 Merges the contents of a source PDF document into a destination PDF document. This method handles various aspects of the merging process, including pages, resources, metadata, structure tree, and more. It ensures that resources are shared where appropriate to minimize file size, and handles structural elements to maintain document integrity. @param srcCatalog The catalog of the source PDF document to be merged. @param destCatalog The catalog of the destination PDF document. @param cloner The PDF cloner used for creating copies of PDF objects.
3488 Converts PNG image data to a PDF image object. @param doc PDF document to add image to. @param imageData byte array containing PNG image data. @return PDImageXObject or null if conversion fails.
3489 Extracts text from a PDF document. @param doc The PDF document to extract text from. @return Extracted text as a String.
3490 Renders a PDF page to a BufferedImage. @param pageIndex Page index to render. @param scale Scaling factor. @param imageType Image type for the output. @param destination Render destination. @return BufferedImage containing the rendered page.
3491 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index to render. @param graphics Graphics2D object for rendering.
3492 Constructs a PDFPrintable with default scaling (SHRINK_TO_FIT). @param document The PDF document to print.
3493 Renders a string of text onto the PDF page. @param string The byte array representing the text.
3494 Creates a PDMMType1Font from a COSDictionary. @param fontDictionary Font data dictionary.
3495 Constructs a `PDType3Font` with a font dictionary. @param fontDictionary Font dictionary.
3496 Loads a Type 0 font from a file. @param doc PDF document. @param file Font file. @return A PDType0Font object.
3497 Loads a Type 0 font from an input stream. @param doc PDF document. @param input Input stream. @param embedSubset Embed font subset. @return PDType0Font object.
3498 Loads a vertical Type 0 font from a file. @param doc PDF document. @param file Font file. @return PDType0Font object.
3499 Loads a vertical Type 0 font from an input stream. @param doc PDF document. @param input Font data stream. @return A PDType0Font object.
3500 Loads a vertical PDType0Font from an input stream. @param doc PDF document. @param input Font input stream. @param embedSubset Whether to embed font subset.
3501 Loads a TrueType font from a file. @param doc PDF document. @param file Font file. @param encoding Font encoding.
3502 Loads a TrueType font from an input stream. @param doc PDF document. @param input Font data stream. @param encoding Font encoding.
3503 Loads an XFDF document from an input stream. @param input Input stream containing the XFDF data. @return FDFDocument object representing the loaded XFDF.
3504 Processes PDF pages within the specified start and end pages.
3505 Adds a signature to the document with default options. @param sigObject The signature object to add. @throws IOException If an I/O error occurs.
3506 Flattens form fields into annotations. Skips dynamic XFA forms.
3507 Creates PDImageXObject from byte array, auto-detecting file type. @param document PDF document, @param byteArray image data, @param name image name
3508 Renders a PDF page to a BufferedImage. @param pageIndex Page index. @param scale Scaling factor. @param imageType Image type. @return BufferedImage containing the rendered page.
3509 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index. @param graphics Graphics2D. @param scaleX, scaleY Scaling factors.
3510 Renders a text string onto the PDF page. @param string The byte array representing the text.
3511 Renders an array of text strings onto the PDF page. @param array Array of text strings or horizontal displacements.
3512 Creates a PDFont object based on the dictionary and cache. @param dictionary Font dictionary. @param resourceCache Resource cache for font resources.
3513 Loads a Type 0 font from an input stream, embedding the subset. @param doc PDF document. @param input Input stream.
3514 Loads an XFDF document from a file. @param filename Path to the XFDF file. @return FDFDocument object or null if not found.
3515 Loads an XFDF document from a file. @param file The file containing the XFDF data. @return FDFDocument object or null if loading fails.
3516 Splits a PDF document into multiple documents. @param document The PDF document to split. @return List of PDDocument objects representing the splits.
3517 Creates a PDImageXObject from a byte array. @param document PDF document, @param byteArray image data, @param name image name
3518 Renders a PDF page to an RGB BufferedImage. @param pageIndex Page index. @param scale Scaling factor.
3519 Renders a PDF page to an image with specified DPI. @param pageIndex Page index. @param dpi Dots per inch for rendering. @return BufferedImage containing the rendered page.
3520 Renders a PDF page to an image with specified DPI. @param pageIndex Page index. @param dpi Dots per inch. @param imageType Image type. @return BufferedImage containing the rendered page.
3521 Renders a PDF page to a graphics context with a single scale. @param pageIndex Page index. @param graphics Graphics2D. @param scale Scaling factor.
3522 Retrieves a PDFont object by name, using caching if available. @param name Font name. Returns font or null if not found.
3523 Creates a PDFont object from a dictionary. @param dictionary Font dictionary. @return PDFont object.
3524 Extracts a range of pages from the PDF document. @return PDDocument containing extracted pages.
3525 Renders a PDF page to an image. @param pageIndex Index of the page to render. @return BufferedImage representing the rendered page.
3526 Renders a PDF page to a graphics context. @param pageIndex Page index. @param graphics Graphics2D.
3527 Copies needed resources (font) to the appearance stream. @param appearanceStream The appearance stream to copy to.
3528 Retrieves the font setting. @return PDFont object or null if font is not a dictionary.
3529 Sets the appearance content for a widget. @param widget The annotation widget. @param appearanceStream The appearance stream.
3530 Copies graphics state properties into another state. Iterates through keys and copies relevant values.
3531 Processes appearance string operators from content. Parses tokens and calls processOperator for each operator.
3532 Creates a PDDefaultAppearanceString with default appearance & resources. @param defaultAppearance COSString containing default appearance. @param defaultResources PDResources containing default resources.
3533 Gets the default appearance string. @return PDDefaultAppearanceString object or new instance.
3534 Sets the appearance value for the field, handling multiline formatting. @param apValue The value to set for the appearance.
3535 Initializes appearance generator with a variable text field. @param field The PDVariableText field to process. @throws IOException if default appearance string processing fails.
