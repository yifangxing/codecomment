1 Gets the revision number at the specified index. @param index index of the revision number to retrieve @return int revision number at the given index
2 Gets the stroking color space from the current graphics state. @return PDColorSpace object, or null if none is set.
3 Constructs a PDActionSound using a COSDictionary. @param a The COSDictionary representing the sound action.
4 Transforms a width value using the current transformation matrix. Uses scale and shear factors to adjust the width. @param width The width to transform.
5 Gets the non-stroking color from the graphics state.
6 Retrieves an object from the revision collection at the given index. @param index index of the object to retrieve @return object at the specified index
7 Sets the stroking color using the current graphics context. @param color The color to set as the new stroking color.
8 Sets the non-stroking color for the current graphics state. @param color The PDColor to set as the non-stroking color.
9 Returns the current stroking color from the graphics state.
10 Returns the number of objects in the revision collection.
11 Retrieves the non-stroking color space from the graphics state.
12 Gets an integer at the given index, returns defaultValue if not found.
13 Parses PNG chunks from image data to extract image state. @param imageData byte array containing PNG image data @return PNGConverterState object or null if parsing fails
14 Returns the transformation matrix for text lines.
15 Constructs a PDActionURI with the given COSDictionary. @param a The COSDictionary representing the URI action.
16 Sets the text line matrix for the current graphics state. @param value The new text line matrix.
17 Executes the instruction sequence within the given context. Pushes non-string objects onto the stack and executes string commands.
18 Retrieves a COSBase object from the object pool. @param key The key identifying the COSBase object. @return The COSBase object associated with the key.
19 Constructs a PDActionThread with the given COSDictionary. @param a The COSDictionary representing the action.
20 Constructs a PDActionSubmitForm using the provided COSDictionary. @param a The COSDictionary representing the submit form action.
21 Parses the PDF trailer and resolves the xref trailer. @return True if parsing was successful, false otherwise.
22 Adds a PDF source file to be merged. @param source Path to the PDF file to add.
23 Finds the index of the selected radio button widget. Returns -1 if no widget is selected.
24 Creates a PDSoftMask from a COSBase dictionary and resource cache. @param dictionary COSBase representing the mask properties. @param resourceCache Resource cache for accessing resources.
25 Returns the Encoding instance for a given COSName, or null. @param name The encoding name to retrieve.
26 Retrieves the text matrix from the current graphics state.
27 Sets the text matrix using the current graphics state. @param value The new text matrix to set.
28 Returns the number of key-value pairs in the COSDictionaryMap.
29 Creates and returns a PDFieldTree representing the form's fields.
30 Returns a list of filters applied to the stream. Returns an empty list if no filters are present.
31 Creates and returns a copy of this Matrix object.
32 Constructs a PDSoftMask with a dictionary. @param dictionary COSDictionary for mask properties.
33 Creates a scaling transformation matrix. @param x Scale factor along the x-axis. @param y Scale factor along the y-axis.
34 Creates a 3x3 translation matrix. @param x Translation along the x-axis. @param y Translation along the y-axis.
35 Creates a rotation matrix with specified angle and translation. @param theta Rotation angle in radians. @param tx Translation along the x-axis. @param ty Translation along the y-axis.
36 Transforms a vector using the matrix. @param vector The vector to transform. @return The transformed vector.
37 Retrieves the file filters from the stream dictionary. Returns a list of filter names or an empty list if none.
38 Scales the vector by a factor. @param sxy The scaling factor. @return New Vector with scaled coordinates.
39 Gets COS name at index, or defaultValue if out of bounds. @param index Element index. @param defaultValue Default value if index is out of bounds. @return COS name or defaultValue.
40 Finds the index of the first occurrence of an object. @param object The object to search for. @return Index of the object, or -1 if not found.
41 Returns the Z tristimulus value as a float.
42 Constructs a PDNonTerminalField with an AcroForm, field dictionary, and parent.
43 Constructs a PDTerminalField with an AcroForm, field dictionary, and parent.
44 Initializes PDRectlinearMeasureDictionary with a COSDictionary. @param dictionary The COSDictionary to associate with this object.
45 Evaluates the Function Type 2 with given input. @param input Input array for evaluation. @return Float array representing the evaluation result.
46 Constructs a `PDExtendedGraphicsState` with a COSDictionary. @param dictionary COSDictionary containing extended graphics state data.
47 Retrieves a list of filters associated with the stream. Returns an empty list if no filters are found.
48 Writes a COSBoolean object to the output stream, followed by a space. @param output the output stream to write to @param cosBoolean the boolean object to write
49 Creates a PlainText object from a string, splitting into paragraphs. @param textValue The plain text string to parse.
50 Returns the Y tristimulus value as a float.
51 Constructs a PDActionLaunch from a COSDictionary. @param a The COSDictionary representing the action.
52 Checks if the edge is a line based on control points. Uses edge equation values and point coordinates.
53 Constructs a PDActionMovie using the provided COSDictionary. @param a The COSDictionary representing the movie action.
54 Returns a string representation of the COSArrayList.
55 Retrieves an Operator object. Caches operators; creates if absent. @param operator The operator string to retrieve.
56 Constructs a PDActionJavaScript with the given COSDictionary. @param a The COSDictionary representing the action.
57 Constructs a PDActionNamed with the provided COSDictionary. @param a The COSDictionary representing the named action.
58 Finds a raster-capable ImageReader for the given format. @param formatName image format name @param errorCause reason for failure, used in exception @return ImageReader or throws MissingImageReaderException
59 Finds an ImageReader for the given format name. @param formatName image format name @param errorCause error cause string @throws MissingImageReaderException if no reader is found
60 Constructs a PDActionResetForm using a COSDictionary. @param a The COSDictionary representing the reset action.
61 Creates an InputStream for reading stream data. Throws IOException if stream is closed or data not written.
62 Constructs a `PDActionRemoteGoTo` with the provided COSDictionary. @param a The COSDictionary representing the action.
63 Constructs a PDActionHide using a COSDictionary. @param a The COSDictionary representing the hide action.
64 Returns the X tristimulus value as a float.
65 Returns the blue color component as a float.
66 Writes a string to the output stream as US-ASCII bytes. @param text The string to write. @throws IOException If an I/O error occurs.
67 Returns the green color component as a float.
68 Returns the red color component as a float.
69 Constructs a PDActionImportData with the given COSDictionary. @param a The COSDictionary representing the action.
70 Gets the font size from the font setting. @return Font size as a float value.
71 Returns the X coordinate of the rectangle's upper-right corner.
72 Returns the Y coordinate of the lower-left corner.
73 Notifies listeners if the property entry has changed. Calls userPropertyChanged if a change is detected.
74 Returns the x-coordinate of the lower-left corner. Retrieves the value from the rectangle array.
75 Constructs a PDActionEmbeddedGoTo using a COSDictionary. @param a The COSDictionary representing the action.
76 Constructs a PDActionGoTo with the given COSDictionary. @param a The COSDictionary representing the action.
77 Returns the Y coordinate of the rectangle's upper-right corner.
78 Checks if a point is inside the triangle, including edges. @param p Point to check for containment. @return True if point is inside, false otherwise.
79 Retrieves a COSObject from the dictionary by key. @param key The key to look up. @return COSObject or null if not found/not a COSObject.
80 Inserts a diacritic character at a specific index. @param i index of insertion @param diacritic TextPosition representing the diacritic
81 Constructs a Line object with given points and colors. @param p0 Start point of the line. @param p1 End point of the line. @param c0 Color at the start point. @param c1 Color at the end point.
82 Creates a SoftMask with specified paint, mask, bbox, backdrop color, and transfer function.
83 Removes a backdrop from a group image. @param backdrop Backdrop image to remove. @param offsetX Offset for backdrop position. @param offsetY Offset for backdrop position.
84 Parses XML from an input stream, without namespace awareness. @param is Input stream containing XML data. @return Document object representing the parsed XML.
85 Creates a COSFloat from a string, handling various PDF float formats. @param aFloat The string representation of the float value.
86 Constructs a `PDPageFitDestination` from a COS array. @param arr The COS array representing the destination.
87 Constructs a `PDPageFitHeightDestination` from a COS array. @param arr The COS array representing the destination.
88 Constructs a `PDPageFitRectangleDestination` from a COS array. @param arr The COS array representing the destination.
89 Constructs a `PDPageFitWidthDestination` from a COS array. @param arr The COS array representing the destination.
90 Constructs a `PDPageDestination` from a COS array. @param arr The COS array representing the destination.
91 Initializes MacOSRomanEncoding with character mappings from table.
92 Creates a Type1Encoding from an Apache FontBox encoding. @param encoding FontBox encoding to use for creating Type1Encoding @return Type1Encoding instance
93 Returns a COSInteger for the given value, caching if within range. @param val the integer value @return COSInteger object
94 Constructs a Type7ShadingPaint with the given shading and matrix.
95 Normalizes a word, handling specific Unicode ranges and forms. @param word The word to normalize.
96 Draws a tiling pattern onto the graphics context. @param g Graphics2D object to draw on.
97 Constructs a GlyphList from an input stream. @param input Input stream containing glyph list data. @param numberOfEntries Initial capacity of hash maps. @throws IOException if an I/O error occurs.
98 Constructs a GlyphList, copying from another and loading from stream. @param glyphList Source GlyphList to copy mappings from. @param input Input stream containing glyph list data.
99 Retrieves the GID for a given code point. @param code The code point to look up. @return The GID or 0 if not found.
100 Finds font name, tries Unicode name if embedded/glyph missing. @param name Font name to search for. @return Font name or ".notdef" if not found.
101 Retrieves font name, trying alternatives and Unicode names. @param name Glyph name to search for. @return Font name or ".notdef" if not found.
102 Initializes the CMYK color space, loading ICC profile. Throws IOException if profile loading fails.
103 Applies a mask to an image, handling scaling and composition. @param image Input image. @param mask Mask image. @param interpolateMask Interpolation flag for mask.
104 Calculates color at point p based on triangle's shading. @param p Point at which to calculate color. @return Array of color components at the given point.
105 Intersects the current clipping path with a given path. @param path The GeneralPath to intersect with.
106 Intersects the clipping path with a given area. @param area The Area object to intersect with.
107 Transfers the current clipping path to the graphics context. Handles empty clipping paths to prevent rendering issues.
108 Initializes the curve with control points and detail level. @param ctrlPnts Control points for the Bezier curve. @param l Detail level for generating points on the curve.
109 Sets the stroking color if a color is provided. @param color The color to set, or null to skip. @return True if the color was set, false otherwise.
110 Writes the FDF document to a PDF document. @param doc The FDF document to write. @throws IOException if an I/O error occurs.
111 Writes a COS integer object to the output stream, followed by a space. @param output Output stream to write to @param cosInteger COS integer object to write
112 Compares this entry to another based on referenced key. Returns -1, 0, or 1 based on key comparison.
113 Returns the horizontal scaling factor from the text matrix.
114 Returns the vertical scaling factor from the text matrix.
115 Creates a raw OutputStream for writing to the stream. Returns a FilterOutputStream for writing data.
116 Creates a COSWriter with the given output stream and compression parameters. @param outputStream The output stream for writing PDF data. @param compressParameters Compression parameters for the PDF.
117 Creates a COSWriter instance for PDF writing. @param outputStream Output stream for PDF data. @param inputData RandomAccessRead object for incremental updates.
118 Returns the string value, handling UTF-16 or using PDFDocEncoding.
119 Constructs a DefaultResourceCache with stable caching enabled.
120 Creates a COSString. @param text The string to encode. @param forceHex Whether to force hex encoding.
121 Initializes the utility with a target PDF document and cloner. @param targetDoc The PDF document to work with.
122 Writes a COSArray to the output stream, handling nulls and objects. @param output Output stream to write to @param cosArray COSArray to be written
123 Retrieves a value by firstKey, or secondKey if firstKey is null. @param firstKey The primary key to retrieve. @param secondKey Fallback key if firstKey is not found. @return The COSBase value or null if neither key exists.
124 Returns the number of recipients in the PDF document. Uses COSName.RECIPIENTS to retrieve the recipient array.
125 Gets the recipient string at the specified index. @param i Index of the recipient string to retrieve. @return COSString object representing the recipient.
126 Retrieves the transition direction. Returns COSInteger.ZERO if null.
127 Returns a set of metadata keys present in the document info.
128 Retrieves a list of attribute names from the COSDictionary. Filters out the owner name.
129 Adds specified trailer dictionary entries to the stream. Adds INFO, ROOT, ENCRYPT, ID, PREV keys to the stream.
130 Constructs a COSDictionary from another COSDictionary. @param dict The COSDictionary to copy from.
131 Checks if a dictionary is an Info dictionary. Returns true if it contains Info-related keys.
132 Checks if font widths or missing widths are defined.
133 Checks if the font descriptor has a missing width value. @return True if missing width exists, false otherwise.
134 Checks if the form dictionary contains the XFA key. @return True if XFA key exists, false otherwise.
135 Returns a string representation of the COSFloat object.
136 Writes the PDF representation of the float to the output stream.
137 Creates a new COSIncrement using the update info. @return COSIncrement object for tracking updates.
138 Checks if the font is a Standard 14 font. @return True if Standard 14, false otherwise.
139 Reads ASCII85 encoded bytes into the provided byte array. @param data Destination array for decoded bytes. @param offset Offset within the array to start writing. @param len Number of bytes to read. @return Number of bytes read, or -1 if end of stream.
140 Calculates the final encryption key based on object and generation numbers. @param objectNumber Object number for key derivation. @param genNumber Generation number for key derivation.
141 Creates a content stream from an appearance stream. @param appearance The parent appearance stream. @param outputStream Output stream for the content.
142 Creates a content stream with document, appearance, and output stream.
143 Transforms a point using the current graphics state's matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object
144 Creates a paint context with transformed pattern matrix. @param xform transformation applied to the pattern @return PaintContext object for rendering
145 Concatenates the given matrix with the current matrix. @param matrix Matrix to concatenate; its 'single' array is used.
146 Translates the matrix by the given amounts. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
147 Scales the matrix by sx and sy. @param sx Scaling factor for x-axis. @param sy Scaling factor for y-axis.
148 Multiplies this Matrix with another. @param other The other Matrix to multiply by. @return The resulting Matrix.
149 Creates a SecurityHandler for a given ProtectionPolicy. @param policy ProtectionPolicy used to instantiate handler. @return SecurityHandler instance or null if not found.
150 Creates a SecurityHandler for a given filter name. @param name Filter name to retrieve handler for. @return SecurityHandler instance or null if not found.
151 Parses all objects from the object stream. Returns a map of COSObjectKey to COSBase for each object.
152 Reads a single byte from the decoded data stream. Returns -1 if end of stream is reached.
153 Reads data from the stream into the provided byte array. @param data buffer to store read bytes @param offset offset within the data array @param length number of bytes to read @return number of bytes read
154 Reads image from input stream and sets it as the signature image. @param stream Input stream containing the image data. @throws IOException if an I/O error occurs.
155 Sets the non-stroking color if a color is provided. @param color The color to set, or null to skip. @return True if color was set, false otherwise.
156 Selects the best data row to write based on compression sum. @return The best data row to write.
157 Returns RenderState from COSName, or null if null. @param state COSName representing the rendering state
158 Returns the BaseState for a given COSName. @param state COSName representing the state. @return BaseState, defaults to ON if state is null.
159 Creates a PDFStreamParser with content from a given stream. @param pdContentstream The PDF content stream to parse.
160 Creates a PDFStreamParser with a byte array as input. @param bytes The byte array representing the PDF stream.
161 Parses a PDF object by its number. @param objectNumber The object number to parse. @return COSBase object or null if not found.
162 Reads object numbers and offsets from the stream. @return Map of object numbers to their offsets.
163 Encodes raw data into a compressed LZW stream. Uses createCodeTable, findPatternCode, and writeBits.
164 Constructs a Type6ShadingPaint with the given shading and matrix.
165 Returns the PANOSE classification data as a PDPanoseClassification.
166 Constructs a Type4ShadingPaint with the given shading and matrix.
167 Adds a text element at a specified position. @param text The text element to add.
168 Adds a marked content element to the content list. @param markedContent The marked content to add.
169 Adds an XObject to the content list. @param xobject The XObject to add.
170 Sets the print permission if not in read-only mode. @param allowPrinting True to allow printing, false otherwise.
171 Sets the modification permission if not read-only. @param allowModifications True to allow modifications.
172 Sets the content extraction permission if not in read-only mode. @param allowExtraction True to allow, false to disallow.
173 Sets/clears the permission to modify annotations. Only applies if the document is not read-only.
174 Sets/clears the permission to fill in the form. @param allowFillingInForm True to allow, false to disallow.
175 Sets EXTRACT_FOR_ACCESSIBILITY_BIT if not read-only. @param allowExtraction True to allow, false to disallow.
176 Sets the canAssembleDocument permission bit if not read-only. @param allowAssembly True to allow assembly, false otherwise.
177 Applies GSUB rules, converts characters to glyph IDs, and writes them. @param gsubWorker Applies transformations to glyph IDs. @param out Output stream for writing glyph IDs.
178 Constructs a PDDocument from a COSDocument and source. @param doc The COSDocument to represent. @param source Source for reading the PDF. @param permission Access permission for the document.
179 Sets the faithful printing permission if not read-only. @param canPrintFaithful True to allow faithful printing.
180 Constructs a FDFDocument from a COSDocument and source. @param doc The COSDocument to use. @param source The RandomAccessRead source.
181 Returns a string representation of the FunctionType2 object.
182 Checks if the PDF document allows printing. Uses isPermissionBitOn to determine print permission.
183 Checks if content extraction is permitted. Uses isPermissionBitOn to determine extraction rights.
184 Returns the default Adobe Glyph List instance.
185 Creates a PDColor instance with given components, pattern, and color space. @param components Color components (e.g., RGB values) @param patternName Pattern name associated with the color @param colorSpace The color space for the color
186 Returns the COSDictionary containing image parameters.
187 Checks if annotation modification is permitted. Uses `isPermissionBitOn` to determine permission status.
188 Checks if the form filling permission bit is enabled. Returns true if enabled, false otherwise.
189 Checks if content extraction for accessibility is allowed. Uses isPermissionBitOn to determine permission status.
190 Checks if the document assembly permission is enabled. Uses `isPermissionBitOn` to determine the bit's status.
191 Checks if the faithful printing permission is enabled. Returns true if enabled, false otherwise.
192 Initializes the cipher with a key. @param key encryption key, length between 1 and 32 bytes
193 Encrypts a byte using RC4 and writes it to the output stream. @param aByte The byte to encrypt. @param output The output stream to write to.
194 Checks if a codepoint is prohibited for SASL use. Returns true if any of the tagging checks fail.
195 Checks if modification permission is enabled. Uses `isPermissionBitOn` to determine modification access.
196 Calculates the version number based on key length and AES preference.
197 Converts a code point to a CID (Content Identifier). @param code The code point to convert. @return The corresponding CID value.
198 Returns the highest cross-reference object number from pool.
199 Closes the PDF document, releasing resources and handling exceptions.
200 Closes the COSDocument and associated resources, handling exceptions.
201 Returns the underlying COSDictionary object. Returns stream dict if available, otherwise the dictionary.
202 Constructs a PDXObject with a stream and subtype. @param stream The underlying PDF stream. @param subtype The subtype of the XObject.
203 Returns the underlying COSStream object representing the stream.
204 Retrieves the metadata stream from the underlying COSStream.
205 Sets the metadata for the color space. @param metadata COSStream containing the metadata.
206 Checks if this annotation is equal to another based on COSDictionary. @param o The object to compare with. @return True if equal, false otherwise.
207 Constructs a Type5ShadingPaint with a shading and transformation matrix.
208 Decodes a hexadecimal string into a byte array. Handles \\n and \\r characters. Returns byte array.
209 Sets the bounding box of the XObject. Null value removes it. @param bbox The rectangle representing the bounding box.
210 Unchecks the checkbox, setting its value to 'Off'.
211 Creates a COSBoolean from a Java Boolean object. @param value The Java Boolean value to wrap. @return A COSBoolean representing the input value.
212 Returns the text direction (0, 90, 180, or 270). Calculates direction based on transformation matrix.
213 Checks if the COS object needs updating. Uses the internal update state to determine this.
214 Checks if two COSInteger objects have the same integer value.
215 Constructs a COSObjectKey with number, generation, and stream index. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative) @param index Stream index associated with the object key
216 Checks if the next character is a digit. Uses peek() to look ahead without consuming.
217 Checks if the origin document is accepting updates. Returns true if the origin document state is not null.
218 Writes a byte to the output stream, encoding it as ASCII85. @param b The byte to be written.
219 Flushes the buffer to the output stream, encoding data as ASCII85. Handles line breaks and writes a terminator sequence.
220 Decodes a predictor row based on the predictor type. @param predictor Predictor type. @param colors Number of colors.
221 Returns the numeric value of the reference type.
222 Returns the generation number from the referenced key.
223 Returns a string representation of the FreeReference object.
224 Returns the byte offset of the referenced object.
225 Returns the generation number of the referenced object.
226 Returns a string representation of the NormalXReference object.
227 Returns the number from the parent COS object's key.
228 Returns the object stream index for the third column value.
229 Returns a string representation of this ObjectStreamEntry.
230 Writes data to the output stream, preventing new line. @param b The byte array to write. @param off Offset from where to start writing. @param len Number of bytes to write.
231 Writes a byte to the output stream and increments the position.
232 Writes a carriage return and line feed if not already on a new line.
233 Checks if object stream compression is enabled. Returns true if compression parameters are present and enabled.
234 Adds an XRefEntry to the list of cross-reference entries. @param entry The XReferenceEntry to add.
235 Writes an indirect object reference to the output stream. @param output output stream to write to @param indirectReference COS object key
236 Adds a cross-reference entry if its object number is new. @param entry The XReferenceEntry to add.
237 Checks if the next character is whitespace. @return True if the next character is whitespace.
238 Returns the type name, which is "PATTERN".
239 Adds an XRef entry to the xref table, avoiding overwrites. @param objKey COSObjectKey for the entry. @param offset Offset value for the entry.
240 Checks if the next character is a whitespace character.
241 Skips a line break character (CR, LF, or CRLF). @param linebreak The line break character to skip. @return True if line break was skipped, false otherwise.
242 Checks for end of string based on next bytes. @param bracesParameter Remaining braces count. @return 0 if end of string, otherwise bracesParameter.
243 Checks if the character is an end-of-line character (LF or CR). @param c The character to check. @return True if the character is EOL, false otherwise.
244 Reads a string representing a number from the source. Throws IOException if the number exceeds MAX_LENGTH_LONG.
245 Checks if the next character is whitespace. Delegates to isWhitespace(char) for actual check.
246 Parses the startXref offset from the PDF stream. @return Offset of the first object or -1 if not found.
247 Searches for the last EOF marker in the PDF source. Returns marker position or Long.MAX_VALUE if not found.
248 Finds offsets of XRef streams within the PDF source. @return List of Long offsets to XRef streams.
249 Returns the cross-reference table from the resolver.
250 Finds the startxref offset by parsing the trailer bytes. @return Offset of the startxref location. @throws IOException if parsing fails.
251 Reads stream until "endstream" keyword is found. Returns length of filtered content.
252 Returns the default value of the button. Returns "" if no default value is set.
253 Returns the type name, which is always "Shading".
254 Finds offsets of XRef tables in the PDF source. Returns a list of Long offsets.
255 Initializes a COSName with the given string name. @param aName The string representation of the name.
256 Private constructor to limit COSNull instance creation.
257 Creates a COSString from a byte array, optionally forcing hex form. @param bytes The byte array to represent the string. @param forceHex Whether to force hex encoding.
258 Initializes a new COSDictionary with an associated update state.
259 Constructs a COSObject wrapping the given COSBase object. @param object The COSBase object to wrap.
260 Constructs a COSObject with a base object and parser. @param object The COSBase object to wrap. @param parser The parser used to create the object.
261 Constructs a COSObject with a key and parser. @param key The COSObjectKey for identification. @param parser The parser used to create the object.
262 Constructs DecodeOptions with specified rectangle coordinates. @param x x coordinate of rectangle. @param y y coordinate of rectangle. @param width rectangle width. @param height rectangle height.
263 Constructs a FreeXReference with a given key and next free object. @param key The COS object key. @param nextFreeObject The next free object identifier.
264 Constructs an `ObjectStreamXReference` with given parameters. @param objectStreamIndex Index within the object stream.
265 Creates a resource cache instance with stable caching enabled.
266 Initializes the wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
267 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
268 Creates a COSBoolean object with the given boolean value. @param aValue The boolean value to be encapsulated.
269 Creates a PDUserProperty with a COSDictionary and user attribute. @param dictionary The COSDictionary to wrap. @param userAttributeObject The associated user attribute object.
270 Initializes the node with a COSDictionary object. @param dict The COSDictionary to wrap.
271 Creates a `PDDestinationNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
272 Constructs a FDFAnnotationSquare from a COSDictionary. @param a The COSDictionary representing the annotation.
273 Constructs an FDFAnnotationStamp from a COSDictionary. @param a The COSDictionary representing the stamp.
274 Constructs an FDFAnnotationText from a COSDictionary. @param a The COSDictionary representing the annotation.
275 Constructs a `FDFAnnotationTextMarkup` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
276 Returns a Composite instance, handling alpha and blend mode. @param blendMode Blend mode for compositing. @param constantAlpha Alpha value for blending (clamped to [0,1]). @return Composite instance.
277 Returns the transparency group attributes, or null if none exist.
278 Constructs a PDShadingPattern from a COSDictionary. @param resourceDictionary The COSDictionary containing data.
279 Constructs a PDTilingPattern from a COSDictionary and ResourceCache. @param dictionary Pattern data in a COSDictionary. @param resourceCache Cache for resources used by the pattern.
280 Initializes a PDShadingType1 object from a shading dictionary. @param shadingDictionary The shading dictionary to use.
281 Initializes the PDShadingType2 with a shading dictionary. @param shadingDictionary The shading dictionary to use.
282 Constructs an AxialShadingPaint with the given shading type and matrix.
283 Constructs a RadialShadingPaint with shading and transformation matrix.
284 Constructs a Type1ShadingPaint with a shading and transformation matrix.
285 Creates an FDFAnnotationSound from a COSDictionary. @param a The COSDictionary representing the annotation.
286 Constructs a `FDFAnnotationPolyline` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
287 Constructs a FDFAnnotationPolygon from a COSDictionary. @param a The COSDictionary representing the annotation.
288 Constructs an FDFAnnotationLink from a COSDictionary. @param a The COSDictionary representing the link.
289 Creates a `PDNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
290 Creates a `PDJavascriptNameTreeNode` from a COSDictionary. @param dic The COSDictionary representing the node.
291 Creates a PDStructureElementNameTreeNode from a COSDictionary. @param dic The COSDictionary representing the node.
292 Creates a child node using the provided COS dictionary. @param dic COS dictionary for the child node.
293 Initializes PDMetadata with a COSStream. @param str the COSStream to use for initialization
294 Initializes a PDObjectStream with a COSStream. @param str the COSStream to wrap
295 Initializes a PDEmbeddedFile with a COSStream. @param str the COSStream to wrap
296 Initializes PDFunction with a COSBase object (stream or dict). @param function The function representation (COSStream or COSDictionary)
297 Constructs a PDXObject with a stream and subtype. @param stream The COSStream to wrap in a PDStream. @param subtype The subtype of the XObject.
298 Constructs a PDTransition object from a COSDictionary. @param dictionary The COSDictionary representing the transition.
299 Constructs a `PDStructureElement` using the provided COS dictionary. @param dic The COS dictionary for the element.
300 Constructs a `PDStructureTreeRoot` using the provided COSDictionary. @param dic The COSDictionary containing structure tree data.
301 Default constructor. Initializes the SecurityHandler object.
302 Constructs an FDFAnnotationCaret from a COSDictionary. @param a The COSDictionary representing the annotation.
303 Constructs a `FDFAnnotationCircle` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
304 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a The COSDictionary representing the attachment.
305 Constructs a `FDFAnnotationFreeText` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
306 Constructs an FDFAnnotationInk from a COSDictionary. @param a The COSDictionary representing the annotation.
307 Constructs a `FDFAnnotationLine` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
308 Writes paragraph start marker to the output stream. Marks the beginning of a new paragraph in the extracted text.
309 Writes the line separator to the output stream.
310 Writes the word separator string to the output stream.
311 Writes the start string for the current PDF page to the output.
312 Writes the page end marker to the output stream.
313 Returns visually ordered Unicode string; reverses if RTL.
314 Checks if this text position represents a diacritic character. Returns false for prolonged sound marks.
315 Converts a byte to its hexadecimal string representation.
316 Converts a byte array to a hexadecimal string representation. @param bytes The byte array to convert. @return Hexadecimal string.
317 Converts a byte to its hexadecimal byte representation. @param b The byte to convert. @return A byte array containing the hex representation.
318 Converts a byte array to its hexadecimal byte representation. @param bytes The byte array to convert. @return Hexadecimal byte array.
319 Writes a byte as two hex characters to the output stream. @param b The byte to convert to hex. @param output The output stream to write to.
320 Formats a float value into an ASCII byte array. @param value Float to format. @param maxFractionDigits Digits after decimal. @return Offset in the buffer or -1 if formatting fails.
321 Finds a value by traversing the trie based on the byte array. @param bytes The byte array to search for. @return The value found at the end of the path, or initial value.
322 Ends the current PDF article by writing its end string.
323 Starts a new PDF article, writing the start string to output.
324 Returns the Unicode string representation of this text position.
325 Writes Unicode characters from a TextPosition to the output.
326 Returns the height of the signature template. Delegates to getPageHeight().
327 Ensures the node is a single node with no siblings. Throws exception if node has siblings.
328 Calculates X position based on rotation. Returns X translation or 0 if rotation is not 0, 90, 180, 270.
329 Calculates the Y coordinate of the lower-left corner, considering rotation.
330 Calculates width based on rotation. Returns width along Y if rotated 90/270, otherwise X.
331 Sets the X and Y coordinates of the visible signature. @param x The X coordinate. @param y The Y coordinate. @return A reference to this {@link PDVisibleSignDesigner} object.
332 Constructs a `PDMarkedContent` object with a tag and properties. @param tag The tag associated with the content. @param properties COS dictionary holding content properties.
333 Creates a FDFAnnotationHighlight from a COSDictionary. @param a The COSDictionary representing the annotation.
334 Constructs a PDTilingPattern from a COSDictionary. @param dictionary Pattern data in a COSDictionary.
335 Constructs a PDSignatureField with an AcroForm, field dict, and parent.
336 Constructs a PDVariableText object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
337 Returns a string representation of revisions, formatted as "object=X, revisionNumber=Y".
338 Generates a unique partial name for a signature field. Increments a counter until a unique name is found.
339 Default constructor. Initializes the PublicKeySecurityHandler.
340 Constructs a PDFormXObject with a stream and resource cache. @param stream The COSStream for the form. @param cache The resource cache to use.
341 Constructs a StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy Encryption policy parameters.
342 Constructs a PDFormXObject with a COSStream. @param stream The COSStream representing the form data.
343 Constructs a PDPostScriptXObject with a stream. @param stream The COSStream containing PostScript data.
344 Constructs a COSDocument using a memory-only stream cache. @param parser Parses the PDF document.
345 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase representing the mask properties.
346 Constructs a PDShadingType3 using the provided shading dictionary. @param shadingDictionary The shading dictionary to use.
347 Initializes the shading with a dictionary. @param shadingDictionary The shading dictionary to use.
348 Constructs a `FDFAnnotationStrikeOut` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
349 Constructs a PublicKeySecurityHandler with a given policy. @param publicKeyProtectionPolicy Encryption policy.
350 Constructs an `FDFAnnotationUnderline` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
351 Constructs a PDButton with an AcroForm, field dictionary, and parent.
352 Constructs a `FDFAnnotationSquiggly` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
353 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
354 Default constructor. Initializes the SecurityHandler object.
355 Adjusts the text matrix by the given translation amounts. @param tx Translation amount on the x-axis. @param ty Translation amount on the y-axis.
356 Checks if the rectangle contains the given point (x, y). @param x The x-coordinate of the point. @param y The y-coordinate of the point.
357 Constructs a ShadedTriangle with given points and colors. @param p Array of triangle corner points. @param c Array of colors at each corner.
358 Sets the font provider and initializes font info map. @param fontProvider The provider of font information.
359 Saves font information to a disk cache file. Writes font info to file; handles IO/security exceptions.
360 Retrieves a FontBoxFont from the cache or loads it based on format. @return FontBoxFont object or null if not found/failed to load.
361 Encrypts/decrypts data using AES-256. @param data input stream @param output output stream @param decrypt decrypt flag
362 Encrypts/decrypts data using AES. @param finalKey encryption key @param data input stream @param output output stream @param decrypt decrypt flag
363 Processes a CharSequence as a token, delegating to the String token method.
364 Concatenates two matrices by multiplying b with a. @param a The first matrix. @param b The second matrix. @return The concatenated Matrix.
365 Translates the matrix by the given vector's components. @param vector Vector containing translation amounts (x, y).
366 Initializes PDFunctionType3 with a function stream (COSStream/COSDictionary). @param functionStream The function representation.
367 Loads a GlyphList from a resource file. @param filename resource filename @param numberOfEntries number of entries in the file @return GlyphList object
368 Updates the graphics clip based on current clipping paths. Applies initial clip if available and updates lastClippingPaths.
369 Ends the text clip, intersecting the current clipping path. Resets textClippings and lastClips for subsequent operations.
370 Creates/retrieves a map of GID to code point. Creates if empty, otherwise returns existing map.
371 Calculates the rectangle's width. Subtracts lower-left X from upper-right X.
372 Rotates the matrix by a specified angle. @param theta Rotation angle in radians.
373 Writes a COSFloat object to the output stream, followed by a space. @param output The output stream to write to. @param cosFloat The COSFloat object to write.
374 Checks if the COSDictionaryMap is empty. Returns true if the map contains no key-value pairs.
375 Writes an operator string followed by a newline. @param text Operator string to write. @throws IOException If an I/O error occurs.
376 Writes an integer operand to the output stream, formatted as a decimal.
377 Writes a float operand to the output stream, handling non-finite values. @param real The float value to write.
378 Determines image suffix based on stream filters. Returns null if no match found; logs a warning.
379 Constructs a PDImageXObject with a stream and resources. @param stream The underlying PDF stream. @param resources Resources associated with the image.
380 Creates an OutputStream for writing to the stream, applying filters. @param filters COSBase object representing filters to apply. @return OutputStream for writing to the stream.
381 Gets COS name at index, or null if out of bounds. @param index Element index. @return COS name or null.
382 Gets an integer at the given index, returns -1 if not found.
383 Returns a string representation of the rectangle's coordinates.
384 Creates a GeneralPath representing the rectangle's shape. Uses lower-left and upper-right coordinates to define it.
385 Transforms the rectangle using the given matrix. @param matrix Transformation matrix to apply @return GeneralPath representing the transformed rectangle
386 Calculates the height of the rectangle. Subtracts lower-left Y from upper-right Y.
387 Creates a COSIncrement from the current update state. @return COSIncrement object representing the updates.
388 Creates a COSWriter with the given output stream. @param outputStream The output stream for writing PDF data.
389 Computes the owner password encryption. @param ownerPassword Owner password. @param userPassword User password. @param encRevision Encryption revision. @param length Key length. @return Encrypted owner password bytes.
390 Computes user password encryption based on revision. @param password User password for encryption.
391 Sets the signature image from a file path. @param path Path to the image file. @throws IOException if an I/O error occurs.
392 Creates a PDVisibleSignDesigner with an image from the stream. @param imageStream Input stream containing the signature image. @throws IOException if an I/O error occurs.
393 Creates a COSString from a string. @param text The string to encode.
394 Gets the default appearance string from the field's attributes. Returns null if the attribute is not a COSString.
395 Gets export values from button attributes. Returns a list of strings or an empty list if no values exist.
396 Extracts string items from a COSBase object. @param items COSBase object to extract from @param pairIdx Index to access in COSArray @return List of extracted strings.
397 Gets the named destination string. Returns null if it's neither COSString nor COSName.
398 Returns the file name as a string.
399 Gets string at index, returns defaultValue if not a COSString. @param index Element index. @param defaultValue Default string value. @return String at index or defaultValue.
400 Initializes PDFunctionType0 with a COSBase object (stream or dict). @param function The function representation (COSStream or COSDictionary)
401 Retrieves the PDF metadata as a PDMetadata object. Returns null if no metadata is present.
402 Finds nearest XRef table/stream offset. @param xrefOffset Offset to find the nearest XRef. @return Nearest XRef offset or -1 if not found.
403 Parses the PDF header and extracts version info. Uses default version if parsing fails.
404 Parses the FDF header and extracts the version. Uses parseHeader with FDF_HEADER and FDF_DEFAULT_VERSION.
405 Constructs a PDDocument from a COSDocument and source. @param doc The COSDocument to represent. @param source Source for reading the PDF.
406 Reads a line from the PDF source. @return String representing the line, or throws IOException.
407 Skips a line break character. Rewinds if not a line break.
408 Creates a PDDocument from the COSDocument and source.
409 Returns the COSBase representation of the transition angle. @return COSBase object representing the transition angle.
410 Detects file type from an input stream using magic numbers. @param inputStream BufferedInputStream to read file content @return FileType object representing detected file type
411 Writes byte array as hex characters to an output stream. @param bytes The byte array to convert to hex. @param output The output stream to write to.
412 Writes the COS name to the specified PDF output stream. @param output The output stream to write to.
413 Writes an external signature to the PDF, handling space constraints. @param cmsSignature CMS signature byte array. @throws IOException if signature is too large or PDF not prepared.
414 Converts the string's byte array to a hexadecimal string.
415 Converts a Calendar to an ISO 8601 formatted string. @param cal Calendar object to convert. @return ISO 8601 formatted date and time string.
416 Converts a Calendar object to a formatted string (yyyyMMddHHmmss'timezone'). @param cal Calendar object to format. Null if no value. @return Formatted date/time string or null if cal is null.
417 Skips whitespace and comment characters in the PDF source.
418 Writes paragraph end marker. Writes start if not already in paragraph.
419 Starts a new PDF article. Delegates to overloaded method.
420 Calculates the width adjusted for text direction. Uses getDir() to determine the text direction.
421 Returns the width of the text, considering rotation.
422 Calculates the adjusted Y coordinate based on text direction.
423 Constructs a TextPosition object with specified parameters. @param pageRotation Page rotation angle.
424 Calculates X position adjusted for text direction. Uses getDir() to determine direction, then uses getXRot.
425 Checks if the document owner permission is enabled. Returns true if all permission bits are set.
426 Skips whitespace characters and handles line breaks.
427 Checks if any revision 3 permission bits are set. Returns true if any of the permission bits are enabled.
428 Checks if a COSBase object needs updating. Returns true if it's a COSUpdateInfo; otherwise false.
429 Appends a kid element to the current element. @param mcid The MCID of the kid element to append.
430 Parses a string to a COSNumber (Integer or Float). @param number String representation of the number. @return COSNumber object.
431 Retrieves the extends stream from the COS object. Returns a PDObjectStream or null if not present.
432 Closes the stream, flushing data and releasing resources. Flushes buffer and calls super.close(), then nulls data.
433 Sets the updated flag if updates are currently accepted. @param updated The new value for the updated flag.
434 Constructs a COSObjectKey with number and generation. @param num Object number (must be non-negative) @param gen Generation number (must be non-negative)
435 Retrieves FontMetrics for the given font name. @param fontName Font name to retrieve metrics for. @return FontMetrics object or null if not found.
436 Encrypts data and writes it to the output stream. @param data The byte array to encrypt. @param output The output stream to write to.
437 Constructs a PDFormXObject with a stream. @param stream The underlying PDF stream for the form.
438 Writes an array of bytes to the output stream, encrypting each. @param data Byte array to encrypt. @param offset Start index in the array. @param len Number of bytes to write. @param output Output stream to write to.
439 Closes overlays & releases resources held by the Overlay object.
440 Creates a new PDPageAdditionalActions object with a COSDictionary.
441 Initializes a new `PDFormFieldAdditionalActions` object. Creates a new `COSDictionary` to hold actions.
442 Initializes a new `PDDocumentCatalogAdditionalActions` instance.
443 Initializes the PDAnnotationAdditionalActions with an empty actions dictionary.
444 Creates a new PDAdditionalActions object with an empty COSDictionary.
445 Initializes a new PDShading object with an empty dictionary.
446 Creates a new PDDeviceNProcess object, initializing its dictionary.
447 Initializes a new `PDDeviceNAttributes` object with a new COSDictionary.
448 Creates a new PDTargetDirectory with an empty COSDictionary.
449 Creates a new FDFTemplate instance, initializing the template.
450 Constructs a new FDFPage with an empty COSDictionary.
451 Initializes a new FDFNamedPageReference with an empty COSDictionary.
452 Creates a new FDFJavaScript instance with an empty COSDictionary.
453 Default constructor. Initializes the 'fit' COSDictionary.
454 Creates a new FDFField object, initializing its COSDictionary.
455 Constructs a new FDFDictionary, initializing the internal COSDictionary.
456 Creates a new FDFCatalog instance, initializing the catalog.
457 Creates a new FDFPageInfo with an empty COSDictionary.
458 Initializes a new PDCryptFilterDictionary with a COSDictionary.
459 Initializes a new PDURIDictionary with an empty COSDictionary.
460 Initializes a new PDBorderEffectDictionary with a COSDictionary.
461 Retrieves the metadata stream. @return PDMetadata object or null if no metadata exists.
462 Initializes the outline item with a COSDictionary. @param dic The COSDictionary to wrap.
463 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
464 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
465 Creates a new PDWindowsLaunchParams object, initializing parameters.
466 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
467 Initializes a new PDViewerPreferences object. Creates a new COSDictionary to store preferences.
468 Creates a new PDViewportDictionary with an empty COSDictionary.
469 Constructs a PDField with an AcroForm.
470 Initializes a new PDSeedValueTimeStamp with an empty COSDictionary.
471 Creates a new PDSeedValueMDP with an empty COSDictionary.
472 Initializes a new PDPropBuildDataDict, creating a COSDictionary.
473 Initializes a new PDPropBuild instance with a COSDictionary.
474 Creates a new PDBorderStyleDictionary with an empty COSDictionary.
475 Constructs a COSObject with a base object and key. @param object The COSBase object being wrapped. @param objectKey Object key for identification.
476 Creates a new PDBoxStyle object with an empty COSDictionary.
477 Initializes a new PDEncryption object with a COSDictionary.
478 Creates a new PDMarkInfo object with an empty COSDictionary.
479 Constructs a new PDPropertyList with an empty COSDictionary.
480 Initializes the LegacyPDFStreamEngine by adding various operators.
481 Default constructor, initializes with a new COSDictionary.
482 Default constructor. Initializes the node with a new COSDictionary.
483 Constructs a new PDDictionaryWrapper with an empty COSDictionary.
484 Default constructor. Initializes the PDResources object.
485 Initializes a new PDDocumentInformation object. Creates a COSDictionary to store document information.
486 Creates a DecodeResult with default parameters using a new COSDictionary.
487 Creates an unmodifiable COSDictionary from a given dictionary. @param dict The COSDictionary to wrap.
488 Constructs a COSStream with a RandomAccessStreamCache. @param streamCache Cache for accessing random-access streams.
489 Retrieves a COSName by its string representation. Creates and registers if not found, ensuring thread safety.
490 Constructs a COSArray with a new ArrayList and direct flag true.
491 Creates a COSString from a byte array, using default encoding. @param bytes The byte array to represent the string.
492 Constructs a PDAppearanceStream from a COSStream. @param stream The COSStream representing the appearance data.
493 Constructs a PDTransparencyGroup with a stream and resource cache. @param stream The COSStream for the group. @param cache The resource cache to use.
494 Adds a TrueType collection font file. @param ttcFile The TrueType collection file to add.
495 Adds a TrueType font, handling errors and missing data. @param fontHeaders Font headers object. @param file The font file. @param hash Hash of the font file.
496 Adds a Type1 font to the list, handling errors and skipping invalid fonts. @param pfbFile The PFB file containing the Type1 font.
497 Constructs a COSArrayList with a parent dictionary and key. @param dictionary Parent COSDictionary. @param dictionaryKey Key for the parent dictionary.
498 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
499 Retrieves the resources associated with this XObject. Returns null if no resources are defined.
500 Returns the last DecodeResult or a default if none exist.
501 Returns an unmodifiable view of this COSDictionary.
502 Constructs a COSStream with a RandomAccessStreamCache and view. @param streamCache Cache for stream access @param randomAccessReadView View for reading the stream
503 Constructs a COSStream with no initial stream cache.
504 Creates a new COSStream and adds it to the streams list. @return The newly created COSStream object.
505 Creates a PDRectangle with specified coordinates and dimensions. @param x The x-coordinate of the rectangle's origin. @param y The y-coordinate of the rectangle's origin. @param width The width of the rectangle. @param height The height of the rectangle.
506 Constructs a new PDPageDestination with an empty COSArray.
507 Initializes a new COSArrayList with an empty COSArray and ArrayList.
508 Parses a hex string and creates a COSString. @param hex Hexadecimal string to parse. @return COSString representation of the hex string.
509 Constructs a PDRectangle from a BoundingBox. @param box The BoundingBox containing rectangle coordinates.
510 Default constructor for PDAttributeObject.
511 Constructs a PDUserProperty with a given user attribute object. @param userAttributeObject the user attribute object
512 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
513 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
514 Returns the font provider. Sets a default if none is set.
515 Generates shaded triangles from coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects. @return List of ShadedTriangle objects.
516 Constructs a CoonsPatch with color coordinates and reshapes control points. @param points Array of control points. @param color 2D array of color values.
517 Constructs a PDTerminalField with the provided AcroForm.
518 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
519 Constructs a PDNonTerminalField with the given AcroForm.
520 Default constructor. Initializes the node.
521 Default constructor. Initializes a new PDJavascriptNameTreeNode.
522 Default constructor. Initializes the node.
523 Default constructor. Initializes the node with a new COSDictionary.
524 Default constructor for PDOutlineNode.
525 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
526 Starts a new text mode. Throws exception if nested. Writes BEGIN_TEXT operator and sets inTextMode to true.
527 Sets the line join style. @param lineJoinStyle Line join style value (0-2). @throws IOException If an I/O error occurs.
528 Sets the line width for drawing. @param lineWidth The desired line width. @throws IOException If an I/O error occurs.
529 Clips the current path using the even-odd rule. Throws exception if called within a text block.
530 Clips the content stream to the current path. Throws exception if called within a text block.
531 Closes the current path. Throws exception if in text mode. Writes the CLOSE_PATH operator.
532 Closes, fills, and strokes the content stream with even-odd rule. Throws exception if called within a text block.
533 Closes path, fills, and strokes it. Throws exception in text mode.
534 Fills and strokes the content with even-odd rule. Throws exception if called within a text block.
535 Fills and strokes the current path. Throws exception if in text mode.
536 Fills the content stream with even-odd fill operation. Throws exception if called within a text mode block.
537 Fills the current content stream with the non-zero fill operator. Throws exception if called within a text block.
538 Closes the current subpath and strokes it. Throws exception if called within a text block.
539 Draws the outline of the current path. Throws exception if called within a text block.
540 Draws a line to the specified coordinates. @param x x-coordinate of the line endpoint. @param y y-coordinate of the line endpoint.
541 Moves the current point to the specified coordinates. @param x The x-coordinate. @param y The y-coordinate.
542 Draws a cubic Bezier curve. @param x1, y1, x3, y3 Coordinates of the curve's control points. @throws IOException If an I/O error occurs.
543 Draws a cubic Bezier curve. @param x2, y2, x3, y3 Coordinates of the curve's control points. @throws IOException If an I/O error occurs.
544 Draws a cubic Bezier curve. @param x1, y1, x2, y2, x3, y3 Curve control points. @throws IOException If an I/O error occurs.
545 Adds a rectangle to the content stream. @param x x-coordinate of the rectangle. @param y y-coordinate of the rectangle. @param width Rectangle width. @param height Rectangle height.
546 Sets the non-stroking gray color value. @param g Gray value (0.0-1.0) to set. @throws IllegalArgumentException if g is outside [0, 1].
547 Sets the non-stroking CMYK color and writes it to the stream. @param c, m, y, k CMYK color components (0.0-1.0) @throws IOException If an I/O error occurs.
548 Sets the line cap style. @param lineCapStyle Line cap style value (0-2). @throws IOException If an I/O error occurs.
549 Sets the non-stroking color to RGB values. @param r Red value (0..1) @param g Green value (0..1) @param b Blue value (0..1) @throws IOException If an I/O error occurs.
550 Sets the line dash pattern and phase. @param pattern The dash pattern array. @param phase The phase of the dash pattern.
551 Writes the "END_MARKED_CONTENT" operator to finish a marked content sequence.
552 Generates user password based on revision. @param ownerPassword Owner password. @param owner Owner data.
553 Constructs a TensorPatch with control points and color coordinates. @param tcp Array of control points. @param color Color coordinates for the patch.
554 Sets the named destination. Null if dest is null. @param dest The name of the destination.
555 Initializes a `PDNamedDestination` with a `COSString`. @param dest The COSString representing the named destination.
556 Sets the file name for the specification. @param fileName The name of the file.
557 Creates a new, empty PDSimpleFileSpecification. Initializes the file to an empty COSString.
558 Gets the button's value, potentially from export values. Returns "Off" if no value is set.
559 Gets string at index, returns null if not a COSString. @param index Element index. @return String at index or null.
560 Saves the FDF document to the provided output stream. @param output The output stream to write the FDF data to. @throws IOException if an I/O error occurs.
561 Sets the text rise value. @param rise The vertical offset of the text baseline. @throws IOException If an I/O error occurs.
562 Sets the text rendering mode. @param rm The rendering mode to set. @throws IOException If an I/O error occurs.
563 Sets the horizontal scaling for text rendering. @param scale Horizontal scaling factor. @throws IOException If an I/O error occurs.
564 Sets the word spacing. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
565 Sets the character spacing value. @param spacing The spacing value to set. @throws IOException If an I/O error occurs.
566 Sets the miter limit for line drawing. @param miterLimit The miter limit value. @throws IllegalArgumentException if miterLimit is invalid.
567 Sets the stroking color to gray. @param g Gray value (0.0-1.0). Throws IllegalArgumentException if out of range.
568 Sets the stroking color using CMYK values. @param c,m,y,k CMYK color components (0.0 to 1.0) @throws IOException If an I/O error occurs.
569 Sets the stroking color to RGB values. @param r Red component (0.0-1.0) @param g Green component (0.0-1.0) @param b Blue component (0.0-1.0) @throws IOException If an I/O error occurs.
570 Constructs a COSDocument using a memory-only stream cache.
571 Saves the current graphics stack and pushes a clone. @return The saved graphics stack.
572 Saves the current graphics state onto the graphics stack. Clones the top graphics state and pushes it onto the stack.
573 Constructs a PDTextField object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
574 Constructs a PDChoice object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
575 Constructs a PDRadioButton with an AcroForm, field, and parent.
576 Constructs a PDPushButton with an AcroForm, field dictionary, and parent.
577 Constructs a PDCheckBox with an AcroForm, field dictionary, and parent.
578 Clips the current graphics state to a rectangle. @param rectangle The rectangle to clip to.
579 Gets the bounding box of the transformed appearance. @param appearanceStream Appearance stream to transform. @return Rectangle2D representing the transformed bounding box.
580 Initializes PDGraphicsState with a clipping path from the page rectangle. @param page The page rectangle defining the clipping path.
581 Gets the left coordinate from the array. Returns -1 if not found.
582 Restores the graphics state, popping values from stacks. Throws exception if called within a text object.
583 Saves the current graphics state onto a stack. Throws exception if in text mode. Pushes state onto stacks.
584 Moves the current text position to the specified offset. @param tx X offset. @param ty Y offset.
585 Writes a newline operator. Throws exception if not in text mode.
586 Sets the leading (vertical space) for text. @param leading The leading value to set.
587 Ends the current text mode. Throws exception if not in text mode.
588 Writes the matrix representation of an AffineTransform. @param transform AffineTransform object to write.
589 Retrieves the soft mask for the image object, or null if none exists.
590 Retrieves the mask for the image object, or null if none exists.
591 Creates a thumbnail image object from a COS stream. @param cosStream The COS stream representing the image data. @return A PDImageXObject representing the thumbnail.
592 Creates an OutputStream for the stream, applying the specified filter. @param filter COSName representing the filter to apply. @return OutputStream for writing to the stream.
593 Checks if the destination type is TYPE_BOUNDED. Returns true if so, false otherwise.
594 Checks if the destination type is bounded by height. Returns true if TYPE_BOUNDED, false otherwise.
595 Checks if the destination type is TYPE_BOUNDED. Returns true if so, false otherwise.
596 Gets the top coordinate from the array. Returns -1 if not found.
597 Gets the left coordinate from the array. Returns -1 if not found.
598 Returns the top coordinate from the array. Uses `getInt` to fetch the value at index 2.
599 Returns the top coordinate of the rectangle from the array.
600 Returns the right coordinate of the rectangle. Uses `array.getInt(4)` to retrieve the value.
601 Returns the bottom coordinate of the rectangle.
602 Returns the left coordinate of the rectangle. Uses array.getInt(2) to fetch the value.
603 Creates an OutputStream for writing to the stream. Overloads createOutputStream(COSBase) with no filters.
604 Prepares a string for SASL, allowing unassigned codepoints. @param str Input string to prepare. @return Prepared string.
605 Encrypts data from an input stream and writes to an output stream. @param data Input stream to encrypt. @param output Output stream to write encrypted data.
606 Encrypts data using RC4 cipher. @param finalKey Encryption key. @param input Data to encrypt. @param output Output stream.
607 Computes the document revision number based on version and permissions.
608 Returns the current access permission, or owner permission if null.
609 Constructs a PDDocument from a COSDocument. @param doc The COSDocument to represent.
610 Calculates the fixed offset for a given object offset. @param objectOffset The object offset to search for. @return Fixed offset or 0 if not found.
611 Reads a long value from the PDF source. Parses the string representation to a primitive long.
612 Reads an integer from the PDF source. Throws IOException if not a valid integer.
613 Reads a string from the PDF source with a specified length. @param length The maximum length of the string to read. @return The read string.
614 Reads an expected string from the source, throwing IOException on mismatch. @param expectedString String to match @param skipSpaces Whether to skip spaces before/after
615 Reads a string from the PDF source until the end of a name. @return The string read from the source.
616 Prepares a string for SASL storage, normalizing characters. Uses `saslPrep` with unassigned codepoints disallowed.
617 Constructs a PDTransparencyGroup with the given stream. @param stream The underlying PDF stream.
618 Sets whether the COS object needs updating. @param flag True if the object needs updating.
619 Creates a PDColor instance from a COSArray and color space. @param array COSArray containing color components/pattern name @param colorSpace PDColorSpace for the color
620 Parses the Xref table, validating structure and entries. Returns true on success, false otherwise.
621 Parses cross-reference stream, extracting object details. @param resolver XrefTrailerResolver to manage xref entries
622 Searches for object stream offsets and associates them with keys. Returns a map of offsets to COSObjectKeys.
623 Searches for PDF objects, extracting object IDs and offsets. Uses heuristics to handle potentially truncated PDFs.
624 Retrieves a COSObjectKey, using a cache for performance. @param num Object number. @param gen Generation number.
625 Creates a `PDMarkedContent` object based on tag. @param tag Content tag; ARTIFACT creates a `PDArtifactMarkedContent`. @param properties COS dictionary holding content properties.
626 Writes the CMap data to an output stream. Writes CMap data to the provided OutputStream.
627 Sets the updated flag to true, indicating updates are accepted.
628 Checks if the dictionary contains a key represented by a String. @param name The key to check. @return True if the key exists, false otherwise.
629 Retrieves a value from the dictionary by key. @param key The key to look up. @return The COSBase value or null if not found.
630 Default constructor. Adds operators for marked content sequences.
631 Constructs a PDFMarkedContentExtractor with the given encoding. @param encoding The character encoding used for the PDF.
632 Retrieves a filter by name. @param filterName Name of the filter to retrieve. @return The filter object.
633 Parses a COS name from the PDF source. Reads and decodes the name, handling hex escapes. @return A COSName object representing the parsed name. @throws IOException if an I/O error occurs.
634 Merges a diacritic character into this TextPosition. @param diacritic TextPosition representing the diacritic
635 Checks if this TextPosition contains another TextPosition. @param tp2 The TextPosition to check for containment. @return True if tp2 is contained within this TextPosition.
636 Writes a paragraph separator by ending and starting a paragraph.
637 Checks if this TextPosition completely contains another. @param tp2 The TextPosition to check for containment. @return True if this TextPosition contains tp2, false otherwise.
638 Writes a COS name to the output stream, followed by a space. @param output The stream to write to. @param cosName The COS name to write.
639 Writes a PDF operand (COSName) to the output stream, followed by a space.
640 Writes a string to the output stream, escaping as needed. @param bytes The byte array representing the string. @param forceHex Whether to force hexadecimal encoding. @param output The output stream to write to.
641 Returns an InputStream for signing the PDF. Throws IllegalStateException if PDF isn't prepared.
642 Applies a matrix transformation to the content stream. @param matrix Matrix object representing the transformation. @throws IOException If an I/O error occurs.
643 Sets the text matrix using the provided matrix. @param matrix Matrix object representing the transformation @throws IOException If an I/O error occurs
644 Creates a content stream from an appearance stream, optionally compressing it. @param appearance The parent appearance stream. @param compress Whether to compress the content stream.
645 Constructs a PDListBox object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
646 Protected default constructor for PDStandardAttributeObject.
647 Default constructor for PDOutlineItem, calls superclass constructor.
648 Constructs a PDVariableText object with the provided AcroForm.
649 Initializes the attribute wrapper with a COSDictionary. @param dictionary The COSDictionary to wrap.
650 Returns the appearance stream for this entry. Throws IllegalStateException if not a stream.
651 Adds a TrueType font. Handles OTF/TTF differences and errors. @param ttfFile The TrueType font file.
652 Writes data to the appearance stream. @param data byte array to write @param appearanceStream the appearance stream
653 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
654 Constructs a PDComboBox object. @param acroForm The PDF AcroForm. @param field The field dictionary. @param parent The parent field.
655 Constructs a COSParser with a source, password, keyStore, and keyAlias. @param source Source stream. @param password Password for decryption. @param keyStore KeyStore for decryption. @param keyAlias Key alias for decryption.
656 Creates an OutputStream for writing to the stream.
657 Initializes the shading with a COSDictionary. @param shadingDictionary The shading dictionary to use.
658 Creates a new PDUserAttributeObject, sets the owner to OWNER_USER_PROPERTIES.
659 Default constructor for PDDefaultAttributeObject.
660 Encrypts data using RC4 cipher. @param finalKey Encryption key. @param input Input stream to encrypt. @param output Output stream for encrypted data.
661 Reads an object number from the PDF source, validating its range. @return The object number as a long. @throws IOException if the object number is invalid.
662 Reads the generation number from the PDF source. Throws IOException if invalid (negative or > GENERATION_NUMBER_THRESHOLD).
663 Computes an encrypted key based on revision and parameters. @param password Password bytes. @param o Owner password.
664 Checks user password based on encryption revision. @param password User password. @return True if password is valid, false otherwise.
665 Finds a FontBoxFont by format and PostScript name. @param format Font format @param postScriptName PostScript font name @return FontBoxFont or null if not found.
666 Converts a COSString to a Calendar object. @param text COSString to convert; null input returns null. @return Calendar object or null if input is null.
667 Sets origin doc state, recursively updates child update infos. @param originDocumentState State of the origin document. @param dereferencing Flag indicating whether dereferencing.
668 Sets the COSObject to null, updating its state if not already null.
669 Updates the origin document state if different. @param updateState COSUpdateState object to compare.
670 Removes a key-value pair from the dictionary. @param key The key of the item to remove.
671 Removes all items from the dictionary and updates its state.
672 Removes an element from the array. @param o COSBase object to remove @return True if the element was removed.
673 Removes and returns the element at the specified index. @param i index of the element to remove @return The removed COSBase object
674 Removes all elements from the array, resetting its state.
675 Retrieves COS object offsets after triggering a brute-force search. Returns a map of COSObjectKey to Long (offset).
676 Processes a text position, suppressing duplicates based on overlap. Handles diacritic merging for accurate text rendering.
677 Processes a TextPosition, handling Unicode and suppression. Considers article division and diacritic merging.
678 Creates a COSStream from an InputStream, copying its contents. @param document The PDF document. @param rawInput Input stream to copy from. @return COSStream containing the copied data.
679 Creates a PDStream from an InputStream, applying filters. @param input Input stream for the stream data. @param filters COS filters to apply to the stream.
680 Creates a PDStream associated with a COSDocument. @param document The COSDocument the stream belongs to.
681 Creates a PDStream associated with the given document. @param document The PDF document to associate with the stream.
682 Creates a new PDObjectStream from a PDF document. @param document the PDF document to create the stream from @return A new PDObjectStream object.
683 Initializes the XRefStream with a new COSStream from the document. @param cosDocument The COSDocument to get the stream from.
684 Applies padding to a rectangle. @param box The rectangle to pad. @param padding The padding amount. @return A new PDRectangle with applied padding.
685 Applies differences to a rectangle. @param rectangle The rectangle to modify. @param differences Array of differences [x, y, width, height] @return Modified rectangle.
686 Adjusts a rectangle by given differences. @param rectangle The rectangle to adjust. @param differences Array of differences [x, y, width, height] @return New rectangle with adjusted dimensions.
687 Calculates a padded rectangle by adding padding to all sides. @param rectangle The original rectangle. @param padding The padding to apply to each side.
688 Calculates a rectangle representing the difference from a base rectangle. Returns a PDRectangle object.
689 Creates a PDRectangle based on bboxMinX, bboxMinY, bboxMaxX, bboxMaxY.
690 Encodes input stream to output stream using filter parameters.
691 Creates a PDRectangle with specified width and height at origin (0,0). @param width Rectangle width. @param height Rectangle height.
692 Parses a COSHexString from the source. Returns COSString or throws IOException on error.
693 Sets the COSInteger at the specified index. @param index The index of the element to set. @param intVal The integer value for the element.
694 Default constructor. Initializes bead separation to false.
695 Constructs a PDFMarkedContentExtractor with default encoding.
696 Initializes the engine with a page and adds graphics operators. @param page The PDF page to associate with this engine.
697 Writes a byte array as a string to an output stream. @param bytes The byte array to write. @param output The output stream to write to.
698 Writes a COSString to an OutputStream. @param string The COSString to write. @param output The OutputStream to write to.
699 Sets the marked content point. @param tag COSName representing the tag. @throws IOException If an I/O error occurs.
700 Begins a marked content sequence with a tag and MCID. @param tag Content tag. @param mcid Marked content ID.
701 Starts a marked content sequence with the given tag. @param tag The tag associated with the marked content.
702 Creates a default PDRectangle with zero coordinates and dimensions.
703 Parses a COS dictionary value, handling object numbers & generations. @return COSBase object or null if parsing fails. @throws IOException if an I/O error occurs.
704 Saves the FDF document to the specified file. @param fileName File to save the FDF data to. @throws IOException if an I/O error occurs.
705 Creates a content stream from a parent appearance stream. @param appearance The parent appearance stream.
706 Removes the element at the specified index. @param index index of the element to remove @return The removed element.
707 Clears the internal map and actuals collection.
708 Removes a key-value pair. Removes from both map and actuals. @param key The key to remove. @return The removed value, or null if not found.
709 Constructs a COSParser with a source stream. @param source The input stream for parsing.
710 Creates a content stream with document and appearance stream. @param doc The PDF document. @param appearance The appearance stream.
711 Removes the specified object from the list. @param o object to be removed @return true if object was found and removed, false otherwise
712 Creates a PDFParser with a key store and alias for decryption. @param source Input stream for PDF content. @param decryptionPassword Password for decryption. @param keyStore Key store for decryption. @param alias Alias for the key store.
713 Creates a PDFormContentStream associated with a form. @param form The PDF form to associate with this stream.
714 Sets line width if not equal to the default value of 1. @param lineWidth The desired line width. @throws IOException if an I/O error occurs.
715 Draws a paperclip shape onto the content stream. Draws a paperclip appearance for file attachments.
716 Draws a circle on the content stream using Bezier curves. @param cs content stream to draw on @param x x-coordinate of the circle's center @param y y-coordinate of the circle's center @param r radius of the circle
717 Draws a circle on the content stream at (x, y) with radius r.
718 Draws a diamond shape on the content stream. @param cs Content stream for drawing. @param x X-coordinate of the diamond's center. @param y Y-coordinate of the diamond's center. @param r Radius of the diamond.
719 Draws a shape with stroke, fill, or end path based on parameters.
720 Draws an arrow on the content stream at the specified coordinates. @param cs content stream to draw on @param x x-coordinate of the arrow base @param y y-coordinate of the arrow base @param len length of the arrow
721 Validates xref offsets, falling back to brute-force search if needed.
722 Constructs a PDPrintFieldAttributeObject, setting the owner.
723 Writes a COSString to the output stream, followed by a space. @param output The output stream to write to. @param cosString The COSString to write.
724 Encrypts/decrypts data based on configuration. @param objectNumber Object number for key derivation. @param genNumber Generation number for key derivation.
725 Recursively collects COSArray entries, tracking update needs. @param array The COSArray to process. @return True if parent needs update based on descendants.
726 Sets the origin document state, recursively updating child infos. @param originDocumentState State of the origin document.
727 Displays text on the PDF canvas. @param text The string to display.
728 Constructs a PageDrawer with provided parameters. @param parameters PageDrawerParameters object for initialization.
729 Sets the high value in the color table array. @param high The high value to set.
730 Default constructor. Sets the owner to OWNER_LIST.
731 Default constructor, sets the owner to OWNER_LAYOUT.
732 Creates a PDImageXObject from a stream, dimensions, and color space. @param document PDF document. @param encodedStream Image data stream.
733 Creates a PDStream from an InputStream with filters. @param input Input stream for stream data. @param filters COS filters to apply.
734 Creates a PDStream from an InputStream, using a COSName filter. @param input Input stream for stream data. @param filter COS filter to apply.
735 Creates a PDStream from an InputStream. @param doc PDF document. @param input Input stream for the stream data.
736 Initializes a PDXObject with a stream and subtype. @param document The PDF document. @param subtype The subtype of the XObject.
737 Constructs a PDEmbeddedFile associated with the given PDF document. @param document The PDF document this file is associated with.
738 Creates a PDMetadata object associated with the given document. @param document The PDF document to associate with metadata.
739 Returns the bounding rectangle for the cloudy border.
740 Creates an immutable rectangle with specified width and height. @param width Rectangle width. @param height Rectangle height.
741 Parses a COSString from the input source. Handles hex strings, escaped characters, and line breaks.
742 Sets the page number for the destination. @param pageNumber The target page number.
743 Default constructor. Sets the owner to OWNER_TABLE.
744 Constructs a PDImageXObject using a PDDocument. @param document The PDF document to use for the stream.
745 Checks user password based on encryption revision. @param password User password string. @return True if password is valid, false otherwise.
746 Saves the FDF document to the file specified by the name. @param fileName File name to save the FDF data to. @throws IOException if an I/O error occurs.
747 Writes the content of a page to the PDF document. This method handles text positioning, spacing estimation, line breaking, and paragraph formatting. It also manages font and size changes to accurately represent the text layout.
748 Parses the given text into an InstructionSequence. @param text CharSequence to parse. @return InstructionSequence object.
749 Checks if the owner password is valid based on encryption revision. @param ownerPassword Owner password bytes.
750 Finds a FontBoxFont by PostScript name, prioritizing PFB, TTF, OTF. @param postScriptName PostScript font name to search for. @return FontBoxFont or null if not found.
751 Creates an embedded file object. @param doc PDF document. @param input Input stream. @param filter COS filter.
752 Creates an embedded file from a document and input stream. @param doc PDF document. @param str Input stream for file data.
753 Displays text and adds the SHOW_TEXT operator. @param text The text string to display.
754 Creates a form XObject. @param document The PDF document.
755 Creates a PageDrawer with provided parameters and annotation filter. @param parameters PageDrawerParameters for initialization @return PageDrawer instance
756 Displays text and floats with positioning. @param textWithPositioningArray Array of text/float pairs. @throws IOException If an I/O error occurs.
757 Writes a PDF token to the output stream. @param base The token (COSBase) to write. @throws IOException if an error occurs during writing.
758 Creates a Metadata object for a PDF document and stream. @param doc PDF document. @param str Input stream for metadata data.
759 Creates a PDImageXObject from a byte array, dimensions, & color space. @param document PDF document. @param byteArray Image data. @return PDImageXObject.
760 Constructs an FDFParser with the given input source. @param source The input stream for parsing.
761 Creates a PDFParser with a source and optional decryption password. @param source Input stream for PDF content. @param decryptionPassword Password for decryption.
762 Draws a line style on the content stream. @param style Line style to draw. @param cs Content stream for drawing. @param x X-coordinate. @param y Y-coordinate. @param width Width of the line.
763 Writes content of defined regions to the output. Iterates through regions, retrieves character lists, and writes.
764 Checks if the provided owner password is valid. @param password Owner password string @return True if valid, false otherwise.
765 Constructs a PDExportFormatAttributeObject with the given owner. @param owner The owner string for this attribute object.
766 Initializes the provider with a font cache and scans/loads fonts. @param cache The font cache to use.
767 Decrypts a COSString using provided object and generation numbers. @param string The COSString to decrypt. @param objNum Object number for key derivation. @param genNum Generation number for key derivation.
768 Encrypts a COSString using provided object and generation numbers. @param string The COSString to encrypt. @param objNum Object number for key derivation. @param genNum Generation number for key derivation. @return Encrypted COSString.
769 Updates the document state based on a child object. @param child The child object to update.
770 Recursively collects COS objects, returning false if already collected.
771 Dereferences the COS object and returns the base object. Returns null if dereferencing fails.
772 Sets the document trailer and updates its origin document state. @param newTrailer The new COSDictionary to set as the trailer.
773 Encrypts a PDF stream. @param stream COSStream to encrypt. @param objNum Object number for encryption. @param genNum Generation number for encryption.
774 Decrypts a PDF stream. @param stream COSStream to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
775 Creates a PDTransparencyGroup, initializing with a PDF document. @param document The PDF document.
776 Finds the key associated with a given value. Returns null if no matching key is found.
777 Adds a COSBase object to the array at the specified index. @param i Index to insert the object. @param object The COSBase object to add.
778 Checks if the dictionary contains a value or dereferenced COS object. @param value The value to search for. @return True if found, false otherwise.
779 Creates a PDAppearanceStream, associating it with a PDF document. @param document The PDF document.
780 Updates child COSBase objects with origin document state. @param children Iterable of child COSBase objects to update
781 Sets a key-value pair in the dictionary. @param key The key of the item to set. @param value The value to associate with the key.
782 Sets the object at the given index. Wraps if not direct. @param index Index of the object to set. @param object The COSBase object to set.
783 Adds a COSBase object to the array, wrapping if needed. @param object The COSBase object to add.
784 Creates a PDImageXObject from a BufferedImage. @param document PDF document @param image BufferedImage to encode @param quality JPEG quality @param dpi Dots per inch
785 Creates a PDFParser with a source and empty decryption password. @param source Input stream for PDF content.
786 Collects COS objects and their updates recursively. @param object The COSObject to collect. @return False, always.
787 Returns a set of COS objects managed by this increment. Collects objects if not already initialized.
788 Prepares a COS object for writing. @param key COSObjectKey, identifies the object @param object COSBase object to prepare
789 Checks if the pool contains the given COSBase object.
790 Gets the key associated with a COSBase object. Returns the key or attempts to retrieve it via object.
791 Constructs a NormalXReference with offset, key, and object. @param byteOffset Offset of the referenced object. @param key Key of the referenced object. @param object The referenced COSBase object.
792 Checks if a COSBase object has a self-reference to its parent. Logs a warning if a self-reference is found.
793 Accepts a visitor to process the object or NULL. @param visitor The visitor object to call accept. @throws IOException if an I/O error occurs.
794 Closes the document, closing COSStreams and caches. Retains and rethrows the first encountered exception.
795 Retrieves linearized dictionary from xref table. Returns null if not found.
796 Retrieves a dictionary value by key, dereferencing COS objects. @param key the key to look up in the dictionary @return COSBase value or null if not found or is COSNull
797 Retrieves a COSBase object at the given index. Dereferences COSObjects and handles COSNull values.
798 Gets the length from a COSBase object. Returns null if null. Throws IOException if type is invalid or content is missing.
799 Finds the index of a COSBase object within the array. @param object COSBase object to search for @return Index of the object or -1 if not found.
800 Recursively collects dictionaries for PDF updates. Checks exclusion, updates origin, and processes children.
801 Removes an object from the array, handling dereferenced objects. @param o COSBase object to remove @return True if the object was removed.
802 Retrieves or creates a COSObjectKey for a given COSBase object. @param obj The COSBase object to get the key for.
803 Retrieves a string value from the dictionary by key. @param key the key to look up in the dictionary @return String value or null if not found.
804 Constructs a PDChoice object, initializing its field type to CH. @param acroForm The parent AcroForm object.
805 Sets the transformation matrix for the XObject. @param transform AffineTransform object representing the matrix.
806 Sets the default style string or removes it if null. @param defaultStyleString The default style string to set.
807 Creates a PDImageXObject from a byte array. @param document The PDF document. @param byteArray The byte array containing the image data. @return A PDImageXObject representing the image.
808 Converts the single array to a COSArray object. @return COSArray representation of the single array.
809 Sets the object at the given index, handling null objects. @param index Index to set the object at. @param object The COSObjectable object to set.
810 Sets the rich text value for the variable text field. @param richTextValue The rich text string to set, or null to clear.
811 Sets the coordinate system origin. @param coordSystemOrigin Array of floats representing the origin.
812 Constructs a new PDThread object. Initializes the thread dictionary and sets its type.
813 Constructs a PDButton associated with the given AcroForm. Sets the field type to "Btn" in the button's dictionary.
814 Sets the value of the field. @param object The new value to set for the field.
815 Sets the default value for the field. @param value The default value to set.
816 Initializes PDTristimulus with X, Y, Z values from array. @param array Array containing X, Y, Z tristimulus values.
817 Creates a PDDestination from a COSBase object. @param base COSBase representing the destination. @return PDDestination object or null if base is null. @throws IOException on conversion errors.
818 Converts a COSDictionary to a COSDictionaryMap. @param map The COSDictionary to convert. @return COSDictionaryMap or null if input is null.
819 Adds a COSBase object to the pool, managing keys and xref numbers. @param key The COSObjectKey for the object. @return The actual COSObjectKey used, or null if duplicate.
820 Constructs a PDSignatureField associated with an AcroForm. Initializes signature field properties and sets a partial name.
821 Gets the option string value from the COS object.
822 Converts color components to a COSArray. Includes pattern name if present. @return COSArray representation of the color.
823 Constructs a PDDeviceN object with an empty DeviceN color space.
824 Constructs a PDGamma object with initial gamma values of zero.
825 Constructs a PDTextField associated with an AcroForm. Sets the field type to text.
826 Retrieves the alternate color space. Creates if null. @return PDColorSpace object, or null if not found.
827 Constructs a PDIndexed object, initializing the color array.
828 Creates and returns the default range array for LAB colors. Returns a COSArray containing default range values.
829 Constructs a PDPattern object using provided resources. @param resources The PDResources object to use.
830 Constructs a PDSeparation object, initializing the color separation array.
831 Sets an integer value at the specified index in the array. @param index Index where the integer value is set. @param value The integer value to set.
832 Gets the name as a String from a COS object. @param key the key to look up in the dictionary @return String value or null if not found.
833 Initializes a PDTristimulus object with zero tristimulus values.
834 Gets the default appearance string from the option. Returns a string value from a COSString object.
835 Retrieves the value for a choice field. @param name COSName of the field, returns list of strings.
836 Decrypts each element in a COS array. @param array COSArray to decrypt. objNum, genNum for decryption context.
837 Sets the widget field flags to the given integer value. @param f The integer value representing the field flags.
838 Creates a PDImageXObject from a BufferedImage with default DPI. @param document PDF document @param image BufferedImage to encode @param quality JPEG quality
839 Adds the first intermediate curl segment to the shape. Uses getArcSegment to draw elliptical arc segments.
840 Generates an array of points forming a curl template. @param angleCur angle for curl calculation @param r radius for the curl @return Array of Point2D.Double objects representing the curl.
841 Sets the option value. @param opt The option string value to set.
842 Sets the color at the specified index. @param index Index of the color to set. @param colour The PDGamma object representing the color.
843 Sets the font size within the PDF document. @param size The font size to be set.
844 Sets the device N attributes. Removes if null, adds/sets otherwise. @param attributes The PDDeviceNAttributes to set.
845 Sets the alternate color space and updates the underlying array. @param cs The alternate color space to set.
846 Sets the red color component (R) of the color value. @param r The red color component (0.0 - 1.0)
847 Sets the green color component (G) of the color value. @param g The green color component to set.
848 Sets the blue (B) component of the color value. @param b The blue color component (0.0 - 1.0)
849 Sets the default appearance string for the option. @param da The default appearance string to set.
850 Sets the Y coordinate of the rectangle's upper-right corner. @param value The new Y coordinate value.
851 Sets the X coordinate of the upper-right corner. @param value The new X coordinate value.
852 Sets the Y coordinate of the rectangle's lower-left corner. @param value The new Y coordinate value.
853 Sets the transition direction. @param direction The direction of the transition.
854 Sets the transition duration. @param duration The duration of the transition in seconds.
855 Retrieves a dictionary value by key. @param key The key to look up in the dictionary. @return COSBase value or null if not found.
856 Sets the fly scale transition property. @param scale The scale factor for the fly transition.
857 Sets whether the fly area is opaque. @param opaque True to make the fly area opaque, false otherwise.
858 Sets the COSName object at the specified index. @param index Index of the object to set. @param name The name to set as a COSName.
859 Adds all elements from another COSArray to this array. Updates the array's state if elements are added. @param objectList COSArray containing elements to add
860 Sets the COSBase object at the given index to a COSString. @param index Index of the object to set. @param string String to encode, or null to clear.
861 Sets the minimum value of the range. @param min The minimum value to set.
862 Sets the maximum value of the range. @param max The maximum float value for the range.
863 Sets the x-coordinate of the rectangle's lower-left corner. @param value The new x-coordinate value.
864 Returns a string representation of the COSDictionary. Handles potential IOExceptions, returning an error message.
865 Gets a dictionary value by firstKey. If null, tries secondKey. @param firstKey The primary key to retrieve. @param secondKey Fallback key if firstKey is null. @return COSBase value or null if not found.
866 Initializes matrix from COSArray. @param array COSArray containing transformation values.
867 Checks if the object pool contains the given COSBase object.
868 Retrieves the permissions byte array from the document. @return byte array representing permissions or null if absent.
869 Gets the page number the annotation is associated with. @return Page number as Integer, or null if not specified.
870 Retrieves the COS value from the field dictionary. @return COSBase value or null if not found. @throws IOException if the value type is unknown.
871 Retrieves the field flags as an integer value. Returns null if the field flags are not set.
872 Returns the value of the SET field flag. @return Integer representing the SET flag value, or null.
873 Gets the clear field flags. @return Integer representing clear field flags, or null.
874 Retrieves the widget field flags from the field's dictionary. @return Integer representing flags, or null if not present.
875 Gets the user encryption key from the dictionary. Returns null if the key is not present.
876 Gets the set widget field flags from the field's dictionary. @return Integer representing flags, or null if not present.
877 Gets the default width of the CID font. Uses DW dictionary entry, defaults to 1000 if not found.
878 Retrieves the color space associated with this device. @return PDColorSpace object or null if not defined.
879 Gets the color space, creating it if necessary. @param resources PDResources object @return PDColorSpace instance or null
880 Creates an OptionalContentGroup from a COSDictionary. @param dict The COSDictionary representing the OCG. @throws IllegalArgumentException if the dictionary isn't an OCG.
881 Creates a new dictionary for optional content membership. @param dict The COSDictionary containing the membership data.
882 Gets the overprint mode from the dictionary. Returns null if not found or not a COSNumber.
883 Retrieves the soft mask from the dictionary. Returns null if no soft mask is present.
884 Gets the clear widget field flags. @return Integer representing the flags or null if not set.
885 Sets the highest imported object number in the document. @param importedPage The imported PDF page.
886 Gets the owner encryption key from the dictionary. Returns null if no key is found. Key is 32 bytes.
887 Checks if metadata encryption is enabled. Returns true by default if encryption status is missing.
888 Returns the zoom level as a float. Returns -1 if not a COSNumber.
889 Returns the page number. Returns -1 if the array is empty.
890 Retrieves the target page as a PDPage object. Returns null if the array is empty or page is invalid.
891 Gets the colorant name from the array. Returns the name as a String.
892 Retrieves a COSName value by key from the dictionary. @param key the key to look up @return COSName value or null if not found.
893 Retrieves a COSDictionary by key. @param key the key to retrieve the dictionary by @return COSDictionary object or null if not found.
894 Retrieves a COSStream object by key. @param key the key to look up in the dictionary @return COSStream object or null if not found.
895 Retrieves a COSArray value by key. @param key the key to look up in the dictionary @return COSArray object or null if not found.
896 Retrieves a COSName value by key, using defaultValue if not found. @param key the key to look up @param defaultValue default value if key is not present @return COSName value or defaultValue
897 Gets the long value associated with a key, or default if absent. @param key key to look up @param defaultValue default value if key is not found @return long value or default if not found
898 Gets a float value from the dictionary, using defaultValue if not found. @param key the key to look up @param defaultValue the default value to return if not found @return float value or defaultValue if not found
899 Returns an iterator over the page's content streams. Handles COSStream or COSArray as content.
900 Checks if the page content stream or array is empty. Returns true if content exists; otherwise, false.
901 Retrieves class names from the COS object. Returns a Revisions object containing the class names.
902 Retrieves the value associated with the key "K" from the dictionary. @return COSBase value or null if not found.
903 Returns the value of the property. Retrieves the value from the dictionary using the 'V' key.
904 Retrieves a float value associated with the given key. @param key the key to look up in the dictionary @return float value or null if not found.
905 Retrieves a date value as a Calendar object by key. @param key COSName representing the date key @return Calendar object or null if not a COSString.
906 Returns an iterator for the managed COS objects. Uses the internal object collection's iterator.
907 Grows the array to a specified size, filling with a default object. @param size target size of the array @param object default object to fill the array with
908 Retrieves the named destination associated with this target. @return PDNamedDestination object or null if not found.
909 Gets the signature contents as bytes. Returns empty array if contents is not a COSString.
910 Retrieves the XFA resource from the dictionary. @return PDXFAResource object or null if not found.
911 Gets an inheritable attribute value; searches parent fields. @param key Attribute key to retrieve. @return Attribute value or null if not found.
912 Initializes a new FDFOptionElement with an empty COS array.
913 Returns the value of the field. @return COSBase value or null if not found.
914 Gets the default value of the field. @return COSBase default value or null if not found
915 Initializes a PDFontSetting object with a default COSArray.
916 Closes the visual signature and PDF source, releasing resources.
917 Writes a COS object to the output stream with associated key. @param key COSObjectKey identifying the object @param obj COSBase object to write
918 Retrieves the key for a given COSBase object from the pool. @param object The COSBase object to retrieve the key for. @return The key associated with the object.
919 Gets the field's value as a string. @return Field value as string, or "" if null.
920 Constructs a PDRange with default values: 0.0 to 1.0.
921 Sets the array's elements to the given float array. @param value The float array to set as the array's elements.
922 Creates and returns a COSStream representing the XRef stream. Populates stream data, calculates widths, and sets direct flags.
923 Gets the transfer function. Returns null if it's not a COSArray of size 4.
924 Gets the TR2 value from the dictionary. Returns null if TR2 is not a COSArray of size 4.
925 Gets the backdrop color array for the soft mask. @return COSArray representing the backdrop color, or null.
926 Determines if content should open in a new window. Returns OpenMode.NEW_WINDOW if COSBoolean is true, otherwise USER_PREFERENCE.
927 Gets the 'T' item from the action dictionary. @return COSBase value or null if not found.
928 Determines if the action should open in a new window. Returns OpenMode.USER_PREFERENCE if not specified.
929 Determines if the action opens in a new window. Returns OpenMode.USER_PREFERENCE if not specified.
930 Adds a COSObjectable object to the array. @param object The object to add, unwrapping if needed.
931 Creates a list of COSWriterObjectStreams for compressing objects. @return List of COSWriterObjectStream instances.
932 Sets the widget field flags for the field. @param ff The field flags to set, or null to clear.
933 Sets the color transformation matrix. @param matrix The 3x3 matrix to set.
934 Sets the gamma color values in the dictionary. @param gamma The PDGamma object containing gamma values.
935 Gets a BlendMode from a COSBase object. @param cosBlendMode COSBase representing the blend mode @return BlendMode or NORMAL if not found
936 Sets the gamma value for the CALGRAY color space. @param value The gamma value to set.
937 Creates a COSDictionary representing page labels. Returns a dictionary containing page label key-value pairs.
938 Creates a new PDComplexFileSpecification with a FILESPEC type.
939 Constructs a `PDComplexFileSpecification` from a COSDictionary. @param dict The COSDictionary to use, or null for a new one.
940 Sets the range values for the function. @param rangeValues The array representing the range values.
941 Sets the domain values for the function. @param domainValues The array of domain values.
942 Sets the encode values for the function. @param encodeValues COSArray representing the encode values.
943 Sets the decode values for the function. @param decodeValues Array of COSBase objects representing decode values.
944 Removes an attribute object from the structure element. @param attributeObject The attribute object to remove.
945 Removes a class name from the element's class name array. @param className The class name to remove.
946 Appends a child node (COSBase) to the current node's kids. Handles single, multiple, or no existing child nodes.
947 Inserts a new node before a reference node. @param newKid The node to insert. @param refKid The reference node.
948 Removes a child node (kid) from the node's list of children. @param object The COSBase object to remove. @return True if the object was removed, false otherwise.
949 Sets the value of the 'K' key in the COSDictionary. @param k The value to associate with the 'K' key.
950 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern.
951 Clears the list, updating the parent dictionary if present.
952 Constructs a new, empty PDPageTree with an initialized root dictionary.
953 Sets the pattern's matrix based on the provided AffineTransform. @param transform The AffineTransform representing the matrix.
954 Sets the visibility policy for the optional content. @param visibilityPolicy The visibility policy to set.
955 Initializes the dictionary with the OCMD type.
956 Creates a new PDTransparencyGroupAttributes object. Initializes the dictionary with the transparency group key.
957 Updates parent entries and structure type in a COSDictionary array. @param kArray Array of COSDictionary entries to update.
958 Sets the rich text value for the field. @param rv The rich text value (COSString) to set.
959 Sets the cryptographic filter method. @param cfm The cryptographic filter method to set.
960 Sets document information and updates the trailer dictionary. @param info Document information object to set.
961 Initializes a PDDocumentCatalog with the given document. @param doc The PDF document associated with this catalog.
962 Sets the base color space for indexed color space. @param base The PDColorSpace object to set.
963 Sets the crop box for the page. Null value removes it. @param cropBox The rectangle defining the crop box.
964 Parses the next token from the input source. Returns a COS object or null if end of stream.
965 Sets the bounding box of the tiling pattern. @param bbox The rectangle defining the pattern's bounds.
966 Sets the character set for the font descriptor. @param charSet The character set string to set.
967 Sets the font stretch value. @param fontStretch The font stretch string, or null to clear.
968 Sets the interior color of the annotation. @param color The color to set, or null for default.
969 Sets the coordinates of the text markup annotation. @param coords Array of floats representing the coordinates.
970 Sets the ID of the FDF document. @param id The ID value to set as a COSArray.
971 Sets the differences stream in the FDF dictionary. @param diff The COSStream representing the differences.
972 Sets the field value, handling lists, strings, and COSObjects. @param value The value to set for the field. @throws IOException if the value type is unrecognized.
973 Sets the field's value. @param value The new value for the field.
974 Sets the field flags to the given integer value. @param ff The field flags as an integer.
975 Sets the field flags to the given integer value. @param ff The field flags to set, or null to clear.
976 Sets the clear field flags for the field. @param ff The clear field flags integer value.
977 Constructs a PDFont object, initializing its internal data.
978 Sets the "After" value in the dictionary as a COSString. @param after The string value to set for the "After" field.
979 Sets the 'Before' action to execute before form submission. @param before The JavaScript code to execute.
980 Sets the rich text content stream for the field. @param rv The COSStream representing the rich text content.
981 Sets the interior color of the polyline annotation. @param color The color to set; null for no color.
982 Sets the vertices of the polyline annotation. @param vertices Array of floats representing vertex coordinates.
983 Sets the interior color of the polygon annotation. @param color The color to set for the interior.
984 Sets the polygon vertices. @param vertices Array of floats representing vertex coordinates.
985 Sets the font family name. @param fontFamily The name of the font family.
986 Sets the filter for the PDF dictionary. @param filter The filter string to set.
987 Sets the font name in the dictionary. @param fontName The name of the font.
988 Sets the owner key for the PDF document. @param o The owner key as a byte array.
989 Sets the user key for PDF encryption. @param u The user key as a byte array.
990 Sets the owner encryption key for the PDF document. @param oe Owner encryption key as a byte array. @throws IOException if an I/O error occurs.
991 Sets the user encryption key for the PDF document. @param ue User encryption key as a byte array.
992 Sets the document recipients as an array of byte arrays. @param recipients Recipient data; each is a byte array.
993 Creates a new PDFontDescriptor with a font descriptor type.
994 Sets the stream filter name in the dictionary. @param streamFilterName The name of the stream filter.
995 Gets colorant names from the array. Returns a list of colorant names as strings.
996 Sets the font bounding box in the dictionary. @param rect The rectangle representing the font bounding box.
997 Sets the name of the string filter. @param stringFilterName The name of the string filter.
998 Removes V45 filters from the dictionary.
999 Creates a new FDFAnnotation with a COSDictionary and type.
1000 Sets the color of the annotation. @param c The color to set; null for no color.
1001 Sets the rich contents of the annotation. @param rc The rich contents string to set.
1002 Sets the interior color of the circle annotation. @param color The Color object representing the interior color.
1003 Sets the callout line coordinates for the annotation. @param callout Array of floats representing callout coordinates.
1004 Sets the line coordinates for the annotation. @param line Array of floats representing line coordinates.
1005 Returns the alternate color space, creating it if null. Uses array.getObject(ALTERNATE_CS) to initialize.
1006 Writes a reference to a COSBase object to the output stream. @param obj The COSBase object to write a reference for.
1007 Sets the interior color of the annotation. @param color The color to set, or null for default.
1008 Sets the permissions for the PDF document. @param perms The byte array representing permissions.
1009 Sets the background shading array and adds it to the dictionary. @param newBackground The new background shading array.
1010 Sets the clear widget field flags. @param ff The clear widget field flags integer value.
1011 Sets the color space for the shading. @param colorSpace The PDColorSpace to set, or null to remove.
1012 Converts the COSArray to a float array. Returns 0.0 for non-numeric COSBase objects.
1013 Converts COS numbers in the array to a List of Floats. Returns null for non-COSNumber elements.
1014 Converts COSNumber elements to a List of Integers. Returns null for non-COSNumber elements.
1015 Returns the minimum value of the range as a float.
1016 Returns the maximum value of the range as a float.
1017 Retrieves a PDGamma object at the specified index. @param index Index of the color to retrieve. @return PDGamma object or null if index is out of bounds.
1018 Retrieves display values for choice options. Uses getCOSObject and FieldUtils.getPairableItems.
1019 Retrieves the available options for the choice field. Uses getCOSObject and getPairableItems to fetch options.
1020 Creates a new PDSeedValueCertificate with a COSDictionary.
1021 Sets the timestamp for the seed value. @param timestamp The timestamp object to set.
1022 Sets the MPD (Manifest Properties Dictionary) to the dictionary. @param mdp The PDSeedValueMDP object to set.
1023 Sets the bounding box for the shading. @param newBBox The new bounding box rectangle.
1024 Sets the filter value in the dictionary. @param filter The filter to set.
1025 Creates a new PDSeedValue object. Initializes the dictionary with type SV and sets it as direct.
1026 Sets the dash style for the border. @param dashArray COSArray representing the dash pattern.
1027 Creates a new PDAppearanceDictionary with a required 'N' entry.
1028 Sets the quad points for the annotation. @param quadPoints Array of floats defining the quad points.
1029 Wraps page content in save/restore graphics state (q/Q). @param page The PDF page to wrap. @throws IOException if an error occurs during processing.
1030 Sets the encryption dictionary in the trailer. @param encDictionary The encryption dictionary to set.
1031 Constructs a PDAcroForm associated with a PDDocument. Initializes the form's dictionary and fields array.
1032 Sets the colorant name in the array. @param name The name of the colorant.
1033 Sets the text color of the outline item. @param textColor The PDF color to set.
1034 Sets the signature contents as a byte array, forcing hex form. @param bytes The byte array representing the signature contents.
1035 Sets the byte range for the signature. @param range int array containing the byte range values.
1036 Sets the subfilter for the signature dictionary. @param subfilter The subfilter COSName to set.
1037 Sets the filter for the signature dictionary. @param filter The filter COSName to set.
1038 Sets the signature type. @param type The type of the signature.
1039 Creates a new PDSignature object with default signature type.
1040 Sets the alternate color space and updates the array. @param colorSpace The PDColorSpace object to set.
1041 Sets the X tristimulus value. @param x The X value to set.
1042 Sets the Y tristimulus value. @param y The Y color component value.
1043 Sets the Z tristimulus value. @param z The Z value to set.
1044 Sets a key-value pair, handling null values. @param key The key of the item to set. @param value The value to associate with the key.
1045 Sets a boolean value associated with the given key. @param key The key for the boolean value. @param value The boolean value to set.
1046 Sets a boolean value in the dictionary. @param key The key for the boolean value.
1047 Sets a key-value pair in the dictionary. @param key The key of the item to set. @param value The value to associate with the key.
1048 Sets the name in the dictionary. @param key The key of the name. @param value The name string.
1049 Sets a string value associated with the given key in the dictionary. @param key The key for the string value. @param value The string value to set.
1050 Sets an integer value associated with the given key. @param key The key for the integer value. @param value The integer value to set.
1051 Sets a long value associated with a given key in the dictionary. @param key The key for the long value. @param value The long value to set.
1052 Sets a float value in the dictionary with the given key. @param key The key for the float value. @param value The float value to set.
1053 Creates a COSStream with given parameters and sets items. @param dictionary Dictionary for stream key and items. @param startPosition Stream start position. @param streamLength Stream length. @return COSStream object.
1054 Sets the document ID in the trailer dictionary. @param id The document ID as a COSArray.
1055 Sets the rectangular differences for the annotation. @param differenceLeft Left difference value. @param differenceTop Top difference value. @param differenceRight Right difference value. @param differenceBottom Bottom difference value.
1056 Sets the polyline vertices. @param points Array of floats representing vertex coordinates.
1057 Sets the relationship type. Valid types are 'P' or 'C'. @param relationship The relationship type to set. @throws IllegalArgumentException if invalid relationship type.
1058 Sets the value of action parameter 'B'. @param b The value to associate with parameter 'B'.
1059 Sets the 'D' action parameter. @param d The value to set for the 'D' parameter.
1060 Sets the form fields array in the action dictionary. @param array COSArray representing the form fields.
1061 Sets the sound content for the action. @param sound The COSStream representing the sound data.
1062 Sets the parent annotation. @param annot The parent PDAnnotationMarkup object.
1063 Sets the 'H' flag to indicate whether elements should be hidden. @param h The boolean value for the 'H' flag.
1064 Sets the 'T' item in the action dictionary. @param t The value to associate with the 'T' key.
1065 Constructs a new PDAnnotation with a COSDictionary and type.
1066 Sets the transfer function 2 (TR2) in the dictionary. @param transfer2 The transfer function 2 value.
1067 Sets a float value for a given key in the dictionary. @param key The key for the float value. @param value The float value to set, or null to remove.
1068 Sets the blend mode for graphics rendering. @param bm The blend mode to apply.
1069 Creates a new PDExtendedGraphicsState with an empty dictionary. Sets the type to EXT_G_STATE.
1070 Sets the decode values for shading. @param decodeValues COSArray containing decode values.
1071 Sets the shading coordinates. @param newCoords The new coordinates array.
1072 Sets the shading domain. @param newDomain The new domain array for the shading.
1073 Sets the extend value for the shading. @param newExtend The new extend array to set.
1074 Sets the shading domain. @param newDomain The new domain array.
1075 Sets the shading matrix from an AffineTransform. @param transform The AffineTransform representing the matrix.
1076 Sets the function array for the shading. @param newFunctions The new array of functions.
1077 Sets the transfer function for graphics rendering. @param transfer The transfer function COSBase object.
1078 Constructs a PDAnnotation from a COSDictionary. Sets annotation type to ANNOT if missing or incorrect.
1079 Sets the fields array in the action dictionary. @param array COSArray representing the fields to set.
1080 Sets the line coordinates. @param l array of floats representing line coordinates
1081 Sets rectangle differences for the annotation. @param differenceLeft Left difference value. @param differenceTop Top difference value. @param differenceRight Right difference value. @param differenceBottom Bottom difference value.
1082 Sets the ink list for the annotation. @param inkList 2D float array representing ink paths.
1083 Sets the rectangle property of the annotation. @param rectangle The PDRectangle object representing the rectangle.
1084 Sets rectangle margin differences and adds them to the COS object. @param differenceLeft Left margin difference. @param differenceTop Top margin difference. @param differenceRight Right margin difference. @param differenceBottom Bottom margin difference.
1085 Sets the callout rectangle for the annotation. @param callout float array representing the callout rectangle.
1086 Sets the quad points for the annotation link. @param quadPoints Array of floats defining the quad points.
1087 Sets the rich contents for the annotation. @param rc The rich contents string to set.
1088 Sets the annotation's border using a COSArray. @param borderArray The array defining the border properties.
1089 Sets the polygon's vertices. @param points Array of floats representing the vertices.
1090 Sets the interior color of the annotation. @param ic The PDColor object representing the color.
1091 Sets the distances to be stored in the COSDictionary. @param distances Array of PDNumberFormatDictionary objects.
1092 Sets the interior color of the polygon annotation. @param ic The PDColor object representing the new color.
1093 Sets the areas to be stored in the dictionary as a COSArray. @param areas Array of PDNumberFormatDictionary objects.
1094 Sets the interior color of the annotation. @param ic The PDColor object representing the color.
1095 Sets the polyline's interior color. @param ic The PDColor object representing the color.
1096 Sets the background color of the annotation. @param c The PDColor object representing the background color.
1097 Clones a COSBase object. Handles arrays and dictionaries. @param src Source COSBase to clone. @return Cloned COSBase object.
1098 Sets the angles measurement data to the dictionary. @param angles Array of PDNumberFormatDictionary objects.
1099 Sets the text color of the outline item. @param textColor The color to set, converted to COSArray.
1100 Sets the tint transform for color separation. @param tint The PDFunction representing the tint transform.
1101 Sets the tint transform for color conversions. @param tint The PDFunction representing the tint transform.
1102 Sets the color of the annotation using the provided PDColor object. @param c The PDColor object representing the color to set.
1103 Builds and sets the CID width array in the font dictionary. @param cidFont The CID font dictionary to update.
1104 Sets the line dash pattern in the graphics state dictionary. @param dashPattern The line dash pattern to set.
1105 Sets the font setting to the given font. @param font The PDFont object to set.
1106 Sets the change Xs array in the dictionary. @param changeXs Array of PDNumberFormatDictionary objects.
1107 Creates a PDImageXObject from an input stream. @param document The PDF document. @param stream Input stream containing image data. @return A PDImageXObject representing the image.
1108 Retrieves the text color as a PDColor object. Creates if null.
1109 Grows the array to the specified size, filling with null objects. @param size target size of the array
1110 Retrieves the BRange COSArray. Uses default if null. @return PDRange object representing the BRange.
1111 Sets the guideline color in the COSDictionary. @param color The PDF color to set, or null for default.
1112 Sets the change Y values to the dictionary as a COSArray. @param changeYs Array of PDNumberFormatDictionary objects.
1113 Sets the line slopes to the COSDictionary as a COSArray. @param lineSloaps Array of PDNumberFormatDictionary objects.
1114 Constructs a PDPattern with given resources and color space. @param resources Resource object for the pattern. @param colorSpace Color space used by the pattern.
1115 Returns a PDRange for the specified component. @param n The component index. @return A PDRange object.
1116 Constructs a PDICCBased object, initializing its array and stream. @param doc The PDF document to associate with the stream.
1117 Retrieves color or four-color object from dictionary. @param name Attribute name. Returns null if not found.
1118 Retrieves the color range for this PDLab. Returns a PDRange object; uses default if RANGE is null.
1119 Sets the border color of the annotation. @param c The PDColor object representing the border color.
1120 Adds an output intent to the document's output intent array. @param outputIntent The PDOutputIntent object to add.
1121 Sets the PDF page for this destination. @param page The PDF page to set.
1122 Retrieves the signature date as a Calendar object. Uses the 'M' key from the dictionary.
1123 Writes a PDF operator to the output stream. @param op The operator to write. @throws IOException if an I/O error occurs.
1124 Sets the horizontal offset of the caption. @param offset The offset value for the caption.
1125 Sets the vertical offset for the caption. @param offset The offset value in PDF coordinates.
1126 Sets the operating system string in the dictionary. If null, removes the OS entry; otherwise, updates the array.
1127 Gets the whitepoint value as a PDTristimulus object. Returns (1, 1, 1) if whitepoint is not defined.
1128 Retrieves the black point as a PDTristimulus object. Creates a default black point if one doesn't exist.
1129 Adds a subject to the certificate's subject array. @param subject The subject as a byte array.
1130 Adds a key usage extension to the certificate dictionary. @param keyUsageExtension The key usage extension string.
1131 Adds the issuer to the certificate dictionary as a COSString. @param issuer The issuer byte array to add.
1132 Adds an OID (Object Identifier) to the certificate dictionary. @param oid The OID as a byte array.
1133 Sets the range for a component in the PDF color space. @param range PDRange object containing min/max values. @param n Component index.
1134 Retrieves the creation date of the annotation. Returns a Calendar object or null if not found.
1135 Performs initial parsing of the PDF document. Retrieves root object, handles missing type, and decrypts.
1136 Retrieves the annotation's creation date. @return Calendar object representing creation date or null.
1137 Retrieves the document's modification date. @return Calendar object representing the modification date.
1138 Sets the vertical offset of the line annotation's caption. @param offset The vertical offset value.
1139 Sets the horizontal offset of the line annotation's caption. @param offset The horizontal offset value.
1140 Sets the crypt filter dictionary for a PDF document. @param cryptFilterName Filter name. @param cryptFilterDictionary Crypt filter dictionary.
1141 Retrieves the guideline color. Defaults to black if not defined. @return PDColor representing the guideline color.
1142 Sets the property value and notifies listeners of changes. @param value The new value for the property.
1143 Retrieves the gamma array, creating a default if none exists. Returns a PDGamma object representing the gamma values.
1144 Retrieves colorants from the dictionary. @param resources PDResources object @return Map of colorant names to PDSeparation objects
1145 Adds a user property to the PDUserAttributeObject. @param userProperty The user property to add.
1146 Retrieves the page's additional actions. Creates if they don't exist. @return PDPageAdditionalActions object.
1147 Initializes with a PDF catalog, retrieving or creating the names dictionary. @param cat The PDF document catalog.
1148 Retrieves additional actions from the document catalog. Creates a new dictionary if none exists. @return PDDocumentCatalogAdditionalActions object
1149 Retrieves a list of PDF threads. Creates if none exist. @return List of PDThread objects.
1150 Gets the document information. Creates if it doesn't exist. Returns PDDocumentInformation object.
1151 Retrieves a date value as a Calendar object by key. @param key String representing the date key @return Calendar object or null if not a COSString.
1152 Gets a date value, using defaultValue if null. @param key COSName representing the date key @param defaultValue Default Calendar object if date is null @return Calendar object or defaultValue if date is null
1153 Retrieves the PDF creation date as a Calendar object. Returns null if the creation date is not available.
1154 Extracts child dictionaries from a PDF node. @param node The COSDictionary node to process. @return List of COSDictionary objects representing children.
1155 Sets the upper limit in the LIMITS array. @param upper The upper limit value, or null to clear.
1156 Sets the name of the signature. @param name The name to set for the signature.
1157 Sets the line's start point ending style. @param style The style string, or null for LE_NONE.
1158 Sets the mapping name for the field. @param mappingName The name to associate with the field.
1159 Sets the alternate field name for the field. @param alternateFieldName The alternate field name to set.
1160 Sets the field's partial name. Throws exception if name contains ".". @param name The field's partial name.
1161 Sets the default value for the choice field. @param value The default value to set.
1162 Sets the default appearance value for the form field. @param daValue The string value representing the default appearance.
1163 Sets the title of the outline item. @param title The title to set for the outline item.
1164 Sets the contact information in the signature dictionary. @param contactInfo The contact information string.
1165 Sets the reason for the signature. @param reason The reason string to set.
1166 Sets the location of the signature. @param location The location string to set.
1167 Sets the URL value in the dictionary. @param url The URL to be set.
1168 Sets the URL associated with the certificate. @param url The URL to set.
1169 Sets the date property in the dictionary. @param date The date string to set.
1170 Sets the alternate caption for the annotation. @param caption The alternate caption string to set.
1171 Sets the value of the field. @param value The new string value for the field.
1172 Sets the rollover caption for the annotation. @param caption The string to use as the rollover caption.
1173 Sets the state model for the annotation. @param stateModel The state model string to set.
1174 Sets the annotation state. @param state The state string to set.
1175 Sets the subject of the annotation. @param subj The subject string to set.
1176 Sets the title popup string. @param t The title popup string to set.
1177 Sets the default style string for the annotation. @param defaultStyleString The string representing the default style.
1178 Sets the default appearance value for the annotation. @param daValue The default appearance string value.
1179 Sets the annotation name. @param nm The new annotation name.
1180 Sets the modification date of the annotation. @param m The modification date string.
1181 Sets the annotation content. @param value The content string to set.
1182 Sets the execution parameter value. @param param The value of the execution parameter.
1183 Sets the operation type. @param op The operation to be performed.
1184 Sets the directory for the launch parameters. @param dir The directory path to set.
1185 Sets the filename for the launch parameters. @param file The name of the file to be launched.
1186 Sets the normal caption for the annotation. @param caption The caption string to set.
1187 Sets the field's value. @param value The new value for the text field.
1188 Sets the default value for the text field. @param value The default string value to set.
1189 Sets the default appearance value for the text field. @param daValue The default appearance string to set.
1190 Sets the font flags and stores them in the dictionary. @param flags The flags value to set.
1191 Sets the clear widget field flags to the given value. @param ff The flag value to set for clearing the widget.
1192 Sets the widget field flags for the field. @param ff The widget field flags to set.
1193 Sets the widget field flags for the field. @param f The widget field flags to set.
1194 Sets the clear field flags for the field. @param ff The clear field flags to set.
1195 Sets the field flags for the FDF field. @param ff The field flags to set.
1196 Sets the field flags to the specified value. @param ff The field flags to set.
1197 Sets the rotation angle of the annotation. @param rotation Rotation angle in degrees.
1198 Sets the justification of the annotation. @param justification Justification string ("left", "centered", "right")
1199 Sets the page number the annotation belongs to. @param page The page number (starting from 0)
1200 Sets the permissions for the PDF document. @param permissions Integer representing the permission flags.
1201 Sets the revision number of the PDF dictionary. @param revision The revision number to set.
1202 Sets the length of the encrypted content. @param length The length of the encrypted content.
1203 Sets the PDF version number. @param version The PDF version to set.
1204 Sets the length of the cryptographic filter dictionary. @param length The length value to set.
1205 Sets the next key for the parent tree. @param parentTreeNextkey The next key value.
1206 Sets the revision number for the PDF structure element. @param revisionNumber The revision number to set. Must be >= 0.
1207 Sets the Marker Context Identifier (MCID) for this reference. @param mcid The MCID to set.
1208 Sets the bits per sample for the PDF function. @param bps The number of bits per sample.
1209 Sets the starting page number. @param start The starting page number (must be positive).
1210 Constructs a PDPageTree from a COSDictionary, handling edge cases. @param root The root COSDictionary of the page tree. @param document The parent PDDocument.
1211 Sets the page rotation angle. @param rotation Rotation angle in degrees (0, 90, 180, 270)
1212 Sets the structParents value for the page. @param structParents Integer value representing struct parents.
1213 Sets an integer value within an embedded dictionary. @param embeddedDictionary Key to the embedded dictionary. @param key The key for the integer value. @param value The integer value to set.
1214 Sets an integer value for the given key. @param key The key for the integer value. @param value The integer value to set.
1215 Sets the scale ratio for rectilinear measurements. @param scaleRatio The scale ratio value as a string.
1216 Sets the name of the annotation. @param name The name to associate with the annotation.
1217 Sets glyph widths in the font dictionary. Uses font encoding to map glyphs and calculate widths.
1218 Sets the filename associated with the target directory. @param filename The filename to set.
1219 Sets the 'P' parameter for the action, using the provided string value.
1220 Sets the file name associated with the specification. @param file The name of the file.
1221 Sets the Unicode file name. @param file The Unicode file name to set.
1222 Sets the prefix for page labels. Removes if prefix is null.
1223 Sets the producer string in the PDF document's info dictionary. @param producer The producer string to set.
1224 Sets the creator of the PDF document. @param creator The creator string to set.
1225 Sets the keywords for the PDF document. @param keywords Keywords string to set.
1226 Sets the PDF document's subject. @param subject The subject string to set.
1227 Sets the author of the PDF document. @param author The author's name to set.
1228 Sets the title of the PDF document. @param title The title to set.
1229 Sets the document language. @param language The language code (e.g., "en-US").
1230 Sets a string value for a key within an embedded dictionary. @param embedded The embedded object. @param key The key for the string value. @param value The string value to set.
1231 Sets a string value for the given key in the dictionary. @param key The key for the string value. @param value The string value to set.
1232 Sets the date value associated with the given key. @param key The key for the date value. @param date Calendar object representing the date.
1233 Sets the file description. @param description The description string to set.
1234 Sets the transition motion. @param motion The transition motion object.
1235 Sets the transition dimension. @param dimension The transition dimension object.
1236 Constructs a PDTransition with the specified transition style. @param style The transition style to apply.
1237 Sets the name of the viewport. @param name The new name for the viewport.
1238 Creates a new PDNumberFormatDictionary with default type.
1239 Sets the subtype of the measurement dictionary. @param subtype The subtype string to set.
1240 Creates a new PDMeasureDictionary with a COSDictionary. Sets the dictionary's type to TYPE.
1241 Sets the element identifier. @param id The identifier string to set.
1242 Sets the title of the element. @param title The title string to set.
1243 Sets the language associated with this element. @param language The language code to set.
1244 Sets the 'O' parameter for the action, specifying the file to open. @param o The file path or application to launch.
1245 Sets the 'D' action parameter to the specified string value. @param d The string value for the 'D' action parameter.
1246 Sets the 'F' value of the action to the provided string. @param f The string value for the 'F' parameter.
1247 Sets the JavaScript action string for the interactive element. @param sAction The JavaScript action string to set.
1248 Constructs a `PDOptionalContentProperties` object, initializing its dictionary and default properties.
1249 Sets the name of the optional content group. @param name The new name for the optional content group.
1250 Sets the name of the named page reference. @param name The name to associate with the reference.
1251 Sets the partial field name. @param partial The partial field name to set.
1252 Sets the target field value in the FDF dictionary. @param target The target string value to set.
1253 Sets the status of the FDF document. @param status The status string to set.
1254 Sets the state model for the annotation. @param stateModel The state model string to set.
1255 Sets the annotation's state to the given string value. @param state The string representing the annotation's state.
1256 Sets the style for the line annotation's caption. @param captionStyle The style string to set.
1257 Sets the default style for the annotation. @param style The default style string to set.
1258 Sets the default appearance string for the annotation. @param appearance The default appearance string to set.
1259 Sets the symbol for the annotation. @param symbol The symbol to set; "paragraph" sets it to "P".
1260 Sets the annotation subject. @param subject The subject string to set.
1261 Sets the title of the annotation. @param title The title string to set.
1262 Sets the annotation contents. @param contents The string content of the annotation.
1263 Sets the annotation name. @param name The name of the annotation.
1264 Sets the date value for the annotation. @param date The date string to set.
1265 Sets the actual text value for the element. @param actualText The text to associate with the element.
1266 Sets the expanded form string value. @param expandedForm The expanded form string to set.
1267 Sets the alternate description for the element. @param alternateDescription The alternate description string.
1268 Sets the URI associated with the action. @param uri The URI to set.
1269 Initializes the outline from a COSDictionary. @param dic The COSDictionary containing outline data.
1270 Default constructor for FDFAnnotationTextMarkup.
1271 Constructs a new FDFAnnotationText. Sets the annotation subtype to SUBTYPE.
1272 Initializes the stamp annotation with the subtype.
1273 Constructs a new FDFAnnotationSquare. Sets the subtype name to SUBTYPE in the annotation dictionary.
1274 Default constructor. Initializes the subtype name.
1275 Constructs a new FDFAnnotationPolyline. Sets the subtype of the annotation to SUBTYPE.
1276 Constructs a new FDFAnnotationPolygon. Sets the subtype name to SUBTYPE in the annotation dictionary.
1277 Initializes the FDFAnnotationLink with a subtype.
1278 Initializes a new FDFAnnotationLine with subtype. Sets the subtype name for the annotation.
1279 Creates a new FDFAnnotationInk with subtype set to SUBTYPE.
1280 Initializes the free text annotation, setting its subtype.
1281 Constructs a new FDFAnnotationCircle. Initializes subtype name in the annotation dictionary.
1282 Constructs a new FDFAnnotationCaret, initializing the subtype.
1283 Removes a child node (COSBase) from the node. @param objectable The COSObjectable object to remove. @return True if removed, false otherwise.
1284 Inserts a COSObjectable before a reference node. @param newKid The node to insert. @param refKid The reference node.
1285 Appends a COSBase object to the current node's kids. Handles null input and uses appendKid to add the object.
1286 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing the file specification @return PDFileSpecification or null if base is null @throws IOException if the base object is of an unknown type
1287 Gets the document catalog. Creates one if it doesn't exist.
1288 Constructs a PDDocument using a memory-only stream cache.
1289 Retrieves the width of the character. Parses operators and returns width, or throws IOException.
1290 Retrieves the glyph bounding box from the font stream. Parses stream tokens to extract x, y, width, and height.
1291 Parses PDF stream tokens and returns them as a list. Returns null if end of stream is reached.
1292 Clones and merges COS objects from base to target. Returns if base is null or equal to target.
1293 Creates a new FDFAnnotationFileAttachment. Sets the subtype of the annotation.
1294 Builds vertical font metrics and sets them in the CID font dictionary.
1295 Default constructor. Initializes a PDSimpleFont object.
1296 Draws a basic ellipse border using calculated parameters. @param left Left coordinate of the ellipse. @param bottom Bottom coordinate of the ellipse. @param right Right coordinate of the ellipse. @param top Top coordinate of the ellipse.
1297 Adds a corner curl shape using elliptical arcs. @param anglePrev Previous angle. @param angleCur Current angle.
1298 Creates a PDImageXObject from a BufferedImage with default DPI. @param document PDF document @param image BufferedImage to encode @return PDImageXObject representing the image
1299 Retrieves the annotation border as a COSArray. Creates a new one if needed.
1300 Constructs a PDListBox object, initializing its parent. @param acroForm The parent AcroForm object.
1301 Constructs a PDComboBox, initializing it with the provided AcroForm. @param acroForm The parent AcroForm object.
1302 Constructs a PDCheckBox associated with the given AcroForm.
1303 Sets rectangular differences for the annotation. @param difference Value applied to all difference sides.
1304 Sets rectangle differences for the annotation. @param difference Value for left, top, right, and bottom differences.
1305 Sets rectangle margin differences equally. @param difference Margin difference applied to all sides.
1306 Constructs a PDAnnotationWidget from a COSDictionary. Sets the subtype to SUB_TYPE.
1307 Constructs a PDAnnotationUnknown from a COSDictionary.
1308 Constructs a PDAnnotationPopup from a COSDictionary. @param field The COSDictionary containing popup data.
1309 Constructs a PDAnnotationMarkup from a COSDictionary.
1310 Constructs a PDAnnotationLink from a COSDictionary. @param field The COSDictionary containing link data.
1311 Constructs a PDAnnotationWidget with the subtype set to SUB_TYPE.
1312 Constructs a PDAnnotationPopup with a subtype name. Sets the annotation subtype to SUB_TYPE.
1313 Default constructor for PDAnnotationMarkup.
1314 Constructs a PDAnnotationLink with subtype set to SUB_TYPE.
1315 Sets the non-stroking alpha constant. @param alpha The alpha value to set, or null to remove.
1316 Sets the stroking alpha constant. @param alpha The alpha value for stroking, or null to remove.
1317 Sets the smoothness tolerance value in the graphics state. @param smoothness The smoothness tolerance value.
1318 Sets the flatness tolerance value. @param flatness The flatness tolerance value to set.
1319 Sets the miter limit value. @param miterLimit The miter limit value to set.
1320 Sets the line width for graphics rendering. @param width The line width value, or null to remove.
1321 Parses a COS stream from the dictionary. @param dic The COSDictionary containing stream data. @return A COSStream object. @throws IOException if an I/O error occurs.
1322 Sets the CYX value in the COSDictionary. @param cyx The CYX value to set.
1323 Sets the border width. If an integer, sets as int; otherwise, as float.
1324 Sets the top index of the list box. Null removes the value. @param topIndex The index of the first visible item.
1325 Sets the field flags to the specified value. @param flags The field flags to set.
1326 Sets the 'Q' value in the form dictionary. @param q The integer value to set for the 'Q' flag.
1327 Sets the number of open child nodes. @param openCount The number of open child outline nodes.
1328 Sets the timestamp required flag in the dictionary. @param flag True if timestamp is required, false otherwise.
1329 Sets the 'P' value in the dictionary. @param p The value to set; must be between 0 and 3.
1330 Sets the rotation angle for the annotation. @param rotation The rotation angle in degrees.
1331 Sets the Q value for the annotation. @param q The Q value to set.
1332 Sets the parent structure element for this annotation. @param structParent Integer representing the parent structure.
1333 Sets the annotation flags. @param flags The flags to set for the annotation.
1334 Sets the annotation index in the dictionary. If negative, removes the annotation index.
1335 Sets the page number for the target directory. @param pageNumber The page number; removes if negative.
1336 Sets the submission flags for the action. @param flags Integer representing the submission flags.
1337 Sets the maximum length for the text field. @param maxLen The maximum number of characters allowed.
1338 Sets the reset form flags. @param flags The integer value representing the flags.
1339 Sets the line join style. @param style The line join style value.
1340 Sets the line cap style. @param style The line cap style to set.
1341 Sets the bits per coordinate and stores the value. @param bitsPerCoordinate Number of bits representing a coordinate.
1342 Sets the bits per color component. @param bitsPerComponent Number of bits per color component.
1343 Sets the number of vertices per row in the shading. @param verticesPerRow Number of vertices per row.
1344 Sets the bits per flag value. @param bitsPerFlag The number of bits per flag.
1345 Sets the shading type in the dictionary. @param shadingType The shading type to set.
1346 Sets the tiling type. @param tilingType The integer representing the tiling type.
1347 Sets the paint type for the tiling pattern. @param paintType The integer representing the paint type.
1348 Sets the pattern type in the pattern dictionary. @param patternType The integer representing the pattern type.
1349 Sets the paint type for the pattern. @param paintType The integer value representing the paint type.
1350 Sets the overprint mode. Null value removes the property. @param overprintMode The overprint mode value.
1351 Sets the Q attribute value. @param q The Q attribute value to set.
1352 Sets a long value for a given key in the dictionary. @param key The key for the long value. @param value The long value to set.
1353 Writes the PDF document trailer data to the output stream. Handles incremental updates and sorts cross-reference entries.
1354 Sets the constant opacity of the annotation. @param ca The constant opacity value (0.0 to 1.0).
1355 Sets the leader line offset length. @param leaderLineOffsetLength The offset length value.
1356 Sets the length of the leader line extension. @param leaderLineExtensionLength Length of the extension.
1357 Sets the length of the leader line. @param leaderLineLength Length of the leader line.
1358 Sets the volume of the action. @param volume Volume level between -1.0 and 1.0.
1359 Sets the Y step value for the tiling pattern. @param yStep The vertical step size for the pattern.
1360 Sets the x-step value for the tiling pattern. @param xStep The x-step value to set.
1361 Sets the missing width for the font. @param missingWidth The missing width value to set.
1362 Sets the maximum width for the font in the dictionary. @param maxWidth The maximum width value to set.
1363 Sets the average character width for the font. @param averageWidth The average width of a character.
1364 Sets the stem height for the font descriptor. @param stemH The stem height value to set.
1365 Sets the vertical stem width in the font dictionary. @param stemV The vertical stem width value.
1366 Sets the x-height of the font and stores it in the dictionary. @param xHeight The x-height value to set.
1367 Sets the cap height of the font and stores it in the dictionary. @param capHeight The cap height value to set.
1368 Sets the leading value in the dictionary. @param leading The leading value to set.
1369 Sets the descent value in the dictionary. @param descent The descent value for the font.
1370 Sets the ascent value in the dictionary. @param ascent The ascent value to set.
1371 Sets the italic angle for the font. @param angle The italic angle in degrees.
1372 Sets the font weight in the dictionary. @param fontWeight The weight of the font.
1373 Sets the leader offset for the line annotation. @param leaderOffset Offset value for the leader line.
1374 Sets the leader extend value for the annotation. @param leaderExtend The extend value for the leader line.
1375 Sets the leader length of the annotation. @param leaderLength The length of the leader line.
1376 Sets the opacity of the annotation. @param opacity The opacity value to set (0.0-1.0).
1377 Sets the width of the guideline. @param width The width of the guideline (in points).
1378 Sets the user unit value for the page. @param userUnit The user unit value (must be positive).
1379 Sets a float value in the dictionary. @param key The key for the float value. @param value The float value to set.
1380 Sets the minimum revision number for the digital signature. @param revision The minimum revision number to set.
1381 Sets the revision number for the digital signature. @param revision The revision number to set.
1382 Sets the 'V' value (minimum required capability) in the dictionary. @param minimumRequiredCapability The value to set for 'V'.
1383 Initializes a new PDDocumentOutline object. Sets the document type to "Outlines".
1384 Sets the URL type in the dictionary. @param urlType The URL type string to set.
1385 Sets the name property in the dictionary. @param name The name to set.
1386 Sets the file specification for the interactive action. @param fs The file specification object.
1387 Sets the destination for the GoTo action. @param d The destination object to set.
1388 Sets the target directory for the embedded action. @param targetDirectory The directory to navigate to.
1389 Sets the file specification for the embedded action. @param fs The file specification object.
1390 Sets the destination for the embedded GoTo action. @param d The destination object to set.
1391 Sets the font setting in the graphics state dictionary. @param fs The PDFontSetting object to set.
1392 Sets the shading function. @param newFunction The new PDFunction to set.
1393 Sets the resources for the tiling pattern. @param resources The resources object to associate.
1394 Sets the shading resources. @param shadingResources The shading resources to set.
1395 Sets the extended graphics state. @param extendedGraphicsState The extended graphics state to set.
1396 Sets the black point value in the dictionary. @param blackpoint The black point tristimulus value.
1397 Sets the white point for the color space. @param whitepoint Whitepoint tristimulus value. @throws IllegalArgumentException if whitepoint is null.
1398 Sets the file specification for the launch action. @param fs The file specification object.
1399 Sets the CID set for the font descriptor. @param stream The CID set as a PDStream object.
1400 Sets the font file 2 stream. @param ttfStream The PDF stream for the font file 2.
1401 Sets the font file for the descriptor. @param type1Stream The PDStream representing the font file.
1402 Sets the template reference for the FDF page. @param tRef The FDFNamedPageReference to set.
1403 Sets the page information. @param info The FDFPageInfo object to set.
1404 Sets the file specification for the named page reference. @param fs The file specification object to set.
1405 Sets the fractional space allocated to the icon. @param space The PDRange object representing the space.
1406 Sets the additional actions for the field. @param aa The PDAdditionalActions object to set.
1407 Sets the action associated with the field. @param a The action to set for the field.
1408 Sets the icon fit property of the field. @param fit The FDFIconFit object to set.
1409 Sets the appearance stream reference for the field. @param ref The FDFNamedPageReference to set.
1410 Sets the appearance dictionary for the field. @param ap The appearance dictionary to set.
1411 Sets the FDF catalog in the document's trailer dictionary. @param cat The FDF catalog to associate with the document.
1412 Sets the font file 3 data. @param stream The PDStream object containing font data.
1413 Sets Windows launch parameters for the action. @param win The Windows launch parameters to set.
1414 Sets the file specification for the action. @param fs The file specification to associate with the action.
1415 Sets the file specification for the action. @param fs The file specification to associate with the action.
1416 Sets the file specification for the attachment. @param file The file specification object.
1417 Sets the page this annotation is associated with. @param page The page object to associate.
1418 Sets the optional content property list for the annotation. @param oc The PDPropertyList representing optional content.
1419 Sets the appearance dictionary for the annotation. @param appearance The appearance dictionary to set.
1420 Sets the named destination for the target directory. @param dest The named destination object to set, or null to remove.
1421 Sets the target directory for the PDF navigation. @param targetDirectory The target directory object.
1422 Sets the 'C' action for the PDF page. @param c The action to set for the 'C' key.
1423 Sets the open action for the page. @param o The action to execute when the page is opened.
1424 Sets the 'C' action for the form field. @param c The action to associate with the 'C' key.
1425 Sets the 'V' action for the form field. @param v The action to associate with the 'V' key.
1426 Sets the 'F' action for the form field. @param f The action to associate with the 'F' key.
1427 Sets the 'K' action for the form field. @param k The action to associate with the 'K' key.
1428 Sets the document's "DP" action. @param dp The document action to set.
1429 Sets the WP action. @param wp The action to set for the WP event.
1430 Sets the document submission action. @param ds The document submission action to set.
1431 Sets the document's "WS" action. @param ws The action to set for the "WS" event.
1432 Sets the document's Will Close action. @param wc The action to be executed when the document closes.
1433 Sets the PI action for the annotation. @param pi The action to set for the PI event.
1434 Sets the PV action. @param pv The action to set for PV.
1435 Sets the PC action. @param pc The action to set for the PC event.
1436 Sets the PO action. @param po The PO action to set.
1437 Sets the 'BL' action for the annotation. @param bl The action to associate with the 'BL' key.
1438 Sets the 'FO' action for the annotation. @param fo The action to associate with the 'FO' key.
1439 Sets the 'U' action for the annotation. @param u The action to associate with the 'U' key.
1440 Sets the 'D' action for the annotation. @param d The action to be set.
1441 Sets the action to be performed when the annotation is clicked. @param x The action to set for the 'X' key.
1442 Sets the action to be performed when the annotation is executed. @param e The action to set.
1443 Sets the 'F' action to the provided action. @param action The action to set for the 'F' key.
1444 Sets the file specification for the action. @param fs The file specification to associate with the action.
1445 Sets the JavaScript object for the FDF document. @param js The JavaScript object to associate with the document.
1446 Sets the border effect for the annotation. @param be The PDBorderEffectDictionary to set.
1447 Sets the file specification for the FDF document. @param fs The file specification to associate with the FDF.
1448 Sets the FDF dictionary associated with the catalog. @param fdf The FDF dictionary to set.
1449 Sets the URI dictionary for the document. @param uri The URI dictionary to set.
1450 Sets the Mark Info object in the document's root dictionary. @param markInfo The MarkInfo object to set.
1451 Sets the document names dictionary. @param names The document names dictionary to set.
1452 Sets the additional actions for the document catalog. @param actions The additional actions object to set.
1453 Sets the open action for the PDF document. @param action The destination or action to execute.
1454 Sets the document metadata. @param meta The metadata object to set.
1455 Sets the document outline. @param outlines The document outline object.
1456 Sets the viewer preferences for the PDF document. @param prefs The viewer preferences object to set.
1457 Sets the AcroForm for the PDF document. @param acroForm The AcroForm object to set.
1458 Sets a key-value pair, using the provided string key. @param key The key to set. @param value The value to associate with the key.
1459 Decrypts a COSBase object (string, stream, dict, array). @param obj Object to decrypt. @param objNum, genNum for decryption.
1460 Sets the end color (at index 3) to the provided PDGamma object. @param colour The PDGamma object representing the end color.
1461 Sets the start color (at index 2) to the given PDGamma object. @param colour The PDGamma object representing the start color.
1462 Sets the root of the document's structure tree. @param treeRoot The structure tree root object.
1463 Sets the color at index 1 (after colour) to the provided PDGamma object. @param colour The PDGamma object representing the color.
1464 Creates a new rectangle with the same width and height. Returns the newly created PDRectangle object.
1465 Sets the lower limit string in the LIMITS array. Creates array if it doesn't exist.
1466 Sets the upper limit value in the node's LIMITS array. @param upper The upper limit value to set.
1467 Sets the endpoint style for the polyline annotation. @param style The style string, or null for LE_NONE.
1468 Sets the start point ending style. @param style The style string, or null for LE_NONE.
1469 Sets the end point line ending style. @param style The style string, or null for default.
1470 Sets the line's start point ending style. @param style The style string, or null for LE_NONE.
1471 Sets the endpoint ending style of the polyline annotation. @param style The style string, or null for LE_NONE.
1472 Sets the start point ending style. @param style The style string, or null for LE_NONE.
1473 Sets the end point ending style of the line annotation. @param style The style string, or null for no style.
1474 Sets the color at index 0 to the provided PDGamma object. @param colour The PDGamma object representing the color.
1475 Sets the page labels for the PDF document. @param labels The `PDPageLabels` object to set.
1476 Sets the destination tree for named destinations. @param dests The destination tree to set.
1477 Sets the embedded files name tree node in the name dictionary. @param ef The embedded files name tree node.
1478 Sets the fringe rectangle of the annotation. @param fringe The rectangle defining the fringe.
1479 Sets the fringe rectangle for the annotation. @param fringe The rectangle defining the fringe.
1480 Sets the fringe rectangle for the annotation. @param fringe The rectangle representing the fringe.
1481 Sets the fringe rectangle of the annotation. @param fringe The rectangle defining the fringe.
1482 Sets the border effect for the annotation. @param be The PDBorderEffectDictionary to set.
1483 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary to set.
1484 Sets the rectangle defining the annotation's bounds. @param rectangle The PDRectangle object representing the rectangle.
1485 Sets the parent tree node. @param parentTree The parent tree node to set.
1486 Sets the page associated with this element. @param page The PDPage object to associate.
1487 Sets the parent node for this structure element. @param structureNode The parent PDStructureNode.
1488 Sets the page associated with this object reference. @param page The PDPage object to associate.
1489 Sets the referenced object for this PDObjectReference. @param xobject The PDXObject to be set as the referenced object.
1490 Sets the referenced object to the provided annotation. @param annotation The annotation to set as the referenced object.
1491 Sets the page associated with this marked content reference. @param page The PDPage object to associate.
1492 Adds a resource to the specified dictionary. @param kind Resource kind (e.g., Fonts, Images) @param name Resource name @param object The resource object to add
1493 Sets the page transition and duration. @param transition The transition object. @param duration Transition duration in seconds.
1494 Sets the transition object for the page. @param transition The transition object to set.
1495 Sets the page's additional actions. @param actions The PDPageAdditionalActions object to set.
1496 Sets the page metadata. @param meta The metadata object to set.
1497 Sets the page content stream. @param contents The PDStream object representing the page content.
1498 Sets the art box (art rectangle) of the page. @param artBox The art box rectangle, or null to remove it.
1499 Sets the trim box rectangle for the page. @param trimBox The trim box rectangle, or null to remove it.
1500 Sets the bleed box for the page. Null value removes the bleed box. @param bleedBox The rectangle defining the bleed box, or null.
1501 Sets the media box rectangle for the page. @param mediaBox The media box rectangle, or null to remove.
1502 Sets the page resources. @param resources The PDResources object to set, or null to remove.
1503 Creates a new PDPage with the specified media box. @param mediaBox The rectangle defining the page's dimensions.
1504 Sets the JavaScript action for the document. @param js The JavaScript action node.
1505 Sets the signature for the FDF catalog. @param sig The signature object to associate with the catalog.
1506 Sets the rectangle difference for the annotation. @param rd The rectangle difference object.
1507 Sets the action associated with the annotation. @param action The action to be performed when the link is activated.
1508 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object.
1509 Sets the style for the page label. Null value removes the style.
1510 Sets the trapped status of the PDF document. @param value "True", "False", or "Unknown" value.
1511 Sets the PDF version number. @param version The version string to set.
1512 Sets the page layout for the document. @param layout The page layout to set.
1513 Sets the page display mode for the document. @param mode The desired PageMode enum value.
1514 Sets the name in the dictionary using a PDF name. @param key The key of the name. @param value The name string.
1515 Sets an array of numbers to the dictionary under the given name. @param name Array key @param values Array of float values
1516 Sets an array of COSNames for a given name in the dictionary. @param name Name of the array to set. @param values Array of values to be added to the array.
1517 Sets an array of strings to the dictionary under the given name. @param name The name of the array. @param values The array of strings to set.
1518 Sets whether to display the document title. @param value True to display, false otherwise.
1519 Sets whether the PDF window should be centered. @param value `true` to center, `false` otherwise.
1520 Sets whether the PDF document should fit the window. @param value `true` to fit, `false` otherwise.
1521 Sets whether the window UI is hidden. @param value True to hide the UI, false otherwise.
1522 Creates a PDTypedDictionaryWrapper with the given type name. @param type The type name to associate with the dictionary.
1523 Sets whether the menu bar is hidden. @param value True to hide, false to show.
1524 Sets whether form fields require appearance updates. @param value Boolean indicating whether appearances are needed.
1525 Sets the trusted mode flag in the dictionary. @param trustedMode The trusted mode value (true/false).
1526 Sets the 'nonEmbedFontNoWarn' flag to the specified value. @param noEmbedFontWarning Flag to suppress no-embed font warning.
1527 Sets the pre-release flag in the dictionary. @param preRelease True if pre-release, false otherwise.
1528 Sets the 'Open' flag to the specified boolean value. @param open The boolean value for the 'Open' flag.
1529 Sets the caption flag to the specified boolean value. @param cap The new caption flag.
1530 Sets the mix setting for the action to the specified value. @param mix The mix setting (true/false)
1531 Sets the repeat flag for the action. @param repeat True to repeat the action, false otherwise.
1532 Sets the synchronous flag for the action. @param synchronous True to play synchronously, false otherwise.
1533 Sets whether the action opens in a new window based on OpenMode. @param value The OpenMode enum value.
1534 Sets whether the launched content opens in a new window. @param value OpenMode enum: USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW
1535 Sets whether the action opens in a new window based on OpenMode. @param value The desired OpenMode (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1536 Sets the text knockout flag to the specified value. @param tk The text knockout flag (true/false)
1537 Sets whether the toolbar should be hidden. @param value `true` to hide, `false` to show.
1538 Sets the owner of the attribute. @param owner The owner string to set.
1539 Constructs a new PDMarkedContentReference with default type.
1540 Constructs a new PDObjectReference with a default type.
1541 Sets the subtype of the external data dictionary. @param subtype The subtype string to set.
1542 Creates a new PDExternalDataDictionary with type "ExData".
1543 Sets the border style. @param s The border style string.
1544 Sets the highlighting mode. Valid values: 'N', 'I', 'O', 'P', 'T'. @param highlightingMode The highlighting mode string.
1545 Sets the annotation name. @param name The new name for the annotation.
1546 Sets the name of the rubber stamp annotation. @param name The new name for the annotation.
1547 Sets the intent of the annotation. @param it The intent string to set.
1548 Sets the reply type for the annotation. @param rt The reply type string.
1549 Sets the highlight mode for the annotation. @param mode The highlight mode string.
1550 Sets the caption positioning string. @param captionPositioning The positioning string.
1551 Sets the line ending style for the annotation. @param style The line ending style string.
1552 Sets the attachment name. @param name The new attachment name.
1553 Sets the appearance state of the annotation. @param as The appearance state string.
1554 Sets the annotation subtype. @param subType The subtype string to set.
1555 Sets the action subtype. @param s The subtype string to set.
1556 Sets the action type. @param type The type of the action.
1557 Initializes a new PDAbstractPattern with a type name. Creates a COSDictionary and sets its type to Pattern.
1558 Sets the icon scaling type. @param scale The scaling type string (e.g., "fit").
1559 Sets the scaling option for the icon. @param option The scaling option string.
1560 Sets the encoding of the FDF document. @param encoding The encoding string to set.
1561 Sets the FDF version. @param version The FDF version string.
1562 Sets the icon name for the annotation. @param icon The icon string to set.
1563 Sets the line ending style of the annotation. @param style The line ending style string.
1564 Sets the annotation intent. @param intent The intent string to set.
1565 Sets the subfilter for the dictionary. @param subfilter The subfilter string to set.
1566 Sets the guideline style in the dictionary. @param style The style string to set.
1567 Creates a new PDStructureNode with the specified type. @param type The type of the structure node.
1568 Sets the structure type of the element. @param structureType The structure type string.
1569 Sets the alpha source flag (AIS) in the dictionary. @param alpha boolean value for the alpha source flag
1570 Sets the automatic stroke adjustment flag. @param sa boolean value for automatic stroke adjustment
1571 Sets the non-stroking overprint control to the given value. @param op The boolean value for non-stroking overprint control.
1572 Sets the stroking overprint control to the specified value. @param op The overprint control flag (true/false)
1573 Sets the action to be performed on this outline item. @param action The action to associate with the item.
1574 Sets the destination for this outline item. @param dest The destination object to set.
1575 Sets the next sibling outline node. @param outlineNode The next sibling node.
1576 Sets the previous sibling of this outline node. @param outlineNode The previous sibling node.
1577 Sets the property build object to the dictionary. @param propBuild The property build object to set.
1578 Sets the certificate associated with the seed value. @param certificate The certificate object to set.
1579 Sets the application data dictionary for the PDPropBuild. @param app The PDPropBuildDataDict to set as the application data.
1580 Sets the publication security data dictionary. @param pubSec The PDPropBuildDataDict object to set.
1581 Sets the filter for the PDPropBuildDataDict. @param filter The filter to set.
1582 Sets the down appearance stream for the annotation. @param ap The PDAppearanceStream representing the down appearance.
1583 Sets the down appearance of the annotation. @param entry The PDAppearanceEntry object for the down state.
1584 Sets the rollover appearance of the annotation. @param ap The PDAppearanceStream object for rollover.
1585 Sets the rollover appearance of the annotation. @param entry The PDAppearanceEntry object for rollover.
1586 Sets the normal appearance of the annotation. @param ap The PDAppearanceStream representing the normal appearance.
1587 Sets the normal appearance of the annotation. @param entry The PDAppearanceEntry object for normal state.
1588 Sets the parent terminal field. @param field The parent field; throws exception if same dictionary.
1589 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary object for the border.
1590 Sets the actions associated with the annotation. @param actions The actions to set, can be null.
1591 Sets the action to be performed when the annotation is activated. @param action The action to set, can be null.
1592 Sets the appearance characteristics dictionary for the annotation. @param appearanceCharacteristics The appearance characteristics.
1593 Sets the rectangle difference for the annotation. @param rd The rectangle difference to set.
1594 Sets the border effect of the annotation. @param be The PDBorderEffectDictionary to set.
1595 Sets the border effect for the polygon annotation. @param be The PDBorderEffectDictionary to set.
1596 Sets the border style of the annotation. @param bs The PDBorderStyleDictionary representing the border style.
1597 Sets the external data dictionary for the annotation. @param externalData The external data dictionary to set.
1598 Sets the annotation this markup is a reply to. @param irt The annotation this markup replies to.
1599 Sets the annotation popup. @param popup The popup object to associate with annotation.
1600 Sets the URI for a previous action. @param pa The URI action to associate with the link.
1601 Sets the destination of the annotation link. @param dest The destination object to set.
1602 Sets the structure element for this outline item. @param structureElement The structure element to set.
1603 Sets the lower limit for the node. @param lower The lower limit value (Integer) or null.
1604 Sets the last child outline node. @param outlineNode The last child node to set.
1605 Sets the anti-aliasing flag in the dictionary. @param antiAlias boolean value for anti-aliasing
1606 Sets the rename flag in the template dictionary. @param value True to enable renaming, false otherwise.
1607 Sets the scale-to-fit flag for the annotation. @param value True to scale icon to fit annotation.
1608 Sets whether the annotation has a caption. @param cap True if the annotation should have a caption.
1609 Sets whether to encrypt metadata. @param encryptMetaData True to encrypt metadata.
1610 Sets the volatile status of the file. @param fileIsVolatile Boolean indicating volatility.
1611 Sets the "FD" boolean value in the underlying COSDictionary. @param fd The boolean value to set for "FD".
1612 Sets the 'Open' state of the annotation popup. @param open `true` to open, `false` to close.
1613 Sets whether to track mouse position for this action. @param value True to track mouse position, false otherwise.
1614 Sets the "Suspects" flag to false in the COSDictionary.
1615 Sets the UserProperties value in the COSDictionary. @param userProps The boolean value for UserProperties.
1616 Sets the "Marked" flag in the COSDictionary to the given value. @param value The boolean value for the "Marked" flag.
1617 Sets the rectangle associated with the bead. @param rect The rectangle object to set.
1618 Sets the page associated with this bead. @param page The PDPage to associate with the bead.
1619 Sets the previous bead in the thread. @param previous The previous PDThreadBead object.
1620 Sets the next bead in the thread sequence. @param next The next PDThreadBead object.
1621 Sets the thread associated with this bead. @param thread The PDThread object to associate.
1622 Sets the thread information. @param info The document information to associate with the thread.
1623 Sets the measure attribute for the viewport. @param measure The PDMeasureDictionary to set.
1624 Sets the bounding box for the viewport. @param rectangle The PDRectangle representing the bounding box.
1625 Sets the additional actions for the form field. @param actions The additional actions to set.
1626 Sets the seed value for the signature field. @param sv The seed value to set; null to unset.
1627 Sets the default value for the signature field. @param value The default value to set.
1628 Sets the signature value. @param value The signature value to set.
1629 Sets the XFA resource for the form. @param xfa The XFA resource to set.
1630 Sets the default resources for the form. @param dr The default resources object to set.
1631 Sets the first child outline node. @param outlineNode The first child node to set.
1632 Checks if a dictionary is a catalog. Checks if the dictionary has type CATALOG or contains FDF.
1633 Returns the rollover icon as a PDFormXObject, or null. Uses COSName.RI to retrieve the icon stream.
1634 Retrieves the stroking alpha constant from the dictionary.
1635 Gets the smoothness tolerance value from the dictionary.
1636 Gets the flatness tolerance value from the graphics state.
1637 Retrieves the miter limit value from the dictionary. @return Miter limit value as Float or null if not found.
1638 Gets the line width from the dictionary. @return Line width as a Float or null if not found.
1639 Creates a PDPropertyList or subtype based on the dictionary type. @param dict The COSDictionary to create the property list from.
1640 Gets the color space. Delegates to getColorSpace(PDResources).
1641 Extracts text from defined regions on a PDF page. @param page The PDF page to extract text from.
1642 Gets the fly scale value. Returns 1 if not found.
1643 Gets the transition duration in seconds. Defaults to 1 if not present.
1644 Retrieves the border width. Returns 0 if COSName, otherwise defaultValue.
1645 Gets the constant opacity of the annotation. Returns 1 if the value is not found in the dictionary.
1646 Gets the leader line offset length from the COS object. Returns 0 if the value is not found.
1647 Gets the leader line extension length from the COS object. Returns 0 if the value is not found.
1648 Returns the font descent value. @return Font descent value, 0 if not found.
1649 Gets the leading value from the dictionary, defaults to 0.
1650 Returns the cap height of the font. Uses absolute value if negative.
1651 Returns the x-height of the font. Handles potential negative values.
1652 Gets the vertical stem width from the dictionary. @return StemV value or 0 if not found.
1653 Gets the stem height from the dictionary. Returns 0 if the value is not found.
1654 Gets the non-stroking alpha constant from the dictionary.
1655 Gets the average font width. @return Average width or 0 if not found.
1656 Gets the missing width from the dictionary. @return float value or 0 if not found.
1657 Gets the gamma value from the dictionary, defaults to 1.0f.
1658 Returns the x-step value from the COS object, defaulting to 0.
1659 Gets the Y step value from the COS object, defaulting to 0.
1660 Gets the volume of the action. Returns 1 if out of range.
1661 Gets the leader line length from the COS object. Returns 0 if the property is not found.
1662 Gets the maximum width of the font. @return Maximum width or 0 if not found.
1663 Returns the ascent value from the dictionary, 0 if not found.
1664 Writes a COSBase object to the output stream. @param obj The COSBase object to write.
1665 Creates a PDAttributeObject based on the owner name in the dictionary. @param dictionary The COSDictionary containing attribute data.
1666 Gets the font type. @return Font type string or null if not found.
1667 Gets the base font name from the font dictionary. @return Base font name or null if not found.
1668 Returns the scale type, defaulting to proportional if null.
1669 Gets the scale option from the fit object. Returns SCALE_OPTION_ALWAYS if not found.
1670 Returns the document encoding, defaulting to "PDFDocEncoding".
1671 Gets the FDF version from the catalog. @return String representing the FDF version, or null.
1672 Gets the line ending style from the annotation's dictionary.
1673 Gets the annotation's intent. @return String representing the intent, or null if not set.
1674 Creates an FDFAnnotation based on the subtype in a COSDictionary. @param fdfDic The COSDictionary representing the annotation. @return An FDFAnnotation or null if the type is unsupported.
1675 Gets the subfilter name from the dictionary. @return Subfilter name as String, or null if not found.
1676 Gets the filter name from the dictionary. @return Filter name as String, or null if not found.
1677 Gets the subtype of the marked content artifact. Uses `getProperties().getNameAsString(COSName.SUBTYPE)`
1678 Returns the type of the artifact. @return String representing the artifact's type.
1679 Gets the language of the marked content. Returns null if properties are not set.
1680 Gets the property name as a String. Uses COSName.N to retrieve the name.
1681 Gets name as string, using default if not found. @param key The key to look up. @param defaultValue Value if key is not present.
1682 Checks if a XRef stream exists at the given offset. @param startXRefOffset Offset to check for a XRef stream. @return True if a XRef stream exists, false otherwise.
1683 Gets the page mode from the document catalog. Returns PageMode.USE_NONE if mode is null or invalid.
1684 Gets the PageLayout from the document catalog. Returns PageLayout.SINGLE_PAGE if invalid or empty.
1685 Gets the PDF version number. @return String representing the PDF version, or null.
1686 Gets the trapped status of the PDF document. @return String value or null if not found.
1687 Gets the name as a String from the dictionary. @param key the key to look up in the dictionary @return String value or null if not found
1688 Returns a list of values associated with the choice field options.
1689 Returns the type name of the COSDictionary. Uses COSName.TYPE to retrieve the type.
1690 Gets the owner of the attribute. @return String representation of the owner, or null.
1691 Returns the structure type as a String, using COSName.S.
1692 Creates a PDStructureNode based on the provided COSDictionary. @param node The COSDictionary representing the structure node. @return A PDStructureNode (PDStructureTreeRoot or PDStructureElement).
1693 Returns the type of this structure node. @return String representing the node's type.
1694 Gets the style name from the root dictionary. @return Style name or null if not found.
1695 Gets the italic angle from the dictionary, defaults to 0.
1696 Retrieves the font weight from the dictionary. Returns 0 if the weight is not specified.
1697 Gets the opacity of the annotation. Uses 1f as default if not found in the dictionary.
1698 Retrieves the quad points as a float array. Returns null if no quad points are defined.
1699 Gets the horizontal offset of the caption. Returns 0.f if the offset is not defined.
1700 Gets the end point style from the line's appearance. @return String representing the style, or LE_NONE if not found.
1701 Gets the ending style of the line annotation. Returns LE_NONE if the array is null or too short.
1702 Retrieves the line coordinates as a float array. Returns null if the line array is not found.
1703 Retrieves the ink list as a 2D float array. Returns an empty array if no ink list is found.
1704 Retrieves the callout coordinates as a float array. Returns null if no callout is defined.
1705 Calculates rectangle differences from RD array. @return float array representing rectangle differences.
1706 Calculates rectangle margin differences from COS array. Returns an empty array if margin is null.
1707 Retrieves the fields array from the action. @return COSArray object containing field definitions.
1708 Retrieves the fields array from the action. @return COSArray representing the fields or null.
1709 Retrieves the font setting. @return PDFontSetting object or null if no font setting exists.
1710 Retrieves the decode array; fetches it if null. @return COSArray containing decode values, or null.
1711 Returns the shading coordinates. Lazily initializes if null.
1712 Retrieves the shading domain COSArray. Lazily initializes if null.
1713 Gets the extend array from the COS object. Lazily initializes if null. @return COSArray representing the extend values.
1714 Returns the domain array for the Type 1 shading. Lazily initializes if not already present.
1715 Retrieves a list of FDF pages from the FDF document. Returns null if no pages are found.
1716 Retrieves child FDFFields from the field's COSArray. @return List of child FDFFields or null if no kids exist.
1717 Retrieves field options from COSArray; returns null if empty.
1718 Retrieves a list of FDF templates from the page. Returns null if no templates are found.
1719 Retrieves a list of FDF fields from the template's FIELDS array. @return List of FDFField objects or null if FIELDS array is missing.
1720 Retrieves the polygon vertices as a float array. Returns null if no vertices are defined.
1721 Retrieves the font widths as a list of floats. Uses cached value if available, otherwise fetches from dict.
1722 Gets the color transformation matrix. @return float array representing the matrix, or default if null.
1723 Retrieves component names from the color space dictionary. @return List of component names or an empty list if not found.
1724 Retrieves the background shading array. Lazily initializes if null.
1725 Retrieves the polygon's path as a 2D float array. @return Path array or null if no path is defined.
1726 Gets the start point ending style from the line ending array. Returns LE_NONE if the array is null or too short.
1727 Gets the endpoint ending style from the LE array. Returns LE_NONE if array is null or too short.
1728 Retrieves an array of PDNumberFormatDictionary objects for angles. Returns null if no angles are defined in the dictionary.
1729 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return PDNumberFormatDictionary[] or null if COSArray is null.
1730 Retrieves the coordinate system origin as a float array. Returns null if the origin is not found in the dictionary.
1731 Retrieves the visibility policy name from the dictionary. Returns ANY_ON if the policy is not defined.
1732 Gets the long value associated with a key, or -1 if absent. @param key key to look up @return long value or -1 if not found
1733 Gets the long value associated with a key, or -1 if absent. @param key key to look up @return long value or -1 if not found
1734 Retrieves an array of PDNumberFormatDictionary objects representing areas. Returns null if no areas are defined.
1735 Gets the long value associated with a key, or defaultValue. @param key key to look up @param defaultValue default value if key is not found
1736 Sets the startxref position and resolves xref trailer data. @param startxrefBytePosValue StartXref byte position.
1737 Gets a float value by key. Returns -1 if not found. @param key the key to look up @return float value or -1 if not found
1738 Gets a float value from the dictionary. @param key the key to look up @return float value or -1 if not found
1739 Gets a float value from the dictionary, using defaultValue if not found. @param key the key to look up @param defaultValue the default value to return if not found
1740 Gets the user unit value from the page, defaulting to 1.0f.
1741 Returns the guideline width from the dictionary. Defaults to 1 if not found.
1742 Gets the font subtype from the dictionary. @return Subtype string or null if not found.
1743 Retrieves an array of PDNumberFormatDictionary objects for distances. @return Array of dictionaries or null if no distances are defined.
1744 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return PDNumberFormatDictionary[] or null if COSArray X is missing.
1745 Retrieves the vertices of the polyline as a float array. Returns null if no vertices are defined.
1746 Retrieves rectangle differences from the annotation. Returns an empty array if no differences exist.
1747 Retrieves the quad points as a float array. Returns null if no quad points are defined.
1748 Gets the subfilter list from the dictionary. Returns an empty list if no subfilter is present.
1749 Retrieves the digest method names from the dictionary. Returns an empty list if no digest method is found.
1750 Retrieves the reasons associated with the seed value. @return List of reasons as strings, or an empty list if null.
1751 Retrieves an array of PDNumberFormatDictionary objects from Y array. Returns null if Y array is not present.
1752 Retrieves legal attestations as a list of strings. Returns an empty list if no attestations are found.
1753 Retrieves the key usage OIDs from the certificate dictionary. @return List of key usage strings or null if not present.
1754 Retrieves the issuer byte arrays from the dictionary. @return List of byte arrays representing the issuer or null.
1755 Retrieves the OID values as byte arrays from the dictionary. @return List of byte arrays representing the OID values, or null.
1756 Retrieves the byte range array from the signature dictionary. Returns an empty array if no byte range is found.
1757 Retrieves form fields in calculation order. Returns an empty list if no calculation order is defined.
1758 Gets the indices of selected options. Returns empty list if no options are selected.
1759 Retrieves the subject byte arrays from the certificate dictionary. @return List of byte arrays or null if the subject is absent.
1760 Retrieves the font name from the font dictionary. @return Font name as String, or null if not found.
1761 Gets the font stretch value. @return Font stretch value or null if not present.
1762 Gets the base font name from the font dictionary. @return Base font name as String, or null if not found.
1763 Retrieves the operating system name from the dictionary. Returns name from COSArray or directly from dictionary.
1764 Retrieves the date property from the dictionary. @return Date string or null if not found.
1765 Retrieves the alternate caption from the appearance dictionary. @return String alternate caption or null if not found.
1766 Retrieves the rollover caption from the underlying dictionary. Returns null if the caption is not found.
1767 Retrieves the normal caption from the underlying dictionary.
1768 Gets the state model from the annotation's dictionary. @return String representing the state model, or null.
1769 Retrieves the annotation's state from the COS object. @return String representing the state, or null if not found.
1770 Retrieves the annotation subject. @return Annotation subject string or null if not found.
1771 Returns the title of the popup. Retrieves the title from the COS object.
1772 Retrieves the default style string from the COS object.
1773 Gets the default appearance string from the COS object.
1774 Retrieves the annotation name from the COSDictionary. @return Annotation name string or null if not found.
1775 Gets the modification date of the annotation. @return String representing the modification date, or null.
1776 Retrieves the annotation contents from the dictionary. @return String containing the annotation contents, or null.
1777 Retrieves the execute parameter from the dictionary. @return String value or null if not found.
1778 Retrieves the directory path from the parameters. @return Directory path string, or null if not found.
1779 Retrieves the filename from the parameters dictionary. @return Filename string or null if not found.
1780 Removes a user property from the COS array. @param userProperty The property to remove.
1781 Retrieves the name of the optional content group. @return The name of the OCG, or null if not set.
1782 Retrieves Subject DN as list of maps. @return List of maps or null if not present.
1783 Retrieves the names of optional content groups. @return String array of group names, empty if no groups exist.
1784 Retrieves the "D" parameter value from the action dictionary.
1785 Retrieves the 'O' parameter from the action dictionary. @return String value of 'O' or null if not found.
1786 Retrieves the value associated with the "P" key in the action dictionary.
1787 Retrieves the URI string from the action dictionary. Returns null if no URI is found or decoding fails.
1788 Retrieves the filename associated with this target directory. @return Filename string or null if not present.
1789 Retrieves the annotation name from the dictionary. @return Annotation name or null if not found.
1790 Retrieves the 'F' parameter from the action dictionary. @return String value of 'F' or null if not found.
1791 Retrieves the URL associated with the certificate. @return URL string or null if not present.
1792 Retrieves the URL from the dictionary. @return String URL or null if not found.
1793 Retrieves the signature name from the dictionary. @return Signature name or null if not found.
1794 Gets number or name value, returns default if not found. @param name Attribute name. @param defaultValue Default value if not found.
1795 Gets number or array of numbers. Returns default if not found.
1796 Retrieves color value by name. @param name The name of the color. @return PDGamma object or null if not found.
1797 Creates a unique key for a resource dictionary. @param kind Resource kind (e.g., Font, Image). @param prefix Prefix for the key. @return A unique COSName representing the key.
1798 Gets name or array of names, or default if not found. @param name Name to retrieve. @param defaultValue Value if name/array not found.
1799 Returns sub-dictionary appearance streams. Throws exception if not a sub-dictionary.
1800 Retrieves a PDDestination by name. @param name The name of the destination. @return PDDestination object or null if not found.
1801 Retrieves the destination object for this action. Uses COSName.D to get the destination from the COS object.
1802 Gets the destination object. @return PDDestination object representing the destination. @throws IOException if an error occurs during creation.
1803 Retrieves the destination object for this annotation link. Uses COSName.DEST to find the destination within the COS object.
1804 Retrieves the destination object for this outline item. @return PDDestination object or null if destination is missing.
1805 Creates a PDXObject based on the provided COSBase and resources. @param base The COSBase object representing the XObject. @param resources The PDResources object for resource management.
1806 Removes the specified subject from the certificate's subject array. @param subject The subject to remove as a byte array.
1807 Extracts an array of strings from a COSArray. @param name Name of the COSArray to extract from. @return String array or null if not a COSArray.
1808 Gets attribute value, returning default if not found. @param attrName Attribute name. @param defaultValue Value if attribute is missing.
1809 Gets the signature location from the dictionary. @return Signature location string or null if not found.
1810 Retrieves the signature reason from the dictionary. @return The signature reason string or null if not present.
1811 Retrieves the contact information from the signature dictionary. @return Contact information string or null if not present.
1812 Retrieves the title of the outline item. @return The title string, or null if not present.
1813 Retrieves the partial name of the field from the dictionary.
1814 Gets the alternate field name from the dictionary. @return Alternate field name or null if not found.
1815 Checks if an attribute is specified in the dictionary. @param name Attribute name to check. @return True if attribute is specified, false otherwise.
1816 Retrieves the mapping name from the dictionary. @return String representing the mapping name, or null.
1817 Gets the scale ratio from the COSDictionary. @return Scale ratio as a string, or null if not found.
1818 Retrieves the role map from the COSDictionary. Returns an empty map if no role map exists.
1819 Gets the value(s) of the choice field. Returns a list of strings representing selected options.
1820 Retrieves the default value for the choice field. Returns a list of strings representing the default value.
1821 Retrieves a COSBase object from a path within the dictionary. @param objPath Path to the object, delimited by PATH_SEPARATOR. @return COSBase object at the specified path, or null if not found.
1822 Retrieves the value of a specified attribute. @param attrName The name of the attribute to retrieve. @return COSBase value or null if not found.
1823 Gets the default style string from the COS object. Returns the style string or null if not found.
1824 Retrieves a list of FDF fields from the FDF document. @return List of FDFField objects or null if no fields exist.
1825 Removes a specified key usage extension from the dictionary. @param keyUsageExtension The key usage extension to remove.
1826 Removes an OID from the OID array in the dictionary. @param oid The OID to remove as a byte array.
1827 Retrieves the file Unicode name from the file system. @return Unicode file name or null if not found.
1828 Retrieves the prefix associated with the page label range. @return Prefix string or null if not found.
1829 Retrieves the PDF producer. @return Producer string or null if not found.
1830 Retrieves the PDF document creator. @return Creator string or null if not found.
1831 Retrieves the PDF document's keywords. @return String containing keywords or null if absent.
1832 Retrieves the PDF document subject. @return Subject string or null if not found.
1833 Retrieves the PDF document author. @return Author string or null if not present.
1834 Retrieves the PDF document title. @return String representing the document title or null.
1835 Retrieves the document's language code from the catalog. @return String representing the language code, or null.
1836 Gets a string value by key, using defaultValue if null. @param key The key to retrieve. @param defaultValue Default value if key is not found.
1837 Retrieves a string value from the dictionary by key. @param key the key to look up in the dictionary @return String value or null if not found
1838 Gets the duplex setting. @return String value or null if not found.
1839 Gets the name of the viewport. @return String representing the viewport's name.
1840 Returns the field type as a String. Uses COSName.FT to retrieve the field type.
1841 Gets the subfilter name from the dictionary. @return String representing the subfilter, or null.
1842 Gets the signature filter name. @return Filter name or null if not present.
1843 Gets the URL type from the certificate dictionary. @return URL type string or null if not present.
1844 Retrieves the base font name from the font dictionary. @return Base font name as a String, or null if not found.
1845 Gets the base font name from the font dictionary. @return Base font name or null if not present.
1846 Gets the base font name. @return Base font name as String, or null if not present.
1847 Checks if the DeviceN color space subtype is "NChannel".
1848 Gets the action type. @return String representing the action type, or null.
1849 Retrieves the file name from the file specification dictionary.
1850 Gets the action subtype. @return Subtype string or null if not found.
1851 Gets the subtype of the annotation from the COSDictionary.
1852 Gets the caption positioning from the COS object. @return String value or null if not found.
1853 Retrieves the intent of the annotation. @return String representing the intent, or null if not set.
1854 Gets the subtype of the external data dictionary. @return Subtype string or null if not found.
1855 Gets the name of the property dictionary. Uses `getNameAsString` to retrieve the name.
1856 Gets the filter name from the dictionary. @return Filter name as String, or null if not found.
1857 Creates a PDAction based on the action type in a COSDictionary. @param action The COSDictionary representing the action. @return A PDAction object or null if action is invalid.
1858 Retrieves the DOS filename from the file system dictionary.
1859 Retrieves the MAC address from the file system dictionary.
1860 Retrieves the file's UNIX timestamp. @return UNIX timestamp as a string, or null if not found.
1861 Retrieves the default appearance string from the annotation. @return Default appearance string or null if not found.
1862 Retrieves the default style of the annotation. @return String representing the default style, or null.
1863 Retrieves the caption style from the annotation dictionary. @return Caption style string or null if not found.
1864 Returns the state of the annotation. @return String representing the annotation's state, or null.
1865 Retrieves the state model for the annotation. @return String representing the state model or null.
1866 Retrieves the status value from the FDF dictionary. @return String representing the status, or null if absent.
1867 Gets the rotation angle of the annotation. @return Rotation angle as a string, or null if not set.
1868 Retrieves the target value from the FDF dictionary. @return String representing the target, or null if absent.
1869 Gets the name of the named page reference. @return The name as a String, or null if not found.
1870 Retrieves the font family name from the dictionary. @return Font family name or null if not found.
1871 Retrieves the character set name from the dictionary. @return Character set name or null if not found.
1872 Gets the lower limit string from the node's limits array. Returns null if the array or string at index 0 is absent.
1873 Gets the upper limit from the node's limits array. @return String representing the upper limit, or null.
1874 Gets the partial field name from the field dictionary. Returns null if the name is not found.
1875 Removes the specified issuer from the issuer array. @param issuer The issuer byte array to remove.
1876 Gets the symbol string for the annotation. @return The symbol string, or null if not found.
1877 Gets the annotation title. @return Annotation title string, or null if not set.
1878 Retrieves the file description from the file system. @return File description string, or null if not found.
1879 Retrieves the element identifier from the COS object. @return String identifier or null if not found.
1880 Retrieves the title of the PDF structure element. @return The title string, or null if not present.
1881 Retrieves the language code of this element. @return Language code string, or null if not set.
1882 Gets the alternate description from the COS object. Uses COSName.ALT as the key.
1883 Returns the expanded-form title. Uses COSName.E to retrieve the value.
1884 Retrieves the annotation subject. @return Subject string or null if not found.
1885 Retrieves the actual text content of the element. Uses COSName.ACTUAL_TEXT as the key.
1886 Retrieves the actual text associated with this marked content. Returns null if no properties are set.
1887 Gets the alternate description from properties. Returns null if properties are null or ALT is not found.
1888 Gets the expanded form string from properties, or null.
1889 Gets the date associated with the annotation. @return Date string or null if not present.
1890 Gets the annotation name. @return Annotation name or null if not set.
1891 Retrieves the contents of the annotation. @return String containing the annotation's contents, or null.
1892 Returns the formatted value of the property. Retrieves the formatted value string from the COS object.
1893 Retrieves the ID value from the FDF document. @return COSArray object representing the ID, or null.
1894 Gets the vertical offset of the caption. Returns 0.f if no offset is defined.
1895 Retrieves the interior color of the annotation. Returns null if no color is defined.
1896 Retrieves the parent tree node, or null if it doesn't exist.
1897 Retrieves the ID tree as a PDNameTreeNode. Returns null if the ID tree dictionary is not found.
1898 Retrieves the PDF page associated with this element. @return PDPage object or null if no page is found.
1899 Retrieves the PDF page associated with this reference. @return PDPage object or null if no page is found.
1900 Retrieves the page associated with this reference. @return A PDPage object or null if no page is found.
1901 Gets resource names of a specific kind. @param kind the resource kind (e.g., Font, Image) @return Set of COS names for the given kind.
1902 Retrieves a value from the resources dictionary. @param kind resource kind (e.g., Fonts, Images) @param name resource name @return COSBase value or null if not found.
1903 Retrieves an indirect object from resources by kind and name. @param kind Resource kind (e.g., Fonts, Images). @param name Object name within the resource. @return COSObject or null if not found or not an indirect object.
1904 Retrieves the page transition. @return PDTransition object or null if no transition exists.
1905 Retrieves the JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode or null if not present.
1906 Retrieves the embedded files name tree node. @return PDEmbeddedFilesNameTreeNode or null if not found.
1907 Retrieves the destination name tree node. @return PDDestinationNameTreeNode or null if not found.
1908 Retrieves optional content properties dictionary. @return PDOptionalContentProperties object or null.
1909 Retrieves the structure tree root dictionary. @return PDStructureTreeRoot object or null if not found.
1910 Gets the URI dictionary from the document root. @return PDURIDictionary object or null if not present.
1911 Retrieves the mark information dictionary. @return PDMarkInfo object or null if not present.
1912 Retrieves a map of class attributes from the COSDictionary. Returns an empty map if no class map dictionary exists.
1913 Retrieves the document's destination dictionary. @return PDDocumentNameDestinationDictionary or null.
1914 Retrieves the crypt filter dictionary by name. @param cryptFilterName Name of the crypt filter. @return PDCryptFilterDictionary or null if not found.
1915 Retrieves the border effect dictionary. @return PDBorderEffectDictionary or null if not present.
1916 Retrieves the target directory. @return PDTargetDirectory object or null if not found.
1917 Gets Windows launch parameters from the action. @return PDWindowsLaunchParams object or null if not present.
1918 Retrieves the target directory. @return PDTargetDirectory object or null if not found.
1919 Retrieves the resources associated with the tiling pattern. @return PDResources object or null if no resources are found.
1920 Returns the extended graphics state, creating it if null. Retrieves the extended graphics state dictionary.
1921 Gets the RenderState based on the destination (PRINT, VIEW, EXPORT). @param destination RenderDestination for state lookup @return RenderState or null if not found.
1922 Retrieves the PDDeviceNProcess object associated with the color space. @return PDDeviceNProcess object or null if no process is defined.
1923 Retrieves the character procedures dictionary. Lazily initializes if null. @return COSDictionary containing character procedures.
1924 Returns the resources dictionary for this font. Creates and caches if not already present.
1925 Retrieves the Panose font classification. @return PDPanose object or null if not found.
1926 Retrieves CID system info from the font dictionary. @return PDCIDSystemInfo object or null if not present.
1927 Retrieves the template reference. @return FDFNamedPageReference object or null if not found.
1928 Returns the additional actions associated with this field. Returns null if no additional actions are defined.
1929 Retrieves the icon fit data. @return FDFIconFit object or null if no icon fit data exists.
1930 Gets the appearance stream reference. @return FDFNamedPageReference or null if not found.
1931 Retrieves the appearance dictionary for the field. @return PDAppearanceDictionary object or null if not found.
1932 Retrieves the JavaScript dictionary from the FDF. @return FDFJavaScript object or null if not present.
1933 Retrieves the signature dictionary. @return PDSignature object or null if no signature exists.
1934 Gets the border style dictionary. @return PDBorderStyleDictionary or null if not present.
1935 Retrieves the document names dictionary. Returns null if no names dictionary exists.
1936 Retrieves viewer preferences from the document catalog. @return PDViewerPreferences object or null if not present.
1937 Retrieves the PDF AcroForm, applying fixes if necessary. @param acroFormFixup Fixup object, may apply fixes. @return PDAcroForm object or null if not found.
1938 Parses a COSDictionary from the PDF source. @param isDirect Whether the dictionary is direct. @return COSDictionary object or partial dictionary on error.
1939 Gets the blend mode from the dictionary. Returns BlendMode or NORMAL if not found.
1940 Retrieves the fourth color (index 3) from the collection.
1941 Retrieves the start color (index 2) as a PDGamma object.
1942 Retrieves the second color (index 1) as a PDGamma object.
1943 Retrieves the first color (at index 0). Returns the PDGamma object at the beginning of the collection.
1944 Reads and constructs a Vertex from the input stream. @param input Input stream for reading vertex data.
1945 Reads and generates a patch from the input stream. @param input Input stream for reading patch data.
1946 Evaluates the PDF type 4 function with given input. @param input Input values to the function. @return Float array of output values.
1947 Returns a string representation of the PDRange object.
1948 Creates a PDLineDashPattern from a COSArray and phase. @param array COSArray representing the dash pattern. @param phase Initial phase value for the dash pattern.
1949 Creates a PDRectangle from a COSArray, handling invalid values. @param array Array containing rectangle data.
1950 Creates a Matrix from a COSBase. Returns an empty Matrix if invalid. @param base COSBase to create Matrix from.
1951 Gets a COSDictionary by firstKey, falls back to secondKey. @param firstKey Primary key for dictionary lookup. @param secondKey Fallback key if firstKey is null. @return COSDictionary or null if not found.
1952 Gets a boolean value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key. @param defaultValue Default value if not found.
1953 Gets an integer value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key. @param defaultValue Default value if not found.
1954 Parses the FDF document's trailer and root object. Throws IOException if the root object is missing.
1955 Retrieves the encryption dictionary from the trailer. @return COSDictionary containing encryption details, or null.
1956 Checks if the document is encrypted. Returns true if encryption dictionary exists.
1957 Gets the appearance state name from the COSDictionary. @return COSName representing the appearance state.
1958 Retrieves the relationship name from the dictionary. @return COSName representing the relationship or null.
1959 Returns the soft mask subtype. Lazily initializes if null.
1960 Converts a character code to its Unicode representation. @param code the character code to convert @return Unicode string or null if conversion is not possible
1961 Retrieves the string filter name from the dictionary. Returns COSName.IDENTITY if no filter is specified.
1962 Gets the stream filter name from the dictionary. Returns IDENTITY if no filter is specified.
1963 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found.
1964 Retrieves the cryptographic filter method from the dictionary. @return COSName representing the filter method, or null.
1965 Retrieves the coordinates of the text markup annotation. @return float array of coordinates or null if not found.
1966 Gets the color space associated with this shading. @return PDColorSpace object or null if not defined.
1967 Gets the image filters. Returns a list of filter names.
1968 Checks if a dictionary is a page tree node. @param node The dictionary to check. @return True if it's a page tree node, false otherwise.
1969 Retrieves the page associated with this annotation. @return PDPage object or null if page is not found.
1970 Retrieves page info from the page's COSDictionary. @return FDFPageInfo object or null if no info dictionary.
1971 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not found.
1972 Retrieves the document ID from the trailer dictionary. Returns a COSArray object representing the document ID.
1973 Retrieves the alternate icon as a PDFormXObject. @return PDFormXObject representing the alternate icon, or null.
1974 Retrieves the border effect dictionary. Returns a PDBorderEffectDictionary or null if not found.
1975 Retrieves the normal icon as a PDFormXObject. Returns null if the icon stream is not found.
1976 Retrieves the sound stream associated with the action. @return COSStream object representing the sound, or null.
1977 Returns the CID set as a PDStream, or null if not present.
1978 Retrieves a list of output intents from the document. Returns an empty list if no output intents are found.
1979 Gets the style of the line's starting point. @return COS name or PDAnnotationLine.LE_NONE if null.
1980 Retrieves the font file 2 as a PDStream. @return PDStream object or null if not found.
1981 Gets the ending style of the line annotation's endpoint. @return COS name representing the style, or LE_NONE if null.
1982 Retrieves the interior color of the line annotation. Returns null if no color is defined.
1983 Retrieves the font file as a PDStream. @return PDStream object representing the font file or null.
1984 Retrieves the differences stream from the FDF document. @return COSStream object representing differences or null.
1985 Retrieves the page metadata as a PDMetadata object. @return PDMetadata object or null if no metadata exists.
1986 Retrieves the PDF metadata object. @return PDMetadata object or null if not present.
1987 Retrieves the page associated with this bead. @return PDPage object or null if page is not found.
1988 Retrieves the font file 3 as a PDStream. @return PDStream object or null if not found.
1989 Retrieves thread beads from the page's COS array. @return List of PDThreadBead objects, or empty list if none.
1990 Retrieves a list of viewport dictionaries from the page. Returns null if no viewports are defined.
1991 Retrieves child nodes. @return List of child nodes or null if none exist.
1992 Retrieves the bounds array for the Type 3 function. Lazily initializes if not already present. @return COSArray representing the bounds, or null.
1993 Retrieves the functions array from the COS object. Lazily initializes if not already present. @return COSArray containing the functions, or null.
1994 Retrieves the decode values for the PDF function. @return COSArray object containing decode values.
1995 Returns the size of the PDF function. Lazily initializes the size from the COS object.
1996 Retrieves the domain values from the COS object. @return COSArray representing domain values or null.
1997 Retrieves the range values from the COS object. @return COSArray representing the range values, or null.
1998 Gets the lower limit from the node's LIMITS array. Returns null if the array or value is not found.
1999 Gets the upper limit from the node's LIMITS array. Returns null if the array or upper limit is not found.
2000 Retrieves a list of owner user properties from the COSArray. Returns an empty list if no properties are found.
2001 Checks if an edge is attached based on properties. @param edge The edge to check for attachment. @return True if the edge is attached, false otherwise.
2002 Retrieves the annotation's color as an RGB value. @return Color object representing the annotation's color.
2003 Retrieves the interior color of the annotation. Returns null if no color is specified.
2004 Gets the callout appearance as a float array. Returns null if the callout array is not found.
2005 Retrieves a list of ink data as float arrays from the annotation. Returns null if inklist is not found.
2006 Retrieves numbers from the node's NUMS array. Returns a map of Integer keys to COSObjectable values.
2007 Retrieves the line coordinates as a float array from the annotation. Returns null if the line array is not found.
2008 Retrieves child nodes (PDNumberTreeNode) from the COS array. Returns null if no children exist.
2009 Retrieves names from the node's COS array. Returns null if no names array exists.
2010 Gets the encode array. Lazily initializes if null. @return COSArray representing the encode array.
2011 Gets the horizontal offset of the caption. Returns 0.f if the array is null.
2012 Retrieves the previous bead in the thread. Uses the COSDictionary associated with the 'V' key.
2013 Retrieves the structure element from the COS dictionary. @return PDStructureElement object or null if not found.
2014 Retrieves the default resources (DR) from the form dictionary. @return PDResources object or null if DR dictionary is missing.
2015 Checks if the node has child nodes. Returns true if FIRST entry exists in COSDictionary.
2016 Gets the vertical offset of the annotation caption. Returns 0.f if the COSArray is null.
2017 Retrieves the PDPropBuild object from the dictionary. @return PDPropBuild object or null if not present.
2018 Retrieves the time stamp COSDictionary. @return PDSeedValueTimeStamp object or null if not found.
2019 Retrieves the seed value certificate from the dictionary. @return PDSeedValueCertificate object or null if not present.
2020 Retrieves the MDP (Metadata Dictionary) as a PDSeedValueMDP. @return PDSeedValueMDP object or null if not found.
2021 Retrieves the application data dictionary. @return Application data dictionary or null if not present.
2022 Retrieves the publication security dictionary. @return PDPropBuildDataDict object or null if not present.
2023 Retrieves the filter dictionary. @return Filter dictionary or null if not present.
2024 Retrieves the border effect dictionary, or null if it's missing.
2025 Gets the normal appearance. Returns null if it doesn't exist.
2026 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not present.
2027 Retrieves the annotation's additional actions. @return PDAnnotationAdditionalActions object or null.
2028 Retrieves appearance characteristics dictionary. Returns null if no MK dictionary exists.
2029 Retrieves the interior color of the polyline annotation. Returns null if no color is defined.
2030 Writes a COSBase object to the output stream, handling types. @param output Output stream to write to @param object COSBase object to write @param topLevel Flag indicating top-level object
2031 Gets the signature value. @return PDSignature object or null if not present.
2032 Returns the next bead in the thread. @return PDThreadBead object representing the next bead.
2033 Retrieves the PDThread object associated with this bead. @return PDThread object or null if thread dictionary is missing.
2034 Retrieves the previous URI action. Returns null if not found.
2035 Retrieves the polygon's vertices as a float array. Returns null if no vertices are defined.
2036 Retrieves the interior color of the polygon annotation. Returns null if no color is defined.
2037 Gets the vertices of the polyline annotation. @return float array of vertices or null if not present.
2038 Retrieves the external data dictionary, or null if it's absent.
2039 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null if none.
2040 Retrieves the first bead associated with the thread. Returns a PDThreadBead object or null if no bead exists.
2041 Retrieves the measure dictionary for viewport settings. @return PDMeasureDictionary object or null if not found.
2042 Gets the border style dictionary. @return PDBorderStyleDictionary or null if not present.
2043 Gets the start point ending style from the annotation. @return COS name representing the style, or LE_NONE if null.
2044 Gets the endpoint ending style from the annotation. @return COS name representing the style, or LE_NONE if null.
2045 Retrieves the seed value. @return PDSeedValue object or null if not present.
2046 Retrieves the default value for the signature. @return PDSignature object or null if no default value exists.
2047 Retrieves document information for the thread. @return PDDocumentInformation object or null if not found.
2048 Retrieves the border effect dictionary. Returns null if not present.
2049 Retrieves the bounding box of the tiling pattern. @return PDRectangle object or null if not defined.
2050 Returns the bounding box of the shading. Creates it if null. Uses COSName.BBOX to retrieve.
2051 Retrieves the fringe rectangle of the annotation. @return PDRectangle object representing the fringe, or null.
2052 Gets the bounding box of the XObject. @return PDRectangle object or null if not defined.
2053 Gets the fringe rectangle. @return PDRectangle representing the fringe or null if absent.
2054 Gets the font bounding box. @return PDRectangle object or null if not present.
2055 Retrieves the font bounding box from the font descriptor. @return PDRectangle object representing the bounding box, or null.
2056 Retrieves the rectangle defining the annotation's fringe. @return PDRectangle object or null if fringe data is missing.
2057 Gets the bounding box of an appearance stream. If null, uses the widget's rectangle. @param fieldWidget Widget with rectangle to use. @param appearanceStream Appearance stream to get bbox from. @return PDRectangle object representing bounding box.
2058 Creates a new FDFDocument with default settings and an empty catalog.
2059 Retrieves the rectangle associated with the annotation. Returns a PDRectangle or null if invalid.
2060 Sets the Bounding Box (BBOX) attribute to the given rectangle. @param bbox The rectangle representing the BBOX, or null.
2061 Sets the color value for the specified name. @param name The name of the color attribute. @param value The new color value (PDGamma).
2062 Sets the four colors for a given name, notifying of changes. @param name Attribute name. @param value The PDFourColours value to set.
2063 Creates a new PDPage with default LETTER dimensions.
2064 Gets the FDF dictionary associated with the catalog. Returns a new FDFDictionary object.
2065 Adds a resource to the dictionary, returning its key. @param kind Resource kind, prefix, and object to add.
2066 Adds a font resource to the dictionary. @param name Font name @param font The font object to add
2067 Adds a color space resource to the dictionary. @param name COSName identifying the color space @param colorSpace The PDColorSpace object to add
2068 Adds an extended graphics state resource to the dictionary. @param name Resource name @param extGState The extended graphics state object
2069 Adds a shading resource to the dictionary. @param name Shading resource name @param shading The shading object to add
2070 Adds a pattern resource to the dictionary. @param name Pattern name @param pattern The pattern object to add
2071 Adds properties to the specified resource dictionary. @param name Resource name @param properties Properties to associate with the resource
2072 Adds an XObject to the resource dictionary. @param name XObject name @param xobject The XObject to add
2073 Returns the bounding box of the artifact. @return PDRectangle object or null if not defined.
2074 Retrieves the bounding box of the object. @return PDRectangle object or null if bounding box is missing.
2075 Gets the rectangle associated with the annotation. @return PDRectangle object or null if not present.
2076 Retrieves the fringe rectangle of the annotation. @return PDRectangle object or null if fringe data is missing.
2077 Sets the fractional display type. @param fractionalDisplay "D", "F", "R", "T", or null.
2078 Calculates the difference rectangle. @return PDRectangle object or null if RD is missing.
2079 Retrieves COS objects matching specified types. @param type1 First COS object type. @param type2 Second COS object type. @return List of COS objects of the specified types.
2080 Returns the bounding box of the viewport. @return PDRectangle object or null if bounding box is missing.
2081 Creates a PDInlineImage with decoding parameters, data, and resources. @param parameters Decoding parameters as COSDictionary. @param data Raw image data as byte array. @param resources Resources associated with the image.
2082 Gets the image suffix based on its filters. Returns "png" if no filters.
2083 Converts a character code to its Unicode representation. @param code character code to convert @param customGlyphList unused parameter @return Unicode string or null if conversion fails
2084 Checks if the PDF document is encrypted. Delegates to the underlying document's encryption check.
2085 Parses the FDF document and returns an FDFDocument object. Throws IOException if parsing fails.
2086 Retrieves the PDF AcroForm, applying default fixups. @return PDAcroForm object or null if not found.
2087 Retrieves a color space by name, caching if available. @param name Color space name. @param wasDefault Whether the color space was default. @return PDColorSpace object or new instance.
2088 Checks if a color space exists with the given name. @param name The name of the color space to check. @return True if the color space exists, false otherwise.
2089 Retrieves an extended graphics state by name, caching results. @param name Name of the extended graphics state. @return PDExtendedGraphicsState object or null if not found.
2090 Checks if a resource is an image XObject. @param name resource name @return true if resource is an image XObject, false otherwise
2091 Gets the color space names. @return Set of COS names for color spaces.
2092 Gets the XObject resource names. Uses `getNames` to retrieve names of type XOBJECT.
2093 Gets the names of properties resources. Uses getNames to retrieve the property names.
2094 Gets an integer value from the dictionary. @param firstKey Primary key. @param secondKey Fallback key.
2095 Gets an integer value from the dictionary. @param key Primary key. @param defaultValue Default if key not found.
2096 Retrieves the rectangle associated with the bead. @return PDRectangle object or null if rectangle doesn't exist.
2097 Sets the line dash pattern using a COSArray and phase. @param array COSArray representing the dash pattern @param phase Initial phase value for the dash pattern
2098 Retrieves the line dash pattern from the graphics state. Returns PDLineDashPattern or null if not found/invalid.
2099 Creates a stencil image from a PDImage with a given paint. @param pdImage Image to create stencil from. @param paint Paint used for the stencil background.
2100 Sets the Unicode embedded file for the specification. @param file The embedded file to set, or null to clear.
2101 Sets the embedded file for this specification. @param file The embedded file to set, or null to clear.
2102 Retrieves the transformation matrix from the COS object.
2103 Returns the pattern's matrix from the COSDictionary. Uses COSName.MATRIX to retrieve the matrix value.
2104 Retrieves the shading matrix from the dictionary. Returns a Matrix object, created from COSBase.
2105 Gets an inheritable attribute from a COSDictionary. @param node Dictionary to search, recursively up the tree. @param key Attribute key to retrieve. @return COSBase value or null if not found.
2106 Gets a boolean value for the given key, using a default if absent. @param key The key to retrieve the boolean value for. @param defaultValue The default value if the key is not found.
2107 Calculates the rectangle difference. @return PDRectangle object or null if not present.
2108 Constructs a PDTransition with the default transition style (R).
2109 Sets the blue component range. @param range The PDRange object for the blue component.
2110 Sets the standard crypt filter dictionary. @param cryptFilterDictionary The filter dictionary to set.
2111 Sets the default crypt filter dictionary for the PDF. @param defaultFilterDictionary Crypt filter dictionary to set.
2112 Decrypts values within a COSDictionary. @param dictionary Dictionary to decrypt. @param objNum Object number for decryption. @param genNum Generation number for decryption.
2113 Sets the units for numerical values in the PDF. @param units The units to set (e.g., "mm", "in").
2114 Sets the date value for a given key. @param key The key for the date value. @param date Calendar object representing the date.
2115 Sets the date value for a given key within an embedded dictionary. @param embedded Embedded object. @param key Key for the date value. @param date Calendar object representing the date.
2116 Retrieves an OptionalContentGroup by its name. @param name Name of the group to retrieve. @return PDOptionalContentGroup or null if not found.
2117 Adds key usage flags to certificate, then adds to dictionary. @param digitalSignature-decipherOnly Key usage flags.
2118 Creates a new PDRectlinearMeasureDictionary, setting its subtype.
2119 Retrieves the parent outline node, or null if none exists.
2120 Retrieves the document outline. @return PDDocumentOutline object or null if no outline exists.
2121 Creates a new PDAction with the specified action type.
2122 Constructs a new PDShadingPattern with the correct pattern type.
2123 Creates a new PDStructureTreeRoot using the TYPE constant.
2124 Retrieves a collection of optional content groups (OCGs). Returns an empty collection if no OCGs are found.
2125 Creates a new PDStructureElement with given type and parent. @param structureType The type of the structure element. @param parent The parent PDStructureNode.
2126 Sets the 'Base' string value in the underlying COSDictionary. @param base The string value to set for the 'Base' key.
2127 Sets the string value for a given attribute name. @param name Attribute name. @param value String value to set.
2128 Sets a custom metadata value for the specified field. @param fieldName Name of the metadata field. @param fieldValue Value to set for the field.
2129 Sets the signature date using the provided Calendar object. @param cal Calendar object representing the signature date.
2130 Gets the names of all shading resources. Uses `getNames` to retrieve names of type SHADING.
2131 Sets the creation date of the annotation. @param creationDate Calendar object representing the date.
2132 Sets the formatted value of the property and notifies listeners. @param formattedValue The new formatted value to set.
2133 Sets the application version in the dictionary. @param applicationVersion Version string to set.
2134 Parses a PDF document. @param lenient Whether to parse leniently. @return PDDocument object or null if parsing fails.
2135 Sets the modification date of the annotation. @param c Calendar object representing the modification date.
2136 Sets the creation date of the annotation. @param date Calendar object representing the creation date.
2137 Sets the PDF document's modification date. @param date Calendar object representing the modification date.
2138 Sets the PDF creation date. @param date Calendar object representing the creation date.
2139 Sets the property name. @param name The new name for the property.
2140 Initializes PDPageLabels with a default label range for page 0. @param document The PDF document this labels applies to.
2141 Sets the name of the action. @param name The name to associate with the action.
2142 Sets the right coordinate of the rectangle. @param x The x coordinate; null if unset.
2143 Sets the top coordinate of the rectangle. @param y The y coordinate; -1 sets to null.
2144 Constructs a PDPageFitWidthDestination object. Initializes the internal array with type information.
2145 Sets the top coordinate of the page fitting destination. @param y The top coordinate; -1 indicates no top boundary.
2146 Sets the fit bounding box type. @param fitBoundingBox True if bounding box is used.
2147 Constructs a PDPageXYZDestination with an initial array size.
2148 Sets the left coordinate. Null if -1, otherwise sets the value. @param x The left coordinate.
2149 Sets the top coordinate of the view. @param y The y coordinate; null if not specified.
2150 Sets the bottom coordinate (y) of the rectangle. @param y The y-coordinate; null if not applicable.
2151 Sets the zoom level for the destination. @param zoom The zoom level to set; -1 disables zoom.
2152 Retrieves decode parameters from the stream. Uses COSName.DECODE_PARMS or COSName.DP. @return List of decode parameters or null.
2153 Retrieves file decode parameters. @return List of decode params or null if not found.
2154 Returns the FDF catalog. Creates one if it doesn't exist.
2155 Sets the A component range. @param range The PDRange object for the A component.
2156 Gets the fractional space allocated to the icon. Returns a PDRange object representing the space.
2157 Sets the border style. @param s The border style string.
2158 Sets the left coordinate of the rectangle. @param x The x-coordinate; null if unknown.
2159 Sets the fit bounding box type based on the input. @param fitBoundingBox True for bounded box, false for default.
2160 Sets the rendering intent in the dictionary. @param ri Rendering intent string (e.g., "Fast", "Duotone")
2161 Sets the name in the dictionary to the given value. @param name The key of the name. @param value The name string.
2162 Appends a bead to the thread, updating links to neighbors. @param append The PDThreadBead to append to the thread.
2163 Constructs a new PDThreadBead object, initializing its properties.
2164 Sets the first bead for the thread, linking the bead to the thread. @param bead The PDThreadBead to set as the first bead.
2165 Inserts a new sibling outline item after the current one. @param newSibling The outline item to insert.
2166 Inserts a new sibling outline item before the current one. @param newSibling The outline item to insert.
2167 Constructs a `PDPageFitRectangleDestination` with a size of 6.
2168 Gets the annotation's appearance dictionary, creating it if null.
2169 Default constructor. Initializes a PDTilingPattern object. Sets type, pattern type, and resources.
2170 Constructs a PDPageFitDestination with a TYPE name.
2171 Sets the fit bounding box type. @param fitBoundingBox True if bounding box is used, false otherwise.
2172 Constructs a `PDPageFitHeightDestination` with initial values.
2173 Sets the left margin of the page fit destination. @param x The left margin value; -1 indicates no margin.
2174 Gets the names of all pattern resources. Calls getNames with COSName.PATTERN.
2175 Gets font resource names. @return Set of COS names for fonts.
2176 Gets a string value by key, using defaultValue if null. @param key The key to retrieve. @param defaultValue Default value if key is not found.
2177 Retrieves the units string from the COSDictionary. Returns "U" value or null if not found.
2178 Retrieves the PDF document's version string. @return Version string or null if not found.
2179 Retrieves the 'Base' string from the underlying COSDictionary.
2180 Retrieves a string attribute value by name. @param name the name of the attribute to retrieve @return String value or null if not found
2181 Retrieves a custom metadata value by field name. @param fieldName Name of the metadata field. @return Metadata value or null if not found.
2182 Retrieves the string value for a given property key. @param propertyKey the key of the property to retrieve @return String value or null if not found
2183 Creates a PDAction from the action dictionary. @return PDAction object representing the action, or null.
2184 Retrieves the action associated with the annotation. Returns a PDAction object or null if no action is defined.
2185 Retrieves the action associated with this annotation. @return PDAction object or null if no action is defined.
2186 Retrieves the "C" action from the actions dictionary. @return PDAction object or null if "C" action is not found.
2187 Retrieves the "O" action from the actions dictionary. @return PDAction object or null if no action is defined.
2188 Retrieves the 'C' action from the actions dictionary. @return PDAction object or null if 'C' action is missing.
2189 Retrieves the "V" action. @return PDAction object or null if not found.
2190 Gets embedded string value by key, using defaultValue if null. @param embedded The embedded dictionary. @param key The key to retrieve. @param defaultValue Default value if key is not found.
2191 Retrieves the 'F' action. @return PDAction object or null if not found.
2192 Retrieves the operation parameter, defaults to OPERATION_OPEN.
2193 Retrieves the file name, trying Unicode, DOS, MAC, UNIX, then default.
2194 Gets the normal appearance stream. Returns null if not found.
2195 Creates a DictionaryEncoding with base encoding and differences. @param baseEncoding Base encoding COSName. @param differences Differences COSArray.
2196 Extracts signature contents from PDF file. @param pdfFile PDF file byte array. @return Signature contents as byte array.
2197 Extracts signature contents from PDF file. @param pdfFile Input stream of the PDF file. @return Byte array representing the signature contents.
2198 Retrieves the background color of the annotation. Uses getColor to fetch the color associated with COSName.BG.
2199 Retrieves the border color using the 'BC' item name. @return PDColor object representing the border color.
2200 Retrieves the color of the annotation. Delegates to getColor(COSName.C) to get the color.
2201 Returns the fully qualified name of the field. Combines parent name (if present) with the field's name.
2202 Checks if an optional content group exists. @param groupName Name of the group to check. @return True if the group exists, false otherwise.
2203 Gets the default appearance string from the form dictionary. Returns "" if DA is not found.
2204 Retrieves the "K" action. @return PDAction object or null if not found.
2205 Retrieves the DP action. @return PDAction object representing the DP action, or null.
2206 Retrieves the "WP" action from the document's actions. @return PDAction object or null if no WP action is found.
2207 Checks if font CID system info matches, using registry/ordering or code page range. @param cidSystemInfo CID system info to compare against. @param info Font info to check.
2208 Retrieves the line dash pattern. Creates a default if none exists.
2209 Retrieves a list of FDF annotations from the FDF document. Returns an empty list if no annotations are present.
2210 Returns the security handler. Throws IOException if no handler exists.
2211 Initializes PDEncryption with a COSDictionary. @param dictionary COSDictionary containing encryption settings
2212 Creates a PDF object from a COSBase object. @param kid The base object to create from. @return A PDF object or null if creation fails.
2213 Retrieves the parent structure node. @return Parent PDStructureNode or null if not present.
2214 Checks if the attribute is empty (only has an owner).
2215 Checks for a valid XRef offset, returning it or -1 if not found. @param startXRefOffset Offset to check for a valid XRef table.
2216 Checks if the DeviceN color space subtype is \"NChannel\".
2217 Gets the document's open action (destination or action). @return PDDestinationOrAction or null if no open action. @throws IOException on conversion errors.
2218 Retrieves the document's document-level signature action. @return PDAction object or null if no signature action exists.
2219 Retrieves the document will-show action. @return PDAction object or null if no action is defined.
2220 Retrieves the "WC" action. @return PDAction object or null if not found.
2221 Retrieves the "PI" action. @return PDAction object representing the "PI" action, or null.
2222 Retrieves the PV action. @return PDAction object or null if not found.
2223 Retrieves the PC action. @return PDAction object or null if not found.
2224 Retrieves the PO action. @return PDAction object or null if not found.
2225 Gets the "on" value from the checkbox appearance dictionary. Returns empty string if not found.
2226 Retrieves the "BL" action. @return PDAction object or null if not found.
2227 Retrieves the 'U' action. @return PDAction object or null if not found.
2228 Retrieves the "D" action. @return PDAction object or null if not found.
2229 Retrieves the action associated with the "X" key. @return PDAction object or null if no action is found.
2230 Retrieves the "E" action. @return PDAction object or null if not found.
2231 Retrieves the "F" action from the action dictionary. Uses PDActionFactory to create a PDAction object.
2232 Retrieves JavaScript actions from the document dictionary. @return Map of action names to PDActionJavaScript objects.
2233 Retrieves the action associated with the field. @return PDAction object representing the field's action.
2234 Retrieves the "FO" action. @return PDAction object or null if not found.
2235 Retrieves the PDTransparencyGroup object, creating it if null. Returns the group or null if no group is defined.
2236 Finds a PDPageDestination by named destination. @param namedDest The named destination to find. @return PDPageDestination or null if not found.
2237 Constructs a `PDPatternContentStream` for a tiling pattern. @param pattern The tiling pattern to associate with the stream.
2238 Constructs a PDAnnotationPolyline with subtype set to SUB_TYPE.
2239 Constructs a new PDAnnotationPolygon with subtype set to SUB_TYPE.
2240 Constructs a PDAnnotationLine object. Initializes subtype and line coordinates.
2241 Writes prepared COS objects to a stream, creating a compressed stream. @param stream COSStream to write to @return Updated COSStream object
2242 Writes a COSDictionary to the output stream. @param output Output stream to write to. @param cosDictionary Dictionary to write.
2243 Constructs a PDAnnotationInk object, setting its subtype.
2244 Constructs a new PDAnnotationFileAttachment. Sets the subtype name to SUB_TYPE in the COS object.
2245 Default constructor for FDFAnnotationUnderline. Initializes the annotation subtype.
2246 Initializes a new FDFAnnotationStrikeOut instance. Sets the subtype name of the annotation.
2247 Creates a new FDFAnnotationSquiggly instance. Sets the subtype name to SUBTYPE.
2248 Creates a new FDFAnnotationHighlight with subtype set.
2249 Removes a child element and detaches it from this node. @param structureElement The child element to remove. @return True if removed, false otherwise.
2250 Initializes the rubber stamp with the subtype.
2251 Creates a PDAnnotationSquareCircle with the given subtype. @param subType Annotation subtype string.
2252 Initializes a PDAnnotationText object with the subtype.
2253 Retrieves a list of widgets associated with this field. Returns an empty list if no widgets are found.
2254 Retrieves the annotation popup dictionary. @return PDAnnotationPopup object or null if no popup exists.
2255 Constructs a PDAnnotationTextMarkup from a COSDictionary.
2256 Constructs a PDAnnotationText from a COSDictionary.
2257 Constructs a PDAnnotationSquareCircle from a COSDictionary.
2258 Constructs a PDAnnotationSound using a COSDictionary. @param field The COSDictionary containing annotation data.
2259 Inserts a structure element before a reference node. @param newKid The element to insert. @param refKid The reference node.
2260 Constructs a PDAnnotationRubberStamp from a COSDictionary.
2261 Constructs a PDAnnotationPolygon from a COSDictionary.
2262 Constructs a PDAnnotationLine from a COSDictionary.
2263 Constructs a PDAnnotationInk from a COSDictionary.
2264 Constructs a PDAnnotationFreeText from a COSDictionary.
2265 Constructs a PDAnnotationFileAttachment from a COSDictionary.
2266 Constructs a PDAnnotationCaret from a COSDictionary.
2267 Creates a new text markup annotation with a subtype. @param subType Annotation subtype string.
2268 Constructs a PDAnnotationPolyline from a COSDictionary.
2269 Gets the print scaling preference. @return Print scaling string or default if not set.
2270 Adds a kid element to this node and sets this node as its parent. @param structureElement The element to add as a kid.
2271 Gets the file specification associated with the action. Uses createFS to build a PDFileSpecification.
2272 Creates a PDImageXObject from a BufferedImage. Supports only 1-bit black and white images. @param document PDF document. @param image BufferedImage to convert. @return PDImageXObject representing the image.
2273 Constructs a PDPageTree from a COSDictionary. @param root The root COSDictionary of the page tree.
2274 Returns a PDPageTree representing the document's page tree. Uses the PAGES dictionary from the root COSDictionary.
2275 Checks the pages dictionary and throws exception if missing. @param root The root COSDictionary to check.
2276 Gets the encode values array. Creates if null. Uses size values to generate default encoding.
2277 Constructs a PDFunctionType2 from a COSBase object. @param function The COSBase object representing the function.
2278 Retrieves a collection of PDAttributeObjects associated with this element.
2279 Retrieves a value by name, searching names or child nodes. @param name Name of the value to retrieve. @return Value associated with the name or null if not found.
2280 Searches for a trailer dictionary within the PDF source. Uses brute force to locate and validate the trailer. @param trailer The trailer dictionary to populate.
2281 Searches for and sets trailer items (root/info). Iterates offsets, identifies dictionaries, and sets values.
2282 Gets the names of the Ext GState resources. Uses getNames with COSName.EXT_G_STATE. @return Set of COS names for Ext GState resources.
2283 Sets the value of an attribute. @param attrName Attribute name. @param attrValue Attribute value to set.
2284 Retrieves the line dash pattern. Creates a default if missing. @return PDLineDashPattern object representing the dash pattern.
2285 Retrieves the file specification from the action dictionary. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2286 Retrieves the file specification for this action. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2287 Retrieves the file specification for this action. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2288 Retrieves the file specification from the action dictionary. @return PDFileSpecification object or null if file is missing @throws IOException if an I/O error occurs
2289 Retrieves the file specification. Uses COS object to create a PDFileSpecification. @return PDFileSpecification object or null if COS object is null @throws IOException if an error occurs during creation
2290 Retrieves the file specification associated with this reference. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2291 Retrieves embedded FDF files as PDFileSpecifications. Returns null if no embedded FDFs are present.
2292 Retrieves the file specification for this annotation. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2293 Gets the file specification from the FDF dictionary. Returns a PDFileSpecification or null if not found.
2294 Gets the PDF version number. @return String representing the PDF version.
2295 Sets the conversion factor for numerical values in the PDF. @param conversionFactor The conversion factor to apply.
2296 Sets the border effect intensity. @param i The intensity value to set.
2297 Sets a float value in the dictionary and notifies changes. @param name Attribute name. @param value Float value to set.
2298 Gets the file specification associated with this stream. @return PDFileSpecification object or null if not found @throws IOException if an I/O error occurs
2299 Gets the print clip setting. @return Print clip string, "CropBox" if not found.
2300 Gets the view clip setting, defaulting to CropBox.
2301 Retrieves the next action(s) in a sequence. Returns a list of PDAction objects or null if none.
2302 Sets the Mac Resource Fork data for the embedded file. @param macResFork The string data for the Mac Resource Fork.
2303 Gets the minimum revision number from the dictionary. @return Minimum revision number, or -1 if not found.
2304 Gets the revision number from the dictionary. @return Revision number, or -1 if not present.
2305 Extracts the signed content from a PDF file. @param pdfFile Byte array representing the PDF file @return Byte array containing the signed content @throws IOException If an I/O error occurs
2306 Creates a view of the stream data, applying filters if present. Returns a RandomAccessRead object for stream access.
2307 Reads the signed content from the PDF file. @param pdfFile Input stream for the PDF file. @return Byte array containing the signed content.
2308 Gets the PDRange for a given parameter number. @param paramNum Parameter index; must be within decode range. @return PDRange object or null if parameter is out of range.
2309 Constructs a ShadingContext with provided shading data and transforms. @param shading The PDShading object.
2310 Constructs a color space with a given RGB array and caches whitepoint. @param rgb RGB array defining the color space.
2311 Retrieves the standard crypt filter dictionary. Uses COSName.STD_CF to identify the filter.
2312 Sets the Mac Creator attribute for the embedded file. @param macCreator The creator string to set.
2313 Parses a PDF directory object. Handles various object types. @return COSBase object or null on error. @throws IOException if an I/O error occurs.
2314 Sets the enabled state of an optional content group. @param group The optional content group to modify. @param enable True to enable, false to disable. @return True if the group was found and modified.
2315 Gets the base state of the optional content group. @return BaseState representing the group's initial state.
2316 Constructs a new PDOptionalContentGroup with the given name. @param name The name of the optional content group.
2317 Gets the CYX value from the COSDictionary. @return CYX float value or -1 if not found.
2318 Sets the Mac Subtype value for the embedded file. @param macSubtype The subtype string to set.
2319 Gets the value of the 'V' parameter from the dictionary.
2320 Gets the leader extend value from the annotation. @return float value or -1 if not found
2321 Gets the leader line length from the annotation. Returns a float value, or -1 if not found.
2322 Gets the conversion factor from the COSDictionary. Returns -1 if not found.
2323 Gets the float value associated with the given name. @param name the name of the attribute @return float value or -1 if not found
2324 Sets the label prefix string in the COSDictionary. @param labelPrefixString The string to set as the label prefix.
2325 Gets the leader offset from the annotation dictionary. @return Leader offset value, or -1 if not found.
2326 Sets an integer value for a given attribute name. @param name Attribute name. @param value Integer value to set.
2327 Sets the thousands separator for numerical values in the PDF. @param thousandsSeparator The string to use as the separator.
2328 Retrieves the default crypt filter dictionary. Uses COSName.DEFAULT_CRYPT_FILTER to find the dictionary.
2329 Returns the number of output parameters. Uses range values to calculate the count.
2330 Creates a PDRange object for output, using range values and index n. @param n Index for the range. @return PDRange object.
2331 Clips input values to defined ranges. @param inputValues array of values to clip @return Clipped array, or original if no range defined.
2332 Returns the number of input parameters. Caches the value after retrieving domain values.
2333 Creates a PDRange object using domain values and an index. @param n Index for the PDRange object. @return PDRange object with domain values and index.
2334 Calculates a sample index from a coordinate vector. @param vector Array of coordinate values. @return The calculated sample index.
2335 Retrieves a value from the node, searching numbers or children. @param index The index of the value to retrieve.
2336 Creates a FDFField from an XML element. @param fieldXML XML element representing the field. @throws IOException if an I/O error occurs.
2337 Gets the encode array for a parameter. @param n Parameter index. @return PDRange object containing the encode array.
2338 Checks if the top edge of the artifact is attached. Delegates to the isAttached method with "Top" as the edge.
2339 Checks if the bottom edge is attached. Delegates to isAttached with "Bottom" as the edge.
2340 Checks if the left edge is attached. Uses isAttached method with "Left" as the edge name.
2341 Checks if the right edge is attached. Uses `isAttached` method with "Right" as the edge.
2342 Constructs a PDCIDFont object. @param fontDictionary CID font dictionary. @param parent Parent PDType0Font object.
2343 Retrieves the decode range for a given parameter number. @param paramNum Parameter index for which to get decode range. @return PDRange object or null if not found.
2344 Sets the decimal separator for numerical formatting. @param decimalSeparator The decimal separator string.
2345 Constructs a `DictionaryEncoding` with base encoding. @param fontEncoding Font encoding dictionary. @param isNonSymbolic Whether the font is non-symbolic. @param builtIn Font's built-in encoding.
2346 Retrieves a character procedure for a given code. @param code The character code to retrieve. @return PDType3CharProc object or null if not found.
2347 Gets the rollover appearance. Returns normal appearance if null.
2348 Gets the down appearance. Returns normal appearance if null.
2349 Returns the first child outline item. Uses `getOutlineItem` to retrieve it by name.
2350 Retrieves the last child outline item. Uses `getOutlineItem` with the `COSName.LAST` constant.
2351 Gets the signature value. @return PDSignature object or null if not present.
2352 Creates a DictionaryEncoding with a font encoding. @param fontEncoding The font encoding dictionary.
2353 Sets an integer value for a given attribute name. @param name Attribute name. @param value Integer value to set.
2354 Adds an optional content group to the OCGs array and order. @param ocg The optional content group to add.
2355 Gets a number from the dictionary, using defaultValue if not found. @param name attribute name @param defaultValue default value if not found
2356 Gets the icon name. Uses default if not found.
2357 Gets the guideline style. Returns default if not found.
2358 Gets name as string, using default if not found. @param key The key to look up. @param defaultValue Value if key is not present.
2359 Gets the action name "N" from the action dictionary.
2360 Gets the RenderingIntent from the dictionary. @return RenderingIntent or null if not found.
2361 Gets an embedded date value, using defaultValue if null. @param embedded COSName of embedded dictionary @param key COSName representing the date key @param defaultValue Default Calendar object if date is null
2362 Gets the optional content property list, or null if absent.
2363 Gets a date value, using defaultValue if null. @param key COSName representing the date key @param defaultValue Default Calendar object if date is null
2364 Retrieves the attribute value by name. @param name The name of the attribute to retrieve.
2365 Sets the denominator value for PDF number formatting. @param denominator The denominator value to set.
2366 Gets the print area. @return Print area string, or default crop box.
2367 Sets the label position to value in the COSDictionary. @param labelPositionToValue Value must be "S", "P", or null.
2368 Gets the optional content property list, or null if absent.
2369 Retrieves optional content groups (OCGs) from the dictionary. Returns a list of PDPropertyLists or an empty list if not found.
2370 Retrieves a PDPropertyList by name, caching if available. @param name Name of the property list. @return PDPropertyList or null if not found.
2371 Returns the default position vector for a given CID. @param cid The CID value.
2372 Retrieves the attachment name. Uses default if not found.
2373 Gets the highlight mode. @return Highlight mode string, defaults to HIGHLIGHT_MODE_INVERT.
2374 Gets the intensity of the border effect. Returns 0 if the "I" property is not found.
2375 Computes font height, adjusting for bounding box and descriptors. @param font The PDFont object to process. @return Font height in text space.
2376 Gets the view area preference. @return View area string, or default CropBox.
2377 Gets the reading direction from preferences. @return Reading direction string (e.g., "L2R").
2378 Gets the non-fullscreen page mode. @return Page mode string, "UseNone" if not found.
2379 Gets the transition motion. @return Motion string, defaults to 'I' if not found.
2380 Gets the dimension of the transition. @return Dimension string, or default if not found.
2381 Retrieves the transition style name. @return Style name as string, uses default if not found.
2382 Gets the line ending style. @return Line ending style, LE_NONE if not found.
2383 Sets the label suffix string in the COSDictionary. @param labelSuffixString The suffix to set for the label.
2384 Gets the type of the external data dictionary. Returns "ExData" if the type is not explicitly defined.
2385 Gets the border style. Returns STYLE_SOLID if not found.
2386 Gets the highlighting mode. @return Highlighting mode string, "I" if not found.
2387 Gets the annotation name. @return Annotation name string, or default if not found.
2388 Gets the name of the rubber stamp. Uses default name if not found.
2389 Gets the reply type. @return Reply type string, or default RT_REPLY if not found.
2390 Gets the optional content dictionary, or null if absent. Returns a PDPropertyList or null.
2391 Repairs an invalid Length1 value, scanning for "exec". @param bytes font data @param length1 initial Length1 value @return corrected Length1 value
2392 Gets the thousands separator from the COSDictionary. Returns "," if not found.
2393 Parses a COS array from the PDF source. Returns a COSArray object containing parsed elements.
2394 Checks the checkbox by setting its value to the \"on\" value.
2395 Checks if the checkbox is checked by comparing its value.
2396 Retrieves a set of "on" values from button attributes and widgets.
2397 Adds font resources from a widget's appearance stream to AcroForm. Ignores subsetted fonts.
2398 Gets the normal appearance stream from the annotation. @param annotation The annotation to retrieve the stream from. @return The appearance stream, or null if not found.
2399 Creates a PDFXrefStreamParser from a COSStream. @param stream COSStream to parse; throws IOException on failure.
2400 Parses a PDF document leniently. @return PDDocument object or null if parsing fails.
2401 Repairs an invalid length2 value, returning a safe value. @param bytes The byte array representing the font data. @param length1 First length value. @param length2 Second length value to repair.
2402 Finds font matches based on descriptor and CID system info. @param fontDescriptor Font descriptor object. @param cidSystemInfo CID system info for filtering.
2403 Gets embedded string value by key, returns null if not found. @param embedded The embedded dictionary. @param key The key to retrieve.
2404 Gets the label position to value string from the COSDictionary.
2405 Finds the index of a page within the page tree. @param page The page to search for. @return The index of the page, or -1 if not found.
2406 Gets the label suffix string from the COSDictionary. Returns " " as default if not found.
2407 Retrieves a COSDictionary representing a page. @param pageNum 1-based page index. @param node Starting COSDictionary node. @param encountered Pages encountered so far.
2408 Gets the encode range for a parameter. @param paramNum Parameter index to get encode range for. @return PDRange object or null if not found.
2409 Gets the label prefix string from the COSDictionary. Returns " " as default if prefix is not found.
2410 Gets the decimal separator string from the COSDictionary. Returns "." if not found.
2411 Loads an FDF document from an input stream. @param input Input stream containing the FDF data. @return FDFDocument object or null if parsing fails. @throws IOException if an I/O error occurs.
2412 Loads an FDF document from a file. @param file The file containing the FDF document. @return FDFDocument object. @throws IOException if an I/O error occurs.
2413 Encodes image data, applying PNG filtering for compression. Returns a PDImageXObject with encoded image data.
2414 Creates a new highlight annotation. Initializes the annotation using the SUB_TYPE constant.
2415 Sets the PDF document version. Prevents downgrades and updates catalog if >= 1.4. @param newVersion The new PDF version to set.
2416 Creates a new PDF document, copying metadata from source. Copies version, language, viewer preferences, and metadata. @return New PDDocument object.
2417 Gets the document's page tree from the catalog.
2418 Constructs a new PDAnnotationSquiggly with the default subtype.
2419 Sets the enabled state of an optional content group. @param groupName Name of the group to modify. @param enable True to enable, false to disable. @return True if group found and modified, false otherwise.
2420 Creates a new PDActionURI, setting its subtype.
2421 Creates a PDActionThread with the defined sub-type.
2422 Constructs a PDActionSubmitForm, setting its subtype.
2423 Appends a new child outline item to this node. Sets parent, siblings, and last child relationships.
2424 Inserts a new child outline item at the beginning. Sets parent and adjusts sibling references accordingly.
2425 Creates a new PDActionSound, setting its subtype.
2426 Checks if an optional content group is enabled. @param group the optional content group to check @return true if enabled, false otherwise
2427 Initializes a new PDAnnotationStrikeout with the predefined subtype.
2428 Creates a new underline annotation with the default subtype.
2429 Constructs a PDAnnotationCircle from a COSDictionary.
2430 Renders a cloudy rectangle. @param left rectangle left coordinate @param bottom rectangle bottom coordinate
2431 Creates a cloudy polygon border from the provided path data. @param path array of points defining the polygon shape
2432 Constructs a PDAnnotationUnderline from a COSDictionary.
2433 Constructs a PDAnnotationStrikeout using a COSDictionary.
2434 Constructs a PDAnnotationSquiggly from a COSDictionary.
2435 Constructs a PDAnnotationHighlight from a COSDictionary.
2436 Constructs a PDLab color space from a given CIE LAB array. @param lab CIE LAB color array.
2437 Constructs a PDCalRGB object from a COSArray. @param rgb The RGB color components in a COSArray.
2438 Constructs a PDCalGray object from a COSArray. @param array The COSArray representing the CALGRAY data.
2439 Constructs a PDLab color space using COSName.LAB.
2440 Constructs a PDCalRGB object, initializing with the CALRGB name.
2441 Constructs a PDCalGray object, initializing with CALGRAY color space.
2442 Constructs a PDAnnotationSquare from a COSDictionary.
2443 Creates a new PDActionResetForm, setting its subtype.
2444 Creates a new `PDActionRemoteGoTo` action, setting its subtype.
2445 Creates a new PDActionNamed with the default subtype.
2446 Creates a new PDActionMovie, setting the sub-type.
2447 Adds a pattern resource to the dictionary. @param pattern The pattern object to add. @return COSName key of the added pattern.
2448 Adds a shading resource to the dictionary. @param shading The PDShading object to add. @return COSName key for the added shading.
2449 Adds an extended graphics state resource. @param extGState The extended graphics state object. @return COSName key of the added resource.
2450 Adds a color space resource to the dictionary. @param colorSpace The color space object to add. @return COSName key of the added color space.
2451 Adds a font resource to the dictionary. @param font The PDFont object to add. @return COSName key of the added font.
2452 Sets the border line style and width. @param lineWidth The line width. @param bs Border style dictionary. @param border Border array.
2453 Sets the destination for this outline item to a page. @param page The PDF page to set as the destination.
2454 Reads and initializes the font encoding and CMap. Handles predefined and custom CMap types, and checks for CID mappings.
2455 Adds a property to the resource dictionary. @param properties Property list to add; optional content group if so. @return COSName key of the added property.
2456 Adds an image resource to the dictionary. @param image The PDImageXObject to add. @return COSName key of the added image resource.
2457 Adds an XObject resource to the dictionary. @param xobject The XObject to add. @param prefix Prefix for the resource name. @return COSName key of the added resource.
2458 Creates a new PDActionLaunch, setting its subtype.
2459 Constructs a new PDActionJavaScript with the default sub-type.
2460 Creates a new PDActionImportData, setting its subtype.
2461 Creates a new PDActionHide, setting its subtype.
2462 Creates a new PDActionGoTo action. Sets the action subtype to SUB_TYPE.
2463 Creates a new `PDActionEmbeddedGoTo` with the specified sub-type.
2464 Constructs PDPageLabels from a document and COSDictionary. @param document PDF document. @param dict COSDictionary containing page label information.
2465 Gets the annotation's normal appearance, creating it if null.
2466 Gets the rollover appearance entry, creating if needed. Returns the entry or a new one if the existing is invalid.
2467 Gets an embedded date value, using null as default. @param embedded COSName of embedded dictionary @param key COSName representing the date key
2468 Gets the annotation's down appearance. Creates it if needed.
2469 Sets the button's value based on the provided index. @param index The index of the value to set. @throws IllegalArgumentException if index is out of bounds.
2470 Adds a form XObject resource to the dictionary. @param form The PDFormXObject to add. @return COSName key of the added resource.
2471 Gets the fractional display string from the COSDictionary. Returns FRACTIONAL_DISPLAY_DECIMAL if not found.
2472 Gets the starting page number. Returns 1 if not found.
2473 Gets the number of pages in the page tree. Returns 0 if the COUNT key is not found.
2474 Checks if a bit flag is set in the dictionary for a field. @param field COSName representing the field. @param bitFlag The bit flag to check. @return True if the bit flag is set, false otherwise.
2475 Gets an integer value from the dictionary. @param key Primary key. @param defaultValue Default if key not found.
2476 Gets an integer value from the dictionary. @param key Primary key. Returns -1 if not found.
2477 Gets an integer value from the dictionary. @param key Primary key. Returns -1 if key not found.
2478 Gets an integer from embedded dictionary, or default if null. @param embeddedDictionary Embedded dictionary key. @param key Primary key. @param defaultValue Default value if key not found.
2479 Returns the order of the function, defaults to 1.
2480 Checks if the PDF window should be centered. @return True if centered, false otherwise.
2481 Checks if the PDF document should fit the window. @return True if fit window is enabled, false otherwise.
2482 Checks if the menubar is hidden based on preferences. Returns true if hidden, false otherwise, using a default.
2483 Checks if the toolbar is hidden based on preferences. Returns true if hidden, false otherwise.
2484 Checks if the fly area is opaque. Returns false if not set.
2485 Checks if form needs appearances. Returns true if present, false otherwise.
2486 Returns the trusted mode flag. Defaults to false if absent.
2487 Checks if the document title should be displayed. Uses a default of false if the preference is absent.
2488 Gets the value of the NON_EFONT_NO_WARN flag. Returns true if the flag is not present.
2489 Gets the revision number from the COS object, default 0.
2490 Gets the PDF version from the dictionary. @return PDF version integer, 0 if not found.
2491 Gets the annotation index from the dictionary. Returns -1 if the key is not found.
2492 Gets the action flags from the action dictionary. @return Integer value representing the action flags.
2493 Gets the action flags. Returns 0 if not found.
2494 Gets the bits per coordinate value, caching the result. Returns -1 if not found in COS object.
2495 Gets the bits per color component. Returns -1 if not found in COS object.
2496 Gets the number of vertices per row, -1 if not defined.
2497 Gets the bits per flag value from the COS object, -1 if not found.
2498 Creates a PDShading object based on the shading dictionary type. @param shadingDictionary Dictionary containing shading properties. @return PDShading object of the appropriate type.
2499 Gets the length of the crypt filter dictionary. Returns 40 if the LENGTH key is not found.
2500 Gets the tiling type. Returns 0 if not found in dictionary.
2501 Creates a PDAbstractPattern from a COSDictionary. @param dictionary COSDictionary containing pattern definition. @param resourceCache Resource cache for pattern resources. @return PDAbstractPattern instance.
2502 Returns the font flags. Retrieves from dictionary if not set.
2503 Gets the justification of the annotation. Returns 0 if not found in the dictionary.
2504 Retrieves the document's permissions from the dictionary. @return Permissions integer value, 0 if not found.
2505 Gets the PDF revision number. @return Revision number, defaults to DEFAULT_VERSION.
2506 Gets the length of the encryption data. @return Length of encryption data, defaults to 40.
2507 Gets the paint type of the tiling pattern. Returns 0 if the paint type is not specified.
2508 Gets the annotation flags from the COSDictionary. Returns 0 if the key is not found.
2509 Checks if the digital signature is a pre-release version. Returns true if pre-release, false otherwise.
2510 Checks if the line annotation has a caption. Returns true if caption exists, false otherwise.
2511 Creates a BufferedImage from a PDImage. @param pdImage The image to decode. @param region Clip region. @param subsampling Subsampling factor. @param colorKey Color key array. @return BufferedImage representation of the image.
2512 Creates a WritableRaster from a PDImage. @param pdImage The PDImage to read from. @return WritableRaster representation of the image.
2513 Returns the stencil image for this object. @param paint Paint used for the stencil background @throws IllegalStateException if the image is not a stencil
2514 Calculates anchor rectangle for tiling pattern. @param pattern Tiling pattern object. @return Rectangle2D object with applied scaling.
2515 Creates a BufferedImage from a tiling pattern. @param drawer PageDrawer for rendering the pattern.
2516 Parses stamp annotation appearance XML to COSDictionary. @param appearanceXML XML element representing appearance. @return COSDictionary representing parsed appearance.
2517 Checks if the annotation is open. Returns true if "Open" property exists, otherwise false.
2518 Gets the page resources. Retrieves resources, inheriting from parent if needed.
2519 Gets the page rotation angle, defaults to 0 if not set.
2520 Gets the mix value for the action. Returns true if mix is enabled, false otherwise.
2521 Gets the repeat count for the action. Returns false if the repeat property is not set.
2522 Checks if the action is synchronous. Returns true if synchronous, false otherwise.
2523 Returns the value of the 'H' flag, defaulting to true if absent.
2524 Returns the text knockout flag, defaulting to true if absent.
2525 Gets the alpha source flag from the dictionary. Returns true if set, false otherwise.
2526 Returns true if automatic stroke adjustment is enabled. Uses default false if the property is not present.
2527 Gets the stroking overprint control from the dictionary. Returns true if overprint is enabled, false otherwise.
2528 Gets the media box for the page. Returns PDRectangle.LETTER if not found.
2529 Gets the anti-alias setting from the dictionary. Returns true if set, false otherwise.
2530 Checks if the transparency group is isolated. Returns true if isolated, false otherwise.
2531 Checks if the template should be renamed. Returns true if the rename flag is set, false otherwise.
2532 Checks if the icon should scale to fit the annotation. Returns true if FB is true, false otherwise.
2533 Retrieves the caption value for the annotation. Returns false if the caption is not set.
2534 Checks if metadata encryption is enabled. Returns true by default, as per PDF standard.
2535 Checks if the property is hidden. Returns true if hidden, false otherwise.
2536 Checks if the file specification is volatile. Returns true if volatile, false otherwise.
2537 Gets a boolean value for the given key, using a default. @param key The key to retrieve the boolean value for. @param defaultValue Default value if key is not found.
2538 Checks if the transparency group has knockout enabled. Returns true if knockout is enabled, false otherwise.
2539 Gets the Q value from the COS object, defaults to 0.
2540 Checks if the window UI is hidden, using false as default.
2541 Checks if timestamp is required, based on dictionary value.
2542 Sets a bit flag in a dictionary entry. @param field Key of the dictionary entry. @param bitFlag The bit flag to set/unset. @param value True to set, false to unset.
2543 Constructs a PDFObjectStreamParser from a COSStream. @param stream COSStream to parse. @param document COSDocument containing the stream.
2544 Constructs a PDCIDFontType0, parsing and validating font data. Handles embedded or fallback fonts, logging warnings/errors.
2545 Constructs a PDCIDFontType2 with font dictionary, parent, and TrueType font. @param fontDictionary Font dictionary. @param parent Parent PDType0Font. @param trueTypeFont TrueType font or null.
2546 Reads a CMap from a COSBase object (Name or Stream). @param base COSBase object containing CMap data. @return CMap object or throws IOException if invalid.
2547 Gets the rotation angle of the annotation. Returns 0 if the rotation key is not found.
2548 Writes the body of the PDF document, including trailer info. @param doc The COSDocument to write. @throws IOException if an I/O error occurs.
2549 Gets attribute name, using default if not found. @param name Attribute name to retrieve. @param defaultValue Default value if name is absent.
2550 Gets the border style. Returns STYLE_SOLID if not found.
2551 Retrieves the root of the structure tree. Returns null if no root is found.
2552 Retrieves the kids (child objects) of this node. Returns a list of PDF objects or an empty list if none.
2553 Gets the encryption object for the document. Lazily initializes if the document is encrypted.
2554 Prepares decryption settings, handling encryption and keys. @throws IOException if an I/O error occurs during decryption.
2555 Creates a Type1ShadingContext with specified parameters. @param shading The Type 1 shading object.
2556 Returns the page number of the target directory. Returns -1 if the page number is not specified.
2557 Gets the embedded file with Unicode encoding. @return PDEmbeddedFile object or null if not found.
2558 Retrieves the embedded file from the EF dictionary using UNIX key. @return PDEmbeddedFile object or null if not a COSStream.
2559 Retrieves the embedded MAC file as a PDEmbeddedFile. @return PDEmbeddedFile object or null if not found.
2560 Retrieves the embedded file as a PDEmbeddedFile or null. Uses COSName.F to get the embedded file stream.
2561 Gets the number of open child nodes, defaulting to 0.
2562 Retrieves a color space by name. @param name Color space name. @return PDColorSpace object or new instance.
2563 Removes page resources from the resource cache. Cleans up page-specific resources, not inherited ones.
2564 Retrieves COS objects of a specified type. @param type COS object type to retrieve. @return List of COS objects of the specified type.
2565 Gets the top index of the list box. Returns 0 if the key is not found.
2566 Gets the Q value from the dictionary, defaults to 0.
2567 Retrieves the embedded file's DOS object. @return PDEmbeddedFile or null if not a COSStream.
2568 Creates a `RadialShadingContext` with specified parameters. @param shading The radial shading type. @param colorModel The color model. @param xform Transform matrix. @param matrix Matrix. @param deviceBounds Rectangle defining device bounds.
2569 Constructs a TriangleBasedShadingContext with provided data. @param shading The PDShading object.
2570 Creates an AxialShadingContext with specified parameters. @param shading The shading object. @param colorModel The color model. @param xform Transform.
2571 Sets the 'V' required flag in the COSDictionary. @param flag True if 'V' is required, false otherwise.
2572 Sets whether a digest method is required for the seed value. @param flag True if required, false otherwise.
2573 Sets the 'Subject' attribute as required in the certificate. @param flag True to mark 'Subject' as required, false otherwise.
2574 Sets the subfilter required flag. @param flag True if subfilter is required, false otherwise.
2575 Sets the issuer flag to indicate whether it's required. @param flag True if issuer is required, false otherwise.
2576 Creates a cloudy rectangle based on the given rectangle. @param rd The rectangle to use for creating the cloudy shape.
2577 Draws a cloudy ellipse based on parameters and intensity. @param leftOrig Left coordinate of the ellipse. @param bottomOrig Bottom coordinate of the ellipse. @param rightOrig Right coordinate of the ellipse. @param topOrig Top coordinate of the ellipse.
2578 Sets whether a filter is required for the seed value. @param flag True if filter is required, false otherwise.
2579 Sets whether the annotation's contents are locked. @param lockedContents True to lock contents, false otherwise.
2580 Sets the "Toggle No View" flag on the annotation. @param toggleNoView True to enable, false to disable.
2581 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
2582 Sets the read-only flag for the annotation. @param readOnly True to make annotation read-only.
2583 Sets the "No View" flag for the annotation. @param noView True to set, false to unset the flag.
2584 Sets the "No Rotate" flag for the annotation. @param noRotate True to disable rotation, false otherwise.
2585 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false otherwise.
2586 Sets the printed flag for the annotation. @param printed True if annotation is printed, false otherwise.
2587 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
2588 Sets the invisible flag for the annotation. @param invisible True to make the annotation invisible.
2589 Sets the locked contents flag for the annotation. @param lockedContents True to lock, false to unlock contents.
2590 Prepares a PDF document for encryption. Sets encryption parameters and calculates key.
2591 Sets whether a reason is required for the digital signature. @param flag True if reason is required, false otherwise.
2592 Sets whether a legal attestation is required for the seed. @param flag True if legal attestation is required, false otherwise.
2593 Creates a PDAnnotation based on the provided COSBase. @param base COSBase object representing the annotation @return PDAnnotation instance or throws IOException
2594 Draws a form to the content stream. @param form The PDFormXObject to draw. @throws IllegalStateException if called in text mode.
2595 Draws an image at the specified matrix transformation. @param image The image to draw. @param matrix Transformation matrix for the image.
2596 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x x-coordinate. @param y y-coordinate. @param width Image width. @param height Image height.
2597 Constructs a PDActionJavaScript with the given JavaScript string. @param js The JavaScript action string to initialize with.
2598 Sets a marked content point with associated properties. @param tag Tag identifying the marked content. @param propertyList Properties for the marked content.
2599 Begins a marked content sequence with specified tag and properties. @param tag Tag for the marked content. @param propertyList Properties for the marked content.
2600 Adds a shading fill to the content stream. @param shading The PDShading object to add. @throws IllegalStateException if called in text mode.
2601 Sets graphics state parameters. @param state Extended graphics state object. @throws IOException If an I/O error occurs.
2602 Checks if an optional content group is enabled by name. @param groupName Name of the optional content group. @return True if enabled, false otherwise.
2603 Checks if an optional content group is enabled. @param group The optional content group to check. @return True if enabled, false otherwise.
2604 Retrieves page labels from the document's catalog. @return PDPageLabels object or null if not present.
2605 Fixes PDF destinations by setting or nulling associated pages. @param destinationDocument The document to fix.
2606 Sets the font and size for content streaming. @param font The PDFont object to set. @param fontSize The font size.
2607 Sets whether additional revision information is required. @param flag True if revision info is required, false otherwise.
2608 Constructs a PDFPrintable with provided document, scaling, and rendering options.
2609 Constructs a PDFRenderer with the given document. @param document The PDF document to render.
2610 Creates a new document if split is needed or destination is null.
2611 Writes the PDF header, including version and comments. Sets PDF version if compression is enabled.
2612 Draws an inline image at specified coordinates with given dimensions. @param inlineImage Inline image object to draw. @param x X coordinate. @param y Y coordinate. @param width Image width. @param height Image height.
2613 Sets optional content properties and updates PDF version if needed. @param ocProperties Optional content properties to set.
2614 Increments the revision number of the structure element.
2615 Sets the signatures exist flag in the form dictionary. @param signaturesExist True if signatures exist, false otherwise.
2616 Sets the append-only flag for the form. @param appendOnly True to enable, false to disable.
2617 Sets the sort flag for choice fields. @param sort True to enable sorting, false otherwise.
2618 Sets whether the choice field allows multiple selections. @param multiSelect True to enable multi-select, false otherwise.
2619 Sets the "do not spell check" flag for the choice field. @param doNotSpellCheck True to enable, false to disable.
2620 Sets the "commit on selection change" flag. @param commitOnSelChange True to commit changes on selection.
2621 Sets the combo flag for the choice field. @param combo True to enable combo mode, false otherwise.
2622 Sets the edit flag for the combo box. @param edit True to enable editing, false otherwise.
2623 Sets the read-only status of the field. @param readonly True to make the field read-only.
2624 Sets the required flag for the field. @param required True if the field is required, false otherwise.
2625 Sets the 'no export' flag for the field. @param noExport True to disable export, false otherwise.
2626 Constructs a PDPushButton associated with a PDAcroForm. Sets the button's field type to "Btn" in its dictionary.
2627 Constructs a PDRadioButton associated with a PDAcroForm. Sets the radio button field flag in the COS object.
2628 Sets whether radio buttons operate in unison. @param radiosInUnison True if radios are in unison, false otherwise.
2629 Sets the multiline flag for the text field. @param multiline True enables multiline input.
2630 Sets the password flag for the text field. @param password True to enable password protection.
2631 Sets the file select flag. @param fileSelect True to enable, false to disable.
2632 Sets the "Do Not Spell Check" flag for the text field. @param doNotSpellCheck True to disable spell check.
2633 Sets the "Do Not Scroll" flag for the text field. @param doNotScroll True to set the flag, false to unset it.
2634 Sets the COMB flag for the text field. @param comb True to set the COMB flag, false to unset.
2635 Sets the rich text flag for the text field. @param richText True to enable rich text, false otherwise.
2636 Creates a CCITT image from a TIFF reader. @param document PDF document. @param reader RandomAccessRead object for TIFF file. @param number Number of pages to skip. @return PDImageXObject or null if no image data.
2637 Sets the bold flag in the COS object. @param bold True to set bold, false to unset.
2638 Sets whether the Subject DN is a required flag. @param flag True if required, false otherwise.
2639 Sets the "Toggle No View" flag for the annotation. @param toggleNoView True to set, false to unset.
2640 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
2641 Gets the number of pages in the PDF document.
2642 Sets the "No View" flag for the annotation. @param noView True to set the flag, false to clear it.
2643 Sets the "no rotate" flag for the annotation. @param noRotate True to disable rotation, false otherwise.
2644 Sets the OID required flag in the certificate dictionary. @param flag True if OID is required, false otherwise.
2645 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false to enable.
2646 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
2647 Sets the invisible flag for the annotation. @param invisible True to make annotation invisible.
2648 Retrieves a page at the specified index. @param index 0-based index of the page to retrieve. @return PDPage object representing the page.
2649 Sets the italic flag in the COS object. @param italic True to set italic, false to unset.
2650 Sets the Key Usage Required flag in the certificate dictionary. @param flag True to require, false to unset.
2651 Sets the URL required flag in the dictionary. @param flag True if URL is required, false otherwise.
2652 Adds a new child outline item as the first child. Requires the new child to be a single node.
2653 Adds a child outline item as the last child of this node. Requires the child to be a single node and updates parent count.
2654 Parses cross-reference object stream, extracts object details. @param objByteOffset Offset of the object; @param isStandalone flag @return Previous object offset.
2655 Sets the printed flag for the annotation. @param printed True if printed, false otherwise.
2656 Sets the read-only flag for the annotation. @param readOnly True to set read-only, false otherwise.
2657 Checks if the annotation is marked as printed. Uses COSName.F and FLAG_PRINTED to determine print status.
2658 Gets the line join style from the dictionary. Returns -1 if not found.
2659 Returns the struct parents count for the page. @return Integer value; -1 if not found.
2660 Wraps an OutputStream with a PredictorOutputStream if predictor > 1. @param out Original OutputStream. @param decodeParams Dictionary containing predictor parameters. @return Wrapped OutputStream or original if predictor <= 1.
2661 Gets the denominator value from the underlying COSDictionary.
2662 Gets an integer from embedded dictionary, or -1 if null. @param embeddedDictionary Embedded dictionary key. @param key Primary key.
2663 Gets the non-stroking overprint control from the dictionary. Returns true if enabled, false otherwise.
2664 Checks if the annotation has the "no view" flag set. Uses the COSDictionary to determine the flag status.
2665 Checks if the node is open (has child nodes). Uses getOpenCount() to determine open status.
2666 Creates a PDF field based on its type and properties. @param form AcroForm. @param field Field dictionary. @param parent Parent field.
2667 Checks if the PDF number format dictionary has the "FD" flag set. Returns true if set, false otherwise.
2668 Checks if the popup is open. Returns true if open, false otherwise.
2669 Creates a TilingPaint with a pattern, color space, color, and transform. @param drawer PageDrawer for rendering the pattern
2670 Checks if the annotation has the "no rotate" flag set. Uses getFlag to determine if the flag is present.
2671 Gets the line cap style from the dictionary. Returns -1 if not found.
2672 Gets the MCID value from the marked content properties. Returns -1 if properties are null.
2673 Gets the next key for the parent tree. Returns -1 if not found.
2674 Gets the Marker Context Identifier (MCID) from the COSDictionary.
2675 Gets the bits per sample value from the COS object.
2676 Adds a class name and revision number to the COS array. @param className The class name to add.
2677 Handles attribute changes, updating the COS array or creating it. @param attributeObject The attribute object that changed.
2678 Writes PDF document and signature data. Handles encryption, ID generation, and incremental updates.
2679 Checks if the annotation is invisible based on the dictionary.
2680 Checks if the annotation contents are locked. Uses getFlag to determine the locked contents status.
2681 Checks if mouse position should be tracked based on action. @return True if "IsMap" is true in the action dictionary.
2682 Checks if the annotation has the no-zoom flag set. @return True if no-zoom is enabled, false otherwise.
2683 Checks if the element is marked as suspect. Returns true if "Suspects" key exists and is true.
2684 Checks if the dictionary uses user properties, returns false if not.
2685 Checks if the element is marked. @return True if marked, false otherwise.
2686 Gets the rotated media box for a page, swapping width/height if rotated. @param page The PDF page to get the media box from. @return PDRectangle representing the rotated media box.
2687 Validates a button value against allowed options. @param value The value to check. Throws exception if invalid.
2688 Checks if the "Toggle No View" flag is set on the annotation.
2689 Checks if the annotation is locked. Uses getFlag to determine the locked status.
2690 Checks if the annotation is read-only. Uses getFlag to determine read-only status.
2691 Creates a BufferedImage from the image object. @param region Clip region. @param subsampling Subsampling factor.
2692 Decodes a PDImage into a BufferedImage using default region and subsampling. @param pdImage The image to decode. @param colorKey Color key array. @return BufferedImage representation of the image.
2693 Pushes resources from a content stream. @param contentStream The content stream to get resources from. @return The previous resources.
2694 Calculates an affine transform to center the overlay. @param page The page to calculate transform for. @param overlayMediaBox Overlay's media box. @return AffineTransform object.
2695 Gets the structural parent of the annotation. Returns -1 if not found.
2696 Retrieves a PDXObject by name, caching if applicable. @param name XObject name. @return PDXObject or null if not found.
2697 Constructs a `GouraudShadingContext` with provided parameters. @param shading The shading object. @param colorModel The color model. @param xform The affine transform. @param matrix The matrix.
2698 Creates a COSInputStream for reading stream data. Uses default decoding options. @return COSInputStream for reading the stream.
2699 Parses an object stream object, returning COSBase or null. @param objstmObjNr Object stream number. @param key COSObjectKey for the object.
2700 Returns a stream for reading the page content. Returns an empty stream if no content exists.
2701 Checks if the annotation has no rotation. Uses COSName.F and FLAG_NO_ROTATE flags.
2702 Constructs a PDCIDFontType2 with a font dictionary and parent font. @param fontDictionary Font dictionary. @param parent Parent PDType0Font.
2703 Returns a PDCIDFontType2 instance using the font, parent, and TTF.
2704 Adds a COSBase object to the pool, handling key management. @param key The COSObjectKey for the object. @param base The COSBase object to add. @return The dereferenced COSBase object.
2705 Checks if the annotation is flagged as printed. Uses getFlag to determine the printed flag status.
2706 Protects the document with a given protection policy. Applies security settings and throws exception if handler missing.
2707 Gets the glyph name for a given character code. @param code The character code to look up.
2708 Maps a character code to a glyph ID, handling embedded/non-embedded fonts. @param code The character code to map. @return Glyph ID or default value if mapping fails.
2709 Gets the Mac subtype from the embedded file parameters. Returns null if parameters are not found.
2710 Retrieves the role map from the structure tree root. Returns empty map if no root or role map exists.
2711 Checks if filter is required based on the seed value's flag.
2712 Checks if the choice field's sorting flag is set.
2713 Checks if the choice field allows multiple selections. Uses getFlag to determine the multi-select flag.
2714 Processes PDF operators from a content stream. Parses tokens and executes operators, managing color processing.
2715 Checks if the annotation is hidden. Uses the COSDictionary to determine the hidden state.
2716 Adds a page to the page tree, updating parent and ancestor counts. @param page The PDPage object to add to the tree.
2717 Checks if the annotation's contents are locked. Uses COSName.F and FLAG_LOCKED_CONTENTS to determine.
2718 Checks if the annotation is hidden. Uses getFlag to determine the hidden state.
2719 Checks if the button is a radio button. Uses getFlag to determine the radio button flag.
2720 Checks if the button is a push button. Uses getFlag to determine the button type.
2721 Checks if the subfilter flag is set in the COS object.
2722 Checks if digest method is required based on the dictionary.
2723 Checks if the "V" flag is set in the COS object.
2724 Checks if the reason field is required based on the COS object.
2725 Checks if legal attestation is required based on the COS object.
2726 Checks if adding revision info is required. Uses COSName.FF and FLAG_ADD_REV_INFO to determine.
2727 Checks if the subject flag is set in the dictionary.
2728 Checks if the issuer flag is set in the dictionary.
2729 Checks if the OID flag is required in the certificate dictionary.
2730 Checks if the Subject DN flag is required in the dictionary.
2731 Checks if the key usage flag is required in the dictionary.
2732 Checks if the URL flag is set in the dictionary. Returns true if the flag is set, false otherwise.
2733 Checks if the outline item's text is italicized. Uses COSName.F and ITALIC_FLAG to check the flag.
2734 Checks if the outline item's text is bold. Uses COSName.F and BOLD_FLAG to determine boldness.
2735 Checks if signatures exist in the form dictionary. Uses getFlag to determine signature presence.
2736 Checks if the form field is append-only. Uses dictionary to determine append-only flag status.
2737 Checks if spell checking is disabled for this choice field.
2738 Removes a node from the page tree and updates ancestor counts. @param node The COSDictionary representing the node to remove.
2739 Gets the Mac Creator string from the embedded file parameters. Returns null if the parameter dictionary is not found.
2740 Gets the owner key for the PDF document. @return Owner key as bytes, or null if not set.
2741 Retrieves the user key from the dictionary. @return User key as byte array or null if not found.
2742 Calculates the horizontal displacement for a character. @param code The character code. Returns a Vector representing displacement.
2743 Gets the Mac Resource Fork string from the embedded file. Returns null if the parameter dictionary is not found.
2744 Calculates the width of a string encoded with this font. @param text The string to calculate width for. @return The total width of the string.
2745 Retrieves a PDAbstractPattern by name, using cache if available. @param name Pattern name. @return PDAbstractPattern or null if not found.
2746 Gets a CIDFontMapping based on base font and CID info. @param baseFont Base font name. @param fontDescriptor Font descriptor. @param cidSystemInfo CID system info.
2747 Sets the hidden status of the property. Notifies listeners and updates the underlying COS object.
2748 Retrieves a PDShading object by name, using caching if available. @param name Shading object name. @return PDShading object or null if not found.
2749 Checks if the annotation is invisible. Uses getFlag to determine invisibility status.
2750 Checks if the annotation is read-only. Uses getCOSObject to check the read-only flag.
2751 Gets an integer value from the dictionary with a default. @param name Attribute name. @param defaultValue Value if attribute is not found.
2752 Gets the maximum length allowed for the text field. Returns -1 if not specified in the dictionary.
2753 Loads an FDF document from a file. @param filename Path to the FDF file. @return FDFDocument object. @throws IOException if an I/O error occurs.
2754 Gets the value of the 'P' property from the dictionary. Returns -1 if the property is not found.
2755 Checks if the "no zoom" flag is set for the annotation. Returns true if the flag is set, false otherwise.
2756 Returns the shading object or creates it if it doesn't exist. @return PDShading object representing the shading pattern.
2757 Prepares decryption process based on provided materials. @param encryption Encryption object containing filter data. @param documentIDArray Document ID array. @param decryptionMaterial Decryption material for decryption.
2758 Checks if the annotation is locked. Uses COSDictionary flag to determine lock status.
2759 Checks if the field is required. Uses dictionary to check the FLAG_REQUIRED flag.
2760 Clips a rectangle to the media box dimensions. @param box The rectangle to clip. @return A new PDRectangle representing the clipped area.
2761 Checks if changes to the choice field should commit on selection.
2762 Checks if the "Toggle No View" flag is set. Uses COSDictionary to determine the flag's status.
2763 Adds an attribute object to the structure element's attribute array. @param attributeObject The attribute to add.
2764 Checks if the choice field is a combo box. Uses getFlag to determine the combo box flag.
2765 Checks if the combo box is editable. Uses getFlag to determine editability status.
2766 Checks if the field is read-only. Uses dictionary to determine read-only status.
2767 Checks if the "no export" flag is set for the field. Uses dictionary to determine if the flag is present.
2768 Checks if the "No View" flag is set for the annotation. Uses getFlag to determine if the flag is present.
2769 Checks if the text field supports multiline input. Uses getFlag to determine if the multiline flag is set.
2770 Checks if the field is password-protected. Uses COSName.FF to determine password status.
2771 Checks if the file select flag is set for the field. Returns true if the flag is set, false otherwise.
2772 Checks if spell checking is disabled for the field.
2773 Checks if the "do not scroll" flag is set for the field. Returns true if the flag is set, false otherwise.
2774 Checks if the field is a combo box. Uses getFlag to determine combo box status.
2775 Checks if the text field supports rich text formatting. Uses getFlag to determine the rich text flag status.
2776 Checks if radio buttons are in unison (synchronized). Uses getFlag to determine the unison state.
2777 Sets the italic flag to the specified value. @param flag True to enable italic, false to disable.
2778 Sets the stroking color, writing operands and operators to the stream. @param color The color object to set. @throws IOException If an I/O error occurs.
2779 Draws an image at specified coordinates. @param inlineImage Image object to draw. @param x X coordinate. @param y Y coordinate.
2780 Prepares a PDF document for encryption. Sets encryption parameters and prepares passwords.
2781 Retrieves the page number from the destination array. Returns -1 if the array is empty.
2782 Retrieves a page from the document at the given index. @param pageIndex 0-based index of the page to retrieve.
2783 Sets visual signature from an input stream. @param is Input stream containing signature data. @throws IOException if an I/O error occurs.
2784 Sets visual signature from a file. @param file File containing the visual signature data. @throws IOException if an I/O error occurs.
2785 Loads a PDF document with optional password, keystore, and alias. @param randomAccessRead Input stream for PDF content.
2786 Loads a PDF document from a RandomAccessRead with optional password. @param randomAccessRead Source for PDF content @param password Password for encrypted PDF (optional) @return PDDocument object representing the loaded PDF
2787 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Source for reading the PDF data. @return PDDocument object representing the loaded PDF.
2788 Loads a PDF document from byte array, with optional password/keystore. @param input PDF data as byte array @return PDDocument object or null if loading fails
2789 Adds a page to the document's page tree. @param page The PDPage object to add.
2790 Initializes PageExtractor with the source document and sets end page.
2791 Constructs a PDFPageable with specified document and settings. @param document The PDF document. @param orientation Page orientation.
2792 Parses xref tables and resolves trailer, returning COSDictionary. @param document Document to parse. @param startXRefOffset Starting offset for xref parsing.
2793 Parses a PDF object dynamically. @param objKey Object key. @param requireExisting Flag for object existence. @return COSBase object or null if not found. @throws IOException if an I/O error occurs.
2794 Updates the parent's open count based on a delta. Adjusts open count if parent exists and is open.
2795 Sets the button's value, using export values if available. @param value The new value to associate with the button.
2796 Sets the fixed-pitch flag. @param flag True to enable, false to disable.
2797 Sets the serif flag to indicate serif font style. @param flag True if serif, false otherwise.
2798 Sets the symbolic flag to the specified value. @param flag True to set, false to clear the symbolic flag.
2799 Sets the script flag to the given value. @param flag True to enable, false to disable.
2800 Sets the non-symbolic flag. @param flag True to set, false to clear.
2801 Sets/clears the "all caps" flag for the font. @param flag True to set, false to clear.
2802 Sets the small cap flag. @param flag True to enable, false to disable.
2803 Sets the force bold flag. @param flag True to force bold, false to clear.
2804 Creates a CCITT image from a byte array. @param document PDF document. @param byteArray Image data. @param number Number of pages to skip. @return PDImageXObject
2805 Creates a CCITT image from a file. @param document PDF document. @param file File to read from. @param number Pages to skip.
2806 ```java protected FDFAnnotation(Element element) throws IOException { // Initialize the annotation with default values. this(); // Get the page number from the element attribute and parse it to an integer. String page = element.getAttribute("page"); if (page == null || page.isEmpty()) { throw new IOException("Error: missing required attribute 'page'"); } setPage(Integer.parseInt(page)); // Parse the color attribute if present and valid. String color = element.getAttribute("color"); if (color != null && color.length() == 7 && color.charAt(0) == '#') { int colorValue = Integer.parseInt(color.substring(1, 7), 16); setColor(new Color(colorValue)); } // Set the date attribute. setDate(element.getAttribute("date")); // Process the flags attribute to set various annotation properties. String flags = element.getAttribute("flags"); if (flags != null) { String[] flagTokens = flags.split(","); for (String flagToken : flagTokens) { switch (flagToken) { case "invisible": setInvisible(true); break; case "hidden": setHidden(true); break; case "print": setPrinted(true); break; case "nozoom": setNoZoom(true); break; case "norotate": setNoRotate(true); break; case "noview": setNoView(true); break; case "readonly": setReadOnly(true); break; case "locked": setLocked(true); break; case "togglenoview": setToggleNoView(true); break; } } } // Set the annotation name. setName(element.getAttribute("name")); // Parse the rectangle attribute to define the annotation's dimensions and position. String rect = element.getAttribute("rect"); if (rect == null) { throw new IOException("Error: missing attribute 'rect'"); } String[] rectValues = rect.split(","); if (rectValues.length != 4) { throw new IOException("Error: wrong amount of numbers in attribute 'rect'"); } float[] values = new float[4]; for (int i = 0; i < 4; i++) { values[i] = Float.parseFloat(rectValues[i]); } setRectangle(new PDRectangle(COSArray.of(values))); // Set the annotation title. setTitle(element.getAttribute("title")); // Set the creation date. setCreationDate(DateConverter.toCalendar(element.getAttribute("creationdate"))); // Set the annotation opacity if provided. String opac = element.getAttribute("opacity"); if (opac != null && !opac.isEmpty()) { setOpacity(Float.parseFloat(opac)); } // Set the annotation subject. setSubject(element.getAttribute("subject")); // Set the annotation intent. String intent = element.getAttribute("intent"); if (intent.isEmpty()) { // Handle cases where the intent attribute is missing or empty. intent = element.getAttribute("IT"); } if (!intent.isEmpty()) { setIntent(intent); } // Extract the annotation's contents using XPath. XPath xpath = XPathFactory.newInstance().newXPath(); try { setContents(xpath.evaluate("contents[1]", element)); } catch (XPathExpressionException e) { LOG.debug("Error while evaluating XPath expression for richtext contents", e); } // Extract and set the annotation's rich text content. try { Node richContents = (Node) xpath.evaluate("contents-richtext[1]", element, XPathConstants.NODE); if (richContents != null) { setRichContents(richContentsToString(richContents, true)); setContents(richContents.getTextContent().trim()); } } catch (XPathExpressionException e) {
2807 Sets the non-stroking color, writing operands and operators. @param color The color object to set. @throws IOException If an I/O error occurs.
2808 Gets the crop box for the page, or the media box if none. Uses inherited value or defaults to media box dimensions.
2809 Inserts generated combined appearance for a text field. @param contents Content stream for appearance. @param appearanceStream Appearance stream. @param font PDFont used for rendering. @param fontSize Font size.
2810 Adds structure elements to the pool, handling dereferencing. Dereferences objects and adds them to the pool if needed.
2811 Gets the standard structure type, potentially mapping it.
2812 Creates a descendant font based on dictionary and parent font. @param dictionary Font dictionary. @param parent Parent PDType0Font. @throws IOException if font type is invalid.
2813 Collects patches from a shading dictionary. @param xform Affine transform. @param matrix Transformation matrix. @param controlPoints Control points count. @return List of patches or empty list on error.
2814 Creates a COSInputStream for reading stream data. Delegates to the underlying COSStream's createInputStream.
2815 Converts stream content to a String. Returns empty string if an IOException occurs.
2816 Creates a cloudy ellipse based on a rectangle's dimensions. @param rd The rectangle defining the ellipse's bounds.
2817 Retrieves the parent markup annotation. Returns null if the parent can't be constructed or is incorrect type.
2818 Retrieves the annotation this is a reply to. @return PDAnnotation or null if no reply-to annotation exists.
2819 Notifies the structure element of changes to this attribute.
2820 Saves the document incrementally to the specified output stream. @param output Output stream for saving the incremental PDF.
2821 Writes the PDF document to the output stream. @param doc The PDF document to write.
2822 Sets the default value for the button. @param value The default value to set.
2823 Retrieves the referenced object (XObject or Annotation). Returns null if no valid object is found or an error occurs.
2824 Retrieves annotations from the page, filtered by AnnotationFilter. @param annotationFilter Filter to apply to annotations @return List of PDAnnotation objects
2825 Imports optional content properties from source document. @param srcDoc Source PDF document to copy properties from.
2826 Constructs a PDFPrintable with default PDFRenderer. @param document The PDF document to print. @param scaling The scaling factor.
2827 Fetches the CMap UCS2 based on font properties and CID system info.
2828 Appends a kid with the given MCID. @param markedContent Marked content to append, must not be null.
2829 Removes a page from the page tree at the specified index. @param index 0-based index of the page to remove.
2830 Decodes LZW data from input stream to output stream. @param encoded Input stream. @param decoded Output stream. @param parameters Decoding parameters. @param index Index. @return DecodeResult object.
2831 Decodes JPX data from input stream to output stream. @param encoded Input stream with JPX data @param decoded Output stream for decoded data @param parameters Decoding parameters
2832 Creates a BufferedImage from the image object. Uses default region and subsampling factor.
2833 Creates a TilingPaint with a pattern and transform. @param drawer PageDrawer for rendering the pattern @param pattern PDTilingPattern to use for tiling @param xform AffineTransform for pattern transformation
2834 Processes a content stream, applying transformations and operators. @param contentStream The PDF content stream to process.
2835 Processes a PDF annotation, handling appearance and transformations. @param annotation The annotation to process. @param appearance The appearance stream for the annotation.
2836 Checks if the font is all caps. Uses isFlagBitOn to determine the flag status.
2837 Checks if the font is italic. Uses isFlagBitOn to determine italic status.
2838 Checks if the font is non-symbolic. Uses isFlagBitOn to check the FLAG_NON_SYMBOLIC bit.
2839 Checks if the script flag is set in the font descriptor.
2840 Checks if the font is symbolic. Uses isFlagBitOn to determine symbolic font status.
2841 Checks if the font is a serif font. Uses isFlagBitOn to determine the serif flag.
2842 Retrieves a pattern by name from resources. @param color The color object containing the pattern name. @return PDAbstractPattern or throws IOException if not found.
2843 Inserts a new page after a specified previous page. @param newPage The page to insert. @param prevPage The page to insert after.
2844 Inserts a new page before an existing page in the tree. @param newPage The page to insert. @param nextPage Page before which to insert the new page.
2845 Processes a PDF tiling pattern, applying color and transformations. @param tilingPattern The tiling pattern to process.
2846 Checks if the font is a small cap font. Uses isFlagBitOn to determine the value of the FLAG_SMALL_CAP.
2847 Creates a PDField using the provided form, dictionary, and parent.
2848 Removes a page from the page tree. @param page The PDPage object to remove.
2849 Processes a Type3 stream, applying transformations and operators. @param charProc Type3 character stream to process @param textRenderingMatrix Transformation matrix for rendering
2850 Processes a transparency group, managing graphics state and operators. @param group The transparency group to process. @throws IOException if an I/O error occurs.
2851 Checks if the field is a combo box with specific properties.
2852 Prepares decryption by setting filters, lengths, and keys. Handles encryption versions 4-6 and AES variants.
2853 Checks if the font is fixed-pitch. Uses isFlagBitOn to determine the font's fixed-pitch status.
2854 Gets the width of a space character in the font. Caches the value; returns default if not found.
2855 Checks if the font's bold flag is forced. Uses isFlagBitOn to determine the flag's state.
2856 Creates a FDFAnnotationStamp from an Element. @param element XML element representing the stamp. @throws IOException if an I/O error occurs during parsing.
2857 Constructs a `FDFAnnotationSquare` from an XML element. @param element XML element representing the annotation. @throws IOException if fringe attribute is invalid.
2858 Creates an FDFAnnotationFreeText from an XML element. @param element XML element representing the annotation. @throws IOException if there's an I/O error during processing.
2859 Creates an FDFAnnotationInk from an XML element. @param element XML element containing ink data. @throws IOException if 'gesture' element is missing.
2860 Creates a FDFAnnotationLine from an XML element. Parses attributes like start/end coordinates and styles.
2861 Creates an FDFAnnotationLink from an Element. @param element The XML element representing the link. @throws IOException if an I/O error occurs.
2862 Constructs a FDFAnnotationPolygon from an XML element. @param element XML element containing polygon data. @throws IOException if initialization fails.
2863 Creates a polyline annotation from an XML element. @param element XML element representing the annotation. @throws IOException if initialization fails.
2864 Retrieves all annotations from the page. @return List of PDAnnotation objects on the page.
2865 Imports a PDF page as a form XObject. @param sourceDoc Source PDF document. @param page The page to import. @return A PDFormXObject representing the imported page.
2866 Constructs a PDFPrintable with default PDFRenderer. @param document The PDF document to print. @param scaling The scaling factor.
2867 Initializes the annotation from an XML element. @param element XML element representing the annotation.
2868 Starts a marked content sequence, handling hidden OCGs. @param tag The tag associated with the sequence. @param properties Properties of the marked content sequence.
2869 Renders a form, skipping if hidden. Restores linePath if content is rendered.
2870 Sets the non-stroking color, writing operands and operators. @param color The color object to set. @throws IOException If an I/O error occurs.
2871 Finds the destination page based on the outline item's destination. @param doc The PDF document. @return PDPage object or null if not found.
2872 Calculates page dimensions from a PDF page. @param document The PDF document. @param page The page number.
2873 Imports a page into the document. Copies page attributes. @param page The PDPage object to import. @return Imported PDPage object.
2874 Creates a PDF template document and adds a page to it. @param page The PDPage object to add to the template.
2875 Constructs a PDFPageable with the given PDF document. @param document The PDF document to paginate.
2876 Constructs a PDFPageable with a document and orientation. @param document The PDF document. @param orientation Page orientation.
2877 Constructs a PDFPageable with document, orientation, and border. @param document The PDF document. @param orientation Page orientation. @param showPageBorder Whether to show the page border.
2878 Constructs a PDFPageable with document, orientation, border, and DPI. @param document The PDF document. @param orientation Page orientation.
2879 Loads a PDF document from a byte array, optionally with password. @param input PDF data as byte array @param password Password for encrypted PDF, if any. @return PDDocument object or null if loading fails.
2880 Loads a PDF document from a file, handling encryption if present. @param file The file to load. @param password Password for decryption, if applicable.
2881 Loads a PDF document from a file, handling encryption. @param file The file to load. @param password Password for decryption, if applicable.
2882 Constructs a FDFAnnotationFileAttachment from an XML element. @param element XML element representing the attachment.
2883 Sets the stroking color, writing operands and operators to stream. @param color The color object to set. @throws IOException If an I/O error occurs.
2884 Retrieves the PDF trailer dictionary, rebuilding if necessary. Parses xref tables and handles decryption/object streams. @return COSDictionary representing the trailer. @throws IOException if an I/O error occurs.
2885 Constructs FDF annotation from an Element, parsing its "coords" attribute. @param element Element containing annotation data. @throws IOException if "coords" attribute is missing or invalid.
2886 Creates an FDFAnnotationText from an XML element. Sets icon, state, and state model based on attributes.
2887 Sets the visual signature using properties. @param visSignatureProperties Properties for the signature. @throws IOException if an I/O error occurs.
2888 Creates a FDFAnnotationCircle from an XML element. @param element XML element representing the circle annotation @throws IOException if fringe attribute is invalid
2889 Removes a page from the document. @param page The PDPage object to remove.
2890 Creates a CCITT image from a file. @param document PDF document. @param file File to read from.
2891 Retrieves string value from COSBase, handling strings/streams. Returns "" if null or unsupported type.
2892 Recursively finds a child field by name. @param name Field name array, @param nameIndex Current name index @return PDField object or null if not found
2893 Retrieves a list of PDF form fields from the form dictionary. Returns an empty list if no fields are found.
2894 Creates a Paint object from a PDColor, handling various color types. @param color The PDColor object to create a Paint from. @return A Paint object or transparent color if an error occurs.
2895 Determines a fallback font name based on descriptor flags. @param fontDescriptor Font descriptor object @return Font name string
2896 Gets the symbolic flag from the font descriptor, or null.
2897 Splits text into lines based on width, font, and size. @param font The font to use for width calculation. @param fontSize The font size. @param width The maximum line width. @return List of Line objects representing text lines.
2898 Retrieves the field value, handling various COS object types. @return Field value or null if no value is present. @throws IOException if an unknown type is encountered.
2899 Shows a glyph, performing legacy calculations and transformations.
2900 Saves the PDF document to the specified output stream. @param output The output stream to write to. @param compressParameters Compression parameters for saving.
2901 Notifies of changes if the attribute value has changed. @param oldBase The old COSBase value. @param newBase The new COSBase value.
2902 Initializes page rendering context. @param page The PDF page to render. Throws IllegalArgumentException if null.
2903 Gets the bleed box, or crop box if bleed box is absent. Returns a PDRectangle representing the bleed area.
2904 Gets the trim box, or crop box if trim box is absent. Returns a PDRectangle representing the trim area.
2905 Gets the art box for the page, clipping to media box if needed. Returns crop box if art box is null.
2906 Gets the rotated crop box for a page, swapping width/height if rotated. @param page The PDF page to get the crop box from. @return A PDRectangle representing the rotated crop box.
2907 Writes a COSDocument to an output stream as a PDF document. @param doc The COSDocument to write.
2908 Retrieves the rich text value of the field. Returns null if RV is null, COSString, or COSStream.
2909 Gets the "Before" action. Returns null if not a COSString/Stream.
2910 Gets the value of the "After" key, as a String or null.
2911 Creates a FDFAnnotationCaret from an XML element. @param element XML element representing the annotation. @throws IOException if an I/O error occurs.
2912 Loads the ICC profile, falling back to alternate if needed. Handles exceptions during profile loading and validation.
2913 Creates a COSWriterCompressionPool with a PDF document and parameters. @param document The PDF document to compress. @param parameters Compression parameters, or null for defaults.
2914 Sets the value of the choice field. @param value The new value to set for the choice field.
2915 Constructs a `Type5ShadingContext` with shading parameters. @param shading The Type 5 shading object.
2916 Constructs a `Type4ShadingContext` with shading parameters. @param shading The PDF shading object.
2917 Constructs a `PatchMeshesShadingContext` with provided data. @param shading The PDMeshBasedShadingType object.
2918 Retrieves the sample array, calculating and populating it if null. Uses PDF stream data to populate the array with interpolated values.
2919 Reads stream data into a byte array. @return byte array representing stream content @throws IOException if an I/O error occurs
2920 Creates a LayoutPage for the given PDF page. @param page The PDF page to create the layout for. @return LayoutPage object representing the page layout.
2921 Retrieves string value from COSString or COSStream. Returns "" if neither type.
2922 Retrieves rich text contents from annotation. Returns null if no RC object is found.
2923 Retrieves the action string from the dictionary. Returns null if the action is not a COSString or COSStream.
2924 Displays a transparency group. @param form The transparency group to show. @throws IOException if an I/O error occurs.
2925 Retrieves child PDFields. Returns an empty list if no children exist.
2926 Renders a Type3 glyph using the provided character procedure. @param textRenderingMatrix Transformation matrix for rendering
2927 Builds a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font data. @return PDFontDescriptor object representing the font.
2928 Builds a PDFontDescriptor from a Type1Font. @param type1 The Type1Font to build the descriptor from. @return PDFontDescriptor representing the font.
2929 Retrieves page labels for all pages in the PDF document. Returns an array of labels, or null if no labels exist.
2930 Retrieves a map of page labels to their corresponding indices. @return Map of page labels to their indices.
2931 Removes a page from the document at the specified index. @param pageNumber 0-based index of the page to remove
2932 Displays a PDF form. @param form The PDF form to display. @throws IOException if an I/O error occurs.
2933 Creates a PDFontDescriptor from a TrueTypeFont. Populates font properties and estimates missing values.
2934 Gets the annotation's normal appearance as a content stream. @param compress Whether to compress the content stream. @return PDAppearanceContentStream object. @throws IOException If an I/O error occurs.
2935 Creates a CCITT image from a byte array. @param document PDF document. @param byteArray Image data. @return PDImageXObject
2936 Processes a PDF tiling pattern with default transformation matrix. @param tilingPattern The tiling pattern to process. @param color The color to apply. @param colorSpace The color space to use.
2937 Creates a `PDPageContentStream` for writing to a PDF page. Warns if overwriting existing content.
2938 Displays a PDF annotation by processing its appearance stream. @param annotation The annotation to display.
2939 Processes a soft mask transparency group. @param group The transparency group to process. @throws IOException if an I/O error occurs.
2940 Initializes appearance content for a widget. Populates appearance stream with visual elements.
2941 Formats text content, applying alignment and wrapping.
2942 Constructs a FDF strikeout annotation from an Element. @param element Element containing annotation data. @throws IOException if element data is invalid.
2943 Creates an FDF underline annotation from an Element. @param element Element containing annotation data @throws IOException if an I/O error occurs
2944 Renders a PDF page. @param page The PDF page to render. Throws IOException if error.
2945 Processes a child stream for a page, ensuring proper initialization. @param contentStream Stream to process. @param page The PDF page being processed.
2946 Constructs a PDVisibleSignDesigner with a PDF document, image, and page. @param document The PDF document. @param image The signature image. @param page The page number.
2947 Creates a PDVisibleSignDesigner with a document, image stream, and page. @param document PDF document. @param imageStream Image stream for the signature. @param page Page number for signature placement.
2948 Constructs a PDFPrintable with default rasterization. @param document The PDF document to print. @param scaling The scaling factor. @param showPageBorder Whether to show the page border.
2949 Writes appearance settings to a content stream. @param contents Content stream to write to. @param zeroFontSize Fallback font size if default is zero.
2950 Loads a PDF document from a byte array. @param input PDF data as byte array @return PDDocument object or null if loading fails.
2951 Extracts bytes from XFA data, handling COSArray or COSStream. Returns empty byte array if no data is found.
2952 Initializes Type7ShadingContext with shading data and transforms. @param shading The PDShadingType7 object.
2953 Constructs a `Type6ShadingContext` with provided shading data. @param shading The PDShadingType6 object.
2954 Appends a form as an optional content layer. @param targetPage Page to append the layer to. @param form Form to append. @param transform Transform to apply to the form. @param layerName Name of the optional content group.
2955 Creates a PDICCBased object from an ICC profile array. @param iccArray COSArray containing the ICC profile data. @throws IOException if an I/O error occurs.
2956 Recursively interpolates float values based on coordinates & step. @param coord Coordinate vector. @param step Current step index.
2957 Gets the rich text value from the RV attribute. Returns an empty string if the attribute is missing.
2958 Writes field data to an XML Writer, handling values and kids.
2959 Retrieves the rich contents of the annotation. Returns "" if null or unsupported type.
2960 Checks if the form is dynamic (XFA) by verifying XFA key & empty fields.
2961 Finds a FontBoxFont by base font name, using fallback if needed. @param baseFont Base font name. @param fontDescriptor Font descriptor. @return FontMapping with FontBoxFont or fallback.
2962 Finds a TrueType font by name, or uses a fallback if not found. @param baseFont Base font name. @param fontDescriptor Font descriptor. @return FontMapping object.
2963 Determines if the font is symbolic based on flags and encoding. Returns true if symbolic, false otherwise, null if unknown.
2964 Reads and sets the font encoding based on dictionary values. Handles different encoding types and falls back if needed.
2965 Calculates the font size based on content and rectangle size. @param font The PDFont to use for calculations. @param contentRect The rectangle to fit content within.
2966 Creates a squiggly annotation from an XML element. @param element XML element containing annotation data. @throws IOException if an I/O error occurs.
2967 Creates a PDFunctionType4 from a COSBase stream. @param functionStream COSBase representing the function stream @throws IOException if an I/O error occurs
2968 Creates a FDFAnnotationHighlight from an XML element. @param element Element containing annotation data. @throws IOException if an I/O error occurs.
2969 Loads a PDF document from a file. Uses default password and memory-only stream cache.
2970 Saves the PDF document to a file with compression. @param file The file to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
2971 Gets a page format for the given page index. @param pageIndex 0-based index of the page.
2972 Loads a PDF document from a file, handling encryption. @param file The file to load. @param password Password for decryption, if applicable.
2973 Processes annotations on the imported page, cloning and adjusting them. Handles links, widgets, and popup annotations for accurate splitting.
2974 Saves the PDF document to the specified output stream. @param output The output stream to write to.
2975 Gets the normal appearance as a content stream. Calls the overloaded method with compression disabled. @return PDAppearanceContentStream object. @throws IOException If an I/O error occurs.
2976 Opens the node if it's currently closed. Calls switchNodeCount() to invert open state.
2977 Closes the node if it's currently open. Calls switchNodeCount to invert open status.
2978 Gets the layout page for the first page of the document. @param doc The PDF document. @return The LayoutPage object for the first page.
2979 Renders a glyph based on font type. @param textRenderingMatrix Rendering matrix. @param font The PDF font.
2980 Clones the structure tree from source to destination document. Copies structure elements and resources.
2981 Updates struct parent entries for a page and its annotations. @param page The PDF page to update. @param structParentOffset Offset to apply to struct parents.
2982 Writes the document body, handling compression and encryption. Processes COS objects and streams for efficient PDF creation.
2983 Imports a page as a form XObject. @param sourceDoc Source PDF document. @param pageNumber Page number to import (0-based). @return A PDFormXObject representing the imported page.
2984 Exports the form as an FDF document. Creates and populates an FDFDocument object. @return FDFDocument representing the exported form. @throws IOException if an I/O error occurs.
2985 Embeds a Type 1 font into a PDF document. @param doc The PDF document. @param dict The dictionary. @param pfbStream The PFB stream. @param encoding The font encoding.
2986 Embeds a TrueType font into a PDF document. @param document The PDF document to embed into. @param dict Dictionary for font properties. @param ttf The TrueType font to embed. @param embedSubset Whether to embed a subset of the font.
2987 Initiates recursive interpolation using default input values.
2988 Extracts and converts the matte data from a soft mask. @param softMask The soft mask image object. @return Matte array in RGB format, or null if invalid.
2989 Processes a PDF page, setting rotation, size, and translation matrix. @param page The PDF page to process. Throws IOException if error.
2990 Parses XFA data to a Document object. Uses getBytes() to retrieve XFA data. @return Document object representing the parsed XFA data.
2991 Creates a PDType1Font instance from an input stream. @param doc The document. @param pfbIn Input stream for the PFB data. @param encoding The font encoding, or null to use default.
2992 Creates a PDVisibleSignDesigner with a signature image and page size. @param documentSource PDF data source @param image Signature image @param page Page number
2993 Creates a PDFunction based on the provided COSBase. @param function COSBase representing the function definition. @throws IOException if the function type is unknown or invalid.
2994 Checks if the font is symbolic. Caches the result for efficiency.
2995 Checks if a PDF form is dynamic (XFA). @param acroForm The form to check. @return True if the form is dynamic, false otherwise.
2996 Constructs a FDF dictionary from an FDF XML element. @param fdfXML The XML element representing the FDF document.
2997 Creates a PDImageXObject from a BufferedImage. Handles grayscale and RGB images, uses predictor encoder. @param document PDF document to embed image in @param image BufferedImage to convert @return PDImageXObject representing the image
2998 Processes a PDF page, importing it and handling resources. @param page The PDPage object to process.
2999 Embeds a TrueType font into a PDF document. @param document The PDF document. @param dict Font dictionary. @param ttf The TrueType font. @param encoding Font encoding.
3000 Constructs a CID font embedder. @param document The PDF document. @param dict The font dictionary.
3001 Constructs a PDFont object from a COSDictionary. @param fontDictionary Font dictionary to initialize from.
3002 Creates a PDICCBased object, caching if possible. @param iccArray ICC profile array. @param resources PDResources object. @return PDICCBased object.
3003 Constructs a PDFPrintable with default rasterization. @param document The PDF document to print. @param scaling The scaling factor.
3004 Draws a PDF page onto the provided graphics context. Renders graphics, text, and annotations. @param g Graphics2D object for rendering @param pageSize PDRectangle defining page dimensions
3005 Builds a PDF document with visual signature properties. @param properties Signature design properties. @return InputStream representing the PDF document.
3006 Saves the PDF document to a file using default compression. @param file The file to save to. @throws IOException if an I/O error occurs.
3007 Saves the PDF document to a file with compression. @param fileName File name to save to. @param compressParameters Compression parameters. @throws IOException if an I/O error occurs.
3008 Inserts the generated appearance stream for a widget into the output stream. This method handles various aspects of appearance generation, including: - Calculating padding based on border width. - Setting up clipping paths. - Setting font and color from the /DA string. - Handling multiline text fields and comb boxes. - Generating highlight rectangles for list boxes. This method attempts to replicate the behavior of Adobe Acrobat's appearance generation. @param widget The annotation widget. @param appearanceStream The appearance stream. @param output The output stream to write the generated appearance to. @throws IOException If an I/O error occurs.
3009 Imports field values from an FDF field. Handles various COS types and sets field flags.
3010 Writes the FDF dictionary to an XML Writer. Writes file specification, IDs, and fields to the output.
3011 Creates a PDVisibleSignDesigner with image and page details. @param documentSource PDF source. @param imageStream Image stream. @param page Page number.
3012 Draws an image at specified coordinates. @param image The image to draw. @param x x-coordinate. @param y y-coordinate.
3013 Initializes the iterator with fields from the form. @param form The PDF form to iterate over.
3014 Loads a PDF document from a file using the default loader. @param file The file to load. @return A PDDocument object.
3015 Constructs a FDF catalog from an XML element. @param element The XML element representing the FDF catalog.
3016 Constructs a PDTrueTypeFont with the given parameters. @param closeTTF Whether to close the TrueType font data source.
3017 Constructs a `PDType0Font` with given parameters. @param document PDF document. @param ttf TrueType font.
3018 Creates a Type 0 font from a dictionary. @param fontDictionary Font dictionary to initialize from. @throws IOException if font data is invalid or missing.
3019 Initializes a PDSimpleFont with a font dictionary. @param fontDictionary COSDictionary containing font data
3020 Creates a PDType1Font instance from a PFB input stream. @param doc The document. @param pfbIn Input stream for the PFB data.
3021 Constructs a PDVisibleSignDesigner with a signature image and page size. @param filename PDF filename. @param imageStream Image stream. @param page Page number.
3022 Constructs a PDVisibleSignDesigner with image and page data. @param filename PDF file path. @param image Signature image. @param page Page number.
3023 Renders a PDF page to a BufferedImage. @param pageIndex Page index to render. @param scale Scaling factor. @param imageType Image type for the output. @param destination Render destination. @return BufferedImage containing the rendered page.
3024 Processes PDF pages within the specified start and end pages.
3025 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index to render. @param graphics Graphics2D object for rendering.
3026 Constructs a PDFPrintable with default scaling (SHRINK_TO_FIT). @param document The PDF document to print.
3027 Returns an iterator to traverse the form fields. @return Iterator for PDField objects.
3028 Saves the PDF document to a file. @param fileName The name of the file to save to. @throws IOException if an I/O error occurs.
3029 Builds a visible signature PDF document using configured properties.
3030 Creates a PDImageXObject from a file, detecting file type. @param file File containing image data. @param doc PDF document to embed image in.
3031 Creates PDImageXObject from file, based on extension. @param file File containing image. @param doc PDF document. @return PDImageXObject representing the image.
3032 Returns the tint transform PDFunction. Creates it if null. @return PDFunction representing the tint transformation. @throws IOException if an error occurs during function creation.
3033 Creates a PDDeviceN object from a COSArray and resources. @param deviceN COSArray representing the DeviceN color space. @param resources Resources for color space creation.
3034 Creates a PDSeparation object from a COSArray. @param separation COSArray defining the separation. @param resources PDResources for alternate color space creation.
3035 Processes a PDF page, conditionally extracting and formatting text. @param page The PDF page to process. Throws IOException if error.
3036 Retrieves the array of PDFunction objects from the /Function element. Returns null if no functions are found.
3037 Retrieves the PDFunction object, creating it if necessary. @return PDFunction object or null if no function is defined. @throws IOException if function creation fails.
3038 Evaluates the Type 3 function based on input, selecting a child function. @param input Input array, first element is the value to evaluate. @return Float array representing the function's result.
3039 Writes the FDF dictionary to the given Writer. Uses getFDF() to retrieve the FDF dictionary.
3040 Decodes image from object. @param region Clip region, null for full image. @param subsampling Subsampling factor. @return BufferedImage representation of the image.
3041 Creates a PDIndexed object. @param indexedArray Indexed color array. @param resources PDF resources. @throws IOException if an I/O error occurs.
3042 Evaluates the PDF function with given inputs. @param input Input values; modified during processing. @return Float array of output values.
3043 Gets the transfer function for the soft mask. @return PDFunction object or null if not defined. @throws IOException if the function is invalid.
3044 Returns the default PDF font (Helvetica). Lazily initializes if null.
3045 Loads a PDType0Font from a PDF document and TrueType font. @param doc PDF document. @param ttf TrueType font. @param embedSubset Whether to embed subset. @return A PDType0Font object.
3046 Creates a PDTrueTypeFont from a COSDictionary. @param fontDictionary Font dictionary from the PDF. @throws IOException if an I/O error occurs.
3047 Creates a PDType1CFont from a font dictionary. @param fontDictionary Font dictionary to use for initialization. @throws IOException if an I/O error occurs during processing.
3048 Creates a PDType1Font from a COSDictionary. Handles embedded fonts and repairs length values.
3049 Constructs a `PDType3Font` with a font dictionary and resource cache. @param fontDictionary Font dictionary. @param resourceCache Resource cache.
3050 Loads a PDType0Font from a RandomAccessRead. @param doc PDF document. @param randomAccessRead Font data. @param embedSubset Whether to embed font subset. @param vertical Vertical font. @return A PDType0Font object.
3051 Loads a vertical PDType0Font from a TrueTypeFont. @param doc PDF document. @param ttf TrueType font. @param embedSubset Whether to embed subset.
3052 Loads a PDTrueTypeFont from a TrueTypeFont and Encoding. @param doc The document. @param ttf The TrueType font. @param encoding The font encoding. @return A PDTrueTypeFont object.
3053 Loads a PDTrueTypeFont from a RandomAccessRead. @param doc PDF document. @param randomAccessRead Font data. @param encoding Font encoding. @return PDTrueTypeFont object.
3054 Creates an FDFDocument from a Document. @param doc The document containing the xFDF element. @throws IOException if the root element is not "xfdf".
3055 Creates a PDImageXObject from a file path. @param imagePath Path to the image file. @param doc PDF document. @return PDImageXObject representing the image.
3056 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index. @param graphics Graphics2D. @param scaleX, scaleY Scaling factors.
3057 Renders a PDF page to a BufferedImage. @param pageIndex Page index. @param scale Scaling factor. @param imageType Image type. @return BufferedImage containing the rendered page.
3058 Retrieves a list of signature fields from the PDF form. Returns an empty list if no signature fields are found.
3059 Refreshes the appearances of all terminal fields in the form.
3060 Writes the FDF document to an XML Writer. Uses getCatalog() to write the FDF catalog.
3061 Splits a PDF document into multiple documents. @param document The PDF document to split. @return List of PDDocument objects representing the splits.
3062 Creates a PDIndexed object with an indexed color array. @param indexedArray Indexed color array. @throws IOException if an I/O error occurs.
3063 Evaluates shading functions with given input and returns results. @param input Input array for function evaluation. @return Array of evaluated function values.
3064 Returns the image as a BufferedImage. Uses default region and subsampling.
3065 Processes PDF pages, extracting text and handling bookmarks. Processes each page, conditionally extracting text.
3066 Creates a PDColorSpace from a COSBase, handling various types. @param colorSpace COSBase representing the color space. @param resources PDResources object. @param wasDefault Whether the color space was default. @throws IOException if an I/O error occurs.
3067 Retrieves a PDF field by its fully qualified name. @param fullyQualifiedName Field's name, includes parent names. @return PDField object or null if not found.
3068 Sets whether to cache form fields. @param cache True to cache fields, false to clear cache.
3069 Returns an iterator to traverse the form fields.
3070 Renders a PDF page to an RGB BufferedImage. @param pageIndex Page index. @param scale Scaling factor.
3071 Renders a PDF page to an image with specified DPI. @param pageIndex Page index. @param dpi Dots per inch for rendering. @return BufferedImage containing the rendered page.
3072 Renders a PDF page to an image with specified DPI. @param pageIndex Page index. @param dpi Dots per inch. @param imageType Image type. @return BufferedImage containing the rendered page.
3073 Renders a PDF page to a graphics context with a single scale. @param pageIndex Page index. @param graphics Graphics2D. @param scale Scaling factor.
3074 Extracts a range of pages from the PDF document. @return PDDocument containing extracted pages.
3075 Saves FDF data to an XML Writer. @param output XML Writer to save to; closes the writer.
3076 Renders a string of text onto the PDF page. @param string The byte array representing the text.
3077 Loads a TrueType font from a file. @param doc PDF document. @param file Font file. @param encoding Font encoding.
3078 Creates a PDMMType1Font from a COSDictionary. @param fontDictionary Font data dictionary.
3079 Loads a TrueType font from an input stream. @param doc PDF document. @param input Font data stream. @param encoding Font encoding.
3080 Loads a Type 0 font from a file. @param doc PDF document. @param file Font file. @return A PDType0Font object.
3081 Loads an XFDF document from an input stream. @param input Input stream containing the XFDF data. @return FDFDocument object representing the loaded XFDF.
3082 Loads a Type 0 font from an input stream. @param doc PDF document. @param input Input stream. @param embedSubset Embed font subset. @return PDType0Font object.
3083 Loads a vertical Type 0 font from a file. @param doc PDF document. @param file Font file. @return PDType0Font object.
3084 Loads a vertical Type 0 font from an input stream. @param doc PDF document. @param input Font data stream. @return A PDType0Font object.
3085 Loads a vertical PDType0Font from an input stream. @param doc PDF document. @param input Font input stream. @param embedSubset Whether to embed font subset.
3086 Constructs a `PDType3Font` with a font dictionary. @param fontDictionary Font dictionary.
3087 Adds a signature to the document. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation. @param options Signature options.
3088 Extracts text from a PDF document and writes it to a Writer. @param doc The PDF document to extract text from. @param outputStream Writer to write the extracted text. @throws IOException if an I/O error occurs.
3089 Retrieves signature dictionaries from signature fields. Returns a list of PDSignature objects.
3090 Imports field values from an FDF document. @param fdf The FDF document to import from.
3091 Evaluates shading function with a single input value. @param inputValue Input value for function evaluation. @return Array of evaluated function values.
3092 Renders a transparency group onto a graphics context. Handles optional content, rendering checks & soft masks.
3093 Gets the non-stroking paint, applying soft masks if present. @return Paint object or null if an error occurs.
3094 Evaluates shading function and converts result to RGB. @param values Input values for shading function evaluation. @return Integer representing RGB color value.
3095 Renders a PDF page to an image. @param pageIndex Index of the page to render. @return BufferedImage representing the rendered page.
3096 Loads a Type 0 font from an input stream, embedding the subset. @param doc PDF document. @param input Input stream.
3097 Creates a PDFont object based on the dictionary and cache. @param dictionary Font dictionary. @param resourceCache Resource cache for font resources.
3098 Loads an XFDF document from a file. @param filename Path to the XFDF file. @return FDFDocument object or null if not found.
3099 Renders a text string onto the PDF page. @param string The byte array representing the text.
3100 Loads an XFDF document from a file. @param file The file containing the XFDF data. @return FDFDocument object or null if loading fails.
3101 Renders a PDF page to a graphics context. @param pageIndex Page index. @param graphics Graphics2D.
3102 Renders an array of text strings onto the PDF page. @param array Array of text strings or horizontal displacements.
3103 Adds a signature to the document using provided options. @param sigObject The signature object to add. @param options Signature options.
3104 Retrieves the last signature dictionary. Returns null if no signature dictionaries exist.
3105 Saves the document incrementally for external signing. @param output Output stream to write the incremental PDF. @return SigningSupport object for managing the signing process.
3106 Extracts text from a PDF document. @param doc The PDF document to extract text from. @return Extracted text as a String.
3107 Adds a signature to the document using default signature options. @param sigObject The signature object to add. @param signatureInterface Signature interface implementation.
3108 Saves FDF data to a file. @param fileName File to save the FDF data to. @throws IOException if an I/O error occurs.
3109 Draws a glyph, scaling if necessary, and applies rendering. @param path Glyph path, displacement, transform, font.
3110 Adds a signature to the document with default options. @param sigObject The signature object to add. @throws IOException If an I/O error occurs.
3111 Creates a PDFont object from a dictionary. @param dictionary Font dictionary. @return PDFont object.
3112 Retrieves a PDFont object by name, using caching if available. @param name Font name. Returns font or null if not found.
3113 Fills and strokes the current path with the given winding rule. Resets the line path after stroking.
3114 Saves FDF data to a file. @param fileName File name to save the FDF data to. @throws IOException if an I/O error occurs.
3115 Flattens form fields into annotations. Skips dynamic XFA forms.
3116 Copies needed resources (font) to the appearance stream. @param appearanceStream The appearance stream to copy to.
3117 Merges the contents of a source PDF document into a destination PDF document. This method handles various aspects of the merging process, including pages, resources, metadata, structure tree, and more. It ensures that resources are shared where appropriate to minimize file size, and handles structural elements to maintain document integrity. @param srcCatalog The catalog of the source PDF document to be merged. @param destCatalog The catalog of the destination PDF document. @param cloner The PDF cloner used for creating copies of PDF objects.
3118 Converts PNG image data to a PDF image object. @param doc PDF document to add image to. @param imageData byte array containing PNG image data. @return PDImageXObject or null if conversion fails.
3119 Retrieves the font setting. @return PDFont object or null if font is not a dictionary.
3120 Sets the appearance content for a widget. @param widget The annotation widget. @param appearanceStream The appearance stream.
3121 Creates PDImageXObject from byte array, auto-detecting file type. @param document PDF document, @param byteArray image data, @param name image name
3122 Copies graphics state properties into another state. Iterates through keys and copies relevant values.
3123 Processes appearance string operators from content. Parses tokens and calls processOperator for each operator.
3124 Creates a PDImageXObject from a byte array. @param document PDF document, @param byteArray image data, @param name image name
3125 Creates a PDDefaultAppearanceString with default appearance & resources. @param defaultAppearance COSString containing default appearance. @param defaultResources PDResources containing default resources.
3126 Gets the default appearance string. @return PDDefaultAppearanceString object or new instance.
3127 Sets the appearance value for the field, handling multiline formatting. @param apValue The value to set for the appearance.
3128 Initializes appearance generator with a variable text field. @param field The PDVariableText field to process. @throws IOException if default appearance string processing fails.
