1 Retrieves revision number at specified index. @param index unique identifier of the revision to retrieve @return Revision number as integer or -1 if out of bounds
2 Retrieves the current stroking color space from the graphics state. @return ColorSpace object used for stroking operations
3 Initializes an instance of PDActionSound with a COSDictionary. @param a COSDictionary containing sound action details
4 Transforms the given width based on the current graphics state. @param width input width to transform @return transformed width or NaN if invalid input
5 Retrieves and returns the current non-stroking color. @return PDColor object representing the non-stroking color
6 Retrieves an object from the collection at specified index. @param index position of the object to retrieve
7 Sets the stroking color from the provided PDColor object. @param color new stroking color
8 Sets the non-stroking (fill) color. @param color the PDColor object to use
9 Retrieves and returns the current stroking color from the graphics state.
10 Returns the number of objects in the collection. @return count of elements in the collection
11 Retrieves non-stroking color space from graphics state. @return PDColorSpace object for non-stroking operations
12 Retrieves an integer value at the specified index or returns the default value. @param index unique identifier of the stored object @param defaultValue default integer to return if not found at the given index @return Integer value or default value if not found
13 Parses PNG image data into a PNGConverterState object. @param imageData the PNG image data to parse @return a fully parsed PNGConverterState object or null if parsing fails
14 Retrieves the current transformation matrix for text rendering. @return Transformation matrix object
15 Initializes an instance of PDActionURI with a COSDictionary. @param a COSDictionary containing action details
16 Sets the text line transformation matrix. @param value Matrix object defining text line transformation
17 Executes the instruction sequence within a specified execution context. @param context ExecutionContext instance to manage operations and stack interactions
18 Retrieves an object from the pool based on its unique identifier. @param key COSObjectKey containing the object's ID
19 Initializes an instance of PDActionThread with a COSDictionary containing action details. @param a COSDictionary containing action specifics
20 Initializes a PDActionSubmitForm instance with action details from a COSDictionary. @param a COSDictionary containing form submission configuration
21 Parses the cross-reference table trailer. @return true if parsing is successful, false otherwise
22 Adds a PDF source file to be merged by delegating to the overloaded addSource(File) method. @param source path to the PDF file to include in the merge process
23 Retrieves the index of the selected radio button. @return Index of the selected widget, or -1 if none are selected
24 Creates a PDSoftMask instance from the provided COSBase object and ResourceCache. @param dictionary soft mask properties and resources @param resourceCache cache for accessing shared resources @return PDSoftMask object or null if invalid input
25 Retrieves a specific Encoding instance based on the provided COSName. @param name unique identifier (COSName) of the desired encoding
26 Retrieves and returns the current text transformation matrix. @return Text transformation matrix
27 Sets the text transformation matrix. @param value Matrix object defining text rendering transformations
28 Returns the number of key-value pairs in the underlying COSDictionaryMap. @return integer count of elements
29 Returns the field tree associated with this PDAcroForm instance.
30 Retrieves filter dictionary from stream. @return List of COSName objects or an empty list if not found
31 Creates and returns a shallow copy of this Matrix instance.
32 Initializes an instance of PDSoftMask from a COSDictionary. @param dictionary soft mask properties and resources
33 Creates a scale transformation matrix instance. @param x horizontal scale factor @param y vertical scale factor
34 Retrieves a translation matrix instance with specified horizontal and vertical offsets. @param x horizontal offset @param y vertical offset
35 Returns a rotation transformation matrix instance. @param theta rotation angle in radians @param tx translation factor (x) @param ty translation factor (y) @return Matrix object representing the rotation transformation
36 Applies the transformation matrix to the given vector. @param vector input vector to transform @return transformed vector
37 Retrieves the list of file filters from the stream's dictionary. @return List of filter names or an empty list if not found
38 Scales the vector by a given factor. @param sxy scaling factor
39 Retrieves the name at a specified index or returns the default value. @param index index of the name to retrieve @param defaultValue default value to return if index is out of range @return String representation of the name, or default value if not found
40 Searches for the index of a given COSBase object in the collection. @param object COSBase object to search for @return Index of the object if found, -1 otherwise
41 Retrieves Z tristimulus value. @return Z value as a floating-point number
42 Initializes a non-terminal form field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
43 Initializes a terminal field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
44 Initializes a PDMeasureDictionary instance from a COSDictionary. @param dictionary COSDictionary containing measurement data
45 Evaluates the exponential interpolation function by applying the given input value to the exponent. @param input array of input values
46 Initializes an instance of PDExtendedGraphicsState from a COSDictionary. @param dictionary extended graphics state properties
47 Retrieves a list of filters associated with the COSStream. @return List<Filter> containing filter objects or an empty list if not found
48 Writes a boolean value to PDF output stream. @param output OutputStream for writing the data @param cosBoolean COSBoolean object containing the boolean value
49 Initializes PlainText instance with provided text content. @param textValue the initial paragraph text
50 Retrieves Y tristimulus value. @return Y color component value
51 Initializes an instance of PDActionLaunch with a COSDictionary. @param a COSDictionary containing launch action details
52 Checks if an edge is a line based on control points. @param ctl array of 4 Point2D objects representing the control points @return true if edge is a line, false otherwise
53 Initializes a PDActionMovie instance from a COSDictionary. @param a COSDictionary containing movie action details
54 Returns a string representation of this COSArrayList object. Includes concatenated string constants and input string. @return formatted string representation
55 Retrieves an Operator instance by name. If the operator is cached, it's returned; otherwise, a new instance is created and cached. @param operator unique identifier of the Operator to retrieve @return Operator object or null if not found (e.g., ID operators)
56 Initializes a JavaScript action within a PDF document. @param a COSDictionary containing action details
57 Initializes an instance of PDActionNamed from a COSDictionary. @param a COSDictionary containing action details
58 Finds a raster-capable ImageReader for the specified format name. @param formatName specific image format name (e.g. JPEG, PNG) @param errorCause descriptive text about image reader absence issue @return ImageReader object or null/empty if not found @throws MissingImageReaderException if no suitable reader is found
59 Retrieves ImageReader instance for specified format name. @param formatName specific image format name (e.g. JPEG, PNG) @param errorCause descriptive text about the image reader absence issue @return ImageReader object or null if not found @throws MissingImageReaderException if no suitable reader is found
60 Initializes an instance of PDActionResetForm with a COSDictionary. @param a COSDictionary containing action details
61 Creates a raw input stream from the underlying data. @throws IOException if no data has been written or reading is attempted while writing
62 Initializes an instance of PDActionRemoteGoTo with a COSDictionary. @param a COSDictionary containing action details
63 Initializes an instance of PDActionHide with a COSDictionary. @param a COSDictionary containing action details
64 Retrieves X tristimulus value from PDTristimulus color representation.
65 Retrieves the blue component of the gamma-corrected color. @return Blue color value (0-1.0)
66 Writes ASCII-encoded string to output stream. @param text input string to be written
67 Retrieves gamma value from color data. @return Gamma correction factor
68 Retrieves red color component from internal storage.
69 Initializes an instance of PDActionImportData with a COSDictionary. @param a COSDictionary containing import data specifications
70 Retrieves the font size setting. @return current font size value
71 Retrieves the x-coordinate of the upper-right corner of the rectangle. @return The x-coordinate value
72 Returns the Y-coordinate of the lower left corner. @return Y-value as a floating-point number
73 Notifies user attribute object of potential change based on entry comparison. @param oldEntry original entry object @param newEntry updated entry object
74 Retrieves the x-coordinate of the lower left corner of the rectangle. @return x-coordinate value as a float
75 Initializes an instance of PDActionEmbeddedGoTo with a COSDictionary. @param a COSDictionary containing action details
76 Initializes an instance of PDActionGoTo with a COSDictionary. @param a COSDictionary containing navigation action details
77 Retrieves upper-right y-coordinate from rectangle data. @return y-value of upper-right corner
78 Checks if a point is contained within the shaded triangle. @param p target point to check
79 Retrieves a COSObject instance associated with the given key. @param key identifier of the desired item
80 Inserts a diacritic character into the text at the specified position. @param i position to insert the diacritic @param diacritic TextPosition object containing the diacritic character and its properties
81 Initializes a Line instance with two points and associated colors. @param p0 starting Point @param p1 ending Point @param c0 color at starting point (float[] RGB values) @param c1 color at ending point (float[] RGB values)
82 Creates a SoftMask instance with the given parameters. @param paint the Paint object for rendering @param mask the BufferedImage for masking @param bboxDevice the device coordinates of the bounding box @param backdropColor the background color (optional) @param transferFunction the transfer function to apply (optional)
83 Removes backdrop from the given image by blending with specified transparency. @param BufferedImage backdrop the backdrop to remove @param int offsetX the x offset for backdrop removal @param int offsetY the y offset for backdrop removal
84 Parses an XML document from the given input stream without namespace awareness. @param is input stream containing the XML data
85 Parses input string as a float value, applying PDF-specific coercion rules. @param aFloat input string representation of a float value
86 Initializes a new PDPageFitDestination instance from a COSArray. @param arr COSArray containing destination data
87 Initializes a new PDPageFitHeightDestination instance from a COSArray. @param arr COSArray containing destination data
88 Initializes a new PDPageFitRectangleDestination instance from a COSArray. @param arr COSArray containing destination data (left, bottom, right, top coordinates)
89 Initializes a new PDPageFitWidthDestination instance from a COSArray. @param arr COSArray containing destination data
90 Initializes a new PDPageXYZDestination instance from a COSArray. @param arr COSArray containing destination data
91 Initializes the Mac OS Roman character mapping table.
92 Creates a Type1Encoding instance from FontBox Encoding. @param encoding FontBox Encoding object @return Type1Encoding object populated with encoding information
93 Retrieves a pre-constructed or newly created COSInteger instance for the given integer value within the specified range. @param val integer value to represent
94 Constructs a new Type7ShadingPaint object with the given Type 7 shading and transformation matrix. @param shading Type 7 shading object to be applied @param matrix Transformation matrix for the shading
95 Normalizes input data to conform to expected format. Handles Unicode Alphabetic and Arabic A&B Presentation forms normalization. Removes extra characters in specific fonts and decompositions. Reverses order of decomposed Hebrew and Arabic letters. @param word input data to be normalized @return normalized data or original data if unchanged
96 Draws a tiling pattern onto the specified graphics context. @param g Graphics2D to draw on @param pattern Tiling pattern to draw @param colorSpace Color space for the pattern @param color Pattern color @param patternMatrix Transformation matrix for the pattern
97 Initializes an instance of the GlyphList class with default settings and loads glyph list data from the specified input stream. @param input InputStream containing the glyph list data @param numberOfEntries expected number of entries in the glyph list
98 Initializes a GlyphList instance with default values from an existing instance and loads glyph list data from the specified input stream. @param glyphList existing GlyphList instance to copy initial values from @param input InputStream containing additional glyph list data
99 Converts a font code to its corresponding GID (Global Identifier). @param code unique font code @return the GID value or 0 if not found
100 Retrieves the glyph name from the font, using Unicode representation if necessary. @return the glyph name or ".notdef" if not found
101 Retrieves the name of a glyph in the font, attempting to resolve alternative names and Unicode representations. @param name the glyph name to look up @return the resolved glyph name or ".notdef" if not found
102 Initializes the CMYK color space instance with default values and loads the ICC profile.
103 Applies a mask to an image. @param image the original image @param mask the mask to apply @param interpolateMask whether to interpolate the mask when applying it @param isSoft whether the mask is soft or not @param matte the matte values for color correction (optional) @return the resulting masked image
104 Calculates the interpolated color at a given point based on the triangle's vertices and degree of interpolation. @param p Point at which to interpolate color @return array of float colors or null if not available
105 Updates clipping path with a new GeneralPath instance. @param path the new clipping path to add
106 Updates the clipping path with a new Area instance. @param area the new clipping path to add
107 Transfers the current clipping path to the specified graphics context. @param graphics Graphics2D object to apply the clipping path to
108 Initializes a CubicBezierCurve instance with control points and detail level. @param ctrlPnts array of Point2D objects representing the control points @param l detail level (number of points to generate)
109 Sets stroking color on demand from the provided PDColor object. @param color PDColor object containing color components @return true if successful, false otherwise
110 Writes the FDF document to an output stream. @param doc FDFDocument object to serialize
111 Writes COSInteger value to PDF output stream. @param output target output stream @param cosInteger COSInteger object to be written
112 Compares this XReferenceEntry with another based on its referenced key. @param xReferenceEntry the entry to compare with @return a negative integer if less than, zero if equal, or a positive integer if greater
113 Retrieves the X-axis scaling factor from the text matrix.
114 Returns the Y-axis scaling factor of the text matrix.
115 Creates a raw output stream for writing data. @throws IOException if an I/O error occurs
116 Initializes a new instance of the COSWriter class with the given output stream and compression parameters. @param outputStream OutputStream to write data to @param compressParameters CompressParameters object for incremental updates and compression
117 Initializes a new instance of COSWriter with specified output stream and input data. @param outputStream OutputStream to write PDF document to @param inputData RandomAccessRead containing PDF content
118 Retrieves a string representation from the byte array using various encoding schemes. If the byte array starts with BOM for UTF-16BE or UTF-16LE, it is decoded accordingly; otherwise, PDFDocEncoding is used.
119 Initializes DefaultResourceCache instance with caching stability setting. @param enableStableCache true to enable stable cache, false otherwise
120 Initializes a COSString object from the given string and encoding preference. @param text the input string to be represented @param forceHex whether to use PDFDocEncoding or UTF-16BE encoding
121 Initializes a LayerUtility instance with a destination PDDocument. @param targetDoc the target document for cloning and merging operations
122 Writes a COSArray to the output stream. @param output OutputStream instance @param cosArray COSArray object containing elements to be written
123 Retrieves an item by its unique name, or falls back to a secondary key if the primary key is not found. @param firstKey primary identifier of the desired item @param secondKey secondary identifier to use if primary key is absent @return COSBase object representing the retrieved item, or null if both keys are invalid
124 Retrieves the number of recipients from the document's encryption settings. @return The count of recipient entries
125 Retrieves a recipient string at the specified index from the document's encryption settings. @param i index of the desired recipient in the RECIPIENTS array
126 Retrieves the direction of page transition. @return COSBase object representing the direction or default value if not set
127 Retrieves a set of metadata keys from the underlying COSDictionary.
128 Retrieves a list of attribute names from the underlying COSDictionary. @return List of attribute names (excluding 'O' key)
129 Adds trailer information from the given dictionary to the cross-reference stream. @param trailerDict dictionary containing trailer info
130 Constructs a COSDictionary instance by copying all key-value pairs from another dictionary. @param dict COSDictionary to copy entries from
131 Checks if a COSDictionary is an info dictionary. @param dictionary the COSDictionary to check
132 Checks if the PDF font descriptor dictionary contains WIDTHS or MISSING_WIDTH attributes. @param none
133 Checks if a missing width value exists in the font descriptor dictionary. @return true if missing width is present, false otherwise
134 Checks if an XFA (XML Forms Architecture) form exists in the PDF document. @return true if XFA form is present, false otherwise
135 Returns a string representation of this COSFloat object.
136 Writes PDF header to the specified output stream. @param output target output stream
137 Returns an initialized COSIncrement instance with update origin. @param updateInfo COSUpdateInfo object specifying update context
138 Checks if the current font is a standard 14 font. @return true if the font is a standard 14 font, false otherwise
139 Reads ASCII85 encoded bytes into the provided byte array. @param data target byte array @param offset starting index in the array @param len number of bytes to read @return actual number of bytes read, or -1 if end-of-stream is reached
140 Calculates the final encryption key by combining the object number and generation number with the encryption key. @param objectNumber unique identifier of the PDF document @param genNumber generation number associated with the object @return final byte array representing the calculated key
141 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object @param outputStream OutputStream for writing content
142 Initializes a new PDPageContentStream instance with the given document and appearance stream. @param doc PDDocument object @param appearance PDAppearanceStream object @param outputStream OutputStream for writing content
143 Transforms a point by applying the current graphics state transformation. @param x initial X coordinate @param y initial Y coordinate @return transformed point coordinates as a Point2D.Float object
144 Creates a context object with the pattern matrix applied and scaling removed. @param cm ColorModel @param deviceBounds Rectangle @param userBounds Rectangle2D @param xform AffineTransform @param hints RenderingHints @return PaintContext instance
145 Concatenates another transformation matrix with this matrix. @param matrix Matrix to be concatenated
146 Applies a translation transformation to the matrix. @param tx translation factor along x-axis @param ty translation factor along y-axis
147 Scales the transformation matrix by specified factors. @param sx horizontal scale factor @param sy vertical scale factor
148 Applies matrix multiplication to this and another given Matrix. @param other second Matrix instance @return resulting Matrix object
149 Creates a security handler instance for the given protection policy. @param policy ProtectionPolicy object associated with the desired security handler @return SecurityHandler<ProtectionPolicy> instance or null if not found
150 Retrieves a security handler instance for the specified filter name. @param name unique identifier of the filter @return SecurityHandler object or null if not found
151 Fetches and parses all objects within the PDF object stream. @return A map of COSObjectKey to COSBase, containing all parsed objects
152 Reads the next byte of compressed data from the input stream. @return the read byte value or -1 if end-of-file is reached
153 Reads data from the underlying input stream and copies it to the provided buffer. @param data the buffer to read into @param offset starting position in the buffer @param length number of bytes to read @return the actual number of bytes read (or -1 if EOF)
154 Reads digital signature image from input stream. @param stream input stream containing image data
155 Sets non-stroking color on demand using the provided PDColor object. @param color PDColor object containing color components
156 Selects the filtered image row with the lowest estimated compressed sum. @return byte array representing the chosen filtered image row
157 Retrieves the rendering state from a COSName object. @param state COSName containing rendering state
158 Retrieves the fundamental states of optional content from a COSName object. @param state COSName object representing a state
159 Initializes a new instance of the PDFStreamParser class with the given content stream. @param pdContentstream PDContentStream object containing the PDF data to parse
160 Initializes PDFStreamParser instance with binary PDF content. @param bytes PDF data as byte array
161 Parses a PDF object by its number, returning the COSBase instance if found. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found
162 Fetches and stores object numbers from the PDF stream. @return Map of object numbers to their offsets
163 Encodes raw data into a compressed LZW format. @param rawData input stream containing the data to encode @param encoded output stream where the encoded data is written @param parameters COSDictionary object containing encoding parameters @throws IOException if an I/O error occurs during encoding
164 Constructs a new Type6ShadingPaint object with the given type 6 shading and transformation matrix. @param shading PDShadingType6 object to be applied @param matrix Transformation matrix for the shading
165 Retrieves and returns the PANOSE classification data. @return PDPanoseClassification object containing extracted PANOSE data
166 Constructs a new Type4ShadingPaint object with the given type 4 shading and transformation matrix. @param shading Shading object to be applied @param matrix Transformation matrix for the shading
167 Adds text content to PDMarkedContent's managed collection. @param text TextPosition object representing the text to be added
168 Adds a PDMarkedContent object to the managed content collection. @param markedContent content to be added
169 Adds an XObject to the contents list. @param xobject PDXObject instance to be added
170 Sets or clears permission to print PDF document. @param allowPrinting true to enable printing, false to disable
171 Enables or disables modification of the PDF document. @param allowModifications true to allow modifications, false otherwise
172 Enables or disables content extraction based on permission. @param allowExtraction true to allow, false to disallow extraction
173 Enables or disables annotation modification capability. @param allowAnnotationModification true to allow, false to disallow
174 Enables or disables filling in forms for the PDF document. @param allowFillingInForm true to allow, false to disallow
175 Enables or disables extraction for accessibility. @param allowExtraction true to allow, false to disallow
176 Sets whether the user can assemble documents. @param allowAssembly true to enable assembly, false to disable
177 Applies GSUB rules to the given word and writes the resulting glyph IDs to the output stream. @param gsubWorker worker instance responsible for applying transformations @param out output stream to write transformed glyph IDs to @param font type 0 font used for encoding glyph IDs @param word input string to apply GSUB rules to @return list of glyph IDs after applying GSUB rules
178 Initializes a new PDDocument instance from a COSDocument with specified source and permissions. @param doc underlying COSDocument object @param source RandomAccessRead source for the document @param permission AccessPermission for the document
179 Sets the permission to print faithful copies of the PDF document. @param canPrintFaithful true to allow, false to disallow faithful printing
180 Initializes an instance of the class with a given COSDocument and data source. @param doc the underlying PDF document @param source the data source for the FDF document
181 Returns a string representation of the FunctionType2 object, including its control points (c0 and c1) and exponent value (N).
182 Checks if print permission is granted. @return true if print bit is set, false otherwise
183 Checks if content extraction permission is enabled. @return true if bit is set, false otherwise
184 Retrieves Adobe glyph list. @return GlyphList object containing glyph information
185 Creates a new PDColor instance with specified color components, pattern name, and color space. @param components array of color components @param patternName COSName representing the color's pattern @param colorSpace PDColorSpace associated with the color
186 Returns the COS dictionary representing the inline image data.
187 Checks if user has permission to modify annotations. @return true if permitted, false otherwise
188 Checks if filling in form permission bit is enabled. @return true if allowed, false otherwise
189 Checks if user has permission to extract content for accessibility. @return true if permitted, false otherwise
190 Checks if document assembly permission is granted. @return true if permitted, false otherwise
191 Checks if faithful printing permission bit is set. @return true if user has faithful print permission, false otherwise
192 Initializes the RC4 cipher with a custom encryption key. @param key byte array representing the encryption key @throws IllegalArgumentException if key length is invalid (1-32 bytes)
193 Encrypts a byte by XORing it with the current state of the RC4 cipher. @param aByte byte to encrypt @param output OutputStream to write encrypted data to
194 Checks if a Unicode code point is prohibited for use in the SASL protocol. @param codepoint the Unicode code point to validate @return true if the code point is prohibited, false otherwise
195 Checks if modification permission bit is set. @return true if user has modify permission, false otherwise
196 Computes encryption version number based on key length and AES preference. @return Version number corresponding to combination of key length and AES preference
197 Converts a glyph code to a CID reference using the font's CMap. @param code glyph code @return CID reference or -1 if not found
198 Retrieves the current highest cross-reference object number from the pool.
199 Closes the PDF document, releasing all associated resources and handling any exceptions. @throws IOException if an I/O error occurs during closure
200 Closes the FDFDocument instance, ensuring all intermediate I/O streams and associated COSDocuments are properly closed. @throws IOException if any I/O operation fails
201 Retrieves the underlying COSDictionary object for this PDFunction. @return COSDictionary object, either from the associated stream or dictionary
202 Initializes a PDXObject instance with the specified PDStream and subtype. @param stream underlying data stream @param subtype type of graphical object (e.g. XOBJECT)
203 Returns the underlying COSStream object. @return COSStream instance associated with this PDXObject
204 Retrieves the alternate color space metadata as a COSStream object.
205 Sets alternate color space metadata. @param metadata COSStream object containing metadata
206 Compares this PDAnnotation instance with another object for equality. @param o the object to compare with @return true if both annotations have identical COSDictionary representations, false otherwise
207 Constructs a new Type5ShadingPaint object with the given Type 5 Shading and transformation matrix. @param shading Type 5 Shading object to be applied @param matrix Transformation matrix for the shading
208 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null if parsing fails
209 Sets the bounding box of this form XObject. @param bbox The new bounding box (null to remove it)
210 Unchecks the checkbox by setting its value to "Off".
211 Converts standard boolean value to COSBoolean object. @param value true or false value
212 Calculates the text direction based on the transformation matrix. @return The direction in degrees (0-360), or 0 if unknown
213 Checks if COS update state requires an update. @return true if updated, false otherwise
214 Compares this COSInteger instance with another object for equality. @param o the other object to compare
215 Initializes COSObjectKey with object number, generation, and stream index. @param num PDF object number @param gen PDF object generation value @param index Stream index of the object
216 Checks if current PDF source character is a digit.
217 Checks if the document update state is accepting updates. @return true if updating is allowed, false otherwise
218 Writes a single byte to the ASCII85 stream, initiating encoding when the input buffer is full. @throws IOException if an I/O error occurs
219 Flushes buffered output to the underlying stream, performing ASCII85 encoding calculation and writing data. @throws IOException if an I/O error occurs
220 Decodes a predictor row from the given image data. @param predictor the type of prediction algorithm to use @param colors the number of color components in each pixel @param bitsPerComponent the number of bits per component @param columns the number of pixels in the row @param actline the current line of image data @param lastline the previous line of image data
221 Retrieves the numeric value of the first column in this XReference. @return Numeric value as a 64-bit integer
222 Retrieves the generation value from the referenced key. @return Generation number as a long integer
223 Returns a string representation of this free object reference.
224 Retrieves the byte offset of the referenced object's second column value.
225 Retrieves the generation value from the referenced object key. @return Generation number as a long integer
226 Returns a string representation of this cross-reference entry.
227 Retrieves the numeric value of the parent object's key. @return numeric identifier
228 Retrieves the index of the associated object stream as the third column value.
229 Returns a string representation of this ObjectStreamEntry.
230 Writes byte array to output stream. @param b data to be written @param off starting index of data in array @param len length of data to write
231 Writes a single byte to the output stream, resetting line breaks and tracking writing position. @throws IOException if an I/O error occurs
232 Writes end-of-line character, handling line breaks and updating writing position.
233 Checks if compression is enabled based on object stream size. @return true if object stream size is greater than zero, false otherwise
234 Adds an XReferenceEntry to the cross-reference table. @param entry XReferenceEntry object to be added
235 Writes a COSObjectKey reference to the specified OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing object ID and generation number
236 Adds a cross-reference entry to the PDFXRefStream. @param entry XReferenceEntry object containing the new entry's key and value
237 Checks if next input character is whitespace or newline/return. @throws IOException if reading from source fails
238 Retrieves the type of pattern represented by this PDAbstractPattern instance. @return string identifier for the pattern type (e.g. "PATTERN")
239 Adds cross-reference table entry for the specified object key at the given offset. @param objKey COSObjectKey representing the object to be referenced @param offset long value indicating the position of the reference in the PDF document
240 Checks if current PDF character code represents whitespace. @throws IOException if an I/O error occurs
241 Skips line breaks in PDF input, handling CR, LF, and CRLF. @param linebreak ASCII code of the potential line break character
242 Checks for end of string by examining the next bytes in the PDF source. @param bracesParameter number of opening brackets to check @return 0 if end of string is found, otherwise original parameter value
243 Checks if input character represents an EOL (End-Of-Line). @param c ASCII code of the character to check
244 Reads a string number from the PDF source, limiting to MAX_LENGTH_LONG. @throws IOException if the number is too long or an I/O error occurs
245 Checks if the next character in the PDF source is whitespace.
246 Parses and extracts the start cross-reference (xref) value from the PDF trailer. @return The byte offset of the first object referenced by the xref or null if not found
247 Searches for the last End-Of-File (EOF) marker in the PDF data stream. @return position of the last EOF marker, or Long.MAX_VALUE if not found
248 Searches for XRef streams in the PDF data stream and returns their offsets.
249 Retrieves the cross-reference table from the resolved trailer. @return a map of COSObjectKeys to object IDs or null if not resolved
250 Fetches the offset of the 'startxref' marker in the PDF file. @throws IOException if an I/O error occurs or the marker is missing
251 Reads from the source stream until it encounters an 'endstream' marker. @param out EndstreamFilterStream output stream @return length of filtered stream
252 Retrieves the default value of this button. @return String representation of the default value or an empty string if not set
253 Retrieves the shading type as a string.
254 Searches for cross-reference tables in the PDF document. @return list of offsets where xref tables are found
255 Initializes a new COSName instance with the given name.
256 Ensures singleton instance of null COS representation.
257 Initializes COSString with byte array and optional hexadecimal forcing. @param bytes source byte array @param forceHex whether to force hexadecimal representation
258 Initializes an instance of the COSDictionary class.
259 Initializes a COSObject instance with a given COSBase object.
260 Initializes a COSObject instance with the provided COSBase object and ICOSParser. @param object COSBase object to be managed @param parser ICOSParser instance for parsing purposes
261 Initializes a COSObject instance with the given key and parser. @param key COSObjectKey representing the object's identifier @param parser ICOSParser used for parsing and updating the object
262 Initializes a new instance of the `DecodeOptions` class with a specified source region. @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the source region @param height height of the source region
263 Initializes a FreeXReference object with the specified key and next free object. @param key COSObjectKey representing the unique identifier @param nextFreeObject long value of the next free object
264 Creates an ObjectStreamXReference instance for a given object stream index and associated keys. @param objectStreamIndex unique index of the object stream @param key referenced object key @param object referenced object @param parentKey key of the parent object
265 Initializes resource cache creation with stable caching enabled.
266 Initializes an instance of PDDictionaryWrapper with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
267 Initializes a PDAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
268 Constructs a new COSBoolean instance with the given boolean value. @param aValue boolean value to initialize this object with
269 Initializes an instance of PDUserProperty with the given COSDictionary and user attribute object. @param dictionary COSDictionary object to be wrapped @param userAttributeObject User attribute object associated with the property
270 Initializes an instance of PDOutlineNode with a given COSDictionary. @param dict COSDictionary object to be used in initialization
271 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
272 Initializes an instance of the FDFAnnotationSquare class from a COSDictionary object.
273 Initializes an instance of the FDFAnnotation class from a COSDictionary object.
274 Initializes an instance of FDFAnnotationText from a COSDictionary object. @param a COSDictionary object containing annotation properties
275 Initializes an instance of the FDFAnnotationTextMarkup class from a COSDictionary object.
276 Retrieves the singleton instance of the BlendComposite class with specified blend mode and alpha value. @param blendMode blending operation to apply @param constantAlpha constant alpha value for the composite (clamped to [0,1] range) @return BlendComposite instance or throws IllegalArgumentException if blendMode is null
277 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
278 Initializes a PDShadingPattern instance from a COSDictionary. @param resourceDictionary COSDictionary containing shading pattern data
279 Initializes a PDTilingPattern instance with provided COSDictionary and ResourceCache. @param dictionary COSDictionary containing pattern data @param resourceCache Resource cache for pattern resources
280 Initializes a PDShadingType1 instance from a COSDictionary. @param shadingDictionary PDF dictionary containing Type 1 shading properties
281 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary PDF shading properties
282 Constructs an AxialShadingPaint object with specified axial shading type and transformation matrix. @param shadingType2 Axial shading type @param matrix Transformation matrix for the shading effect
283 Constructs a new RadialShadingPaint object with radial shading and transformation matrix. @param shading Shading type for the paint @param matrix Transformation matrix for the shading
284 Initializes a new instance of Type1ShadingPaint with the given Type 1 shading and transformation matrix. @param shading Type 1 shading object to be applied @param matrix Transformation matrix for the shading
285 Initializes an instance of FDFAnnotationSound from a COSDictionary object. @param a COSDictionary containing sound annotation data
286 Initializes an instance of FDFAnnotationPolyline from a COSDictionary object. @param a COSDictionary containing polyline annotation data
287 Initializes an instance of the FDFAnnotationPolygon class from a COSDictionary object.
288 Initializes an instance of FDFAnnotationLink from a COSDictionary object. @param a COSDictionary containing hyperlink annotation data
289 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
290 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
291 Initializes this PDStructureElementNameTreeNode instance from a COSDictionary. @param dic input dictionary containing structure element name-value pairs
292 Creates a child node with the given COS dictionary. @param dic COS dictionary containing tree data
293 Initializes an instance of PDMetadata from a COSStream object. @param str COSStream object containing XMP metadata
294 Initializes an instance of PDObjectStream from a COSStream object. @param str COSStream object to be wrapped
295 Initializes an instance of PDEmbeddedFile from a COSStream object. @param str COSStream object to be wrapped
296 Initializes a PDFunction instance from a COSBase object. @param function the COSBase object to initialize with
297 Initializes a PDXObject instance from a COSStream and subtype. @param stream underlying COSStream object @param subtype subtype name as COSName
298 Initializes an instance of PDTransition with a given COSDictionary. @param dictionary COSDictionary object to define transition properties
299 Initializes a PDStructureNode instance from a COSDictionary. @param dictionary COS representation of the structure node
300 Initializes a PDStructureTreeRoot instance from a COSDictionary. @param dic COS representation of the structure node
301 Initializes an instance of the SecurityHandler class with default security settings.
302 Initializes an instance of the FDFAnnotationCaret class from a COSDictionary object. @param a COSDictionary object containing annotation data
303 Initializes an instance of the FDFAnnotationCircle class from a COSDictionary object.
304 Initializes an instance of FDFAnnotationFileAttachment from a COSDictionary object. @param a COSDictionary containing file attachment annotation data
305 Initializes an instance of the FDFAnnotationFreeText class from a COSDictionary object. @param a COSDictionary containing annotation data
306 Initializes an instance of FDFAnnotationInk from a COSDictionary object. @param a COSDictionary containing ink annotation data
307 Initializes an instance of the FDFAnnotationLine class from a COSDictionary object.
308 Writes the starting offset of the current paragraph to the output stream. @throws IOException if an I/O error occurs during writing
309 Writes configured line separator to output stream.
310 Writes custom word separator character to output stream.
311 Writes the start position of the current page.
312 Writes the current end-of-page marker to the output stream.
313 Returns visually ordered Unicode representation of text. Analyzes the directionality and order of characters to ensure correct rendering. @return String representation, potentially reversed for RTL content
314 Checks if the text is a diacritic character. @return true if text represents a diacritic, false otherwise
315 Converts a single byte to its hexadecimal string representation.
316 Converts a byte array to its hexadecimal string representation. @param bytes input byte array @return hexadecimal string representation of the input bytes
317 Extracts two bytes from a single input byte, using hexadecimal conversion. @param b input byte @return array of two resulting bytes
318 Converts a byte array to an ASCII-compatible hexadecimal string. @param bytes input byte array @return ASCII-encoded byte array with each byte represented as two hexadecimal digits
319 Writes a single hexadecimal byte to the specified output stream. @param b input byte @param output output stream
320 Formats a floating-point number into ASCII byte representation. @param value the number to format @param maxFractionDigits maximum allowed decimal places @param asciiBuffer buffer for ASCII output @return new offset after formatting or -1 on error
321 Searches the ByteTrie for a value associated with the given byte sequence. @param bytes The input byte data to search @return The found value or null if not present
322 Marks the end of an article in the PDF document. Writes the article's end marker to the output stream.
323 Retrieves and writes the starting point of an article. @param isLTR whether to use left-to-right text formatting
324 Returns text representation as Unicode string.
325 Writes Unicode characters from a TextPosition object to the output stream. @param text position and content of characters to be written
326 Retrieves template height based on page height. @param none @return float representing the template's vertical dimension
327 Ensures a PDOutlineItem has no siblings. @param node outline item to verify as single node
328 Calculates the X-rotation value based on the given rotation angle. @param rotation the rotation angle in degrees @return the corresponding X-rotation value or 0 if not applicable
329 Calculates the Y-coordinate of the lower-left corner after rotation. @param rotation angle of rotation (in degrees)
330 Calculates the width of a rotated text element. @param rotation angle of rotation (in degrees)
331 Sets digital signature's x and y coordinates. @param x new x-axis position @param y new vertical position within a PDF page
332 Initializes a new instance of the PDMarkedContent class with the given tag and properties. @param tag COSName representing the content's semantic meaning @param properties COSDictionary containing additional metadata about the content
333 Initializes an instance of the FDFAnnotationHighlight class from a COSDictionary object.
334 Initializes a PDTilingPattern instance from provided COSDictionary. @param dictionary COSDictionary containing pattern data
335 Initializes a digital signature field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
336 Initializes a variable text field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
337 Returns a string representation of the revisions collection, including all managed objects and their corresponding revision numbers.
338 Generates a unique partial field name by iterating and appending an incrementing integer to the base "Signature" name. @return A unique partial field name.
339 Initializes an instance of the PublicKeySecurityHandler class with default security settings.
340 Initializes a PDXObject instance from a COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
341 Initializes security handler with specified protection policy. @param standardProtectionPolicy encryption policy settings
342 Initializes a PDXObject instance from a COSStream and subtype FORM. @param stream underlying COSStream object
343 Initializes a PDXObject instance from a PostScript COSStream. @param stream underlying COSStream object
344 Initializes a new COSDocument instance with the specified parser. @param parser Parser instance for document parsing
345 Creates a PDSoftMask instance from the provided COSBase object. @param dictionary soft mask properties and resources
346 Initializes a PDShadingType3 instance from a COSDictionary. @param shadingDictionary PDF shading properties
347 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary shading properties in PDF format
348 Initializes an instance of FDFAnnotationStrikeOut from a COSDictionary object. @param a COSDictionary object containing strikeout annotation data
349 Initializes security handler with specified protection policy. @param publicKeyProtectionPolicy encryption policy settings
350 Initializes an instance of the FDFAnnotationUnderline class from a COSDictionary object.
351 Initializes a button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
352 Initializes an instance of the FDFAnnotationSquiggly class from a COSDictionary object. @param a COSDictionary representing the squiggly annotation's properties
353 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary PDF shading properties
354 Initializes an instance of the SecurityHandler class with default security settings.
355 Applies a translation adjustment to the text rendering matrix. @param tx translation factor along x-axis @param ty translation factor along y-axis
356 Checks if the specified point (x, y) lies within this rectangle. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is contained within the rectangle, false otherwise
357 Initializes a ShadedTriangle object with vertices and colors. @param p array of Point2D objects representing the triangle's corners @param c 2D array of float values representing the color at each vertex
358 Sets the font provider and updates font mapping. @param fontProvider FontProvider object containing font information
359 Saves font information to a disk cache.
360 Retrieves the cached FontBoxFont instance or loads and caches a new one from file based on its format. @return FontBoxFont object
361 Encrypts or decrypts data using AES256 algorithm. @param data InputStream containing the data to encrypt/decrypt @param output OutputStream to write the encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
362 Encrypts or decrypts data using AES algorithm. @param finalKey encryption/decryption key @param data InputStream containing data to be encrypted or decrypted @param output OutputStream to write the encrypted or decrypted data @param decrypt true for decryption, false for encryption
363 Processes a token from the input stream and updates the instruction sequence. @param text the current token to process
364 Concatenates two transformation matrices by multiplying 'a' with 'b'. @param a first Matrix instance @param b second Matrix instance
365 Applies a translation transformation to the matrix using the provided Vector. @param vector Translation factors along x and y axes
366 Initializes a PDFunctionType3 instance from a COSBase object. @param functionStream COSBase object to initialize with
367 Loads a glyph list from the specified file. @param filename name of the glyph list file @param numberOfEntries number of entries in the glyph list @return loaded GlyphList object
368 Updates the current clipping path based on graphics context.
369 Resets text clipping by applying buffered clip as one area and clearing clippings.
370 Retrieves a mapping of GIDs to font codes. @return A map where keys are GIDs and values are corresponding font codes
371 Calculates and returns the width of the rectangle. @return The difference between upper-right and lower-left x-coordinates
372 Applies rotation transformation to this matrix. @param theta rotation angle in radians
373 Writes a COS float object to an output stream. @param output target output stream @param cosFloat COS float object to be written
374 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs exist, false otherwise
375 Writes an operator string to output stream followed by a line break. @param text ASCII-encoded operator string
376 Formats and writes an operand value to the output stream. @param integer the operand value to be written
377 Writes a float operand to the output stream. @param real the float value to write
378 Determines the suffix of the image based on its filter dictionary. @return image suffix (e.g. "png", "jpg", etc.) or null if unknown
379 Initializes a PDImageXObject instance with the specified PDStream and resources. @param stream underlying data stream @param resources associated PDF resources
380 Creates an output stream for writing data to a PDF document. @param filters optional filter list to apply during writing @return OutputStream object for writing data
381 Retrieves the name at the specified index (or returns default value if not found). @param index index of the name to retrieve
382 Retrieves an integer value at the specified index or returns -1 if not found. @param index unique identifier of the stored object
383 Returns a string representation of the rectangle in the format "[x1, y1, x2, y2]".
384 Converts the rectangle's geometry into a GeneralPath object. @return A GeneralPath representation of the rectangle
385 Applies the specified transformation matrix to the rectangle's geometry and returns a new GeneralPath object. @param matrix The 2x3 transformation matrix
386 Calculates rectangle height by subtracting lower-left Y from upper-right Y. @return Height of the rectangle
387 Returns an initialized COSIncrement instance based on update state.
388 Initializes a new instance of the COSWriter class with the given output stream and default compression parameters. @param outputStream OutputStream to write data to
389 Computes and encodes owner password with RC4 encryption. @param ownerPassword input byte array @param userPassword input byte array (padded or truncated) @param encRevision document encryption revision @param length desired key length @return encoded byte array
390 Computes user password for PDF document based on provided parameters. @param password user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return user password as a byte array
391 Reads digital signature image from file at specified path. @param path file system path to image data
392 Initializes a new instance of PDVisibleSignDesigner with digital signature image from input stream. @param imageStream input stream containing image data
393 Initializes a COSString object from the given string. @param text input string to be represented
394 Retrieves the default appearance string from a PDF form. @return The DA attribute as a string, or null if not set
395 Retrieves export values for the button, returning them as a list of strings. @return List of string representations or an empty list if no values are found
396 Retrieves a list of string items from the given COSBase object, considering nested arrays and single-element arrays as pairs. @param items COSBase object containing key-value pairs @param pairIdx index into two-element arrays (0 or 1)
397 Retrieves the represented name of a PDNamedDestination. @return string representation or null if not found
398 Retrieves a string representation of the underlying file content.
399 Retrieves a string value from the collection at specified index or returns default value. @param index unique identifier of the desired object @param defaultValue default string to return if index is out of bounds @return String representation of COSString object or default value
400 Initializes a PDFunctionType0 instance from a COSBase object. @param function the COSBase object to initialize with
401 Retrieves XMP metadata from the image object. @return PDMetadata object or null if not found
402 Searches for cross-reference tables and streams in the PDF document, then finds the nearest offset to the given xref offset. @param xrefOffset unique cross-reference table identifier @return nearest offset or -1 if not found
403 Parses and extracts the PDF header. @return true if successful, false otherwise
404 Parses the FDF (Form Data Format) header. @return true if successful, false otherwise
405 Initializes a new PDDocument instance from a COSDocument with specified source. @param doc underlying COSDocument object @param source RandomAccessRead source for the document
406 Reads and returns the next line from the PDF source. @throws IOException if end-of-file or other I/O error occurs
407 Skips PDF line breaks (CR, LF, CRLF) and returns true if found. @throws IOException if I/O error occurs
408 Creates a new PDDocument instance from underlying COS document and source.
409 Retrieves the COSBase representation of the degrees value. @return COSInteger instance containing the degrees value
410 Detects file type by reading the first maxByteCount bytes from the input stream. @param inputStream BufferedInputStream containing file data @return FileType object representing detected file type
411 Writes an array of hexadecimal bytes to the specified output stream. @param bytes input byte array @param output output stream
412 Writes the COSName object to a PDF output stream. @param output OutputStream for writing the name
413 Writes an external signature to the PDF document. @param cmsSignature CMS (Content-Management System) signature byte array
414 Returns hexadecimal string representation of this COSString object's byte array.
415 Converts Calendar instance to ISO8601 date string. @param cal Calendar object
416 Formats Calendar instance as a string. @param cal Calendar object to format
417 Skips whitespace characters and comments in the PDF source.
418 Writes the ending offset of the current paragraph to the output stream. @throws IOException if an I/O error occurs during writing
419 Initiates article processing with default left-to-right text formatting.
420 Calculates text direction adjustment width. @return The width of a rotated text element based on its direction
421 Calculates text width using rotation. @param rotation angle of rotation (in degrees)
422 Calculates the Y-direction adjustment based on the text direction and rotation. @return The adjusted Y-direction value, taking into account PDFBox assumptions
423 Initializes a TextPosition object with given parameters. @param pageRotation the rotation of the PDF page @param pageWidth and pageHeight the dimensions of the page @param textMatrix the transformation matrix for the text element @param endX and endY the coordinates of the text's lower-right corner @param maxHeight the maximum height allowed for the text @param individualWidth and spaceWidth the widths of individual characters and spaces @param unicode the Unicode representation of the text @param charCodes an array of character codes @param font the PDFont object representing the font used @param fontSize and fontSizePt the font size in points and pixels respectively
424 Calculates text direction adjustment based on transformation matrix. @return The adjusted direction in degrees (0-360), or 0 if unknown
425 Checks if the user has comprehensive owner permission. @return true if all permissions are granted, false otherwise
426 Skips leading whitespace characters in PDF input.
427 Checks if any revision 3 permission bit is set. @return true if at least one revision 3 permission is enabled, false otherwise
428 Checks if COS update state requires an update. @param base COSBase object to check @return true if updated, false otherwise
429 Appends a child element to the PDF structure with the specified MCID. @param mcid non-negative unique identifier for the child element
430 Parses input string as a numeric value, returning a COSNumber instance. @param number String representation of numeric value @return COSNumber object or throws IOException if not a valid number
431 Retrieves the extended object stream. @return PDObjectStream object or null if not found
432 Closes the ASCII85OutputStream, releasing resources and flushing buffered output. @throws IOException if an I/O error occurs during closure
433 Updates document state based on provided status. @param updated true to mark as updated, false otherwise
434 Initializes COSObjectKey with object number and generation. @param num PDF object number @param gen PDF object generation value
435 Fetches and parses font metrics for the given standard font. @param fontName unique font identifier @return FontMetrics object or null if not found
436 Encrypts an array of bytes by writing each element individually to the specified OutputStream. @param data byte array to encrypt @param output OutputStream to write encrypted data to
437 Initializes a PDFormXObject instance with the specified form data stream. @param stream underlying data stream for the form XObject
438 Writes encrypted data to an output stream by breaking down the input byte array into chunks and encrypting each chunk. @param data the input byte array @param offset starting index of the input array @param len length of the input array chunk @param output OutputStream to write encrypted data to
439 Closes the Overlay class's resources, releasing all associated PDF documents and overlays.
440 Initializes an instance of the PDPageAdditionalActions class with an empty COSDictionary.
441 Initializes an instance of PDFormFieldAdditionalActions with an empty COSDictionary.
442 Initializes an instance of the PDDocumentCatalogAdditionalActions class.
443 Initializes an instance of the PDAnnotationAdditionalActions class.
444 Initializes an instance of PDAdditionalActions with an empty action dictionary.
445 Initializes an instance of the PDShading class.
446 Initializes an instance of the PDDeviceNProcess class.
447 Initializes an instance of PDDeviceNAttributes using a default COSDictionary.
448 Initializes an instance of the PDTargetDirectory class.
449 Initializes an instance of the FDFTemplate class with a default COSDictionary.
450 Initializes an instance of the FDFPage class with a new COSDictionary.
451 Initializes an instance of the FDFNamedPageReference class.
452 Initializes an instance of the FDFJavaScript class with a new COSDictionary.
453 Initializes an instance of FDFIconFit with default settings.
454 Initializes an instance of the FDFField class.
455 Initializes an instance of the FDFDictionary class.
456 Initializes an instance of the FDFCatalog class with an empty COSDictionary.
457 Initializes an instance of the FDFPageInfo class with default page data.
458 Initializes an instance of the PDCryptFilterDictionary class.
459 Initializes an instance of the PDURIDictionary class with an empty URI dictionary.
460 Initializes an instance of the PDBorderEffectDictionary class.
461 Retrieves the metadata from the underlying stream. @return PDMetadata object or null if not found
462 Initializes an instance of PDOutlineNode with a given COSDictionary. @param dict COSDictionary object to be used in initialization
463 Initializes a PDStandardAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
464 Initializes a PDUserAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
465 Initializes an instance of the PDWindowsLaunchParams class with an empty COSDictionary.
466 Initializes a PDDefaultAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
467 Initializes an instance of the `PDViewerPreferences` class with default settings.
468 Initializes an instance of the PDViewportDictionary class with an empty viewport dictionary.
469 Initializes a PDField instance with the given AcroForm and an empty field dictionary. @param acroForm the parent AcroForm
470 Initializes an instance of the PDSeedValueTimeStamp class with a direct COSDictionary.
471 Initializes an instance of the PDSeedValueMDP class with a new COSDictionary.
472 Initializes an instance of the PDPropBuildDataDict class with a new COSDictionary object. Sets the dictionary to operate in direct mode.
473 Initializes an instance of PDPropBuild, creating a new COSDictionary with direct object usage.
474 Initializes an instance of the PDBorderStyleDictionary class with a new COSDictionary object.
475 Initializes a COSObject instance with the given key and underlying COSBase object. @param objectKey COSObjectKey representing the object's identifier @param object COSBase object being wrapped
476 Initializes an instance of the PDBoxStyle class with a default COSDictionary.
477 Initializes an instance of the PDEncryption class with an empty COSDictionary.
478 Initializes an instance of PDMarkInfo with a new COSDictionary.
479 Initializes an instance of the PDPropertyList class with an empty COSDictionary.
480 Initializes the LegacyPDFStreamEngine instance with a default graphics state.
481 Initializes a new instance of the class from an empty PDF dictionary.
482 Initializes an instance of the PDNameTreeNode class with a default COSDictionary node.
483 Initializes an instance of PDDictionaryWrapper with a new COSDictionary.
484 Initializes an instance of the PDResources class, creating a new COSDictionary for resource management.
485 Initializes an instance of the PDDocumentInformation class.
486 Creates a default instance of DecodeResult with minimal decoding parameters.
487 Initializes an instance of UnmodifiableCOSDictionary from a COSDictionary. @param dict the underlying dictionary to be made unmodifiable
488 Initializes a COSStream instance with a given cache. @param streamCache RandomAccessStreamCache to store data
489 Retrieves a COSName instance from cache or creates a new one if not found. @param aName unique identifier of the object to retrieve
490 Initializes an empty COSArray instance with direct access enabled.
491 Initializes COSString with byte array and default representation. @param bytes source byte array
492 Initializes a PDAppearanceStream instance from a given COSStream and subtype FORM. @param stream underlying COSStream object
493 Initializes a PDTransparencyGroup instance from a COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
494 Processes a TrueType Collection (TTC) font file. @param ttcFile the TTC file to process
495 Adds a TrueType font to the list of fonts. @param fontHeaders font headers containing metadata about the font @param file font file to be added @param hash unique identifier for the font
496 Adds a Type1 font from the specified PFB file. @param pfbFile the PFB file to add
497 Initializes a new instance of the class with associated COSDictionary and key. @param dictionary underlying COSDictionary object @param dictionaryKey unique identifier for this collection in the dictionary
498 Initializes a PDPrintFieldAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
499 Retrieves and returns the resources associated with this form XObject. @return PDResources object or a new empty instance if none exist, or null if not found
500 Retrieves the last decoded result from the collection. @return DecodeResult object or default instance if empty
501 Returns an unmodifiable dictionary view of this COSDictionary.
502 Initializes a COSStream instance with a given cache and RandomAccessReadView. @param streamCache RandomAccessStreamCache to store data @param randomAccessReadView view of the underlying data stream
503 Default constructor to initialize COSStream with no cache.
504 Creates a new COSStream instance and adds it to the collection for later closure.
505 Initializes PDRectangle with coordinates and dimensions. @param x left X-coordinate @param y top Y-coordinate @param width rectangle width @param height rectangle height
506 Initializes an empty page destination with direct access enabled.
507 Initializes a new instance of the COSArrayList class.
508 Parses a hexadecimal string into a byte array. @param hex input hexadecimal string @return COSString object containing the parsed byte data or null if invalid
509 Initializes the PDRectangle object with a bounding box. @param box BoundingBox object containing rectangle's coordinates
510 Default constructor for PDAttributeObject instance creation.
511 Initializes a new instance of PDUserProperty with the specified attribute object. @param userAttributeObject The user-defined attribute to be represented
512 Initializes a PDListAttributeObject instance from a COSDictionary. @param dictionary COSDictionary object to be wrapped
513 Initializes a PDStandardAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
514 Retrieves the current font provider, initializing a default instance if not already set. @return FontProvider object containing font information
515 Generates a list of shaded triangles from the provided color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects representing the patch's corners and colors @return List<ShadedTriangle> containing all generated triangles
516 Initializes a Coons patch with given control points and colors. @param points Array of 12 control points to reshape @param color 2D array of color values for the patch
517 Initializes a PDField instance with the given AcroForm. @param acroForm the parent AcroForm
518 Converts a COSString to a Calendar instance. @param text the input string to convert @return a Calendar object or null if invalid input
519 Initializes a PDNonTerminalField instance with the given AcroForm. @param acroForm parent AcroForm
520 Initializes a new instance of the PDStructureElementNameTreeNode class with default settings.
521 Initializes an instance of the PDJavascriptNameTreeNode class with default settings.
522 Initializes a PDEmbeddedFilesNameTreeNode instance with default settings.
523 Initializes an empty instance of the PDDestinationNameTreeNode class.
524 Initializes an empty outline node instance.
525 Initializes a PDTableAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
526 Begins a text mode, writing the 'BT' operator to output stream. @throws IllegalStateException if called while already in text mode
527 Sets the line join style to one of three predefined values. @param lineJoinStyle integer representing the desired line join style (0-2)
528 Sets the line width in the PDF content stream. @param lineWidth the new line width value
529 Clamps the graphics state based on even-odd fill rule. @throws IOException if an I/O error occurs
530 Clamps the current graphics state to the active clipping path. @throws IOException if an I/O error occurs
531 Closes the current path. @throws IOException if an I/O error occurs
532 Closes fill and stroke for even-odd content. @throws IOException if I/O error occurs
533 Closes fill and stroke graphics state. @throws IOException if an I/O error occurs
534 Fills and strokes PDF content using even-odd mode. @throws IOException if an I/O error occurs
535 Fills and strokes the content stream with non-zero winding number. @throws IOException if an I/O error occurs
536 Fills shapes using the even-odd rule. @throws IOException if an I/O error occurs
537 Fills the content stream with non-zero area. @throws IOException if an I/O error occurs
538 Closes and strokes the current graphics state. @throws IOException if an I/O error occurs
539 Renders the current graphics path as a stroke. @throws IOException if an I/O error occurs
540 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
541 Moves the graphics cursor to a specified position. @param x new X-coordinate @param y new Y-coordinate
542 Draws a Bezier curve from the current point to (x3, y3) and then to (x1, y1). @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point
543 Draws a Bezier curve to the PDF stream. @param x2, y2 first control point coordinates @param x3, y3 second control point coordinates
544 Draws a Bezier curve to the output stream. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 endpoint of the curve
545 Adds a rectangle to the content stream. @param x left coordinate @param y top coordinate @param width rectangle width @param height rectangle height
546 Sets non-stroking color for graphics operations. @param g float value representing the grayscale level (0..1)
547 Sets the non-stroking color space with CMYK values. @param c cyan channel value (0..1) @param m magenta channel value (0..1) @param y yellow channel value (0..1) @param k black channel value (0..1)
548 Sets the line cap style. @param lineCapStyle integer value between 0 and 2 to set line end style
549 Sets the non-stroking color to RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
550 Sets line dash pattern with specified phase. @param pattern array of float values for the pattern @param phase initial phase value
551 Ends marked content in PDF stream.
552 Retrieves user password for PDF documents. @param ownerPassword input byte array @param owner document owner information @param encRevision document encryption revision @param length desired key length @return encrypted user password as a byte array or empty array for REVISION_5/6
553 Initializes TensorPatch with a 4x4 grid of control points and color values. @param tcp array of 16 control points to reshape @param color 2D array of color values for graphical patch
554 Sets the named destination using a string identifier. @param dest string representing the destination name
555 Initializes a PDNamedDestination object from a given COSString identifier. @param dest unique COSString identifier
556 Sets the file name within the PDF document. @param fileName unique identifier of the associated file
557 Initializes a PDSimpleFileSpecification object with an empty file name.
558 Retrieves the represented button value as a string, using export values and index if applicable. @return String representation of the button value
559 Retrieves string value from collection at specified index. @param index unique identifier of desired object
560 Saves the FDF document to an OutputStream. @param output OutputStream to write data to
561 Sets text rise in PDF content stream. @param rise float value for text rise
562 Sets the text rendering mode for the PDF content stream. @param rm RenderingMode object specifying the new rendering mode
563 Sets horizontal scaling factor for text content. @param scale float value to apply
564 Sets word spacing in content stream. @param spacing float value for word spacing
565 Sets character spacing in PDF content stream. @param spacing character spacing value
566 Sets the miter limit for line joins. @param miterLimit non-negative float value
567 Sets the stroking color with a specified gray value. @param g gray value within 0..1 range
568 Sets the stroking color for CMYK content streams. @param c cyan component value (0..1) @param m magenta component value (0..1) @param y yellow component value (0..1) @param k black component value (0..1)
569 Sets the stroking color with RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
570 Initializes a new COSDocument instance with an in-memory stream cache.
571 Saves the current graphics stack and replaces it with a single-element copy of its top state. @return The original graphics stack
572 Saves the current graphics state by cloning and pushing it onto the stack. @param none
573 Initializes a variable text field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
574 Initializes a PDChoice instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
575 Initializes a radio button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
576 Initializes a button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
577 Initializes a checkbox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
578 Updates clipping path with a new rectangle. @param rectangle the PDRectangle to use for clipping
579 Calculates the transformed bounding box of a form's appearance stream. @param appearanceStream The PDAppearanceStream object containing transformation matrix and bounds
580 Initializes PDGraphicsState with a clipping path from a given page rectangle.
581 Retrieves the left position from the internal array. @param none
582 Restores graphics state by popping color spaces and fonts. @throws IOException if an I/O error occurs
583 Saves the current graphics state, pushing relevant color and font stacks.
584 Writes a newline at specified text offset in PDF content stream. @param tx x-coordinate of new line @param ty y-coordinate of new line
585 Writes a newline operator to the output stream while in text mode.
586 Sets text leading value in PDF stream. @param leading new leading value
587 Ends text mode and writes END_TEXT operator to output stream. @throws IllegalStateException if beginText() has not been called
588 Writes an affine transformation to the output stream. @param transform AffineTransform object containing matrix data
589 Retrieves the soft mask image associated with this PDImageXObject. @return a PDImageXObject object representing the soft mask, or null if not found
590 Retrieves the image mask as a PDImageXObject instance. @return PDImageXObject object or null if no explicit mask is present
591 Creates a thumbnail image from the given COS stream. @param cosStream input stream data
592 Creates an output stream for writing data to a PDF document. @param filter optional filter to apply during writing
593 Checks if page content fits within bounding box. @return true if content is bounded, false otherwise
594 Checks if destination has bounded box fitting type. @return true if type is BOUNDED, false otherwise
595 Checks if the page view fits within its bounding box.
596 Retrieves top coordinate value. @return integer value representing top position
597 Retrieves the left coordinate of the destination page view.
598 Retrieves the top integer value from the stored object at index 2. @param none @return top integer value or -1 if not found
599 Retrieves the top coordinate of the rectangle.
600 Retrieves the right coordinate of the rectangle. @return right edge value or -1 if not found
601 Retrieves the bottom coordinate of the targeted rectangle.
602 Retrieves the left coordinate of the target rectangle.
603 Creates an output stream with no filters. @throws IOException if an error occurs
604 Prepares a query string for SASL use. @param str input query string
605 Writes encrypted content from an InputStream to an OutputStream. @param data InputStream containing the plain bytes to encrypt @param output OutputStream to write the encrypted data to
606 Encrypts data using RC4 algorithm with a custom key. @param finalKey encryption key (1-32 bytes) @param input byte array to encrypt @param output OutputStream to write encrypted data to
607 Computes the revision number based on the given PDF document version. @param version document version @return revision number (integer)
608 Retrieves current access permission for the PDF document. @return AccessPermission instance with owner permissions enabled
609 Initializes a new PDDocument instance from a COSDocument with default source. @param doc underlying COSDocument object
610 Calculates the fixed offset for a cross-reference table or stream. @param objectOffset unique object identifier @return fixed offset or 0 if not found
611 Reads and parses a long integer value from the PDF source. @throws IOException if the input is too long or an I/O error occurs
612 Reads an integer value from the PDF source. @throws IOException if the input is not a valid integer
613 Reads a string of specified length from the PDF source, skipping whitespace and invalid characters. @param length desired length of the string @return read string or empty string if not enough data is available
614 Reads an expected string from the PDF source, skipping spaces if requested. @param expectedString char array of the expected string @param skipSpaces whether to skip whitespace characters in the input
615 Reads a string from the PDF source, skipping whitespace and handling name endings.
616 Prepares a stored string for use in the SASL protocol with strict validation. @param str input string to prepare
617 Initializes a PDTransparencyGroup instance with the specified form data stream. @param stream underlying data stream for the transparency group
618 Sets COS update state based on provided flag. @param flag true to mark as updated, false otherwise
619 Initializes a PDColor instance from the given COSArray and color space. @param array COSArray containing color components (optional) or only pattern name @param colorSpace associated color space for the color representation
620 Parses the cross-reference table in a PDF document. @param startByteOffset starting byte position of the cross-reference table @return true if parsing is successful, false otherwise
621 Parses the cross-reference trailer and populates the XrefTrailerResolver with object key mappings. @param resolver XrefTrailerResolver instance to store parsed data
622 Searches for object stream offsets in the PDF data stream. @return Map of object stream offsets to COSObjectKey objects
623 Searches for objects in the PDF data stream. @throws IOException if an I/O error occurs
624 Retrieves a COSObjectKey from cache or creates a new one if not found. @param num PDF object number @param gen PDF object generation value @return COSObjectKey object with internal hash and ID
625 Creates a PDMarkedContent instance based on the given tag and properties. If the tag is ARTIFACT, returns a PDArtifactMarkedContent object; otherwise, creates a standard PDMarkedContent. @param tag COSName representing the content's semantic meaning @param properties COSDictionary containing additional metadata about the content
626 Writes the CMap data to a specified output stream. @param out OutputStream instance to write to
627 Marks document as updated.
628 Checks if a given PDF object name exists in the dictionary. @param name unique identifier of the object to search for
629 Retrieves an item by its unique string key. @param key identifier of the desired item
630 Initializes the PDFTextStripper instance with default marked content sequences.
631 Initializes a PDFMarkedContentExtractor instance with the given encoding. Adds necessary operators for managing marked content sequences and elements.
632 Retrieves a specific filter by name from the internal filter mapping. @param filterName unique identifier of the filter to retrieve
633 Parses a COSName from the PDF source. @return COSName instance or null if not found
634 Merges a diacritic character into the text, adjusting positions accordingly. @param diacritic TextPosition object containing the diacritic character and its properties
635 Checks if the provided TextPosition overlaps with the current TextPosition. @param tp2 TextPosition to check for overlap @return True if overlapping, false otherwise
636 Writes paragraph separator to output stream.
637 Checks if the current text position completely contains another. @param tp2 TextPosition to check against @return true if contained, false otherwise
638 Writes a COSName object to an output stream. @param output OutputStream for writing the name @param cosName COSName object to be written
639 Writes an operand (COSName object) to the PDF output stream. @param name Operand value as a COSName object
640 Writes a string to the specified output stream. If the string contains non-ASCII characters or EOL markers, writes it as a hex string; otherwise, writes it as an ASCII string. @param bytes input byte array @param forceHex forces writing of hex string regardless of content @param output output stream to write to
641 Retrieves the input stream for signing, requiring prepared PDF. @throws IOException if an I/O error occurs
642 Concatenates a specified affine transformation to the current graphics state. @param matrix Transformation matrix to apply
643 Sets the text matrix using the specified affine transformation. @param matrix Matrix object containing transformation data @throws IOException if an I/O error occurs during operation
644 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object @param compress whether to apply compression during writing
645 Initializes a PDListBox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
646 Default constructor for PDStandardAttributeObject instance creation.
647 Initializes an empty outline node instance.
648 Initializes a PDVariableText instance with the given AcroForm. @param acroForm the parent interactive form
649 Initializes a PDExportFormatAttributeObject instance from a given COSDictionary. @param dictionary COSDictionary object to be wrapped
650 Retrieves the appearance stream associated with this entry. @return PDAppearanceStream object or null if not a stream
651 Adds a TrueType font to the list of fonts. @param ttfFile the TrueType font file
652 Writes byte array to a PDF appearance stream. @param data content to be written @param appearanceStream target stream for writing
653 Initializes a PDMeshBasedShadingType instance from a COSDictionary. @param shadingDictionary PDF shading properties
654 Initializes a PDComboBox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
655 Initializes COSParser with provided PDF source and encryption details. @param source the PDF source to parse @param password encryption password (if applicable) @param keyStore decryption key store (if applicable) @param keyAlias alias for decryption key (if applicable)
656 Creates an output stream with no filters. @throws IOException if an error occurs
657 Initializes a PDMeshBasedShadingType instance from a COSDictionary. @param shadingDictionary PDF shading properties
658 Initializes user attribute object with default owner set to USER_PROPERTIES.
659 Default constructor for PDDefaultAttributeObject instance creation.
660 Encrypts data using RC4 algorithm with a custom key. @param finalKey encryption key (1-32 bytes) @param input InputStream containing plain bytes to encrypt @param output OutputStream to write encrypted data to
661 Reads and parses a long integer object number from the PDF source. @throws IOException if the input is too large or invalid
662 Reads and validates the generation number from the PDF source. @throws IOException if the generation number exceeds 5 digits or is negative
663 Computes the encrypted key for a PDF document based on the provided parameters and encryption revision. @param password user password @param o unknown byte array @param u user's encryption data @param oe owner's encryption data @param ue encrypted key for user @param permissions document permissions @param id unique document identifier @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @param isOwnerPassword true if owner password, false otherwise @return the computed and encrypted key as a byte array
664 Verifies user password based on encryption revision. @param password provided password as a byte array @param user expected user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if password is valid, false otherwise
665 Retrieves FontBoxFont object by PostScript name and FontFormat. @param format FontFormat to match @param postScriptName unique PostScript font identifier @return FontBoxFont object or null if not found or incompatible format
666 Converts a COSString to a Calendar instance. @param text the input string to convert @return a Calendar object or null if invalid input
667 Updates the origin document state and recursively updates child update info objects. @param originDocumentState new origin document state @param dereferencing true if updating during dereferencing, false otherwise
668 Sets the underlying object to a null reference, optionally updating the document state. @param None
669 Updates COSIncrement state when origin document's state differs. @param updateState COSUpdateState object containing new updates
670 Removes an item from the dictionary by its COSName key. @param key the COSName identifier of the item to be removed
671 Clears all key-value pairs and marks document as updated.
672 Removes a specified COSBase object from the array. @param o COSBase object to be removed @return true if object was successfully removed, false otherwise
673 Removes an element from the collection at specified index. @param i position of element to be removed (0-based) @return the removed COSBase object or null if not found
674 Clears all elements from this COSArray and marks document as updated.
675 Retrieves the offsets of COS objects from the PDF data stream. @throws IOException if an I/O error occurs
676 Processes a TextPosition object, considering suppression of duplicate overlapping text and merging diacritics with consecutive characters. @param text the TextPosition object to be processed
677 Processes a TextPosition object, handling suppression of duplicate overlapping text and article division. @param text The TextPosition object to process
678 Creates a new COSStream instance and adds it to the collection for later closure. @param document PDDocument object @param rawInput InputStream containing raw data @return COSStream object representing the created stream
679 Initializes a PDStream instance by creating a COSStream from the given PDDocument and transferring data from an InputStream to the created OutputStream. @param doc the parent PDDocument @param input the input stream containing data to be transferred @param filters optional filter list to apply during writing
680 Initializes PDStream instance from COSDocument. @param document COSDocument object to create streams from
681 Initializes a new instance of the class with the given PDDocument. @param document the parent PDF document
682 Creates a new PDObjectStream instance from the given PDDocument. @param document PDDocument object to create stream for @return new PDObjectStream instance
683 Initializes PDFXRefStream instance with COSDocument. @param cosDocument document containing cross-reference data
684 Applies specified padding to a given rectangle. @param box original rectangle @param padding amount of padding to apply @return new rectangle with applied padding
685 Applies a set of geometric differences to the specified PDRectangle. @param rectangle original PDRectangle object @param differences array of 4 float values representing the differences in x, y, width, and height respectively @return new PDRectangle object with applied differences or the original if invalid input
686 Creates a new PDRectangle by applying the specified differences to an existing one. @param rectangle original rectangle @param differences array of 4 floats representing differences in x, y, width, and height @return modified PDRectangle or original if differences are invalid
687 Calculates a padded PDRectangle by adjusting the original rectangle's coordinates and dimensions. @param rectangle original rectangle @param padding amount of padding to add on each side @return new padded PDRectangle object
688 Computes the difference rectangle between the annotation and bounding box. @return PDRectangle object representing the difference
689 Returns a rectangle representing the bounding box of the cloudy border. @return PDRectangle object describing the bounds
690 Encodes input data stream into output stream using provided parameters. @param input input data stream @param encoded output stream for encoded data @param parameters filter settings and compression parameters
691 Initializes PDRectangle with default coordinates (0,0) and specified dimensions. @param width rectangle width @param height rectangle height
692 Parses a hexadecimal string from the source, handling whitespace and line breaks. @return COSString object containing the parsed byte data or null if invalid
693 Sets an integer value at a specified index in this array. @param index the position to set the value @param intVal the new integer value to be assigned
694 Initializes an instance of the class with default settings. Disables separating text by beads.
695 Initializes a PDFMarkedContentExtractor instance with default encoding.
696 Initializes the PDFGraphicsStreamEngine with a given page, adding operators for various graphics operations.
697 Writes a string to the specified output stream using default settings. @param bytes input byte array @param output output stream to write to
698 Writes a COSString to an OutputStream. @param string COSString object @param output OutputStream to write to
699 Sets marked content point in PDF output stream. @param tag COSName object representing the marked content
700 Begins marked content with specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
701 Begins marked content section with specified tag. @param tag COSName object for the marked content type
702 Default constructor initializing rectangle with zero coordinates and dimensions.
703 Parses a dictionary value from the PDF source. @return COSBase object representing the parsed value
704 Saves FDF document to a file. @param fileName File path to write data to
705 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object
706 Removes element at specified index from the collection. @param index position of element to be removed (0-based)
707 Clears all key-value pairs from this COS dictionary mapping.
708 Removes a dictionary item by its unique PDF object name. @param key the PDF object identifier as a String @return the removed value or null if not found
709 Initializes COSParser with provided PDF source and default encryption settings. @param source the PDF source to parse
710 Initializes a new PDPageContentStream instance with the given document and appearance stream. @param doc PDDocument object @param appearance PDAppearanceStream object
711 Removes the first occurrence of specified object from this list. @param o Object to be removed @return true if removal was successful, false otherwise
712 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array) @param decryptionPassword password for encrypted PDFs @param keyStore keystore containing encryption keys @param alias alias for encryption key in the keystore
713 Initializes a new PDFormContentStream instance with the given form object. @param form PDFormXObject object containing the form's content stream and resources
714 Sets line width for PDF appearance content stream on demand. @param lineWidth desired line width (default: 1)
715 Draws a paperclip shape on the PDF content stream. @param contentStream PDAppearanceContentStream object for drawing
716 Draws a circle using cubic Bezier curves. @param cs appearance content stream @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle
717 Draws a circle on the PDF content stream. @param cs appearance content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle
718 Draws a diamond shape in the PDF content stream. @param cs AppearanceContentStream object @param x Center x-coordinate of the diamond @param y Center y-coordinate of the diamond @param r Radius of the diamond
719 Draws a shape based on the provided parameters. @param lineWidth line width @param hasStroke whether to draw with stroke @param hasFill whether to fill the shape
720 Draws an arrow shape at the specified position and length. @param cs PDAppearanceContentStream object for rendering @param x x-coordinate of the arrow's tip @param y y-coordinate of the arrow's tip @param len length of the arrow arm
721 Validates and corrects cross-reference offsets by dereferencing object keys. If validation fails, attempts to replace with brute-force search results.
722 Initializes PDPrintFieldAttributeObject with print field ownership.
723 Writes a COSString to an OutputStream. @param output OutputStream to write to @param cosString COSString object being written
724 Encrypts or decrypts PDF document data using various algorithms (AES256, AES, RC4). @param objectNumber unique identifier of the PDF document @param genNumber generation number associated with the object @param data InputStream containing data to be encrypted or decrypted @param output OutputStream to write the encrypted or decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
725 Recursively collects COSBase objects from a COSArray, handling relationships and determining inclusion/exclusion. @param array the COSArray to collect from @return true if any entries in the array demand parent update, false otherwise
726 Sets the origin document state with default dereferencing flag. @param originDocumentState new origin document state
727 Shows text content using the current font and settings. @throws IllegalStateException if beginText() or setFont() have not been called
728 Initializes a new instance of the PageDrawer class with specified parameters. @param parameters constructor-specific initialization data, including page, renderer, subsampling allowed, destination, rendering hints, and image downscaling optimization threshold.
729 Sets the high value in the color table. @param high new high value
730 Initializes PDListAttributeObject with default list owner.
731 Initializes PDLayoutAttributeObject with default layout owner.
732 Constructs a PDImageXObject instance from the provided parameters. @param document PDDocument object @param encodedStream InputStream containing raw image data @param cosFilter COSBase filter object @param width new width value in pixels @param height new height value in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace object or null to clear
733 Initializes a PDStream instance with given PDDocument and optional filter list. @param doc the parent PDDocument @param input the input stream containing data to be transferred @param filters optional filter list to apply during writing
734 Initializes a PDStream instance from a PDDocument and an InputStream with the given filter. @param doc parent PDDocument @param input input stream containing data to be transferred @param filter optional filter to apply during writing
735 Initializes a PDStream instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param input the input stream containing data to be transferred
736 Initializes a PDXObject with the given document and subtype. @param document parent PDF document @param subtype graphical object type (e.g., Form XObject)
737 Initializes a new instance of the class with the given PDF document. @param document the parent PDF document
738 Initializes a new PDMetadata instance with the given PDDocument. @param document parent PDF document
739 Returns the bounding box of the cloudy border. @return PDRectangle object describing the bounds
740 Initializes PDImmutableRectangle with specified dimensions. @param width rectangle width @param height rectangle height
741 Parses a COS string from the PDF source, handling whitespace and line breaks. @return COSString object containing the parsed byte data or null if invalid
742 Sets the target page number to navigate within the PDF document. @param pageNumber unique page identifier
743 Initializes a new instance of PDTableAttributeObject with default table owner.
744 Initializes an image object from the given PDDocument. @param document source PDF document
745 Verifies user password based on encryption revision. @param password provided password as a string @param user expected user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if password is valid, false otherwise
746 Saves FDF document to a file with specified name. @param fileName file path to write data to
747 Writes the content of a PDF page to the output stream. This method processes each article in the {@link charactersByArticle} collection, extracting and formatting text from each TextPosition object within it. The resulting formatted lines are then written to the output stream. @see #charactersByArticle
748 Parses input text into an instruction sequence. @param text the text to be parsed @return the constructed instruction sequence
749 Verifies the owner password for a PDF document based on its encryption revision. @param ownerPassword input byte array @param user expected user password as a byte array @param owner document contents @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if passwords match, false otherwise
750 Finds a FontBoxFont object by PostScript name and attempts to match it with various font formats. @param postScriptName unique PostScript font identifier @return FontBoxFont object or null if not found or incompatible format
751 Initializes a PDEmbeddedFile instance from a PDDocument and an InputStream. @param doc parent PDDocument @param input input stream containing embedded file data @param filter optional filter to apply during writing
752 Initializes a PDStream instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param str the input stream containing data to be transferred
753 Displays formatted text in a PDF content stream. @param text input string to be displayed
754 Initializes a PDFormXObject with the given parent PDF document. @param document parent PDF document
755 Creates a new instance of the PageDrawer class with specified parameters. @param parameters constructor-specific initialization data
756 Writes text with positioning information to output stream. @param textWithPositioningArray array of float and string values representing text position and content
757 Writes a COSBase token to the PDF output stream. @param base COSBase object representing the token
758 Initializes PDMetadata instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param str input stream containing data to be transferred
759 Prepares a PDImageXObject instance from the provided parameters. @param document PDDocument object @param byteArray input image data as byte array @param width new width value in pixels @param height new height value in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace object or null to clear @return Prepared PDImageXObject instance
760 Initializes FDFParser with specified input source. @param source the input source to parse
761 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array) @param decryptionPassword password for encrypted PDFs
762 Draws the appearance style of a PDF annotation line. @param style type of line to draw (e.g. LE_OPEN_ARROW, LE_CLOSED_ARROW) @param cs PDAppearanceContentStream object for rendering @param x x-coordinate of the line's position @param y y-coordinate of the line's position @param width length of the line @param hasStroke whether to draw with stroke @param hasBackground whether to fill the shape with background color @param ending whether to draw an open or closed arrow style
763 Writes content of all specified regions within a PDF page to the output stream.
764 Verifies the owner password for a PDF document based on its encryption revision. @param password input owner password as a string @param user expected user password as a byte array @param owner document contents @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if passwords match, false otherwise
765 Initializes PDLayoutAttributeObject with default layout owner. @param owner unique identifier or reference to the layout
766 Initializes a FileSystemFontProvider instance with a FontCache, scanning the local system for fonts and populating the cache. @param cache FontCache object to store font information
767 Decrypts a COSString instance using the encryptData method. @param string COSString instance to decrypt @param objNum unique identifier of the PDF document @param genNum generation number associated with the object @return decrypted COSString instance or original if decryption fails
768 Encrypts a string by calling the generic encryption method with the string's byte representation. @param string COSString object to be encrypted @param objNum unique PDF document identifier @param genNum generation number associated with the object @return encrypted COSString object
769 Updates the origin document state with child updates. @param child update info to apply
770 Collects a COSBase object into the increment, handling relationships and determining inclusion/exclusion. @param base The COSBase object to collect
771 Retrieves the underlying COSBase object. @return The COSBase object or null if not dereferenced
772 Sets the document's trailer dictionary, updating its update state accordingly. @param newTrailer new trailer dictionary to set
773 Encrypts PDF document data in the given COSStream using various algorithms. @param stream COSStream instance containing the data to be encrypted @param objNum unique identifier of the PDF document @param genNum generation number associated with the object
774 Decrypts the specified COSStream and its contents recursively. @param stream COSStream to decrypt @param objNum unique identifier of the PDF document object @param genNum generation number associated with the object
775 Initializes a PDTransparencyGroup with the given parent PDDocument. @param document parent PDF document
776 Retrieves the key associated with a given value. @param value The target object to search for @return The matching COSName key, or null if not found
777 Adds a COSBase object to the array at specified index. If the object is a dictionary or array and not direct, creates a new COSObject instance. @param i index where the object will be inserted @param object COSBase object to add
778 Checks for the presence of a specific key-value pair in the dictionary. @param value target object to search for @return true if the dictionary contains the value, false otherwise
779 Initializes the PDFormXObject with the given parent PDF document. @param document parent PDF document
780 Updates the update state and propagates it to child objects. @param children array of child objects to be updated
781 Sets a key-value pair in the dictionary. @param key COSName identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
782 Sets the element at the specified index to the given COSBase object. If the object is a dictionary or array and indirect, a new COSObject instance is created; otherwise, the original object is used. @param index position in the array @param object COSBase object to be set
783 Adds a COSBase object to the array, either as a wrapped COSObject or directly. @param object COSBase object to add
784 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process @param quality compression quality level (0-100) @param dpi dots per inch value for metadata @return PDImageXObject instance representing the processed image
785 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array)
786 Collects a COSObject into the increment, handling relationships with other objects and determining whether to include or exclude it. @param object The COSObject to collect
787 Retrieves the collection of COSBase objects, initializing and collecting them from the origin if necessary. @return Set of COSBase objects
788 Prepares a stream object for writing by adding the key and underlying COSBase to the prepared lists. @param key unique identifier for the object @param object COSBase object to prepare
789 Checks if a specified COSBase object is present in the pool. @param object the COSBase object to search for
790 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to retrieve the key for @return The COSObjectKey object or null if not found
791 Initializes a NormalXReference instance with specified byte offset, key, and object. @param byteOffset unique byte offset within the PDF document @param key COSObjectKey representing the referenced object @param object underlying COSBase object, or null if not dereferenced
792 Checks if the given COSBase value contains a self-reference. @param parent The parent object in the PDF document @param value The COSBase object to check for self-reference @return true if the value has a self-reference, false otherwise
793 Accepts a COS visitor, visiting the underlying object or COSNull instance. @param visitor instance of ICOSVisitor to process this null value
794 Closes the COSDocument and its underlying resources, ensuring proper handling of I/O streams and stream cache.
795 Retrieves the linearized dictionary from the document's cross-reference table. @return A COSDictionary object representing the linearized dictionary, or null if not found
796 Retrieves the dictionary object associated with a given key. @param key unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
797 Retrieves the object at a specified index from the collection, potentially resolving nested objects and handling nulls. @param index zero-based index of the desired object
798 Retrieves the length value from a given COSBase object. @param lengthBaseObj The COSBase object containing the length information @return A COSNumber object representing the length, or null if not found
799 Searches for the index of a given COSBase object within the collection. @param object The COSBase object to search for @return Index of the found object, or -1 if not found
800 Collects and includes COSDictionary objects in the increment, handling their children and descendants. @param dictionary COSDictionary object to collect @return true if collection requires parent update, false otherwise
801 Removes a specified COSBase object from the array. If not found, recursively searches for a matching COSObject. @param o COSBase object to be removed @return true if object was successfully removed, false otherwise
802 Retrieves the associated COSObjectKey for a given COSBase object. If the referenced object is not present due to a malformed PDF, a new COSObjectKey instance is created and stored in the objectKeys map. @param obj The COSBase object whose key is to be retrieved
803 Retrieves a string representation from the dictionary object associated with the given key. @param key unique identifier for the dictionary object @return The COSString object as a string, or null if not found or dereferenced.
804 Initializes PDChoice instance with given interactive form. @param acroForm parent interactive PDF form
805 Sets the transformation matrix of this PDFormXObject. @param transform AffineTransform object containing the new matrix values
806 Sets the default style string for a PDVariableText field. @param defaultStyleString input string to be represented (null to clear)
807 Creates a PDImageXObject from a byte array, interpreting its contents as a JPEG image. @param document the parent PDDocument @param byteArray input byte array containing the JPEG image data @return PDImageXObject representation of the JPEG image or null if creation fails
808 Converts transformation matrix to a COSArray.
809 Sets the element at the specified index to the given COSObjectable object. If the object is a dictionary or array and indirect, a new COSObject instance is created; otherwise, the original object is used. @param index position in the array @param object COSObjectable object to be set
810 Sets the rich text value for the variable text field. @param richTextValue new rich text content or null to clear
811 Sets the coordinate system origin. @param coordSystemOrigin array of floating-point numbers representing the origin coordinates
812 Initializes a new instance of the PDThread class.
813 Initializes a PDButton instance with the given AcroForm. @param acroForm parent PDAcroForm object
814 Sets the value for this PDNonTerminalField and its child fields. @param object COSBase object containing the new field value
815 Sets the default value of this non-terminal field. @param value COSBase object representing the default field value
816 Initializes PDTristimulus with a 1D array of tristimulus values (X, Y, Z). @param array array containing X, Y, and/or Z color values
817 Creates a PDDestination object from the given COSBase representation. @param base COSBase object representing the destination @return PDDestination object or null if not supported
818 Converts a COSDictionary to a COSDictionaryMap with basic types as keys and values. @param map the COSDictionary to convert @return A COSDictionaryMap with basic types as keys and values, or null if input is null
819 Inserts or updates a COSObjectKey in the pool and associates it with a given COSBase object. @param key unique identifier @param object associated data value @return The updated COSObjectKey instance or null if not found
820 Initializes a PDSignatureField instance within the given AcroForm. @param acroForm parent AcroForm to integrate with
821 Retrieves the string value of an FDF option. @return The string representation of the option's value or null if not found
822 Converts color components and pattern name to a COSArray instance. @return COSArray object containing color data
823 Initializes a PDDeviceN instance with default colorant attributes.
824 Initializes a new instance of the PDGamma class with default RGB color values.
825 Initializes a PDTextField instance with the given AcroForm. @param acroForm the parent interactive form
826 Retrieves the alternate color space from the PDF stream. @return a PDColorSpace instance representing the alternate color space, or null if not applicable
827 Initializes a PDIndexed object with default color space settings. @param none
828 Returns the default range array for LAB color components. @return COSArray object with default component ranges
829 Initializes a new PDPattern instance with the given PDResources. @param resources PDResources object to associate with the pattern
830 Initializes a new PDSeparation instance with default color separation settings.
831 Sets an integer value at the specified index in the array. @param index position in the array @param value integer value to represent
832 Retrieves the represented name as a string from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
833 Initializes a PDTristimulus object with default tristimulus values (X=0, Y=0, Z=0).
834 Retrieves the default appearance string from the FDF option. @return string representation of the default appearance
835 Retrieves the string representation for a given COSName. @param name unique identifier for the dictionary object
836 Decrypts all elements in the given COSArray. @param array COSArray to be decrypted @param objNum object number used for decryption @param genNum generation number used for decryption
837 Sets the flags for a widget field. @param f integer flag value or null to clear
838 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process @param quality compression quality level (0-100)
839 Adds first intermediate curl shape to the cloud-like border. @param angleCur initial curve angle @param r radius of the circle @param alpha adjustment parameter for arc segments
840 Computes and draws the intermediate curl template for a cloud-like border. @param angleCur initial angle @param r radius of the template @return Array of Point2D.Double objects representing the template points
841 Sets an FDF option using the given string. @param opt input string representing the option value
842 Sets a color at the specified index in the four-color array. @param index position in the array @param colour PDGamma object representing the color to be set
843 Sets the font size to the specified value. @param size the desired font size
844 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to be set
845 Sets the alternate color space for this DeviceN object. @param cs PDColorSpace object to be set
846 Sets the red component of the color value. @param r the float value representing the red component
847 Sets gamma value to the specified float. @param g gamma correction factor
848 Sets the blue color component using gamma-corrected value. @param b blue color intensity (0.0 to 1.0)
849 Sets the default appearance string for this FDF option element. @param da input string to be used as the default appearance
850 Sets the upper-right Y-coordinate of the rectangle. @param value the floating-point Y-value
851 Sets the x-coordinate of the upper-right corner. @param value float value to represent the x-coordinate
852 Sets the y-coordinate of the lower left corner. @param value floating-point value representing the y-coordinate
853 Sets the transition direction. @param direction PDTransitionDirection enum value for the transition direction
854 Sets the transition duration in seconds. @param duration floating-point value representing the duration
855 Retrieves the dictionary object associated with a given string key. @param key unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
856 Sets the fly-out scale factor. @param scale floating-point value representing the scale
857 Sets the fly area's opacity in the transition settings. @param opaque true for opaque, false for transparent
858 Sets a PDF name at the specified index. @param index position in the array @param name unique identifier of the object to retrieve
859 Adds all elements from the specified COSArray to this collection. @param objectList list of COSBase objects to be added
860 Sets the element at the specified index to a COSString object representing the given string. @param index position in the array @param string input string to be represented as a COSString object
861 Sets the minimum value of this numerical range. @param min the minimum value to represent
862 Sets the maximum value of this PDRange. @param max the new maximum value
863 Sets the x-coordinate of the lower-left corner. @param value floating-point value for the x-coordinate
864 Returns a string representation of the COSDictionary instance.
865 Retrieves the dictionary object associated with either the first or second key, in that order. @param firstKey primary key to search for @param secondKey fallback key if first is not found @return The COSBase object or null if not found
866 Initializes a Matrix instance from the provided COSArray. @param array COSArray containing matrix values
867 Checks if the specified COSBase object is present in the pool. @param object the COSBase object to search for
868 Retrieves the permissions byte array from the dictionary object. @return The permissions byte array or null if not found
869 Retrieves the page number associated with this annotation. @return The page number as an Integer or null if not found
870 Retrieves the COSBase object associated with a given key, returning it if valid or null. @return COSBase object or null if not found or invalid
871 Retrieves the field flags as an Integer. @return Field flags value or null if not found
872 Retrieves the set field flags as an Integer. @return The COSNumber object's value or null if not found
873 Retrieves the clear flags for a field. @return The clear flag value as an Integer, or null if not found.
874 Retrieves the widget field flags as an integer value. @return The COSNumber object's int value or null if not found
875 Retrieves the user encryption key from the dictionary. @return byte array containing the user encryption key, or null if not found
876 Retrieves the set widget field flags. @return The COS integer value or null if not found
877 Retrieves the default width for a CID font. @return The default width as a float value
878 Retrieves the device-dependent color space associated with this device. @return PDColorSpace object or null if not found
879 Retrieves the PDColorSpace instance associated with the transparency group attributes. @param resources PDResources object for resource management @return PDColorSpace object or null if not found
880 Initializes a PDOptionalContentGroup instance from the provided COSDictionary. Ensures the dictionary represents an OCG (Optional Content Group). @param dict COSDictionary object to initialize the group with
881 Initializes a PDOptionalContentMembershipDictionary instance from a given COSDictionary. @param dict The dictionary object, which must be of type OCMD
882 Retrieves the overprint mode as an Integer. @return The overprint mode or null if not set
883 Retrieves the soft mask properties and resources. @return PDSoftMask object or null if not found
884 Retrieves the clear widget flags for a form field. @return The Integer value of the CLR_F dictionary object or null if not found
885 Updates the highest cross-reference object number in the document. @param importedPage page containing the imported objects
886 Retrieves the owner encryption key. @return byte array containing the encrypted key or null if not found
887 Checks if metadata encryption is enabled. @return boolean indicating whether metadata is encrypted
888 Retrieves the zoom level of the destination. @return zoom factor as a floating-point number, or -1 if invalid
889 Retrieves the target page number from the destination's associated array. @return The zero-based page number, or -1 if not found
890 Retrieves the target page associated with this destination. @return PDPage object or null if no valid page is found
891 Retrieves the colorant name from the collection. @param index zero-based index of the COLORANT_NAMES array
892 Retrieves the dictionary object associated with a given key and returns it as a COSName. @param key unique identifier for the dictionary object @return The COSName object or null if not found or dereferenced
893 Retrieves the COSDictionary object associated with a given key. @param key unique identifier for the dictionary object @return The COSDictionary object or null if not found or dereferenced
894 Retrieves the COSStream object associated with a given key. @param key unique identifier for the dictionary object @return The COSStream object or null if not found or dereferenced
895 Retrieves the COSArray object associated with a given key. @param key unique identifier for the dictionary object
896 Retrieves the dictionary object associated with a given key, returning it as a COSName if successful. @param key unique identifier for the dictionary object @param defaultValue default value to return if retrieval fails @return The COSName object or defaultValue if not found or dereferenced
897 Retrieves the long value associated with a given key from the dictionary. If not found or dereferenced, returns the provided default value. @param key unique identifier for the dictionary object @param defaultValue default long value to return if not found @return The long value or default value
898 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object @param defaultValue default value to return if not found or null @return The float value or the default value
899 Retrieves the collection of content streams associated with this page. @return Iterator over a list of PDStream objects, or empty iterator if none found
900 Checks whether the page has content. @return true if the page contains a non-empty stream or array, false otherwise
901 Retrieves a collection of class names from the PDF document's dictionary. @return Revisions<String> object containing class names and their revision numbers
902 Retrieves the dictionary object associated with key K. @return The COSBase object or null if not found or dereferenced
903 Retrieves the value dictionary object. @return The COSBase object containing the property value or null if not found
904 Retrieves the floating-point value associated with a given key from the dictionary. @param key unique identifier for the dictionary object
905 Retrieves the date value associated with a given key. @param key unique identifier for the date object @return Calendar instance or null if not found or invalid input
906 Returns an iterator over the COSBase objects in this collection. @return Iterator object for traversing the collection's contents
907 Grows the COSArray to accommodate a specified size by repeatedly adding a provided COSBase object. @param size minimum required buffer capacity @param object COSBase object to add repeatedly
908 Retrieves the named destination associated with this target directory. @return PDNamedDestination object or null if not found
909 Retrieves the digital signature contents as a byte array.
910 Retrieves the XFA (XML Forms Architecture) resource from the dictionary. @return PDXFAResource object or null if not found
911 Retrieves an inheritable attribute from the field's dictionary, its parent (if exists), or the AcroForm's COS object. @param key the name of the attribute to search for
912 Initializes an empty FDF option element with default values.
913 Retrieves the value of this PDNonTerminalField. @return The COSBase object representing the field's value
914 Retrieves the default value from the field's dictionary. @return The COSBase object representing the default value, or null if not found
915 Initializes a new instance of the PDFontSetting class with default font settings.
916 Closes the COSDocument and underlying resources, ensuring proper I/O stream handling.
917 Writes a COSBase object to the output stream, handling cross-reference table updates and object serialization. @param key COSObjectKey representing the referenced object @param obj underlying COSBase object to be written
918 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to retrieve the key for
919 Retrieves the field value as a string. @return The field value or an empty string if not found
920 Initializes a PDRange object with default bounds [0, 1].
921 Sets the array of floating-point values. @param value the new float array
922 Retrieves the cross-reference stream for writing. @return COSStream object containing stream data
923 Retrieves the transfer dictionary object. @return The COSBase object or null if invalid
924 Retrieves the transfer function object for graphics rendering. @return The COSBase object representing the transfer function or null if invalid
925 Retrieves the backdrop color as a COSArray object. @return The COSArray representing the backdrop color, or null if not set
926 Determines the open mode for linked content in a new window. @return OpenMode enum value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE) based on dictionary object value.
927 Retrieves the 'T' dictionary object associated with the action.
928 Retrieves the open mode for launching external content in a new window. @return OpenMode value indicating whether to launch in a new window, same window, or follow user preference.
929 Determines the open mode for linked content in a new window. @return OpenMode enum value indicating whether to open in a new window, same window, or follow user preference
930 Adds a COSObjectable to the array, wrapping its COSObject. @param object COSObjectable to add
931 Creates a list of object streams by iterating over the object stream objects and initializing a new stream when necessary. @return List of COSWriterObjectStream instances
932 Sets the flags for a set widget field. @param ff integer value representing the flags
933 Sets the transformation matrix. @param matrix 3x3 matrix to be set
934 Sets the gamma correction values in the color space. @param gamma PDGamma object containing gamma data
935 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode COSBase object representing a blend mode @return BlendMode instance or NORMAL if not found
936 Sets gamma correction factor in CALGRAY color space. @param value gamma value to be applied
937 Retrieves a COSDictionary object containing page label data. @return COSDictionary instance with NUMS key and array of integer-label pairs
938 Initializes an instance of PDComplexFileSpecification with default file specification attributes.
939 Initializes a PDComplexFileSpecification instance from a COSDictionary. @param dict COSDictionary object to initialize the specification with
940 Sets the range values of this PDFunction. @param rangeValues COSArray containing range values
941 Sets the domain values for this PDFunction instance. @param domainValues array of values defining the function's domain
942 Sets encoding values and adds them to the dictionary. @param encodeValues COSArray of encoding values
943 Sets decoding values from a COSArray. @param decodeValues array containing decoding data
944 Removes a specified attribute from the logical structure. @param attributeObject attribute to be removed
945 Removes a class name from the PDF structure. @param className unique identifier of the class to remove
946 Adds a child structure node to the existing list of children. @param object the child structure node (COSBase) to append
947 Inserts a new child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
948 Removes a specified child node from the current structure node. @param object COSBase object to be removed @return true if object was successfully removed, false otherwise
949 Sets the "K" key in the underlying dictionary. @param k COSBase value for the "K" item
950 Sets the line dash pattern for guidelines in a PDF document. @param dashArray COSArray object specifying the dash pattern (null to reset)
951 Clears this COSArrayList and updates the associated document. @param parentDict COSDictionary to update if present
952 Initializes an empty PDPageTree instance with a root dictionary representing the page tree structure.
953 Sets the pattern's transformation matrix. @param transform AffineTransform object representing the matrix
954 Sets the visibility policy in the dictionary. @param visibilityPolicy COSName identifier for the visibility policy
955 Initializes an instance of PDOptionalContentMembershipDictionary with default values.
956 Initializes an instance of PDTransparencyGroupAttributes with default transparency settings.
957 Updates the parent entry for each sub-entry in a COSArray. @param kArray array of COSBase objects to update @param newParent updated parent dictionary @param newStructureType optional structure type (may be null)
958 Sets rich text value in the dictionary. @param rv COSString containing the rich text data
959 Sets the cryptographic filter method in the dictionary. @param cfm COSName identifier for the encryption method
960 Sets document information. @param info PDDocumentInformation object to be stored
961 Initializes a PDDocumentCatalog instance for the given PDF document. @param doc the underlying PDF document
962 Sets the base color space to the given PDColorSpace object. @param base the new base color space
963 Sets or removes the crop box for this PDPage. @param cropBox new crop box dimensions or null to remove
964 Parses the next token from the input stream. @throws IOException if an I/O error occurs during parsing
965 Sets the bounding box of the tiling pattern. @param bbox the PDRectangle object to be set (or null to clear)
966 Sets the character set for the font descriptor. @param charSet input string representing the character set
967 Sets the font stretch attribute. @param fontStretch string value representing font stretch (e.g. "ultra-condensed")
968 Sets the interior color of the annotation square. @param color Color object containing RGB components
969 Sets coordinates for text markup annotation. @param coords array of floating-point numbers representing the annotation's coordinates
970 Sets document ID in FDF dictionary. @param id COSArray containing ID data
971 Sets the differences stream in the FDF dictionary. @param diff COSStream containing the differences data
972 Sets the value of a field in the FDF document. @param value the value to be set (may be a list of strings or other types)
973 Sets the field value. @param value COSBase data to be stored
974 Sets the field flags for the current form field. @param ff integer representation of field flags
975 Sets the field flags for this FDFField instance. @param ff integer representation of the field flags
976 Sets clear field flags for the current form field. @param ff integer value representing clear field flags
977 Initializes a PDFont instance with default settings.
978 Sets the 'after' action in the JavaScript dictionary. @param after script to be executed after form processing
979 Sets the script to be executed before another JavaScript action. @param before input string representing the script
980 Sets rich text value in the FDF field dictionary. @param rv COSStream containing rich text data
981 Sets the interior color of the polyline annotation. @param color Color object to be set
982 Sets polyline annotation vertices from an array of float values. @param vertices array of vertex coordinates
983 Sets the interior color of this polygon annotation. @param color Color object to be set
984 Sets polygon vertices. @param vertices array of float values representing polygon coordinates
985 Sets the font family for the PDF font descriptor. @param fontFamily unique identifier of the font family
986 Sets a PDF filter using the provided string identifier. @param filter string name of the filter to be set
987 Sets the font name in the PDF document. @param fontName unique identifier of the font to set
988 Sets owner key encryption settings. @param o byte array representing the owner key
989 Sets the user encryption key. @param u byte array representing the user key
990 Sets owner encryption key in PDF document. @param oe byte array representing the encryption key
991 Sets the user encryption key in the PDF document's dictionary. @param ue byte array representing the encryption key
992 Sets the list of PDF recipients. @param recipients 2D byte array containing recipient data
993 Initializes a new instance of the PDFontDescriptor class. Constructs an empty dictionary and sets its type to FONT_DESC for font descriptor management.
994 Sets the stream filter name in the encryption settings. @param streamFilterName COSName identifier for the stream filter
995 Retrieves colorant names from alternate color space. @return list of colorant names
996 Sets the font bounding box by storing a COSArray representation of the rectangle. @param rect PDRectangle object containing the font dimensions
997 Sets the string filter name in the encryption settings. @param stringFilterName COSName identifier for the string filter
998 Removes V4.5 filters from the encryption settings.
999 Initializes an instance of the FDFAnnotation class with default annotation type.
1000 Sets the annotation's color from a Color object. @param c Color value to be set
1001 Sets rich contents of an annotation. @param rc input string to be represented as rich content
1002 Sets the interior color of the circle annotation. @param color Color object to be set
1003 Sets the callout style of the annotation. @param callout array of float values defining the callout
1004 Sets the coordinates of a line annotation. @param line array of floating-point numbers representing the line's vertices
1005 Retrieves the alternate color space for DeviceN color management. @return PDColorSpace object or null if not initialized
1006 Writes a reference to the specified COSBase object. @param obj The COSBase object being referenced
1007 Sets the interior color of the line annotation. @param color Color object to set as the interior color
1008 Sets PDF encryption permissions. @param perms byte array containing permission settings
1009 Sets the background shading in the PDF document. @param newBackground COSArray representing the new background
1010 Sets clear widget field flags for the current form field. @param ff integer value representing the flag to be set
1011 Sets the color space for this PDShading object. @param colorSpace new color space (null to clear)
1012 Converts the array of COSBase objects to a float array. @return An array of floats, where each element is the value of the corresponding object in the collection, or 0 if not applicable
1013 Converts the array of COSBase objects to a list of Float values. @return List of Float values representing the numeric elements in the array, or null for non-numeric elements
1014 Converts the collection of COSBase objects to a list of integers. @return List of integers, or null if not all elements are convertible
1015 Retrieves the minimum value of this range.
1016 Retrieves the maximum value of this numerical range.
1017 Retrieves the color at a specified index from the collection. @param index zero-based index of the desired object
1018 Retrieves a list of string options for display. @return List of String values or empty if not found
1019 Retrieves a list of string options from the choice field's dictionary object. @return List of option strings
1020 Initializes a new instance of the PDSeedValueCertificate class with default certificate type and direct flag.
1021 Sets the timestamp for this PDSeedValue. @param timestamp TimeStamp object to be stored
1022 Sets the MDP seed value. @param mdp MDP object to be stored
1023 Sets the bounding box of this shading. @param newBBox new rectangle to be set (null to remove)
1024 Sets the digital signature filter. @param filter COSName identifier for the filter to be set
1025 Initializes a PDSeedValue instance with default attributes.
1026 Sets the dash style of the border by storing a COSArray representation. @param dashArray array defining the dash pattern
1027 Initializes a new instance of the PDAppearanceDictionary class with default appearance entries.
1028 Sets the quad points defining the text markup annotation. @param quadPoints array of floating-point numbers representing the quad points
1029 Wraps the existing page's content in a save/restore pair (q/Q) to have a controlled environment for adding additional content. @param page PDPage object to be wrapped
1030 Sets the encryption dictionary in the document's trailer. @param encDictionary COSDictionary containing encryption settings
1031 Initializes an instance of PDAcroForm with the given PDF document. @param doc the parent PDDocument
1032 Sets the colorant name. @param name unique identifier of the colorant
1033 Sets the text color of this outline item to the specified value. @param textColor the new text color
1034 Sets PDF document contents from a byte array. @param bytes source byte array
1035 Sets the byte range for a digital signature. @param range array of 4 integers representing the byte range
1036 Sets the SubFilter value in the digital signature dictionary. @param subfilter COSName identifier for the SubFilter
1037 Sets the PDF filter. @param filter COSName identifier for the filter to be set
1038 Sets the digital signature type. @param type COSName identifier for the digital signature type
1039 Initializes a new instance of the PDSignature class with default signature type.
1040 Sets the alternate color space. @param colorSpace new PDColorSpace object
1041 Sets the X tristimulus value. @param x new float value to represent
1042 Sets the Y tristimulus value. @param y the float value to represent
1043 Sets the Z tristimulus value. @param z floating-point Z value
1044 Sets a key-value pair in the dictionary with optional object wrapping. @param key COSName identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
1045 Sets a boolean item in the dictionary. @param key unique identifier for the item to be set @param value boolean value to be stored
1046 Sets a boolean value in the dictionary. @param key COSName identifier for the item to be set @param value true or false value
1047 Sets a key-value pair in the dictionary using a string key. @param key unique identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
1048 Sets a string value in the dictionary with the given key. @param key COSName identifier for the item to be set @param value string data to be stored (null to remove existing item)
1049 Sets a string item in the dictionary. @param key COSName identifier for the item to be set @param value input string to be represented
1050 Sets an integer value in the dictionary. @param key COSName identifier for the item to be set @param value integer value to represent
1051 Sets a long integer value in the dictionary. @param key COSName identifier for the item to be set @param value long integer value to represent
1052 Sets a floating-point value in the dictionary. @param key COSName identifier for the item to be set @param value the float value to represent
1053 Creates a COSStream instance and populates it with the given dictionary. @param dictionary COSDictionary to be stored in the stream @param startPosition starting position of the data in the stream @param streamLength length of the data in the stream @return populated COSStream object
1054 Sets the document ID in the trailer dictionary. @param id unique identifier as a COSArray object
1055 Sets the rectangle differences for this annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1056 Sets polyline vertices from an array of float values. @param points array of floating-point numbers representing vertex coordinates
1057 Sets the relationship of the target directory to either 'P' or 'C'. @param relationship COSName identifier for the relationship (must be P or C)
1058 Sets the 'B' parameter in the action dictionary. @param b COSBase data to be stored
1059 Sets the thread action parameter 'D'. @param d COSBase object containing the value to be stored
1060 Configures form fields using the provided COSArray. @param array collection of form field data
1061 Sets the sound content associated with this sound action. @param sound COSStream object containing the sound data
1062 Sets the parent markup annotation. @param annot PDAnnotationMarkup object to be assigned as parent
1063 Sets the 'H' flag to control hiding behavior. @param h true to hide, false otherwise
1064 Sets the 'T' item in the action dictionary. @param t COSBase value to be stored for the 'T' item
1065 Initializes a PDAnnotation instance with default properties.
1066 Sets the transfer function 2 in the extended graphics state. @param transfer2 COSBase representation of the transfer function
1067 Sets a float item in the dictionary. @param key COSName identifier for the item to be set @param value floating-point value to represent (null removes the item)
1068 Sets the blend mode using the specified BlendMode. @param bm BlendMode object containing COSName identifier
1069 Initializes a new instance of the PDExtendedGraphicsState class. Sets the dictionary type to EXT_G_STATE and initializes an empty COSDictionary.
1070 Sets the decode values for triangle-based shading. @param decodeValues array of decode values to be stored
1071 Sets shading coordinates. @param newCoords array of coordinates for the Type 2 shading
1072 Sets the domain of Type 2 shading to a specified COSArray. @param newDomain array representing the domain values
1073 Sets the shading extend values. @param newExtend COSArray object containing extend values
1074 Sets the shading domain in the dictionary. @param newDomain COSArray identifier for the domain to be set
1075 Sets the transformation matrix from an AffineTransform object. @param transform Transformation matrix to be set
1076 Sets a new shading function in the PDF document. @param newFunctions array of shading functions to be applied
1077 Sets the transfer function in the extended graphics state. @param transfer COSBase object representing the new transfer function
1078 Initializes a PDAnnotation instance from a COSDictionary. @param dict the dictionary object to initialize from
1079 Sets form fields from a COSArray object. @param array COSArray containing field data
1080 Sets line coordinates using an array of floats. @param l array of floating-point numbers representing the line's points
1081 Sets rectangle differences for the free text annotation. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
1082 Sets the ink list by creating a COSArray instance from the provided float[][] data. @param inkList 2D array of floating-point numbers representing the ink paths
1083 Sets the annotation's rectangular bounds. @param rectangle PDRectangle object specifying the dimensions
1084 Sets rectangle margin differences. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1085 Sets the callout settings from an array of float values. @param callout array of floating-point numbers representing the callout settings
1086 Sets the quad points of a link annotation. @param quadPoints array of float values representing the quad points
1087 Sets rich contents of the annotation. @param rc input string representing rich content
1088 Sets the annotation's border attribute from a COSArray object. @param borderArray array of border settings
1089 Sets polygon vertices from an array of float values. @param points array of floating-point numbers representing the polygon's vertices
1090 Sets interior color of square or circular annotation. @param ic PDColor object containing color data
1091 Sets an array of rectilinear measurement distances. @param distances array of PDNumberFormatDictionary objects
1092 Sets the interior color of the polygon annotation. @param ic new interior color
1093 Sets a list of rectilinear measurement areas within the PDF document. @param areas array of PDNumberFormatDictionary objects representing measurement areas
1094 Sets the interior color of the annotation line. @param ic PDColor object representing the desired color
1095 Sets the interior color of the polyline annotation. @param ic PDColor object representing the desired color
1096 Sets the background color of an annotation. @param c PDColor object representing the new background color
1097 Creates a cloned element based on the source object type. @param src The original COSBase object to clone @param dstParent The parent COSDictionary to which the cloned elements belong @param currentPageDict The current page's dictionary (used for annotation management)
1098 Sets the rectilinear measurement angles. @param angles array of PDNumberFormatDictionary objects representing individual angles
1099 Sets text color of this outline item. @param textColor Color to be applied
1100 Sets the tint transformation function. @param tint PDFunction object representing the tint transformation
1101 Sets the tint transformation function. @param tint PDFunction object representing the tint transformation
1102 Sets the color of this annotation. @param c PDColor object representing the new color
1103 Constructs a COSArray instance representing width values for Type 2 CID fonts. @param cidFont COSDictionary containing font metrics
1104 Sets the line dash pattern using the provided PDLineDashPattern object. @param dashPattern Line dash pattern data
1105 Sets the primary font to the specified font. @param font The new primary font
1106 Sets an array of rectilinear measurement changes. @param changeXs array of PDNumberFormatDictionary objects
1107 Creates a PDImageXObject from an input stream containing JPEG image data. @param document the parent PDDocument @param stream input stream with JPEG image data @return PDImageXObject representation of the JPEG image or null if creation fails
1108 Retrieves the text color from the PDF document. @return PDColor object representing the text color
1109 Grows the COSArray to accommodate a specified minimum buffer capacity. @param size minimum required buffer capacity
1110 Retrieves the default B component range for LAB color representation. @return PDRange object with default B component values
1111 Sets the line color for guidelines in a PDF document. @param color PDColor object specifying the color
1112 Sets the Y-coordinate changes in the dictionary. @param changeYs array of PDNumberFormatDictionary objects representing Y-coordinate changes
1113 Sets line slopes using an array of PDNumberFormatDictionary objects. @param lineSloaps array of slope definitions
1114 Initializes a PDPattern instance with specified resources and color space. @param resources PDResources object for pattern management @param colorSpace PDColorSpace object representing the underlying color model
1115 Retrieves the color range for a specific component. @param n index of the component
1116 Initializes a new instance of the class with the given PDDocument. @param doc the parent PDF document
1117 Retrieves a color object or a four-colors instance based on the given name. @param name unique identifier for the dictionary object
1118 Retrieves the default range array for LAB color components. @return COSArray object with default component ranges
1119 Sets the border color of an annotation. @param c PDColor object representing the desired color
1120 Adds a PDOutputIntent object to the catalog dictionary. @param outputIntent output intent data
1121 Sets the target page to the specified PDPage object. @param page PDPage object representing the destination page
1122 Retrieves the date associated with the signature. @return Calendar instance or null if not found
1123 Writes an Operator token to the PDF output stream. @param op Operator object containing image data
1124 Sets the horizontal offset of the line annotation's caption. @param offset float value representing the offset
1125 Sets the vertical caption offset for a line annotation. @param offset floating-point value representing the vertical offset
1126 Sets the operating system property in the digital signature properties dictionary. @param os the name of the operating system (null to remove existing value)
1127 Retrieves the white point coordinates from the dictionary, creating a default COSArray if not found. @return PDTristimulus object representing the white point
1128 Retrieves the black point tristimulus values from the dictionary. @return PDTristimulus object with X, Y, and Z color values or a default zero-value instance if not found.
1129 Adds a subject byte array to the certificate's dictionary. @param subject subject data to be added
1130 Sets the key usage extension in the certificate's dictionary. @param keyUsageExtension string representing allowed key usages (0, 1, X)
1131 Adds an issuer to the certificate's ISSUER attribute. @param issuer byte array representing the issuer's name
1132 Adds an OID to the certificate's dictionary. @param oid byte array representing the OID value
1133 Sets the color range for a PDF component. @param range PDRange object containing minimum and maximum values @param n number of components in the range array
1134 Retrieves the creation date of this annotation. @return Calendar instance or null if not found
1135 Performs the initial parsing of the PDF document. Retrieves trailer, root dictionary and sets document state to decrypted. @throws IOException if missing root object specification in trailer
1136 Retrieves creation date annotation value. @return Calendar instance or null if not found
1137 Retrieves the modification date of the PDF document. @return Calendar instance or null if not found
1138 Sets the vertical caption offset for a line annotation. @param offset floating-point value representing the vertical offset
1139 Sets the horizontal offset of a line annotation's caption. @param offset float value representing the offset
1140 Sets the cryptographic filter dictionary. @param cryptFilterName unique identifier for the filter @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
1141 Retrieves the guideline color from the dictionary. @return A PDColor object representing the guideline color
1142 Sets a user attribute with a new value. @param value The COSBase object containing the property value
1143 Retrieves the gamma values associated with this PDCalRGB instance. @return PDGamma object containing gamma values
1144 Retrieves and maps the colorant separations from a given PDF resources object. @param resources The PDResources object to fetch colorants from @return A map of colorant names to their corresponding PDSeparation objects
1145 Adds a new user property to the document's logical structure. @param userProperty PDUserProperty object to add
1146 Retrieves the dictionary of additional interactive actions for this page. @return A PDPageAdditionalActions object or null if not found
1147 Initializes PDDocumentNameDictionary with a PDDocumentCatalog. @param cat the parent document catalog
1148 Retrieves the additional actions dictionary from the document catalog. @return PDDocumentCatalogAdditionalActions object or null if not found
1149 Retrieves the list of threads from the PDF document catalog. @return List of PDThread objects or an empty list if not found
1150 Retrieves the PDF document's information. @return PDDocumentInformation object containing document metadata
1151 Retrieves date value associated with a given key. @param key unique identifier for the date object
1152 Retrieves the date value associated with a given key; returns default calendar if not found. @param key unique identifier for the date object @param defaultValue Calendar instance to return if key is invalid or not present
1153 Retrieves the creation date of the PDF document. @return Calendar instance representing the creation date or null if not found
1154 Retrieves the child dictionaries from a given COSDictionary node. @param node the parent dictionary to fetch children from @return list of child dictionaries or an empty list if not found
1155 Sets the upper limit to a specified numeric value. @param upper upper limit value or null if not set
1156 Sets the digital signature's name. @param name input string to be represented
1157 Sets the style for the start and end points of a line annotation. @param style style name (e.g. "Solid", "Dashed") or null to reset
1158 Sets the mapping name in the field's dictionary. @param mappingName input string to be represented
1159 Sets an alternative field name in the AcroForm structure. @param alternateFieldName new name to be associated with the field
1160 Sets the partial name of this PDField. @param name input string to be set
1161 Sets default choice field value. @param value input string to be represented as default value
1162 Sets the default appearance of form fields. @param daValue string value representing the default appearance
1163 Sets the title of the outline item. @param title input string to be represented as title
1164 Sets the contact information in the digital signature. @param contactInfo input string to be represented
1165 Sets the reason associated with a digital signature. @param reason input string describing the reason
1166 Sets the location item in the COSDictionary. @param location input string to be represented as the location
1167 Sets the URL item in the dictionary. @param url input URL to be represented
1168 Sets the URL attribute in the certificate dictionary. @param url input URL to be represented
1169 Sets the digital signature's date attribute. @param date input date string
1170 Sets an alternate annotation caption. @param caption input string to be represented
1171 Sets the string value for this non-terminal field. @param value input string to be represented
1172 Sets rollover caption. @param caption input string to be represented
1173 Sets the state model of the annotation. @param stateModel input string representing the state model
1174 Sets the annotation's state. @param state new state to be assigned
1175 Sets the subject of this markup annotation. @param subj input string representing the subject
1176 Sets the title of a popup annotation. @param t input string to be represented
1177 Sets the default style string in the annotation's dictionary. @param defaultStyleString input string to be represented
1178 Sets the default appearance of the free text annotation. @param daValue string value representing the default appearance
1179 Sets the annotation name. @param nm new name to be represented
1180 Sets the modified date annotation value. @param m new modified date string
1181 Sets the contents of the annotation. @param value input string to be represented
1182 Sets the execute parameter. @param param input string to be represented as P item in dictionary
1183 Sets the operation type. @param op operation string (e.g. "open", "edit")
1184 Sets the directory path in the launch parameters. @param dir input directory path to be represented
1185 Sets the filename parameter. @param file input filename string
1186 Sets the normal caption for interactive PDF annotations. @param caption input string to be represented
1187 Sets the text field's value. @param value input string to be represented
1188 Sets the default text field value in the PDF form. @param value input string to be represented as the default value
1189 Sets the default appearance string for this variable text field. @param daValue new default appearance value
1190 Sets font descriptor flags. @param flags integer value representing font flags
1191 Sets clear widget field flags. @param ff integer value representing flags
1192 Sets widget-specific flags in the FDF field. @param ff integer value representing various flags
1193 Sets flags for the associated widget field. @param f integer value representing the flag settings
1194 Sets clear field flags in the dictionary. @param ff integer value representing clear field flags
1195 Sets flags for a set field within an FDF document. @param ff integer value representing field flags
1196 Sets field flags in the FDF dictionary. @param ff integer value representing field flags
1197 Sets the rotation angle of the free text annotation. @param rotation integer value representing the rotation degree
1198 Sets the justification of a free text annotation. @param justification "centered", "right", or null to clear
1199 Sets the annotation's page to the specified value.
1200 Sets document permissions. @param permissions integer value representing permission settings
1201 Sets the document revision number. @param revision integer value representing the current document revision
1202 Sets the document's length in the encryption settings. @param length integer value representing the document's length
1203 Sets the encryption version. @param version integer representation of the encryption version
1204 Sets the encryption filter's length. @param length integer value representing the encryption filter's length
1205 Sets the next key of the parent tree in the dictionary. @param parentTreeNextkey integer value representing the next key
1206 Sets the PDF document's revision number. @param revisionNumber non-negative integer value representing the revision number
1207 Sets the Marker Context Identifier (MCID) in the underlying COSDictionary. @param mcid integer value representing the MCID
1208 Sets bits per sample value. @param bps integer value representing the bits per sample
1209 Sets the starting page number for the PDF document. @param start positive integer representing the first page number
1210 Initializes a PDPageTree instance with the given root dictionary and document. @param root COSDictionary representing the page tree root @param document PDDocument associated with the page tree
1211 Sets the rotation of this PDPage. @param rotation integer value representing the new rotation angle
1212 Sets the structural parent ID of this PDF page. @param structParents unique identifier for structural parents
1213 Sets an integer value in a nested dictionary. @param embeddedDictionary Embedded dictionary identifier @param key Unique identifier for the item to be set @param value Integer value to represent
1214 Sets an integer value in the dictionary using the provided key. @param key unique string identifier for the item to be set @param value integer value to represent
1215 Sets the rectilinear measurement scale ratio. @param scaleRatio input string representing the scale ratio
1216 Sets the annotation name in the dictionary. @param name input string to be represented as the annotation name
1217 Initializes the width array for a given range of characters in the provided font. @param font COS dictionary representing the font @param glyphList list of glyphs used to map character codes to Unicode strings and retrieve glyph IDs
1218 Sets the target directory's filename. @param filename input string to be represented
1219 Sets PDF launch parameter 'p' to specified string value. @param p input string representing the launch parameter
1220 Sets the file name in the file system. @param file input string to be represented
1221 Sets the Unicode name of an embedded file. @param file input string representing the file's Unicode name
1222 Sets or clears the page label prefix. @param prefix new prefix string or null to clear
1223 Sets the document producer. @param producer input string representing the document's producer
1224 Sets the document creator. @param creator input string representing the creator
1225 Sets the keywords metadata attribute of the PDF document. @param keywords input string representing the document's keywords
1226 Sets the document's subject metadata. @param subject input string to represent the subject
1227 Sets the document author. @param author input string representing the author
1228 Sets the PDF document's title. @param title input string representing the new title
1229 Sets the document's language. @param language input string representing the desired language
1230 Sets a string item in the dictionary with embedded object. @param embedded COSName identifier for the embedded object @param key COSName identifier for the string item to be set @param value input string to be represented
1231 Sets a string item in the dictionary with the given key. @param key unique identifier for the item to be set @param value input string to be represented
1232 Sets a date item in the dictionary. @param key COSName identifier for the date item @param date Calendar object to be represented as string
1233 Sets file description in PDF context. @param description input string to be represented
1234 Sets the page transition motion. @param motion PDTransitionMotion object defining the transition style
1235 Sets the dimension of this transition. @param dimension TransitionDimension enum value
1236 Initializes a PDTransition instance with the specified transition style. @param style Transition style (e.g. slide, fade)
1237 Sets the viewport's display name. @param name new display name (null to remove existing name)
1238 Initializes a new instance of the PDNumberFormatDictionary class. Sets the type value in the internal dictionary with key "TYPE".
1239 Sets the measurement subtype in the dictionary. @param subtype string value representing the measurement subtype
1240 Initializes an instance of the PDMeasureDictionary class. @param measureDictionary measurement dictionary object
1241 Sets the identifier of the PDStructureElement. @param id unique identifier string
1242 Sets the title of the PDF document structure element. @param title input string to be represented as the title
1243 Sets the document's language. @param language input string representing the language
1244 Sets the operating system-specific launch parameter 'o'. @param o input string value to be represented
1245 Sets the 'D' launch parameter. @param d input string representing the file specification
1246 Sets the file specification parameter. @param f input string representing file specification
1247 Sets JavaScript action string. @param sAction input JavaScript code to be executed
1248 Initializes a PDOptionalContentProperties instance with default settings.
1249 Sets the name of an optional content group. @param name input string to be represented as the group's name
1250 Sets the name of this named page reference. @param name input string to be represented
1251 Sets the partial field name in the FDF dictionary. @param partial input string to be represented as the partial field name
1252 Sets the target form field in the FDF dictionary. @param target input string to be represented
1253 Sets the FDF document's status. @param status input string representing the document's status
1254 Sets the state model of the text annotation. @param stateModel new state model value
1255 Sets the state of the text annotation. @param state new state value
1256 Sets the style of the line annotation's caption. @param captionStyle input string to define the caption style
1257 Sets default style for free text annotations. @param style input string representing the default style
1258 Sets the default appearance of the annotation. @param appearance input string representing the default appearance
1259 Sets the annotation symbol according to the input string. @param symbol input string representing the annotation symbol
1260 Sets the subject annotation in the COSDictionary. @param subject input string representing the subject
1261 Sets the title annotation in the dictionary. @param title input string to be represented as the title
1262 Sets the annotation's content. @param contents input string to be represented
1263 Sets annotation's display name. @param name input string to be represented
1264 Sets the date annotation in the dictionary. @param date input string representing the date
1265 Sets the actual text in the PDF structure element. @param actualText input string to be represented
1266 Sets the expanded form of the PDF structure element. @param expandedForm input string representing the expanded form
1267 Sets an alternate description item in the PDF document structure. @param alternateDescription input string for the alternate description
1268 Sets the URI associated with this PDActionURI. @param uri new URI value
1269 Initializes a new instance of the document outline from an existing COSDictionary. @param dic COSDictionary object containing the outline structure
1270 Initializes an instance of the FDFAnnotationTextMarkup class with default annotation type.
1271 Initializes an instance of FDFAnnotationText with default annotation subtype.
1272 Initializes an instance of the FDFAnnotationStamp class with default subtype.
1273 Initializes an instance of FDFAnnotationSquare with default subtype.
1274 Initializes an instance of FDFAnnotationSound with default subtype.
1275 Initializes an instance of FDFAnnotationPolyline with default subtype annotation.
1276 Initializes an instance of FDFAnnotationPolygon with default subtype.
1277 Initializes an instance of FDFAnnotationLink with default annotation subtype.
1278 Initializes a new instance of the FDFAnnotationLine class with default annotation type.
1279 Initializes an instance of FDFAnnotationInk with default annotation subtype.
1280 Initializes an instance of FDFAnnotationFreeText with default subtype.
1281 Initializes an instance of FDFAnnotationCircle with default annotation type.
1282 Initializes an instance of FDFAnnotationCaret with default annotation subtype.
1283 Removes a specified child node that is COSObjectable from the current structure node. @param objectable COSObjectable object to be removed
1284 Inserts a new objectable child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
1285 Adds a child structure node with COSObjectable interface to the existing list of children. @param objectable the child structure node (COSObjectable) to append
1286 Creates a PDFileSpecification instance from the given COSBase object. @param base COSBase object to create specification from @return PDFileSpecification object or null if invalid input
1287 Retrieves the document catalog for this PDF document. @return PDDocumentCatalog object or null if not found
1288 Initializes a PDDocument object with an in-memory stream cache.
1289 Retrieves the width of a Type 3 font character procedure. @throws IOException if an I/O error occurs during parsing
1290 Retrieves the bounding box of a glyph. @return PDRectangle object representing the glyph's bounds or null if not found
1291 Parses the input stream and returns a list of tokens. @throws IOException if an I/O error occurs during parsing
1292 Clones and merges the given COSObjectable into the target. @param base the original object to clone @param target the object to merge into
1293 Initializes an instance of FDFAnnotationFileAttachment with default subtype.
1294 Builds vertical metrics for the given CID font. @param cidFont COSDictionary instance representing the CID font
1295 Initializes an instance of the PDSimpleFont class with default values.
1296 Draws a basic ellipse within the specified rectangle. @param left left edge of bounding box @param bottom bottom edge of bounding box @param right right edge of bounding box @param top top edge of bounding box
1297 Adds corner curl to the PDF document by drawing two Bezier curve segments. @param anglePrev previous angle @param angleCur current angle @param radius radius of the curves @param cx x-coordinate of the center point @param cy y-coordinate of the center point @param alpha and alphaPrev curvature parameters @param addMoveTo whether to add a 'move to' command before drawing
1298 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process
1299 Retrieves the annotation's border, ensuring it has at least 3 elements. If missing, additional elements are set to zero (as per Adobe Reader behavior). @return COSArray object representing the border
1300 Initializes PDChoice instance with given interactive form. @param acroForm parent interactive PDF form
1301 Initializes PDComboBox instance with given interactive PDF form. @param acroForm parent interactive PDF form
1302 Initializes a PDCheckBox instance with the given AcroForm. @param acroForm parent PDAcroForm object
1303 Sets uniform rectangle differences for this annotation. @param difference single value for all margin differences
1304 Sets uniform rectangle differences for the free text annotation. @param difference single margin adjustment value
1305 Sets uniform rectangle margin differences. @param difference single value for all margins
1306 Initializes a PDAnnotation instance from a COSDictionary. @param field the dictionary object to initialize from
1307 Initializes a PDAnnotationUnknown instance from a COSDictionary. @param dic the dictionary object to initialize from
1308 Initializes a PDAnnotationPopup instance from a COSDictionary. @param dict the dictionary object to initialize from
1309 Initializes a PDAnnotationMarkup instance from a COSDictionary. @param dict the dictionary object to initialize from
1310 Initializes a PDAnnotationLink instance from a COSDictionary. @param dict the dictionary object to initialize from
1311 Initializes a new PDAnnotationWidget instance with default subtype.
1312 Initializes a PDAnnotation instance with default properties.
1313 Initializes a PDAnnotationMarkup instance with default properties.
1314 Initializes a PDAnnotationLink instance with default properties. Sets the subtype to "SUB_TYPE".
1315 Sets the non-stroking alpha constant. @param alpha floating-point value for non-stroking alpha (null removes it)
1316 Sets the stroking alpha constant. @param alpha floating-point value representing the alpha constant (null removes it)
1317 Sets the smoothness tolerance. @param smoothness floating-point value representing the smoothness tolerance (null removes it)
1318 Sets the flatness tolerance in the extended graphics state. @param flatness the flatness value (null removes the item)
1319 Sets the miter limit in the extended graphics state. @param miterLimit floating-point value for the miter limit (null removes it)
1320 Sets the line width using a floating-point value. @param width floating-point value representing the new line width
1321 Parses a COSStream from the given dictionary. @param dic COSDictionary containing stream information @return populated COSStream object or throws IOException if parsing fails
1322 Sets the CYX value in the dictionary. @param cyx floating-point value to represent CYX
1323 Sets the width of the border style. @param w the new width value
1324 Sets the top index for displayed items in the list box. @param topIndex new top index value or null to clear
1325 Sets field flags within the AcroForm structure. @param flags integer value representing field flags
1326 Sets an integer value in the form's dictionary. @param q The Q parameter to be set
1327 Sets the open count of this outline node. @param openCount number of child nodes currently open
1328 Sets timestamp requirement status in the dictionary. @param flag true to require timestamps, false otherwise
1329 Sets the P value in the dictionary to a specified integer within valid range (0-3). @param p valid P value
1330 Sets annotation rotation in degrees. @param rotation new rotation value
1331 Sets the Q value in the annotation's dictionary. @param q integer value to represent
1332 Sets the structural parent annotation value. @param structParent integer value to represent the structural parent
1333 Sets annotation flags. @param flags integer value representing new flag settings
1334 Sets annotation index in the dictionary. @param index new index value; negative values remove the item
1335 Sets the page number in the dictionary. @param pageNumber non-negative integer value representing the page number
1336 Sets action flags in the PDF form submission. @param flags integer value representing action flags
1337 Sets maximum length constraint for text input field. @param maxLen maximum allowed characters in the field
1338 Sets the action flags in the dictionary. @param flags integer value representing the action flags
1339 Sets the line join style in the PDF document. @param style integer value representing the line join style
1340 Sets line cap style in the PDF extended graphics state. @param style integer value representing the line cap style
1341 Sets the number of bits per coordinate in the dictionary. @param bitsPerCoordinate integer value representing the bit depth
1342 Sets the number of bits per color component for triangle-based shading. @param bitsPerComponent integer value representing the bit depth
1343 Sets the number of vertices per row in the shading dictionary. @param verticesPerRow integer value representing vertices count
1344 Sets the number of bits per flag in shading type. @param bitsPerFlag integer value representing number of bits
1345 Sets the shading type in the PDF document. @param shadingType integer value representing the shading type
1346 Sets the tiling type of the pattern. @param tilingType integer value representing the tiling type
1347 Sets the tiling pattern's paint type. @param paintType integer value representing the paint type
1348 Sets the pattern type in the dictionary. @param patternType integer value representing the pattern type
1349 Sets the paint type in the pattern dictionary.
1350 Sets or removes the Overprint Mode property in the extended graphics state dictionary. @param overprintMode the Overprint Mode value to set (null to remove)
1351 Sets the Q attribute value in the dictionary. @param q integer value to represent
1352 Sets a long integer value in the dictionary. @param key unique identifier for the item to be set @param value long integer value to represent
1353 Writes the document trailer, potentially updating its size and removing obsolete entries. @param doc the COSDocument instance being written
1354 Sets the constant opacity value in the annotation dictionary. @param ca float value representing the constant opacity
1355 Sets the offset length of the leader line annotation. @param leaderLineOffsetLength float value representing the offset
1356 Sets the extension length of the leader line. @param leaderLineExtensionLength float value for the extension length
1357 Sets the length of the leader line. @param leaderLineLength new length value
1358 Sets the volume for sound actions. @param volume float value between -1 and 1 (inclusive)
1359 Sets the vertical step value of the tiling pattern. @param yStep vertical step in points
1360 Sets the X-step value in the tiling pattern dictionary. @param xStep floating-point value for the X-axis step
1361 Sets the missing width value in the dictionary. @param missingWidth the floating-point value representing the missing width
1362 Sets the maximum width of the font. @param maxWidth the maximum width to represent
1363 Sets the average font width. @param averageWidth average character width in points
1364 Sets the horizontal stem height of the font. @param stemH float value representing the stem height
1365 Sets the vertical stem value of the font. @param stemV the vertical stem value to represent
1366 Sets X-Height font attribute. @param xHeight the X-Height value to set
1367 Sets the font's cap height. @param capHeight the desired cap height value
1368 Sets font's leading (line spacing) attribute. @param leading line spacing value in points
1369 Sets the font's descent value. @param descent the vertical distance between baseline and bottommost of text
1370 Sets the font's ascent value. @param ascent floating-point height above the baseline
1371 Sets the italic angle of the font descriptor. @param angle The new italic angle value
1372 Sets the font weight in the dictionary. @param fontWeight the desired font weight value
1373 Sets the offset of the leader line in the annotation.
1374 Sets the leader extension value of the line annotation. @param leaderExtend float value representing the leader extension
1375 Sets the leader length of the line annotation. @param leaderLength float value representing the leader length
1376 Sets the annotation's opacity. @param opacity value between 0.0 and 1.0 representing transparency level
1377 Sets the guideline width in the PDF style configuration. @param width the new width value
1378 Sets the user unit for this PDPage instance. @param userUnit positive float value representing the user unit
1379 Sets a floating-point value in the dictionary using a string key. @param key unique identifier for the item to be set (string representation) @param value the float value to represent
1380 Sets the minimum revision number in the dictionary. @param revision long integer value representing the minimum revision
1381 Sets the digital signature revision. @param revision long integer value representing the revision
1382 Sets the V capability value in the dictionary. @param minimumRequiredCapability float value representing the required capability level
1383 Initializes an empty outline node instance with default TYPE and OUTLINES name.
1384 Sets URL type in the certificate's dictionary. @param urlType string value representing the URL type
1385 Sets the name property in the dictionary. @param name string value to be stored (null removes existing item)
1386 Sets file specification for PDF import data. @param fs PDFileSpecification object containing file details
1387 Sets the destination for this navigation action. @param d PDDestination object to set as the destination
1388 Sets the target directory for the embedded action. @param targetDirectory PDTargetDirectory object specifying the destination
1389 Sets file specification within the action. @param fs PDFileSpecification object
1390 Sets the destination for this embedded GoTo action. @param d PDDestination object representing the target location
1391 Sets the font setting in the dictionary. @param fs PDFontSetting object to be stored
1392 Sets a new shading function. @param newFunction PDFunction object to be assigned
1393 Sets the tiling pattern's resources. @param resources PDResources object to be associated with the pattern
1394 Sets the shading resources. @param shadingResources new shading resources to be applied
1395 Sets the extended graphics state for PDF rendering. @param extendedGraphicsState PDExtendedGraphicsState object to be set
1396 Sets the black point value in the color space dictionary. @param blackpoint PDTristimulus object representing the black point
1397 Sets the white point value in the color space dictionary and updates the cache. @param whitepoint PDTristimulus representation of the new white point
1398 Sets the file specification for this launch action. @param fs PDFileSpecification object containing file details
1399 Sets the CID (Character ID) set in the font dictionary. @param stream PDStream object containing CID set data
1400 Sets the font file 2 descriptor in the dictionary. @param ttfStream stream containing TTF font data
1401 Sets the font file descriptor in the dictionary. @param type1Stream stream containing the Type 1 font data
1402 Sets the named page reference in the FDF template.
1403 Sets page information in the dictionary. @param info pageInfo object containing relevant data
1404 Sets the file specification for this named page reference. @param fs PDFileSpecification object containing file details
1405 Sets fractional space to allocate in icon fitting configuration. @param space PDRange object defining allocated space
1406 Sets additional actions for this FDF field. @param aa PDAdditionalActions object to be associated
1407 Sets an action for this form field. @param a PDAction object to be associated with the field
1408 Sets icon fitting mode. @param fit FDFIconFit enum value
1409 Sets the appearance stream reference for this form field. @param ref FDFNamedPageReference object containing the appearance stream data
1410 Sets the appearance dictionary for this form field. @param ap PDAppearanceDictionary object containing visual settings
1411 Sets the FDF catalog in the document's trailer dictionary. @param cat FDFCatalog object to be set
1412 Sets the font file 3 attribute in the dictionary. @param stream PDStream object containing font data
1413 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing launch configuration
1414 Sets the file specification for this remote navigation action. @param fs file specification details
1415 Sets the file specification for form submission. @param fs PDFileSpecification object containing file details
1416 Sets the file specification for this attachment. @param file PDFileSpecification object containing file details
1417 Associates the annotation with a specific PDF page. @param page PDPage object to be linked
1418 Sets optional content annotation properties. @param oc PDPropertyList object containing OC attributes
1419 Sets the annotation's appearance using a PDAppearanceDictionary.
1420 Sets or removes a named destination from the dictionary. @param dest the PDNamedDestination to be set (null to remove)
1421 Sets the target directory within the PDF document. @param targetDirectory PDTargetDirectory object representing the target directory
1422 Sets the 'C' action in the dictionary. @param c PDAction object to be stored
1423 Sets interactive action 'o' (Open) in the dictionary. @param o PDAction object representing the open action
1424 Sets the 'C' action in the dictionary. @param c PDAction object to be set
1425 Sets the vertical action associated with the form field. @param v PDAction object defining the vertical movement
1426 Sets additional action associated with key F in the COSDictionary. @param f PDAction object to be stored
1427 Sets an additional action associated with key K. @param k PDAction object to be stored
1428 Sets a PDF document's default action. @param dp PDAction object containing the default action
1429 Sets the Window Presentation (WP) action. @param wp PDAction object containing presentation details
1430 Sets document settings action. @param ds PDAction object to be set
1431 Sets the workspace action. @param ws PDAction object representing the workspace
1432 Sets a Wacom-related action in the catalog. @param wc PDAction object containing Wacom settings
1433 Sets the Post-Insertion action definition. @param pi Post-Insertion action object
1434 Sets the 'PV' action definition. @param pv PDAction object to be stored
1435 Sets the primary click action. @param pc PDAction object defining behavior on primary click
1436 Sets the Post-Outcome (PO) action definition. @param po PO action to be associated with the annotation
1437 Sets the "Blend" action definition. @param bl Blend action to be associated with the annotation
1438 Sets the FO action definition in the dictionary. @param fo FO action object
1439 Sets the 'U' action definition in the dictionary. @param u PDAction object to be associated with key 'U'
1440 Sets the action associated with the 'D' key in the annotation dictionary. @param d PDAction object to be stored
1441 Sets an action definition associated with X coordinate. @param x PDAction object to be stored
1442 Sets an action associated with PDF annotation event E. @param e PDAction object defining the behavior of the annotation when triggered
1443 Sets the 'F' action in the dictionary. @param action PDAction object to be stored
1444 Sets file specification associated with thread action. @param fs PDFileSpecification object to be stored
1445 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script data
1446 Sets the border effect dictionary for the free text annotation. @param be PDBorderEffectDictionary object containing border properties
1447 Sets an embedded file specification in the FDF dictionary. @param fs PDFileSpecification object containing file details
1448 Sets the FDF dictionary in the catalog. @param fdf FDFDictionary object representing the Form Data Format
1449 Sets the URI dictionary in the catalog. @param uri PDURIDictionary object containing URI metadata
1450 Sets the Mark Info dictionary entry in the catalog. @param markInfo PDMarkInfo object containing mark info data
1451 Sets the PDF document's Names dictionary. @param names PDDocumentNameDictionary object
1452 Sets additional actions in the document catalog. @param actions PDDocumentCatalogAdditionalActions object
1453 Sets the open action for the PDF document. @param action PDDestinationOrAction object to be set
1454 Sets metadata in the catalog dictionary. @param meta PDMetadata object to be stored
1455 Sets the document outline in the catalog dictionary. @param outlines PDDocumentOutline object containing the document structure
1456 Sets viewer preferences in the catalog dictionary. @param prefs PDViewerPreferences object to be stored
1457 Sets the AcroForm for this PDF document catalog. @param acroForm PDAcroForm object to be set
1458 Wraps existing item setter with PDFName conversion. @param key string identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
1459 Decrypts a given PDF object using the specified encryption parameters. @param obj PDF object to be decrypted @param objNum unique identifier of the PDF document object @param genNum generation number associated with the object @return the decrypted object or original if decryption fails
1460 Sets the end color using the provided PDGamma object. @param colour PDGamma object representing the end color
1461 Sets the start color in the four-color array. @param colour PDGamma object representing the color to be set
1462 Sets the structure tree root of the catalog dictionary. @param treeRoot PDStructureTreeRoot object to be set
1463 Sets the color at index 1 (after) in the four-color array.
1464 Creates a retranslated rectangle with dimensions and coordinates equivalent to the current rectangle's width and height.
1465 Sets the lower limit in the tree's limits dictionary. @param lower new lower limit value
1466 Sets the upper limit of a name-value pair in the tree. @param upper new upper limit value
1467 Sets the endpoint ending style of a polyline annotation. @param style style to be set (null for default)
1468 Sets the starting point and ending style of a polyline annotation. @param style style to be applied (may be null for default)
1469 Sets the end point ending style of a line annotation. @param style the desired style (null for no ending)
1470 Sets the start point and ending style of a line annotation. @param style style to be set (may be null)
1471 Sets the endpoint ending style for a polyline annotation. @param style desired style (null to reset)
1472 Sets the starting point/ending style of a polyline annotation. @param style desired style (null for none)
1473 Sets the end point ending style for a line annotation. @param style the desired style (null for no end cap)
1474 Sets the first color in the four-color array. @param colour PDGamma object representing the color to be set
1475 Sets page label dictionary in the catalog. @param labels PDPageLabels object to be stored
1476 Sets destinations in the document name dictionary. @param dests PDDestinationNameTreeNode object containing destination data
1477 Associates embedded files with the document. @param ef EmbeddedFilesNameTreeNode object
1478 Sets the fringe dimensions of the annotation. @param fringe PDRectangle object representing the fringe dimensions
1479 Sets the fringe rectangle of this free text annotation. @param fringe PDRectangle object representing the fringe
1480 Sets the fringe dimensions of the circular annotation. @param fringe PDRectangle object representing the fringe
1481 Sets the caret annotation's fringe dimensions. @param fringe PDRectangle object representing the fringe
1482 Sets the border effect dictionary. @param be PDBorderEffectDictionary object to be stored
1483 Sets border style dictionary for annotation. @param bs PDBorderStyleDictionary object to be stored
1484 Sets the bounding box of an annotation to the specified rectangular shape. @param rectangle PDRectangle object defining the new bounds
1485 Sets the parent tree of this structure tree root. @param parentTree PDNumberTreeNode representing the new parent
1486 Sets the current PDF page. @param page PDPage object to be set
1487 Sets the parent of this PDStructureElement. @param structureNode new parent node
1488 Sets the page associated with this PDObjectReference. @param page PDPage object to be stored
1489 Sets the referenced object in the underlying COSDictionary. @param xobject PDXObject to be associated with OBJ key
1490 Sets the referenced object to an annotation. @param annotation PDAnnotation instance to be associated
1491 Sets the associated PDF page for this marked content reference. @param page PDPage object representing the page to be set
1492 Adds a resource to the dictionary with the given kind and name. @param kind type of resource (e.g. font, color space) @param name unique identifier for the resource @param object data associated with the resource
1493 Sets a transition for the page with specified duration. @param transition PDTransition object @param duration float value representing the transition duration
1494 Sets the transition properties of this PDPage. @param transition PDTransition object containing transition data
1495 Sets additional actions for this PDF page. @param actions PDPageAdditionalActions object
1496 Sets metadata for this PDF page. @param meta PDMetadata object to be associated with the page
1497 Sets the contents stream of this PDPage. @param contents PDStream object containing the new content
1498 Sets or removes the Art Box rectangle for this PDF page. @param artBox the new Art Box dimensions (null to reset)
1499 Sets the Trim Box attribute of this PDPage. @param trimBox new Trim Box dimensions or null to remove
1500 Sets the bleed box for this PDF page. @param bleedBox rectangle representing the bleed area
1501 Sets the media box for this PDPage. @param mediaBox new media box dimensions (null to remove)
1502 Sets the resources for this PDPage. @param resources PDResources object to be set (null to clear)
1503 Initializes a PDPage object with the given media box dimensions. @param mediaBox rectangle specifying the page's dimensions
1504 Sets JavaScript code in the PDF document. @param js PDJavascriptNameTreeNode representing the JavaScript to be set
1505 Sets the digital signature in the FDF catalog. @param sig PDSignature object to be stored
1506 Sets the rectangle difference of this free text annotation. @param rd PDRectangle object representing the new rectangle difference
1507 Sets the link's action to navigate to a specific destination. @param action PDAction object defining the navigation behavior
1508 Sets the border style dictionary for the link annotation. @param bs Border style dictionary object
1509 Sets the page label style. @param style new style to apply or null to clear existing style
1510 Sets the "Trapped" metadata attribute with a string value. @param value must be one of 'True', 'False', or 'Unknown'
1511 Sets the document catalog's version. @param version new version string
1512 Sets the page layout configuration in the catalog dictionary. @param layout PageLayout object containing the layout configuration
1513 Sets the page mode of the document catalog. @param mode PageMode instance to be set
1514 Sets a string value in the dictionary with the given key. @param key unique identifier for the item to be set @param value string data to be stored (null to remove existing item)
1515 Sets an array of floating-point numbers in the dictionary. @param name unique identifier for the item to be set @param values the float values to represent as a wrapped COSObject
1516 Sets an array of PDF names with given values. @param name unique identifier for the item to be set @param values array of string data to be stored (may be wrapped if necessary)
1517 Sets an array of string values for a given key in the dictionary. @param name unique identifier for the item to be set @param values array of strings to be stored
1518 Sets whether to display document title in viewer. @param value true to show, false to hide
1519 Sets whether the PDF viewer window should be centered. @param value true to center the window, false otherwise
1520 Sets whether to fit the PDF window to its contents. @param value true to enable fitting, false otherwise
1521 Hides or shows the window UI based on user preference. @param value true to hide, false to show
1522 Initializes the wrapper with a specific type. @param type unique PDF object identifier
1523 Sets whether to hide the menubar in viewer preferences. @param value true to hide, false otherwise
1524 Sets whether form fields should appear in the PDF document. @param value true to include field appearances, false otherwise
1525 Sets the trusted mode flag in the dictionary. @param trustedMode true to enable trusted mode, false otherwise
1526 Sets non-embedded font warning flag in the dictionary. @param noEmbedFontWarning true to suppress warnings for non-embedded fonts
1527 Sets the pre-release flag in the digital signature properties dictionary. @param preRelease true to indicate a pre-release version
1528 Sets whether the annotation is initially open or closed. @param open true to open, false to close
1529 Sets caption visibility on the annotation line. @param cap true to show or false to hide the caption
1530 Sets the mixing mode for sound actions. @param mix true to enable mixing, false otherwise
1531 Sets the repetition flag for the sound action. @param repeat true to allow repeating the sound, false otherwise
1532 Configures whether the sound action executes synchronously. @param synchronous true to execute synchronously, false otherwise
1533 Sets window behavior for opening linked content. @param value OpenMode specifying how to open the link
1534 Configures whether the launched file or application should open in a new window. @param value OpenMode specifying the desired behavior (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1535 Sets whether to open linked content in a new window. @param value OpenMode enumeration value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1536 Sets the text knockout flag in the dictionary. @param tk true to enable or false to disable text knockout
1537 Sets whether to hide or show the toolbar in viewer preferences. @param value true to hide, false to show
1538 Sets the owner string in the PDF attribute object. @param owner unique identifier for the owner
1539 Initializes an instance of PDMarkedContentReference with default values.
1540 Initializes a new instance of PDObjectReference with default type.
1541 Sets the subtype attribute in the external data dictionary. @param subtype string value for the subtype attribute
1542 Initializes an instance of the external data dictionary with default subtype and type values.
1543 Sets the border style string value in the dictionary. @param s new border style string
1544 Sets the highlighting mode of the annotation widget. @param highlightingMode valid value: 'N', 'I', 'O', 'P', or 'T'
1545 Sets the annotation's name. @param name string value to be stored (null to remove existing item)
1546 Sets the rubber stamp annotation's display name. @param name new string value to be assigned
1547 Sets the intent of this markup annotation. @param it intent string to be stored
1548 Sets the reply type of this annotation. @param rt new reply type value
1549 Sets the highlight mode for this PDAnnotationLink. @param mode string value representing the desired highlighting style
1550 Sets line annotation caption positioning. @param captionPositioning string value for positioning the caption
1551 Sets the line ending style of the free text annotation. @param style desired style (e.g. "square", "round")
1552 Sets the attachment name in the PDF annotation dictionary. @param name string value to be stored (null to remove existing item)
1553 Sets the appearance state of this annotation. @param as new appearance state value
1554 Sets annotation subtype. @param subType new subtype value
1555 Sets the subtype of this PDAction instance. @param s subtype string value
1556 Sets the action type within the COSDictionary. @param type string identifier for the action type
1557 Initializes a new instance of the PDAbstractPattern class. Sets the pattern type in the underlying dictionary.
1558 Sets the scaling type for icons in FDF. @param scale string identifier for scaling type
1559 Sets the icon scale option in FDF. @param option string value representing scaling configuration
1560 Sets the encoding of the FDF document. @param encoding character encoding to be used
1561 Sets the FDF catalog document version. @param version new version string
1562 Sets the icon associated with this text annotation. @param icon string representation of the icon
1563 Sets the line ending style of the free text annotation. @param style desired line ending style (null to reset)
1564 Sets the annotation's intent. @param intent string value representing the intent (null to clear existing)
1565 Sets the document's sub-filter. @param subfilter string value for the sub-filter
1566 Sets the guideline style in the COSDictionary. @param style visual style identifier
1567 Initializes a PDStructureNode with a given logical structure type. @param type unique identifier for the node's type
1568 Sets the logical structure type of the PDF document element. @param structureType string identifier for the structural type
1569 Sets the alpha source flag in the dictionary. @param alpha true or false value
1570 Sets automatic stroke adjustment flag. @param sa true to enable or false to disable
1571 Sets non-stroking overprint control. @param op true to enable or false to disable
1572 Sets stroking overprint control. @param op true to enable or false to disable
1573 Sets the action associated with this outline item. @param action PDAction object to be assigned
1574 Sets destination for this outline item. @param dest PDDestination object representing the target location
1575 Sets the next sibling node in the PDF outline. @param outlineNode the PDOutlineNode to be set as next sibling
1576 Sets the previous sibling outline node. @param outlineNode reference to the new sibling
1577 Sets the build property in the dictionary. @param propBuild PDPropBuild object containing build metadata
1578 Sets the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object to be stored
1579 Sets application data in PDPropBuild. @param app PDPropBuildDataDict object containing application data
1580 Sets publication security property in the dictionary. @param pubSec PDPropBuildDataDict object containing publication security data
1581 Sets the PDF document's digital signature filter property. @param filter PDPropBuildDataDict object containing filter data
1582 Sets down appearance stream in PDAppearanceDictionary. @param ap down appearance stream
1583 Sets down appearance for annotation. @param entry PDAppearanceEntry object containing appearance data
1584 Sets rollover appearance stream. @param ap PDAppearanceStream object representing annotation's rollover state
1585 Sets rollover appearance for interactive annotation. @param entry PDAppearanceEntry object containing visual representation
1586 Sets the normal appearance of an interactive annotation. @param ap PDAppearanceStream object defining the appearance
1587 Sets normal appearance attributes. @param entry PDAppearanceEntry object containing visual representation
1588 Sets the parent terminal field for this annotation widget. @param field PDTerminalField object to be set as parent
1589 Sets the border style of the annotation widget. @param bs PDBorderStyleDictionary object defining the border properties
1590 Sets additional annotation actions. @param actions PDAnnotationAdditionalActions object
1591 Sets the annotation's action. @param action PDAction object to be associated with the annotation
1592 Sets appearance characteristics dictionary. @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary object
1593 Sets the rectangle difference of this annotation. @param rd PDRectangle object defining the rect difference
1594 Sets the border effect dictionary for this annotation. @param be PDBorderEffectDictionary object defining the border behavior
1595 Sets the border effect of the polygon annotation. @param be PDBorderEffectDictionary object defining the border style
1596 Sets the border style of the annotation using the provided dictionary. @param bs PDBorderStyleDictionary object defining the border properties
1597 Sets external data dictionary for the annotation. @param externalData PDExternalDataDictionary instance
1598 Sets the In-Reply-To annotation. @param irt The annotation to be set as a reply.
1599 Sets the popup display for this annotation. @param popup PDAnnotationPopup object to be associated
1600 Sets the previous URI action. @param pa PDActionURI object containing the new URI
1601 Sets the destination of an interactive link. @param dest PDDestination object defining the target location
1602 Sets the structure element of the current outline item. @param structureElement PDStructureElement to be associated
1603 Sets the lower limit in the COSArray. @param lower nullable integer value for the lower limit
1604 Sets the last child outline node. @param outlineNode PDOutlineNode object to be assigned as last child
1605 Sets anti-aliasing property in PDF shading. @param antiAlias true to enable anti-aliasing
1606 Sets renaming setting in FDF template. @param value true to enable renaming, false otherwise
1607 Sets the scale-to-fit annotation option. @param value true to enable, false otherwise
1608 Sets caption visibility for the line annotation. @param cap true to show, false to hide the caption
1609 Sets metadata encryption status in the cryptographic filter dictionary. @param encryptMetaData true to enable or false to disable metadata encryption
1610 Sets the volatility status of the file specification. @param fileIsVolatile true if the file is volatile, false otherwise
1611 Sets the fixed decimal formatting option. @param fd boolean value indicating whether to use fixed decimal formatting
1612 Sets whether the popup annotation is visible or not. @param open true to show, false to hide
1613 Enables or disables mouse position tracking. @param value true to track, false otherwise
1614 Resets suspect flag to false.
1615 Sets the user properties marking flag. @param userProps true to mark as having user properties, false otherwise
1616 Sets the 'Marked' status in the PDMarkInfo dictionary. @param value boolean flag indicating marked status
1617 Sets the rectangle associated with the current bead. @param rect PDRectangle object defining the bounds of the bead
1618 Sets the associated page for this thread bead. @param page PDPage object representing the linked content
1619 Sets the previous bead in the thread. @param previous the preceding bead in the sequence
1620 Sets the next bead in the thread. @param next The PDThreadBead object to be set as next.
1621 Sets the threaded content associated with this bead. @param thread PDThread object containing threaded data
1622 Sets thread information in the PDF document. @param info PDDocumentInformation object containing thread details
1623 Sets the measurement details of the viewport. @param measure PDMeasureDictionary object containing measurement attributes
1624 Sets the bounding box of the viewport. @param rectangle PDRectangle object representing the new bounds
1625 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object containing action data
1626 Sets the seed value for this signature field. @param sv PDSeedValue object containing the seed data
1627 Sets the default signature value in the PDF document. @param value PDSignature object representing the default value
1628 Sets the signature value. @param value PDSignature object containing the new value
1629 Sets dynamic XFA form resource. @param xfa PDXFAResource object for the interactive form
1630 Sets default resources for the form. @param dr PDResources object containing default resources
1631 Sets the first child outline node. @param outlineNode PDOutlineNode object to be assigned as the first child
1632 Checks if a given PDF document contains the catalog section. @param dictionary COSDictionary object to inspect @return true if catalog or FDF sections are present, false otherwise
1633 Retrieves the rollover icon as a PDFormXObject. @return PDFormXObject object or null if not found
1634 Retrieves the stroking alpha constant from the extended graphics state dictionary. @return stroke transparency value as a float
1635 Retrieves smoothness tolerance value from PDF extended graphics state. @return Smoothness tolerance as a floating-point number
1636 Retrieves the flatness tolerance value from the PDF dictionary. @return Flatness tolerance as a floating-point number
1637 Retrieves the miter limit value. @return miter limit as a floating-point number or null if not found
1638 Retrieves the line width value from the extended graphics state. @return line width as a floating-point number
1639 Creates a PDPropertyList instance based on the given COSDictionary. @param dict COSDictionary object representing the property list
1640 Retrieves the PDColorSpace instance associated with this transparency group attributes.
1641 Prepares regions for text extraction from a given PDF page. @param page PDPage object to extract text from
1642 Retrieves the scale factor for fly transitions. @return The scale value or default (1) if not set
1643 Retrieves the page transition duration. @return The duration value or default (1) if not set
1644 Retrieves the border width from the underlying COSDictionary object. @return The border width or 0 if not found
1645 Retrieves the constant opacity value. @return The constant opacity as a float value
1646 Retrieves the leader line offset length. @return The offset length or default value (0) if not found
1647 Retrieves the extension length of the leader line. @return The leader line extension length or default value if not found
1648 Retrieves font descent. @return Descent value or default (0) if not found
1649 Retrieves leading value from font descriptor dictionary. @return The leading value or default of 0.0 if not found
1650 Retrieves the cap height of a font descriptor. @return The cap height value or its absolute value if initially negative
1651 Retrieves the x-height of a font. @return The x-height value or a default value if not found
1652 Retrieves the stem vertical value from the font descriptor dictionary. @return The stem vertical value or 0 if not found
1653 Retrieves stem height value from font descriptor dictionary. @param key unique identifier for STEM_H attribute @return The stem height value or default value (0) if not found
1654 Retrieves the non-stroking alpha constant from the dictionary. @return Non-stroking alpha value as a float or null if not found
1655 Retrieves the average font width. @return The average font width or 0 if not found
1656 Retrieves missing width value from font descriptor dictionary. @return The missing width or default value (0) if not found
1657 Retrieves gamma correction value from CALGRAY dictionary. @return Gamma correction factor or default value of 1.0
1658 Retrieves the X-step value of the tiling pattern. @return The X-step value or 0 if not found
1659 Retrieves the Y-step value of the tiling pattern. @return The Y-step value or default to 0 if not found.
1660 Retrieves and returns the configured sound volume. @return Volume value between -1 and 1 or defaulting to 1 if invalid
1661 Retrieves the length of the leader line. @return The length or 0 if not found
1662 Retrieves the maximum width of the font descriptor. @return Maximum width value or 0 if not found
1663 Retrieves font ascent value. @return Font ascent in points or default (0) if not found
1664 Writes a COSBase object to the output stream and updates the cross-reference table. @param obj underlying COSBase object to be written
1665 Creates a PDAttributeObject instance based on the name of the attribute owner. @param dictionary COSDictionary object containing attribute information @return PDAttributeObject instance or PDDefaultAttributeObject if unknown owner
1666 Retrieves the font type from the dictionary. @return Font type as string
1667 Retrieves the base font from the font dictionary. @return base font name as string
1668 Retrieves the scale type of a fitting configuration. @return Scale type string or default proportional value if not found.
1669 Retrieves the scaling option for icons in FDF format. @return String value representing the scale option, or a default value if not found
1670 Retrieves the document encoding from the FDF dictionary. @return Encoding string, defaulting to "PDFDocEncoding" if not found.
1671 Retrieves the document version from the FDF dictionary. @return version string or null if not found
1672 Retrieves line ending style of free text annotation. @return string representation of COSName.LE value
1673 Retrieves the intent annotation from the PDF document. @return Intent string or null if not found
1674 Creates an instance of the appropriate FDFAnnotation subclass based on the given COSDictionary. @param fdfDic dictionary object containing annotation properties
1675 Retrieves the subfilter value from the encryption dictionary. @return subfilter string or null if not found
1676 Retrieves the filter name from the encryption settings.
1677 Retrieves the subtype of the marked content artifact. @return string representation of the subtype
1678 Retrieves the content type as a string. @return The content type or null if not found
1679 Retrieves the language associated with the marked content. @return Language string or null if properties are missing
1680 Retrieves the represented name as a string from the dictionary object. @return property name or null if not found
1681 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param key unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
1682 Checks if the given cross-reference table offset is valid. @param startXRefOffset start position of cross-reference table @return true if offset points to a valid XRef stream, false otherwise
1683 Retrieves the current page display mode from the catalog dictionary. @return PageMode instance representing the document's display behavior
1684 Retrieves the page layout configuration from the catalog dictionary. @return PageLayout object representing the document's page layout, or SINGLE_PAGE if not found or invalid
1685 Retrieves the PDF document's version. @return Version string or null if not found
1686 Retrieves the 'trapped' attribute from the PDF document metadata. @return trapped status as a string or null if not found
1687 Retrieves the represented name as a string from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
1688 Returns list of options strings for export purposes. @return List of option strings (same as getOptions())
1689 Retrieves the type of the encapsulated PDF content. @return string representation of the COS dictionary's TYPE entry
1690 Retrieves owner name from COS object. @return string representation of owner
1691 Retrieves the structure type from the COS object. @return string representation of the structure type
1692 Creates a PDStructureNode instance based on the provided COSDictionary node. @param node dictionary object containing structure information @return PDStructureTreeRoot or PDStructureElement instance, depending on the 'Type' entry in the dictionary
1693 Retrieves the type of structure node as a string. @return COS dictionary value for TYPE key or null if not found
1694 Retrieves page numbering style from PDF document.
1695 Retrieves the italic angle value from the font descriptor dictionary. @return The italic angle or 0 if not found
1696 Retrieves the font weight from the PDF dictionary. @return The font weight value or 0 if not found
1697 Retrieves the opacity value of an annotation. @return The opacity value (defaulting to 1.0 if not found)
1698 Retrieves the quad points for a link annotation. @return An array of floats representing the quad point coordinates, or null if not found
1699 Retrieves the horizontal caption offset for a line annotation. @return The offset value or 0.0f if not found
1700 Retrieves the end point style of a line annotation. @return String representation of the end point style (e.g. "LE_NONE") or default value if not found
1701 Retrieves the ending style of a line annotation's start point. @return String representation of the ending style or default value if not found
1702 Retrieves the line coordinates as a float array. @return An array of floats representing the line's x and y coordinates, or null if not found
1703 Retrieves the list of ink annotations as a 2D array of floats. @return A 2D array where each sub-array represents an ink annotation, or an empty array if not found
1704 Retrieves the float array for callout settings. @return An array of floats representing callout settings, or null if not found
1705 Retrieves the differences in rectangle appearance. @return Array of floats representing the differences, or an empty array if not found
1706 Retrieves the array of rectangle differences for caret annotations. @return An array of floats representing the difference in rectangle margins, or an empty array if not found
1707 Retrieves the form fields dictionary. @return COSArray object containing field configurations
1708 Retrieves the form fields associated with the reset action. @return COSArray object containing field data
1709 Retrieves the font settings from the dictionary. @return PDFontSetting object or null if not found
1710 Retrieves the COSArray object containing encode values.
1711 Retrieves the shading coordinates as a COSArray object. @return COSArray object containing coordinate values or null if not initialized
1712 Retrieves the domain shading attribute as a COSArray object. @return COSArray object representing the domain or null if not set
1713 Retrieves the COSArray object for shading extension properties. @return COSArray object or null if not initialized
1714 Retrieves the shading domain as a COSArray object. @return COSArray object containing the domain information or null if not initialized
1715 Retrieves a list of FDF pages from the underlying document structure. @return List<FDFPage> collection of pages or null if not found
1716 Retrieves a list of child fields from the current field's dictionary. @return List<FDFField> collection of child fields or null if not found
1717 Retrieves a list of options associated with the field. @return List of option elements or null if not found
1718 Retrieves the list of templates associated with this page. @return List of FDFTemplate objects or an empty list if not found
1719 Retrieves a list of form fields from the template. @return List<FDFField> collection of field objects or null if not found
1720 Retrieves the vertices of the polygon annotation as a float array. @return An array of floats representing the vertices, or null if not found
1721 Retrieves the list of font widths. @return List of Float values representing the widths, or null if not found
1722 Retrieves the transformation matrix as a float array. @return A float array representing the transformation matrix, or a default identity matrix if not defined in the dictionary.
1723 Retrieves the list of component names in the color space. @return List of String component names or empty list if not found
1724 Retrieves the background shading dictionary from the PDF document. @return COSArray object containing background shading properties
1725 Retrieves the polygon's vertices as a 2D array of floats. @return A 2D array where each sub-array represents a point in the polygon, or null if no path is found
1726 Retrieves the endpoint style for the start point of the polyline. @return String representation of the endpoint style (e.g. "None")
1727 Retrieves the endpoint style for the polyline. @return String representation of the endpoint style (e.g. LE_NONE)
1728 Retrieves an array of angle measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1729 Retrieves an array of line slope dictionaries. @return PDNumberFormatDictionary[] or null if not found
1730 Retrieves the origin coordinates of the coordinate system. @return An array of floats representing the x, y values or null if not found
1731 Retrieves the visibility policy dictionary. @return COSName object representing the visibility policy
1732 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object
1733 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object @return The long value or default value (-1L) if not found
1734 Retrieves an array of rectilinear area measurements from the underlying COSDictionary. @return PDNumberFormatDictionary[] containing area measurements or null if not found
1735 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object @param defaultValue default long value to return if not found
1736 Sets the startxref position, initializing or updating the XRef trailer. @param startxrefBytePosValue the byte position of the startxref
1737 Retrieves the float value associated with a given key in the dictionary. @param key unique identifier for the dictionary object
1738 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object
1739 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object @param defaultValue default value to return if not found or null
1740 Retrieves the user unit value from the page resources. @return The user unit value or a default value of 1.0f if not found
1741 Retrieves guideline width from COSDictionary. @return Guideline width as a float value
1742 Retrieves the font subtype from the dictionary object. @return font subtype as string or null if not found
1743 Retrieves an array of distance measurements from the dictionary. @return Array of PDNumberFormatDictionary objects or null if not found
1744 Retrieves an array of PDNumberFormatDictionary objects representing X-axis change values. @return Array of PDNumberFormatDictionary objects or null if not found
1745 Retrieves the vertex coordinates of the polyline annotation. @return An array of floats representing the x and y coordinates, or null if not found
1746 Retrieves the array of rectangle differences. @return An array of floats, where each element is the value of a rectangle difference, or an empty array if not applicable
1747 Retrieves the quad points associated with this text markup annotation. @return An array of floats representing the quad point coordinates, or null if not found
1748 Retrieves the list of sub-filters for a digital signature. @return List of string names or empty list if not found
1749 Retrieves the digest method from the digital signature seed value. @return list of string names for the digest methods
1750 Retrieves the list of reasons associated with a digital signature. @return List of string names or empty list if not found
1751 Retrieves an array of Y-coordinate measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1752 Retrieves the legal attestations from the PDF document's seed value. @return List of string names representing the legal attestations
1753 Retrieves a list of key usage extensions from the digital signature certificate. @return List of strings representing key usage extensions or null if not found
1754 Retrieves the issuer attribute from the digital signature certificate data. @return list of byte arrays representing the issuer or null if not found
1755 Retrieves the OID (Object Identifier) from the PDF document's certificate data. @return List of byte arrays representing the OID, or null if not found
1756 Retrieves the byte range associated with this signature. @return array of integers representing the byte range or empty array if not found
1757 Retrieves the list of PDFields in calculation order. @return List of PDField objects, or an empty list if no fields are found
1758 Returns the index of selected options as a list of integers. @return List of integers representing selected option indices, or an empty list if none are selected
1759 Retrieves the subject attribute from the digital signature certificate. @return List of byte arrays representing the subject or null if not found
1760 Retrieves the font name from the dictionary object. @return Font name as a string
1761 Retrieves font stretch attribute from the dictionary. @return Stretch value as a string or null if not found
1762 Retrieves the base font name from the dictionary. @return The base font name as a string
1763 Retrieves the operating system information from the dictionary. @return The OS name as a string, or null if not found
1764 Retrieves the date metadata attribute from the PDF signature properties dictionary. @return The COSString object as a string, or null if not found
1765 Retrieves alternate caption string from dictionary object.
1766 Retrieves the rollover caption from the COS dictionary object. @return The rollover caption as a string, or null if not found
1767 Retrieves the normal caption from the annotation's dictionary object. @return The COSString object as a string, or null if not found
1768 Retrieves the state model string from the annotation's dictionary. @return The COSString object as a string, or null if not found
1769 Retrieves the annotation state as a string.
1770 Retrieves the subject annotation from the PDF document. @return The COSString object as a string, or null if not found
1771 Retrieves title popup string from annotation's metadata. @return The COSString object as a string, or null if not found.
1772 Retrieves default style string from associated dictionary object.
1773 Retrieves default appearance string from COS dictionary. @return The default appearance string or null if not found
1774 Retrieves the annotation name from the underlying COSDictionary object. @return The annotation name as a string, or null if not found
1775 Retrieves the modified date of this annotation. @return The COSString object representing the modified date as a string, or null if not found
1776 Retrieves annotation contents from associated COSDictionary. @return The string representation of the contents or null if not found
1777 Retrieves the execute parameter from the dictionary. @return The string value associated with key P in the dictionary, or null if not found
1778 Retrieves the directory path from launch parameters. @return The directory path as a string
1779 Retrieves the filename from launch parameters. @return The filename string
1780 Removes a specified user property from the document's structure. @param userProperty PDUserProperty object to be removed
1781 Retrieves the name of this optional content group. @return The COSString object as a string, or null if not found
1782 Retrieves a list of subject DN maps from the COSDictionary. @return List<Map<String, String>> containing subject DN attributes or null if not found
1783 Retrieves an array of group names from the optional content dictionary. @return String[] array of group names, or empty array if not found
1784 Retrieves launch parameter 'D' from dictionary. @return The COSString object as a string, or null if not found
1785 Retrieves the O parameter from the launch action's dictionary. @return The string value of the COSString object associated with key "O", or null if not found.
1786 Retrieves the launch parameter 'P' as a string. @return The COSString object as a string, or null if not found or dereferenced
1787 Retrieves the URI associated with this PDActionURI instance. @return The URI as a string, or null if not found or dereferenced
1788 Retrieves the filename associated with this target directory. @return The COSString object as a string representing the filename, or null if not found
1789 Retrieves annotation name from dictionary. @return The COSString object as a string, or null if not found
1790 Retrieves launch file specification. @return The COSString object as a string, or null if not found
1791 Retrieves the URL from the PDF certificate dictionary. @return The COSString object as a string representation of the URL, or null if not found.
1792 Retrieves URL from COSDictionary. @return The URL string or null if not found
1793 Retrieves the name of the digital signature from the COSDictionary. @return The string representation of the signature name, or null if not found
1794 Retrieves the numeric or name value associated with a given key. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found
1795 Retrieves a number or array of numbers from the dictionary. @param name unique identifier for the desired object @param defaultValue default value to return if not found (unspecified if Float.UNSPECIFIED) @return The retrieved number or array of numbers, or null if unspecified and not found
1796 Retrieves a gamma instance by name from the dictionary object. @param name unique identifier for the gamma instance @return PDGamma object or null if not found
1797 Creates a unique key for the given kind and prefix. @param kind COSName indicating the type of resource @param prefix string prefix to use when generating the key @return unique COSName key or null if dictionary is null
1798 Retrieves the represented name as a string, or an array of names if the value is a COSArray. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found @return The retrieved name(s) or default value
1799 Retrieves the sub-dictionary of appearance streams. @return Map of COSName to PDAppearanceStream objects
1800 Retrieves a named destination from the PDF document. @param name unique identifier for the destination @return PDDestination object or null if not found
1801 Retrieves the destination from the COS object dictionary. @return PDDestination object or null if not supported
1802 Retrieves the destination associated with this PDActionGoTo instance. @return PDDestination object representing the navigation destination
1803 Retrieves the destination dictionary object. @return PDDestination object or null if not supported
1804 Retrieves the destination dictionary object. @return PDDestination object or null if not supported
1805 Creates a PDXObject instance from the given COSBase and resources. @param base underlying COSBase object @param resources associated PDResources object @return PDXObject instance or null if base is null @throws IOException for invalid object type or subtype
1806 Removes a subject from the certificate's dictionary. @param subject byte array representing the subject to be removed
1807 Retrieves an array of string values from the dictionary object associated with a given name. @param name unique identifier for the dictionary object @return Array of strings or null if not found or dereferenced
1808 Retrieves attribute value from dictionary, returning default value if absent. @param attrName unique identifier for the attribute @param defaultValue default value to return when attribute is not found @return The COSBase object representing the attribute value or defaultValue
1809 Retrieves location information from the digital signature's dictionary. @return The location string or null if not found
1810 Retrieves the reason associated with this digital signature. @return The COSString object representing the reason as a string, or null if not found
1811 Retrieves contact information from the COSDictionary. @return The contact info string or null if not found
1812 Retrieves the title of this outline item from its associated dictionary object. @return The item's title as a string, or null if not found
1813 Retrieves partial field name from dictionary. @return partial field name as string
1814 Retrieves the alternate field name from the PDField's dictionary. @return The string representation of the TU value, or null if not found
1815 Checks if a standard attribute is specified by its name. @param name unique identifier for the attribute @return true if the attribute is specified, false otherwise
1816 Retrieves the mapping name from the dictionary. @return The COSString object as a string, or null if not found
1817 Retrieves the scale ratio from the dictionary object. @return The scale ratio as a string, or null if not found
1818 Retrieves the role map from the COSDictionary object associated with the ROLE_MAP key. @return A Map of role mappings or an empty Map if not found
1819 Retrieves the value associated with choice field V. @return list of selected options or null if not found
1820 Retrieves the default value for the choice field. @return list of default values or empty list if not set
1821 Retrieves a dictionary object from the current path by navigating through the document structure. @param objPath unique identifier for the target dictionary object @return The COSBase object or null if not found or dereferenced
1822 Retrieves the attribute value from the dictionary object. @param attrName unique identifier for the attribute
1823 Retrieves default appearance string from PDF dictionary. @return The COSString object as a string, or null if not found
1824 Retrieves a list of form fields from the FDF document. @return List<FDFField> collection of form fields or null if empty
1825 Removes a specified key usage extension from the certificate's KEY_USAGE attribute. @param keyUsageExtension identifier of the key usage to be removed
1826 Removes a specified OID from the certificate's OID array. @param oid byte array representing the OID to be removed
1827 Retrieves file Unicode from embedded file system. @return The COSString object as a string, or null if not found
1828 Retrieves the page label prefix from the dictionary object. @return The COSString object as a string, or null if not found.
1829 Retrieves the producer information from the PDF document metadata. @return The string representation of the producer, or null if not found
1830 Retrieves the creator of the PDF document. @return The string value associated with the CREATOR key, or null if not found
1831 Retrieves the keywords associated with this PDF document. @return The keyword list as a string, or null if not found
1832 Retrieves the subject metadata from the PDF document. @return The subject string or null if not found
1833 Retrieves the author metadata from the PDF document. @return The author string or null if not found
1834 Retrieves the PDF document title. @return The title as a string or null if not found
1835 Retrieves the document language from the catalog dictionary.
1836 Retrieves a string representation from the dictionary object associated with the given key. If not found, returns the provided default value. @param key unique identifier for the dictionary object @param defaultValue default string to return if key is not found
1837 Retrieves a string representation from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
1838 Retrieves duplex printing preference. @return Duplex printing mode as string or null if not set
1839 Retrieves the viewport name from its associated COSDictionary. @return the name of the viewport as a string
1840 Retrieves the field type from the COS dictionary.
1841 Retrieves the sub-filter value from the underlying COSDictionary. @return sub-filter string or null if not found
1842 Retrieves the filter name from the COSDictionary structure. @return The filter name as a string or null if not found
1843 Retrieves the URL type from the dictionary. @return String representing the URL type
1844 Retrieves the base font name from the dictionary. @return string representation of the base font
1845 Retrieves the base font from the dictionary. @return Base font name or null if not found
1846 Retrieves the base font name from the dictionary. @return The base font name as a string, or null if not found
1847 Checks if this DeviceN color space has N-channel attributes. @return true if 'NChannel' subtype found, false otherwise
1848 Retrieves the type of interactive action from the associated dictionary. @return Type of action (e.g. 'GoTo', 'NamedAction', etc.) as a string
1849 Retrieves file name from embedded file system.
1850 Retrieves the subtype of the interactive action from the COSDictionary. @return subtype string (e.g. 'S') or null if not found
1851 Retrieves the subtype of this annotation as a string. @return subtype name or null if not found
1852 Retrieves caption positioning from the annotation dictionary. @return string representation of the caption positioning
1853 Retrieves the intent from the COS object. @return intent string or null if not found
1854 Retrieves the subtype from the underlying COSDictionary object. @return subtype string or null if not found
1855 Retrieves the represented name from the properties dictionary. @return the name as a string
1856 Retrieves filter name from digital signature seed value. @return Filter name as string or null if not found
1857 Creates a PDAction object based on the provided COSDictionary. @param action COSDictionary containing action details
1858 Retrieves file DOS (Disk Operating System) attribute. @return The file's DOS string representation, or null if not found
1859 Retrieves file MAC address from embedded file specification. @return The file MAC address as a string, or null if not found
1860 Retrieves file specification as a Unix string. @return The file's Unix representation or null if not found
1861 Retrieves default appearance string from annotation. @return The COSString object as a string, or null if not found.
1862 Retrieves default style string from annotation dictionary.
1863 Retrieves caption style string from annotation dictionary.
1864 Retrieves the state of this text annotation. @return The COSString object as a string representing the state, or null if not found.
1865 Retrieves the state model from the annotation dictionary. @return The COSString object as a string representing the state model, or null if not found or dereferenced
1866 Retrieves the status of the FDF document. @return The string representation of the document's status.
1867 Retrieves rotation value from annotation dictionary. @return Rotation angle as a string, or null if not found
1868 Retrieves the target value from the FDF dictionary. @return The string representation of the COSString object associated with the "target" key, or null if not found.
1869 Retrieves the name of the named page reference. @return The COSString object as a string representing the name, or null if not found.
1870 Retrieves the font family from the dictionary. @return The string representation of the COSString object associated with FONT_FAMILY key, or null if not found.
1871 Retrieves the character set from the font descriptor dictionary.
1872 Retrieves the lower limit value from the associated COSArray object.
1873 Retrieves the upper limit value from the associated COSArray object. @return String representation of the upper limit, or null if not found
1874 Retrieves partial field name from FDF field dictionary.
1875 Removes the specified issuer from the ISSUER attribute of the certificate. @param issuer byte array representing the issuer's name
1876 Retrieves the annotation symbol. @return The symbol string, or null if not found.
1877 Retrieves annotation title from COSDictionary. @return The title string or null if not found
1878 Retrieves file description from the dictionary.
1879 Retrieves the logical ID of the PDF structure element. @return The COSString object as a string, or null if not found
1880 Retrieves the title from the PDF document structure. @return The title string, or null if not found
1881 Retrieves the language associated with the PDF structure element. @return The language as a string, or null if not found
1882 Retrieves alternate description from PDF document structure. @return string representation of alternate description or null if not found
1883 Retrieves the expanded form of the PDF structure element. @return The string representation of the E key in the COS dictionary object.
1884 Retrieves the subject annotation from the dictionary. @return The COSString object as a string, or null if not found.
1885 Retrieves the actual text from the COS object associated with this PDStructureElement. @return The actual text as a string, or null if not found
1886 Retrieves the actual text from the properties dictionary. @return The COSString object as a string, or null if not found
1887 Retrieves the alternate description from properties dictionary. @return The COSString object as a string, or null if not found
1888 Retrieves the expanded form of properties. @return Expanded properties string or null if not found
1889 Retrieves date annotation from PDF document. @return The COSString object as a string, or null if not found
1890 Retrieves the annotation's name from its dictionary. @return The COSString object as a string, or null if not found
1891 Retrieves annotation contents from the underlying dictionary. @return The contents string or null if not found
1892 Retrieves and formats the F property value.
1893 Retrieves the document ID from the FDF dictionary. @return COSArray object containing the document ID
1894 Retrieves the vertical offset of a line annotation's caption.
1895 Retrieves the interior color of the annotation. @return Color object representing the interior color, or null if not set
1896 Retrieves the parent tree as a PDNumberTreeNode. @return PDNumberTreeNode object or null if not found
1897 Retrieves the ID tree structure from the COSDictionary. @return PDStructureElementNameTreeNode object or null if not found
1898 Retrieves a PDPage object associated with the current page. @return PDPage object or null if not found
1899 Retrieves the associated PDF page object. @return PDPage instance or null if not found
1900 Retrieves the associated PDF page for this marked content reference. @return PDPage object or null if not found
1901 Retrieves a set of names associated with the given resource type. @param kind The type of resource (e.g., font, color space) @return Set view of contained COSName objects or an empty set if not found
1902 Retrieves a dictionary object by its key from the given resource type. @param kind unique identifier for the resource type @param name unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
1903 Retrieves an indirect resource by its name. @param kind the type of the resource @param name unique identifier for the resource @return The COSObject representation or null if not found
1904 Retrieves the PDF transition associated with this page. @return PDTransition object or null if not found
1905 Retrieves the JavaScript dictionary associated with this PDF document. @return PDDocumentNameDictionary object or null if not found
1906 Retrieves the embedded files dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
1907 Retrieves the destination names dictionary. @return PDNameTreeNode instance or null if not found
1908 Retrieves the optional content properties dictionary. @return OptionalContentProperties object or null if not found
1909 Retrieves the structure tree root from the catalog dictionary. @return PDStructureTreeRoot object or null if not found
1910 Retrieves the URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
1911 Retrieves the mark info dictionary from the document catalog. @return PDMarkInfo object or null if not found
1912 Retrieves a map of class attributes. @return A map containing class attribute information
1913 Retrieves the dictionary of named destinations. @return PDDocumentNameDestinationDictionary object or null if not found
1914 Retrieves the COSDictionary object associated with a given crypt filter name. @param cryptFilterName unique identifier for the dictionary object @return The COSDictionary object or null if not found or dereferenced
1915 Retrieves the border effect dictionary. @return BorderEffectDictionary object or null if not found
1916 Retrieves the target directory dictionary from a given dictionary object. @return PDTargetDirectory instance or null if not found
1917 Retrieves Windows launch parameters from the associated COSDictionary. @return PDWindowsLaunchParams object or null if not found
1918 Retrieves the target directory associated with this embedded action. @return PDTargetDirectory object or null if not found
1919 Retrieves the PDResources instance associated with this tiling pattern. @return PDResources object or null if not found
1920 Retrieves the extended graphics state for this shading pattern. @return PDExtendedGraphicsState object or null if not initialized
1921 Retrieves the render state from a COSName object based on the specified destination. @param destination unique identifier for the rendering context @return The RenderState object or null if not found or dereferenced
1922 Retrieves the device-dependent color space process attributes. @return A PDDeviceNProcess object or null if not found
1923 Retrieves the COSDictionary object for character procedures. @return The COSDictionary object or null if not found
1924 Retrieves the PDF Resources instance associated with this font. @return The PDResources object or null if not initialized
1925 Retrieves the Panose font classification from the PDF document. @return PDPanose object or null if not found
1926 Retrieves the CID system information dictionary. @return PDCIDSystemInfo object or null if not found
1927 Retrieves the named page reference template from the COS dictionary. @return FDFNamedPageReference object or null if not found
1928 Retrieves additional actions associated with the current form field. @return PDAdditionalActions object or null if not found
1929 Retrieves the icon fitting configuration from the associated COS dictionary. @return FDFIconFit object or null if not found
1930 Retrieves the named page reference for the appearance stream. @return FDFNamedPageReference object or null if not found
1931 Retrieves the appearance dictionary for the current form field. @return PDAppearanceDictionary object or null if not found
1932 Retrieves the JavaScript data associated with this FDF document. @return FDFJavaScript object or null if not found
1933 Retrieves PDSignature instance from the FDF catalog. @return PDSignature object or null if not found
1934 Retrieves the border style dictionary associated with this annotation. @return Border style dictionary or null if not found
1935 Retrieves the name dictionary associated with this document catalog. @return PDDocumentNameDictionary object or null if not found
1936 Retrieves the PDF viewer preferences. @return ViewerPreferences object or null if not found
1937 Retrieves the AcroForm object associated with a given PDF document. @param acroFormFixup optional fixup for the AcroForm content @return PDAcroForm object or null if not found or dereferenced
1938 Parses a COSDictionary from the PDF source. @param isDirect whether to parse directly or not @return parsed COSDictionary object
1939 Retrieves the current blend mode from the dictionary. @return BlendMode instance or NORMAL if not found
1940 Retrieves the end color from the collection. @return the color at index 3 (end) or null if not found
1941 Retrieves the color at index 2 (second) from the collection. @return PDGamma object representing the start colour
1942 Retrieves the color at index 1 from the collection.
1943 Retrieves the first color from the collection.
1944 Reads a vertex from an ImageInputStream with specified ranges and transformations. @param input source data stream @param maxSrcCoord maximum source coordinates @param maxSrcColor maximum source color value @param rangeX X-coordinate range @param rangeY Y-coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform affine transformation @return Vertex object representing the read vertex data
1945 Reads and processes a patch from an input stream. @param input source data stream @param isFree whether to read free or constrained patch data @param implicitEdge edge points of the patch (if not reading free) @param implicitCornerColor corner color components of the patch (if not reading free) @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color component value @param rangeX range of x coordinates for interpolation @param rangeY range of y coordinates for interpolation @param colRange range of color components for interpolation @param matrix transformation matrix to apply to patch points @param xform affine transform to apply to patch points @param controlPoints number of control points in the patch @return generated Patch object or null on EOF
1946 Evaluates a PDF Function Type 4 by executing instructions and clipping input/output values. @param input array of float inputs to be processed @return array of float outputs or throws exception if invalid
1947 Returns a string representation of this numerical range, including its minimum and maximum values.
1948 Initializes a PDLineDashPattern instance from an array of dash lengths and a phase value. @param array array of dash lengths @param phase initial dash phase (may be adjusted according to PDF 2.0 specification)
1949 Initializes PDRectangle from a COSArray representation. @param array input COSArray containing rectangle dimensions and coordinates
1950 Creates a Matrix instance from the provided COSBase object, ensuring it's a valid COSArray with at least 6 elements and all elements are COSNumbers. @param base COSBase object containing matrix values
1951 Retrieves the COSDictionary object associated with either the first or second key. @param firstKey primary key to search for @param secondKey fallback key if first is not found @return The COSDictionary object or null if not found
1952 Retrieves a boolean value from the dictionary using the first key; returns the fallback key's value or default value if not found. @param firstKey primary key to search for @param secondKey fallback key if first is not found @param defaultValue default boolean value if both keys are absent @return boolean value associated with the first key, or default value
1953 Retrieves integer value from the dictionary using firstKey or secondKey. @param firstKey primary key to search for @param secondKey fallback key if first is not found @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
1954 Performs the initial parsing of the FDF document, retrieving the trailer and root objects. @throws IOException if an I/O error occurs during parsing
1955 Retrieves the encryption dictionary from the document's trailer.
1956 Checks if the PDF document is encrypted. @return true if the document has an encryption dictionary, false otherwise
1957 Retrieves the appearance state of this annotation.
1958 Retrieves the relationship dictionary object. @return The COSName object representing the relationship or null if not found
1959 Retrieves the subtype of this soft mask. @return COSName object representing the subtype
1960 Retrieves the Unicode representation of a given code point. @param code input code point value
1961 Retrieves the string filter name from the encryption settings. @return The COSName object representing the string filter, or IDENTITY if not set
1962 Retrieves the stream filter name from the document's encryption settings. @return COSName object for the stream filter or IDENTITY if not found
1963 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
1964 Retrieves the encryption method from the cryptographic filter dictionary. @return The COSName object representing the encryption method or null if not found
1965 Retrieves the array of coordinates for text markup annotation. @return An array of floats representing the x and y coordinates, or null if not found
1966 Retrieves the color space from the shading's dictionary. @return The PDColorSpace object representing the color space
1967 Retrieves the filter names as a list of strings. @return A List containing one or more filter names, or an empty list if not found
1968 Checks if a given COSDictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1969 Retrieves the underlying PDF page associated with this annotation. @return PDPage object or null if not found
1970 Retrieves the FDFPageInfo object associated with this page. @return The pageInfo object or null if not found
1971 Retrieves the border style dictionary for this annotation link. @return PDBorderStyleDictionary object or null if not found
1972 Retrieves the document's ID from its trailer dictionary. @return COSArray object containing the document ID
1973 Retrieves the alternate icon for a PDF annotation. @return PDFormXObject object or null if not found
1974 Retrieves the border effect dictionary for this annotation. @return BorderEffectDictionary object or null if not found
1975 Retrieves the normal icon as a PDFormXObject object. @return The icon or null if not found
1976 Retrieves the sound content associated with this PDActionSound. @return The COSStream object containing the sound data or null if not found
1977 Retrieves the CID set stream from the dictionary. @return The COSStream object or null if not found
1978 Retrieves a list of output intents from the PDF document's catalog dictionary. @return List of PDOutputIntent objects or empty list if not found
1979 Retrieves the ending style of the line annotation's start point.
1980 Retrieves the font file descriptor from the dictionary. @return The COSStream object or null if not found
1981 Retrieves end point ending style of the line annotation. @return style string or default value if not found
1982 Retrieves the interior color of the line annotation. @return Color object or null if not applicable
1983 Retrieves the font file as a PDStream object.
1984 Retrieves the differences dictionary from the FDF document. @return The COSStream object containing the differences or null if not found
1985 Retrieves the XMP metadata associated with this PDPage. @return PDMetadata object or null if not found
1986 Retrieves and initializes the metadata dictionary from the catalog. @return PDMetadata object or null if not found
1987 Retrieves the associated page from the thread bead. @return PDPage object or null if not found
1988 Retrieves font file 3 as a PDStream object. @return PDStream object or null if not found
1989 Retrieves the thread beads for this page. @return list of PDThreadBead objects or empty list if not found
1990 Retrieves the list of viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if not found
1991 Retrieves a list of child PDNameTreeNode objects from the current node. @return List of child nodes or null if not found
1992 Retrieves the bounds array for Type 3 function evaluation. @return COSArray object containing bounds data or null if not initialized
1993 Retrieves the array of Type 3 function definitions. @return COSArray object containing function data or null if not initialized
1994 Retrieves the COSArray object containing decode values. @return COSArray object or null if not found
1995 Retrieves the Size array from the PDF dictionary. @return COSArray object containing size information or null if not found
1996 Retrieves the domain values as a COSArray object. @return COSArray containing domain values or null if not set
1997 Retrieves the array of values for this PDFunction's range. @return COSArray object containing the range values
1998 Retrieves the lower limit as an Integer value from the COSArray object.
1999 Retrieves the upper limit value from the COSArray object. @return Integer representation of the upper limit or null if not found
2000 Retrieves a list of owner user properties from the COSArray object. @return List of PDUserProperty objects associated with the document's owner
2001 Checks if the specified edge is attached. @param edge edge to check @return true if attached, false otherwise
2002 Retrieves the color of this annotation. @return Color object or null if not found
2003 Retrieves the interior color of the annotation. @return Color object representing the circle's interior color, or null if not set
2004 Retrieves the callout values from the annotation's COS dictionary. @return An array of floats representing the callout values, or null if not found
2005 Retrieves the list of ink annotations. @return A list of float arrays representing the ink data or null if not found
2006 Retrieves a map of numeric values from the COSArray object associated with the 'NUMS' key. @return Map<Integer, COSObjectable> containing index-value pairs or null if not found
2007 Retrieves the line coordinates as a float array. @return An array of floats representing the line's coordinates, or null if not found
2008 Retrieves a list of child nodes from the current node's COSArray. @return List<PDNumberTreeNode> containing child nodes or null if none exist
2009 Retrieves a map of name-value pairs from the underlying COSArray object. @return A read-only map of String keys and values of type T, or null if not found
2010 Retrieves the encoding array associated with the function. @return COSArray object containing function encoding data
2011 Retrieves the horizontal caption offset for a line annotation. @return Horizontal offset value or 0 if not applicable
2012 Retrieves the previous bead in the thread. @return The previous PDThreadBead object or null if not found
2013 Retrieves the PDStructureElement associated with this outline item. @return The structure element or null if it does not exist
2014 Returns the default resources for the form. @return PDResources object or null if not found
2015 Checks if this outline node has child items. @return true if children exist, false otherwise
2016 Retrieves caption vertical offset from line annotation's COSArray. @return Caption vertical offset as a float value, or 0 if not found.
2017 Retrieves the digital signature properties build object. @return PDPropBuild object or null if not found
2018 Retrieves the timestamp data associated with this seed value. @return PDSignedTime object or null if not found
2019 Retrieves a PDSeedValueCertificate instance from the associated dictionary. @return PDSeedValueCertificate object or null if not found
2020 Retrieves the MDP (Message Digest Procedure) seed value. @return PDSeedValueMDP object or null if not found
2021 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not found
2022 Retrieves publication security properties from the COSDictionary. @return PDPropBuildDataDict object containing publication security data or null if not found
2023 Retrieves the digital signature filter properties. @return PDPropBuildDataDict object containing filter data or null if not found
2024 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2025 Retrieves the normal appearance of an annotation. @return PDAppearanceEntry object or null if not found
2026 Retrieves the border style dictionary associated with this annotation widget. @return PDBorderStyleDictionary object or null if not found
2027 Retrieves the additional annotation actions associated with this widget. @return PDAnnotationAdditionalActions object or null if not found
2028 Retrieves the appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
2029 Retrieves the interior color of this polyline annotation. @return Color object representing the interior color, or null if not set
2030 Writes a COSBase object to the specified OutputStream, handling various types of objects and compression. @param output target OutputStream for writing @param object COSBase object being written @param topLevel indicates whether this is a top-level object or an indirect reference
2031 Retrieves the signature value associated with this PDSignatureField. @return PDSignature object or null if not found
2032 Retrieves the next bead in the thread.
2033 Retrieves the thread associated with this bead. @return PDThread object or null if not found
2034 Retrieves the URI of the previous action. @return A PDActionURI object or null if not found
2035 Retrieves the polygon vertices as a float array. @return An array of floats representing the vertex coordinates, or null if not available
2036 Retrieves the interior color of this polygon annotation. @return Color object representing the interior color, or null if not set
2037 Retrieves polyline vertices as a float array. @return Array of float values representing the vertex coordinates or null if not found
2038 Retrieves the external data dictionary associated with this annotation. @return The COSDictionary object or null if not found
2039 Retrieves the additional actions associated with this field. @return PDFormFieldAdditionalActions object or null if not found
2040 Retrieves the first bead associated with this thread. @return The first bead as a PDThreadBead object or null if not found
2041 Retrieves the measurement dictionary associated with this viewport. @return PDMeasureDictionary object or null if not found
2042 Retrieves the border style dictionary for this annotation. @return PDBorderStyleDictionary object or null if not found
2043 Retrieves the endpoint style of a polyline annotation's start point. @return Endpoint style as a string (e.g. "LE_NONE") or null if not found
2044 Retrieves the endpoint ending style of a polyline annotation. @return The style as a string (e.g. "Open", "Closed", etc.) or default if not found
2045 Retrieves the seed value dictionary associated with this signature field. @return The seed value dictionary or null if not found
2046 Retrieves the default signature value from the PDF document. @return PDSignature object or null if not found
2047 Retrieves document information for the current thread. @return PDDocumentInformation object or null if not found
2048 Retrieves the Border Effect dictionary. @return PDBorderEffectDictionary object or null if not found
2049 Retrieves the bounding box of this tiling pattern. @return PDRectangle object representing the bounding box or null if not found
2050 Retrieves the bounding box of the shading. @return PDRectangle object representing the box or null if not set
2051 Retrieves the fringe dimensions as a PDRectangle object. @return null if not found or invalid
2052 Retrieves the bounding box of this form XObject. @return PDRectangle object representing the bounding box or null if not found
2053 Retrieves the fringe rectangle associated with this annotation circle. @return PDRectangle object representing the fringe or null if not found
2054 Retrieves the font bounding box (bbox) from the dictionary. @return PDRectangle object representing the bbox or null if not found
2055 Retrieves the font bounding box rectangle from the dictionary. @return PDRectangle object representing font bounds or null if not found
2056 Retrieves the fringe rectangle of an annotation. @return PDRectangle object or null if not found
2057 Resolves the bounding box for a PDF annotation widget. @param fieldWidget The form field to resolve the bounding box for @param appearanceStream Appearance stream containing the bounding box information @return The resolved PDRectangle object or null if not found
2058 Initializes an instance of the FDFDocument class with default settings. Sets up the document's state, version, trailer, and root dictionary (FDF catalog).
2059 Retrieves the PDRectangle object associated with this annotation. @return PDRectangle object or null if not properly defined
2060 Sets the bounding box (BBox) attribute. @param bbox rectangle object to be set
2061 Sets the gamma color values with a specified name. @param name unique identifier for the color attribute @param value PDGamma object containing the new color data
2062 Sets the four colors using a PDFourColours object. @param name string identifier for the color attribute @param value PDFourColours object representing the four colors
2063 Initializes a PDPage object with default letter-sized media box dimensions.
2064 Retrieves the Form Data Format (FDF) dictionary. @return FDFDictionary object or a new instance if not found
2065 Adds a resource to the dictionary with the given kind and name. If the item already exists, returns the existing key; otherwise, creates a new unique key and adds the item to the dictionary. @param kind type of resource (e.g. font, color space) @param prefix string prefix to use when generating the key @param object data associated with the resource @return The added key or existing key if the item already exists
2066 Adds a font resource to the dictionary with the given name. @param name unique identifier for the font resource
2067 Adds a color space resource to the dictionary. @param name unique identifier for the color space
2068 Adds an extended graphics state to the dictionary. @param name unique identifier for the resource
2069 Adds a shading resource to the dictionary with the given kind and name. @param name unique identifier for the shading resource
2070 Adds a pattern resource to the PDF resources dictionary. @param name unique identifier for the pattern resource
2071 Adds a resource property to the dictionary. @param properties object containing property data
2072 Adds an XObject resource to the dictionary. @param xobject data associated with the XObject resource
2073 Retrieves the bounding box of the marked content artifact. @return PDRectangle object or null if not available
2074 Retrieves the bounding box rectangle for the PDF content. @return PDRectangle object or null if not found
2075 Retrieves the rectangle annotation associated with this FDFAnnotation. @return PDRectangle object or null if not found
2076 Retrieves fringe dimensions as a PDRectangle object. @return PDRectangle object if fringe exists, or null otherwise
2077 Sets the display style for fractional values. @param fractionalDisplay one of "D", "F", "R", or "T" to specify decimal, fraction, rounded, or truncated display
2078 Calculates the rectangle difference for the free text annotation. @return PDRectangle object representing the difference or null if not found
2079 Retrieves a list of COSObject instances matching specific dictionary types. @param type1 first object type to match @param type2 second object type to match @return List of COSObject instances or empty list if none found
2080 Retrieves the bounding box (BBOX) as a PDRectangle object. @return PDRectangle object representing the bounding box or null if not found
2081 Initializes a PDInlineImage instance with given decoding parameters, image data, and resources. @param parameters COSDictionary containing decoding settings @param data raw byte data of the image @param resources PDResources object for accessing additional resources
2082 Returns the file suffix based on the image filters. @return Suffix (e.g. "jpg", "tiff", or "png") depending on filter presence
2083 Retrieves Unicode representation of a given code point. @param code input code point value @param customGlyphList override glyph list (not used)
2084 Checks if the PDF document has an encryption dictionary. @return true if encrypted, false otherwise
2085 Performs the parsing of the FDF document, returning an FDFDocument object. @throws IOException if an I/O error occurs during parsing
2086 Retrieves the default AcroForm object associated with this PDF document. @return PDAcroForm object or null if not found
2087 Retrieves a PDColorSpace object by its name. @param name unique identifier for the color space @param wasDefault whether the color space is default or not @return The PDColorSpace object or null if not found
2088 Checks if a color space exists with the given name. @param name unique identifier for the color space @return true if found, false otherwise
2089 Retrieves an extended graphics state by name. @param name unique identifier for the extended graphics state
2090 Determines whether the given COSName represents an image XObject. @param name unique identifier for the resource type
2091 Retrieves color space names. @return Set view of contained COSName objects or an empty set if not found
2092 Retrieves x-object names associated with this PDF resource. @return Set view of contained COSName objects or an empty set if not found
2093 Retrieves names associated with properties resource type. @return Set view of contained COSName objects or an empty set if not found
2094 Retrieves integer value from dictionary using firstKey or secondKey. @param firstKey primary key to search for @param secondKey fallback key if first is not found
2095 Retrieves integer value from dictionary using provided key. @param key primary key to search for @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
2096 Retrieves the rectangle associated with this bead. @return PDRectangle object or null if not found
2097 Initializes and sets the line dash pattern from an array of dash lengths and a phase value. @param array array of dash lengths @param phase initial dash phase (may be adjusted according to PDF 2.0 specification)
2098 Retrieves the line dash pattern associated with this graphics state. @return PDLineDashPattern object or null if not found
2099 Retrieves a stencil image from the given PDImage, applying the specified Paint. @param pdImage source image @param paint paint object to apply @return BufferedImage representation of the stencil image or null if not available
2100 Sets the embedded file with a Unicode representation. @param file PDEmbeddedFile object containing the embedded file data
2101 Sets an embedded file in the PDF document. @param file PDEmbeddedFile object representing the file to be set
2102 Retrieves and creates a transformation matrix from the form object's COS dictionary. @return Matrix instance representing the transformation matrix
2103 Retrieves the pattern's matrix representation. @return Matrix object or null if not found
2104 Retrieves and returns the matrix associated with this PDShadingType1 instance. @return A Matrix object representing the transformation matrix
2105 Retrieves an inheritable attribute from the given node and its ancestors. @param node COSDictionary object to search within @param key unique identifier for the attribute @return The COSBase object or null if not found
2106 Retrieves a boolean value from the dictionary using the specified key. @param key primary key to search for @param defaultValue default boolean value if key is absent @return boolean value associated with the key or default value
2107 Retrieves the rectangle difference associated with this annotation. @return PDRectangle object or null if not found
2108 Initializes a PDTransition instance with default slide transition style.
2109 Sets the blue component range in the PDLab dictionary. @param range PDRange object containing minimum and maximum values
2110 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
2111 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary object to be stored as default
2112 Decrypts a dictionary and its contents recursively. @param dictionary the dictionary to decrypt @param objNum the object number of the decrypted dictionary @param genNum the generation number of the decrypted dictionary
2113 Sets numerical unit formatting option. @param units unique identifier for the unit to be set
2114 Sets a date item in the dictionary using a string identifier. @param key unique string identifier for the date item @param date Calendar object to be represented as string
2115 Sets an embedded date item in the dictionary with a given key. @param embedded COSName identifier for the embedded object @param key COSName identifier for the date item @param date Calendar object to be represented as string
2116 Retrieves an optional content group by name. @param name unique identifier for the group @return PDOptionalContentGroup object or null if not found
2117 Sets the key usage extension in the certificate's dictionary. @param digitalSignature indicates if digital signature is allowed (1) or not (0) @param nonRepudiation indicates if non-repudiation is allowed (1) or not (0) @param keyEncipherment indicates if key encipherment is allowed (1) or not (0) @param dataEncipherment indicates if data encipherment is allowed (1) or not (0) @param keyAgreement indicates if key agreement is allowed (1) or not (0) @param keyCertSign indicates if key certificate signing is allowed (1) or not (0) @param cRLSign indicates if certificate revocation list signing is allowed (1) or not (0) @param encipherOnly indicates if only enciphering is allowed (1) or not (0) @param decipherOnly indicates if only deciphering is allowed (1) or not (0)
2118 Initializes an instance of the PDRectlinearMeasureDictionary class with subtype set.
2119 Retrieves the parent outline node. @return The parent outline node or null if not found
2120 Retrieves the document outline from the catalog dictionary. @return PDDocumentOutline object or null if not found
2121 Initializes a PDAction instance with default type.
2122 Initializes a new instance of the PDShadingPattern class. Sets the pattern type to shading pattern in the underlying dictionary.
2123 Initializes a new instance of PDStructureTreeRoot with default logical structure type.
2124 Retrieves the optional content groups (OCGs) as a collection of PDOptionalContentGroup instances.
2125 Initializes a PDStructureElement with a given structural type and parent node. @param structureType unique identifier for the structural type @param parent new parent node in the logical structure of the PDF document
2126 Sets the 'Base' string associated with URI actions. @param base input string to be represented
2127 Sets a string item in the dictionary with the given key. @param name unique identifier for the item to be set @param value input string to be represented
2128 Sets custom metadata value in PDF document. @param fieldName unique identifier for the item to be set @param fieldValue input string to be represented
2129 Sets the sign date in the underlying COSDictionary structure. @param cal Calendar object representing the date to be set
2130 Retrieves shading names. @return Set view of contained COSName objects or an empty set if not found
2131 Sets the creation date of the annotation. @param creationDate Calendar object representing the creation date
2132 Sets a formatted string value for the F property. @param formattedValue input string to be represented
2133 Sets the digital signature version. @param applicationVersion version string to be represented
2134 Parses a PDF document and returns a PDDocument instance. @param lenient whether to perform strict or lenient parsing @return PDDocument object or throws IOException if parsing fails
2135 Updates the modified date of this PDF annotation. @param c Calendar object representing the new modified date
2136 Sets the creation date annotation in the PDF document. @param date Calendar object representing the creation date
2137 Sets the modification date of the PDF document. @param date Calendar object representing the new modification date
2138 Sets the creation date of the PDF document. @param date Calendar object representing the creation date
2139 Sets user property name and notifies potential change. @param name string value of the property
2140 Initializes a new instance of the class from a given PDDocument. @param document the PDF document to manage page labels for
2141 Sets the name associated with this named action. @param name string identifier for the action
2142 Sets the right coordinate of the rectangle destination. @param x new right value; -1 to reset
2143 Sets the top coordinate of the rectangle destination. @param y top coordinate value or -1 to remove
2144 Initializes a new instance of PDPageFitWidthDestination with default settings. Sets the name at index 1 to the constant TYPE.
2145 Sets the top position of the page's content bounding box. @param y new top value or -1 to reset
2146 Sets whether the page's content is bounded by a box. @param fitBoundingBox true to enable bounding box fitting
2147 Initializes an empty page destination with direct access enabled. Sets initial zoom type and grows the COSArray to accommodate a minimum buffer capacity of 5.
2148 Sets the left coordinate of a PDF page view. @param x new left coordinate value
2149 Sets the top coordinate of the page view. @param y new top value (or -1 to reset)
2150 Sets the bottom coordinate of the rectangle destination. @param y new bottom value (or -1 to clear)
2151 Sets the zoom level of the destination page. @param zoom the desired zoom factor
2152 Retrieves and decodes the decode parameters from the PDF stream. @return List of decoded parameters or null if not found or invalid
2153 Retrieves and decodes file decode parameters from the PDF stream. @return List of decoded parameters or null if not found or invalid
2154 Retrieves the FDF catalog from the document's trailer dictionary. If no catalog is found, a new one is created and initialized. @return FDFCatalog object representing the retrieved or newly created catalog
2155 Sets the A component range in the dictionary. @param range PDRange object containing minimum and maximum values for A
2156 Retrieves the fractional space to allocate in icon fitting configuration. @return PDRange object defining allocated space
2157 Sets the style of the border effect. @param s new style value
2158 Sets the left coordinate of the target area within a PDF page. @param x new left value (-1 to reset)
2159 Sets whether the PDF destination fits within a bounding box. @param fitBoundingBox true to enable fitting, false otherwise
2160 Sets the rendering intent in the extended graphics state dictionary. @param ri rendering intent string (null to remove existing value)
2161 Sets a string value in the dictionary with the given key. @param name unique identifier for the item to be set @param value string data to be stored (null to remove existing item)
2162 Adds a new bead to the thread, updating links between adjacent beads. @param append the PDThreadBead object to be appended
2163 Initializes a PDThreadBead instance with default values.
2164 Sets the first bead in the thread with associated data. @param bead PDThreadBead object containing initial threaded content
2165 Inserts a new sibling outline item after the current one. @param newSibling the PDOutlineItem to be inserted
2166 Inserts a new sibling before the current outline item. @param newSibling new PDOutlineItem to be inserted
2167 Initializes an empty page destination with type and minimum buffer capacity.
2168 Retrieves the annotation's appearance dictionary. @return PDAppearanceDictionary object or a newly created instance if not found
2169 Initializes a new instance of the PDTilingPattern class.
2170 Initializes an empty page destination with default configuration.
2171 Configures the page view fitting behavior within its bounding box. @param fitBoundingBox true to enable bounded fitting, false otherwise
2172 Initializes an empty page destination with default settings.
2173 Sets the left margin of the PDF page destination. @param x new left margin value; -1 to clear
2174 Retrieves pattern names from resources. @return Set view of contained COSName objects or an empty set if not found
2175 Retrieves font names from resources. @return Set view of contained COSName objects or an empty set if not found
2176 Retrieves string representation from dictionary object associated with given PDF name. @param key unique identifier for dictionary object @param defaultValue default string to return if key is not found
2177 Retrieves units formatting option from COSDictionary. @return string representation of units or null if not found
2178 Retrieves the PDF document version from the properties dictionary. @return string representation of the document version
2179 Retrieves the 'Base' string associated with URI actions. @return Base string or null if not found
2180 Retrieves string representation from dictionary object associated with given key. @param name unique identifier for dictionary object
2181 Retrieves custom metadata value by field name. @param fieldName unique identifier for the dictionary object
2182 Retrieves string value associated with given metadata key. @param propertyKey unique identifier for the metadata dictionary
2183 Retrieves the COSDictionary object associated with key A and creates a PDAction object. @return PDAction object or null if not found or dereferenced
2184 Retrieves and parses the annotation action associated with this widget. @return The parsed PDAction object or null if not found
2185 Retrieves the PDAction object associated with key A from the COSDictionary. @return The PDAction object or null if not found
2186 Retrieves a PDAction object associated with key 'C'. @return The PDAction object or null if not found or dereferenced
2187 Retrieves the PDAction associated with key 'O' from the dictionary. @return PDAction object or null if not found
2188 Retrieves and creates a PDAction object for the 'C' key. @return PDAction object or null if not found or dereferenced
2189 Retrieves the action associated with key V. @return PDAction object or null if not found
2190 Retrieves a string representation from the embedded dictionary object associated with the given key. @param embedded Embedded dictionary identifier @param key unique identifier for the string object within the embedded dictionary @param defaultValue default string to return if key is not found
2191 Retrieves a PDAction object associated with the 'F' key. @return The PDAction object or null if not found
2192 Retrieves operation type parameter. @return Operation type (e.g. OPEN) or default value if not found
2193 Retrieves the file name from various embedded file systems. @return The file's name as a string, or null if not found in any system
2194 Retrieves the normal appearance stream of this annotation. @return PDAppearanceStream object or null if not found
2195 Initializes a DictionaryEncoding instance with the specified base encoding and differences. @param baseEncoding unique identifier for the base encoding (may be STANDARD_ENCODING) @param differences COSArray containing font encoding differences
2196 Retrieves the contents of a digital signature within a PDF file. @param pdfFile byte array representing the entire PDF document @return byte array representation of the signature contents or null if invalid
2197 Retrieves the contents of a digital signature within a PDF file. @param pdfFile InputStream to read from
2198 Retrieves the background color. @return PDColor object representing the background color
2199 Retrieves the border color from the appearance characteristics dictionary.
2200 Retrieves the color associated with this annotation.
2201 Retrieves the fully qualified name of the field, including its parent's name if applicable. @return fully qualified field name as string or null if no parent
2202 Checks if an optional content group exists by name. @param groupName the name of the group to search for @return true if the group is found, false otherwise
2203 Retrieves default appearance string from form dictionary.
2204 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
2205 Retrieves the PDAction associated with the DP key. @return PDAction object or null if not found
2206 Retrieves the PDAction associated with the 'WP' key from the actions catalog. @return The PDAction object or null if not found
2207 Checks if the character set of a CID font matches the provided information. @param cidSystemInfo PDCIDSystemInfo object containing registry and ordering @param info FontInfo object with code page range and postscript name @return true if character sets match, false otherwise
2208 Retrieves the line dash style pattern as a PDLineDashPattern instance. @return PDLineDashPattern object representing the border style properties
2209 Retrieves a list of FDF annotations from the COS dictionary. @return List of FDFAnnotation objects or null if not found
2210 Retrieves the configured SecurityHandler instance. @return SecurityHandler object, or throws IOException if not set
2211 Initializes a new instance of PDEncryption with the given COSDictionary. @param dictionary COSDictionary object containing encryption settings
2212 Creates an object from the given COSBase, using its type to determine the specific object class. @param kid the COSBase to create an object from @return The created object or null if not creatable
2213 Retrieves and returns the parent structure node. @return PDStructureNode object or null if not found
2214 Checks if this PDAttributeObject has no elements but a valid owner.
2215 Validates and calculates the cross-reference table offset. @param startXRefOffset start position of cross-reference table @return valid offset or -1 if not found
2216 Checks if this DeviceN color space has N-channel attributes. @return true if 'NChannel' subtype found, false otherwise
2217 Retrieves the open action associated with the document, returning a PDAction or PDDestination object based on its type. @return PDAction if the open action is a dictionary, PDDestination otherwise, or null if not found
2218 Retrieves a PDAction object associated with the 'DS' key. @return The PDAction object or null if not found
2219 Retrieves the action associated with 'WS' key from catalog. @return PDAction object or null if not found
2220 Retrieves a WC action from the catalog. @return PDAction object or null if not found
2221 Retrieves PDAction object associated with PI key. @return The PDAction object or null if not found or dereferenced
2222 Retrieves the PV action definition. @return The PDAction object or null if not found
2223 Retrieves the PC action definition. @return The PDAction object or null if not found
2224 Retrieves a PDAction object associated with the PO key. @return PDAction object or null if not found
2225 Retrieves the on-value of a checkbox. @return String value or empty string if not found
2226 Retrieves and creates a PDAction object for the 'BL' key. @return PDAction object or null if not found
2227 Retrieves a PDAction object associated with the 'U' key. @return The PDAction object or null if not found
2228 Retrieves a PDAction object associated with the 'D' key. @return The PDAction object or null if not found
2229 Retrieves a PDAction object associated with the 'X' key. @return The PDAction object or null if not found
2230 Retrieves a PDAction object associated with the E key. @return PDAction object or null if not found
2231 Retrieves the action associated with key F from the actions dictionary. @return PDAction object or null if not found
2232 Retrieves a map of JavaScript actions from the COSDictionary. @return A map of JavaScript actions with names as keys or null if not found
2233 Retrieves the action associated with this field. @return The PDAction object or null if not found
2234 Retrieves the FO action definition. @return PDAction object or null if not found
2235 Retrieves the transparency group associated with this soft mask. @return PDTransparencyGroup object or null if not found
2236 Finds a named destination page in the PDF document. @param namedDest PDNamedDestination object to search for @return PDPageDestination object or null if not found
2237 Initializes a new PDPatternContentStream instance from a PDTilingPattern. @param pattern Tiling pattern object
2238 Initializes a new PDAnnotationPolyline instance with default properties.
2239 Initializes a new PDAnnotationPolygon instance with subtype set to 'polygon'.
2240 Initializes a new PDAnnotationLine instance with default properties.
2241 Writes prepared COSObjects to a compressed stream. @param stream target OutputStream for writing
2242 Writes a COSDictionary object to the specified OutputStream. @param output target OutputStream for writing @param cosDictionary COSDictionary object being written
2243 Initializes a new PDAnnotationInk instance with default subtype. @param SUB_TYPE annotation subtype (default: COSName.SUBTYPE)
2244 Initializes a new PDAnnotationFileAttachment instance with default properties.
2245 Initializes an instance of FDFAnnotationUnderline with default annotation type.
2246 Initializes an instance of FDFAnnotationStrikeOut with default strikeout annotation subtype.
2247 Initializes an instance of FDFAnnotationSquiggly with default squiggly subtype.
2248 Initializes an instance of FDFAnnotationHighlight with default annotation subtype.
2249 Removes a specified child element from the current structure node. @param structureElement PDStructureElement to be removed
2250 Initializes a new PDAnnotationRubberStamp instance with default subtype.
2251 Initializes a PDAnnotationSquareCircle instance with subtype. @param subType annotation subtype (e.g., "Square", "Circle")
2252 Initializes a new instance of PDAnnotationText with default subtype.
2253 Retrieves a list of associated PDAnnotationWidgets. @return List<PDAnnotationWidget> collection of widgets
2254 Retrieves the popup annotation associated with this markup. @return PDAnnotationPopup object or null if not found
2255 Initializes a PDAnnotationTextMarkup instance from a COSDictionary. @param field dictionary object to initialize from
2256 Initializes a PDAnnotationText instance from a COSDictionary. @param dict the dictionary object to initialize from
2257 Initializes a PDAnnotationSquareCircle instance from a COSDictionary. @param dict dictionary object to initialize from
2258 Initializes a PDAnnotationSound instance from a COSDictionary. @param field COSDictionary object to initialize from
2259 Inserts a new child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
2260 Initializes a PDAnnotationRubberStamp instance from a COSDictionary. @param field the dictionary object to initialize from
2261 Initializes a PDAnnotationPolygon instance from a COSDictionary. @param dict the dictionary object to initialize from
2262 Initializes a PDAnnotationLine instance from a COSDictionary. @param field dictionary object to initialize from
2263 Initializes a PDAnnotationInk instance from a COSDictionary. @param dict the dictionary object to initialize from
2264 Initializes a PDAnnotationFreeText instance from a COSDictionary. @param field the dictionary object to initialize from
2265 Initializes a PDAnnotationFileAttachment instance from a COSDictionary. @param dict the dictionary object to initialize from
2266 Initializes a PDAnnotationCaret instance from a COS dictionary. @param field the dictionary object to initialize from
2267 Initializes a PDAnnotationTextMarkup instance with subtype and empty quad points. @param subType the annotation subtype
2268 Initializes a PDAnnotationPolyline instance from a COSDictionary. @param dict the dictionary object to initialize from
2269 Retrieves print scaling preference. @return Print scaling setting as a string, or default value if not set
2270 Appends a child element to the existing list of children and sets its parent. @param structureElement the child element (PDStructureElement) to append
2271 Retrieves the file specification associated with this action. @return PDFileSpecification object or null if not found
2272 Creates a PDImageXObject from the provided BufferedImage. @param document PDDocument object @param image BufferedImage to convert @return Prepared PDImageXObject instance or throws IOException if an error occurs
2273 Initializes a PDPageTree instance with the given COSDictionary as the page tree root. @param root COSDictionary representing the page tree root
2274 Retrieves the page tree associated with this catalog. @return A PDPageTree instance representing the document's pages
2275 Validates the page structure in the given PDF document. @param root COSDictionary object representing the PDF document's root
2276 Retrieves the COSArray object containing encoding values. @return COSArray object or null if not found
2277 Initializes a PDFunctionType2 object from a COSBase function. @param function COSBase object containing the function's parameters
2278 Retrieves the revisions of attribute objects associated with this structure element. @return Revisions collection containing PDAttributeObject instances and their revision numbers
2279 Retrieves the value associated with a given name from this node or its children. @param name unique identifier of the value to retrieve @return Value instance of type T, or null if not found
2280 Searches for the PDF document's trailer section. @param trailer COSDictionary instance to search within @return true if trailer and info dictionaries are found, false otherwise
2281 Searches for trailer items in the provided COSDictionary. @param trailer The dictionary to search within @return true if a valid root object is found, false otherwise
2282 Retrieves set of names associated with extended graphics states. @return Set view of contained COSName objects or an empty set if not found
2283 Sets an attribute with the given name and value. @param attrName unique identifier for the attribute @param attrValue data to be stored (may be wrapped if necessary)
2284 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern instance or initializes one with default value if not found
2285 Retrieves and configures file specification based on form action dictionary. @return PDFileSpecification object or null if invalid input
2286 Retrieves file specification from dictionary object. @return PDFileSpecification object or null if invalid input
2287 Retrieves the file specification from the COS dictionary. @return PDFileSpecification object or null if invalid
2288 Retrieves file specification from dictionary object. @return PDFileSpecification object or null if invalid input
2289 Retrieves file specification from COS dictionary object. @return PDFileSpecification instance or null if invalid input
2290 Retrieves the file specification associated with this named page reference. @return PDFileSpecification object or null if not found
2291 Retrieves a list of Embedded FDFs as PDFileSpecifications. @return List<PDFileSpecification> or null if not found
2292 Retrieves and creates a PDFileSpecification instance from the COSBase dictionary object with key FS. @return PDFileSpecification object or null if invalid input
2293 Retrieves the file specification from the FDF dictionary. @return PDFileSpecification object or null if not found
2294 Retrieves the PDF document's version. @return Version string or null if not found If the document is 1.4 or later, returns the maximum of the header version and the catalog version (if present). Otherwise, returns the header version only.
2295 Sets the numerical conversion factor in the dictionary. @param conversionFactor float value representing the conversion factor
2296 Sets the intensity of the border effect. @param i intensity value (float)
2297 Sets a floating-point number in the dictionary using a string key. @param name unique identifier for the item to be set (string representation) @param value the float value to represent
2298 Retrieves and returns a PDFileSpecification instance from the dictionary. @return PDFileSpecification object or null if invalid input
2299 Retrieves the print clip setting from viewer preferences. @return string representation of the print clip mode
2300 Retrieves the view clip preference as a string. @return The represented name as a string from the dictionary object associated with the given key
2301 Retrieves the next action in a sequence. @return List of PDAction objects or null if not found
2302 Sets the Mac OS resource fork for an embedded file. @param macResFork input string to be represented
2303 Retrieves minimum revision value from the dictionary. @return The minimum revision as a long value
2304 Retrieves the revision value from the dictionary. @return The revision number or default value (-1L) if not found
2305 Retrieves signed content from a PDF file. @param pdfFile input byte array representing the PDF document @return byte array containing the signed content or null if not found
2306 Creates a view of the underlying data stream with optional filtering. @return RandomAccessRead object containing filtered or raw input data
2307 Retrieves the signed content from a PDF file. @param pdfFile InputStream containing the PDF file @return byte[] representing the signed content or null if not found
2308 Retrieves the PDRange object for a given parameter number. @param paramNum unique identifier of the parameter
2309 Initializes a ShadingContext instance with the provided PDFShading, ColorModel, AffineTransform, and Matrix. @param shading the PDFShading object to be managed @param cm the color model for the shading context @param xform the affine transform for the shading context @param matrix the matrix for the shading context
2310 Initializes the color space with RGB data from a COSArray. @param rgb COSArray containing RGB values
2311 Retrieves the standard crypt filter dictionary. @return The COSDictionary object or null if not found or dereferenced
2312 Sets the Mac creator for an embedded file. @param macCreator string identifier of the Mac creator
2313 Parses a directory object from the PDF source. @throws IOException if an error occurs while reading the PDF source
2314 Enables or disables an optional content group. @param group the PDOptionalContentGroup to be enabled/disabled @param enable true to enable, false to disable @return true if the group was successfully updated, false otherwise
2315 Retrieves the fundamental base state of optional content. @return BaseState object representing the base state
2316 Initializes an instance of PDOptionalContentGroup with a specified name. @param name input string to be represented as the group's name
2317 Retrieves the CYX measurement value from the COSDictionary. @return CYX float value
2318 Sets the Mac OS subtype for an embedded file. @param macSubtype subtype value to be set
2319 Retrieves the V value from the seed dictionary. @return The float value associated with key 'V'
2320 Retrieves the leader extension value from the annotation. @return Leader extend length
2321 Retrieves the leader length value from the annotation dictionary.
2322 Retrieves the conversion factor from the internal COSDictionary object.
2323 Retrieves the numeric value associated with the given key. @param name unique identifier for the dictionary object
2324 Sets the prefix string for numerical labels in PDF document. @param labelPrefixString input string to be represented as label prefix
2325 Retrieves leader offset from line annotation. @return Leader offset value
2326 Sets an integer attribute in the dictionary using a given key. @param name unique identifier for the attribute to be set @param value integer value to represent
2327 Sets the thousand separator for numerical formatting. @param thousandsSeparator input string to be represented
2328 Returns the default crypt filter dictionary. @return COSDictionary object or null if not found
2329 Retrieves the number of output parameters for this PDFunction. @return number of output values or 0 if unknown
2330 Retrieves the output range for a given value. @param n input value
2331 Clips input values to specified ranges based on the function's domain and range values. @param inputValues array of float values to be clipped @return modified array with clipped values within the defined ranges, or original input if no valid ranges exist
2332 Calculates the number of input parameters based on domain values. @return Number of input parameters or -1 if not calculated
2333 Retrieves the domain values and creates a PDRange instance for input. @return PDRange object or null if not set
2334 Calculates the sample index based on the provided coordinate vector and size values. @param vector input coordinate vector
2335 Retrieves the value associated with a given index from this node or its child nodes. If found, returns the corresponding COSObjectable instance; otherwise, returns null. @param index unique identifier of the value to retrieve @return Object instance representing the retrieved value or null if not found
2336 Initializes an FDFField object from a given XML element. @param fieldXML the input XML element representing a form field
2337 Retrieves encoding array and creates a PDRange instance for parameter 'n'. @param n parameter index
2338 Checks if the top edge of the marked content artifact is attached. @return true if attached, false otherwise
2339 Checks if the bottom edge of the artifact's content is attached. @return true if attached, false otherwise
2340 Checks if the left edge of the marked content artifact is attached.
2341 Checks if the right edge of marked content is attached.
2342 Initializes a new instance of the PDCIDFont class. @param fontDictionary COS dictionary containing font metrics @param parent PDType0Font parent font object
2343 Retrieves the decode range for a given parameter number. @param paramNum index of the parameter @return PDRange object or null if not found
2344 Sets the decimal separator for numerical formatting. @param decimalSeparator desired separator character
2345 Initializes a new instance of DictionaryEncoding with the provided font encoding and settings. @param fontEncoding COSDictionary containing font encoding information @param isNonSymbolic whether the font is non-symbolic (true) or symbolic (false) @param builtIn Encoding object for the font's built-in encoding, or null if not applicable
2346 Retrieves the character procedure for a given font code. @param code unique font code @return PDType3CharProc object or null if not found
2347 Retrieves the rollover appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
2348 Retrieves the down appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
2349 Retrieves first child outline item. @return PDOutlineItem object or null if not found
2350 Retrieves the last child outline item from this node. @return PDOutlineItem object or null if no children exist
2351 Retrieves and returns the signature associated with this PDSignatureField. @return PDSignature object or null if not found
2352 Initializes a DictionaryEncoding instance from the provided font encoding dictionary. @param fontEncoding COSDictionary object representing the font encoding
2353 Sets a number value in the dictionary using the provided key. @param name unique string identifier for the item to be set @param value integer value to represent
2354 Adds a PDOptionalContentGroup to the list of groups. @param ocg group to be added
2355 Retrieves the numeric value associated with a given key. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found or null
2356 Retrieves the icon name from the annotation's dictionary.
2357 Retrieves the guideline style from the dictionary. @return string representation of the guideline style
2358 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param key unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
2359 Retrieves the represented name associated with this action. @return The "N" name value or null if not found
2360 Retrieves the rendering intent from the dictionary object. @return RenderingIntent object or null if not found
2361 Retrieves the date value associated with a given key from an embedded dictionary. @param embedded embedded dictionary object @param key unique identifier for the date object @param defaultValue default calendar instance to return if key is invalid or not present @return The date value as a Calendar object, or the default value if not found
2362 Retrieves the optional content dictionary as a PDPropertyList instance. @return PDPropertyList object or null if not found
2363 Retrieves date value associated with given key; returns default calendar if not found. @param key unique identifier for the date object @param defaultValue Calendar instance to return if key is invalid or not present
2364 Retrieves standard attribute name as a string. @param name unique identifier for the dictionary object
2365 Sets the denominator value in the COSDictionary object. @param denominator numerical value of the denominator
2366 Retrieves the print area settings from viewer preferences. @return string representation of print area (CropBox) or default value if not found
2367 Sets the label position to a specific value. @param labelPositionToValue one of "S", "P", or null
2368 Retrieves the Optional Content dictionary, creating a PDPropertyList instance if found. @return PDPropertyList object or null if not present
2369 Retrieves the collection of optional content groups (OCGs) from the dictionary. @return A List of PDPropertyList objects representing the OCGs or an empty list if not found
2370 Retrieves a PDPropertyList instance by its name. @param name unique identifier for the properties list @return PDPropertyList object or null if not found
2371 Retrieves default position vector based on CID. @param cid unique Character Identifier
2372 Retrieves the attachment name from the COS dictionary object. @return attachment name as a string
2373 Retrieves the highlight mode from the COS dictionary. @return Highlight mode string (inverted) or default value if not found
2374 Retrieves the intensity of the border effect. @return intensity value (float)
2375 Computes the font height for a given PDFont object. @param font The PDFont object to compute the height for @return The computed font height as a float value
2376 Retrieves the viewer area preference. @return string representation of view area or default value if not found
2377 Retrieves the user's preferred reading direction. @return "L2R" or "R2L" string indicating left-to-right or right-to-left reading order
2378 Retrieves non-full-screen page mode preference. @return string representation of the preference or "UseNone" if not found
2379 Retrieves the motion style of the transition. @return the represented name as a string from the dictionary object associated with the given key
2380 Retrieves the dimension of the transition as a string. @return Dimension name (e.g. "Width") or default value if not found
2381 Retrieves the transition style. @return style name as a string
2382 Retrieves the line ending style from the annotation's dictionary. @return Line ending style as a string
2383 Sets the numerical formatting option for label suffix strings. @param labelSuffixString input string to be represented
2384 Retrieves the type attribute from the COSDictionary object. @return Type string or "ExData" if not found
2385 Retrieves the border style as a string from the COSDictionary object. @return Border style (e.g., solid) or default value if not found
2386 Retrieves the highlighting mode as a string from the dictionary object associated with COSName.H. @return Highlighting mode ("I" by default if not found)
2387 Retrieves the represented name of this annotation.
2388 Retrieves and returns the represented name of this rubber stamp annotation.
2389 Retrieves the reply type as a string from the COS object's dictionary. @return The reply type (RT_REPLY) or its default value if not found
2390 Retrieves the optional content dictionary. @return PDPropertyList object or null if not found
2391 Calculates the effective length of a Type 1 font segment. @param bytes input byte array @param length1 length of the first segment @return corrected length if invalid, otherwise original length
2392 Retrieves thousands separator from COSDictionary object associated with RT key. @return string representation of thousands separator or default comma if not found
2393 Parses a COSArray from the PDF source. @throws IOException if an error occurs while reading the PDF source
2394 Sets the checkbox value to its on-state.
2395 Checks if the checkbox is currently checked.
2396 Retrieves a set of "on" values associated with the button. @return Set of string representations or an empty set if no values are found
2397 Adds font resources from an annotation's normal appearance stream to the AcroForm. @param acroFormResources PDResources object representing the AcroForm @param annotation PDAnnotation object containing the annotation with fonts
2398 Retrieves the appearance stream of the given annotation. @param annotation PDAnnotation object to fetch appearance for
2399 Initializes parser values from a given COSStream, validating and extracting /W and /Index arrays. @param stream COSStream containing cross-reference data
2400 Performs lenient parsing and returns a PDDocument instance.
2401 Calculates the corrected length of a byte array slice. @param bytes the underlying byte array @param length1 starting index for the slice @param length2 ending index for the slice, validated and adjusted if necessary
2402 Retrieves a priority queue of font matches based on the given PDFontDescriptor and PDCIDSystemInfo. @param fontDescriptor PDFontDescriptor object containing relevant font information @param cidSystemInfo PDCIDSystemInfo object with character set registry and ordering (optional) @return PriorityQueue<FontMatch> containing matched font information, sorted by score
2403 Retrieves a string representation from the embedded dictionary object associated with the given key. @param embedded Embedded dictionary identifier @param key unique identifier for the string object within the embedded dictionary
2404 Retrieves label position to value string from COS dictionary. @return string representation of label position to value
2405 Retrieves the index of a specific PDPage within this page tree. @param page target PDPage object @return zero-based index if found, -1 otherwise
2406 Retrieves label suffix string from COSDictionary. @return string representation of label suffix
2407 Retrieves a COSDictionary representing a PDF page by its 1-based index. @param pageNum the index of the page to retrieve @param node the parent dictionary to start searching from @return The COSDictionary representing the requested page, or null if not found
2408 Retrieves the encoding values for a specified parameter and creates a PDRange instance. @param paramNum index of the parameter @return PDRange object or null if not found
2409 Retrieves label prefix string from COSDictionary. @return string representation of PS key or default space if not found
2410 Retrieves decimal separator from COSDictionary object. @return decimal separator string or default if not found
2411 Loads and parses an FDF document from the specified input stream. @param input InputStream containing the FDF data @return parsed FDFDocument object or throws IOException if parsing fails
2412 Loads and parses an FDF document from the specified file. @param file input file to load @return parsed FDFDocument object or throws IOException on failure
2413 Encodes the image data using various filtering techniques to optimize compression. @throws IOException if an I/O error occurs during encoding
2414 Initializes a PDAnnotationHighlight instance with subtype. @param subType annotation subtype
2415 Sets the document's version to a specified floating-point value. If the new version is equal to the current one, no action is taken. Downgrading the version is not allowed and will result in an error log message. For documents with version >= 1.4f, the catalog version is updated; otherwise, only the document's version header is updated. @param newVersion new version value
2416 Creates a new PDF document with the same version, information, catalog, and metadata as the source document. @return PDDocument object representing the newly created document
2417 Retrieves the page tree associated with this document catalog. @return A PDPageTree instance representing the document's pages
2418 Initializes a PDAnnotationSquiggly instance with subtype. @param subType annotation subtype
2419 Enables or disables an optional content group by name. @param groupName unique identifier for the OCG @param enable true to enable, false to disable @return true if the group was successfully updated, false otherwise
2420 Initializes a PDActionURI instance with default subtype.
2421 Initializes a PDActionThread instance with default subtype.
2422 Initializes a PDActionSubmitForm instance with default subtype.
2423 Adds a child outline item to the end of this node's children. @param newChild the PDOutlineItem object to be appended
2424 Prepends a new child outline item to the current node. @param newChild PDOutlineItem object to be added as first child
2425 Initializes a PDActionSound instance with default subtype.
2426 Checks whether an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2427 Initializes a new strikeout annotation instance with subtype.
2428 Initializes a PDAnnotationUnderline instance with subtype and empty quad points. @param subType annotation subtype
2429 Initializes a PDAnnotationCircle instance from a COSDictionary. @param field dictionary object to initialize from
2430 Generates a stylized, cloudy rectangle shape in a PDF document. @param left left edge of the rectangle @param bottom lower edge of the rectangle @param right right edge of the rectangle @param top upper edge of the rectangle @param isEllipse flag indicating whether to use an ellipse or polygon cloud radius
2431 Creates a stylized, cloudy polygon shape in a PDF document from the given path. @param path array of float arrays representing the polygon vertices
2432 Initializes a PDAnnotationUnderline instance from a COSDictionary. @param dict dictionary object to initialize from
2433 Initializes a strikeout annotation from a COSDictionary. @param dict dictionary object to initialize from
2434 Initializes a PDAnnotationSquiggly instance from a COSDictionary. @param dict dictionary object to initialize from
2435 Initializes a PDAnnotationHighlight instance from a COSDictionary. @param dict dictionary object to initialize from
2436 Initializes the color space with LAB data from a COSArray. @param lab COSArray containing LAB values
2437 Initializes a new PDCalRGB instance from an array of color components. @param rgb COSArray containing RGB values
2438 Initializes an instance of PDCalGray from COSArray representation.
2439 Initializes a PDLab instance with default LAB color space settings.
2440 Initializes a new PDColor instance with CALRGB color space.
2441 Initializes a new instance of the PDCalGray class.
2442 Initializes a PDAnnotationSquare instance from a COSDictionary. @param field dictionary object to initialize from
2443 Initializes a PDActionResetForm instance with default subtype.
2444 Initializes a remote goto action with default subtype.
2445 Initializes a named action instance with default subtype.
2446 Initializes a PDActionMovie instance with default subtype.
2447 Adds a PDAbstractPattern resource to the dictionary with kind 'PATTERN' and prefix 'p'. @param pattern the pattern resource to add
2448 Adds a PDShading resource to the dictionary. @param shading PDShading object
2449 Adds an extended graphics state resource to the dictionary. @param extGState data associated with the extended graphics state
2450 Adds a color space resource to the dictionary. @param colorSpace ColorSpace object
2451 Adds a PDF font resource to the dictionary. @param font the font object to be added
2452 Sets the border line for a PDF appearance content stream. @param lineWidth desired line width (default: 1) @param bs PDBorderStyleDictionary object representing border style properties @param border COSArray object containing dash pattern array
2453 Sets the destination for this outline item to a specific PDF page. @param page target PDPage object
2454 Reads and initializes the font's encoding information. @throws IOException if missing required CMap or invalid encoding
2455 Adds a resource to the dictionary with the given kind and name. @param properties PDPropertyList object containing resource data
2456 Adds an image XObject to the resources dictionary. @param image The image data to be added
2457 Adds an XObject resource to the dictionary with the given prefix. @param xobject XObject object @param prefix string prefix to use when generating the key
2458 Initializes a PDActionLaunch instance with default subtype.
2459 Initializes a JavaScript action instance with default subtype.
2460 Initializes a PDActionImportData instance with default subtype.
2461 Initializes a PDActionHide instance with default subtype.
2462 Initializes a PDActionGoTo instance with default subtype.
2463 Initializes an instance of embedded goto action with default subtype.
2464 Initializes PDPageLabels with a PDDocument and COSDictionary. @param document The PDF document to manage page labels for @param dict COS dictionary containing tree data to initialize the label hierarchy
2465 Retrieves the normal appearance of an annotation. @return PDAppearanceEntry object or null if not found
2466 Retrieves the rollover appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
2467 Retrieves date value from an embedded dictionary. @param embedded embedded dictionary object @param key unique identifier for the date object
2468 Retrieves the down appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
2469 Sets the value at a specified index in the button's export values collection. @param index valid index within the collection, throwing an IllegalArgumentException if invalid
2470 Adds an XObject resource to the dictionary with key 'Form' and the given form object. @param form the PDFormXObject object to be added
2471 Retrieves fractional display format from COSDictionary. @return formatted string representation of fractional values
2472 Retrieves the starting page number. @return The retrieved integer value (defaulting to 1 if not found)
2473 Retrieves the total count of pages in the page tree. @return The number of pages or 0 if not found
2474 Retrieves flag value from dictionary using provided key and bit mask. @param field primary key to search for @param bitFlag bit mask to apply to retrieved integer value
2475 Retrieves integer value from dictionary using provided key. @param key primary key to search for @param defaultValue default value to return if not found
2476 Retrieves integer value from dictionary using provided key. @param key primary key to search for
2477 Retrieves integer value from dictionary using provided key. @param key primary key to search for
2478 Retrieves integer value from an embedded dictionary. @param embeddedDictionary dictionary containing the target key @param key primary key to search for @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
2479 Retrieves order value from COS dictionary. @return The retrieved integer order value
2480 Retrieves viewer preference to center window. @return true if centered, false otherwise
2481 Retrieves viewer preference to fit window when displaying PDF documents. @return true if fitting window is enabled, false otherwise
2482 Hides menubar based on viewer preferences. @return true if menubar is hidden, false otherwise
2483 Hides toolbar based on user preference. @return true if toolbar should be hidden, false otherwise
2484 Checks if the fly area transition style is opaque. @return true if opaque, false otherwise
2485 Retrieves whether form fields should appear in need appearances. @return true if fields should appear, false otherwise
2486 Retrieves trusted mode flag from the dictionary. @return boolean value indicating whether trusted mode is enabled
2487 Retrieves whether to display document title. @return true if enabled, false otherwise
2488 Retrieves the non-E font no warn flag from the dictionary. @return boolean value associated with NON_EFONT_NO_WARN key or default value (true) if absent
2489 Retrieves the revision number from the PDF document structure.
2490 Retrieves the PDF encryption version from the security handler. @return The encryption version as an integer
2491 Retrieves annotation index from dictionary. @return The retrieved index or -1 if not found
2492 Retrieves action flags from the dictionary. @return integer value of action flags or default 0 if not found
2493 Retrieves action flags from dictionary. @return Integer value of FLAGS or default 0 if not found
2494 Retrieves the number of bits per coordinate for shaded triangles. @return The bits per coordinate value or -1 if not initialized
2495 Retrieves the number of bits per color component. @return The bits per color component value or -1 if not found
2496 Retrieves number of vertices per row from dictionary. @return The retrieved integer value or -1 if not found
2497 Retrieves bits per flag value from PDF dictionary. @return The retrieved value or -1 if not found
2498 Creates a PDShading instance based on the provided COSDictionary. @param shadingDictionary dictionary containing shading properties
2499 Retrieves document length from cryptographic filter dictionary. @return Document length in bytes or default value if not found
2500 Retrieves tiling type from PDF dictionary. @return Tiling type integer value
2501 Creates a PDAbstractPattern instance based on the provided COSDictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for accessing resources @return PDAbstractPattern object or throws IOException if unknown pattern type is encountered
2502 Retrieves font flags from the dictionary. @return The retrieved flag value or 0 if not found
2503 Retrieves and returns justification value from annotation. @return justification string or empty if not found
2504 Retrieves document permissions from security handler. @return integer value representing document's P flag
2505 Retrieves document revision from dictionary. @return The retrieved revision number
2506 Retrieves length value from dictionary. @return The retrieved integer length or default (40)
2507 Retrieves the paint type of this tiling pattern. @return The integer value representing the paint type or 0 if not found
2508 Retrieves annotation flags from underlying COSDictionary. @return integer value representing annotation flags
2509 Retrieves pre-release flag from the dictionary. @return true if document is in pre-release mode, false otherwise
2510 Checks if the line annotation has a caption. @return true if a caption is associated with this line annotation, false otherwise
2511 Converts a PDImage to a BufferedImage representation, applying color key mask if provided and handling clipping and subsampling. @param pdImage the image to convert @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor @param colorKey COSArray containing color key values (null for no mask) @return BufferedImage object or null if conversion fails
2512 Extracts a raw WritableRaster representation from the specified PDImage. @param pdImage input PDF image @return WritableRaster object or throws IOException on failure
2513 Retrieves the stencil image using the specified Paint. @param paint object to apply
2514 Calculates and returns the anchor rectangle of a tiling pattern. @param pattern PDTilingPattern object to fetch the BBox, XStep, YStep, scaling factors, and matrix from @return Rectangle2D representing the anchor rect with scaling applied or null if not found
2515 Retrieves the tiling pattern image based on the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object defining the color space @param color PDColor object specifying the pattern color @param xform AffineTransform matrix describing the transformation @param anchorRect Rectangle2D object representing the anchor rectangle @return BufferedImage object containing the rendered image, or null if failed
2516 Parses the appearance XML element of a stamp annotation into a COSDictionary. @param appearanceXML Element representing the appearance XML @return A COSDictionary object containing the parsed data or null if none exists
2517 Checks if the annotation is open. @return true if the annotation is open, false otherwise
2518 Retrieves the resources associated with this page. @return PDResources object or null if not found
2519 Retrieves the rotation of this page in degrees. @return Rotation angle, or 0 if not specified
2520 Retrieves the mix mode of the sound action. @return boolean value indicating whether mixing is enabled
2521 Retrieves whether sound repeats or not. @return true if sound repeats, false otherwise
2522 Retrieves whether this sound action is synchronous. @return true if action executes synchronously, false otherwise
2523 Retrieves the 'H' flag value from the action dictionary. @return boolean indicating whether elements are hidden or not
2524 Retrieves text knockout flag from dictionary. @return true if text should be knocked out, false otherwise
2525 Retrieves alpha source flag from PDF dictionary. @return true if alpha source is enabled, false otherwise
2526 Retrieves automatic stroke adjustment setting. @return true if stroke adjustment is enabled, false otherwise
2527 Retrieves stroking overprint control from COSDictionary. @return boolean value indicating stroking overprint state
2528 Retrieves the page's media box dimensions and coordinates. @return The PDRectangle object representing the media box, or a default value if not found
2529 Retrieves anti-aliasing flag from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
2530 Checks if the transparency group is isolated. @return true if isolated, false otherwise
2531 Checks if renaming is enabled based on template settings. @return true if renaming is enabled, false otherwise
2532 Determines if icons should scale to fit annotations. @return true if scaling is enabled, false otherwise
2533 Retrieves caption presence status. @return true if caption is present, false otherwise
2534 Checks if metadata encryption is enabled. @return true by default and retrievable from the dictionary
2535 Checks if the user property is hidden. @return true if hidden, false otherwise
2536 Checks if file specification is volatile. @return true if volatile, false otherwise
2537 Retrieves a boolean value from the dictionary using the specified key. @param key primary key to search for @param defaultValue default boolean value if key is absent
2538 Checks if knockout is enabled. @return true if K key is present and set to true in the COSDictionary, false otherwise
2539 Retrieves Q value from annotation dictionary. @return The retrieved integer value or default 0 if not found
2540 Hides window UI based on viewer preferences. @return true if hiding is enabled, false otherwise
2541 Checks if timestamp is required based on dictionary value. @return true if timestamp is required, false otherwise
2542 Sets a flag value in the dictionary. @param field COSName identifier for the item to be modified @param bitFlag integer mask representing the flag to be set or cleared @param value boolean indicating whether to set (true) or clear (false) the flag
2543 Initializes a PDFObjectStreamParser with the given COSStream and COSDocument. @param stream COSStream containing PDF objects @param document COSDocument associated with the object stream
2544 Initializes a PDCIDFontType0 instance from a COSDictionary and a PDType0Font parent. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font object representing the parent font @throws IOException if an error occurs during initialization
2545 Initializes a PDCIDFontType2 object with the given font dictionary, parent font, and TrueType font. If no TrueType font is provided, it will be retrieved from the font dictionary or substituted using the fallback mapping. @param fontDictionary COSDictionary containing font metadata @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont to use (null for default) @throws IOException if an error occurs while reading embedded OTF or TTF
2546 Retrieves a CMap from the given COSBase object. @param base COSName for predefined CMap or COSStream for embedded CMap @return parsed CMap object or null if not found
2547 Retrieves annotation rotation setting. @return Rotation value in degrees or default (0) if not found
2548 Writes the PDF document body, preserving origin object numbers and handling encryption. @param doc COSDocument object to write
2549 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param name unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
2550 Retrieves border effect style from COSDictionary. @return Border style string (e.g. "solid") or default ("solid")
2551 Retrieves the root structure tree node. @return PDStructureTreeRoot object or null if not found
2552 Retrieves a list of child elements associated with the current structure node. @return List of Object instances representing the child nodes or an empty list if none found
2553 Retrieves the PDF document's encryption settings. @return PDEncryption object or null if not encrypted
2554 Prepares the document for decryption by initializing encryption and security handler. @throws IOException if an error occurs during the preparation process
2555 Constructs a Type1ShadingContext instance with specified parameters. @param shading PDShadingType1 object representing the shading type @param colorModel ColorModel object for color management @param xform AffineTransform object for transformation handling @param matrix Matrix object for matrix operations
2556 Retrieves page number from dictionary. @return The retrieved integer value or -1 if not found
2557 Retrieves the embedded file with Unicode content. @return A PDEmbeddedFile object or null if not found
2558 Retrieves the embedded file for Unix from the dictionary. @return PDEmbeddedFile object or null if not found
2559 Retrieves embedded file for Mac from dictionary. @return PDEmbeddedFile object or null if not found
2560 Retrieves the embedded file object from its dictionary. @return PDEmbeddedFile object or null if not found
2561 Retrieves the count of open child outline items.
2562 Retrieves a PDColorSpace object by its name. @param name unique identifier for the color space
2563 Removes cached page resources from the resource cache.
2564 Retrieves COSObject instances by specified dictionary type. @param type object type to match
2565 Retrieves and returns the top index of displayed items. @return The current top index value
2566 Retrieves integer value of Q from dictionary. @return The retrieved integer value or default 0 if not found
2567 Retrieves the embedded file specification for DOS from the dictionary. @return PDEmbeddedFile object or null if not found
2568 Initializes a new RadialShadingContext instance with specified parameters. @param shading PDShadingType3 object representing radial shading type @param colorModel ColorModel object describing color model for the context @param xform AffineTransform object representing coordinate transformation @param matrix Matrix object containing transformation matrix values @param deviceBounds Rectangle object specifying device bounds @throws IOException if an I/O error occurs during initialization
2569 Initializes a TriangleBasedShadingContext instance with the provided PDFShading and transformation data. @param shading the PDFShading object to be managed @param cm the color model for the shading context @param xform the affine transform for the shading context @param matrix the matrix for the shading context
2570 Initializes a new AxialShadingContext instance based on provided shading, color model, transform, matrix, and device bounds. Calculates domain, extend values, and sets up transformation matrices for raster image generation. @param shading PDShadingType2 object representing the axial shading type @param colorModel ColorModel object describing the color mapping @param xform AffineTransform instance used to transform user space coordinates @param matrix Matrix object containing the transformation matrix values @param deviceBounds Rectangle object specifying the device bounds @throws IOException if an I/O error occurs during initialization
2571 Sets the V required flag in the digital signature dictionary. @param flag boolean indicating whether to set (true) or clear (false) the V required flag
2572 Sets whether a digest method is required. @param flag true to require a digest method, false otherwise
2573 Marks subject attribute as required in certificate. @param flag true to require subject, false otherwise
2574 Sets sub-filter requirement for digital signatures. @param flag boolean indicating whether sub-filter is required
2575 Sets issuer required flag in certificate dictionary. @param flag boolean indicating whether issuer is required
2576 Creates a stylized, cloudy rectangle in the PDF document. @param rd The original rectangle to apply differences and generate cloud effect
2577 Creates a cloudy ellipse shape within the specified rectangle. @param leftOrig left edge of bounding box @param bottomOrig bottom edge of bounding box @param rightOrig right edge of bounding box @param topOrig top edge of bounding box
2578 Sets filter requirement in PDF document. @param flag true to require a filter, false otherwise
2579 Sets whether the annotation's contents are locked. @param lockedContents true to lock, false to unlock
2580 Sets the toggle no view flag in the annotation's dictionary. @param toggleNoView true to enable or false to disable
2581 Sets the annotation's locked state. @param locked true to lock, false to unlock
2582 Sets whether this annotation is read-only. @param readOnly true to make the annotation read-only
2583 Sets the 'No View' flag in the COSDictionary object. @param noView boolean indicating whether to show (false) or hide (true) the annotation
2584 Sets the 'No Rotate' flag in the annotation's dictionary. @param noRotate true to prevent rotation of the annotation
2585 Sets whether zooming is disabled. @param noZoom true to disable zooming
2586 Sets the printed flag in the annotation's dictionary. @param printed boolean indicating whether the annotation has been printed
2587 Sets the hidden flag in the annotation's dictionary. @param hidden true to hide the annotation
2588 Sets annotation invisibility flag. @param invisible true to make annotation invisible, false otherwise
2589 Sets the lock status of annotation contents. @param lockedContents true to lock, false to unlock
2590 Prepares the PDF document for encryption by initializing and configuring the encryption dictionary. @param doc the PDDocument instance to be encrypted @throws IOException if an error occurs during encryption preparation
2591 Sets reason required flag in the dictionary. @param flag boolean indicating whether to require a reason (true) or not (false)
2592 Sets whether legal attestation is required. @param flag true to require legal attestation
2593 Creates a PDAnnotation instance based on the provided COSBase object. @param base COSBase object representing the annotation @return PDAnnotation object or subclass thereof, depending on subtype
2594 Draws a form XObject into the PDF document. @param form PDFormXObject object to be drawn
2595 Draws an image XObject at a specified location, applying transformation. @param image The image data to be drawn @param matrix Transformation matrix to apply
2596 Draws an image at specified coordinates with given dimensions. @param image the image to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width image width @param height image height
2597 Initializes JavaScript action instance with input code. @param js input JavaScript code to be executed
2598 Sets a marked content point with properties in the PDF output stream. @param tag COSName object representing the content type @param propertyList PDPropertyList object containing resource data
2599 Begins a marked content sequence in the PDF output stream. @param tag COSName object representing the type of marked content @param propertyList PDPropertyList object containing resource data for marked content
2600 Fills the content stream with a PDShading object. @param shading The shading resource to fill with
2601 Sets graphics state parameters in PDF output stream. @param state extended graphics state to set
2602 Checks whether an optional content group with the given name is enabled. @param groupName unique identifier for the optional content group @return true if the group is enabled, false otherwise
2603 Checks if an optional content group is enabled based on the PDF document's properties. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
2604 Retrieves the page labels dictionary from the PDF document. @return PDPageLabels object or null if not found
2605 Fixes destinations in the provided PDDocument by updating PDPageDestinations to point to pages within the document. @param destinationDocument the target PDDocument for fixing destinations
2606 Sets the font and size for the current content stream. @param font PDFont object to be used @param fontSize float value representing the font size
2607 Sets whether additional revision information is required. @param flag boolean indicating whether to require (true) or not require (false)
2608 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print @param scaling the Scaling factor for page rendering @param showPageBorder whether to display page borders during printing @param dpi dots per inch for printing @param center whether to center the document on the paper @param renderer the PDFRenderer instance for rendering pages
2609 Initializes a PDFRenderer instance with the given PDDocument. @param document the PDDocument to render
2610 Creates a new PDF document if necessary, based on splitting at the current page number or no destination document.
2611 Writes the header of a PDF document, handling compression and versioning. @param doc COSDocument instance to write header for
2612 Draws an inline image at the specified coordinates with the given width and height. @param inlineImage The PDInlineImage object to be drawn @param x The x-coordinate of the image's top-left corner @param y The y-coordinate of the image's top-left corner @param width The width of the image @param height The height of the image @throws IOException if an I/O error occurs
2613 Sets the Optional Content Properties for the PDF document. @param ocProperties properties to be set
2614 Increments the PDF document's revision number.
2615 Sets whether signatures exist in the PDF document. @param signaturesExist true if signatures are present, false otherwise
2616 Sets the append-only flag in the signature dictionary. @param appendOnly boolean indicating whether to enable (true) or disable (false) append-only mode
2617 Enables or disables choice field sorting. @param sort true to enable sorting, false otherwise
2618 Enables or disables multi-selection behavior. @param multiSelect true to allow multiple selections, false otherwise
2619 Enables or disables spell-checking for the choice field. @param doNotSpellCheck true to disable spell-checking, false otherwise
2620 Sets whether changes should be committed upon selection. @param commitOnSelChange boolean indicating whether to commit on selection change
2621 Sets whether this choice field is a combo box. @param combo true to enable combo box behavior
2622 Enables or disables editable state of combo box. @param edit true to enable editing, false otherwise
2623 Sets read-only status of this field. @param readonly true to enable read-only mode
2624 Sets whether this field is required or not. @param required true if field must be filled, false otherwise
2625 Sets the 'No Export' flag in the field's dictionary. @param noExport boolean indicating whether to enable (true) or disable (false) export restrictions
2626 Initializes a PDButton instance with the given AcroForm and sets the push button flag. @param acroForm parent PDAcroForm object
2627 Initializes a radio button field within the given PDF form. @param acroForm parent PDAcroForm object
2628 Sets whether radio buttons operate in unison. @param radiosInUnison true if radio buttons should select one option together
2629 Enables or disables multiline input in the text field. @param multiline true to allow multiple lines of input, false otherwise
2630 Sets password protection flag on the text field. @param password true to enable password protection
2631 Sets the file select flag in the dictionary. @param fileSelect true to enable file selection, false otherwise
2632 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable
2633 Enables or disables scrolling within the text field. @param doNotScroll true to prevent scrolling, false otherwise
2634 Sets the combined input flag in the PDF field. @param comb true to enable combined input, false otherwise
2635 Enables or disables rich text formatting in the PDF form field. @param richText true to enable rich text, false otherwise
2636 Creates a PDImageXObject instance from a TIFF file using the provided parameters. @param document PDDocument object @param reader RandomAccessRead object to read TIFF data from @param number Number of pages to skip before extracting data (default: 0) @return PDImageXObject instance or null if no image data is found
2637 Sets the bold flag on this outline item. @param bold true to make the text bold, false otherwise
2638 Sets subject Distinguished Name (DN) requirement flag. @param flag true to require subject DN, false otherwise
2639 Sets the toggle no view flag in the annotation. @param toggleNoView boolean indicating whether to show (false) or hide (true) the annotation when toggled
2640 Sets annotation lock status. @param locked true to lock, false to unlock
2641 Retrieves the total count of pages in this PDF document. @return The number of pages or 0 if not found
2642 Sets the "no view" annotation flag. @param noView true to hide annotation from view, false otherwise
2643 Sets whether the annotation should not rotate with its parent. @param noRotate true to prevent rotation
2644 Sets OID required flag in the certificate dictionary. @param flag boolean indicating whether OID is required
2645 Sets the 'No Zoom' annotation flag. @param noZoom true to disable zooming, false otherwise
2646 Sets annotation visibility. @param hidden true to hide, false to show
2647 Sets annotation invisibility flag. @param invisible true to make annotation invisible
2648 Retrieves a PDF page by its index. @param index the 1-based index of the page to retrieve @return PDPage object or null if not found
2649 Sets whether the PDF outline item's title should be displayed in italics. @param italic true to display in italics, false otherwise
2650 Sets key usage as required in the certificate. @param flag true to mark key usage as required, false otherwise
2651 Sets the required flag for URL attribute in digital signature certificate. @param flag boolean indicating whether to enable (true) or disable (false) the URL requirement
2652 Adds a new child outline item as the first child of this node. @param newChild PDOutlineItem object to be added as first child
2653 Adds a child outline item to the end of this node's children. @param newChild PDOutlineItem object to be appended
2654 Parses the cross-reference object stream from a given byte offset, handling standalone and hybrid tables. @param objByteOffset starting byte position of the cross-reference table @param isStandalone true if parsing a standalone xref table, false for hybrid @return previous object key value from the parsed dictionary
2655 Sets the printed flag in the annotation dictionary. @param printed true if document has been printed
2656 Sets document read-only status. @param readOnly true to make document read-only
2657 Checks if annotation is printed. @return true if printed, false otherwise
2658 Retrieves line join style from PDF dictionary. @return integer value representing line join style
2659 Retrieves parent structure IDs from the page's dictionary. @return Integer value representing parent structure ID(s)
2660 Wraps the provided OutputStream with a PredictorOutputStream if necessary. @param out output stream for writing image data @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original one if no wrapping is needed
2661 Retrieves the denominator value from the internal COSDictionary. @return Denominator integer value
2662 Retrieves integer value from an embedded dictionary. @param embeddedDictionary dictionary containing the target key @param key primary key to search for
2663 Retrieves non-stroking overprint control from COSDictionary. @return boolean value indicating non-stroking overprint state
2664 Checks if annotation has no view flag set. @return true if flag is set, false otherwise
2665 Checks if this node has open child outline items. @return true if node has open children, false otherwise
2666 Creates a PDField instance based on the given AcroForm and field dictionary. If the field is a non-terminal field with Kids entries, it creates a PDNonTerminalField. Otherwise, it uses the field type to create an appropriate subtype (choice, text, signature, button). @param form the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return The created PDField instance or null if erroneous.
2667 Checks if 'Fixed Decimal' formatting is enabled. @return true if FD formatting is active, false otherwise
2668 Checks if popup is open. @return true if visible, false otherwise
2669 Initializes a TilingPaint instance with the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object defining the color space @param color PDColor object specifying the pattern color @param xform AffineTransform matrix describing the transformation
2670 Checks if annotation is not rotatable. @return true if not rotatable, false otherwise
2671 Retrieves line cap style from extended graphics state dictionary. @return integer value representing line cap style
2672 Retrieves the Mark Content ID (MCID) from properties dictionary. @return MCID value or -1 if not found
2673 Retrieves next key from parent tree. @return next integer value or -1 if not found
2674 Retrieves the Marker Context Identifier (MCID) from the underlying COSDictionary object. @return MCID integer value
2675 Retrieves bits per sample value. @return integer representation of bits per sample
2676 Adds a class name to the PDF document structure. @param className The name of the class to add
2677 Updates the attribute list when a PDAttributeObject is changed. @param attributeObject updated attribute object
2678 Writes a PDF document to the output stream with optional incremental updates and encryption. @param doc PDDocument object containing the PDF data @param signInterface SignatureInterface instance for signing the document (optional) @throws IOException if an I/O error occurs during writing
2679 Checks if annotation is invisible. @return true if invisible, false otherwise
2680 Checks if annotation content is locked. @return true if contents are locked, false otherwise
2681 Checks if mouse position tracking is enabled. @return true if "IsMap" flag is set to true, false otherwise
2682 Checks if no zooming annotation flag is set. @return true if flag is set, false otherwise
2683 Checks if the PDF document has suspect flags.
2684 Checks if user properties are marked in the PDF document. @return true if user properties are marked, false otherwise
2685 Checks if the PDF document's marking status is true. @return true if marked, false otherwise
2686 Returns the rotated media box of a page, considering its rotation angle. @param page PDPage object @return Rotated PDRectangle object or original media box if no rotation
2687 Validates user input against set of "on" values. @param value input string to check
2688 Checks if toggle no view flag is set. @return true if flag is set, false otherwise
2689 Checks if annotation is locked. @return true if annotation is locked, false otherwise
2690 Checks if annotation is read-only. @return true if read-only, false otherwise
2691 Fetches an opaque image from the current PDImageXObject. @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor
2692 Fetches RGB image from PDImage with optional color key mask. @param pdImage the image to convert @param colorKey COSArray containing color key values (null for no mask)
2693 Pushes and retrieves resources for the specified content stream. @param contentStream Content stream object @return Parent resources object or null if not found
2694 Calculates the affine transformation matrix for overlaying a page. @param page PDPage object to be overlaid @param overlayMediaBox Media box dimensions of the overlay content @return AffineTransform matrix or null if invalid input
2695 Retrieves the parent structure ID of this annotation. @return The STRUCT_PARENT value from the associated COSDictionary
2696 Retrieves a PDXObject instance associated with the given COSName. @param name unique identifier for the XObject @return PDXObject instance or null if not found
2697 Initializes a new instance of the class with specified shading context. @param shading PDShading object
2698 Creates a COSInputStream instance with default decode options.
2699 Fetches and parses a PDF object stream object based on the given object stream number and key. @param objstmObjNr unique identifier for the object stream @param key COSObjectKey associated with the object stream object @return The parsed COSBase object or null if not found
2700 Retrieves the page contents as an input stream. @return InputStream containing the page's content if available, otherwise an empty byte array
2701 Checks if annotation has "no rotate" flag set. @return true if no rotation allowed, false otherwise
2702 Initializes a PDCIDFontType2 object with the given font dictionary and parent font. @param fontDictionary COSDictionary containing font metadata @param parent PDType0Font parent font
2703 Retrieves and returns a Type 2 CID font object.
2704 Adds a COSBase object to the pool and returns the underlying COSBase object. @param key unique identifier for the object @param base the COSBase object to add @return The COSBase object or null if not found or dereferenced
2705 Checks if annotation has been printed. @return true if printed, false otherwise
2706 Protects the PDF document with a specified protection policy. @param policy ProtectionPolicy object associated with the desired security
2707 Retrieves the glyph name for a given character code. @param code the character code to retrieve glyph name for
2708 Converts a Unicode code point to a font glyph ID. @param code input Unicode code point @return corresponding font glyph ID or result of codeToCID() if no mapping found
2709 Retrieves the Mac subtype for an embedded file. @return string representation of the Mac subtype or null if not found
2710 Retrieves the role map from the structure tree root. @return A Map of role mappings or an empty Map if not found
2711 Checks if filter is required based on flag value. @return true if filter is required, false otherwise
2712 Checks if the choice field should be sorted. @return true if sorting is enabled, false otherwise
2713 Checks if choice field allows multi-selection. @return true if multi-select enabled, false otherwise
2714 Processes the content stream operators, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process @throws IOException if an I/O error occurs during parsing or processing
2715 Checks if annotation is hidden. @return true if hidden, false otherwise
2716 Adds a page to the page tree. @param page PDPage object to be added
2717 Checks if contents are locked. @return true if locked, false otherwise
2718 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
2719 Checks if button is a radio button. @return true if button is radio, false otherwise
2720 Checks if button is of push button type. @return true if push button, false otherwise
2721 Checks if sub-filter is required. @return true if sub-filter is needed, false otherwise
2722 Checks if digest method is required based on flag value. @return true if digest method is required, false otherwise
2723 Checks if V flag is required. @return true if V flag is required, false otherwise
2724 Checks if reason is required. @return true if reason is mandatory, false otherwise
2725 Determines if legal attestation is required based on flag value. @return true if legal attestation is required, false otherwise
2726 Checks if Add Rev Info is required based on flag value. @return true if required, false otherwise
2727 Checks if subject attribute flag is set.
2728 Checks if issuer flag is required.
2729 Checks if OID (Object Identifier) is required.
2730 Checks if subject Distinguished Name (DN) is required. @return true if subject DN is mandatory, false otherwise
2731 Checks if key usage flag is required.
2732 Checks if URL field is required. @return true if URL flag is set in dictionary
2733 Checks if outline item is formatted in italics. @return true if italic, false otherwise
2734 Checks if the outline item's text formatting includes bold. @return true if bold, false otherwise
2735 Checks if signatures exist in form.
2736 Checks if the form is in append-only mode. @return true if form allows only appending new data, false otherwise
2737 Checks if spell-checking should be disabled. @return true if FF field has the specified flag set
2738 Removes a specified page from the page tree and updates ancestor counts. @param node COSDictionary object representing the page to be removed
2739 Retrieves the Mac creator string from the embedded file's parameters. @return Mac creator string or null if not found
2740 Retrieves the owner encryption key from the document's dictionary. @return The byte array containing the owner key or null if not found
2741 Retrieves the user encryption key from the dictionary. @return The user key as a byte array or null if not found
2742 Calculates displacement vector based on character width. @param code Unicode character code @return Displacement Vector object
2743 Retrieves the Mac resource fork from embedded dictionary. @return string representation of Mac resource fork or null if not found
2744 Calculates the total width of a string by encoding it and summing up character widths. @param text input string to encode @return total width in points
2745 Retrieves a PDAbstractPattern instance by its name, utilizing caching for efficient access. @param name unique identifier for the pattern
2746 Retrieves a CIDFontMapping object based on the provided base font and PDFontDescriptor. @param baseFont unique PostScript font identifier @param fontDescriptor PDFontDescriptor object containing relevant font information @param cidSystemInfo PDCIDSystemInfo object with character set registry and ordering (optional) @return CIDFontMapping object or null if not found or incompatible format
2747 Sets the visibility of a user property. @param hidden true to hide, false to display
2748 Retrieves a PDShading instance by its name from the resource dictionary. @param name unique identifier for the shading object @return The PDShading object or null if not found
2749 Checks if annotation is invisible. @return true if annotation's visibility flag indicates invisibility
2750 Checks if annotation is read-only. @return true if annotation is read-only, false otherwise
2751 Retrieves integer value from dictionary using provided key. @param name primary key to search for @param defaultValue default value to return if not found
2752 Retrieves maximum length constraint from PDF field dictionary. @return Maximum allowed characters in the text input field
2753 Loads and parses an FDF document from the specified file. @param filename input file name @return parsed FDFDocument object or throws IOException on failure
2754 Retrieves seed value from dictionary. @return Seed value as an integer
2755 Checks if 'no zoom' flag is set. @return true if no zoom is enabled, false otherwise
2756 Retrieves the PDF shading object. @return The PDShading object or null if not found
2757 Prepares the document for decryption by setting up key length and decrypt metadata. Verifies recipient information and extracts the encrypted content. Computes the SHA1 message digest of the seed, recipients, and access bytes. Sets the encryption key based on the computed digest and algorithm version. @param encryption PDEncryption object @param documentIDArray COSArray containing document ID data @param decryptionMaterial DecryptionMaterial object @throws IOException if any errors occur during preparation
2758 Checks if annotation is locked. @return true if locked, false otherwise
2759 Checks if the field is required. @return true if the field has FF bit set with flag REQUIRED, false otherwise
2760 Clips a rectangle to the media box, returning the intersection. @param box The rectangle to clip @return A new PDRectangle representing the clipped area
2761 Checks if changes should be committed upon selection. @return true if commit on selection change is enabled, false otherwise
2762 Checks if toggle annotation has no view. @return true if no view flag is set, false otherwise
2763 Adds a PDAttributeObject to the attribute dictionary with revision number. @param attributeObject attribute data to be stored
2764 Checks if choice field is a combo box. @return true if combo box, false otherwise
2765 Checks if combo box field is editable. @return true if editable, false otherwise
2766 Checks if field is read-only. @return true if field cannot be modified, false otherwise
2767 Checks if No Export flag is set. @return true if flag is enabled, false otherwise
2768 Checks if annotation has no view flag set. @return true if no view flag is enabled, false otherwise
2769 Checks if text field allows multiline input. @return true if multiline input enabled, false otherwise
2770 Checks if this text field is a password input. @return true if password-protected, false otherwise
2771 Checks if file selection is enabled. @return true if file select flag is set, false otherwise
2772 Disables spell-checking for this text field. @return true if spell-checking is disabled, false otherwise
2773 Determines whether form field scrolling is disabled. @return true if scrolling is disabled, false otherwise
2774 Checks if field allows combination of multiple values. @return true if FF flag has COMB bit set, false otherwise
2775 Checks if text field supports rich text input. @return true if rich text enabled, false otherwise
2776 Checks if radio buttons operate in unison.
2777 Sets italic font attribute. @param flag boolean indicating whether to enable (true) or disable (false) italic
2778 Sets the stroking color by writing the color components and operator to the output stream. @param color PDColor object representing the new stroking color
2779 Draws an inline image at the specified coordinates. @param inlineImage The PDInlineImage object to be drawn @param x The x-coordinate of the image's top-left corner @param y The y-coordinate of the image's top-left corner @throws IOException if an I/O error occurs
2780 Prepares the PDF document for encryption by initializing and configuring its encryption dictionary. @param document PDDocument object to be encrypted @throws IOException if an error occurs during the preparation process
2781 Retrieves the page number associated with this destination. @return zero-based page index, -1 if not found or empty
2782 Retrieves a PDF page by its index from the document catalog. @param pageIndex 1-based index of the page to retrieve
2783 Sets visual signature from input stream. @param is input source (e.g. file or byte array)
2784 Sets visual signature from a local file. @param file file containing visual signature data
2785 Loads and parses a PDF document from the given input source. @param randomAccessRead function to read from the input source @param password optional decryption password @param keyStore key store for encrypted documents (if applicable) @param alias alias for the encryption key (if applicable)
2786 Loads a PDF document from the given RandomAccessRead source. @param randomAccessRead function to read from the input source @param password optional decryption password
2787 Loads PDF document from RandomAccessRead source. @param randomAccessRead input stream to read from
2788 Loads and parses a PDF document from the given byte array using the provided credentials. @param input PDF data as a byte array @param password PDF password for decryption @param keyStore Key store for decryption @param alias Alias for decryption
2789 Adds a page to the PDF document and updates cross-reference object number. @param page PDPage object to be added
2790 Initializes an instance of the class with the given PDF document. @param sourceDocument The original PDF document to extract pages from
2791 Initializes a PDFPageable instance with the given PDDocument and settings. @param document The underlying PDF document @param orientation The desired page orientation @param showPageBorder Whether to display page borders @param dpi The rendering DPI @param center Whether to center content
2792 Parses the cross-reference table in a PDF document. @param document the COSDocument instance @param startXRefOffset starting byte position of the cross-reference table @return the parsed trailer dictionary or null if not found
2793 Dynamically parses a PDF object based on the provided COSObjectKey. @param objKey Unique identifier and generation number of the object @param requireExistingNotCompressedObj true to enforce existing and non-compressed object; false otherwise @return Parsed COSBase object or null if not found
2794 Updates the open count of this outline node's parent by propagating the change. @param delta number to add or subtract from the parent's open count
2795 Sets button value and updates appearance state based on given string option. If export values are present, uses updateByOption; otherwise, uses updateByValue. @param value new value to be set
2796 Sets the fixed pitch flag in the font descriptor. @param flag true to enable, false to disable
2797 Sets serifness of font descriptor. @param flag boolean indicating whether to enable (true) or disable (false) serifness
2798 Sets the symbolic flag bit in the font descriptor flags. @param flag boolean indicating whether to set (true) or clear (false) the flag bit
2799 Sets script font indicator in the font descriptor. @param flag true to enable script font, false otherwise
2800 Sets non-symbolic font descriptor flag. @param flag boolean indicating whether to enable (true) or disable (false) the non-symbolic flag
2801 Sets all characters to uppercase in the font descriptor. @param flag boolean indicating whether to enable (true) or disable (false) all caps
2802 Enables or disables small capital font functionality. @param flag true to enable, false to disable
2803 Sets force bold font attribute. @param flag boolean indicating whether to enforce bold font
2804 Creates a PDImageXObject from a byte array using CCITT encoding. @param document PDDocument object @param byteArray image data in byte array format @param number number of pages to skip before extracting data (default: 0)
2805 Creates a PDImageXObject instance from a file using the provided parameters. @param document PDDocument object @param file File containing image data to be extracted @param number Number of pages to skip before extracting data (default: 0) @return PDImageXObject instance or null if no image data is found
2806 Constructor to create an FDFAnnotation object from an Element. This constructor parses the provided Element and sets up the corresponding attributes of the FDFAnnotation object. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
2807 Sets the non-stroking color for PDF content stream. @param color PDColor object to set as non-stroking color
2808 Retrieves the page's crop box dimensions and coordinates. @return The PDRectangle object representing the crop box, or a default value if not found
2809 Inserts generated combination appearance into the provided content stream. @param contents PDAppearanceContentStream to write into @param appearanceStream PDAppearanceStream containing visual settings @param font PDFont object for character rendering @param fontSize float representing font size in points
2810 Adds a PDF structure to the compression pool. @param current the COSBase object representing the structure
2811 Retrieves the standard structure type based on its current value and role mapping. @return string representation of the standard structure type
2812 Creates a descendant font object from the given COS dictionary and parent font. @param dictionary COSDictionary containing font metadata @param parent PDType0Font parent font @return PDCIDFont object or throws IOException for invalid font types
2813 Collects patches from a COSDictionary instance, applying transformations and decoding ranges as needed. @param xform affine transform to apply to patch points @param matrix transformation matrix to apply to patch points @param controlPoints number of control points in the patch @return List of Patch objects or empty list if no valid patches found
2814 Creates a COSInputStream instance based on the underlying stream.
2815 Converts the COSStream object into a human-readable text string.
2816 Generates a cloudy ellipse within the specified rectangle. @param rd the bounding box for the clouded shape
2817 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found
2818 Retrieves the annotation in reply to this one. @return The corresponding PDAnnotation object or null if not found
2819 Notifies the structure element of attribute changes. @param PDStructureElement's attributeChanged method is called if a valid structure element exists
2820 Saves the PDF document to the specified output stream with incremental updates and optional encryption. @param output OutputStream to write the PDF document to
2821 Wraps PDDocument in a call to write with a null signature interface. @param doc PDDocument object containing the PDF data
2822 Sets default button value. @param value input string to be stored as the default value
2823 Retrieves the referenced object associated with this PDObjectReference. The referenced object can be either a PDXObject or a PDAnnotation instance.
2824 Retrieves a list of annotations that match the specified filter. @param annotationFilter filter to apply when selecting annotations @return List of PDAnnotation objects or empty list if none found
2825 Imports optional content properties from the source PDF document. @param srcDoc the source PDDocument to import from
2826 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print
2827 Fetches the Unicode (UCS2) character mapping from a predefined CMap. @throws IOException if an error occurs while retrieving the CMap
2828 Appends a child element to the PDF structure, using its MCID and COSInteger representation. @param markedContent PDMarkedContent object with MCID and other attributes
2829 Removes a page from the page tree at the specified 1-based index. @param index the index of the page to be removed
2830 Performs LZW decoding on the specified input stream and writes the result to the output stream. @param encoded InputStream containing LZW-encoded data @param decoded OutputStream where decoded data will be written @param parameters COSDictionary containing decoding configuration @param index current decoding index @return DecodeResult object with updated decoding parameters
2831 Decodes a JPEG2000 image from the provided input stream and writes it to the output stream. @param encoded InputStream containing the JPX image data @param decoded OutputStream to write the decoded image to @param parameters COSDictionary object containing decoding settings @param index integer representing the index of the image (not used) @param options DecodeOptions object specifying decoding settings @return DecodeResult object containing the decoded image and parameters
2832 Returns an opaque image from the current PDImageXObject. @return BufferedImage object representing the image
2833 Initializes a TilingPaint instance with the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param xform AffineTransform matrix describing the transformation
2834 Processes content stream operators, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process
2835 Processes a PDF annotation by applying the necessary transformations and clipping to render its content. @param annotation The annotation object containing metadata and appearance information @param appearance The appearance stream object associated with the annotation, containing visual elements and graphics state @throws IOException if an I/O error occurs during processing or parsing of the annotation's content
2836 Checks if all caps flag is set. @return true if all caps font style is enabled, false otherwise
2837 Checks if the font is italic based on the flag bit. @return true if italic, false otherwise
2838 Checks if the font descriptor represents a non-symbolic font. @return true if flag bit for non-symbolic font is set, false otherwise
2839 Checks if script flag bit is set.
2840 Checks if the font descriptor represents a symbolic font. @param none
2841 Checks if the font is serif. @return true if serif, false otherwise
2842 Retrieves a PDAbstractPattern instance by its name, associated with the given PDColor. @param color PDColor object containing the pattern name @return PDAbstractPattern instance or null if not found
2843 Inserts a new page after the specified previous page, updating the parent-child relationships and incrementing child counts. @param newPage new page to be inserted @param prevPage previous page where the new page will be added
2844 Inserts a new page before an existing one, updating the parent-child relationships. @param newPage new page to be inserted @param nextPage page before which the new page will be inserted
2845 Processes a tiling pattern by applying the specified transformation matrix, clipping to its bounding box, and processing content stream operators. @param tilingPattern Tiling pattern object @param color Color object (optional) @param colorSpace Associated color space for the color (optional) @param patternMatrix Transformation matrix to be applied @throws IOException if an I/O error occurs during parsing or processing
2846 Checks if small-cap font flag is set. @return true if small-cap font, false otherwise
2847 Creates a PDField instance from the given dictionary and AcroForm. @param form the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return The created PDField instance or null if erroneous
2848 Removes a specified PDPage from the page tree. @param page PDPage object to be removed
2849 Processes Type 3 font stream operators, handling graphics state management and operator processing. @param charProc Type 3 character procedure object @param textRenderingMatrix Text rendering matrix to be set
2850 Processes a transparency group, handling graphics state management and operator processing. @param group PDTransparencyGroup object containing the transparency group data @throws IOException if an I/O error occurs during parsing or processing
2851 Checks if the text field allows combination of multiple values. @return true if FF flag has COMB bit set, false otherwise
2852 Prepares the document for decryption based on its encryption settings and provided decryption material. @param encryption PDEncryption object containing document's encryption details @param documentIDArray COSArray representing the document ID @param decryptionMaterial StandardDecryptionMaterial instance with password and other decryption-related data @throws IOException if decryption material is not compatible with the document
2853 Checks if the font has fixed pitch characteristics. @return true if the font has fixed pitch, false otherwise
2854 Retrieves the width of a space character in points. If not found, attempts to retrieve it from the ToUnicode CMap or by encoding a space string, and finally uses the average font width as fallback.
2855 Checks if force bold font flag is set. @return true if flag is set, false otherwise
2856 Initializes an FDFAnnotationStamp object from a given XML element. @param element XML element representing the stamp annotation
2857 Constructs an FDFAnnotationSquare instance from an XML element. @param element XML element containing annotation properties
2858 Initializes a new FDFAnnotationFreeText object from an XML Element. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
2859 Initializes a new instance of the FDFAnnotationInk class from an XML element. @param element parent XML element containing ink data
2860 Initializes a new instance of the FDFAnnotationLine class from an XML element. @param element XML element containing line annotation data @throws IOException if the input is invalid or missing required attributes
2861 Initializes a new instance of FDFAnnotationLink from an XML Element. @param element the XML input data
2862 Initializes a polygon annotation from an XML element. @param element XML element containing vertex data and other attributes
2863 Constructs an FDFAnnotationPolyline object from the given XML Element. @param element XML element containing polyline annotation attributes
2864 Retrieves all annotations on this page.
2865 Imports a page from the given source PDF document as a form XObject in the target document. @param sourceDoc the source PDDocument to import from @param page the page to be imported @return PDFormXObject representing the imported page, or null if import fails
2866 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print
2867 Initializes an FDFAnnotationSound object from an XML element. @throws IOException If any required attribute is missing or invalid
2868 Begins a marked content sequence, handling optional content groups and properties. @param tag COSName object representing the marked content tag @param properties COSDictionary object containing marked content properties
2869 Renders a form xobject, skipping if OCG is hidden or all content has been rendered. @param form the PDFormXObject to render
2870 Sets the non-stroking color for PDF content stream. @param color PDColor object to set as non-stroking color
2871 Finds the destination page associated with this PDOutlineItem. @param doc PDF document to search in @return PDPage object representing the destination page, or null if not found
2872 Calculates the size and rotation of a PDF page based on its index. @param document PDDocument object @param page 1-based index of the page to calculate
2873 Imports a page from another PDF document and adds it to the current document. @param page PDPage object containing the source page to be imported @return The newly imported PDPage object, or null if an error occurs
2874 Sets the PDF document template with a page from the given PDPage object. @param page The page to be added to the template
2875 Initializes a PDFPageable instance with default settings. @param document The underlying PDF document
2876 Initializes a PDFPageable instance with the given PDDocument and default settings. @param document The underlying PDF document @param orientation The desired page orientation
2877 Initializes a PDFPageable instance with basic settings. @param document The underlying PDF document @param orientation The desired page orientation @param showPageBorder Whether to display page borders
2878 Initializes a PDFPageable instance with the given PDDocument and settings. @param document The underlying PDF document @param orientation The desired page orientation
2879 Loads and parses a PDF document from the given byte array using the provided credentials. @param input PDF data as a byte array @param password PDF password for decryption
2880 Loads and parses a PDF document from the specified file. @param file input file @param password encryption password (optional)
2881 Loads and parses an encrypted PDF document from a file. @param file input file @param password encryption password @param keyStore key store input stream @param alias encryption alias
2882 Initializes FDF annotation file attachment from XML Element. @throws IOException If required attribute is missing or invalid
2883 Sets the stroking color by writing the color components and operator to the output stream. @param color PDColor object representing the new stroking color
2884 Retrieves the PDF document's trailer dictionary. @return The trailer dictionary or null if not found
2885 Initializes a new instance of the class with text markup annotation coordinates from given XML element. @param element XML element containing 'coords' attribute
2886 Constructor to create an FDFAnnotationText object from an Element. Initializes the annotation's properties (subtype, icon, state, and state model) based on the provided XML element attributes. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
2887 Sets visual signature properties from given PDVisibleSigProperties object. @param visSignatureProperties object containing visible signature configuration
2888 Initializes a FDFAnnotationCircle instance from an XML element. @param element XML element containing the annotation's properties
2889 Removes a specified PDPage from the document. @param page PDPage object to be removed
2890 Creates a PDImageXObject instance from a file using the provided parameters. @param document PDDocument object @param file File containing image data to be extracted
2891 Retrieves a string representation from the given COSBase object. If it's a COSString, returns its value; if a COSStream, converts to text string; otherwise, returns an empty string.
2892 Recursively finds a child field by its name within the AcroForm structure. @param name array of strings representing the full name path @param nameIndex index of the current name in the path @return PDField instance or null if not found
2893 Retrieves a list of fields from the underlying AcroForm. @return List of PDField objects or empty list if none found
2894 Retrieves a Paint object based on the provided PDColor and its associated color space. @param color PDColor object containing color information @return Paint object representing the visual appearance of the color, or null if not found
2895 Returns a fallback font name based on the provided PDFontDescriptor. @param fontDescriptor the descriptor containing font information @return the fallback font name as a string
2896 Returns whether the font descriptor represents a symbolic font. @return true if symbolic, null if not found or unknown
2897 Fetches lines of text from the given PDF content, splitting into paragraphs based on specified font characteristics and width constraints. @param font PDFont object defining font characteristics @param fontSize float representing font size in points @param width maximum allowed line width @return List of Line objects representing individual paragraphs
2898 Retrieves the field's value, handling various types of COSBase objects. @return The field's value as an Object or null if not found
2899 Processes a glyph at the specified position in the PDF document. @param textRenderingMatrix current transformation matrix for the text element @param font the PDFont object representing the font used @param code character code of the glyph to process @param displacement displacement vector from the current position to the next one
2900 Saves the PDF document to the specified output stream with optional compression. @param output OutputStream to write data to @param compressParameters CompressParameters object for incremental updates and compression @throws IOException if the document has been closed or another error occurs during saving
2901 Notifies the structure element of potential attribute changes based on value comparison. @param oldBase previous COSBase object @param newBase current COSBase object
2902 Initializes the current PDFStreamEngine instance for a given page. @param page non-null PDPage object
2903 Retrieves the PDF page's bleed box dimensions and coordinates. @return The PDRectangle object representing the bleed box, or a default value if not found
2904 Retrieves the PDF page's trim box dimensions and coordinates. @return The PDRectangle object representing the trim box, or a default value if not found
2905 Retrieves the PDF page's ArtBox dimensions and coordinates. @return The PDRectangle object representing the ArtBox, or a default value if not found
2906 Returns the rotated crop box for a given page, considering its rotation angle. @param page PDPage object containing the page's properties @return Rotated PDRectangle object or original crop box if no rotation is applied
2907 Serializes COSDocument to a PDDocument instance and writes it. @param doc underlying COSDocument object
2908 Retrieves rich text content from the field's dictionary object. @return Rich text string or null if not found
2909 Retrieves the string representation of a JavaScript action's "before" context. @return The string value or null if not found or invalid
2910 Retrieves the string or stream representation of the 'after' script. @return The COSBase object's string value, or null if not found or dereferenced
2911 Constructs an FDFAnnotationCaret object from the given XML Element. @param element XML element containing annotation attributes
2912 Loads the ICC profile for color space management. If using alternate color space, attempts to fall back if embedded profile fails. Otherwise, initializes Java's built-in sRGB profile or ensures display profile for other colors. Sets initial color and triggers ProfileDataException or CMMException for invalid profiles. @throws IOException if I/O error occurs during fallback process
2913 Initializes a new instance of the COSWriterCompressionPool class with the given PDDocument and CompressParameters. @param document PDF document object @param parameters compression parameters, or null for default settings
2914 Sets the single-valued choice field's value. @param value input string to be represented
2915 Initializes a new Type5ShadingContext instance with specified shading parameters and transforms. @param shading PDShadingType5 object @param cm ColorModel object @param xform AffineTransform object @param matrix Matrix object @param deviceBounds Rectangle representing the device bounds
2916 Initializes a new Type4ShadingContext instance with specified shading parameters and transformation settings. @param shading PDShadingType4 object @param cm ColorModel instance @param xform AffineTransform instance for transformation @param matrix Matrix instance for coordinate transformation @param deviceBounds Rectangle representing the device area
2917 Initializes PatchMeshesShadingContext with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation @param controlPoints number of control points in the patch
2918 Retrieves an array of interpolated sample values based on input parameters and PDF stream data. @return 2D array of int values representing sample values or null if not initialized
2919 Converts the PDF stream to a byte array. @return Byte array representation of the stream
2920 Creates a LayoutPage instance for the given PDF page, combining its content stream and resources. @param page the PDF page to create a layout page for @return a new LayoutPage object representing the combined content and resources
2921 Retrieves string value from COSBase object, or text representation of stream. @param base COSBase instance to extract value from
2922 Retrieves rich contents from the dictionary object. @return Rich content string or null if not found
2923 Retrieves the JavaScript action string associated with the PDF interactive element. @return The JavaScript action string or null if not found
2924 Displays a transparency group from a PDF document. @param form PDTransparencyGroup object containing the transparency group data
2925 Retrieves a list of child fields associated with the current field. @return A list of PDField objects representing the child fields, or an empty list if none found
2926 Processes Type 3 glyph stream operators for a given font code. @param textRenderingMatrix Text rendering matrix to be set @param font PDType3Font object @param code unique font code @param displacement Vector representing glyph displacement
2927 Constructs a PDFontDescriptor object from FontMetrics. @param metrics FontMetrics containing font characteristics @return PDFontDescriptor object representing the constructed font descriptor
2928 Builds a font descriptor from the provided Type 1 font. @param type1 The Type 1 font to build the descriptor from @return A fully constructed PDFontDescriptor object
2929 Retrieves page labels for specified indices. @return Array of labels corresponding to each page index
2930 Retrieves a map of page indices keyed by their corresponding labels. @return A map where each key-value pair represents a page index and its label
2931 Removes a page from the PDF document at the specified 1-based index. @param pageNumber The index of the page to be removed
2932 Processes form XObject if it has content. @param form PDFormXObject object to process
2933 Creates a PDFontDescriptor object based on the provided TrueTypeFont. @param ttf TrueType font for which to create the descriptor @return PDFontDescriptor object representing the font's characteristics
2934 Retrieves the normal appearance of an annotation as a content stream. @param compress whether to apply compression during writing @return PDAppearanceContentStream object or null if not found
2935 Creates a PDImageXObject from a byte array using CCITT encoding. @param document PDDocument object @param byteArray image data in byte array format
2936 Processes a tiling pattern by applying the transformation matrix and processing content stream operators. @param tilingPattern Tiling pattern object @param color Color object (optional) @param colorSpace Associated color space for the color (optional)
2937 Initializes a content stream for a PDF page by overwriting its contents. @param document the parent document @param sourcePage the page to be overwritten
2938 Displays a PDF annotation by processing its appearance stream. @param annotation PDAnnotation object containing metadata and appearance information
2939 Processes a soft mask transparency group, handling graphics state management and operator processing. @param group PDTransparencyGroup object containing the transparency group data @throws IOException if an I/O error occurs during parsing or processing
2940 Initializes the appearance content for a given PDF annotation widget. @param widget The PDF annotation widget to initialize the appearance for @param appearanceCharacteristics Dictionary of appearance characteristics @param appearanceStream The target stream for writing appearance content
2941 Formats and displays plain text content based on alignment settings. @throws IOException if formatting process encounters I/O errors
2942 Initializes FDF strikeout annotation with text markup coordinates from XML element. @param element XML element containing 'coords' attribute
2943 Initializes a new instance of the class from an XML Element. @param element XML element containing annotation data
2944 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
2945 Processes content stream operators for a child page, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process @param page non-null PDPage object representing the current page
2946 Initializes a new instance of the class with a digital signature's image and updates its dimensions. Calculates the size and rotation of a PDF page based on its index. @param document PDDocument object @param page 1-based index of the page to calculate
2947 Initializes the PDVisibleSignDesigner instance with a PDDocument and digital signature image. @param document PDDocument object @param imageStream input stream containing image data @param page 1-based index of the page to calculate size for
2948 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print @param scaling rendering scale @param showPageBorder whether to display page borders
2949 Writes default appearance settings to a PDAppearanceContentStream. @param contents content stream to write to @param zeroFontSize fallback font size when default is zero
2950 Loads and parses a PDF document from the given byte array. @param input PDF data as a byte array
2951 Retrieves raw XFA bytes, handling split resources. @return byte array or empty if not found
2952 Initializes Type 7 Shading Context with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation
2953 Initializes Type 6 Shading Context with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation
2954 Appends a form as an optional content group (layer) to the specified PDF page. @param targetPage the PDF page where the form will be appended @param form the form to be appended @param transform the AffineTransform object containing transformation parameters @param layerName the name of the optional content group (layer) @return the created PDOptionalContentGroup instance
2955 Initializes an instance of PDICCBased from a COSArray containing ICC profile data. @param iccArray COSArray object holding the ICC profile
2956 Performs interpolation on input data by recursively calculating sample values based on provided coordinates and step indices. @param coord array of float values representing the current coordinate vector @param step integer value indicating the current step index @return float[] array of interpolated sample values or null if not initialized
2957 Retrieves rich text value from inheritable attribute.
2958 Writes the current field's XML representation to the specified writer. @param output target output stream for XML data
2959 Retrieves rich contents from annotation dictionary. @return string representation of rich contents or empty string if not found
2960 Checks if XFA form is dynamic. @return true if XFA form exists and has no fields, false otherwise
2961 Retrieves a FontBoxFont object for the specified base font and PDFontDescriptor. If the exact font is not found, attempts to find a fallback font using the provided descriptor. @param baseFont unique PostScript font identifier @param fontDescriptor the descriptor containing font information @return FontMapping<FontBoxFont> object or null if not found
2962 Retrieves TrueType font by base font name and PDFontDescriptor. @param baseFont the base font to map @param fontDescriptor the descriptor containing font information @return FontMapping object with TrueType font and fallback status
2963 Checks if the font is symbolic. @return true if symbolic, false or null otherwise
2964 Reads and initializes font encoding. @throws IOException if an I/O error occurs
2965 Calculates the font size for a given PDFont object and PDRectangle content area. @param font PDFont object defining font characteristics @param contentRect PDRectangle representing the content area dimensions @return calculated font size or default value if not applicable
2966 Initializes a new instance of the class with text markup annotation coordinates from given XML element. @param element XML element containing 'coords' attribute
2967 Initializes a PDFunctionType4 instance from a COSBase function stream. @param functionStream input PDF function stream
2968 Initializes an FDFAnnotationHighlight instance from the given XML element. @param element XML element containing 'coords' attribute
2969 Loads PDF document from file. @param file input file containing the PDF @return loaded PDDocument object or null if failed
2970 Saves the PDF document to the specified output stream with optional compression. Overwrites existing file if it exists and has non-zero length, producing a corrupted file if also being read from. @param file File object representing the output stream @param compressParameters CompressParameters object for incremental updates and compression @throws IOException if the document has been closed or another error occurs during saving
2971 Retrieves the page format for a given PDF document page index. @param pageIndex 1-based index of the page to retrieve @return PageFormat object containing page properties and orientation
2972 Loads and parses a PDF document from the specified file. @param file input file @param password encryption password (optional)
2973 Processes annotations on the given page by cloning them and updating their references. @param imported the PDPage to process @throws IOException if an error occurs while processing annotations
2974 Saves the PDF document to the specified output stream with default compression. @param output OutputStream to write data to
2975 Returns normal appearance of an annotation as content stream.
2976 Opens this outline node, switching its count and updating parent if necessary. @param none
2977 Closes the current node and updates its parent. @param none
2978 Retrieves the first page's layout by creating a LayoutPage instance. @param doc PDDocument containing the PDF file
2979 Renders a glyph from the specified font using the given rendering matrix and displacement. @param textRenderingMatrix current transformation matrix for text rendering @param font font to render from @param code Unicode character code point of the glyph to render @param displacement vector offset for glyph positioning
2980 Clones the structure tree from a source document to a destination document. @param destinationDocument The target PDF document where the cloned structure will be stored
2981 Updates structural parent entries for a given PDF page. @param page the PDPage object to update @param structParentOffset offset value to apply to structural parents
2982 Writes the compressed body of a PDF document. @param document COSDocument instance to be written
2983 Imports a page from the given PDF document as a form XObject. @param sourceDoc the source PDDocument to import from @param pageNumber 1-based index of the page to retrieve and import @return PDFormXObject representing the imported page, or null if import fails
2984 Exports the interactive form fields to a Form Data Format (FDF) document. @return FDFDocument object representing the exported form data
2985 Initializes a PDType1FontEmbedder instance by embedding the given Type 1 font into the specified PDF document. @param doc the target PDDocument @param dict the COSDictionary to store font-related data @param pfbStream the input stream containing the Type 1 font data @param encoding the character encoding used in the current context (null if not provided)
2986 Initializes the TrueTypeEmbedder object with a PDDocument and COSDictionary, creating a font descriptor based on the provided TrueTypeFont. @param document parent PDDocument @param dict COSDictionary to store font information @param ttf TrueTypeFont for which to create the descriptor @param embedSubset whether to subset or fully embed the font @throws IOException if embedding is not permitted or unsupported
2987 Performs interpolation on input data from current state. @return float[] array of interpolated sample values or null if not initialized
2988 Extracts the soft-matte image from a PDImageXObject. @param softMask input image object @return float array representing the soft-matte image, or null if invalid
2989 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
2990 Retrieves the parsed XFA document. @return Document object or null if not found
2991 Initializes a PDType1Font object from an embedded Type 1 font. @param doc PDDocument instance @param pfbIn input stream for the font binary data @param encoding font encoding (optional, will be retrieved if null)
2992 Initializes a new instance of the PDVisibleSignDesigner class with a digital signature's image. @param documentSource input stream to read from @param image BufferedImage object representing the signature @param page 1-based index of the page to calculate dimensions for
2993 Creates a PDFunction instance from a COSBase object. @param function input PDF function stream @return PDFunction object or throws an IOException if invalid
2994 Checks if the font is symbolic. @return true if symbolic, false otherwise
2995 Checks if XFA form in the given PDF AcroForm is dynamic. @param acroForm PDF AcroForm object @return true if XFA form exists and has no fields, false otherwise
2996 Initializes a new instance of the FDFDictionary class from an XML Element, parsing and setting up form data format (FDF) document properties. @param fdfXML XML element containing FDF document data
2997 Creates a PDImageXObject instance from the given BufferedImage. Tries to encode the image with predictor encoder if enabled. If encoding fails or not possible, creates an 8-bit sRGB image. @param document PDDocument object @param image input BufferedImage to convert @return Prepared PDImageXObject instance
2998 Processes a given PDF page, importing its content and annotations into the current document. @param page PDPage object containing the source page to be processed @throws IOException if an error occurs while processing annotations
2999 Initializes a PDTrueTypeFontEmbedder object with a PDDocument and COSDictionary, creating a TrueType font descriptor based on the provided TrueTypeFont. @param document parent PDDocument @param dict COSDictionary to store font information @param ttf TrueTypeFont for which to create the descriptor @param encoding font encoding
3000 Initializes a PDCIDFontType2Embedder instance with the specified parameters. @param document the PDF document to embed the font in @param dict COSDictionary representing the font's metadata @param ttf TrueTypeFont data for embedding @param embedSubset whether to embed the subset of glyphs only @param parent PDType0Font parent font (if any) @param vertical whether to enable vertical text support
3001 Initializes a PDFont instance from a COSDictionary object. @param fontDictionary the COS dictionary representing the font
3002 Creates a PDICCBased instance from the given ICC-based color space array and resources. @param iccArray COSArray object containing the ICC profile data @param resources PDResources object to retrieve resource cache (optional) @return newly created or retrieved PDICCBased instance
3003 Initializes a PDFPrintable instance with rendering options and settings. @param document PDDocument to print @param scaling rendering scale
3004 Draws a PDF page onto the specified Graphics2D context. @param g Graphics2D context to render into @param pageSize dimensions of the page being drawn (width, height) @throws IOException if an I/O error occurs during rendering
3005 Builds a PDF document based on the provided PDVisibleSignDesigner properties. @param properties the underlying COSDocument object @return InputStream containing the visual signature data
3006 Saves the PDF document to the specified output stream with default compression. @param file File object representing the output stream
3007 Saves the PDF document to the specified file with optional compression. @param fileName unique file identifier @param compressParameters CompressParameters object for incremental updates and compression
3008 Inserts generated appearance for a specified form field widget into the provided content stream. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing appearance settings @param output OutputStream to write the generated appearance to @throws IOException if an error occurs while writing to the output stream
3009 Imports a Field from an FDF document. @param fdfField the FDFField to import @throws IOException if there is an error importing the field
3010 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3011 Initializes a PDVisibleSignDesigner instance with the given PDF source and digital signature image. @param documentSource input stream to read from @param imageStream input stream containing image data @param page 1-based index of the page to calculate
3012 Draws an image at specified coordinates with default dimensions (image width and height). @param image the image to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3013 Initializes a new instance of the FieldIterator, populating its queue with all fields from the provided PDAcroForm. @param form the AcroForm document to traverse
3014 Loads PDF document from file. @param file input file containing the PDF
3015 Initializes an FDFCatalog instance from an XML Element. @param element XML element containing FDF document data
3016 Constructs a PDTrueTypeFont object. @param document parent PDDocument @param ttf TrueTypeFont for which to create the descriptor @param encoding font encoding @param closeTTF whether to close the TTF resource
3017 Initializes a PDType0Font instance with the specified parameters. @param document the PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only @param closeTTF whether to close the TTF after initialization @param vertical whether to enable vertical text support
3018 Initializes a new instance of the PDType0Font class from a given COS dictionary. @param fontDictionary COS dictionary containing font metadata @throws IOException if missing required font information or invalid encoding
3019 Initializes a PDSimpleFont instance from a COSDictionary.
3020 Initializes a PDType1Font object from an embedded Type 1 font. @param doc PDDocument instance @param pfbIn input stream for the font binary data
3021 Initializes a new instance of PDVisibleSignDesigner with digital signature image from input stream. @param filename input file containing the PDF @param page 1-based index of the page to calculate size and rotation for @throws IOException if an I/O error occurs while reading the file or image stream
3022 Initializes a new instance of the PDVisibleSignDesigner class with a digital signature's image and calculates the size and rotation of a PDF page from file. @param filename input file containing the PDF @param page 1-based index of the page to calculate
3023 Renders a PDF page into an image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image @param imageType desired type of the resulting image @param destination output destination for the rendered image @return the rendered image as a BufferedImage object, or throws an IOException if rendering fails due to size constraints.
3024 Processes pages from the source document within a specified page range. @throws IOException if an error occurs while processing annotations
3025 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @param destination RenderDestination object
3026 Initializes a PDFPrintable instance with rendering options and settings. @param document PDDocument to print
3027 Returns an iterator over all form fields in the associated PDAcroForm. @return FieldIterator instance to traverse the form fields
3028 Saves the PDF document to the specified file name. @param fileName unique file identifier
3029 Builds a PDF signature by creating a template, building the PDF, and setting the visible signature content.
3030 Creates a PDImageXObject from the specified file. @param file File containing image data @param doc PDDocument object @return PDImageXObject representation of the image or null if creation fails
3031 Creates a PDImageXObject instance from a file based on its extension. @param file input file to be processed @param doc PDDocument object @return Prepared PDImageXObject instance or throws an exception if image type is not supported
3032 Retrieves the tint transformation function. @return PDFunction object representing tint transformation or throws an IOException if invalid
3033 Initializes a PDDeviceN instance with DeviceN color space data and resources. @param deviceN COSArray containing DeviceN color space data @param resources associated PDF resources
3034 Initializes a new instance of PDSeparation with color separation and resources. @param separation COSArray containing the color separation data @param resources PDResources object providing additional context
3035 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
3036 Retrieves the PDFunction[] array associated with this shading object. @return An array of PDFunction objects representing the functions in this shading, or null if not initialized
3037 Retrieves the PDF function associated with this shading object. @return PDFunction object or throws an IOException if invalid
3038 Evaluates a Type 3 function based on input value, selecting an appropriate child function and applying interpolation as needed. @param input array of input values (typically containing a single float) @return array of output values or throws IOException if partition not found
3039 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3040 Fetches a BufferedImage representation of the image within the specified region, applying color key mask if provided and handling clipping and subsampling. @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor @return BufferedImage object or null if conversion fails
3041 Constructs a PDIndexed object from an indexed color space array and resources. @param indexedArray COSArray containing the indexed color space data @param resources PDResources object for resource management
3042 Evaluates the function using linear interpolation based on a set of sample points. @param input array of input values @return array of output values
3043 Retrieves the transfer function associated with this soft mask. @return PDFunction object or null if not found
3044 Retrieves the default font used for rendering PDF content.
3045 Loads a Type 0 font from the specified TrueTypeFont object into the given PDF document. @param doc the PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only
3046 Initializes a PDTrueTypeFont instance from a COSDictionary object. @param fontDictionary the dictionary containing font metadata
3047 Initializes a new instance of the PDType1CFont class from a COSDictionary object. @param fontDictionary the COSDictionary object representing the Type 1C font @throws IOException if an error occurs while reading or parsing the font data
3048 Initializes a new instance of the PDType1Font class from a COSDictionary object. @param fontDictionary COS dictionary containing font information @throws IOException if an error occurs while reading the embedded Type1 font
3049 Initializes a Type 3 font from a dictionary and a resource cache. @param fontDictionary COS dictionary containing font data @param resourceCache Resource cache for managing font resources
3050 Loads a Type 0 font from the specified RandomAccessRead source. @param doc the PDF document to embed the font in @param randomAccessRead input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only @param vertical whether to enable vertical text support
3051 Loads a vertical Type 0 font from the specified TrueType Font and PDDocument. @param doc PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only
3052 Loads a TrueType font into a PDF document. @param doc parent PDDocument @param ttf TrueTypeFont to load @param encoding font encoding
3053 Loads a TrueType font from the given PDDocument and RandomAccessRead. @param doc parent PDDocument @param randomAccessRead input data source @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3054 Initializes an FDFDocument instance from a given Document object. @param doc input Document object @throws IOException if the document's root element is not 'xfdf'
3055 Creates a PDImageXObject instance from a file based on its extension. @param imagePath path to the input image file @param doc PDDocument object @return Prepared PDImageXObject instance or throws an exception if image type is not supported
3056 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3057 Renders a PDF page into an image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image @param imageType desired type of the resulting image
3058 Retrieves a list of signature fields from the AcroForm. @return List<PDSignatureField> containing all signature fields or an empty list if none found
3059 Refreshes appearances of all form fields in the associated PDAcroForm.
3060 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3061 Splits a PDF document into multiple smaller documents. @param document the source PDDocument to be split @return List of resulting PDDocument objects or throws IOException if an error occurs
3062 Constructs a PDIndexed object from an indexed color space array. @param indexedArray COSArray containing the indexed color space data
3063 Evaluates the shading function for a given input. @param input float array representing the input values
3064 Fetches a BufferedImage representation of the image with default settings. @return BufferedImage object or null if conversion fails
3065 Processes a collection of PDF pages, initializing the engine and processing content streams. @param pages non-null PDPageTree object representing the page hierarchy
3066 Creates a PDColorSpace instance from various representations. @param colorSpace COSBase object representing the color space @param resources PDResources object for resource management @param wasDefault boolean indicating if default color spaces should be used
3067 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique field identifier @return PDField object or null if not found
3068 Enables or disables caching of form fields. @param cache true to cache, false to clear cached fields
3069 Returns an iterator over all form fields in this PDAcroForm. @return FieldIterator instance to traverse the form fields
3070 Renders a PDF page into an RGB image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image
3071 Renders a PDF page into an image with specified DPI. @param pageIndex the index of the page to render (1-based) @return BufferedImage object representing the rendered page
3072 Renders a PDF page into an image with specified DPI (dots per inch). @param pageIndex the index of the page to render (1-based) @param dpi desired resolution in dots per inch @param imageType desired type of the resulting image
3073 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3074 Extracts a range of pages from the PDF document. @return PDDocument object containing the extracted pages or an empty document if the range is invalid
3075 Saves the FDF document in XFDF format to the specified writer. @param output target output stream for XFDF data
3076 Renders a string of text using the current graphics state and font. @param string byte array containing the text to render @throws IOException if an I/O error occurs during rendering
3077 Loads a TrueType font from the given PDDocument and file. @param doc parent PDDocument @param file input file containing font data @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3078 Initializes a new instance of the PDMMType1Font class from a COSDictionary object. @param fontDictionary COS dictionary containing font information
3079 Loads TrueType font from given PDDocument and InputStream. @param doc parent PDDocument @param input input stream containing font data @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3080 Loads a Type 0 font from the specified PDF document and external file. @param doc the PDF document to embed the font in @param file input stream containing the Type 1 font data as an external file
3081 Loads XFDF document from given InputStream. @param input input stream containing XFDF data @return loaded FDFDocument object or null if parsing fails
3082 Loads a Type 0 font from the specified input stream. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only
3083 Loads a vertical Type 0 font from the specified file. @param doc the PDF document to embed the font in @param file input stream containing the Type 1 font data
3084 Loads a Type 0 font from the specified stream with vertical text support. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data
3085 Loads a vertical Type 0 font from the specified input stream. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only
3086 Initializes a Type 3 font from a dictionary. @param fontDictionary COS dictionary containing font data
3087 Adds a digital signature to the PDF document. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface instance for handling the signature interface @param options SignatureOptions instance providing configuration and visual signature data @throws IOException if an error occurs during the signature addition process
3088 Writes text from a PDF document to an output stream. @param doc PDDocument object containing the PDF content @param outputStream Writer instance for writing extracted text
3089 Retrieves a list of signature dictionaries from the AcroForm. @return List<PDSignature> containing all signature dictionaries or an empty list if none found
3090 Imports form fields from an FDF document. @param fdf the FDFDocument to import from
3091 Evaluates the shading function for a single input value. @param inputValue float representing the input value
3092 Draws the transparency group on the specified graphics context. @param form PDTransparencyGroup object to render @param graphics Graphics2D device for drawing @throws IOException if rendering fails
3093 Retrieves the non-stroking paint by applying a soft mask to the current paint. @return Paint object representing the visual appearance of the non-stroking color
3094 Evaluates shading function and converts input to RGB color. @throws IOException if invalid
3095 Renders a PDF page into an RGB image. @param pageIndex the index of the page to render (1-based)
3096 Loads a Type 0 font from the specified input stream into the given PDF document. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data
3097 Creates a PDFont object from a given COSDictionary and ResourceCache. @param dictionary COSDictionary containing font descriptor information @param resourceCache ResourceCache instance for accessing resources @return PDFont object or null if not found or invalid font type @throws IOException if Type 0 descendant font is not allowed
3098 Loads XFDF document from file. @param filename path to XFDF file @return loaded FDFDocument object or null if parsing fails
3099 Renders a string of text using the current graphics state and font. @param string byte array containing the text to render
3100 Loads XFDF document from given file. @param file input file containing XFDF data @return loaded FDFDocument object or null if parsing fails
3101 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3102 Renders text strings from a given COSArray, applying transformations and adjustments as needed. @param array COSArray containing text strings or transformation values @throws IOException if an I/O error occurs during rendering
3103 Adds a digital signature to the PDF document using provided PDSignature object and configuration. @param sigObject PDSignature object containing the signature data @param options SignatureOptions instance providing configuration and visual signature data
3104 Retrieves the last signature dictionary from the AcroForm. @return PDSignature instance or null if none found
3105 Saves an incremental PDF document for external signing. @param output OutputStream to write the PDF data @return ExternalSigningSupport object containing the saved document
3106 Extracts text from a PDF document. @param doc PDDocument object containing the PDF content
3107 Adds a digital signature to the PDF document with default options. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface instance for handling the signature interface
3108 Saves the FDF document in XFDF format to a specified file. @param fileName target output file for XFDF data
3109 Draws a glyph using the provided path, font, and rendering mode. @param path GeneralPath representing the glyph shape @param font PDFont object containing glyph properties @param code unique glyph identifier @param displacement Vector specifying glyph position @param at AffineTransform instance for scaling and transforming the glyph
3110 Adds a digital signature to the PDF document using provided PDSignature object and default configuration. @param sigObject PDSignature object containing the signature data
3111 Creates a PDFont object from a given COSDictionary. @param dictionary COSDictionary containing font descriptor information
3112 Retrieves a PDFont object by its name from the cache or creates it from a COSDictionary. @param name unique identifier for the font @return The PDFont object or null if not found
3113 Fills and strokes a graphical path with specified winding rule. @param windingRule one of WIND_NONZERO, WIND_EVENODD, etc.
3114 Saves FDF document in XFDF format to specified file. @param fileName target output file for XFDF data
3115 Flattens interactive form fields into the underlying PDF document. @throws IOException if an I/O error occurs
3116 Copies necessary resources to the given PDAppearanceStream. @param appearanceStream target stream for resource copying
3117 Merges two PDF documents into one. @param source The source PDF document to merge from. @param destination The destination PDF document to merge into.
3118 Converts a PNG image to a PDImageXObject. @param doc the PDDocument to store the converted image @param imageData the PNG image data to convert @return the converted PDImageXObject or null if conversion fails
3119 Retrieves the custom font for the PDF document. @return a PDFont object or null if not found
3120 Updates the appearance stream for a specified form field widget. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing appearance settings
3121 Creates a PDImageXObject instance from the given byte array. @param document PDDocument object @param byteArray image data in byte array format @param name the name of the image @param customFactory optional CustomFactory to use for unsupported file types @return the created PDImageXObject instance or null if conversion fails @throws IOException if an I/O error occurs
3122 Copies the extended graphics state from this object into the provided PDGraphicsState. @param gs target graphics state to copy into @throws IOException if an I/O error occurs during copying
3123 Processes appearance string operators for font settings. @param content PDF data as byte array
3124 Creates a PDImageXObject instance from the given byte array. @param document PDDocument object @param byteArray image data in byte array format @param name the name of the image
3125 Initializes the PDDefaultAppearanceString object with default values. @param defaultAppearance required appearance string @param defaultResources associated resources
3126 Fetches the default appearance string for interactive form text fields. @return PDDefaultAppearanceString object or null if not found
3127 Updates the appearance stream for a specified form field widget. @param apValue original field value @throws IOException if an I/O error occurs during appearance generation
3128 Initializes an instance of the class with a PDVariableText field, validating AcroForm resources and fetching its default appearance string. @param field PDVariableText object representing the interactive form text field
