1 Initializes an instance of the OperatorName class with default values.
2 Initializes an instance of the class with the given PDF stream engine context.
3 Default constructor for COSBase instances.
4 Initializes an instance of the COSUpdateState class with provided update information. @param updateInfo COSUpdateInfo object containing relevant update details
5 Initializes an instance of the class with default values.
6 Initializes a new instance of the `DecodeOptions` class with a specified source region. @param sourceRegion rectangle defining the region to be decoded from the image data
7 Initializes DecodeOptions with uniform subsampling settings. @param subsampling X and Y subsampling factors (same value)
8 Initializes an instance of the Filter class with default values.
9 Initializes the PageExtractor instance with a PDF document and page range. @param sourceDocument PDF document to extract pages from @param startPage starting page number (inclusive) @param endPage ending page number (inclusive)
10 Initializes an instance of AbstractXReference with specified reference type. @param type XReferenceType enumeration value
11 Initializes an instance of the class with a specified output stream. @param out target output stream for PDF content writing
12 Initializes resource cache creation with stable caching enabled. @param enableStableCache true to enable stable caching, false otherwise
13 Initializes an instance of the `PDDocumentCatalog` class with a given PDF document and catalog dictionary. @param doc the PDF document to manage @param rootDictionary the catalog dictionary to initialize from
14 Initializes an instance of the class with the provided PDF document metadata. @param dic COSDictionary object containing document information
15 Initializes an instance of the class with a given COSDictionary object. @param dict dictionary containing named destinations
16 Initializes an instance of the class with a given document catalog and name dictionary. @param cat Document catalog associated with this name dictionary @param names Name dictionary to be managed by this instance
17 Initializes a PDPage instance from a COSDictionary representing a PDF page. @param pageDictionary dictionary containing the page's metadata and resources
18 Initializes an instance of the PDPage class with a given COSDictionary and ResourceCache. @param pageDictionary COS dictionary representing the PDF page @param resourceCache cache for resources used by the page
19 Initializes an instance of PDDictionaryWrapper with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
20 Initializes this PDNameTreeNode instance from a COSDictionary. @param dict input dictionary containing name-value pairs
21 Initializes a new instance of the class from a COSDictionary object. @param dict PDF dictionary containing page label information
22 Initializes a PDRange instance from a COSArray object. @param range COSArray containing range data
23 Initializes a PDRange instance from a COSArray and index. @param range COSArray containing the range data @param index starting index of the range in the array
24 Initializes an instance of PDStream from a COSStream object. @param str COSStream object to be wrapped
25 Initializes an instance of PDMarkInfo with the given marking information. @param dic COSDictionary containing metadata about marking status, user properties, and suspect flags
26 Initializes a PDMarkedContentReference instance from a COSDictionary. @param dictionary COSDictionary containing marked content reference data
27 Initializes an instance of PDObjectReference with the given COSDictionary. @param theDictionary underlying PDF document structure
28 Initializes a PDStructureNode instance from a COSDictionary. @param dictionary COS representation of the structure node
29 Initializes an instance of the Revisions class with default values.
30 Initializes an instance of the class with the given COSDictionary. @param dict COSDictionary object representing the property list
31 Initializes an instance of PDBoxStyle with styling attributes from the provided COSDictionary. @param dic COSDictionary containing guideline style and configuration data
32 Initializes an instance of the AccessPermission class with default permissions.
33 Initializes an instance of the class with custom permission bits. @param permissions integer bitmask representing allowed actions
34 Initializes an instance of PDCryptFilterDictionary with a given COSDictionary. @param d input dictionary containing cryptographic filter parameters
35 Initializes an instance of the RC4Cipher class with default values.
36 Initializes an instance of the FDFAnnotation class from a COSDictionary object.
37 Initializes an instance of the FDFCatalog class with the provided COSDictionary. @param cat Form Data Format (FDF) catalog dictionary
38 Initializes an instance of the FDFDictionary class with the provided COSDictionary. @param fdfDictionary the underlying dictionary to be wrapped
39 Initializes an instance of FDFField with the given COSDictionary. @param f COSDictionary object representing the form field
40 Initializes an instance of the class with the provided COS dictionary. @param f COS dictionary containing icon fitting configurations
41 Initializes an instance of the class with the provided JavaScript data. @param javaScript COSDictionary containing JavaScript metadata
42 Initializes an instance of the class with a COS dictionary representing a named page reference. @param r COSDictionary containing page metadata
43 Initializes an instance of FDFOptionElement with a COSArray representation. @param o COSArray containing option data
44 Initializes an instance of the class with the provided COSDictionary. @param p COSDictionary containing page data
45 Initializes an instance of FDFPageInfo with the provided COSDictionary. @param p COSDictionary containing page information
46 Initializes an instance of the FDFTemplate class with the provided COSDictionary. @param t COSDictionary to be used as the template
47 Initializes a new instance of the PDFontDescriptor class with the provided font descriptor dictionary. @param desc COSDictionary object containing font descriptor information
48 Initializes an instance of the class with specified font settings. @param fs array of font properties (size and type)
49 Initializes an instance of the class with default values.
50 Initializes a PDColor instance with the specified pattern name and color space. @param patternName COSName representing the color's pattern @param colorSpace PDColorSpace associated with the color
51 Initializes PDDeviceNAttributes instance from COSDictionary. @param attributes COSDictionary containing device N attributes
52 Initializes an instance of PDDeviceNProcess with device-dependent color space attributes. @param attributes COSDictionary containing color space initialization data
53 Initializes PDGamma instance with color values from provided COSArray. @param array COSArray containing RGB color data
54 Initializes a PDTristimulus instance from a COSArray containing tristimulus values. @param array COSArray with X, Y, and Z color values
55 Initializes an instance of the class with a given COSDictionary. @param dic underlying COSDictionary structure
56 Initializes an instance of the class with the given COSDictionary. @param props dictionary containing optional content properties
57 Initializes an instance of PDAbstractPattern with a COSDictionary. @param dictionary COSDictionary containing pattern data
58 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary shading properties in PDF format
59 Initializes an instance of PDExtendedGraphicsState with a COSDictionary and ResourceCache. @param dictionary extended graphics state properties @param resourceCache associated resources for rendering
60 Initializes an instance of PDSoftMask from a COSDictionary. @param dictionary soft mask properties and resources @param resourceCache cache for accessing shared resources
61 Initializes an instance of the class with provided text content. @param text The initial paragraph text
62 Initializes a Word instance with given textual content. @param text the word's text content
63 Initializes an instance of PDAction with a COSDictionary. @param a COSDictionary containing action details
64 Private constructor to prevent instantiation of utility class.
65 Initializes an instance of PDAdditionalActions with the given action data. @param a COSDictionary containing action data
66 Initializes an instance of the class with a given PDF annotation dictionary. @param a COSDictionary representing the annotation's interactive actions
67 Initializes an instance of the class with a given PDF document catalog. @param a COSDictionary representing the document catalog
68 Initializes an instance of PDFormFieldAdditionalActions with a given COSDictionary. @param a COSDictionary containing additional actions
69 Initializes an instance of PDPageAdditionalActions with a given COSDictionary. @param a COSDictionary containing additional interactive actions
70 Initializes an instance of the class with a given COSDictionary. @param dictionary target directory representation in PDF format
71 Initializes an instance of the class with a given COSDictionary. @param dictionary underlying COSObject representing URI actions
72 Initializes an instance of PDWindowsLaunchParams with a given COSDictionary. @param p COSDictionary containing launch parameters
73 Initializes an instance of the class with a given COSDictionary. @param dict COSDictionary containing appearance characteristics
74 Initializes an instance of PDAppearanceDictionary with the given COSDictionary. @param dictionary appearance attributes to be managed.
75 Initializes an instance of PDAppearanceEntry with a given COSDictionary.
76 Initializes an instance with a given COSDictionary. @param dict the underlying dictionary to manage
77 Initializes an instance of the class from a COSDictionary object. @param dict COSDictionary containing border style properties
78 Initializes an instance with a given COSDictionary object. @param dictionary external data dictionary to be managed
79 Initializes a CloudyBorder instance with specified parameters. @param stream PDAppearanceContentStream to render the border on @param intensity visual intensity of the border (0.0 - 1.0) @param lineWidth thickness of the border lines @param rect bounding rectangle for the annotation
80 Initializes an instance of PDPropBuild with a COSDictionary. @param dict COSDictionary object for digital signature properties
81 Initializes a new instance of the class with a given dictionary. @param dict COSDictionary object representing digital signature properties
82 Initializes an instance of PDSeedValue with a COSDictionary. @param dict COSDictionary object containing seed value information
83 Initializes a PDSeedValueCertificate instance with a given COSDictionary structure. @param dict the COSDictionary to initialize from
84 Initializes an instance of the PDSeedValueMDP class with the provided COSDictionary. @param dict COSDictionary containing seed value configuration properties
85 Initializes the instance with a COSDictionary containing timestamp data. @param dict COSDictionary object holding relevant data
86 Initializes a PDSignature instance from a COSDictionary.
87 Initializes an instance of the `SignatureOptions` class with default values.
88 Initializes an instance of the class with a specified PDF template builder. @param templateBuilder PDFTemplateBuilder object used to configure PDF templates
89 Private constructor to prevent instantiation.
90 Initializes a PDField instance with the given AcroForm, field dictionary, and parent non-terminal field. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
91 Initializes an instance of the class with XFA (XML Forms Architecture) resource from COSBase. @param xfaBase COS representation of XFA resource
92 Initializes a PDMeasureDictionary instance from a COSDictionary. @param dictionary COSDictionary containing measurement data
93 Initializes an instance of the class with a given COSDictionary. @param dictionary COSDictionary containing formatting options
94 Initializes a new instance of the PDViewportDictionary class with the given COSDictionary. @param dictionary COSDictionary containing viewport settings
95 Initializes an instance of the class with a given PDF document thread. @param t COSDictionary object representing the document thread
96 Initializes a PDThreadBead instance with a given COSDictionary. @param b COSDictionary representing the bead data
97 Initializes an instance of the class with viewer preferences from a given COS dictionary. @param dic COSDictionary containing viewer preferences
98 Initializes a PageDrawerParameters instance with specified settings. @param renderer PDFRenderer object @param page PDPage object to render @param subsamplingAllowed boolean flag for subsampling permissions @param destination RenderDestination object @param renderingHints RenderingHints object @param imageDownscalingOptimizationThreshold float value for optimization threshold
99 Initializes an instance of the class with default values.
100 Initializes a default Matrix instance with identity values.
101 Initializes a Matrix instance from a float array. @param src source data
102 Initializes a Matrix instance with transformation parameters. @param a horizontal scale factor @param b shear factor (x to y) @param c translation factor (x) @param d vertical scale factor @param e shear factor (y to x) @param f translation factor (y)
103 Initializes an instance with default values.
104 Initializes an instance of the PDFStreamEngine class.
105 Registers an OperatorProcessor instance with its name. @param op processor to be registered
106 Sets the ASCII85 terminator character. @param term character to set as terminator (must be 118-126, excluding 'z')
107 Sets the number of splits at a specified page count. @param split positive integer representing total page count
108 Configures the starting page number for splitting. @param start minimum page number (must be > 0)
109 Configures the end page for splitting. @param end the desired end page
110 Sets the lenient parsing mode. @param lenient true to enable lenient parsing, false otherwise
111 Initializes CompressParameters instance with specified object stream size. @param objectStreamSize size of the PDF object stream
112 Sets the blending mode for graphics rendering. @param blendMode BlendMode enum value (e.g. Normal, Multiply)
113 Initializes a PDFieldTree instance with the given PDAcroForm. @param acroForm root form associated with the field tree
114 Returns the length of this COSStream. @return Length in bytes
115 Initializes a new instance of the PDFMergerUtility class.
116 Initializes the COSWriterObjectStream with a specified compression pool. @param compressionPool Compression pool for efficient data management
117 Initializes text clipping buffer to store individual clipping areas.
118 Adds a PDF source file to be merged. @param source PDF file to include in the merge process
119 Adds a source PDF to be merged. @param source RandomAccessRead object containing the PDF data
120 Adds a string instruction to the sequence. @param name input string value
121 Adds an instruction sequence as a child to the current sequence. @param child InstructionSequence object
122 Adds a public key recipient to the policy. @param recipient PublicKeyRecipient object
123 Adds a new text extraction region to the PDF document. @param regionName unique identifier for the region @param rect spatial bounds of the region
124 Sets the cross-reference table trailer. @param trailer COSDictionary object representing the trailer
125 Retrieves an object from the pool based on its unique identifier. @param key COSObjectKey containing the object's ID
126 Retrieves an operator object by its name from the internal collection. @param operatorName unique identifier of the operator to retrieve
127 Converts Unicode sequence to glyph name. @param unicodeSequence string containing Unicode code points
128 Retrieves and returns the current graphics state from the stack. @return GraphicsState object or null if empty
129 Restores graphics state by popping from stack. @param none
130 Returns the number of elements in the graphics stack.
131 Applies the 2x3 transformation matrix to a point. @param x input point's x-coordinate @param y input point's y-coordinate @return transformed point with new coordinates
132 Decreases the current level by 1 and logs an error if it becomes negative.
133 Adds an integer to the instruction sequence. @param value integer to be added
134 Verifies if COSStream is still open. @throws IOException if the underlying RandomAccess object has been closed
135 Disallows stream resets. @throws IOException always thrown
136 Resets internal state; unsupported operation.
137 Retrieves PDEncryption details from parsed PDF document. @return PDEncryption object or throws IOException if not yet parsed
138 Returns the access permission for the parsed document. @throws IOException if the document has not been parsed
139 Constructs an instance of InvalidPasswordException with a custom error message. @param message detailed description of password authentication failure
140 Initializes an instance of the Operator class, enforcing operators cannot start with '/'. @param aOperator operator string (must not begin with '/')
141 Returns string representation of PDF operator.
142 Returns a string representation of this COSArray object.
143 Returns a string representation of this COSObject instance.
144 Retrieves a specific filter by name from the internal filter mapping. @param filterName unique identifier of the filter to retrieve @return Filter object or null if not found, throws IOException otherwise
145 Adds a real number to the instruction sequence. @param value floating-point value to be added
146 Sets the visible digital signature's width. @param width new image width
147 Sets the signature image's height. @param height new height value
148 Calculates the length between two points. @param ps starting point @param pe ending point @return distance between points or 0 if invalid input
149 Calculates edge equation value between three points. @param p current point @param p1 first reference point @param p2 second reference point
150 Initializes a new instance of the PDMarkedContent class with the given tag and properties. @param tag COSName representing the content's semantic meaning @param properties COSDictionary containing additional metadata about the content
151 Retrieves the type of pattern represented by this PDAbstractPattern instance. @return string identifier for the pattern type (e.g. "PATTERN")
152 Retrieves the shading type as a string.
153 Retrieves the default value of this button. @return String representation of the default value or an empty string if not set
154 Unchecks the checkbox by setting its value to "Off".
155 Checks if the white point coordinates are at (1,1,1).
156 Calculates color table based on axial shading parameters. @return array of RGB values representing the color mapping
157 Computes color table for radial shading effect. @throws IOException if an I/O error occurs
158 Creates a complete code table by initializing and adding the initial values. @return Complete code table as a list of byte arrays
159 Retrieves an object from storage by its key (index). @param index unique identifier of the stored object
160 Retrieves an element from the underlying COSArrayList by its index. @param index unique identifier of the stored object
161 Returns the number of COSBase objects in the collection.
162 Returns the number of COS objects in the collection. @return Integer count of items in the collection
163 Retrieves the count of designated recipients. @return Integer count of recipients in collection
164 Checks whether the COSArray is empty.
165 Checks whether the COSArrayList is empty. @return true if no elements, false otherwise
166 Removes a public key recipient from the collection. @param recipient PublicKeyRecipient object to be removed
167 Returns an iterator over the COSBase elements in this collection. @return COSBase iterator instance
168 Returns an iterator over the collection's elements. @return Iterator instance to traverse the collection's contents
169 Returns an iterator over the collection of registered public key recipients. @return Iterator instance to traverse the recipient list.
170 Converts the COSArray to a list of COSBase objects.
171 Converts COSName objects to a list of string names.
172 Converts COSBase objects to a list of strings. @return List of string representations
173 Converts standard boolean value to COSBoolean object. @param value true or false value
174 Returns string representation of boolean value.
175 Writes boolean value to PDF output stream. @param output OutputStream for writing the boolean data
176 Writes PDF null representation to an output stream. @param output target stream
177 Writes byte array to output stream.
178 Returns a set view of all key-value pairs in this dictionary. @return Set containing COSName keys and corresponding COSBase values
179 Checks for changes in a user property entry. @param oldEntry original entry object @param newEntry updated entry object @return true if the entry has changed, false otherwise
180 Returns the number of elements in the collection. @return integer count of elements
181 Retrieves an item by its unique name. @param key identifier of the desired item
182 Returns a Set view of the keys (item names) contained in this COSDictionary.
183 Retrieves an unmodifiable collection of all COSDictionary items.
184 Adds all key-value pairs from the specified dictionary to this COSDictionary. @param dict COSDictionary containing entries to add
185 Checks if a given COSName exists in the dictionary. @param name the COSName to search for
186 Tokenizes input string on space delimiters. @param s input string to tokenize
187 Converts string representation of an integer to its numeric value. @param token string containing integer value as text
188 Returns a string representation of the function type.
189 Sets the encryption key length for PDF documents. @param l key length (must be 40, 128, or 256)
190 Sets the starting page for PDF text extraction. @param startPageValue 1-based page number (must be > 0)
191 Sets the last page to process within a PDF document. @param endPageValue 1-based index of the final page
192 Initializes a BruteForceParser instance with the specified PDF document and parser. @param cosDocument PDF document to parse @param cosParser COS parser for parsing the document's internal structure
193 Initializes an instance of the class with default configuration.
194 Initializes a new instance of the XrefTrailerResolver class.
195 Initializes PDResources instance from a COSDictionary object. @param resourceDictionary dictionary containing PDF document resources
196 Initializes PDResources instance with given dictionary and cache. @param resourceDictionary COSDictionary object for resources @param resourceCache ResourceCache object for caching resources
197 Initializes the Operators class by populating a map with predefined operator objects.
198 Initializes an instance of the PDAcroForm class. @param doc parent PDF document @param form COS dictionary representing the form to be managed
199 Returns the number of cross-reference tables in the trailer map. @return count of XREF tables
200 Retrieves an object from the pool based on its key. @param key unique identifier for the object
201 Converts string to floating-point number. @param token input string representation of a float value
202 Coerces floating-point value according to PDF specification. @param floatValue input float value
203 Calculates the text direction based on the transformation matrix. @return The direction in degrees (0-360), or 0 if unknown
204 Compares this COSFloat instance with another object for equality. @param o the object to compare with @return true if both objects represent equal floating-point values, false otherwise
205 Computes and returns the hash code for this COSFloat object. @return an integer value representing the object's identity
206 Formats the floating-point value as a string, removing trailing zeros if necessary.
207 Writes a null COS object to the output stream.
208 Initializes COSIncrement instance with update origin. @param incrementOrigin COSUpdateInfo object specifying update context
209 Initializes a PDFCloneUtility instance with a destination PDDocument. @param dest target PDDocument to which cloning and merging operations will be performed
210 Initializes the DefaultResourceCache instance with caching stability setting. @param enableStableCache true to enable stable cache, false otherwise
211 Checks if COS update state requires an update. @return true if updated, false otherwise
212 Checks if a specified COSBase object is present in the collection or has been processed. @param base target COSBase object to search for
213 Checks if a COSBase object is excluded from updates. @param base COSBase object to check @return true if excluded, false otherwise
214 Adds a COSBase object to the collection. @param object COSBase object to include
215 Adds a COSBase object to the collection of processed objects.
216 Registers TrueType font for closing. @param ttf TrueTypeFont object to close
217 Initializes ASCII85InputStream with the given InputStream.
218 Initializes a CCITTFaxDecoderStream instance with specified parameters. @param stream input stream to decode from @param columns number of image columns @param type compression type (CCITT Modified Huffman RLE, T4, or T6) @param options additional encoding options @param byteAligned whether data is byte-aligned
219 Compares this COSInteger instance with another object for equality. @param o the other object to compare
220 Returns string representation of COSInteger instance.
221 Writes COSInteger value to PDF output stream. @param output target output stream
222 Retrieves a mapped value by its associated PDF object representation. @param key unique PDF object identifier @return associated value or null if not found
223 Retrieves mapped font name by alias. @param fontName alias to look up
224 Retrieves the selected export values based on field value and On-values. @return List of selected export values
225 Checks if the COSName collection is empty. @return true if the collection contains no elements, false otherwise
226 Adds a comment to the PDF content stream. @param comment user-provided text, must not contain newline characters
227 Writes a line break to the output stream.
228 Converts a string to UTF-16BE hexadecimal representation. @param text input string @return array of hexadecimal characters or null if invalid
229 Retrieves the underlying COSBase object. @return The COSBase object or null if not dereferenced
230 Initializes COSObjectKey with object number, generation, and stream index. @param num PDF object number @param gen PDF object generation value @param index Stream index of the object
231 Computes and returns the hash code value of this COSObjectKey.
232 Retrieves the scaling factor for the X-axis. @return scale factor or the original value if no rotation is applied
233 Calculates the Y-axis scaling factor. @return float scaling factor or single[4] if no scaling
234 Initializes an instance of the class with default settings and an output stream.
235 Initializes an instance with the given output stream. @param out OutputStream to write data to
236 Initializes an instance of the class with specified output stream and writing position. @param out OutputStream to write data to @param position initial writing position in bytes
237 Returns a copy of the internal byte array.
238 Writes existing PDF and incremental updates to output stream.
239 Returns the ASCII representation of the underlying byte array.
240 Checks if the document update state is accepting updates. @return true if updating is allowed, false otherwise
241 Converts byte array to string using the PDFDocEncoding mapping. @param bytes input byte array
242 Reads and parses a single operator from the input stream. @throws IOException if an I/O error occurs during parsing
243 Converts a string to byte array representation using the UNI_TO_CODE mapping. @param text input string to be converted @return byte array containing encoded characters
244 Checks if a specified character exists in the encoding mapping. @param character the character to search for @return true if character is present, false otherwise
245 Checks if specified object exists in actual map. @param key the object to search for
246 Checks if a specified font name exists in the alias collection. @param fontName the font name to search for
247 Returns an unmodifiable map of code-to-name associations. @return Unmodifiable map with font codes as keys and names as values
248 Returns an unmodifiable map of name-to-code associations. @return A read-only view of inverted mapping
249 Prevents setting need-to-be-updated flag on an unmodifiable COS dictionary.
250 Reads a single ASCII85 encoded byte from the input stream. @throws IOException if an I/O error occurs or the end of stream is reached
251 Closes the ASCII85InputStream, releasing system resources and resetting internal state.
252 Writes a single byte to the ASCII85 stream, initiating encoding when the input buffer is full. @throws IOException if an I/O error occurs
253 Flushes buffered output to the underlying stream, performing ASCII85 encoding calculation and writing data. @throws IOException if an I/O error occurs
254 Prepares user password for encryption by padding or truncating it to match a fixed length. @param password input byte array @return padded byte array
255 Closes the content stream, logging a warning if in text mode and endText() was not called.
256 Imports XMP metadata from a byte array. @param xmp byte array containing XMP data
257 Determines if splitting should occur at a given page number. @param pageNumber target page to evaluate for splitting
258 Sets the source region, but this instance is immutable and cannot be modified.
259 Sets subsampling factor along X-axis. This operation is unsupported as this class enforces immutability.
260 Sets subsampling Y value; always throws an exception due to immutability.
261 Sets subsampling offset X, but this instance is immutable and cannot be modified.
262 Sets subsampling offset Y, but throws exception as this instance is immutable.
263 Encodes JPEG2000 image data from input stream to output stream. @param input input stream containing JPEG2000 image data @param encoded output stream for encoded image data @param parameters COSDictionary object with encoding parameters (not used)
264 Disallows setting upper-right Y coordinate due to immutability. @throws UnsupportedOperationException always, as the class is immutable
265 Prevents modification of upper-right X coordinate due to immutability.
266 Throws an exception when attempting to modify lower left Y-coordinate.
267 Prevents modification of lower left x-coordinate due to immutability.
268 Retrieves the text associated with the visible digital signature. @return The text string or null if not set
269 Sets the text content of the digital signature. @param signatureText the text to be displayed within the signature
270 Sets signature field value (unsupported). @throws UnsupportedOperationException when using this method
271 Retrieves the current compression level. @return Compression level between -1 and BEST_COMPRESSION (inclusive)
272 Checks if an element or value exists in the COSArrayList collection. @param o target element or value to search for
273 Initializes a FlateFilterDecoderStream instance from an input stream. Skips the zlib header.
274 Closes the underlying resource, releasing system resources. @throws IOException if termination fails
275 Sets the digital signature's image and updates its dimensions. @param image the BufferedImage object representing the signature
276 Decodes a predictor row from the given image data. @param predictor the type of prediction algorithm to use @param colors the number of color components in each pixel @param bitsPerComponent the number of bits per component @param columns the number of pixels in the row @param actline the current line of image data @param lastline the previous line of image data
277 Checks if a COSObjectKey is present in the object pool. @param key the COSObjectKey to search for @return true if key exists, false otherwise
278 Checks if an encoded font name is present in the inverted mapping. @param name the font name to search for
279 Checks if a specified font code is present in the encoding mappings. @param code the font code to search for @return true if code exists, false otherwise
280 Escapes XML special characters in the input string. @param input string to be escaped
281 Sets the bounding box of this form XObject. @param bbox The new bounding box (null to remove it)
282 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null if parsing fails
283 Closes the PDF document, releasing all associated resources and handling any exceptions. @throws IOException if an I/O error occurs during closure
284 Closes the FDFDocument instance, ensuring all intermediate I/O streams and associated COSDocuments are properly closed. @throws IOException if any I/O operation fails
285 Retrieves the underlying COSDictionary object for this PDFunction. @return COSDictionary object, either from the associated stream or dictionary
286 Initializes a PDXObject instance with the specified PDStream and subtype. @param stream underlying data stream @param subtype type of graphical object (e.g. XOBJECT)
287 Returns the underlying COSStream object. @return COSStream instance associated with this PDXObject
288 Retrieves the alternate color space metadata as a COSStream object.
289 Sets alternate color space metadata. @param metadata COSStream object containing metadata
290 Compares this PDAnnotation instance with another object for equality. @param o the object to compare with @return true if both annotations have identical COSDictionary representations, false otherwise
291 Returns a Set view of keys in this COSDictionaryMap. @return Set of unique map keys
292 Returns an unmodifiable collection of all enum constant values. @return Collection of Enum constants
293 Initializes BaseParser instance with a PDF source. @param pdfSource RandomAccessRead object representing the PDF file
294 Checks if current PDF source character is a digit.
295 Adds cross-reference table entry for the specified object key at the given offset. @param objKey COSObjectKey representing the object to be referenced @param offset long value indicating the position of the reference in the PDF document
296 Adds font encoding mapping from code to name and updates inverted map. @param code unique font code @param name corresponding font name
297 Checks if current PDF character code represents whitespace. @throws IOException if an I/O error occurs
298 Skips line breaks in PDF input, handling CR, LF, and CRLF. @param linebreak ASCII code of the potential line break character
299 Checks for end of string by examining the next bytes in the PDF source. @param bracesParameter number of opening brackets to check @return 0 if end of string is found, otherwise original parameter value
300 Checks if input character represents an EOL (End-Of-Line). @param c ASCII code of the character to check
301 Reads a string number from the PDF source, limiting to MAX_LENGTH_LONG. @throws IOException if the number is too long or an I/O error occurs
302 Decodes input data from ByteArrayOutputStream using UTF-8 or alternative character set. @param buffer ByteArrayOutputStream containing encoded data
303 Verifies the next character in the PDF source matches an expected value. @param ec expected character to match
304 Checks if the next character in the PDF source is whitespace.
305 Parses and extracts the start cross-reference (xref) value from the PDF trailer. @return The byte offset of the first object referenced by the xref or null if not found
306 Searches for the last End-Of-File (EOF) marker in the PDF data stream. @return position of the last EOF marker, or Long.MAX_VALUE if not found
307 Searches for cross-reference tables in the PDF document. @return list of offsets where xref tables are found
308 Returns the number of color components. @return 1 if function is available, or number of components from color space
309 Searches for XRef streams in the PDF data stream and returns their offsets.
310 Retrieves the cross-reference table from the resolved trailer. @return a map of COSObjectKeys to object IDs or null if not resolved
311 Fetches the offset of the 'startxref' marker in the PDF file. @throws IOException if an I/O error occurs or the marker is missing
312 Reads from the source stream until it encounters an 'endstream' marker. @param out EndstreamFilterStream output stream @return length of filtered stream
313 Initializes an instance of the ToUnicodeWriter class with default settings.
314 Sets a custom page label for the specified range starting at the given page index. @param startPage non-negative integer identifier of the first page in the range @param item PDPageLabelRange object containing the label details to be assigned
315 Adds a CID-text mapping to the internal data structure. @param cid valid character identifier (0 <= CID <= 0xFFFF) @param text non-empty Unicode string for the given CID
316 Checks if input stream contains binary data after an "EI" marker. @throws IOException if an I/O error occurs
317 Checks if next input character is whitespace or newline/return. @throws IOException if reading from source fails
318 Adds a cross-reference entry to the PDFXRefStream. @param entry XReferenceEntry object containing the new entry's key and value
319 Determines the maximum width required to display each column in the stream data. @return array of three integers representing the minimum width for each column
320 Initializes a new instance of the COSObjectPool class with the given highest cross-reference object number. @param highestXRefObjectNumber unique identifier for the PDF document's objects
321 Retrieves the first trailer from the cross-reference table. @return COSDictionary object representing the first trailer or null if empty
322 Retrieves the last cross-reference trailer. @return COSDictionary object or null if no trailers exist
323 Retrieves object numbers contained within the specified object stream. @param objstmObjNr Object stream number to search @return Set of object numbers found, or null if not resolved
324 Retrieves the numeric value of the first column in this XReference. @return Numeric value as a 64-bit integer
325 Retrieves the generation value from the referenced key. @return Generation number as a long integer
326 Returns a string representation of this free object reference.
327 Retrieves the byte offset of the referenced object's second column value.
328 Retrieves the generation value from the referenced object key. @return Generation number as a long integer
329 Returns a string representation of this cross-reference entry.
330 Retrieves the numeric value of the parent object's key. @return numeric identifier
331 Retrieves the index of the associated object stream as the third column value.
332 Returns a string representation of this ObjectStreamEntry.
333 Writes byte array to output stream. @param b data to be written @param off starting index of data in array @param len length of data to write
334 Writes a single byte to the output stream, resetting line breaks and tracking writing position. @throws IOException if an I/O error occurs
335 Writes end-of-line character, handling line breaks and updating writing position.
336 Checks if compression is enabled based on object stream size. @return true if object stream size is greater than zero, false otherwise
337 Adds an XReferenceEntry to the cross-reference table. @param entry XReferenceEntry object to be added
338 Writes a COSObjectKey reference to the specified OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing object ID and generation number
339 Retrieves the MD5 message digest instance. @return MessageDigest object for MD5 hashing
340 Retrieves a SHA-1 message digest instance.
341 Retrieves a SHA-256 message digest instance. @return MessageDigest object for SHA-256 hashing
342 Retrieves the current highest cross-reference object number from the pool.
343 Returns an unmodifiable list of prepared COS object keys. @return List of COSObjectKey objects
344 Overwrites existing font encoding mapping for the given code and updates its corresponding name. @param code unique font code identifier @param name updated name for the code
345 Removes a defined text extraction region by name. @param regionName unique identifier of the region to be removed
346 Sets the maximum number of fractional digits to display in a formatted decimal value. @param fractionDigitsNumber maximum allowed fraction digits (0-20)
347 Initializes a new PDAbstractContentStream instance with the given PDDocument, OutputStream and PDResources. Configures decimal formatting to display 4 fractional digits without grouping. @param document PDDocument object @param outputStream OutputStream for writing content @param resources PDResources object
348 Retrieves the Y-component of the vertical displacement vector for a given CID font. @param code unique identifier of the CID font
349 Returns the provided `standardValue` if not null; otherwise, returns `defaultValue`. @param standardValue the preferred value (may be null) @param defaultValue a fallback value to use when `standardValue` is null
350 Adjusts the visible sign designer's dimensions based on a percentage zoom factor. @param percent zoom factor as a percentage
351 Retrieves the width of the digital signature's image.
352 Retrieves the height of the digital signature's image.
353 Adjusts the visible sign designer's properties to accommodate rotation. @return The adjusted PDVisibleSignDesigner instance
354 Creates a new AffineTransform instance with specified matrix values. @return AffineTransform object representing the transformation
355 Encodes input string into a byte array using multi-byte encoding with 1 to 4 bytes per character. @param text input string to encode @return encoded byte array representation of the input string
356 Converts a Unicode code point to glyph name. @param codePoint unique identifier of the character
357 Applies GSUB rules to the given word and writes the resulting glyph IDs to the output stream. @param gsubWorker worker instance responsible for applying transformations @param out output stream to write transformed glyph IDs to @param font type 0 font used for encoding glyph IDs @param word input string to apply GSUB rules to @return list of glyph IDs after applying GSUB rules
358 Initializes a new PDDocument instance from a COSDocument with specified source and permissions. @param doc underlying COSDocument object @param source RandomAccessRead source for the document @param permission AccessPermission for the document
359 Initializes an instance of the class with a given COSDocument and data source. @param doc the underlying PDF document @param source the data source for the FDF document
360 Converts COSArrayList to array representation.
361 Returns index of first occurrence of specified element in this COSArrayList. @param o Object to search for
362 Compares this COSArrayList with another object for equality. @param obj the object to compare with
363 Calculates and returns the hash code based on associated COS object.
364 Returns index of last occurrence of specified element in this collection. @param o element to search for
365 Returns an iterator over this COSArrayList, with additional functionality to traverse both forward and backward. @param none @return ListIterator object or null if list is empty
366 Returns an iterator over the specified list's elements in forward order, starting at the given index. @param index the position of the first element to iterate over
367 Retrieves a sublist of elements from this list, starting at specified index and ending at specified end index. @param fromIndex inclusive start index @param toIndex exclusive end index @return List object containing subset of original list elements
368 Checks if a map or collection contains a specific value. @param value the target value to search for @return true if present, false otherwise
369 Returns an unmodifiable Set of key-value pairs in this COSDictionaryMap. @return Set of Entry objects representing the map's contents
370 Returns an unmodifiable set of alias names.
371 Returns string representation of the COSDictionaryMap object. @return formatted string description
372 Converts a COSBase object to a PDNumberTreeNode value. @param base COSBase object to convert @return converted value or throws IOException on error
373 Generates a letter label based on the given number. @param num input number
374 Returns the count of page ranges managed by this PDPageLabels instance. @return Number of page label collections
375 Retrieves page label range for given start page. @param startPage starting page index @return PDPageLabelRange object or null if not found
376 Returns a set of unique page indices.
377 Returns a copy of the dash pattern array. @return cloned array of dash lengths
378 Creates a new PDColor instance with specified components and color space. @param components array of float values representing the color @param colorSpace associated color space for the color
379 Retrieves the color components based on the associated color space. @return float[] representing the color components
380 Initializes an instance of the class with the given point and its associated color values. @param p two-dimensional point @param c array of color values
381 Returns a string representation of the FunctionType2 object, including its control points (c0 and c1) and exponent value (N).
382 Retrieves the boundaries of the shaded triangle as an array of four integers. @return int[] containing minimum and maximum X and Y coordinates
383 Retrieves and returns the top Number value from the execution stack. @return Number object or null if stack is empty
384 Removes and returns top integer value from the execution context's stack. @return int representation of the top element or null if empty
385 Removes and converts top stack element to real number. @return float value of the popped Number object or 0.0f if empty
386 Adds a boolean value to the instruction sequence. @param value boolean value to be added
387 Initializes an instance of the ExecutionContext class with a given operator set. @param operatorSet set of operators to be used in execution context
388 Returns a list of compiled patterns for matching list item expressions. @return List<Pattern> containing compiled regex patterns
389 Converts an array of objects to a comma-separated string representation. @param array input object array
390 Converts an array of floats to a comma-separated string representation. @param array input float array
391 Adds text content to PDMarkedContent's managed collection. @param text TextPosition object representing the text to be added
392 Adds a PDMarkedContent object to the managed content collection. @param markedContent content to be added
393 Adds an XObject to the contents list. @param xobject PDXObject instance to be added
394 Sets or clears permission to print PDF document. @param allowPrinting true to enable printing, false to disable
395 Enables or disables modification of the PDF document. @param allowModifications true to allow modifications, false otherwise
396 Enables or disables content extraction based on permission. @param allowExtraction true to allow, false to disallow extraction
397 Enables or disables annotation modification capability. @param allowAnnotationModification true to allow, false to disallow
398 Enables or disables filling in forms for the PDF document. @param allowFillingInForm true to allow, false to disallow
399 Enables or disables extraction for accessibility. @param allowExtraction true to allow, false to disallow
400 Sets whether the user can assemble documents. @param allowAssembly true to enable assembly, false to disable
401 Sets the permission to print faithful copies of the PDF document. @param canPrintFaithful true to allow, false to disallow faithful printing
402 Checks if print permission is granted. @return true if print bit is set, false otherwise
403 Checks if modification permission bit is set. @return true if user has modify permission, false otherwise
404 Checks if content extraction permission is enabled. @return true if bit is set, false otherwise
405 Checks if user has permission to modify annotations. @return true if permitted, false otherwise
406 Checks if filling in form permission bit is enabled. @return true if allowed, false otherwise
407 Checks if user has permission to extract content for accessibility. @return true if permitted, false otherwise
408 Checks if document assembly permission is granted. @return true if permitted, false otherwise
409 Checks if faithful printing permission bit is set. @return true if user has faithful print permission, false otherwise
410 Retrieves the private key from the keystore based on the alias or a single alias in the keystore. @throws KeyStoreException if the keystore does not contain the given alias or an algorithm error occurs
411 Retrieves a secure random number generator instance. @return SecureRandom object, potentially customized
412 Initializes the RC4 cipher with a custom encryption key. @param key byte array representing the encryption key @throws IllegalArgumentException if key length is invalid (1-32 bytes)
413 Encrypts a byte by XORing it with the current state of the RC4 cipher. @param aByte byte to encrypt @param output OutputStream to write encrypted data to
414 Combines diacritic characters in the input string according to Unicode rules. @param str input string containing potential diacritics @return normalized string with combined diacritics or original string if unchanged
415 Checks if a Unicode code point is prohibited for use in the SASL protocol. @param codepoint the Unicode code point to validate @return true if the code point is prohibited, false otherwise
416 Computes encryption version number based on key length and AES preference. @return Version number corresponding to combination of key length and AES preference
417 Returns a singleton instance of the BouncyCastleProvider. @return Provider object, initialized with default values.
418 Extracts text value from an XML element. @param node the parent XML element @return concatenated text values of all child Text nodes or empty string if none
419 Writes extracted text to an output stream. @param text formatted text to be written
420 Retrieves a predefined Character Map by name. @param cMapName unique identifier for the desired CMap @return CMap object or null if not found
421 Parses a CMap from input data. @param randomAccessRead input data to parse @return parsed CMap object or null if invalid
422 Retrieves PostScript name variants by removing hyphens. @param postScriptName original PostScript name
423 Calculates set of points that make up the line between two given coordinates. @param x0 starting point's x-coordinate @param y0 starting point's y-coordinate @param x1 ending point's x-coordinate @param y1 ending point's y-coordinate @return Set<Point> object containing calculated points or null if invalid input
424 Calculates the number of unique points in a given array. @param p array of Point2D objects
425 Stores a FontBoxFont instance in the cache by its FontInfo. @param info unique identifier for stored font @param font FontBoxFont object to be cached
426 Retrieves a FontBoxFont object from the cache based on the provided FontInfo. @param info unique font identifier
427 Adds a font substitute for a given PostScript name. @param match PostScript name to substitute @param replace replacement font to use
428 Retrieves FontInfo object by PostScript name and FontFormat. @param format FontFormat to match @param postScriptName unique PostScript font identifier @return FontInfo object or null if not found or incompatible format
429 Retrieves a list of font substitutes for the given PostScript name. @param postScriptName unique PostScript identifier
430 Retrieves the font name associated with the given code. @param code unique font code @return corresponding font name or ".notdef" if not found
431 Retrieves a 2-character string identifier for the given CID. @param cid character ID @return Type2CharString object or null if invalid
432 Converts a glyph code to a CID reference using the font's CMap. @param code glyph code @return CID reference or -1 if not found
433 Converts color components to an RGB integer value. @return the RGB integer representation of the color
434 Calculates backdrop removal by blending group and backdrop colors with specified transparency. @param groupRGB group color in RGB format @param backdropRGB backdrop color in RGB format @param shift bit shift value for color extraction @param alphaFactor transparency factor between 0 (fully opaque) and 1 (fully transparent) @return blended color value or clamped to 0-255 range
435 Retrieves a specified range of bytes from the internal byte array. @return new array with copied elements, or null if indices invalid
436 Retrieves Adobe glyph list. @return GlyphList object containing glyph information
437 Extracts and initializes the CMap table from the TrueType font.
438 Checks if TrueType font embedding is permitted based on license restrictions. @param ttf TrueTypeFont object to evaluate @return true if embedding is permitted, false otherwise
439 Checks if subsetting is permitted for a TrueType font. @param ttf TrueTypeFont object to evaluate @return true if subsetting is allowed, false otherwise
440 Converts a glyph name to its Unicode representation. @param name the glyph name to convert @return the Unicode string or null if not found
441 Creates a new PDColor instance with specified color components, pattern name, and color space. @param components array of color components @param patternName COSName representing the color's pattern @param colorSpace PDColorSpace associated with the color
442 Converts the given WritableRaster to a raw image using the specified color space. @param raster raster data @param awtColorSpace color space object @return raw image as BufferedImage object
443 Converts a WritableRaster to an RGB BufferedImage using the specified ColorSpace. @param raster the input image data @param colorSpace the color space to use for conversion @return the converted BufferedImage
444 Checks if the given ICC profile represents an sRGB color space. @param profile ICC_Profile object to check @return true if profile is for sRGB, false otherwise
445 Retrieves the color space type based on the ICC profile or alternate color space. @return ColorSpace type (e.g. RGB, CMYK) or -1 if unknown
446 Initializes a PredictorEncoder instance with the given PDF document and image data. @param document the input PDF document @param image the input image to be encoded
447 Scales an image to a specified size and type while optionally interpolating. @param image the original image @param width new width of the scaled image @param height new height of the scaled image @param type type of the scaled image (e.g. TYPE_BYTE_GRAY, TYPE_INT_RGB) @param interpolate whether to perform interpolation when scaling @return the scaled BufferedImage or null if failed
448 Returns the COS dictionary representing the inline image data.
449 Initializes patch with a 2D array of color values. @param color 2D array of color values
450 Retrieves the current clipping path, which is the intersected overall bounding box and combined areas of all individual clipping paths. @return Area object representing the combined clipping path
451 Initializes an instance of TextAttribute with a specified name. @param name unique identifier for the text attribute
452 Computes and returns a hash code based on the dictionary. @return integer hash value
453 Computes affine transformation matrix to position cloud border at (-bboxMinX, -bboxMinY). @return AffineTransform object
454 Computes parameters for a polygon segment based on intermediate and corner adjustments. @param advInterm intermediate adjustment value @param advCorner corner adjustment value @param k adjustment factor @param r radius value @param length length of the polygon segment @param array output array to store computed alpha and dx values @return number of intermediate curls in the current polygon segment or -1 if length is zero
455 Flattens an ellipse into a series of connected line segments. @param left left edge of the ellipse @param bottom bottom edge of the ellipse @param right right edge of the ellipse @param top top edge of the ellipse @return array of Point2D.Double objects representing the flattened ellipse
456 Checks if the specified GeneralPath is rectangular. A rectangle is considered rectangular if all points have the same x or y coordinate. @param path GeneralPath object to check @return true if the path represents a rectangle, false otherwise
457 Retrieves template height based on page height. @param none @return float representing the template's vertical dimension
458 Sets digital signature's x and y coordinates. @param x new x-axis position @param y new vertical position within a PDF page
459 Applies an affine transformation to the digital signature. @param affineTransform The transformation to apply
460 Ensures a PDOutlineItem has no siblings. @param node outline item to verify as single node
461 Retrieves child outline items. @return Iterable collection of PDOutlineItem objects
462 Applies rendering hints to improve PDF page drawing quality and performance.
463 Adjusts the clipping path for a given graphics context. @param linePath input clipping path to be adjusted
464 Calculates optimal subsampling for rendering a PDF image. @param pdImage input image dimensions @param at AffineTransform object @return integer value representing the best subsampling factor
465 Rounds a double to the nearest integer using ceiling rounding.
466 Calculates the X-rotation value based on the given rotation angle. @param rotation the rotation angle in degrees @return the corresponding X-rotation value or 0 if not applicable
467 Calculates the Y-coordinate of the lower-left corner after rotation. @param rotation angle of rotation (in degrees)
468 Calculates the width of a rotated text element. @param rotation angle of rotation (in degrees)
469 Writes Unicode characters from a TextPosition object to the output stream. @param text position and content of characters to be written
470 Returns text representation as Unicode string.
471 Retrieves extracted text for specified PDF region. @param regionName unique identifier of the region
472 Retrieves and writes the starting point of an article. @param isLTR whether to use left-to-right text formatting
473 Marks the end of an article in the PDF document. Writes the article's end marker to the output stream.
474 Writes configured line separator to output stream.
475 Writes custom word separator character to output stream.
476 Writes the starting offset of the current paragraph to the output stream. @throws IOException if an I/O error occurs during writing
477 Writes the start position of the current page.
478 Writes the current end-of-page marker to the output stream.
479 Handles directionality of a given string by applying BIDI rules. @param word the input string to process @return modified string with proper directionality or original string if no processing needed
480 Parses a BIDI file from an input stream, populating the MIRRORING_CHAR_MAP. @param inputStream the ASCII-encoded input stream to read from
481 Returns visually ordered Unicode representation of text. Analyzes the directionality and order of characters to ensure correct rendering. @return String representation, potentially reversed for RTL content
482 Processes a text position by iterating over each area and executing the superclass method if the position falls within an area. @param text TextPosition object to be processed
483 Checks if the text is a diacritic character. @return true if text represents a diacritic, false otherwise
484 Updates the zone ID based on the provided time zone's offset. @param tz Time zone object
485 Converts a single byte to its hexadecimal string representation.
486 Converts a byte array to its hexadecimal string representation. @param bytes input byte array @return hexadecimal string representation of the input bytes
487 Extracts two bytes from a single input byte, using hexadecimal conversion. @param b input byte @return array of two resulting bytes
488 Converts a byte array to an ASCII-compatible hexadecimal string. @param bytes input byte array @return ASCII-encoded byte array with each byte represented as two hexadecimal digits
489 Writes a single hexadecimal byte to the specified output stream. @param b input byte @param output output stream
490 Decodes a given Base64-encoded string into its original byte array. @param base64Value encoded string in Base64 format
491 Initializes the Matrix instance from an AffineTransform object. @param at AffineTransform object containing transformation parameters
492 Applies a 2D transformation to the given point using the current matrix. @param point Point2D object to transform
493 Formats a floating-point number into ASCII byte representation. @param value the number to format @param maxFractionDigits maximum allowed decimal places @param asciiBuffer buffer for ASCII output @return new offset after formatting or -1 on error
494 Retrieves the current PDFBox library version from a properties file.
495 Parses an XML document from the given input stream, with options for namespace awareness and entity reference expansion. @param is input stream containing the XML data @param nsAware true to enable namespace awareness in parsing, false otherwise @return a Document object representing the parsed XML document
496 Searches the ByteTrie for a value associated with the given byte sequence. @param bytes The input byte data to search @return The found value or null if not present
497 Constructs a new COSBoolean instance with the given boolean value. @param aValue boolean value to initialize this object with
498 Initializes a new COSName instance with the given name.
499 Ensures singleton instance of null COS representation.
500 Initializes COSString with byte array and optional hexadecimal forcing. @param bytes source byte array @param forceHex whether to force hexadecimal representation
501 Initializes an instance of the COSDictionary class.
502 Initializes a COSObject instance with a given COSBase object.
503 Initializes a COSObject instance with the provided COSBase object and ICOSParser. @param object COSBase object to be managed @param parser ICOSParser instance for parsing purposes
504 Initializes a COSObject instance with the given key and parser. @param key COSObjectKey representing the object's identifier @param parser ICOSParser used for parsing and updating the object
505 Initializes a new instance of the `DecodeOptions` class with a specified source region. @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the source region @param height height of the source region
506 Initializes a FreeXReference object with the specified key and next free object. @param key COSObjectKey representing the unique identifier @param nextFreeObject long value of the next free object
507 Creates an ObjectStreamXReference instance for a given object stream index and associated keys. @param objectStreamIndex unique index of the object stream @param key referenced object key @param object referenced object @param parentKey key of the parent object
508 Initializes resource cache creation with stable caching enabled.
509 Initializes an instance of PDDictionaryWrapper with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
510 Initializes a PDAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
511 Initializes an instance of PDUserProperty with the given COSDictionary and user attribute object. @param dictionary COSDictionary object to be wrapped @param userAttributeObject User attribute object associated with the property
512 Initializes an instance of PDOutlineNode with a given COSDictionary. @param dict COSDictionary object to be used in initialization
513 Initializes an instance of PDTransition with a given COSDictionary. @param dictionary COSDictionary object to define transition properties
514 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
515 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
516 Initializes this PDNameTreeNode instance from a COSDictionary. @param dic input dictionary containing name-value pairs
517 Initializes this PDStructureElementNameTreeNode instance from a COSDictionary. @param dic input dictionary containing structure element name-value pairs
518 Creates a child node with the given COS dictionary. @param dic COS dictionary containing tree data
519 Initializes an instance of PDMetadata from a COSStream object. @param str COSStream object containing XMP metadata
520 Initializes an instance of PDObjectStream from a COSStream object. @param str COSStream object to be wrapped
521 Initializes an instance of PDEmbeddedFile from a COSStream object. @param str COSStream object to be wrapped
522 Initializes a PDFunction instance from a COSBase object. @param function the COSBase object to initialize with
523 Initializes a PDXObject instance from a COSStream and subtype. @param stream underlying COSStream object @param subtype subtype name as COSName
524 Initializes a PDSimpleFileSpecification with a given file name. @param fileName COSString representation of the file's name
525 Initializes a PDStructureNode instance from a COSDictionary. @param dictionary COS representation of the structure node
526 Initializes a PDStructureTreeRoot instance from a COSDictionary. @param dic COS representation of the structure node
527 Initializes the decryption material with a given password. @param pwd unique password identifier
528 Initializes a new instance of the PublicKeyProtectionPolicy class.
529 Initializes protection policy settings with owner and user passwords, and associated access permissions. @param ownerPassword password for owner-level access @param userPassword password for user-level access @param permissions AccessPermission object defining document access rules
530 Initializes an instance of the SecurityHandler class with default security settings.
531 Initializes an instance of the FDFAnnotationCaret class from a COSDictionary object. @param a COSDictionary object containing annotation data
532 Initializes an instance of the FDFAnnotationCircle class from a COSDictionary object.
533 Initializes an instance of FDFAnnotationFileAttachment from a COSDictionary object. @param a COSDictionary containing file attachment annotation data
534 Initializes an instance of the FDFAnnotationFreeText class from a COSDictionary object. @param a COSDictionary containing annotation data
535 Initializes an instance of FDFAnnotationInk from a COSDictionary object. @param a COSDictionary containing ink annotation data
536 Initializes an instance of the FDFAnnotationLine class from a COSDictionary object.
537 Initializes an instance of FDFAnnotationLink from a COSDictionary object. @param a COSDictionary containing hyperlink annotation data
538 Initializes an instance of the FDFAnnotationPolygon class from a COSDictionary object.
539 Initializes an instance of FDFAnnotationPolyline from a COSDictionary object. @param a COSDictionary containing polyline annotation data
540 Initializes an instance of FDFAnnotationSound from a COSDictionary object. @param a COSDictionary containing sound annotation data
541 Initializes an instance of the FDFAnnotationSquare class from a COSDictionary object.
542 Initializes an instance of the FDFAnnotation class from a COSDictionary object.
543 Initializes an instance of FDFAnnotationText from a COSDictionary object. @param a COSDictionary object containing annotation properties
544 Initializes an instance of the FDFAnnotationTextMarkup class from a COSDictionary object.
545 Retrieves and returns the PANOSE classification data. @return PDPanoseClassification object containing extracted PANOSE data
546 Retrieves the singleton instance of the BlendComposite class with specified blend mode and alpha value. @param blendMode blending operation to apply @param constantAlpha constant alpha value for the composite (clamped to [0,1] range) @return BlendComposite instance or throws IllegalArgumentException if blendMode is null
547 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not found
548 Initializes a PDShadingPattern instance from a COSDictionary. @param resourceDictionary COSDictionary containing shading pattern data
549 Initializes a PDTilingPattern instance with provided COSDictionary and ResourceCache. @param dictionary COSDictionary containing pattern data @param resourceCache Resource cache for pattern resources
550 Initializes a PDShadingType1 instance from a COSDictionary. @param shadingDictionary PDF dictionary containing Type 1 shading properties
551 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary PDF shading properties
552 Constructs an AxialShadingPaint object with specified axial shading type and transformation matrix. @param shadingType2 Axial shading type @param matrix Transformation matrix for the shading effect
553 Constructs a new RadialShadingPaint object with radial shading and transformation matrix. @param shading Shading type for the paint @param matrix Transformation matrix for the shading
554 Initializes a new instance of Type1ShadingPaint with the given Type 1 shading and transformation matrix. @param shading Type 1 shading object to be applied @param matrix Transformation matrix for the shading
555 Constructs a new Type4ShadingPaint object with the given type 4 shading and transformation matrix. @param shading Shading object to be applied @param matrix Transformation matrix for the shading
556 Constructs a new Type5ShadingPaint object with the given Type 5 Shading and transformation matrix. @param shading Type 5 Shading object to be applied @param matrix Transformation matrix for the shading
557 Constructs a new Type6ShadingPaint object with the given type 6 shading and transformation matrix. @param shading PDShadingType6 object to be applied @param matrix Transformation matrix for the shading
558 Constructs a new Type7ShadingPaint object with the given Type 7 shading and transformation matrix. @param shading Type 7 shading object to be applied @param matrix Transformation matrix for the shading
559 Initializes an instance of PDExtendedGraphicsState from a COSDictionary. @param dictionary extended graphics state properties
560 Initializes an instance of PDSoftMask from a COSDictionary. @param dictionary soft mask properties and resources
561 Initializes PlainText instance with provided text content. @param textValue the initial paragraph text
562 Initializes an instance of PDActionEmbeddedGoTo with a COSDictionary. @param a COSDictionary containing action details
563 Initializes an instance of PDActionGoTo with a COSDictionary. @param a COSDictionary containing navigation action details
564 Initializes an instance of PDActionHide with a COSDictionary. @param a COSDictionary containing action details
565 Initializes an instance of PDActionImportData with a COSDictionary. @param a COSDictionary containing import data specifications
566 Initializes a JavaScript action within a PDF document. @param a COSDictionary containing action details
567 Initializes an instance of PDActionLaunch with a COSDictionary. @param a COSDictionary containing launch action details
568 Initializes a PDActionMovie instance from a COSDictionary. @param a COSDictionary containing movie action details
569 Initializes an instance of PDActionNamed from a COSDictionary. @param a COSDictionary containing action details
570 Initializes an instance of PDActionRemoteGoTo with a COSDictionary. @param a COSDictionary containing action details
571 Initializes an instance of PDActionResetForm with a COSDictionary. @param a COSDictionary containing action details
572 Initializes an instance of PDActionSound with a COSDictionary. @param a COSDictionary containing sound action details
573 Initializes a PDActionSubmitForm instance with action details from a COSDictionary. @param a COSDictionary containing form submission configuration
574 Initializes an instance of PDActionThread with a COSDictionary containing action details. @param a COSDictionary containing action specifics
575 Initializes an instance of PDActionURI with a COSDictionary. @param a COSDictionary containing action details
576 Initializes the PDVisibleSigBuilder instance with a newly created PDF template structure.
577 Initializes a named destination with a given identifier. @param dest COSString object representing the destination ID
578 Initializes named destination with specified identifier. @param dest COSName object representing the named destination
579 Initializes an empty named destination within the PDF framework.
580 Initializes a new PDPageDestination instance from a COSArray. @param arr COSArray containing destination data
581 Initializes a non-terminal form field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
582 Initializes a terminal field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
583 Initializes a PDMeasureDictionary instance from a COSDictionary. @param dictionary COSDictionary containing measurement data
584 Creates and returns a shallow copy of this Matrix instance.
585 Creates a scale transformation matrix instance. @param x horizontal scale factor @param y vertical scale factor
586 Retrieves a translation matrix instance with specified horizontal and vertical offsets. @param x horizontal offset @param y vertical offset
587 Returns a rotation transformation matrix instance. @param theta rotation angle in radians @param tx translation factor (x) @param ty translation factor (y) @return Matrix object representing the rotation transformation
588 Applies the transformation matrix to the given vector. @param vector input vector to transform @return transformed vector
589 Scales the vector by a given factor. @param sxy scaling factor
590 Initializes the Mac Expert Encoding table by adding all entries.
591 Initializes the MacRoman character mapping table.
592 Initializes the standard encoding table with predefined character encodings.
593 Initializes symbol encodings from a predefined table.
594 Default constructor for Type1Encoding class.
595 Initializes a new instance of Type1Encoding from the provided FontMetrics. @param fontMetrics Font metrics containing character metrics to be added
596 Initializes the WinAnsiEncoding instance with all encoding entries from the WIN_ANSI_ENCODING_TABLE. Maps unused codes to the bullet character as per PDF specification.
597 Initializes the ZapfDingbatsEncoding object by loading predefined character mappings.
598 Returns the field tree associated with this PDAcroForm instance.
599 Retrieves an object from the collection at specified index. @param index position of the object to retrieve
600 Returns the number of objects in the collection. @return count of elements in the collection
601 Retrieves revision number at specified index. @param index unique identifier of the revision to retrieve @return Revision number as integer or -1 if out of bounds
602 Parses PNG image data into a PNGConverterState object. @param imageData the PNG image data to parse @return a fully parsed PNGConverterState object or null if parsing fails
603 Retrieves a specific Encoding instance based on the provided COSName. @param name unique identifier (COSName) of the desired encoding
604 Creates a PDSoftMask instance from the provided COSBase object and ResourceCache. @param dictionary soft mask properties and resources @param resourceCache cache for accessing shared resources @return PDSoftMask object or null if invalid input
605 Retrieves the index of the selected radio button. @return Index of the selected widget, or -1 if none are selected
606 Adds a PDF source file to be merged by delegating to the overloaded addSource(File) method. @param source path to the PDF file to include in the merge process
607 Parses the cross-reference table trailer. @return true if parsing is successful, false otherwise
608 Retrieves an object from the pool based on its unique identifier. @param key COSObjectKey containing the object's ID
609 Executes the instruction sequence within a specified execution context. @param context ExecutionContext instance to manage operations and stack interactions
610 Retrieves the current transformation matrix for text rendering. @return Transformation matrix object
611 Sets the text line transformation matrix. @param value Matrix object defining text line transformation
612 Retrieves and returns the current text transformation matrix. @return Text transformation matrix
613 Sets the text transformation matrix. @param value Matrix object defining text rendering transformations
614 Transforms the given width based on the current graphics state. @param width input width to transform @return transformed width or NaN if invalid input
615 Retrieves and returns the current non-stroking color. @return PDColor object representing the non-stroking color
616 Sets the non-stroking (fill) color. @param color the PDColor object to use
617 Retrieves non-stroking color space from graphics state. @return PDColorSpace object for non-stroking operations
618 Retrieves and returns the current stroking color from the graphics state.
619 Sets the stroking color from the provided PDColor object. @param color new stroking color
620 Retrieves the current stroking color space from the graphics state. @return ColorSpace object used for stroking operations
621 Creates a raw input stream from the underlying data. @throws IOException if no data has been written or reading is attempted while writing
622 Retrieves ImageReader instance for specified format name. @param formatName specific image format name (e.g. JPEG, PNG) @param errorCause descriptive text about the image reader absence issue @return ImageReader object or null if not found @throws MissingImageReaderException if no suitable reader is found
623 Finds a raster-capable ImageReader for the specified format name. @param formatName specific image format name (e.g. JPEG, PNG) @param errorCause descriptive text about image reader absence issue @return ImageReader object or null/empty if not found @throws MissingImageReaderException if no suitable reader is found
624 Retrieves an Operator instance by name. If the operator is cached, it's returned; otherwise, a new instance is created and cached. @param operator unique identifier of the Operator to retrieve @return Operator object or null if not found (e.g., ID operators)
625 Returns a string representation of this COSArrayList object. Includes concatenated string constants and input string. @return formatted string representation
626 Checks if an edge is a line based on control points. @param ctl array of 4 Point2D objects representing the control points @return true if edge is a line, false otherwise
627 Retrieves the x-coordinate of the lower left corner of the rectangle. @return x-coordinate value as a float
628 Returns the Y-coordinate of the lower left corner. @return Y-value as a floating-point number
629 Retrieves the x-coordinate of the upper-right corner of the rectangle. @return The x-coordinate value
630 Retrieves upper-right y-coordinate from rectangle data. @return y-value of upper-right corner
631 Retrieves the font size setting. @return current font size value
632 Retrieves red color component from internal storage.
633 Retrieves gamma value from color data. @return Gamma correction factor
634 Retrieves the blue component of the gamma-corrected color. @return Blue color value (0-1.0)
635 Retrieves X tristimulus value from PDTristimulus color representation.
636 Retrieves Y tristimulus value. @return Y color component value
637 Retrieves Z tristimulus value. @return Z value as a floating-point number
638 Retrieves an integer value at the specified index or returns the default value. @param index unique identifier of the stored object @param defaultValue default integer to return if not found at the given index @return Integer value or default value if not found
639 Retrieves the name at a specified index or returns the default value. @param index index of the name to retrieve @param defaultValue default value to return if index is out of range @return String representation of the name, or default value if not found
640 Searches for the index of a given COSBase object in the collection. @param object COSBase object to search for @return Index of the object if found, -1 otherwise
641 Retrieves a list of filters associated with the COSStream. @return List<Filter> containing filter objects or an empty list if not found
642 Evaluates the exponential interpolation function by applying the given input value to the exponent. @param input array of input values
643 Retrieves filter dictionary from stream. @return List of COSName objects or an empty list if not found
644 Retrieves the list of file filters from the stream's dictionary. @return List of filter names or an empty list if not found
645 Writes a boolean value to PDF output stream. @param output OutputStream for writing the data @param cosBoolean COSBoolean object containing the boolean value
646 Writes ASCII-encoded string to output stream. @param text input string to be written
647 Notifies user attribute object of potential change based on entry comparison. @param oldEntry original entry object @param newEntry updated entry object
648 Returns the number of key-value pairs in the underlying COSDictionaryMap. @return integer count of elements
649 Retrieves a COSObject instance associated with the given key. @param key identifier of the desired item
650 Retrieves an item by its unique name, or falls back to a secondary key if the primary key is not found. @param firstKey primary identifier of the desired item @param secondKey secondary identifier to use if primary key is absent @return COSBase object representing the retrieved item, or null if both keys are invalid
651 Retrieves the number of recipients from the document's encryption settings. @return The count of recipient entries
652 Retrieves a recipient string at the specified index from the document's encryption settings. @param i index of the desired recipient in the RECIPIENTS array
653 Retrieves the direction of page transition. @return COSBase object representing the direction or default value if not set
654 Retrieves a set of metadata keys from the underlying COSDictionary.
655 Retrieves a list of attribute names from the underlying COSDictionary. @return List of attribute names (excluding 'O' key)
656 Adds trailer information from the given dictionary to the cross-reference stream. @param trailerDict dictionary containing trailer info
657 Constructs a COSDictionary instance by copying all key-value pairs from another dictionary. @param dict COSDictionary to copy entries from
658 Checks if a COSDictionary is an info dictionary. @param dictionary the COSDictionary to check
659 Checks if the PDF font descriptor dictionary contains WIDTHS or MISSING_WIDTH attributes. @param none
660 Checks if a missing width value exists in the font descriptor dictionary. @return true if missing width is present, false otherwise
661 Checks if an XFA (XML Forms Architecture) form exists in the PDF document. @return true if XFA form is present, false otherwise
662 Initializes a new instance of the XrefParser class with a COSParser object. @param cosParser COSParser instance used for parsing PDF data
663 Returns a string representation of this COSFloat object.
664 Writes PDF header to the specified output stream. @param output target output stream
665 Writes a COSArray to the output stream. @param output OutputStream instance @param cosArray COSArray object containing elements to be written
666 Returns an initialized COSIncrement instance with update origin. @param updateInfo COSUpdateInfo object specifying update context
667 Initializes a LayerUtility instance with a destination PDDocument. @param targetDoc the target document for cloning and merging operations
668 Initializes DefaultResourceCache instance with caching stability setting. @param enableStableCache true to enable stable cache, false otherwise
669 Checks if COS update state requires an update. @param base COSBase object to check @return true if updated, false otherwise
670 Writes the FDF document to an output stream. @param doc FDFDocument object to serialize
671 Writes COSInteger value to PDF output stream. @param output target output stream @param cosInteger COSInteger object to be written
672 Retrieves the object at a specified index from the collection, potentially resolving nested objects and handling nulls. @param index zero-based index of the desired object
673 Searches for the index of a given COSBase object within the collection. @param object The COSBase object to search for @return Index of the found object, or -1 if not found
674 Checks for the presence of a specific key-value pair in the dictionary. @param value target object to search for @return true if the dictionary contains the value, false otherwise
675 Retrieves the key associated with a given value. @param value The target object to search for @return The matching COSName key, or null if not found
676 Retrieves the dictionary object associated with a given key. @param key unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
677 Retrieves the linearized dictionary from the document's cross-reference table. @return A COSDictionary object representing the linearized dictionary, or null if not found
678 Closes the COSDocument and its underlying resources, ensuring proper handling of I/O streams and stream cache.
679 Accepts a COS visitor, visiting the underlying object or COSNull instance. @param visitor instance of ICOSVisitor to process this null value
680 Checks if the given COSBase value contains a self-reference. @param parent The parent object in the PDF document @param value The COSBase object to check for self-reference @return true if the value has a self-reference, false otherwise
681 Retrieves the length value from a given COSBase object. @param lengthBaseObj The COSBase object containing the length information @return A COSNumber object representing the length, or null if not found
682 Initializes a NormalXReference instance with specified byte offset, key, and object. @param byteOffset unique byte offset within the PDF document @param key COSObjectKey representing the referenced object @param object underlying COSBase object, or null if not dereferenced
683 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to retrieve the key for @return The COSObjectKey object or null if not found
684 Checks if a specified COSBase object is present in the pool. @param object the COSBase object to search for
685 Prepares a stream object for writing by adding the key and underlying COSBase to the prepared lists. @param key unique identifier for the object @param object COSBase object to prepare
686 Initializes COSObjectKey with object number and generation. @param num PDF object number @param gen PDF object generation value
687 Compares this XReferenceEntry with another based on its referenced key. @param xReferenceEntry the entry to compare with @return a negative integer if less than, zero if equal, or a positive integer if greater
688 Retrieves the X-axis scaling factor from the text matrix.
689 Returns the Y-axis scaling factor of the text matrix.
690 Creates a raw output stream for writing data. @throws IOException if an I/O error occurs
691 Initializes a new instance of the COSWriter class with the given output stream and compression parameters. @param outputStream OutputStream to write data to @param compressParameters CompressParameters object for incremental updates and compression
692 Initializes a new instance of COSWriter with specified output stream and input data. @param outputStream OutputStream to write PDF document to @param inputData RandomAccessRead containing PDF content
693 Updates document state based on provided status. @param updated true to mark as updated, false otherwise
694 Retrieves a string representation from the byte array using various encoding schemes. If the byte array starts with BOM for UTF-16BE or UTF-16LE, it is decoded accordingly; otherwise, PDFDocEncoding is used.
695 Initializes a COSString object from the given string and encoding preference. @param text the input string to be represented @param forceHex whether to use PDFDocEncoding or UTF-16BE encoding
696 Checks if the current font is a standard 14 font. @return true if the font is a standard 14 font, false otherwise
697 Reads ASCII85 encoded bytes into the provided byte array. @param data target byte array @param offset starting index in the array @param len number of bytes to read @return actual number of bytes read, or -1 if end-of-stream is reached
698 Closes the ASCII85OutputStream, releasing resources and flushing buffered output. @throws IOException if an I/O error occurs during closure
699 Reads the next byte of compressed data from the input stream. @return the read byte value or -1 if end-of-file is reached
700 Reads data from the underlying input stream and copies it to the provided buffer. @param data the buffer to read into @param offset starting position in the buffer @param length number of bytes to read @return the actual number of bytes read (or -1 if EOF)
701 Reads digital signature image from input stream. @param stream input stream containing image data
702 Encodes raw data into a compressed LZW format. @param rawData input stream containing the data to encode @param encoded output stream where the encoded data is written @param parameters COSDictionary object containing encoding parameters @throws IOException if an I/O error occurs during encoding
703 Selects the filtered image row with the lowest estimated compressed sum. @return byte array representing the chosen filtered image row
704 Retrieves the rendering state from a COSName object. @param state COSName containing rendering state
705 Retrieves the fundamental states of optional content from a COSName object. @param state COSName object representing a state
706 Closes the Overlay class's resources, releasing all associated PDF documents and overlays.
707 Initializes a PDFormXObject instance with the specified form data stream. @param stream underlying data stream for the form XObject
708 Initializes a new instance of the PDFStreamParser class with the given content stream. @param pdContentstream PDContentStream object containing the PDF data to parse
709 Initializes PDFStreamParser instance with binary PDF content. @param bytes PDF data as byte array
710 Parses a PDF object by its number, returning the COSBase instance if found. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found
711 Fetches and stores object numbers from the PDF stream. @return Map of object numbers to their offsets
712 Skips leading whitespace characters in PDF input.
713 Skips PDF line breaks (CR, LF, CRLF) and returns true if found. @throws IOException if I/O error occurs
714 Reads and returns the next line from the PDF source. @throws IOException if end-of-file or other I/O error occurs
715 Skips whitespace characters and comments in the PDF source.
716 Searches for cross-reference tables and streams in the PDF document, then finds the nearest offset to the given xref offset. @param xrefOffset unique cross-reference table identifier @return nearest offset or -1 if not found
717 Parses and extracts the PDF header. @return true if successful, false otherwise
718 Parses the FDF (Form Data Format) header. @return true if successful, false otherwise
719 Fetches and parses all objects within the PDF object stream. @return A map of COSObjectKey to COSBase, containing all parsed objects
720 Calculates the final encryption key by combining the object number and generation number with the encryption key. @param objectNumber unique identifier of the PDF document @param genNumber generation number associated with the object @return final byte array representing the calculated key
721 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object @param outputStream OutputStream for writing content
722 Initializes a new PDPageContentStream instance with the given document and appearance stream. @param doc PDDocument object @param appearance PDAppearanceStream object @param outputStream OutputStream for writing content
723 Transforms a point by applying the current graphics state transformation. @param x initial X coordinate @param y initial Y coordinate @return transformed point coordinates as a Point2D.Float object
724 Creates a context object with the pattern matrix applied and scaling removed. @param cm ColorModel @param deviceBounds Rectangle @param userBounds Rectangle2D @param xform AffineTransform @param hints RenderingHints @return PaintContext instance
725 Concatenates another transformation matrix with this matrix. @param matrix Matrix to be concatenated
726 Applies a translation transformation to the matrix. @param tx translation factor along x-axis @param ty translation factor along y-axis
727 Scales the transformation matrix by specified factors. @param sx horizontal scale factor @param sy vertical scale factor
728 Applies matrix multiplication to this and another given Matrix. @param other second Matrix instance @return resulting Matrix object
729 Creates a new PDDocument instance from underlying COS document and source.
730 Initializes a new PDDocument instance from a COSDocument with specified source. @param doc underlying COSDocument object @param source RandomAccessRead source for the document
731 Creates a security handler instance for the given protection policy. @param policy ProtectionPolicy object associated with the desired security handler @return SecurityHandler<ProtectionPolicy> instance or null if not found
732 Retrieves a security handler instance for the specified filter name. @param name unique identifier of the filter @return SecurityHandler object or null if not found
733 Sets stroking color on demand from the provided PDColor object. @param color PDColor object containing color components @return true if successful, false otherwise
734 Sets non-stroking color on demand using the provided PDColor object. @param color PDColor object containing color components
735 Checks if the user has comprehensive owner permission. @return true if all permissions are granted, false otherwise
736 Checks if any revision 3 permission bit is set. @return true if at least one revision 3 permission is enabled, false otherwise
737 Encrypts an array of bytes by writing each element individually to the specified OutputStream. @param data byte array to encrypt @param output OutputStream to write encrypted data to
738 Writes encrypted data to an output stream by breaking down the input byte array into chunks and encrypting each chunk. @param data the input byte array @param offset starting index of the input array @param len length of the input array chunk @param output OutputStream to write encrypted data to
739 Inserts a diacritic character into the text at the specified position. @param i position to insert the diacritic @param diacritic TextPosition object containing the diacritic character and its properties
740 Initializes a Line instance with two points and associated colors. @param p0 starting Point @param p1 ending Point @param c0 color at starting point (float[] RGB values) @param c1 color at ending point (float[] RGB values)
741 Creates a SoftMask instance with the given parameters. @param paint the Paint object for rendering @param mask the BufferedImage for masking @param bboxDevice the device coordinates of the bounding box @param backdropColor the background color (optional) @param transferFunction the transfer function to apply (optional)
742 Removes backdrop from the given image by blending with specified transparency. @param BufferedImage backdrop the backdrop to remove @param int offsetX the x offset for backdrop removal @param int offsetY the y offset for backdrop removal
743 Fetches and parses font metrics for the given standard font. @param fontName unique font identifier @return FontMetrics object or null if not found
744 Initializes an instance of the GlyphList class with default settings and loads glyph list data from the specified input stream. @param input InputStream containing the glyph list data @param numberOfEntries expected number of entries in the glyph list
745 Initializes a GlyphList instance with default values from an existing instance and loads glyph list data from the specified input stream. @param glyphList existing GlyphList instance to copy initial values from @param input InputStream containing additional glyph list data
746 Converts a font code to its corresponding GID (Global Identifier). @param code unique font code @return the GID value or 0 if not found
747 Retrieves the glyph name from the font, using Unicode representation if necessary. @return the glyph name or ".notdef" if not found
748 Retrieves the name of a glyph in the font, attempting to resolve alternative names and Unicode representations. @param name the glyph name to look up @return the resolved glyph name or ".notdef" if not found
749 Initializes the JPX color space with the specified AWT color space.
750 Initializes the CMYK color space instance with default values and loads the ICC profile.
751 Applies a mask to an image. @param image the original image @param mask the mask to apply @param interpolateMask whether to interpolate the mask when applying it @param isSoft whether the mask is soft or not @param matte the matte values for color correction (optional) @return the resulting masked image
752 Initializes a CubicBezierCurve instance with control points and detail level. @param ctrlPnts array of Point2D objects representing the control points @param l detail level (number of points to generate)
753 Checks if a point is contained within the shaded triangle. @param p target point to check
754 Calculates the interpolated color at a given point based on the triangle's vertices and degree of interpolation. @param p Point at which to interpolate color @return array of float colors or null if not available
755 Updates clipping path with a new GeneralPath instance. @param path the new clipping path to add
756 Updates the clipping path with a new Area instance. @param area the new clipping path to add
757 Transfers the current clipping path to the specified graphics context. @param graphics Graphics2D object to apply the clipping path to
758 Draws a tiling pattern onto the specified graphics context. @param g Graphics2D to draw on @param pattern Tiling pattern to draw @param colorSpace Color space for the pattern @param color Pattern color @param patternMatrix Transformation matrix for the pattern
759 Calculates text direction adjustment based on transformation matrix. @return The adjusted direction in degrees (0-360), or 0 if unknown
760 Initializes a TextPosition object with given parameters. @param pageRotation the rotation of the PDF page @param pageWidth and pageHeight the dimensions of the page @param textMatrix the transformation matrix for the text element @param endX and endY the coordinates of the text's lower-right corner @param maxHeight the maximum height allowed for the text @param individualWidth and spaceWidth the widths of individual characters and spaces @param unicode the Unicode representation of the text @param charCodes an array of character codes @param font the PDFont object representing the font used @param fontSize and fontSizePt the font size in points and pixels respectively
761 Calculates the Y-direction adjustment based on the text direction and rotation. @return The adjusted Y-direction value, taking into account PDFBox assumptions
762 Calculates text width using rotation. @param rotation angle of rotation (in degrees)
763 Calculates text direction adjustment width. @return The width of a rotated text element based on its direction
764 Initiates article processing with default left-to-right text formatting.
765 Writes the ending offset of the current paragraph to the output stream. @throws IOException if an I/O error occurs during writing
766 Normalizes input data to conform to expected format. Handles Unicode Alphabetic and Arabic A&B Presentation forms normalization. Removes extra characters in specific fonts and decompositions. Reverses order of decomposed Hebrew and Arabic letters. @param word input data to be normalized @return normalized data or original data if unchanged
767 Formats Calendar instance as a string. @param cal Calendar object to format
768 Converts Calendar instance to ISO8601 date string. @param cal Calendar object
769 Returns hexadecimal string representation of this COSString object's byte array.
770 Writes an external signature to the PDF document. @param cmsSignature CMS (Content-Management System) signature byte array
771 Writes the COSName object to a PDF output stream. @param output OutputStream for writing the name
772 Writes an array of hexadecimal bytes to the specified output stream. @param bytes input byte array @param output output stream
773 Parses an XML document from the given input stream without namespace awareness. @param is input stream containing the XML data
774 Detects file type by reading the first maxByteCount bytes from the input stream. @param inputStream BufferedInputStream containing file data @return FileType object representing detected file type
775 Initializes the LegacyPDFStreamEngine instance with a default graphics state.
776 Retrieves a COSName instance from cache or creates a new one if not found. @param aName unique identifier of the object to retrieve
777 Initializes COSFloat with a given floating-point value. @param aFloat the float value to represent
778 Constructs a COSFloat object from a float value and its string representation. @param aFloat the numeric value @param valueString the string equivalent of the float value
779 Parses input string as a float value, applying PDF-specific coercion rules. @param aFloat input string representation of a float value
780 Initializes COSInteger instance with given integer value and validity. @param val integer value to represent @param valid whether the value is valid or not
781 Initializes COSString with byte array and default representation. @param bytes source byte array
782 Initializes an empty COSArray instance with direct access enabled.
783 Initializes a COSStream instance with a given cache. @param streamCache RandomAccessStreamCache to store data
784 Initializes an instance of UnmodifiableCOSDictionary from a COSDictionary. @param dict the underlying dictionary to be made unmodifiable
785 Creates a default instance of DecodeResult with minimal decoding parameters.
786 Initializes an instance of the PDDocumentInformation class.
787 Initializes an instance of the PDResources class, creating a new COSDictionary for resource management.
788 Initializes an instance of PDDictionaryWrapper with a new COSDictionary.
789 Initializes an instance of the PDNameTreeNode class with a default COSDictionary node.
790 Initializes a new instance of the class from an empty PDF dictionary.
791 Initializes an instance of PDMarkInfo with a new COSDictionary.
792 Initializes an instance of the PDPropertyList class with an empty COSDictionary.
793 Initializes an instance of the PDBoxStyle class with a default COSDictionary.
794 Initializes an instance of the PDCryptFilterDictionary class.
795 Initializes an instance of the PDEncryption class with an empty COSDictionary.
796 Initializes an instance of the FDFCatalog class with an empty COSDictionary.
797 Initializes an instance of the FDFDictionary class.
798 Initializes an instance of the FDFField class.
799 Initializes an instance of FDFIconFit with default settings.
800 Initializes an instance of the FDFJavaScript class with a new COSDictionary.
801 Initializes an instance of the FDFNamedPageReference class.
802 Initializes an instance of the FDFPage class with a new COSDictionary.
803 Initializes an instance of the FDFPageInfo class with default page data.
804 Initializes an instance of the FDFTemplate class with a default COSDictionary.
805 Initializes an instance of PDDeviceNAttributes using a default COSDictionary.
806 Initializes an instance of the PDDeviceNProcess class.
807 Initializes an instance of the PDShading class.
808 Initializes an instance of PDAdditionalActions with an empty action dictionary.
809 Initializes an instance of the PDAnnotationAdditionalActions class.
810 Initializes an instance of the PDDocumentCatalogAdditionalActions class.
811 Initializes an instance of PDFormFieldAdditionalActions with an empty COSDictionary.
812 Initializes an instance of the PDPageAdditionalActions class with an empty COSDictionary.
813 Initializes an instance of the PDTargetDirectory class.
814 Initializes an instance of the PDURIDictionary class with an empty URI dictionary.
815 Initializes an instance of the PDWindowsLaunchParams class with an empty COSDictionary.
816 Initializes an instance of the PDBorderEffectDictionary class.
817 Initializes an instance of the PDBorderStyleDictionary class with a new COSDictionary object.
818 Initializes an instance of PDPropBuild, creating a new COSDictionary with direct object usage.
819 Initializes an instance of the PDPropBuildDataDict class with a new COSDictionary object. Sets the dictionary to operate in direct mode.
820 Initializes an instance of the PDSeedValueMDP class with a new COSDictionary.
821 Initializes an instance of the PDSeedValueTimeStamp class with a direct COSDictionary.
822 Initializes a PDField instance with the given AcroForm and an empty field dictionary. @param acroForm the parent AcroForm
823 Initializes an instance of the PDViewportDictionary class with an empty viewport dictionary.
824 Initializes an instance of the `PDViewerPreferences` class with default settings.
825 Initializes a COSObject instance with the given key and underlying COSBase object. @param objectKey COSObjectKey representing the object's identifier @param object COSBase object being wrapped
826 Initializes a PDDefaultAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
827 Initializes a PDUserAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
828 Initializes a PDStandardAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
829 Initializes an instance of PDOutlineNode with a given COSDictionary. @param dict COSDictionary object to be used in initialization
830 Retrieves the metadata from the underlying stream. @return PDMetadata object or null if not found
831 Retrieves XMP metadata from the image object. @return PDMetadata object or null if not found
832 Retrieves the extended object stream. @return PDObjectStream object or null if not found
833 Initializes a PDFunctionType0 instance from a COSBase object. @param function the COSBase object to initialize with
834 Initializes a PDFunctionType3 instance from a COSBase object. @param functionStream COSBase object to initialize with
835 Initializes a PDXObject instance from a PostScript COSStream. @param stream underlying COSStream object
836 Initializes a PDXObject instance from a COSStream and subtype FORM. @param stream underlying COSStream object
837 Initializes a PDXObject instance from a COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
838 Initializes an instance of the PublicKeySecurityHandler class with default security settings.
839 Initializes an instance of the SecurityHandler class with default security settings.
840 Initializes security handler with specified protection policy. @param publicKeyProtectionPolicy encryption policy settings
841 Initializes security handler with specified protection policy. @param standardProtectionPolicy encryption policy settings
842 Initializes an instance of the FDFAnnotationHighlight class from a COSDictionary object.
843 Initializes an instance of the FDFAnnotationSquiggly class from a COSDictionary object. @param a COSDictionary representing the squiggly annotation's properties
844 Initializes an instance of FDFAnnotationStrikeOut from a COSDictionary object. @param a COSDictionary object containing strikeout annotation data
845 Initializes an instance of the FDFAnnotationUnderline class from a COSDictionary object.
846 Initializes a PDTilingPattern instance from provided COSDictionary. @param dictionary COSDictionary containing pattern data
847 Initializes a PDShadingType3 instance from a COSDictionary. @param shadingDictionary PDF shading properties
848 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary shading properties in PDF format
849 Initializes a PDShading instance from a COSDictionary. @param shadingDictionary PDF shading properties
850 Initializes a new PDPageFitDestination instance from a COSArray. @param arr COSArray containing destination data
851 Initializes a new PDPageFitHeightDestination instance from a COSArray. @param arr COSArray containing destination data
852 Initializes a new PDPageFitRectangleDestination instance from a COSArray. @param arr COSArray containing destination data (left, bottom, right, top coordinates)
853 Initializes a new PDPageFitWidthDestination instance from a COSArray. @param arr COSArray containing destination data
854 Initializes a new PDPageXYZDestination instance from a COSArray. @param arr COSArray containing destination data
855 Initializes a button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
856 Initializes a digital signature field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
857 Initializes a variable text field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
858 Initializes the Mac OS Roman character mapping table.
859 Creates a Type1Encoding instance from FontBox Encoding. @param encoding FontBox Encoding object @return Type1Encoding object populated with encoding information
860 Generates a unique partial field name by iterating and appending an incrementing integer to the base "Signature" name. @return A unique partial field name.
861 Returns a string representation of the revisions collection, including all managed objects and their corresponding revision numbers.
862 Creates a PDSoftMask instance from the provided COSBase object. @param dictionary soft mask properties and resources
863 Initializes a new COSDocument instance with the specified parser. @param parser Parser instance for document parsing
864 Creates a PDMarkedContent instance based on the given tag and properties. If the tag is ARTIFACT, returns a PDArtifactMarkedContent object; otherwise, creates a standard PDMarkedContent. @param tag COSName representing the content's semantic meaning @param properties COSDictionary containing additional metadata about the content
865 Calculates and returns the width of the rectangle. @return The difference between upper-right and lower-left x-coordinates
866 Checks if the specified point (x, y) lies within this rectangle. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is contained within the rectangle, false otherwise
867 Calculates rectangle height by subtracting lower-left Y from upper-right Y. @return Height of the rectangle
868 Applies the specified transformation matrix to the rectangle's geometry and returns a new GeneralPath object. @param matrix The 2x3 transformation matrix
869 Converts the rectangle's geometry into a GeneralPath object. @return A GeneralPath representation of the rectangle
870 Returns a string representation of the rectangle in the format "[x1, y1, x2, y2]".
871 Retrieves an integer value at the specified index or returns -1 if not found. @param index unique identifier of the stored object
872 Retrieves the name at the specified index (or returns default value if not found). @param index index of the name to retrieve
873 Creates an output stream for writing data to a PDF document. @param filters optional filter list to apply during writing @return OutputStream object for writing data
874 Initializes a PDImageXObject instance with the specified PDStream and resources. @param stream underlying data stream @param resources associated PDF resources
875 Determines the suffix of the image based on its filter dictionary. @return image suffix (e.g. "png", "jpg", etc.) or null if unknown
876 Writes a float operand to the output stream. @param real the float value to write
877 Formats and writes an operand value to the output stream. @param integer the operand value to be written
878 Writes an operator string to output stream followed by a line break. @param text ASCII-encoded operator string
879 Checks if the COSDictionaryMap is empty. @return true if no key-value pairs exist, false otherwise
880 Writes a COS float object to an output stream. @param output target output stream @param cosFloat COS float object to be written
881 Returns an initialized COSIncrement instance based on update state.
882 Converts the array of COSBase objects to a float array. @return An array of floats, where each element is the value of the corresponding object in the collection, or 0 if not applicable
883 Converts the array of COSBase objects to a list of Float values. @return List of Float values representing the numeric elements in the array, or null for non-numeric elements
884 Converts the collection of COSBase objects to a list of integers. @return List of integers, or null if not all elements are convertible
885 Retrieves the minimum value of this range.
886 Retrieves the maximum value of this numerical range.
887 Retrieves the color at a specified index from the collection. @param index zero-based index of the desired object
888 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode COSBase object representing a blend mode @return BlendMode instance or NORMAL if not found
889 Retrieves colorant names from alternate color space. @return list of colorant names
890 Retrieves the alternate color space for DeviceN color management. @return PDColorSpace object or null if not initialized
891 Retrieves the colorant name from the collection. @param index zero-based index of the COLORANT_NAMES array
892 Retrieves the target page associated with this destination. @return PDPage object or null if no valid page is found
893 Retrieves the target page number from the destination's associated array. @return The zero-based page number, or -1 if not found
894 Retrieves the zoom level of the destination. @return zoom factor as a floating-point number, or -1 if invalid
895 Initializes a Matrix instance from the provided COSArray. @param array COSArray containing matrix values
896 Retrieves the dictionary object associated with either the first or second key, in that order. @param firstKey primary key to search for @param secondKey fallback key if first is not found @return The COSBase object or null if not found
897 Retrieves the dictionary object associated with a given key and returns it as a COSName. @param key unique identifier for the dictionary object @return The COSName object or null if not found or dereferenced
898 Retrieves the COSDictionary object associated with a given key. @param key unique identifier for the dictionary object @return The COSDictionary object or null if not found or dereferenced
899 Retrieves the COSStream object associated with a given key. @param key unique identifier for the dictionary object @return The COSStream object or null if not found or dereferenced
900 Retrieves the COSArray object associated with a given key. @param key unique identifier for the dictionary object
901 Retrieves the dictionary object associated with a given key, returning it as a COSName if successful. @param key unique identifier for the dictionary object @param defaultValue default value to return if retrieval fails @return The COSName object or defaultValue if not found or dereferenced
902 Retrieves the long value associated with a given key from the dictionary. If not found or dereferenced, returns the provided default value. @param key unique identifier for the dictionary object @param defaultValue default long value to return if not found @return The long value or default value
903 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object @param defaultValue default value to return if not found or null @return The float value or the default value
904 Retrieves the collection of content streams associated with this page. @return Iterator over a list of PDStream objects, or empty iterator if none found
905 Checks whether the page has content. @return true if the page contains a non-empty stream or array, false otherwise
906 Retrieves a collection of class names from the PDF document's dictionary. @return Revisions<String> object containing class names and their revision numbers
907 Retrieves the dictionary object associated with key K. @return The COSBase object or null if not found or dereferenced
908 Retrieves the value dictionary object. @return The COSBase object containing the property value or null if not found
909 Checks if metadata encryption is enabled. @return boolean indicating whether metadata is encrypted
910 Retrieves the owner encryption key. @return byte array containing the encrypted key or null if not found
911 Retrieves the user encryption key from the dictionary. @return byte array containing the user encryption key, or null if not found
912 Retrieves the permissions byte array from the dictionary object. @return The permissions byte array or null if not found
913 Retrieves the page number associated with this annotation. @return The page number as an Integer or null if not found
914 Retrieves the COSBase object associated with a given key, returning it if valid or null. @return COSBase object or null if not found or invalid
915 Retrieves the field flags as an Integer. @return Field flags value or null if not found
916 Retrieves the set field flags as an Integer. @return The COSNumber object's value or null if not found
917 Retrieves the clear flags for a field. @return The clear flag value as an Integer, or null if not found.
918 Retrieves the widget field flags as an integer value. @return The COSNumber object's int value or null if not found
919 Retrieves the set widget field flags. @return The COS integer value or null if not found
920 Retrieves the clear widget flags for a form field. @return The Integer value of the CLR_F dictionary object or null if not found
921 Retrieves the default width for a CID font. @return The default width as a float value
922 Retrieves the device-dependent color space associated with this device. @return PDColorSpace object or null if not found
923 Retrieves the PDColorSpace instance associated with the transparency group attributes. @param resources PDResources object for resource management @return PDColorSpace object or null if not found
924 Initializes a PDOptionalContentGroup instance from the provided COSDictionary. Ensures the dictionary represents an OCG (Optional Content Group). @param dict COSDictionary object to initialize the group with
925 Initializes a PDOptionalContentMembershipDictionary instance from a given COSDictionary. @param dict The dictionary object, which must be of type OCMD
926 Retrieves the overprint mode as an Integer. @return The overprint mode or null if not set
927 Retrieves the soft mask properties and resources. @return PDSoftMask object or null if not found
928 Retrieves the floating-point value associated with a given key from the dictionary. @param key unique identifier for the dictionary object
929 Retrieves the transfer dictionary object. @return The COSBase object or null if invalid
930 Retrieves the transfer function object for graphics rendering. @return The COSBase object representing the transfer function or null if invalid
931 Retrieves the backdrop color as a COSArray object. @return The COSArray representing the backdrop color, or null if not set
932 Determines the open mode for linked content in a new window. @return OpenMode enum value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE) based on dictionary object value.
933 Retrieves the 'T' dictionary object associated with the action.
934 Retrieves the open mode for launching external content in a new window. @return OpenMode value indicating whether to launch in a new window, same window, or follow user preference.
935 Determines the open mode for linked content in a new window. @return OpenMode enum value indicating whether to open in a new window, same window, or follow user preference
936 Retrieves the named destination associated with this target directory. @return PDNamedDestination object or null if not found
937 Retrieves the digital signature contents as a byte array.
938 Retrieves the XFA (XML Forms Architecture) resource from the dictionary. @return PDXFAResource object or null if not found
939 Retrieves an inheritable attribute from the field's dictionary, its parent (if exists), or the AcroForm's COS object. @param key the name of the attribute to search for
940 Retrieves the value of this PDNonTerminalField. @return The COSBase object representing the field's value
941 Retrieves the field value as a string. @return The field value or an empty string if not found
942 Retrieves the default value from the field's dictionary. @return The COSBase object representing the default value, or null if not found
943 Closes the COSDocument and underlying resources, ensuring proper I/O stream handling.
944 Clones a PDF object for new document creation. @param base the COSBase object to clone @return cloned COSBase object or original if not clonable
945 Writes a COSBase object to the output stream, handling cross-reference table updates and object serialization. @param key COSObjectKey representing the referenced object @param obj underlying COSBase object to be written
946 Retrieves the unique COSObjectKey associated with a given COSBase object. @param object the COSBase object to retrieve the key for
947 Checks if the specified COSBase object is present in the pool. @param object the COSBase object to search for
948 Creates a list of object streams by iterating over the object stream objects and initializing a new stream when necessary. @return List of COSWriterObjectStream instances
949 Retrieves a COSObjectKey from cache or creates a new one if not found. @param num PDF object number @param gen PDF object generation value @return COSObjectKey object with internal hash and ID
950 Searches for objects in the PDF data stream. @throws IOException if an I/O error occurs
951 Searches for object stream offsets in the PDF data stream. @return Map of object stream offsets to COSObjectKey objects
952 Parses the cross-reference trailer and populates the XrefTrailerResolver with object key mappings. @param resolver XrefTrailerResolver instance to store parsed data
953 Parses the cross-reference table in a PDF document. @param startByteOffset starting byte position of the cross-reference table @return true if parsing is successful, false otherwise
954 Retrieves the associated COSObjectKey for a given COSBase object. If the referenced object is not present due to a malformed PDF, a new COSObjectKey instance is created and stored in the objectKeys map. @param obj The COSBase object whose key is to be retrieved
955 Inserts or updates a COSObjectKey in the pool and associates it with a given COSBase object. @param key unique identifier @param object associated data value @return The updated COSObjectKey instance or null if not found
956 Initializes a new instance of the COSWriter class with the given output stream and default compression parameters. @param outputStream OutputStream to write data to
957 Sets COS update state based on provided flag. @param flag true to mark as updated, false otherwise
958 Marks document as updated.
959 Retrieves a string value from the collection at specified index or returns default value. @param index unique identifier of the desired object @param defaultValue default string to return if index is out of bounds @return String representation of COSString object or default value
960 Retrieves the represented name as a string from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
961 Retrieves a string representation from the dictionary object associated with the given key. @param key unique identifier for the dictionary object @return The COSString object as a string, or null if not found or dereferenced.
962 Converts a COSDictionary to a COSDictionaryMap with basic types as keys and values. @param map the COSDictionary to convert @return A COSDictionaryMap with basic types as keys and values, or null if input is null
963 Retrieves a string representation of the underlying file content.
964 Retrieves the string value of an FDF option. @return The string representation of the option's value or null if not found
965 Retrieves the default appearance string from the FDF option. @return string representation of the default appearance
966 Retrieves the represented name of a PDNamedDestination. @return string representation or null if not found
967 Retrieves a list of string items from the given COSBase object, considering nested arrays and single-element arrays as pairs. @param items COSBase object containing key-value pairs @param pairIdx index into two-element arrays (0 or 1)
968 Retrieves export values for the button, returning them as a list of strings. @return List of string representations or an empty list if no values are found
969 Retrieves the string representation for a given COSName. @param name unique identifier for the dictionary object
970 Retrieves the default appearance string from a PDF form. @return The DA attribute as a string, or null if not set
971 Initializes a COSString object from the given string. @param text input string to be represented
972 Initializes a new instance of PDVisibleSignDesigner with digital signature image from input stream. @param imageStream input stream containing image data
973 Reads digital signature image from file at specified path. @param path file system path to image data
974 Initializes a PDTransparencyGroup instance with the specified form data stream. @param stream underlying data stream for the transparency group
975 Parses a COSDictionary from the PDF source. @param isDirect whether to parse directly or not @return parsed COSDictionary object
976 Reads a string from the PDF source, skipping whitespace and handling name endings.
977 Reads an expected string from the PDF source, skipping spaces if requested. @param expectedString char array of the expected string @param skipSpaces whether to skip whitespace characters in the input
978 Reads a string of specified length from the PDF source, skipping whitespace and invalid characters. @param length desired length of the string @return read string or empty string if not enough data is available
979 Reads an integer value from the PDF source. @throws IOException if the input is not a valid integer
980 Reads and parses a long integer value from the PDF source. @throws IOException if the input is too long or an I/O error occurs
981 Calculates the fixed offset for a cross-reference table or stream. @param objectOffset unique object identifier @return fixed offset or 0 if not found
982 Computes user password for PDF document based on provided parameters. @param password user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return user password as a byte array
983 Computes and encodes owner password with RC4 encryption. @param ownerPassword input byte array @param userPassword input byte array (padded or truncated) @param encRevision document encryption revision @param length desired key length @return encoded byte array
984 Applies rotation transformation to this matrix. @param theta rotation angle in radians
985 Applies a translation adjustment to the text rendering matrix. @param tx translation factor along x-axis @param ty translation factor along y-axis
986 Applies a translation transformation to the matrix using the provided Vector. @param vector Translation factors along x and y axes
987 Concatenates two transformation matrices by multiplying 'a' with 'b'. @param a first Matrix instance @param b second Matrix instance
988 Initializes a new PDDocument instance from a COSDocument with default source. @param doc underlying COSDocument object
989 Processes a token from the input stream and updates the instruction sequence. @param text the current token to process
990 Retrieves current access permission for the PDF document. @return AccessPermission instance with owner permissions enabled
991 Computes the revision number based on the given PDF document version. @param version document version @return revision number (integer)
992 Encrypts or decrypts data using AES algorithm. @param finalKey encryption/decryption key @param data InputStream containing data to be encrypted or decrypted @param output OutputStream to write the encrypted or decrypted data @param decrypt true for decryption, false for encryption
993 Encrypts or decrypts data using AES256 algorithm. @param data InputStream containing the data to encrypt/decrypt @param output OutputStream to write the encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
994 Encrypts data using RC4 algorithm with a custom key. @param finalKey encryption key (1-32 bytes) @param input byte array to encrypt @param output OutputStream to write encrypted data to
995 Writes encrypted content from an InputStream to an OutputStream. @param data InputStream containing the plain bytes to encrypt @param output OutputStream to write the encrypted data to
996 Prepares a query string for SASL use. @param str input query string
997 Prepares a stored string for use in the SASL protocol with strict validation. @param str input string to prepare
998 Retrieves the cached FontBoxFont instance or loads and caches a new one from file based on its format. @return FontBoxFont object
999 Saves font information to a disk cache.
1000 Sets the font provider and updates font mapping. @param fontProvider FontProvider object containing font information
1001 Initializes a ShadedTriangle object with vertices and colors. @param p array of Point2D objects representing the triangle's corners @param c 2D array of float values representing the color at each vertex
1002 Writes the CMap data to a specified output stream. @param out OutputStream instance to write to
1003 Loads a glyph list from the specified file. @param filename name of the glyph list file @param numberOfEntries number of entries in the glyph list @return loaded GlyphList object
1004 Retrieves a mapping of GIDs to font codes. @return A map where keys are GIDs and values are corresponding font codes
1005 Initializes an instance of PDICCBased from a COSArray containing ICC profile data. @param iccArray COSArray object holding the ICC profile
1006 Resets text clipping by applying buffered clip as one area and clearing clippings.
1007 Updates the current clipping path based on graphics context.
1008 Retrieves the input stream for signing, requiring prepared PDF. @throws IOException if an I/O error occurs
1009 Merges a diacritic character into the text, adjusting positions accordingly. @param diacritic TextPosition object containing the diacritic character and its properties
1010 Checks if the provided TextPosition overlaps with the current TextPosition. @param tp2 TextPosition to check for overlap @return True if overlapping, false otherwise
1011 Checks if the current text position completely contains another. @param tp2 TextPosition to check against @return true if contained, false otherwise
1012 Writes paragraph separator to output stream.
1013 Writes a COSName object to an output stream. @param output OutputStream for writing the name @param cosName COSName object to be written
1014 Writes an operand (COSName object) to the PDF output stream. @param name Operand value as a COSName object
1015 Writes a string to the specified output stream. If the string contains non-ASCII characters or EOL markers, writes it as a hex string; otherwise, writes it as an ASCII string. @param bytes input byte array @param forceHex forces writing of hex string regardless of content @param output output stream to write to
1016 Initializes a PDFMarkedContentExtractor instance with the given encoding. Adds necessary operators for managing marked content sequences and elements.
1017 Initializes the PDFTextStripper instance with default marked content sequences.
1018 Retrieves the dictionary object associated with a given string key. @param key unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
1019 Retrieves an item by its unique string key. @param key identifier of the desired item
1020 Checks if a given PDF object name exists in the dictionary. @param name unique identifier of the object to search for
1021 Retrieves a specific filter by name from the internal filter mapping. @param filterName unique identifier of the filter to retrieve
1022 Parses a COSName from the PDF source. @return COSName instance or null if not found
1023 Initializes a PDColor instance from the given COSArray and color space. @param array COSArray containing color components (optional) or only pattern name @param colorSpace associated color space for the color representation
1024 Retrieves a pre-constructed or newly created COSInteger instance for the given integer value within the specified range. @param val integer value to represent
1025 Parses a hexadecimal string into a byte array. @param hex input hexadecimal string @return COSString object containing the parsed byte data or null if invalid
1026 Initializes a new instance of the COSArrayList class.
1027 Initializes a new instance of the class with associated COSDictionary and key. @param dictionary underlying COSDictionary object @param dictionaryKey unique identifier for this collection in the dictionary
1028 Initializes an empty page destination with direct access enabled.
1029 Initializes PDRectangle with coordinates and dimensions. @param x left X-coordinate @param y top Y-coordinate @param width rectangle width @param height rectangle height
1030 Initializes the PDRectangle object with a bounding box. @param box BoundingBox object containing rectangle's coordinates
1031 Creates a new COSStream instance and adds it to the collection for later closure.
1032 Default constructor to initialize COSStream with no cache.
1033 Initializes a COSStream instance with a given cache and RandomAccessReadView. @param streamCache RandomAccessStreamCache to store data @param randomAccessReadView view of the underlying data stream
1034 Returns an unmodifiable dictionary view of this COSDictionary.
1035 Retrieves the last decoded result from the collection. @return DecodeResult object or default instance if empty
1036 Retrieves and returns the resources associated with this form XObject. @return PDResources object or a new empty instance if none exist, or null if not found
1037 Default constructor for PDAttributeObject instance creation.
1038 Initializes a new instance of PDUserProperty with the specified attribute object. @param userAttributeObject The user-defined attribute to be represented
1039 Initializes an empty outline node instance.
1040 Initializes an empty instance of the PDDestinationNameTreeNode class.
1041 Initializes a PDEmbeddedFilesNameTreeNode instance with default settings.
1042 Initializes an instance of the PDJavascriptNameTreeNode class with default settings.
1043 Initializes a new instance of the PDStructureElementNameTreeNode class with default settings.
1044 Initializes a PDNonTerminalField instance with the given AcroForm. @param acroForm parent AcroForm
1045 Initializes a PDField instance with the given AcroForm. @param acroForm the parent AcroForm
1046 Initializes a PDStandardAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
1047 Initializes a PDListAttributeObject instance from a COSDictionary. @param dictionary COSDictionary object to be wrapped
1048 Initializes a PDPrintFieldAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
1049 Initializes a PDTableAttributeObject instance with a given COSDictionary. @param dictionary COSDictionary object to be wrapped
1050 Initializes a PDAppearanceStream instance from a given COSStream and subtype FORM. @param stream underlying COSStream object
1051 Initializes a PDTransparencyGroup instance from a COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
1052 Processes a TrueType Collection (TTC) font file. @param ttcFile the TTC file to process
1053 Adds a TrueType font to the list of fonts. @param fontHeaders font headers containing metadata about the font @param file font file to be added @param hash unique identifier for the font
1054 Adds a Type1 font from the specified PFB file. @param pfbFile the PFB file to add
1055 Creates a PDDestination object from the given COSBase representation. @param base COSBase object representing the destination @return PDDestination object or null if not supported
1056 Initializes a checkbox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1057 Initializes a button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1058 Initializes a radio button instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1059 Initializes a PDChoice instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1060 Initializes a variable text field instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1061 Saves the current graphics state by cloning and pushing it onto the stack. @param none
1062 Saves the current graphics stack and replaces it with a single-element copy of its top state. @return The original graphics stack
1063 Initializes a new COSDocument instance with an in-memory stream cache.
1064 Returns a string representation of the COSDictionary instance.
1065 Updates clipping path with a new rectangle. @param rectangle the PDRectangle to use for clipping
1066 Calculates the transformed bounding box of a form's appearance stream. @param appearanceStream The PDAppearanceStream object containing transformation matrix and bounds
1067 Initializes PDGraphicsState with a clipping path from a given page rectangle.
1068 Retrieves the left position from the internal array. @param none
1069 Retrieves the left coordinate of the target rectangle.
1070 Retrieves the bottom coordinate of the targeted rectangle.
1071 Retrieves the right coordinate of the rectangle. @return right edge value or -1 if not found
1072 Retrieves the top coordinate of the rectangle.
1073 Retrieves the top integer value from the stored object at index 2. @param none @return top integer value or -1 if not found
1074 Retrieves the left coordinate of the destination page view.
1075 Retrieves top coordinate value. @return integer value representing top position
1076 Checks if the page view fits within its bounding box.
1077 Checks if destination has bounded box fitting type. @return true if type is BOUNDED, false otherwise
1078 Checks if page content fits within bounding box. @return true if content is bounded, false otherwise
1079 Creates an output stream with no filters. @throws IOException if an error occurs
1080 Creates an output stream for writing data to a PDF document. @param filter optional filter to apply during writing
1081 Creates a thumbnail image from the given COS stream. @param cosStream input stream data
1082 Retrieves the image mask as a PDImageXObject instance. @return PDImageXObject object or null if no explicit mask is present
1083 Retrieves the soft mask image associated with this PDImageXObject. @return a PDImageXObject object representing the soft mask, or null if not found
1084 Writes an affine transformation to the output stream. @param transform AffineTransform object containing matrix data
1085 Begins a text mode, writing the 'BT' operator to output stream. @throws IllegalStateException if called while already in text mode
1086 Ends text mode and writes END_TEXT operator to output stream. @throws IllegalStateException if beginText() has not been called
1087 Sets text leading value in PDF stream. @param leading new leading value
1088 Writes a newline operator to the output stream while in text mode.
1089 Writes a newline at specified text offset in PDF content stream. @param tx x-coordinate of new line @param ty y-coordinate of new line
1090 Saves the current graphics state, pushing relevant color and font stacks.
1091 Restores graphics state by popping color spaces and fonts. @throws IOException if an I/O error occurs
1092 Sets the stroking color with RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1093 Sets the stroking color for CMYK content streams. @param c cyan component value (0..1) @param m magenta component value (0..1) @param y yellow component value (0..1) @param k black component value (0..1)
1094 Sets the stroking color with a specified gray value. @param g gray value within 0..1 range
1095 Sets the non-stroking color to RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1096 Sets the non-stroking color space with CMYK values. @param c cyan channel value (0..1) @param m magenta channel value (0..1) @param y yellow channel value (0..1) @param k black channel value (0..1)
1097 Sets non-stroking color for graphics operations. @param g float value representing the grayscale level (0..1)
1098 Adds a rectangle to the content stream. @param x left coordinate @param y top coordinate @param width rectangle width @param height rectangle height
1099 Draws a Bezier curve to the output stream. @param x1, y1 first control point @param x2, y2 second control point @param x3, y3 endpoint of the curve
1100 Draws a Bezier curve to the PDF stream. @param x2, y2 first control point coordinates @param x3, y3 second control point coordinates
1101 Draws a Bezier curve from the current point to (x3, y3) and then to (x1, y1). @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point
1102 Moves the graphics cursor to a specified position. @param x new X-coordinate @param y new Y-coordinate
1103 Draws a line to the specified coordinates. @param x horizontal coordinate @param y vertical coordinate
1104 Renders the current graphics path as a stroke. @throws IOException if an I/O error occurs
1105 Closes and strokes the current graphics state. @throws IOException if an I/O error occurs
1106 Fills the content stream with non-zero area. @throws IOException if an I/O error occurs
1107 Fills shapes using the even-odd rule. @throws IOException if an I/O error occurs
1108 Fills and strokes the content stream with non-zero winding number. @throws IOException if an I/O error occurs
1109 Fills and strokes PDF content using even-odd mode. @throws IOException if an I/O error occurs
1110 Closes fill and stroke graphics state. @throws IOException if an I/O error occurs
1111 Closes fill and stroke for even-odd content. @throws IOException if I/O error occurs
1112 Closes the current path. @throws IOException if an I/O error occurs
1113 Clamps the current graphics state to the active clipping path. @throws IOException if an I/O error occurs
1114 Clamps the graphics state based on even-odd fill rule. @throws IOException if an I/O error occurs
1115 Sets the line width in the PDF content stream. @param lineWidth the new line width value
1116 Sets the line join style to one of three predefined values. @param lineJoinStyle integer representing the desired line join style (0-2)
1117 Sets the line cap style. @param lineCapStyle integer value between 0 and 2 to set line end style
1118 Sets line dash pattern with specified phase. @param pattern array of float values for the pattern @param phase initial phase value
1119 Sets the miter limit for line joins. @param miterLimit non-negative float value
1120 Ends marked content in PDF stream.
1121 Sets character spacing in PDF content stream. @param spacing character spacing value
1122 Sets word spacing in content stream. @param spacing float value for word spacing
1123 Sets horizontal scaling factor for text content. @param scale float value to apply
1124 Sets the text rendering mode for the PDF content stream. @param rm RenderingMode object specifying the new rendering mode
1125 Sets text rise in PDF content stream. @param rise float value for text rise
1126 Initializes PDRectangle from a COSArray representation. @param array input COSArray containing rectangle dimensions and coordinates
1127 Initializes a PDLineDashPattern instance from an array of dash lengths and a phase value. @param array array of dash lengths @param phase initial dash phase (may be adjusted according to PDF 2.0 specification)
1128 Returns a string representation of this numerical range, including its minimum and maximum values.
1129 Evaluates a PDF Function Type 4 by executing instructions and clipping input/output values. @param input array of float inputs to be processed @return array of float outputs or throws exception if invalid
1130 Reads and processes a patch from an input stream. @param input source data stream @param isFree whether to read free or constrained patch data @param implicitEdge edge points of the patch (if not reading free) @param implicitCornerColor corner color components of the patch (if not reading free) @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color component value @param rangeX range of x coordinates for interpolation @param rangeY range of y coordinates for interpolation @param colRange range of color components for interpolation @param matrix transformation matrix to apply to patch points @param xform affine transform to apply to patch points @param controlPoints number of control points in the patch @return generated Patch object or null on EOF
1131 Reads a vertex from an ImageInputStream with specified ranges and transformations. @param input source data stream @param maxSrcCoord maximum source coordinates @param maxSrcColor maximum source color value @param rangeX X-coordinate range @param rangeY Y-coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform affine transformation @return Vertex object representing the read vertex data
1132 Retrieves the first color from the collection.
1133 Retrieves the color at index 1 from the collection.
1134 Retrieves the color at index 2 (second) from the collection. @return PDGamma object representing the start colour
1135 Retrieves the end color from the collection. @return the color at index 3 (end) or null if not found
1136 Retrieves the current blend mode from the dictionary. @return BlendMode instance or NORMAL if not found
1137 Creates a Matrix instance from the provided COSBase object, ensuring it's a valid COSArray with at least 6 elements and all elements are COSNumbers. @param base COSBase object containing matrix values
1138 Updates the highest cross-reference object number in the document. @param importedPage page containing the imported objects
1139 Retrieves the COSDictionary object associated with either the first or second key. @param firstKey primary key to search for @param secondKey fallback key if first is not found @return The COSDictionary object or null if not found
1140 Retrieves a boolean value from the dictionary using the first key; returns the fallback key's value or default value if not found. @param firstKey primary key to search for @param secondKey fallback key if first is not found @param defaultValue default boolean value if both keys are absent @return boolean value associated with the first key, or default value
1141 Retrieves integer value from the dictionary using firstKey or secondKey. @param firstKey primary key to search for @param secondKey fallback key if first is not found @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
1142 Retrieves the filter names as a list of strings. @return A List containing one or more filter names, or an empty list if not found
1143 Retrieves the color space from the shading's dictionary. @return The PDColorSpace object representing the color space
1144 Checks if a given PDF document contains the catalog section. @param dictionary COSDictionary object to inspect @return true if catalog or FDF sections are present, false otherwise
1145 Checks if a given COSDictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
1146 Retrieves the encryption method from the cryptographic filter dictionary. @return The COSName object representing the encryption method or null if not found
1147 Retrieves the stream filter name from the document's encryption settings. @return COSName object for the stream filter or IDENTITY if not found
1148 Retrieves the string filter name from the encryption settings. @return The COSName object representing the string filter, or IDENTITY if not set
1149 Decrypts a dictionary and its contents recursively. @param dictionary the dictionary to decrypt @param objNum the object number of the decrypted dictionary @param genNum the generation number of the decrypted dictionary
1150 Retrieves the Unicode representation of a given code point. @param code input code point value
1151 Retrieves the subtype of this soft mask. @return COSName object representing the subtype
1152 Retrieves the relationship dictionary object. @return The COSName object representing the relationship or null if not found
1153 Retrieves the appearance state of this annotation.
1154 Checks if the PDF document is encrypted. @return true if the document has an encryption dictionary, false otherwise
1155 Retrieves the encryption dictionary from the document's trailer.
1156 Performs the initial parsing of the FDF document, retrieving the trailer and root objects. @throws IOException if an I/O error occurs during parsing
1157 Retrieves the AcroForm object associated with a given PDF document. @param acroFormFixup optional fixup for the AcroForm content @return PDAcroForm object or null if not found or dereferenced
1158 Retrieves the PDF viewer preferences. @return ViewerPreferences object or null if not found
1159 Retrieves the name dictionary associated with this document catalog. @return PDDocumentNameDictionary object or null if not found
1160 Retrieves the dictionary of named destinations. @return PDDocumentNameDestinationDictionary object or null if not found
1161 Retrieves the mark info dictionary from the document catalog. @return PDMarkInfo object or null if not found
1162 Retrieves the URI dictionary from the document catalog. @return PDURIDictionary object or null if not found
1163 Retrieves the structure tree root from the catalog dictionary. @return PDStructureTreeRoot object or null if not found
1164 Retrieves the optional content properties dictionary. @return OptionalContentProperties object or null if not found
1165 Retrieves the destination names dictionary. @return PDNameTreeNode instance or null if not found
1166 Retrieves the embedded files dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
1167 Retrieves the JavaScript dictionary associated with this PDF document. @return PDDocumentNameDictionary object or null if not found
1168 Retrieves the PDF transition associated with this page. @return PDTransition object or null if not found
1169 Retrieves an indirect resource by its name. @param kind the type of the resource @param name unique identifier for the resource @return The COSObject representation or null if not found
1170 Retrieves a dictionary object by its key from the given resource type. @param kind unique identifier for the resource type @param name unique identifier for the dictionary object @return The COSBase object or null if not found or dereferenced
1171 Retrieves a set of names associated with the given resource type. @param kind The type of resource (e.g., font, color space) @return Set view of contained COSName objects or an empty set if not found
1172 Retrieves the associated PDF page for this marked content reference. @return PDPage object or null if not found
1173 Retrieves the associated PDF page object. @return PDPage instance or null if not found
1174 Retrieves a PDPage object associated with the current page. @return PDPage object or null if not found
1175 Retrieves the ID tree structure from the COSDictionary. @return PDStructureElementNameTreeNode object or null if not found
1176 Retrieves the parent tree as a PDNumberTreeNode. @return PDNumberTreeNode object or null if not found
1177 Retrieves a map of class attributes. @return A map containing class attribute information
1178 Retrieves the COSDictionary object associated with a given crypt filter name. @param cryptFilterName unique identifier for the dictionary object @return The COSDictionary object or null if not found or dereferenced
1179 Retrieves the border style dictionary associated with this annotation. @return Border style dictionary or null if not found
1180 Retrieves the border effect dictionary. @return BorderEffectDictionary object or null if not found
1181 Retrieves PDSignature instance from the FDF catalog. @return PDSignature object or null if not found
1182 Retrieves the JavaScript data associated with this FDF document. @return FDFJavaScript object or null if not found
1183 Retrieves the appearance dictionary for the current form field. @return PDAppearanceDictionary object or null if not found
1184 Retrieves the named page reference for the appearance stream. @return FDFNamedPageReference object or null if not found
1185 Retrieves the icon fitting configuration from the associated COS dictionary. @return FDFIconFit object or null if not found
1186 Retrieves additional actions associated with the current form field. @return PDAdditionalActions object or null if not found
1187 Retrieves the FDFPageInfo object associated with this page. @return The pageInfo object or null if not found
1188 Retrieves the named page reference template from the COS dictionary. @return FDFNamedPageReference object or null if not found
1189 Retrieves the CID system information dictionary. @return PDCIDSystemInfo object or null if not found
1190 Retrieves the Panose font classification from the PDF document. @return PDPanose object or null if not found
1191 Retrieves the PDF Resources instance associated with this font. @return The PDResources object or null if not initialized
1192 Retrieves the COSDictionary object for character procedures. @return The COSDictionary object or null if not found
1193 Retrieves the device-dependent color space process attributes. @return A PDDeviceNProcess object or null if not found
1194 Retrieves the render state from a COSName object based on the specified destination. @param destination unique identifier for the rendering context @return The RenderState object or null if not found or dereferenced
1195 Retrieves the extended graphics state for this shading pattern. @return PDExtendedGraphicsState object or null if not initialized
1196 Retrieves the PDResources instance associated with this tiling pattern. @return PDResources object or null if not found
1197 Retrieves the target directory associated with this embedded action. @return PDTargetDirectory object or null if not found
1198 Retrieves Windows launch parameters from the associated COSDictionary. @return PDWindowsLaunchParams object or null if not found
1199 Retrieves the target directory dictionary from a given dictionary object. @return PDTargetDirectory instance or null if not found
1200 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not found
1201 Retrieves the underlying PDF page associated with this annotation. @return PDPage object or null if not found
1202 Retrieves the border effect dictionary for this annotation. @return BorderEffectDictionary object or null if not found
1203 Retrieves the border style dictionary for this annotation link. @return PDBorderStyleDictionary object or null if not found
1204 Retrieves the URI of the previous action. @return A PDActionURI object or null if not found
1205 Retrieves the external data dictionary associated with this annotation. @return The COSDictionary object or null if not found
1206 Retrieves the border style dictionary for this annotation. @return PDBorderStyleDictionary object or null if not found
1207 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1208 Retrieves the Border Effect dictionary. @return PDBorderEffectDictionary object or null if not found
1209 Retrieves the appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
1210 Retrieves the additional annotation actions associated with this widget. @return PDAnnotationAdditionalActions object or null if not found
1211 Retrieves the border style dictionary associated with this annotation widget. @return PDBorderStyleDictionary object or null if not found
1212 Retrieves the normal appearance of an annotation. @return PDAppearanceEntry object or null if not found
1213 Retrieves the digital signature filter properties. @return PDPropBuildDataDict object containing filter data or null if not found
1214 Retrieves publication security properties from the COSDictionary. @return PDPropBuildDataDict object containing publication security data or null if not found
1215 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not found
1216 Retrieves the MDP (Message Digest Procedure) seed value. @return PDSeedValueMDP object or null if not found
1217 Retrieves a PDSeedValueCertificate instance from the associated dictionary. @return PDSeedValueCertificate object or null if not found
1218 Retrieves the timestamp data associated with this seed value. @return PDSignedTime object or null if not found
1219 Retrieves the digital signature properties build object. @return PDPropBuild object or null if not found
1220 Retrieves the PDStructureElement associated with this outline item. @return The structure element or null if it does not exist
1221 Checks if this outline node has child items. @return true if children exist, false otherwise
1222 Returns the default resources for the form. @return PDResources object or null if not found
1223 Retrieves the additional actions associated with this field. @return PDFormFieldAdditionalActions object or null if not found
1224 Retrieves the signature value associated with this PDSignatureField. @return PDSignature object or null if not found
1225 Retrieves the default signature value from the PDF document. @return PDSignature object or null if not found
1226 Retrieves the seed value dictionary associated with this signature field. @return The seed value dictionary or null if not found
1227 Retrieves the measurement dictionary associated with this viewport. @return PDMeasureDictionary object or null if not found
1228 Retrieves document information for the current thread. @return PDDocumentInformation object or null if not found
1229 Retrieves the first bead associated with this thread. @return The first bead as a PDThreadBead object or null if not found
1230 Retrieves the thread associated with this bead. @return PDThread object or null if not found
1231 Retrieves the next bead in the thread.
1232 Retrieves the previous bead in the thread. @return The previous PDThreadBead object or null if not found
1233 Retrieves the associated page from the thread bead. @return PDPage object or null if not found
1234 Retrieves and initializes the metadata dictionary from the catalog. @return PDMetadata object or null if not found
1235 Retrieves the XMP metadata associated with this PDPage. @return PDMetadata object or null if not found
1236 Retrieves the differences dictionary from the FDF document. @return The COSStream object containing the differences or null if not found
1237 Retrieves the font file as a PDStream object.
1238 Retrieves the font file descriptor from the dictionary. @return The COSStream object or null if not found
1239 Retrieves font file 3 as a PDStream object. @return PDStream object or null if not found
1240 Retrieves the CID set stream from the dictionary. @return The COSStream object or null if not found
1241 Retrieves the sound content associated with this PDActionSound. @return The COSStream object containing the sound data or null if not found
1242 Retrieves the normal icon as a PDFormXObject object. @return The icon or null if not found
1243 Retrieves the rollover icon as a PDFormXObject. @return PDFormXObject object or null if not found
1244 Retrieves the alternate icon for a PDF annotation. @return PDFormXObject object or null if not found
1245 Retrieves the document's ID from its trailer dictionary. @return COSArray object containing the document ID
1246 Retrieves a list of output intents from the PDF document's catalog dictionary. @return List of PDOutputIntent objects or empty list if not found
1247 Retrieves the thread beads for this page. @return list of PDThreadBead objects or empty list if not found
1248 Retrieves the list of viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if not found
1249 Retrieves a list of child PDNameTreeNode objects from the current node. @return List of child nodes or null if not found
1250 Retrieves a map of name-value pairs from the underlying COSArray object. @return A read-only map of String keys and values of type T, or null if not found
1251 Retrieves a list of child nodes from the current node's COSArray. @return List<PDNumberTreeNode> containing child nodes or null if none exist
1252 Retrieves a map of numeric values from the COSArray object associated with the 'NUMS' key. @return Map<Integer, COSObjectable> containing index-value pairs or null if not found
1253 Retrieves the upper limit value from the COSArray object. @return Integer representation of the upper limit or null if not found
1254 Retrieves the lower limit as an Integer value from the COSArray object.
1255 Retrieves the array of values for this PDFunction's range. @return COSArray object containing the range values
1256 Retrieves the domain values as a COSArray object. @return COSArray containing domain values or null if not set
1257 Retrieves the Size array from the PDF dictionary. @return COSArray object containing size information or null if not found
1258 Retrieves the COSArray object containing decode values. @return COSArray object or null if not found
1259 Retrieves the array of Type 3 function definitions. @return COSArray object containing function data or null if not initialized
1260 Retrieves the bounds array for Type 3 function evaluation. @return COSArray object containing bounds data or null if not initialized
1261 Retrieves the encoding array associated with the function. @return COSArray object containing function encoding data
1262 Retrieves a list of owner user properties from the COSArray object. @return List of PDUserProperty objects associated with the document's owner
1263 Checks if the specified edge is attached. @param edge edge to check @return true if attached, false otherwise
1264 Retrieves the color of this annotation. @return Color object or null if not found
1265 Retrieves the interior color of the annotation. @return Color object representing the circle's interior color, or null if not set
1266 Retrieves the callout values from the annotation's COS dictionary. @return An array of floats representing the callout values, or null if not found
1267 Retrieves the list of ink annotations. @return A list of float arrays representing the ink data or null if not found
1268 Retrieves the line coordinates as a float array. @return An array of floats representing the line's coordinates, or null if not found
1269 Retrieves the ending style of the line annotation's start point.
1270 Retrieves end point ending style of the line annotation. @return style string or default value if not found
1271 Retrieves the interior color of the line annotation. @return Color object or null if not applicable
1272 Retrieves the horizontal caption offset for a line annotation. @return Horizontal offset value or 0 if not applicable
1273 Retrieves caption vertical offset from line annotation's COSArray. @return Caption vertical offset as a float value, or 0 if not found.
1274 Retrieves the polygon vertices as a float array. @return An array of floats representing the vertex coordinates, or null if not available
1275 Retrieves the interior color of this polygon annotation. @return Color object representing the interior color, or null if not set
1276 Retrieves polyline vertices as a float array. @return Array of float values representing the vertex coordinates or null if not found
1277 Retrieves the endpoint style of a polyline annotation's start point. @return Endpoint style as a string (e.g. "LE_NONE") or null if not found
1278 Retrieves the endpoint ending style of a polyline annotation. @return The style as a string (e.g. "Open", "Closed", etc.) or default if not found
1279 Retrieves the interior color of this polyline annotation. @return Color object representing the interior color, or null if not set
1280 Retrieves the interior color of the annotation. @return Color object representing the interior color, or null if not set
1281 Retrieves the array of coordinates for text markup annotation. @return An array of floats representing the x and y coordinates, or null if not found
1282 Retrieves the document ID from the FDF dictionary. @return COSArray object containing the document ID
1283 Retrieves a list of form fields from the FDF document. @return List<FDFField> collection of form fields or null if empty
1284 Retrieves a list of FDF pages from the underlying document structure. @return List<FDFPage> collection of pages or null if not found
1285 Retrieves a list of child fields from the current field's dictionary. @return List<FDFField> collection of child fields or null if not found
1286 Retrieves a list of options associated with the field. @return List of option elements or null if not found
1287 Retrieves the list of templates associated with this page. @return List of FDFTemplate objects or an empty list if not found
1288 Retrieves a list of form fields from the template. @return List<FDFField> collection of field objects or null if not found
1289 Retrieves the list of font widths. @return List of Float values representing the widths, or null if not found
1290 Retrieves the transformation matrix as a float array. @return A float array representing the transformation matrix, or a default identity matrix if not defined in the dictionary.
1291 Retrieves the list of component names in the color space. @return List of String component names or empty list if not found
1292 Retrieves the background shading dictionary from the PDF document. @return COSArray object containing background shading properties
1293 Retrieves the shading domain as a COSArray object. @return COSArray object containing the domain information or null if not initialized
1294 Retrieves the COSArray object for shading extension properties. @return COSArray object or null if not initialized
1295 Retrieves the domain shading attribute as a COSArray object. @return COSArray object representing the domain or null if not set
1296 Retrieves the shading coordinates as a COSArray object. @return COSArray object containing coordinate values or null if not initialized
1297 Retrieves the COSArray object containing encode values.
1298 Retrieves the font settings from the dictionary. @return PDFontSetting object or null if not found
1299 Retrieves the form fields associated with the reset action. @return COSArray object containing field data
1300 Retrieves the form fields dictionary. @return COSArray object containing field configurations
1301 Retrieves the array of rectangle differences for caret annotations. @return An array of floats representing the difference in rectangle margins, or an empty array if not found
1302 Retrieves the differences in rectangle appearance. @return Array of floats representing the differences, or an empty array if not found
1303 Retrieves the float array for callout settings. @return An array of floats representing callout settings, or null if not found
1304 Retrieves the list of ink annotations as a 2D array of floats. @return A 2D array where each sub-array represents an ink annotation, or an empty array if not found
1305 Retrieves the line coordinates as a float array. @return An array of floats representing the line's x and y coordinates, or null if not found
1306 Retrieves the ending style of a line annotation's start point. @return String representation of the ending style or default value if not found
1307 Retrieves the end point style of a line annotation. @return String representation of the end point style (e.g. "LE_NONE") or default value if not found
1308 Retrieves the horizontal caption offset for a line annotation. @return The offset value or 0.0f if not found
1309 Retrieves the vertical offset of a line annotation's caption.
1310 Retrieves the quad points for a link annotation. @return An array of floats representing the quad point coordinates, or null if not found
1311 Retrieves the vertices of the polygon annotation as a float array. @return An array of floats representing the vertices, or null if not found
1312 Retrieves the polygon's vertices as a 2D array of floats. @return A 2D array where each sub-array represents a point in the polygon, or null if no path is found
1313 Retrieves the endpoint style for the start point of the polyline. @return String representation of the endpoint style (e.g. "None")
1314 Retrieves the endpoint style for the polyline. @return String representation of the endpoint style (e.g. LE_NONE)
1315 Retrieves the vertex coordinates of the polyline annotation. @return An array of floats representing the x and y coordinates, or null if not found
1316 Retrieves the array of rectangle differences. @return An array of floats, where each element is the value of a rectangle difference, or an empty array if not applicable
1317 Retrieves the quad points associated with this text markup annotation. @return An array of floats representing the quad point coordinates, or null if not found
1318 Retrieves the list of sub-filters for a digital signature. @return List of string names or empty list if not found
1319 Retrieves the digest method from the digital signature seed value. @return list of string names for the digest methods
1320 Retrieves the list of reasons associated with a digital signature. @return List of string names or empty list if not found
1321 Retrieves the legal attestations from the PDF document's seed value. @return List of string names representing the legal attestations
1322 Retrieves the subject attribute from the digital signature certificate. @return List of byte arrays representing the subject or null if not found
1323 Retrieves a list of key usage extensions from the digital signature certificate. @return List of strings representing key usage extensions or null if not found
1324 Retrieves the issuer attribute from the digital signature certificate data. @return list of byte arrays representing the issuer or null if not found
1325 Retrieves the OID (Object Identifier) from the PDF document's certificate data. @return List of byte arrays representing the OID, or null if not found
1326 Retrieves the byte range associated with this signature. @return array of integers representing the byte range or empty array if not found
1327 Retrieves the list of PDFields in calculation order. @return List of PDField objects, or an empty list if no fields are found
1328 Returns the index of selected options as a list of integers. @return List of integers representing selected option indices, or an empty list if none are selected
1329 Retrieves an array of PDNumberFormatDictionary objects representing X-axis change values. @return Array of PDNumberFormatDictionary objects or null if not found
1330 Retrieves an array of Y-coordinate measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1331 Retrieves an array of distance measurements from the dictionary. @return Array of PDNumberFormatDictionary objects or null if not found
1332 Retrieves an array of rectilinear area measurements from the underlying COSDictionary. @return PDNumberFormatDictionary[] containing area measurements or null if not found
1333 Retrieves an array of angle measurement dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1334 Retrieves an array of line slope dictionaries. @return PDNumberFormatDictionary[] or null if not found
1335 Retrieves the origin coordinates of the coordinate system. @return An array of floats representing the x, y values or null if not found
1336 Retrieves the visibility policy dictionary. @return COSName object representing the visibility policy
1337 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object
1338 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object @return The long value or default value (-1L) if not found
1339 Retrieves the long value associated with a given key from the dictionary. @param key unique identifier for the dictionary object @param defaultValue default long value to return if not found
1340 Sets the startxref position, initializing or updating the XRef trailer. @param startxrefBytePosValue the byte position of the startxref
1341 Retrieves the float value associated with a given key in the dictionary. @param key unique identifier for the dictionary object
1342 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object
1343 Retrieves the float value associated with a given key. @param key unique identifier for the dictionary object @param defaultValue default value to return if not found or null
1344 Retrieves the user unit value from the page resources. @return The user unit value or a default value of 1.0f if not found
1345 Retrieves guideline width from COSDictionary. @return Guideline width as a float value
1346 Retrieves the opacity value of an annotation. @return The opacity value (defaulting to 1.0 if not found)
1347 Retrieves the font weight from the PDF dictionary. @return The font weight value or 0 if not found
1348 Retrieves the italic angle value from the font descriptor dictionary. @return The italic angle or 0 if not found
1349 Retrieves font ascent value. @return Font ascent in points or default (0) if not found
1350 Retrieves font descent. @return Descent value or default (0) if not found
1351 Retrieves leading value from font descriptor dictionary. @return The leading value or default of 0.0 if not found
1352 Retrieves the cap height of a font descriptor. @return The cap height value or its absolute value if initially negative
1353 Retrieves the x-height of a font. @return The x-height value or a default value if not found
1354 Retrieves the stem vertical value from the font descriptor dictionary. @return The stem vertical value or 0 if not found
1355 Retrieves stem height value from font descriptor dictionary. @param key unique identifier for STEM_H attribute @return The stem height value or default value (0) if not found
1356 Retrieves the average font width. @return The average font width or 0 if not found
1357 Retrieves the maximum width of the font descriptor. @return Maximum width value or 0 if not found
1358 Retrieves missing width value from font descriptor dictionary. @return The missing width or default value (0) if not found
1359 Retrieves gamma correction value from CALGRAY dictionary. @return Gamma correction factor or default value of 1.0
1360 Retrieves the X-step value of the tiling pattern. @return The X-step value or 0 if not found
1361 Retrieves the Y-step value of the tiling pattern. @return The Y-step value or default to 0 if not found.
1362 Retrieves and returns the configured sound volume. @return Volume value between -1 and 1 or defaulting to 1 if invalid
1363 Retrieves the length of the leader line. @return The length or 0 if not found
1364 Retrieves the extension length of the leader line. @return The leader line extension length or default value if not found
1365 Retrieves the leader line offset length. @return The offset length or default value (0) if not found
1366 Retrieves the constant opacity value. @return The constant opacity as a float value
1367 Retrieves the border width from the underlying COSDictionary object. @return The border width or 0 if not found
1368 Retrieves the page transition duration. @return The duration value or default (1) if not set
1369 Retrieves the scale factor for fly transitions. @return The scale value or default (1) if not set
1370 Prepares regions for text extraction from a given PDF page. @param page PDPage object to extract text from
1371 Retrieves the PDColorSpace instance associated with this transparency group attributes.
1372 Creates a PDPropertyList instance based on the given COSDictionary. @param dict COSDictionary object representing the property list
1373 Retrieves the line width value from the extended graphics state. @return line width as a floating-point number
1374 Retrieves the miter limit value. @return miter limit as a floating-point number or null if not found
1375 Retrieves the flatness tolerance value from the PDF dictionary. @return Flatness tolerance as a floating-point number
1376 Retrieves smoothness tolerance value from PDF extended graphics state. @return Smoothness tolerance as a floating-point number
1377 Retrieves the stroking alpha constant from the extended graphics state dictionary. @return stroke transparency value as a float
1378 Retrieves the non-stroking alpha constant from the dictionary. @return Non-stroking alpha value as a float or null if not found
1379 Retrieves the offsets of COS objects from the PDF data stream. @throws IOException if an I/O error occurs
1380 Writes a COSBase object to the output stream and updates the cross-reference table. @param obj underlying COSBase object to be written
1381 Writes a reference to the specified COSBase object. @param obj The COSBase object being referenced
1382 Saves the FDF document to an OutputStream. @param output OutputStream to write data to
1383 Clears all elements from this COSArray and marks document as updated.
1384 Removes an element from the collection at specified index. @param i position of element to be removed (0-based) @return the removed COSBase object or null if not found
1385 Removes a specified COSBase object from the array. @param o COSBase object to be removed @return true if object was successfully removed, false otherwise
1386 Clears all key-value pairs and marks document as updated.
1387 Removes an item from the dictionary by its COSName key. @param key the COSName identifier of the item to be removed
1388 Updates COSIncrement state when origin document's state differs. @param updateState COSUpdateState object containing new updates
1389 Sets the underlying object to a null reference, optionally updating the document state. @param None
1390 Updates the origin document state and recursively updates child update info objects. @param originDocumentState new origin document state @param dereferencing true if updating during dereferencing, false otherwise
1391 Retrieves string value from collection at specified index. @param index unique identifier of desired object
1392 Retrieves the represented name as a string from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
1393 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param key unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
1394 Checks if the given cross-reference table offset is valid. @param startXRefOffset start position of cross-reference table @return true if offset points to a valid XRef stream, false otherwise
1395 Retrieves the current page display mode from the catalog dictionary. @return PageMode instance representing the document's display behavior
1396 Retrieves the page layout configuration from the catalog dictionary. @return PageLayout object representing the document's page layout, or SINGLE_PAGE if not found or invalid
1397 Retrieves the PDF document's version. @return Version string or null if not found
1398 Retrieves the 'trapped' attribute from the PDF document metadata. @return trapped status as a string or null if not found
1399 Retrieves page numbering style from PDF document.
1400 Retrieves the type of the encapsulated PDF content. @return string representation of the COS dictionary's TYPE entry
1401 Retrieves owner name from COS object. @return string representation of owner
1402 Retrieves the structure type from the COS object. @return string representation of the structure type
1403 Creates a PDStructureNode instance based on the provided COSDictionary node. @param node dictionary object containing structure information @return PDStructureTreeRoot or PDStructureElement instance, depending on the 'Type' entry in the dictionary
1404 Retrieves the type of structure node as a string. @return COS dictionary value for TYPE key or null if not found
1405 Retrieves the represented name as a string from the dictionary object. @return property name or null if not found
1406 Retrieves the language associated with the marked content. @return Language string or null if properties are missing
1407 Retrieves the content type as a string. @return The content type or null if not found
1408 Retrieves the subtype of the marked content artifact. @return string representation of the subtype
1409 Retrieves the filter name from the encryption settings.
1410 Retrieves the subfilter value from the encryption dictionary. @return subfilter string or null if not found
1411 Creates an instance of the appropriate FDFAnnotation subclass based on the given COSDictionary. @param fdfDic dictionary object containing annotation properties
1412 Retrieves the intent annotation from the PDF document. @return Intent string or null if not found
1413 Retrieves line ending style of free text annotation. @return string representation of COSName.LE value
1414 Retrieves the document version from the FDF dictionary. @return version string or null if not found
1415 Retrieves the document encoding from the FDF dictionary. @return Encoding string, defaulting to "PDFDocEncoding" if not found.
1416 Retrieves the scaling option for icons in FDF format. @return String value representing the scale option, or a default value if not found
1417 Retrieves the scale type of a fitting configuration. @return Scale type string or default proportional value if not found.
1418 Retrieves the base font from the font dictionary. @return base font name as string
1419 Retrieves the font type from the dictionary. @return Font type as string
1420 Retrieves the font subtype from the dictionary object. @return font subtype as string or null if not found
1421 Retrieves the font name from the dictionary object. @return Font name as a string
1422 Retrieves font stretch attribute from the dictionary. @return Stretch value as a string or null if not found
1423 Retrieves the base font name from the dictionary. @return The base font name as a string
1424 Retrieves the base font name from the dictionary. @return string representation of the base font
1425 Retrieves the base font from the dictionary. @return Base font name or null if not found
1426 Retrieves the base font name from the dictionary. @return The base font name as a string, or null if not found
1427 Checks if this DeviceN color space has N-channel attributes. @return true if 'NChannel' subtype found, false otherwise
1428 Retrieves the type of interactive action from the associated dictionary. @return Type of action (e.g. 'GoTo', 'NamedAction', etc.) as a string
1429 Retrieves the subtype of the interactive action from the COSDictionary. @return subtype string (e.g. 'S') or null if not found
1430 Creates a PDAction object based on the provided COSDictionary. @param action COSDictionary containing action details
1431 Retrieves the subtype of this annotation as a string. @return subtype name or null if not found
1432 Retrieves caption positioning from the annotation dictionary. @return string representation of the caption positioning
1433 Retrieves the intent from the COS object. @return intent string or null if not found
1434 Retrieves the subtype from the underlying COSDictionary object. @return subtype string or null if not found
1435 Retrieves the represented name from the properties dictionary. @return the name as a string
1436 Retrieves filter name from digital signature seed value. @return Filter name as string or null if not found
1437 Retrieves the URL type from the dictionary. @return String representing the URL type
1438 Retrieves the filter name from the COSDictionary structure. @return The filter name as a string or null if not found
1439 Retrieves the sub-filter value from the underlying COSDictionary. @return sub-filter string or null if not found
1440 Retrieves the field type from the COS dictionary.
1441 Retrieves the viewport name from its associated COSDictionary. @return the name of the viewport as a string
1442 Retrieves duplex printing preference. @return Duplex printing mode as string or null if not set
1443 Retrieves a string representation from the dictionary object associated with the given key. @param key unique identifier for the dictionary object
1444 Retrieves a string representation from the dictionary object associated with the given key. If not found, returns the provided default value. @param key unique identifier for the dictionary object @param defaultValue default string to return if key is not found
1445 Retrieves the document language from the catalog dictionary.
1446 Retrieves the PDF document title. @return The title as a string or null if not found
1447 Retrieves the author metadata from the PDF document. @return The author string or null if not found
1448 Retrieves the subject metadata from the PDF document. @return The subject string or null if not found
1449 Retrieves the keywords associated with this PDF document. @return The keyword list as a string, or null if not found
1450 Retrieves the creator of the PDF document. @return The string value associated with the CREATOR key, or null if not found
1451 Retrieves the producer information from the PDF document metadata. @return The string representation of the producer, or null if not found
1452 Retrieves the page label prefix from the dictionary object. @return The COSString object as a string, or null if not found.
1453 Retrieves file Unicode from embedded file system. @return The COSString object as a string, or null if not found
1454 Retrieves file name from embedded file system.
1455 Retrieves file DOS (Disk Operating System) attribute. @return The file's DOS string representation, or null if not found
1456 Retrieves file MAC address from embedded file specification. @return The file MAC address as a string, or null if not found
1457 Retrieves file specification as a Unix string. @return The file's Unix representation or null if not found
1458 Retrieves file description from the dictionary.
1459 Retrieves the logical ID of the PDF structure element. @return The COSString object as a string, or null if not found
1460 Retrieves the title from the PDF document structure. @return The title string, or null if not found
1461 Retrieves the language associated with the PDF structure element. @return The language as a string, or null if not found
1462 Retrieves alternate description from PDF document structure. @return string representation of alternate description or null if not found
1463 Retrieves the expanded form of the PDF structure element. @return The string representation of the E key in the COS dictionary object.
1464 Retrieves the actual text from the COS object associated with this PDStructureElement. @return The actual text as a string, or null if not found
1465 Retrieves and formats the F property value.
1466 Retrieves the actual text from the properties dictionary. @return The COSString object as a string, or null if not found
1467 Retrieves the alternate description from properties dictionary. @return The COSString object as a string, or null if not found
1468 Retrieves the expanded form of properties. @return Expanded properties string or null if not found
1469 Retrieves date annotation from PDF document. @return The COSString object as a string, or null if not found
1470 Retrieves the annotation's name from its dictionary. @return The COSString object as a string, or null if not found
1471 Retrieves annotation contents from the underlying dictionary. @return The contents string or null if not found
1472 Retrieves annotation title from COSDictionary. @return The title string or null if not found
1473 Retrieves the subject annotation from the dictionary. @return The COSString object as a string, or null if not found.
1474 Retrieves the annotation symbol. @return The symbol string, or null if not found.
1475 Retrieves rotation value from annotation dictionary. @return Rotation angle as a string, or null if not found
1476 Retrieves default appearance string from annotation. @return The COSString object as a string, or null if not found.
1477 Retrieves default style string from annotation dictionary.
1478 Retrieves caption style string from annotation dictionary.
1479 Retrieves the state of this text annotation. @return The COSString object as a string representing the state, or null if not found.
1480 Retrieves the state model from the annotation dictionary. @return The COSString object as a string representing the state model, or null if not found or dereferenced
1481 Retrieves the status of the FDF document. @return The string representation of the document's status.
1482 Retrieves the target value from the FDF dictionary. @return The string representation of the COSString object associated with the "target" key, or null if not found.
1483 Retrieves partial field name from FDF field dictionary.
1484 Retrieves the name of the named page reference. @return The COSString object as a string representing the name, or null if not found.
1485 Retrieves the font family from the dictionary. @return The string representation of the COSString object associated with FONT_FAMILY key, or null if not found.
1486 Retrieves the character set from the font descriptor dictionary.
1487 Retrieves the name of this optional content group. @return The COSString object as a string, or null if not found
1488 Retrieves an array of group names from the optional content dictionary. @return String[] array of group names, or empty array if not found
1489 Retrieves launch file specification. @return The COSString object as a string, or null if not found
1490 Retrieves launch parameter 'D' from dictionary. @return The COSString object as a string, or null if not found
1491 Retrieves the O parameter from the launch action's dictionary. @return The string value of the COSString object associated with key "O", or null if not found.
1492 Retrieves the launch parameter 'P' as a string. @return The COSString object as a string, or null if not found or dereferenced
1493 Retrieves the URI associated with this PDActionURI instance. @return The URI as a string, or null if not found or dereferenced
1494 Retrieves the filename associated with this target directory. @return The COSString object as a string representing the filename, or null if not found
1495 Retrieves annotation name from dictionary. @return The COSString object as a string, or null if not found
1496 Retrieves the filename from launch parameters. @return The filename string
1497 Retrieves the directory path from launch parameters. @return The directory path as a string
1498 Retrieves the execute parameter from the dictionary. @return The string value associated with key P in the dictionary, or null if not found
1499 Retrieves annotation contents from associated COSDictionary. @return The string representation of the contents or null if not found
1500 Retrieves the modified date of this annotation. @return The COSString object representing the modified date as a string, or null if not found
1501 Retrieves the annotation name from the underlying COSDictionary object. @return The annotation name as a string, or null if not found
1502 Retrieves default appearance string from COS dictionary. @return The default appearance string or null if not found
1503 Retrieves default style string from associated dictionary object.
1504 Retrieves title popup string from annotation's metadata. @return The COSString object as a string, or null if not found.
1505 Retrieves the subject annotation from the PDF document. @return The COSString object as a string, or null if not found
1506 Retrieves the annotation state as a string.
1507 Retrieves the state model string from the annotation's dictionary. @return The COSString object as a string, or null if not found
1508 Retrieves the normal caption from the annotation's dictionary object. @return The COSString object as a string, or null if not found
1509 Retrieves the rollover caption from the COS dictionary object. @return The rollover caption as a string, or null if not found
1510 Retrieves alternate caption string from dictionary object.
1511 Retrieves the date metadata attribute from the PDF signature properties dictionary. @return The COSString object as a string, or null if not found
1512 Retrieves the operating system information from the dictionary. @return The OS name as a string, or null if not found
1513 Retrieves a list of subject DN maps from the COSDictionary. @return List<Map<String, String>> containing subject DN attributes or null if not found
1514 Retrieves the URL from the PDF certificate dictionary. @return The COSString object as a string representation of the URL, or null if not found.
1515 Retrieves URL from COSDictionary. @return The URL string or null if not found
1516 Retrieves the name of the digital signature from the COSDictionary. @return The string representation of the signature name, or null if not found
1517 Retrieves location information from the digital signature's dictionary. @return The location string or null if not found
1518 Retrieves the reason associated with this digital signature. @return The COSString object representing the reason as a string, or null if not found
1519 Retrieves contact information from the COSDictionary. @return The contact info string or null if not found
1520 Retrieves the title of this outline item from its associated dictionary object. @return The item's title as a string, or null if not found
1521 Retrieves partial field name from dictionary. @return partial field name as string
1522 Retrieves the alternate field name from the PDField's dictionary. @return The string representation of the TU value, or null if not found
1523 Retrieves the mapping name from the dictionary. @return The COSString object as a string, or null if not found
1524 Retrieves default appearance string from PDF dictionary. @return The COSString object as a string, or null if not found
1525 Retrieves the scale ratio from the dictionary object. @return The scale ratio as a string, or null if not found
1526 Retrieves the role map from the COSDictionary object associated with the ROLE_MAP key. @return A Map of role mappings or an empty Map if not found
1527 Retrieves a list of string options from the choice field's dictionary object. @return List of option strings
1528 Retrieves a list of string options for display. @return List of String values or empty if not found
1529 Retrieves the represented button value as a string, using export values and index if applicable. @return String representation of the button value
1530 Retrieves the value associated with choice field V. @return list of selected options or null if not found
1531 Retrieves the default value for the choice field. @return list of default values or empty list if not set
1532 Initializes a PDSimpleFileSpecification object with an empty file name.
1533 Sets the file name within the PDF document. @param fileName unique identifier of the associated file
1534 Initializes a PDNamedDestination object from a given COSString identifier. @param dest unique COSString identifier
1535 Sets the named destination using a string identifier. @param dest string representing the destination name
1536 Reads and validates the generation number from the PDF source. @throws IOException if the generation number exceeds 5 digits or is negative
1537 Reads and parses a long integer object number from the PDF source. @throws IOException if the input is too large or invalid
1538 Retrieves user password for PDF documents. @param ownerPassword input byte array @param owner document owner information @param encRevision document encryption revision @param length desired key length @return encrypted user password as a byte array or empty array for REVISION_5/6
1539 Initializes TensorPatch with a 4x4 grid of control points and color values. @param tcp array of 16 control points to reshape @param color 2D array of color values for graphical patch
1540 Encrypts data using RC4 algorithm with a custom key. @param finalKey encryption key (1-32 bytes) @param input InputStream containing plain bytes to encrypt @param output OutputStream to write encrypted data to
1541 Retrieves the current font provider, initializing a default instance if not already set. @return FontProvider object containing font information
1542 Generates a list of shaded triangles from the provided color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects representing the patch's corners and colors @return List<ShadedTriangle> containing all generated triangles
1543 Creates a PDICCBased instance from the given ICC-based color space array and resources. @param iccArray COSArray object containing the ICC profile data @param resources PDResources object to retrieve resource cache (optional) @return newly created or retrieved PDICCBased instance
1544 Initializes a Coons patch with given control points and colors. @param points Array of 12 control points to reshape @param color 2D array of color values for the patch
1545 Processes a TextPosition object, considering suppression of duplicate overlapping text and merging diacritics with consecutive characters. @param text the TextPosition object to be processed
1546 Processes a TextPosition object, handling suppression of duplicate overlapping text and article division. @param text The TextPosition object to process
1547 Converts a COSString to a Calendar instance. @param text the input string to convert @return a Calendar object or null if invalid input
1548 Begins marked content section with specified tag. @param tag COSName object for the marked content type
1549 Begins marked content with specified COSName tag and MCID. @param tag COSName object representing the marked content type @param mcid unique identifier for the marked content sequence
1550 Sets marked content point in PDF output stream. @param tag COSName object representing the marked content
1551 Writes a COSString to an OutputStream. @param string COSString object @param output OutputStream to write to
1552 Writes a string to the specified output stream using default settings. @param bytes input byte array @param output output stream to write to
1553 Initializes the PDFGraphicsStreamEngine with a given page, adding operators for various graphics operations.
1554 Initializes a PDFMarkedContentExtractor instance with default encoding.
1555 Initializes an instance of the class with default settings. Disables separating text by beads.
1556 Retrieves a dictionary object from the current path by navigating through the document structure. @param objPath unique identifier for the target dictionary object @return The COSBase object or null if not found or dereferenced
1557 Retrieves the attribute value from the dictionary object. @param attrName unique identifier for the attribute
1558 Retrieves attribute value from dictionary, returning default value if absent. @param attrName unique identifier for the attribute @param defaultValue default value to return when attribute is not found @return The COSBase object representing the attribute value or defaultValue
1559 Checks if a standard attribute is specified by its name. @param name unique identifier for the attribute @return true if the attribute is specified, false otherwise
1560 Retrieves an array of string values from the dictionary object associated with a given name. @param name unique identifier for the dictionary object @return Array of strings or null if not found or dereferenced
1561 Retrieves the represented name as a string, or an array of names if the value is a COSArray. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found @return The retrieved name(s) or default value
1562 Retrieves the numeric or name value associated with a given key. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found
1563 Retrieves a number or array of numbers from the dictionary. @param name unique identifier for the desired object @param defaultValue default value to return if not found (unspecified if Float.UNSPECIFIED) @return The retrieved number or array of numbers, or null if unspecified and not found
1564 Retrieves a gamma instance by name from the dictionary object. @param name unique identifier for the gamma instance @return PDGamma object or null if not found
1565 Creates a unique key for the given kind and prefix. @param kind COSName indicating the type of resource @param prefix string prefix to use when generating the key @return unique COSName key or null if dictionary is null
1566 Sets an integer value at a specified index in this array. @param index the position to set the value @param intVal the new integer value to be assigned
1567 Parses input string as a numeric value, returning a COSNumber instance. @param number String representation of numeric value @return COSNumber object or throws IOException if not a valid number
1568 Appends a child element to the PDF structure with the specified MCID. @param mcid non-negative unique identifier for the child element
1569 Retrieves the COSBase representation of the degrees value. @return COSInteger instance containing the degrees value
1570 Parses a hexadecimal string from the source, handling whitespace and line breaks. @return COSString object containing the parsed byte data or null if invalid
1571 Default constructor initializing rectangle with zero coordinates and dimensions.
1572 Initializes PDRectangle with default coordinates (0,0) and specified dimensions. @param width rectangle width @param height rectangle height
1573 Returns a rectangle representing the bounding box of the cloudy border. @return PDRectangle object describing the bounds
1574 Computes the difference rectangle between the annotation and bounding box. @return PDRectangle object representing the difference
1575 Calculates a padded PDRectangle by adjusting the original rectangle's coordinates and dimensions. @param rectangle original rectangle @param padding amount of padding to add on each side @return new padded PDRectangle object
1576 Creates a new PDRectangle by applying the specified differences to an existing one. @param rectangle original rectangle @param differences array of 4 floats representing differences in x, y, width, and height @return modified PDRectangle or original if differences are invalid
1577 Applies a set of geometric differences to the specified PDRectangle. @param rectangle original PDRectangle object @param differences array of 4 float values representing the differences in x, y, width, and height respectively @return new PDRectangle object with applied differences or the original if invalid input
1578 Applies specified padding to a given rectangle. @param box original rectangle @param padding amount of padding to apply @return new rectangle with applied padding
1579 Initializes PDFXRefStream instance with COSDocument. @param cosDocument document containing cross-reference data
1580 Creates a new PDObjectStream instance from the given PDDocument. @param document PDDocument object to create stream for @return new PDObjectStream instance
1581 Initializes a new instance of the class with the given PDDocument. @param document the parent PDF document
1582 Initializes PDStream instance from COSDocument. @param document COSDocument object to create streams from
1583 Initializes a PDStream instance by creating a COSStream from the given PDDocument and transferring data from an InputStream to the created OutputStream. @param doc the parent PDDocument @param input the input stream containing data to be transferred @param filters optional filter list to apply during writing
1584 Creates a new COSStream instance and adds it to the collection for later closure. @param document PDDocument object @param rawInput InputStream containing raw data @return COSStream object representing the created stream
1585 Encodes input data stream into output stream using provided parameters. @param input input data stream @param encoded output stream for encoded data @param parameters filter settings and compression parameters
1586 Default constructor for PDDefaultAttributeObject instance creation.
1587 Initializes user attribute object with default owner set to USER_PROPERTIES.
1588 Default constructor for PDStandardAttributeObject instance creation.
1589 Initializes an empty outline node instance.
1590 Initializes a PDVariableText instance with the given AcroForm. @param acroForm the parent interactive form
1591 Initializes a PDExportFormatAttributeObject instance from a given COSDictionary. @param dictionary COSDictionary object to be wrapped
1592 Retrieves the appearance stream associated with this entry. @return PDAppearanceStream object or null if not a stream
1593 Retrieves the sub-dictionary of appearance streams. @return Map of COSName to PDAppearanceStream objects
1594 Creates a PDXObject instance from the given COSBase and resources. @param base underlying COSBase object @param resources associated PDResources object @return PDXObject instance or null if base is null @throws IOException for invalid object type or subtype
1595 Adds a TrueType font to the list of fonts. @param ttfFile the TrueType font file
1596 Initializes a PDMeshBasedShadingType instance from a COSDictionary. @param shadingDictionary PDF shading properties
1597 Initializes a PDMeshBasedShadingType instance from a COSDictionary. @param shadingDictionary PDF shading properties
1598 Retrieves a named destination from the PDF document. @param name unique identifier for the destination @return PDDestination object or null if not found
1599 Retrieves the destination from the COS object dictionary. @return PDDestination object or null if not supported
1600 Retrieves the destination associated with this PDActionGoTo instance. @return PDDestination object representing the navigation destination
1601 Retrieves the destination dictionary object. @return PDDestination object or null if not supported
1602 Retrieves the destination dictionary object. @return PDDestination object or null if not supported
1603 Initializes a PDComboBox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1604 Initializes a PDListBox instance with the given AcroForm and field dictionary. @param acroForm the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1605 Initializes COSParser with provided PDF source and encryption details. @param source the PDF source to parse @param password encryption password (if applicable) @param keyStore decryption key store (if applicable) @param keyAlias alias for decryption key (if applicable)
1606 Creates an output stream with no filters. @throws IOException if an error occurs
1607 Writes byte array to a PDF appearance stream. @param data content to be written @param appearanceStream target stream for writing
1608 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object @param compress whether to apply compression during writing
1609 Sets the text matrix using the specified affine transformation. @param matrix Matrix object containing transformation data @throws IOException if an I/O error occurs during operation
1610 Concatenates a specified affine transformation to the current graphics state. @param matrix Transformation matrix to apply
1611 Retrieves the bounding box of the marked content artifact. @return PDRectangle object or null if not available
1612 Retrieves the bounding box rectangle for the PDF content. @return PDRectangle object or null if not found
1613 Retrieves the rectangle annotation associated with this FDFAnnotation. @return PDRectangle object or null if not found
1614 Retrieves fringe dimensions as a PDRectangle object. @return PDRectangle object if fringe exists, or null otherwise
1615 Retrieves the fringe rectangle associated with this annotation circle. @return PDRectangle object representing the fringe or null if not found
1616 Retrieves the fringe rectangle of an annotation. @return PDRectangle object or null if not found
1617 Retrieves the fringe dimensions as a PDRectangle object. @return null if not found or invalid
1618 Retrieves the font bounding box rectangle from the dictionary. @return PDRectangle object representing font bounds or null if not found
1619 Retrieves the font bounding box (bbox) from the dictionary. @return PDRectangle object representing the bbox or null if not found
1620 Retrieves the bounding box of this form XObject. @return PDRectangle object representing the bounding box or null if not found
1621 Retrieves the bounding box of this tiling pattern. @return PDRectangle object representing the bounding box or null if not found
1622 Retrieves the bounding box of the shading. @return PDRectangle object representing the box or null if not set
1623 Retrieves the PDRectangle object associated with this annotation. @return PDRectangle object or null if not properly defined
1624 Calculates the rectangle difference for the free text annotation. @return PDRectangle object representing the difference or null if not found
1625 Retrieves the rectangle difference associated with this annotation. @return PDRectangle object or null if not found
1626 Retrieves the bounding box (BBOX) as a PDRectangle object. @return PDRectangle object representing the bounding box or null if not found
1627 Retrieves the rectangle associated with this bead. @return PDRectangle object or null if not found
1628 Initializes and sets the line dash pattern from an array of dash lengths and a phase value. @param array array of dash lengths @param phase initial dash phase (may be adjusted according to PDF 2.0 specification)
1629 Retrieves the line dash pattern associated with this graphics state. @return PDLineDashPattern object or null if not found
1630 Retrieves a stencil image from the given PDImage, applying the specified Paint. @param pdImage source image @param paint paint object to apply @return BufferedImage representation of the stencil image or null if not available
1631 Retrieves and creates a transformation matrix from the form object's COS dictionary. @return Matrix instance representing the transformation matrix
1632 Retrieves the pattern's matrix representation. @return Matrix object or null if not found
1633 Retrieves and returns the matrix associated with this PDShadingType1 instance. @return A Matrix object representing the transformation matrix
1634 Retrieves an inheritable attribute from the given node and its ancestors. @param node COSDictionary object to search within @param key unique identifier for the attribute @return The COSBase object or null if not found
1635 Retrieves a boolean value from the dictionary using the specified key. @param key primary key to search for @param defaultValue default boolean value if key is absent @return boolean value associated with the key or default value
1636 Retrieves integer value from dictionary using provided key. @param key primary key to search for @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
1637 Retrieves integer value from dictionary using firstKey or secondKey. @param firstKey primary key to search for @param secondKey fallback key if first is not found
1638 Initializes a PDInlineImage instance with given decoding parameters, image data, and resources. @param parameters COSDictionary containing decoding settings @param data raw byte data of the image @param resources PDResources object for accessing additional resources
1639 Returns the file suffix based on the image filters. @return Suffix (e.g. "jpg", "tiff", or "png") depending on filter presence
1640 Retrieves a list of COSObject instances matching specific dictionary types. @param type1 first object type to match @param type2 second object type to match @return List of COSObject instances or empty list if none found
1641 Retrieves Unicode representation of a given code point. @param code input code point value @param customGlyphList override glyph list (not used)
1642 Checks if the PDF document has an encryption dictionary. @return true if encrypted, false otherwise
1643 Performs the parsing of the FDF document, returning an FDFDocument object. @throws IOException if an I/O error occurs during parsing
1644 Retrieves the default AcroForm object associated with this PDF document. @return PDAcroForm object or null if not found
1645 Retrieves a PDColorSpace object by its name. @param name unique identifier for the color space @param wasDefault whether the color space is default or not @return The PDColorSpace object or null if not found
1646 Checks if a color space exists with the given name. @param name unique identifier for the color space @return true if found, false otherwise
1647 Retrieves an extended graphics state by name. @param name unique identifier for the extended graphics state
1648 Determines whether the given COSName represents an image XObject. @param name unique identifier for the resource type
1649 Retrieves color space names. @return Set view of contained COSName objects or an empty set if not found
1650 Retrieves x-object names associated with this PDF resource. @return Set view of contained COSName objects or an empty set if not found
1651 Retrieves font names from resources. @return Set view of contained COSName objects or an empty set if not found
1652 Retrieves names associated with properties resource type. @return Set view of contained COSName objects or an empty set if not found
1653 Retrieves shading names. @return Set view of contained COSName objects or an empty set if not found
1654 Retrieves pattern names from resources. @return Set view of contained COSName objects or an empty set if not found
1655 Retrieves set of names associated with extended graphics states. @return Set view of contained COSName objects or an empty set if not found
1656 Retrieves the standard crypt filter dictionary. @return The COSDictionary object or null if not found or dereferenced
1657 Returns the default crypt filter dictionary. @return COSDictionary object or null if not found
1658 Retrieves the character procedure for a given font code. @param code unique font code @return PDType3CharProc object or null if not found
1659 Retrieves the rollover appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
1660 Retrieves the down appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
1661 Retrieves first child outline item. @return PDOutlineItem object or null if not found
1662 Retrieves the last child outline item from this node. @return PDOutlineItem object or null if no children exist
1663 Retrieves and returns the signature associated with this PDSignatureField. @return PDSignature object or null if not found
1664 Retrieves the value associated with a given index from this node or its child nodes. If found, returns the corresponding COSObjectable instance; otherwise, returns null. @param index unique identifier of the value to retrieve @return Object instance representing the retrieved value or null if not found
1665 Retrieves the number of output parameters for this PDFunction. @return number of output values or 0 if unknown
1666 Retrieves the output range for a given value. @param n input value
1667 Clips input values to specified ranges based on the function's domain and range values. @param inputValues array of float values to be clipped @return modified array with clipped values within the defined ranges, or original input if no valid ranges exist
1668 Calculates the number of input parameters based on domain values. @return Number of input parameters or -1 if not calculated
1669 Retrieves the domain values and creates a PDRange instance for input. @return PDRange object or null if not set
1670 Calculates the sample index based on the provided coordinate vector and size values. @param vector input coordinate vector
1671 Retrieves the decode range for a given parameter number. @param paramNum index of the parameter @return PDRange object or null if not found
1672 Retrieves encoding array and creates a PDRange instance for parameter 'n'. @param n parameter index
1673 Checks if the top edge of the marked content artifact is attached. @return true if attached, false otherwise
1674 Checks if the bottom edge of the artifact's content is attached. @return true if attached, false otherwise
1675 Checks if the left edge of the marked content artifact is attached.
1676 Checks if the right edge of marked content is attached.
1677 Initializes a new instance of the PDCIDFont class. @param fontDictionary COS dictionary containing font metrics @param parent PDType0Font parent font object
1678 Initializes a DictionaryEncoding instance from the provided font encoding dictionary. @param fontEncoding COSDictionary object representing the font encoding
1679 Initializes a new instance of DictionaryEncoding with the provided font encoding and settings. @param fontEncoding COSDictionary containing font encoding information @param isNonSymbolic whether the font is non-symbolic (true) or symbolic (false) @param builtIn Encoding object for the font's built-in encoding, or null if not applicable
1680 Initializes a ShadingContext instance with the provided PDFShading, ColorModel, AffineTransform, and Matrix. @param shading the PDFShading object to be managed @param cm the color model for the shading context @param xform the affine transform for the shading context @param matrix the matrix for the shading context
1681 Retrieves the PDRange object for a given parameter number. @param paramNum unique identifier of the parameter
1682 Retrieves the signed content from a PDF file. @param pdfFile InputStream containing the PDF file @return byte[] representing the signed content or null if not found
1683 Retrieves signed content from a PDF file. @param pdfFile input byte array representing the PDF document @return byte array containing the signed content or null if not found
1684 Retrieves the revision value from the dictionary. @return The revision number or default value (-1L) if not found
1685 Retrieves minimum revision value from the dictionary. @return The minimum revision as a long value
1686 Creates a view of the underlying data stream with optional filtering. @return RandomAccessRead object containing filtered or raw input data
1687 Retrieves the numeric value associated with the given key. @param name unique identifier for the dictionary object
1688 Retrieves the conversion factor from the internal COSDictionary object.
1689 Retrieves the leader length value from the annotation dictionary.
1690 Retrieves the leader extension value from the annotation. @return Leader extend length
1691 Retrieves leader offset from line annotation. @return Leader offset value
1692 Retrieves the V value from the seed dictionary. @return The float value associated with key 'V'
1693 Retrieves the CYX measurement value from the COSDictionary. @return CYX float value
1694 Retrieves the numeric value associated with a given key. @param name unique identifier for the dictionary object @param defaultValue default value to return if not found or null
1695 Retrieves the intensity of the border effect. @return intensity value (float)
1696 Computes the font height for a given PDFont object. @param font The PDFont object to compute the height for @return The computed font height as a float value
1697 Retrieves default position vector based on CID. @param cid unique Character Identifier
1698 Retrieves a PDPropertyList instance by its name. @param name unique identifier for the properties list @return PDPropertyList object or null if not found
1699 Retrieves the optional content dictionary as a PDPropertyList instance. @return PDPropertyList object or null if not found
1700 Retrieves the optional content dictionary. @return PDPropertyList object or null if not found
1701 Retrieves the collection of optional content groups (OCGs) from the dictionary. @return A List of PDPropertyList objects representing the OCGs or an empty list if not found
1702 Retrieves the Optional Content dictionary, creating a PDPropertyList instance if found. @return PDPropertyList object or null if not present
1703 Validates and corrects cross-reference offsets by dereferencing object keys. If validation fails, attempts to replace with brute-force search results.
1704 Saves FDF document to a file. @param fileName File path to write data to
1705 Removes the first occurrence of specified object from this list. @param o Object to be removed @return true if removal was successful, false otherwise
1706 Removes element at specified index from the collection. @param index position of element to be removed (0-based)
1707 Removes a specified COSBase object from the array. If not found, recursively searches for a matching COSObject. @param o COSBase object to be removed @return true if object was successfully removed, false otherwise
1708 Removes a specified user property from the document's structure. @param userProperty PDUserProperty object to be removed
1709 Removes a subject from the certificate's dictionary. @param subject byte array representing the subject to be removed
1710 Removes a specified key usage extension from the certificate's KEY_USAGE attribute. @param keyUsageExtension identifier of the key usage to be removed
1711 Removes the specified issuer from the ISSUER attribute of the certificate. @param issuer byte array representing the issuer's name
1712 Removes a specified OID from the certificate's OID array. @param oid byte array representing the OID to be removed
1713 Clears all key-value pairs from this COS dictionary mapping.
1714 Removes a dictionary item by its unique PDF object name. @param key the PDF object identifier as a String @return the removed value or null if not found
1715 Collects and includes COSDictionary objects in the increment, handling their children and descendants. @param dictionary COSDictionary object to collect @return true if collection requires parent update, false otherwise
1716 Collects a COSObject into the increment, handling relationships with other objects and determining whether to include or exclude it. @param object The COSObject to collect
1717 Sets the origin document state with default dereferencing flag. @param originDocumentState new origin document state
1718 Retrieves the upper limit value from the associated COSArray object. @return String representation of the upper limit, or null if not found
1719 Retrieves the lower limit value from the associated COSArray object.
1720 Retrieves standard attribute name as a string. @param name unique identifier for the dictionary object
1721 Retrieves the rendering intent from the dictionary object. @return RenderingIntent object or null if not found
1722 Retrieves the represented name associated with this action. @return The "N" name value or null if not found
1723 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param key unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
1724 Retrieves the guideline style from the dictionary. @return string representation of the guideline style
1725 Retrieves the icon name from the annotation's dictionary.
1726 Retrieves the attachment name from the COS dictionary object. @return attachment name as a string
1727 Retrieves the line ending style from the annotation's dictionary. @return Line ending style as a string
1728 Retrieves the highlight mode from the COS dictionary. @return Highlight mode string (inverted) or default value if not found
1729 Retrieves the reply type as a string from the COS object's dictionary. @return The reply type (RT_REPLY) or its default value if not found
1730 Retrieves and returns the represented name of this rubber stamp annotation.
1731 Retrieves the represented name of this annotation.
1732 Retrieves the highlighting mode as a string from the dictionary object associated with COSName.H. @return Highlighting mode ("I" by default if not found)
1733 Retrieves the border style as a string from the COSDictionary object. @return Border style (e.g., solid) or default value if not found
1734 Retrieves the type attribute from the COSDictionary object. @return Type string or "ExData" if not found
1735 Retrieves the transition style. @return style name as a string
1736 Retrieves the dimension of the transition as a string. @return Dimension name (e.g. "Width") or default value if not found
1737 Retrieves the motion style of the transition. @return the represented name as a string from the dictionary object associated with the given key
1738 Retrieves non-full-screen page mode preference. @return string representation of the preference or "UseNone" if not found
1739 Retrieves the user's preferred reading direction. @return "L2R" or "R2L" string indicating left-to-right or right-to-left reading order
1740 Retrieves the viewer area preference. @return string representation of view area or default value if not found
1741 Retrieves the view clip preference as a string. @return The represented name as a string from the dictionary object associated with the given key
1742 Retrieves the print area settings from viewer preferences. @return string representation of print area (CropBox) or default value if not found
1743 Retrieves the print clip setting from viewer preferences. @return string representation of the print clip mode
1744 Retrieves print scaling preference. @return Print scaling setting as a string, or default value if not set
1745 Validates and calculates the cross-reference table offset. @param startXRefOffset start position of cross-reference table @return valid offset or -1 if not found
1746 Checks if this PDAttributeObject has no elements but a valid owner.
1747 Retrieves and returns the parent structure node. @return PDStructureNode object or null if not found
1748 Creates an object from the given COSBase, using its type to determine the specific object class. @param kid the COSBase to create an object from @return The created object or null if not creatable
1749 Initializes a new instance of PDEncryption with the given COSDictionary. @param dictionary COSDictionary object containing encryption settings
1750 Retrieves the configured SecurityHandler instance. @return SecurityHandler object, or throws IOException if not set
1751 Retrieves a list of FDF annotations from the COS dictionary. @return List of FDFAnnotation objects or null if not found
1752 Checks if the character set of a CID font matches the provided information. @param cidSystemInfo PDCIDSystemInfo object containing registry and ordering @param info FontInfo object with code page range and postscript name @return true if character sets match, false otherwise
1753 Checks if this DeviceN color space has N-channel attributes. @return true if 'NChannel' subtype found, false otherwise
1754 Retrieves the open action associated with the document, returning a PDAction or PDDestination object based on its type. @return PDAction if the open action is a dictionary, PDDestination otherwise, or null if not found
1755 Retrieves the action associated with this field. @return The PDAction object or null if not found
1756 Retrieves a map of JavaScript actions from the COSDictionary. @return A map of JavaScript actions with names as keys or null if not found
1757 Retrieves the action associated with key F from the actions dictionary. @return PDAction object or null if not found
1758 Retrieves a PDAction object associated with the E key. @return PDAction object or null if not found
1759 Retrieves a PDAction object associated with the 'X' key. @return The PDAction object or null if not found
1760 Retrieves a PDAction object associated with the 'D' key. @return The PDAction object or null if not found
1761 Retrieves a PDAction object associated with the 'U' key. @return The PDAction object or null if not found
1762 Retrieves the FO action definition. @return PDAction object or null if not found
1763 Retrieves and creates a PDAction object for the 'BL' key. @return PDAction object or null if not found
1764 Retrieves a PDAction object associated with the PO key. @return PDAction object or null if not found
1765 Retrieves the PC action definition. @return The PDAction object or null if not found
1766 Retrieves the PV action definition. @return The PDAction object or null if not found
1767 Retrieves PDAction object associated with PI key. @return The PDAction object or null if not found or dereferenced
1768 Retrieves a WC action from the catalog. @return PDAction object or null if not found
1769 Retrieves the action associated with 'WS' key from catalog. @return PDAction object or null if not found
1770 Retrieves a PDAction object associated with the 'DS' key. @return The PDAction object or null if not found
1771 Retrieves the PDAction associated with the 'WP' key from the actions catalog. @return The PDAction object or null if not found
1772 Retrieves the PDAction associated with the DP key. @return PDAction object or null if not found
1773 Retrieves the action associated with key 'K'. @return PDAction object or null if not found
1774 Retrieves a PDAction object associated with the 'F' key. @return The PDAction object or null if not found
1775 Retrieves the action associated with key V. @return PDAction object or null if not found
1776 Retrieves and creates a PDAction object for the 'C' key. @return PDAction object or null if not found or dereferenced
1777 Retrieves the PDAction associated with key 'O' from the dictionary. @return PDAction object or null if not found
1778 Retrieves a PDAction object associated with key 'C'. @return The PDAction object or null if not found or dereferenced
1779 Retrieves the PDAction object associated with key A from the COSDictionary. @return The PDAction object or null if not found
1780 Retrieves and parses the annotation action associated with this widget. @return The parsed PDAction object or null if not found
1781 Retrieves the COSDictionary object associated with key A and creates a PDAction object. @return PDAction object or null if not found or dereferenced
1782 Retrieves string value associated with given metadata key. @param propertyKey unique identifier for the metadata dictionary
1783 Retrieves custom metadata value by field name. @param fieldName unique identifier for the dictionary object
1784 Retrieves string representation from dictionary object associated with given key. @param name unique identifier for dictionary object
1785 Retrieves the 'Base' string associated with URI actions. @return Base string or null if not found
1786 Retrieves the PDF document version from the properties dictionary. @return string representation of the document version
1787 Retrieves units formatting option from COSDictionary. @return string representation of units or null if not found
1788 Retrieves string representation from dictionary object associated with given PDF name. @param key unique identifier for dictionary object @param defaultValue default string to return if key is not found
1789 Retrieves a string representation from the embedded dictionary object associated with the given key. @param embedded Embedded dictionary identifier @param key unique identifier for the string object within the embedded dictionary @param defaultValue default string to return if key is not found
1790 Retrieves operation type parameter. @return Operation type (e.g. OPEN) or default value if not found
1791 Retrieves default appearance string from form dictionary.
1792 Retrieves the file name from various embedded file systems. @return The file's name as a string, or null if not found in any system
1793 Checks if an optional content group exists by name. @param groupName the name of the group to search for @return true if the group is found, false otherwise
1794 Retrieves the fully qualified name of the field, including its parent's name if applicable. @return fully qualified field name as string or null if no parent
1795 Returns list of options strings for export purposes. @return List of option strings (same as getOptions())
1796 Encrypts or decrypts PDF document data using various algorithms (AES256, AES, RC4). @param objectNumber unique identifier of the PDF document @param genNumber generation number associated with the object @param data InputStream containing data to be encrypted or decrypted @param output OutputStream to write the encrypted or decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
1797 Computes the encrypted key for a PDF document based on the provided parameters and encryption revision. @param password user password @param o unknown byte array @param u user's encryption data @param oe owner's encryption data @param ue encrypted key for user @param permissions document permissions @param id unique document identifier @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @param isOwnerPassword true if owner password, false otherwise @return the computed and encrypted key as a byte array
1798 Verifies user password based on encryption revision. @param password provided password as a byte array @param user expected user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if password is valid, false otherwise
1799 Retrieves FontBoxFont object by PostScript name and FontFormat. @param format FontFormat to match @param postScriptName unique PostScript font identifier @return FontBoxFont object or null if not found or incompatible format
1800 Converts a COSString to a Calendar instance. @param text the input string to convert @return a Calendar object or null if invalid input
1801 Writes a COSString to an OutputStream. @param output OutputStream to write to @param cosString COSString object being written
1802 Shows text content using the current font and settings. @throws IllegalStateException if beginText() or setFont() have not been called
1803 Initializes a new instance of the PageDrawer class with specified parameters. @param parameters constructor-specific initialization data, including page, renderer, subsampling allowed, destination, rendering hints, and image downscaling optimization threshold.
1804 Retrieves the color associated with this annotation.
1805 Retrieves the border color from the appearance characteristics dictionary.
1806 Retrieves the background color. @return PDColor object representing the background color
1807 Sets the high value in the color table. @param high new high value
1808 Sets the target page number to navigate within the PDF document. @param pageNumber unique page identifier
1809 Parses a COS string from the PDF source, handling whitespace and line breaks. @return COSString object containing the parsed byte data or null if invalid
1810 Retrieves the contents of a digital signature within a PDF file. @param pdfFile InputStream to read from
1811 Retrieves the contents of a digital signature within a PDF file. @param pdfFile byte array representing the entire PDF document @return byte array representation of the signature contents or null if invalid
1812 Initializes PDImmutableRectangle with specified dimensions. @param width rectangle width @param height rectangle height
1813 Returns the bounding box of the cloudy border. @return PDRectangle object describing the bounds
1814 Initializes a new PDMetadata instance with the given PDDocument. @param document parent PDF document
1815 Initializes a new instance of the class with the given PDF document. @param document the parent PDF document
1816 Initializes a PDXObject with the given document and subtype. @param document parent PDF document @param subtype graphical object type (e.g., Form XObject)
1817 Initializes an image object from the given PDDocument. @param document source PDF document
1818 Initializes a PDStream instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param input the input stream containing data to be transferred
1819 Initializes a PDStream instance from a PDDocument and an InputStream with the given filter. @param doc parent PDDocument @param input input stream containing data to be transferred @param filter optional filter to apply during writing
1820 Initializes a PDStream instance with given PDDocument and optional filter list. @param doc the parent PDDocument @param input the input stream containing data to be transferred @param filters optional filter list to apply during writing
1821 Constructs a PDImageXObject instance from the provided parameters. @param document PDDocument object @param encodedStream InputStream containing raw image data @param cosFilter COSBase filter object @param width new width value in pixels @param height new height value in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace object or null to clear
1822 Initializes PDLayoutAttributeObject with default layout owner.
1823 Initializes PDListAttributeObject with default list owner.
1824 Initializes PDPrintFieldAttributeObject with print field ownership.
1825 Initializes a new instance of PDTableAttributeObject with default table owner.
1826 Creates a PDAttributeObject instance based on the name of the attribute owner. @param dictionary COSDictionary object containing attribute information @return PDAttributeObject instance or PDDefaultAttributeObject if unknown owner
1827 Retrieves the normal appearance stream of this annotation. @return PDAppearanceStream object or null if not found
1828 Retrieves the on-value of a checkbox. @return String value or empty string if not found
1829 Retrieves the transparency group associated with this soft mask. @return PDTransparencyGroup object or null if not found
1830 Finds a named destination page in the PDF document. @param namedDest PDNamedDestination object to search for @return PDPageDestination object or null if not found
1831 Initializes COSParser with provided PDF source and default encryption settings. @param source the PDF source to parse
1832 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array) @param decryptionPassword password for encrypted PDFs @param keyStore keystore containing encryption keys @param alias alias for encryption key in the keystore
1833 Initializes a new PDAppearanceContentStream instance with the given appearance and output stream. @param appearance PDAppearanceStream object
1834 Initializes a new PDFormContentStream instance with the given form object. @param form PDFormXObject object containing the form's content stream and resources
1835 Initializes a new PDPageContentStream instance with the given document and appearance stream. @param doc PDDocument object @param appearance PDAppearanceStream object
1836 Initializes a new PDPatternContentStream instance from a PDTilingPattern. @param pattern Tiling pattern object
1837 Draws an arrow shape at the specified position and length. @param cs PDAppearanceContentStream object for rendering @param x x-coordinate of the arrow's tip @param y y-coordinate of the arrow's tip @param len length of the arrow arm
1838 Draws a shape based on the provided parameters. @param lineWidth line width @param hasStroke whether to draw with stroke @param hasFill whether to fill the shape
1839 Draws a diamond shape in the PDF content stream. @param cs AppearanceContentStream object @param x Center x-coordinate of the diamond @param y Center y-coordinate of the diamond @param r Radius of the diamond
1840 Draws a circle on the PDF content stream. @param cs appearance content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle
1841 Draws a circle using cubic Bezier curves. @param cs appearance content stream @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle
1842 Draws a paperclip shape on the PDF content stream. @param contentStream PDAppearanceContentStream object for drawing
1843 Sets line width for PDF appearance content stream on demand. @param lineWidth desired line width (default: 1)
1844 Retrieves the tiling pattern image based on the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object defining the color space @param color PDColor object specifying the pattern color @param xform AffineTransform matrix describing the transformation @param anchorRect Rectangle2D object representing the anchor rectangle @return BufferedImage object containing the rendered image, or null if failed
1845 Calculates and returns the anchor rectangle of a tiling pattern. @param pattern PDTilingPattern object to fetch the BBox, XStep, YStep, scaling factors, and matrix from @return Rectangle2D representing the anchor rect with scaling applied or null if not found
1846 Retrieves the stencil image using the specified Paint. @param paint object to apply
1847 Extracts a raw WritableRaster representation from the specified PDImage. @param pdImage input PDF image @return WritableRaster object or throws IOException on failure
1848 Converts a PDImage to a BufferedImage representation, applying color key mask if provided and handling clipping and subsampling. @param pdImage the image to convert @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor @param colorKey COSArray containing color key values (null for no mask) @return BufferedImage object or null if conversion fails
1849 Retrieves the resources associated with this page. @return PDResources object or null if not found
1850 Retrieves the page's media box dimensions and coordinates. @return The PDRectangle object representing the media box, or a default value if not found
1851 Retrieves the rotation of this page in degrees. @return Rotation angle, or 0 if not specified
1852 Retrieves a boolean value from the dictionary using the specified key. @param key primary key to search for @param defaultValue default boolean value if key is absent
1853 Checks if file specification is volatile. @return true if volatile, false otherwise
1854 Checks if the user property is hidden. @return true if hidden, false otherwise
1855 Checks if metadata encryption is enabled. @return true by default and retrievable from the dictionary
1856 Retrieves caption presence status. @return true if caption is present, false otherwise
1857 Determines if icons should scale to fit annotations. @return true if scaling is enabled, false otherwise
1858 Checks if renaming is enabled based on template settings. @return true if renaming is enabled, false otherwise
1859 Checks if the transparency group is isolated. @return true if isolated, false otherwise
1860 Checks if knockout is enabled. @return true if K key is present and set to true in the COSDictionary, false otherwise
1861 Retrieves anti-aliasing flag from shading dictionary. @return true if anti-aliasing is enabled, false otherwise
1862 Retrieves stroking overprint control from COSDictionary. @return boolean value indicating stroking overprint state
1863 Retrieves automatic stroke adjustment setting. @return true if stroke adjustment is enabled, false otherwise
1864 Retrieves alpha source flag from PDF dictionary. @return true if alpha source is enabled, false otherwise
1865 Retrieves text knockout flag from dictionary. @return true if text should be knocked out, false otherwise
1866 Retrieves the 'H' flag value from the action dictionary. @return boolean indicating whether elements are hidden or not
1867 Retrieves whether this sound action is synchronous. @return true if action executes synchronously, false otherwise
1868 Retrieves whether sound repeats or not. @return true if sound repeats, false otherwise
1869 Retrieves the mix mode of the sound action. @return boolean value indicating whether mixing is enabled
1870 Checks if the line annotation has a caption. @return true if a caption is associated with this line annotation, false otherwise
1871 Checks if the annotation is open. @return true if the annotation is open, false otherwise
1872 Retrieves pre-release flag from the dictionary. @return true if document is in pre-release mode, false otherwise
1873 Retrieves the non-E font no warn flag from the dictionary. @return boolean value associated with NON_EFONT_NO_WARN key or default value (true) if absent
1874 Retrieves trusted mode flag from the dictionary. @return boolean value indicating whether trusted mode is enabled
1875 Retrieves whether form fields should appear in need appearances. @return true if fields should appear, false otherwise
1876 Checks if the fly area transition style is opaque. @return true if opaque, false otherwise
1877 Hides toolbar based on user preference. @return true if toolbar should be hidden, false otherwise
1878 Hides menubar based on viewer preferences. @return true if menubar is hidden, false otherwise
1879 Hides window UI based on viewer preferences. @return true if hiding is enabled, false otherwise
1880 Retrieves viewer preference to fit window when displaying PDF documents. @return true if fitting window is enabled, false otherwise
1881 Retrieves viewer preference to center window. @return true if centered, false otherwise
1882 Retrieves whether to display document title. @return true if enabled, false otherwise
1883 Retrieves integer value from an embedded dictionary. @param embeddedDictionary dictionary containing the target key @param key primary key to search for @param defaultValue default value to return if not found @return The retrieved integer value or defaultValue
1884 Retrieves integer value from dictionary using provided key. @param key primary key to search for
1885 Retrieves integer value from dictionary using provided key. @param key primary key to search for
1886 Retrieves integer value from dictionary using provided key. @param key primary key to search for @param defaultValue default value to return if not found
1887 Retrieves flag value from dictionary using provided key and bit mask. @param field primary key to search for @param bitFlag bit mask to apply to retrieved integer value
1888 Retrieves the total count of pages in the page tree. @return The number of pages or 0 if not found
1889 Retrieves the starting page number. @return The retrieved integer value (defaulting to 1 if not found)
1890 Retrieves order value from COS dictionary. @return The retrieved integer order value
1891 Retrieves the revision number from the PDF document structure.
1892 Retrieves document length from cryptographic filter dictionary. @return Document length in bytes or default value if not found
1893 Retrieves the PDF encryption version from the security handler. @return The encryption version as an integer
1894 Retrieves length value from dictionary. @return The retrieved integer length or default (40)
1895 Retrieves document revision from dictionary. @return The retrieved revision number
1896 Retrieves document permissions from security handler. @return integer value representing document's P flag
1897 Retrieves and returns justification value from annotation. @return justification string or empty if not found
1898 Retrieves font flags from the dictionary. @return The retrieved flag value or 0 if not found
1899 Creates a PDAbstractPattern instance based on the provided COSDictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for accessing resources @return PDAbstractPattern object or throws IOException if unknown pattern type is encountered
1900 Retrieves the paint type of this tiling pattern. @return The integer value representing the paint type or 0 if not found
1901 Retrieves tiling type from PDF dictionary. @return Tiling type integer value
1902 Creates a PDShading instance based on the provided COSDictionary. @param shadingDictionary dictionary containing shading properties
1903 Retrieves bits per flag value from PDF dictionary. @return The retrieved value or -1 if not found
1904 Retrieves number of vertices per row from dictionary. @return The retrieved integer value or -1 if not found
1905 Retrieves the number of bits per color component. @return The bits per color component value or -1 if not found
1906 Retrieves the number of bits per coordinate for shaded triangles. @return The bits per coordinate value or -1 if not initialized
1907 Retrieves action flags from dictionary. @return Integer value of FLAGS or default 0 if not found
1908 Retrieves action flags from the dictionary. @return integer value of action flags or default 0 if not found
1909 Retrieves page number from dictionary. @return The retrieved integer value or -1 if not found
1910 Retrieves annotation index from dictionary. @return The retrieved index or -1 if not found
1911 Retrieves annotation flags from underlying COSDictionary. @return integer value representing annotation flags
1912 Retrieves Q value from annotation dictionary. @return The retrieved integer value or default 0 if not found
1913 Retrieves annotation rotation setting. @return Rotation value in degrees or default (0) if not found
1914 Checks if timestamp is required based on dictionary value. @return true if timestamp is required, false otherwise
1915 Retrieves the count of open child outline items.
1916 Retrieves integer value of Q from dictionary. @return The retrieved integer value or default 0 if not found
1917 Retrieves and returns the top index of displayed items. @return The current top index value
1918 Retrieves COSObject instances by specified dictionary type. @param type object type to match
1919 Removes cached page resources from the resource cache.
1920 Retrieves a PDColorSpace object by its name. @param name unique identifier for the color space
1921 Retrieves the embedded file object from its dictionary. @return PDEmbeddedFile object or null if not found
1922 Retrieves the embedded file specification for DOS from the dictionary. @return PDEmbeddedFile object or null if not found
1923 Retrieves embedded file for Mac from dictionary. @return PDEmbeddedFile object or null if not found
1924 Retrieves the embedded file for Unix from the dictionary. @return PDEmbeddedFile object or null if not found
1925 Retrieves the embedded file with Unicode content. @return A PDEmbeddedFile object or null if not found
1926 Initializes a new AxialShadingContext instance based on provided shading, color model, transform, matrix, and device bounds. Calculates domain, extend values, and sets up transformation matrices for raster image generation. @param shading PDShadingType2 object representing the axial shading type @param colorModel ColorModel object describing the color mapping @param xform AffineTransform instance used to transform user space coordinates @param matrix Matrix object containing the transformation matrix values @param deviceBounds Rectangle object specifying the device bounds @throws IOException if an I/O error occurs during initialization
1927 Initializes a new RadialShadingContext instance with specified parameters. @param shading PDShadingType3 object representing radial shading type @param colorModel ColorModel object describing color model for the context @param xform AffineTransform object representing coordinate transformation @param matrix Matrix object containing transformation matrix values @param deviceBounds Rectangle object specifying device bounds @throws IOException if an I/O error occurs during initialization
1928 Initializes a TriangleBasedShadingContext instance with the provided PDFShading and transformation data. @param shading the PDFShading object to be managed @param cm the color model for the shading context @param xform the affine transform for the shading context @param matrix the matrix for the shading context
1929 Constructs a Type1ShadingContext instance with specified parameters. @param shading PDShadingType1 object representing the shading type @param colorModel ColorModel object for color management @param xform AffineTransform object for transformation handling @param matrix Matrix object for matrix operations
1930 Initializes a PDFObjectStreamParser with the given COSStream and COSDocument. @param stream COSStream containing PDF objects @param document COSDocument associated with the object stream
1931 Initializes a PDCIDFontType0 instance from a COSDictionary and a PDType0Font parent. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font object representing the parent font @throws IOException if an error occurs during initialization
1932 Initializes a PDCIDFontType2 object with the given font dictionary, parent font, and TrueType font. If no TrueType font is provided, it will be retrieved from the font dictionary or substituted using the fallback mapping. @param fontDictionary COSDictionary containing font metadata @param parent PDType0Font parent font @param trueTypeFont TrueTypeFont to use (null for default) @throws IOException if an error occurs while reading embedded OTF or TTF
1933 Retrieves a CMap from the given COSBase object. @param base COSName for predefined CMap or COSStream for embedded CMap @return parsed CMap object or null if not found
1934 Writes the PDF document body, preserving origin object numbers and handling encryption. @param doc COSDocument object to write
1935 Saves FDF document to a file with specified name. @param fileName file path to write data to
1936 Collects a COSBase object into the increment, handling relationships and determining inclusion/exclusion. @param base The COSBase object to collect
1937 Sets the document's trailer dictionary, updating its update state accordingly. @param newTrailer new trailer dictionary to set
1938 Updates the origin document state with child updates. @param child update info to apply
1939 Retrieves the value associated with a given name from this node or its children. @param name unique identifier of the value to retrieve @return Value instance of type T, or null if not found
1940 Retrieves the represented name as a string from the dictionary object associated with the given key, returning the default value if not found. @param name unique identifier for the dictionary object @param defaultValue fallback string to return when the key is missing
1941 Retrieves border effect style from COSDictionary. @return Border style string (e.g. "solid") or default ("solid")
1942 Retrieves the root structure tree node. @return PDStructureTreeRoot object or null if not found
1943 Retrieves a list of child elements associated with the current structure node. @return List of Object instances representing the child nodes or an empty list if none found
1944 Retrieves the PDF document's encryption settings. @return PDEncryption object or null if not encrypted
1945 Prepares the document for decryption by initializing encryption and security handler. @throws IOException if an error occurs during the preparation process
1946 Reads and initializes the font's encoding information. @throws IOException if missing required CMap or invalid encoding
1947 Calculates the effective length of a Type 1 font segment. @param bytes input byte array @param length1 length of the first segment @return corrected length if invalid, otherwise original length
1948 Calculates the corrected length of a byte array slice. @param bytes the underlying byte array @param length1 starting index for the slice @param length2 ending index for the slice, validated and adjusted if necessary
1949 Retrieves fractional display format from COSDictionary. @return formatted string representation of fractional values
1950 Retrieves thousands separator from COSDictionary object associated with RT key. @return string representation of thousands separator or default comma if not found
1951 Retrieves decimal separator from COSDictionary object. @return decimal separator string or default if not found
1952 Retrieves label prefix string from COSDictionary. @return string representation of PS key or default space if not found
1953 Retrieves label suffix string from COSDictionary. @return string representation of label suffix
1954 Retrieves label position to value string from COS dictionary. @return string representation of label position to value
1955 Retrieves a string representation from the embedded dictionary object associated with the given key. @param embedded Embedded dictionary identifier @param key unique identifier for the string object within the embedded dictionary
1956 Retrieves a priority queue of font matches based on the given PDFontDescriptor and PDCIDSystemInfo. @param fontDescriptor PDFontDescriptor object containing relevant font information @param cidSystemInfo PDCIDSystemInfo object with character set registry and ordering (optional) @return PriorityQueue<FontMatch> containing matched font information, sorted by score
1957 Verifies the owner password for a PDF document based on its encryption revision. @param ownerPassword input byte array @param user expected user password as a byte array @param owner document contents @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if passwords match, false otherwise
1958 Parses input text into an instruction sequence. @param text the text to be parsed @return the constructed instruction sequence
1959 Decrypts the specified COSStream and its contents recursively. @param stream COSStream to decrypt @param objNum unique identifier of the PDF document object @param genNum generation number associated with the object
1960 Encrypts PDF document data in the given COSStream using various algorithms. @param stream COSStream instance containing the data to be encrypted @param objNum unique identifier of the PDF document @param genNum generation number associated with the object
1961 Decrypts a COSString instance using the encryptData method. @param string COSString instance to decrypt @param objNum unique identifier of the PDF document @param genNum generation number associated with the object @return decrypted COSString instance or original if decryption fails
1962 Encrypts a string by calling the generic encryption method with the string's byte representation. @param string COSString object to be encrypted @param objNum unique PDF document identifier @param genNum generation number associated with the object @return encrypted COSString object
1963 Verifies user password based on encryption revision. @param password provided password as a string @param user expected user password as a byte array @param owner owner password as a byte array @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if password is valid, false otherwise
1964 Finds a FontBoxFont object by PostScript name and attempts to match it with various font formats. @param postScriptName unique PostScript font identifier @return FontBoxFont object or null if not found or incompatible format
1965 Writes the content of a PDF page to the output stream. This method processes each article in the {@link charactersByArticle} collection, extracting and formatting text from each TextPosition object within it. The resulting formatted lines are then written to the output stream. @see #charactersByArticle
1966 Retrieves the date value associated with a given key. @param key unique identifier for the date object @return Calendar instance or null if not found or invalid input
1967 Writes a COSBase token to the PDF output stream. @param base COSBase object representing the token
1968 Writes a COSBase object to the specified OutputStream, handling various types of objects and compression. @param output target OutputStream for writing @param object COSBase object being written @param topLevel indicates whether this is a top-level object or an indirect reference
1969 Writes text with positioning information to output stream. @param textWithPositioningArray array of float and string values representing text position and content
1970 Displays formatted text in a PDF content stream. @param text input string to be displayed
1971 Creates a new instance of the PageDrawer class with specified parameters. @param parameters constructor-specific initialization data
1972 Initializes a PDFormXObject with the given parent PDF document. @param document parent PDF document
1973 Initializes PDMetadata instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param str input stream containing data to be transferred
1974 Initializes a PDStream instance from a PDDocument and an InputStream. @param doc the parent PDDocument @param str the input stream containing data to be transferred
1975 Initializes a PDEmbeddedFile instance from a PDDocument and an InputStream. @param doc parent PDDocument @param input input stream containing embedded file data @param filter optional filter to apply during writing
1976 Prepares a PDImageXObject instance from the provided parameters. @param document PDDocument object @param byteArray input image data as byte array @param width new width value in pixels @param height new height value in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial PDColorSpace object or null to clear @return Prepared PDImageXObject instance
1977 Initializes PDLayoutAttributeObject with default layout owner. @param owner unique identifier or reference to the layout
1978 Retrieves the revisions of attribute objects associated with this structure element. @return Revisions collection containing PDAttributeObject instances and their revision numbers
1979 Retrieves the appearance stream of the given annotation. @param annotation PDAnnotation object to fetch appearance for
1980 Adds font resources from an annotation's normal appearance stream to the AcroForm. @param acroFormResources PDResources object representing the AcroForm @param annotation PDAnnotation object containing the annotation with fonts
1981 Retrieves a set of "on" values associated with the button. @return Set of string representations or an empty set if no values are found
1982 Checks if the checkbox is currently checked.
1983 Sets the checkbox value to its on-state.
1984 Initializes a FileSystemFontProvider instance with a FontCache, scanning the local system for fonts and populating the cache. @param cache FontCache object to store font information
1985 Initializes FDFParser with specified input source. @param source the input source to parse
1986 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array) @param decryptionPassword password for encrypted PDFs
1987 Draws the appearance style of a PDF annotation line. @param style type of line to draw (e.g. LE_OPEN_ARROW, LE_CLOSED_ARROW) @param cs PDAppearanceContentStream object for rendering @param x x-coordinate of the line's position @param y y-coordinate of the line's position @param width length of the line @param hasStroke whether to draw with stroke @param hasBackground whether to fill the shape with background color @param ending whether to draw an open or closed arrow style
1988 Initializes a TilingPaint instance with the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param colorSpace PDColorSpace object defining the color space @param color PDColor object specifying the pattern color @param xform AffineTransform matrix describing the transformation
1989 Fetches an opaque image from the current PDImageXObject. @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor
1990 Fetches RGB image from PDImage with optional color key mask. @param pdImage the image to convert @param colorKey COSArray containing color key values (null for no mask)
1991 Pushes and retrieves resources for the specified content stream. @param contentStream Content stream object @return Parent resources object or null if not found
1992 Calculates the affine transformation matrix for overlaying a page. @param page PDPage object to be overlaid @param overlayMediaBox Media box dimensions of the overlay content @return AffineTransform matrix or null if invalid input
1993 Returns the rotated media box of a page, considering its rotation angle. @param page PDPage object @return Rotated PDRectangle object or original media box if no rotation
1994 Checks if the PDF document's marking status is true. @return true if marked, false otherwise
1995 Checks if user properties are marked in the PDF document. @return true if user properties are marked, false otherwise
1996 Checks if the PDF document has suspect flags.
1997 Checks if mouse position tracking is enabled. @return true if "IsMap" flag is set to true, false otherwise
1998 Checks if popup is open. @return true if visible, false otherwise
1999 Checks if 'Fixed Decimal' formatting is enabled. @return true if FD formatting is active, false otherwise
2000 Retrieves non-stroking overprint control from COSDictionary. @return boolean value indicating non-stroking overprint state
2001 Retrieves integer value from an embedded dictionary. @param embeddedDictionary dictionary containing the target key @param key primary key to search for
2002 Retrieves the denominator value from the internal COSDictionary. @return Denominator integer value
2003 Wraps the provided OutputStream with a PredictorOutputStream if necessary. @param out output stream for writing image data @param decodeParams dictionary containing decoding parameters @return wrapped OutputStream or original one if no wrapping is needed
2004 Retrieves parent structure IDs from the page's dictionary. @return Integer value representing parent structure ID(s)
2005 Retrieves bits per sample value. @return integer representation of bits per sample
2006 Retrieves the Marker Context Identifier (MCID) from the underlying COSDictionary object. @return MCID integer value
2007 Retrieves next key from parent tree. @return next integer value or -1 if not found
2008 Retrieves the Mark Content ID (MCID) from properties dictionary. @return MCID value or -1 if not found
2009 Retrieves line cap style from extended graphics state dictionary. @return integer value representing line cap style
2010 Retrieves line join style from PDF dictionary. @return integer value representing line join style
2011 Retrieves the parent structure ID of this annotation. @return The STRUCT_PARENT value from the associated COSDictionary
2012 Retrieves seed value from dictionary. @return Seed value as an integer
2013 Retrieves maximum length constraint from PDF field dictionary. @return Maximum allowed characters in the text input field
2014 Retrieves integer value from dictionary using provided key. @param name primary key to search for @param defaultValue default value to return if not found
2015 Checks if annotation is invisible. @return true if annotation's visibility flag indicates invisibility
2016 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
2017 Checks if annotation has been printed. @return true if printed, false otherwise
2018 Checks if 'no zoom' flag is set. @return true if no zoom is enabled, false otherwise
2019 Checks if annotation is not rotatable. @return true if not rotatable, false otherwise
2020 Checks if annotation has no view flag set. @return true if no view flag is enabled, false otherwise
2021 Checks if annotation is read-only. @return true if read-only, false otherwise
2022 Checks if annotation is locked. @return true if annotation is locked, false otherwise
2023 Checks if toggle no view flag is set. @return true if flag is set, false otherwise
2024 Checks if annotation content is locked. @return true if contents are locked, false otherwise
2025 Checks if annotation is invisible. @return true if invisible, false otherwise
2026 Checks if annotation is hidden. @return true if hidden, false otherwise
2027 Checks if annotation is printed. @return true if printed, false otherwise
2028 Checks if no zooming annotation flag is set. @return true if flag is set, false otherwise
2029 Checks if annotation has "no rotate" flag set. @return true if no rotation allowed, false otherwise
2030 Checks if annotation has no view flag set. @return true if flag is set, false otherwise
2031 Checks if annotation is read-only. @return true if annotation is read-only, false otherwise
2032 Checks if annotation is locked. @return true if locked, false otherwise
2033 Checks if toggle annotation has no view. @return true if no view flag is set, false otherwise
2034 Checks if contents are locked. @return true if locked, false otherwise
2035 Checks if filter is required based on flag value. @return true if filter is required, false otherwise
2036 Checks if sub-filter is required. @return true if sub-filter is needed, false otherwise
2037 Checks if digest method is required based on flag value. @return true if digest method is required, false otherwise
2038 Checks if V flag is required. @return true if V flag is required, false otherwise
2039 Checks if reason is required. @return true if reason is mandatory, false otherwise
2040 Determines if legal attestation is required based on flag value. @return true if legal attestation is required, false otherwise
2041 Checks if Add Rev Info is required based on flag value. @return true if required, false otherwise
2042 Checks if subject attribute flag is set.
2043 Checks if issuer flag is required.
2044 Checks if OID (Object Identifier) is required.
2045 Checks if subject Distinguished Name (DN) is required. @return true if subject DN is mandatory, false otherwise
2046 Checks if key usage flag is required.
2047 Checks if URL field is required. @return true if URL flag is set in dictionary
2048 Checks if outline item is formatted in italics. @return true if italic, false otherwise
2049 Checks if the outline item's text formatting includes bold. @return true if bold, false otherwise
2050 Checks if signatures exist in form.
2051 Checks if the form is in append-only mode. @return true if form allows only appending new data, false otherwise
2052 Checks if button is of push button type. @return true if push button, false otherwise
2053 Checks if button is a radio button. @return true if button is radio, false otherwise
2054 Checks if the choice field should be sorted. @return true if sorting is enabled, false otherwise
2055 Checks if choice field allows multi-selection. @return true if multi-select enabled, false otherwise
2056 Checks if spell-checking should be disabled. @return true if FF field has the specified flag set
2057 Checks if changes should be committed upon selection. @return true if commit on selection change is enabled, false otherwise
2058 Checks if choice field is a combo box. @return true if combo box, false otherwise
2059 Checks if combo box field is editable. @return true if editable, false otherwise
2060 Checks if field is read-only. @return true if field cannot be modified, false otherwise
2061 Checks if the field is required. @return true if the field has FF bit set with flag REQUIRED, false otherwise
2062 Checks if No Export flag is set. @return true if flag is enabled, false otherwise
2063 Checks if radio buttons operate in unison.
2064 Checks if text field allows multiline input. @return true if multiline input enabled, false otherwise
2065 Checks if this text field is a password input. @return true if password-protected, false otherwise
2066 Checks if file selection is enabled. @return true if file select flag is set, false otherwise
2067 Disables spell-checking for this text field. @return true if spell-checking is disabled, false otherwise
2068 Determines whether form field scrolling is disabled. @return true if scrolling is disabled, false otherwise
2069 Checks if field allows combination of multiple values. @return true if FF flag has COMB bit set, false otherwise
2070 Checks if text field supports rich text input. @return true if rich text enabled, false otherwise
2071 Prepares the document for decryption by setting up key length and decrypt metadata. Verifies recipient information and extracts the encrypted content. Computes the SHA1 message digest of the seed, recipients, and access bytes. Sets the encryption key based on the computed digest and algorithm version. @param encryption PDEncryption object @param documentIDArray COSArray containing document ID data @param decryptionMaterial DecryptionMaterial object @throws IOException if any errors occur during preparation
2072 Retrieves the owner encryption key from the document's dictionary. @return The byte array containing the owner key or null if not found
2073 Retrieves the user encryption key from the dictionary. @return The user key as a byte array or null if not found
2074 Calculates displacement vector based on character width. @param code Unicode character code @return Displacement Vector object
2075 Calculates the total width of a string by encoding it and summing up character widths. @param text input string to encode @return total width in points
2076 Retrieves a PDAbstractPattern instance by its name, utilizing caching for efficient access. @param name unique identifier for the pattern
2077 Retrieves a PDShading instance by its name from the resource dictionary. @param name unique identifier for the shading object @return The PDShading object or null if not found
2078 Retrieves the PDF shading object. @return The PDShading object or null if not found
2079 Checks if this node has open child outline items. @return true if node has open children, false otherwise
2080 Creates a PDField instance based on the given AcroForm and field dictionary. If the field is a non-terminal field with Kids entries, it creates a PDNonTerminalField. Otherwise, it uses the field type to create an appropriate subtype (choice, text, signature, button). @param form the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return The created PDField instance or null if erroneous.
2081 Retrieves a PDXObject instance associated with the given COSName. @param name unique identifier for the XObject @return PDXObject instance or null if not found
2082 Initializes a new instance of the class with specified shading context. @param shading PDShading object
2083 Creates a COSInputStream instance with default decode options.
2084 Fetches and parses a PDF object stream object based on the given object stream number and key. @param objstmObjNr unique identifier for the object stream @param key COSObjectKey associated with the object stream object @return The parsed COSBase object or null if not found
2085 Retrieves the page contents as an input stream. @return InputStream containing the page's content if available, otherwise an empty byte array
2086 Initializes a PDCIDFontType2 object with the given font dictionary and parent font. @param fontDictionary COSDictionary containing font metadata @param parent PDType0Font parent font
2087 Retrieves and returns a Type 2 CID font object.
2088 Recursively collects COSBase objects from a COSArray, handling relationships and determining inclusion/exclusion. @param array the COSArray to collect from @return true if any entries in the array demand parent update, false otherwise
2089 Retrieves the collection of COSBase objects, initializing and collecting them from the origin if necessary. @return Set of COSBase objects
2090 Adds a COSBase object to the array, either as a wrapped COSObject or directly. @param object COSBase object to add
2091 Adds a COSBase object to the array at specified index. If the object is a dictionary or array and not direct, creates a new COSObject instance. @param i index where the object will be inserted @param object COSBase object to add
2092 Sets the element at the specified index to the given COSBase object. If the object is a dictionary or array and indirect, a new COSObject instance is created; otherwise, the original object is used. @param index position in the array @param object COSBase object to be set
2093 Sets a key-value pair in the dictionary. @param key COSName identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
2094 Updates the update state and propagates it to child objects. @param children array of child objects to be updated
2095 Retrieves the role map from the structure tree root. @return A Map of role mappings or an empty Map if not found
2096 Adds a COSBase object to the pool and returns the underlying COSBase object. @param key unique identifier for the object @param base the COSBase object to add @return The COSBase object or null if not found or dereferenced
2097 Protects the PDF document with a specified protection policy. @param policy ProtectionPolicy object associated with the desired security
2098 Retrieves the glyph name for a given character code. @param code the character code to retrieve glyph name for
2099 Converts a Unicode code point to a font glyph ID. @param code input Unicode code point @return corresponding font glyph ID or result of codeToCID() if no mapping found
2100 Retrieves the Mac subtype for an embedded file. @return string representation of the Mac subtype or null if not found
2101 Retrieves the Mac creator string from the embedded file's parameters. @return Mac creator string or null if not found
2102 Retrieves the Mac resource fork from embedded dictionary. @return string representation of Mac resource fork or null if not found
2103 Retrieves a CIDFontMapping object based on the provided base font and PDFontDescriptor. @param baseFont unique PostScript font identifier @param fontDescriptor PDFontDescriptor object containing relevant font information @param cidSystemInfo PDCIDSystemInfo object with character set registry and ordering (optional) @return CIDFontMapping object or null if not found or incompatible format
2104 Verifies the owner password for a PDF document based on its encryption revision. @param password input owner password as a string @param user expected user password as a byte array @param owner document contents @param permissions document permissions @param id unique document identifier as a byte array @param encRevision encryption revision number @param keyLengthInBytes fixed digest length @param encryptMetadata whether to encrypt metadata (true) or not (false) @return true if passwords match, false otherwise
2105 Writes content of all specified regions within a PDF page to the output stream.
2106 Retrieves date value associated with a given key. @param key unique identifier for the date object
2107 Retrieves the date value associated with a given key; returns default calendar if not found. @param key unique identifier for the date object @param defaultValue Calendar instance to return if key is invalid or not present
2108 Retrieves the creation date of the PDF document. @return Calendar instance representing the creation date or null if not found
2109 Retrieves the modification date of the PDF document. @return Calendar instance or null if not found
2110 Retrieves creation date annotation value. @return Calendar instance or null if not found
2111 Retrieves the creation date of this annotation. @return Calendar instance or null if not found
2112 Retrieves the date associated with the signature. @return Calendar instance or null if not found
2113 Writes an Operator token to the PDF output stream. @param op Operator object containing image data
2114 Writes prepared COSObjects to a compressed stream. @param stream target OutputStream for writing
2115 Writes a COSDictionary object to the specified OutputStream. @param output target OutputStream for writing @param cosDictionary COSDictionary object being written
2116 Initializes a PDTransparencyGroup with the given parent PDDocument. @param document parent PDF document
2117 Initializes the PDFormXObject with the given parent PDF document. @param document parent PDF document
2118 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process @param quality compression quality level (0-100) @param dpi dots per inch value for metadata @return PDImageXObject instance representing the processed image
2119 Validates user input against set of "on" values. @param value input string to check
2120 Loads and parses an FDF document from the specified file. @param file input file to load @return parsed FDFDocument object or throws IOException on failure
2121 Loads and parses an FDF document from the specified input stream. @param input InputStream containing the FDF data @return parsed FDFDocument object or throws IOException if parsing fails
2122 Initializes PDFParser with decryption settings and no stream cache. @param source input source (e.g. file or byte array)
2123 Initializes a TilingPaint instance with the provided parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object representing the tiling pattern @param xform AffineTransform matrix describing the transformation
2124 Returns an opaque image from the current PDImageXObject. @return BufferedImage object representing the image
2125 Performs LZW decoding on the specified input stream and writes the result to the output stream. @param encoded InputStream containing LZW-encoded data @param decoded OutputStream where decoded data will be written @param parameters COSDictionary containing decoding configuration @param index current decoding index @return DecodeResult object with updated decoding parameters
2126 Appends a child element to the PDF structure, using its MCID and COSInteger representation. @param markedContent PDMarkedContent object with MCID and other attributes
2127 Fetches the Unicode (UCS2) character mapping from a predefined CMap. @throws IOException if an error occurs while retrieving the CMap
2128 Checks if the text field allows combination of multiple values. @return true if FF flag has COMB bit set, false otherwise
2129 Prepares the document for decryption based on its encryption settings and provided decryption material. @param encryption PDEncryption object containing document's encryption details @param documentIDArray COSArray representing the document ID @param decryptionMaterial StandardDecryptionMaterial instance with password and other decryption-related data @throws IOException if decryption material is not compatible with the document
2130 Retrieves the width of a space character in points. If not found, attempts to retrieve it from the ToUnicode CMap or by encoding a space string, and finally uses the average font width as fallback.
2131 Checks if the font has fixed pitch characteristics. @return true if the font has fixed pitch, false otherwise
2132 Checks if the font is serif. @return true if serif, false otherwise
2133 Checks if the font descriptor represents a symbolic font. @param none
2134 Checks if script flag bit is set.
2135 Checks if the font descriptor represents a non-symbolic font. @return true if flag bit for non-symbolic font is set, false otherwise
2136 Checks if the font is italic based on the flag bit. @return true if italic, false otherwise
2137 Checks if all caps flag is set. @return true if all caps font style is enabled, false otherwise
2138 Checks if small-cap font flag is set. @return true if small-cap font, false otherwise
2139 Checks if force bold font flag is set. @return true if flag is set, false otherwise
2140 Retrieves a PDAbstractPattern instance by its name, associated with the given PDColor. @param color PDColor object containing the pattern name @return PDAbstractPattern instance or null if not found
2141 Creates a PDField instance from the given dictionary and AcroForm. @param form the parent AcroForm @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return The created PDField instance or null if erroneous
2142 Converts the COSStream object into a human-readable text string.
2143 Creates a COSInputStream instance based on the underlying stream.
2144 Collects patches from a COSDictionary instance, applying transformations and decoding ranges as needed. @param xform affine transform to apply to patch points @param matrix transformation matrix to apply to patch points @param controlPoints number of control points in the patch @return List of Patch objects or empty list if no valid patches found
2145 Creates a descendant font object from the given COS dictionary and parent font. @param dictionary COSDictionary containing font metadata @param parent PDType0Font parent font @return PDCIDFont object or throws IOException for invalid font types
2146 Returns an iterator over the COSBase objects in this collection. @return Iterator object for traversing the collection's contents
2147 Adds a COSObjectable to the array, wrapping its COSObject. @param object COSObjectable to add
2148 Grows the COSArray to accommodate a specified size by repeatedly adding a provided COSBase object. @param size minimum required buffer capacity @param object COSBase object to add repeatedly
2149 Sets the array of floating-point values. @param value the new float array
2150 Parses a COSArray from the PDF source. @throws IOException if an error occurs while reading the PDF source
2151 Retrieves the cross-reference stream for writing. @return COSStream object containing stream data
2152 Initializes a PDRange object with default bounds [0, 1].
2153 Retrieves the COSArray object containing encoding values. @return COSArray object or null if not found
2154 Initializes a PDFunctionType2 object from a COSBase function. @param function COSBase object containing the function's parameters
2155 Initializes an empty FDF option element with default values.
2156 Initializes a new instance of the PDFontSetting class with default font settings.
2157 Retrieves the white point coordinates from the dictionary, creating a default COSArray if not found. @return PDTristimulus object representing the white point
2158 Retrieves the black point tristimulus values from the dictionary. @return PDTristimulus object with X, Y, and Z color values or a default zero-value instance if not found.
2159 Converts color components and pattern name to a COSArray instance. @return COSArray object containing color data
2160 Initializes a PDDeviceN instance with default colorant attributes.
2161 Initializes a new instance of the PDGamma class with default RGB color values.
2162 Retrieves the alternate color space from the PDF stream. @return a PDColorSpace instance representing the alternate color space, or null if not applicable
2163 Initializes a PDIndexed object with default color space settings. @param none
2164 Returns the default range array for LAB color components. @return COSArray object with default component ranges
2165 Initializes a new PDPattern instance with the given PDResources. @param resources PDResources object to associate with the pattern
2166 Initializes a new PDSeparation instance with default color separation settings.
2167 Initializes a PDTristimulus object with default tristimulus values (X=0, Y=0, Z=0).
2168 Initializes PDTristimulus with a 1D array of tristimulus values (X, Y, Z). @param array array containing X, Y, and/or Z color values
2169 Sets the transformation matrix of this PDFormXObject. @param transform AffineTransform object containing the new matrix values
2170 Creates a PDImageXObject from a byte array, interpreting its contents as a JPEG image. @param document the parent PDDocument @param byteArray input byte array containing the JPEG image data @return PDImageXObject representation of the JPEG image or null if creation fails
2171 Converts transformation matrix to a COSArray.
2172 Sets the element at the specified index to the given COSObjectable object. If the object is a dictionary or array and indirect, a new COSObject instance is created; otherwise, the original object is used. @param index position in the array @param object COSObjectable object to be set
2173 Sets an integer value at the specified index in the array. @param index position in the array @param value integer value to represent
2174 Sets a PDF name at the specified index. @param index position in the array @param name unique identifier of the object to retrieve
2175 Sets the element at the specified index to a COSString object representing the given string. @param index position in the array @param string input string to be represented as a COSString object
2176 Sets the minimum value of this numerical range. @param min the minimum value to represent
2177 Sets the maximum value of this PDRange. @param max the new maximum value
2178 Sets the x-coordinate of the lower-left corner. @param value floating-point value for the x-coordinate
2179 Sets the y-coordinate of the lower left corner. @param value floating-point value representing the y-coordinate
2180 Sets the x-coordinate of the upper-right corner. @param value float value to represent the x-coordinate
2181 Sets the upper-right Y-coordinate of the rectangle. @param value the floating-point Y-value
2182 Sets a color at the specified index in the four-color array. @param index position in the array @param colour PDGamma object representing the color to be set
2183 Decrypts all elements in the given COSArray. @param array COSArray to be decrypted @param objNum object number used for decryption @param genNum generation number used for decryption
2184 Sets an FDF option using the given string. @param opt input string representing the option value
2185 Sets the default appearance string for this FDF option element. @param da input string to be used as the default appearance
2186 Sets the font size to the specified value. @param size the desired font size
2187 Sets DeviceN color space attributes. @param attributes PDDeviceNAttributes object to be set
2188 Sets the alternate color space for this DeviceN object. @param cs PDColorSpace object to be set
2189 Sets the red component of the color value. @param r the float value representing the red component
2190 Sets gamma value to the specified float. @param g gamma correction factor
2191 Sets the blue color component using gamma-corrected value. @param b blue color intensity (0.0 to 1.0)
2192 Sets the color range for a PDF component. @param range PDRange object containing minimum and maximum values @param n number of components in the range array
2193 Sets the base color space to the given PDColorSpace object. @param base the new base color space
2194 Sets the colorant name. @param name unique identifier of the colorant
2195 Sets the alternate color space. @param colorSpace new PDColorSpace object
2196 Sets the X tristimulus value. @param x new float value to represent
2197 Sets the Y tristimulus value. @param y the float value to represent
2198 Sets the Z tristimulus value. @param z floating-point Z value
2199 Sets a key-value pair in the dictionary with optional object wrapping. @param key COSName identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
2200 Sets a boolean item in the dictionary. @param key unique identifier for the item to be set @param value boolean value to be stored
2201 Sets a boolean value in the dictionary. @param key COSName identifier for the item to be set @param value true or false value
2202 Sets a key-value pair in the dictionary using a string key. @param key unique identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
2203 Sets a string value in the dictionary with the given key. @param key COSName identifier for the item to be set @param value string data to be stored (null to remove existing item)
2204 Sets a string item in the dictionary. @param key COSName identifier for the item to be set @param value input string to be represented
2205 Sets an integer value in the dictionary. @param key COSName identifier for the item to be set @param value integer value to represent
2206 Sets a long integer value in the dictionary. @param key COSName identifier for the item to be set @param value long integer value to represent
2207 Sets a floating-point value in the dictionary. @param key COSName identifier for the item to be set @param value the float value to represent
2208 Creates a COSStream instance and populates it with the given dictionary. @param dictionary COSDictionary to be stored in the stream @param startPosition starting position of the data in the stream @param streamLength length of the data in the stream @return populated COSStream object
2209 Sets the encryption dictionary in the document's trailer. @param encDictionary COSDictionary containing encryption settings
2210 Sets the document ID in the trailer dictionary. @param id unique identifier as a COSArray object
2211 Wraps the existing page's content in a save/restore pair (q/Q) to have a controlled environment for adding additional content. @param page PDPage object to be wrapped
2212 Updates the parent entry for each sub-entry in a COSArray. @param kArray array of COSBase objects to update @param newParent updated parent dictionary @param newStructureType optional structure type (may be null)
2213 Searches for the PDF document's trailer section. @param trailer COSDictionary instance to search within @return true if trailer and info dictionaries are found, false otherwise
2214 Searches for trailer items in the provided COSDictionary. @param trailer The dictionary to search within @return true if a valid root object is found, false otherwise
2215 Performs the initial parsing of the PDF document. Retrieves trailer, root dictionary and sets document state to decrypted. @throws IOException if missing root object specification in trailer
2216 Parses the next token from the input stream. @throws IOException if an I/O error occurs during parsing
2217 Writes a PDF document to the output stream with optional incremental updates and encryption. @param doc PDDocument object containing the PDF data @param signInterface SignatureInterface instance for signing the document (optional) @throws IOException if an I/O error occurs during writing
2218 Retrieves the PDF document's information. @return PDDocumentInformation object containing document metadata
2219 Sets document information. @param info PDDocumentInformation object to be stored
2220 Initializes a PDDocumentCatalog instance for the given PDF document. @param doc the underlying PDF document
2221 Retrieves the list of threads from the PDF document catalog. @return List of PDThread objects or an empty list if not found
2222 Retrieves the additional actions dictionary from the document catalog. @return PDDocumentCatalogAdditionalActions object or null if not found
2223 Adds a PDOutputIntent object to the catalog dictionary. @param outputIntent output intent data
2224 Initializes PDDocumentNameDictionary with a PDDocumentCatalog. @param cat the parent document catalog
2225 Sets or removes the crop box for this PDPage. @param cropBox new crop box dimensions or null to remove
2226 Retrieves the dictionary of additional interactive actions for this page. @return A PDPageAdditionalActions object or null if not found
2227 Initializes an empty PDPageTree instance with a root dictionary representing the page tree structure.
2228 Retrieves the child dictionaries from a given COSDictionary node. @param node the parent dictionary to fetch children from @return list of child dictionaries or an empty list if not found
2229 Clears this COSArrayList and updates the associated document. @param parentDict COSDictionary to update if present
2230 Retrieves a COSDictionary object containing page label data. @return COSDictionary instance with NUMS key and array of integer-label pairs
2231 Initializes an instance of PDComplexFileSpecification with default file specification attributes.
2232 Initializes a PDComplexFileSpecification instance from a COSDictionary. @param dict COSDictionary object to initialize the specification with
2233 Sets the range values of this PDFunction. @param rangeValues COSArray containing range values
2234 Sets the domain values for this PDFunction instance. @param domainValues array of values defining the function's domain
2235 Sets encoding values and adds them to the dictionary. @param encodeValues COSArray of encoding values
2236 Sets decoding values from a COSArray. @param decodeValues array containing decoding data
2237 Sets an attribute with the given name and value. @param attrName unique identifier for the attribute @param attrValue data to be stored (may be wrapped if necessary)
2238 Removes a specified attribute from the logical structure. @param attributeObject attribute to be removed
2239 Updates the attribute list when a PDAttributeObject is changed. @param attributeObject updated attribute object
2240 Adds a class name to the PDF document structure. @param className The name of the class to add
2241 Removes a class name from the PDF structure. @param className unique identifier of the class to remove
2242 Adds a child structure node to the existing list of children. @param object the child structure node (COSBase) to append
2243 Inserts a new child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
2244 Removes a specified child node from the current structure node. @param object COSBase object to be removed @return true if object was successfully removed, false otherwise
2245 Sets the "K" key in the underlying dictionary. @param k COSBase value for the "K" item
2246 Sets a user attribute with a new value. @param value The COSBase object containing the property value
2247 Retrieves the guideline color from the dictionary. @return A PDColor object representing the guideline color
2248 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern instance or initializes one with default value if not found
2249 Sets the line dash pattern for guidelines in a PDF document. @param dashArray COSArray object specifying the dash pattern (null to reset)
2250 Sets the cryptographic filter method in the dictionary. @param cfm COSName identifier for the encryption method
2251 Sets a PDF filter using the provided string identifier. @param filter string name of the filter to be set
2252 Sets owner key encryption settings. @param o byte array representing the owner key
2253 Sets the user encryption key. @param u byte array representing the user key
2254 Sets owner encryption key in PDF document. @param oe byte array representing the encryption key
2255 Sets the user encryption key in the PDF document's dictionary. @param ue byte array representing the encryption key
2256 Sets the list of PDF recipients. @param recipients 2D byte array containing recipient data
2257 Sets the cryptographic filter dictionary. @param cryptFilterName unique identifier for the filter @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
2258 Sets the stream filter name in the encryption settings. @param streamFilterName COSName identifier for the stream filter
2259 Sets the string filter name in the encryption settings. @param stringFilterName COSName identifier for the string filter
2260 Sets PDF encryption permissions. @param perms byte array containing permission settings
2261 Removes V4.5 filters from the encryption settings.
2262 Initializes an instance of the FDFAnnotation class with default annotation type.
2263 Sets the annotation's color from a Color object. @param c Color value to be set
2264 Sets rich contents of an annotation. @param rc input string to be represented as rich content
2265 Sets the interior color of the circle annotation. @param color Color object to be set
2266 Sets the callout style of the annotation. @param callout array of float values defining the callout
2267 Sets the coordinates of a line annotation. @param line array of floating-point numbers representing the line's vertices
2268 Sets the interior color of the line annotation. @param color Color object to set as the interior color
2269 Sets the horizontal offset of a line annotation's caption. @param offset float value representing the offset
2270 Sets the vertical caption offset for a line annotation. @param offset floating-point value representing the vertical offset
2271 Sets polygon vertices. @param vertices array of float values representing polygon coordinates
2272 Sets the interior color of this polygon annotation. @param color Color object to be set
2273 Sets polyline annotation vertices from an array of float values. @param vertices array of vertex coordinates
2274 Sets the interior color of the polyline annotation. @param color Color object to be set
2275 Sets the interior color of the annotation square. @param color Color object containing RGB components
2276 Sets coordinates for text markup annotation. @param coords array of floating-point numbers representing the annotation's coordinates
2277 Sets document ID in FDF dictionary. @param id COSArray containing ID data
2278 Sets the differences stream in the FDF dictionary. @param diff COSStream containing the differences data
2279 Sets the value of a field in the FDF document. @param value the value to be set (may be a list of strings or other types)
2280 Sets the field value. @param value COSBase data to be stored
2281 Sets the field flags for the current form field. @param ff integer representation of field flags
2282 Sets the field flags for this FDFField instance. @param ff integer representation of the field flags
2283 Sets clear field flags for the current form field. @param ff integer value representing clear field flags
2284 Sets the flags for a widget field. @param f integer flag value or null to clear
2285 Sets the flags for a set widget field. @param ff integer value representing the flags
2286 Sets clear widget field flags for the current form field. @param ff integer value representing the flag to be set
2287 Sets rich text value in the dictionary. @param rv COSString containing the rich text data
2288 Sets rich text value in the FDF field dictionary. @param rv COSStream containing rich text data
2289 Sets the script to be executed before another JavaScript action. @param before input string representing the script
2290 Sets the 'after' action in the JavaScript dictionary. @param after script to be executed after form processing
2291 Initializes a PDFont instance with default settings.
2292 Initializes a new instance of the PDFontDescriptor class. Constructs an empty dictionary and sets its type to FONT_DESC for font descriptor management.
2293 Sets the font name in the PDF document. @param fontName unique identifier of the font to set
2294 Sets the font family for the PDF font descriptor. @param fontFamily unique identifier of the font family
2295 Sets the font stretch attribute. @param fontStretch string value representing font stretch (e.g. "ultra-condensed")
2296 Sets the font bounding box by storing a COSArray representation of the rectangle. @param rect PDRectangle object containing the font dimensions
2297 Sets the character set for the font descriptor. @param charSet input string representing the character set
2298 Initializes a DictionaryEncoding instance with the specified base encoding and differences. @param baseEncoding unique identifier for the base encoding (may be STANDARD_ENCODING) @param differences COSArray containing font encoding differences
2299 Sets gamma correction factor in CALGRAY color space. @param value gamma value to be applied
2300 Retrieves the gamma values associated with this PDCalRGB instance. @return PDGamma object containing gamma values
2301 Sets the gamma correction values in the color space. @param gamma PDGamma object containing gamma data
2302 Sets the transformation matrix. @param matrix 3x3 matrix to be set
2303 Retrieves and maps the colorant separations from a given PDF resources object. @param resources The PDResources object to fetch colorants from @return A map of colorant names to their corresponding PDSeparation objects
2304 Initializes an instance of PDTransparencyGroupAttributes with default transparency settings.
2305 Initializes an instance of PDOptionalContentMembershipDictionary with default values.
2306 Sets the visibility policy in the dictionary. @param visibilityPolicy COSName identifier for the visibility policy
2307 Sets the pattern's transformation matrix. @param transform AffineTransform object representing the matrix
2308 Sets the bounding box of the tiling pattern. @param bbox the PDRectangle object to be set (or null to clear)
2309 Sets the background shading in the PDF document. @param newBackground COSArray representing the new background
2310 Sets the bounding box of this shading. @param newBBox new rectangle to be set (null to remove)
2311 Sets the color space for this PDShading object. @param colorSpace new color space (null to clear)
2312 Sets a new shading function in the PDF document. @param newFunctions array of shading functions to be applied
2313 Sets the transformation matrix from an AffineTransform object. @param transform Transformation matrix to be set
2314 Sets the shading domain in the dictionary. @param newDomain COSArray identifier for the domain to be set
2315 Sets the shading extend values. @param newExtend COSArray object containing extend values
2316 Sets the domain of Type 2 shading to a specified COSArray. @param newDomain array representing the domain values
2317 Sets shading coordinates. @param newCoords array of coordinates for the Type 2 shading
2318 Sets the decode values for triangle-based shading. @param decodeValues array of decode values to be stored
2319 Initializes a new instance of the PDExtendedGraphicsState class. Sets the dictionary type to EXT_G_STATE and initializes an empty COSDictionary.
2320 Sets the blend mode using the specified BlendMode. @param bm BlendMode object containing COSName identifier
2321 Sets a float item in the dictionary. @param key COSName identifier for the item to be set @param value floating-point value to represent (null removes the item)
2322 Sets the transfer function in the extended graphics state. @param transfer COSBase object representing the new transfer function
2323 Sets the transfer function 2 in the extended graphics state. @param transfer2 COSBase representation of the transfer function
2324 Sets the 'T' item in the action dictionary. @param t COSBase value to be stored for the 'T' item
2325 Sets the 'H' flag to control hiding behavior. @param h true to hide, false otherwise
2326 Sets form fields from a COSArray object. @param array COSArray containing field data
2327 Sets the sound content associated with this sound action. @param sound COSStream object containing the sound data
2328 Configures form fields using the provided COSArray. @param array collection of form field data
2329 Sets the thread action parameter 'D'. @param d COSBase object containing the value to be stored
2330 Sets the 'B' parameter in the action dictionary. @param b COSBase data to be stored
2331 Sets the relationship of the target directory to either 'P' or 'C'. @param relationship COSName identifier for the relationship (must be P or C)
2332 Initializes a PDAnnotation instance with default properties.
2333 Initializes a PDAnnotation instance from a COSDictionary. @param dict the dictionary object to initialize from
2334 Sets the annotation's rectangular bounds. @param rectangle PDRectangle object specifying the dimensions
2335 Sets the annotation's border attribute from a COSArray object. @param borderArray array of border settings
2336 Sets rectangle margin differences. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2337 Sets rectangle differences for the free text annotation. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
2338 Sets the callout settings from an array of float values. @param callout array of floating-point numbers representing the callout settings
2339 Sets the ink list by creating a COSArray instance from the provided float[][] data. @param inkList 2D array of floating-point numbers representing the ink paths
2340 Sets line coordinates using an array of floats. @param l array of floating-point numbers representing the line's points
2341 Sets the horizontal offset of the line annotation's caption. @param offset float value representing the offset
2342 Sets the vertical caption offset for a line annotation. @param offset floating-point value representing the vertical offset
2343 Sets the quad points of a link annotation. @param quadPoints array of float values representing the quad points
2344 Sets rich contents of the annotation. @param rc input string representing rich content
2345 Sets polygon vertices from an array of float values. @param points array of floating-point numbers representing the polygon's vertices
2346 Sets polyline vertices from an array of float values. @param points array of floating-point numbers representing vertex coordinates
2347 Sets the parent markup annotation. @param annot PDAnnotationMarkup object to be assigned as parent
2348 Sets the rectangle differences for this annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2349 Sets the quad points defining the text markup annotation. @param quadPoints array of floating-point numbers representing the quad points
2350 Initializes a new instance of the PDAppearanceDictionary class with default appearance entries.
2351 Sets the dash style of the border by storing a COSArray representation. @param dashArray array defining the dash pattern
2352 Retrieves the line dash style pattern as a PDLineDashPattern instance. @return PDLineDashPattern object representing the border style properties
2353 Sets the operating system property in the digital signature properties dictionary. @param os the name of the operating system (null to remove existing value)
2354 Initializes a PDSeedValue instance with default attributes.
2355 Sets the digital signature filter. @param filter COSName identifier for the filter to be set
2356 Sets the MDP seed value. @param mdp MDP object to be stored
2357 Sets the timestamp for this PDSeedValue. @param timestamp TimeStamp object to be stored
2358 Initializes a new instance of the PDSeedValueCertificate class with default certificate type and direct flag.
2359 Adds a subject byte array to the certificate's dictionary. @param subject subject data to be added
2360 Sets the key usage extension in the certificate's dictionary. @param keyUsageExtension string representing allowed key usages (0, 1, X)
2361 Adds an issuer to the certificate's ISSUER attribute. @param issuer byte array representing the issuer's name
2362 Adds an OID to the certificate's dictionary. @param oid byte array representing the OID value
2363 Initializes a new instance of the PDSignature class with default signature type.
2364 Sets the digital signature type. @param type COSName identifier for the digital signature type
2365 Sets the PDF filter. @param filter COSName identifier for the filter to be set
2366 Sets the SubFilter value in the digital signature dictionary. @param subfilter COSName identifier for the SubFilter
2367 Sets the byte range for a digital signature. @param range array of 4 integers representing the byte range
2368 Sets PDF document contents from a byte array. @param bytes source byte array
2369 Sets the text color of this outline item to the specified value. @param textColor the new text color
2370 Initializes an instance of PDAcroForm with the given PDF document. @param doc the parent PDDocument
2371 Initializes a PDButton instance with the given AcroForm. @param acroForm parent PDAcroForm object
2372 Initializes PDChoice instance with given interactive form. @param acroForm parent interactive PDF form
2373 Sets the value for this PDNonTerminalField and its child fields. @param object COSBase object containing the new field value
2374 Sets the default value of this non-terminal field. @param value COSBase object representing the default field value
2375 Initializes a PDSignatureField instance within the given AcroForm. @param acroForm parent AcroForm to integrate with
2376 Initializes a PDTextField instance with the given AcroForm. @param acroForm the parent interactive form
2377 Sets the default style string for a PDVariableText field. @param defaultStyleString input string to be represented (null to clear)
2378 Sets the rich text value for the variable text field. @param richTextValue new rich text content or null to clear
2379 Sets the coordinate system origin. @param coordSystemOrigin array of floating-point numbers representing the origin coordinates
2380 Initializes a new instance of the PDThread class.
2381 Sets the transition direction. @param direction PDTransitionDirection enum value for the transition direction
2382 Sets the transition duration in seconds. @param duration floating-point value representing the duration
2383 Sets the fly-out scale factor. @param scale floating-point value representing the scale
2384 Sets the fly area's opacity in the transition settings. @param opaque true for opaque, false for transparent
2385 Adds all elements from the specified COSArray to this collection. @param objectList list of COSBase objects to be added
2386 Retrieves the standard structure type based on its current value and role mapping. @return string representation of the standard structure type
2387 Adds a PDF structure to the compression pool. @param current the COSBase object representing the structure
2388 Retrieves date value associated with given key; returns default calendar if not found. @param key unique identifier for the date object @param defaultValue Calendar instance to return if key is invalid or not present
2389 Retrieves the date value associated with a given key from an embedded dictionary. @param embedded embedded dictionary object @param key unique identifier for the date object @param defaultValue default calendar instance to return if key is invalid or not present @return The date value as a Calendar object, or the default value if not found
2390 Inserts generated combination appearance into the provided content stream. @param contents PDAppearanceContentStream to write into @param appearanceStream PDAppearanceStream containing visual settings @param font PDFont object for character rendering @param fontSize float representing font size in points
2391 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process @param quality compression quality level (0-100)
2392 Loads and parses an FDF document from the specified file. @param filename input file name @return parsed FDFDocument object or throws IOException on failure
2393 Adds first intermediate curl shape to the cloud-like border. @param angleCur initial curve angle @param r radius of the circle @param alpha adjustment parameter for arc segments
2394 Computes and draws the intermediate curl template for a cloud-like border. @param angleCur initial angle @param r radius of the template @return Array of Point2D.Double objects representing the template points
2395 Processes a glyph at the specified position in the PDF document. @param textRenderingMatrix current transformation matrix for the text element @param font the PDFont object representing the font used @param code character code of the glyph to process @param displacement displacement vector from the current position to the next one
2396 Fetches lines of text from the given PDF content, splitting into paragraphs based on specified font characteristics and width constraints. @param font PDFont object defining font characteristics @param fontSize float representing font size in points @param width maximum allowed line width @return List of Line objects representing individual paragraphs
2397 Returns whether the font descriptor represents a symbolic font. @return true if symbolic, null if not found or unknown
2398 Returns a fallback font name based on the provided PDFontDescriptor. @param fontDescriptor the descriptor containing font information @return the fallback font name as a string
2399 Retrieves a Paint object based on the provided PDColor and its associated color space. @param color PDColor object containing color information @return Paint object representing the visual appearance of the color, or null if not found
2400 Retrieves a list of fields from the underlying AcroForm. @return List of PDField objects or empty list if none found
2401 Recursively finds a child field by its name within the AcroForm structure. @param name array of strings representing the full name path @param nameIndex index of the current name in the path @return PDField instance or null if not found
2402 Retrieves a list of child fields associated with the current field. @return A list of PDField objects representing the child fields, or an empty list if none found
2403 Retrieves a string representation from the given COSBase object. If it's a COSString, returns its value; if a COSStream, converts to text string; otherwise, returns an empty string.
2404 Retrieves the field's value, handling various types of COSBase objects. @return The field's value as an Object or null if not found
2405 Retrieves rich text content from the field's dictionary object. @return Rich text string or null if not found
2406 Retrieves the string representation of a JavaScript action's "before" context. @return The string value or null if not found or invalid
2407 Retrieves the string or stream representation of the 'after' script. @return The COSBase object's string value, or null if not found or dereferenced
2408 Retrieves the JavaScript action string associated with the PDF interactive element. @return The JavaScript action string or null if not found
2409 Retrieves rich contents from the dictionary object. @return Rich content string or null if not found
2410 Retrieves string value from COSBase object, or text representation of stream. @param base COSBase instance to extract value from
2411 Creates a LayoutPage instance for the given PDF page, combining its content stream and resources. @param page the PDF page to create a layout page for @return a new LayoutPage object representing the combined content and resources
2412 Converts the PDF stream to a byte array. @return Byte array representation of the stream
2413 Retrieves an array of interpolated sample values based on input parameters and PDF stream data. @return 2D array of int values representing sample values or null if not initialized
2414 Initializes PatchMeshesShadingContext with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation @param controlPoints number of control points in the patch
2415 Initializes a new Type4ShadingContext instance with specified shading parameters and transformation settings. @param shading PDShadingType4 object @param cm ColorModel instance @param xform AffineTransform instance for transformation @param matrix Matrix instance for coordinate transformation @param deviceBounds Rectangle representing the device area
2416 Initializes a new Type5ShadingContext instance with specified shading parameters and transforms. @param shading PDShadingType5 object @param cm ColorModel object @param xform AffineTransform object @param matrix Matrix object @param deviceBounds Rectangle representing the device bounds
2417 Adds a PDAttributeObject to the attribute dictionary with revision number. @param attributeObject attribute data to be stored
2418 Adds a new user property to the document's logical structure. @param userProperty PDUserProperty object to add
2419 Initializes a new instance of the class with the given PDDocument. @param doc the parent PDF document
2420 Initializes a PDPattern instance with specified resources and color space. @param resources PDResources object for pattern management @param colorSpace PDColorSpace object representing the underlying color model
2421 Sets an array of rectilinear measurement changes. @param changeXs array of PDNumberFormatDictionary objects
2422 Sets the Y-coordinate changes in the dictionary. @param changeYs array of PDNumberFormatDictionary objects representing Y-coordinate changes
2423 Sets an array of rectilinear measurement distances. @param distances array of PDNumberFormatDictionary objects
2424 Sets a list of rectilinear measurement areas within the PDF document. @param areas array of PDNumberFormatDictionary objects representing measurement areas
2425 Sets the rectilinear measurement angles. @param angles array of PDNumberFormatDictionary objects representing individual angles
2426 Sets line slopes using an array of PDNumberFormatDictionary objects. @param lineSloaps array of slope definitions
2427 Grows the COSArray to accommodate a specified minimum buffer capacity. @param size minimum required buffer capacity
2428 Retrieves the text color from the PDF document. @return PDColor object representing the text color
2429 Creates a cloned element based on the source object type. @param src The original COSBase object to clone @param dstParent The parent COSDictionary to which the cloned elements belong @param currentPageDict The current page's dictionary (used for annotation management)
2430 Parses a directory object from the PDF source. @throws IOException if an error occurs while reading the PDF source
2431 Initializes parser values from a given COSStream, validating and extracting /W and /Index arrays. @param stream COSStream containing cross-reference data
2432 Retrieves the next action in a sequence. @return List of PDAction objects or null if not found
2433 Retrieves the color range for a specific component. @param n index of the component
2434 Retrieves the encoding values for a specified parameter and creates a PDRange instance. @param paramNum index of the parameter @return PDRange object or null if not found
2435 Retrieves a color object or a four-colors instance based on the given name. @param name unique identifier for the dictionary object
2436 Constructs a COSArray instance representing width values for Type 2 CID fonts. @param cidFont COSDictionary containing font metrics
2437 Sets the line dash pattern using the provided PDLineDashPattern object. @param dashPattern Line dash pattern data
2438 Initializes the color space with RGB data from a COSArray. @param rgb COSArray containing RGB values
2439 Sets the line color for guidelines in a PDF document. @param color PDColor object specifying the color
2440 Sets the color of this annotation. @param c PDColor object representing the new color
2441 Sets the interior color of the annotation line. @param ic PDColor object representing the desired color
2442 Sets the interior color of the polygon annotation. @param ic new interior color
2443 Sets the interior color of the polyline annotation. @param ic PDColor object representing the desired color
2444 Sets interior color of square or circular annotation. @param ic PDColor object containing color data
2445 Sets the border color of an annotation. @param c PDColor object representing the desired color
2446 Sets the background color of an annotation. @param c PDColor object representing the new background color
2447 Sets text color of this outline item. @param textColor Color to be applied
2448 Retrieves the default range array for LAB color components. @return COSArray object with default component ranges
2449 Retrieves the default B component range for LAB color representation. @return PDRange object with default B component values
2450 Creates a PDImageXObject from an input stream containing JPEG image data. @param document the parent PDDocument @param stream input stream with JPEG image data @return PDImageXObject representation of the JPEG image or null if creation fails
2451 Sets the primary font to the specified font. @param font The new primary font
2452 Sets the tint transformation function. @param tint PDFunction object representing the tint transformation
2453 Sets the tint transformation function. @param tint PDFunction object representing the tint transformation
2454 Sets the target page to the specified PDPage object. @param page PDPage object representing the destination page
2455 Sets the upper limit to a specified numeric value. @param upper upper limit value or null if not set
2456 Sets the lower limit in the COSArray. @param lower nullable integer value for the lower limit
2457 Sets the style for the start and end points of a line annotation. @param style style name (e.g. "Solid", "Dashed") or null to reset
2458 Sets the end point ending style for a line annotation. @param style the desired style (null for no end cap)
2459 Sets the starting point/ending style of a polyline annotation. @param style desired style (null for none)
2460 Sets the endpoint ending style for a polyline annotation. @param style desired style (null to reset)
2461 Sets the start point and ending style of a line annotation. @param style style to be set (may be null)
2462 Sets the end point ending style of a line annotation. @param style the desired style (null for no ending)
2463 Sets the starting point and ending style of a polyline annotation. @param style style to be applied (may be null for default)
2464 Sets the endpoint ending style of a polyline annotation. @param style style to be set (null for default)
2465 Sets the upper limit of a name-value pair in the tree. @param upper new upper limit value
2466 Sets the lower limit in the tree's limits dictionary. @param lower new lower limit value
2467 Clips a rectangle to the media box, returning the intersection. @param box The rectangle to clip @return A new PDRectangle representing the clipped area
2468 Creates a retranslated rectangle with dimensions and coordinates equivalent to the current rectangle's width and height.
2469 Sets the first color in the four-color array. @param colour PDGamma object representing the color to be set
2470 Sets the color at index 1 (after) in the four-color array.
2471 Sets the start color in the four-color array. @param colour PDGamma object representing the color to be set
2472 Sets the end color using the provided PDGamma object. @param colour PDGamma object representing the end color
2473 Decrypts a given PDF object using the specified encryption parameters. @param obj PDF object to be decrypted @param objNum unique identifier of the PDF document object @param genNum generation number associated with the object @return the decrypted object or original if decryption fails
2474 Wraps existing item setter with PDFName conversion. @param key string identifier for the item to be set @param value data to be stored (may be wrapped if necessary)
2475 Sets the AcroForm for this PDF document catalog. @param acroForm PDAcroForm object to be set
2476 Sets viewer preferences in the catalog dictionary. @param prefs PDViewerPreferences object to be stored
2477 Sets the document outline in the catalog dictionary. @param outlines PDDocumentOutline object containing the document structure
2478 Sets metadata in the catalog dictionary. @param meta PDMetadata object to be stored
2479 Sets the open action for the PDF document. @param action PDDestinationOrAction object to be set
2480 Sets additional actions in the document catalog. @param actions PDDocumentCatalogAdditionalActions object
2481 Sets the PDF document's Names dictionary. @param names PDDocumentNameDictionary object
2482 Sets the Mark Info dictionary entry in the catalog. @param markInfo PDMarkInfo object containing mark info data
2483 Sets the URI dictionary in the catalog. @param uri PDURIDictionary object containing URI metadata
2484 Sets the structure tree root of the catalog dictionary. @param treeRoot PDStructureTreeRoot object to be set
2485 Sets page label dictionary in the catalog. @param labels PDPageLabels object to be stored
2486 Sets destinations in the document name dictionary. @param dests PDDestinationNameTreeNode object containing destination data
2487 Associates embedded files with the document. @param ef EmbeddedFilesNameTreeNode object
2488 Sets JavaScript code in the PDF document. @param js PDJavascriptNameTreeNode representing the JavaScript to be set
2489 Initializes a PDPage object with the given media box dimensions. @param mediaBox rectangle specifying the page's dimensions
2490 Sets the resources for this PDPage. @param resources PDResources object to be set (null to clear)
2491 Sets the media box for this PDPage. @param mediaBox new media box dimensions (null to remove)
2492 Sets the bleed box for this PDF page. @param bleedBox rectangle representing the bleed area
2493 Sets the Trim Box attribute of this PDPage. @param trimBox new Trim Box dimensions or null to remove
2494 Sets or removes the Art Box rectangle for this PDF page. @param artBox the new Art Box dimensions (null to reset)
2495 Sets the contents stream of this PDPage. @param contents PDStream object containing the new content
2496 Sets metadata for this PDF page. @param meta PDMetadata object to be associated with the page
2497 Sets additional actions for this PDF page. @param actions PDPageAdditionalActions object
2498 Sets the transition properties of this PDPage. @param transition PDTransition object containing transition data
2499 Sets a transition for the page with specified duration. @param transition PDTransition object @param duration float value representing the transition duration
2500 Adds a resource to the dictionary with the given kind and name. @param kind type of resource (e.g. font, color space) @param name unique identifier for the resource @param object data associated with the resource
2501 Sets an embedded file in the PDF document. @param file PDEmbeddedFile object representing the file to be set
2502 Sets the embedded file with a Unicode representation. @param file PDEmbeddedFile object containing the embedded file data
2503 Sets the associated PDF page for this marked content reference. @param page PDPage object representing the page to be set
2504 Sets the referenced object to an annotation. @param annotation PDAnnotation instance to be associated
2505 Sets the referenced object in the underlying COSDictionary. @param xobject PDXObject to be associated with OBJ key
2506 Sets the page associated with this PDObjectReference. @param page PDPage object to be stored
2507 Sets the parent of this PDStructureElement. @param structureNode new parent node
2508 Sets the current PDF page. @param page PDPage object to be set
2509 Sets the parent tree of this structure tree root. @param parentTree PDNumberTreeNode representing the new parent
2510 Sets the bounding box of an annotation to the specified rectangular shape. @param rectangle PDRectangle object defining the new bounds
2511 Sets border style dictionary for annotation. @param bs PDBorderStyleDictionary object to be stored
2512 Sets the border effect dictionary. @param be PDBorderEffectDictionary object to be stored
2513 Sets the caret annotation's fringe dimensions. @param fringe PDRectangle object representing the fringe
2514 Sets the fringe dimensions of the circular annotation. @param fringe PDRectangle object representing the fringe
2515 Sets the fringe rectangle of this free text annotation. @param fringe PDRectangle object representing the fringe
2516 Sets the fringe dimensions of the annotation. @param fringe PDRectangle object representing the fringe dimensions
2517 Sets the FDF dictionary in the catalog. @param fdf FDFDictionary object representing the Form Data Format
2518 Sets the digital signature in the FDF catalog. @param sig PDSignature object to be stored
2519 Sets an embedded file specification in the FDF dictionary. @param fs PDFileSpecification object containing file details
2520 Sets JavaScript associated with the FDF document. @param js FDFJavaScript object containing script data
2521 Sets the FDF catalog in the document's trailer dictionary. @param cat FDFCatalog object to be set
2522 Sets the appearance dictionary for this form field. @param ap PDAppearanceDictionary object containing visual settings
2523 Sets the appearance stream reference for this form field. @param ref FDFNamedPageReference object containing the appearance stream data
2524 Sets icon fitting mode. @param fit FDFIconFit enum value
2525 Sets an action for this form field. @param a PDAction object to be associated with the field
2526 Sets additional actions for this FDF field. @param aa PDAdditionalActions object to be associated
2527 Sets fractional space to allocate in icon fitting configuration. @param space PDRange object defining allocated space
2528 Sets the file specification for this named page reference. @param fs PDFileSpecification object containing file details
2529 Sets page information in the dictionary. @param info pageInfo object containing relevant data
2530 Sets the named page reference in the FDF template.
2531 Sets the font file descriptor in the dictionary. @param type1Stream stream containing the Type 1 font data
2532 Sets the font file 2 descriptor in the dictionary. @param ttfStream stream containing TTF font data
2533 Sets the font file 3 attribute in the dictionary. @param stream PDStream object containing font data
2534 Sets the CID (Character ID) set in the font dictionary. @param stream PDStream object containing CID set data
2535 Sets the white point value in the color space dictionary and updates the cache. @param whitepoint PDTristimulus representation of the new white point
2536 Sets the black point value in the color space dictionary. @param blackpoint PDTristimulus object representing the black point
2537 Sets the extended graphics state for PDF rendering. @param extendedGraphicsState PDExtendedGraphicsState object to be set
2538 Sets the shading resources. @param shadingResources new shading resources to be applied
2539 Sets the tiling pattern's resources. @param resources PDResources object to be associated with the pattern
2540 Sets a new shading function. @param newFunction PDFunction object to be assigned
2541 Sets the font setting in the dictionary. @param fs PDFontSetting object to be stored
2542 Sets the destination for this embedded GoTo action. @param d PDDestination object representing the target location
2543 Sets file specification within the action. @param fs PDFileSpecification object
2544 Sets the target directory for the embedded action. @param targetDirectory PDTargetDirectory object specifying the destination
2545 Sets the destination for this navigation action. @param d PDDestination object to set as the destination
2546 Sets file specification for PDF import data. @param fs PDFileSpecification object containing file details
2547 Sets the file specification for this launch action. @param fs PDFileSpecification object containing file details
2548 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing launch configuration
2549 Sets the file specification for this remote navigation action. @param fs file specification details
2550 Sets the file specification for form submission. @param fs PDFileSpecification object containing file details
2551 Sets file specification associated with thread action. @param fs PDFileSpecification object to be stored
2552 Sets the 'F' action in the dictionary. @param action PDAction object to be stored
2553 Sets an action associated with PDF annotation event E. @param e PDAction object defining the behavior of the annotation when triggered
2554 Sets an action definition associated with X coordinate. @param x PDAction object to be stored
2555 Sets the action associated with the 'D' key in the annotation dictionary. @param d PDAction object to be stored
2556 Sets the 'U' action definition in the dictionary. @param u PDAction object to be associated with key 'U'
2557 Sets the FO action definition in the dictionary. @param fo FO action object
2558 Sets the "Blend" action definition. @param bl Blend action to be associated with the annotation
2559 Sets the Post-Outcome (PO) action definition. @param po PO action to be associated with the annotation
2560 Sets the primary click action. @param pc PDAction object defining behavior on primary click
2561 Sets the 'PV' action definition. @param pv PDAction object to be stored
2562 Sets the Post-Insertion action definition. @param pi Post-Insertion action object
2563 Sets a Wacom-related action in the catalog. @param wc PDAction object containing Wacom settings
2564 Sets the workspace action. @param ws PDAction object representing the workspace
2565 Sets document settings action. @param ds PDAction object to be set
2566 Sets the Window Presentation (WP) action. @param wp PDAction object containing presentation details
2567 Sets a PDF document's default action. @param dp PDAction object containing the default action
2568 Sets an additional action associated with key K. @param k PDAction object to be stored
2569 Sets additional action associated with key F in the COSDictionary. @param f PDAction object to be stored
2570 Sets the vertical action associated with the form field. @param v PDAction object defining the vertical movement
2571 Sets the 'C' action in the dictionary. @param c PDAction object to be set
2572 Sets interactive action 'o' (Open) in the dictionary. @param o PDAction object representing the open action
2573 Sets the 'C' action in the dictionary. @param c PDAction object to be stored
2574 Sets the target directory within the PDF document. @param targetDirectory PDTargetDirectory object representing the target directory
2575 Sets or removes a named destination from the dictionary. @param dest the PDNamedDestination to be set (null to remove)
2576 Sets the annotation's appearance using a PDAppearanceDictionary.
2577 Sets optional content annotation properties. @param oc PDPropertyList object containing OC attributes
2578 Associates the annotation with a specific PDF page. @param page PDPage object to be linked
2579 Sets the file specification for this attachment. @param file PDFileSpecification object containing file details
2580 Sets the border effect dictionary for the free text annotation. @param be PDBorderEffectDictionary object containing border properties
2581 Sets the rectangle difference of this free text annotation. @param rd PDRectangle object representing the new rectangle difference
2582 Sets the link's action to navigate to a specific destination. @param action PDAction object defining the navigation behavior
2583 Sets the border style dictionary for the link annotation. @param bs Border style dictionary object
2584 Sets the destination of an interactive link. @param dest PDDestination object defining the target location
2585 Sets the previous URI action. @param pa PDActionURI object containing the new URI
2586 Sets the popup display for this annotation. @param popup PDAnnotationPopup object to be associated
2587 Sets the In-Reply-To annotation. @param irt The annotation to be set as a reply.
2588 Sets external data dictionary for the annotation. @param externalData PDExternalDataDictionary instance
2589 Sets the border style of the annotation using the provided dictionary. @param bs PDBorderStyleDictionary object defining the border properties
2590 Sets the border effect of the polygon annotation. @param be PDBorderEffectDictionary object defining the border style
2591 Sets the border effect dictionary for this annotation. @param be PDBorderEffectDictionary object defining the border behavior
2592 Sets the rectangle difference of this annotation. @param rd PDRectangle object defining the rect difference
2593 Sets appearance characteristics dictionary. @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary object
2594 Sets the annotation's action. @param action PDAction object to be associated with the annotation
2595 Sets additional annotation actions. @param actions PDAnnotationAdditionalActions object
2596 Sets the border style of the annotation widget. @param bs PDBorderStyleDictionary object defining the border properties
2597 Sets the parent terminal field for this annotation widget. @param field PDTerminalField object to be set as parent
2598 Sets normal appearance attributes. @param entry PDAppearanceEntry object containing visual representation
2599 Sets the normal appearance of an interactive annotation. @param ap PDAppearanceStream object defining the appearance
2600 Sets rollover appearance for interactive annotation. @param entry PDAppearanceEntry object containing visual representation
2601 Sets rollover appearance stream. @param ap PDAppearanceStream object representing annotation's rollover state
2602 Sets down appearance for annotation. @param entry PDAppearanceEntry object containing appearance data
2603 Sets down appearance stream in PDAppearanceDictionary. @param ap down appearance stream
2604 Sets the PDF document's digital signature filter property. @param filter PDPropBuildDataDict object containing filter data
2605 Sets publication security property in the dictionary. @param pubSec PDPropBuildDataDict object containing publication security data
2606 Sets application data in PDPropBuild. @param app PDPropBuildDataDict object containing application data
2607 Sets the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object to be stored
2608 Sets the build property in the dictionary. @param propBuild PDPropBuild object containing build metadata
2609 Sets the previous sibling outline node. @param outlineNode reference to the new sibling
2610 Sets the next sibling node in the PDF outline. @param outlineNode the PDOutlineNode to be set as next sibling
2611 Sets destination for this outline item. @param dest PDDestination object representing the target location
2612 Sets the action associated with this outline item. @param action PDAction object to be assigned
2613 Sets the structure element of the current outline item. @param structureElement PDStructureElement to be associated
2614 Sets the first child outline node. @param outlineNode PDOutlineNode object to be assigned as the first child
2615 Sets the last child outline node. @param outlineNode PDOutlineNode object to be assigned as last child
2616 Sets default resources for the form. @param dr PDResources object containing default resources
2617 Sets dynamic XFA form resource. @param xfa PDXFAResource object for the interactive form
2618 Sets the signature value. @param value PDSignature object containing the new value
2619 Sets the default signature value in the PDF document. @param value PDSignature object representing the default value
2620 Sets the seed value for this signature field. @param sv PDSeedValue object containing the seed data
2621 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object containing action data
2622 Sets the bounding box of the viewport. @param rectangle PDRectangle object representing the new bounds
2623 Sets the measurement details of the viewport. @param measure PDMeasureDictionary object containing measurement attributes
2624 Sets thread information in the PDF document. @param info PDDocumentInformation object containing thread details
2625 Sets the threaded content associated with this bead. @param thread PDThread object containing threaded data
2626 Sets the next bead in the thread. @param next The PDThreadBead object to be set as next.
2627 Sets the previous bead in the thread. @param previous the preceding bead in the sequence
2628 Sets the associated page for this thread bead. @param page PDPage object representing the linked content
2629 Sets the rectangle associated with the current bead. @param rect PDRectangle object defining the bounds of the bead
2630 Sets the 'Marked' status in the PDMarkInfo dictionary. @param value boolean flag indicating marked status
2631 Sets the user properties marking flag. @param userProps true to mark as having user properties, false otherwise
2632 Resets suspect flag to false.
2633 Enables or disables mouse position tracking. @param value true to track, false otherwise
2634 Sets whether the popup annotation is visible or not. @param open true to show, false to hide
2635 Sets the fixed decimal formatting option. @param fd boolean value indicating whether to use fixed decimal formatting
2636 Sets the volatility status of the file specification. @param fileIsVolatile true if the file is volatile, false otherwise
2637 Sets the visibility of a user property. @param hidden true to hide, false to display
2638 Sets metadata encryption status in the cryptographic filter dictionary. @param encryptMetaData true to enable or false to disable metadata encryption
2639 Sets caption visibility for the line annotation. @param cap true to show, false to hide the caption
2640 Sets the scale-to-fit annotation option. @param value true to enable, false otherwise
2641 Sets renaming setting in FDF template. @param value true to enable renaming, false otherwise
2642 Sets anti-aliasing property in PDF shading. @param antiAlias true to enable anti-aliasing
2643 Sets stroking overprint control. @param op true to enable or false to disable
2644 Sets non-stroking overprint control. @param op true to enable or false to disable
2645 Sets automatic stroke adjustment flag. @param sa true to enable or false to disable
2646 Sets the alpha source flag in the dictionary. @param alpha true or false value
2647 Sets the text knockout flag in the dictionary. @param tk true to enable or false to disable text knockout
2648 Sets whether to open linked content in a new window. @param value OpenMode enumeration value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
2649 Configures whether the launched file or application should open in a new window. @param value OpenMode specifying the desired behavior (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2650 Sets window behavior for opening linked content. @param value OpenMode specifying how to open the link
2651 Configures whether the sound action executes synchronously. @param synchronous true to execute synchronously, false otherwise
2652 Sets the repetition flag for the sound action. @param repeat true to allow repeating the sound, false otherwise
2653 Sets the mixing mode for sound actions. @param mix true to enable mixing, false otherwise
2654 Sets caption visibility on the annotation line. @param cap true to show or false to hide the caption
2655 Sets whether the annotation is initially open or closed. @param open true to open, false to close
2656 Sets the pre-release flag in the digital signature properties dictionary. @param preRelease true to indicate a pre-release version
2657 Sets non-embedded font warning flag in the dictionary. @param noEmbedFontWarning true to suppress warnings for non-embedded fonts
2658 Sets the trusted mode flag in the dictionary. @param trustedMode true to enable trusted mode, false otherwise
2659 Sets whether form fields should appear in the PDF document. @param value true to include field appearances, false otherwise
2660 Sets whether to hide or show the toolbar in viewer preferences. @param value true to hide, false to show
2661 Sets whether to hide the menubar in viewer preferences. @param value true to hide, false otherwise
2662 Hides or shows the window UI based on user preference. @param value true to hide, false to show
2663 Sets whether to fit the PDF window to its contents. @param value true to enable fitting, false otherwise
2664 Sets whether the PDF viewer window should be centered. @param value true to center the window, false otherwise
2665 Sets whether to display document title in viewer. @param value true to show, false to hide
2666 Sets an array of string values for a given key in the dictionary. @param name unique identifier for the item to be set @param values array of strings to be stored
2667 Sets an array of PDF names with given values. @param name unique identifier for the item to be set @param values array of string data to be stored (may be wrapped if necessary)
2668 Sets an array of floating-point numbers in the dictionary. @param name unique identifier for the item to be set @param values the float values to represent as a wrapped COSObject
2669 Parses the appearance XML element of a stamp annotation into a COSDictionary. @param appearanceXML Element representing the appearance XML @return A COSDictionary object containing the parsed data or null if none exists
2670 Sets a string value in the dictionary with the given key. @param key unique identifier for the item to be set @param value string data to be stored (null to remove existing item)
2671 Sets the page mode of the document catalog. @param mode PageMode instance to be set
2672 Sets the page layout configuration in the catalog dictionary. @param layout PageLayout object containing the layout configuration
2673 Sets the document catalog's version. @param version new version string
2674 Sets the "Trapped" metadata attribute with a string value. @param value must be one of 'True', 'False', or 'Unknown'
2675 Sets the page label style. @param style new style to apply or null to clear existing style
2676 Initializes the wrapper with a specific type. @param type unique PDF object identifier
2677 Sets the owner string in the PDF attribute object. @param owner unique identifier for the owner
2678 Initializes an instance of PDMarkedContentReference with default values.
2679 Initializes a new instance of PDObjectReference with default type.
2680 Sets the logical structure type of the PDF document element. @param structureType string identifier for the structural type
2681 Initializes a PDStructureNode with a given logical structure type. @param type unique identifier for the node's type
2682 Sets user property name and notifies potential change. @param name string value of the property
2683 Sets the guideline style in the COSDictionary. @param style visual style identifier
2684 Sets the document's sub-filter. @param subfilter string value for the sub-filter
2685 Sets the annotation's intent. @param intent string value representing the intent (null to clear existing)
2686 Sets the line ending style of the free text annotation. @param style desired line ending style (null to reset)
2687 Sets the icon associated with this text annotation. @param icon string representation of the icon
2688 Sets the FDF catalog document version. @param version new version string
2689 Sets the encoding of the FDF document. @param encoding character encoding to be used
2690 Sets the icon scale option in FDF. @param option string value representing scaling configuration
2691 Sets the scaling type for icons in FDF. @param scale string identifier for scaling type
2692 Initializes a new instance of the PDAbstractPattern class. Sets the pattern type in the underlying dictionary.
2693 Sets the action type within the COSDictionary. @param type string identifier for the action type
2694 Sets the subtype of this PDAction instance. @param s subtype string value
2695 Sets annotation subtype. @param subType new subtype value
2696 Sets the appearance state of this annotation. @param as new appearance state value
2697 Sets the attachment name in the PDF annotation dictionary. @param name string value to be stored (null to remove existing item)
2698 Sets the line ending style of the free text annotation. @param style desired style (e.g. "square", "round")
2699 Sets line annotation caption positioning. @param captionPositioning string value for positioning the caption
2700 Sets the highlight mode for this PDAnnotationLink. @param mode string value representing the desired highlighting style
2701 Sets the reply type of this annotation. @param rt new reply type value
2702 Sets the intent of this markup annotation. @param it intent string to be stored
2703 Sets the rubber stamp annotation's display name. @param name new string value to be assigned
2704 Sets the annotation's name. @param name string value to be stored (null to remove existing item)
2705 Sets the highlighting mode of the annotation widget. @param highlightingMode valid value: 'N', 'I', 'O', 'P', or 'T'
2706 Sets the border style string value in the dictionary. @param s new border style string
2707 Initializes an instance of the external data dictionary with default subtype and type values.
2708 Sets the subtype attribute in the external data dictionary. @param subtype string value for the subtype attribute
2709 Sets the name property in the dictionary. @param name string value to be stored (null removes existing item)
2710 Sets URL type in the certificate's dictionary. @param urlType string value representing the URL type
2711 Initializes an empty outline node instance with default TYPE and OUTLINES name.
2712 Initializes a new instance of the document outline from an existing COSDictionary. @param dic COSDictionary object containing the outline structure
2713 Sets default button value. @param value input string to be stored as the default value
2714 Initializes an instance of the PDMeasureDictionary class. @param measureDictionary measurement dictionary object
2715 Sets the measurement subtype in the dictionary. @param subtype string value representing the measurement subtype
2716 Initializes a new instance of the PDNumberFormatDictionary class. Sets the type value in the internal dictionary with key "TYPE".
2717 Sets the viewport's display name. @param name new display name (null to remove existing name)
2718 Initializes a PDTransition instance with the specified transition style. @param style Transition style (e.g. slide, fade)
2719 Sets the dimension of this transition. @param dimension TransitionDimension enum value
2720 Sets the page transition motion. @param motion PDTransitionMotion object defining the transition style
2721 Sets a date item in the dictionary. @param key COSName identifier for the date item @param date Calendar object to be represented as string
2722 Sets a string item in the dictionary with the given key. @param key unique identifier for the item to be set @param value input string to be represented
2723 Sets a string item in the dictionary with embedded object. @param embedded COSName identifier for the embedded object @param key COSName identifier for the string item to be set @param value input string to be represented
2724 Sets the document's language. @param language input string representing the desired language
2725 Sets the PDF document's title. @param title input string representing the new title
2726 Sets the document author. @param author input string representing the author
2727 Sets the document's subject metadata. @param subject input string to represent the subject
2728 Sets the keywords metadata attribute of the PDF document. @param keywords input string representing the document's keywords
2729 Sets the document creator. @param creator input string representing the creator
2730 Sets the document producer. @param producer input string representing the document's producer
2731 Sets or clears the page label prefix. @param prefix new prefix string or null to clear
2732 Sets the Unicode name of an embedded file. @param file input string representing the file's Unicode name
2733 Sets the file name in the file system. @param file input string to be represented
2734 Sets file description in PDF context. @param description input string to be represented
2735 Sets the identifier of the PDStructureElement. @param id unique identifier string
2736 Sets the title of the PDF document structure element. @param title input string to be represented as the title
2737 Sets the document's language. @param language input string representing the language
2738 Sets an alternate description item in the PDF document structure. @param alternateDescription input string for the alternate description
2739 Sets the expanded form of the PDF structure element. @param expandedForm input string representing the expanded form
2740 Sets the actual text in the PDF structure element. @param actualText input string to be represented
2741 Sets a formatted string value for the F property. @param formattedValue input string to be represented
2742 Sets the date annotation in the dictionary. @param date input string representing the date
2743 Sets annotation's display name. @param name input string to be represented
2744 Sets the annotation's content. @param contents input string to be represented
2745 Sets the title annotation in the dictionary. @param title input string to be represented as the title
2746 Sets the subject annotation in the COSDictionary. @param subject input string representing the subject
2747 Sets the annotation symbol according to the input string. @param symbol input string representing the annotation symbol
2748 Sets the default appearance of the annotation. @param appearance input string representing the default appearance
2749 Sets default style for free text annotations. @param style input string representing the default style
2750 Sets the style of the line annotation's caption. @param captionStyle input string to define the caption style
2751 Sets the state of the text annotation. @param state new state value
2752 Sets the state model of the text annotation. @param stateModel new state model value
2753 Sets the FDF document's status. @param status input string representing the document's status
2754 Sets the target form field in the FDF dictionary. @param target input string to be represented
2755 Sets the partial field name in the FDF dictionary. @param partial input string to be represented as the partial field name
2756 Sets the name of this named page reference. @param name input string to be represented
2757 Sets the name of an optional content group. @param name input string to be represented as the group's name
2758 Initializes a PDOptionalContentProperties instance with default settings.
2759 Sets JavaScript action string. @param sAction input JavaScript code to be executed
2760 Sets the file specification parameter. @param f input string representing file specification
2761 Sets the 'D' launch parameter. @param d input string representing the file specification
2762 Sets the operating system-specific launch parameter 'o'. @param o input string value to be represented
2763 Sets PDF launch parameter 'p' to specified string value. @param p input string representing the launch parameter
2764 Sets the URI associated with this PDActionURI. @param uri new URI value
2765 Sets the target directory's filename. @param filename input string to be represented
2766 Sets the annotation name in the dictionary. @param name input string to be represented as the annotation name
2767 Sets the filename parameter. @param file input filename string
2768 Sets the directory path in the launch parameters. @param dir input directory path to be represented
2769 Sets the operation type. @param op operation string (e.g. "open", "edit")
2770 Sets the execute parameter. @param param input string to be represented as P item in dictionary
2771 Sets the contents of the annotation. @param value input string to be represented
2772 Sets the modified date annotation value. @param m new modified date string
2773 Sets the annotation name. @param nm new name to be represented
2774 Sets the default appearance of the free text annotation. @param daValue string value representing the default appearance
2775 Sets the default style string in the annotation's dictionary. @param defaultStyleString input string to be represented
2776 Sets the title of a popup annotation. @param t input string to be represented
2777 Sets the subject of this markup annotation. @param subj input string representing the subject
2778 Sets the annotation's state. @param state new state to be assigned
2779 Sets the state model of the annotation. @param stateModel input string representing the state model
2780 Sets the normal caption for interactive PDF annotations. @param caption input string to be represented
2781 Sets rollover caption. @param caption input string to be represented
2782 Sets an alternate annotation caption. @param caption input string to be represented
2783 Sets the digital signature's date attribute. @param date input date string
2784 Sets the URL attribute in the certificate dictionary. @param url input URL to be represented
2785 Sets the URL item in the dictionary. @param url input URL to be represented
2786 Sets the digital signature's name. @param name input string to be represented
2787 Sets the location item in the COSDictionary. @param location input string to be represented as the location
2788 Sets the reason associated with a digital signature. @param reason input string describing the reason
2789 Sets the contact information in the digital signature. @param contactInfo input string to be represented
2790 Sets the title of the outline item. @param title input string to be represented as title
2791 Sets the default appearance of form fields. @param daValue string value representing the default appearance
2792 Sets default choice field value. @param value input string to be represented as default value
2793 Sets the partial name of this PDField. @param name input string to be set
2794 Sets an alternative field name in the AcroForm structure. @param alternateFieldName new name to be associated with the field
2795 Sets the mapping name in the field's dictionary. @param mappingName input string to be represented
2796 Sets the string value for this non-terminal field. @param value input string to be represented
2797 Sets the text field's value. @param value input string to be represented
2798 Sets the default text field value in the PDF form. @param value input string to be represented as the default value
2799 Sets the default appearance string for this variable text field. @param daValue new default appearance value
2800 Sets the rectilinear measurement scale ratio. @param scaleRatio input string representing the scale ratio
2801 Sets an integer value in the dictionary using the provided key. @param key unique string identifier for the item to be set @param value integer value to represent
2802 Sets an integer value in a nested dictionary. @param embeddedDictionary Embedded dictionary identifier @param key Unique identifier for the item to be set @param value Integer value to represent
2803 Sets a flag value in the dictionary. @param field COSName identifier for the item to be modified @param bitFlag integer mask representing the flag to be set or cleared @param value boolean indicating whether to set (true) or clear (false) the flag
2804 Sets the structural parent ID of this PDF page. @param structParents unique identifier for structural parents
2805 Sets the rotation of this PDPage. @param rotation integer value representing the new rotation angle
2806 Initializes a PDPageTree instance with the given root dictionary and document. @param root COSDictionary representing the page tree root @param document PDDocument associated with the page tree
2807 Removes a specified page from the page tree and updates ancestor counts. @param node COSDictionary object representing the page to be removed
2808 Adds a page to the page tree. @param page PDPage object to be added
2809 Sets the starting page number for the PDF document. @param start positive integer representing the first page number
2810 Sets bits per sample value. @param bps integer value representing the bits per sample
2811 Sets the Marker Context Identifier (MCID) in the underlying COSDictionary. @param mcid integer value representing the MCID
2812 Sets the PDF document's revision number. @param revisionNumber non-negative integer value representing the revision number
2813 Sets the next key of the parent tree in the dictionary. @param parentTreeNextkey integer value representing the next key
2814 Sets the encryption filter's length. @param length integer value representing the encryption filter's length
2815 Sets the encryption version. @param version integer representation of the encryption version
2816 Sets the document's length in the encryption settings. @param length integer value representing the document's length
2817 Sets the document revision number. @param revision integer value representing the current document revision
2818 Sets document permissions. @param permissions integer value representing permission settings
2819 Sets the annotation's page to the specified value.
2820 Sets the justification of a free text annotation. @param justification "centered", "right", or null to clear
2821 Sets the rotation angle of the free text annotation. @param rotation integer value representing the rotation degree
2822 Sets field flags in the FDF dictionary. @param ff integer value representing field flags
2823 Sets flags for a set field within an FDF document. @param ff integer value representing field flags
2824 Sets clear field flags in the dictionary. @param ff integer value representing clear field flags
2825 Sets flags for the associated widget field. @param f integer value representing the flag settings
2826 Sets widget-specific flags in the FDF field. @param ff integer value representing various flags
2827 Sets clear widget field flags. @param ff integer value representing flags
2828 Sets font descriptor flags. @param flags integer value representing font flags
2829 Initializes the width array for a given range of characters in the provided font. @param font COS dictionary representing the font @param glyphList list of glyphs used to map character codes to Unicode strings and retrieve glyph IDs
2830 Sets the paint type in the pattern dictionary.
2831 Sets the pattern type in the dictionary. @param patternType integer value representing the pattern type
2832 Sets the tiling pattern's paint type. @param paintType integer value representing the paint type
2833 Sets the tiling type of the pattern. @param tilingType integer value representing the tiling type
2834 Sets the shading type in the PDF document. @param shadingType integer value representing the shading type
2835 Sets the number of bits per flag in shading type. @param bitsPerFlag integer value representing number of bits
2836 Sets the number of vertices per row in the shading dictionary. @param verticesPerRow integer value representing vertices count
2837 Sets the number of bits per color component for triangle-based shading. @param bitsPerComponent integer value representing the bit depth
2838 Sets the number of bits per coordinate in the dictionary. @param bitsPerCoordinate integer value representing the bit depth
2839 Sets line cap style in the PDF extended graphics state. @param style integer value representing the line cap style
2840 Sets the line join style in the PDF document. @param style integer value representing the line join style
2841 Sets or removes the Overprint Mode property in the extended graphics state dictionary. @param overprintMode the Overprint Mode value to set (null to remove)
2842 Sets the action flags in the dictionary. @param flags integer value representing the action flags
2843 Sets action flags in the PDF form submission. @param flags integer value representing action flags
2844 Sets the page number in the dictionary. @param pageNumber non-negative integer value representing the page number
2845 Sets annotation index in the dictionary. @param index new index value; negative values remove the item
2846 Sets annotation flags. @param flags integer value representing new flag settings
2847 Sets the structural parent annotation value. @param structParent integer value to represent the structural parent
2848 Sets the Q value in the annotation's dictionary. @param q integer value to represent
2849 Sets annotation rotation in degrees. @param rotation new rotation value
2850 Sets the P value in the dictionary to a specified integer within valid range (0-3). @param p valid P value
2851 Sets timestamp requirement status in the dictionary. @param flag true to require timestamps, false otherwise
2852 Sets the open count of this outline node. @param openCount number of child nodes currently open
2853 Sets an integer value in the form's dictionary. @param q The Q parameter to be set
2854 Sets field flags within the AcroForm structure. @param flags integer value representing field flags
2855 Sets the top index for displayed items in the list box. @param topIndex new top index value or null to clear
2856 Sets maximum length constraint for text input field. @param maxLen maximum allowed characters in the field
2857 Sets the Q attribute value in the dictionary. @param q integer value to represent
2858 Sets a long integer value in the dictionary. @param key unique identifier for the item to be set @param value long integer value to represent
2859 Writes the document trailer, potentially updating its size and removing obsolete entries. @param doc the COSDocument instance being written
2860 Sets the digital signature revision. @param revision long integer value representing the revision
2861 Sets the minimum revision number in the dictionary. @param revision long integer value representing the minimum revision
2862 Sets a floating-point value in the dictionary using a string key. @param key unique identifier for the item to be set (string representation) @param value the float value to represent
2863 Sets the user unit for this PDPage instance. @param userUnit positive float value representing the user unit
2864 Sets the guideline width in the PDF style configuration. @param width the new width value
2865 Sets the annotation's opacity. @param opacity value between 0.0 and 1.0 representing transparency level
2866 Sets the leader length of the line annotation. @param leaderLength float value representing the leader length
2867 Sets the leader extension value of the line annotation. @param leaderExtend float value representing the leader extension
2868 Sets the offset of the leader line in the annotation.
2869 Sets the font weight in the dictionary. @param fontWeight the desired font weight value
2870 Sets the italic angle of the font descriptor. @param angle The new italic angle value
2871 Sets the font's ascent value. @param ascent floating-point height above the baseline
2872 Sets the font's descent value. @param descent the vertical distance between baseline and bottommost of text
2873 Sets font's leading (line spacing) attribute. @param leading line spacing value in points
2874 Sets the font's cap height. @param capHeight the desired cap height value
2875 Sets X-Height font attribute. @param xHeight the X-Height value to set
2876 Sets the vertical stem value of the font. @param stemV the vertical stem value to represent
2877 Sets the horizontal stem height of the font. @param stemH float value representing the stem height
2878 Sets the average font width. @param averageWidth average character width in points
2879 Sets the maximum width of the font. @param maxWidth the maximum width to represent
2880 Sets the missing width value in the dictionary. @param missingWidth the floating-point value representing the missing width
2881 Sets the X-step value in the tiling pattern dictionary. @param xStep floating-point value for the X-axis step
2882 Sets the vertical step value of the tiling pattern. @param yStep vertical step in points
2883 Sets the volume for sound actions. @param volume float value between -1 and 1 (inclusive)
2884 Sets the length of the leader line. @param leaderLineLength new length value
2885 Sets the extension length of the leader line. @param leaderLineExtensionLength float value for the extension length
2886 Sets the offset length of the leader line annotation. @param leaderLineOffsetLength float value representing the offset
2887 Sets the constant opacity value in the annotation dictionary. @param ca float value representing the constant opacity
2888 Sets the width of the border style. @param w the new width value
2889 Sets the V capability value in the dictionary. @param minimumRequiredCapability float value representing the required capability level
2890 Sets the CYX value in the dictionary. @param cyx floating-point value to represent CYX
2891 Parses a COSStream from the given dictionary. @param dic COSDictionary containing stream information @return populated COSStream object or throws IOException if parsing fails
2892 Clones and merges the given COSObjectable into the target. @param base the original object to clone @param target the object to merge into
2893 Parses a PDF document and returns a PDDocument instance. @param lenient whether to perform strict or lenient parsing @return PDDocument object or throws IOException if parsing fails
2894 Processes the content stream operators, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process @throws IOException if an I/O error occurs during parsing or processing
2895 Parses the input stream and returns a list of tokens. @throws IOException if an I/O error occurs during parsing
2896 Retrieves the bounding box of a glyph. @return PDRectangle object representing the glyph's bounds or null if not found
2897 Retrieves the width of a Type 3 font character procedure. @throws IOException if an I/O error occurs during parsing
2898 Wraps PDDocument in a call to write with a null signature interface. @param doc PDDocument object containing the PDF data
2899 Saves the PDF document to the specified output stream with incremental updates and optional encryption. @param output OutputStream to write the PDF document to
2900 Initializes a PDDocument object with an in-memory stream cache.
2901 Retrieves the document catalog for this PDF document. @return PDDocumentCatalog object or null if not found
2902 Retrieves a COSDictionary representing a PDF page by its 1-based index. @param pageNum the index of the page to retrieve @param node the parent dictionary to start searching from @return The COSDictionary representing the requested page, or null if not found
2903 Creates a PDFileSpecification instance from the given COSBase object. @param base COSBase object to create specification from @return PDFileSpecification object or null if invalid input
2904 Notifies the structure element of attribute changes. @param PDStructureElement's attributeChanged method is called if a valid structure element exists
2905 Adds a child structure node with COSObjectable interface to the existing list of children. @param objectable the child structure node (COSObjectable) to append
2906 Inserts a new objectable child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
2907 Removes a specified child node that is COSObjectable from the current structure node. @param objectable COSObjectable object to be removed
2908 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to be stored
2909 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary object to be stored as default
2910 Initializes an instance of FDFAnnotationCaret with default annotation subtype.
2911 Initializes an instance of FDFAnnotationCircle with default annotation type.
2912 Initializes an instance of FDFAnnotationFileAttachment with default subtype.
2913 Initializes an instance of FDFAnnotationFreeText with default subtype.
2914 Initializes an instance of FDFAnnotationInk with default annotation subtype.
2915 Initializes a new instance of the FDFAnnotationLine class with default annotation type.
2916 Initializes an instance of FDFAnnotationLink with default annotation subtype.
2917 Initializes an instance of FDFAnnotationPolygon with default subtype.
2918 Initializes an instance of FDFAnnotationPolyline with default subtype annotation.
2919 Initializes an instance of FDFAnnotationSound with default subtype.
2920 Initializes an instance of FDFAnnotationSquare with default subtype.
2921 Initializes an instance of the FDFAnnotationStamp class with default subtype.
2922 Initializes an instance of FDFAnnotationText with default annotation subtype.
2923 Initializes an instance of the FDFAnnotationTextMarkup class with default annotation type.
2924 Builds vertical metrics for the given CID font. @param cidFont COSDictionary instance representing the CID font
2925 Initializes an instance of the PDSimpleFont class with default values.
2926 Retrieves an optional content group by name. @param name unique identifier for the group @return PDOptionalContentGroup object or null if not found
2927 Retrieves the optional content groups (OCGs) as a collection of PDOptionalContentGroup instances.
2928 Sets the line width using a floating-point value. @param width floating-point value representing the new line width
2929 Sets the miter limit in the extended graphics state. @param miterLimit floating-point value for the miter limit (null removes it)
2930 Sets the flatness tolerance in the extended graphics state. @param flatness the flatness value (null removes the item)
2931 Sets the smoothness tolerance. @param smoothness floating-point value representing the smoothness tolerance (null removes it)
2932 Sets the stroking alpha constant. @param alpha floating-point value representing the alpha constant (null removes it)
2933 Sets the non-stroking alpha constant. @param alpha floating-point value for non-stroking alpha (null removes it)
2934 Initializes a PDAnnotationLink instance with default properties. Sets the subtype to "SUB_TYPE".
2935 Initializes a PDAnnotationMarkup instance with default properties.
2936 Initializes a PDAnnotation instance with default properties.
2937 Initializes a new PDAnnotationWidget instance with default subtype.
2938 Initializes a PDAnnotationLink instance from a COSDictionary. @param dict the dictionary object to initialize from
2939 Initializes a PDAnnotationMarkup instance from a COSDictionary. @param dict the dictionary object to initialize from
2940 Initializes a PDAnnotationPopup instance from a COSDictionary. @param dict the dictionary object to initialize from
2941 Initializes a PDAnnotationUnknown instance from a COSDictionary. @param dic the dictionary object to initialize from
2942 Initializes a PDAnnotation instance from a COSDictionary. @param field the dictionary object to initialize from
2943 Sets uniform rectangle margin differences. @param difference single value for all margins
2944 Sets uniform rectangle differences for the free text annotation. @param difference single margin adjustment value
2945 Sets uniform rectangle differences for this annotation. @param difference single value for all margin differences
2946 Sets the border line for a PDF appearance content stream. @param lineWidth desired line width (default: 1) @param bs PDBorderStyleDictionary object representing border style properties @param border COSArray object containing dash pattern array
2947 Sets the key usage extension in the certificate's dictionary. @param digitalSignature indicates if digital signature is allowed (1) or not (0) @param nonRepudiation indicates if non-repudiation is allowed (1) or not (0) @param keyEncipherment indicates if key encipherment is allowed (1) or not (0) @param dataEncipherment indicates if data encipherment is allowed (1) or not (0) @param keyAgreement indicates if key agreement is allowed (1) or not (0) @param keyCertSign indicates if key certificate signing is allowed (1) or not (0) @param cRLSign indicates if certificate revocation list signing is allowed (1) or not (0) @param encipherOnly indicates if only enciphering is allowed (1) or not (0) @param decipherOnly indicates if only deciphering is allowed (1) or not (0)
2948 Initializes a PDCheckBox instance with the given AcroForm. @param acroForm parent PDAcroForm object
2949 Initializes PDComboBox instance with given interactive PDF form. @param acroForm parent interactive PDF form
2950 Initializes PDChoice instance with given interactive form. @param acroForm parent interactive PDF form
2951 Sets the single-valued choice field's value. @param value input string to be represented
2952 Retrieves the annotation's border, ensuring it has at least 3 elements. If missing, additional elements are set to zero (as per Adobe Reader behavior). @return COSArray object representing the border
2953 Initializes a new instance of the COSWriterCompressionPool class with the given PDDocument and CompressParameters. @param document PDF document object @param parameters compression parameters, or null for default settings
2954 Retrieves date value from an embedded dictionary. @param embedded embedded dictionary object @param key unique identifier for the date object
2955 Creates a PDF image XObject from the provided BufferedImage. @param document PDDocument object @param image input BufferedImage to process
2956 Adds corner curl to the PDF document by drawing two Bezier curve segments. @param anglePrev previous angle @param angleCur current angle @param radius radius of the curves @param cx x-coordinate of the center point @param cy y-coordinate of the center point @param alpha and alphaPrev curvature parameters @param addMoveTo whether to add a 'move to' command before drawing
2957 Draws a basic ellipse within the specified rectangle. @param left left edge of bounding box @param bottom bottom edge of bounding box @param right right edge of bounding box @param top top edge of bounding box
2958 Formats and displays plain text content based on alignment settings. @throws IOException if formatting process encounters I/O errors
2959 Calculates the font size for a given PDFont object and PDRectangle content area. @param font PDFont object defining font characteristics @param contentRect PDRectangle representing the content area dimensions @return calculated font size or default value if not applicable
2960 Reads and initializes font encoding. @throws IOException if an I/O error occurs
2961 Checks if the font is symbolic. @return true if symbolic, false or null otherwise
2962 Retrieves TrueType font by base font name and PDFontDescriptor. @param baseFont the base font to map @param fontDescriptor the descriptor containing font information @return FontMapping object with TrueType font and fallback status
2963 Retrieves a FontBoxFont object for the specified base font and PDFontDescriptor. If the exact font is not found, attempts to find a fallback font using the provided descriptor. @param baseFont unique PostScript font identifier @param fontDescriptor the descriptor containing font information @return FontMapping<FontBoxFont> object or null if not found
2964 Checks if XFA form is dynamic. @return true if XFA form exists and has no fields, false otherwise
2965 Retrieves rich contents from annotation dictionary. @return string representation of rich contents or empty string if not found
2966 Writes the current field's XML representation to the specified writer. @param output target output stream for XML data
2967 Retrieves rich text value from inheritable attribute.
2968 Initializes a PDFunctionType4 instance from a COSBase function stream. @param functionStream input PDF function stream
2969 Performs interpolation on input data by recursively calculating sample values based on provided coordinates and step indices. @param coord array of float values representing the current coordinate vector @param step integer value indicating the current step index @return float[] array of interpolated sample values or null if not initialized
2970 Initializes Type 6 Shading Context with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation
2971 Initializes Type 7 Shading Context with provided PDFShading and device bounds. @param shading the PDFShading object to be managed @param colorModel the color model for the shading context @param xform the affine transform for the shading context @param matrix the transformation matrix for the shading context @param deviceBounds the device bounds for pixel value calculation
2972 Retrieves raw XFA bytes, handling split resources. @return byte array or empty if not found
2973 Initializes an empty page destination with default configuration.
2974 Configures the page view fitting behavior within its bounding box. @param fitBoundingBox true to enable bounded fitting, false otherwise
2975 Initializes an empty page destination with default settings.
2976 Sets the left margin of the PDF page destination. @param x new left margin value; -1 to clear
2977 Sets whether the PDF destination fits within a bounding box. @param fitBoundingBox true to enable fitting, false otherwise
2978 Initializes an empty page destination with type and minimum buffer capacity.
2979 Sets the left coordinate of the target area within a PDF page. @param x new left value (-1 to reset)
2980 Sets the bottom coordinate of the rectangle destination. @param y new bottom value (or -1 to clear)
2981 Sets the right coordinate of the rectangle destination. @param x new right value; -1 to reset
2982 Sets the top coordinate of the rectangle destination. @param y top coordinate value or -1 to remove
2983 Initializes a new instance of PDPageFitWidthDestination with default settings. Sets the name at index 1 to the constant TYPE.
2984 Sets the top position of the page's content bounding box. @param y new top value or -1 to reset
2985 Sets whether the page's content is bounded by a box. @param fitBoundingBox true to enable bounding box fitting
2986 Initializes an empty page destination with direct access enabled. Sets initial zoom type and grows the COSArray to accommodate a minimum buffer capacity of 5.
2987 Sets the left coordinate of a PDF page view. @param x new left coordinate value
2988 Sets the top coordinate of the page view. @param y new top value (or -1 to reset)
2989 Sets the zoom level of the destination page. @param zoom the desired zoom factor
2990 Parses a dictionary value from the PDF source. @return COSBase object representing the parsed value
2991 Retrieves and decodes the decode parameters from the PDF stream. @return List of decoded parameters or null if not found or invalid
2992 Retrieves and decodes file decode parameters from the PDF stream. @return List of decoded parameters or null if not found or invalid
2993 Initializes a new instance of the PDCalGray class.
2994 Initializes a new PDColor instance with CALRGB color space.
2995 Initializes a PDLab instance with default LAB color space settings.
2996 Initializes an instance of PDCalGray from COSArray representation.
2997 Initializes a new PDCalRGB instance from an array of color components. @param rgb COSArray containing RGB values
2998 Initializes the color space with LAB data from a COSArray. @param lab COSArray containing LAB values
2999 Loads the ICC profile for color space management. If using alternate color space, attempts to fall back if embedded profile fails. Otherwise, initializes Java's built-in sRGB profile or ensures display profile for other colors. Sets initial color and triggers ProfileDataException or CMMException for invalid profiles. @throws IOException if I/O error occurs during fallback process
3000 Sets the A component range in the dictionary. @param range PDRange object containing minimum and maximum values for A
3001 Sets the blue component range in the PDLab dictionary. @param range PDRange object containing minimum and maximum values
3002 Retrieves the page's crop box dimensions and coordinates. @return The PDRectangle object representing the crop box, or a default value if not found
3003 Resolves the bounding box for a PDF annotation widget. @param fieldWidget The form field to resolve the bounding box for @param appearanceStream Appearance stream containing the bounding box information @return The resolved PDRectangle object or null if not found
3004 Sets the bounding box (BBox) attribute. @param bbox rectangle object to be set
3005 Sets the gamma color values with a specified name. @param name unique identifier for the color attribute @param value PDGamma object containing the new color data
3006 Sets the four colors using a PDFourColours object. @param name string identifier for the color attribute @param value PDFourColours object representing the four colors
3007 Initializes a PDPage object with default letter-sized media box dimensions.
3008 Adds a resource to the dictionary with the given kind and name. If the item already exists, returns the existing key; otherwise, creates a new unique key and adds the item to the dictionary. @param kind type of resource (e.g. font, color space) @param prefix string prefix to use when generating the key @param object data associated with the resource @return The added key or existing key if the item already exists
3009 Adds a font resource to the dictionary with the given name. @param name unique identifier for the font resource
3010 Adds a color space resource to the dictionary. @param name unique identifier for the color space
3011 Adds an extended graphics state to the dictionary. @param name unique identifier for the resource
3012 Adds a shading resource to the dictionary with the given kind and name. @param name unique identifier for the shading resource
3013 Adds a pattern resource to the PDF resources dictionary. @param name unique identifier for the pattern resource
3014 Adds a resource property to the dictionary. @param properties object containing property data
3015 Adds an XObject resource to the dictionary. @param xobject data associated with the XObject resource
3016 Retrieves the Form Data Format (FDF) dictionary. @return FDFDictionary object or a new instance if not found
3017 Initializes an instance of the FDFDocument class with default settings. Sets up the document's state, version, trailer, and root dictionary (FDF catalog).
3018 Retrieves the FDF catalog from the document's trailer dictionary. If no catalog is found, a new one is created and initialized. @return FDFCatalog object representing the retrieved or newly created catalog
3019 Retrieves the fractional space to allocate in icon fitting configuration. @return PDRange object defining allocated space
3020 Initializes a new instance of the PDTilingPattern class.
3021 Retrieves the annotation's appearance dictionary. @return PDAppearanceDictionary object or a newly created instance if not found
3022 Inserts a new sibling before the current outline item. @param newSibling new PDOutlineItem to be inserted
3023 Inserts a new sibling outline item after the current one. @param newSibling the PDOutlineItem to be inserted
3024 Adds a child outline item to the end of this node's children. @param newChild the PDOutlineItem object to be appended
3025 Prepends a new child outline item to the current node. @param newChild PDOutlineItem object to be added as first child
3026 Sets the first bead in the thread with associated data. @param bead PDThreadBead object containing initial threaded content
3027 Initializes a PDThreadBead instance with default values.
3028 Adds a new bead to the thread, updating links between adjacent beads. @param append the PDThreadBead object to be appended
3029 Sets a string value in the dictionary with the given key. @param name unique identifier for the item to be set @param value string data to be stored (null to remove existing item)
3030 Sets the rendering intent in the extended graphics state dictionary. @param ri rendering intent string (null to remove existing value)
3031 Sets the name associated with this named action. @param name string identifier for the action
3032 Sets the style of the border effect. @param s new style value
3033 Initializes a new instance of the class from a given PDDocument. @param document the PDF document to manage page labels for
3034 Initializes a PDStructureElement with a given structural type and parent node. @param structureType unique identifier for the structural type @param parent new parent node in the logical structure of the PDF document
3035 Initializes a new instance of PDStructureTreeRoot with default logical structure type.
3036 Initializes a new instance of the PDShadingPattern class. Sets the pattern type to shading pattern in the underlying dictionary.
3037 Initializes a PDAction instance with default type.
3038 Retrieves the document outline from the catalog dictionary. @return PDDocumentOutline object or null if not found
3039 Retrieves the parent outline node. @return The parent outline node or null if not found
3040 Sets the value at a specified index in the button's export values collection. @param index valid index within the collection, throwing an IllegalArgumentException if invalid
3041 Initializes an instance of the PDRectlinearMeasureDictionary class with subtype set.
3042 Initializes a PDTransition instance with default slide transition style.
3043 Sets a date item in the dictionary using a string identifier. @param key unique string identifier for the date item @param date Calendar object to be represented as string
3044 Sets an embedded date item in the dictionary with a given key. @param embedded COSName identifier for the embedded object @param key COSName identifier for the date item @param date Calendar object to be represented as string
3045 Sets the creation date of the PDF document. @param date Calendar object representing the creation date
3046 Sets the modification date of the PDF document. @param date Calendar object representing the new modification date
3047 Sets the creation date annotation in the PDF document. @param date Calendar object representing the creation date
3048 Updates the modified date of this PDF annotation. @param c Calendar object representing the new modified date
3049 Sets the creation date of the annotation. @param creationDate Calendar object representing the creation date
3050 Sets the sign date in the underlying COSDictionary structure. @param cal Calendar object representing the date to be set
3051 Sets custom metadata value in PDF document. @param fieldName unique identifier for the item to be set @param fieldValue input string to be represented
3052 Sets a string item in the dictionary with the given key. @param name unique identifier for the item to be set @param value input string to be represented
3053 Sets the 'Base' string associated with URI actions. @param base input string to be represented
3054 Sets the digital signature version. @param applicationVersion version string to be represented
3055 Sets numerical unit formatting option. @param units unique identifier for the unit to be set
3056 Sets the display style for fractional values. @param fractionalDisplay one of "D", "F", "R", or "T" to specify decimal, fraction, rounded, or truncated display
3057 Sets the thousand separator for numerical formatting. @param thousandsSeparator input string to be represented
3058 Sets the decimal separator for numerical formatting. @param decimalSeparator desired separator character
3059 Sets the prefix string for numerical labels in PDF document. @param labelPrefixString input string to be represented as label prefix
3060 Sets the numerical formatting option for label suffix strings. @param labelSuffixString input string to be represented
3061 Sets the label position to a specific value. @param labelPositionToValue one of "S", "P", or null
3062 Sets the Mac OS subtype for an embedded file. @param macSubtype subtype value to be set
3063 Sets the Mac creator for an embedded file. @param macCreator string identifier of the Mac creator
3064 Sets the Mac OS resource fork for an embedded file. @param macResFork input string to be represented
3065 Initializes an FDFField object from a given XML element. @param fieldXML the input XML element representing a form field
3066 Initializes an instance of PDOptionalContentGroup with a specified name. @param name input string to be represented as the group's name
3067 Adds a PDOptionalContentGroup to the list of groups. @param ocg group to be added
3068 Retrieves the fundamental base state of optional content. @return BaseState object representing the base state
3069 Enables or disables an optional content group. @param group the PDOptionalContentGroup to be enabled/disabled @param enable true to enable, false to disable @return true if the group was successfully updated, false otherwise
3070 Sets an integer attribute in the dictionary using a given key. @param name unique identifier for the attribute to be set @param value integer value to represent
3071 Sets a number value in the dictionary using the provided key. @param name unique string identifier for the item to be set @param value integer value to represent
3072 Sets the denominator value in the COSDictionary object. @param denominator numerical value of the denominator
3073 Sets annotation invisibility flag. @param invisible true to make annotation invisible
3074 Sets annotation visibility. @param hidden true to hide, false to show
3075 Sets the printed flag in the annotation dictionary. @param printed true if document has been printed
3076 Sets the 'No Zoom' annotation flag. @param noZoom true to disable zooming, false otherwise
3077 Sets whether the annotation should not rotate with its parent. @param noRotate true to prevent rotation
3078 Sets the "no view" annotation flag. @param noView true to hide annotation from view, false otherwise
3079 Sets document read-only status. @param readOnly true to make document read-only
3080 Sets annotation lock status. @param locked true to lock, false to unlock
3081 Sets the toggle no view flag in the annotation. @param toggleNoView boolean indicating whether to show (false) or hide (true) the annotation when toggled
3082 Sets the lock status of annotation contents. @param lockedContents true to lock, false to unlock
3083 Sets annotation invisibility flag. @param invisible true to make annotation invisible, false otherwise
3084 Sets the hidden flag in the annotation's dictionary. @param hidden true to hide the annotation
3085 Sets the printed flag in the annotation's dictionary. @param printed boolean indicating whether the annotation has been printed
3086 Sets whether zooming is disabled. @param noZoom true to disable zooming
3087 Sets the 'No Rotate' flag in the annotation's dictionary. @param noRotate true to prevent rotation of the annotation
3088 Sets the 'No View' flag in the COSDictionary object. @param noView boolean indicating whether to show (false) or hide (true) the annotation
3089 Sets whether this annotation is read-only. @param readOnly true to make the annotation read-only
3090 Sets the annotation's locked state. @param locked true to lock, false to unlock
3091 Sets the toggle no view flag in the annotation's dictionary. @param toggleNoView true to enable or false to disable
3092 Sets whether the annotation's contents are locked. @param lockedContents true to lock, false to unlock
3093 Sets filter requirement in PDF document. @param flag true to require a filter, false otherwise
3094 Sets sub-filter requirement for digital signatures. @param flag boolean indicating whether sub-filter is required
3095 Sets whether a digest method is required. @param flag true to require a digest method, false otherwise
3096 Sets the V required flag in the digital signature dictionary. @param flag boolean indicating whether to set (true) or clear (false) the V required flag
3097 Sets reason required flag in the dictionary. @param flag boolean indicating whether to require a reason (true) or not (false)
3098 Sets whether legal attestation is required. @param flag true to require legal attestation
3099 Sets whether additional revision information is required. @param flag boolean indicating whether to require (true) or not require (false)
3100 Marks subject attribute as required in certificate. @param flag true to require subject, false otherwise
3101 Sets issuer required flag in certificate dictionary. @param flag boolean indicating whether issuer is required
3102 Sets OID required flag in the certificate dictionary. @param flag boolean indicating whether OID is required
3103 Sets subject Distinguished Name (DN) requirement flag. @param flag true to require subject DN, false otherwise
3104 Sets key usage as required in the certificate. @param flag true to mark key usage as required, false otherwise
3105 Sets the required flag for URL attribute in digital signature certificate. @param flag boolean indicating whether to enable (true) or disable (false) the URL requirement
3106 Sets whether the PDF outline item's title should be displayed in italics. @param italic true to display in italics, false otherwise
3107 Sets the bold flag on this outline item. @param bold true to make the text bold, false otherwise
3108 Sets whether signatures exist in the PDF document. @param signaturesExist true if signatures are present, false otherwise
3109 Sets the append-only flag in the signature dictionary. @param appendOnly boolean indicating whether to enable (true) or disable (false) append-only mode
3110 Enables or disables choice field sorting. @param sort true to enable sorting, false otherwise
3111 Enables or disables multi-selection behavior. @param multiSelect true to allow multiple selections, false otherwise
3112 Enables or disables spell-checking for the choice field. @param doNotSpellCheck true to disable spell-checking, false otherwise
3113 Sets whether changes should be committed upon selection. @param commitOnSelChange boolean indicating whether to commit on selection change
3114 Sets whether this choice field is a combo box. @param combo true to enable combo box behavior
3115 Enables or disables editable state of combo box. @param edit true to enable editing, false otherwise
3116 Sets read-only status of this field. @param readonly true to enable read-only mode
3117 Sets whether this field is required or not. @param required true if field must be filled, false otherwise
3118 Sets the 'No Export' flag in the field's dictionary. @param noExport boolean indicating whether to enable (true) or disable (false) export restrictions
3119 Initializes a PDButton instance with the given AcroForm and sets the push button flag. @param acroForm parent PDAcroForm object
3120 Initializes a radio button field within the given PDF form. @param acroForm parent PDAcroForm object
3121 Sets whether radio buttons operate in unison. @param radiosInUnison true if radio buttons should select one option together
3122 Enables or disables multiline input in the text field. @param multiline true to allow multiple lines of input, false otherwise
3123 Sets password protection flag on the text field. @param password true to enable password protection
3124 Sets the file select flag in the dictionary. @param fileSelect true to enable file selection, false otherwise
3125 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable
3126 Enables or disables scrolling within the text field. @param doNotScroll true to prevent scrolling, false otherwise
3127 Sets the combined input flag in the PDF field. @param comb true to enable combined input, false otherwise
3128 Enables or disables rich text formatting in the PDF form field. @param richText true to enable rich text, false otherwise
3129 Decodes a JPEG2000 image from the provided input stream and writes it to the output stream. @param encoded InputStream containing the JPX image data @param decoded OutputStream to write the decoded image to @param parameters COSDictionary object containing decoding settings @param index integer representing the index of the image (not used) @param options DecodeOptions object specifying decoding settings @return DecodeResult object containing the decoded image and parameters
3130 Validates the page structure in the given PDF document. @param root COSDictionary object representing the PDF document's root
3131 Retrieves the page tree associated with this catalog. @return A PDPageTree instance representing the document's pages
3132 Initializes a PDPageTree instance with the given COSDictionary as the page tree root. @param root COSDictionary representing the page tree root
3133 Removes a specified PDPage from the page tree. @param page PDPage object to be removed
3134 Inserts a new page before an existing one, updating the parent-child relationships. @param newPage new page to be inserted @param nextPage page before which the new page will be inserted
3135 Inserts a new page after the specified previous page, updating the parent-child relationships and incrementing child counts. @param newPage new page to be inserted @param prevPage previous page where the new page will be added
3136 Increments the PDF document's revision number.
3137 Creates a PDImageXObject from the provided BufferedImage. @param document PDDocument object @param image BufferedImage to convert @return Prepared PDImageXObject instance or throws IOException if an error occurs
3138 Creates a PDImageXObject instance from a TIFF file using the provided parameters. @param document PDDocument object @param reader RandomAccessRead object to read TIFF data from @param number Number of pages to skip before extracting data (default: 0) @return PDImageXObject instance or null if no image data is found
3139 Sets a floating-point number in the dictionary using a string key. @param name unique identifier for the item to be set (string representation) @param value the float value to represent
3140 Sets the intensity of the border effect. @param i intensity value (float)
3141 Sets the numerical conversion factor in the dictionary. @param conversionFactor float value representing the conversion factor
3142 Parses the cross-reference object stream from a given byte offset, handling standalone and hybrid tables. @param objByteOffset starting byte position of the cross-reference table @param isStandalone true if parsing a standalone xref table, false for hybrid @return previous object key value from the parsed dictionary
3143 Performs lenient parsing and returns a PDDocument instance.
3144 Processes a transparency group, handling graphics state management and operator processing. @param group PDTransparencyGroup object containing the transparency group data @throws IOException if an I/O error occurs during parsing or processing
3145 Processes Type 3 font stream operators, handling graphics state management and operator processing. @param charProc Type 3 character procedure object @param textRenderingMatrix Text rendering matrix to be set
3146 Processes a PDF annotation by applying the necessary transformations and clipping to render its content. @param annotation The annotation object containing metadata and appearance information @param appearance The appearance stream object associated with the annotation, containing visual elements and graphics state @throws IOException if an I/O error occurs during processing or parsing of the annotation's content
3147 Processes a tiling pattern by applying the specified transformation matrix, clipping to its bounding box, and processing content stream operators. @param tilingPattern Tiling pattern object @param color Color object (optional) @param colorSpace Associated color space for the color (optional) @param patternMatrix Transformation matrix to be applied @throws IOException if an I/O error occurs during parsing or processing
3148 Processes content stream operators, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process
3149 Serializes COSDocument to a PDDocument instance and writes it. @param doc underlying COSDocument object
3150 Saves the PDF document to the specified output stream with optional compression. @param output OutputStream to write data to @param compressParameters CompressParameters object for incremental updates and compression @throws IOException if the document has been closed or another error occurs during saving
3151 Retrieves the PDF document's version. @return Version string or null if not found If the document is 1.4 or later, returns the maximum of the header version and the catalog version (if present). Otherwise, returns the header version only.
3152 Retrieves a PDF page by its index. @param index the 1-based index of the page to retrieve @return PDPage object or null if not found
3153 Removes a page from the page tree at the specified 1-based index. @param index the index of the page to be removed
3154 Retrieves the index of a specific PDPage within this page tree. @param page target PDPage object @return zero-based index if found, -1 otherwise
3155 Retrieves and returns a PDFileSpecification instance from the dictionary. @return PDFileSpecification object or null if invalid input
3156 Retrieves the file specification from the FDF dictionary. @return PDFileSpecification object or null if not found
3157 Retrieves a list of Embedded FDFs as PDFileSpecifications. @return List<PDFileSpecification> or null if not found
3158 Retrieves the file specification associated with this named page reference. @return PDFileSpecification object or null if not found
3159 Retrieves file specification from COS dictionary object. @return PDFileSpecification instance or null if invalid input
3160 Retrieves file specification from dictionary object. @return PDFileSpecification object or null if invalid input
3161 Retrieves the file specification from the COS dictionary. @return PDFileSpecification object or null if invalid
3162 Retrieves file specification from dictionary object. @return PDFileSpecification object or null if invalid input
3163 Retrieves and configures file specification based on form action dictionary. @return PDFileSpecification object or null if invalid input
3164 Retrieves the file specification associated with this action. @return PDFileSpecification object or null if not found
3165 Retrieves and creates a PDFileSpecification instance from the COSBase dictionary object with key FS. @return PDFileSpecification object or null if invalid input
3166 Notifies the structure element of potential attribute changes based on value comparison. @param oldBase previous COSBase object @param newBase current COSBase object
3167 Appends a child element to the existing list of children and sets its parent. @param structureElement the child element (PDStructureElement) to append
3168 Inserts a new child node before an existing reference node in the structure. @param newKid new child node to be inserted @param refKid reference node before which the new node is to be inserted
3169 Removes a specified child element from the current structure node. @param structureElement PDStructureElement to be removed
3170 Initializes an instance of FDFAnnotationHighlight with default annotation subtype.
3171 Initializes an instance of FDFAnnotationSquiggly with default squiggly subtype.
3172 Initializes an instance of FDFAnnotationStrikeOut with default strikeout annotation subtype.
3173 Initializes an instance of FDFAnnotationUnderline with default annotation type.
3174 Initializes a new PDAnnotationFileAttachment instance with default properties.
3175 Initializes a new PDAnnotationInk instance with default subtype. @param SUB_TYPE annotation subtype (default: COSName.SUBTYPE)
3176 Initializes a new PDAnnotationLine instance with default properties.
3177 Initializes a new PDAnnotationPolygon instance with subtype set to 'polygon'.
3178 Initializes a new PDAnnotationPolyline instance with default properties.
3179 Initializes a new PDAnnotationRubberStamp instance with default subtype.
3180 Initializes a PDAnnotationSquareCircle instance with subtype. @param subType annotation subtype (e.g., "Square", "Circle")
3181 Initializes a new instance of PDAnnotationText with default subtype.
3182 Initializes a PDAnnotationTextMarkup instance with subtype and empty quad points. @param subType the annotation subtype
3183 Initializes a PDAnnotationCaret instance from a COS dictionary. @param field the dictionary object to initialize from
3184 Initializes a PDAnnotationFileAttachment instance from a COSDictionary. @param dict the dictionary object to initialize from
3185 Initializes a PDAnnotationFreeText instance from a COSDictionary. @param field the dictionary object to initialize from
3186 Initializes a PDAnnotationInk instance from a COSDictionary. @param dict the dictionary object to initialize from
3187 Initializes a PDAnnotationLine instance from a COSDictionary. @param field dictionary object to initialize from
3188 Initializes a PDAnnotationPolygon instance from a COSDictionary. @param dict the dictionary object to initialize from
3189 Initializes a PDAnnotationPolyline instance from a COSDictionary. @param dict the dictionary object to initialize from
3190 Initializes a PDAnnotationRubberStamp instance from a COSDictionary. @param field the dictionary object to initialize from
3191 Initializes a PDAnnotationSound instance from a COSDictionary. @param field COSDictionary object to initialize from
3192 Initializes a PDAnnotationSquareCircle instance from a COSDictionary. @param dict dictionary object to initialize from
3193 Initializes a PDAnnotationText instance from a COSDictionary. @param dict the dictionary object to initialize from
3194 Initializes a PDAnnotationTextMarkup instance from a COSDictionary. @param field dictionary object to initialize from
3195 Retrieves the popup annotation associated with this markup. @return PDAnnotationPopup object or null if not found
3196 Retrieves a list of associated PDAnnotationWidgets. @return List<PDAnnotationWidget> collection of widgets
3197 Writes the compressed body of a PDF document. @param document COSDocument instance to be written
3198 Checks if the font is symbolic. @return true if symbolic, false otherwise
3199 Checks if XFA form in the given PDF AcroForm is dynamic. @param acroForm PDF AcroForm object @return true if XFA form exists and has no fields, false otherwise
3200 Initializes a new instance of the FieldIterator, populating its queue with all fields from the provided PDAcroForm. @param form the AcroForm document to traverse
3201 Creates a PDFunction instance from a COSBase object. @param function input PDF function stream @return PDFunction object or throws an IOException if invalid
3202 Performs interpolation on input data from current state. @return float[] array of interpolated sample values or null if not initialized
3203 Extracts the soft-matte image from a PDImageXObject. @param softMask input image object @return float array representing the soft-matte image, or null if invalid
3204 Retrieves the parsed XFA document. @return Document object or null if not found
3205 Encodes the image data using various filtering techniques to optimize compression. @throws IOException if an I/O error occurs during encoding
3206 Sets the destination for this outline item to a specific PDF page. @param page target PDPage object
3207 Initializes the current PDFStreamEngine instance for a given page. @param page non-null PDPage object
3208 Retrieves the PDF page's bleed box dimensions and coordinates. @return The PDRectangle object representing the bleed box, or a default value if not found
3209 Retrieves the PDF page's trim box dimensions and coordinates. @return The PDRectangle object representing the trim box, or a default value if not found
3210 Retrieves the PDF page's ArtBox dimensions and coordinates. @return The PDRectangle object representing the ArtBox, or a default value if not found
3211 Returns the rotated crop box for a given page, considering its rotation angle. @param page PDPage object containing the page's properties @return Rotated PDRectangle object or original crop box if no rotation is applied
3212 Adds a PDF font resource to the dictionary. @param font the font object to be added
3213 Adds a color space resource to the dictionary. @param colorSpace ColorSpace object
3214 Adds an extended graphics state resource to the dictionary. @param extGState data associated with the extended graphics state
3215 Adds a PDShading resource to the dictionary. @param shading PDShading object
3216 Adds a PDAbstractPattern resource to the dictionary with kind 'PATTERN' and prefix 'p'. @param pattern the pattern resource to add
3217 Adds a resource to the dictionary with the given kind and name. @param properties PDPropertyList object containing resource data
3218 Adds an image XObject to the resources dictionary. @param image The image data to be added
3219 Adds an XObject resource to the dictionary with key 'Form' and the given form object. @param form the PDFormXObject object to be added
3220 Adds an XObject resource to the dictionary with the given prefix. @param xobject XObject object @param prefix string prefix to use when generating the key
3221 Exports the interactive form fields to a Form Data Format (FDF) document. @return FDFDocument object representing the exported form data
3222 Retrieves the down appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
3223 Retrieves the rollover appearance of an annotation. @return PDAppearanceEntry object or normal appearance if not found
3224 Retrieves the normal appearance of an annotation. @return PDAppearanceEntry object or null if not found
3225 Adds a child outline item to the end of this node's children. @param newChild PDOutlineItem object to be appended
3226 Adds a new child outline item as the first child of this node. @param newChild PDOutlineItem object to be added as first child
3227 Initializes PDPageLabels with a PDDocument and COSDictionary. @param document The PDF document to manage page labels for @param dict COS dictionary containing tree data to initialize the label hierarchy
3228 Initializes an instance of embedded goto action with default subtype.
3229 Initializes a PDActionGoTo instance with default subtype.
3230 Initializes a PDActionHide instance with default subtype.
3231 Initializes a PDActionImportData instance with default subtype.
3232 Initializes a JavaScript action instance with default subtype.
3233 Initializes a PDActionLaunch instance with default subtype.
3234 Initializes a PDActionMovie instance with default subtype.
3235 Initializes a named action instance with default subtype.
3236 Initializes a remote goto action with default subtype.
3237 Initializes a PDActionResetForm instance with default subtype.
3238 Initializes a PDActionSound instance with default subtype.
3239 Initializes a PDActionSubmitForm instance with default subtype.
3240 Initializes a PDActionThread instance with default subtype.
3241 Initializes a PDActionURI instance with default subtype.
3242 Updates the open count of this outline node's parent by propagating the change. @param delta number to add or subtract from the parent's open count
3243 Sets button value and updates appearance state based on given string option. If export values are present, uses updateByOption; otherwise, uses updateByValue. @param value new value to be set
3244 Checks whether an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
3245 Enables or disables an optional content group by name. @param groupName unique identifier for the OCG @param enable true to enable, false to disable @return true if the group was successfully updated, false otherwise
3246 Retrieves the page tree associated with this document catalog. @return A PDPageTree instance representing the document's pages
3247 Retrieves the total count of pages in this PDF document. @return The number of pages or 0 if not found
3248 Sets the fixed pitch flag in the font descriptor. @param flag true to enable, false to disable
3249 Sets serifness of font descriptor. @param flag boolean indicating whether to enable (true) or disable (false) serifness
3250 Sets the symbolic flag bit in the font descriptor flags. @param flag boolean indicating whether to set (true) or clear (false) the flag bit
3251 Sets script font indicator in the font descriptor. @param flag true to enable script font, false otherwise
3252 Sets non-symbolic font descriptor flag. @param flag boolean indicating whether to enable (true) or disable (false) the non-symbolic flag
3253 Sets italic font attribute. @param flag boolean indicating whether to enable (true) or disable (false) italic
3254 Sets all characters to uppercase in the font descriptor. @param flag boolean indicating whether to enable (true) or disable (false) all caps
3255 Enables or disables small capital font functionality. @param flag true to enable, false to disable
3256 Sets force bold font attribute. @param flag boolean indicating whether to enforce bold font
3257 Creates a PDImageXObject from a byte array using CCITT encoding. @param document PDDocument object @param byteArray image data in byte array format @param number number of pages to skip before extracting data (default: 0)
3258 Creates a PDImageXObject instance from a file using the provided parameters. @param document PDDocument object @param file File containing image data to be extracted @param number Number of pages to skip before extracting data (default: 0) @return PDImageXObject instance or null if no image data is found
3259 Constructor to create an FDFAnnotation object from an Element. This constructor parses the provided Element and sets up the corresponding attributes of the FDFAnnotation object. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
3260 Dynamically parses a PDF object based on the provided COSObjectKey. @param objKey Unique identifier and generation number of the object @param requireExistingNotCompressedObj true to enforce existing and non-compressed object; false otherwise @return Parsed COSBase object or null if not found
3261 Parses the cross-reference table in a PDF document. @param document the COSDocument instance @param startXRefOffset starting byte position of the cross-reference table @return the parsed trailer dictionary or null if not found
3262 Displays a transparency group from a PDF document. @param form PDTransparencyGroup object containing the transparency group data
3263 Processes a soft mask transparency group, handling graphics state management and operator processing. @param group PDTransparencyGroup object containing the transparency group data @throws IOException if an I/O error occurs during parsing or processing
3264 Processes Type 3 glyph stream operators for a given font code. @param textRenderingMatrix Text rendering matrix to be set @param font PDType3Font object @param code unique font code @param displacement Vector representing glyph displacement
3265 Displays a PDF annotation by processing its appearance stream. @param annotation PDAnnotation object containing metadata and appearance information
3266 Processes a tiling pattern by applying the transformation matrix and processing content stream operators. @param tilingPattern Tiling pattern object @param color Color object (optional) @param colorSpace Associated color space for the color (optional)
3267 Processes form XObject if it has content. @param form PDFormXObject object to process
3268 Saves the PDF document to the specified output stream with default compression. @param output OutputStream to write data to
3269 Saves the PDF document to the specified output stream with optional compression. Overwrites existing file if it exists and has non-zero length, producing a corrupted file if also being read from. @param file File object representing the output stream @param compressParameters CompressParameters object for incremental updates and compression @throws IOException if the document has been closed or another error occurs during saving
3270 Creates a new PDF document with the same version, information, catalog, and metadata as the source document. @return PDDocument object representing the newly created document
3271 Sets the document's version to a specified floating-point value. If the new version is equal to the current one, no action is taken. Downgrading the version is not allowed and will result in an error log message. For documents with version >= 1.4f, the catalog version is updated; otherwise, only the document's version header is updated. @param newVersion new version value
3272 Returns an iterator over the pages in this page tree. @return PageIterator instance to traverse the page hierarchy
3273 Retrieves a PDF page by its index from the document catalog. @param pageIndex 1-based index of the page to retrieve
3274 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3275 Prepares the PDF document for encryption by initializing and configuring the encryption dictionary. @param doc the PDDocument instance to be encrypted @throws IOException if an error occurs during encryption preparation
3276 Initializes a PDAnnotationHighlight instance with subtype. @param subType annotation subtype
3277 Initializes a PDAnnotationSquiggly instance with subtype. @param subType annotation subtype
3278 Initializes a new strikeout annotation instance with subtype.
3279 Initializes a PDAnnotationUnderline instance with subtype and empty quad points. @param subType annotation subtype
3280 Initializes a PDAnnotationCircle instance from a COSDictionary. @param field dictionary object to initialize from
3281 Initializes a PDAnnotationSquare instance from a COSDictionary. @param field dictionary object to initialize from
3282 Initializes a PDAnnotationHighlight instance from a COSDictionary. @param dict dictionary object to initialize from
3283 Initializes a PDAnnotationSquiggly instance from a COSDictionary. @param dict dictionary object to initialize from
3284 Initializes a strikeout annotation from a COSDictionary. @param dict dictionary object to initialize from
3285 Initializes a PDAnnotationUnderline instance from a COSDictionary. @param dict dictionary object to initialize from
3286 Imports a Field from an FDF document. @param fdfField the FDFField to import @throws IOException if there is an error importing the field
3287 Draws an inline image at the specified coordinates with the given width and height. @param inlineImage The PDInlineImage object to be drawn @param x The x-coordinate of the image's top-left corner @param y The y-coordinate of the image's top-left corner @param width The width of the image @param height The height of the image @throws IOException if an I/O error occurs
3288 Creates a stylized, cloudy polygon shape in a PDF document from the given path. @param path array of float arrays representing the polygon vertices
3289 Generates a stylized, cloudy rectangle shape in a PDF document. @param left left edge of the rectangle @param bottom lower edge of the rectangle @param right right edge of the rectangle @param top upper edge of the rectangle @param isEllipse flag indicating whether to use an ellipse or polygon cloud radius
3290 Returns an iterator over all form fields in the associated PDAcroForm. @return FieldIterator instance to traverse the form fields
3291 Evaluates a Type 3 function based on input value, selecting an appropriate child function and applying interpolation as needed. @param input array of input values (typically containing a single float) @return array of output values or throws IOException if partition not found
3292 Initializes a PDDeviceN instance with DeviceN color space data and resources. @param deviceN COSArray containing DeviceN color space data @param resources associated PDF resources
3293 Retrieves the tint transformation function. @return PDFunction object representing tint transformation or throws an IOException if invalid
3294 Initializes a new instance of PDSeparation with color separation and resources. @param separation COSArray containing the color separation data @param resources PDResources object providing additional context
3295 Retrieves the PDF function associated with this shading object. @return PDFunction object or throws an IOException if invalid
3296 Retrieves the PDFunction[] array associated with this shading object. @return An array of PDFunction objects representing the functions in this shading, or null if not initialized
3297 Retrieves the transfer function associated with this soft mask. @return PDFunction object or null if not found
3298 Constructs a PDIndexed object from an indexed color space array and resources. @param indexedArray COSArray containing the indexed color space data @param resources PDResources object for resource management
3299 Evaluates the function using linear interpolation based on a set of sample points. @param input array of input values @return array of output values
3300 Fetches a BufferedImage representation of the image within the specified region, applying color key mask if provided and handling clipping and subsampling. @param region Rectangle defining the region of interest @param subsampling int representing subsampling factor @return BufferedImage object or null if conversion fails
3301 Creates a PDImageXObject instance from the given BufferedImage. Tries to encode the image with predictor encoder if enabled. If encoding fails or not possible, creates an 8-bit sRGB image. @param document PDDocument object @param image input BufferedImage to convert @return Prepared PDImageXObject instance
3302 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
3303 Processes content stream operators for a child page, handling graphics state management and operator processing. @param contentStream PDContentStream object containing the PDF data to process @param page non-null PDPage object representing the current page
3304 Initializes a content stream for a PDF page by overwriting its contents. @param document the parent document @param sourcePage the page to be overwritten
3305 Sets the font and size for the current content stream. @param font PDFont object to be used @param fontSize float value representing the font size
3306 Sets graphics state parameters in PDF output stream. @param state extended graphics state to set
3307 Fills the content stream with a PDShading object. @param shading The shading resource to fill with
3308 Begins a marked content sequence in the PDF output stream. @param tag COSName object representing the type of marked content @param propertyList PDPropertyList object containing resource data for marked content
3309 Sets a marked content point with properties in the PDF output stream. @param tag COSName object representing the content type @param propertyList PDPropertyList object containing resource data
3310 Draws an image at specified coordinates with given dimensions. @param image the image to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width image width @param height image height
3311 Draws an image XObject at a specified location, applying transformation. @param image The image data to be drawn @param matrix Transformation matrix to apply
3312 Draws a form XObject into the PDF document. @param form PDFormXObject object to be drawn
3313 Retrieves the normal appearance of an annotation as a content stream. @param compress whether to apply compression during writing @return PDAppearanceContentStream object or null if not found
3314 Retrieves the page labels dictionary from the PDF document. @return PDPageLabels object or null if not found
3315 Initializes JavaScript action instance with input code. @param js input JavaScript code to be executed
3316 Checks whether an optional content group with the given name is enabled. @param groupName unique identifier for the optional content group @return true if the group is enabled, false otherwise
3317 Checks if an optional content group is enabled based on the PDF document's properties. @param group the PDOptionalContentGroup to check @return true if the group is enabled, false otherwise
3318 Fixes destinations in the provided PDDocument by updating PDPageDestinations to point to pages within the document. @param destinationDocument the target PDDocument for fixing destinations
3319 Adds a page to the PDF document and updates cross-reference object number. @param page PDPage object to be added
3320 Removes a specified PDPage from the document. @param page PDPage object to be removed
3321 Removes a page from the PDF document at the specified 1-based index. @param pageNumber The index of the page to be removed
3322 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print @param scaling the Scaling factor for page rendering @param showPageBorder whether to display page borders during printing @param dpi dots per inch for printing @param center whether to center the document on the paper @param renderer the PDFRenderer instance for rendering pages
3323 Initializes a PDFRenderer instance with the given PDDocument. @param document the PDDocument to render
3324 Initializes an instance of the class with the given PDF document. @param sourceDocument The original PDF document to extract pages from
3325 Retrieves a map of page indices keyed by their corresponding labels. @return A map where each key-value pair represents a page index and its label
3326 Retrieves page labels for specified indices. @return Array of labels corresponding to each page index
3327 Initializes a PDFPageable instance with the given PDDocument and settings. @param document The underlying PDF document @param orientation The desired page orientation @param showPageBorder Whether to display page borders @param dpi The rendering DPI @param center Whether to center content
3328 Builds a font descriptor from the provided Type 1 font. @param type1 The Type 1 font to build the descriptor from @return A fully constructed PDFontDescriptor object
3329 Constructs a PDFontDescriptor object from FontMetrics. @param metrics FontMetrics containing font characteristics @return PDFontDescriptor object representing the constructed font descriptor
3330 Creates a PDFontDescriptor object based on the provided TrueTypeFont. @param ttf TrueType font for which to create the descriptor @return PDFontDescriptor object representing the font's characteristics
3331 Creates a PDImageXObject from a byte array using CCITT encoding. @param document PDDocument object @param byteArray image data in byte array format
3332 Creates a PDImageXObject instance from a file using the provided parameters. @param document PDDocument object @param file File containing image data to be extracted
3333 Constructs an FDFAnnotationCaret object from the given XML Element. @param element XML element containing annotation attributes
3334 Initializes a FDFAnnotationCircle instance from an XML element. @param element XML element containing the annotation's properties
3335 Initializes FDF annotation file attachment from XML Element. @throws IOException If required attribute is missing or invalid
3336 Initializes a new FDFAnnotationFreeText object from an XML Element. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
3337 Initializes a new instance of the FDFAnnotationInk class from an XML element. @param element parent XML element containing ink data
3338 Initializes a new instance of the FDFAnnotationLine class from an XML element. @param element XML element containing line annotation data @throws IOException if the input is invalid or missing required attributes
3339 Initializes a new instance of FDFAnnotationLink from an XML Element. @param element the XML input data
3340 Initializes a polygon annotation from an XML element. @param element XML element containing vertex data and other attributes
3341 Constructs an FDFAnnotationPolyline object from the given XML Element. @param element XML element containing polyline annotation attributes
3342 Initializes an FDFAnnotationSound object from an XML element. @throws IOException If any required attribute is missing or invalid
3343 Constructs an FDFAnnotationSquare instance from an XML element. @param element XML element containing annotation properties
3344 Initializes an FDFAnnotationStamp object from a given XML element. @param element XML element representing the stamp annotation
3345 Constructor to create an FDFAnnotationText object from an Element. Initializes the annotation's properties (subtype, icon, state, and state model) based on the provided XML element attributes. @param element The XML element containing the annotation's attributes. @throws IOException If any required attribute is missing or invalid.
3346 Initializes a new instance of the class with text markup annotation coordinates from given XML element. @param element XML element containing 'coords' attribute
3347 Retrieves the PDF document's trailer dictionary. @return The trailer dictionary or null if not found
3348 Loads and parses a PDF document from the given byte array using the provided credentials. @param input PDF data as a byte array @param password PDF password for decryption @param keyStore Key store for decryption @param alias Alias for decryption
3349 Loads PDF document from RandomAccessRead source. @param randomAccessRead input stream to read from
3350 Loads a PDF document from the given RandomAccessRead source. @param randomAccessRead function to read from the input source @param password optional decryption password
3351 Loads and parses a PDF document from the given input source. @param randomAccessRead function to read from the input source @param password optional decryption password @param keyStore key store for encrypted documents (if applicable) @param alias alias for the encryption key (if applicable)
3352 Sets visual signature from a local file. @param file file containing visual signature data
3353 Sets visual signature from input stream. @param is input source (e.g. file or byte array)
3354 Renders a glyph from the specified font using the given rendering matrix and displacement. @param textRenderingMatrix current transformation matrix for text rendering @param font font to render from @param code Unicode character code point of the glyph to render @param displacement vector offset for glyph positioning
3355 Builds a PDF document based on the provided PDVisibleSignDesigner properties. @param properties the underlying COSDocument object @return InputStream containing the visual signature data
3356 Saves the PDF document to the specified output stream with default compression. @param file File object representing the output stream
3357 Saves the PDF document to the specified file with optional compression. @param fileName unique file identifier @param compressParameters CompressParameters object for incremental updates and compression
3358 Creates a new PDF document if necessary, based on splitting at the current page number or no destination document.
3359 Writes the header of a PDF document, handling compression and versioning. @param doc COSDocument instance to write header for
3360 Sets the Optional Content Properties for the PDF document. @param ocProperties properties to be set
3361 Retrieves the first page's layout by creating a LayoutPage instance. @param doc PDDocument containing the PDF file
3362 Calculates the size and rotation of a PDF page based on its index. @param document PDDocument object @param page 1-based index of the page to calculate
3363 Finds the destination page associated with this PDOutlineItem. @param doc PDF document to search in @return PDPage object representing the destination page, or null if not found
3364 Retrieves the page format for a given PDF document page index. @param pageIndex 1-based index of the page to retrieve @return PageFormat object containing page properties and orientation
3365 Retrieves the page number associated with this destination. @return zero-based page index, -1 if not found or empty
3366 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3367 Prepares the PDF document for encryption by initializing and configuring its encryption dictionary. @param document PDDocument object to be encrypted @throws IOException if an error occurs during the preparation process
3368 Creates a PDAnnotation instance based on the provided COSBase object. @param base COSBase object representing the annotation @return PDAnnotation object or subclass thereof, depending on subtype
3369 Draws an inline image at the specified coordinates. @param inlineImage The PDInlineImage object to be drawn @param x The x-coordinate of the image's top-left corner @param y The y-coordinate of the image's top-left corner @throws IOException if an I/O error occurs
3370 Creates a stylized, cloudy rectangle in the PDF document. @param rd The original rectangle to apply differences and generate cloud effect
3371 Creates a cloudy ellipse shape within the specified rectangle. @param leftOrig left edge of bounding box @param bottomOrig bottom edge of bounding box @param rightOrig right edge of bounding box @param topOrig top edge of bounding box
3372 Retrieves a list of signature fields from the AcroForm. @return List<PDSignatureField> containing all signature fields or an empty list if none found
3373 Refreshes appearances of all form fields in the associated PDAcroForm.
3374 Returns an iterator over all form fields in this PDAcroForm. @return FieldIterator instance to traverse the form fields
3375 Enables or disables caching of form fields. @param cache true to cache, false to clear cached fields
3376 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique field identifier @return PDField object or null if not found
3377 Creates a PDColorSpace instance from various representations. @param colorSpace COSBase object representing the color space @param resources PDResources object for resource management @param wasDefault boolean indicating if default color spaces should be used
3378 Evaluates the shading function for a given input. @param input float array representing the input values
3379 Constructs a PDIndexed object from an indexed color space array. @param indexedArray COSArray containing the indexed color space data
3380 Fetches a BufferedImage representation of the image with default settings. @return BufferedImage object or null if conversion fails
3381 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
3382 Sets the stroking color by writing the color components and operator to the output stream. @param color PDColor object representing the new stroking color
3383 Sets the non-stroking color for PDF content stream. @param color PDColor object to set as non-stroking color
3384 Draws an image at specified coordinates with default dimensions (image width and height). @param image the image to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3385 Returns normal appearance of an annotation as content stream.
3386 Opens this outline node, switching its count and updating parent if necessary. @param none
3387 Closes the current node and updates its parent. @param none
3388 Imports a page from another PDF document and adds it to the current document. @param page PDPage object containing the source page to be imported @return The newly imported PDPage object, or null if an error occurs
3389 Sets the PDF document template with a page from the given PDPage object. @param page The page to be added to the template
3390 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print
3391 Initializes a PDFPageable instance with default settings. @param document The underlying PDF document
3392 Initializes a PDFPageable instance with the given PDDocument and default settings. @param document The underlying PDF document @param orientation The desired page orientation
3393 Initializes a PDFPageable instance with basic settings. @param document The underlying PDF document @param orientation The desired page orientation @param showPageBorder Whether to display page borders
3394 Initializes a PDFPageable instance with the given PDDocument and settings. @param document The underlying PDF document @param orientation The desired page orientation
3395 Initializes a PDType1FontEmbedder instance by embedding the given Type 1 font into the specified PDF document. @param doc the target PDDocument @param dict the COSDictionary to store font-related data @param pfbStream the input stream containing the Type 1 font data @param encoding the character encoding used in the current context (null if not provided)
3396 Initializes the TrueTypeEmbedder object with a PDDocument and COSDictionary, creating a font descriptor based on the provided TrueTypeFont. @param document parent PDDocument @param dict COSDictionary to store font information @param ttf TrueTypeFont for which to create the descriptor @param embedSubset whether to subset or fully embed the font @throws IOException if embedding is not permitted or unsupported
3397 Creates a PDImageXObject instance from a file based on its extension. @param file input file to be processed @param doc PDDocument object @return Prepared PDImageXObject instance or throws an exception if image type is not supported
3398 Creates a PDImageXObject from the specified file. @param file File containing image data @param doc PDDocument object @return PDImageXObject representation of the image or null if creation fails
3399 Initializes an FDFAnnotationHighlight instance from the given XML element. @param element XML element containing 'coords' attribute
3400 Initializes a new instance of the class with text markup annotation coordinates from given XML element. @param element XML element containing 'coords' attribute
3401 Initializes FDF strikeout annotation with text markup coordinates from XML element. @param element XML element containing 'coords' attribute
3402 Initializes a new instance of the class from an XML Element. @param element XML element containing annotation data
3403 Loads and parses a PDF document from the given byte array using the provided credentials. @param input PDF data as a byte array @param password PDF password for decryption
3404 Loads and parses a PDF document from the specified file. @param file input file @param password encryption password (optional)
3405 Loads and parses an encrypted PDF document from a file. @param file input file @param password encryption password @param keyStore key store input stream @param alias encryption alias
3406 Sets visual signature properties from given PDVisibleSigProperties object. @param visSignatureProperties object containing visible signature configuration
3407 Builds a PDF signature by creating a template, building the PDF, and setting the visible signature content.
3408 Saves the PDF document to the specified file name. @param fileName unique file identifier
3409 Imports optional content properties from the source PDF document. @param srcDoc the source PDDocument to import from
3410 Initializes the PDVisibleSignDesigner instance with a PDDocument and digital signature image. @param document PDDocument object @param imageStream input stream containing image data @param page 1-based index of the page to calculate size for
3411 Initializes a new instance of the class with a digital signature's image and updates its dimensions. Calculates the size and rotation of a PDF page based on its index. @param document PDDocument object @param page 1-based index of the page to calculate
3412 Writes the current FDF dictionary's XML representation to the specified writer. @param output target output stream for XML data
3413 Retrieves a list of annotations that match the specified filter. @param annotationFilter filter to apply when selecting annotations @return List of PDAnnotation objects or empty list if none found
3414 Retrieves the referenced object associated with this PDObjectReference. The referenced object can be either a PDXObject or a PDAnnotation instance.
3415 Retrieves the annotation in reply to this one. @return The corresponding PDAnnotation object or null if not found
3416 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found
3417 Generates a cloudy ellipse within the specified rectangle. @param rd the bounding box for the clouded shape
3418 Retrieves a list of signature dictionaries from the AcroForm. @return List<PDSignature> containing all signature dictionaries or an empty list if none found
3419 Imports form fields from an FDF document. @param fdf the FDFDocument to import from
3420 Evaluates the shading function for a single input value. @param inputValue float representing the input value
3421 Evaluates shading function and converts input to RGB color. @throws IOException if invalid
3422 Retrieves the non-stroking paint by applying a soft mask to the current paint. @return Paint object representing the visual appearance of the non-stroking color
3423 Processes a PDF page, initializing the engine and processing content streams. @param page non-null PDPage object
3424 Sets the stroking color by writing the color components and operator to the output stream. @param color PDColor object representing the new stroking color
3425 Sets the non-stroking color for PDF content stream. @param color PDColor object to set as non-stroking color
3426 Appends a form as an optional content group (layer) to the specified PDF page. @param targetPage the PDF page where the form will be appended @param form the form to be appended @param transform the AffineTransform object containing transformation parameters @param layerName the name of the optional content group (layer) @return the created PDOptionalContentGroup instance
3427 Renders a form xobject, skipping if OCG is hidden or all content has been rendered. @param form the PDFormXObject to render
3428 Draws the transparency group on the specified graphics context. @param form PDTransparencyGroup object to render @param graphics Graphics2D device for drawing @throws IOException if rendering fails
3429 Begins a marked content sequence, handling optional content groups and properties. @param tag COSName object representing the marked content tag @param properties COSDictionary object containing marked content properties
3430 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print
3431 Initializes a PDType1Font object from an embedded Type 1 font. @param doc PDDocument instance @param pfbIn input stream for the font binary data @param encoding font encoding (optional, will be retrieved if null)
3432 Initializes a PDFont instance from a COSDictionary object. @param fontDictionary the COS dictionary representing the font
3433 Initializes a PDCIDFontType2Embedder instance with the specified parameters. @param document the PDF document to embed the font in @param dict COSDictionary representing the font's metadata @param ttf TrueTypeFont data for embedding @param embedSubset whether to embed the subset of glyphs only @param parent PDType0Font parent font (if any) @param vertical whether to enable vertical text support
3434 Initializes a PDTrueTypeFontEmbedder object with a PDDocument and COSDictionary, creating a TrueType font descriptor based on the provided TrueTypeFont. @param document parent PDDocument @param dict COSDictionary to store font information @param ttf TrueTypeFont for which to create the descriptor @param encoding font encoding
3435 Creates a PDImageXObject instance from a file based on its extension. @param imagePath path to the input image file @param doc PDDocument object @return Prepared PDImageXObject instance or throws an exception if image type is not supported
3436 Initializes a new instance of the FDFDictionary class from an XML Element, parsing and setting up form data format (FDF) document properties. @param fdfXML XML element containing FDF document data
3437 Loads and parses a PDF document from the given byte array. @param input PDF data as a byte array
3438 Loads and parses a PDF document from the specified file. @param file input file @param password encryption password (optional)
3439 Loads PDF document from file. @param file input file containing the PDF @return loaded PDDocument object or null if failed
3440 Imports a page from the given source PDF document as a form XObject in the target document. @param sourceDoc the source PDDocument to import from @param page the page to be imported @return PDFormXObject representing the imported page, or null if import fails
3441 Initializes a PDVisibleSignDesigner instance with the given PDF source and digital signature image. @param documentSource input stream to read from @param imageStream input stream containing image data @param page 1-based index of the page to calculate
3442 Initializes a new instance of the PDVisibleSignDesigner class with a digital signature's image. @param documentSource input stream to read from @param image BufferedImage object representing the signature @param page 1-based index of the page to calculate dimensions for
3443 Saves the FDF document in XFDF format to the specified writer. @param output target output stream for XFDF data
3444 Retrieves all annotations on this page.
3445 Retrieves the last signature dictionary from the AcroForm. @return PDSignature instance or null if none found
3446 Saves an incremental PDF document for external signing. @param output OutputStream to write the PDF data @return ExternalSigningSupport object containing the saved document
3447 Draws a glyph using the provided path, font, and rendering mode. @param path GeneralPath representing the glyph shape @param font PDFont object containing glyph properties @param code unique glyph identifier @param displacement Vector specifying glyph position @param at AffineTransform instance for scaling and transforming the glyph
3448 Processes a collection of PDF pages, initializing the engine and processing content streams. @param pages non-null PDPageTree object representing the page hierarchy
3449 Initializes the appearance content for a given PDF annotation widget. @param widget The PDF annotation widget to initialize the appearance for @param appearanceCharacteristics Dictionary of appearance characteristics @param appearanceStream The target stream for writing appearance content
3450 Writes default appearance settings to a PDAppearanceContentStream. @param contents content stream to write to @param zeroFontSize fallback font size when default is zero
3451 Initializes a PDFPrintable instance with rendering options and settings. @param document the PDDocument to print @param scaling rendering scale @param showPageBorder whether to display page borders
3452 Initializes a PDType1Font object from an embedded Type 1 font. @param doc PDDocument instance @param pfbIn input stream for the font binary data
3453 Initializes a PDSimpleFont instance from a COSDictionary.
3454 Initializes a new instance of the PDType0Font class from a given COS dictionary. @param fontDictionary COS dictionary containing font metadata @throws IOException if missing required font information or invalid encoding
3455 Initializes a PDType0Font instance with the specified parameters. @param document the PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only @param closeTTF whether to close the TTF after initialization @param vertical whether to enable vertical text support
3456 Constructs a PDTrueTypeFont object. @param document parent PDDocument @param ttf TrueTypeFont for which to create the descriptor @param encoding font encoding @param closeTTF whether to close the TTF resource
3457 Initializes an FDFCatalog instance from an XML Element. @param element XML element containing FDF document data
3458 Loads PDF document from file. @param file input file containing the PDF
3459 Imports a page from the given PDF document as a form XObject. @param sourceDoc the source PDDocument to import from @param pageNumber 1-based index of the page to retrieve and import @return PDFormXObject representing the imported page, or null if import fails
3460 Saves the FDF document in XFDF format to a specified file. @param fileName target output file for XFDF data
3461 Updates structural parent entries for a given PDF page. @param page the PDPage object to update @param structParentOffset offset value to apply to structural parents
3462 Clones the structure tree from a source document to a destination document. @param destinationDocument The target PDF document where the cloned structure will be stored
3463 Processes annotations on the given page by cloning them and updating their references. @param imported the PDPage to process @throws IOException if an error occurs while processing annotations
3464 Adds a digital signature to the PDF document. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface instance for handling the signature interface @param options SignatureOptions instance providing configuration and visual signature data @throws IOException if an error occurs during the signature addition process
3465 Fills and strokes a graphical path with specified winding rule. @param windingRule one of WIND_NONZERO, WIND_EVENODD, etc.
3466 Writes text from a PDF document to an output stream. @param doc PDDocument object containing the PDF content @param outputStream Writer instance for writing extracted text
3467 Inserts generated appearance for a specified form field widget into the provided content stream. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing appearance settings @param output OutputStream to write the generated appearance to @throws IOException if an error occurs while writing to the output stream
3468 Draws a PDF page onto the specified Graphics2D context. @param g Graphics2D context to render into @param pageSize dimensions of the page being drawn (width, height) @throws IOException if an I/O error occurs during rendering
3469 Initializes a PDFPrintable instance with rendering options and settings. @param document PDDocument to print @param scaling rendering scale
3470 Retrieves the default font used for rendering PDF content.
3471 Initializes a PDTrueTypeFont instance from a COSDictionary object. @param fontDictionary the dictionary containing font metadata
3472 Initializes a new instance of the PDType1CFont class from a COSDictionary object. @param fontDictionary the COSDictionary object representing the Type 1C font @throws IOException if an error occurs while reading or parsing the font data
3473 Initializes a new instance of the PDType1Font class from a COSDictionary object. @param fontDictionary COS dictionary containing font information @throws IOException if an error occurs while reading the embedded Type1 font
3474 Initializes a Type 3 font from a dictionary and a resource cache. @param fontDictionary COS dictionary containing font data @param resourceCache Resource cache for managing font resources
3475 Loads a Type 0 font from the specified RandomAccessRead source. @param doc the PDF document to embed the font in @param randomAccessRead input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only @param vertical whether to enable vertical text support
3476 Loads a Type 0 font from the specified TrueTypeFont object into the given PDF document. @param doc the PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only
3477 Loads a vertical Type 0 font from the specified TrueType Font and PDDocument. @param doc PDF document to embed the font in @param ttf TrueTypeFont object for embedding @param embedSubset whether to embed the subset of glyphs only
3478 Loads a TrueType font into a PDF document. @param doc parent PDDocument @param ttf TrueTypeFont to load @param encoding font encoding
3479 Loads a TrueType font from the given PDDocument and RandomAccessRead. @param doc parent PDDocument @param randomAccessRead input data source @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3480 Initializes an FDFDocument instance from a given Document object. @param doc input Document object @throws IOException if the document's root element is not 'xfdf'
3481 Initializes a new instance of PDVisibleSignDesigner with digital signature image from input stream. @param filename input file containing the PDF @param page 1-based index of the page to calculate size and rotation for @throws IOException if an I/O error occurs while reading the file or image stream
3482 Initializes a new instance of the PDVisibleSignDesigner class with a digital signature's image and calculates the size and rotation of a PDF page from file. @param filename input file containing the PDF @param page 1-based index of the page to calculate
3483 Saves FDF document in XFDF format to specified file. @param fileName target output file for XFDF data
3484 Processes a given PDF page, importing its content and annotations into the current document. @param page PDPage object containing the source page to be processed @throws IOException if an error occurs while processing annotations
3485 Adds a digital signature to the PDF document using provided PDSignature object and configuration. @param sigObject PDSignature object containing the signature data @param options SignatureOptions instance providing configuration and visual signature data
3486 Adds a digital signature to the PDF document with default options. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface instance for handling the signature interface
3487 Merges two PDF documents into one. @param source The source PDF document to merge from. @param destination The destination PDF document to merge into.
3488 Converts a PNG image to a PDImageXObject. @param doc the PDDocument to store the converted image @param imageData the PNG image data to convert @return the converted PDImageXObject or null if conversion fails
3489 Extracts text from a PDF document. @param doc PDDocument object containing the PDF content
3490 Renders a PDF page into an image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image @param imageType desired type of the resulting image @param destination output destination for the rendered image @return the rendered image as a BufferedImage object, or throws an IOException if rendering fails due to size constraints.
3491 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX scaling factor along X-axis @param scaleY scaling factor along Y-axis @param destination RenderDestination object
3492 Initializes a PDFPrintable instance with rendering options and settings. @param document PDDocument to print
3493 Renders a string of text using the current graphics state and font. @param string byte array containing the text to render @throws IOException if an I/O error occurs during rendering
3494 Initializes a new instance of the PDMMType1Font class from a COSDictionary object. @param fontDictionary COS dictionary containing font information
3495 Initializes a Type 3 font from a dictionary. @param fontDictionary COS dictionary containing font data
3496 Loads a Type 0 font from the specified PDF document and external file. @param doc the PDF document to embed the font in @param file input stream containing the Type 1 font data as an external file
3497 Loads a Type 0 font from the specified input stream. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only
3498 Loads a vertical Type 0 font from the specified file. @param doc the PDF document to embed the font in @param file input stream containing the Type 1 font data
3499 Loads a Type 0 font from the specified stream with vertical text support. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data
3500 Loads a vertical Type 0 font from the specified input stream. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data @param embedSubset whether to embed the subset of glyphs only
3501 Loads a TrueType font from the given PDDocument and file. @param doc parent PDDocument @param file input file containing font data @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3502 Loads TrueType font from given PDDocument and InputStream. @param doc parent PDDocument @param input input stream containing font data @param encoding font encoding @return loaded PDTrueTypeFont object or null on failure
3503 Loads XFDF document from given InputStream. @param input input stream containing XFDF data @return loaded FDFDocument object or null if parsing fails
3504 Processes pages from the source document within a specified page range. @throws IOException if an error occurs while processing annotations
3505 Adds a digital signature to the PDF document using provided PDSignature object and default configuration. @param sigObject PDSignature object containing the signature data
3506 Flattens interactive form fields into the underlying PDF document. @throws IOException if an I/O error occurs
3507 Creates a PDImageXObject instance from the given byte array. @param document PDDocument object @param byteArray image data in byte array format @param name the name of the image @param customFactory optional CustomFactory to use for unsupported file types @return the created PDImageXObject instance or null if conversion fails @throws IOException if an I/O error occurs
3508 Renders a PDF page into an image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image @param imageType desired type of the resulting image
3509 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3510 Renders a string of text using the current graphics state and font. @param string byte array containing the text to render
3511 Renders text strings from a given COSArray, applying transformations and adjustments as needed. @param array COSArray containing text strings or transformation values @throws IOException if an I/O error occurs during rendering
3512 Creates a PDFont object from a given COSDictionary and ResourceCache. @param dictionary COSDictionary containing font descriptor information @param resourceCache ResourceCache instance for accessing resources @return PDFont object or null if not found or invalid font type @throws IOException if Type 0 descendant font is not allowed
3513 Loads a Type 0 font from the specified input stream into the given PDF document. @param doc the PDF document to embed the font in @param input input stream containing the Type 1 font data
3514 Loads XFDF document from file. @param filename path to XFDF file @return loaded FDFDocument object or null if parsing fails
3515 Loads XFDF document from given file. @param file input file containing XFDF data @return loaded FDFDocument object or null if parsing fails
3516 Splits a PDF document into multiple smaller documents. @param document the source PDDocument to be split @return List of resulting PDDocument objects or throws IOException if an error occurs
3517 Creates a PDImageXObject instance from the given byte array. @param document PDDocument object @param byteArray image data in byte array format @param name the name of the image
3518 Renders a PDF page into an RGB image. @param pageIndex the index of the page to render (1-based) @param scale scaling factor for the rendered image
3519 Renders a PDF page into an image with specified DPI. @param pageIndex the index of the page to render (1-based) @return BufferedImage object representing the rendered page
3520 Renders a PDF page into an image with specified DPI (dots per inch). @param pageIndex the index of the page to render (1-based) @param dpi desired resolution in dots per inch @param imageType desired type of the resulting image
3521 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3522 Retrieves a PDFont object by its name from the cache or creates it from a COSDictionary. @param name unique identifier for the font @return The PDFont object or null if not found
3523 Creates a PDFont object from a given COSDictionary. @param dictionary COSDictionary containing font descriptor information
3524 Extracts a range of pages from the PDF document. @return PDDocument object containing the extracted pages or an empty document if the range is invalid
3525 Renders a PDF page into an RGB image. @param pageIndex the index of the page to render (1-based)
3526 Renders a specific PDF page to the specified Graphics2D context. @param pageIndex 1-based index of the page to render
3527 Copies necessary resources to the given PDAppearanceStream. @param appearanceStream target stream for resource copying
3528 Retrieves the custom font for the PDF document. @return a PDFont object or null if not found
3529 Updates the appearance stream for a specified form field widget. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing appearance settings
3530 Copies the extended graphics state from this object into the provided PDGraphicsState. @param gs target graphics state to copy into @throws IOException if an I/O error occurs during copying
3531 Processes appearance string operators for font settings. @param content PDF data as byte array
3532 Initializes the PDDefaultAppearanceString object with default values. @param defaultAppearance required appearance string @param defaultResources associated resources
3533 Fetches the default appearance string for interactive form text fields. @return PDDefaultAppearanceString object or null if not found
3534 Updates the appearance stream for a specified form field widget. @param apValue original field value @throws IOException if an I/O error occurs during appearance generation
3535 Initializes an instance of the class with a PDVariableText field, validating AcroForm resources and fetching its default appearance string. @param field PDVariableText object representing the interactive form text field
