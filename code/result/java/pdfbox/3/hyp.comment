1 Retrieves a specific revision number from the collection based on its index. @param index position of the desired revision number in the list @return The integer value of the specified revision number
2 Retrieves the stroking color space used in drawing operations. @return The current stroking color space object; null if not set.
3 Constructs a new PDActionSound object from a COSDictionary. @param a dictionary containing sound action details.
4 Transforms a given width based on the current graphics state's transformation matrix. @param width The original width to be transformed @return Transformed width as a float value
5 Retrieves the current non-stroking color from the graphics state. Critical for managing and applying colors during PDF rendering. @return The current non-stroking color used for filling shapes and text
6 Retrieves an object from the collection by its index. @param index position of the object in the collection @return object at the specified index or null if not found
7 Sets stroking color in graphics context. @param color PDColor object to be used for strokes
8 Sets the non-stroking color in the current graphics state. @param color The PDColor object representing the new non-stroking color
9 Retrieves the current stroking color from the graphics state. @return The PDColor object representing the stroking color, or null if unavailable.
10 Returns the total number of objects managed by this revision instance. @return The count of all objects in the collection
11 Retrieves the current non-stroking color space for graphics rendering. @return The current non-stroking color space in use, or null if not set.
12 Retrieves an int value at a specific index or returns defaultValue if not found. @param index position in the collection @param defaultValue fallback value if index is invalid or object is not COSNumber @return int value at index or defaultValue if conditions are not met
13 Parses PNG chunks from byte array and populates a PNGConverterState object. @param imageData byte array containing PNG data @return Populated PNGConverterState or null if parsing fails
14 Retrieves the current text line transformation matrix. @return Current text line matrix; null if graphics state is empty
15 Constructs a new URI action from a COSDictionary. @param a dictionary containing URI action details
16 Sets text line transformation matrix in PDF rendering.
17 Executes instructions in given context, handling operators and pushing non-strings to stack. @param context the execution environment containing the instruction sequence and stack.
18 Retrieves a COSBase object from the pool by its unique identifier. @param key The COSObjectKey for the desired object @return The corresponding COSBase object or null if not found
19 Constructs a new PDActionThread object from a COSDictionary. @param a dictionary containing thread action details
20 Constructs a PDActionSubmitForm object from a COSDictionary. @param a a dictionary containing form submission action details.
21 Parses and sets the trailer dictionary for the last cross-reference section. @return True if parsing and setting is successful; false otherwise. @throws IOException If an I/O error occurs during parsing.
22 Adds a source PDF file to be merged. Accepts a string path. @param source Path of the PDF file to merge @throws FileNotFoundException if the file does not exist
23 Returns the index of the selected radio button or -1 if none are selected.
24 Creates a soft mask from COSDictionary or returns null for invalid inputs. @param dictionary contains soft mask properties, can be COSName or COSDictionary @param resourceCache manages resources for PDF rendering @return PDSoftMask object or null if input is invalid or not supported
25 Retrieves an Encoding instance by its COSName. @param name the COSName of the encoding (Standard, WinAnsi, MacRoman, or MacExpert) @return the corresponding Encoding object or null if not found
26 Retrieves text matrix from current graphics state. @return The current text transformation matrix; null if no graphics state exists
27 Sets the text transformation matrix in the current graphics state. @param value new text transformation matrix to be applied
28 Returns total count of elements in this COSDictionaryMap.
29 Creates and returns a tree representation of form fields. @return a PDFieldTree object containing this PDAcroForm's fields
30 Retrieves and formats the filters applied to this PDF stream. @return List of COSNames representing applied filters, or an empty list if none exist.
31 Creates and returns an exact copy of this matrix object. @return A deep copy of the current matrix object
32 Initializes soft mask with a given COSDictionary. @param dictionary contains soft mask properties
33 Returns a scaling transformation matrix. @param x scale factor along the horizontal axis @param y scale factor along the vertical axis
34 Returns a translation matrix instance with given offsets. @param x horizontal translation value @param y vertical translation value
35 Creates a rotation matrix instance based on theta and translation values. @param theta Rotation angle in radians @param tx X-axis translation value @param ty Y-axis translation value @return A new Matrix object representing the rotation transformation
36 Transforms a 2D vector using the matrix parameters. @param vector the input Vector object to be transformed @return a new Vector object after applying transformation
37 Retrieves and returns file filter names from the PDF stream dictionary. @return List of String filter names extracted from the stream's COSArray or single COSName object, or empty list if none found.
38 Scales the vector by a given factor. @param sxy scaling factor
39 Retrieves name from object at given index or returns default value. @param index position in the array @param defaultValue fallback value if object is not a COSName @return Name of COSName object or default value if not found/applicable
40 Finds the index of a specified object in the collection. @param object COSBase object to search for @return Index of the object or -1 if not found
41 Retrieves the Z tristimulus value representing color in the three-dimensional space. @return The Z tristimulus value as a float
42 Constructs a new PDNonTerminalField with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the non-terminal field @param parent the parent PDNonTerminalField (if any)
43 Constructs a new terminal field with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
44 Constructs a PDRectlinearMeasureDictionary with a given COSDictionary. @param dictionary the measurement data in PDF format to be managed by this class
45 Evaluates Function Type 2 with exponential interpolation. @param input array of values for calculation @return float array representing the evaluated function results
46 Initializes an extended graphics state with a PDF dictionary. @param dictionary the COSDictionary containing graphics properties
47 Retrieves and constructs a list of filters applied to this data stream. @return List<Filter> object containing the applicable filters or an empty list if none exist @throws IOException if filters are not in the expected format (COSName or COSArray)
48 Writes a boolean value to the PDF document's OutputStream. @param output stream to write the boolean value @param cosBoolean COSBoolean object containing the boolean value @throws IOException if an I/O error occurs during writing
49 Constructs a PlainText object from a given string, splitting it into Paragraph objects. @param textValue the input text to be converted into structured Paragraph objects
50 Retrieves the Y tristimulus value of the color in a three-dimensional space. @return Y tristimulus value as a float
51 Constructs a new PDActionLaunch object from a COSDictionary. @param a dictionary containing action launch details
52 Determines if an edge is a line in the context of color shading. @param ctl Array of control points defining the edge @return True if edge is a line, false otherwise
53 Constructs a new PDActionMovie object from a COSDictionary. Inherits base constructor, enabling integration and manipulation of movie actions in PDF interactivity. @param a dictionary containing action details
54 Returns string representation of COSArrayList object. Critically uses makeConcatWithConstants for formatting.
55 Retrieves or creates an Operator instance for the given PDF operator name, with thread-safe handling and caching for non-ID operators. @param operator String representing the PDF operator name @return Corresponding Operator instance
56 Constructs a new PDActionJavaScript object from a COSDictionary. @param a dictionary containing JavaScript action details
57 Constructs a new named action from a COSDictionary. @param a dictionary containing action details, including name.
58 Finds an ImageReader that can read raster data for a specified format. @param formatName Name of the file format to search for (e.g., "jpg", "png") @param errorCause Cause of any potential MissingImageReaderException @return An ImageReader capable of reading raster data in the format @throws MissingImageReaderException if no suitable reader is found
59 Finds an ImageReader for a given format. Throws exception if none found. @param formatName name of the file format (e.g., "jpg", "png") @param errorCause reason for the missing image reader issue @return ImageReader instance capable of decoding the format or throws exception if not found
60 Initializes a new PDF form reset action using a COSDictionary. @param a dictionary containing action details for the reset action
61 Creates an input stream for raw data. Throws exception if closed or writing. @return InputStream for reading the raw data of this COSStream @throws IOException if stream is closed or writing, or data has not been written before
62 Initializes a new remote navigation action from a given dictionary. @param a COSDictionary containing action details
63 Constructs a new PDActionHide object from a COSDictionary. @param a dictionary containing action details to hide elements in PDF
64 Retrieves the X tristimulus value of the color. @return The X tristimulus value as a float
65 Retrieves blue color component from RGB values array. @return Blue color component as a float value
66 Writes ASCII encoded string to output stream. @param text String to be written
67 Retrieves and returns the green color component from the RGB values. @return Green color component as a float value
68 Retrieves and returns the red component of the color value as a float. @return Red component value (float) from the first position in values array
69 Constructs a PDActionImportData object from a COSDictionary. @param a dictionary containing import data action details
70 Retrieves the font size from the font settings collection. @return float value representing the font size.
71 Retrieves the X coordinate of the upper right corner of the rectangle. @return X coordinate as a floating-point value
72 Retrieves the lower left y-coordinate of the rectangle from the collection. @return y-coordinate as a float value
73 Notifies of changes in a user property and updates the document structure accordingly. @param oldEntry The previous PDUserProperty object @param newEntry The updated PDUserProperty object
74 Retrieves the x-coordinate of the lower left corner of the rectangle. @return Float value representing the x-coordinate
75 Constructs a new PDActionEmbeddedGoTo object from a COSDictionary. @param a dictionary containing action details for embedded navigation
76 Constructs a new PDActionGoTo object from a COSDictionary. @param a dictionary containing action details for navigation
77 Retrieves the y-coordinate of the upper right corner of this rectangle. @return The y-coordinate value as a float.
78 Checks if a point is within the ShadedTriangle. @param p The point to check for containment @return True if the triangle contains the point, false otherwise
79 Retrieves a COSObject from the dictionary using a given key. @param key unique identifier for the COSObject @return COSObject if it exists; otherwise, null
80 Inserts a diacritic at specified position in text, preserving character order and widths. @param i insertion index @param diacritic TextPosition object representing the diacritic to be inserted
81 Initializes a Line object with two points and their associated colors. @param p0,p1 Points defining the line; @param c0,c1 Colors at each point
82 Initializes soft mask with paint, mask, bounding box, and color transformations. @param paint graphic style; defines how colors are applied @param mask image used for transparency/blending effects @param backdropColor color to be displayed behind areas of transparency
83 Removes backdrop from the group image using a specified backdrop and offsets. @param backdrop Image to be used as the background for removal @param offsetX Horizontal shift in pixels @param offsetY Vertical shift in pixels
84 Parses an XML document from input stream without namespace awareness. @param is InputStream containing the XML data @return Document object representing parsed XML structure @throws IOException if there's any issue reading or parsing the XML data
85 Parses and coerces float from input string, handling exceptional cases. @param aFloat String to be parsed and coerced @throws IOException if unable to parse or coerce the input string
86 Constructs a PDPageFitDestination object from a COSArray. @param arr COSArray containing destination data for page fitting.
87 Constructs a PDPageFitHeightDestination object from a COSArray. @param arr the COSArray containing destination data for fitting page height
88 Constructs a PDPageFitRectangleDestination from a COSArray. @param arr the COSArray containing destination data
89 Constructs a PDPageFitWidthDestination object from a COSArray. This is used for fitting the page width in a PDF document viewer. @param arr the COSArray containing destination data
90 Constructs a PDPageDestination object from a COSArray. @param arr the COSArray containing destination data.
91 Initializes MacRomanEncoding and sets up character mappings for Mac OS Roman.
92 Creates a Type1Encoding instance from FontBox Encoding. @param encoding FontBox Encoding object @return Type1Encoding instance with mappings from the input encoding
93 Retrieves a cached or creates a new COSInteger instance for the given value. @param val Long integer value to be represented @return A COSInteger object with the provided value
94 Constructs a Type 7 Shading Paint object with specified shading and transformation matrix. @param shading the Type 7 shading object to be applied @param matrix the transformation matrix for shading manipulation
95 Normalizes a word based on Unicode normalization and handles directionality. @param word The input string to be normalized and processed for directionality. @return A normalized string with corrected directionality.
96 Draws a tiling pattern onto the graphics context, applying specified parameters. @param g Graphics2D object for drawing @param pattern PDTilingPattern to draw @param colorSpace Color space for the pattern @param color Pattern's color @throws IOException if an I/O error occurs during processing
97 Initializes GlyphList with input stream and sets capacity. Calls loadList to populate glyph data. @param input InputStream containing the glyph list data @param numberOfEntries Capacity for internal name-to-Unicode and Unicode-to-name maps
98 Constructs a GlyphList by copying existing mappings and loading additional data from an InputStream. @param glyphList Existing GlyphList to copy mappings from @param input InputStream containing additional glyph list data to load
99 Converts a character code to its corresponding Glyph ID (GID). @param code unique character encoding identifier @return corresponding GID or 0 if not found @throws IOException if an I/O error occurs while extracting the table
100 Retrieves the glyph name in the font, handling embedded status and Unicode conversion. @param name input glyph name @return corresponding glyph name or ".notdef" if not found
101 Retrieves the glyph name in the font, handling alternatives and Unicode representations. @param name The input glyph name @return The appropriate glyph name or ".notdef" if not found @throws IOException If an I/O error occurs during operation
102 Initializes CMYK color space with ICC profile and sets conversion method. Throws IOException if default CMYK profile cannot be loaded.
103 Applies a mask to an image and returns the resultant BufferedImage. Scales mask if necessary and composes alpha channel into ARGB image. @param image Input BufferedImage @param mask Mask as a BufferedImage (optional, can be null) @param matte Optional float array for matte calculations (null for no matte) @return Modified BufferedImage with applied mask and alpha channel composition
104 Calculates the interpolated color at a given point on the triangle. @param p The point for which to calculate the color @return An array of floats representing the calculated color
105 Intersects clipping path with another path. @param path The new GeneralPath to intersect with the current clipping path.
106 Intersects clipping path with an Area object by converting it to a Path2D.
107 Sets the clipping path for graphics based on current state's clip path. Avoids empty clipping path issue by replacing with a rectangle if needed. @param graphics Graphics2D context to apply the clipping path.
108 Initializes Bezier curve with control points and detail level. @param ctrlPnts Array of control Point2D objects @param l Level of detail for curve generation
109 Sets stroking color on demand for PDF appearance content stream. @param color the PDColor object to extract and set as stroking color @return true if successful, otherwise false @throws IOException if an I/O error occurs during color component retrieval or setting
110 Writes FDFDocument to output stream, managing incremental updates and encryption. @param doc the FDFDocument object to be written @throws IOException if there is an error during writing operation
111 Writes a COS integer to PDF output stream and adds space separator. @param output the destination output stream @param cosInteger the COS integer object to be written @throws IOException if an I/O error occurs during writing
112 Compares this XReference to another based on its referenced key. @param xReferenceEntry the other XReference to compare with @return comparison result based on referenced keys
113 Returns the X scaling factor of the text element's transformation matrix. @return The absolute value of the scaled X component, considering rotation.
114 Returns the Y scaling factor of the text matrix. @return Y scaling factor, or 1 if not scaled
115 Creates an output stream for raw data writing to the COSStream. @return Output stream for writing raw data @throws IOException if the stream has been closed or other I/O errors occur
116 Initializes a COSWriter with an output stream and compression parameters. @param outputStream the underlying output stream for writing PDF data @param compressParameters parameters to control document compression
117 Initializes COSWriter with an output stream and input data for PDF document handling. @param outputStream the output stream for writing data @param inputData the random access read input data used in PDF processing
118 Converts byte array to string based on encoding (UTF-16 or PDFDocEncoding). @return String representation of the byte array using appropriate encoding
119 Initializes resource cache with stable caching enabled by default
120 Initializes a COSString object with text and encoding options. @param text the input string to be encoded @param forceHex forces hexadecimal encoding if true; otherwise, uses PDFDocEncoding if possible
121 Initializes a LayerUtility object with the destination PDDocument for cloning or merging operations. @param targetDoc the target document for manipulation and management of layers
122 Writes a COSArray object to an output stream in PDF format. @param output destination stream for writing data @param cosArray the array of COSBase objects to be written @throws IOException if an I/O error occurs during writing
123 Retrieves an item from the dictionary using either of two keys. @param firstKey primary key to search for the item @param secondKey alternative key if the primary is not found @return the item if it exists; otherwise, null
124 Returns the number of document recipients for encryption settings. @return The count of recipients in the PDF document's security settings
125 Retrieves a recipient string at a given index from the document's dictionary. @param i index of the desired recipient string @return COSString object at the specified index or null if not found
126 Retrieves the direction of a page transition. @return the direction value or default (0) if not set.
127 Returns a set of all metadata keys in the PDF document. @return Set containing all metadata keys as strings.
128 Returns a list of attribute names, excluding the 'O' key. @return List containing all attribute names in the object
129 Adds trailer info to the stream from a dictionary, excluding INFO, ROOT, ENCRYPT, ID, and PREV keys. @param trailerDict COSDictionary containing trailer information.
130 Initializes COSDictionary with another COSDictionary. Adds all key-value pairs from the source dictionary. @param dict the source COSDictionary to copy data from
131 Checks if a dictionary contains information keys, excluding parent & destination keys. @param dictionary COSDictionary to be checked @return true if info keys are present, false otherwise
132 Checks if the font descriptor dictionary contains width information. @return true if widths or missing width is present, false otherwise
133 Checks if font descriptor is missing width information. @return true if missing, false otherwise
134 Checks if the form contains an XFA (XML Forms Architecture) component. @return true if XFA is present, false otherwise
135 Converts this COSFloat object to a string representation. @return a formatted string for debugging and display purposes
136 Writes formatted float value to PDF in ISO-8859-1 encoding.
137 Creates a new COSIncrement object with the current update information. @return A COSIncrement object initialized with the class's update info
138 Checks if the PDFont is a standard 14 font based on its name and embedding status. @return true if it's a standard 14 font; false otherwise
139 Reads up to 'len' bytes into the 'data' array starting at 'offset'. @param data byte array to store read data @param offset start position in the array @param len maximum number of bytes to read @return Number of bytes read or -1 if end of stream is reached @throws IOException If an I/O error occurs during reading
140 Calculates the final encryption key by combining object and generation numbers with the base key. @param objectNumber unique object identifier @param genNumber generation number of the object @return byte array representing the final encryption key
141 Creates an appearance content stream with a given PDF appearance and output stream. @param appearance the PDF appearance to customize @param outputStream the stream for writing content
142 Constructs a PDPageContentStream for PDF appearance stream with specified resources. @param doc the PDF document @param appearance the PDF appearance stream @param outputStream stream for writing content
143 Transforms a point using the current graphics state's transformation matrix. @param x The x-coordinate of the input point @param y The y-coordinate of the input point @return A new Point2D.Float object with transformed coordinates
144 Creates a context for tiling pattern rendering with scaling adjustments. @param cm ColorModel object @param deviceBounds Rectangle defining the device boundaries @param userBounds Rectangle2D defining the user boundaries @param xform AffineTransform object for transformation @param hints RenderingHints object for rendering hints @return PaintContext with adjusted scaling for tiling pattern rendering.
145 Concatenates this Matrix with another by multiplying their internal arrays. @param matrix the Matrix to concatenate with
146 Translates the matrix by (tx, ty) and checks for valid float values. @param tx translation in the x-direction @param ty translation in the y-direction
147 Scales the matrix by given factors along x and y axes. Checks float values after scaling. @param sx scale factor for x-axis @param sy scale factor for y-axis
148 Multiplies this matrix with another matrix and returns a new resultant matrix. @param other the second matrix to multiply with @return a new Matrix object as the multiplication result
149 Creates a SecurityHandler for a given ProtectionPolicy using reflection. @param policy The protection policy to be used by the handler @return A new SecurityHandler instance or null if no matching handler is found
150 Creates a security handler for a given filter name. @param name the unique name of the security handler @return SecurityHandler instance or null if not found for the name
151 Parses and retrieves all objects from the PDF stream, handling duplicates and indexing as needed. @return A map of COSObjectKey to corresponding COSBase object instances in the PDF stream @throws IOException if an I/O error occurs while reading or parsing the stream
152 Reads and returns the next byte of decoded data from stream. @return next byte of decoded data, or -1 if end of stream is reached
153 Reads decoded data into the provided byte array. Returns -1 at EOF, otherwise bytes read. @param data destination array for decoded data @param offset starting position in destination array @param length maximum number of bytes to read @return number of bytes read or -1 if EOF is reached
154 Sets signature image from input stream, disabling cache for reading.
155 Sets non-stroking color from PDColor object, if valid components are present. @param color the PDColor to get components from @return true if color was set successfully, false otherwise @throws IOException if an error occurs while writing
156 Chooses the optimal byte array for writing based on compression sum. @return The byte array with the lowest estimated compression sum.
157 Retrieves and returns the rendering state from a COSName object. @param state the COSName representing the rendering state @return corresponding RenderState or null if input is invalid
158 Converts a COSName to its corresponding BaseState. @param state The name of the state as a COSName object @return Corresponding BaseState or ON if input is null
159 Initializes PDFStreamParser with a PDContentStream object for parsing. @param pdContentstream contains the PDF content stream to parse @throws IOException if an I/O error occurs during initialization
160 Initializes PDFStreamParser with given byte array as PDF source. @param bytes byte array representing the PDF content to parse
161 Parses and retrieves a PDF object by its number from the source stream. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found; sets direct property false if found
162 Reads and returns the map of object numbers with their offsets in PDF doc. Closes resources after use. @return Map of object numbers with their respective offsets or null if an error occurs. @throws IOException if an I/O error occurs during reading from the source stream.
163 Encodes raw data into LZW compressed format and writes to output stream. @param rawData input data to compress @param encoded output stream for the compressed data @throws IOException if reading/writing fails or code table is full
164 Constructs a Type6ShadingPaint object with specified shading and transformation matrix. @param shading the type 6 shading object to be applied @param matrix the transformation matrix for shading manipulation
165 Extracts and returns a PANOSE font classification object from the byte array data. @return A new PDPanoseClassification instance containing typographic attributes for analysis.
166 Constructs a Type4ShadingPaint object with specified shading and transformation matrix. @param shading the type 4 shading object to be applied @param matrix the transformation matrix for shading manipulation
167 Adds a TextPosition object to the collection of content elements.
168 Adds marked content to the collection of content elements. @param markedContent object representing the marked content to be added
169 Adds a graphical object to the marked content's collection. @param xobject The graphical object to be added.
170 Sets or clears the permission to print for PDF documents. @param allowPrinting true to allow printing, false to disallow
171 Sets the permission for document modification. If not read-only, updates the permission bit accordingly. @param allowModifications true to allow modifications, false otherwise
172 Sets permission for content extraction. Ensures document is not read-only before updating the permission bit. @param allowExtraction true to enable, false to disable content extraction
173 Sets the permission to modify annotations in a PDF document. @param allowAnnotationModification true to enable, false to disable modification of annotations
174 Sets permission to fill in forms for PDF document. Ignores if document is read-only. @param allowFillingInForm true to enable form filling; false to disable
175 Sets permission to extract content for accessibility. Ignores request if document is read-only. @param allowExtraction true to allow extraction, false otherwise
176 Sets the permission to assemble a PDF document. @param allowAssembly true to allow assembly, false otherwise.
177 Applies GSUB rules on a word, converting characters to glyph IDs and transforming them. @param gsubWorker The worker object for applying GSUB rules @param out Output stream for writing transformed glyph IDs @param font Type0Font containing character-to-glyph mapping @param word Input string to apply GSUB rules on @return List of transformed glyph IDs after applying GSUB rules
178 Initializes a PDDocument object with the given COSDocument, source, and permissions. @param doc The COSDocument to associate with this PDDocument. @param source The RandomAccessRead source for the PDF document. @param permission The AccessPermission object for security settings.
179 Sets the permission for faithful printing of PDF documents. @param canPrintFaithful boolean value to allow or disallow faithful printing
180 Constructs an FDFDocument from a COSDocument and data source. @param doc The COSDocument to associate with the FDFDocument. @param source The RandomAccessRead data source for the document.
181 Returns a string representation of FunctionType2's key attributes. @return String with C0, C1, and N values for exponential interpolation.
182 Checks if printing permission is set.
183 Checks if extraction of content permission is granted. @return True if extracting content is allowed, false otherwise
184 Retrieves the predefined Adobe Glyph List used in font encoding. @return The default Adobe Glyph List instance for font encoding.
185 Initializes a PDColor instance with specified color components, pattern name, and color space. @param components Array of color component values @param patternName Name of the color pattern @param colorSpace Color space used for color representation
186 Retrieves the underlying COSDictionary object containing image parameters. @return COSDictionary with image attributes and properties
187 Checks if modification of annotations is permitted. @return True if permission bit is set, false otherwise
188 Checks if filling in form permission is granted. @return True if form filling permission is on, false otherwise
189 Checks if the PDF document allows content extraction for accessibility. @return True if allowed, false otherwise
190 Checks if assembling document permission is granted. @return True if permission is on, false otherwise
191 Checks if the faithful print permission bit is set.
192 Sets encryption key and initializes the RC4 cipher algorithm state. @param key byte array representing the encryption key (1-32 bytes)
193 Writes encrypted data to an output stream using RC4 algorithm. @param aByte the byte to be written @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
194 Checks if a codepoint is prohibited for SASL protocol. @param codepoint the Unicode value to check @return true if it's prohibited, false otherwise
195 Checks if modification permission is granted. @return True if modification is allowed, false otherwise
196 Computes the encryption version number based on key length and preferences. @return Encryption version number (1, 2, 4 or 5) based on key length and AES preference.
197 Converts character code to Canonical Identifier (CID) for this Type 0 font. @param code Character code to be converted @return Corresponding CID or throws exception if conversion fails
198 Retrieves highest cross-reference object number from the pool.
199 Closes the PDF document and releases resources. Handles exceptions and ensures all IO resources are closed.
200 Closes the FDF document and associated streams, if open. @throws IOException if an I/O error occurs during closure
201 Retrieves the underlying COSDictionary object of this PDFunction instance. @return COSDictionary object, either from functionStream or functionDictionary.
202 Initializes a PDXObject with a given PDStream and sets its type & subtype. @param stream the graphical data stream @param subtype the specific subtype of the PDF structure name
203 Retrieves the underlying COSStream object from PDStream instance. @return The COSStream object used by this PDStream instance.
204 Fetches metadata from the underlying PDF stream's ICC profile.
205 Sets the metadata for the PDF stream using a COSStream object.
206 Compares this annotation with another for equality. @param o Object to compare with @return true if both objects are identical PDAnnotations, false otherwise
207 Constructs a Type 5 Shading Paint object with given shading and transformation matrix. @param shading the type 5 shading object to be applied @param matrix the transformation matrix for shading manipulation
208 Decodes a hexadecimal string into a byte array. @param s the input hexadecimal string @return decoded byte array or logs an error and returns null for invalid input
209 Sets or removes the bounding box for this form XObject using a COSArray representation of the rectangle's dimensions and coordinates. @param bbox PDRectangle to set as bounding box, or null to remove
210 Unchecks the checkbox by setting its value to "Off". @throws IOException if an error occurs while setting the value
211 Converts standard boolean to PDF's COSBoolean object. @param value The boolean to be converted. @return Corresponding COSBoolean (TRUE or FALSE).
212 Determines the text direction based on transformation matrix values. @return Text direction as a float value (0, 90, 180, or 270 degrees)
213 Checks if the update state of this COS object requires an update. @return true if updated, false otherwise
214 Compares this object with another for equality based on their integer values. @param o the object to compare with @return true if both objects are COSIntegers and have equal integer values, false otherwise
215 Initializes COSObjectKey with object num and generation values. Throws exception if input is negative. @param num unique object number @param gen object's generation value @param index stream index
216 Checks if the next character in the PDF source is a digit.
217 Checks if the document is accepting updates by verifying the state of the origin document. @return true if not parsing and origin document is accepting updates, false otherwise
218 Writes data to stream and encodes it into ASCII85 format when necessary. @param b the byte to be written and potentially encoded @throws IOException if an I/O error occurs
219 Flushes ASCII85 data to output stream, handling edge case and formatting. @throws IOException if an I/O error occurs during flushing
220 Decodes a predictor row in the image data, using various prediction algorithms. @param predictor Algorithm identifier (2: TIFF SUB, 10-14: PRED NONE, SUB, UP, AVG, PAETH) @param colors Number of color components @param bitsPerComponent Bits per component @param columns Number of pixels in the row @param actline Current line data to decode @param lastline Previous line data for prediction algorithms that use it
221 Returns the first column value based on the numeric type of this reference entry. @return The numeric representation of the reference's type, as per getNumericValue()
222 Retrieves and returns the generation value from the referenced object's key. @return The generation number of the referenced PDF object.
223 Generates a string representation of the FreeReference object. @return String containing key, next free object and type value
224 Retrieves byte offset as the second column value. @return Byte offset of referenced object in PDF document
225 Retrieves and returns the generation number of the referenced object. @return The generation value of the referenced PDF object.
226 Generates a string representation of the cross-reference entry. @return String with key, type, and byte offset information
227 Retrieves the number component of this object's parent key. @return The object number as a long value, or -1 if parent key is null.
228 Retrieves and returns the index of the object stream as the third column value. @return Index of the object stream within the PDF document.
229 Provides a string representation of this ObjectStreamEntry. @return formatted string with key, type, index, and parent key values
230 Writes data to output stream without a new line and updates position. @param b byte array containing data to be written @param off starting offset in the data @param len number of bytes from the data to write
231 Writes a single byte to output stream, disables new line writing. @param b the byte to be written @throws IOException if an I/O error occurs
232 Writes an end-of-line sequence if not already on a new line.
233 Determines if compression should be applied based on object stream size. @return true if compression parameters are set and compression is enabled, false otherwise
234 Adds an XReferenceEntry to manage PDF document structure. @param entry object representing a cross-reference table entry
235 Writes an indirect object reference to the output stream. @param output the output stream to write to @param indirectReference the COSObjectKey of the reference @throws IOException if writing to the output stream fails
236 Adds an entry to the cross-reference stream, avoiding duplicates based on object numbers. @param entry The XReferenceEntry to add
237 Checks if the next character in source is a whitespace. @return true if it's a space, carriage return, or line feed; false otherwise @throws IOException if an I/O error occurs while peeking at the source
238 Returns the type of pattern as a string. @return The string representation of the PDF pattern type
239 Adds an XRef entry for a given object key if it doesn't exist already. Logs warning if XRef start was not signaled. @param objKey the unique object key @param offset the offset value to be associated with the object key
240 Checks if next character in source is an ASCII space.
241 Skips line breaks in PDF source, handling CR, LF and CRLF sequences. @param linebreak the character to check for a line break @return true if line break is successfully skipped; false otherwise @throws IOException if an I/O error occurs while reading from the source
242 Checks for end of string in PDF parsing. Handles CR and LF characters. @param bracesParameter current brace level @return updated brace level or 0 if end of string is found
243 Checks if given char code represents an End of Line (EOL).
244 Reads a string number from the PDF source, handling digit parsing and length validation. @return StringBuilder containing the read string number or throws IOException if too long. @throws IOException if reading fails or number is excessively long.
245 Checks if the next character in source is whitespace according to PDF standards. @return true if it's a whitespace character, false otherwise @throws IOException if an I/O error occurs while reading from the source
246 Parses and returns the starting XREF offset, or -1 if not found in PDF stream. @return Starting XREF offset or -1 if not present @throws IOException If an I/O error occurs during parsing
247 Searches for the last EOF marker in PDF data stream, handling potential errors during parsing. @return Position of last EOF marker or Long.MAX_VALUE if not found @throws IOException If an error occurs while reading from the source
248 Searches for XRef streams in PDF data stream and returns their offsets. @return List of long values representing the starting positions of XRef streams @throws IOException if an I/O error occurs while reading from the source
249 Retrieves the cross-reference table from the resolved trailer. @return Map of object keys to their byte offsets, or null if not resolved
250 Retrieves the startxref offset for parsing PDF documents. @return The offset as a long; throws IOException if 'startxref' marker is missing. @throws IOException If file I/O errors occur or required markers are not found.
251 Reads data from the source stream until the endstream keyword is found, filtering and processing the content along the way. @param out EndstreamFilterStream to write filtered data into @return The calculated length of the processed byte stream
252 Retrieves the default value of the button. @return The string representation of the default value, or an empty string if not a COSName.
253 Returns the type of shading as a string representation. @return The string representation of the PDF shading type
254 Searches for cross-reference table offsets in the PDF data stream. @return List of long values representing the starting positions of xref tables @throws IOException if there is an issue with reading from the data source
255 Initializes a new instance of COSName with the given string. @param aName the name to be encapsulated by this object
256 Private constructor to limit instantiation of COSNull object to a single instance.
257 Initializes a new COSString object with specified byte array and hex formatting option. @param bytes input byte array to be copied @param forceHex true to enforce hexadecimal representation; false otherwise
258 Initializes an empty COSDictionary with its update state.
259 Initializes a COSObject with the specified COSBase and sets up its update state. @param object the underlying COSBase object to be managed by this COSObject
260 Initializes a COSObject with the given COSBase and ICOSParser, setting up its update state and parsing configuration. @param object base PDF object to be wrapped by COSObject @param parser used for dereferencing and updating the object
261 Initializes a COSObject with a given key and parser. Sets up the object's update state and parser. @param key unique identifier for the object @param parser responsible for parsing PDF data
262 Initializes DecodeOptions with a specific source region for image decoding. @param x the X-coordinate of the top-left corner of the source region @param y the Y-coordinate of the top-left corner of the source region @param width the width of the source region @param height the height of the source region
263 Initializes a free object reference with its unique key and the next free object number. @param key The COSObjectKey of the free reference @param nextFreeObject The number of the next free object
264 Initializes an ObjectStreamXReference with given parameters. @param objectStreamIndex Index of the object stream @param key Key of the referenced object @param parentKey Key of the parent object
265 Constructs an instance of resource cache with stable caching enabled by default.
266 Initializes with a given COSDictionary to manage PDF metadata and properties. @param dictionary the underlying data structure for managing PDF content
267 Constructs a new instance of PDAttributeObject with a given COSDictionary. @param dictionary manages PDF metadata and properties; critical for attribute data representation
268 Constructs a new COSBoolean object with the specified boolean value. @param aValue the initial boolean value to be encapsulated in this COSBoolean instance
269 Constructs a new PDUserProperty with a given COSDictionary and user attribute object. @param dictionary the underlying PDF metadata and properties @param userAttributeObject contains user-defined attributes for the property
270 Creates a new PDOutlineNode with specified COSDictionary. @param dict the underlying COSDictionary for managing PDF metadata and properties
271 Initializes a new instance of PDNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node
272 Constructs an FDFAnnotationSquare from a COSDictionary. @param a dictionary containing square annotation data for PDFBox library
273 Constructs an FDFAnnotationStamp object from a COSDictionary. @param a dictionary containing stamp annotation data for PDFBox library
274 Constructs an FDFAnnotationText object from a COSDictionary. @param a dictionary containing text annotation data for PDFBox library
275 Constructs an FDF text markup annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
276 Returns a Composite for blending images with specified blend mode and alpha. Validates input parameters. @param blendMode The blending technique to be used (cannot be null) @param constantAlpha The constant alpha level for the composite, clamped between 0 and 1 @return Composite instance for image blending operations
277 Fetches and constructs transparency group attributes on demand. @return Transparency group attributes or null if not defined in the PDF document.
278 Constructs a shading pattern from a given COSDictionary. @param resourceDictionary contains pattern-related data for this instance
279 Constructs a tiling pattern from a COSDictionary with a specified resource cache. @param dictionary contains pattern-related data @param resourceCache stores and retrieves resources for the pattern
280 Constructs a new PDShadingType1 object with given shading dictionary. @param shadingDictionary COSDictionary containing Type 1 shading properties.
281 Constructs a new PDShadingType2 object with given shading dictionary. This is a specialized Type 2 shading for PDF documents. @param shadingDictionary COSDictionary containing shading properties
282 Constructs an AxialShadingPaint object with PDShadingType2 and transformation matrix. @param shadingType2 the specific axial shading type to be applied @param matrix the transformation matrix for shading manipulation
283 Constructs a RadialShadingPaint object with specified PDShadingType3 and transformation matrix. @param shading the radial shading object to be applied @param matrix the transformation matrix for shading manipulation
284 Constructs a Type 1 Shading Paint object with specified shading and transformation matrix. @param shading the Type 1 shading object to be applied @param matrix the transformation matrix for shading manipulation
285 Initializes sound annotation from a COSDictionary in PDFBox library. Inherits base properties and constructs with sound-specific data. @param a dictionary containing annotation data for PDFBox library
286 Initializes an instance of FDFAnnotationPolyline with COSDictionary. @param a dictionary containing annotation data for PDFBox library
287 Initializes an instance of FDFAnnotationPolygon with COSDictionary. @param a dictionary containing annotation data for PDFBox library
288 Initializes FDFAnnotationLink with COSDictionary data. @param a dictionary containing annotation link data for PDFBox library
289 Initializes a new instance of PDEmbeddedFilesNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node
290 Initializes a new instance of PDJavascriptNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node.
291 Initializes a new instance of PDStructureElementNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pair for this node
292 Creates a child node using provided dictionary and value type. @param dic the COSDictionary for the child node @return newly created PDNumberTreeNode object
293 Constructs a new PDMetadata object with the given COSStream. @param str the COSStream to be managed by this PDMetadata instance
294 Initializes a new PDObjectStream from a given COSStream. @param str the input COSStream to be managed by this instance.
295 Constructs a new PDEmbeddedFile object with the given COSStream. @param str the COSStream to be managed by this PDEmbeddedFile instance
296 Initializes PDFunction with a given COSBase object, handling streams and dictionaries. @param function input COSBase object; can be COSStream or COSDictionary
297 Initializes PDXObject with a given COSStream and subtype. Sets stream type and subtype names. @param stream the COSStream to be managed by this PDXObject instance @param subtype the PDF structure name for the object's subtype
298 Constructs a new instance of PDTransition with a given COSDictionary. @param dictionary manages PDF metadata and properties for transitions
299 Constructs a new structure node from a COS dictionary. @param dic COS dictionary representing the node's data and relationships.
300 Constructs a new root of a logical structure tree from a COS dictionary. @param dic COS dictionary representing the root's data and relationships
301 Initializes an instance of the SecurityHandler class to manage PDF encryption and decryption.
302 Initializes a new instance of FDFAnnotationCaret with a COSDictionary. @param a dictionary containing annotation data for PDFBox library
303 Constructs an FDFAnnotationCircle from a COSDictionary. @param a dictionary containing annotation data for PDFBox library
304 Initializes FDFAnnotationFileAttachment with COSDictionary data. @param a dictionary containing annotation data for PDFBox library
305 Initializes a new instance of FDFAnnotationFreeText with a COSDictionary. @param a dictionary containing annotation data for PDFBox library.
306 Constructs an FDFAnnotationInk from a COSDictionary. @param a dictionary containing ink annotation data for PDFBox library
307 Initializes a new instance of FDFAnnotationLine with COSDictionary. Calls super constructor to set annotation data for PDFBox library. @param a dictionary containing line annotation data for PDFBox library
308 Writes the paragraph start character and manages paragraph state. Calls write() to output the character, handles end of previous paragraph if needed. @throws IOException if an I/O error occurs during writing
309 Writes the line separator to the output stream.
310 Writes the word separator to the output stream during text extraction.
311 Writes page start to the output stream. @throws IOException if I/O error occurs
312 Writes the end separator string of PDF text extraction to an output stream. @throws IOException if an I/O error occurs during writing
313 Reverses Unicode string if it contains RTL characters, except at the start. @return Visually ordered Unicode representation of the text element.
314 Checks if the text element is a diacritic mark based on Unicode properties. @return true if it's a non-spacing, modifier symbol or letter; false otherwise
315 Converts a byte to its hexadecimal string representation. @param b the input byte @return two-character hexadecimal string representing the byte
316 Converts a byte array to its hexadecimal representation. @param bytes input byte array @return hexadecimal string representation of the input bytes
317 Converts a single byte to its hexadecimal representation as two bytes. @param b the input byte @return two bytes representing the hexadecimal value of the input byte
318 Converts a byte array to its hexadecimal string representation. @param bytes the input byte array @return a new byte array containing the ASCII characters of the hexadecimal representation
319 Writes a byte to an OutputStream as hexadecimal characters. @param b the byte to be written @param output the destination stream for the hexadecimal representation
320 Formats a float number into ASCII bytes with specified precision. @param value the float to format @param maxFractionDigits maximum digits after decimal point @param asciiBuffer byte array for output @return offset within buffer or -1 if value is invalid
321 Finds and returns the value associated with a given byte sequence. @param bytes The input byte sequence to search for @return The stored value of type T or null if not found
322 Ends an article and writes the appropriate ending character/string to the output stream.
323 Starts article extraction and writes the start position to the output stream. @param isLTR specifies text direction (true for left-to-right, false otherwise) @throws IOException if an I/O error occurs during writing
324 Returns Unicode representation of text element as string. @return Unicode string representing the text element
325 Writes Unicode representation of a text element to an output stream.
326 Retrieves the height of the template based on page height. @return floating-point value representing the template height
327 Ensures the given PDOutlineItem has no sibling nodes, throwing an exception if it does. @param node The outline item to check for siblings @throws IllegalArgumentException If the node has any siblings
328 Calculates the X-coordinate based on rotation and translation. @param rotation angle of text rotation (0, 90, 180, or 270 degrees) @return X-coordinate after applying rotation and translation
329 Calculates the Y-coordinate of lower left corner after rotation. @param rotation angle of rotation (0, 90, 180, or 270 degrees) @return calculated Y-coordinate or 0 for invalid rotation angles
330 Calculates the width based on rotation angle and position. @param rotation The rotation angle in degrees @return Absolute difference between end point and translation point of text matrix.
331 Sets horizontal and vertical positions of visible sign in PDF doc. @param x horizontal position on page @param y vertical position on page @return updated PDVisibleSignDesigner object for chaining
332 Constructs a PDMarkedContent object with specified tag and properties. @param tag COSName for the content structure; if null, tag is set to null @param properties COSDictionary containing additional content properties
333 Constructs an FDF highlight annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
334 Constructs a tiling pattern from a COSDictionary. Uses default resource cache. @param dictionary contains pattern-related data
335 Constructs a new signature field with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the signature field @param parent the parent PDNonTerminalField (if any)
336 Constructs a new variable text field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
337 Returns a string representation of the objects and their revisions in this collection. @return String formatted as "{object=obj1, revisionNumber=rev1; object=obj2, revisionNumber=rev2; ...}"
338 Generates a unique partial name for signature fields. @return A string representing the unique partial name
339 Initializes an instance of PublicKeySecurityHandler to manage encryption and decryption using X.509 certificates.
340 Constructs a PDFormXObject with the given COSStream and ResourceCache. @param stream the underlying COSStream for this form XObject @param cache the resource cache to manage shared resources efficiently
341 Constructs StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy Policy defining access permissions and encryption parameters.
342 Constructs a form XObject from a given COSStream. Initializes the parent class with the stream and 'FORM' subtype. @param stream the COSStream to be managed by this PDFormXObject instance
343 Initializes PDPostScriptXObject with a given COSStream.
344 Initializes a COSDocument object with a memory-only StreamCache and an ICOSParser. @param parser used for parsing PDF document data
345 Creates a soft mask from COSDictionary or returns null if input is invalid. @param dictionary contains soft mask properties (COSDictionary or COSName) @return PDSoftMask object or null for unsupported or invalid inputs
346 Constructs a new PDShadingType3 object with given shading dictionary. This is a specialized Type 3 shading for PDF documents. @param shadingDictionary COSDictionary containing shading properties
347 Constructs a triangle-based shading type with given shading dictionary. @param shadingDictionary COSDictionary containing shading properties
348 Constructs an FDF strikeout annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
349 Initializes security handler for public key protection policy. @param publicKeyProtectionPolicy Policy defining access permissions and encryption parameters.
350 Constructs an FDF underline annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
351 Constructs a new button with specified parameters for PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the button @param parent the parent PDNonTerminalField (if any)
352 Constructs an FDF squiggly line annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
353 Constructs a triangle-based shading type with given properties. @param shadingDictionary COSDictionary containing shading properties
354 Initializes an instance of the StandardSecurityHandler class for PDF encryption and security management.
355 Modifies the text position by translating the current text matrix. @param tx translation in the x-direction @param ty translation in the y-direction
356 Checks if a point is within the rectangle's boundaries. @param x Coordinate on the X-axis @param y Coordinate on the Y-axis @return True if the point is inside, false otherwise
357 Initializes a ShadedTriangle object with points and colors, calculates area and degree. @param p Array of 3D points defining the triangle @param c Corresponding color values for each point
358 Sets a new FontProvider and updates the font info map based on it. @param fontProvider provides font information for mapping
359 Saves font information to a disk cache for efficient retrieval. Handles IOException and SecurityException by logging warnings or debug messages.
360 Retrieves or loads a FontBoxFont based on its format and postScriptName. Caches the font for future use to avoid reloading. @return FontBoxFont object or null if not found/loaded successfully
361 Encrypts or decrypts input data using AES-256 algorithm with CBC mode and PKCS5 padding. @param data InputStream containing the data to be encrypted/decrypted @param output OutputStream to write the result to @param decrypt True for decryption, false for encryption @throws IOException if an error occurs during encryption/decryption or I/O operations
362 Encrypts or decrypts data using AES algorithm with provided key and IV. @param finalKey encryption/decryption key @param data input stream of data to encrypt/decrypt @param output output stream for the result @param decrypt true if decryption, false if encryption
363 Processes and adds a token to the current instruction sequence by converting CharSequence to String. @param text The input CharSequence to be processed as a token
364 Concatenates two matrices by multiplying them in reverse order (b*a). @param a first matrix @param b second matrix @return result of the multiplication as a new Matrix object
365 Translates the matrix by a given vector's x and y coordinates.
366 Constructs a Type 3 PDF function from a given COSBase object. @param functionStream input COSBase object; can be stream or dictionary, initializes the parent PDFunction class for further handling.
367 Loads a glyph list from resources and returns a new GlyphList object. @param filename name of the resource file to load @param numberOfEntries maximum number of entries in the resulting GlyphList @return a new GlyphList instance with data from the specified resource file
368 Updates and applies the current graphics context's clipping paths. Uses both the current state's clip paths and initial clip if available.
369 Ends text clipping and applies it as a single area if rendering mode allows.
370 Generates a map of Glyph IDs (GIDs) to character codes for the font. @return Map<Integer, Integer> where keys are GIDs and values are character codes @throws IOException if an error occurs while extracting font data
371 Calculates and returns the width of the rectangle. @return Width as a floating-point value
372 Rotates this matrix by the specified angle around the origin. @param theta Rotation angle in radians
373 Writes a formatted float value to the PDF output stream in ISO-8859-1 encoding. @param output destination output stream @param cosFloat COSFloat object containing the float value
374 Checks if the COSDictionaryMap is empty by comparing its size to zero.
375 Writes an operator and newline to content stream. @param text Operator string to be written in PDF content stream
376 Writes an integer operand to the stream, formatted as decimal.
377 Writes a finite float number to the output stream, formatting it according to decimal settings. @param real float number to write; throws an exception if not finite @throws IOException if an I/O error occurs while writing
378 Determines the image suffix based on its filters in a PDF document. @return Image suffix as a String or null if filter is not recognized.
379 Constructs a PDImageXObject with stream and resources, checks for JPX filter. @param stream the graphical data stream @param resources associated resources for the image object
380 Creates an output stream for writing data to the COSStream with optional filters. @param filters The filter(s) to apply to the data stream; if null, no filters are applied. @return OutputStream for writing data with applied filters, if any. @throws IOException If there's an error checking if closed or creating output streams.
381 Retrieves name from object at given index. @param index position in the array @return Name of COSName object or null if not found/applicable
382 Retrieves an integer value at a specified index. If not found, returns -1. @param index position in the collection @return int value at index or -1 if not found
383 Returns a string representation of the rectangle's coordinates. @return String in format "[lowerLeftX,lowerLeftY,upperRightX,upperRightY]"
384 Converts the rectangle to a GeneralPath object for graphical representation. @return GeneralPath representing the rectangle's geometry
385 Transforms the rectangle using a given matrix and returns a GeneralPath object. @param matrix The transformation matrix to apply to the rectangle's coordinates @return A transformed GeneralPath object representing the new rectangle shape
386 Calculates and returns the height of the rectangle.
387 Converts update state into a COSIncrement object. @return A COSIncrement object initialized with the class's update info, or null if no update is required.
388 Initializes a COSWriter with an output stream. @param outputStream the underlying output stream for writing PDF data
389 Computes the owner password for encryption using RC4 key and user password. @param ownerPassword byte array representing the owner password @param userPassword byte array representing the user password @param encRevision encryption revision (3 or 4) @param length desired length of the resulting RC4 key @return byte array containing the computed and encrypted owner password
390 Computes the user password for encryption based on provided parameters. @param password user-provided password @param owner owner password bytes @param permissions access permissions @param id document identifier @return encrypted user password as a byte array
391 Sets the signature image from a file path. Closes input stream safely after usage. @param path String representing the file path of the signature image @return PDVisibleSignDesigner instance for method chaining
392 Initializes sign designer with visible signature image from input stream. @param imageStream the input stream containing the signature image @throws IOException if an I/O error occurs while reading the image stream
393 Constructs a COSString object with given text using default encoding options. @param text the input string to be encoded
394 Fetches the default appearance string for text fields in PDF forms. @return Default appearance string or null if not a COSString instance
395 Retrieves export values from the button element, handling both string and array types. @return List of strings extracted from COSBase object or an empty list if not found
396 Extracts string items from a COSBase object at a specified index in pairs. @param items COSBase object containing potential strings or arrays of strings @param pairIdx Index position to extract string from, if the item is an array @return List of extracted strings; empty list if no valid strings found
397 Retrieves the string representation of a named destination. @return String representation or null if not found (COSString/COSName)
398 Retrieves and decodes the filename from the COSBase object. @return Decoded string representation of the filename
399 Retrieves a string from the array at given index or returns default value. @param index position of object in the array @param defaultValue fallback value if object is not a COSString @return String representation of COSString at index or defaultValue if unavailable
400 Initializes PDFunctionType0 with a COSBase object. @param function input COSBase object; can be COSStream or COSDictionary
401 Retrieves metadata from the COSStream object, creating a PDMetadata instance. @return PDMetadata object if metadata exists; otherwise, returns null.
402 Searches for the nearest XREF (cross-reference) offset to a given value. @param xrefOffset The target offset to find the nearest match for. @return Nearest matching XREF offset or -1 if not found.
403 Parses and sets the version of the PDF header. @return True if successful; false otherwise. @throws IOException If an I/O error occurs during parsing.
404 Parses the FDF header and sets its version. Relies on the critical parseHeader method. @return True if parsing is successful; false otherwise
405 Constructs a PDDocument with specified COSDoc and source. @param doc The COSDocument to associate with this PDDocument. @param source The RandomAccessRead source for the PDF document.
406 Reads and returns a line of text from the PDF source, handling EOL characters. @return A string representing a line of text from the PDF source. @throws IOException If end-of-file is encountered unexpectedly.
407 Skips line breaks in PDF source, handling CR, LF and CRLF sequences. @return true if line break is successfully skipped; false otherwise @throws IOException if an I/O error occurs while reading from the source
408 Creates and returns a PDDocument instance using internal document data. @return PDDocument object for further processing or null if an error occurs. @throws IOException if there is an issue with the source or access permissions.
409 Returns a COSInteger object with the angle value of this transition direction. @return A COSBase object representing the degrees as a COSInteger
410 Detects the type of a file from an input stream by analyzing its magic numbers. @param inputStream BufferedInputStream to be analyzed @return FileType object or null if not found, throws IOException if mark/reset is not supported
411 Writes an array of bytes to an OutputStream in hexadecimal format. @param bytes the byte array to be written @param output the destination stream for the hexadecimal representation
412 Writes the PDF structure name to an OutputStream with proper encoding and character restrictions. @param output destination stream for the encoded name @throws IOException if writing to the stream fails
413 Writes an external signature to the PDF document. Throws exception if not prepared for setting a signature. @param cmsSignature byte array of the CMS signature @throws IOException if there's insufficient space for the signature or if the document is not ready for signing
414 Converts byte array to its hexadecimal representation using Hex utility. @return hexadecimal string representation of the internal byte array
415 Converts Calendar to ISO8601 formatted date-time string with timezone offset. @param cal the Calendar object to convert @return ISO8601 formatted date-time string with timezone offset
416 Formats a Calendar object into a specific date string format with timezone. @param cal the calendar to be formatted @return formatted date string or null if input is null
417 Skips over whitespace and comments in PDF source, rewinding the stream position. @throws IOException if an I/O error occurs while reading from the source
418 Writes the paragraph end and manages paragraph state. Calls methods to get end string and handle I/O operations. @throws IOException if an I/O error occurs during writing
419 Starts article extraction with left-to-right text direction.
420 Calculates width based on text direction and rotation. @return Adjusted width as a float value.
421 Returns the width of text element based on rotation angle. @return Width calculated using getWidthRot method
422 Calculates Y-coordinate adjustment based on text direction. @return Adjusted Y-coordinate as a float value
423 Initializes text position with given parameters and calculates X,Y coordinates based on rotation. @param pageRotation angle of page rotation @param endX ending X-coordinate @param endY ending Y-coordinate @param rotation angle of text rotation
424 Calculates X-coordinate adjustment based on text direction. @return Adjusted X-coordinate as a float value
425 Checks if all owner permissions are granted for the PDF document. @return True if all permissions are on, false otherwise.
426 Skips white spaces and line breaks in the PDF source, handling extra whitespaces after stream. @throws IOException if an I/O error occurs while reading from the source
427 Checks for any revision 3 permissions set. @return True if any rev 3 permission is set, false otherwise.
428 Checks if a given PDF object requires an update. @param base the PDF object to be checked @return true if updated, false otherwise
429 Appends a child element with the given MCID to the structure. @param mcid unique identifier for the child element
430 Parses and retrieves a COSNumber instance for the input string, handling float or integer values. @param number String representation of numeric value to be parsed @return COSNumber object representing the input value @throws IOException if unable to parse or coerce the input string
431 Retrieves the extended object stream if it exists. @return PDObjectStream or null if not found
432 Closes the stream, flushes data and releases resources. @throws IOException if an I/O error occurs during flush or close operations
433 Updates document state if accepting updates. @param updated new state
434 Constructs a COSObjectKey with object number and generation. @param num unique object number @param gen object's generation value
435 Retrieves AFM metrics for a font by name, loading if necessary. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if base font is not found
436 Writes encrypted data to an output stream using RC4 algorithm. @param data the byte array to be written @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
437 Constructs a form XObject with the given graphical data stream. @param stream the graphical data stream for this form object
438 Writes encrypted bytes to an output stream using RC4 algorithm. @param data byte array containing data to be written @param offset starting index in data for writing @param len number of bytes from data to write @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
439 Closes all PDF documents and clears resources, including overlays for default, first, last, etc. pages.
440 Initializes an empty PDPageAdditionalActions object with a new COSDictionary.
441 Initializes an empty PDFormFieldAdditionalActions object with a new COSDictionary.
442 Initializes actions dictionary for PDF document catalog interactions.
443 Initializes an empty dictionary for storing additional action definitions.
444 Initializes an empty COSDictionary to store additional actions.
445 Initializes an empty shading object with default settings.
446 Initializes an empty device-dependent color space for PDF graphics.
447 Initializes an empty PDDeviceNAttributes object with a new COSDictionary.
448 Initializes an empty target directory with a new COSDictionary.
449 Initializes an empty FDFTemplate with a new COSDictionary.
450 Constructs an empty FDFPage with a new COSDictionary.
451 Initializes an empty FDF named page reference with a new COS dictionary.
452 Initializes an empty FDFJavaScript object with a new COSDictionary.
453 Constructs an empty FDF icon fit object with its initial state.
454 Initializes an empty FDF form field with a new COSDictionary.
455 Initializes an empty FDF dictionary for managing FDF data.
456 Constructs an empty FDF catalog with an initialized dictionary.
457 Initializes an empty FDFPageInfo with a new COSDictionary.
458 Initializes an empty crypt filter dictionary for PDF encryption.
459 Initializes an empty COSDictionary for URI actions in PDF documents.
460 Initializes an empty border effect dictionary for PDF document manipulation.
461 Retrieves and creates metadata from the PDF stream. @return PDMetadata object or null if not available; throws exception for invalid types.
462 Constructs a PDOutlineItem with specified COSDictionary. @param dic the underlying COSDictionary for managing PDF metadata and properties
463 Initializes PDStandardAttributeObject with a COSDictionary. @param dictionary manages PDF metadata; crucial for attribute data representation.
464 Constructs a new instance of PDUserAttributeObject with a given COSDictionary. @param dictionary Manages PDF metadata and properties; critical for attribute data representation.
465 Initializes a new instance with an empty parameter dictionary.
466 Initializes a new instance of PDDefaultAttributeObject with a given COSDictionary. @param dictionary manages PDF metadata and properties; critical for attribute data representation.
467 Initializes an empty viewer preferences dictionary.
468 Initializes an empty viewport dictionary for PDF processing.
469 Constructs a new PDField instance with default parameters. @param acroForm the parent AcroForm structure to associate with the field.
470 Initializes an empty PDSeedValueTimeStamp object with a direct dictionary for storing timestamp data.
471 Initializes an empty COSDictionary with direct state for storing digital signature properties.
472 Initializes an empty data dictionary for PDF build properties, setting it as a direct object.
473 Initializes a PDPropBuild object with an empty COSDictionary in direct mode.
474 Initializes an empty border style dictionary for PDF annotations.
475 Constructs a COSObject with given base object and key. Marks it as dereferenced. @param object the underlying COSBase object to wrap @param objectKey unique identifier for the object
476 Initializes an empty PDBoxStyle with a new COSDictionary.
477 Initializes an empty encryption dictionary for PDF documents. @return A new instance of PDEncryption with an empty COSDictionary.
478 Initializes an empty marking information object with a new COSDictionary.
479 Initializes an empty property list with a new COSDictionary.
480 Initializes and sets up text rendering operators for PDF processing.
481 Default constructor that initializes page label range with an empty COS dictionary.
482 Initializes an empty PDF name tree node with a new COSDictionary.
483 Initializes an empty PDDictionaryWrapper with a new COSDictionary instance.
484 Initializes an instance of PDResources with a new empty dictionary. Sets up font and resource caching for efficient management.
485 Initializes an empty PDDocumentInformation object with an underlying COSDictionary.
486 Creates and returns a default DecodeResult object with empty parameters. @return DecodeResult initialized with default (empty) decoding parameters
487 Initializes an unmodifiable COSDictionary from the given dictionary. @param dict original COSDictionary to be made unmodifiable
488 Initializes a new COSStream with given RandomAccessStreamCache and sets initial length to 0. @param streamCache caches streams for efficient data access in PDF documents.
489 Retrieves or creates a COSName instance for the given string. Uses caching and thread-safety to manage instances efficiently. @param aName the input string for the COSName @return the corresponding COSName instance, creating if necessary
490 Constructs an empty COSArray with default direct state.
491 Constructs a new COSString object from given byte array without hex formatting. @param bytes input byte array to be copied
492 Constructs an appearance stream from a given COSStream. @param stream the COSStream to be managed by this PDAppearanceStream instance
493 Initializes a PDTransparencyGroup with given COSStream and ResourceCache. @param stream the underlying transparency group data @param cache manages shared resources for efficient handling
494 Adds TrueType Collection fonts from a file and processes their headers. @param ttcFile the TrueType Collection file to add fonts from
495 Adds and processes a TrueType font from the given headers and file. Extracts metadata and adds to fontInfoList; skips invalid or unsupported formats. @param fontHeaders Font headers containing information about the font @param file The font file to be processed @param hash Unique identifier for the font
496 Adds a Type1 font to the system from a PFB (Printer Font Binary) file. @param pfbFile The PFB file containing the font data.
497 Constructs a COSArrayList with a given COSDictionary and COSName. Initializes the array and connects it to the provided dictionary and key. @param dictionary COSDictionary object for storage @param dictionaryKey COSName used as the key in the dictionary
498 Initializes PDPrintFieldAttributeObject with a COSDictionary. @param dictionary manages PDF metadata for attribute data representation
499 Retrieves and returns a PDResources object based on the COSDictionary. If not found, an empty or null PDResources object is returned as per PDF specification.
500 Returns the last decoded result or a default if none exist. @return DecodeResult object, either last in results or a default one
501 Returns an unmodifiable version of this COSDictionary. @return a new UnmodifiableCOSDictionary instance
502 Initializes a COSStream with stream cache and read view. Sets the length based on the read view. @param streamCache caches streams for efficient data access in PDF documents @param randomAccessReadView provides a view of the underlying data stream
503 Constructs a new COSStream with null stream cache and default length 0.
504 Creates a new COSStream and adds it to document's collection for closure. @return newly created COSStream object, added to internal collection.
505 Initializes a PDRectangle with specified coordinates and dimensions. @param x X-coordinate of the rectangle's lower left corner @param y Y-coordinate of the rectangle's lower left corner @param width Width of the rectangle @param height Height of the rectangle
506 Constructs an empty PDPageDestination with default direct state.
507 Initializes an instance of COSArrayList with empty COSArray and ArrayList.
508 Parses a hexadecimal string to a COSString object, handling whitespace and invalid characters. @param hex the input hexadecimal string @return a COSString object representing the parsed hexadecimal data @throws IOException if an error occurs during parsing or writing
509 Initializes PDRectangle with coordinates from a BoundingBox object. @param box Object containing the lower left and upper right coordinates.
510 Initializes an empty PDAttributeObject with a new COSDictionaryWrapper.
511 Constructs a PDUserProperty with a given PDUserAttributeObject. @param userAttributeObject represents user attributes within the PDF document's structure.
512 Initializes PDListAttributeObject with a COSDictionary. @param dictionary manages PDF metadata; crucial for list numbering configuration
513 Initializes PDLayoutAttributeObject with a COSDictionary. @param dictionary manages PDF metadata, crucial for layout attribute data representation.
514 Retrieves the current FontProvider or sets a default one if not already set. @return The active FontProvider for managing font information and mapping.
515 Generates shaded triangles from a coordinate-color pair matrix. @param patchCC A 2D array of CoordinateColorPair objects @return List of generated ShadedTriangle objects
516 Initializes a CoonsPatch object with control points and corner colors. @param points Array of Point2D objects for the control points. @param color 2D array representing RGB values at corners.
517 Constructs a new PDTerminalField instance with a specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field
518 Converts a COSString to a Calendar object by parsing the string representation. @param text COSString containing date information @return Calendar instance if parsing succeeds, or null otherwise
519 Constructs a new PDNonTerminalField instance with specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field.
520 Constructs an empty PDF structure element name tree node with a new COSDictionary.
521 Initializes an empty PDF name tree node with a new COSDictionary.
522 Initializes an empty PDF name tree node with a new COSDictionary.
523 Initializes an empty PDF name tree node with a new COSDictionary.
524 Initializes an empty PDOutlineNode with a new COSDictionaryWrapper instance.
525 Initializes PDTableAttributeObject with a COSDictionary. @param dictionary Manages PDF metadata, crucial for table attribute representation.
526 Initiates text mode for content stream, throwing exception if already in text mode or writing operator. @throws IOException If an I/O error occurs during operation.
527 Sets the line join style in PDF content stream. @param lineJoinStyle an integer value (0-2) representing different types of line joins @throws IOException if there is a problem writing to the stream
528 Sets the width of lines drawn by subsequent graphics operations.
529 Applies the even-odd rule to current clipping path in PDF content stream. Throws exception if used within a text block. @throws IOException If an I/O error occurs while writing operator to stream.
530 Clips the current graphics path using non-zero winding rule, throws error if within a text block. @throws IOException If an I/O error occurs while writing to content stream
531 Closes the current path in content stream, or throws exception if within a text block. @throws IOException If an I/O error occurs during writing to the output stream.
532 Closes, fills and strokes even-odd path. Throws exception if within a text block. @throws IOException If an I/O error occurs during writing the operator.
533 Closes and fills non-zero winding number paths, then strokes the path. Throws exception in text mode. @throws IOException if an I/O error occurs during writing operator
534 Fills and strokes graphics path using even-odd rule, throws error if used within text block. @throws IOException if an I/O error occurs while writing to the content stream
535 Fills and strokes the current path in PDF content stream. Throws exception if used within text mode. @throws IOException if an I/O error occurs while writing to the output stream
536 Fills areas of the path using an even-odd rule and writes operator to content stream. Throws exception if used within a text block. @throws IOException if writing to content stream fails
537 Fills shapes in content stream, throws exception if used within a text block. @throws IOException if an I/O error occurs while writing to the output stream
538 Closes and strokes the current path in PDF document, throwing an exception if used within a text block. @throws IOException if an I/O error occurs during operation @throws IllegalStateException if called within a text block
539 Strokes the current path if not in text mode, throws exception otherwise. @throws IOException if an I/O error occurs
540 Draws a line to specified coordinates in PDF content stream, handling text mode restrictions. @param x destination X coordinate; throws exception if within text block @param y destination Y coordinate; throws exception if within text block @throws IOException if an I/O error occurs while writing
541 Moves the graphics cursor to specified coordinates. Throws exception if used within a text block. @param x new horizontal coordinate @param y new vertical coordinate @throws IOException if an I/O error occurs while writing
542 Draws a cubic Bezier curve with replicated final point in PDF content stream. @param x1, y1 Coordinates of the first control point. @param x3, y3 Coordinates of the endpoint and second control point. @throws IOException If an I/O error occurs while writing. @throws IllegalStateException If called within a text block.
543 Draws a cubic Bezier curve with two control points, writing coordinates and operator to the content stream. @param x2 X-coordinate of first control point @param y2 Y-coordinate of first control point @param x3 X-coordinate of second control point @param y3 Y-coordinate of second control point @throws IOException if writing to the output stream fails
544 Draws a cubic Bezier curve using specified control points. Throws exception if used within text block. @param x1, y1 first control point coordinates; x3, y3 end point coordinates; x2, y2 second control point coordinates @throws IOException if an I/O error occurs during operation
545 Adds a rectangle to the PDF content stream with specified coordinates and dimensions, ensuring it's not used within a text block. Throws an exception if in text mode. @param x X-coordinate of rectangle's bottom left corner @param y Y-coordinate of rectangle's bottom left corner @param width Rectangle's width @param height Rectangle's height @throws IOException if an I/O error occurs while writing the rectangle data
546 Sets non-stroking color in a PDF document's content stream using grayscale. @param g float value within 0 to 1 representing the gray level @throws IOException if an I/O error occurs during writing operations
547 Sets non-stroking color in CMYK format and writes to content stream. @param c cyan component [0, 1] @param m magenta component [0, 1] @param y yellow component [0, 1] @param k key (black) component [0, 1]
548 Sets the line cap style in PDF content stream. Throws exception if input is invalid. @param lineCapStyle an integer (0-2) representing different line cap styles @throws IOException if writing to content stream fails
549 Sets the non-stroking color using RGB values and writes to content stream. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs while writing
550 Sets the line dash pattern in a PDF content stream. @param pattern Array of float values representing dashes and gaps @param phase Shifts the start point of the pattern along the line @throws IOException if an I/O error occurs while writing to the output stream
551 Ends marked content section in PDF stream by writing END_MARKED_CONTENT operator. @throws IOException if writing to the stream fails
552 Computes user password based on encryption revision. @param ownerPassword byte array representing the owner password @param owner original owner data @param encRevision encryption revision (2, 3, or 4) @param length desired length of the resulting user password @return computed user password as a byte array or empty if rev. is 5 or 6 @throws IOException if an I/O error occurs during encryption
553 Initializes TensorPatch with control points and corner colors, computes levels, and generates triangles. @param tcp original control points @param color 2D array representing RGB values at corners [topLeft, topRight, bottomLeft, bottomRight]
554 Sets the named destination with given text. Constructs a COSString object if text is not null, otherwise sets it to null. @param dest input string for named destination or null
555 Initializes a named destination with a given COSString. @param dest the input string to be encoded as a COSString object
556 Sets the file name of the PDF document specification. @param fileName the name to be assigned to the file
557 Initializes an empty simple file specification with default name.
558 Retrieves and processes a button's value based on its type. @return The string representation of the button's value or "Off" if not set.
559 Retrieves a string from array at given index. @param index position of object in the array @return String representation or null if unavailable
560 Saves FDFDocument to an OutputStream using a COSWriter, managing encryption and updates. @param output the OutputStream for saving the document @throws IOException if there is an error during writing operation
561 Sets text rise value and writes it to content stream. @param rise Amount of text rise; affects vertical positioning of text @throws IOException If an I/O error occurs while writing
562 Sets the text rendering mode for content stream, writing operator and value to the stream. @param rm RenderingMode object representing the desired rendering mode @throws IOException if an I/O error occurs while writing to the stream
563 Sets horizontal scaling for text rendering and writes to the content stream
564 Sets word spacing and writes to output stream. @param spacing Word spacing value; throws an exception if not finite @throws IOException If there's an I/O error during writing
565 Sets character spacing and writes it to the output stream. @param spacing float value for character spacing @throws IOException if an I/O error occurs while writing
566 Sets the miter limit for line joins, throwing an exception if invalid. @param miterLimit new value; must be greater than 0 @throws IOException if writing to output stream fails
567 Sets the stroking color for graphical elements using grayscale values. @param g grayscale value (0 to 1) @throws IOException if an I/O error occurs while writing
568 Sets the stroking color using CMYK values and writes to content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1) @throws IOException if writing to stream fails
569 Sets the stroking color using RGB values and updates the color space stack. @param r red value (0.0 to 1.0) @param g green value (0.0 to 1.0) @param b blue value (0.0 to 1.0) @throws IOException if an error occurs while writing the color values
570 Initializes an empty PDF document with default memory stream cache and no encryption.
571 Saves and resets the current graphics stack, returning a copy of the previous state. @return A deep copy of the previous graphics stack for later restoration.
572 Saves current graphics state by pushing a cloned copy onto stack. @return void; modifies the graphics stack
573 Constructs a new variable text field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
574 Constructs a new choice field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the choice field @param parent the parent PDNonTerminalField (if any)
575 Constructs a new radio button with specified parameters for PDF form.
576 Constructs a push button for PDF form with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the button @param parent the parent PDNonTerminalField (if any)
577 Constructs a new checkbox with specified parameters for PDF form.
578 Intersects clipping path with a transformed rectangle. @param rectangle The rectangle to intersect the clip path with
579 Transforms and returns the bounding box of an appearance stream. @param appearanceStream The PDAppearanceStream to transform and get bounds from @return A Rectangle2D representing the transformed bounding box
580 Initializes graphics state with a page's clipping path for PDF rendering. @param page PDRectangle defining the initial clipping area.
581 Retrieves left coordinate value from the array at index 2. @return Left coordinate or -1 if not found in the array
582 Restores graphics state, handles text mode and pops color spaces. Throws exception if in text mode. Writes RESTORE operator.
583 Saves the current graphics state for later restoration. Throws an exception if called within text objects. @throws IOException if an I/O error occurs during operation
584 Positions text cursor at a specific offset for a new line in text mode, throws exception if not in text mode. @param tx horizontal offset; @param ty vertical offset; @throws IOException if I/O error occurs during write operations
585 Writes a new line in the text mode of content stream. Throws exception if not in text mode.
586 Sets text leading and writes to content stream. @param leading Text line spacing; @throws IOException
587 Ends text mode and writes END_TEXT operator to content stream. Throws exception if not in text mode.
588 Writes an AffineTransform object to the output stream as a series of float operands. @param transform AffineTransform object to be written @throws IOException if an I/O error occurs during writing
589 Retrieves the soft mask image object from the PDF stream. @return PDImageXObject representing soft mask or null if not found.
590 Retrieves mask image object from PDF document. Returns null if not found or color key mask is present. @return Mask image as PDImageXObject or null if not available
591 Creates a thumbnail image object from the given COS stream. @param cosStream the graphical data stream of the thumbnail @return a PDImageXObject representing the thumbnail image
592 Creates an output stream with optional filter for writing data to COSStream. @param filter The filter to apply; if null, no filters are applied. @return OutputStream for writing filtered data. @throws IOException If there's an error creating the output stream.
593 Determines if bounding box fitting is of type BOUNDED based on the name at index 1 in the array. @return true if the name at index 1 equals TYPE_BOUNDED, false otherwise
594 Fits bounding box based on type comparison. @return true if type is bounded, false otherwise
595 Checks if the page fits within its bounding box by comparing the type with "TYPE_BOUNDED". @return true if page fits, false otherwise
596 Retrieves and returns the top value from the encapsulated array. @return The integer value at index 3, or -1 if not found.
597 Retrieves the left coordinate from the destination array. @return left coordinate or -1 if not found
598 Retrieves and returns the top integer value from the internal array. @return Top integer value or -1 if not found
599 Retrieves the top coordinate of the rectangle. @return The top coordinate value, or -1 if not found
600 Retrieves the right coordinate of the rectangle. @return Right coordinate value or -1 if not found
601 Retrieves the bottom coordinate of the rectangle. @return bottom coordinate or -1 if not found
602 Retrieves the left coordinate of the PDF page rectangle. @return left coordinate value or -1 if not found
603 Creates an output stream for writing unfiltered data to the COSStream. @return OutputStream for writing unfiltered data. @throws IOException If there's an error checking if closed or creating output streams.
604 Prepares a string for SASL protocol with unassigned Unicode characters allowed. @param str input string to be processed @return normalized and validated string suitable for SASL use
605 Writes encrypted bytes from input stream to output stream using RC4 algorithm. @param data InputStream containing plaintext data @param output OutputStream for writing encrypted data @throws IOException if reading or writing streams fails
606 Encrypts data using the RC4 algorithm and writes it to an output stream.
607 Computes the revision number based on conditions of document version and permissions. @param version The PDF document version @return The computed revision number (REVISION_2, REVISION_3, REVISION_4, or REVISION_6)
608 Returns the current access permission for the document, initializing with owner permissions if not set. @return Current AccessPermission object; defaults to owner permissions if not previously set
609 Constructs a PDDocument with specified COSDoc and no source. @param doc The COSDocument to associate with this PDDocument
610 Searches and corrects the offset for a given XREF table/stream using brute force method. @param objectOffset target offset to search for @return corrected offset or 0 if not found, logs errors for invalid input or missing offset
611 Reads and parses a long number from the PDF source. @return Parsed long value or throws IOException if parsing fails. @throws IOException If reading or parsing the number encounters an error.
612 Reads and parses an integer from the PDF source, handling errors and rewinding on failure. @return parsed integer value or throws IOException if parsing fails @throws IOException if reading or parsing fails
613 Reads a string from the PDF source up to specified length or terminator chars. @param length maximum number of characters to read @return the parsed string @throws IOException if an I/O error occurs while reading from the source
614 Reads and verifies an expected string from the PDF source, with an option to skip spaces. @param expectedString the sequence of characters to match @param skipSpaces whether to ignore whitespace before and after the string @throws IOException if the expected string is not found or in case of I/O errors
615 Reads a string from PDF source, delimited by end-of-name characters. @return The read string or an empty string if no valid character is found. @throws IOException If an I/O error occurs during reading.
616 Prepares a stored string for SASL protocol. Disallows unassigned Unicode characters. @param str input string to be processed @return normalized and validated string suitable for SASL use
617 Constructs a transparency group with the given graphical data stream. @param stream The graphical data stream for this transparency group
618 Updates the need to be updated state of the COS object. @param flag boolean value indicating if update is necessary
619 Constructs PDColor with COSArray and color space. Handles optional components and required pattern name. @param array Input array containing color components and possible pattern name @param colorSpace The associated color space for the color representation
620 Parses a cross-reference table and sets the XRef entries for valid objects. @param startByteOffset starting byte offset of the xref table @return true if parsing was successful, false otherwise @throws IOException if an I/O error occurs during parsing
621 Parses cross-reference stream and updates XrefTrailerResolver with object references. @param resolver Object managing mapping of object keys to their corresponding values. @throws IOException if there's an issue reading from source or closing the parser.
622 Searches for object stream offsets in a PDF document and maps them to their COSObjectKeys. @return Map of offset positions to corresponding COSObjectKeys, or empty map if none found
623 Identifies and records offsets of COS objects in the PDF stream, facilitating accurate navigation and retrieval.
624 Retrieves or creates a unique object key for a given number and generation. Utilizes a cache to improve performance with large PDF documents. @param num The unique object number @param gen The object's generation value @return A COSObjectKey instance representing the object
625 Creates a PDMarkedContent object based on the tag type. @param tag COSName for content structure; returns PDArtifactMarkedContent if ARTIFACT @param properties Additional content properties as a COSDictionary @return PDMarkedContent or PDArtifactMarkedContent object based on the tag
626 Generates and writes a CID-to-Unicode mapping in PDF format to the provided output stream. @param out OutputStream where the mapping will be written @throws IOException if an I/O error occurs while writing to the output stream
627 Updates document state to accepted. Calls internal update method with true parameter.
628 Checks if dictionary contains a given string key by converting it to COSName internally. @param name the input string key to check for @return true if the dictionary contains the converted key, false otherwise
629 Retrieves an item from the dictionary using a given string key. @param key the input string for the item's unique identifier @return the item if it exists; otherwise, null
630 Initializes PDFTextStripper with operators for handling marked content sequences.
631 Initializes PDFMarkedContentExtractor with operators to handle marked content sequences and points. @param encoding character set for text extraction from the PDF document
632 Fetches and returns a specific filter by name. @param filterName The unique identifier of the filter as a string @return The requested Filter object or throws IOException if not found
633 Parses a COSName from the PDF source, handling special characters and hexadecimal escaping. @return COSName object representing the parsed name or null if an error occurs @throws IOException if there's an issue reading the source or decoding the buffer
634 Merges a diacritic into this text position based on its X-coordinate. @param diacritic The TextPosition object representing the diacritic to be merged.
635 Checks if this TextPosition overlaps significantly with another on the X and Y axes. @param tp2 The other TextPosition to compare with @return True if there's significant overlap, false otherwise
636 Manages paragraph separation by ending one and starting another. @throws IOException if an I/O error occurs during writing operations.
637 Checks if the current text position completely contains another. @param tp2 The second TextPosition to check against @return True if current text position fully encloses tp2, false otherwise
638 Writes a COS name to the output stream with space separation.
639 Writes a PDF structure name to output with space delimiter.
640 Writes a byte array as ASCII or hexadecimal to an OutputStream. @param bytes the data to be written @param forceHex forces writing in hexadecimal format if true, otherwise checks for non-ASCII characters @param output the destination stream for the data
641 Returns a data stream for signing PDF. Throws exception if not prepared for signing. @return InputStream containing data to be signed or throws IllegalStateException @throws IOException if an I/O error occurs during the operation
642 Transforms the content stream using a given matrix and writes it to the output. @param matrix Matrix object to be transformed @throws IOException if an I/O error occurs during writing
643 Sets the text matrix for rendering text, with error check for text mode and throws IOException if encountered. @param matrix Matrix object to be transformed and set @throws IllegalStateException if not in text mode before calling this method @throws IOException if an I/O error occurs during transformation or writing
644 Initializes an appearance content stream for a given PDF appearance and compression option. @param appearance the PDF appearance to customize @param compress true if output should be compressed, false otherwise
645 Constructs a new list box within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the list box field @param parent the parent PDNonTerminalField (if any)
646 Constructs an empty PDStandardAttributeObject with a new COSDictionaryWrapper.
647 Initializes an empty PDOutlineNode with a new COSDictionaryWrapper instance.
648 Constructs a new PDVariableText instance with a specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field
649 Initializes PDExportFormatAttributeObject with a COSDictionary. @param dictionary manages PDF metadata, crucial for attribute data representation.
650 Fetches the appearance stream for this entry. Throws exception if entry is not a stream. @return PDAppearanceStream object or throws IllegalStateException if entry is not a stream
651 Adds and processes a TrueType or OpenType font file. @param ttfFile the font file to be processed
652 Writes byte array data to the output stream of a given PDAppearanceStream. @param data byte array containing data to write @param appearanceStream target stream for writing data @throws IOException if there's an error creating or writing to the output stream
653 Constructs mesh-based Type 6 shading with given dictionary. Inherits from base class constructor to initialize properties. @param shadingDictionary COSDictionary containing shading properties
654 Constructs a new combo box field within the PDF form. @param acroForm Parent AcroForm structure. @param field COSDictionary representing the combo box field. @param parent The parent PDNonTerminalField (if any).
655 Initializes a COSParser object with PDF document and decryption settings. @param source InputStream for the PDF document @param password String for decryption, if needed @param keyStore InputStream for the keystore with decryption keys @param keyAlias Alias for the decryption key in the keystore
656 Creates an output stream for writing unfiltered data to the COSStream. @return OutputStream for writing unfiltered data. @throws IOException If there's an error checking if closed or creating output streams.
657 Constructs mesh-based Type 7 shading with given shading dictionary. Inherits from base class constructor to initialize properties. @param shadingDictionary COSDictionary containing shading properties.
658 Initializes an empty PDUserAttributeObject with the owner set to OWNER_USER_PROPERTIES.
659 Initializes an empty PDDefaultAttributeObject with a new COSDictionaryWrapper.
660 Encrypts data using the RC4 algorithm with a given key. @param finalKey encryption key as byte array @param input InputStream containing plaintext data @param output OutputStream for writing encrypted data @throws IOException if reading or writing streams fails
661 Reads and validates an object number from the PDF source. @return Parsed long value representing a valid object number. @throws IOException If reading, parsing, or validating the number encounters an error.
662 Reads and validates the PDF generation number. Throws exception if invalid. @return parsed and validated generation number @throws IOException if reading fails or number is invalid (negative/>5 digits)
663 Computes the encrypted key for PDF encryption based on revision. @param password encryption password @param o, u, oe, ue bytes of original and encrypted user/owner keys @param permissions access permissions @param id document identifier @param encRevision encryption revision (5 or 6 uses different logic) @param keyLengthInBytes desired key length @param encryptMetadata flag for metadata encryption @param isOwnerPassword flag indicating owner or user password usage @return byte array representing the computed encrypted key
664 Validates a user password based on encryption revision. @param password input password to validate @param user original hashed user key and salt @param owner owner password bytes @param encRevision encryption standard revision (2-6) @return true if the password is valid; false otherwise
665 Finds and returns a FontBoxFont based on format and PostScript name, applying various substitution strategies for fallback matching. @param format Font format (e.g., Type1, TrueType) @param postScriptName Unique font identifier @return Matching FontBoxFont or null if not found
666 Converts a COSString to a Calendar object by parsing the string representation. @param text COSString containing date information @return Calendar instance if parsing succeeds, or null otherwise
667 Sets the origin document state and updates related COSUpdateInfo objects. @param originDocumentState the new document state to set; null is not allowed @param dereferencing indicates if dereferencing is in progress; affects update behavior
668 Sets the object to a NULL state and updates its status accordingly.
669 Updates document state if origin differs from the current state, ensuring consistency. @param updateState Represents new state of the document for comparison and potential update.
670 Removes an item and updates document state. @param key Unique identifier of the item to be removed
671 Clears all data and updates document state to accepted. @throws UnsupportedOperationException if clearing is not supported by the underlying implementation
672 Removes an element and updates state if successful. @param o element to be removed. @return true if removal was successful, else false.
673 Removes an element at a given index and updates the array's state. @param i Index of the object to be removed @return The removed COSBase object or null if not found
674 Clears all elements and updates document state.
675 Fetches and returns offsets of COS objects in the PDF stream. Triggers search if not already done. @return Map of COS object keys to their corresponding offsets @throws IOException if an I/O error occurs during search operation
676 Processes a text position, handles duplicate and overlapping texts, and merges diacritics with their characters. @param text TextPosition object to be processed
677 Overrides to process and customize a TextPosition object, handling duplicate overlapping text, articles, and diacritics. @param text The TextPosition object to be processed
678 Creates a COSStream object from input data and adds it to the PDF document. @param document the target PDDocument object @param rawInput InputStream containing the raw image data @return COSStream object added to the document @throws IOException if input/output operations fail
679 Initializes PDStream with given document, input stream, and filters. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filters any filtering options applied during output stream creation
680 Initializes a new instance of PDStream with a COSDocument. Creates and assigns a new COSStream object to the 'stream' field. @param document the parent COSDocument for the new COSStream
681 Initializes a new instance of PDStream with a COSStream from the provided PDDocument. @param document The parent PDF document containing the stream to be managed.
682 Creates a new PDObjectStream with a specified document. @param document the PDF document to associate with the stream @return a newly created and initialized PDObjectStream object
683 Initializes cross-reference stream with new COSStream object from document. @param cosDocument the document to create COSStream in
684 Adjusts the boundaries of a rectangle to apply padding. @param box The original PDRectangle object. @param padding The distance to be added or subtracted from the box's edges. @return A new PDRectangle with adjusted dimensions.
685 Adjusts a rectangle by applying given differences to its dimensions and position. @param rectangle The initial rectangle @param differences Array containing adjustment values (dx, dy, dw, dh) @return Modified rectangle or the original if differences are invalid
686 Adjusts a rectangle based on given differences array and returns the new rectangle. @param rectangle The original rectangle to be adjusted. @param differences An array containing differences for left, bottom, right, and top adjustments. @return A new PDRectangle with modified dimensions or the original if differences are invalid.
687 Returns a new rectangle with applied padding to the original one. @param rectangle Original rectangle @param padding Distance to be removed from all sides of the rectangle @return New PDRectangle object with applied padding
688 Computes and returns a difference rectangle based on annotation and bounding box coordinates. @return A PDRectangle representing the difference between annotRect/rectWithDiff and bounding box.
689 Creates and returns a PDRectangle based on the current bounding box dimensions.
690 Encodes input data stream using provided parameters. @param input source of data to be encoded @param encoded output stream for the encoded data @param parameters COSDictionary containing encoding settings @throws IOException if IO operation fails
691 Constructs a PDRectangle with specified width and height at the origin (0, 0). @param width Width of the rectangle @param height Height of the rectangle
692 Parses a hexadecimal string from the source to a COSString object, handling whitespace and invalid characters.
693 Sets an integer value at a specific index and updates the array state
694 Initializes PDFTextStripperByArea without separating text by beads.
695 Default constructor initializing marked content extractor with default operators.
696 Initializes PDFGraphicsStreamEngine with a specific page and sets up graphics operators. @param page the PDF document page to be processed
697 Writes byte array to an OutputStream as ASCII or hexadecimal. @param bytes the data to be written @param output the destination stream for the data
698 Writes a COSString to an OutputStream in ASCII or hex format. @param string the COSString object containing data to be written @param output the destination stream for the data
699 Sets a marked content point with the given tag, writing it to output stream. @param tag COSName for the marked content point. @throws IOException if an I/O error occurs during write operations.
700 Begins a marked content sequence with given tag and MCID, writing to the PDF stream. @param tag Name of the marking context; must not be null @param mcid Marked content identifier; should be non-negative
701 Begins a marked content sequence for a given PDF tag, setting up the PDF structure. @param tag COSName representing the PDF structure element to begin. @throws IOException if there's an issue writing to the output stream.
702 Default constructor initializing a rectangle at (0,0) with dimensions (0,0).
703 Parses a value from a COS dictionary and resolves references if necessary. @return COSBase object or null; may be dictionary, string, array, name, boolean, or null object @throws IOException if an I/O error occurs during parsing
704 Saves FDFDocument to a file using the provided filename. @param fileName The name of the file where the document will be saved @throws IOException If there is an error during writing operation
705 Constructs an appearance content stream with a given PDF appearance. @param appearance the PDF appearance to customize @throws IOException if there's an error creating output streams
706 Removes an element at the specified index, throwing exception if list is filtered. @param index The position of the object to be removed @return The removed object or null if not found
707 Clears all data in both general and PDF-specific collections.
708 Removes a key-value pair from the map and updates document state. @param key Unique identifier of the item to be removed @return The value associated with the removed key, or null if not found
709 Initializes a COSParser object with an input PDF document. No decryption is applied. @param source InputStream for the PDF document
710 Constructs a PDPageContentStream for PDF appearance stream with specified resources. @param doc the PDF document @param appearance the PDF appearance stream @throws IOException if there's an error creating output streams
711 Removes object from list and associated COSArray, if found. Throws exception in filtered mode. @param o Object to remove @return True if object was removed, otherwise False
712 Initializes PDFParser with source and encryption parameters. @param source input PDF document @param decryptionPassword password for encrypted documents (optional) @param keyStore keystore for additional encryption methods @param alias alias within the keystore
713 Initializes a PDFormContentStream for a given PDFormXObject. @param form the PDF form object to create stream for @throws IOException if there's an error creating output streams or checking if closed
714 Sets line width for drawing operations, handling default value of 1. @param lineWidth Desired width; if 1, no change is made to avoid redundancy
715 Draws a paperclip shape on the PDF appearance content stream. @param contentStream manages graphical elements in the PDF appearance object's content stream.
716 Draws a circle in the PDF content stream with given center and radius. @param cs PDF appearance content stream @param x,y coordinates of the center of the circle @param r radius of the circle
717 Draws a circle on the PDF appearance content stream using Bezier curves. @param cs PDFAppearanceContentStream to draw on @param x, y center coordinates of the circle @param r radius of the circle
718 Draws a diamond shape in the PDF appearance content stream. @param cs content stream to draw on @param x center point's X coordinate @param y center point's Y coordinate @param r radius of the diamond
719 Manages drawing of shapes in PDF appearance content streams, with options for stroke and fill. @param lineWidth width of the shape's outline; no stroking for very small lines @param hasStroke determines if the shape should have a stroke @param hasFill determines if the shape should be filled
720 Draws an arrow on PDF content stream at given point with specified length. @param cs PDF appearance content stream @param x, y coordinates of the arrow tip @param len length of the arrow arms
721 Validates and corrects object offsets in the cross-reference table if necessary. Uses brute force search for correction if validation fails. @throws IOException if an I/O error occurs during search operation
722 Constructs an empty print field attribute object and sets its owner to PRINT_FIELD.
723 Writes a COSString to an OutputStream with space delimiter. @param output the destination stream for the data @param cosString the COSString object containing data to be written
724 Encrypts or decrypts input data using different algorithms based on key length and type. @param objectNumber unique object identifier @param genNumber generation number of the object @param data InputStream containing the data to be encrypted/decrypted @param output OutputStream for writing the result @param decrypt True for decryption, false for encryption @throws IOException if an error occurs during encryption/decryption or I/O operations
725 Collects and processes COSArray objects, managing updates and relationships. @param array the COSArray object to be processed @return true if any descendant demands a parent update; false otherwise
726 Sets the origin document state. Calls the more detailed version of the method with dereferencing flag set to false. @param originDocumentState the new document state to set; null is not allowed
727 Displays text on the content stream with complex layout and subsetting if needed. @param text The input text to be displayed @throws IOException If an I/O error occurs during the process
728 Initializes the PageDrawer with specified page and rendering parameters. @param parameters Object containing render settings, page, and other info.
729 Sets the high value in the color table at index 2
730 Constructs an empty PDListAttributeObject and sets its owner to OWNER_LIST.
731 Initializes an empty PDLayoutAttributeObject and sets its owner to OWNER_LAYOUT.
732 Constructs a PDImageXObject with specified parameters and adds it to the given document. @param encodedStream InputStream containing the image data @param initColorSpace Initial color space for the image object @throws IOException if input/output operations fail
733 Initializes PDStream with given document, input stream, and filters. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filters any filtering options applied during output stream creation
734 Initializes PDStream with given document, input stream, and filter. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filter any filtering options applied during output stream creation
735 Initializes PDStream with given document and input stream. No filters are applied. @param doc the PDF document to associate the stream with @param input the source of data for the stream @throws IOException if an error occurs during initialization
736 Initializes a new PDXObject with a specified document and subtype. @param document The parent PDF document containing the stream to be managed. @param subtype The specific type of XObject being created.
737 Initializes a new instance of PDEmbeddedFile with a PDDocument and sets its type to EMBEDDED_FILE. @param document The parent PDF document containing the embedded file.
738 Initializes PDMetadata with a PDF document and sets necessary metadata properties. @param document The parent PDF document to manage metadata for.
739 Returns the bounding box of the object as a PDRectangle. @return PDRectangle representing the object's dimensions
740 Constructs an immutable rectangle with specified dimensions. @param width Width of the rectangle @param height Height of the rectangle
741 Parses a COS string from the source, handling hexadecimal and literal strings. @return COSString object created from parsing @throws IOException if there's an issue with reading or writing data
742 Sets the destination page number in the PDF document. @param pageNumber The target page number for navigation.
743 Constructs an empty PDTableAttributeObject and sets its owner to OWNER_TABLE.
744 Constructs a PDImageXObject with an empty stream and no resources. @param document the parent PDF document
745 Validates user password based on encryption revision and charset. @param password input password to validate @param encRevision encryption standard revision (5-6) @return true if the password is valid; false otherwise
746 Saves FDFDocument to a file using the provided filename. @param fileName The name of the file where the document will be saved @throws IOException If there is an error during writing operation
747 This method is responsible for processing and writing text content from a list of PositionWrapper objects. It handles sorting, spacing, line breaks, and paragraph formatting based on the provided conditions. The main functionality includes: - Iterating through each PositionWrapper object in the input data. - Determining the position and dimensions of the current character value. - Calculating expected start positions for the next word based on various spacing methods (wordSpacing and averageCharWidth). - Checking if the current text object is on the same line as the previous one, and handling line breaks accordingly. - Adding a word separator between words when necessary. - Writing paragraph starts and ends based on certain conditions. - Updating maximum and minimum values for line height and position tracking. - Handling various formatting and spacing adjustments based on the text direction and font properties.
748 Parses a CharSequence into an InstructionSequence using the provided syntax rules. @param text input to be processed @return the main instruction sequence derived from the input text
749 Validates the owner password for PDF documents based on encryption revision. @param ownerPassword byte array of the provided owner password @param user original user key bytes @param owner encrypted owner data @param permissions access permissions to validate @param encRevision document's encryption revision number @return true if owner password is valid, false otherwise @throws IOException for unknown encryption revisions
750 Locates and returns a FontBoxFont based on PostScript name, checking Type1, TrueType, and OpenType formats. @param postScriptName Unique font identifier @return Matching FontBoxFont or null if not found
751 Initializes PDEmbeddedFile with document, input stream, and filter. Sets the type to EMBEDDED_FILE. @param doc the PDF document @param input data source for the stream @param filter options applied during output stream creation
752 Initializes PDEmbeddedFile with given document and input stream. Sets the type to EMBEDDED_FILE. @param doc the PDF document to associate the embedded file with @param str the source of data for the embedded file @throws IOException if an error occurs during initialization
753 Displays text on content stream, then writes an operator for showing text in PDF. @param text The input text to be displayed and shown in PDF @throws IOException If an I/O error occurs during the process
754 Constructs a new form XObject with the given parent PDF document. @param document The parent PDF document containing this form XObject.
755 Creates a PageDrawer with specified settings and annotation filter. @param parameters Object containing render settings for the PageDrawer. @return Initialized PageDrawer object.
756 Displays text with custom positioning on the content stream. @param textWithPositioningArray array of strings and floats for text and positions @throws IOException if an I/O error occurs during the process
757 Writes a token (COSBase object) to the PDF output stream. @param base The COSBase object to be written as a token @throws IOException if writing to the output stream fails
758 Initializes PDMetadata with a PDF document and input stream, sets metadata type and subtype. @param doc the PDF document to associate with metadata @param str the source of data for the metadata @throws IOException if an error occurs during initialization
759 Prepares an image object for embedding in a PDF document by compressing the input data and creating a PDImageXObject. @param byteArray raw image data to be compressed @param width pixel width of the image @param height pixel height of the image @param initColorSpace initial color space for the image object @return PDImageXObject ready for inclusion in a PDF document @throws IOException if input/output operations fail during compression or object creation
760 Initializes an FDFParser object with input data. Calls COSParser constructor. @param source InputStream for the FDF document; no decryption is applied @throws IOException if there's a problem reading from the source
761 Initializes PDFParser with source and optional password. @param source input PDF document @param decryptionPassword password for encrypted documents (optional)
762 Draws and customizes line endings for PDAnnotationLine objects in a PDF content stream. @param style Type of line ending to draw (e.g., arrow, diamond, circle) @param cs Content stream to draw on @param x, y Coordinates of the line ending's position @param width Width of the line ending shape @param hasStroke Whether to apply stroke to the shape @param hasBackground Whether to fill the shape with background color @throws IOException If an I/O error occurs while drawing
763 Extracts text from specific PDF regions and writes them to their respective outputs.
764 Validates the owner password using ISO-8859-1 charset encoding. @param password owner password as a string @return true if owner password is valid, false otherwise @throws IOException for encryption errors or unknown revisions
765 Initializes an empty PDExportFormatAttributeObject with the specified owner. @param owner The entity responsible for this attribute object
766 Initializes FileSystemFontProvider and loads font files from the local system into cache. @param cache FontCache instance to store loaded font information.
767 Decrypts a COSString and returns the decrypted or original value based on encryption filter. @param string encrypted COSString object @param objNum unique object identifier @param genNum generation number of the object @return decrypted COSString or original if using identity filter
768 Encrypts a given string and returns it as a COSBase object. @param string the input COSString to be encrypted @param objNum unique object identifier for encryption @param genNum generation number of the object for encryption @return encrypted COSString as a COSBase object @throws IOException if an error occurs during encryption or I/O operations
769 Updates the document and sets origin state for COSUpdateInfo children. @param child a COSBase object to update; if it's a COSUpdateInfo, its origin doc state is set.
770 Collects PDF document object if not already in collection; manages COSDictionary, COSObject, and COSArray types. @param base the COSBase object to be collected @return true if successfully added to collection, false otherwise
771 Retrieves the underlying COSBase object, handling dereferencing if needed. @return The COSBase object after potential dereferencing and updates
772 Sets a new trailer dictionary and updates its origin document state. @param newTrailer the new COSDictionary object to set as the trailer
773 Encrypts data in a COSStream and writes it to the raw output stream. @param stream COSStream containing data to be encrypted @param objNum unique object identifier for encryption @param genNum generation number of the object for encryption @throws IOException if an error occurs during input/output or encryption process
774 Decrypts the given COSStream if necessary and handles metadata encryption. @param stream the stream to decrypt @param objNum the object number for decryption @param genNum the generation number for decryption @throws IOException if an error occurs during decryption or I/O operations
775 Initializes a new transparency group with the given PDF document. @param document The parent PDF document containing this transparency group
776 Locates and returns the key for a given value in the COSDictionary. @param value The object to search for in the dictionary's values. @return The corresponding key or null if not found.
777 Adds a COSBase object to the collection at specified index. Updates state if needed. @param i position in the array for new object @param object the COSBase object to be added, can be COSDictionary or COSArray
778 Checks if a specified value is present in the dictionary, handling dereferencing for COSObjects. @param value The value to search for in the dictionary @return true if value is found, otherwise false
779 Constructs a new appearance stream for interactive annotations in the given PDF document. @param document The parent PDF document containing this appearance stream
780 Updates document state using an array of child objects.
781 Sets or removes an item in the dictionary based on the input value. @param key COSName identifier for the item @param value COSBase object to be set; if null, item is removed
782 Sets a COSBase object at a specific index in the array. Handles indirectly referenced dictionaries and arrays differently. @param index position to set the object @param object the COSBase object to be added or updated
783 Adds object to the COSArray, managing direct and indirect references. @param object COSBase object to be added; may be a dictionary or array with a key
784 Creates a PDImageXObject from a BufferedImage with JPEG encoding. @param document PDF document to add the image to @param image Input BufferedImage object @param quality Compression quality (0-1) for JPEG encoding @param dpi Desired DPI for the output JPEG @return PDImageXObject with encoded image @throws IOException if input/output operations fail
785 Initializes PDFParser with input document and no decryption password. @param source input PDF document
786 Collects COSObjects for update, managing states and relationships. @param object The input COSObject to be added or excluded from collection. @return false if the object is skipped in the collection process.
787 Collects and returns all COSBase objects in the collection, initializing if needed. @return Set of COSBase objects in this collection
788 Prepares stream objects for writing to output, adding keys and their associated values. @param key unique identifier for the object @param object the COSBase object or its subclass instance to be prepared for writing
789 Checks if the pool contains a specific COSBase object or its key. @param object The COSBase object to be checked @return true if the pool contains either the object or its key, false otherwise
790 Retrieves the unique key for a given COSBase object. @param object The input COSBase object @return The corresponding COSObjectKey or null if not found
791 Initializes a NormalXReference with offset, key, and object details. Identifies if the referenced object is a stream for further handling. @param byteOffset The byte offset of the reference @param key The unique key of the reference @param object The COSBase object being referenced
792 Checks for self-referencing in COSBase objects, logs a warning if found. @param parent The COSBase object to check against @param value The potential referencing COSBase object @return True if self-reference is present, false otherwise
793 Accepts a visitor and processes the underlying PDF object. @param visitor The ICOSVisitor to be accepted @throws IOException If there is an error during processing
794 Safely closes the COSDocument and associated resources, handling exceptions. @throws IOException if an I/O error occurs while closing resources
795 Retrieves the linearized dictionary from the PDF document. @return Linearized dictionary if found; otherwise, null
796 Retrieves a dictionary object using a given key, handling COSObject and COSNull. @param key the unique identifier for the dictionary object @return the dictionary object if it exists; otherwise, null
797 Retrieves and handles object at given index, dereferencing if needed. @param index position of the object in the array @return COSBase object or null after potential dereferencing
798 Retrieves the length from a COSBase object, handling various types and potential errors. @param lengthBaseObj The base object containing the length information @return A COSNumber representing the length or null if not found or invalid type
799 Finds the index of a given object in the collection. @param object The COSBase object to locate @return Index of the object or -1 if not found
800 Recursively collects and updates COSDictionary objects based on their states. @param dictionary the object to be processed @return true if child demands parent update, otherwise false
801 Removes a COSBase object from the collection, handling dereferencing if needed. @param o object to be removed @return true if removal was successful, else false
802 Retrieves and manages unique keys for COSBase objects in PDF documents. @param obj the input COSBase object @return a corresponding or newly created COSObjectKey
803 Retrieves a string from the dictionary using a given key. @param key unique identifier for the string object @return the string if it exists; otherwise, null
804 Initializes a new PDChoice instance and sets its field type to "CH". @param acroForm the parent AcroForm structure for this choice field
805 Sets the transformation matrix for the form XObject using a given AffineTransform. @param transform The AffineTransform object containing the transformation data to be applied
806 Sets or removes the default style string in PDF document. @param defaultStyleString new style string; if null, existing one is removed
807 Creates a PDImageXObject from a byte array and specifies its color space based on the image components. @param document PDF document to which the image belongs @param byteArray input data for the image @return PDImageXObject with specified dimensions, color space, and compression type @throws IOException if there's an error reading or handling the input stream
808 Transforms single values into a COSArray object for PDF manipulation. @return COSArray containing transformed floating-point numbers from the 'single' array.
809 Sets a COSBase object at a specific index in the array. Critical for managing COSObjectable elements in the collection. @param index position to set the object @param object the COSObjectable to be added or updated; null allowed
810 Sets or removes rich text value for the PDF text field. @param richTextValue String to be set; if null, value is removed
811 Sets the coordinate system origin with floating-point values. @param coordSystemOrigin array of float values representing the new origin
812 Initializes a new instance of PDThread and sets its type to THREAD.
813 Initializes a PDButton instance and sets its field type to BTN in the AcroForm structure. @param acroForm parent AcroForm structure for this button
814 Sets the value for this non-terminal field and updates its COS object. @param object New COSBase value to be set for the field
815 Sets or removes the default value in the PDF document field's dictionary. @param value COSBase object to be set as default; if null, default is removed
816 Initializes a PDTristimulus object with up to 3 tristimulus values from an array. @param array float[] containing X, Y, Z color values (maximum of 3)
817 Creates a PDDestination object from a COSBase representation. @param base the COSBase object containing destination data @return a PDDestination object or null if input is invalid @throws IOException for unknown destination types or errors in conversion
818 Converts specific COS types in a dictionary to standard Java objects and returns as a COSDictionaryMap. @param map the input COSDictionary object containing key-value pairs @return COSDictionaryMap with keys as strings and values as corresponding Java objects; null if input is null @throws IOException if an unsupported COS type is encountered during conversion
819 Adds or updates an entry in the pool with a unique key and COSBase object. @param key The unique identifier for the object @param object The PDF document object to be managed @return Null if object is null or already exists with the same key, else the actual key used
820 Initializes a new PDSignatureField with FT and sets partial name, locks and prints the first widget. @param acroForm parent AcroForm structure to associate with this field
821 Retrieves and decodes the string representation of the FDF option at index 0. @return Decoded string value of the FDF option or null if not a COSString object
822 Converts color components to a COSArray for PDF handling, adds pattern name if present. @return COSArray representation of the color components and pattern name.
823 Initializes a PDDeviceN object with default values for color space definition.
824 Initializes PDGamma with zero RGB color components, setting up a COSArray for color data storage.
825 Initializes a text field within the PDF form and sets its type to TX. @param acroForm parent AcroForm structure for this field
826 Returns the alternate color space for this PDF stream. @return a PDColorSpace object representing the alternate color space @throws IOException if an error occurs during creation of the color space
827 Initializes PDIndexed object with default values for an indexed color space in PDF.
828 Creates a default range array for LAB color space. @return COSArray with preset values (-100 to 100) for L and A components.
829 Initializes a color pattern for PDF document with given resources. @param resources the resources associated with the document
830 Initializes a PDSeparation object with default values for color separation in PDF documents.
831 Sets an integer value at a specific index in the array.
832 Retrieves and converts a named object to string. Supports COSName and COSString types. @param key unique identifier for the dictionary object @return String representation of the named object or null if not found/supported type
833 Initializes PDTristimulus with default X, Y, Z tristimulus values of 0.0.
834 Retrieves and decodes default appearance string from FDF option. @return Decoded default appearance string or null if not found or invalid type
835 Retrieves and converts the value for a given key into a list of strings. @param name unique identifier for the dictionary object @return list of string values associated with the key, or an empty list if not found/applicable
836 Decrypts each object in a COSArray and sets it back to the array. @param array the input COSArray @param objNum object number for decryption @param genNum generation number for decryption
837 Sets widget field flags using a given integer value. Null input removes the flag. @param f Integer value for field flags; null to remove
838 Creates a PDImageXObject from a BufferedImage with JPEG encoding. Defaults to 72 DPI. @param document PDF document to add the image to @param image Input BufferedImage object @param quality Compression quality (0-1) for JPEG encoding @return PDImageXObject with encoded image @throws IOException if input/output operations fail
839 Adds the first intermediate curl to the cloudy border. @param angleCur current angle, r radius, alpha angle offset, cx center x, cy center y Calls getArcSegment() to generate curved arc segments for the curl shape.
840 Generates a curvilinear template for cloudy border rendering. @param angleCur Current angle in radians @param r Radius of the arc segments @return Array of Point2D.Double representing the curve
841 Sets and encodes the given string as the first element of the FDF option. @param opt the input string to be encoded and set as an FDF option
842 Sets a color at a specific index in the PDF document's color array. @param index position to set the color @param colour PDGamma object representing the color or null for none
843 Sets the font size in the PDF document settings. @param size new font size to be applied
844 Sets the DeviceN color space attributes and updates the internal COSArray. @param attributes The PDDeviceNAttributes object to be set; null removes existing attributes
845 Sets the alternate color space for this device and updates the COS object representation. @param cs the new PDColorSpace to be set as alternate; nullable
846 Sets the red component of the RGB color value. @param r The floating-point number representing the red component (0.0 - 1.0)
847 Sets the green color component with gamma correction in the RGB array.
848 Sets blue color component with gamma correction. @param b blue color value
849 Sets the default appearance string of the FDF option. @param da the new default appearance string for this option
850 Sets the upper right y-coordinate of the rectangle in PDF document
851 Sets the x-coordinate of the upper right corner of the rectangle. @param value The new x-coordinate value for the upper right corner.
852 Sets the lower left y-coordinate of the rectangle. @param value The new y-coordinate value to set for the lower left corner
853 Sets the transition direction between pages in a PDF document. @param direction PDTransitionDirection object representing the desired transition angle
854 Sets the transition duration in seconds. @param duration The time taken for the transition to complete (in seconds)
855 Retrieves a dictionary object using a given string key, handling caching and thread-safety for efficient access. @param key the input string for the dictionary object @return the dictionary object if it exists; otherwise, null
856 Sets fly scale property in PDF page transition dictionary.
857 Sets fly area opacity for visual transitions in PDF document. @param opaque Boolean value to set fly area opacity (true = opaque)
858 Sets a named COSBase object at a specific index in the array using a given string. @param index position to insert the object @param name the input string for the COSName
859 Adds all elements from the given COSArray to this object list and updates document state. @param objectList a collection of COSBase objects to be added
860 Sets a String value at a specific index in the array. Creates a new COSString object if input is not null. @param index position to set the string @param string the input string or null
861 Sets the minimum value of the numerical range in the PDF structure. @param min The new minimum value for the range
862 Sets the maximum value of the numerical range and updates the corresponding COSArray. @param max The new maximum value for the range
863 Sets the x-coordinate of the lower left corner of the rectangle. @param value new x-coordinate value
864 Converts COSDictionary object to string representation, handling exceptions. @return String containing dictionary content or error message if exception occurs
865 Retrieves a dictionary object using two keys, with priority to the first key. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return dictionary object or null if both keys fail
866 Initializes a Matrix object from a COSArray of transformation values. @param array contains six float numbers representing scaling and translation parameters
867 Checks if the pool contains a specific COSBase object or its key. @param object The COSBase object to be checked @return true if the object is in the pool, false otherwise
868 Retrieves and returns the permission bytes from the PDF dictionary. @return byte array containing permissions; null if not found @throws IOException if an I/O error occurs during retrieval
869 Retrieves the page number of the annotation from a PDF document. @return Page number as Integer; null if not found or not applicable.
870 Retrieves and validates the COSValue of the form field. @return COSBase object if it's a valid type; otherwise, throws an exception or returns null @throws IOException if the value type is unknown
871 Retrieves the field flags for this form field, if present. @return Integer representing field flags or null if not found
872 Retrieves and returns the SET_FF flag for a form field, if it exists. @return Integer value of SET_FF flag or null if not set
873 Retrieves clear field flags from the FDF field dictionary. @return Integer value of the clear field flags, or null if not found.
874 Retrieves and returns the widget field flags as an Integer value. @return widget field flags or null if not found in the dictionary object
875 Retrieves and copies the user encryption key from the PDF document dictionary. @return A 32-byte array representing the user encryption key, or null if not found
876 Retrieves and returns the SET_F field flag value from the form field dictionary, or null if not found.
877 Retrieves or sets the default width of a CID font. @return the default width value as a float
878 Retrieves and creates the color space from dictionary object. @return PDColorSpace object or null if not found in dictionary. @throws IOException if error occurs during creation of color space.
879 Retrieves the color space for transparency group attributes or creates it if null. @param resources PDF resources for managing the color space @return PDColorSpace object representing the color space
880 Initializes an instance of PDOptionalContentGroup from a given COSDictionary, ensuring it's of the correct type. @param dict the dictionary to initialize the group from; must be of type 'OCG'
881 Constructs PDOptionalContentMembershipDictionary from a given COSDictionary, ensuring it's of type 'OCMD'. @param dict the input dictionary to initialize the object @throws IllegalArgumentException if the dictionary is not of type 'OCMD'
882 Retrieves the overprint mode from a PDF dictionary object. @return Integer representing the overprint mode, or null if not found
883 Retrieves and creates a soft mask from the dictionary object. @return PDSoftMask object or null if not found or invalid input.
884 Retrieves clear widget field flags from the FDF field dictionary. @return Integer value of CLR_F flag, or null if not found
885 Updates the highest object number in document with that from an imported page. @param importedPage Page to import and extract object numbers from
886 Retrieves and returns the owner's encryption key from a PDF document dictionary. @return A byte array containing the owner's encryption key or null if not found. @throws IOException If an I/O error occurs while retrieving the key.
887 Checks if metadata encryption is enabled in the crypt filter dictionary. @return True if metadata is encrypted, false otherwise; defaults to true as per PDF specification.
888 Retrieves the zoom level for this PDF destination. @return The zoom level as a float, or -1 if not defined.
889 Retrieves the target page number from the destination array. @return Page number if found, otherwise -1
890 Fetches the first PDF page from an array. If available, returns a PDPage object; otherwise, returns null.
891 Retrieves and returns the colorant's name from the array. @return The string representation of the colorant's name
892 Retrieves a COSName object from the dictionary using a given key. @param key unique identifier for the COSName object @return the COSName object if it exists; otherwise, null
893 Retrieves a COSDictionary object using a given key. @param key the unique identifier for the dictionary object @return the COSDictionary if it exists; otherwise, null
894 Retrieves a COSStream object using the provided key. @param key unique identifier for the stream object @return COSStream if found; otherwise, null
895 Retrieves a COSArray object using the given key. @param key unique identifier for the dictionary object @return COSArray if found; otherwise, returns null
896 Retrieves a COSName object for the given key or returns a default value. @param key unique identifier for the dictionary object @param defaultValue fallback value if key is not found or not a COSName @return COSName object or defaultValue if key is invalid or not present
897 Retrieves a long value from the dictionary using the given key. @param key unique identifier for the value @param defaultValue fallback value if key is not found or not a COSNumber @return the long value or defaultValue if the key is not a COSNumber
898 Retrieves a float value from the dictionary using a key. Uses defaultValue if key is not found or value is not a COSNumber. @param key unique identifier for the float value @param defaultValue fallback value if key is invalid or non-numeric @return float value associated with key, or defaultValue if not found/invalid
899 Retrieves content streams from the page's dictionary or array. @return Iterator over all content streams in the page
900 Checks for the presence of page content. @return True if page contains content, otherwise false
901 Retrieves and manages class names with their revision numbers from the PDF structure element. @return Revisions object containing class names and their corresponding revision numbers
902 Retrieves the dictionary object associated with 'K' from the COS object. @return the dictionary object associated with 'K'; otherwise, null
903 Retrieves the value of user property from a PDF document's dictionary object. @return the COSBase object containing the property value, or null if not found
904 Retrieves a float value from the dictionary using a given key, if it exists. @param key unique identifier for the float object in the dictionary @return float value or null if not found or not a COSNumber instance
905 Retrieves a date from the dictionary using a given key, converting it to Calendar if possible. @param key unique identifier for the date object @return Calendar instance if conversion succeeds; otherwise, null
906 Provides an Iterator over all COSBase objects in this collection. @return An Iterator over elements of type COSBase
907 Expands collection to hold specified number of elements, adding a given object. @param size desired minimum capacity @param object COSBase object to be added repeatedly until capacity is reached
908 Retrieves a named destination from the dictionary using key 'P'. @return PDNamedDestination if found; otherwise, returns null.
909 Retrieves and returns the contents of the signature. @return The bytes representing the content; empty if not found or invalid type.
910 Retrieves the XML Forms Architecture (XFA) resource from the form's dictionary. @return PDXFAResource object if available; otherwise, null
911 Retrieves an inheritable attribute by key, checking parent and form if not found in field dictionary. @param key the name of the attribute to retrieve @return COSBase object or null if not found in hierarchy
912 Initializes an empty FDFOptionElement with two blank strings in its COSArray representation.
913 Retrieves the value of this non-terminal field from its dictionary object. @return the COSBase object representing the field's value, or null if not found
914 Retrieves the default value of this non-terminal field from its dictionary object. @return the default COSBase value or null if not found
915 Initializes font settings array with default values: null and size 1.0.
916 Safely closes visual signature and PDF source resources, handling exceptions. @throws IOException if an I/O error occurs while closing resources
917 Writes a COSObject to the PDF document and adds an XRef entry. @param key unique object identifier @param obj the COSBase object to be written @throws IOException if I/O errors occur during writing
918 Retrieves the unique key for a given COSBase object from its pool. @param object The input COSBase object @return Corresponding COSObjectKey or null if not found
919 Retrieves the value of this non-terminal field as a string. @return the field's value if it exists; otherwise, an empty string
920 Initializes a PDRange object with default values [0,1]. Uses COSArray to store these values efficiently for PDF processing.
921 Clears array and populates with new float values. @param value Array of floating-point numbers to be added to the COSArray
922 Constructs a cross-reference stream, sets its properties, and returns it. @return COSStream object representing the constructed cross-reference stream @throws IOException if there's an error creating or writing to the output stream
923 Retrieves the transfer property from the dictionary. Validates its format and size. @return Transfer property if it's a valid COSArray of size 4; otherwise, null
924 Retrieves the transfer function type 2 from the dictionary. Validates its structure. @return COSBase object if valid; otherwise, null
925 Retrieves the backdrop color from the soft mask's COSDictionary object. @return The backdrop color as a COSArray or null if not found.
926 Determines the window behavior for opening content. @return OpenMode indicating new or same window, defaults to user preference if not specified.
927 Retrieves and returns the 'T' item from the action dictionary. @return COSBase object (Dictionary, String, or Array) representing 'T'; null if not found
928 Determines the open mode for a new window from the PDF action's dictionary object. @return The open mode: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE
929 Determines the open mode for a new window in PDF document navigation. @return OpenMode enum indicating how to open the content (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
930 Adds a COSObjectable to the array as its corresponding COSBase object. @param object the COSObjectable to be added; can be null, in which case it's ignored
931 Creates and prepares a list of COSWriterObjectStream instances for efficient PDF content management.
932 Sets the widget field flags for this FDFField instance. @param ff Integer representing the field flags; if null, removes existing flags
933 Sets or removes the transformation matrix in the color dictionary. @param matrix 3x3 Matrix object; if null, item is removed from dictionary
934 Sets or removes the gamma correction values from this color space's dictionary. @param gamma PDGamma object containing gamma values; if null, removes gamma values
935 Retrieves a blend mode instance from a COSBase object. @param cosBlendMode the base object containing blend mode info @return corresponding BlendMode or NORMAL if not found
936 Sets gamma correction value in the color space dictionary.
937 Converts page labels to a COSDictionary object for PDF representation. @return COSDictionary containing the page labels and their corresponding indices
938 Initializes a complex file specification object for PDF context. Sets the type of the file specification to FILESPEC in its dictionary.
939 Initializes a complex file specification with an optional dictionary. @param dict existing COSDictionary; if null, creates a new one and sets its type to FILESPEC
940 Sets and updates the range values in this PDFunction object. @param rangeValues COSArray of range values to be set
941 Sets and updates the domain values for this PDFunction object in both local and COSDictionary. @param domainValues array of domain values to be set
942 Sets and updates the encoding values for this Type 0 PDF function. @param encodeValues COSArray of encoding data; critical for value transformation
943 Sets and updates the decode values in the PDF function dictionary. @param decodeValues COSArray of decoded values to be set
944 Removes a specific attribute from the structure element's COSObject. @param attributeObject the object to be removed
945 Removes a class name from the COSArray or sets it to null based on conditions. @param className string representation of the class name to remove
946 Manages and updates child elements (kids) in the structure node's COSDictionary. @param object COSBase object to be added as a kid; ignored if null
947 Inserts a new child node before a reference node in the structure hierarchy. @param newKid COSBase object for the new child node @param refKid Reference to the existing child node before which insertion occurs
948 Removes a child element from the structure node's kids list. @param object COSBase object to be removed @return true if removal was successful, else false
949 Sets or removes the K attribute in the COSDictionary of this object. @param k COSBase object to be set; if null, item is removed
950 Sets or removes the line dash pattern for guidelines in PDF documents. @param dashArray COSArray object containing dash pattern; if null, removes the pattern
951 Clears all elements and updates document state. If a parent dictionary is present, changes the item from single to an array.
952 Initializes an empty page tree for a PDF document and sets its basic structure.
953 Sets the transformation matrix for this pattern in PDF graphics. @param transform AffineTransform object to set as the matrix
954 Sets or removes the document's visibility policy using a COSName identifier.
955 Initializes an optional content membership dictionary with a TYPE of OCMD.
956 Initializes a transparency group with default settings.
957 Updates parent entry in array with new parent and structure type. @param kArray target COSArray to modify @param newParent new COSDictionary object to set as the parent @param newStructureType new COSName object for the structure type, can be null
958 Sets the rich text value for the form field using a COSString object. @param rv COSString containing rich text; if null, removes the item
959 Sets the cryptographic filter method in the dictionary. @param cfm COSName identifier for the method
960 Sets and updates the document information in PDDocument's trailer
961 Initializes the catalog dictionary for a PDF document and sets it as its root object. @param doc The PDDocument to associate with this catalog
962 Sets and updates the base color space for this PDIndexed object. @param base the new PDColorSpace to be used as the base color space
963 Sets or removes the crop box for this PDF page. @param cropBox PDRectangle to set as crop box; if null, crop box is removed
964 Parses the next token from the PDF stream, handling different data types and operators. @return The parsed object or operator; may be null if end of file is reached or input is invalid. @throws IOException if an I/O error occurs during parsing.
965 Sets or removes the bounding box of the tiling pattern in the PDF document. @param bbox Rectangle object representing the bounding box; if null, removes the existing one
966 Sets or removes the character set in the font descriptor dictionary. @param charSet string representing the character set; if null, entry is removed
967 Sets the font stretch attribute in PDF document's font descriptor. @param fontStretch desired font stretch value; null to remove attribute
968 Sets the interior color of the square annotation using a Color object. @param color Color object representing the desired interior color; if null, removes the color
969 Sets the coordinates of the text markup annotation using a float array. @param coords Array containing the coordinate values for the annotation
970 Sets or removes the document ID in the FDF dictionary.
971 Sets or removes the DIFFERENCES stream in the FDF document.
972 Sets the value of the field with COS object conversion. @param value input data to be converted and set (String, List<String>, or COSObjectable) @throws IOException if value type is unsupported for field import
973 Sets the COSBase value of the form field in the FDF document.
974 Sets the field flags for this FDFField instance. @param ff Integer representing the field flags to set; if null, clears existing flags
975 Sets the field flags for this FDFField instance. If ff is null, removes the flag. @param ff Integer representing new field flags; if null, flag is removed
976 Sets the clear field flags for the form field. @param ff Integer representing new clear field flags; null to remove existing flags
977 Initializes PDFont object with base settings for a new PDF font. Sets up dictionary and toUnicodeCMap, and initializes other fields.
978 Sets the JavaScript action to be executed after the current one. @param after The string representation of the JavaScript action
979 Sets the 'before' JavaScript action in FDF context. Encodes and stores input string. @param before JavaScript code to be executed before an event
980 Sets the rich text value for the form field using a COSStream object. @param rv COSStream containing the rich text value to be set
981 Sets the interior color of the polyline annotation using a given Color object. @param color the Color object to extract RGB components from; if null, removes the interior color
982 Sets the vertex coordinates of the polyline annotation in PDF document. @param vertices Array of float values representing vertex coordinates.
983 Sets or removes the interior color of this polygon annotation in PDF context. @param color Color object to set as interior; if null, interior is removed
984 Sets polygon vertices in FDF annotation using float array.
985 Sets the font family in the PDF document's font descriptor. @param fontFamily String representing the font family; if null, removes the entry
986 Sets the encryption filter for PDF document. @param filter name of the encryption filter to be applied
987 Sets or removes the font name in the PDF document's descriptor. @param fontName new font name; if null, removes existing font name
988 Sets the owner encryption key in the PDF document's dictionary. @param o byte array representing the encryption key for owners
989 Sets the user encryption key in the PDF document's security dictionary. @param u byte array representing the user encryption key @throws IOException if an error occurs during the operation
990 Sets the owner encryption key in PDF document dictionary
991 Sets the user encryption key in PDF document's dictionary. @param ue byte array representing the user encryption key @throws IOException if there's an error setting the encryption key
992 Sets the encryption recipients for the PDF document. @param recipients array of byte arrays representing recipient keys @throws IOException if there's an issue with COSArray operations
993 Initializes a new PDF font descriptor with its type set to FONT_DESC.
994 Sets or removes a stream filter name in the document's dictionary.
995 Retrieves and converts colorant names from the internal COSArray. @return List of String colorant names extracted from COSName objects within the array
996 Sets the font bounding box in the PDF document's dictionary. If a rectangle is provided, its dimensions are stored; otherwise, removes the item from the dictionary. @param rect PDRectangle object containing dimensional data; if null, removes the font bounding box item
997 Sets the string filter name in the encryption dictionary for PDF documents. @param stringFilterName COSName object representing the new string filter name
998 Removes V4/5 filters from the PDF document's encryption settings.
999 Initializes a new empty FDFAnnotation with TYPE set to ANNOT
1000 Sets the color of the annotation using RGB components from a given Color object. @param c Color object to extract RGB values; if null, removes the color item
1001 Sets rich content for annotation using provided string. @param rc the rich content to be added; if null, removes existing content
1002 Sets the interior color of the circular annotation in PDF. @param color Color object to set; if null, removes the item from dictionary
1003 Sets the callout property of the free text annotation using a float array. @param callout Array defining the points for the callout line
1004 Sets the coordinates of a line annotation in PDF document. @param line Array containing the x and y coordinates of the line
1005 Retrieves the alternate color space or creates it if not already initialized. @return The alternate color space object for this device @throws IOException If an error occurs during creation of the color space
1006 Writes object reference to the standard output stream. @param obj COSBase object for which reference is written.
1007 Sets or removes the interior color of the line annotation in the PDF document. @param color Color object to be set; if null, interior color is removed
1008 Sets document permissions using a byte array. @param perms byte array representing permissions to be set
1009 Sets and updates the background property in the shading dictionary. @param newBackground COSArray object representing the new background settings.
1010 Sets the clear widget field flags for this FDFField object. @param ff Integer representing new field flags; if null, removes item from dictionary
1011 Sets or removes the color space for shading in PDF documents. @param colorSpace object defining the color space; if null, removes existing color space
1012 Converts COSArray to float array. Handles COSNumber objects, others default to 0. @return Float array representation of COSArray elements
1013 Converts COSBase objects to a list of Floats. @return List<Float> containing float values or null if object is not COSNumber
1014 Converts COSBase objects to a list of Integers, if they are COSNumber instances. @return List<Integer> with corresponding integer values or null for non-COSNumber objects
1015 Retrieves the minimum value of the range from PDF document. @return Minimum value as float, or NaN if not a number
1016 Retrieves the maximum value of the range from a PDF document. @return Maximum value as float, or null if object is not COSNumber
1017 Retrieves a PDGamma object at the specified index, if it exists. @param index position in the color array @return PDGamma object or null if not found or not an instance of COSArray
1018 Retrieves display values for choice field options. @return List of option display values; empty if none found
1019 Retrieves and extracts the options from a PDF choice field. @return List of string options; empty list if none found.
1020 Initializes a new PDSeedValueCertificate with an empty COSDictionary and sets its type to SV_CERT.
1021 Sets or removes the timestamp in the seed value based on input. @param timestamp PDSeedValueTimeStamp object; if null, timestamp is removed
1022 Sets the MDP (Multimedia Permissions Dictionary) for digital signature configuration. @param mdp PDSeedValueMDP object containing MDP settings; if null, removes existing MDP
1023 Sets or removes the bounding box for shading properties in PDF documents. @param newBBox PDRectangle object; if null, item is removed from dictionary
1024 Sets or removes the filter attribute in the digital signature's dictionary. @param filter COSName identifier for the filter; if null, filter is removed
1025 Initializes a PDSeedValue object with a new COSDictionary and sets its type as SV.
1026 Sets the dash style of border in PDF annotation. @param dashArray COSArray defining dash patterns
1027 Initializes a PDF appearance dictionary and sets up the normal state entry.
1028 Sets and updates the quad points for text markup in PDF documents
1029 Wraps page content in a save/restore pair (q/Q) to create an isolated environment for adding content. @param page the PDF page to be wrapped @throws IOException if there's an error creating streams or writing to them
1030 Sets or removes the encryption dictionary in the document's trailer. @param encDictionary the new encryption dictionary; if null, it is removed
1031 Initializes an interactive form for a PDF document and sets up the field array. @param doc the PDDocument to associate with this form
1032 Sets the colorant name in the PDF document. @param name new colorant name as a string
1033 Sets the text color of the outline item using a given PDColor object. @param textColor The desired color for the text as a PDColor object
1034 Sets the contents of the digital signature with a byte array and ensures hex formatting. @param bytes input data to be represented as a COSString in the signature dictionary
1035 Sets the byte range for PDF document signature and ensures it's in a COSArray format. @param range an array of 4 integers representing the byte range
1036 Sets or removes the SubFilter in the digital signature dictionary. @param subfilter COSName object for the subfilter; if null, item is removed
1037 Sets or removes the filter in the signature dictionary.
1038 Sets the signature type in the underlying COSDictionary structure. @param type COSName identifier for the signature type
1039 Initializes a digital signature object with a default type (SIG).
1040 Sets the alternate color space for this PDF document and updates its COS object representation. @param colorSpace the new alternate color space to be set (null indicates no alternate color space)
1041 Sets the X tristimulus value of the color. @param x the new X tristimulus value to be stored
1042 Sets the Y tristimulus value in the three-dimensional color space.
1043 Sets the Z tristimulus value in the color space. @param z The new Z value
1044 Sets or removes an item in the dictionary from a COSObjectable object. @param key COSName identifier for the item @param value COSObjectable to be converted and set; if null, item is removed
1045 Sets a boolean value in the dictionary under the specified key. @param key String identifier for the item @param value The boolean to be set
1046 Sets or removes a boolean item in the dictionary based on the input value. @param key Identifier for the boolean item @param value Boolean to be set; if false, item is removed
1047 Sets or removes an item in the dictionary using a string key and COSBase object. @param key String identifier for the item @param value COSBase object to be set; if null, item is removed
1048 Sets a named item in the dictionary with an optional string value. @param key COSName identifier for the item @param value String to be converted into a COSName; if null, removes the item
1049 Sets a string item in the dictionary. If value is null, removes the item. @param key COSName identifier for the item @param value String to be set; if null, item is removed
1050 Sets an integer value in the dictionary using a specified key. @param key COSName identifier for the item @param value Integer to be stored in the dictionary
1051 Sets a long integer value in the dictionary using a given key. @param key COSName identifier for the item @param value Long integer to be stored
1052 Sets a floating-point number in the dictionary using a given key. @param key COSName identifier for the item @param value Floating-point number to be stored
1053 Creates a COSStream from the given dictionary and input data. @param dictionary COSDictionary containing stream settings @param startPosition starting position of stream in document @param streamLength length of the stream @return initialized COSStream object for PDF processing
1054 Sets or removes the document ID in the PDF trailer dictionary. @param id COSArray object containing document ID; if null, ID is removed
1055 Sets the rectangle differences for square or circular annotations in a PDF document. @param differenceLeft Left margin difference @param differenceTop Top margin difference @param differenceRight Right margin difference @param differenceBottom Bottom margin difference
1056 Sets and updates the vertices of the polyline annotation using input float array. @param points Array of float coordinates defining the vertices
1057 Sets the relationship value of the target directory to either 'P' (parent) or 'C' (child). @param relationship COSName object representing the relationship type ('P' or 'C')
1058 Sets or removes the B item in the PDF action dictionary based on the input value. @param b COSBase object to be set; if null, item is removed
1059 Sets or removes the destination item in the PDF action dictionary.
1060 Sets form fields in the PDF action using COSArray input.
1061 Sets the sound content associated with the PDF action. @param sound COSStream object representing the sound data
1062 Sets the parent markup annotation for this popup annotation.
1063 Sets or removes the 'H' flag in the action dictionary to hide/show elements.
1064 Sets or removes the 'T' item in the action dictionary based on input value. @param t COSBase object to be set; if null, item is removed.
1065 Initializes a new empty annotation with TYPE set to ANNOT in the PDF document.
1066 Sets or removes the transfer function in the extended graphics state dictionary. @param transfer2 COSBase object for the transfer function; if null, it's removed.
1067 Sets or removes a float item in the dictionary based on the input value. @param key Unique identifier for the item @param value Float object to be set; if null, item is removed
1068 Sets the blend mode in the dictionary using a COSName identifier and its corresponding value. @param bm BlendMode object to be set
1069 Initializes the extended graphics state dictionary for a PDF document.
1070 Sets and updates decode values for shading in PDF documents
1071 Sets and updates the coordinates in the PDF document shading properties
1072 Sets and updates the shading domain in PDF document
1073 Sets and updates the extend property for Type 2 shading in PDF document.
1074 Sets and updates the shading domain with a new COSArray.
1075 Sets the transformation matrix for the Type 1 shading. @param transform AffineTransform object containing the matrix values
1076 Sets the shading functions in the PDF document and updates the COSDictionary object. @param newFunctions array of new shading function objects to be set
1077 Sets or removes the transfer function in the extended graphics state dictionary.
1078 Initializes PDAnnotation object from a COSDictionary, validating and setting the annotation type. @param dict COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
1079 Sets or removes form fields in the PDF action using a COSArray. @param array COSArray containing field identifiers; if null, all fields are removed
1080 Sets line coordinates in PDF annotation using input float array
1081 Sets the rectangle differences for free text annotation appearance in PDF documents. @param differenceLeft Left margin difference @param differenceTop Top margin difference @param differenceRight Right margin difference @param differenceBottom Bottom margin difference
1082 Sets or removes the ink list in the COS object based on input data. @param inkList Array of float arrays representing ink paths; if null, removes the ink list
1083 Sets the annotation's rectangle dimensions using a PDRectangle object.
1084 Sets the rectangle margin differences for this annotation in PDF document. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1085 Sets and formats the callout array for a free text annotation in PDF documents.
1086 Sets the quad points for this link annotation in the PDF document. @param quadPoints array of 8 float values defining the quadrilateral shape
1087 Sets rich content (text) to the annotation. @param rc String containing the text to be displayed in the annotation
1088 Sets or updates the annotation's border using a COSArray.
1089 Sets the vertices of the polygon annotation using input float array. @param points Array containing vertex coordinates for the polygon
1090 Sets the interior color of the annotation using a provided PDColor object.
1091 Sets rectilinear distances in the COS dictionary and updates the PDF document. @param distances an array of PDNumberFormatDictionary objects representing distances
1092 Sets the interior color of the polygon annotation using a PDColor object. @param ic The PDColor object representing the desired interior color.
1093 Sets and updates the areas in the PDF document's measurement dictionary. @param areas an array of PDNumberFormatDictionary objects representing areas to be set
1094 Sets the interior color of the line annotation using a PDColor object. @param ic PDColor object containing RGB or CMYK components & pattern name.
1095 Sets the interior color of the polyline annotation using a PDColor object. @param ic PDColor object representing the desired interior color
1096 Set the background color of PDF annotation appearance characteristics.
1097 Clones and returns the COSBase object based on its type: COSArray or COSDictionary. @param src Source object to be cloned @param dstParent Parent of the destination object @param currentPageDict Current page dictionary @return Cloned COSBase object or original if not applicable for cloning
1098 Sets and updates the angular measurements in the PDF document's COSDictionary. @param angles an array of PDNumberFormatDictionary objects representing angles
1099 Sets the text color for this outline item using a PDF color object. @param textColor PDColor object representing the desired text color
1100 Sets and updates the tint transformation function for color samples. @param tint PDFunction object representing the tint transformation; null allowed
1101 Sets the tint transformation function and updates the internal COSArray representation. @param tint the PDFunction to be set as the tint transformation; null allowed
1102 Sets the color of the annotation using a PDColor object and updates the COSDictionary. @param c PDColor object representing the desired color
1103 Builds widths for Type 2 CID fonts and sets them in the provided dictionary. @param cidFont the destination dictionary to store the width data @throws IOException if there is an error accessing or manipulating font data
1104 Sets the line dash pattern in the graphics state dictionary for PDF rendering. @param dashPattern PDLineDashPattern object containing the length and phase values
1105 Sets the primary font for the PDF document at index 0. @param font the PDFont object to be used as the primary font
1106 Sets and updates the COSArray of PDNumberFormatDictionaries for changeXs in the COSDictionary. @param changeXs an array of PDNumberFormatDictionaries to be added to the COSArray
1107 Creates a PDImageXObject from an input stream for a given PDF document. @param document the PDF document to which the image belongs @param stream InputStream containing the image data @return PDImageXObject with specified dimensions and color space @throws IOException if there's an error reading or handling the input stream
1108 Retrieves and creates text color for outline item if not present. @return PDColor object representing the RGB color of the text
1109 Expands collection to hold specified number of elements. @param size desired minimum capacity
1110 Retrieves the b-range component from dictionary or defaults to -100 to 100 if not found. @return PDRange object containing b-component range data
1111 Sets the color for PDF guidelines using a PDColor object. Converts the color to COSArray and adds it to the dictionary. @param color PDColor object representing the desired guideline color.
1112 Sets and updates the Y-coordinate changes in a COSArray within the class's COSDictionary. @param changeYs an array of PDNumberFormatDictionaries to be added to the COSArray.
1113 Sets the line slopes in the PDF document's measurement data. @param lineSloaps an array of PDNumberFormatDictionary objects representing line slopes
1114 Constructs a PDPattern for a given color space in resources. @param resources PDF document resources @param colorSpace the target color space for the pattern
1115 Fetches the color range for a specific component in PDF stream. @param n the index of the color component @return PDRange object representing the specified component's range
1116 Initializes a new instance of PDICCBased with an ICC-based color space and adds it to the document. @param doc The parent PDF document that will contain the initialized color space.
1117 Retrieves color or four colors based on the input name, handling COSArray objects. @param name string key for retrieving dictionary object @return PDGamma/PDFourColours object based on array size; otherwise, null
1118 Retrieves A-component range in LAB color space. Defaults to -100 to 100 if not defined. @return PDRange object containing the A-component range
1119 Sets border color using input PDColor object's components and pattern name
1120 Adds an output intent to the document catalog's COSArray. Manages creation and updates of output intents. @param outputIntent PDOutputIntent object containing output intent data
1121 Sets the target PDF page for navigation. Critical for defining the destination within a document. @param page the PDPage object to navigate to; not null
1122 Retrieves the date of the digital signature from the PDF document. @return Calendar instance containing the signature date; otherwise, null
1123 Writes a token (Operator) to the output stream. Uses writeObject() to handle the writing process. @param op the Operator object to be written @throws IOException if writing to the output stream fails
1124 Sets the horizontal offset for the caption of this line annotation in a PDF document. @param offset The distance from the start point to position the caption horizontally
1125 Modifies the vertical offset of the annotation caption. @param offset new vertical position for the caption
1126 Sets or removes the operating system (OS) property in the dictionary. @param os the OS name; if null, removes the property
1127 Retrieves the white point coordinates for color space operations. If not found, defaults to (1, 1, 1) and adds to dictionary. @return White point as a PDTristimulus object.
1128 Retrieves black point value from the color space dictionary. If not found, creates and returns a default black point (0, 0, 0). @return PDTristimulus object representing black point values
1129 Adds a subject to the certificate's dictionary, managing its storage as a COSArray. @param subject byte array representing the subject to be added
1130 Adds a key usage extension to the certificate; validates and appends it to the KEY_USAGE array. @param keyUsageExtension string containing allowed characters (0, 1, X) for digital signature validation
1131 Adds a new issuer to the certificate's issuer list in the PDF document. @param issuer byte array representing the issuer's information
1132 Adds an Object Identifier (OID) to the certificate dictionary.
1133 Sets the range for a color component in PDF stream. Extends array if needed. @param range PDRange object containing min and max values @param n Index of the color component
1134 Retrieves and returns the creation date of the annotation. @return Creation date as a Calendar object or null if not found
1135 Parses PDF document's trailer and root, sets up document structure, and marks parsing as done. @throws IOException if the root object specification is missing in the trailer.
1136 Retrieves and returns the creation date of the PDF annotation. @return Creation date as a Calendar object, or null if not found or invalid @throws IOException if there's an error accessing the annotation data
1137 Retrieves and returns the modification date of the PDF document. @return Calendar instance representing the modification date; otherwise, null
1138 Sets the vertical caption offset for a line annotation in PDF document. @param offset float value representing the vertical offset
1139 Sets the horizontal offset for a line caption in an FDFAnnotationLine object. @param offset Distance to shift the caption horizontally from its default position
1140 Sets or updates the crypt filter dictionary for PDF encryption settings. @param cryptFilterName COSName identifier for the crypt filter @param cryptFilterDictionary PDCryptFilterDictionary containing encryption settings
1141 Retrieves or sets the default guideline color from/in the COSDictionary. @return PDColor object representing the guideline color.
1142 Sets a new user property value and updates the document structure accordingly. @param value The updated COSBase object for the user property
1143 Retrieves the gamma correction values for RGB color space. @return PDGamma object containing gamma correction values.
1144 Retrieves and creates colorant separations for the DeviceN color space. @param resources associated PDF resources for management @return map of colorant names to their corresponding PDSeparation objects
1145 Adds a user property to the document's structure and notifies of changes. @param userProperty object containing specific user attribute details.
1146 Retrieves or creates additional actions for the PDF page. @return PDPageAdditionalActions object containing page actions.
1147 Initializes the name dictionary for a PDF document catalog. @param cat PDDocumentCatalog object to associate with this name dictionary
1148 Retrieves or initializes document catalog additional actions. @return PDDocumentCatalogAdditionalActions object for managing actions.
1149 Retrieves thread list from PDF document catalog. If none exists, creates a new one. @return List of PDThread objects, potentially empty but never null
1150 Retrieves and initializes the document information from the trailer dictionary. @return PDDocumentInformation object containing metadata attributes
1151 Retrieves a date from the dictionary using a given string key, converting it to Calendar if possible. @param key unique identifier for the date object as a string @return Calendar instance if conversion succeeds; otherwise, null
1152 Retrieves a date from the dictionary. Uses default if not found. @param key unique identifier for the date object. @param defaultValue value to return if date is not found. @return Calendar instance or defaultValue if date is not found.
1153 Retrieves the creation date of the PDF document as a Calendar object. @return Calendar instance with creation date if available; otherwise, null
1154 Extracts and validates child nodes from a given PDF node. @param node COSDictionary containing potential child nodes (KIDS) @return List of validated COSDictionaries, handles null entries
1155 Sets or removes the upper limit of numeric values in the COSArray. @param upper Integer value to set as upper limit; if null, removes the limit
1156 Sets the name item in the signature dictionary.
1157 Sets the style for the starting point of a line annotation. @param style The style to apply; null maps to PDAnnotationLine.LE_NONE.
1158 Sets the mapping name in the field's dictionary. @param mappingName String to be used as the mapping name
1159 Sets an alternative field name in the PDF document's AcroForm structure. @param alternateFieldName new name for the field
1160 Sets the partial name of the PDF form field, ensuring it doesn't include periods. @param name Partial name to be set; should not contain a period character
1161 Sets the default value for the choice field in PDF form.
1162 Sets the default appearance of the form field.
1163 Sets the title of the outline item using a COS string object. @param title New title for the outline item
1164 Sets the contact information in the digital signature dictionary.
1165 Sets the reason for the digital signature. @param reason String representing the reason
1166 Sets the signature's location and updates the COSDictionary.
1167 Sets the URL in the PDF document's timestamp dictionary. @param url String representing the URL to be set
1168 Sets the URL in the certificate's COSDictionary. @param url String representation of the URL
1169 Sets the date of digital signature in PDF document's property dictionary. @param date String representation of the date to be set
1170 Sets an alternate caption for the PDF annotation. @param caption String to be used as alternate caption
1171 Sets the string value for this non-terminal field and updates its COS object. @param value the new string value for the field
1172 Sets the rollover caption for the PDF annotation appearance. @param caption String to display on mouse hover; if null, removes the caption
1173 Sets the state model of the text annotation in PDF document.
1174 Sets the annotation's state in the PDF document. @param state new state of the annotation
1175 Sets the subject of the annotation in the PDF document.
1176 Sets the title for the popup display of this annotation markup. @param t String representing the new title; if null, removes the existing title
1177 Sets the default style string for this free text annotation. @param defaultStyleString determines the appearance style of the annotation
1178 Sets the default appearance string of the annotation in PDF document. @param daValue The new default appearance string to be set
1179 Sets the name of the PDF annotation. @param nm new name for the annotation
1180 Sets the modified date of the annotation in its COSDictionary. @param m new date to be set
1181 Sets the contents of the annotation in the PDF document.
1182 Sets the execution parameter in the launch parameters dictionary.
1183 Sets the operation type in the launch parameters dictionary.
1184 Sets the directory attribute in the launch parameters. @param dir a string representing the new directory path
1185 Sets the filename in the launch parameters dictionary.
1186 Sets normal annotation caption text. @param caption new text for the caption
1187 Sets the text field's value and applies changes to the PDF form. @param value The new string value for the text field
1188 Sets the default value of this text field in the PDF form.
1189 Sets the default appearance string for text fields in PDF forms. Handles both main object and child widgets' DA entries. @param daValue The new default appearance string to be set
1190 Sets the font descriptor flags and updates the dictionary with the new value. @param flags Integer representing the new flag settings for the font descriptor
1191 Sets clear widget field flags using an integer value. @param ff Integer representing the new flags
1192 Sets widget field flags in FDF document using a specified integer value.
1193 Sets integer flags for widget fields using COSName.F as key. @param f Integer representing the new field flags value to be set.
1194 Sets clear field flags in FDF document. @param ff Integer representing the new clear field flags value
1195 Sets flags for the form field using a specified integer value. @param ff Integer representing the new field flags
1196 Sets field flags in FDF document using specified integer value. @param ff Integer representing the new field flag values.
1197 Sets the rotation of the free text annotation. @param rotation Rotation value to be applied (degrees)
1198 Sets the justification for free text annotation. @param justification String representing alignment ("centered", "right", or default is "left")
1199 Sets the page number for the annotation in the PDF document.
1200 Sets the permission level for the PDF document using COSName P and an integer value. @param permissions Integer representing the desired access permissions
1201 Sets the PDF document's revision level using COSName.R as the key. @param revision The new revision level for the document
1202 Sets the length of the PDF document in the encryption settings. @param length Integer representing the new length value
1203 Sets the encryption version of the PDF document in its dictionary.
1204 Sets the length of the encryption filter in the crypt dictionary. @param length Integer representing the length to be set
1205 Sets the next key for the parent tree in the COSDictionary. @param parentTreeNextKey The value to be set as the next key
1206 Sets the revision number for the PDF structure element. @param revisionNumber Integer value representing the revision; must be >= 0
1207 Sets the Marker Context Identifier (MCID) for this marked content reference. @param mcid Integer identifier to be set in the underlying dictionary
1208 Sets and stores the bits per sample value in the PDF function dictionary. @param bps Bits per sample to be set; affects data encoding and decoding.
1209 Sets the starting page number for label range. Throws exception if input is not a positive integer. @param start The desired starting page number
1210 Constructs a PDPageTree from a COSDictionary and a PDDocument. Repairs bad PDFs by converting Page dict to page tree if necessary. @param root COSDictionary representing the page tree; cannot be null @param document associated PDDocument for context and resources
1211 Sets the rotation angle of the PDF page. @param rotation Rotation angle in degrees (0, 90, 180, or 270)
1212 Sets the structural parent count for the PDF page.
1213 Sets an integer value in a nested dictionary within the main COSDictionary object. @param embeddedDictionary The outer COSName key for the nested dictionary. @param key The inner COSName key to store the integer under. @param value The integer value to be stored.
1214 Sets an integer value in the dictionary using a string as the key.
1215 Sets the scale ratio in the COSDictionary. @param scaleRatio the new scale ratio as a String
1216 Sets the annotation name in the PDF dictionary.
1217 Sets character widths for a given TrueType font and glyph list in a PDF document. @param font the dictionary containing font properties @param glyphList the list of glyph names used by the font @throws IOException if an I/O error occurs during font processing
1218 Sets the target directory's filename using COSName.N identifier in PDF dictionary. @param filename String representing the new filename for the PDF document
1219 Sets the launch parameter 'P' in the PDF document action dictionary. @param p String value for the launch parameter 'P'
1220 Sets the file name within the PDF context.
1221 Sets the Unicode filename in the PDF complex file specification.
1222 Sets or removes the page label prefix in the PDF document. @param prefix New prefix to be set; if null, prefix is removed
1223 Sets the document's producer metadata. @param producer The new producer string to be set; if null, removes the item
1224 Sets or updates the document's creator metadata. @param creator The name of the creator to be stored in the PDF metadata.
1225 Sets or updates the PDF document's keywords metadata. @param keywords New keywords to be associated with the document; if null, removes existing keywords
1226 Sets the document's subject metadata. @param subject The new subject for the PDF document. If null, removes the current subject.
1227 Sets the author metadata of the PDF document. @param author The name of the author to be set in the document's metadata
1228 Sets or updates the title of the PDF document metadata. @param title new title to be assigned to the document
1229 Sets the document's primary language using COSName LANG identifier. @param language String representing the language code to be set
1230 Sets or removes a string item in the embedded dictionary. If the dictionary does not exist and a non-null value is provided, it creates one. @param embedded COSName identifier for the embedded dictionary @param key COSName identifier for the item @param value String to be set; if null, removes the item
1231 Sets a string item in the dictionary using a given key-value pair. @param key String identifier for the item @param value String to be set; if null, removes the item
1232 Sets a date item in the dictionary using a specified format. @param key COSName identifier for the date item @param date Calendar object to be formatted and set; if null, removes the item
1233 Sets the file description using a provided string.
1234 Sets the transition motion property to a specified value. @param motion PDTransitionMotion object defining the desired motion type
1235 Sets the transition dimension using a PDTransitionDimension object. @param dimension Object representing the desired transition dimension
1236 Initializes a PDTransition with specified style and sets the transition type and style in the PDF document. @param style The desired transition style for the page navigation experience
1237 Sets or updates the name of the viewport in the PDF document. @param name The new name for the viewport as a String
1238 Initializes a new PDNumberFormatDictionary with default settings.
1239 Sets the measurement dictionary's subtype attribute in the COSDictionary. @param subtype String representing the new subtype value
1240 Initializes an empty measurement dictionary for PDF documents.
1241 Sets the unique identifier for the PDF structure element. @param id String representation of the identifier to be set
1242 Sets the title of the PDF structure element using COSName.T
1243 Sets the language of the PDF structure element using a string value. @param language String representing the new language for the element
1244 Sets the operating system specific launch parameters. @param o OS specific launch parameter
1245 Sets the destination path or file in the PDF launch action. @param d Path or file to be set for the launch action
1246 Sets the file specification for launching an external resource in the PDF document. @param f File specification as a string
1247 Sets JavaScript action string in PDF document. @param sAction String containing JavaScript code to be executed
1248 Initializes the COSDictionary and sets up the initial structure for optional content groups (OCGs).
1249 Sets the name of the optional content group. @param name The new name for the OCG. If null, removes the name.
1250 Sets the name of the referenced page in FDF context.
1251 Sets the partial name of the form field using COSName.T. @param partial String representing the partial field name to be set
1252 Sets the target item in the FDF dictionary to the specified string value.
1253 Sets the status of the FDF document. @param status New status as a String
1254 Sets the state model of the text annotation. @param stateModel new state model to be set
1255 Sets the state of the text annotation in FDF format. @param state String representing the new state of the annotation
1256 Sets the style of the line annotation's caption. @param captionStyle new style for the caption
1257 Sets the default style of the free text annotation. @param style String representing the style
1258 Sets the default appearance of the free text annotation. @param appearance String representing the appearance properties
1259 Sets the symbol for the caret annotation in the PDF document. @param symbol String representation of the symbol; "paragraph" is converted to "P", others become "None"
1260 Sets the subject of the PDF annotation. @param subject Subject to be assigned
1261 Sets the title of the PDF annotation. @param title String to be used as the annotation's title
1262 Sets the content of the PDF annotation. @param contents String to be displayed in the annotation
1263 Sets the name of the PDF annotation using COSName.NM key and provided string value.
1264 Sets the modification date of the PDF annotation. @param date String representation of the new modification date
1265 Sets the actual text of the PDF structure element using COSName.ACTUAL_TEXT identifier. @param actualText String to be set as the actual text of the element
1266 Sets the expanded form of the PDF structure element using a string value. @param expandedForm String representation of the expanded form to be set
1267 Sets an alternative description for the PDF structure element.
1268 Sets the URI of the PDF document action. @param uri String representing the new URI for the action
1269 Initializes document outline from a given COSDictionary and sets its type to OUTLINES. @param dic the underlying COSDictionary for managing PDF metadata and properties
1270 Initializes an empty FDFAnnotationTextMarkup of TYPE ANNOT.
1271 Constructs a new empty FDFAnnotation with TYPE set to ANNOT and SUBTYPE to TEXT.
1272 Initializes a new empty FDFAnnotationStamp with SUBTYPE set to ANNOT.
1273 Constructs a new empty square annotation with subtype set to 'ANNOT'.
1274 Initializes a new empty FDFAnnotationSound with TYPE set to ANNOT.
1275 Initializes a new empty FDFAnnotationPolyline with the SUBTYPE set to ANNOT.
1276 Initializes a new empty FDFAnnotationPolygon with TYPE set to ANNOT.
1277 Initializes a new empty FDFAnnotation with TYPE set to ANNOTATION_LINK.
1278 Initializes a new empty FDFAnnotation with TYPE set to ANNOT_LINE.
1279 Constructs an empty FDFAnnotationInk and initializes its subtype.
1280 Initializes a new empty FDFAnnotation with TYPE set to ANNOT_FREE_TEXT.
1281 Initializes a new empty FDFAnnotationCircle with its subtype set
1282 Initializes a new empty FDFAnnotationCaret with SUBTYPE set to ANNOT.
1283 Removes a child node from the structure's kids list using COSObjectable object. @param objectable COSObjectable to be removed @return true if removal was successful, else false
1284 Inserts a new COS objectable node before a reference node in the structure hierarchy. @param newKid The new child node to be inserted @param refKid Reference node before which insertion occurs
1285 Appends a child element to the structure node from COSObjectable, handling null inputs. @param objectable COSObjectable to be converted and added as a kid; ignored if null
1286 Creates a PDF File Specification from COSBase object. @param base the base object to create the file specification from @return PDFileSpecification or null if base is null, throws IOException for invalid types
1287 Retrieves the document catalog containing metadata and references. @return PDDocumentCatalog object if available; otherwise, creates a new one
1288 Creates a new PDDocument with an in-memory stream cache. Sets up the document structure for subsequent operations.
1289 Parses and returns the width from PDF stream operators for Type 3 fonts. @return Float value representing parsed width; throws IOException if parsing fails or end of stream is reached unexpectedly.
1290 Parses a PDF stream to extract glyph bounding box coordinates. Returns null if parsing fails or conditions are not met. @return PDRectangle object containing the bounding box dimensions, or null if parsing fails @throws IOException if an error occurs during parsing
1291 Parses the PDF content stream and returns a list of objects. @return List of parsed objects from the PDF stream; may be empty if no valid tokens found. @throws IOException if an I/O error occurs during parsing.
1292 Clones and merges COS objects from source to target, handling null or self-referencing cases. @param base Source object with data to be cloned and merged @param target Target object that will receive the cloned data
1293 Initializes a new empty FDFAnnotationFileAttachment with TYPE set to ANNOT.
1294 Builds and sets the vertical metrics for a CID font dictionary in PDF document. @param cidFont the CID font dictionary to modify @throws IOException if I/O operations fail during metric calculation
1295 Initializes an object representing a simple PDF font with default properties
1296 Draws a basic ellipse using computed parameters and adds it to the PDF document. @param left/right/top/bottom coordinates of the bounding box for the ellipse
1297 Adds a corner curl effect to the cloudy border. @param anglePrev previous angle, cx/cy center coordinates, radius and alphas for computation. @throws IOException if there is an error while generating the curve segment.
1298 Creates a PDImageXObject from a BufferedImage with default JPEG encoding quality (0.75). @param document PDF document to add the image to @param image Input BufferedImage object @return PDImageXObject with encoded image @throws IOException if input/output operations fail
1299 Retrieves and validates the border array for annotation. Ensures a minimum size of 3 elements, filling missing values with zeros as per Adobe Reader behavior. @return COSArray representing the border attributes of the annotation.
1300 Initializes a new PDListBox instance and sets up its form structure. @param acroForm the parent AcroForm structure for this list box field
1301 Initializes a new PDComboBox instance and sets up the combo box field within a PDF form. @param acroForm the parent AcroForm structure for this combo box field
1302 Constructs a PDCheckBox object and initializes it within an AcroForm structure. @param acroForm the parent AcroForm structure for this checkbox
1303 Sets equal rectangle differences for square or circular annotations in PDF document. @param difference The uniform margin difference to be applied on all sides.
1304 Sets uniform rectangle differences for free text annotation appearance. @param difference Uniform margin difference to be applied on all sides
1305 Sets equal rectangle margin differences for this annotation in a PDF document. @param difference the same margin difference applied to all sides of the rectangle
1306 Initializes a PDAnnotationWidget object from a COSDictionary and sets its subtype. @param field COSDictionary containing annotation data
1307 Initializes an unknown PDF document annotation from a COSDictionary. @param dic COSDictionary containing annotation data
1308 Constructs a popup annotation from a COSDictionary. @param field COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
1309 Constructs an instance of PDAnnotationMarkup from a COSDictionary. @param dict COSDictionary containing annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
1310 Initializes PDAnnotationLink object from a COSDictionary. @param field COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
1311 Initializes an empty PDF annotation widget and sets its subtype.
1312 Initializes new popup annotation with its subtype set in the PDF document.
1313 Initializes a new empty markup annotation in PDF documents.
1314 Initializes a PDF link annotation and sets its subtype.
1315 Sets or removes non-stroking alpha constant in extended graphics state dictionary.
1316 Sets or removes the stroking alpha constant in the graphics state dictionary. @param alpha Float object to be set; if null, item is removed (transparency)
1317 Sets or removes the smoothness tolerance in the extended graphics state dictionary. @param smoothness Float value for smoothness; if null, item is removed
1318 Sets or removes the flatness tolerance value in the PDF document. @param flatness Float object representing the new tolerance; if null, removes it
1319 Sets or removes the miter limit in the graphics state dictionary. @param miterLimit Float value to be set; if null, item is removed
1320 Sets or removes line width in PDF document based on input value
1321 Parses a COSStream from the given dictionary and handles stream length validation. @param dic The COSDictionary containing stream settings. @return A initialized COSStream object for PDF processing. @throws IOException If there's an error reading or parsing the stream.
1322 Sets the CYX value in the COSDictionary for rectilinear measurements. @param cyx Float representing the new CYX value to be set
1323 Sets the border width of the annotation. Handles floating-point and integer values. @param w float value for border width
1324 Sets the top index for displayed items in a PDF list box field. @param topIndex Integer representing the new top index or null to remove it
1325 Sets the field flags in the PDF document's AcroForm structure. @param flags Integer representing the new field flags to set
1326 Sets the 'Q' value in the form field dictionary. @param q Integer value to be set
1327 Sets the count of open child outline items and updates the COS object accordingly.
1328 Sets the timestamp requirement in the PDF signature dictionary. @param flag Boolean value indicating if timestamp is required (true) or not (false).
1329 Sets the P value in the digital signature's configuration. Throws exception if input is invalid (not 0-3). @param p Integer value to be set for the digital signature's parameter; must be between 0 and 3 inclusive
1330 Sets annotation's rotation value. @param rotation Integer representing the rotation angle
1331 Sets the Q value in the annotation's COS object. @param q Integer to be stored as Q
1332 Sets the structural parent of this annotation in a PDF document. @param structParent Integer representing the new structural parent identifier
1333 Sets annotation flags using COSName.F and the provided integer value. @param flags Integer representing annotation flag settings
1334 Sets or removes the annotation index in the PDF dictionary. @param index An integer value to set; if < 0, index is removed
1335 Sets the target page number for navigation or linking in a PDF document. @param pageNumber The desired page number; if negative, removes the existing one
1336 Sets action flags in the PDF form submission process. @param flags Integer representing specific actions or configurations
1337 Sets the maximum length constraint for the text field in PDF form. @param maxLen maximum character limit for input
1338 Sets the reset action flags in the PDF document. @param flags Integer representing the new action flags
1339 Sets line join style in PDF document using specified integer value. @param style Integer representing line join style
1340 Sets line cap style in the dictionary using a predefined key. @param style Integer representing the line cap style to be set
1341 Sets the number of bits per coordinate and updates the COS object. @param bitsPerCoordinate Number of bits used to represent coordinates.
1342 Sets the number of bits per color component and updates the COS object.
1343 Sets number of vertices per row for shading operations. @param verticesPerRow Number of vertices in each row
1344 Sets the number of bits per flag in the shading dictionary for PDF rendering. @param bitsPerFlag Number of bits used to represent each flag value
1345 Sets the type of shading in the PDF document's dictionary. @param shadingType Integer code representing the shading type
1346 Sets the tiling type for this pattern. @param tilingType Integer representing the tiling type to be set.
1347 Sets and updates the paint type of the tiling pattern in PDF document. @param paintType Integer value representing the desired paint type
1348 Sets the type of PDF graphics pattern. @param patternType an integer representing the pattern type to be set
1349 Sets the paint type in the pattern dictionary using a COSName identifier. @param paintType Integer representing the desired paint type
1350 Sets or removes the overprint mode in the PDF document. @param overprintMode Value to set for OPM; null to remove it
1351 Sets the Q attribute value in PDF text field. @param q Integer representing the new Q attribute value
1352 Sets a long integer value in the dictionary using a given string key. @param key String identifier for the item @param value Long integer to be stored
1353 Writes the trailer dictionary to the PDF document output stream, handling sorting of cross-references and removal of unnecessary items. @param doc a COSDocument object containing the PDF data to be written
1354 Sets constant opacity (transparency) of the annotation markup. @param ca Float value between 0.0 and 1.0; 1.0 is fully opaque, 0.0 is fully transparent.
1355 Sets the length of the leader line offset for a PDF annotation. @param leaderLineOffsetLength The new offset length as a float value
1356 Sets the length of the leader line extension for the annotation. @param leaderLineExtensionLength Float value representing the extension length
1357 Sets the length of the leader line in the annotation.
1358 Sets the volume level for the sound action within -1.0 to 1.0. @param volume Float value from -1.0 (low) to 1.0 (high)
1359 Sets the Y step value for tiling pattern. @param yStep The Y step value to be set in the PDF pattern dictionary.
1360 Sets the X step value for the tiling pattern in PDF documents.
1361 Sets the missing width value of the font descriptor. @param missingWidth The new missing width value to be set
1362 Sets the maximum width of the font descriptor and updates its dictionary.
1363 Sets the average width of a font in the PDF document. @param averageWidth Floating-point value representing the average width
1364 Sets the horizontal stem width in the font descriptor dictionary. @param stemH Horizontal stem width value to be stored
1365 Sets the vertical stem width of a font in PDF document. @param stemV Vertical stem width value to be set
1366 Sets and updates X height in font descriptor dictionary.
1367 Sets and stores the font's capital height value in the PDF descriptor. @param capHeight Capital height value as a float
1368 Sets the leading value in the font descriptor dictionary. @param leading The new leading value to be used
1369 Sets the font descent value in the PDF descriptor dictionary.
1370 Sets the font ascent value in the PDF document's dictionary. @param ascent Floating-point number representing the font ascent
1371 Sets the italic angle of the font descriptor in the PDF document.
1372 Sets the weight of the font in the PDF document. @param fontWeight Floating-point number representing font weight
1373 Sets the leader offset of the line annotation in PDF document. @param leaderOffset Distance from start/end point
1374 Sets the leader extend of line annotation in PDF document. @param leaderExtend Floating-point value for line extension
1375 Sets the length of line leader (perpendicular lines) in the line annotation. @param leaderLength The new length for the line leader
1376 Sets the opacity of the annotation. @param opacity Float value representing transparency (0.0 - 1.0)
1377 Sets the width of the guideline in the PDF document. @param width Floating-point value representing the width
1378 Sets the user unit for this PDF page. User unit determines the conversion factor between user space units and points (1/72 inch). @param userUnit a positive floating-point number representing the new user unit value
1379 Sets a floating-point number in the dictionary using a given string key. @param key String identifier for the item @param value Floating-point number to be stored
1380 Sets the minimum revision number in PDF signature properties. @param revision Long integer representing the minimum revision
1381 Sets the revision number in the PDF signature properties dictionary. @param revision Long integer representing the revision number
1382 Sets the minimum required capability in the PDF signature dictionary. @param minimumRequiredCapability Minimum version of PDF for which this signature is valid
1383 Initializes an empty PDDocumentOutline with the correct COS type name.
1384 Sets the URL type in the certificate's dictionary. @param urlType String representation of the URL type
1385 Sets the name property in the PDF signature dictionary
1386 Sets the file specification for the PDF interactive action.
1387 Sets the destination for the navigation action in PDF document. @param d PDDestination object representing the new destination
1388 Sets the target directory for this interactive action. @param targetDirectory a PDTargetDirectory object specifying the destination
1389 Sets the file specification for this action in the PDF document.
1390 Sets the destination for this GoToEmbedded action. Validates and sets a PDPageDestination object as the D key in the COS dictionary. @param d The destination to be set; must be an instance of PDPageDestination with integer page number
1391 Sets the font setting in the graphics state dictionary of a PDF document. @param fs PDFontSetting object to be set in the dictionary
1392 Sets and updates the shading function in this PDShading instance.
1393 Sets or updates the resources associated with this tiling pattern. @param resources New PDF resources to be used in the pattern.
1394 Sets the shading resource for PDF document and updates its COS object. @param shadingResources PDShading object defining graphical shading properties
1395 Sets the extended graphics state for shading patterns, affecting visual effects during rendering. @param extendedGraphicsState object defining graphical properties to be applied
1396 Sets the black point value in the color space dictionary.
1397 Sets the white point value and updates the color space cache. @param whitepoint PDTristimulus object containing white point values; cannot be null
1398 Sets or removes file specification in PDF document launch action
1399 Sets the CID set in the font descriptor dictionary using a given PDF stream. @param stream The PDF stream containing the CID set data.
1400 Sets the font file 2 for the PDF document, managing typographic properties. @param ttfStream the stream containing the TrueType Font data to be set as FONT_FILE2
1401 Sets or removes the font file stream in the PDF document's font descriptor. @param type1Stream PDStream object for the font file; if null, removes the item
1402 Sets or removes the template reference in the FDF document. @param tRef FDFNamedPageReference object; if null, item is removed.
1403 Sets or updates the page information in FDF document's page. @param info FDFPageInfo object containing new data
1404 Sets or removes the file specification for this page reference.
1405 Sets the fractional space to allocate for icons in FDF format. @param space PDRange object defining the space allocation
1406 Sets or removes additional actions associated with the field. @param aa PDAdditionalActions object; if null, actions are removed
1407 Sets an action to be performed on this form field. @param a PDAction object defining the action to be taken
1408 Sets the icon fitting property of the FDF field. @param fit FDFIconFit object representing icon fitting settings
1409 Sets or removes the appearance stream reference for a form field. @param ref FDFNamedPageReference object; if null, removes the item
1410 Sets or removes the appearance dictionary of the form field in the FDF document. @param ap PDAppearanceDictionary object; if null, removes the appearance dictionary
1411 Sets the FDFCatalog for the FDF document in its trailer dictionary. @param cat FDFCatalog object to be set as the root of the document
1412 Sets or removes the FONT_FILE3 item in the font descriptor dictionary from a PDF document. @param stream PDStream object containing the font file; if null, item is removed
1413 Sets Windows launch parameters for the PDF document action. @param win PDWindowsLaunchParams object containing configuration settings.
1414 Sets the file specification for this remote navigation action. @param fs PDFileSpecification object representing the linked resource or file
1415 Sets or removes the file specification in the PDF form submission action. @param fs PDFileSpecification object representing the file; if null, it is removed
1416 Sets the file specification for the annotation attachment. @param file PDFileSpecification object
1417 Associates annotation with a specific PDF page using COSDictionary object. @param page PDPage to be associated with the annotation
1418 Sets optional content property list for annotation management. @param oc PDPropertyList object to be set as the annotation's OC property
1419 Sets or updates the appearance of the annotation in the PDF document.
1420 Sets or removes a named destination in the target directory. @param dest PDNamedDestination object; if null, removes existing destination.
1421 Sets the target directory in the PDF document. @param targetDirectory PDTargetDirectory object to be set as the target
1422 Sets or removes the 'C' action in the PDF page dictionary.
1423 Sets or removes an 'O' action in the PDF page dictionary.
1424 Sets or removes the C action in the form field's additional actions.
1425 Sets or removes the "V" action in the form field's dictionary.
1426 Sets the form field action to be performed when the field is activated (pressed).
1427 Sets or removes the "K" action in the form field's dictionary.
1428 Sets the document presentation action for this PDF catalog. @param dp PDAction object defining the presentation behavior
1429 Sets the WP (Window Position) action for the PDF document's catalog
1430 Sets the document-level script to be executed when the PDF is opened. @param ds PDAction object containing the script to be set; if null, removes the script
1431 Sets the WS (Window State) action for a PDF document's catalog. @param ws the PDAction to be set as the Window State action
1432 Sets a specific window close action to be performed on a PDF document.
1433 Sets the Page Import action for PDF annotations. @param pi the PDAction representing the page import behavior.
1434 Sets the PV (Print) action for PDF annotation.
1435 Sets or removes an action to be executed when the mouse button is pressed inside an annotation's active area (Press). @param pc Action object to be set; if null, action is removed
1436 Sets or removes the Page Open action in the annotation.
1437 Sets the Bl action definition in the annotation's dictionary. @param bl The PDAction to be associated with the Bl event
1438 Sets or removes the "Fo" action in the annotation's dictionary.
1439 Sets the U action for PDF annotations to customize user interactions.
1440 Sets the destination action for PDF annotations.
1441 Sets the X action for PDF annotation. @param x PDAction object defining the action
1442 Sets an "E" action in the PDF annotation's dictionary. @param e PDAction to be set
1443 Sets an additional 'F' (Form) action in the PDF document. @param action PDAction object to be added as 'F' action
1444 Sets the file specification for this PDF action thread.
1445 Sets or removes JavaScript in the FDF document.
1446 Sets or removes border effect in free text annotation.
1447 Sets or removes the file specification in the FDF document.
1448 Sets or removes FDF dictionary in the PDF document's catalog.
1449 Sets or removes the URI dictionary in the document catalog. @param uri PDURIDictionary object; if null, URI is removed
1450 Sets or removes the mark information in the document catalog.
1451 Sets or removes the document's name dictionary using a COSObjectable object. @param names PDDocumentNameDictionary to be set; if null, it is removed
1452 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions to be set
1453 Sets or removes the open action of the PDF document. @param action PDDestinationOrAction to be set; if null, it is removed
1454 Sets or updates metadata in the PDF document catalog.
1455 Sets or removes document outline in the PDF catalog dictionary.
1456 Sets or removes viewer preferences in the PDF document catalog. @param prefs PDViewerPreferences object to be set; if null, preferences are removed
1457 Sets or removes the AcroForm object in the PDF document catalog. @param acroForm PDAcroForm object to be set; if null, it is removed
1458 Sets or removes an item in the dictionary by converting a string key to COSName and setting its corresponding value. @param key String identifier for the item @param value COSObjectable to be set; if null, item is removed
1459 Decrypts and caches encrypted objects in PDF. Supports strings, streams, dictionaries, and arrays. @param obj COSBase object to decrypt @param objNum unique object identifier @param genNum generation number of the object @return decrypted or original COSBase object @throws IOException if an error occurs during decryption or I/O operations
1460 Sets the end color in the PDF document's color array at index 3.
1461 Sets the start color in the PDF document's color array at index 2. @param colour PDGamma object representing the start color or null for none
1462 Sets or removes the structure tree root of the PDF document.
1463 Sets the second color in the PDF document's color array. @param colour PDGamma object representing the new color or null for none
1464 Creates a new rectangle with the same dimensions but at origin (0,0). @return New PDRectangle object with width and height of this instance.
1465 Sets the lower limit for a name in the PDF document's object model. @param lower new lower limit value as a string; null to remove it
1466 Sets the upper limit for values in the tree node and updates the COSArray accordingly. @param upper the new upper limit as a String; if null, removes the limit
1467 Sets the ending style for the polyline's endpoint. @param style the desired ending style as a string; null defaults to no ending style
1468 Sets the starting point ending style for a polyline annotation. @param style the desired style; if null, sets to LE_NONE (no style)
1469 Sets the ending style for the line annotation's endpoint. @param style the desired style; null defaults to LE_NONE
1470 Sets the starting point ending style for line annotations in a PDF document. @param style desired ending style; if null, LE_NONE is used
1471 Sets the ending style for polyline annotation endpoints in PDF documents. @param style ending style to be applied; if null, defaults to LE_NONE
1472 Sets the starting point ending style for annotation in COSArray using a given string. @param style desired style; if null, uses PDAnnotationLine.LE_NONE as default
1473 Sets the ending style for the line annotation endpoint. @param style desired ending style; null defaults to LE_NONE
1474 Sets the color at the beginning of the PDF document's color array.
1475 Sets or removes page labeling from the PDF document catalog. @param labels PDPageLabels object; if null, page labels are removed
1476 Sets or removes a destination name tree node in the document and updates the catalog. @param dests PDDestinationNameTreeNode to be set; if null, item is removed from document's catalog
1477 Sets or removes the embedded files node in the document catalog. @param ef PDEmbeddedFilesNameTreeNode object to be set; if null, item is removed
1478 Sets the fringe dimensions of the square annotation. @param fringe PDRectangle object representing the fringe dimensions
1479 Sets the fringe property of a free text annotation with given rectangle. @param fringe PDRectangle object representing the new fringe property value
1480 Sets or removes the fringe (border) of the circular annotation using a PDRectangle object.
1481 Sets the fringe dimensions of the caret annotation in the PDF document. @param fringe PDRectangle object representing the new fringe dimensions
1482 Sets or removes the border effect property of the annotation.
1483 Sets the border style of the PDF annotation using a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary containing border style properties to be applied
1484 Sets or removes the rectangle item in the dictionary of the annotation object. @param rectangle a PDRectangle object representing the new dimensions; if null, item is removed
1485 Sets or removes the parent tree for this structure node in a PDF document. @param parentTree PDNumberTreeNode representing the new parent tree; if null, it's removed
1486 Sets the PDF page associated with this structure element. @param page PDPage object representing a single page in the document
1487 Sets the parent node for this structure node within a PDF document.
1488 Sets the page associated with this PDObjectReference in its underlying COSDictionary. @param page The PDF page to be set; if null, the item is removed
1489 Sets the referenced object in the PDF dictionary and updates the OBJ entry.
1490 Sets and references a PDAnnotation object in the underlying COSDictionary. @param annotation The PDAnnotation to be referenced and set
1491 Sets the associated page for the marked content reference. @param page PDPage object to be associated with the marked content
1492 Adds or updates a resource in the PDF document's dictionary. @param kind type of resource (font, color space, etc.) @param name unique identifier for the resource @param object COSObjectable representing the resource to be added/updated
1493 Sets the page transition and duration for a PDF document page.
1494 Sets or removes the page transition effect using a PDTransition object. @param transition PDTransition object containing the desired effect; if null, removes existing effect
1495 Sets or removes additional actions associated with this PDF page. @param actions PDPageAdditionalActions object; if null, actions are removed
1496 Sets or removes metadata from the PDF page. @param meta PDMetadata object; if null, metadata is removed
1497 Sets or removes the content stream of the PDF page.
1498 Sets or removes the Art Box property of the PDF page. @param artBox Rectangle object; if null, Art Box is removed.
1499 Sets or removes the trim box of the PDF page based on input rectangle. @param trimBox Rectangle to be set as trim box; if null, trim box is removed
1500 Sets or removes the bleed box of the PDF page. @param bleedBox Rectangle defining the bleed area; if null, removes the bleed box
1501 Sets or removes the media box of the PDF page and updates document state. @param mediaBox Rectangle object representing the new media box; if null, removes it
1502 Sets or removes resources for the PDF page. @param resources PDResources object; if null, resources are removed
1503 Initializes a PDPage object with the specified media box dimensions. @param mediaBox PDRectangle defining the size and shape of the page
1504 Sets or removes the JavaScript item in the document's name dictionary. @param js PDJavascriptNameTreeNode to be set; if null, item is removed
1505 Sets or removes digital signature from the FDF catalog. @param sig PDSignature object; if null, removes existing signature
1506 Sets rectangle difference property for free text annotation. @param rd new PDRectangle object to be set
1507 Sets the PDAction for the link annotation in the PDF document
1508 Sets the border style of the link annotation in the PDF document.
1509 Sets the page labeling style for a PDF document. @param style Page labeling style; if null, removes the existing style
1510 Sets the trap state of the document to True, False, or Unknown. @param value should be 'True', 'False', or 'Unknown' @throws IllegalArgumentException if an invalid value is provided
1511 Sets or updates the version of the PDF document using a provided string value. @param version String representation of the document's version to be set
1512 Sets the page layout configuration in the PDF document catalog. @param layout PageLayout object representing desired configuration
1513 Sets and configures the Page Mode for this PDF document catalog. @param mode The desired PageMode to be set; controls document's initial view.
1514 Sets a named item in dictionary with optional string value.
1515 Sets an array of numbers for a given name in the PDF dictionary object. @param name String identifier for the number array @param values Array of floating-point numbers to be set
1516 Sets an array of name values for a specified key in the object's dictionary. @param name String identifier for the array @param values Array of strings to be converted into COSName and added to the array
1517 Sets an array of strings in the PDF dictionary with a given name and updates the object. @param name String identifier for the item @param values Array of string values to be added to the COSArray
1518 Sets or removes the display of document title in the viewer based on input value. @param value True to show document title; false to hide it
1519 Sets or removes the center window preference. @param value If true, centers the PDF viewer window; if false, removes centering
1520 Sets or removes the fit window preference in PDF viewer based on input. @param value Boolean to set; if false, fits window is turned off.
1521 Sets or removes the preference to hide window UI in the PDF viewer based on the input value. @param value If true, hides window UI; if false, shows it
1522 Initializes a typed dictionary wrapper with specified type name
1523 Sets or removes the menubar visibility based on the input value. @param value If true, menubar is hidden; if false, it's visible
1524 Sets or removes the need for appearances in the PDF form. @param value Boolean to be set; if false, need for appearances is removed
1525 Sets or removes the "trusted mode" flag in the property dictionary.
1526 Sets or removes non-embedded font warning in the property dictionary
1527 Sets or removes the pre-release flag in the property dictionary. @param preRelease Boolean indicating pre-release status; true to set, false to remove
1528 Sets or removes the 'Open' property of the text annotation in PDF document. @param open Boolean value to be set; if false, 'Open' property is removed
1529 Sets or removes the caption boolean item in the annotation line dictionary.
1530 Sets or removes the 'mix' property in the PDF sound action.
1531 Sets or removes the 'repeat' property in the PDF document sound action. @param repeat Boolean value to enable/disable sound repetition
1532 Sets or removes the SYNCHRONOUS flag in the PDF action dictionary. @param synchronous If true, sets the flag; if false, removes it
1533 Sets or removes new window behavior for remote navigation. @param value OpenMode: NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE
1534 Sets the window behavior for launching external content in a PDF. Removes or sets 'NEW_WINDOW' COSName based on OpenMode value. @param value Determines how to open the content (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1535 Sets or removes NEW_WINDOW flag based on OpenMode. Critical method for PDF navigation behavior. @param value Determines how linked content should be opened (USER_PREFERENCE, SAME_WINDOW, or NEW_WINDOW)
1536 Sets or removes text knockout flag in the graphics state dictionary. @param tk Boolean value; if true, text knockout is enabled
1537 Sets or removes the toolbar visibility setting based on the input value. @param value Boolean to be set; if true, hides the toolbar; otherwise, shows it
1538 Sets the owner of the attribute in the PDF's COS object. @param owner String representation of the owner
1539 Initializes an empty marked content reference and sets its type.
1540 Initializes a PDF object reference with an empty dictionary and sets its type.
1541 Sets the subtype attribute in external data dictionary for PDF annotations. @param subtype String value to be set as the subtype attribute
1542 Initializes an empty PDExternalDataDictionary with its type set to "ExData".
1543 Sets the border style property of interactive annotations in PDF documents. @param s String representing the desired border style
1544 Sets the highlighting mode of annotation. Valid modes: N, I, O, P, T. @param highlightingMode String representing the mode to set
1545 Sets the name of the text annotation in the PDF document.
1546 Sets the name of the rubber stamp annotation in its COS representation. @param name new name for the annotation as a String
1547 Sets the intent of the annotation markup. @param it String representing the intent
1548 Sets the reply type of the annotation markup. @param rt String representing the reply type to be set
1549 Sets the highlighting mode for the annotation link. @param mode String representing the highlighting mode to be set
1550 Sets the positioning of annotation captions. @param captionPositioning string representing the position
1551 Sets the line ending style in the annotation's COS object. @param style String representing the line ending style to be set
1552 Sets the attachment's name using a COSName identifier and a string value. @param name String to be set as the attachment's name
1553 Sets the appearance state of the annotation in the PDF document. @param as String representing the new appearance state
1554 Sets the annotation's subtype within the COSDictionary object. @param subType String representing the annotation type
1555 Sets the subtype of the PDF action to the specified string.
1556 Sets the type of the PDF document interactive action.
1557 Initializes a new empty PDF pattern dictionary with the type set to PATTERN.
1558 Sets the scaling type for icons in FDF format. @param scale String representing the desired scaling type
1559 Sets the scale option for icons in FDF format. @param option String defining the scaling behavior
1560 Sets the encoding of the FDF document. @param encoding String representation of the encoding to be used
1561 Sets the FDF document version in the PDF catalog. @param version String representing the version to be set
1562 Sets the icon for text annotation in PDF document. @param icon String value representing the icon name
1563 Sets the line ending style of the free text annotation. @param style The string representation of the line ending style to be set
1564 Sets the intent of the PDF annotation. @param intent String specifying the intent
1565 Sets the sub filter in the encryption dictionary for PDF documents. @param subfilter String representing the sub filter to be set
1566 Sets the style of the guideline using the provided string.
1567 Initializes a PDStructureNode with its dictionary and sets the node's type. @param type String representing the COSName identifier for the node's type.
1568 Sets the structure type of the PDF element using a COSName identifier and string value. @param structureType String representing the type or structure to be set
1569 Sets or removes the Alpha Source Flag in the graphics state dictionary. @param alpha Boolean value to be set; if false, flag is removed
1570 Sets or removes automatic stroke adjustment in PDF graphics state dictionary. @param sa Boolean value; if true, enables automatic stroke adjustment
1571 Sets or removes non-stroking overprint control in the PDF document. @param op Boolean value to set; if false, overprint control is removed
1572 Sets or removes stroking overprint control in the PDF dictionary. @param op Boolean value to set; if false, control is removed
1573 Sets the action associated with this outline item.
1574 Sets or removes the destination of this outline item in the PDF document.
1575 Sets the next sibling in the outline structure of a PDF document
1576 Sets previous sibling node in PDF outline structure.
1577 Sets or removes the property build item in the digital signature's dictionary.
1578 Sets or removes the seed value certificate in the PDF document's signature dictionary. @param certificate SeedValueCertificate object; if null, certificate is removed
1579 Sets or removes PDPropBuild application data in the COSDictionary. @param app PDPropBuildDataDict object; if null, item is removed
1580 Sets or removes the publication security property in the PDF document. @param pubSec COSObjectable representing publication security; if null, property is removed
1581 Sets or removes the filter property within PDF digital signature properties. @param filter PDPropBuildDataDict object to be set; if null, it is removed
1582 Sets the down appearance of an interactive PDF annotation. @param ap PDAppearanceStream for the down state; if null, removes the entry
1583 Sets down appearance in annotation's dictionary. @param entry to be set
1584 Sets the rollover appearance of an interactive annotation in PDF documents. @param ap PDAppearanceStream object representing rollover appearance; if null, removes the item
1585 Sets rollover appearance in PDF annotation. @param entry new PDAppearanceEntry
1586 Sets normal appearance stream for an interactive PDF annotation
1587 Sets the normal appearance of an annotation in PDF document.
1588 Sets the parent field of this annotation widget. Throws exception if it shares same COS object with the input field. @param field the new parent field to be set; cannot share same COS object as current widget
1589 Sets or removes the border style of the annotation widget using a COS dictionary object. @param bs PDBorderStyleDictionary containing border style properties; if null, border style is removed
1590 Sets or removes additional actions to be performed by the annotation. @param actions PDAnnotationAdditionalActions object; if null, actions are removed
1591 Sets the action associated with the annotation widget in PDF document. @param action PDAction object defining the interaction behavior of the widget
1592 Sets the visual characteristics of annotation widgets in PDF document. @param appearanceCharacteristics Dictionary containing properties like border style and highlighting mode.
1593 Sets or removes rectangle difference in annotation. @param rd PDRectangle object to be set; if null, item is removed
1594 Sets or removes border effect using a PDBorderEffectDictionary object. @param be PDBorderEffectDictionary for the border effect; if null, effect is removed
1595 Sets or removes the border effect dictionary in the annotation's COS object.
1596 Sets or removes the border style of the annotation using a COSName identifier and a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary object to be set; if null, border style is removed
1597 Sets or removes the external data dictionary for the annotation. @param externalData PDExternalDataDictionary object; if null, item is removed
1598 Sets or removes an in-reply-to annotation for this markup annotation. @param irt the PDAnnotation to which this one is a reply; if null, removes the reply
1599 Sets or removes an annotation's popup using a PDAnnotationPopup object.
1600 Sets the previous action URI for the link annotation. @param pa PDActionURI object representing the previous action URI to be set.
1601 Sets the destination of the link annotation in a PDF document. @param dest PDDestination object representing the target location or action
1602 Sets or removes a structure element in the PDF document outline item. @param structureElement The structure element to be set; if null, it is removed
1603 Sets the lower limit for numeric values in a PDF document's COSArray. @param lower Integer representing the new lower limit; if null, removes it
1604 Sets the last child node in the PDF document outline structure.
1605 Sets or removes the ANTI_ALIAS attribute in shading properties. @param antiAlias Boolean value to be set; if false, attribute is removed
1606 Sets or removes the rename option in the FDF template dictionary.
1607 Sets or removes the scale to fit annotation based on input value.
1608 Sets or removes line caption based on the input value. @param cap Boolean to be set; if false, caption is removed.
1609 Sets the encryption status for metadata in PDF document. @param encryptMetaData Boolean value; true to enable encryption, false to disable.
1610 Sets or removes the volatile flag in the file specification dictionary.
1611 Sets the "FD" boolean value in the number format dictionary, controlling decimal display
1612 Sets the 'open' state of the annotation popup.
1613 Sets whether to track mouse position in the URI action. @param value true if tracking should be enabled, false otherwise
1614 Sets the 'Suspect' status in PDF marking info.
1615 Sets and updates the 'UserProperties' flag in the PDF document's metadata. @param userProps Boolean value indicating the new status of user properties.
1616 Sets the 'Marked' status in the PDF document's metadata. @param value The boolean to be set (true/false) for marking status
1617 Sets or removes the rectangle item in the thread bead's dictionary.
1618 Sets or removes the associated page for this thread bead in PDF document.
1619 Sets the previous bead in threaded PDF content organization. @param previous Previous PDThreadBead object
1620 Sets the next bead in a threaded PDF document. @param next The PDThreadBead to set as the next bead
1621 Sets the thread association for this bead and updates its dictionary. @param thread PDThread object to associate with this bead
1622 Sets document information associated with this PDF thread. @param info DocumentInformation object containing metadata about the PDF
1623 Sets or removes measurement details from viewport settings. @param measure PDMeasureDictionary holding the new measurement; if null, removes existing measurement
1624 Sets the bounding box of the viewport in the PDF document. @param rectangle PDRectangle object representing new bounds
1625 Sets or removes additional actions associated with a PDFormField.
1626 Sets the seed value for a digital signature in PDF document. @param sv PDSeedValue object containing the seed value; if null, removes the item
1627 Sets the default value of the signature field in the PDF document. @param value PDSignature object to be set as the default value
1628 Sets the signature value and applies changes to the PDF document. @param value PDSignature object containing the new signature value @throws IOException if there is an error during setting or applying changes
1629 Sets or removes the XFA resource from the form's dictionary. @param xfa PDXFAResource object to be set; if null, it is removed
1630 Sets default resources for the interactive form. @param dr PDResources object to be used as defaults
1631 Sets the first child node in the PDF document's outline structure. @param outlineNode the PDOutlineNode to be set as the first child
1632 Checks if a dictionary represents a PDF catalog or contains FDF key. @param dictionary COSDictionary to be examined @return true if it's a PDF catalog or has an FDF key, false otherwise
1633 Fetches and returns rollover icon as a PDFormXObject or null if not found. @return PDFormXObject for rollover icon; otherwise, null
1634 Retrieves the stroking alpha constant from the extended graphics state dictionary. @return float value representing the stroking alpha constant or null if not found.
1635 Retrieves smoothness tolerance value from graphics state dictionary. @return float value representing smoothness tolerance or null if not found
1636 Retrieves the flatness tolerance value from the extended graphics state dictionary. @return float value representing the flatness tolerance or null if not found/invalid type
1637 Retrieves the miter limit value from the extended graphics state dictionary. @return float value representing the miter limit or null if not found
1638 Retrieves the line width property from the PDF document's extended graphics state. @return float value representing the line width or null if not found
1639 Creates and returns an appropriate property list based on the dictionary type. @param dict COSDictionary object for PDF property list representation @return PDPropertyList instance of specific subtype or default if type is unknown
1640 Fetches color space for transparency group. @return PDColorSpace object or null if not found in resources @throws IOException if an error occurs during retrieval
1641 Extracts text from specific regions of a PDF page and stores it for reuse. @param page the PDPage object representing the PDF page to extract from @throws IOException if an I/O error occurs during extraction
1642 Retrieves the fly scale value for page transitions. @return float value representing the fly scale, or 1 if not set
1643 Retrieves the duration of the page transition in seconds. @return float value representing duration; defaults to 1 if not found/invalid
1644 Retrieves the width of border style from COSDictionary object. Handles Adobe behavior for COSName instances. @return float value representing border width; defaults to 1 if not found or invalid
1645 Retrieves the constant opacity of the annotation markup. @return Constant opacity value (default is 1 if not set)
1646 Returns leader line offset length from PDF document. @return Float value of leader line offset length; defaults to 0 if not found
1647 Retrieves the leader line extension length of the annotation. @return float value representing the leader line extension length
1648 Retrieves the descent value of the font descriptor. @return The descent value as a float, defaults to 0 if not found/invalid.
1649 Retrieves the leading value of the font descriptor, defaulting to 0 if not found. @return float value representing the leading attribute of the font descriptor
1650 Retrieves the Cap Height value from the font descriptor dictionary. Handles negative values by returning their absolute value. @return Cap Height value in the PDF document's font descriptor
1651 Retrieves and ensures a positive X-height value from the font descriptor dictionary. @return The X-height value of the font, converting to absolute if negative (as per PDFBOX-429)
1652 Retrieves the stem vertical width from font descriptor dictionary. @return stem vertical width as a float value (default: 0 if not found)
1653 Retrieves the horizontal stem width from font descriptor dictionary. @return Horizontal stem width as a float; defaults to 0 if not found/invalid
1654 Retrieves the non-stroking alpha constant from the PDF dictionary. @return float value representing the non-stroking alpha constant, or null if not found or invalid.
1655 Retrieves the average width of the font descriptor. @return average width as a float value, or 0 if not found/invalid
1656 Retrieves the missing width value from the font descriptor dictionary. @return the missing width value or default (0) if not found/invalid
1657 Retrieves gamma value from PDF color dictionary. Defaults to 1.0 if not found. @return float representing the gamma value in CALGRAY color space
1658 Retrieves the X step value of the tiling pattern. @return float value representing the X step, or 0 if not found/invalid
1659 Returns the Y step value of the tiling pattern. Uses a default value of 0 if not found or invalid. @return float representing Y step distance in pattern
1660 Retrieves the sound volume level for this PDF action. @return float value representing volume (-1 to 1), default is 1 if invalid.
1661 Retrieves the leader line length of the annotation using a key. Defaults to 0 if key is not found or value is not a number. @return float value representing the leader line length
1662 Retrieves the maximum width of the font from its descriptor dictionary. @return Maximum width value or default of 0 if not found/invalid
1663 Retrieves font ascent value from the dictionary. @return Font ascent value, or 0 if not found/invalid.
1664 Writes a COSBase object to PDF and updates object references. @param obj the COSBase object to be written @throws IOException if I/O errors occur during writing
1665 Creates a specific PDAttributeObject based on the given dictionary's owner. @param dictionary manages PDF metadata and properties; critical for attribute data representation @return PDAttributeObject subclass instance based on the owner or default if unrecognized
1666 Retrieves and returns the type of this PDF font as a string. @return Font type as a string or null if not found/supported type
1667 Retrieves and returns the base font name as a string from the CID font dictionary. @return Base font name or null if not found/supported type
1668 Retrieves and returns the scale type name from the fit object. If not found, defaults to proportional scaling. @return String representing the scale type or default if not set
1669 Retrieves the scale option for icon fitting in FDF format. @return String representing the scale option, defaults to "Always" if not found.
1670 Retrieves the FDF document's encoding, defaults to "PDFDocEncoding" if not found. @return String representation of the FDF document's encoding
1671 Retrieves and returns the version of the FDF document as a string. @return The version string or null if not found/supported type
1672 Retrieves and returns the line ending style of the annotation as a string. @return Line ending style or null if not found/supported type
1673 Retrieves the intent of the PDF annotation as a string. @return String representation of the annotation's intent or null if not found/supported type
1674 Creates a FDFAnnotation instance based on the subtype of the given COSDictionary. @param fdfDic dictionary containing annotation data for PDFBox library @return FDFAnnotation object corresponding to the subtype or null if unsupported/unrecognized type
1675 Retrieves and returns the sub filter of PDF document encryption settings. @return The sub filter name as a string or null if not found/supported type
1676 Retrieves and returns the filter name as a string from the document's encryption dictionary. @return Filter name or null if not found/supported type
1677 Retrieves and returns the subtype of the marked content artifact as a string. @return Subtype of the marked content artifact or null if not found/supported type
1678 Retrieves and returns the type of marked content artifact as a string.
1679 Retrieves and returns the language property of marked content as a string. @return Language property or null if properties dictionary is missing or language not found
1680 Retrieves and converts user property name to string. @return User property name as a string or null if not found/supported type
1681 Retrieves and converts a named object to string with fallback. @param key unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
1682 Validates if the provided offset points to a valid XRef stream in PDF document. @param startXRefOffset long representation of the offset to check @return true if it's a valid XRef stream, false otherwise @throws IOException if an error occurs during reading or validation
1683 Retrieves and converts the document's page mode to an enum value. @return Corresponding PageMode or USE_NONE if not found/invalid.
1684 Fetches and interprets the page layout of a PDF document. @return PageLayout enum or defaults to SINGLE_PAGE if invalid/missing.
1685 Retrieves and returns the version of the PDF document as a string. @return String representation of the PDF version or null if not found/supported type
1686 Retrieves and returns the trapped attribute of the PDF document as a string. @return Trapped attribute value or null if not found/supported type
1687 Retrieves and converts dictionary value to string using a PDF name as the key. @param key input string for the COSName used as the dictionary key @return String representation of the dictionary value or null if not found/supported type
1688 Exports options from PDF choice field. @return List of string options; empty list if none found
1689 Retrieves and returns the type of the encapsulated PDF object as a string. @return Type name of the PDF object or null if not found/supported type
1690 Retrieves the owner of the PDF attribute as a string. @return String representation of the owner or null if not found/supported type
1691 Retrieves and returns the structure type of the PDF element as a string. @return Structure type or null if not found/supported type
1692 Creates and returns the appropriate structure node based on its type. @param node COS dictionary representing the PDF structure element or tree root @return PDStructureNode instance of either PDStructureElement or PDStructureTreeRoot
1693 Retrieves and returns the type of this structure node as a string. @return String representation of the node's type or null if not found/supported type
1694 Retrieves and returns the page labeling style as a string. @return Page labeling style or null if not found/supported type
1695 Retrieves the italic angle of the font from the descriptor dictionary. @return italic angle in degrees or 0 if not specified
1696 Returns the weight of the font. Uses a default value of 0 if not found. @return float representing the font weight, or 0 if not specified
1697 Retrieves the opacity level of the annotation using COSName.CA (constant key). Defaults to full opacity (1.0) if no value is found or it's invalid. @return float representing the opacity level, ranging from 0.0 (invisible) to 1.0 (fully visible)
1698 Retrieves quad points from the link annotation's COS object. @return Float array of quad points or null if not found
1699 Retrieves the horizontal offset for annotation caption. @return Horizontal offset as float; defaults to 0 if not found
1700 Retrieves the endpoint ending style from a COSArray. @return Endpoint style name or default if not found/applicable
1701 Retrieves the ending style of the line's start point. Uses COSArray to get and validate end point style. @return Ending style name or default if not found/applicable
1702 Retrieves line coordinates from the COSArray object using key "L". @return Float array of line coordinates or null if not found
1703 Retrieves and converts the list of ink annotations to a 2D float array. @return A 2D float array representing ink annotation data or empty arrays if not found.
1704 Retrieves the callout coordinates for a free text annotation. @return Float array of callout coordinates; returns null if not found
1705 Retrieves rectangle differences from the annotation's COS object. @return Float array of rectangle differences; empty if not found
1706 Retrieves and converts rectangle difference values from a COSArray. @return Float array of rectangle differences, or empty if not found.
1707 Retrieves form fields from the PDF document. @return COSArray of form field objects; may be null if none exist
1708 Retrieves form fields from PDF document using unique identifier. @return COSArray of form fields; otherwise, returns null if not found
1709 Retrieves and constructs a PDFontSetting object using the FONT key in the COSDictionary. @return PDFontSetting if FONT exists; otherwise, returns null
1710 Retrieves the decode values array from the COS object. @return COSArray containing decode values; may be null if not found or initialized
1711 Retrieves the coordinates array from the COS object. Initializes and caches if not already present. @return The COSArray of coordinates or null if not found in the COS object
1712 Retrieves the domain of shading properties as a COSArray. Lazily initializes from document if not already set. @return The domain as a COSArray, or null if not found in the document.
1713 Retrieves and caches the EXTEND array from the COS object, if not already cached. @return the EXTEND COSArray or null if not found
1714 Retrieves the shading domain array from the COS object. @return The COSArray representing the shading domain, or null if not found
1715 Retrieves and constructs a list of FDFPages from the document's PAGES array. @return List of FDFPage objects or null if no PAGES array is present
1716 Retrieves child fields (kids) from the current FDFField object. @return List of child FDFField objects or null if not found
1717 Retrieves and processes optional field values from the FDF document. @return List of Objects (Strings or FDFOptionElements) or null if not present
1718 Retrieves and returns a list of templates from the page's data. @return List<FDFTemplate> if templates exist; otherwise, returns null.
1719 Retrieves all form fields from the FDF template's dictionary. @return List of FDFField objects or null if no fields exist
1720 Retrieves the vertices of a polygon annotation as a float array. @return Float array of vertex coordinates or null if not found.
1721 Retrieves and caches the widths of characters in the font. @return List<Float> containing character widths or an empty list if not found
1722 Retrieves the transformation matrix from the color dictionary. @return Float array representing the matrix; defaults to identity if not found
1723 Retrieves and returns a list of component names from the COSArray associated with COMPONENTS key.
1724 Fetches the background array from shading dictionary.
1725 Retrieves and parses the polygon's vertices from COSArray. @return Float array of vertices or null if not found.
1726 Retrieves the starting point ending style from COSArray. @return Name of ending style or default if not found/applicable.
1727 Retrieves the endpoint ending style from COSArray using LE key. @return Endpoint style name or default if not found/applicable
1728 Retrieves an array of PDNumberFormatDictionaries representing angles. @return Array of PDNumberFormatDictionaries for angle formatting; or null if not found
1729 Retrieves an array of line slope format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found
1730 Retrieves the origin coordinates of the measurement system. @return Float array representing origin coordinates; returns null if not found
1731 Retrieves the visibility policy from the PDF document dictionary. @return COSName object representing the visibility policy or ANY_ON by default.
1732 Retrieves a long value from dictionary using given string key. @param key unique identifier for the value as a string @return the long value or -1 if the key is not found/valid
1733 Retrieves a long value from dictionary using key. Defaults to -1 if not found or not a COSNumber. @param key unique identifier for the value @return long value or default -1 if key is not a COSNumber
1734 Retrieves an array of PDNumberFormatDictionaries representing areas. @return Array of PDNumberFormatDictionaries for areas or null if not found.
1735 Retrieves a long value from dictionary using given string key or returns default if not found. @param key string identifier for the value @param defaultValue fallback value if key is not found or not a COSNumber @return the long value or defaultValue if the key is not a COSNumber
1736 Sets the start xref value and resolves cross-reference trailers. @param startxrefBytePosValue The byte position of the starting XRef object
1737 Retrieves a float value from dictionary by string key, with fallback. @param key unique identifier for the float value as a string @return float value associated with key, or -1 if not found/invalid
1738 Retrieves a float value from dictionary using a key. Falls back to default value (-1) if key is not found or value is invalid. @param key unique identifier for the float value @return float value associated with key, or -1 if not found/invalid
1739 Retrieves or creates a COSName instance and uses it to fetch a float value from the dictionary. @param key input string for the COSName @param defaultValue fallback value if key is invalid or non-numeric @return float value associated with key, or defaultValue if not found/invalid
1740 Retrieves the user unit value for the PDF page. Uses a default of 1.0f if not found or invalid. @return User unit value for the PDF page, defaults to 1.0f if invalid.
1741 Retrieves the width of the guideline from the COSDictionary. Defaults to 1 if not found.
1742 Retrieves and returns the subtype of the PDF font as a string. @return Subtype name or null if not found/supported type
1743 Retrieves an array of number format dictionaries representing distances. @return Array of PDNumberFormatDictionary objects or null if not found
1744 Retrieves an array of number format dictionaries for change in X. @return Array of PDNumberFormatDictionary objects or null if not found
1745 Retrieves the vertex coordinates of a polyline annotation. @return Float array of vertex coordinates; returns null if not found
1746 Retrieves rectangle differences as a float array. @return Float array of rectangle differences or empty if not found
1747 Retrieves and converts quad points for text markup annotation. @return Float array of quad points or null if not available
1748 Retrieves and converts sub-filter names from the PDF document's dictionary. @return List of sub-filter names; empty if not found or no sub-filters exist.
1749 Retrieves the digest methods used in the PDF signature. @return List of String names representing digest methods; empty if none found
1750 Retrieves and converts the reasons from COSArray to a list of strings. @return List of String reasons; an empty list if not found
1751 Retrieves an array of PDNumberFormatDictionaries for Y coordinates. @return Array of PDNumberFormatDictionaries or null if not found
1752 Retrieves legal attestation names from the PDF dictionary. @return List of String legal attestation names; empty if not found
1753 Retrieves and returns the list of key usage extensions from a COSDictionary. @return List of key usage strings or null if not found in the dictionary
1754 Retrieves the issuer's byte arrays from the certificate data. @return List of byte arrays representing the issuer, or null if not found
1755 Retrieves the Object Identifier (OID) from the certificate data. @return List of byte arrays representing OIDs; returns null if not found
1756 Retrieves the byte range from a COSArray within the PDF dictionary. @return int array of byte ranges or empty if not found
1757 Retrieves the calculation order of form fields from the PDF document. @return List of PDField objects in their calculated order, or an empty list if none found
1758 Retrieves the indexes of selected options from a COSArray object. @return List<Integer> with indexes; empty if no selection or error occurs
1759 Extracts subject byte arrays from the certificate's dictionary data. @return List of byte arrays representing subjects; returns null if not found
1760 Retrieves and returns the font name from the PDF document's descriptor. @return Font name as a string or null if not found/supported type
1761 Retrieves and returns the font stretch attribute as a string. @return Font stretch value or null if not found/supported type
1762 Retrieves and returns the base font name from the font dictionary. @return Base font name as a string or null if not found/supported type
1763 Retrieves the operating system name from a COSArray or string in the dictionary. @return Name of the operating system; otherwise, returns null if not found/applicable
1764 Retrieves the date from the PDF signature properties dictionary. @return the date as a string; null if not found
1765 Retrieves an alternate caption for PDF annotation appearance. @return Alternate caption string if present; otherwise, null
1766 Retrieves rollover caption from annotation's visual attributes. @return rollover caption string if it exists; otherwise, null
1767 Retrieves the normal caption of PDF annotation appearance characteristics. @return normal caption string or null if not set
1768 Retrieves the state model of the annotation from its COS object. @return the state model as a string; otherwise, null if not found
1769 Retrieves the state of the annotation as a string from its COS object. @return current state of the annotation or null if not defined
1770 Retrieves the subject of the annotation from its COS object. @return the subject as a string, or null if not found
1771 Retrieves the title of the popup annotation, if it exists. @return Title string or null if not present in the COS object.
1772 Retrieves the default style string from the annotation's dictionary. @return the default style string or null if not found
1773 Retrieves default appearance string from the COS object using DA key. @return Default appearance string or null if not found
1774 Retrieves the name of the annotation from its internal structure. @return Annotation name as a string or null if not found
1775 Fetches and returns the modified date of the annotation.
1776 Retrieves the contents of the annotation from the COSDictionary. @return string representation of the annotation's content; null if not found
1777 Retrieves the execute parameter from the launch parameters dictionary. @return the execute parameter string if it exists; otherwise, null
1778 Retrieves the directory from the launch parameters. @return the directory string if it exists; otherwise, null
1779 Retrieves the filename from launch parameters. @return the filename as a string or null if not found
1780 Removes a user property and updates the document structure. @param userProperty object to be removed
1781 Retrieves and returns the name of the OCG (Optional Content Group) from its dictionary. @return the name of the OCG as a string or null if it doesn't exist
1782 Retrieves a list of maps containing Subject DN attributes from the certificate dictionary. @return List of maps with attribute names and values; returns null if no Subject DN is found
1783 Retrieves the names of all optional content groups (OCGs) in the document. @return array of group names or empty if none exist
1784 Retrieves the destination string from the PDF action. @return the destination string or null if not found
1785 Retrieves the operating system specific launch parameter from the action dictionary. @return the OS-specific launch parameter string or null if it doesn't exist
1786 Retrieves the 'P' parameter string from the PDF document action dictionary. @return The 'P' parameter string or null if not found
1787 Retrieves the URI from the COSDictionary of the action object. @return The URI as a string if present and valid; otherwise, null
1788 Retrieves the filename from the target directory's dictionary
1789 Retrieves the name of the annotation from the PDF dictionary. @return the annotation name as a string, or null if not found
1790 Retrieves the file specification string from the PDF launch action. @return the file specification string or null if not found
1791 Retrieves the URL from the certificate's dictionary. @return the URL string, or null if not found
1792 Retrieves and returns the URL stored in the PDF signature's dictionary. @return The URL string, or null if it doesn't exist.
1793 Retrieves the name of the digital signature from its COSDictionary structure. @return the name of the digital signature or null if not found
1794 Retrieves a number or name based on input key. @param name the key to retrieve object from dictionary @param defaultValue fallback value if object is not found or not a number/name @return float value, string name, or default value based on object type
1795 Retrieves a number or array of numbers from the COSDictionary using given name. @param name key for dictionary object @param defaultValue fallback value if no valid number is found @return float value, float[] values, null, or defaultValue based on retrieved object type and defaultValue
1796 Retrieves a PDGamma object for the given color name from the COSDictionary. @param name the key to retrieve the color array @return PDGamma object or null if not found in the dictionary
1797 Generates a unique key for a given resource kind and prefix by appending an incrementing number. @param kind the type of resource @param prefix the initial string for the key @return a unique COSName instance representing the key
1798 Retrieves a name or an array of names from the PDF structure. @param name key for dictionary object @param defaultValue fallback value if not found @return single name, array of names, or default value
1799 Retrieves and returns a sub-dictionary of appearance streams. @throws IllegalStateException if the entry is not an appearance subdictionary @return Map containing COSName as key and PDAppearanceStream as value
1800 Retrieves a PDF destination by name from the dictionary. @param name unique identifier for the destination @return PDDestination object or null if not found or invalid type
1801 Retrieves and creates a destination from the COS object's dictionary. @return PDDestination object or null if input is invalid @throws IOException for errors in retrieving dictionary or conversion
1802 Creates a PDDestination object from the COS dictionary data. @return PDDestination object or null if input is invalid @throws IOException for unknown destination types or errors in conversion
1803 Retrieves and creates a destination object from the COS dictionary. @return a PDDestination object or null if input is invalid @throws IOException for errors in conversion or unknown destination types
1804 Retrieves and creates the destination for this outline item. @return a PDDestination object or null if input is invalid @throws IOException for errors in conversion or unknown destination types
1805 Creates and returns an appropriate PDXObject based on the subtype of a COSStream. @param base COSBase object to create PDXObject from (must be COSStream) @param resources associated PDResources for managing resources @return PDXObject instance corresponding to the stream's subtype @throws IOException if base is not a COSStream or has an invalid subtype
1806 Removes a subject from the certificate data in PDF document. @param subject byte array representing the subject to be removed
1807 Retrieves an array of string values for a given attribute name. @param name the key for dictionary object @return Array of strings or null if not COSArray or contains non-COSName objects
1808 Retrieves attribute value by name or returns a default value if absent. @param attrName the attribute's name @param defaultValue the value to return if attribute is not found @return COSBase object representing the attribute value or defaultValue if not found
1809 Retrieves the location string from the signature's metadata. @return the location string if it exists; otherwise, null
1810 Retrieves the reason string from the signature's COSDictionary. @return The reason for the digital signature, or null if not found
1811 Retrieves contact information from the digital signature's metadata. @return Contact information string; null if not available.
1812 Retrieves the title of the outline item from its COS object. @return the title as a string; null if not found
1813 Retrieves partial field name from PDF document's AcroForm structure. @return partial field name as a string or null if not found
1814 Retrieves an alternate field name from the PDF document's dictionary. @return The alternate field name if it exists; otherwise, null
1815 Checks if a specific attribute is specified in the COSDictionary. @param name the name of the attribute to check @return true if attribute is present, false otherwise
1816 Retrieves the mapping name of the field from its dictionary. @return the mapping name as a string or null if not found
1817 Retrieves the scale ratio from the COSDictionary. @return the scale ratio as a string; otherwise, null
1818 Retrieves and converts the role map from a COSDictionary to a Java Map. @return Role map as a Map<String, Object>; empty map if not found or conversion fails
1819 Retrieves and converts the list of string values associated with 'V' key.
1820 Retrieves default value(s) for choice field. @return list of default string values, or an empty list if not set
1821 Navigates through a path of keys or indices to retrieve an object from the COSBase instance. @param objPath string representation of the path @return COSBase object at the end of the path or null if not found
1822 Fetches attribute value by name from the PDF document dictionary.
1823 Retrieves the default style string from the COS object. @return the default style string or null if not found
1824 Retrieves and encapsulates all form fields from the FDF document. @return List of FDFField objects or null if no fields are present
1825 Removes a specific key usage extension from the certificate dictionary. @param keyUsageExtension the extension to be removed as a string
1826 Removes a specific OID from the certificate's dictionary. @param oid byte array representing the OID to be removed
1827 Retrieves the Unicode string representation of the file specification. @return the Unicode string if it exists; otherwise, null
1828 Retrieves the page label prefix from the PDF document. @return The page label prefix, or null if not set
1829 Retrieves the producer information of the PDF document. @return a string representing the document's producer, or null if not found
1830 Retrieves the creator of the PDF document.
1831 Retrieves and returns document keywords from metadata. @return document keywords as a string, or null if not found
1832 Retrieves the subject metadata of the PDF document. @return The subject string if it exists; otherwise, null
1833 Retrieves the author's name from the PDF document metadata. @return The author's name as a string, or null if not found.
1834 Retrieves the title of the PDF document. @return The document's title as a string, or null if not found.
1835 Retrieves and returns the language of the PDF document. @return The language string if it exists; otherwise, null
1836 Retrieves a string from the dictionary using a given key. If the key is not found, returns a default value. @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
1837 Fetches a string from dictionary using given key. Utilizes caching and thread-safety for efficiency. @param key unique identifier for the string object @return the string if it exists; otherwise, null
1838 Retrieves and returns the duplex setting as a string. @return Duplex setting name or null if not found/supported type
1839 Fetches and returns the name of the viewport settings as a string. @return Name of the viewport settings or null if not found/supported type
1840 Retrieves and returns the field type as a string from this PDF non-terminal form field. @return String representation of the field type or null if not found/supported type
1841 Retrieves and returns the subfilter name from the signature's dictionary. @return String representation of the subfilter or null if not found/supported type
1842 Retrieves and returns the filter name as a string from the PDF signature dictionary. @return The name of the filter used in the digital signature or null if not found/supported type.
1843 Retrieves and returns the URL type from the certificate's dictionary. @return String representation of the URL type or null if not found/supported type
1844 Retrieves and returns the base font name as a string from the dictionary object.
1845 Retrieves and returns the base font name as a string from the dictionary. @return The base font name or null if not found/supported type
1846 Retrieves and returns the base font name as a string. @return Base font name or null if not found/supported type
1847 Checks if the color space subtype is "NChannel". @return true if subtype equals "NChannel", false otherwise
1848 Retrieves and returns the type of PDF action as a string. @return String representation of the action's type or null if not found/supported type
1849 Retrieves the file name from the complex file specification. @return the file name as a string; null if not found or not set
1850 Retrieves and returns the subtype of the PDF document action as a string. @return Subtype of the action or null if not found/supported type
1851 Retrieves and returns the annotation subtype as a string. @return Subtype of the annotation, or null if not found/supported type
1852 Retrieves and returns the caption positioning of the line annotation as a string. @return String representation of the caption positioning or null if not found/supported type
1853 Retrieves and returns the intent of the annotation as a string. @return The name of the intent or null if not found/supported type
1854 Retrieves the subtype attribute from external data dictionary. @return Subtype attribute as a string or null if not found/supported type
1855 Retrieves and returns the name from the PDF signature dictionary
1856 Retrieves and returns the filter name as a string from the PDF signature dictionary. @return Filter name as a string or null if not found/supported type
1857 Creates a PDF action from a COSDictionary. @param action dictionary containing action details @return PDAction object corresponding to the action type or null if invalid/unsupported
1858 Retrieves DOS file system representation from the complex file specification. @return string representing DOS file system; null if not found
1859 Retrieves and returns the MAC (Machine Address Code) of the file specification. @return MAC as a string; null if not found
1860 Retrieves the Unix file specification string from the PDF dictionary. @return the Unix file specification if it exists; otherwise, null
1861 Retrieves the default appearance string of the free text annotation. @return The default appearance string or null if not defined.
1862 Retrieves the default style of the free text annotation from the COSDictionary. @return the default style string or null if not found in the dictionary
1863 Retrieves the caption style of the line annotation from PDFBox's FDF dictionary. @return the caption style as a string; otherwise, null if not found
1864 Retrieves the state of the text annotation from its dictionary. @return the current state as a string, or null if not found
1865 Retrieves and returns the state model of this text annotation. @return a string representing the state model or null if not found
1866 Retrieves the status from the FDF document. @return the status string, or null if not found
1867 Retrieves and returns the rotation value of the free text annotation. @return rotation value as a string or null if not found
1868 Retrieves the target string from the FDF document. @return The target string or null if not found
1869 Retrieves the name of the referenced page from the FDF context. @return the page name as a string or null if it's not found
1870 Retrieves the font family name from the PDF descriptor. @return the font family name as a string, or null if not found
1871 Retrieves and returns the character set of the PDF font descriptor. @return the character set as a string, or null if not found
1872 Retrieves the lower limit from node's limits array. @return String representation of lower limit or null if unavailable
1873 Retrieves the upper limit string from the node's limits array, if available. @return Upper limit string or null if unavailable
1874 Retrieves partial field name using key COSName.T. @return partial field name as a string or null if not found
1875 Removes a specified issuer from the certificate's dictionary. @param issuer byte array representing the issuer to be removed
1876 Retrieves the symbol used in the caret annotation from the PDF document. @return the symbol string or null if not found
1877 Retrieves the title of the PDF annotation. @return Title string or null if not found
1878 Retrieves the description of the file from the complex specification. @return The file description as a string or null if not found
1879 Retrieves the unique identifier of the PDF structure element. @return string representing the element's ID or null if not found
1880 Retrieves the title of the PDF structure element using COSName.T as key. @return The title string if it exists; otherwise, null.
1881 Retrieves the language of the PDF document structure element. @return the language as a string; otherwise, null if not found
1882 Retrieves an alternate description from the PDF element's COS object.
1883 Retrieves the expanded form of the PDF structure element. @return expanded form string if it exists; otherwise, null
1884 Retrieves the subject of the PDF annotation.
1885 Retrieves actual text from the COS object using a predefined key. @return the actual text string if it exists; otherwise, null
1886 Retrieves the actual text property from marked content properties. @return actual text if available; otherwise, null
1887 Retrieves the alternate description from PDF properties. @return String representing the alternate description or null if not found
1888 Retrieves the expanded form of marked content from properties dictionary. @return Expanded form string or null if not available
1889 Fetches and returns the modification date of the PDF annotation. @return mod date string or null if not found
1890 Retrieves the name of this PDF annotation using a unique identifier. @return the name if it exists; otherwise, null
1891 Retrieves and returns the contents of the PDF annotation
1892 Retrieves and returns the formatted value from the COS object's dictionary using a predefined key. @return the formatted string value or null if not found
1893 Retrieves the unique identifier of the FDF document as a COSArray. @return COSArray containing the document ID; returns null if not found
1894 Retrieves the vertical offset for a line annotation's caption. @return Vertical offset as float; defaults to 0 if not found
1895 Retrieves the interior color of the annotation as a Color object. @return Interior color or null if not defined in the annotation
1896 Retrieves the parent tree of this node from its COSDictionary. @return PDNumberTreeNode object or null if no parent tree exists
1897 Retrieves the ID tree structure node from COSDictionary. @return PDStructureElementNameTreeNode if ID tree exists; otherwise, null
1898 Fetches and returns a PDPage object from the PDF document's structure, if it exists. @return PDPage object or null if not found in the document structure
1899 Fetches a PDPage from the COSDictionary using the PG key. @return PDPage object or null if not found in dictionary
1900 Retrieves the associated PDF page from the marked content reference. @return PDPage object or null if not found in the COSDictionary
1901 Retrieves names of a specific resource type from the PDF document. @param kind the resource type (e.g., COSName.FONT) @return Iterable of COSNames or an empty set if not found
1902 Retrieves a specific resource object from the PDF document. @param kind type of resource (e.g., Font, ColorSpace) @param name unique identifier for the resource @return the COSBase object representing the resource or null if not found
1903 Retrieves a COSObject from the resources dictionary using given kind and name. @param kind resource type identifier, such as Font or ColorSpace @param name unique identifier for the object within its resource type @return COSObject if found; otherwise, null
1904 Retrieves the transition effect for the PDF page, if present. @return PDTransition object or null if not found
1905 Retrieves the JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode if it exists; otherwise, null
1906 Retrieves the embedded files name tree node from the document's name dictionary. @return PDEmbeddedFilesNameTreeNode if it exists; otherwise, null.
1907 Retrieves the destination name tree node from document dictionary or catalog. @return Destination name tree node if available; otherwise, null
1908 Retrieves optional content properties from the PDF document. @return PDOptionalContentProperties object if present; otherwise, null
1909 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
1910 Retrieves the URI dictionary from the PDF document's root, if it exists. @return a PDURIDictionary object or null if not found in the document.
1911 Retrieves marking information from the PDF document's catalog dictionary. @return PDMarkInfo object or null if not present in the document
1912 Retrieves and processes a map of class names to their corresponding attribute objects or lists. @return Map containing class names as keys and PDAttributeObjects or Lists thereof as values
1913 Retrieves the named destination dictionary for a PDF document. @return PDDocumentNameDestinationDictionary if it exists; otherwise, null
1914 Retrieves a crypt filter dictionary by name from the encryption settings. @param cryptFilterName unique identifier for the crypt filter @return PDCryptFilterDictionary or null if not found
1915 Retrieves the border effect dictionary for annotation. @return PDBorderEffectDictionary or null if not present in COSDictionary
1916 Retrieves the target directory from current dictionary or returns null if not found. @return PDTargetDirectory object if exists; otherwise, null.
1917 Retrieves and constructs windows-specific launch parameters from the action's dictionary. @return PDWindowsLaunchParams object if available; otherwise, null
1918 Retrieves the target directory for navigation within a PDF document. @return a PDTargetDirectory object if it exists; otherwise, null
1919 Retrieves and initializes PDF document resources for tiling patterns. @return PDResources object or null if not found in COSDictionary
1920 Retrieves or initializes an extended graphics state for the PDF document. @return PDExtendedGraphicsState object if available; otherwise, null
1921 Retrieves and returns the rendering state for a given destination (PRINT, VIEW). @param destination the rendering destination (PRINT or VIEW) @return corresponding RenderState or null if not found
1922 Retrieves and initializes the DeviceN process using a COSDictionary. @return PDDeviceNProcess object if dictionary exists; otherwise, null
1923 Retrieves the character procedures dictionary for this font. @return COSDictionary object containing character procedures or null if not defined
1924 Fetches and initializes PDF document resources. @return PDResources object or null if not available
1925 Retrieves and constructs the PANOSE object from PDF style dictionary. @return PDPanose object if available; otherwise, null.
1926 Retrieves and constructs CID system info from the font dictionary. @return PDCIDSystemInfo object if available; otherwise, null
1927 Retrieves a named page reference from the FDF template. @return FDFNamedPageReference if it exists; otherwise, null
1928 Retrieves and returns additional actions associated with the FDF field. @return PDAdditionalActions object if available; otherwise, null
1929 Retrieves the icon fitting configuration for a form field. @return FDFIconFit object or null if not configured
1930 Retrieves the appearance stream reference for a form field. @return FDFNamedPageReference if it exists; otherwise, null
1931 Retrieves the appearance dictionary from the field's COSDictionary. @return PDAppearanceDictionary object or null if not found
1932 Retrieves the JavaScript object associated with this FDF document. @return FDFJavaScript object if present; otherwise, null
1933 Retrieves the PDF document's digital signature if present. @return PDSignature object or null if not found in FDF catalog.
1934 Retrieves border style properties from the annotation's dictionary. @return PDBorderStyleDictionary if it exists; otherwise, null
1935 Retrieves the named objects dictionary for the PDF document. @return PDDocumentNameDictionary or null if not found
1936 Retrieves and initializes the viewer preferences from a PDF document's catalog. @return PDViewerPreferences object or null if not found in the document.
1937 Retrieves the AcroForm from the document with optional fixup application. @param acroFormFixup Optional fixup to apply before retrieving the form. @return PDAcroForm object or null if not available.
1938 Parses a COS dictionary from PDF source and returns the result as an object. @param isDirect indicates if the dictionary is direct or not @return parsed COSDictionary object, may be incomplete on error @throws IOException if I/O errors occur during parsing
1939 Retrieves and returns the blend mode from the dictionary object. @return BlendMode instance or NORMAL if not found in dictionary
1940 Retrieves the end color from the collection as a PDGamma object. @return End color (PDGamma) or null if not found or invalid index
1941 Retrieves the start color at index 2 from the collection of four colors. @return Start color as a PDGamma object or null if not found or not an instance of COSArray
1942 Retrieves the second color value in the collection. @return PDGamma object or null if not found or invalid index
1943 Retrieves the first color value from the collection. @return PDGamma object or null if not found or invalid type
1944 Reads a vertex from an image stream with position and color values. @param input ImageInputStream to read data from @param maxSrcCoord maximum source coordinate value @param colRangeTab array of PDColor ranges for components @return Vertex object containing transformed point and color component values
1945 Reads and constructs a patch from an input stream for mesh-based shading. @param input data source @param isFree flag indicating if the patch is free or implicitly defined @return constructed Patch object, or null upon EOFException @throws IOException for input/output errors
1946 Evaluates a type 4 PDF function with input values, applying range clipping and returning output values. @param input Array of float values to be processed by the function @return Array of float values resulting from the evaluation and range clipping @throws IOException if an I/O error occurs during execution
1947 Returns a string representation of the PDRange. @return A string in format "PDRange{minValue, maxValue}"
1948 Initializes the line dash pattern from a COSArray and adjusts the phase if necessary. @param array COSArray defining dash lengths @param phase Dash pattern phase, adjusted to be positive if initially negative
1949 Initializes a PDRectangle object from a COSArray, handling potential invalid values. @param array Input array containing rectangle coordinates (4 elements)
1950 Creates a matrix from provided base object, ensuring it's valid for transformation. @param base potential COSArray or other object containing transformation values @return Matrix instance with transformation parameters or default if invalid input
1951 Retrieves a COS dictionary using two keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return COSDictionary object or null if both keys fail
1952 Retrieves a boolean value from the dictionary using two keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @param defaultValue fallback value if neither key is found @return boolean value or defaultValue if not found or invalid type
1953 Retrieves an integer value from the dictionary using given keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @param defaultValue fallback value if no valid number is found @return integer value or defaultValue if not a COSNumber
1954 Parses and validates the FDF document's trailer. Throws an exception if the root object is missing. @throws IOException if there's an issue retrieving or parsing the trailer, or if the root object is not found
1955 Retrieves the encryption dictionary from the PDF document's trailer. @return COSDictionary containing encryption settings or null if none exists
1956 Checks if the PDF document is encrypted. @return true if encrypted; false otherwise
1957 Fetches appearance state of annotation from its internal structure.
1958 Retrieves the relationship type of the target directory. @return COSName representing the relationship, or null if not found
1959 Retrieves the subtype of this soft mask. Initializes it if not already set. @return The COSName representing the subtype or null if not found.
1960 Converts a code into its equivalent Unicode representation using ToUnicode CMap. @param code The input character code to convert @return Unicode string or null if conversion is not possible
1961 Retrieves and returns the string filter name from the document's dictionary. @return The COSName object for the string filter; defaults to IDENTITY if not set.
1962 Retrieves the stream filter name from the document's dictionary. @return the stream filter name as a COSName; defaults to IDENTITY if not found
1963 Retrieves the appearance attributes of an annotation as a PDAppearanceDictionary. @return PDAppearanceDictionary or null if not found in COSDictionary
1964 Retrieves the cryptographic filter method from the dictionary. @return COSName object representing the crypt filter method.
1965 Retrieves and converts the quad points of an annotation to float array. @return Float array representation of quad points or null if not found
1966 Fetches and returns the color space for PDF document shading. @return PDColorSpace object or null if not defined in dictionary @throws IOException if error occurs during creation of color space
1967 Retrieves and converts image filter names from parameters. @return List of String filter names or an empty list if none found
1968 Checks if a COSDictionary is a page tree node in the PDF document. @param node the dictionary to check @return true if it's a page tree node, false otherwise
1969 Retrieves a PDPage using the underlying COSDictionary object. @return PDPage if it exists; otherwise, null
1970 Retrieves detailed page information from the COSDictionary. @return FDFPageInfo object or null if no page information exists
1971 Retrieves and returns border style dictionary if available, else returns null. @return a PDBorderStyleDictionary object or null if not found
1972 Retrieves document ID array from trailer dictionary. @return Document ID array or null if not found.
1973 Retrieves alternate icon for PDF annotation as a form XObject. @return PDFormXObject containing alternative icon or null if not found
1974 Retrieves the border effect dictionary from the annotation's COS object. @return PDBorderEffectDictionary or null if not found
1975 Retrieves the normal icon as a form XObject from the annotation's COSDictionary. @return PDFormXObject representing the icon or null if not found
1976 Retrieves the sound stream associated with the PDF action. @return COSStream object containing sound data; null if not found
1977 Retrieves the CID set stream from the PDF document. @return PDStream object for CID set or null if not found
1978 Retrieves and returns a list of output intents from the document's root dictionary. @return List<PDOutputIntent> containing output intent information, or an empty list if none found.
1979 Retrieves the ending style of start point for line annotation. @return Name of ending style or "None" if not found/applicable
1980 Retrieves the font file 2 from the PDF document's dictionary, if available. @return PDStream object for FONT_FILE2 or null if not found
1981 Retrieves the ending style of line annotation's endpoint. @return Ending style name or "None" if not defined
1982 Retrieves the interior color from an annotation's COSArray. @return Interior color as a Color object or null if not found.
1983 Retrieves the font file stream from PDF dictionary using a unique identifier. @return PDStream object if found; otherwise, null
1984 Retrieves the differences stream from FDF document. @return COSStream object for differences; otherwise, null
1985 Retrieves and encapsulates the metadata stream for this PDF page. @return PDMetadata object if available; otherwise, null.
1986 Retrieves the metadata from the PDF document as a PDMetadata object. @return PDMetadata if found; otherwise, null
1987 Retrieves the associated PDF page from a threaded content bead. @return PDPage if found; otherwise, null
1988 Retrieves and encapsulates the font file 3's data stream from PDF document. @return PDStream object if found; otherwise, null
1989 Fetches thread beads from the PDF page's dictionary or creates a new array if not found. @return List of PDThreadBead objects extracted from page dictionary or an empty list if none exist
1990 Retrieves and constructs PDViewportDictionary objects from the page's COSArray. @return List of PDViewportDictionary or null if not found in the page's COSArray.
1991 Retrieves and creates child nodes from a COSArray of dictionaries. @return List of created PDNameTreeNode objects or null if no children exist
1992 Retrieves and initializes the bounds array from COS object if not already available. @return The bounds array, or null if it doesn't exist in the COS object.
1993 Retrieves the array of functions defined in the PDF document. @return COSArray containing function definitions or null if not found
1994 Retrieves decoded values or defaults to range values if not present. @return COSArray of decoded values or range values as fallback
1995 Retrieves the size array from the COS object, or returns a cached value if available. @return The COSArray representing the size of the PDF function type 0 data
1996 Retrieves the domain values for this PDFunction instance, or creates and stores them if not already defined. @return COSArray containing domain values
1997 Fetches and stores range values from COS object.
1998 Retrieves the lower limit value from a COSArray in the PDNumberTreeNode's node. @return Integer representing the lower limit or null if not found
1999 Retrieves the upper limit value from COSArray using LIMITS key, if available. @return Upper limit integer value or null if not found.
2000 Retrieves and constructs owner user properties from COSArray P. @return List of PDUserProperty objects extracted from COSArray P
2001 Checks if an edge is attached to the marked content artifact. @param edge The edge identifier to check for attachment @return True if edge is found in the attached list, otherwise False
2002 Retrieves the color of an annotation from a PDF document. @return Color object if found; otherwise, returns null.
2003 Retrieves the interior color from annotation's COSArray. @return Interior color as a Color object or null if not found/invalid
2004 Retrieves and converts the callout coordinates for a PDF annotation. @return Float array of callout coordinates, or null if not set.
2005 Retrieves and converts ink list from annotations to float arrays. @return List of float arrays representing ink data, or null if not found
2006 Extracts and converts numeric values from a COSArray into a Map. @return Map of integer keys to their corresponding COSObjectable values; null if error occurs @throws IOException if conversion fails or invalid data is encountered
2007 Retrieves line coordinates from the PDF annotation as a float array. @return Float array of line coordinates, or null if not found
2008 Retrieves and creates child nodes from the COSArray with key "KIDS". @return List of PDNumberTreeNode objects or null if no "KIDS" found.
2009 Retrieves and organizes names from a COSArray in the PDF document node. @return Map of names with their corresponding values; or null if not found @throws IOException if an unexpected object type is encountered in the array
2010 Retrieves the encoded COSArray for function evaluation. Initializes and returns 'encode' if not already set, using getCOSObject().getCOSArray(COSName.ENCODE). @return The encoded COSArray used in function evaluation
2011 Retrieves the horizontal offset for line caption. @return Horizontal offset as float; defaults to 0 if not found
2012 Returns the previous bead in a thread, or null if it doesn't exist. @return Previous PDThreadBead object or null if not found
2013 Retrieves the structure element from the PDF document. @return PDStructureElement if it exists; otherwise, null
2014 Fetches default resources from the PDF document. @return PDResources object or null if not found in dictionary
2015 Checks if this outline node has child nodes. @return true if children exist; otherwise, false
2016 Fetches the vertical offset for line caption from PDF annotation data. @return Vertical offset as a float; defaults to 0 if not found.
2017 Retrieves a PDPropBuild object from the digital signature properties. @return PDPropBuild object if it exists; otherwise, null
2018 Retrieves the timestamp from the seed value's COSDictionary. @return PDSeedValueTimeStamp object if present; otherwise, null
2019 Retrieves digital signature certificate from the PDF document. @return PDSeedValueCertificate object or null if not found in dictionary
2020 Retrieves the MDP (Modification Dictionary Permissions) from the seed value. @return a PDSeedValueMDP object if found; otherwise, null
2021 Retrieves the application data dictionary from the source COSDictionary. @return PDPropBuildDataDict if it exists; otherwise, null
2022 Retrieves the publication security data dictionary. @return PDPropBuildDataDict if found; otherwise, null
2023 Fetches the filter property from the PDF signature dictionary. @return PDPropBuildDataDict object or null if not found
2024 Retrieves the border effect dictionary for PDF annotation, if present. @return PDBorderEffectDictionary object or null if not found
2025 Retrieves the normal appearance entry from the dictionary.
2026 Retrieves and returns the border style dictionary if it exists; otherwise, returns null. @return PDBorderStyleDictionary or null if not found
2027 Retrieves additional action definitions for the annotation. @return PDAnnotationAdditionalActions object or null if not defined
2028 Retrieves appearance characteristics dictionary for annotation widgets. @return PDAppearanceCharacteristicsDictionary if it exists; otherwise, null
2029 Retrieves the interior color from annotation data. @return Interior color as a Color object or null if not found
2030 Writes a COSBase object to an OutputStream. Handles various types and compression pooling. @param output the destination stream for writing data @param object the COSBase object to be written @param topLevel indicates if this is the top-level call in recursive processing @throws IOException if an I/O error occurs during writing or unknown object type encountered
2031 Retrieves the signature's value from its underlying COS dictionary. @return a new PDSignature instance if found; otherwise, null.
2032 Retrieves and returns the next bead in the thread sequence, if available.
2033 Retrieves a PDThread object from the associated COSDictionary if available. @return PDThread object or null if no associated thread found
2034 Retrieves the previous URI action from a PDF document link annotation. @return PDActionURI object or null if not found
2035 Retrieves the vertex coordinates of the polygon annotation. @return Float array of vertex coordinates; returns null if not defined
2036 Retrieves the interior color of the polygon annotation. @return Interior color as a Color object; null if not defined or invalid.
2037 Retrieves and converts the vertex coordinates of a polyline annotation to float array. @return Float array representation of COSArray elements or null if not found.
2038 Retrieves external data dictionary from the annotation's COS object. @return External data dictionary or null if not present.
2039 Retrieves and encapsulates additional actions for the form field using a COSDictionary. @return PDFormFieldAdditionalActions object or null if not found in the dictionary
2040 Retrieves the first bead in the PDF document's thread. @return PDThreadBead object or null if not found
2041 Retrieves and encapsulates measure data within the viewport settings. @return PDMeasureDictionary or null if not found in COSObject.
2042 Retrieves and returns the border style dictionary, if available. Otherwise, it returns null. @return PDBorderStyleDictionary object or null if not found
2043 Retrieves the starting point ending style of line annotation. @return Name of COSName object or "None" if not found/applicable
2044 Fetches the endpoint ending style of a polyline annotation. @return Endpoint ending style name or "None" if not found
2045 Retrieves the seed value from the signature field's dictionary. @return PDSeedValue object if it exists; otherwise, null
2046 Retrieves the default signature value from a PDF document. @return PDSignature object if it exists; otherwise, null
2047 Retrieves document information for the current PDF thread. @return PDDocumentInformation object or null if not found
2048 Retrieves the border effect dictionary if it exists; otherwise, returns null. @return a PDBorderEffectDictionary object or null if not found
2049 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box, or null if not found.
2050 Retrieves the bounding box of the shading dictionary. @return A PDRectangle object representing the bounding box, or null if not defined.
2051 Retrieves the fringe dimensions of the square annotation as a PDRectangle object. @return PDRectangle if defined; otherwise, returns null
2052 Retrieves the bounding box of the form XObject as a COSArray and converts it to a PDRectangle. @return PDRectangle object representing the bounds or null if not found in COSArray
2053 Retrieves the fringe dimensions of the circular annotation from a COSArray. @return PDRectangle object if data is found; otherwise, returns null.
2054 Retrieves the font bounding box from a COSArray using a unique key. @return PDRectangle object or null if not found in dictionary
2055 Retrieves the font bounding box from PDF dictionary. @return PDRectangle object or null if not found in dictionary
2056 Retrieves the fringe of a free text annotation as a rectangle. @return PDRectangle object or null if not found
2057 Resolves the bounding box for a widget's appearance stream. Uses BBox from stream or retranslates fieldWidget rectangle if null. @param fieldWidget annotation widget, provides fallback rectangle @param appearanceStream contains bounding box info, may be null @return non-null PDRectangle representing the bounding box
2058 Initializes a new empty FDF document with default settings.
2059 Retrieves and validates the annotation's rectangle from its COSDictionary. @return PDRectangle object if valid; otherwise, logs warning and returns null
2060 Sets the bounding box for PDF layout attribute object and notifies changes. @param bbox PDRectangle object representing the new bounding box
2061 Sets or removes a color attribute in the PDF dictionary and notifies of changes. @param name attribute key to modify @param value PDGamma object for the color; if null, attribute is removed
2062 Sets or removes a four-color attribute in the PDF dictionary using a string name and its corresponding value. @param name String identifier for the color attribute @param value Four-color object to be set; if null, attribute is removed
2063 Initializes a PDPage object with default media box dimensions (Letter size).
2064 Retrieves or initializes the FDF dictionary from the PDF catalog. @return FDFDictionary object containing FDF data
2065 Adds a resource to the PDF document or retrieves its existing key. @param kind type of resource (font, color space, etc.) @param prefix initial string for new resource's key @param object COSObjectable representing the resource @return existing key if resource exists; otherwise, generates a new key and adds it to the document
2066 Adds or updates a font resource in the PDF document's dictionary. @param name unique identifier for the font resource @param font PDFont object representing the font to be added/updated
2067 Adds or updates a color space resource in the PDF document's dictionary.
2068 Adds or updates an extended graphics state resource in the PDF document's dictionary. @param name unique identifier for the extended graphics state @param extGState COSObjectable representing the extended graphics state to be added/updated
2069 Adds or updates a shading resource in the PDF document's dictionary.
2070 Adds or updates a pattern resource in the PDF document's dictionary. @param name unique identifier for the pattern @param pattern PDAbstractPattern object representing the pattern to be added/updated
2071 Adds or updates a property list resource in the PDF document's dictionary. @param name unique identifier for the property list @param properties PDPropertyList object to be added/updated
2072 Adds or updates an XObject resource in the PDF document's dictionary. @param name unique identifier for the XObject @param xobject PDXObject to be added/updated
2073 Retrieves the bounding box of marked content artifact. @return PDRectangle object or null if not found in properties.
2074 Retrieves the bounding box rectangle for PDF content. Uses a dictionary object to fetch and construct a rectangle. @return PDRectangle object or null if not found in the dictionary
2075 Retrieves the rectangle associated with the annotation. @return PDRectangle object if found; otherwise, returns null
2076 Retrieves the fringe dimensions for the caret annotation. @return PDRectangle object containing fringe dimensions or null if not found.
2077 Sets the fractional display option for numerical values in a PDF document. @param fractionalDisplay String representing the display style ("D", "F", "R", or "T"; null allowed)
2078 Retrieves rectangle difference if present, otherwise returns null. @return PDRectangle object or null if not found in COSArray
2079 Retrieves COSObjects with specified dictionary types from the document pool. @param type1,type2: Dictionary types to search for @return List of matching COSObjects or an empty list if none found
2080 Retrieves the bounding box of the viewport as a PDRectangle object. @return PDRectangle containing the bounding box or null if not found
2081 Decodes inline image data using specified filters and initializes the object. @param parameters COSDictionary containing image attributes @param data byte[] of encoded image data @param resources PDResources for additional resources (if needed)
2082 Determines the image file suffix based on its filters. @return Image file suffix as a String, defaults to "png".
2083 Converts input character code to Unicode using ToUnicode CMap. @param code The input character code to convert @return Unicode string or null if conversion is not possible
2084 Checks if the PDF document is encrypted. @return true if encrypted; false otherwise
2085 Parses the FDF document, including header validation and initial parsing. Throws an exception if any errors occur during these steps. @return FDFDocument object representing the parsed data or null if parsing fails @throws IOException if there are issues with reading the document or parsing its content
2086 Retrieves and initializes the AcroForm with default fixups for the PDF document. @return PDAcroForm object or null if not available in the document.
2087 Retrieves a color space resource by name from the PDF document. @param name unique identifier for the color space @param wasDefault flag indicating if it's the default color space @return PDColorSpace object or null if not found
2088 Checks if a specific color space resource is available in the PDF document. @param name unique identifier for the color space resource @return true if the color space exists, false otherwise
2089 Retrieves an extended graphics state by name from the PDF document's resources. @param name unique identifier for the extended graphics state @return PDExtendedGraphicsState object or null if not found
2090 Checks if a given name corresponds to an image XObject in the PDF document. @param name unique identifier for the resource @return true if it's an image XObject, false otherwise
2091 Retrieves names of all color spaces in the PDF document. @return Iterable of COSNames representing color space names, or an empty set if not found
2092 Retrieves names of all XObject resources in the PDF document. @return Iterable of COSNames or an empty set if not found
2093 Retrieves names of properties from the PDF document. @return Iterable of COSNames or an empty set if not found
2094 Retrieves an integer value from dictionary using keys. Defaults to -1 if not found. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return integer value or -1 if not a COSNumber
2095 Retrieves an integer value using a primary key. @param key primary key for retrieval @param defaultValue fallback value if not a COSNumber @return integer value or defaultValue if not found
2096 Retrieves the rectangle coordinates from a bead's COSArray, creating a PDRectangle object if available. @return PDRectangle with coordinates or null if not found
2097 Sets and applies a custom line dash pattern for graphics rendering. @param array Defines the lengths of dashes; phase is adjusted if negative. @param phase Adjusts the start point of the dash pattern within a cycle.
2098 Retrieves and constructs a line dash pattern from the COSDictionary. @return PDLineDashPattern object if valid; otherwise, returns null
2099 Creates a stencil image from given PDImage and applies specified paint. @param pdImage source image to create the stencil from @param paint paint object used for creating the stencil effect @return BufferedImage representing the stencil image
2100 Sets or removes the embedded Unicode file in the EF dictionary of the file system. @param file PDEmbeddedFile to be set; if null, removes the existing Unicode file
2101 Sets or removes an embedded file in the PDF document's EF dictionary. @param file PDEmbeddedFile to be set; if null, existing file is removed
2102 Retrieves and creates a transformation matrix from the PDF object's dictionary. @return Transformation matrix for this form XObject or default if not found.
2103 Retrieves the transformation matrix from pattern data dictionary. @return Matrix instance with transformation parameters or default if not found
2104 Retrieves and creates a transformation matrix from the shading dictionary. @return Matrix object for transformations or default if not found in dictionary
2105 Retrieves an inheritable attribute from a COSDictionary node based on the given key. @param node the COSDictionary to search in @param key unique identifier for the attribute @return the attribute value or null if not found or inherited
2106 Retrieves a boolean value from the dictionary using a single key. @param key primary key for retrieval @param defaultValue fallback value if key is not found or invalid type
2107 Retrieves rectangle differences from the COS object. @return PDRectangle if differences exist; otherwise, returns null
2108 Default constructor initializing PDTransition with REPLACE transition style.
2109 Sets the blue component range in LAB color space. @param range object containing min and max values; if null, resets to defaults
2110 Sets the standard crypt filter dictionary for PDF encryption settings. @param cryptFilterDictionary PDCryptFilterDictionary containing encryption settings
2111 Sets the default crypt filter dictionary for PDF encryption settings. @param defaultFilterDictionary PDCryptFilterDictionary containing encryption settings
2112 Decrypts a COS dictionary and handles potential signature content. @param dictionary the dictionary to decrypt @param objNum object number for decryption @param genNum generation number for decryption
2113 Sets the unit of measurement in the PDF number format dictionary.
2114 Sets a date item in the dictionary using a string key and a Calendar object. @param key String identifier for the date item @param date Calendar object to be formatted and set; if null, removes the item
2115 Sets or removes a date item in an embedded dictionary. @param embedded COSName identifier for the dictionary @param key COSName identifier for the date item @param date Calendar object to be set; if null, item is removed
2116 Retrieves an Optional Content Group by its name. @param name the unique identifier of the group @return PDOptionalContentGroup if found, otherwise null
2117 Adds key usage extensions to the certificate based on provided flags. @param digitalSignature flag for digital signature usage @param nonRepudiation flag for non-repudiation usage @param ... other key usage flags, each as a char ('0' or '1')
2118 Initializes an empty rectilinear measurement dictionary and sets its subtype.
2119 Retrieves the parent node in the outline hierarchy. @return Parent node (PDOutlineNode) or null if no parent exists.
2120 Retrieves the document outline if it exists; otherwise, returns null. @return PDDocumentOutline object or null if not found in PDF metadata
2121 Initializes an empty PDAction with its default type.
2122 Initializes a new shading pattern with the type set to SHADING_PATTERN.
2123 Initializes and sets up the root of the PDF document structure tree with its type.
2124 Retrieves all Optional Content Groups (OCGs) from the document. @return Collection of PDOptionalContentGroup objects representing OCGs
2125 Initializes a PDF structure element with type and parent node. @param structureType String representing the structure's type @param parent PDStructureNode to be set as the parent of this element
2126 Sets the 'Base' string in the URI action dictionary.
2127 Sets a string attribute and notifies changes in the PDF dictionary. @param name String identifier for the attribute @param value New string value; if null, removes the attribute
2128 Sets a custom metadata value using a key-value pair in the PDF document's information dictionary. @param fieldName Metadata field name (key) @param fieldValue Value to be set for the metadata field; if null, removes the field
2129 Sets the signing date of the PDF signature using the provided Calendar object. @param cal Calendar object representing the signing date to be set
2130 Fetches shading names from PDF document resources.
2131 Sets the creation date of the markup annotation in the PDF document. @param creationDate Calendar object representing the creation date to be set
2132 Sets the formatted value and updates the document structure. @param formattedValue The new formatted string to be set
2133 Sets the version of the application in the signature properties dictionary.
2134 Parses a PDF document and creates a PDDocument instance. @param lenient specifies whether to use strict or lenient parsing mode @return PDDocument object for further processing, or throws IOException if an error occurs
2135 Sets or removes the Modified date in annotation data. @param c Calendar object for modification; if null, removes the item
2136 Sets or updates the creation date of the PDF annotation
2137 Sets the modification date of the PDF document metadata. @param date Calendar object representing the new modification date; if null, removes the item
2138 Sets the creation date of the PDF document. @param date a Calendar object representing the new creation date; if null, removes the date item
2139 Sets the user property name and notifies of changes if necessary. @param name New name for the user property
2140 Initializes page labels with a decimal style for the given document. @param document PDF document to apply page labeling
2141 Sets the name associated with this PDF document's named action. @param name the new name for the action
2142 Sets the right coordinate of PDF page target rectangle. @param x new right coordinate or -1 to remove (nullify) it
2143 Sets the top coordinate of the rectangle in the PDF page destination. @param y the top coordinate value; -1 for null representation
2144 Initializes a PDPageFitWidthDestination object with default settings and type.
2145 Sets the top coordinate for a PDF page destination, adjusting its size and value as needed. @param y new top coordinate; -1 to unset the top coordinate
2146 Sets the fit bounding box type in the array for PDF page destination. @param fitBoundingBox true to use bounded type, false to use default type
2147 Initializes PDPageXYZDestination with default values. Sets up the destination type and allocates space for properties.
2148 Sets the left coordinate for the page destination or sets it to null if -1 is provided. @param x the value for the left coordinate or -1 to set it as null.
2149 Sets the top coordinate for a PDF page view destination. @param y new value for the top coordinate (-1 to remove)
2150 Sets the bottom coordinate of the page rectangle. If -1 is provided, sets it to null. @param y new value for the bottom coordinate
2151 Sets the zoom level for the PDF destination. A value of -1 indicates no zooming. @param zoom The desired zoom level as a floating-point number
2152 Retrieves and processes decode parameters from the stream dictionary. @return List of Java objects representing decoded parameters, or null if not found @throws IOException if an error occurs during COS object manipulation
2153 Retrieves file decode parameters from the stream dictionary. @return List of Java objects representing decoded parameters or null if not found. @throws IOException if an error occurs during COS object manipulation.
2154 Retrieves or creates the root FDFCatalog for the FDF document. @return The FDFCatalog object representing the document's root catalog.
2155 Sets the 'a' component range in LAB color space of PDF document. @param range object containing min and max values; if null, resets to defaults
2156 Retrieves the fractional space allocated for icons. Initializes and sets default if not found. @return PDRange object representing the fractional space for icons
2157 Sets border effect style in PDF document's COSDictionary. @param s new style value
2158 Sets the left coordinate of the rectangle. @param x new left coordinate value; -1 to remove the coordinate
2159 Sets the fit bounding box for this PDF destination. @param fitBoundingBox boolean to enable/disable bounding box fitting
2160 Sets the rendering intent property in the PDF document's graphics state.
2161 Sets a named item in dictionary and notifies of changes if applicable. @param name the key for the item @param value the string value to set
2162 Appends a bead to the thread in PDF document navigation. @param append The PDThreadBead to add at the end of current thread.
2163 Initializes a PDThreadBead object with default settings and self-referencing links.
2164 Sets the first bead in the PDF document thread and updates the thread association. @param bead PDThreadBead object to set as the first; null removes current first bead
2165 Inserts a new sibling item after this node in the outline structure. @param newSibling the PDOutlineItem to be inserted as a sibling
2166 Inserts a new sibling before the current item in PDF outline structure. @param newSibling The PDOutlineItem to be inserted as a sibling
2167 Initializes a new empty PDPageFitRectangleDestination with default settings.
2168 Retrieves or creates the appearance dictionary for a PDF annotation. @return PDAppearanceDictionary for managing annotation visuals.
2169 Initializes a tiling pattern with default resources and sets its type. Critical methods called: setResources, setInt.
2170 Initializes an empty PDPageFitDestination with default settings. Sets up the destination array and type for a PDF page view.
2171 Sets the fit bounding box for the PDF page view. Adjusts the type of destination based on input. @param fitBoundingBox boolean value to determine if bounding box should be fitted
2172 Initializes a new PDPageFitHeightDestination and sets its type.
2173 Sets the left position of a destination in PDF document. If input is -1, sets it to null; otherwise, sets it to the given value. @param x new left position or -1 to set as null
2174 Retrieves names of all pattern resources in the PDF document. @return Iterable of COSNames or an empty set if not found
2175 Retrieves font names from the PDF document's resources. @return Iterable of COSNames representing font names, or an empty set if not found
2176 Retrieves a string value from the dictionary using a given key. @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
2177 Retrieves the units used in number formatting from PDF document settings. @return string representing the units; null if not defined
2178 Fetches version string from the property dictionary using "REx" key.
2179 Fetches the 'Base' string from the URI action dictionary.
2180 Fetches a string attribute by its key from the underlying COSDictionary. @param name unique identifier for the string object @return the string if it exists; otherwise, null
2181 Retrieves custom metadata value by field name. @param fieldName unique identifier for the metadata field @return string value of the field if it exists; otherwise, null
2182 Fetches a string value from document metadata using given key. @param propertyKey unique identifier for the string object @return the string if it exists; otherwise, null
2183 Retrieves and creates a PDF action from the COSDictionary associated with this outline item. @return PDAction object or null if invalid/unsupported dictionary found
2184 Retrieves the PDF action associated with this annotation widget. @return PDAction object if available; otherwise, null
2185 Retrieves and creates a PDF action from the internal COS dictionary. @return PDAction object or null if not found in the COS dictionary.
2186 Retrieves and creates a PDF action from the 'C' dictionary, if it exists. @return PDAction object or null if no 'C' dictionary is found
2187 Retrieves and creates a PDF action from the 'O' key in the COSDictionary. @return PDAction object or null if not found/invalid
2188 Retrieves and creates a PDF action associated with the key 'C'. @return PDAction object corresponding to the action type or null if not found/invalid
2189 Retrieves and creates a PDF action from the 'V' key in the dictionary
2190 Retrieves an embedded string using specified keys. @param embedded key for the dictionary to search in @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
2191 Retrieves and creates a PDF action from the 'F' key in the actions dictionary. @return PDAction object or null if not found or invalid/unsupported type
2192 Retrieves the operation type from launch parameters with a default of 'open'. @return the operation type or 'open' if not found in parameters
2193 Retrieves the file name from various representations. @return the file name as a string; null if not found in any representation.
2194 Fetches the normal appearance stream for annotation. @return Normal appearance stream or null if unavailable.
2195 Initializes font encoding with base and difference settings. @param baseEncoding COSName of the base encoding (Standard, WinAnsi, etc.) @param differences Array of encoding differences to apply
2196 Extracts and converts the contents of a PDF file based on specified byte range. @param pdfFile the byte array representation of the PDF file @return the converted contents as a byte array @throws IOException if there's an issue reading from the input stream
2197 Retrieves the signature contents from a PDF file using specified byte ranges. @param pdfFile InputStream of the PDF file @return Byte array representing the signature content or null if not found @throws IOException If there's an error reading the input stream
2198 Retrieves the background color used in annotations. @return PDColor object or null if not found or invalid color space
2199 Retrieves the border color for interactive PDF annotations. @return PDColor object representing the border color or null if not found
2200 Retrieves and constructs the default PDColor object (CYAN). @return Default PDColor object representing CYAN; may be null if not found.
2201 Returns the fully qualified name of the PDField. @return Fully qualified field name or null if not applicable
2202 Checks if a specific optional content group exists in the document. @param groupName name of the group to check for existence @return true if group exists, false otherwise
2203 Returns the default appearance string of the form field. @return the default appearance string, or an empty string if not found
2204 Retrieves and creates a PDF action associated with the key 'K'. @return PDAction object or null if not present/supported
2205 Retrieves and creates the Document Preparation (DP) action from the PDF document's catalog. @return PDAction object for DP or null if not found
2206 Retrieves and creates the WP (Window Position) action from the document's catalog. @return PDAction object for WP or null if not defined
2207 Checks if character set matches between CIDSystemInfo and FontInfo. @param cidSystemInfo System info object to compare with @param info Font information object to compare with @return true if character sets match, false otherwise
2208 Retrieves and initializes the dash style for a line pattern. @return PDLineDashPattern object representing the line's dash style
2209 Retrieves and creates a list of FDFAnnotations from the document's ANNOTS array. @return List of FDFAnnotation objects or null if not found in the document @throws IOException for any input/output errors during processing
2210 Retrieves the security handler for PDF document. Throws exception if no handler is found. @return SecurityHandler<ProtectionPolicy> object or throws IOException with a message about unsupported filter @throws IOException if no security handler exists for the specified filter
2211 Initializes encryption settings from a COSDictionary and sets up the security handler. @param dictionary contains encryption-related properties for PDF document
2212 Creates an object from a COSBase, handling dictionaries and integers. @param kid The base object to be converted @return Objectable representation or integer value of the input object
2213 Fetches and returns the parent node of a PDF structure element, or null if none exists. @return PDStructureNode instance representing the parent or null if not found
2214 Checks if attribute object is empty based on size and owner presence. @return true if only the owner exists, false otherwise
2215 Validates and corrects the XREF offset in PDF document. @param startXRefOffset long representation of the initial offset to check @return corrected XREF offset or -1 if not found, logs errors for invalid input
2216 Checks if the color space subtype is "NChannel". @return true if subtype equals "NChannel", false otherwise
2217 Retrieves and interprets the open action from PDF root dictionary. Can be an action or destination based on object type. @return PDAction, PDDestination, or null if not found/supported @throws IOException for errors in conversion or unsupported types
2218 Retrieves and creates a PDF action from the Document Security Store (DS). @return PDAction object if DS exists; otherwise, null
2219 Retrieves and creates a PDF action associated with the 'WS' event. @return PDAction object or null if no corresponding 'WS' action exists.
2220 Retrieves and creates the WClose action from the PDF document's catalog. @return PDAction object for WClose event or null if not defined
2221 Retrieves and creates the PI (Page Interaction) action from the annotation's COSDictionary. @return PDAction object for PI or null if not defined
2222 Retrieves and creates a PDF action from the 'PV' dictionary, if it exists. @return PDAction object or null if 'PV' dictionary is not present
2223 Retrieves and creates a PDF action associated with the "PC" key in the annotation's actions. @return PDAction object if found; otherwise, null
2224 Retrieves and creates a PDF action for the "PO" key. @return PDAction object or null if not found/supported
2225 Retrieves the on-value of the first widget's appearance dictionary. @return The name of the entry if it exists and is not "Off", otherwise an empty string
2226 Retrieves and creates a PDF action associated with the Blend (Bl) dictionary. @return PDAction object or null if Bl dictionary is not found or invalid
2227 Retrieves and creates a PDF action from the 'U' dictionary if present. @return PDAction object or null if 'U' dictionary not found/unsupported
2228 Retrieves and creates the D action from annotations' COSDictionary. @return PDAction object or null if not found in dictionary
2229 Retrieves and creates a PDF action from the 'X' dictionary. @return PDAction object or null if 'X' dictionary is not found/valid
2230 Retrieves and returns the PDF action associated with key 'E'. @return PDAction object or null if no valid action is found for 'E'
2231 Retrieves and creates an action associated with 'F' from the PDF document. @return PDAction object or null if invalid/unsupported or not present in the document
2232 Retrieves a map of JavaScript actions from the document's COSDictionary. @return Map with string names and corresponding PDActionJavaScript objects, or null if not found/applicable
2233 Retrieves and creates a PDF action from this field's COSDictionary. @return PDAction object or null if invalid/unsupported type in the dictionary.
2234 Retrieves and creates the PDF action defined for "Fo". @return PDAction object if defined; otherwise, null
2235 Retrieves the transparency group associated with this soft mask. @return PDTransparencyGroup object or null if not found/initialized @throws IOException if there's an issue processing the COSBase object
2236 Finds the named destination page in a PDF document. @param namedDest unique identifier for the destination @return PDPageDestination object or null if not found
2237 Constructs a content stream for a given tiling pattern. @param pattern the tiling pattern to create the stream for @throws IOException if an error occurs while creating the output stream
2238 Initializes a new empty polyline annotation and sets its subtype in the PDF document.
2239 Initializes an empty polygon annotation and sets its subtype in the PDF document.
2240 Initializes a new empty line annotation and sets its subtype.
2241 Writes prepared COS objects to a provided stream, setting up the object stream and applying compression. @param stream The target COSStream for writing data @return The modified COSStream with written data @throws IOException If an error occurs during writing or creating output streams
2242 Writes a COSDictionary to an OutputStream, handling keys and values, and managing dictionary formatting. @param output destination stream for writing data @param cosDictionary the dictionary object to be written @throws IOException if an I/O error occurs during writing
2243 Initializes and sets the annotation subtype to ink during creation.
2244 Initializes file attachment annotation and sets its subtype in PDF document.
2245 Constructs and initializes a new FDFAnnotationUnderline object. Sets the subtype of the annotation.
2246 Initializes a strikeout annotation in FDF document. Sets the subtype for the annotation.
2247 Constructs an empty FDFAnnotationSquiggly and sets its subtype for identification.
2248 Initializes an empty FDFAnnotationTextMarkup of TYPE ANNOT.
2249 Removes a child element from the node and updates its parent. @param structureElement The PDStructureElement to be removed @return true if removal was successful, else false
2250 Initializes a new empty rubber stamp annotation and sets its subtype.
2251 Constructor to initialize square or circle annotation with a specified type. @param subType the type of the annotation ("Square" or "Circle")
2252 Initializes text annotation in PDF documents by setting its subtype.
2253 Fetches and constructs a list of annotation widgets associated with the field. @return List of PDAnnotationWidget objects or an empty list if none found
2254 Retrieves the popup annotation associated with this markup, if any. @return a PDAnnotationPopup object or null if not present
2255 Constructs an instance of PDAnnotationTextMarkup from a COSDictionary. @param field COSDictionary containing text markup annotation data
2256 Constructs an instance of PDAnnotationText from a COSDictionary. @param field Dictionary containing text annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
2257 Constructs an instance of PDAnnotationSquareCircle from a COSDictionary. @param dict COSDictionary containing square or circle annotation data.
2258 Initializes an instance of PDAnnotationSound from a COSDictionary. @param field COSDictionary containing sound annotation data, calls super to handle construction.
2259 Inserts a structure element before a reference object in the node hierarchy. @param newKid The structure element to be inserted @param refKid Reference object before which insertion occurs
2260 Initializes a PDAnnotationRubberStamp object from a COSDictionary. @param field the COSDictionary containing annotation data
2261 Constructs an instance of PDAnnotationPolygon from a COSDictionary. Initializes polygon annotation properties.
2262 Constructs an instance of PDAnnotationLine from a COSDictionary. @param field COSDictionary containing line annotation data, calls super to handle annotation type checking and initialization
2263 Constructs an instance of PDAnnotationInk from a COSDictionary. @param dict COSDictionary containing ink annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
2264 Constructs an instance of PDAnnotationFreeText from a COSDictionary. @param field COSDictionary containing free text annotation data, calls super to set TYPE or warn for invalid types
2265 Constructs an instance of PDAnnotationFileAttachment from a COSDictionary. @param field COSDictionary containing file attachment annotation data.
2266 Constructs an instance of PDAnnotationCaret from a COSDictionary. @param field COSDictionary containing caret annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
2267 Initializes a new text markup annotation with the specified subtype. @param subType type of the text markup annotation
2268 Constructs an instance of PDAnnotationPolyline from a COSDictionary. @param dict COSDictionary containing polyline annotation data.
2269 Retrieves the print scaling preference as a string. @return String representation of print scaling or default if not found/supported type
2270 Appends child element and sets parent in PDF struct tree; critical for hierarchy
2271 Retrieves and creates a PDF File Specification for the action's F dictionary object. @return PDFileSpecification or null if not found, throws IOException for invalid types
2272 Creates a PDImageXObject from a BufferedImage using CCITT encoding for 1-bit b/w images. @param document the PDF document to which the image will be added @param image the BufferedImage object to convert and include in the document @return a PDImageXObject representing the encoded image, or throws exception if not supported
2273 Constructs a PDPageTree from a COSDictionary. Used when no associated PDDocument is available. @param root COSDictionary representing the page tree; cannot be null
2274 Retrieves the page tree of the PDF document. @return PDPageTree object representing the structure of pages in the document
2275 Validates and cleans the page structure in PDF document. Throws exception if invalid. @param root COSDictionary containing the PDF document's root data @throws IOException if page tree root is not a dictionary or if page objects are not dereferenced
2276 Fetches and constructs the encode array for PDF function type 0. @return COSArray containing encoded values, or creates a default array if null
2277 Initializes Function Type 2 with control points and exponent from given COSBase object. @param function COSBase data structure containing function parameters
2278 Retrieves and manages all attribute objects within this structure element. @return Revisions object containing PDAttributeObjects or an empty one if none exist
2279 Retrieves the value associated with a given name from this node or its children. @param name The key for which to retrieve the corresponding value. @return The value associated with the name, or null if not found. @throws IOException If there's an issue accessing the underlying PDF data.
2280 Brute forces the search for a PDF trailer dictionary containing root and info keys. @param trailer Output COSDictionary to store found objects if successful @return true if both root and info dictionaries are found, otherwise false
2281 Searches and compares COS objects for document catalog & info dictionaries. Sets the newer versions of these objects in the trailer dictionary if found. @param trailer COSDictionary to store the identified objects @return true if a document catalog object was found, false otherwise @throws IOException if an I/O error occurs during search operation
2282 Retrieves names of extended graphics states from the PDF document. @return Iterable of COSNames or an empty set if not found
2283 Sets or removes an attribute in the PDF document dictionary. @param attrName attribute name as a string @param attrValue COSBase object to be set; if null, attribute is removed
2284 Retrieves or creates a line dash pattern for PDF guidelines. @return PDLineDashPattern object representing the dash pattern
2285 Retrieves and creates a PDF File Specification from the action's dictionary object. @return PDFileSpecification or null if not found, throws IOException for invalid types
2286 Retrieves and creates a file specification from the action's dictionary object. @return PDFileSpecification or null if base is null, throws IOException for invalid types.
2287 Fetches and creates a file specification from the COS object dictionary. @return PDFileSpecification or null if not found, throws IOException for errors
2288 Retrieves and creates a PDF File Specification for the current action's file. @return PDFileSpecification object or null if not found, throws IOException
2289 Retrieves and creates a PDF File Specification from the embedded file's dictionary object. @return PDFileSpecification or null if not found, throws IOException for errors @throws IOException if there is an issue creating the file specification
2290 Retrieves and creates a PDF File Specification for the referenced page. @return PDFileSpecification object or null if not found; throws IOException on error
2291 Retrieves a list of embedded PDFileSpecifications from the FDF document. @return List<PDFileSpecification> or null if not found; throws IOException on error
2292 Retrieves and creates a PDF File Specification for the attachment. @return PDFileSpecification object or null if not found, throws IOException.
2293 Retrieves and creates a file specification from the FDF document. @return PDFileSpecification or null if not found, throws IOException for errors
2294 Retrieves and returns the PDF version as a float. @return The highest version number between document header and catalog; -1 if not found/parsed correctly.
2295 Sets the conversion factor in the PDF number format dictionary. @param conversionFactor Floating-point value for unit conversion
2296 Sets intensity of border effect in PDF document. @param i Floating-point value representing intensity level
2297 Sets a float number and notifies changes in the PDF dictionary. @param name String identifier for the item @param value Floating-point number to be stored
2298 Retrieves the file specification from the PDF stream's dictionary. @return PDFileSpecification or null if not found, throws IOException for invalid types
2299 Retrieves and formats print clip setting as a string with a fallback to crop box if not found. @return Print clip setting or default crop box if not set.
2300 Retrieves and returns the view clip setting as a string. Defaults to crop box if not set. @return String representation of the view clip setting or default crop box value if not found/supported type
2301 Retrieves the subsequent action in a sequence of PDF document interactions. @return List of PDAction objects representing the next steps or null if none exist.
2302 Sets or removes the Mac OS resource fork attribute for an embedded file. @param macResFork String representing the resource fork; if null, removes the attribute
2303 Retrieves the minimum revision value from the property dictionary. @return Minimum revision number or -1 if not found/not a COSNumber
2304 Retrieves the revision number from the property dictionary. @return Long value of revision or -1 if not found/not a COSNumber
2305 Extracts signed content from the PDF file using specified byte range. @param pdfFile the input PDF file as a byte array @return byte array representing the signed content within the byte range @throws IOException if an I/O error occurs while reading or processing the data
2306 Creates a view of the data stream after applying any filters. @return RandomAccessRead object for accessing filtered data stream @throws IOException if input/output operations fail or filters are invalid
2307 Retrieves the signed content from the PDF file using byte range filtering. @param pdfFile input stream of the PDF document @return byte array containing the filtered and signed content @throws IOException if an I/O error occurs during processing
2308 Retrieves the decode range for a given parameter number. @param paramNum the index of the parameter to retrieve decoding values for @return PDRange object containing decode values; null if not available or valid
2309 Initializes ShadingContext with PDF shading, color model, and transformations. Fetches color space, sets up output color model, and handles background values. @param shading PDShading object for the context @param cm ColorModel to be used @param xform AffineTransform for transformations @param matrix Matrix for additional transformations @throws IOException if error occurs during initialization
2310 Initializes and sets up the CIE color space with RGB values. @param rgb Array containing color space data; index 1 holds dictionary
2311 Retrieves the standard crypt filter dictionary from encryption settings. @return PDCryptFilterDictionary or null if not found
2312 Sets or removes the Mac creator attribute for the embedded file. @param macCreator String representing the Mac creator; if null, removes the attribute
2313 Parses a direct object from the source based on its leading character. @return COSBase object or null if parsing fails; may be dictionary, string, array, name, boolean, or null object @throws IOException if an I/O error occurs during parsing
2314 Enables or disables a specific optional content group. @param group the PDOptionalContentGroup to modify @param enable true for enabling, false for disabling @return true if modification was successful; otherwise, false
2315 Retrieves the base state from the optional content dictionary. @return Corresponding BaseState or ON if not found in dictionary.
2316 Constructs a new optional content group with the given name. @param name The name for the OCG; if null, no name is assigned.
2317 Retrieves CYX value from the underlying COSDictionary. @return Float value of CYX, or -1 if not found/invalid
2318 Sets the Macintosh subtype attribute for the embedded file. Creates a new PARAMS dictionary if needed and sets/removes the MAC SUBTYPE item. @param macSubtype String representing the Macintosh subtype; if null, removes the item
2319 Retrieves the 'V' value from the PDF signature dictionary. @return float value of 'V', or -1 if not found/invalid
2320 Retrieves the leader extend value of the line annotation. @return the leader extend value, or -1 if not found/invalid
2321 Retrieves leader length of line annotation in PDF document.
2322 Retrieves the conversion factor from the number format settings. @return float value representing the conversion factor, or -1 if not found/invalid
2323 Retrieves a number attribute from dictionary by string key. @param name unique identifier for the number as a string @return float value associated with name, or -1 if not found/invalid
2324 Sets the string used as a prefix in labels for numerical values. @param labelPrefixString The new prefix string to be set
2325 Retrieves the leader line offset value from the annotation.
2326 Sets an integer attribute and notifies if it changes. @param name the attribute key @param value the new integer value
2327 Sets the thousand separator string in the PDF number format settings. @param thousandsSeparator String to be used as a thousand separator; null removes it
2328 Retrieves default crypt filter dictionary from encryption settings. @return PDCryptFilterDictionary or null if not found
2329 Calculates and returns the number of output parameters in the PDF function. @return The count of output parameters, derived from the size of range values.
2330 Fetches and returns a specific output range. @param n the index of the desired range value @return a PDRange object containing values from the specified index
2331 Clips input values within defined ranges from the PDF document. @param inputValues array of values to be clipped @return clipped values within specified range or original values if no range found
2332 Returns the total number of input parameters for this function. Calculated as half the size of domain values array. @return Number of input parameters or -1 if not yet defined
2333 Retrieves the domain for a specific input index. @param n the input index @return a PDRange object representing the domain values
2334 Calculates sample index from coordinate vector. @param vector Coordinates for interpolation @return Index used to retrieve interpolated sample value
2335 Fetches a value based on the given index from the number tree node. @param index to retrieve the corresponding object @return COSObjectable value or null if not found @throws IOException if data retrieval fails
2336 Constructs an FDFField object from XML element and initializes its properties. @param fieldXML XML element representing the form field @throws IOException if there's an issue with value conversion or setting
2337 Retrieves a specific range from the encoded array for parameter evaluation. @param n The starting index within the encoded array @return A PDRange object containing the specified range of data
2338 Checks if the top edge is attached to the marked content artifact. @return True if top edge is found in the attached list, otherwise False
2339 Checks if the bottom edge is attached to the marked content artifact. @return True if 'Bottom' edge is found in the attached list, otherwise False
2340 Checks if the left edge is attached to the marked content artifact
2341 Checks if right edge is attached to marked content artifact
2342 Constructs a PDCIDFont object with given dictionary and parent font. Initializes widths and vertical displacements for the CID font. @param fontDictionary The COS dictionary containing font data @param parent The parent type 0 font of this CID font
2343 Retrieves a specific decoded range for a given parameter index. @param paramNum the parameter index @return PDRange object or null if not available
2344 Sets the decimal separator in the PDF document's number format settings. @param decimalSeparator String to be used as the decimal separator
2345 Initializes encoding for a font dictionary, handling base encodings and differences. @param fontEncoding COSDictionary containing encoding info @param isNonSymbolic true if the font is non-symbolic; false otherwise @param builtIn the font's built-in encoding (used for symbolic fonts)
2346 Retrieves a Type 3 character processor by encoding code or returns null if not found. @param code unique font encoding identifier @return PDType3CharProc object or null if not defined for this encoding and charProcs
2347 Retrieves the rollover appearance entry for annotation. @return PDAppearanceEntry or default normal if rollover not found
2348 Retrieves the down appearance entry from dictionary or normal if not available. @return PDAppearanceEntry object for down state; otherwise, the normal one.
2349 Retrieves the first child outline item. @return The first child PDOutlineItem or null if not found
2350 Retrieves the last child outline item in the PDF document
2351 Retrieves the signature's value from its underlying COS dictionary. @return a new PDSignature instance if found; otherwise, null.
2352 Initializes DictionaryEncoding with font encoding and applies differences. @param fontEncoding COSDictionary containing font encoding info; may include BaseEncoding
2353 Sets an integer attribute and notifies of changes in the PDF dictionary. @param name attribute key @param value new integer value for attribute
2354 Adds a group to the Optional Content Groups (OCG) and ensures it appears in the user interface. @param ocg the PDOptionalContentGroup object to be added; must not be null
2355 Retrieves or creates a float value from dictionary using given key. @param name input string for the COSName @param defaultValue fallback value if name is invalid or non-numeric @return float value associated with name, or defaultValue if not found/invalid
2356 Retrieves and returns the icon name of the text annotation. @return String representation of the icon or default value if not found/supported type
2357 Retrieves the style of the guideline from the COSDictionary. @return String representation of the guideline style or default if not found/supported type
2358 Retrieves a named object as string with fallback. @param key unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
2359 Retrieves and returns the named action's name as a string. @return Name of the action or null if not found/supported type
2360 Retrieves and parses the rendering intent string from PDF dict. @return Corresponding RenderingIntent enumeration or null if not found
2361 Retrieves a date from an embedded dictionary using given keys. Uses default if not found. @param embedded key for the embedded dictionary @param key unique identifier for the date object @return Calendar instance or defaultValue if date is not found
2362 Retrieves the optional content property list for this form XObject. @return PDPropertyList if available, otherwise null
2363 Retrieves a date from the dictionary using a string key. Uses caching for efficiency. @param key unique identifier for the date object as a string @param defaultValue value to return if date is not found @return Calendar instance or defaultValue if date is not found
2364 Retrieves and converts dictionary value to string using input name as key. @param name input string used as the dictionary key @return String representation of the dictionary value or null if not found/supported type
2365 Sets the denominator in PDF document number format settings
2366 Retrieves and formats the print area setting as a string with a fallback to crop box if not found. @return String representation of the print area or crop box value if not set
2367 Sets the position of a label in the PDF document. Accepts 'S' or 'P', else removes it. @param labelPositionToValue String representing the new label position ('S' or 'P')
2368 Retrieves and creates a property list for optional content in the PDF document. @return PDPropertyList object or null if not found in COSDictionary
2369 Retrieves and creates property lists from optional content groups (OCGs). @return List of PDPropertyList objects or an empty list if no OCGs are found.
2370 Retrieves PDF properties with the given name from resources or creates a new one. @param name unique identifier for the property list @return PDPropertyList object if found or created; otherwise, null
2371 Returns default position vector for a given CID. @param cid character identifier @return Vector with x-coordinate as half of the width and y-coordinate as dw2[0]
2372 Retrieves and returns the name of the file attachment. @return String representation of the attachment name or a default value if not found/supported type
2373 Retrieves highlight mode for the link annotation. @return String representing the highlight mode or default if not found/supported type
2374 Retrieves intensity level of border effect. @return Float value representing intensity, default to 0 if not found.
2375 Computes the font height for a given PDFont. @param font The input PDFont object @return The calculated font height as float
2376 Retrieves and returns the view area setting as a string with fallback to crop box if not set. @return String representation of the view area or "CropBox" if not set
2377 Retrieves the reading direction preference as a string. @return String representation of the reading direction or default value if not set
2378 Retrieves the non-full screen page mode preference as a string. @return String representation of the non-full screen page mode or default value if not set.
2379 Retrieves and returns the motion property of the transition as a string. @return String representation of the transition's motion or default value if not found/supported type
2380 Retrieves and returns the dimension of the transition as a string. @return String representation of the dimension or default value "H" if not found/supported type
2381 Retrieves and returns the transition style as a string. @return Transition style name or default if not found/supported type
2382 Retrieves and converts the line ending style to a string with default fallback. @return String representation of line ending style or default if not found/supported type
2383 Sets the string suffix for labels in the PDF document. @param labelSuffixString String to be appended after labels
2384 Retrieves and returns the type of external data as a string. @return Type attribute of the COSDictionary object or "ExData" if not found.
2385 Retrieves and converts border style to string with fallback. @return String representation of the border style or default if not found/supported type
2386 Retrieves and returns the highlighting mode of the annotation as a string. @return String representation of the highlighting mode or "I" if not found/supported type.
2387 Retrieves and returns the name of the annotation text as a string. This method is essential for identifying and managing PDF text annotations. @return String representation of the annotation text's name or default value if not found/supported type
2388 Retrieves and returns the name of the rubber stamp annotation as a string. @return String representation of the name or default value if not found/supported type
2389 Fetches and returns the reply type of the annotation as a string. @return Reply type or default value if not found/supported type
2390 Fetches and returns optional content from the PDF object if present; otherwise, returns null. @return PDPropertyList instance or null if not found in the PDF object
2391 Repairs and validates the Length1 field of a Type 1 font. @param bytes byte array containing font data @param length1 initial value for Length1 field @return repaired or original Length1 value
2392 Retrieves the thousands separator character used in numerical formatting. @return the thousands separator character, defaults to ',' if not set
2393 Parses and constructs a COSArray from the PDF source, handling objects and indirect references. @return constructed COSArray object or null if parsing fails @throws IOException if an I/O error occurs while reading from the source
2394 Checks the PDF form field by setting its value to the on-value. @throws IOException if there is an error while retrieving or setting values
2395 Checks if this checkbox field is currently checked. @return true if its value equals the on-value, false otherwise
2396 Retrieves and aggregates 'on' values from button element or its widgets. @return Set of unique 'on' values extracted from the element or widgets.
2397 Adds necessary font resources from annotations to the AcroForm's resources. @param acroFormResources The resources of the AcroForm. @param annotation The PDF annotation containing potential font resources.
2398 Fetches normal appearance stream for given annotation. @param annotation PDF annotation object @return Normal appearance stream or null if unavailable
2399 Initializes parser for cross-reference stream, validates and sets up resources. @param stream COSStream containing cross-reference data @throws IOException if validation or I/O errors occur during setup
2400 Parses and creates a PDDocument with lenient parsing mode. @return PDDocument object for further processing, or throws IOException if an error occurs
2401 Repairs and validates the length2 parameter for a Type 1 font. @param bytes Font data byte array @param length1 First segment length @param length2 Second segment length to be repaired/validated @return Validated or repaired second segment length
2402 Generates a priority queue of FontMatch objects based on compatibility with the provided descriptor and CID system info. @param fontDescriptor Font descriptor to match against @param cidSystemInfo Character set information for filtering @return PriorityQueue<FontMatch> sorted by compatibility score
2403 Overloaded version of getEmbeddedString. Retrieves an embedded string with a null default value. @param embedded dictionary to search in @param key unique identifier for the string object @return the string if it exists; otherwise, null
2404 Retrieves the label position to value from the COSDictionary object. @return Label position to value string, or a default if not found
2405 Finds the index of a given page in the document's page tree. @param page PDPage object to find its index @return Index of the page or -1 if not found
2406 Retrieves label suffix string from number format settings. @return Suffix for numerical labels in PDF document, or " " if not found.
2407 Retrieves a COSDictionary from the page tree based on page number. @param pageNum 1-based page number to retrieve @return COSDictionary of the specified page or throws an exception if not found
2408 Fetches the range for a specific parameter in Type 0 PDF function. @param paramNum index of the desired parameter @return PDRange object or null if not found or invalid index
2409 Retrieves the label prefix string from the number format settings. @return Label prefix or a default space if not found.
2410 Retrieves the decimal separator used in number formatting. @return Decimal separator string, defaults to "." if not found
2411 Loads and parses an FDF document from input stream. @param input InputStream for the FDF document @return Parsed FDFDocument or null if parsing fails @throws IOException if there are issues with reading or parsing
2412 Loads and parses an FDF document from a file. @param file The source FDF document as a File object @return Parsed FDFDocument or null if parsing fails @throws IOException If there's an issue reading the file or parsing its content
2413 Encodes and compresses the image for PDF inclusion with predictive filtering. @return PDImageXObject prepared for PDF or null if format is unsupported @throws IOException if there's an error during encoding or compression
2414 Initializes a new highlight annotation with the predefined subtype.
2415 Sets the PDF document's version, enforcing no downgrades and updating catalog for versions >= 1.4. @param newVersion desired version to set; must not be lower than current version
2416 Creates a new PDDocument with metadata copied from the source document. @return A new PDDocument object with relevant metadata initialized @throws IOException if there is an error during document creation or metadata copying
2417 Fetches and returns the page tree of the PDF document. @return PDPageTree object representing the structure of pages.
2418 Constructs a new squiggly line annotation with no document context.
2419 Enables or disables a specific optional content group by its name. @param groupName unique identifier for the group @param enable true to enable, false to disable @return true if modification was successful; otherwise, false
2420 Initializes an empty PDActionURI and sets its subtype.
2421 Initializes an empty PDActionThread with its default subtype.
2422 Initializes an empty PDAction of SUB_TYPE for form data submission.
2423 Appends a child outline item to this node and updates sibling relationships. @param newChild the PDOutlineItem to be appended as a child
2424 Prepends a new child to the outline item, managing hierarchy and siblings. @param newChild PDOutlineItem to be prepended
2425 Initializes an empty PDActionSound with its default type and subtype.
2426 Checks if a given optional content group is enabled or disabled. @param group the optional content group to check @return true if the group is enabled, false otherwise
2427 Constructs a new strikeout annotation and initializes with subtype.
2428 Initializes a new underline annotation with default settings. Calls parent constructor to set subtype as "Underline".
2429 Constructs an instance of PDAnnotationCircle from a COSDictionary. @param field COSDictionary containing circle annotation data
2430 Creates and renders a cloud-like rectangle or ellipse based on input dimensions. @param left X coordinate of the rectangle's/ellipse's left side @param bottom Y coordinate of the rectangle's/ellipse's bottom side @param right X coordinate of the rectangle's/ellipse's right side @param top Y coordinate of the rectangle's/ellipse's top side @param isEllipse true if shape is an ellipse, false for rectangle
2431 Creates and renders a cloud-like polygon from given path data. Calls cloudyPolygonImpl() to generate the shape and finish() to complete rendering. @param path array of points or curve segments defining the polygon @throws IOException if an I/O error occurs during rendering
2432 Constructs an underline annotation from a COSDictionary. This is used to initialize and manage underline annotations in PDF documents. @param dict COSDictionary containing the data for the text markup annotation
2433 Constructs an instance of PDAnnotationStrikeout from a COSDictionary. @param dict Contains strikeout annotation data for initialization.
2434 Constructs an instance of PDAnnotationSquiggly from a COSDictionary. @param dict COSDictionary containing squiggly line annotation data
2435 Constructs an instance of PDAnnotationHighlight from a COSDictionary. @param dict contains highlight annotation data for initialization
2436 Constructs a new PDLab object with specified LAB color space data. @param lab Array containing color space data; inherits from COSArray
2437 Constructs a PDCalRGB object from COSArray. @param rgb color components in COSArray format
2438 Constructs an instance of PDCalGray with provided COSArray. @param array COSArray containing color component values
2439 Initializes a PDCIEDictionaryBasedColorSpace object in LAB color space. Calls parent constructor with COSName.LAB as argument.
2440 Initializes a PDColor in CALRGB color space with default settings.
2441 Initializes an instance of the class with CALGRAY color space name.
2442 Initializes a square annotation from a COSDictionary. @param field dictionary containing square annotation data
2443 Initializes a PDAction to reset form fields in a PDF document. Sets the subtype of this action for correct handling in the context.
2444 Initializes a remote navigation action with its default subtype.
2445 Initializes an empty PDActionNamed with its default subtype.
2446 Initializes an empty PDActionMovie and sets its subtype.
2447 Adds or retrieves a pattern resource in PDF document. @param pattern PDAbstractPattern object to be added/retrieved @return existing key if pattern exists; otherwise, generates new key and adds it
2448 Adds or retrieves a shading resource in PDF document. @param shading the PDShading object to be added or retrieved @return existing key if shading exists; otherwise, generates new key and adds it
2449 Adds or retrieves the key for an extended graphics state in PDF doc. @param extGState extended graphics state object to be added/retrieved @return existing key if state exists; otherwise, generates a new key and adds it
2450 Adds or retrieves a colorspace resource in PDF document. @param colorSpace the PDColorSpace object to be added or retrieved @return existing key if colorspace exists; otherwise, generates a new key
2451 Adds or retrieves a font resource in the PDF document. @param font the font to be added or retrieved @return existing key if font exists; otherwise, generates new key and adds it
2452 Sets border line style and width based on provided parameters. @param lineWidth desired width of the line @param bs border style dictionary @param border array containing border properties @throws IOException if there's an issue with I/O operations
2453 Sets or removes the destination of this outline item in a PDF document, based on the provided page. @param page PDPage object to set as the destination; null to remove the destination
2454 Reads and handles encoding for the font. Fetches predefined CMap or reads custom CMap, checks its validity. Also determines if descendant font is CJK based on system info.
2455 Adds a property list to the PDF document and returns its key. @param properties PDPropertyList to be added (group or optional content) @return COSName representing the key for the added property list
2456 Adds an image resource to the PDF document and returns its key. @param image PDImageXObject representing the image resource @return COSName key of the added or existing image resource
2457 Adds an XObject resource to the PDF document or retrieves its existing key. @param xobject PDXObject representing the resource @param prefix initial string for new resource's key @return existing key if resource exists; otherwise, generates a new key and adds it to the document
2458 Initializes an empty PDActionLaunch and sets its subtype.
2459 Initializes an empty PDActionJavaScript with its default subtype.
2460 Constructs an instance of PDActionImportData and sets its subtype.
2461 Initializes PDActionHide and sets its subtype to SUB_TYPE.
2462 Initializes a new PDF navigation action and sets its subtype.
2463 Constructs an empty PDActionEmbeddedGoTo and sets its subtype.
2464 Initializes page labels from a COSDictionary for the document. @param dict the dictionary containing page label information @throws IOException if an error occurs during retrieval of child nodes or numbers
2465 Retrieves the normal appearance entry for annotation, creating it if necessary. @return PDAppearanceEntry representing annotation's visual state.
2466 Retrieves or creates the rollover appearance entry for annotation. @return PDAppearanceEntry, may be newly created if not found.
2467 Retrieves a date from an embedded dictionary using given keys. Returns default if not found. @param embedded Key for the embedded dictionary @param key Unique identifier for the date object @return Calendar instance or null if date is not found
2468 Retrieves or creates the 'down' appearance entry for annotation visuals. @return PDAppearanceEntry object, may be newly created if not existing.
2469 Sets the button value based on index and validates input. Throws exception if index is invalid. @param index position of the value to be set; must be within valid range @throws IOException if an I/O error occurs during operation
2470 Adds a form XObject resource to the PDF document or retrieves its existing key. @param form PDFormXObject to be added or retrieved @return existing key if form exists; otherwise, generates new key and adds it to the document
2471 Retrieves the fractional display format for numerical values in PDF document. @return String representing the fractional display format, or a default value if not set
2472 Retrieves the starting page number for custom labeling. @return the starting page number or default value of 1 if not specified
2473 Retrieves the total count of pages in the PDF document. @return Total number of pages or 0 if not a COSNumber
2474 Checks if a specific flag is set in the provided field. @param field COSName of the data field @param bitFlag integer flag to check for @return true if flag is set, false otherwise
2475 Retrieves an integer value from the dictionary using a string key. @param key string-based primary key for retrieval @param defaultValue fallback value if not a COSNumber @return integer value or defaultValue if not found
2476 Fetches an integer value associated with a COSName key. @param key COSName key for retrieval @return Integer value or -1 if not found
2477 Retrieves an integer value from COSDictionary using a string key. @param key the input string for retrieval @return integer value or -1 if not found or not a COSNumber
2478 Retrieves an integer from a nested dictionary using primary and secondary keys. @param embeddedDictionary key for the outer COSDictionary @param key primary key for retrieval within the inner COSDictionary @param defaultValue fallback value if not found or not a COSNumber @return integer value or defaultValue if not found or invalid type
2479 Retrieves the order of the PDF function type. @return The integer value representing the order, defaults to 1 if not found.
2480 Determines if the window should be centered on screen. @return true if centering is enabled; otherwise, false
2481 Retrieves the 'fit window' preference setting. @return true if 'fit window' is enabled, otherwise false
2482 Checks if menubar should be hidden in PDF viewer based on preferences. @return true if menubar is set to hide; otherwise, returns false
2483 Retrieves user preference to hide toolbar in PDF viewer. @return true if toolbar should be hidden, otherwise false
2484 Checks if fly area of PDF transition is opaque. @return true if fly area is opaque; otherwise, false
2485 Retrieves the "need appearances" flag from the form's dictionary. @return true if need appearances, otherwise false (default)
2486 Retrieves the trusted mode status from the property dictionary. @return true if in trusted mode, otherwise false (default)
2487 Checks if document title should be displayed in the viewer. @return true if document title is set to display, otherwise false
2488 Retrieves Non-Embedded Font No Warning flag value from the property dictionary. @return boolean value of NON_EFONT_NO_WARN or defaults to true if not found
2489 Retrieves the revision number of the PDF document structure element. @return integer value representing the revision number or 0 if not found
2490 Retrieves the PDF document version. @return current version of the document (default is 0)
2491 Retrieves annotation index using predefined key A. @return annotation index or -1 if not a COSNumber
2492 Retrieves and returns the action flags for form submission. @return integer value representing action flags, or default 0 if not found
2493 Retrieves the action flags for form reset. @return integer value of action flags; default is 0 if not found
2494 Retrieves the number of bits per coordinate from the COSObject and logs its value. @return number of bits per coordinate or default (-1 if not found)
2495 Retrieves the number of bits per color component used in shading calculations. @return the number of bits per color component, or -1 if not set
2496 Retrieves the number of vertices per row in PDF shading data. @return integer value or -1 if not found
2497 Retrieves bits per flag from COS object using a predefined key. @return integer value representing bits per flag or -1 if not found
2498 Creates a PDShading object based on the provided dictionary and its shading type. @param shadingDictionary COSDictionary containing shading properties @return PDShading object or null if shading type is unknown, throws IOException for errors
2499 Retrieves the length of the encryption filter dictionary. @return integer value representing the length or default value if not found
2500 Retrieves the tiling type of this pattern. @return integer value representing the tiling type or 0 if not found
2501 Creates a PDF pattern from the given dictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache cache for storing resources @return PDAbstractPattern object representing the pattern @throws IOException if an error occurs during pattern creation
2502 Retrieves the font descriptor flags. Initializes with default value if not set. @return current or initialized flags value
2503 Retrieves justification value from free text annotation. @return string representation of the justification value or "0" if not found
2504 Retrieves permission settings from the PDF document's dictionary. @return Permission level as an integer value (default is 0 if not found)
2505 Retrieves the revision number of the PDF document. @return The revision number or a default value if not found.
2506 Retrieves and returns the length of the PDF document, defaulting to 40 if not found. @return integer representing the document's length
2507 Retrieves the paint type of this tiling pattern using a predefined key. @return integer value representing the paint type or default to 0 if not found
2508 Retrieves annotation flags from underlying COSDictionary. @return integer value representing the annotation's flags or default value if not found
2509 Retrieves the pre-release status of digital signature properties. @return true if in pre-release state; otherwise, returns false
2510 Checks if line annotation has a caption.
2511 Decodes and converts a PDImage to BufferedImage. Handles various image types, subsampling, and region clipping. @param pdImage The image object to convert @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @param colorKey Array defining the color key mask values @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
2512 Extracts raw raster data from a PDImage, handling color space and bit depth. @param pdImage source image to extract raster data from @return WritableRaster containing the extracted image data @throws IOException if an I/O error or invalid image parameters occur
2513 Returns the stencil image for this PDImageXObject if it's used as a stencil in PDF, else throws an exception. @param paint Paint object used to create the stencil effect. @return BufferedImage representing the stencil image. @throws IOException If there is an error during image processing. @throws IllegalStateException If this PDImageXObject is not a stencil in PDF.
2514 Calculates and returns the anchor rectangle for a tiling pattern with scaling applied. Handles edge cases where XStep or YStep is 0 by using BBox dimensions. Prevents overly large patterns to avoid performance issues. @param pattern The tiling pattern object @return Anchor rectangle as a Rectangle2D.Float object with scaling applied @throws IOException if the pattern's /BBox is missing
2515 Generates a BufferedImage for the given tiling pattern parameters. @param pattern PDTilingPattern object containing pattern details @param colorSpace Color space for the pattern @param color Pattern's color @return A BufferedImage with the rendered tiling pattern @throws IOException if an I/O error occurs during processing
2516 Parses stamp annotation appearance XML and constructs a COSDictionary object. Handles 'STREAM' elements in the XML to create corresponding entries in the COSDictionary. @param appearanceXML XML element containing annotation appearance data @return COSDictionary representing parsed annotation appearance or empty dictionary if not handled
2517 Retrieves the open state of the PDF annotation text. @return true if open, false otherwise
2518 Retrieves and initializes PDF resources for the page. @return PDResources object containing document resources or null if not present
2519 Retrieves and normalizes the rotation angle of the page. @return normalized rotation angle or 0 if not found or invalid
2520 Retrieves the mix property value from the sound action. @return true if sound should be mixed; otherwise, returns false
2521 Retrieves the repeat property of the sound action. @return true if the sound should repeat, otherwise false
2522 Checks if the sound action is synchronous or asynchronous. @return true if synchronous; otherwise, false (asynchronous)
2523 Retrieves the 'H' flag value for hiding action customization. @return current state of 'H' flag (true if hidden by default)
2524 Retrieves text knockout flag from the dictionary. Defaults to true if not found.
2525 Retrieves the alpha source flag from the dictionary using a predefined key. @return true if alpha source is enabled, false otherwise (default)
2526 Retrieves automatic stroke adjustment property from PDF dictionary. @return true if enabled, false otherwise (default)
2527 Retrieves stroking overprint control setting from PDF dictionary. @return true if OP is set to true in the COSDictionary; otherwise, returns false.
2528 Retrieves the media box of the page, initializing it if necessary. @return The media box rectangle or default US Letter size if not found.
2529 Retrieves the anti-aliasing property from the shading dictionary. @return true if anti-aliasing is enabled; otherwise, returns false.
2530 Checks if the transparency group is isolated. @return true if isolated, false otherwise; defaults to false if not found or invalid type
2531 Checks if renaming is enabled in the FDF template. @return true if renaming is enabled, false otherwise
2532 Checks if annotation scaling to fit is enabled in FDF settings. @return true if scaling to fit is enabled; otherwise, returns false.
2533 Retrieves the caption status of the line annotation using a default value if not present. @return true if caption is enabled, otherwise false
2534 Checks if metadata in the document is encrypted. Default is true. @return boolean indicating encryption status of metadata
2535 Checks if user property is hidden in PDF document structure. @return true if property is hidden, false otherwise
2536 Checks if the file specification is volatile (temporary) using a COSName key. @return true if file is volatile, otherwise false; defaults to false if not found or invalid type
2537 Retrieves or creates a boolean value from dictionary using a string key. @param key input string for retrieval or COSName creation @param defaultValue fallback value if key is not found or invalid type @return the corresponding boolean value, defaults if necessary
2538 Checks if transparency group uses knockout property. @return true if knockout is enabled, otherwise false
2539 Retrieves the quality value (Q) of the free text annotation. @return integer Q value or 0 if not found in COSObject
2540 Checks if window UI should be hidden based on PDF preferences. @return true if HIDE_WINDOWUI is set to true; otherwise, returns false.
2541 Checks if timestamp is required based on dictionary's FT value. @return true if timestamp is required (FT value not zero), false otherwise
2542 Modifies a flag in the dictionary using a specified field and a bitwise operation. @param field COSName identifier for the item @param bitFlag Bitmask to select the flag @param value Boolean to set or clear the flag
2543 Initializes PDFObjectStreamParser with a COSStream and COSDocument. @param stream input data stream to parse @param document associated COSDocument for context @throws IOException if parsing or validation of the stream fails
2544 Initializes PDCIDFontType0 object based on provided font dictionary and parent PDType0Font. Handles embedded CFF (Compact Font Format) or substitutes with fallback font if necessary. @param fontDictionary COSDictionary containing font information @param parent Parent PDType0Font object @throws IOException If input/output operations fail during font parsing
2545 Initializes PDCIDFontType2 with font dictionary and TrueTypeFont, handling embedded fonts and errors. @param fontDictionary PDF dictionary containing font info @param trueTypeFont object for font parsing, may be null for embedded font retrieval @throws IOException if font data is damaged or unreadable
2546 Reads and returns a CMap object from the provided base, handling both predefined and embedded CMap types. @param base the input data to be parsed into a CMap object (COSName for predefined or COSStream for embedded) @return the parsed CMap object; throws IOException if parsing fails or input is invalid @throws IOException if input/output operations fail, filters are invalid, or input type is unsupported
2547 Retrieves the rotation setting of the PDF annotation. @return integer representing rotation angle or default value (0) if not found
2548 Writes the body of a PDF document, managing objects and encryption. @param doc The COSDocument object to be written @throws IOException if I/O errors occur during writing
2549 Retrieves a named object as string with fallback. @param name unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
2550 Retrieves border effect style as a string. @return Style of the border effect, defaults to solid if not found
2551 Traverses up the structure to find and return the root of the tree. @return PDStructureTreeRoot if found, otherwise null
2552 Retrieves child elements associated with the structure node. @return List of child objects or an empty list if none found
2553 Retrieves encryption settings for the PDF document. @return PDEncryption object or null if not encrypted
2554 Prepares decryption for the PDF document by setting up security handler and access permissions. @throws IOException if there are issues with encryption dictionary, security handler setup, or input streams
2555 Initializes Type 1 shading context with transformations and domain settings. @param shading the Type 1 shading object @param colorModel the color model to use for shading @param xform the affine transformation matrix @param matrix the additional transformation matrix @throws IOException if an I/O error occurs during initialization
2556 Retrieves the page number associated with this target directory. @return the page number or -1 if not found
2557 Retrieves the embedded file with Unicode support. @return PDEmbeddedFile object if found; otherwise, null
2558 Retrieves embedded file with UNIX specifications. @return Newly created PDEmbeddedFile if found; otherwise, null
2559 Retrieves the embedded MAC file from EF dictionary. @return PDEmbeddedFile object if found; otherwise, null
2560 Fetches and returns an embedded file from EFDictionary. @return PDEmbeddedFile if found; otherwise, null
2561 Retrieves the open count of outline items in a PDF document node. @return number of open outline items; defaults to 0 if not found
2562 Retrieves color space resource by name. @param name unique identifier for the color space @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
2563 Removes page-level resources from cache, excluding inherited ones.
2564 Fetches COSObjects of a specific dictionary type. @param type Dictionary type to search for @return List of matching COSObjects or an empty list if none found
2565 Retrieves the top index of displayed items in the list box. @return integer value representing the top index or default to 0 if not found
2566 Retrieves the quality or opacity of the form field. @return integer value representing Q (opacity) or default 0 if not found
2567 Retrieves embedded file in DOS format. @return PDEmbeddedFile object if found; otherwise, null
2568 Constructs a RadialShadingContext and initializes shading parameters, including coordinates, domain, extension, constants, and inverse transformations. @param shading Shading type 3 object containing shading information @param colorModel Color model used for the shading @param xform Affine transformation to apply @param matrix Matrix to be applied in calculations @throws IOException if there's an issue with I/O operations during construction
2569 Initializes the TriangleBasedShadingContext with PDF shading and color model. @param shading PDShading object for the context @param cm ColorModel to be used @param xform AffineTransform for transformations @param matrix Matrix for additional transformations @throws IOException if error occurs during initialization
2570 Initializes AxialShadingContext with shading, color model, transforms and bounds. Calculates constants, transformations and color table for axial shading rendering. @param shading PDShadingType2 object containing shading parameters @param colorModel ColorModel used in the context of this shading @param xform AffineTransform object for transformation @param matrix Matrix object for additional transformations @param deviceBounds Rectangle defining the boundaries of the device @throws IOException if there's an issue with I/O operations during initialization
2571 Sets or clears the V bit in the seed value dictionary.
2572 Sets the requirement for digest methods in the seed value. A true flag indicates that a digest method is necessary. @param flag Boolean to indicate if digest method is required (true) or not (false)
2573 Sets required flag for subject in certificate data. @param flag true to require, false to unset
2574 Sets the subfilter requirement for seed value in PDF signatures. @param flag Boolean to enable or disable subfilter requirement
2575 Sets the issuer required flag in the certificate dictionary. @param flag Boolean value to set or clear the issuer requirement
2576 Creates a cloud-like rectangle and applies finishing touches. @param rd Rectangle difference for dimensions; may affect output shape @throws IOException if an error occurs during rendering or closing path
2577 Implements the drawing of a cloud-like ellipse with a border effect based on intensity. @param leftOrig, bottomOrig, rightOrig, topOrig: coordinates for the bounding box @throws IOException if there is an error while generating the curve segment
2578 Sets or clears the filter requirement flag in seed value attributes. @param flag Boolean to set (true) or clear (false) the filter requirement
2579 Sets or clears the flag for locked contents in annotation data. @param lockedContents Boolean to lock (true) or unlock (false) content
2580 Sets the flag to toggle annotation visibility in PDF viewer. @param toggleNoView true to hide, false to show annotation in viewer
2581 Sets or clears the annotation's lock flag using a boolean value. @param locked Boolean to set (true) or clear (false) the lock flag
2582 Sets or clears the read-only flag for this annotation's COSDictionary. @param readOnly Boolean value to set the read-only status
2583 Sets or clears the No View flag for this annotation in the PDF document. @param noView true to hide the annotation, false to display it
2584 Sets the No Rotate flag for annotation, controlling its rotation behavior. @param noRotate Boolean value to enable or disable rotation of the annotation
2585 Sets or clears the No Zoom flag in annotation's dictionary, controlling zooming behavior. @param noZoom Boolean value to set (true) or clear (false) the No Zoom flag
2586 Sets or clears the 'printed' flag for the annotation in the PDF document. @param printed Boolean value to set or clear the 'printed' flag
2587 Sets the visibility of annotation in PDF document. @param hidden true to hide, false to show the annotation
2588 Sets the visibility of the annotation in the PDF document. @param invisible true to make it invisible; false to make it visible
2589 Sets or clears the flag for locked contents in annotation. @param lockedContents boolean value to set lock status
2590 Prepares a PDF document for encryption using AES algorithm, sets up recipients and crypt filter settings. @param doc the PDDocument to be encrypted @throws IOException if encryption or encoding issues occur
2591 Sets or clears the reason required flag for seed value. @param flag Boolean to set (true) or clear (false) the reason requirement
2592 Sets the legal attestation requirement for seed value in PDF document.
2593 Creates a specific annotation based on the subtype of the input COSDictionary. @param base The COSDictionary containing annotation data @return A PDAnnotation object corresponding to the subtype or unknown if not supported
2594 Draws and writes a form XObject to the PDF document content stream. @param form PDFormXObject to be drawn and written to the content stream @throws IOException if an I/O error occurs when writing to the output stream
2595 Draws an image on the content stream using a given matrix and writes it to output. @param image PDImageXObject representing the image resource @param matrix Matrix object for transformation @throws IOException if an I/O error occurs during operation or within text mode
2596 Draws an image onto the content stream at specified position and dimensions. Throws exception if called within text mode. @param image PDImageXObject to be drawn @param x, y coordinates of the image's starting point @param width, height dimensions of the image @throws IOException, IllegalStateException
2597 Initializes and sets JavaScript action string in PDF document. @param js JavaScript code to be executed
2598 Sets a marked content point with properties in PDF document stream. @param tag COSName for the marking content point @param propertyList PDPropertyList to be added and referenced by the marking point
2599 Begins a marked content sequence with tag and properties. @param tag COSName identifier for the marked content @param propertyList PDPropertyList containing additional settings @throws IOException if an I/O error occurs while writing to output stream
2600 Fills content with the specified shading, throws exception if used within a text block. @param shading The PDShading object to be filled into the content stream @throws IOException If an I/O error occurs while writing the shading resource
2601 Sets parameters for an extended graphics state and writes to PDF content stream. @param state the extended graphics state object to be added/retrieved @throws IOException if writing operations fail
2602 Checks if a group with the given name is enabled. @param groupName unique identifier for the optional content group @return true if the group exists and is enabled, false otherwise
2603 Checks if a given optional content group is enabled or disabled in the PDF document. @param group the optional content group to check @return true if the group is enabled, false otherwise
2604 Retrieves page labels from the document's catalog dictionary. @return PDPageLabels object or null if not available in the PDF @throws IOException if error occurs during retrieval of the dictionary
2605 Adjusts destinations in the PDF document, checking and updating page references. @param destinationDocument The PDDocument object to modify
2606 Sets the font for text rendering, managing the font stack and subsetting. @param font PDFont object to be set; throws IOException if not finite @param fontSize float value for the font size
2607 Sets or clears the flag for adding revision information in PDF signature. @param flag Boolean value to add (true) or remove (false) revision info
2608 Initializes PDFPrintable with document, rendering options, and configurations. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch @param center Boolean indicating if pages should be centered
2609 Initializes PDFRenderer with a PDDocument and sets up page tree for rendering. @param document the PDDocument to be rendered
2610 Creates a new document if necessary based on split conditions and updates the document list, page maps, and annotation maps.
2611 Writes the PDF header, handles compression and versioning. @param doc COSDocument object to write header for
2612 Draws an inline image at specified coordinates and dimensions in the PDF document. @param inlineImage PDInlineImage object containing image data @param x X-coordinate of the image's position @param y Y-coordinate of the image's position @param width Image width @param height Image height @throws IOException if an I/O error occurs during operation
2613 Sets the optional content properties and adjusts version if needed. @param ocProperties new optional content properties; null to remove
2614 Increments revision number of PDF structure element by one.
2615 Sets the flag for existing signatures in the PDF form.
2616 Sets or clears the 'append-only' flag for this form field. @param appendOnly boolean value to set or clear the flag
2617 Sets the sorting option for choice fields. @param sort true to enable sorting, false otherwise
2618 Sets the multi-selection option for the choice field. @param multiSelect boolean value to enable/disable multi-selection
2619 Sets the spell-check flag for choice fields in PDF forms. @param doNotSpellCheck boolean value to enable/disable spell-checking
2620 Sets the flag for committing changes upon selection in choice fields. @param commitOnSelChange boolean value to enable or disable this feature
2621 Sets or clears the combo flag for the choice field, enabling or disabling multi-selection. @param combo true to enable multi-selection, false otherwise
2622 Sets the editable state of the combo box field in the PDF form. @param edit boolean value to enable or disable editing
2623 Modifies read-only status of the field using a flag and bitwise operation.
2624 Sets or clears the 'required' flag in the field dictionary. @param required boolean value to set the requirement of the field
2625 Sets or clears the 'no export' flag for this field in PDF document. @param noExport true to set the flag, false to clear it
2626 Constructs a PDPushButton and initializes it as a push button in the AcroForm structure. @param acroForm parent AcroForm structure for this button
2627 Initializes a radio button in a PDF form. @param acroForm parent AcroForm structure for this button
2628 Sets the radio buttons to operate in unison or independently. Modifies the flag using a bitwise operation. @param radiosInUnison true for unison, false for independent behavior
2629 Sets or clears the multiline flag for this text field. @param multiline true to enable, false to disable multiline input
2630 Sets or clears the password protection flag on this text field. @param password true to protect with a password, false otherwise
2631 Sets or clears the 'file select' flag for this text field in PDF form. @param fileSelect true to enable, false to disable the file selection feature
2632 Sets the spell-checking flag for the text field. @param doNotSpellCheck true to disable spell-checking, false otherwise
2633 Sets or clears the 'do not scroll' flag in PDF text field, affecting display behavior. @param doNotScroll Boolean value to set or clear the flag
2634 Sets the Comb flag in the PDF form field, enabling or disabling character combination. @param comb boolean value to set or clear the Comb flag
2635 Sets or unsets the Rich Text flag for this text field. @param richText boolean value to set or unset the Rich Text flag
2636 Creates a PDImageXObject from a RandomAccessRead source, specifically for CCITT-encoded images. @param reader RandomAccessRead object containing the image data @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
2637 Sets or clears the bold formatting flag for this PDF outline item
2638 Sets or clears the required flag for Subject DN in the certificate. @param flag boolean value to set or clear the required flag
2639 Sets the visibility of the annotation based on a boolean flag. @param toggleNoView true to hide, false to display the annotation
2640 Sets or clears the lock flag on the annotation in the PDF document. @param locked Boolean value to set or clear the lock flag
2641 Retrieves total number of pages in PDF document. @return Total count of pages; 0 if no valid page tree found.
2642 Sets or clears the 'no view' flag for the annotation. @param noView true to hide the annotation; false to display it
2643 Sets or clears the NO_ROTATE flag for the annotation, controlling its rotation behavior. @param noRotate boolean value to set (true) or clear (false) the flag
2644 Sets the required flag for Object Identifier (OID) in the certificate. @param flag boolean value to require or not require OID
2645 Sets or clears the 'no zoom' flag for this annotation. @param noZoom Boolean value to set (true) or clear (false) the flag
2646 Sets the visibility of the annotation in a PDF document. @param hidden boolean value to hide (true) or show (false) the annotation
2647 Sets annotation visibility in a PDF document. @param invisible true to hide, false to show
2648 Retrieves a page from the PDF document by index. @param index 0-based position of the page in the document @return PDPage object representing the specified page
2649 Sets or clears the italic formatting flag for this outline item. @param italic true to set italic, false to clear it
2650 Sets or clears the required flag for key usage in the certificate dictionary. @param flag Boolean value to set (true) or clear (false) the key usage requirement
2651 Sets or clears the URL required flag in the certificate dictionary. @param flag boolean value to set (true) or clear (false) the URL requirement
2652 Adds a new child outline item as the first child of this node, managing hierarchy and updates. @param newChild PDOutlineItem to be added
2653 Adds a child outline item to the end of this node's children list and updates parent open count. @param newChild the PDOutlineItem to be appended as a child. Must have no siblings.
2654 Parses an object stream from the cross-reference table and updates the trailer resolver. @param objByteOffset byte offset of the object @param isStandalone standalone status of the xref table @return previous object reference or -1 if not found @throws IOException if parsing or I/O errors occur
2655 Sets or clears the "printed" flag for this annotation in the PDF document. @param printed boolean value to set the printed flag (true = printed, false = not printed)
2656 Sets the read-only status of this annotation using a flag in the dictionary. @param readOnly boolean value to set or clear the read-only status
2657 Checks if the annotation is printed by examining its flags. @return true if the print flag is set, false otherwise
2658 Fetches and returns the line join style as an integer value from the PDF dictionary. @return Line join style as an integer or -1 if not found
2659 Fetches struct parents integer value from the PDF page.
2660 Wraps output stream with predictor based on given decode parameters. @param out the original output stream @param decodeParams dictionary containing decoding information @return wrapped output stream or original if no prediction needed
2661 Retrieves the denominator value from numerical format settings in PDF document. @return the denominator integer value or -1 if not found or not a COSNumber
2662 Fetches an integer value from a nested dictionary using primary and secondary keys. @param embeddedDictionary Key for the outer COSDictionary. @param key Primary key for retrieval within the inner COSDictionary. @return Integer value or -1 if not found or invalid type.
2663 Retrieves non-stroking overprint control setting from PDF dictionary. @return true if OP_NS is set to true in the COSDictionary; otherwise, returns stroking overprint control.
2664 Checks if the annotation has the "no view" flag set. @return true if no view flag is set, false otherwise
2665 Checks if an outline item node in a PDF document is open. @return true if any child outline items are open; false otherwise
2666 Creates a PDField based on the type found in the provided COSDictionary. Handles various field types including choice, text, signature, and button subtypes. @param form parent AcroForm structure @param field COSDictionary containing field definitions @param parent the parent PDNonTerminalField (if any) @return a PDField object representing the appropriate field type or null if invalid
2667 Checks if the 'FD' (Fractional Digits) option is enabled in PDF number format settings. @return true if 'FD' is enabled, false otherwise
2668 Retrieves the open state of the annotation popup. @return true if the popup is open, otherwise false
2669 Initializes a TilingPaint object with the given parameters and sets up the texture paint. @param drawer PageDrawer instance for drawing operations @param pattern PDTilingPattern object containing pattern details @param colorSpace Color space for the pattern @param color Pattern's color @param xform AffineTransform object for transformations @throws IOException if an I/O error occurs during processing
2670 Checks if the 'no rotate' flag is set for the annotation. @return true if the flag is set, false otherwise
2671 Fetches the line cap style integer value from the PDF dictionary. @return Line cap style integer or -1 if not found
2672 Fetches the MCID (Marked Content Identifier) of the marked content. @return Integer MCID or -1 if not found in properties dictionary
2673 Fetches the next key in the parent tree structure. Utilizes COSName.PARENT_TREE_NEXT_KEY as the identifier. @return Next integer key or -1 if not found
2674 Fetches the Marker Context Identifier (MCID) of the marked content reference. @return MCID integer value or -1 if not found
2675 Fetches and returns bits per sample from PDF function object. @return Bits per sample value or -1 if not found
2676 Adds a class name to the PDF structure element and updates its revision number. @param className the name of the class to be added; ignored if null
2677 Updates the revision number in an attribute object's array or initializes a new one. @param attributeObject The object containing the attribute to be updated
2678 Initializes writing process for a PDDocument, sets up encryption and ID for the document, and prepares it for signing or incremental updates. @param doc the PDF document to be written @param signInterface interface for signing operations; may affect encryption settings @throws IOException if there are issues with accessing security handlers or writing data
2679 Checks if the annotation is invisible by examining its flags. @return true if invisible, false otherwise
2680 Checks if the contents of the annotation are locked.
2681 Determines if mouse position tracking is enabled for this URI action. @return true if "IsMap" key exists and its value is true, otherwise false
2682 Checks if zoom functionality is disabled for this annotation. @return true if zoom is not allowed, false otherwise
2683 Checks if the PDF element is marked as suspect. @return true if element is marked as suspect, otherwise false
2684 Checks if the PDF document's marking dict uses user properties. @return true if UserProperties key exists and is true, otherwise false
2685 Checks if the PDF element is marked using its logical structure metadata. @return true if marked, otherwise false
2686 Retrieves the rotated media box of a page if rotation angle is 90 or 270 degrees. @param page The PDF page to retrieve the media box from @return Rotated media box or original if no rotation needed
2687 Validates if provided value is a valid option for the button field. @param value The input value to validate @throws IllegalArgumentException If value is not valid for the field
2688 Checks if the 'FLAG_TOGGLE_NO_VIEW' flag is set for the annotation. @return true if flag is set (annotation not visible), false otherwise
2689 Checks if the annotation is locked based on a predefined flag. @return true if the lock flag is set, false otherwise
2690 Checks if the annotation is set to read-only using a specific flag. @return true if read-only, false otherwise
2691 Decodes and converts the PDImage to a BufferedImage with specified region and subsampling. @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
2692 Decodes and converts a PDImage to BufferedImage with optional color key mask. @param pdImage The image object to convert @param colorKey Array defining the color key mask values (can be null) @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
2693 Manages and switches PDF resources for rendering. Fetches stream-specific or page resources, initializes if needed. @param contentStream the current stream being processed @return previous PDResources object or null
2694 Calculates and returns an AffineTransform for centering the overlay on a page. @param page The target PDF page to apply the overlay @param overlayMediaBox The media box of the overlay content @return An AffineTransform object for centering the overlay on the page
2695 Fetches the struct parent integer value from annotation data. @return Struct parent ID or -1 if not found
2696 Retrieves a PDXObject from the resources dictionary using given name. @param name COSName identifier for the object @return PDXObject if found; otherwise, null
2697 Initializes GouraudShadingContext for PDF document rendering. @param shading PDShading object representing the shading technique @param colorModel ColorModel for managing colors in graphics @param xform AffineTransform object for transforming coordinates @param matrix Matrix object for mathematical operations @throws IOException if there is an error initializing resources
2698 Creates an input stream using default decoding options. @return Decoded COSInputStream or throws IOException if raw input creation fails
2699 Parses and retrieves an object from the specified stream. Handles compressed object streams and manages parsing errors. @param objstmObjNr stream object number @param key unique identifier for the object @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
2700 Retrieves the page contents as an InputStream. Uses getContentsForRandomAccess() for content retrieval. @return InputStream containing page content or empty if not found @throws IOException if retrieving or handling page content fails
2701 Checks if no rotation flag is set for the annotation. @return true if no rotation flag is set, false otherwise.
2702 Constructs a PDCIDFontType2 from a font dictionary and parent type 0 font. @param fontDictionary PDF dictionary containing font info @param parent PDType0Font for additional font data, may be null @throws IOException if font data is damaged or unreadable
2703 Generates and returns a PDCIDFontType2 object for complex character set representation. @return PDCIDFontType2 instance for text rendering in PDF documents @throws IOException if font data is damaged or unreadable
2704 Adds object to pool, handles object streams and key updates. @param key unique identifier for the object @param base PDF document object to be managed @return base object after potential modifications
2705 Checks if the annotation is set to be printed in a PDF document. @return true if print flag is set, false otherwise
2706 Protects the PDF document with a given protection policy. Initializes encryption and sets up a security handler based on the provided policy. @param policy The protection policy to be enforced @throws IOException if no suitable security handler is found for the policy
2707 Retrieves the glyph name for a given character code using Unicode mapping. @param code integer character code @return corresponding glyph name or ".notdef" if not found
2708 Maps character codes to glyph identifiers based on font embedding and availability of mappings. @param code input character code @return corresponding glyph identifier or default value if not found
2709 Retrieves the Mac subtype from embedded file parameters. @return Mac subtype string or null if not found
2710 Retrieves the role map from the structure tree root. @return Role map as a Map or an empty map if not found.
2711 Checks if filtering is required based on seed value flags. @return true if filter flag is set, false otherwise
2712 Checks if sorting option is enabled for choice field. @return true if sorting is enabled, false otherwise.
2713 Checks if multiple selections are allowed in this choice field. @return true if multi-select is enabled, false otherwise
2714 Processes operators in a PDF content stream, handling color operations based on specific conditions. @param contentStream the source of PDF operators to process @throws IOException if an I/O error occurs during parsing or processing
2715 Checks if the annotation is set to be hidden based on its COSDictionary data. @return true if flag for hidden is set, false otherwise
2716 Adds a page to the PDF document and updates parent-child relationships & ancestor counts. @param page PDPage object to be added to the document's page tree
2717 Checks if annotation's contents are locked based on the F flag and FLAG_LOCKED_CONTENTS. @return true if contents are locked, false otherwise
2718 Checks if the annotation is hidden by examining its flags. @return true if annotation is hidden, false otherwise
2719 Determines if this button is a radio button by checking specific flags. @return true if the button is a radio button, false otherwise
2720 Determines if the button is a push button by checking its flag value. @return true if it's a push button, false otherwise
2721 Checks if subfilter is required in seed value attributes. @return true if flag for subfilter is set, false otherwise
2722 Checks if a digest method is required for the seed value. @return true if required, false otherwise
2723 Checks if the V flag is required in the seed value information. @return true if V flag is set, false otherwise
2724 Checks if the reason attribute is required in seed value. @return true if reason is required, false otherwise
2725 Checks if legal attestation is required for the digital signature. @return true if required, false otherwise
2726 Checks if additional revision information is required for the seed value. @return true if flag is set to add rev info, false otherwise
2727 Checks if subject flag is required in the certificate data. @return true if subject is required, false otherwise
2728 Checks if issuer flag is required in the certificate attributes
2729 Checks if OID (Object Identifier) is required in the certificate. @return true if OID is required, false otherwise
2730 Checks if Subject DN (Distinguished Name) flag is required in the certificate data. @return true if subject DN is required, false otherwise
2731 Checks if key usage flag is required in the certificate data field. @return true if key usage flag is set as required, false otherwise
2732 Checks if URL flag is set in certificate data field. @return true if URL flag is required, false otherwise
2733 Checks if the outline item's text is italicized. @return true if text is italicized, false otherwise
2734 Checks if the outline item's text is bold. @return true if bold flag is set, false otherwise
2735 Checks if signatures exist in the form fields of the PDF document. @return true if signatures exist, false otherwise
2736 Checks if the form field is append-only. @return true if append-only flag is set, false otherwise
2737 Checks if spell-check is disabled for this choice field. @return true if spell-check is disabled, false otherwise
2738 Removes a COSDictionary from the page tree and updates ancestor counts. @param node COSDictionary to be removed from the tree
2739 Retrieves the Mac creator attribute from embedded file parameters. @return Mac creator string if it exists; otherwise, null
2740 Retrieves the owner key for document encryption. @return The encrypted owner key or null if not found; adjusted size based on revision number. @throws IOException If an I/O error occurs during retrieval or copying of bytes.
2741 Retrieves and prepares the user encryption key based on PDF revision. @return User encryption key as byte array or null if not found @throws IOException for input/output errors during retrieval or copying
2742 Calculates displacement vector based on character width. @param code The character code to calculate displacement for @return Displacement vector as a new Vector object
2743 Retrieves the Mac OS resource fork embedded within a PDF document. @return String representing the Mac resource fork or null if not found
2744 Calculates the total width of a given string in PDFont's encoding. @param text The input string @return Total width of the encoded string @throws IOException If an I/O error occurs during encoding or reading
2745 Retrieves a PDF pattern by its name from the resources dictionary. @param name unique identifier for the pattern @return PDAbstractPattern object if found; otherwise, null @throws IOException if an error occurs during pattern creation
2746 Maps a base font to a CID font based on descriptor and system info. @param baseFont Font identifier @param fontDescriptor Describes the font's features @param cidSystemInfo Character set information for filtering @return CIDFontMapping object or last-resort fallback if not found
2747 Sets the visibility of user property in PDF document structure and notifies changes. @param hidden true to hide, false to display the property
2748 Retrieves a PDShading object based on the given name. @param name unique identifier for the shading resource @return PDShading object or null if not found, throws IOException for errors
2749 Checks if the annotation is set to be invisible based on a specific flag. @return true if annotation is invisible, false otherwise
2750 Checks if the annotation is read-only. @return true if read-only, false otherwise
2751 Fetches an integer attribute from the COSDictionary. @param name key for the integer value @param defaultValue fallback value if not found @return integer value or defaultValue if not found
2752 Fetches the maximum length constraint of the text field. @return Maximum length or -1 if not set
2753 Loads and parses an FDF document from a file path string. @param filename The source FDF document as a String file path @return Parsed FDFDocument or null if parsing fails @throws IOException If there's an issue reading the file or parsing its content
2754 Fetches and returns the integer value of COSName.P from the PDF signature configuration
2755 Checks if zooming is disabled for the annotation. @return true if no zoom flag is set, false otherwise
2756 Retrieves or creates a PDShading object from the shading dictionary. @return PDShading object or null if not found, throws IOException for errors
2757 Prepares the document for decryption using public key cryptography. This method checks if the provided decryption material is compatible, retrieves encryption settings, and handles recipient information. It also computes the encryption key and sets up access permissions based on the enveloped data and certificate in the decryption material. @param encryption The encryption dictionary containing encryption settings. @param decryptionMaterial The decryption material used for retrieving the certificate and private key. @throws IOException If there are issues with the provided decryption material, encryption settings, or recipient information.
2758 Checks if this annotation's 'Locked' flag is set in the PDF document. @return true if locked; false otherwise
2759 Checks if the PDF field is required to be filled out. @return true if required, false otherwise
2760 Clips a rectangle to the media box of the page, returning a new rectangular region. @param box The input rectangle to be clipped @return A new PDRectangle within the bounds of the media box
2761 Checks if the selection change should be committed immediately in the PDF form. @return true if commit on selection change is enabled, false otherwise
2762 Checks if the Toggle No View flag is set for this annotation. @return true if flag is set, false otherwise
2763 Adds an attribute to the PDF structure element and updates its revision number. @param attributeObject the attribute object to be added
2764 Checks if the choice field allows multiple selections (combo). @return true if combo flag is set, false otherwise
2765 Checks if the combo box field is editable. @return true if editable, false otherwise
2766 Checks if the field is read-only based on its flags. @return true if read-only flag is set, false otherwise
2767 Checks if field has 'no export' flag set. @return true if no export flag is set, false otherwise
2768 Checks if the NO_VIEW flag is set for the annotation. @return true if NO_VIEW flag is set, false otherwise
2769 Checks if the text field allows multiple lines of input. @return true if multiline, false otherwise
2770 Checks if the text field has a password character display flag set. @return true if password character display is enabled, false otherwise
2771 Checks if file selection flag is set in the PDF text field. @return true if flag is set (file select enabled), false otherwise
2772 Checks if spell-check is disabled for this text field. @return true if spell-check is disabled, false otherwise
2773 Checks if the DO NOT SCROLL flag is set for this text field. @return true if flag is set (scrolling disabled), false otherwise
2774 Checks if the COMB flag is set in the text field. @return true if COMB flag is set, false otherwise
2775 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
2776 Checks if radio buttons in the form operate in unison. @return true if radios are in unison, false otherwise
2777 Sets the italic style of the font descriptor. @param flag true for italic, false for normal
2778 Sets the stroking color for PDF graphics, handling colorspace changes and writing values to content stream. @param color The PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
2779 Draws an inline image at the specified coordinates using its original dimensions in the PDF document. @param inlineImage PDInlineImage object containing image data @param x X-coordinate of the image's position @param y Y-coordinate of the image's position @throws IOException if an I/O error occurs during operation
2780 Prepares the PDF document for encryption by setting up an encryption dictionary and managing passwords, permissions, and versions. @param document The PDDocument to be encrypted @throws IOException if an error occurs during encryption setup
2781 Retrieves the page number from a PDF document destination. @return Page number or -1 if not found or invalid type.
2782 Retrieves a specific page from the PDF document. @param pageIndex 0-based index of the desired page @return PDPage object representing the specified page
2783 Initializes visual signature from an input stream. @param is InputStream containing PDF data for the signature @throws IOException if there's an error during initialization or parsing
2784 Initializes visual signature from a File input. @param file the PDF document containing the signature @throws IOException if there's an error during parsing or initialization
2785 Loads a PDF document from a source using provided credentials. @param randomAccessRead Data source for the PDF. @param password Optional encryption key. @param keyStore Optional KeyStore for additional security. @param alias Optional alias within the KeyStore. @return Parsed PDDocument object, may be encrypted or null on failure.
2786 Loads a PDF document from source with optional encryption key. @param randomAccessRead data source for the PDF @param password optional encryption key @return Parsed PDDocument object, may be encrypted or null on failure
2787 Loads a PDF document from the provided data source. @param randomAccessRead Data source for the PDF @return Parsed PDDocument object or null on failure @throws IOException If an I/O error occurs during loading
2788 Loads a PDF document from byte array with optional decryption and key store. @param input source of the PDF document as bytes @param password optional decryption password for encrypted documents @param keyStore input stream for keystore containing private keys @param alias alias of the private key to use in keystore @return parsed PDDocument object or throws IOException
2789 Adds a page to PDF document & updates object numbers. @param page Page to be added
2790 Initializes new instance of PageExtractor with source PDF document and sets end page to total number of pages. @param sourceDocument the PDF document from which to extract pages
2791 Initializes PDFPageable with document and printing settings. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print. @param dpi Print resolution in Dots Per Inch. @param center Indicates whether content is centered on the page.
2792 Parses cross-reference tables and streams, validates object offsets, and builds a valid XREF table for the PDF document. @param document The COSDocument to parse and modify @param startXRefOffset Initial byte position of the first XREF table or stream @return Trailer dictionary containing metadata about the parsed XREF tables @throws IOException If an I/O error occurs during parsing or validation
2793 Parses a COSBase object dynamically based on its key and requirements. @param objKey unique identifier for the object @param requireExistingNotCompressedObj flag to check if object is defined and not compressed @return parsed COSBase object or null if not found; throws IOException if errors occur
2794 Updates the open count of a node's parent based on the provided delta. @param delta change in open count to apply
2795 Sets the button value, validating and updating as needed. @param value The new value for the button. @throws IOException If there's an issue with I/O operations.
2796 Sets or unsets the fixed pitch font descriptor flag. @param flag true to mark as fixed pitch, false otherwise
2797 Sets or unsets the serif font style attribute in the PDF font descriptor. @param flag true to set as serif, false otherwise
2798 Sets the symbolic flag in font descriptor. @param flag true if font is symbolic
2799 Sets the script flag in the font descriptor. @param flag Boolean value to enable or disable the script flag.
2800 Sets the non-symbolic flag in font descriptor. @param flag Boolean value to set
2801 Sets or unsets the ALL CAPITALS font descriptor flag. @param flag true to enable all capital letters, false otherwise
2802 Sets the small capitals font feature. @param flag True to enable, false to disable
2803 Sets or unsets the force bold font descriptor flag. @param flag true to force bold, false otherwise
2804 Creates PDImageXObject from byte array for CCITT-encoded images. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
2805 Creates a PDImageXObject from a file for CCITT-encoded images. @param document PDF document to add the image to @param file Input file containing the image data @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
2806 Constructs a new FDFAnnotation object from the provided XML element. This method parses the attributes of the element to initialize various properties such as page, color, date, flags, name, rectangle, title, creation date, opacity, subject, intent, contents and border style. It also handles richtext content if present. @param element The XML element containing annotation data @throws IOException If the required 'page' or 'rect' attribute is missing or has incorrect values, or if there's an error while evaluating XPath expressions for contents and richtext contents
2807 Sets the non-stroking color for the content stream, managing color space changes and components. @param color PDColor object defining the new color settings @throws IOException if an error occurs during writing to output stream
2808 Retrieves the crop box of the page, clipping it to media box if necessary. @return The crop box rectangle or media box if not found or invalid.
2809 Generates and inserts appearance for a combination field, handling text display based on alignment and size. @param contents PDF content stream to add text @param appearanceStream source of dimensions and positioning info @param font the typeface used for rendering text @param fontSize size of the font @throws IOException if an I/O error occurs during text display or calculation
2810 Adds structure to PDF, handles indirect objects and adds them to pool. @param current the object to be added to the PDF structure @throws IOException if there is an issue with adding or retrieving objects
2811 Retrieves the standard structure type of a PDF element. @return Standard structure type as string or null/original if not found in role map.
2812 Creates a descendant CID font from given dictionary and parent type 0 font. @param dictionary font info in PDF format @param parent additional font data, may be null @return new PDCIDFontType0 or PDCIDFontType2 object based on subtype @throws IOException if font data is invalid or unreadable
2813 Collects and processes shading patches from a COSStream. @param xform Affine transformation to apply; matrix for coordinate conversion @param matrix Transformation matrix for coordinates @param controlPoints Number of control points in the patch @return List of Patch objects or an empty list if no patches found @throws IOException for input/output errors or missing Decode entry
2814 Creates an input stream using default decoding options. @return Decoded COSInputStream or throws IOException if creation fails
2815 Converts input stream data into a text string. @return String representation of the input stream or an empty string if IOException occurs
2816 Creates and draws a cloud-like ellipse with border effect based on the input rectangle. @param rd Input rectangle for dimensions; applies difference and minimum values @throws IOException if there's an error while generating or drawing the curve segment
2817 Retrieves and validates the parent markup annotation. @return PDAnnotationMarkup if successful; otherwise, logs error and returns null.
2818 Retrieves the annotation to which this annotation is a reply. @return PDAnnotation object if this annotation has a reply; otherwise, null @throws IOException if there's an error accessing PDF data
2819 Notifies changes in the attribute to its associated structure element. Updates revision number if structure element is present.
2820 Saves the PDF document incrementally with subsetted fonts to an output stream. @param output the output stream for writing the updated document @throws IOException if there are issues during saving or subsetting of fonts
2821 Writes the PDDocument to output stream without signing. @param doc the PDF document to be written @throws IOException if there are issues with writing data
2822 Sets the default value for a PDF button and validates its input. @param value The string to be set as the default value
2823 Fetches and returns a COSObjectable (XObject or Annotation) based on the OBJ key. @return COSObjectable object, XObject, Annotation, or null if not found/supported
2824 Retrieves and filters annotations based on a provided filter. @param annotationFilter filter to determine which annotations to include @return list of PDAnnotation objects that pass the filter criteria
2825 Transfers optional content properties from source to target document. @param srcDoc the source PDF document containing OC properties @throws IOException if an error occurs during cloning or merging processes
2826 Constructor for PDFPrintable with settings for document, rendering options, and configurations. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch @param center Boolean indicating if pages should be centered
2827 Fetches and sets the Unicode (UCS-2) CMap for specific font types. @throws IOException if an I/O error occurs during fetching or construction of the CMap
2828 Appends a marked content kid to the structure using its MCID. Throws exception if MCID is invalid. @param markedContent object containing the MCID for appending
2829 Removes a page from the PDF document at the specified index. @param index position of the page to be removed (0-based)
2830 Decodes LZW-compressed data and wraps output stream with predictors based on given parameters. @param encoded InputStream containing compressed data @param decoded OutputStream for decompressed data @param parameters Dictionary containing decoding information @param index Parameter index @return DecodeResult object containing decoding results
2831 Decodes JPEG2000 image data from input stream and writes the decoded data to output stream. @param encoded InputStream containing encoded JPX data @param decoded OutputStream for writing decoded data @param parameters COSDictionary containing decoding parameters @return DecodeResult object with additional information about the decoding process
2832 Fetches decoded image with full dimensions and no subsampling. @return Decoded BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
2833 Constructs a TilingPaint object with default color space and color. @param drawer PageDrawer instance for drawing operations @param pattern PDTilingPattern object containing pattern details @param xform AffineTransform object for transformations @throws IOException if an I/O error occurs during processing
2834 Processes a PDF content stream, managing resources and graphics states. @param contentStream the source of PDF operators to process @throws IOException if an I/O error occurs during parsing or processing
2835 Processes annotation appearance, scales and transforms according to its rectangle. @param annotation the annotation to process @param appearanceStream stream containing appearance details @throws IOException if I/O error occurs during processing
2836 Checks if all characters in the font are capitalized. @return True if all cap flag is set, false otherwise
2837 Checks if the font descriptor indicates an italic style. @return True if the italic flag bit is set, false otherwise
2838 Checks if the font descriptor flags indicate that the font is non-symbolic. @return True if the font is non-symbolic, false otherwise
2839 Checks if the font descriptor flag indicates that it's a script. @return True if the font is a script, false otherwise
2840 Checks if the font descriptor has the symbolic flag set.
2841 Checks if font descriptor flag indicates serif style. @return True if serif style, false otherwise
2842 Retrieves and validates a PDF pattern for the given color. @param color input color to find pattern for @return PDAbstractPattern object if found; otherwise, throws IOException
2843 Inserts a new page after a specified existing page in the document's page tree. @param newPage the PDPage object to be inserted @param prevPage the existing PDPage before which newPage will be placed
2844 Inserts a new page before an existing one in the PDF document's page tree. @param newPage PDPage object to be inserted @param nextPage existing PDPage before which `newPage` is inserted
2845 Processes a tiling pattern, applying transformations and managing resources. @param tilingPattern The pattern to process @param color The color for the pattern @param colorSpace The color space for the pattern's color @param patternMatrix Transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
2846 Checks if the small capitals flag is set in font descriptor. @return True if small caps are enabled, false otherwise
2847 Creates a PDField object based on the definitions in the provided COSDictionary. @param form Parent AcroForm structure. @param field COSDictionary containing field definitions. @param parent The parent PDNonTerminalField (if any). @return A PDField object representing the appropriate field type or null if invalid.
2848 Removes a PDPage from the page tree and updates ancestor counts.
2849 Processes a Type 3 character stream for accurate PDF rendering. @param charProc the character procedure to process @param textRenderingMatrix transformation matrix for text rendering @throws IOException if an I/O error occurs during processing
2850 Processes a transparency group in PDF document rendering, managing resources and graphics states. @param group the PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
2851 Checks if a text field should be combined based on specific conditions. @return true if comb conditions are met, false otherwise
2852 The Java method `prepareForDecryption` is an important part of the PDF decryption process. This method takes in a PDEncryption object, a COSArray object containing document ID bytes, and DecryptionMaterial for decryption. It performs various checks and computations to prepare for the decryption process based on the encryption version and type used in the PDF document. The method first verifies that the provided DecryptionMaterial is compatible with the document. If not, it throws an IOException. Then, depending on the encryption version (4 or 5), it sets stream filter name and string filter name from the PDEncryption object. It also determines whether AES encryption is used by checking the standard crypt filter dictionary in the encryption object. The method then retrieves document ID bytes using a helper function `getDocumentIDBytes`. It checks if metadata was encrypted during the encryption process and obtains user key and owner key from the PDEncryption object. Based on the encryption revision (5 or 6), it sets the password character set to UTF-8 and retrieves additional encryption keys. If the encryption revision is 6, it performs SASLprep querying on the password. The method then checks if the provided password matches either the owner password or user password. Depending on which password matches, it sets the current access permission accordingly. It computes an encrypted key using a helper function `computeEncryptedKey` based on various parameters such as the password bytes, encryption keys, permissions, document ID bytes, and whether metadata was encrypted. Finally, if the encryption revision is 5 or 6, it calls another method `validatePerms` to validate the permissions with the encryption object and whether metadata was encrypted. The resulting encrypted key is then set for decryption.
2853 Checks if font has fixed pitch. @return True if font has fixed pitch, false otherwise
2854 Calculates and returns the width of a space character in PDFont. @return Space character's width as float, or 250 if calculation fails.
2855 Checks if the force bold flag is set in font descriptor flags. @return True if force bold is enabled, false otherwise
2856 Constructs a FDFAnnotationStamp object from XML element and sets its appearance based on XFDF specifications. @param element XML representation of the stamp annotation @throws IOException if there's issue parsing or reading XML data
2857 Constructs a square annotation from XML element and sets interior color & fringe dimensions. @param element the XML Element to initialize from
2858 Initializes a free text annotation from XML element and sets its properties. @param element The XML element containing annotation data @throws IOException If there's an error during initialization or parsing
2859 Initializes FDFAnnotationInk with XML element and sets INKLIST annotation data. @param element XML element containing ink annotation data @throws IOException if 'gesture' element is missing in the input
2860 Initializes an FDFAnnotationLine with attributes from the provided XML element. Sets line coordinates, leader properties, endpoint styles, interior color, and caption settings. @param element XML element containing annotation details @throws IOException if required attributes are missing or invalid
2861 Initializes FDFAnnotationLink from an XML element, setting URI and action if present. @param element XML element containing link information @throws IOException if there's an error during initialization
2862 Constructs a polygon annotation from XML element and sets interior color. @param element source XML element containing vertex and color data @throws IOException if element is missing required attributes or values
2863 Initializes a polyline annotation from XML element and sets its name. @param element The input XML element containing annotation data @throws IOException If there's an error parsing the vertices or styles
2864 Retrieves all annotations on the page.
2865 Imports a page from sourceDoc and returns it as a PDFormXObject for controlled addition to the targetDoc. @param sourceDoc the document containing the page to be imported @param page the specific page object to be transformed into a form @return the imported page as a PDFormXObject or null if not successful @throws IOException if an error occurs during content retrieval, resource cloning, or transformation processes
2866 Constructor for PDFPrintable with settings for document and rendering options. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch
2867 Initializes sound annotation from XML element and sets its subtype. @param element The XML element containing annotation data @throws IOException If there's an error while setting the subtype
2868 Manages visibility of marked content based on optional content group properties. @param tag name of the marked content sequence @param properties dictionary containing additional information about the content
2869 Renders a PDF form XObject if not hidden in OCG and content is rendered. @param form PDFormXObject to be shown @throws IOException if an I/O error occurs during rendering
2870 Sets non-stroking color for content stream, managing color space and components. @param color PDColor object defining the new color settings @throws IOException if an error occurs during writing to output stream
2871 Finds the destination page in a PDF document based on outline item's destination or action. @param doc The PDF document to search within @return PDPage object if found, otherwise null @throws IOException for unknown destination types or errors during retrieval
2872 Calculates and sets the size of a specific PDF page, including height and width, and handles rotation adjustments. @param document PDDocument object containing pages to process @param page Index (1-based) of the target page in the document
2873 Imports a page from another PDF and adds it to the document. @param page Page object to be imported @return Imported PDPage object or throws IOException if import fails
2874 Creates a PDF template from a given page and sets it for the PDF structure.
2875 Creates PDFPageable with default settings for a given PDDocument. @param document The source PDF document to be printed
2876 Initializes PDFPageable with document and page orientation. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait).
2877 Constructs a PDFPageable object with default DPI and content centering. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print.
2878 Constructs a PDFPageable object with specified settings and default centering. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print. @param dpi Print resolution in Dots Per Inch.
2879 Loads a PDF document from byte array with optional decryption. @param input source of the PDF document as bytes @param password optional decryption password for encrypted documents @return parsed PDDocument object or throws IOException
2880 Loads a PDF from file with an optional decryption password. @param file the PDF file to load @param password the decryption password if encrypted, or null otherwise @return loaded PDF document or throws IOException on failure
2881 Loads a PDF from file with optional password and keystore. @param file The PDF file to load. @param password Decryption password if encrypted. @param keyStore Keystore for certificate-based encryption. @param alias Alias of the certificate. @return Loaded PDF document or throws IOException on failure.
2882 Constructs a new FDFAnnotationFileAttachment from the provided XML element and sets its subtype. @param element The XML element containing annotation data @throws IOException If there's an error while setting the subtype
2883 Sets the stroking color for PDF graphics, handling various color spaces and writing values to content stream. @param color The PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
2884 Retrieves and validates the PDF document's trailer dictionary. Handles parsing, error handling, and decryption setup.
2885 Constructs a text markup annotation from an XML element, sets its coordinates. @param element XML element containing annotation data @throws IOException if 'coords' attribute is missing or invalid
2886 Constructs an FDFAnnotationText from XML element, initializes icon and state/model if available. @param element The XML element containing annotation data @throws IOException If required attributes are missing or invalid
2887 Sets visual signature properties using a PDVisibleSigProperties object. @param visSignatureProperties object containing visible signature properties @throws IOException if an error occurs during initialization or parsing of the signature
2888 Initializes an FDFAnnotationCircle with XML element and sets interior color & fringe. @param element XML representation of the circle; contains 'interior-color' attribute @throws IOException if 'fringe' attribute in XML is invalidly formatted
2889 Removes a specific page from the PDF document. @param page PDPage object to be removed
2890 Creates a PDImageXObject from a file for CCITT-encoded images. @param document PDF document to add the image to @param file Input file containing the image data @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
2891 Extracts string from COSBase object (string or stream). @param base COSBase object to extract string from @return String extracted from the object, or empty if not a valid type or error occurs
2892 Recursively searches for a child field with matching name. @param name array of names to search through @param nameIndex current index in the name array @return PDField object if match found; otherwise, null
2893 Retrieves and processes form fields from a PDF document. @return List of PDField objects or an empty list if none are found.
2894 Returns a Paint object for rendering based on the provided color, considering various conditions and transformations. @param color PDColor object to convert into a Paint object @return Paint object suitable for PDF rendering or null if not possible @throws IOException if there are errors in retrieving pattern or shading information
2895 Determines and returns a fallback font name based on the font descriptor's properties. @param fontDescriptor describes various attributes of a font, such as name and style @return a string representing an appropriate substitute font name
2896 Retrieves symbolic flag from font descriptor. Returns null if no descriptor exists. @return Boolean value of the symbolic flag, or null if not applicable
2897 Splits the paragraph's text into lines based on specified width and font characteristics. @param font The PDFont object for text formatting @param fontSize Size of the font @param width Maximum allowed line width @return List of Line objects representing each line in the paragraph
2898 Retrieves and returns the value of a form field, handling different types. @return The value of the field as Object or null if not found; may throw IOException for unknown types
2899 Overrides the showGlyph method to handle individual glyph rendering in a PDF document. This method calculates the displacement and transformation of each glyph, converts it into display units, and then processes the text position. It is specifically designed for use with PDFTextStripper and should not be used for other purposes as the calculations are deliberately incorrect outside this context. @param textRenderingMatrix The matrix used to render the text in device space. @param font The font of the glyph being rendered. @param code The character code of the glyph. @param displacement The displacement vector of the glyph from its original position. @throws IOException If an error occurs while reading or writing data.
2900 Saves the document to an output stream with compression options. @param output the output stream for writing PDF data @param compressParameters parameters to control document compression
2901 Notifies changes in attribute value and updates structure element
2902 Initializes the rendering context for a given PDF page. @param page The PDF page to be initialized
2903 Retrieves the bleed box of the page, a region outside the media box used for printing. @return The bleed box rectangle or crop box if not found or invalid.
2904 Retrieves the trim box of the page, clipping it to media box if necessary. @return The trim box rectangle or crop box if not found.
2905 Retrieves the art box of the page, clipping it to media box if available; otherwise, returns crop box. @return The art box rectangle or crop box if not found or invalid.
2906 Returns a rotated crop box for the given page if rotation angle is 90 or 270 degrees, otherwise returns the original crop box. @param page The PDPage object to retrieve crop box and rotation angle from @return A PDRectangle representing the rotated crop box or original crop box
2907 Writes COSDocument to output stream as a PDDocument. @param doc The COSDocument to be written @throws IOException if there are issues with writing data
2908 Retrieves rich text from the field's dictionary object. @return String representation of rich text or null if not found
2909 Retrieves and returns the 'before' event script from a PDF form. @return String containing JavaScript or null if not found or unsupported type
2910 Fetches the 'AFTER' JavaScript action from a PDF form. @return String representation of the action or null if not found
2911 Constructs FDFAnnotationCaret from XML, initializes subtype and fringe dimensions. Sets symbol if provided in the element's 'symbol' attribute. @param element The XML source for annotation data @throws IOException If required attributes are missing or invalid
2912 Loads the ICC profile, handling exceptions and alternate color space. @throws IOException if input stream creation or profile processing fails
2913 Initializes the compression pool with document and parameters. Sorts object and top-level structures. @param document The PDF document to be compressed @param parameters Compression settings; uses default if null @throws IOException If there's an issue adding structure or retrieving objects
2914 Sets the value of a single-valued choice field and clears multi-selection. @param value String to be set as the new value @throws IOException if I/O errors occur during setting the value
2915 Initializes Type5ShadingContext for PDF document rendering. @param shading PDShading object representing the shading technique. @param cm ColorModel for managing colors in graphics. @param xform AffineTransform object for transforming coordinates. @param matrix Matrix object for mathematical operations. @param deviceBounds Defines the pixel area for shading effects. @throws IOException if there is an error initializing resources.
2916 Initializes Type4ShadingContext for PDF document rendering with specific shading parameters and transformation settings. @param shading PDShadingType4 object representing the shading technique @param cm ColorModel object for managing colors in graphics @param xform AffineTransform object for transforming coordinates @param matrix Matrix object for mathematical operations @param deviceBounds Rectangle defining the area of rendering @throws IOException if there is an error initializing resources
2917 Initializes PatchMeshesShadingContext with PDF shading and color model. Collects patches and creates pixel table. @param shading PDShading object for the context; xform, matrix for transformations; controlPoints number of points @param colorModel ColorModel to be used @param deviceBounds Bounds for pixel table creation @throws IOException if error occurs during initialization or patch collection
2918 Retrieves and initializes sample array from input stream based on PDF specification. @return int[][] representing sample values or throws IOException if creation fails
2919 Retrieves stream data as a byte array. May throw IO exception during input stream creation or reading. @return Stream data as a byte array or throws IOException if an error occurs.
2920 Creates a layout page by combining content streams and initializing resources. @param page the original PDF page @return a LayoutPage object with combined content, resources, and rotation @throws IOException if an error occurs during stream creation or data transfer
2921 Extracts string value from a COSBase object, converting it based on its type. @param base the COSBase object (either COSString or COSStream) to extract string from @return String representation of the COSBase object or an empty string if not applicable
2922 Retrieves rich content from a PDF annotation. Supports both strings and streams. @return Rich content as a string or null if not available in supported formats.
2923 Retrieves and returns JavaScript action string from PDF document. @return JavaScript action string or null if not found or invalid type
2924 Displays a transparency group from PDF document. @param form the PDTransparencyGroup object to be displayed @throws IOException if an I/O error occurs during displaying
2925 Retrieves and returns a list of child fields within the current field object. @return List<PDField> containing all child fields or an empty list if none exist
2926 Renders a Type 3 glyph for PDF rendering by processing the character stream. @param textRenderingMatrix transformation matrix for text rendering @param font the PDType3Font object containing the glyph data @param code unique font encoding identifier @throws IOException if an I/O error occurs during processing
2927 Constructs a font descriptor for given metrics, setting attributes such as name, family, symbolic status, bounding box, italic angle, and more. @param metrics FontMetrics object containing the required data @return PDFontDescriptor with populated attributes based on input metrics
2928 Constructs a font descriptor for the given Type 1 font. @param type1 The source Type 1 font object @return A populated PDFontDescriptor object @throws IOException if an error occurs during processing
2929 Generates page labels for each index in the PDF document. @return Array of strings representing page labels; null if no label found.
2930 Generates a map of labels to their corresponding page indices. @return Map<String, Integer> with labels as keys and page indices as values
2931 Removes a single page from the PDF document at the specified index. @param pageNumber position of the page to be removed (0-based)
2932 Renders a form object from PDF and processes its content stream, throwing exception if no current page is set. @param form the PDFormXObject to be displayed @throws IOException if an I/O error occurs during processing
2933 Generates a font descriptor for the given TrueTypeFont object. @param ttf The input TrueTypeFont object to create the descriptor from @return A PDFontDescriptor object containing font properties and metrics @throws IOException if required tables are missing in the font
2934 Fetches and prepares normal appearance stream for annotation. @param compress true if output should be compressed, false otherwise @return PDAppearanceContentStream object or throws IOException if error occurs
2935 Creates PDImageXObject from byte array for CCITT-encoded images. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
2936 Overloaded method to process a tiling pattern with default transformation matrix. @param tilingPattern The pattern to process @param color The color for the pattern @param colorSpace The color space for the pattern's color @throws IOException if an I/O error occurs during processing
2937 Initializes a content stream for a PDF page with warning for overwriting. @param document the PDF document @param sourcePage the target PDF page @throws IOException if an I/O error occurs
2938 Manages and displays the visual representation of a PDF annotation. @param annotation The annotation object to be processed and displayed. @throws IOException If I/O error occurs during processing or rendering.
2939 Processes a soft mask for transparency groups, managing graphics states and colors. @param group the PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
2940 Initializes and customizes the visual content of a widget's appearance stream. Handles background color, border style, and comb field dividers. @param widget annotation widget to be customized @param appearanceCharacteristics dict containing appearance properties @param appearanceStream target stream for writing content @throws IOException if there's an error creating or writing to the output stream
2941 Formats and displays text content based on given parameters and styles. @throws IOException If an I/O error occurs during formatting or displaying the text
2942 Initializes a strikeout annotation from XML and sets its subtype. @param element XML element containing annotation data @throws IOException if initialization fails due to missing data
2943 Initializes underline annotation from XML element and sets its subtype. @param element XML data for the annotation @throws IOException if data is missing or invalid
2944 Processes a PDF page, initializing context and rendering content stream. @param page The PDF page to be processed @throws IOException if an I/O error occurs during processing
2945 Processes a child content stream within the context of a PDF page. @param contentStream the source of PDF operators to process @param page the parent PDF page for the content stream @throws IOException if an I/O error occurs during processing
2946 Initializes PDVisibleSignDesigner with a PDF document, signature image, and target page. @param document The PDDocument object to process. @param image The BufferedImage object used as the signature's image. @param page The 1-based index of the target page in the document.
2947 Initializes a new instance of PDVisibleSignDesigner with the provided document, image stream, and page. @param document PDF document containing pages to process @param imageStream Input stream for setting signature image @param page Index (1-based) of target page in the document @throws IOException if an error occurs during reading or processing
2948 Constructs a PDFPrintable object with settings for the document and rendering options. @param document The PDDocument to be printed @param scaling The Scaling strategy for page content @param showPageBorder Boolean indicating border visibility
2949 Writes font settings to a content stream, setting the default size when required. @param contents target content stream @param zeroFontSize fallback font size if current is 0
2950 Loads a PDF document from byte array without decryption. @param input source of the PDF document as bytes @return parsed PDDocument object or throws IOException
2951 Extracts bytes from the XFA resource's COS object, handling both array and stream types. @return extracted byte data from the COS object or an empty array if not applicable @throws IOException if an I/O error occurs during extraction
2952 Initializes Type7ShadingContext for a given PDShadingType7 and ColorModel. Supports transformations. @param shading PDShadingType7 object; xform for AffineTransform; matrix for transformation settings @param colorModel ColorModel to be used; deviceBounds for pixel table creation @throws IOException if initialization or patch collection fails
2953 Initializes Type6ShadingContext with shading and color model. Sets up for complex shading effect rendering. @param shading PDShadingType6 object; xform AffineTransform for transformations; matrix Matrix for additional transforms @param colorModel ColorModel to be used; deviceBounds Bounds for pixel table creation @throws IOException if error occurs during initialization or patch collection
2954 Appends a form as a new layer in target PDF page and manages optional content groups. @param targetPage the page to add the form layer to @param form the source form object to be drawn on the page @param transform transformation matrix for positioning and scaling @param layerName unique name for the new optional content group (layer) @return PDOptionalContentGroup object representing the newly created layer @throws IOException if an error occurs during PDF manipulation
2955 Initializes PDICCBased with ICC profile data from a COSArray. @param iccArray contains ICC profile data; index 1 holds the color stream @throws IOException if there's an issue accessing the color stream
2956 Performs recursive interpolation on input coordinates. @param coord Coordinates for interpolation @param step Current index in the process @return Interpolated float array based on provided parameters
2957 Retrieves rich text value from the PDF document. @return Rich text string or an empty string if not applicable
2958 Writes XML representation of field to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
2959 Extracts rich content string from annotation's dictionary object. @return Rich content string, or empty if not found or error occurs
2960 Checks if the PDF form is dynamically generated using XFA. @return true if XFA is present and no fields are found; false otherwise
2961 Maps and retrieves a FontBoxFont based on baseFont and fontDescriptor. Uses fallback if necessary. @param baseFont the primary font identifier @param fontDescriptor describes various attributes of a font @return FontMapping object containing matching FontBoxFont or fallback font with status
2962 Retrieves TrueTypeFont mapping based on base font and descriptor. @param baseFont unique font identifier @param fontDescriptor describes font attributes for fallback matching @return FontMapping with TrueTypeFont or fallback font if not found
2963 Determines if the font is symbolic based on its flag and encoding. @return Boolean value of symbolic property, or null if unknown
2964 Reads and sets the font encoding based on dictionary values, handling symbolic flags and encodings.
2965 Calculates the optimal font size for text within a rectangle in consideration of content and size constraints. @param font PDFont object containing font information @param contentRect Rectangle defining the space where text will be placed @return Optimal font size as a float value @throws IOException If an I/O error occurs during calculation or retrieval of font metrics
2966 Constructs a squiggly line annotation from an XML element and sets its subtype. @param element XML element containing annotation data @throws IOException if subtype setting fails
2967 Initializes Function Type 4 with a stream and processes it into instructions. @param functionStream COSBase containing PDF function data @throws IOException if there's an issue reading the stream
2968 Initializes a highlight annotation from an XML element and sets its subtype. @param element the XML element containing annotation data @throws IOException if there's an issue with setting the subtype
2969 Loads and parses a PDF document from a given file. @param file The input PDF file @return Parsed PDDocument object or null if loading fails
2970 Saves the document to a file with compression options. Warns if overwriting an existing non-empty file. @param file The destination file for saving the PDF data @param compressParameters Parameters to control document compression
2971 Retrieves the page format for a specific index, considering rotation and orientation settings. @param pageIndex The 0-based index of the desired page @return PageFormat object representing the formatted page
2972 Loads a PDF from file with an optional decryption password. @param file the PDF file to load @param password the decryption password if encrypted, or null otherwise @return loaded PDF document or throws IOException on failure
2973 Processes and handles annotations on a specific PDF page during splitting. Clones annotations, fixes links, and adjusts references for split documents. @param imported PDPage containing annotations to be processed
2974 Saves the document to an output stream with default compression settings.
2975 Fetches and prepares normal appearance stream for annotation. @return PDAppearanceContentStream object or throws IOException if error occurs
2976 Opens an outline item node in PDF document. If not open, switches node count and updates parent state.
2977 Closes an open outline node and updates its parent's count.
2978 Retrieves and creates layout page from first PDF document page. @param doc the source PDF document @return LayoutPage object for overlaying content @throws IOException if an error occurs during page retrieval or layout creation
2979 Displays a glyph based on the font type and performs transformation using provided matrix. @param textRenderingMatrix Transformation matrix for text rendering @param font The PDFont object containing the glyph data @param code Unique font encoding identifier @param displacement Vector indicating displacement of the glyph @throws IOException if an I/O error occurs during processing.
2980 Clones the structure tree from source to destination PDF document. @param destinationDocument The target PDDocument for cloning structure tree. @throws IOException if an I/O error occurs during cloning or setting the structure tree.
2981 Updates structural parent entries for a PDF page and its annotations. @param page The PDF page to update @param structParentOffset Value to adjust the structural parents count
2982 Writes the compressed body of a PDF document with object streams and encryption. @param document The COSDocument to be written @throws IOException If an error occurs during writing or creating output streams
2983 Imports a specific page of sourceDoc as a PDFormXObject for controlled addition to targetDoc. @param sourceDoc the document containing the desired page @param pageNumber 0-based index of the desired page @return the imported page as a PDFormXObject or null if not successful @throws IOException if an error occurs during content retrieval, resource cloning, or transformation processes
2984 Exports form data to an FDF document. @return FDFDocument containing exported field data or null on failure
2985 Constructs a PDType1FontEmbedder for embedding Type 1 fonts into PDF documents. @param doc the target PDF document @param dict COSDictionary for storing font data @param pfbStream InputStream containing PFB (Picture File Base) data @param encoding FontBox Encoding object; if null, uses default from Type 1 font @throws IOException if an error occurs during processing
2986 Initializes TrueTypeEmbedder with document, dictionary, and font data. Checks embedding permissions and sets up font descriptors for PDF documents. @param document the PDF document to associate with the embedder @param dict the COSDictionary containing font properties @param ttf the input TrueTypeFont object @param embedSubset if true, allows embedding of a subset of the font; false for full embedding @throws IOException if embedding is not permitted or if an error occurs during setup
2987 Initiates recursive interpolation on input data. @return Interpolated float array based on class's initialized values and coordinates.
2988 Extracts and converts the matte data from a soft-mask image to RGB. @param softMask PDImageXObject containing the soft mask @return Float array of RGB values or null if extraction fails @throws IOException for errors in retrieving color space or invalid data format
2989 Processes a PDF page and sets up the translation matrix based on crop box position. @param page The PDF page to be processed @throws IOException if an I/O error occurs during processing
2990 Extracts and parses the XML document from the XFA resource's bytes. @return Document object representing the parsed XML structure @throws IOException if there's any issue reading or parsing the XML data
2991 Constructs a PDType1Font object with specified encoding from input stream and document. @param doc the PDF document @param pfbIn Type 1 font data input stream @param encoding font encoding to be used, or null for default
2992 Initializes PDVisibleSignDesigner with an image & calculates PDF page size. @param documentSource Data source for the PDF @param image Signature's BufferedImage object @param page Index (1-based) of the target page in the document @throws IOException If I/O error occurs during initialization or calculation
2993 Creates a PDF function based on the given COSBase object. @param function COSBase object representing the PDF function @return PDFunction instance corresponding to the function type in the input @throws IOException if the function is not a dictionary or has an unknown function type
2994 Checks if the font is symbolic. Assumes true unless proven otherwise. @return Boolean value of symbolic property, defaults to true if unknown
2995 Determines if the given PDF form has dynamically generated XFA content. @param acroForm the PDF form to be checked @return true if XFA is present and no fields are found; false otherwise
2996 Constructs an FDFDictionary from XML data, initializing file specification, IDs, fields, and annotations. @param fdfXML the root XML element containing FDF data
2997 Creates PDImageXObject from BufferedImage with optimal encoding. Handles grayscale images and RGB images with predictive filtering. Falls back to sRGB for color preservation if necessary.
2998 Processes a page in the PDF splitting process, managing document creation, importing, and annotation handling. @param page PDPage to be processed; contains content, resources, and potential annotations
2999 Constructs PDTrueTypeFontEmbedder and sets up font properties for PDF documents. @param document the PDF document to associate with embedder @param dict COSDictionary containing font properties @param ttf TrueTypeFont object @throws IOException if embedding is not permitted or if an error occurs during setup
3000 Constructs a PDCIDFontType2Embedder object and sets up the font dictionary for embedding. @param document PDF document to embed font into @param dict Font descriptor dictionary @throws IOException if there's an error creating or accessing font data
3001 Initializes a PDFont object with the provided font dictionary and loads related data. @param fontDictionary COSDictionary containing font information
3002 Creates or retrieves an ICC-based color space from the given array and resources. @param iccArray contains color space data; index 1 holds the color stream @param resources for efficient resource retrieval and management @return PDICCBased object representing the color space @throws IOException if there's an issue accessing or validating the array/stream
3003 Constructs a PDFPrintable object with settings for the document and rendering options. @param document The PDDocument to be printed @param scaling The Scaling strategy for page content
3004 Renders a PDF page onto the provided Graphics2D context. @param g The target Graphics2D context for rendering @param pageSize Rectangle representing the size of the page to be rendered @throws IOException if I/O error occurs during rendering
3005 Constructs a PDF with a visible signature based on provided design properties. @param properties Object containing design parameters for the visible signature @return InputStream object representing the constructed PDF document @throws IOException if there are issues with writing or reading data during construction
3006 Saves the document to a file with default compression settings. @param file The destination file for saving the PDF data @throws IOException if an I/O error occurs during save operation
3007 Saves the PDF document to a file with optional compression. @param fileName The name of the destination file for saving the PDF data @param compressParameters Parameters controlling document compression; may be null for no compression
3008 Inserts a generated appearance stream into the provided annotation widget based on the field's value and default appearance settings. This method handles various aspects such as font selection, size calculation, text alignment, and clipping paths to create the appearance that matches Acrobat's behavior. It also manages the generation of highlight rectangles for selected options in listboxes and supports multiline text fields. @param widget The annotation widget to insert the generated appearance stream into. @param appearanceStream The appearance stream that will be used to create the content stream. @param output The output stream where the generated appearance data will be written. @throws IOException If an I/O error occurs during the generation or writing of the appearance data.
3009 Imports data from an FDF field to the current PDField. Handles various COSBase types and updates field values and flags accordingly. @param fdfField source of data for importing @throws IOException if field value type is unknown or unsupported
3010 Writes XML representation of FDF document to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3011 Initializes PDVisibleSignDesigner with document source, image stream, and target page. @param documentSource Data source for the PDF. @param imageStream Input stream for visible signature image. @param page Index of the target page in the document (1-based). @throws IOException If an I/O error occurs during initialization.
3012 Draws an image at specified coordinates using its original width and height
3013 Initializes FieldIterator with child fields from a PDF form. @param form PDAcroForm containing the fields to be iterated over
3014 Deprecated; loads and parses a PDF document from a given file. @param file The input PDF file @return Parsed PDDocument object or null if loading fails
3015 Initializes FDFCatalog with XML data and sets the corresponding FDF dictionary. @param element root XML element containing FDF data
3016 Initializes PDTrueTypeFont for PDF document embedding, setting up font properties and handling resource closure. @param document PDF document @param ttf TrueTypeFont object @param encoding Font encoding @param closeTTF Flag to close underlying data source after full load @throws IOException if embedding or closing fails
3017 Initializes PDType0Font with TrueType font, handles subsetting, vertical text, and resource management. @param document PDF document for embedding @param ttf TrueTypeFont to be used @param embedSubset whether to embed a subset of the font or not @throws IOException if there's an error with font data or subsetting
3018 Initializes a Type 0 font from dictionary and sets up its descendant font. @param fontDictionary contains font info in PDF format @throws IOException if font data is invalid or unreadable
3019 Initializes a simple font from a COS dictionary. @param fontDictionary contains font properties and settings
3020 Constructs a PDType1Font object with default encoding from input stream and document. @param doc the PDF document @param pfbIn Type 1 font data input stream @throws IOException if an I/O error occurs
3021 Initializes the PDVisibleSignDesigner with a file, image stream, and page index. Sets signature image and calculates page size. @param filename path to the input PDF file @param imageStream input stream for the signature image @param page target page index (1-based) in the document @throws IOException if there's an error processing the file or image stream
3022 Constructs PDVisibleSignDesigner by setting the image and calculating page size. @param filename path to the input PDF file @param image The BufferedImage object for the signature's image @param page index (1-based) of the target page in the document @throws IOException if there's an error loading or processing the PDF file
3023 Renders a specific page from the PDF document as an image with customizable settings. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @param imageType Type of the output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3024 Processes pages based on start and end page numbers. @throws IOException if there's an error during processing
3025 Renders a specific page of the PDF to the given Graphics2D context. @param pageIndex 0-based position of the page in the document @param graphics The target Graphics2D context for rendering @throws IOException if I/O error occurs during rendering
3026 Constructs a PDFPrintable object with default scaling strategy for printing a PDDocument. @param document The PDDocument to be printed
3027 Returns an iterator to traverse through the fields of the PDF form. @return An iterator initialized with child fields from this PDAcroForm instance.
3028 Saves the PDF document to a file with a given name. @param fileName The name of the destination file for saving the PDF data. @throws IOException if an I/O error occurs during save operation.
3029 Builds and sets the visible signature by creating a PDF template, building the PDF, and setting it. @throws IOException if there are issues with writing or reading data during construction
3030 Creates an image object from a file for a given PDF document. @param file Input file containing the image data @param doc PDF document to add the image to @return PDImageXObject or throws exception if not supported or errors occur
3031 Creates PDImageXObject from a file based on its extension. Supports JPG/JPEG, TIF/TIFF, GIF, BMP, and PNG formats. @param file Input image file @param doc PDF document to add the image to @return PDImageXObject or throws exception if format is not supported
3032 Retrieves and initializes the tint transform function if needed. @return PDFunction representing the tint transformation or null if not defined @throws IOException if there's an error during PDF function creation
3033 Initializes a DeviceN color space with given COSArray and resources. @param deviceN array containing color space data @param resources associated PDF resources for the color space @throws IOException if there are issues processing the input data
3034 Initializes PDSeparation with an array and resources, setting up alternate color space and tint transform. @param separation COSArray containing separation data @param resources PDResources for creating alternate color space @throws IOException if the tint transform function has less output parameters than the alternate colorspace
3035 Processes a PDF page and extracts text based on specified conditions. @param page The PDPage object to be processed @throws IOException if an I/O error occurs during processing
3036 Retrieves the functions array from the shading object. @return Array of PDFunctions used in shading calculations. @throws IOException if /Function element is not a dictionary or an array.
3037 Retrieves the shading function for this PDShading instance, creating it if necessary. @return The PDFunction representing the shading function or null if not present. @throws IOException If there's an issue with creating the function from its dictionary object.
3038 Evaluates input and chooses appropriate child function for calculation, based on input value. @param input Array of float values used in evaluation @return Float array containing the result of the chosen child function's evaluation
3039 Writes XML representation of FDF data to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3040 Retrieves the image object as a BufferedImage, optionally applying region and subsampling. @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @return Decoded and converted BufferedImage object with applied masking and alpha composition @throws IOException If an error occurs during decoding or reading input stream
3041 Constructs a PDIndexed object from COSArray and initializes color tables. @param indexedArray input array containing color space information @param resources associated PDF resources for management @throws IOException if color table reading or initialization fails
3042 Evaluates input values through linear interpolation, as per PDF specification (section 3.9.1). @param input array of floating-point numbers to be evaluated @return an array of floats representing the evaluated output values @throws IOException if there's a problem with the function's /Decode entry
3043 Retrieves the transfer function for this soft mask, creating it if necessary. @return PDFunction representing the transfer function or null if not available @throws IOException if there's an issue with the underlying COSDictionary object
3044 Provides the default font for PDF rendering, initializing it with HELVETICA if needed. @return The default PDType1Font object used in PDF rendering.
3045 Loads a Type 0 font from a TrueType font. Supports embedding and subsetting options. @param doc PDF document to load the font into @param ttf TrueTypeFont instance to be loaded @param embedSubset whether to embed a subset of the font or not @return PDType0Font instance for use in the PDF document @throws IOException if there's an error with font data or subsetting
3046 Initializes PDTrueTypeFont with provided font dictionary. May embed or substitute the font. @param fontDictionary COSDictionary containing font data and metadata @throws IOException if input/output operations fail or font parsing fails
3047 Initializes a PDType1CFont object from a COSDictionary. Handles embedded Type1C fonts and fallback options. @param fontDictionary the dictionary containing font information @throws IOException if there are issues reading or parsing the font data
3048 Initializes a PDType1Font object with the given dictionary. Handles embedded Type1 and PFB fonts, repairs damaged fonts, and sets up generic font for rendering. @param fontDictionary COSDictionary object containing font information. @throws IOException if errors occur during font file reading or parsing.
3049 Constructs a Type 3 font from dictionary and initializes encoding. @param fontDictionary contains font properties and settings @param resourceCache manages shared resources like images and fonts @throws IOException if there's an error during input/output operations
3050 Loads and initializes a Type 0 font from input data. @param doc PDF document for embedding the font @param randomAccessRead input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @param vertical flag for handling vertical text orientation @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3051 Loads a vertical Type 0 font into a PDF document. @param doc the PDF document to modify @param ttf the TrueTypeFont to be used @param embedSubset whether to embed only a subset of the font @return PDType0Font object for vertical text rendering @throws IOException if there's an error with font data or subsetting
3052 Loads a PDTrueTypeFont into the PDF document using specified parameters. @param doc PDF document @param ttf TrueTypeFont object @param encoding Font encoding @return Newly loaded PDTrueTypeFont instance @throws IOException if embedding fails
3053 Loads a TrueType font from a data source into the PDF document. @param doc the target PDF document @param randomAccessRead input data stream for the font file @param encoding font encoding to be used in the document @return PDTrueTypeFont object for manipulation within the PDF document @throws IOException if parsing or embedding fails
3054 Constructs an FDFDocument from a given XML Document, validating and setting the FDFCatalog. @param doc XML Document containing FDF data; root element should be 'xfdf' @throws IOException if root element is not 'xfdf'
3055 Creates PDImageXObject from a file path. Supports various formats. @param imagePath Path to the input image file @param doc PDF document to add the image to @return PDImageXObject or throws exception if format is not supported
3056 Renders a specific PDF page to the given Graphics2D context with scaling options. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @throws IOException If I/O error occurs during rendering
3057 Renders a specific page from the PDF document as an image with customizable scaling and image type. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @param imageType Type of the output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3058 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects or an empty list if none found
3059 Refreshes appearances of all terminal fields in the form. @throws IOException if an I/O error occurs during refresh
3060 Writes XML representation of FDF data to a writer stream, including catalog data. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3061 Splits a PDF document into smaller documents, processes pages and destinations, and clones structure trees. @param document The source PDDocument to split @return List of resulting PDDocument objects after splitting @throws IOException if an I/O error occurs during processing or splitting
3062 Constructs a PDIndexed object from COSArray with default resources. @param indexedArray input array containing color space information @throws IOException if color table reading or initialization fails
3063 Evaluates shading functions and ensures values are within valid range. @param input array of floating-point numbers for function evaluation @return array of evaluated function results, clamped to [0,1] range @throws IOException if an error occurs during function evaluation
3064 Retrieves the full image object as a BufferedImage with no subsampling. @return Decoded and converted BufferedImage object or null if an error occurs @throws IOException If an error occurs during decoding or reading input stream
3065 Processes pages in PDF document based on bookmarks, extracting text from specified range. @param pages PDPageTree object containing all pages in the document @throws IOException if an I/O error occurs during processing
3066 Creates PDColorSpace from COSBase object and manages resource usage. @param colorSpace the base color space to create from @param resources associated PDF document resources, can be null @return PDColorSpace object or throws IOException if creation fails
3067 Retrieves a form field by its fully qualified name, checking the cache first and then the field tree. @param fullyQualifiedName The unique identifier of the form field @return The PDField object if found; otherwise, null
3068 Caches or clears the fields of this PDAcroForm for improved performance. @param cache true to enable caching, false to clear the cache
3069 Returns an iterator to traverse through all fields in this PDF form. @return An iterator initialized with child fields from this PDAcroForm instance.
3070 Renders a specific page from PDF as an image with customizable scaling and default RGB type. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3071 Renders a specific PDF page as an image with custom DPI (dots per inch). @param pageIndex Index of the page to be rendered @param dpi Desired DPI for rendering @return Rendered BufferedImage object representing the specified PDF page with given DPI @throws IOException if I/O error occurs during rendering
3072 Renders a specific PDF page into an image with custom DPI and image type. @param pageIndex Index of the page to be rendered @param dpi Desired DPI for rendering @param imageType Type of output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page at given DPI @throws IOException if I/O error occurs during rendering
3073 Renders a specific PDF page to the given Graphics2D context with scaling. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @param scale Scaling factor applied uniformly to width and height @throws IOException If I/O error occurs during rendering
3074 Extracts a specific range of pages from the source PDF document. @return A new PDDocument containing the extracted page range, or an empty one if invalid range.
3075 Saves FDF data in XML format to a writer stream and closes the output. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing or closing
3076 Renders and displays a string of text using current graphics and text state settings. @param string byte array representing the text to be displayed @throws IOException if an I/O error occurs during processing
3077 Loads a TrueType font from a file into the PDF document. @param doc target PDF document @param file input font file @param encoding font encoding for the document @return PDTrueTypeFont object for manipulation within the PDF document @throws IOException if parsing or embedding fails
3078 Constructs a PDMMType1Font object from a COSDictionary. @param fontDictionary contains font information for initialization @throws IOException if errors occur during font file reading or parsing
3079 Loads a TrueType font from an input stream into the PDF document. @param doc target PDF document @param input data stream for the font file @param encoding font encoding to be used in the document @return PDTrueTypeFont object or throws IOException if loading fails
3080 Loads and initializes a Type 0 font from a file. @param doc PDF document for embedding the font @param file input TrueTypeFont file to load @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3081 Loads an XFDF document from the given InputStream. @param input Stream containing XML data of the XFDF document @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3082 Loads a Type 0 font from an input stream. @param doc PDF document for embedding the font @param input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3083 Loads and initializes a vertically oriented Type 0 font from a file. @param doc PDF document for embedding the font @param file input file containing TrueTypeFont data @return Initialized PDType0Font object with vertical text orientation @throws IOException if there's an error with font parsing or subsetting
3084 Loads a vertical Type 0 font from an input stream for the PDF document. @param doc target PDF document @param input source of TrueTypeFont data @return Initialized PDType0Font object with vertical text orientation support @throws IOException if there's an error during font loading or parsing
3085 Loads a vertical Type 0 font from an input stream. @param doc PDF document for embedding the font @param input input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @return Initialized PDType0Font object with vertical text orientation @throws IOException if there's an error with font parsing or subsetting
3086 Constructs a Type 3 font from dictionary. @param fontDictionary contains font properties and settings @throws IOException if there's an error during input/output operations
3087 Adds a digital signature to the PDF document and updates related structures. @param sigObject Signature object containing details of the signature @param signatureInterface Interface for signing operations @param options Additional configuration options, including visual signature settings @throws IOException if there is an error during operation or saving changes to the document
3088 Extracts and writes text from a PDF document to an output stream. @param doc The input PDDocument object containing the PDF content @param outputStream Writer object for receiving the extracted text @throws IOException if an I/O error occurs during processing
3089 Retrieves signature dictionaries from PDF document fields. @return List of PDSignature objects or empty list if none found
3090 Imports data from an FDF document into the current PDF form fields. @param fdf FDFDocument containing data to be imported @throws IOException if there are issues with field value types or unsupported operations
3091 Evaluates shading function for a single input value. @param inputValue floating-point number to be evaluated @return evaluated function result, clamped to [0,1] range @throws IOException if an error occurs during evaluation
3092 Renders transparency group on the graphics context and applies transformations. @param form TransparencyGroup to be rendered @param graphics Graphics2D object for rendering operations @throws IOException If there's an issue with image processing or drawing
3093 Retrieves the non-stroking paint with soft mask applied, if available. @return Paint object for rendering non-stroking elements considering soft masks. @throws IOException If there's an issue processing graphics state or applying soft masks.
3094 Evaluates shading function and converts result to RGB color value. @param values array of floating-point numbers for function evaluation @return integer representation of evaluated RGB color @throws IOException if an error occurs during function evaluation or conversion
3095 Renders a specific page from PDF as an image with default scaling. @param pageIndex Index of the page to be rendered @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3096 Loads Type 0 font from an input stream into a PDF document. @param doc PDF document for embedding the font @param input Data to parse TrueTypeFont @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3097 Creates a PDFont object based on the input dictionary and resource cache. @param dictionary COSDictionary containing font metadata @param resourceCache ResourceCache for managing font resources @return A PDFont object or throws IOException if invalid subtype found @throws IOException if an error occurs during font creation
3098 Loads an XFDF document from a file. @param filename Path to the XML file containing XFDF data @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3099 Displays and renders a text string using current graphics and settings. @param string byte array representing the text to display @throws IOException if an I/O error occurs during processing
3100 Loads an XFDF document from a given File using a buffered input stream. @param file The source File containing XML data of the XFDF document @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3101 Renders a specific PDF page to the given Graphics2D context without scaling. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @throws IOException If I/O error occurs during rendering
3102 Renders and displays text strings from a COSArray, handling displacement calculations based on font size and type. @param array the COSArray containing text elements to be displayed @throws IOException if an I/O error occurs during processing
3103 Adds digital signature with default settings. @param sigObject Signature object containing details of the signature @param options Additional configuration options for visual signature settings @throws IOException if there is an error during operation or saving changes to the document
3104 Retrieves the last signature dictionary from PDF document. @return Last PDSignature object or null if none exist
3105 Saves PDF document for external signing and initializes signing support. @param output OutputStream to write the signed document @return ExternalSigningSupport object or throws exception if unable to sign @throws IOException If I/O error occurs during writing or signing process
3106 Extracts text from a PDF document and returns it as a string. @param doc The input PDDocument object containing the PDF content @return String representation of the extracted text @throws IOException if an I/O error occurs during processing
3107 Adds a digital signature to the PDF document with default options. @param sigObject The signature object containing details of the signature. @param signatureInterface Interface for signing operations. @throws IOException If there is an error during operation or saving changes to the document.
3108 Saves FDF data in XML format to a file, handling resources automatically. @param fileName the output file for saving XML data @throws IOException if an I/O error occurs during writing or closing
3109 Draws a glyph, transforming and rendering it based on provided parameters. @param path The shape of the glyph @param font The font in which the glyph is to be drawn @param code Unique code for the glyph @param displacement Vector defining displacement of the glyph @param at AffineTransform object for transforming the glyph shape
3110 Adds digital signature with default settings to the PDF document. @param sigObject Signature object containing details of the signature @throws IOException if there is an error during operation or saving changes to the document
3111 Creates a PDFont object with default resource cache.
3112 Retrieves a PDFont object by name from the resources or creates it if not cached. @param name unique identifier for the font @return PDFont object representing the requested font @throws IOException if an error occurs during font creation
3113 Fills and then strokes a path using specified winding rule, handling cloning for preserving the original path. @param windingRule Rule to determine which region of the path to fill (e.g., WIND_EVEN_ODD) @throws IOException If errors occur in setting paint or retrieving composite/stroke objects during strokePath()
3114 Saves FDF data in XML format to a file, handling resources automatically. @param fileName the output file path for saving XML data @throws IOException if an I/O error occurs during writing or closing
3115 Flattens a PDF form and handles dynamic XFA forms. @throws IOException if an I/O error occurs during the operation.
3116 Copies necessary font resources to an appearance stream for a PDF document. @param appearanceStream the target stream to add/update font resources in @throws IOException if an error occurs during I/O operations
3117 This is a complex method that merges two PDF documents into one. It handles various aspects of the PDF specification such as page resources, annotations, actions, and structure. The method begins by checking if the source document has a structure tree root (a logical structure hierarchy). If not, it creates a dummy structure tree in the destination to ensure that any existing source structure trees are cloned correctly. It then iterates over each page of the source catalog and creates a new page in the destination with a cloned copy of the source page's COSObject. If structure merging is enabled, it updates the StructParent entries of the new page to avoid overlapping with existing values. The method also handles merging of resources, open actions, structure trees (including role maps, ID trees, mark info, and language), viewer preferences, and metadata. It uses a cloner object to clone COSObjects from the source document into the destination document, taking care to handle any shared resources efficiently. Finally, if structure merging is enabled, it updates page references in the new parent tree node and merges K entries, role maps, ID trees, mark info, language, and viewer preferences from the source structure tree into the destination structure tree. Overall, this method provides a comprehensive solution for merging two PDF documents while preserving as much of their original structure and content as possible.
3118 Converts a PNG image to a format compatible with PDF documents. @param doc the target document for the converted image @param imageData byte array containing PNG data @return PDImageXObject if conversion is successful, otherwise null
3119 Retrieves and creates a PDFont object based on the font setting. @return PDFont object or null if not a valid COSDictionary @throws IOException if there's an error retrieving or creating the font
3120 Generates and sets the appearance content for a PDF annotation widget using a given PDAppearanceStream. @param widget The target annotation widget to set the appearance content for @param appearanceStream The source stream containing the appearance data @throws IOException If there's an I/O error during processing or writing operations
3121 Creates PDImageXObject from byte array based on detected image type. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @return PDImageXObject or throws exception if extraction fails or type not supported
3122 Copies the properties of this extended graphics state into another PDGraphicsState object, setting various graphical attributes and styles based on the keys present in the dictionary. This method iterates over all keys in the COSDictionary associated with this class instance, comparing each key to predefined constants like LW (line width), LC (line cap style), and others. Depending on the matching key, it calls appropriate methods on the provided PDGraphicsState object to set the corresponding graphical attribute or style. For keys such as FONT and TK, it accesses nested objects like PDFontSetting and PDTextState for further configuration. Additionally, this method handles special cases such as SMASK (soft mask) and TR/TR2 (transfer functions), ensuring that the CTM is properly set for soft masks and that TR2 takes precedence over TR if both are present. @param gs The PDGraphicsState object to copy properties into. @throws IOException If there is an error accessing or interpreting data from the dictionary.
3123 Processes appearance string operators for PDF content, handling font and color settings. @param content byte array representing the PDF stream to parse @throws IOException if an I/O error occurs during parsing
3124 Creates PDImageXObject from a byte array. Uses the detected image type. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @param name Image object's name @return PDImageXObject or throws exception if extraction fails or type not supported
3125 Initializes PDDefaultAppearanceString with /DA and /DR entries, processes appearance string operators. @param defaultAppearance required PDF stream to parse for font settings @param defaultResources required resource dictionary containing font and color information @throws IOException if an I/O error occurs during parsing or if inputs are null
3126 Fetches default appearance string and creates a new instance. @return PDDefaultAppearanceString for text rendering or null if not found @throws IOException if an I/O error occurs during parsing or if inputs are null
3127 Sets and formats the appearance value for a form field. Handles multiline text fields and generates widget appearances. @param apValue The initial field value to be set and formatted
3128 Initializes helper and fetches default appearance string for a text field. @param field PDVariableText instance to process @throws IOException if error occurs during processing of the appearance string
