1 Initializes a new instance of OperatorName with default settings. Used within PDFBox library to handle operator names in PDF content streams.
2 Constructs an OperatorProcessor with the given PDFStreamEngine context. @param context the engine managing operations on PDF data streams
3 Initializes a new instance of the base COS object.
4 Initializes an instance of COSUpdateState with provided update information. @param updateInfo contains details about the document updates to be managed.
5 Initializes a new instance of `DecodeOptions` with default settings. This empty constructor sets up an object with no specific decoding configurations.
6 Initializes DecodeOptions with a specific source region for image decoding. @param sourceRegion the area of interest within the image data to be processed
7 Initializes DecodeOptions with a uniform subsampling value for X and Y. @param subsampling the level of subsampling for image decoding
8 Initializes a new instance of the Filter class. Used in PDF data stream encoding and decoding context.
9 Initializes a new PageExtractor for the given PDF document and page range. @param sourceDocument the original PDDocument to extract pages from @param startPage the first page number to include in the extraction (1-indexed) @param endPage the last page number to include in the extraction (1-indexed)
10 Constructs an object of `AbstractXReference` with a specific XReference type. @param type The type of the reference entry (enum: XReferenceType)
11 Constructs ContentStreamWriter with an output stream to write PDF content. @param out the output stream for writing PDF data
12 Constructs an instance of resource cache with optional stable caching. @param enableStableCache boolean flag to enable or disable stable caching
13 Initializes a new instance of `PDDocumentCatalog` with provided PDF document and root dictionary. @param doc the input PDF document @param rootDictionary the root dictionary containing document structure and metadata
14 Initializes document information with provided dictionary. @param dic COSDictionary containing metadata attributes
15 Initializes and sets the named destination dictionary for a PDF document. @param dict COSDictionary containing named destinations
16 Initializes PDF document name dictionary with a given catalog and names. @param cat the document catalog @param names the named objects dictionary for the document
17 Initializes a new instance of PDPage with a provided COSDictionary. @param pageDictionary contains properties and data for the PDF page
18 Constructs a new PDPage object with given parameters. @param pageDictionary COS dictionary containing the page's data @param resourceCache Cache for reusing resources across pages
19 Constructs a new instance of PDDictionaryWrapper with a given COSDictionary. @param dictionary the underlying COSDictionary for managing PDF metadata and properties
20 Initializes a new instance of PDNameTreeNode with a provided COSDictionary. @param dict the dictionary containing name-value pairs for this node
21 Initializes page label range with given COS dictionary. @param dict COS dictionary containing page label information
22 Initializes a new instance of PDRange with a provided COSArray. @param range A COSArray representing the numerical range for PDF processing.
23 Constructs a new PDRange object using a COSArray and an index. @param range the COSArray containing the range data @param index the starting index within the array
24 Constructs a new PDStream object with the given COSStream. @param str the COSStream to be managed by this PDStream instance
25 Initializes a new instance of PDMarkInfo with a given COSDictionary. @param dic a COSDictionary holding metadata for PDF marking status and attributes
26 Initializes a marked content reference from a COSDictionary. @param dictionary contains page and MCID information for the reference
27 Initializes a new instance of PDObjectReference with a COSDictionary. @param theDictionary the underlying PDF object structure to manage
28 Constructs a new structure node from a COS dictionary. @param dictionary COS dictionary representing the node's data and relationships.
29 Initializes an empty instance of the Revisions class to manage objects and their revision numbers.
30 Initializes a new instance of PDPropertyList with a COSDictionary. @param dict COSDictionary object for PDF property list representation
31 Initializes a new instance of `PDBoxStyle` with provided COSDictionary. @param dic contains styling attributes for PDF guidelines.
32 Default constructor initializing permissions with default values.
33 Constructs an AccessPermission object with specified permission bits. @param permissions integer value representing PDF document permissions
34 Initializes crypt filter dictionary with provided COSDictionary. @param d COSDictionary containing crypt filter parameters and settings
35 Initializes a new instance of RC4Cipher with an empty salt array.
36 Initializes a new instance of FDFAnnotation with a COSDictionary. @param a a dictionary containing annotation data for PDFBox library
37 Constructs an FDFCatalog object with the given COSDictionary. @param cat the COS dictionary representing the FDF catalog
38 Initializes an instance of FDFDictionary with provided COSDictionary. @param fdfDictionary the core data structure for this FDF document
39 Constructs an FDFField object with a COSDictionary representing a form field. @param f the COSDictionary containing field properties and values
40 Constructs an FDFIconFit object with PDF form data. @param f COSDictionary containing the icon fitting configuration
41 Constructs an instance of FDFJavaScript with a given COSDictionary. @param javaScript a dictionary containing JavaScript actions and metadata
42 Initializes a named page reference with provided COS dictionary. @param r the COS dictionary representing the page reference
43 Constructs an FDF Option Element with given COS Array. @param o COS Array representing the options
44 Constructs an FDFPage object from a COSDictionary representing the page data. @param p COSDictionary containing page-specific information
45 Constructs an FDFPageInfo object with specified COSDictionary. @param p COSDictionary containing detailed page information.
46 Constructs an FDF template from a COSDictionary structure. @param t the COSDictionary representing the FDF template
47 Initializes a new instance of PDFontDescriptor with provided dictionary. @param desc COSDictionary containing font descriptor information
48 Constructs a new PDFontSetting object with specified font settings. @param fs a COSArray containing font setting configurations
49 Initializes an empty line dash pattern.
50 Constructs a PDColor instance with given pattern name and color space. @param patternName COSName for the color pattern @param colorSpace associated color space for the color
51 Constructs DeviceN attributes from a COSDictionary. @param attributes color space attributes in PDF format
52 Constructs a device-dependent color space with specified attributes. @param attributes COSDictionary containing color space properties
53 Constructs a new PDGamma object with given COSArray of color values. @param array COSArray containing RGB color components for PDF rendering
54 Initializes a new instance of PDTristimulus with provided COSArray. @param array tristimulus values in a COSArray format
55 Constructs transparency group attributes from a COSDictionary. @param dic COSDictionary containing transparency settings
56 Initializes optional content properties with given COSDictionary. @param props a dictionary representing optional content properties
57 Constructs an abstract PDF pattern from a given COSDictionary. @param dictionary contains pattern-related data to be encapsulated by this instance
58 Constructs a new PDShading object with given shading dictionary. @param shadingDictionary COSDictionary containing shading properties
59 Initializes an extended graphics state with a PDF dictionary and resource cache. @param dictionary the COSDictionary containing graphics properties @param resourceCache the cache for storing and retrieving resources
60 Initializes soft mask with a given COSDictionary and ResourceCache. @param dictionary contains soft mask properties @param resourceCache manages resources for PDF rendering
61 Constructor: Initializes a new instance of the class with provided text content. @param text the input paragraph text to be managed and manipulated within the PDF document
62 Initializes a new instance of the Word class with the provided text content. @param text the textual content to be associated with this word object
63 Constructs a new PDAction object from a COSDictionary. @param a a dictionary containing action details
64 Initializes the utility class for creating PDF actions.
65 Initializes PDF additional actions with provided dictionary data. @param a COSDictionary containing action data
66 Constructs an instance with provided PDF dictionary of additional actions. @param a COSDictionary containing action definitions for the annotation.
67 Constructs PDF doc catalog additional actions with provided dictionary. @param a COSDictionary containing action definitions for the document catalog
68 Initializes additional actions with a provided COSDictionary. @param a COSDictionary containing form field actions
69 Constructs additional page actions from a provided dictionary. @param a COSDictionary containing the page actions to be managed
70 Constructs a new instance of PDTargetDirectory with provided COSDictionary. @param dictionary contains attributes for target directory navigation and linking
71 Constructs a new PDURIDictionary object with given COSDictionary. @param dictionary the COSDictionary to be used for URI actions in PDF documents
72 Initializes launch parameters from a provided COSDictionary. @param p COSDictionary containing file launch parameters
73 Constructs an appearance characteristics dictionary from a COS dictionary. @param dict The input COS dictionary containing the properties
74 Initializes an instance with provided appearance attributes. @param dictionary COSDictionary containing appearance entries
75 Constructs an appearance entry from a COSDictionary object. @param entry the dictionary containing appearance data
76 Constructs PDBorderEffectDictionary with given COSDictionary. @param dict a COSDictionary containing border effect settings for PDF document
77 Initializes border style properties from given COSDictionary object. @param dict COSDictionary containing border style properties
78 Initializes an external data dictionary with a given COSDictionary object. @param dictionary the COSDictionary to be used for initializing the external data dictionary
79 Constructs a CloudyBorder object with specified parameters for rendering in PDF. @param stream the content stream to draw on @param intensity the cloudiness/complexity of the border @param lineWidth the width of the border lines @param rect the rectangle defining the annotation area
80 Constructs a new instance of PDPropBuild with a given COSDictionary for PDF properties. @param dict COSDictionary containing digital signature properties
81 Constructs a PDPropBuild data dictionary from a given COSDictionary. @param dict the source COSDictionary for building the data dictionary
82 Initializes a new instance of PDSeedValue with provided COSDictionary, setting it for direct object usage as per PDF standards. @param dict the COSDictionary containing seed value information
83 Initializes digital signature certificate with COSDictionary structure and sets it to direct mode. @param dict the COSDictionary containing certificate data
84 Initializes and sets up a digital signature seed value MDP object from a COSDictionary. @param dict A COSDictionary containing the necessary properties for the signature configuration
85 Constructs a new PDSeedValueTimeStamp with given COSDictionary, sets it to direct mode. @param dict the COSDictionary for timestamp information
86 Constructs a new instance of PDSignature with given COSDictionary. @param dict the underlying COSDictionary structure for the signature
87 Initializes a new instance of SignatureOptions with default page number (0).
88 Initializes a new instance of PDFTemplateCreator with a specified PDF template builder. @param templateBuilder builds and configures the structure of the PDF template
89 Private constructor to prevent instantiation of utility class.
90 Constructs a new PDField instance with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the field @param parent the parent PDNonTerminalField (if any)
91 Constructor to initialize an instance of PDXFAResource with a COSBase XFA object. @param xfaBase the base Common Object Structure for XML Forms Architecture resource.
92 Initializes a new instance of PDMeasureDictionary with provided COSDictionary. @param dictionary the measurement data in PDF format to be managed by this class
93 Initializes a new instance of PDNumberFormatDictionary with a COSDictionary. @param dictionary the dictionary for numerical formatting in PDF document
94 Constructs a PDViewportDictionary object with specified COSDictionary. @param dictionary holds viewport settings for the PDF document
95 Constructs a new PDThread object from a COSDictionary. @param t the COSDictionary containing thread information for the PDF document
96 Initializes a new instance of PDThreadBead with a given COSDictionary. @param b the dictionary containing thread bead data
97 Constructor to initialize viewer preferences from a COSDictionary. @param dic dictionary containing preference settings
98 Initializes page drawing parameters for PDF rendering. @param renderer the PDF renderer instance @param page the specific PDF page to be rendered @param subsamplingAllowed permission for image subsampling in rendering
99 Initializes new line item with null text position
100 Initializes a new instance of the Matrix class with default values.
101 Initializes a new matrix with provided float array values.
102 Initializes a new instance of the Matrix class with six parameters. @param a, b, c, d, e, f transformation matrix components
103 Initializes a new instance of the XMLUtil class.
104 Initializes an instance of the PDFStreamEngine class for rendering PDF content.
105 Adds an operator to the PDFStreamEngine's collection. @param op OperatorProcessor object
106 Sets the terminator character for ASCII85 encoding. Valid range is 118-126, excluding 'z'. @param term new terminator character @throws IllegalArgumentException if input is outside valid range or 'z'
107 Sets the number of pages each split document should contain. @param split Number of pages per split; must be greater than zero
108 Sets the starting page for splitting a PDF document. @param start The page number to begin splitting from (must be greater than zero) @throws IllegalArgumentException if start is less than or equal to zero
109 Sets the end page for splitting a PDF document. Throws an exception if the input is less or equal to zero. @param end the last page of the split @throws IllegalArgumentException if end page is smaller than one
110 Sets the leniency mode for PDF parsing before initial parse is done. @param lenient true to enable lenient parsing, false otherwise; throws exception if called after parsing
111 Constructs CompressParameters with specified object stream size. Validates the input. @param objectStreamSize Size of the object stream; must be non-negative
112 Sets the blending mode for graphical operations. @param blendMode specifies how colors are combined in overlapping areas (cannot be null)
113 Initializes PDFieldTree with a given PDAcroForm instance. Throws exception if input is null. @param acroForm the form object to be managed, cannot be null
114 Returns the length of the data stream. Throws exception if writing is in progress. @return length of the data stream as a long value
115 Initializes an instance of PDFMergerUtility with an empty source list.
116 Initializes an instance of COSWriterObjectStream with a specified compression pool. @param compressionPool manages data compression for efficient PDF content management
117 Initializes an empty list to buffer text clipping areas.
118 Adds a source PDF file to be merged. @param source File object of the PDF
119 Adds a PDF document to be merged later. @param source RandomAccessRead object of the PDF document
120 Adds a name to the instruction sequence. @param name the string representation of the name to be added
121 Adds a child instruction sequence to the current sequence. @param child the instruction sequence to be added
122 Adds a new recipient to the collection. @param recipient The PublicKeyRecipient to be added
123 Adds a named region to the PDF document for text extraction. @param regionName unique name of the region @param rect Rectangle2D defining the spatial boundaries of the region
124 Sets the trailer dictionary for the current cross-reference section. Logs a warning if called before XRef start. @param trailer COSDictionary containing trailer information to be set
125 Retrieves a COSBase object from the pool using its unique identifier. @param key The COSObjectKey for the desired object @return The corresponding COSBase object or null if not found
126 Retrieves an operator by its name from the collection. @param operatorName unique identifier of the operator @return Operator object or null if not found
127 Converts a Unicode sequence to its corresponding glyph name. @param unicodeSequence The input character sequence @return Corresponding glyph name or ".notdef" if not found
128 Retrieves the current graphics state without modifying it. @return The top graphics state on the stack; null if empty
129 Restores the previous graphics state by popping it from the stack.
130 Returns the size of the graphics stack. @return Int representing the number of elements in the graphics stack.
131 Transforms a point using the 2D transformation matrix. @param x x-coordinate of the input point @param y y-coordinate of the input point @return transformed Point2D.Float object
132 Decreases the current graphics state level and logs an error if it becomes negative.
133 Adds an integer to the instruction sequence.
134 Checks if the COSStream is closed and throws IOException if true. @throws IOException if the stream has been closed
135 Resets input stream, but throws an IOException because it's unsupported.
136 Throws an exception as reset functionality is not supported in this context. @throws IOException indicating that the reset operation is unsupported
137 Retrieves the PDF encryption details. Throws exception if document isn't parsed first. @return PDEncryption object containing encryption details, or null if none exist @throws IOException if document parsing hasn't been completed before calling this method
138 Retrieves the access permission for the parsed PDF document. @return AccessPermission object; throws exception if document is not yet parsed @throws IOException if document parsing has not been performed first
139 Constructs an instance of InvalidPasswordException with a specified error message. @param message a description of the password authentication failure
140 Initializes an Operator instance and validates the operator string. @param aOperator String representing the PDF operator name @throws IllegalArgumentException if operator starts with '/'
141 Returns a string representation of this PDFOperator. @return string containing operator's name for easy identification
142 Returns a string representation of this COSArray object. This is primarily used for debugging and logging purposes.
143 Returns a string representation of this COSObject. @return A string containing the object's key for identification
144 Retrieves a specific filter by its name. Throws an exception if the filter is not found. @param filterName The unique identifier of the filter @return The requested Filter object or throws IOException if not found
145 Adds a real number to the instruction sequence.
146 Sets the width of the visible digital signature image and updates formatting parameters. @param width desired width in pixels as a float value @return current PDVisibleSignDesigner instance for method chaining
147 Sets the height of the visible signature image and updates rectangle parameters. @param height new height value in float @return PDVisibleSignDesigner instance for method chaining
148 Calculates the distance between two points using Pythagorean theorem. @param ps Starting point @param pe Ending point @return Distance as a double value
149 Calculates the edge equation value for a point relative to two other points. @param p The reference point. @param p1 The first defining point of the edge. @param p2 The second defining point of the edge. @return The calculated edge equation value.
150 Constructs a PDMarkedContent object with specified tag and properties. @param tag COSName for the content structure; if null, tag is set to null @param properties COSDictionary containing additional content properties
151 Returns the type of pattern as a string. @return The string representation of the PDF pattern type
152 Returns the type of shading as a string representation. @return The string representation of the PDF shading type
153 Retrieves the default value of the button. @return The string representation of the default value, or an empty string if not a COSName.
154 Unchecks the checkbox by setting its value to "Off". @throws IOException if an error occurs while setting the value
155 Checks if the white point coordinates are at their default D65 values (1, 1, 1). @return true if all coordinates equal 1, false otherwise
156 Calculates the color table for axial shading, handling edge cases and mapping domain values to RGB colors. @return int array representing the color table
157 Calculates and returns a color table for radial shading.
158 Initializes the LZW compression code table with initial values. @return List of byte arrays representing the initialized code table
159 Retrieves an object from the collection based on its index. @param index position of the object in the collection @return COSBase object at the specified index or null if not found
160 Retrieves an object from the collection by its index. @param index position of the object in the collection @return Object at the specified index or null if not found
161 Returns the total number of COSBase objects in the collection.
162 Returns the number of COS objects in the collection. @return int representing the count of COS objects
163 Returns the number of public key recipients managed by this policy. @return The total count of recipients in the collection.
164 Checks if the COSArray is empty. @return True if the array contains no elements, otherwise false.
165 Checks if the COSArrayList is empty. @return True if the list is empty, otherwise false
166 Removes a specified recipient from the collection of public key recipients. @param recipient The PublicKeyRecipient object to be removed @return true if removal was successful, false otherwise
167 Returns an iterator over COSBase elements in this collection. @return an Iterator over the COSBase elements
168 Returns an Iterator over this collection's elements. Delegates to the underlying COSArray's iterator method. @return an Iterator over the collection's elements
169 Returns an iterator over all public key recipients.
170 Converts internal array of COSBase objects into a new List. @return A list containing all COSBase objects in the collection.
171 Converts COSBase objects to their corresponding name strings in a List. @return List of String names extracted from COSName objects within the array
172 Converts COSBase objects in the array to their corresponding String values. @return List of Strings extracted from COSStrings in the array
173 Converts standard boolean to PDF's COSBoolean object. @param value The boolean to be converted. @return Corresponding COSBoolean (TRUE or FALSE).
174 Converts the boolean value to its String representation for PDF document processing. @return The String representation of the boolean value
175 Writes boolean value to a PDF document's OutputStream. @param output stream to write the boolean value @throws IOException if an I/O error occurs during writing
176 Writes null representation to an output stream. @param output destination stream
177 Writes byte data to an output stream. @param data byte array to be written to the output stream
178 Returns a set view of all key-value pairs in this dictionary. @return a set view of the mappings contained in this dictionary
179 Checks if a property entry has changed between two objects.
180 Returns the total count of elements in this COSDictionary. @return The number of key-value pairs stored in the dictionary
181 Retrieves an item from the dictionary using a given key. @param key the unique identifier for the item @return the item if it exists; otherwise, null
182 Returns a set of all keys in this COSDictionary object. @return Set containing all keys in the dictionary
183 Retrieves all value objects in this COSDictionary. @return Collection of COSBase objects representing the values
184 Adds all key-value pairs from another COSDictionary to this one.
185 Checks if the dictionary contains a specified key. @param name the possible key in the dictionary @return true if the dictionary contains the key, false otherwise
186 Tokenizes a string into substrings based on space delimiters. @param s Input string to tokenize @return Array of substrings resulting from splitting the input string
187 Parses string token to integer using Java's built-in parsing method. @param token the string representation of a number @return the integer value of the given string token @throws NumberFormatException if the input cannot be parsed into an integer
188 Returns a string representation of the function type. @return a concatenated string with the function type
189 Sets the encryption key length for PDF documents. Valid lengths are 40, 128, and 256. @param l new encryption key length @throws IllegalArgumentException if an invalid key length is provided
190 Sets the starting page for text extraction from a PDF. @param startPageValue 1-based index of the page to begin with; must be >0
191 Sets the ending page for text extraction. Throws an exception if value is not positive. @param endPageValue the last page to extract text from (1-based index)
192 Initializes a BruteForceParser with a COSDocument and COSParser. @param cosDocument the PDF document to parse @param cosParser the parser used for processing input stream
193 Initializes an instance of the class with default XREF table type configuration.
194 Resets the current XRef trailer object and clears its xref table.
195 Initializes PDF document resources from a COSDictionary. @param resourceDictionary dictionary of PDF resources to initialize with
196 Initializes PDF document resources with dictionary and resource cache. @param resourceDictionary COSDictionary of resources to be managed @param resourceCache Cache for optimized resource retrieval
197 Initializes the map of PDF function operators with arithmetic, relational and stack manipulation operations.
198 Initializes an instance of PDAcroForm with provided PDDocument and COSDictionary. @param doc the PDF document to associate with this form @param form the underlying COSDictionary representing the form data
199 Returns the count of trailer elements in the PDF document. @return The number of trailer elements.
200 Retrieves or creates a COSObject for the given key from the pool. @param key unique identifier for the object @return existing or newly created COSObject associated with the key, or null if key is null
201 Parses and returns a real (float) value from a string token. @param token String to be parsed @return Float value of the input token or NaN if unable to parse
202 Coerces a floating-point value within the limits of PDF representation. @param floatValue the input floating-point number @return coerced floating-point number or 0 if smaller than MIN_NORMAL
203 Determines the text direction based on transformation matrix values. @return Text direction as a float value (0, 90, 180, or 270 degrees)
204 Compares this COSFloat with another object for equality based on float value. @param o The object to compare with @return True if the objects are equal as per float comparison, false otherwise
205 Returns a unique hash code for this floating-point value. Utilizes Float's built-in hashCode method for consistency and accuracy. @return unique hash code for the float value
206 Formats and returns the string representation of this floating-point value. Utilizes scientific notation if necessary, or strips trailing zeros for simplicity.
207 Writes a null object to the output stream in PDF format. @param output destination stream for writing data @throws IOException if an I/O error occurs during writing
208 Initializes COSIncrement object with an origin update info. @param incrementOrigin the original update information for initialization
209 Initializes an object with the destination PDDocument. @param dest the target document for cloning or merging operations
210 Initializes resource cache with a flag to control stable caching. @param enableStableCache true enables stable cache, false disables it
211 Checks if the update state of this COS object requires an update. @return true if updated, false otherwise
212 Checks if collection contains specified PDF document object. @param base the COSBase object to be checked for presence @return true if this collection or processed objects contains the specified object
213 Checks if a COSBase object is excluded from collection. @param base the COSBase object to be checked for exclusion @return true if the object is excluded, false otherwise
214 Adds a COSBase object to collection, ensuring it's not null.
215 Adds a processed COSBase object to the collection.
216 Registers TrueTypeFont for closing to ensure resources are managed properly. @param ttf the TrueTypeFont to be registered for closing
217 Initializes an ASCII85InputStream with the given InputStream. @param is the input stream to read from
218 Initializes CCITT Fax decoder stream with input parameters. @param stream to read data from, columns, type of compression, options for decoding, and byte alignment flag
219 Compares this object with another for equality based on their integer values. @param o the object to compare with @return true if both objects are COSIntegers and have equal integer values, false otherwise
220 Returns a string representation of this COSInteger. @return A formatted string containing the integer value
221 Writes integer value to PDF output stream in ISO-8859-1 encoding.
222 Retrieves an object from the map using its key. @param key unique identifier of the mapped object @return the mapped object or null if not found
223 Retrieves the mapped font name from the cache using the input font name as a key. @param fontName the unique identifier of the cached font object @return the mapped font name or null if not found
224 Retrieves selected export values based on the field value and on-values. @return List of selected export values as strings
225 Checks if this COSName object's name is empty. @return true if name is empty; false otherwise
226 Adds a comment to the PDF content stream, ensuring it doesn't contain newline characters. @param comment text to be added as a comment; must not include '\n' or '\r' @throws IOException if writing to outputStream fails
227 Writes a newline character to an output stream
228 Converts input string to UTF-16BE hexadecimal representation. @param text The input string @return Hexadecimal char array of the input string in UTF-16BE format
229 Retrieves the underlying COSBase object, handling dereferencing if needed. @return The COSBase object after potential dereferencing and updates
230 Initializes COSObjectKey with object num and generation values. Throws exception if input is negative. @param num unique object number @param gen object's generation value @param index stream index
231 Returns a unique hash code for this PDF object key. Utilizes Apache's Long.hashCode to generate the hash value. @return int representing the hash code of the object key
232 Calculates and returns the X scaling factor of the transformation matrix. @return The absolute value of the scaled X component, considering rotation.
233 Returns the scaling factor in the Y direction or the Y component if no scaling is applied.
234 Initializes an ASCII85OutputStream with a given OutputStream. @param out the output stream to be used for encoding data into ASCII85 format
235 Initializes an instance of COSStandardOutputStream with the provided output stream. @param out the underlying output stream to be managed by this class
236 Initializes an instance of COSStandardOutputStream with a provided output stream and position. @param out the output stream to write data @param position the initial writing position
237 Returns a copy of the internal byte array. @return A new byte array containing all elements of the internal byte array.
238 Writes an incremental update to the PDF document. @throws IOException if there is a problem writing to the output stream
239 Returns an ASCII representation of the byte array. @return String containing ASCII encoded bytes from the object
240 Checks if the document is accepting updates by verifying the state of the origin document. @return true if not parsing and origin document is accepting updates, false otherwise
241 Converts a byte array to a string using PDFDocEncoding mapping. @param bytes Input byte array @return String representation of the byte array using PDFDocEncoding
242 Reads and returns the next valid operator from the PDF stream. @return String representing the next operator in the stream @throws IOException if an input/output error occurs during reading
243 Converts a string to a byte array using Unicode-to-byte mapping. @param text Input string to be converted @return Byte array representation of the input string
244 Checks if the specified character exists in the Unicode to byte mapping. @param character The Unicode character to search for in the mapping @return true if the mapping contains the character; false otherwise
245 Checks if the map contains a specified key in its PDF object representations. @param key The key to search for in the map @return true if the map contains the key; false otherwise
246 Checks if the map contains a specified font name (alias). @param fontName The font name to search for in the map of aliases @return true if the map contains the alias; false otherwise
247 Returns an unmodifiable view of the code-to-name mapping. @return Unmodifiable Map with font codes as keys and names as values
248 Returns an unmodifiable view of the name to code mapping. @return Unmodifiable map with font names as keys and codes as values
249 Sets whether the object needs to be updated. Throws an exception as this operation is not supported in a read-only wrapper. @param flag boolean value indicating if update is needed @throws UnsupportedOperationException always, as updates are not supported
250 Reads and decodes the next byte from ASCII85 encoded data. @return The decoded byte or -1 if end of stream is reached. @throws IOException If an I/O error occurs during reading.
251 Closes and releases resources, resetting the ASCII85InputStream state.
252 Writes data to stream and encodes it into ASCII85 format when necessary. @param b the byte to be written and potentially encoded @throws IOException if an I/O error occurs
253 Flushes ASCII85 data to output stream, handling edge case and formatting. @throws IOException if an I/O error occurs during flushing
254 Truncates or pads a password to a fixed length using encryption padding. @param password the input byte array representing the password @return a byte array of fixed length after truncation or padding
255 Closes the content stream, ending text mode if necessary and releasing resources. @throws IOException if an I/O error occurs while closing the resource
256 Imports XMP metadata from a byte array into the PDF document via an output stream. @param xmp byte array containing the XMP metadata to be imported @throws IOException if there's an error writing to the output stream or creating it
257 Determines if a split should occur at the given page number. @param pageNumber the page to check for splitting @return true if a split is needed; false otherwise
258 Throws an exception as this instance is immutable and cannot be modified. @param sourceRegion the region to set; ignored since modification is unsupported @throws UnsupportedOperationException always, indicating that modification is not allowed
259 Sets subsampling X value, but throws an exception as this instance is immutable. @param ssX the intended subsampling X value (not used due to immutability) @throws UnsupportedOperationException always, as this instance can't be modified
260 Throws an exception as this object is immutable. @param ssY attempted subsampling value (ignored) @throws UnsupportedOperationException always, as the object is immutable
261 Throws an exception as this object's subsampling offset X cannot be modified. @throws UnsupportedOperationException due to immutability of decoding options
262 Throws an exception as this instance of decoding options is immutable. @param ssOffsetY subsampling offset value to set (not supported) @throws UnsupportedOperationException always, as modification is not allowed
263 Encodes input stream to JPEG2000 format for a given set of parameters. Currently unimplemented. @param input the original data stream @param encoded the output stream for the encoded data @param parameters encoding configuration options @throws IOException if an I/O error occurs during encoding
264 Rejects attempts to modify upper right Y coordinate. Throws an exception as this is an immutable rectangle. @param value ignored, as modification is not allowed
265 Throws an exception as this is an immutable rectangle, preventing modification of upper right X coordinate.
266 Throws an exception as this class is immutable.
267 Prevents modification of lower left X-coordinate as the rectangle is immutable. @param value ignored, as this operation is not supported for an immutable rectangle @throws UnsupportedOperationException always thrown to indicate unsupported operation
268 Retrieves the text associated with the digital signature. @return Signature text; throws exception if not implemented yet
269 Sets and returns the visible sign designer with the specified text. @param signatureText the text to be used as a visible digital signature @return PDVisibleSignDesigner object for further customization or null if operation fails
270 Sets signature field value. Throws exception for string input, uses PDSignature object instead. @param value signature data in PDSignature format; throws UnsupportedOperationException for String input
271 Retrieves the compression level from system property or uses default if invalid. @return The valid compression level within expected range or default if invalid
272 Checks if the collection contains a specific COS object. @param o The COS object to check for presence in the collection @return True if this collection contains the specified object, false otherwise
273 Initializes a decoder stream for Flate compression algorithm from an input stream, skipping the initial zlib header bytes. @param inputStream the source of compressed data @throws IOException if reading from the input stream fails
274 Closes the stream and releases Flate resources.
275 Sets the signature's image and updates its dimensions & formatter parameters. @param image The BufferedImage object to be set as the signature's image.
276 Decodes a predictor row in the image data, using various prediction algorithms. @param predictor Algorithm identifier (2: TIFF SUB, 10-14: PRED NONE, SUB, UP, AVG, PAETH) @param colors Number of color components @param bitsPerComponent Bits per component @param columns Number of pixels in the row @param actline Current line data to decode @param lastline Previous line data for prediction algorithms that use it
277 Checks if the pool contains an object with the given key. @param key The unique identifier of the object to be checked @return true if the object is in the pool, false otherwise
278 Checks if a specific font name exists in the mapping. @param name The name of the font to check @return true if the font name is mapped, false otherwise
279 Checks if a specific font encoding code exists in the mapping.
280 Escapes special XML characters in a string for safe representation. @param input the original string to be processed @return the XML-escaped version of the input string
281 Sets or removes the bounding box for this form XObject using a COSArray representation of the rectangle's dimensions and coordinates. @param bbox PDRectangle to set as bounding box, or null to remove
282 Decodes a hexadecimal string into a byte array. @param s the input hexadecimal string @return decoded byte array or logs an error and returns null for invalid input
283 Closes the PDF document and releases resources. Handles exceptions and ensures all IO resources are closed.
284 Closes the FDF document and associated streams, if open. @throws IOException if an I/O error occurs during closure
285 Retrieves the underlying COSDictionary object of this PDFunction instance. @return COSDictionary object, either from functionStream or functionDictionary.
286 Initializes a PDXObject with a given PDStream and sets its type & subtype. @param stream the graphical data stream @param subtype the specific subtype of the PDF structure name
287 Retrieves the underlying COSStream object from PDStream instance. @return The COSStream object used by this PDStream instance.
288 Fetches metadata from the underlying PDF stream's ICC profile.
289 Sets the metadata for the PDF stream using a COSStream object.
290 Compares this annotation with another for equality. @param o Object to compare with @return true if both objects are identical PDAnnotations, false otherwise
291 Returns a set of all keys present in the map. @return Set containing all keys in the map.
292 Returns all known constant values in this map structure. Overrides base class method to provide PDF document context. @return a collection containing all stored values
293 Initializes BaseParser with a given PDF source. @param pdfSource RandomAccessRead, source of the PDF file to parse
294 Checks if the next character in the PDF source is a digit.
295 Adds an XRef entry for a given object key if it doesn't exist already. Logs warning if XRef start was not signaled. @param objKey the unique object key @param offset the offset value to be associated with the object key
296 Inserts a new font encoding mapping or updates an existing one. @param code unique character code @param name corresponding character name
297 Checks if next character in source is an ASCII space.
298 Skips line breaks in PDF source, handling CR, LF and CRLF sequences. @param linebreak the character to check for a line break @return true if line break is successfully skipped; false otherwise @throws IOException if an I/O error occurs while reading from the source
299 Checks for end of string in PDF parsing. Handles CR and LF characters. @param bracesParameter current brace level @return updated brace level or 0 if end of string is found
300 Checks if given char code represents an End of Line (EOL).
301 Reads a string number from the PDF source, handling digit parsing and length validation. @return StringBuilder containing the read string number or throws IOException if too long. @throws IOException if reading fails or number is excessively long.
302 Decodes a byte buffer into a string using UTF-8 or an alternative charset for malformed PDFs. @param buffer the ByteArrayOutputStream to decode @return decoded string in UTF-8 or alternative charset
303 Reads and validates the next character in the PDF source. Throws an IOException if the expected char does not match. @param ec the expected character @throws IOException if the read character does not match 'ec'
304 Checks if the next character in source is whitespace according to PDF standards. @return true if it's a whitespace character, false otherwise @throws IOException if an I/O error occurs while reading from the source
305 Parses and returns the starting XREF offset, or -1 if not found in PDF stream. @return Starting XREF offset or -1 if not present @throws IOException If an I/O error occurs during parsing
306 Searches for the last EOF marker in PDF data stream, handling potential errors during parsing. @return Position of last EOF marker or Long.MAX_VALUE if not found @throws IOException If an error occurs while reading from the source
307 Searches for cross-reference table offsets in the PDF data stream. @return List of long values representing the starting positions of xref tables @throws IOException if there is an issue with reading from the data source
308 Returns the number of color components, or -1 if not yet calculated. @return Number of color components in shading function or color space
309 Searches for XRef streams in PDF data stream and returns their offsets. @return List of long values representing the starting positions of XRef streams @throws IOException if an I/O error occurs while reading from the source
310 Retrieves the cross-reference table from the resolved trailer. @return Map of object keys to their byte offsets, or null if not resolved
311 Retrieves the startxref offset for parsing PDF documents. @return The offset as a long; throws IOException if 'startxref' marker is missing. @throws IOException If file I/O errors occur or required markers are not found.
312 Reads data from the source stream until the endstream keyword is found, filtering and processing the content along the way. @param out EndstreamFilterStream to write filtered data into @return The calculated length of the processed byte stream
313 Initializes an instance of ToUnicodeWriter with default write mode (0).
314 Sets a label range for a specific page in the PDF document. @param startPage The index of the starting page (must be non-negative) @param item The page label range to apply from the start page onwards
315 Adds a mapping of CID to Unicode text representation. Validates CID and text for validity. @param cid Character Identifier (0-65535) @param text Corresponding Unicode text representation; must not be null or empty
316 Checks if there is no following binary data in the PDF content stream. @return true if no binary data follows; false otherwise @throws IOException if an I/O error occurs
317 Checks if the next character in source is a whitespace. @return true if it's a space, carriage return, or line feed; false otherwise @throws IOException if an I/O error occurs while peeking at the source
318 Adds an entry to the cross-reference stream, avoiding duplicates based on object numbers. @param entry The XReferenceEntry to add
319 Calculates the maximum bytes needed to display each column value in streamData. @return An integer array representing the max bytes for each column.
320 Initializes the pool and sets the highest cross-reference object number. @param highestXRefObjectNumber maximum object number to be set for this instance
321 Retrieves the first trailer from a set of cross-reference trailers, sorted by their offset. @return The first trailer dictionary or null if no trails are present
322 Retrieves the last trailer dictionary from PDF document. @return The last trailer or null if no cross-reference data exists
323 Retrieves object numbers contained in the cross-reference table based on a given object stream number. @param objstmObjNr the object stream number to match against @return Set of object numbers that contain the specified object stream, or null if no trailer is resolved
324 Returns the first column value based on the numeric type of this reference entry. @return The numeric representation of the reference's type, as per getNumericValue()
325 Retrieves and returns the generation value from the referenced object's key. @return The generation number of the referenced PDF object.
326 Generates a string representation of the FreeReference object. @return String containing key, next free object and type value
327 Retrieves byte offset as the second column value. @return Byte offset of referenced object in PDF document
328 Retrieves and returns the generation number of the referenced object. @return The generation value of the referenced PDF object.
329 Generates a string representation of the cross-reference entry. @return String with key, type, and byte offset information
330 Retrieves the number component of this object's parent key. @return The object number as a long value, or -1 if parent key is null.
331 Retrieves and returns the index of the object stream as the third column value. @return Index of the object stream within the PDF document.
332 Provides a string representation of this ObjectStreamEntry. @return formatted string with key, type, index, and parent key values
333 Writes data to output stream without a new line and updates position. @param b byte array containing data to be written @param off starting offset in the data @param len number of bytes from the data to write
334 Writes a single byte to output stream, disables new line writing. @param b the byte to be written @throws IOException if an I/O error occurs
335 Writes an end-of-line sequence if not already on a new line.
336 Determines if compression should be applied based on object stream size. @return true if compression parameters are set and compression is enabled, false otherwise
337 Adds an XReferenceEntry to manage PDF document structure. @param entry object representing a cross-reference table entry
338 Writes an indirect object reference to the output stream. @param output the output stream to write to @param indirectReference the COSObjectKey of the reference @throws IOException if writing to the output stream fails
339 Obtains a MessageDigest instance for the MD5 algorithm. @return MessageDigest object for MD5 or throws RuntimeException if not available
340 Returns a singleton SHA-1 MessageDigest instance. Throws exception if algorithm is unavailable.
341 Returns SHA-256 MessageDigest instance for secure data hashing. @return SHA-256 MessageDigest object; throws RuntimeException if not available
342 Retrieves highest cross-reference object number from the pool.
343 Returns an unmoderable list of prepared COS object keys. @return An immutable list of prepared COSObjectKey objects
344 Overwrites the font encoding mapping for a given code with a new name. @param code The unique identifier of the font character @param name The new name to be associated with the code
345 Removes text extraction region by its name.
346 Sets maximum fraction digits in decimal formatting for text rendering. @param fractionDigitsNumber the number of digits after decimal point to display
347 Initializes a PDAbstractContentStream with given parameters and formats decimal numbers. @param document the PDF document @param outputStream stream for writing content @param resources graphical resources for the document
348 Retrieves the Y-coordinate of a vertical displacement vector for a given character code. @param code The unique character identifier @return The Y-coordinate or default value if not found
349 Returns `standardValue` if it's not null; otherwise, returns `defaultValue`. @param standardValue the primary value to consider @param defaultValue the fallback value used when `standardValue` is null @return the chosen value as a float
350 Adjusts the size of the visible sign by a given percentage. @param percent The zoom factor as a percentage @return Current PDVisibleSignDesigner instance for method chaining
351 Retrieves the width of the signature image. @return The width of the signature image as a float
352 Retrieves the height of the signature image. @return The height of the signature image as a float value.
353 Adjusts the visible sign design for page rotation. Updates position and transformations. @return PDVisibleSignDesigner instance for method chaining.
354 Creates an AffineTransform from this matrix's scale, shear, and translation values. @return a new AffineTransform object with the matrix's transformations applied
355 Encodes a given text string into a byte array using Unicode character encoding. @param text The input text to be encoded @return A byte array representation of the encoded text @throws IOException If an I/O error occurs during the encoding process
356 Converts a Unicode code point to its corresponding glyph name. @param codePoint The Unicode value of the character @return Corresponding glyph name or ".notdef" if not found
357 Applies GSUB rules on a word, converting characters to glyph IDs and transforming them. @param gsubWorker The worker object for applying GSUB rules @param out Output stream for writing transformed glyph IDs @param font Type0Font containing character-to-glyph mapping @param word Input string to apply GSUB rules on @return List of transformed glyph IDs after applying GSUB rules
358 Initializes a PDDocument object with the given COSDocument, source, and permissions. @param doc The COSDocument to associate with this PDDocument. @param source The RandomAccessRead source for the PDF document. @param permission The AccessPermission object for security settings.
359 Constructs an FDFDocument from a COSDocument and data source. @param doc The COSDocument to associate with the FDFDocument. @param source The RandomAccessRead data source for the document.
360 Converts COSArrayList into an array by delegating to underlying COSArray. @return An array containing all elements in this collection.
361 Returns the index of the first occurrence of specified object in list. @param o The object to search for @return Index of first occurrence or -1 if not found
362 Overrides Object's equals to compare COSArrayList objects based on their underlying actual object. @param o the object to compare with this COSArrayList instance @return true if both objects are equal, false otherwise
363 Returns a hash code value for this COSArrayList object by delegating to its underlying COSArray. @return a hash code value for this object
364 Overrides to find and return the last index of a given object in the list. @param o The object to search for @return The last index or -1 if not found
365 Returns an iterator over the elements in this COSArrayList. @return a ListIterator over the elements in this list
366 Returns an iterator over elements of this list in proper sequence. This is a pass-through method to the underlying COSArray's iterator. @param index starting position for iteration @return ListIterator that can traverse the list from given index
367 Returns a view of the list elements between the specified indices. @param fromIndex inclusive start index @param toIndex exclusive end index @return view of the specified range within this list
368 Checks if any value in the map equals the given object. @param value The value to search for. @return True if value is present, false otherwise.
369 Returns an unmodifiable set of all key-value pairs in the map. @return Set of Map.Entry objects representing each pair
370 Returns an unmodifiable set of all font names in the standard 14 fonts collection. @return Set containing aliases for standard PDF fonts
371 Converts the map to its string representation using underlying data.
372 Converts COSBase to PD using the declared constructor of valueType with base as argument. @param base a COSBase object to be converted @return an Object representing the converted PD or throws IOException if creation fails
373 Generates a letter label based on the given number using modulo and signum operations. @param num an integer value to convert into a letter label @return a string representing the generated letter label
374 Returns the count of different page ranges labeled in the PDF document. @return The number of unique page range labels in the document.
375 Retrieves page label range starting from specified page index. @param startPage Index of the first page in the range @return PDPageLabelRange object or null if not found at that index
376 Returns a sorted set of all page indices in this PDF document. @return A NavigableSet of Integer page indices.
377 Returns a copy of the dash pattern array. @return A cloned array of dash lengths used in line drawing
378 Initializes a PDColor instance with components and color space. Logs warning if component count mismatches. @param components array of color components @param colorSpace associated color space for the components
379 Retrieves color components based on the color space. @return A copy of the color components in a new array.
380 Initializes an instance of CoordinateColorPair with a point and color values. @param p two-dimensional point @param c array representing color values
381 Returns a string representation of FunctionType2's key attributes. @return String with C0, C1, and N values for exponential interpolation.
382 Calculates and returns the minimum and maximum X and Y coordinates of a triangle's vertices. @return an int array with [minX, maxX, minY, maxY]
383 Removes and returns the top number from this stack. @return The number at the top of this stack (or null if empty or not a number)
384 Pops and returns the top integer from the stack. @return The top integer on the stack or throws an exception if empty.
385 Removes and returns the top element of stack as a float value. @return The numeric value of the top object on the stack as a float, or 0 if empty
386 Adds a boolean value to the instruction sequence.
387 Initializes an instance of ExecutionContext with specified Operators. @param operatorSet set of operators for PDF document processing
388 Compiles and returns a list of patterns for identifying list items in text. @return List<Pattern> compiled from predefined list item expressions
389 Converts an Object array to a string representation, using each object's toString(). @param array the Object array to be converted @return a string representing the contents of the array
390 Converts a float array to a string representation. @param array the input float array @return a string with comma-separated floats enclosed in square brackets
391 Adds a TextPosition object to the collection of content elements.
392 Adds marked content to the collection of content elements. @param markedContent object representing the marked content to be added
393 Adds a graphical object to the marked content's collection. @param xobject The graphical object to be added.
394 Sets or clears the permission to print for PDF documents. @param allowPrinting true to allow printing, false to disallow
395 Sets the permission for document modification. If not read-only, updates the permission bit accordingly. @param allowModifications true to allow modifications, false otherwise
396 Sets permission for content extraction. Ensures document is not read-only before updating the permission bit. @param allowExtraction true to enable, false to disable content extraction
397 Sets the permission to modify annotations in a PDF document. @param allowAnnotationModification true to enable, false to disable modification of annotations
398 Sets permission to fill in forms for PDF document. Ignores if document is read-only. @param allowFillingInForm true to enable form filling; false to disable
399 Sets permission to extract content for accessibility. Ignores request if document is read-only. @param allowExtraction true to allow extraction, false otherwise
400 Sets the permission to assemble a PDF document. @param allowAssembly true to allow assembly, false otherwise.
401 Sets the permission for faithful printing of PDF documents. @param canPrintFaithful boolean value to allow or disallow faithful printing
402 Checks if printing permission is set.
403 Checks if modification permission is granted. @return True if modification is allowed, false otherwise
404 Checks if extraction of content permission is granted. @return True if extracting content is allowed, false otherwise
405 Checks if modification of annotations is permitted. @return True if permission bit is set, false otherwise
406 Checks if filling in form permission is granted. @return True if form filling permission is on, false otherwise
407 Checks if the PDF document allows content extraction for accessibility. @return True if allowed, false otherwise
408 Checks if assembling document permission is granted. @return True if permission is on, false otherwise
409 Checks if the faithful print permission bit is set.
410 Retrieves a private key from the keystore using its alias or default if there's only one. @return PrivateKey object. Throws KeyStoreException if key retrieval fails. @throws KeyStoreException if key recovery or algorithm is unavailable
411 Returns a secure random number generator. Uses the custom one if provided; otherwise, creates a new one.
412 Sets encryption key and initializes the RC4 cipher algorithm state. @param key byte array representing the encryption key (1-32 bytes)
413 Writes encrypted data to an output stream using RC4 algorithm. @param aByte the byte to be written @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
414 Combines diacritics with base characters in a string using Unicode normalization or a predefined map. @param str input string to process diacritic combination @return the combined string with proper diacritic representation
415 Checks if a codepoint is prohibited for SASL protocol. @param codepoint the Unicode value to check @return true if it's prohibited, false otherwise
416 Computes the encryption version number based on key length and preferences. @return Encryption version number (1, 2, 4 or 5) based on key length and AES preference.
417 Returns a singleton instance of the BouncyCastleProvider for cryptographic operations. @return Provider instance for secure cryptography
418 Extracts text values from child nodes of an XML element. @param node The XML element to extract text from @return A string containing all text values of the child nodes
419 Writes a string to an output stream. @param text string to be written; @throws IOException if an I/O error occurs
420 Retrieves a predefined CMap by name, caching it for future use. @param cMapName the name of the predefined CMap to retrieve @return the retrieved or parsed CMap instance
421 Parses input data into a CMap object. Returns null if parsing fails or input is null. @param randomAccessRead Input data to be parsed @return CMap object or null if parsing fails or input is null
422 Generates a set of PostScript names derived from the input name, including removing hyphens. @param postScriptName original PostScript font name @return Set containing original and modified (hyphen removed) PostScript font names
423 Computes the set of points that make up a line between two coordinates. @param x0,y0 starting point; @param x1,y1 ending point @return Set of Point objects representing the line's path
424 Calculates the number of unique points in a given array, scaled by 1000. @param p An array of Point2D objects representing coordinates @return The count of unique scaled and rounded points in the array
425 Adds or updates a font in the cache with its corresponding FontInfo key.
426 Retrieves a FontBoxFont object from the cache based on font information. @param info unique identifier for the font @return FontBoxFont object or null if not found in cache
427 Adds a font substitute for a specific PostScript name in English lowercase. @param match original PostScript name (converted to lowercase) @param replace substitute PostScript name to be added
428 Retrieves font information based on PostScript name and format. @param format Font format (e.g., Type1, TrueType) @param postScriptName Unique font identifier @return FontInfo object if found; otherwise null
429 Retrieves font substitutes for a given PostScript name, removing spaces and converting to lowercase. @param postScriptName the original PostScript name of the font @return list of substitute font names or an empty list if none are found
430 Fetches font name by its encoding code or returns ".notdef" if not found. @param code unique font encoding identifier @return corresponding font name or ".notdef" if not mapped
431 Retrieves Type 2 Char String for a given CID. Handles both CID and T1 fonts. @param cid Character Identifier @return Type2CharString object or null if not found or invalid type @throws IOException if there's an error in data retrieval
432 Converts character code to Canonical Identifier (CID) for this Type 0 font. @param code Character code to be converted @return Corresponding CID or throws exception if conversion fails
433 Converts color components to RGB representation. @return int representing the RGB value of the color @throws IOException if there's an issue with color space conversion
434 Removes backdrop from a group of pixels using alpha factor and shifts. @param groupRGB RGB value of the group @param backdropRGB RGB value of the backdrop @param shift Bitwise shift for color extraction @param alphaFactor Transparency adjustment factor @return Adjusted RGB value with backdrop removed
435 Retrieves a segment of data from bytes array based on start and length. @return A new byte array containing the specified portion of data.
436 Retrieves the predefined Adobe Glyph List used in font encoding. @return The default Adobe Glyph List instance for font encoding.
437 Extracts and initializes relevant "cmap" subtables for Windows, Macintosh, and Unicode platforms. @throws IOException if an I/O error occurs while extracting the table
438 Checks if TrueType font embedding is permitted based on OS/2 fsType. @param ttf The TrueTypeFont object to evaluate @return true if embedding is permitted, false otherwise
439 Checks if subsetting is permitted for a given TrueType font based on FS type. @param ttf the TrueTypeFont object to evaluate @return true if subsetting is allowed; false otherwise
440 Converts a glyph name to its Unicode representation. @param name the input glyph name @return the corresponding Unicode string or null if not found
441 Initializes a PDColor instance with specified color components, pattern name, and color space. @param components Array of color component values @param patternName Name of the color pattern @param colorSpace Color space used for color representation
442 Converts a WritableRaster and ColorSpace to a BufferedImage using ComponentColorModel. @param raster source data for the image @param awtColorSpace color space used in the image creation @return BufferedImage representation of the input data
443 Converts image to RGB format using ColorConvertOp or drawImage for tiny images. @param raster WritableRaster object containing pixel data @param colorSpace Color space of the original image @return BufferedImage object in RGB format
444 Checks if the ICC profile's color model is sRGB. @param profile The ICC profile to be checked @return True if color model is sRGB, false otherwise
445 Returns the type of color space used in an image. @return integer representing the color space type (e.g., TYPE_RGB)
446 Initializes PredictorEncoder with document and image, setting up parameters for PNG filtering. @param document PDF document to include the image @param image BufferedImage object to be encoded and compressed
447 Scales an input BufferedImage to specified dimensions with optional interpolation. @param image Input BufferedImage @param width Desired output width @param height Desired output height @param type BufferedImage type (e.g., TYPE_INT_ARGB) @param interpolate Boolean flag for enabling/disabling interpolation @return Scaled BufferedImage
448 Retrieves the underlying COSDictionary object containing image parameters. @return COSDictionary with image attributes and properties
449 Initializes a new instance of the class with specified corner colors. @param color A 2D array representing RGB values at corners [topLeft, topRight, bottomLeft, bottomRight]
450 Retrieves and calculates the current clipping path, handling intersections if necessary. @return Area object representing the intersection of all clipping paths.
451 Constructs text attribute with specified name using parent constructor. @param name unique attribute identifier
452 Generates and returns a hash code based on the COSDictionary object. @return an integer representing the computed hash value
453 Returns an Affine Transform instance to translate shapes based on bounding box coordinates. @return AffineTransform object for shape translation in PDF document.
454 Computes parameters for a polygon segment in cloud border generation. @param length total length, advInterm and advCorner are lengths of segments @param array stores computed alpha angle and fitting error per half curl @return number of intermediate curls or -1 if length is zero
455 Flattens an ellipse into a series of points based on specified parameters. @param left X-coordinate of the top left corner @param bottom Y-coordinate of the top left corner @param right X-coordinate of the bottom right corner @param top Y-coordinate of the bottom right corner @return Array of Point2D.Double representing flattened ellipse points
456 Checks if a GeneralPath object represents a rectangular shape. @param path the GeneralPath to be checked @return true if the path is rectangular; otherwise, false
457 Retrieves the height of the template based on page height. @return floating-point value representing the template height
458 Sets horizontal and vertical positions of visible sign in PDF doc. @param x horizontal position on page @param y vertical position on page @return updated PDVisibleSignDesigner object for chaining
459 Transforms the visible signature using a given AffineTransform. @param affineTransform to apply for transformation @return PDVisibleSignDesigner instance for method chaining
460 Ensures the given PDOutlineItem has no sibling nodes, throwing an exception if it does. @param node The outline item to check for siblings @throws IllegalArgumentException If the node has any siblings
461 Returns an iterable collection of child outline items. @return Iterable object for traversing child outline items
462 Sets rendering hints to optimize image quality during PDF page rendering.
463 Adjusts the clip path based on scaling and translation transformations. @param linePath The original clip path to be adjusted @return The adjusted clip path or the original if no adjustment needed
464 Calculates and returns an appropriate subsampling value for image rendering. @param pdImage The input image object @param at Affine transformation to be applied @return Optimal subsampling value as an integer
465 Rounds up a double to the nearest integer with 5 decimal places precision. @param num The number to be rounded up. @return The rounded up integer value.
466 Calculates the X-coordinate based on rotation and translation. @param rotation angle of text rotation (0, 90, 180, or 270 degrees) @return X-coordinate after applying rotation and translation
467 Calculates the Y-coordinate of lower left corner after rotation. @param rotation angle of rotation (0, 90, 180, or 270 degrees) @return calculated Y-coordinate or 0 for invalid rotation angles
468 Calculates the width based on rotation angle and position. @param rotation The rotation angle in degrees @return Absolute difference between end point and translation point of text matrix.
469 Writes Unicode representation of a text element to an output stream.
470 Returns Unicode representation of text element as string. @return Unicode string representing the text element
471 Retrieves and converts text for a specified region to string representation. @param regionName The name of the defined PDF document region @return String containing extracted text or null if region not found
472 Starts article extraction and writes the start position to the output stream. @param isLTR specifies text direction (true for left-to-right, false otherwise) @throws IOException if an I/O error occurs during writing
473 Ends an article and writes the appropriate ending character/string to the output stream.
474 Writes the line separator to the output stream.
475 Writes the word separator to the output stream during text extraction.
476 Writes the paragraph start character and manages paragraph state. Calls write() to output the character, handles end of previous paragraph if needed. @throws IOException if an I/O error occurs during writing
477 Writes page start to the output stream. @throws IOException if I/O error occurs
478 Writes the end separator string of PDF text extraction to an output stream. @throws IOException if an I/O error occurs during writing
479 Handles directionality of a given word in text, correcting for any right-to-left (RTL) characters. @param word The input string to process for directionality. @return A string with corrected directionality.
480 Parses a bidirectional file and populates the MIRRORING_CHAR_MAP. @param inputStream Input stream containing bidirectional data to parse
481 Reverses Unicode string if it contains RTL characters, except at the start. @return Visually ordered Unicode representation of the text element.
482 Overrides to handle text position within defined regions, adding chars to corresponding lists. @param text TextPosition object containing character coordinates and details.
483 Checks if the text element is a diacritic mark based on Unicode properties. @return true if it's a non-spacing, modifier symbol or letter; false otherwise
484 Updates the TimeZone ID based on its raw offset value. @param tz The TimeZone object to update.
485 Converts a byte to its hexadecimal string representation. @param b the input byte @return two-character hexadecimal string representing the byte
486 Converts a byte array to its hexadecimal representation. @param bytes input byte array @return hexadecimal string representation of the input bytes
487 Converts a single byte to its hexadecimal representation as two bytes. @param b the input byte @return two bytes representing the hexadecimal value of the input byte
488 Converts a byte array to its hexadecimal string representation. @param bytes the input byte array @return a new byte array containing the ASCII characters of the hexadecimal representation
489 Writes a byte to an OutputStream as hexadecimal characters. @param b the byte to be written @param output the destination stream for the hexadecimal representation
490 Decodes a Base64 encoded string and removes spaces. @param base64Value The Base64 encoded string to decode @return Decoded byte array
491 Initializes a Matrix object with values from an AffineTransform. @param at the source AffineTransform to extract matrix values from
492 Transforms a Point2D using the matrix's parameters. @param point The 2D point to transform
493 Formats a float number into ASCII bytes with specified precision. @param value the float to format @param maxFractionDigits maximum digits after decimal point @param asciiBuffer byte array for output @return offset within buffer or -1 if value is invalid
494 Retrieves the PDFBox library's current version from a properties file. @return The version as a string, or null if unable to retrieve it.
495 Parses an XML document from the input stream with namespace awareness option. @param is InputStream containing the XML data @param nsAware boolean indicating whether to enable namespace awareness @return Document object representing the parsed XML structure @throws IOException if there's any issue reading or parsing the XML data
496 Finds and returns the value associated with a given byte sequence. @param bytes The input byte sequence to search for @return The stored value of type T or null if not found
497 Constructs a new COSBoolean object with the specified boolean value. @param aValue the initial boolean value to be encapsulated in this COSBoolean instance
498 Initializes a new instance of COSName with the given string. @param aName the name to be encapsulated by this object
499 Private constructor to limit instantiation of COSNull object to a single instance.
500 Initializes a new COSString object with specified byte array and hex formatting option. @param bytes input byte array to be copied @param forceHex true to enforce hexadecimal representation; false otherwise
501 Initializes an empty COSDictionary with its update state.
502 Initializes a COSObject with the specified COSBase and sets up its update state. @param object the underlying COSBase object to be managed by this COSObject
503 Initializes a COSObject with the given COSBase and ICOSParser, setting up its update state and parsing configuration. @param object base PDF object to be wrapped by COSObject @param parser used for dereferencing and updating the object
504 Initializes a COSObject with a given key and parser. Sets up the object's update state and parser. @param key unique identifier for the object @param parser responsible for parsing PDF data
505 Initializes DecodeOptions with a specific source region for image decoding. @param x the X-coordinate of the top-left corner of the source region @param y the Y-coordinate of the top-left corner of the source region @param width the width of the source region @param height the height of the source region
506 Initializes a free object reference with its unique key and the next free object number. @param key The COSObjectKey of the free reference @param nextFreeObject The number of the next free object
507 Initializes an ObjectStreamXReference with given parameters. @param objectStreamIndex Index of the object stream @param key Key of the referenced object @param parentKey Key of the parent object
508 Constructs an instance of resource cache with stable caching enabled by default.
509 Initializes with a given COSDictionary to manage PDF metadata and properties. @param dictionary the underlying data structure for managing PDF content
510 Constructs a new instance of PDAttributeObject with a given COSDictionary. @param dictionary manages PDF metadata and properties; critical for attribute data representation
511 Constructs a new PDUserProperty with a given COSDictionary and user attribute object. @param dictionary the underlying PDF metadata and properties @param userAttributeObject contains user-defined attributes for the property
512 Creates a new PDOutlineNode with specified COSDictionary. @param dict the underlying COSDictionary for managing PDF metadata and properties
513 Constructs a new instance of PDTransition with a given COSDictionary. @param dictionary manages PDF metadata and properties for transitions
514 Initializes a new instance of PDNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node
515 Initializes a new instance of PDEmbeddedFilesNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node
516 Initializes a new instance of PDJavascriptNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pairs for this node.
517 Initializes a new instance of PDStructureElementNameTreeNode with a provided COSDictionary. @param dic the dictionary containing name-value pair for this node
518 Creates a child node using provided dictionary and value type. @param dic the COSDictionary for the child node @return newly created PDNumberTreeNode object
519 Constructs a new PDMetadata object with the given COSStream. @param str the COSStream to be managed by this PDMetadata instance
520 Initializes a new PDObjectStream from a given COSStream. @param str the input COSStream to be managed by this instance.
521 Constructs a new PDEmbeddedFile object with the given COSStream. @param str the COSStream to be managed by this PDEmbeddedFile instance
522 Initializes PDFunction with a given COSBase object, handling streams and dictionaries. @param function input COSBase object; can be COSStream or COSDictionary
523 Initializes PDXObject with a given COSStream and subtype. Sets stream type and subtype names. @param stream the COSStream to be managed by this PDXObject instance @param subtype the PDF structure name for the object's subtype
524 Constructs a simple PDF file specification with given file name. @param fileName COSString representing the file's name in PDF document
525 Constructs a new structure node from a COS dictionary. @param dic COS dictionary representing the node's data and relationships.
526 Constructs a new root of a logical structure tree from a COS dictionary. @param dic COS dictionary representing the root's data and relationships
527 Initializes decryption material with a given password. @param pwd the decryption password as a string
528 Initializes an empty instance of PublicKeyProtectionPolicy. Used to create a new collection of public key recipients.
529 Initializes a StandardProtectionPolicy with passwords and access permissions for PDF documents. @param ownerPassword owner's password @param userPassword user's password @param permissions access permissions (e.g., printing, modifying)
530 Initializes an instance of the SecurityHandler class to manage PDF encryption and decryption.
531 Initializes a new instance of FDFAnnotationCaret with a COSDictionary. @param a dictionary containing annotation data for PDFBox library
532 Constructs an FDFAnnotationCircle from a COSDictionary. @param a dictionary containing annotation data for PDFBox library
533 Initializes FDFAnnotationFileAttachment with COSDictionary data. @param a dictionary containing annotation data for PDFBox library
534 Initializes a new instance of FDFAnnotationFreeText with a COSDictionary. @param a dictionary containing annotation data for PDFBox library.
535 Constructs an FDFAnnotationInk from a COSDictionary. @param a dictionary containing ink annotation data for PDFBox library
536 Initializes a new instance of FDFAnnotationLine with COSDictionary. Calls super constructor to set annotation data for PDFBox library. @param a dictionary containing line annotation data for PDFBox library
537 Initializes FDFAnnotationLink with COSDictionary data. @param a dictionary containing annotation link data for PDFBox library
538 Initializes an instance of FDFAnnotationPolygon with COSDictionary. @param a dictionary containing annotation data for PDFBox library
539 Initializes an instance of FDFAnnotationPolyline with COSDictionary. @param a dictionary containing annotation data for PDFBox library
540 Initializes sound annotation from a COSDictionary in PDFBox library. Inherits base properties and constructs with sound-specific data. @param a dictionary containing annotation data for PDFBox library
541 Constructs an FDFAnnotationSquare from a COSDictionary. @param a dictionary containing square annotation data for PDFBox library
542 Constructs an FDFAnnotationStamp object from a COSDictionary. @param a dictionary containing stamp annotation data for PDFBox library
543 Constructs an FDFAnnotationText object from a COSDictionary. @param a dictionary containing text annotation data for PDFBox library
544 Constructs an FDF text markup annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
545 Extracts and returns a PANOSE font classification object from the byte array data. @return A new PDPanoseClassification instance containing typographic attributes for analysis.
546 Returns a Composite for blending images with specified blend mode and alpha. Validates input parameters. @param blendMode The blending technique to be used (cannot be null) @param constantAlpha The constant alpha level for the composite, clamped between 0 and 1 @return Composite instance for image blending operations
547 Fetches and constructs transparency group attributes on demand. @return Transparency group attributes or null if not defined in the PDF document.
548 Constructs a shading pattern from a given COSDictionary. @param resourceDictionary contains pattern-related data for this instance
549 Constructs a tiling pattern from a COSDictionary with a specified resource cache. @param dictionary contains pattern-related data @param resourceCache stores and retrieves resources for the pattern
550 Constructs a new PDShadingType1 object with given shading dictionary. @param shadingDictionary COSDictionary containing Type 1 shading properties.
551 Constructs a new PDShadingType2 object with given shading dictionary. This is a specialized Type 2 shading for PDF documents. @param shadingDictionary COSDictionary containing shading properties
552 Constructs an AxialShadingPaint object with PDShadingType2 and transformation matrix. @param shadingType2 the specific axial shading type to be applied @param matrix the transformation matrix for shading manipulation
553 Constructs a RadialShadingPaint object with specified PDShadingType3 and transformation matrix. @param shading the radial shading object to be applied @param matrix the transformation matrix for shading manipulation
554 Constructs a Type 1 Shading Paint object with specified shading and transformation matrix. @param shading the Type 1 shading object to be applied @param matrix the transformation matrix for shading manipulation
555 Constructs a Type4ShadingPaint object with specified shading and transformation matrix. @param shading the type 4 shading object to be applied @param matrix the transformation matrix for shading manipulation
556 Constructs a Type 5 Shading Paint object with given shading and transformation matrix. @param shading the type 5 shading object to be applied @param matrix the transformation matrix for shading manipulation
557 Constructs a Type6ShadingPaint object with specified shading and transformation matrix. @param shading the type 6 shading object to be applied @param matrix the transformation matrix for shading manipulation
558 Constructs a Type 7 Shading Paint object with specified shading and transformation matrix. @param shading the Type 7 shading object to be applied @param matrix the transformation matrix for shading manipulation
559 Initializes an extended graphics state with a PDF dictionary. @param dictionary the COSDictionary containing graphics properties
560 Initializes soft mask with a given COSDictionary. @param dictionary contains soft mask properties
561 Constructs a PlainText object from a given string, splitting it into Paragraph objects. @param textValue the input text to be converted into structured Paragraph objects
562 Constructs a new PDActionEmbeddedGoTo object from a COSDictionary. @param a dictionary containing action details for embedded navigation
563 Constructs a new PDActionGoTo object from a COSDictionary. @param a dictionary containing action details for navigation
564 Constructs a new PDActionHide object from a COSDictionary. @param a dictionary containing action details to hide elements in PDF
565 Constructs a PDActionImportData object from a COSDictionary. @param a dictionary containing import data action details
566 Constructs a new PDActionJavaScript object from a COSDictionary. @param a dictionary containing JavaScript action details
567 Constructs a new PDActionLaunch object from a COSDictionary. @param a dictionary containing action launch details
568 Constructs a new PDActionMovie object from a COSDictionary. Inherits base constructor, enabling integration and manipulation of movie actions in PDF interactivity. @param a dictionary containing action details
569 Constructs a new named action from a COSDictionary. @param a dictionary containing action details, including name.
570 Initializes a new remote navigation action from a given dictionary. @param a COSDictionary containing action details
571 Initializes a new PDF form reset action using a COSDictionary. @param a dictionary containing action details for the reset action
572 Constructs a new PDActionSound object from a COSDictionary. @param a dictionary containing sound action details.
573 Constructs a PDActionSubmitForm object from a COSDictionary. @param a a dictionary containing form submission action details.
574 Constructs a new PDActionThread object from a COSDictionary. @param a dictionary containing thread action details
575 Constructs a new URI action from a COSDictionary. @param a dictionary containing URI action details
576 Initializes a new PDF visible signature builder with a template structure. Logs the creation of the PDF structure for debugging and tracking purposes.
577 Initializes a named destination with a COSString identifier. @param dest the COSString representing the destination name
578 Initializes a named destination with a COSName object. @param dest the COSName representing the destination
579 Default constructor for PDNamedDestination; does not initialize any properties.
580 Constructs a PDPageDestination object from a COSArray. @param arr the COSArray containing destination data
581 Constructs a new PDNonTerminalField with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the non-terminal field @param parent the parent PDNonTerminalField (if any)
582 Constructs a new terminal field with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
583 Constructs a PDRectlinearMeasureDictionary with a given COSDictionary. @param dictionary the measurement data in PDF format to be managed by this class
584 Creates and returns an exact copy of this matrix object. @return A deep copy of the current matrix object
585 Returns a scaling transformation matrix. @param x scale factor along the horizontal axis @param y scale factor along the vertical axis
586 Returns a translation matrix instance with given offsets. @param x horizontal translation value @param y vertical translation value
587 Creates a rotation matrix instance based on theta and translation values. @param theta Rotation angle in radians @param tx X-axis translation value @param ty Y-axis translation value @return A new Matrix object representing the rotation transformation
588 Transforms a 2D vector using the matrix parameters. @param vector the input Vector object to be transformed @return a new Vector object after applying transformation
589 Scales the vector by a given factor. @param sxy scaling factor
590 Initializes the Mac Expert character encoding table. Populates the encoding with character codes and names from MAC_EXPERT_ENCODING_TABLE.
591 Initializes MacRomanEncoding object and defines character mappings.
592 Initializes standard encoding table in the PDF document. @return None, updates internal encoding table.
593 Initializes symbol encoding from a predefined table. Adds each entry to the encoding using char code and name.
594 Default constructor for Type1Encoding class. Initializes an instance of Type1Encoding with default settings.
595 Constructs a Type1Encoding object from given FontMetrics, mapping character codes to names. @param fontMetrics contains character metrics for encoding creation
596 Initializes WinAnsiEncoding with character codes and names, mapping unused codes to the bullet character.
597 Initializes the mapping of character codes to names for Zapf Dingbats font.
598 Creates and returns a tree representation of form fields. @return a PDFieldTree object containing this PDAcroForm's fields
599 Retrieves an object from the collection by its index. @param index position of the object in the collection @return object at the specified index or null if not found
600 Returns the total number of objects managed by this revision instance. @return The count of all objects in the collection
601 Retrieves a specific revision number from the collection based on its index. @param index position of the desired revision number in the list @return The integer value of the specified revision number
602 Parses PNG chunks from byte array and populates a PNGConverterState object. @param imageData byte array containing PNG data @return Populated PNGConverterState or null if parsing fails
603 Retrieves an Encoding instance by its COSName. @param name the COSName of the encoding (Standard, WinAnsi, MacRoman, or MacExpert) @return the corresponding Encoding object or null if not found
604 Creates a soft mask from COSDictionary or returns null for invalid inputs. @param dictionary contains soft mask properties, can be COSName or COSDictionary @param resourceCache manages resources for PDF rendering @return PDSoftMask object or null if input is invalid or not supported
605 Returns the index of the selected radio button or -1 if none are selected.
606 Adds a source PDF file to be merged. Accepts a string path. @param source Path of the PDF file to merge @throws FileNotFoundException if the file does not exist
607 Parses and sets the trailer dictionary for the last cross-reference section. @return True if parsing and setting is successful; false otherwise. @throws IOException If an I/O error occurs during parsing.
608 Retrieves a COSBase object from the pool by its unique identifier. @param key The COSObjectKey for the desired object @return The corresponding COSBase object or null if not found
609 Executes instructions in given context, handling operators and pushing non-strings to stack. @param context the execution environment containing the instruction sequence and stack.
610 Retrieves the current text line transformation matrix. @return Current text line matrix; null if graphics state is empty
611 Sets text line transformation matrix in PDF rendering.
612 Retrieves text matrix from current graphics state. @return The current text transformation matrix; null if no graphics state exists
613 Sets the text transformation matrix in the current graphics state. @param value new text transformation matrix to be applied
614 Transforms a given width based on the current graphics state's transformation matrix. @param width The original width to be transformed @return Transformed width as a float value
615 Retrieves the current non-stroking color from the graphics state. Critical for managing and applying colors during PDF rendering. @return The current non-stroking color used for filling shapes and text
616 Sets the non-stroking color in the current graphics state. @param color The PDColor object representing the new non-stroking color
617 Retrieves the current non-stroking color space for graphics rendering. @return The current non-stroking color space in use, or null if not set.
618 Retrieves the current stroking color from the graphics state. @return The PDColor object representing the stroking color, or null if unavailable.
619 Sets stroking color in graphics context. @param color PDColor object to be used for strokes
620 Retrieves the stroking color space used in drawing operations. @return The current stroking color space object; null if not set.
621 Creates an input stream for raw data. Throws exception if closed or writing. @return InputStream for reading the raw data of this COSStream @throws IOException if stream is closed or writing, or data has not been written before
622 Finds an ImageReader for a given format. Throws exception if none found. @param formatName name of the file format (e.g., "jpg", "png") @param errorCause reason for the missing image reader issue @return ImageReader instance capable of decoding the format or throws exception if not found
623 Finds an ImageReader that can read raster data for a specified format. @param formatName Name of the file format to search for (e.g., "jpg", "png") @param errorCause Cause of any potential MissingImageReaderException @return An ImageReader capable of reading raster data in the format @throws MissingImageReaderException if no suitable reader is found
624 Retrieves or creates an Operator instance for the given PDF operator name, with thread-safe handling and caching for non-ID operators. @param operator String representing the PDF operator name @return Corresponding Operator instance
625 Returns string representation of COSArrayList object. Critically uses makeConcatWithConstants for formatting.
626 Determines if an edge is a line in the context of color shading. @param ctl Array of control points defining the edge @return True if edge is a line, false otherwise
627 Retrieves the x-coordinate of the lower left corner of the rectangle. @return Float value representing the x-coordinate
628 Retrieves the lower left y-coordinate of the rectangle from the collection. @return y-coordinate as a float value
629 Retrieves the X coordinate of the upper right corner of the rectangle. @return X coordinate as a floating-point value
630 Retrieves the y-coordinate of the upper right corner of this rectangle. @return The y-coordinate value as a float.
631 Retrieves the font size from the font settings collection. @return float value representing the font size.
632 Retrieves and returns the red component of the color value as a float. @return Red component value (float) from the first position in values array
633 Retrieves and returns the green color component from the RGB values. @return Green color component as a float value
634 Retrieves blue color component from RGB values array. @return Blue color component as a float value
635 Retrieves the X tristimulus value of the color. @return The X tristimulus value as a float
636 Retrieves the Y tristimulus value of the color in a three-dimensional space. @return Y tristimulus value as a float
637 Retrieves the Z tristimulus value representing color in the three-dimensional space. @return The Z tristimulus value as a float
638 Retrieves an int value at a specific index or returns defaultValue if not found. @param index position in the collection @param defaultValue fallback value if index is invalid or object is not COSNumber @return int value at index or defaultValue if conditions are not met
639 Retrieves name from object at given index or returns default value. @param index position in the array @param defaultValue fallback value if object is not a COSName @return Name of COSName object or default value if not found/applicable
640 Finds the index of a specified object in the collection. @param object COSBase object to search for @return Index of the object or -1 if not found
641 Retrieves and constructs a list of filters applied to this data stream. @return List<Filter> object containing the applicable filters or an empty list if none exist @throws IOException if filters are not in the expected format (COSName or COSArray)
642 Evaluates Function Type 2 with exponential interpolation. @param input array of values for calculation @return float array representing the evaluated function results
643 Retrieves and formats the filters applied to this PDF stream. @return List of COSNames representing applied filters, or an empty list if none exist.
644 Retrieves and returns file filter names from the PDF stream dictionary. @return List of String filter names extracted from the stream's COSArray or single COSName object, or empty list if none found.
645 Writes a boolean value to the PDF document's OutputStream. @param output stream to write the boolean value @param cosBoolean COSBoolean object containing the boolean value @throws IOException if an I/O error occurs during writing
646 Writes ASCII encoded string to output stream. @param text String to be written
647 Notifies of changes in a user property and updates the document structure accordingly. @param oldEntry The previous PDUserProperty object @param newEntry The updated PDUserProperty object
648 Returns total count of elements in this COSDictionaryMap.
649 Retrieves a COSObject from the dictionary using a given key. @param key unique identifier for the COSObject @return COSObject if it exists; otherwise, null
650 Retrieves an item from the dictionary using either of two keys. @param firstKey primary key to search for the item @param secondKey alternative key if the primary is not found @return the item if it exists; otherwise, null
651 Returns the number of document recipients for encryption settings. @return The count of recipients in the PDF document's security settings
652 Retrieves a recipient string at a given index from the document's dictionary. @param i index of the desired recipient string @return COSString object at the specified index or null if not found
653 Retrieves the direction of a page transition. @return the direction value or default (0) if not set.
654 Returns a set of all metadata keys in the PDF document. @return Set containing all metadata keys as strings.
655 Returns a list of attribute names, excluding the 'O' key. @return List containing all attribute names in the object
656 Adds trailer info to the stream from a dictionary, excluding INFO, ROOT, ENCRYPT, ID, and PREV keys. @param trailerDict COSDictionary containing trailer information.
657 Initializes COSDictionary with another COSDictionary. Adds all key-value pairs from the source dictionary. @param dict the source COSDictionary to copy data from
658 Checks if a dictionary contains information keys, excluding parent & destination keys. @param dictionary COSDictionary to be checked @return true if info keys are present, false otherwise
659 Checks if the font descriptor dictionary contains width information. @return true if widths or missing width is present, false otherwise
660 Checks if font descriptor is missing width information. @return true if missing, false otherwise
661 Checks if the form contains an XFA (XML Forms Architecture) component. @return true if XFA is present, false otherwise
662 Initializes XRefParser with a COSParser and sets its data source. @param cosParser the PDF document parser to be used for parsing cross-reference tables.
663 Converts this COSFloat object to a string representation. @return a formatted string for debugging and display purposes
664 Writes formatted float value to PDF in ISO-8859-1 encoding.
665 Writes a COSArray object to an output stream in PDF format. @param output destination stream for writing data @param cosArray the array of COSBase objects to be written @throws IOException if an I/O error occurs during writing
666 Creates a new COSIncrement object with the current update information. @return A COSIncrement object initialized with the class's update info
667 Initializes a LayerUtility object with the destination PDDocument for cloning or merging operations. @param targetDoc the target document for manipulation and management of layers
668 Initializes resource cache with stable caching enabled by default
669 Checks if a given PDF object requires an update. @param base the PDF object to be checked @return true if updated, false otherwise
670 Writes FDFDocument to output stream, managing incremental updates and encryption. @param doc the FDFDocument object to be written @throws IOException if there is an error during writing operation
671 Writes a COS integer to PDF output stream and adds space separator. @param output the destination output stream @param cosInteger the COS integer object to be written @throws IOException if an I/O error occurs during writing
672 Retrieves and handles object at given index, dereferencing if needed. @param index position of the object in the array @return COSBase object or null after potential dereferencing
673 Finds the index of a given object in the collection. @param object The COSBase object to locate @return Index of the object or -1 if not found
674 Checks if a specified value is present in the dictionary, handling dereferencing for COSObjects. @param value The value to search for in the dictionary @return true if value is found, otherwise false
675 Locates and returns the key for a given value in the COSDictionary. @param value The object to search for in the dictionary's values. @return The corresponding key or null if not found.
676 Retrieves a dictionary object using a given key, handling COSObject and COSNull. @param key the unique identifier for the dictionary object @return the dictionary object if it exists; otherwise, null
677 Retrieves the linearized dictionary from the PDF document. @return Linearized dictionary if found; otherwise, null
678 Safely closes the COSDocument and associated resources, handling exceptions. @throws IOException if an I/O error occurs while closing resources
679 Accepts a visitor and processes the underlying PDF object. @param visitor The ICOSVisitor to be accepted @throws IOException If there is an error during processing
680 Checks for self-referencing in COSBase objects, logs a warning if found. @param parent The COSBase object to check against @param value The potential referencing COSBase object @return True if self-reference is present, false otherwise
681 Retrieves the length from a COSBase object, handling various types and potential errors. @param lengthBaseObj The base object containing the length information @return A COSNumber representing the length or null if not found or invalid type
682 Initializes a NormalXReference with offset, key, and object details. Identifies if the referenced object is a stream for further handling. @param byteOffset The byte offset of the reference @param key The unique key of the reference @param object The COSBase object being referenced
683 Retrieves the unique key for a given COSBase object. @param object The input COSBase object @return The corresponding COSObjectKey or null if not found
684 Checks if the pool contains a specific COSBase object or its key. @param object The COSBase object to be checked @return true if the pool contains either the object or its key, false otherwise
685 Prepares stream objects for writing to output, adding keys and their associated values. @param key unique identifier for the object @param object the COSBase object or its subclass instance to be prepared for writing
686 Constructs a COSObjectKey with object number and generation. @param num unique object number @param gen object's generation value
687 Compares this XReference to another based on its referenced key. @param xReferenceEntry the other XReference to compare with @return comparison result based on referenced keys
688 Returns the X scaling factor of the text element's transformation matrix. @return The absolute value of the scaled X component, considering rotation.
689 Returns the Y scaling factor of the text matrix. @return Y scaling factor, or 1 if not scaled
690 Creates an output stream for raw data writing to the COSStream. @return Output stream for writing raw data @throws IOException if the stream has been closed or other I/O errors occur
691 Initializes a COSWriter with an output stream and compression parameters. @param outputStream the underlying output stream for writing PDF data @param compressParameters parameters to control document compression
692 Initializes COSWriter with an output stream and input data for PDF document handling. @param outputStream the output stream for writing data @param inputData the random access read input data used in PDF processing
693 Updates document state if accepting updates. @param updated new state
694 Converts byte array to string based on encoding (UTF-16 or PDFDocEncoding). @return String representation of the byte array using appropriate encoding
695 Initializes a COSString object with text and encoding options. @param text the input string to be encoded @param forceHex forces hexadecimal encoding if true; otherwise, uses PDFDocEncoding if possible
696 Checks if the PDFont is a standard 14 font based on its name and embedding status. @return true if it's a standard 14 font; false otherwise
697 Reads up to 'len' bytes into the 'data' array starting at 'offset'. @param data byte array to store read data @param offset start position in the array @param len maximum number of bytes to read @return Number of bytes read or -1 if end of stream is reached @throws IOException If an I/O error occurs during reading
698 Closes the stream, flushes data and releases resources. @throws IOException if an I/O error occurs during flush or close operations
699 Reads and returns the next byte of decoded data from stream. @return next byte of decoded data, or -1 if end of stream is reached
700 Reads decoded data into the provided byte array. Returns -1 at EOF, otherwise bytes read. @param data destination array for decoded data @param offset starting position in destination array @param length maximum number of bytes to read @return number of bytes read or -1 if EOF is reached
701 Sets signature image from input stream, disabling cache for reading.
702 Encodes raw data into LZW compressed format and writes to output stream. @param rawData input data to compress @param encoded output stream for the compressed data @throws IOException if reading/writing fails or code table is full
703 Chooses the optimal byte array for writing based on compression sum. @return The byte array with the lowest estimated compression sum.
704 Retrieves and returns the rendering state from a COSName object. @param state the COSName representing the rendering state @return corresponding RenderState or null if input is invalid
705 Converts a COSName to its corresponding BaseState. @param state The name of the state as a COSName object @return Corresponding BaseState or ON if input is null
706 Closes all PDF documents and clears resources, including overlays for default, first, last, etc. pages.
707 Constructs a form XObject with the given graphical data stream. @param stream the graphical data stream for this form object
708 Initializes PDFStreamParser with a PDContentStream object for parsing. @param pdContentstream contains the PDF content stream to parse @throws IOException if an I/O error occurs during initialization
709 Initializes PDFStreamParser with given byte array as PDF source. @param bytes byte array representing the PDF content to parse
710 Parses and retrieves a PDF object by its number from the source stream. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found; sets direct property false if found
711 Reads and returns the map of object numbers with their offsets in PDF doc. Closes resources after use. @return Map of object numbers with their respective offsets or null if an error occurs. @throws IOException if an I/O error occurs during reading from the source stream.
712 Skips white spaces and line breaks in the PDF source, handling extra whitespaces after stream. @throws IOException if an I/O error occurs while reading from the source
713 Skips line breaks in PDF source, handling CR, LF and CRLF sequences. @return true if line break is successfully skipped; false otherwise @throws IOException if an I/O error occurs while reading from the source
714 Reads and returns a line of text from the PDF source, handling EOL characters. @return A string representing a line of text from the PDF source. @throws IOException If end-of-file is encountered unexpectedly.
715 Skips over whitespace and comments in PDF source, rewinding the stream position. @throws IOException if an I/O error occurs while reading from the source
716 Searches for the nearest XREF (cross-reference) offset to a given value. @param xrefOffset The target offset to find the nearest match for. @return Nearest matching XREF offset or -1 if not found.
717 Parses and sets the version of the PDF header. @return True if successful; false otherwise. @throws IOException If an I/O error occurs during parsing.
718 Parses the FDF header and sets its version. Relies on the critical parseHeader method. @return True if parsing is successful; false otherwise
719 Parses and retrieves all objects from the PDF stream, handling duplicates and indexing as needed. @return A map of COSObjectKey to corresponding COSBase object instances in the PDF stream @throws IOException if an I/O error occurs while reading or parsing the stream
720 Calculates the final encryption key by combining object and generation numbers with the base key. @param objectNumber unique object identifier @param genNumber generation number of the object @return byte array representing the final encryption key
721 Creates an appearance content stream with a given PDF appearance and output stream. @param appearance the PDF appearance to customize @param outputStream the stream for writing content
722 Constructs a PDPageContentStream for PDF appearance stream with specified resources. @param doc the PDF document @param appearance the PDF appearance stream @param outputStream stream for writing content
723 Transforms a point using the current graphics state's transformation matrix. @param x The x-coordinate of the input point @param y The y-coordinate of the input point @return A new Point2D.Float object with transformed coordinates
724 Creates a context for tiling pattern rendering with scaling adjustments. @param cm ColorModel object @param deviceBounds Rectangle defining the device boundaries @param userBounds Rectangle2D defining the user boundaries @param xform AffineTransform object for transformation @param hints RenderingHints object for rendering hints @return PaintContext with adjusted scaling for tiling pattern rendering.
725 Concatenates this Matrix with another by multiplying their internal arrays. @param matrix the Matrix to concatenate with
726 Translates the matrix by (tx, ty) and checks for valid float values. @param tx translation in the x-direction @param ty translation in the y-direction
727 Scales the matrix by given factors along x and y axes. Checks float values after scaling. @param sx scale factor for x-axis @param sy scale factor for y-axis
728 Multiplies this matrix with another matrix and returns a new resultant matrix. @param other the second matrix to multiply with @return a new Matrix object as the multiplication result
729 Creates and returns a PDDocument instance using internal document data. @return PDDocument object for further processing or null if an error occurs. @throws IOException if there is an issue with the source or access permissions.
730 Constructs a PDDocument with specified COSDoc and source. @param doc The COSDocument to associate with this PDDocument. @param source The RandomAccessRead source for the PDF document.
731 Creates a SecurityHandler for a given ProtectionPolicy using reflection. @param policy The protection policy to be used by the handler @return A new SecurityHandler instance or null if no matching handler is found
732 Creates a security handler for a given filter name. @param name the unique name of the security handler @return SecurityHandler instance or null if not found for the name
733 Sets stroking color on demand for PDF appearance content stream. @param color the PDColor object to extract and set as stroking color @return true if successful, otherwise false @throws IOException if an I/O error occurs during color component retrieval or setting
734 Sets non-stroking color from PDColor object, if valid components are present. @param color the PDColor to get components from @return true if color was set successfully, false otherwise @throws IOException if an error occurs while writing
735 Checks if all owner permissions are granted for the PDF document. @return True if all permissions are on, false otherwise.
736 Checks for any revision 3 permissions set. @return True if any rev 3 permission is set, false otherwise.
737 Writes encrypted data to an output stream using RC4 algorithm. @param data the byte array to be written @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
738 Writes encrypted bytes to an output stream using RC4 algorithm. @param data byte array containing data to be written @param offset starting index in data for writing @param len number of bytes from data to write @param output the output stream for encrypted bytes @throws IOException if writing to the output stream fails
739 Inserts a diacritic at specified position in text, preserving character order and widths. @param i insertion index @param diacritic TextPosition object representing the diacritic to be inserted
740 Initializes a Line object with two points and their associated colors. @param p0,p1 Points defining the line; @param c0,c1 Colors at each point
741 Initializes soft mask with paint, mask, bounding box, and color transformations. @param paint graphic style; defines how colors are applied @param mask image used for transparency/blending effects @param backdropColor color to be displayed behind areas of transparency
742 Removes backdrop from the group image using a specified backdrop and offsets. @param backdrop Image to be used as the background for removal @param offsetX Horizontal shift in pixels @param offsetY Vertical shift in pixels
743 Retrieves AFM metrics for a font by name, loading if necessary. @param fontName the name of the font to retrieve metrics for @return FontMetrics object or null if base font is not found
744 Initializes GlyphList with input stream and sets capacity. Calls loadList to populate glyph data. @param input InputStream containing the glyph list data @param numberOfEntries Capacity for internal name-to-Unicode and Unicode-to-name maps
745 Constructs a GlyphList by copying existing mappings and loading additional data from an InputStream. @param glyphList Existing GlyphList to copy mappings from @param input InputStream containing additional glyph list data to load
746 Converts a character code to its corresponding Glyph ID (GID). @param code unique character encoding identifier @return corresponding GID or 0 if not found @throws IOException if an I/O error occurs while extracting the table
747 Retrieves the glyph name in the font, handling embedded status and Unicode conversion. @param name input glyph name @return corresponding glyph name or ".notdef" if not found
748 Retrieves the glyph name in the font, handling alternatives and Unicode representations. @param name The input glyph name @return The appropriate glyph name or ".notdef" if not found @throws IOException If an I/O error occurs during operation
749 Initializes the JPEG2000 color space with an AWT ColorSpace object. @param colorSpace the AWT ColorSpace to be used for JPX conversions
750 Initializes CMYK color space with ICC profile and sets conversion method. Throws IOException if default CMYK profile cannot be loaded.
751 Applies a mask to an image and returns the resultant BufferedImage. Scales mask if necessary and composes alpha channel into ARGB image. @param image Input BufferedImage @param mask Mask as a BufferedImage (optional, can be null) @param matte Optional float array for matte calculations (null for no matte) @return Modified BufferedImage with applied mask and alpha channel composition
752 Initializes Bezier curve with control points and detail level. @param ctrlPnts Array of control Point2D objects @param l Level of detail for curve generation
753 Checks if a point is within the ShadedTriangle. @param p The point to check for containment @return True if the triangle contains the point, false otherwise
754 Calculates the interpolated color at a given point on the triangle. @param p The point for which to calculate the color @return An array of floats representing the calculated color
755 Intersects clipping path with another path. @param path The new GeneralPath to intersect with the current clipping path.
756 Intersects clipping path with an Area object by converting it to a Path2D.
757 Sets the clipping path for graphics based on current state's clip path. Avoids empty clipping path issue by replacing with a rectangle if needed. @param graphics Graphics2D context to apply the clipping path.
758 Draws a tiling pattern onto the graphics context, applying specified parameters. @param g Graphics2D object for drawing @param pattern PDTilingPattern to draw @param colorSpace Color space for the pattern @param color Pattern's color @throws IOException if an I/O error occurs during processing
759 Calculates X-coordinate adjustment based on text direction. @return Adjusted X-coordinate as a float value
760 Initializes text position with given parameters and calculates X,Y coordinates based on rotation. @param pageRotation angle of page rotation @param endX ending X-coordinate @param endY ending Y-coordinate @param rotation angle of text rotation
761 Calculates Y-coordinate adjustment based on text direction. @return Adjusted Y-coordinate as a float value
762 Returns the width of text element based on rotation angle. @return Width calculated using getWidthRot method
763 Calculates width based on text direction and rotation. @return Adjusted width as a float value.
764 Starts article extraction with left-to-right text direction.
765 Writes the paragraph end and manages paragraph state. Calls methods to get end string and handle I/O operations. @throws IOException if an I/O error occurs during writing
766 Normalizes a word based on Unicode normalization and handles directionality. @param word The input string to be normalized and processed for directionality. @return A normalized string with corrected directionality.
767 Formats a Calendar object into a specific date string format with timezone. @param cal the calendar to be formatted @return formatted date string or null if input is null
768 Converts Calendar to ISO8601 formatted date-time string with timezone offset. @param cal the Calendar object to convert @return ISO8601 formatted date-time string with timezone offset
769 Converts byte array to its hexadecimal representation using Hex utility. @return hexadecimal string representation of the internal byte array
770 Writes an external signature to the PDF document. Throws exception if not prepared for setting a signature. @param cmsSignature byte array of the CMS signature @throws IOException if there's insufficient space for the signature or if the document is not ready for signing
771 Writes the PDF structure name to an OutputStream with proper encoding and character restrictions. @param output destination stream for the encoded name @throws IOException if writing to the stream fails
772 Writes an array of bytes to an OutputStream in hexadecimal format. @param bytes the byte array to be written @param output the destination stream for the hexadecimal representation
773 Parses an XML document from input stream without namespace awareness. @param is InputStream containing the XML data @return Document object representing parsed XML structure @throws IOException if there's any issue reading or parsing the XML data
774 Detects the type of a file from an input stream by analyzing its magic numbers. @param inputStream BufferedInputStream to be analyzed @return FileType object or null if not found, throws IOException if mark/reset is not supported
775 Initializes and sets up text rendering operators for PDF processing.
776 Retrieves or creates a COSName instance for the given string. Uses caching and thread-safety to manage instances efficiently. @param aName the input string for the COSName @return the corresponding COSName instance, creating if necessary
777 Constructs a new COSFloat object from a given floating-point number. @param aFloat The floating-point number to be stored in the COSFloat object.
778 Initializes a COSFloat object with a float and its string representation. @param aFloat Floating-point value to be represented by the COSFloat object @param valueString String representation of the floating-point value
779 Parses and coerces float from input string, handling exceptional cases. @param aFloat String to be parsed and coerced @throws IOException if unable to parse or coerce the input string
780 Constructs a new COSInteger object with given value and validation status. @param val Long integer value to be represented @param valid Boolean indicating the validation state of the value
781 Constructs a new COSString object from given byte array without hex formatting. @param bytes input byte array to be copied
782 Constructs an empty COSArray with default direct state.
783 Initializes a new COSStream with given RandomAccessStreamCache and sets initial length to 0. @param streamCache caches streams for efficient data access in PDF documents.
784 Initializes an unmodifiable COSDictionary from the given dictionary. @param dict original COSDictionary to be made unmodifiable
785 Creates and returns a default DecodeResult object with empty parameters. @return DecodeResult initialized with default (empty) decoding parameters
786 Initializes an empty PDDocumentInformation object with an underlying COSDictionary.
787 Initializes an instance of PDResources with a new empty dictionary. Sets up font and resource caching for efficient management.
788 Initializes an empty PDDictionaryWrapper with a new COSDictionary instance.
789 Initializes an empty PDF name tree node with a new COSDictionary.
790 Default constructor that initializes page label range with an empty COS dictionary.
791 Initializes an empty marking information object with a new COSDictionary.
792 Initializes an empty property list with a new COSDictionary.
793 Initializes an empty PDBoxStyle with a new COSDictionary.
794 Initializes an empty crypt filter dictionary for PDF encryption.
795 Initializes an empty encryption dictionary for PDF documents. @return A new instance of PDEncryption with an empty COSDictionary.
796 Constructs an empty FDF catalog with an initialized dictionary.
797 Initializes an empty FDF dictionary for managing FDF data.
798 Initializes an empty FDF form field with a new COSDictionary.
799 Constructs an empty FDF icon fit object with its initial state.
800 Initializes an empty FDFJavaScript object with a new COSDictionary.
801 Initializes an empty FDF named page reference with a new COS dictionary.
802 Constructs an empty FDFPage with a new COSDictionary.
803 Initializes an empty FDFPageInfo with a new COSDictionary.
804 Initializes an empty FDFTemplate with a new COSDictionary.
805 Initializes an empty PDDeviceNAttributes object with a new COSDictionary.
806 Initializes an empty device-dependent color space for PDF graphics.
807 Initializes an empty shading object with default settings.
808 Initializes an empty COSDictionary to store additional actions.
809 Initializes an empty dictionary for storing additional action definitions.
810 Initializes actions dictionary for PDF document catalog interactions.
811 Initializes an empty PDFormFieldAdditionalActions object with a new COSDictionary.
812 Initializes an empty PDPageAdditionalActions object with a new COSDictionary.
813 Initializes an empty target directory with a new COSDictionary.
814 Initializes an empty COSDictionary for URI actions in PDF documents.
815 Initializes a new instance with an empty parameter dictionary.
816 Initializes an empty border effect dictionary for PDF document manipulation.
817 Initializes an empty border style dictionary for PDF annotations.
818 Initializes a PDPropBuild object with an empty COSDictionary in direct mode.
819 Initializes an empty data dictionary for PDF build properties, setting it as a direct object.
820 Initializes an empty COSDictionary with direct state for storing digital signature properties.
821 Initializes an empty PDSeedValueTimeStamp object with a direct dictionary for storing timestamp data.
822 Constructs a new PDField instance with default parameters. @param acroForm the parent AcroForm structure to associate with the field.
823 Initializes an empty viewport dictionary for PDF processing.
824 Initializes an empty viewer preferences dictionary.
825 Constructs a COSObject with given base object and key. Marks it as dereferenced. @param object the underlying COSBase object to wrap @param objectKey unique identifier for the object
826 Initializes a new instance of PDDefaultAttributeObject with a given COSDictionary. @param dictionary manages PDF metadata and properties; critical for attribute data representation.
827 Constructs a new instance of PDUserAttributeObject with a given COSDictionary. @param dictionary Manages PDF metadata and properties; critical for attribute data representation.
828 Initializes PDStandardAttributeObject with a COSDictionary. @param dictionary manages PDF metadata; crucial for attribute data representation.
829 Constructs a PDOutlineItem with specified COSDictionary. @param dic the underlying COSDictionary for managing PDF metadata and properties
830 Retrieves and creates metadata from the PDF stream. @return PDMetadata object or null if not available; throws exception for invalid types.
831 Retrieves metadata from the COSStream object, creating a PDMetadata instance. @return PDMetadata object if metadata exists; otherwise, returns null.
832 Retrieves the extended object stream if it exists. @return PDObjectStream or null if not found
833 Initializes PDFunctionType0 with a COSBase object. @param function input COSBase object; can be COSStream or COSDictionary
834 Constructs a Type 3 PDF function from a given COSBase object. @param functionStream input COSBase object; can be stream or dictionary, initializes the parent PDFunction class for further handling.
835 Initializes PDPostScriptXObject with a given COSStream.
836 Constructs a form XObject from a given COSStream. Initializes the parent class with the stream and 'FORM' subtype. @param stream the COSStream to be managed by this PDFormXObject instance
837 Constructs a PDFormXObject with the given COSStream and ResourceCache. @param stream the underlying COSStream for this form XObject @param cache the resource cache to manage shared resources efficiently
838 Initializes an instance of PublicKeySecurityHandler to manage encryption and decryption using X.509 certificates.
839 Initializes an instance of the StandardSecurityHandler class for PDF encryption and security management.
840 Initializes security handler for public key protection policy. @param publicKeyProtectionPolicy Policy defining access permissions and encryption parameters.
841 Constructs StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy Policy defining access permissions and encryption parameters.
842 Constructs an FDF highlight annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
843 Constructs an FDF squiggly line annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
844 Constructs an FDF strikeout annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
845 Constructs an FDF underline annotation from COSDictionary. @param a dictionary containing annotation data for PDFBox library
846 Constructs a tiling pattern from a COSDictionary. Uses default resource cache. @param dictionary contains pattern-related data
847 Constructs a new PDShadingType3 object with given shading dictionary. This is a specialized Type 3 shading for PDF documents. @param shadingDictionary COSDictionary containing shading properties
848 Constructs a triangle-based shading type with given shading dictionary. @param shadingDictionary COSDictionary containing shading properties
849 Constructs a triangle-based shading type with given properties. @param shadingDictionary COSDictionary containing shading properties
850 Constructs a PDPageFitDestination object from a COSArray. @param arr COSArray containing destination data for page fitting.
851 Constructs a PDPageFitHeightDestination object from a COSArray. @param arr the COSArray containing destination data for fitting page height
852 Constructs a PDPageFitRectangleDestination from a COSArray. @param arr the COSArray containing destination data
853 Constructs a PDPageFitWidthDestination object from a COSArray. This is used for fitting the page width in a PDF document viewer. @param arr the COSArray containing destination data
854 Constructs a PDPageDestination object from a COSArray. @param arr the COSArray containing destination data.
855 Constructs a new button with specified parameters for PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the button @param parent the parent PDNonTerminalField (if any)
856 Constructs a new signature field with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the signature field @param parent the parent PDNonTerminalField (if any)
857 Constructs a new variable text field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
858 Initializes MacRomanEncoding and sets up character mappings for Mac OS Roman.
859 Creates a Type1Encoding instance from FontBox Encoding. @param encoding FontBox Encoding object @return Type1Encoding instance with mappings from the input encoding
860 Generates a unique partial name for signature fields. @return A string representing the unique partial name
861 Returns a string representation of the objects and their revisions in this collection. @return String formatted as "{object=obj1, revisionNumber=rev1; object=obj2, revisionNumber=rev2; ...}"
862 Creates a soft mask from COSDictionary or returns null if input is invalid. @param dictionary contains soft mask properties (COSDictionary or COSName) @return PDSoftMask object or null for unsupported or invalid inputs
863 Initializes a COSDocument object with a memory-only StreamCache and an ICOSParser. @param parser used for parsing PDF document data
864 Creates a PDMarkedContent object based on the tag type. @param tag COSName for content structure; returns PDArtifactMarkedContent if ARTIFACT @param properties Additional content properties as a COSDictionary @return PDMarkedContent or PDArtifactMarkedContent object based on the tag
865 Calculates and returns the width of the rectangle. @return Width as a floating-point value
866 Checks if a point is within the rectangle's boundaries. @param x Coordinate on the X-axis @param y Coordinate on the Y-axis @return True if the point is inside, false otherwise
867 Calculates and returns the height of the rectangle.
868 Transforms the rectangle using a given matrix and returns a GeneralPath object. @param matrix The transformation matrix to apply to the rectangle's coordinates @return A transformed GeneralPath object representing the new rectangle shape
869 Converts the rectangle to a GeneralPath object for graphical representation. @return GeneralPath representing the rectangle's geometry
870 Returns a string representation of the rectangle's coordinates. @return String in format "[lowerLeftX,lowerLeftY,upperRightX,upperRightY]"
871 Retrieves an integer value at a specified index. If not found, returns -1. @param index position in the collection @return int value at index or -1 if not found
872 Retrieves name from object at given index. @param index position in the array @return Name of COSName object or null if not found/applicable
873 Creates an output stream for writing data to the COSStream with optional filters. @param filters The filter(s) to apply to the data stream; if null, no filters are applied. @return OutputStream for writing data with applied filters, if any. @throws IOException If there's an error checking if closed or creating output streams.
874 Constructs a PDImageXObject with stream and resources, checks for JPX filter. @param stream the graphical data stream @param resources associated resources for the image object
875 Determines the image suffix based on its filters in a PDF document. @return Image suffix as a String or null if filter is not recognized.
876 Writes a finite float number to the output stream, formatting it according to decimal settings. @param real float number to write; throws an exception if not finite @throws IOException if an I/O error occurs while writing
877 Writes an integer operand to the stream, formatted as decimal.
878 Writes an operator and newline to content stream. @param text Operator string to be written in PDF content stream
879 Checks if the COSDictionaryMap is empty by comparing its size to zero.
880 Writes a formatted float value to the PDF output stream in ISO-8859-1 encoding. @param output destination output stream @param cosFloat COSFloat object containing the float value
881 Converts update state into a COSIncrement object. @return A COSIncrement object initialized with the class's update info, or null if no update is required.
882 Converts COSArray to float array. Handles COSNumber objects, others default to 0. @return Float array representation of COSArray elements
883 Converts COSBase objects to a list of Floats. @return List<Float> containing float values or null if object is not COSNumber
884 Converts COSBase objects to a list of Integers, if they are COSNumber instances. @return List<Integer> with corresponding integer values or null for non-COSNumber objects
885 Retrieves the minimum value of the range from PDF document. @return Minimum value as float, or NaN if not a number
886 Retrieves the maximum value of the range from a PDF document. @return Maximum value as float, or null if object is not COSNumber
887 Retrieves a PDGamma object at the specified index, if it exists. @param index position in the color array @return PDGamma object or null if not found or not an instance of COSArray
888 Retrieves a blend mode instance from a COSBase object. @param cosBlendMode the base object containing blend mode info @return corresponding BlendMode or NORMAL if not found
889 Retrieves and converts colorant names from the internal COSArray. @return List of String colorant names extracted from COSName objects within the array
890 Retrieves the alternate color space or creates it if not already initialized. @return The alternate color space object for this device @throws IOException If an error occurs during creation of the color space
891 Retrieves and returns the colorant's name from the array. @return The string representation of the colorant's name
892 Fetches the first PDF page from an array. If available, returns a PDPage object; otherwise, returns null.
893 Retrieves the target page number from the destination array. @return Page number if found, otherwise -1
894 Retrieves the zoom level for this PDF destination. @return The zoom level as a float, or -1 if not defined.
895 Initializes a Matrix object from a COSArray of transformation values. @param array contains six float numbers representing scaling and translation parameters
896 Retrieves a dictionary object using two keys, with priority to the first key. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return dictionary object or null if both keys fail
897 Retrieves a COSName object from the dictionary using a given key. @param key unique identifier for the COSName object @return the COSName object if it exists; otherwise, null
898 Retrieves a COSDictionary object using a given key. @param key the unique identifier for the dictionary object @return the COSDictionary if it exists; otherwise, null
899 Retrieves a COSStream object using the provided key. @param key unique identifier for the stream object @return COSStream if found; otherwise, null
900 Retrieves a COSArray object using the given key. @param key unique identifier for the dictionary object @return COSArray if found; otherwise, returns null
901 Retrieves a COSName object for the given key or returns a default value. @param key unique identifier for the dictionary object @param defaultValue fallback value if key is not found or not a COSName @return COSName object or defaultValue if key is invalid or not present
902 Retrieves a long value from the dictionary using the given key. @param key unique identifier for the value @param defaultValue fallback value if key is not found or not a COSNumber @return the long value or defaultValue if the key is not a COSNumber
903 Retrieves a float value from the dictionary using a key. Uses defaultValue if key is not found or value is not a COSNumber. @param key unique identifier for the float value @param defaultValue fallback value if key is invalid or non-numeric @return float value associated with key, or defaultValue if not found/invalid
904 Retrieves content streams from the page's dictionary or array. @return Iterator over all content streams in the page
905 Checks for the presence of page content. @return True if page contains content, otherwise false
906 Retrieves and manages class names with their revision numbers from the PDF structure element. @return Revisions object containing class names and their corresponding revision numbers
907 Retrieves the dictionary object associated with 'K' from the COS object. @return the dictionary object associated with 'K'; otherwise, null
908 Retrieves the value of user property from a PDF document's dictionary object. @return the COSBase object containing the property value, or null if not found
909 Checks if metadata encryption is enabled in the crypt filter dictionary. @return True if metadata is encrypted, false otherwise; defaults to true as per PDF specification.
910 Retrieves and returns the owner's encryption key from a PDF document dictionary. @return A byte array containing the owner's encryption key or null if not found. @throws IOException If an I/O error occurs while retrieving the key.
911 Retrieves and copies the user encryption key from the PDF document dictionary. @return A 32-byte array representing the user encryption key, or null if not found
912 Retrieves and returns the permission bytes from the PDF dictionary. @return byte array containing permissions; null if not found @throws IOException if an I/O error occurs during retrieval
913 Retrieves the page number of the annotation from a PDF document. @return Page number as Integer; null if not found or not applicable.
914 Retrieves and validates the COSValue of the form field. @return COSBase object if it's a valid type; otherwise, throws an exception or returns null @throws IOException if the value type is unknown
915 Retrieves the field flags for this form field, if present. @return Integer representing field flags or null if not found
916 Retrieves and returns the SET_FF flag for a form field, if it exists. @return Integer value of SET_FF flag or null if not set
917 Retrieves clear field flags from the FDF field dictionary. @return Integer value of the clear field flags, or null if not found.
918 Retrieves and returns the widget field flags as an Integer value. @return widget field flags or null if not found in the dictionary object
919 Retrieves and returns the SET_F field flag value from the form field dictionary, or null if not found.
920 Retrieves clear widget field flags from the FDF field dictionary. @return Integer value of CLR_F flag, or null if not found
921 Retrieves or sets the default width of a CID font. @return the default width value as a float
922 Retrieves and creates the color space from dictionary object. @return PDColorSpace object or null if not found in dictionary. @throws IOException if error occurs during creation of color space.
923 Retrieves the color space for transparency group attributes or creates it if null. @param resources PDF resources for managing the color space @return PDColorSpace object representing the color space
924 Initializes an instance of PDOptionalContentGroup from a given COSDictionary, ensuring it's of the correct type. @param dict the dictionary to initialize the group from; must be of type 'OCG'
925 Constructs PDOptionalContentMembershipDictionary from a given COSDictionary, ensuring it's of type 'OCMD'. @param dict the input dictionary to initialize the object @throws IllegalArgumentException if the dictionary is not of type 'OCMD'
926 Retrieves the overprint mode from a PDF dictionary object. @return Integer representing the overprint mode, or null if not found
927 Retrieves and creates a soft mask from the dictionary object. @return PDSoftMask object or null if not found or invalid input.
928 Retrieves a float value from the dictionary using a given key, if it exists. @param key unique identifier for the float object in the dictionary @return float value or null if not found or not a COSNumber instance
929 Retrieves the transfer property from the dictionary. Validates its format and size. @return Transfer property if it's a valid COSArray of size 4; otherwise, null
930 Retrieves the transfer function type 2 from the dictionary. Validates its structure. @return COSBase object if valid; otherwise, null
931 Retrieves the backdrop color from the soft mask's COSDictionary object. @return The backdrop color as a COSArray or null if not found.
932 Determines the window behavior for opening content. @return OpenMode indicating new or same window, defaults to user preference if not specified.
933 Retrieves and returns the 'T' item from the action dictionary. @return COSBase object (Dictionary, String, or Array) representing 'T'; null if not found
934 Determines the open mode for a new window from the PDF action's dictionary object. @return The open mode: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE
935 Determines the open mode for a new window in PDF document navigation. @return OpenMode enum indicating how to open the content (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
936 Retrieves a named destination from the dictionary using key 'P'. @return PDNamedDestination if found; otherwise, returns null.
937 Retrieves and returns the contents of the signature. @return The bytes representing the content; empty if not found or invalid type.
938 Retrieves the XML Forms Architecture (XFA) resource from the form's dictionary. @return PDXFAResource object if available; otherwise, null
939 Retrieves an inheritable attribute by key, checking parent and form if not found in field dictionary. @param key the name of the attribute to retrieve @return COSBase object or null if not found in hierarchy
940 Retrieves the value of this non-terminal field from its dictionary object. @return the COSBase object representing the field's value, or null if not found
941 Retrieves the value of this non-terminal field as a string. @return the field's value if it exists; otherwise, an empty string
942 Retrieves the default value of this non-terminal field from its dictionary object. @return the default COSBase value or null if not found
943 Safely closes visual signature and PDF source resources, handling exceptions. @throws IOException if an I/O error occurs while closing resources
944 Clones a COSBase object for use in a new document while avoiding self-references. @param base the original COSBase object to be cloned @return the cloned COSBase object or the original if already processed or not cloneable
945 Writes a COSObject to the PDF document and adds an XRef entry. @param key unique object identifier @param obj the COSBase object to be written @throws IOException if I/O errors occur during writing
946 Retrieves the unique key for a given COSBase object from its pool. @param object The input COSBase object @return Corresponding COSObjectKey or null if not found
947 Checks if the pool contains a specific COSBase object or its key. @param object The COSBase object to be checked @return true if the object is in the pool, false otherwise
948 Creates and prepares a list of COSWriterObjectStream instances for efficient PDF content management.
949 Retrieves or creates a unique object key for a given number and generation. Utilizes a cache to improve performance with large PDF documents. @param num The unique object number @param gen The object's generation value @return A COSObjectKey instance representing the object
950 Identifies and records offsets of COS objects in the PDF stream, facilitating accurate navigation and retrieval.
951 Searches for object stream offsets in a PDF document and maps them to their COSObjectKeys. @return Map of offset positions to corresponding COSObjectKeys, or empty map if none found
952 Parses cross-reference stream and updates XrefTrailerResolver with object references. @param resolver Object managing mapping of object keys to their corresponding values. @throws IOException if there's an issue reading from source or closing the parser.
953 Parses a cross-reference table and sets the XRef entries for valid objects. @param startByteOffset starting byte offset of the xref table @return true if parsing was successful, false otherwise @throws IOException if an I/O error occurs during parsing
954 Retrieves and manages unique keys for COSBase objects in PDF documents. @param obj the input COSBase object @return a corresponding or newly created COSObjectKey
955 Adds or updates an entry in the pool with a unique key and COSBase object. @param key The unique identifier for the object @param object The PDF document object to be managed @return Null if object is null or already exists with the same key, else the actual key used
956 Initializes a COSWriter with an output stream. @param outputStream the underlying output stream for writing PDF data
957 Updates the need to be updated state of the COS object. @param flag boolean value indicating if update is necessary
958 Updates document state to accepted. Calls internal update method with true parameter.
959 Retrieves a string from the array at given index or returns default value. @param index position of object in the array @param defaultValue fallback value if object is not a COSString @return String representation of COSString at index or defaultValue if unavailable
960 Retrieves and converts a named object to string. Supports COSName and COSString types. @param key unique identifier for the dictionary object @return String representation of the named object or null if not found/supported type
961 Retrieves a string from the dictionary using a given key. @param key unique identifier for the string object @return the string if it exists; otherwise, null
962 Converts specific COS types in a dictionary to standard Java objects and returns as a COSDictionaryMap. @param map the input COSDictionary object containing key-value pairs @return COSDictionaryMap with keys as strings and values as corresponding Java objects; null if input is null @throws IOException if an unsupported COS type is encountered during conversion
963 Retrieves and decodes the filename from the COSBase object. @return Decoded string representation of the filename
964 Retrieves and decodes the string representation of the FDF option at index 0. @return Decoded string value of the FDF option or null if not a COSString object
965 Retrieves and decodes default appearance string from FDF option. @return Decoded default appearance string or null if not found or invalid type
966 Retrieves the string representation of a named destination. @return String representation or null if not found (COSString/COSName)
967 Extracts string items from a COSBase object at a specified index in pairs. @param items COSBase object containing potential strings or arrays of strings @param pairIdx Index position to extract string from, if the item is an array @return List of extracted strings; empty list if no valid strings found
968 Retrieves export values from the button element, handling both string and array types. @return List of strings extracted from COSBase object or an empty list if not found
969 Retrieves and converts the value for a given key into a list of strings. @param name unique identifier for the dictionary object @return list of string values associated with the key, or an empty list if not found/applicable
970 Fetches the default appearance string for text fields in PDF forms. @return Default appearance string or null if not a COSString instance
971 Constructs a COSString object with given text using default encoding options. @param text the input string to be encoded
972 Initializes sign designer with visible signature image from input stream. @param imageStream the input stream containing the signature image @throws IOException if an I/O error occurs while reading the image stream
973 Sets the signature image from a file path. Closes input stream safely after usage. @param path String representing the file path of the signature image @return PDVisibleSignDesigner instance for method chaining
974 Constructs a transparency group with the given graphical data stream. @param stream The graphical data stream for this transparency group
975 Parses a COS dictionary from PDF source and returns the result as an object. @param isDirect indicates if the dictionary is direct or not @return parsed COSDictionary object, may be incomplete on error @throws IOException if I/O errors occur during parsing
976 Reads a string from PDF source, delimited by end-of-name characters. @return The read string or an empty string if no valid character is found. @throws IOException If an I/O error occurs during reading.
977 Reads and verifies an expected string from the PDF source, with an option to skip spaces. @param expectedString the sequence of characters to match @param skipSpaces whether to ignore whitespace before and after the string @throws IOException if the expected string is not found or in case of I/O errors
978 Reads a string from the PDF source up to specified length or terminator chars. @param length maximum number of characters to read @return the parsed string @throws IOException if an I/O error occurs while reading from the source
979 Reads and parses an integer from the PDF source, handling errors and rewinding on failure. @return parsed integer value or throws IOException if parsing fails @throws IOException if reading or parsing fails
980 Reads and parses a long number from the PDF source. @return Parsed long value or throws IOException if parsing fails. @throws IOException If reading or parsing the number encounters an error.
981 Searches and corrects the offset for a given XREF table/stream using brute force method. @param objectOffset target offset to search for @return corrected offset or 0 if not found, logs errors for invalid input or missing offset
982 Computes the user password for encryption based on provided parameters. @param password user-provided password @param owner owner password bytes @param permissions access permissions @param id document identifier @return encrypted user password as a byte array
983 Computes the owner password for encryption using RC4 key and user password. @param ownerPassword byte array representing the owner password @param userPassword byte array representing the user password @param encRevision encryption revision (3 or 4) @param length desired length of the resulting RC4 key @return byte array containing the computed and encrypted owner password
984 Rotates this matrix by the specified angle around the origin. @param theta Rotation angle in radians
985 Modifies the text position by translating the current text matrix. @param tx translation in the x-direction @param ty translation in the y-direction
986 Translates the matrix by a given vector's x and y coordinates.
987 Concatenates two matrices by multiplying them in reverse order (b*a). @param a first matrix @param b second matrix @return result of the multiplication as a new Matrix object
988 Constructs a PDDocument with specified COSDoc and no source. @param doc The COSDocument to associate with this PDDocument
989 Processes and adds a token to the current instruction sequence by converting CharSequence to String. @param text The input CharSequence to be processed as a token
990 Returns the current access permission for the document, initializing with owner permissions if not set. @return Current AccessPermission object; defaults to owner permissions if not previously set
991 Computes the revision number based on conditions of document version and permissions. @param version The PDF document version @return The computed revision number (REVISION_2, REVISION_3, REVISION_4, or REVISION_6)
992 Encrypts or decrypts data using AES algorithm with provided key and IV. @param finalKey encryption/decryption key @param data input stream of data to encrypt/decrypt @param output output stream for the result @param decrypt true if decryption, false if encryption
993 Encrypts or decrypts input data using AES-256 algorithm with CBC mode and PKCS5 padding. @param data InputStream containing the data to be encrypted/decrypted @param output OutputStream to write the result to @param decrypt True for decryption, false for encryption @throws IOException if an error occurs during encryption/decryption or I/O operations
994 Encrypts data using the RC4 algorithm and writes it to an output stream.
995 Writes encrypted bytes from input stream to output stream using RC4 algorithm. @param data InputStream containing plaintext data @param output OutputStream for writing encrypted data @throws IOException if reading or writing streams fails
996 Prepares a string for SASL protocol with unassigned Unicode characters allowed. @param str input string to be processed @return normalized and validated string suitable for SASL use
997 Prepares a stored string for SASL protocol. Disallows unassigned Unicode characters. @param str input string to be processed @return normalized and validated string suitable for SASL use
998 Retrieves or loads a FontBoxFont based on its format and postScriptName. Caches the font for future use to avoid reloading. @return FontBoxFont object or null if not found/loaded successfully
999 Saves font information to a disk cache for efficient retrieval. Handles IOException and SecurityException by logging warnings or debug messages.
1000 Sets a new FontProvider and updates the font info map based on it. @param fontProvider provides font information for mapping
1001 Initializes a ShadedTriangle object with points and colors, calculates area and degree. @param p Array of 3D points defining the triangle @param c Corresponding color values for each point
1002 Generates and writes a CID-to-Unicode mapping in PDF format to the provided output stream. @param out OutputStream where the mapping will be written @throws IOException if an I/O error occurs while writing to the output stream
1003 Loads a glyph list from resources and returns a new GlyphList object. @param filename name of the resource file to load @param numberOfEntries maximum number of entries in the resulting GlyphList @return a new GlyphList instance with data from the specified resource file
1004 Generates a map of Glyph IDs (GIDs) to character codes for the font. @return Map<Integer, Integer> where keys are GIDs and values are character codes @throws IOException if an error occurs while extracting font data
1005 Initializes PDICCBased with ICC profile data from a COSArray. @param iccArray contains ICC profile data; index 1 holds the color stream @throws IOException if there's an issue accessing the color stream
1006 Ends text clipping and applies it as a single area if rendering mode allows.
1007 Updates and applies the current graphics context's clipping paths. Uses both the current state's clip paths and initial clip if available.
1008 Returns a data stream for signing PDF. Throws exception if not prepared for signing. @return InputStream containing data to be signed or throws IllegalStateException @throws IOException if an I/O error occurs during the operation
1009 Merges a diacritic into this text position based on its X-coordinate. @param diacritic The TextPosition object representing the diacritic to be merged.
1010 Checks if this TextPosition overlaps significantly with another on the X and Y axes. @param tp2 The other TextPosition to compare with @return True if there's significant overlap, false otherwise
1011 Checks if the current text position completely contains another. @param tp2 The second TextPosition to check against @return True if current text position fully encloses tp2, false otherwise
1012 Manages paragraph separation by ending one and starting another. @throws IOException if an I/O error occurs during writing operations.
1013 Writes a COS name to the output stream with space separation.
1014 Writes a PDF structure name to output with space delimiter.
1015 Writes a byte array as ASCII or hexadecimal to an OutputStream. @param bytes the data to be written @param forceHex forces writing in hexadecimal format if true, otherwise checks for non-ASCII characters @param output the destination stream for the data
1016 Initializes PDFMarkedContentExtractor with operators to handle marked content sequences and points. @param encoding character set for text extraction from the PDF document
1017 Initializes PDFTextStripper with operators for handling marked content sequences.
1018 Retrieves a dictionary object using a given string key, handling caching and thread-safety for efficient access. @param key the input string for the dictionary object @return the dictionary object if it exists; otherwise, null
1019 Retrieves an item from the dictionary using a given string key. @param key the input string for the item's unique identifier @return the item if it exists; otherwise, null
1020 Checks if dictionary contains a given string key by converting it to COSName internally. @param name the input string key to check for @return true if the dictionary contains the converted key, false otherwise
1021 Fetches and returns a specific filter by name. @param filterName The unique identifier of the filter as a string @return The requested Filter object or throws IOException if not found
1022 Parses a COSName from the PDF source, handling special characters and hexadecimal escaping. @return COSName object representing the parsed name or null if an error occurs @throws IOException if there's an issue reading the source or decoding the buffer
1023 Constructs PDColor with COSArray and color space. Handles optional components and required pattern name. @param array Input array containing color components and possible pattern name @param colorSpace The associated color space for the color representation
1024 Retrieves a cached or creates a new COSInteger instance for the given value. @param val Long integer value to be represented @return A COSInteger object with the provided value
1025 Parses a hexadecimal string to a COSString object, handling whitespace and invalid characters. @param hex the input hexadecimal string @return a COSString object representing the parsed hexadecimal data @throws IOException if an error occurs during parsing or writing
1026 Initializes an instance of COSArrayList with empty COSArray and ArrayList.
1027 Constructs a COSArrayList with a given COSDictionary and COSName. Initializes the array and connects it to the provided dictionary and key. @param dictionary COSDictionary object for storage @param dictionaryKey COSName used as the key in the dictionary
1028 Constructs an empty PDPageDestination with default direct state.
1029 Initializes a PDRectangle with specified coordinates and dimensions. @param x X-coordinate of the rectangle's lower left corner @param y Y-coordinate of the rectangle's lower left corner @param width Width of the rectangle @param height Height of the rectangle
1030 Initializes PDRectangle with coordinates from a BoundingBox object. @param box Object containing the lower left and upper right coordinates.
1031 Creates a new COSStream and adds it to document's collection for closure. @return newly created COSStream object, added to internal collection.
1032 Constructs a new COSStream with null stream cache and default length 0.
1033 Initializes a COSStream with stream cache and read view. Sets the length based on the read view. @param streamCache caches streams for efficient data access in PDF documents @param randomAccessReadView provides a view of the underlying data stream
1034 Returns an unmodifiable version of this COSDictionary. @return a new UnmodifiableCOSDictionary instance
1035 Returns the last decoded result or a default if none exist. @return DecodeResult object, either last in results or a default one
1036 Retrieves and returns a PDResources object based on the COSDictionary. If not found, an empty or null PDResources object is returned as per PDF specification.
1037 Initializes an empty PDAttributeObject with a new COSDictionaryWrapper.
1038 Constructs a PDUserProperty with a given PDUserAttributeObject. @param userAttributeObject represents user attributes within the PDF document's structure.
1039 Initializes an empty PDOutlineNode with a new COSDictionaryWrapper instance.
1040 Initializes an empty PDF name tree node with a new COSDictionary.
1041 Initializes an empty PDF name tree node with a new COSDictionary.
1042 Initializes an empty PDF name tree node with a new COSDictionary.
1043 Constructs an empty PDF structure element name tree node with a new COSDictionary.
1044 Constructs a new PDNonTerminalField instance with specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field.
1045 Constructs a new PDTerminalField instance with a specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field
1046 Initializes PDLayoutAttributeObject with a COSDictionary. @param dictionary manages PDF metadata, crucial for layout attribute data representation.
1047 Initializes PDListAttributeObject with a COSDictionary. @param dictionary manages PDF metadata; crucial for list numbering configuration
1048 Initializes PDPrintFieldAttributeObject with a COSDictionary. @param dictionary manages PDF metadata for attribute data representation
1049 Initializes PDTableAttributeObject with a COSDictionary. @param dictionary Manages PDF metadata, crucial for table attribute representation.
1050 Constructs an appearance stream from a given COSStream. @param stream the COSStream to be managed by this PDAppearanceStream instance
1051 Initializes a PDTransparencyGroup with given COSStream and ResourceCache. @param stream the underlying transparency group data @param cache manages shared resources for efficient handling
1052 Adds TrueType Collection fonts from a file and processes their headers. @param ttcFile the TrueType Collection file to add fonts from
1053 Adds and processes a TrueType font from the given headers and file. Extracts metadata and adds to fontInfoList; skips invalid or unsupported formats. @param fontHeaders Font headers containing information about the font @param file The font file to be processed @param hash Unique identifier for the font
1054 Adds a Type1 font to the system from a PFB (Printer Font Binary) file. @param pfbFile The PFB file containing the font data.
1055 Creates a PDDestination object from a COSBase representation. @param base the COSBase object containing destination data @return a PDDestination object or null if input is invalid @throws IOException for unknown destination types or errors in conversion
1056 Constructs a new checkbox with specified parameters for PDF form.
1057 Constructs a push button for PDF form with specified parameters. @param acroForm the parent AcroForm structure @param field COSDictionary representing the button @param parent the parent PDNonTerminalField (if any)
1058 Constructs a new radio button with specified parameters for PDF form.
1059 Constructs a new choice field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the choice field @param parent the parent PDNonTerminalField (if any)
1060 Constructs a new variable text field within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the terminal field @param parent the parent PDNonTerminalField (if any)
1061 Saves current graphics state by pushing a cloned copy onto stack. @return void; modifies the graphics stack
1062 Saves and resets the current graphics stack, returning a copy of the previous state. @return A deep copy of the previous graphics stack for later restoration.
1063 Initializes an empty PDF document with default memory stream cache and no encryption.
1064 Converts COSDictionary object to string representation, handling exceptions. @return String containing dictionary content or error message if exception occurs
1065 Intersects clipping path with a transformed rectangle. @param rectangle The rectangle to intersect the clip path with
1066 Transforms and returns the bounding box of an appearance stream. @param appearanceStream The PDAppearanceStream to transform and get bounds from @return A Rectangle2D representing the transformed bounding box
1067 Initializes graphics state with a page's clipping path for PDF rendering. @param page PDRectangle defining the initial clipping area.
1068 Retrieves left coordinate value from the array at index 2. @return Left coordinate or -1 if not found in the array
1069 Retrieves the left coordinate of the PDF page rectangle. @return left coordinate value or -1 if not found
1070 Retrieves the bottom coordinate of the rectangle. @return bottom coordinate or -1 if not found
1071 Retrieves the right coordinate of the rectangle. @return Right coordinate value or -1 if not found
1072 Retrieves the top coordinate of the rectangle. @return The top coordinate value, or -1 if not found
1073 Retrieves and returns the top integer value from the internal array. @return Top integer value or -1 if not found
1074 Retrieves the left coordinate from the destination array. @return left coordinate or -1 if not found
1075 Retrieves and returns the top value from the encapsulated array. @return The integer value at index 3, or -1 if not found.
1076 Checks if the page fits within its bounding box by comparing the type with "TYPE_BOUNDED". @return true if page fits, false otherwise
1077 Fits bounding box based on type comparison. @return true if type is bounded, false otherwise
1078 Determines if bounding box fitting is of type BOUNDED based on the name at index 1 in the array. @return true if the name at index 1 equals TYPE_BOUNDED, false otherwise
1079 Creates an output stream for writing unfiltered data to the COSStream. @return OutputStream for writing unfiltered data. @throws IOException If there's an error checking if closed or creating output streams.
1080 Creates an output stream with optional filter for writing data to COSStream. @param filter The filter to apply; if null, no filters are applied. @return OutputStream for writing filtered data. @throws IOException If there's an error creating the output stream.
1081 Creates a thumbnail image object from the given COS stream. @param cosStream the graphical data stream of the thumbnail @return a PDImageXObject representing the thumbnail image
1082 Retrieves mask image object from PDF document. Returns null if not found or color key mask is present. @return Mask image as PDImageXObject or null if not available
1083 Retrieves the soft mask image object from the PDF stream. @return PDImageXObject representing soft mask or null if not found.
1084 Writes an AffineTransform object to the output stream as a series of float operands. @param transform AffineTransform object to be written @throws IOException if an I/O error occurs during writing
1085 Initiates text mode for content stream, throwing exception if already in text mode or writing operator. @throws IOException If an I/O error occurs during operation.
1086 Ends text mode and writes END_TEXT operator to content stream. Throws exception if not in text mode.
1087 Sets text leading and writes to content stream. @param leading Text line spacing; @throws IOException
1088 Writes a new line in the text mode of content stream. Throws exception if not in text mode.
1089 Positions text cursor at a specific offset for a new line in text mode, throws exception if not in text mode. @param tx horizontal offset; @param ty vertical offset; @throws IOException if I/O error occurs during write operations
1090 Saves the current graphics state for later restoration. Throws an exception if called within text objects. @throws IOException if an I/O error occurs during operation
1091 Restores graphics state, handles text mode and pops color spaces. Throws exception if in text mode. Writes RESTORE operator.
1092 Sets the stroking color using RGB values and updates the color space stack. @param r red value (0.0 to 1.0) @param g green value (0.0 to 1.0) @param b blue value (0.0 to 1.0) @throws IOException if an error occurs while writing the color values
1093 Sets the stroking color using CMYK values and writes to content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1) @throws IOException if writing to stream fails
1094 Sets the stroking color for graphical elements using grayscale values. @param g grayscale value (0 to 1) @throws IOException if an I/O error occurs while writing
1095 Sets the non-stroking color using RGB values and writes to content stream. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs while writing
1096 Sets non-stroking color in CMYK format and writes to content stream. @param c cyan component [0, 1] @param m magenta component [0, 1] @param y yellow component [0, 1] @param k key (black) component [0, 1]
1097 Sets non-stroking color in a PDF document's content stream using grayscale. @param g float value within 0 to 1 representing the gray level @throws IOException if an I/O error occurs during writing operations
1098 Adds a rectangle to the PDF content stream with specified coordinates and dimensions, ensuring it's not used within a text block. Throws an exception if in text mode. @param x X-coordinate of rectangle's bottom left corner @param y Y-coordinate of rectangle's bottom left corner @param width Rectangle's width @param height Rectangle's height @throws IOException if an I/O error occurs while writing the rectangle data
1099 Draws a cubic Bezier curve using specified control points. Throws exception if used within text block. @param x1, y1 first control point coordinates; x3, y3 end point coordinates; x2, y2 second control point coordinates @throws IOException if an I/O error occurs during operation
1100 Draws a cubic Bezier curve with two control points, writing coordinates and operator to the content stream. @param x2 X-coordinate of first control point @param y2 Y-coordinate of first control point @param x3 X-coordinate of second control point @param y3 Y-coordinate of second control point @throws IOException if writing to the output stream fails
1101 Draws a cubic Bezier curve with replicated final point in PDF content stream. @param x1, y1 Coordinates of the first control point. @param x3, y3 Coordinates of the endpoint and second control point. @throws IOException If an I/O error occurs while writing. @throws IllegalStateException If called within a text block.
1102 Moves the graphics cursor to specified coordinates. Throws exception if used within a text block. @param x new horizontal coordinate @param y new vertical coordinate @throws IOException if an I/O error occurs while writing
1103 Draws a line to specified coordinates in PDF content stream, handling text mode restrictions. @param x destination X coordinate; throws exception if within text block @param y destination Y coordinate; throws exception if within text block @throws IOException if an I/O error occurs while writing
1104 Strokes the current path if not in text mode, throws exception otherwise. @throws IOException if an I/O error occurs
1105 Closes and strokes the current path in PDF document, throwing an exception if used within a text block. @throws IOException if an I/O error occurs during operation @throws IllegalStateException if called within a text block
1106 Fills shapes in content stream, throws exception if used within a text block. @throws IOException if an I/O error occurs while writing to the output stream
1107 Fills areas of the path using an even-odd rule and writes operator to content stream. Throws exception if used within a text block. @throws IOException if writing to content stream fails
1108 Fills and strokes the current path in PDF content stream. Throws exception if used within text mode. @throws IOException if an I/O error occurs while writing to the output stream
1109 Fills and strokes graphics path using even-odd rule, throws error if used within text block. @throws IOException if an I/O error occurs while writing to the content stream
1110 Closes and fills non-zero winding number paths, then strokes the path. Throws exception in text mode. @throws IOException if an I/O error occurs during writing operator
1111 Closes, fills and strokes even-odd path. Throws exception if within a text block. @throws IOException If an I/O error occurs during writing the operator.
1112 Closes the current path in content stream, or throws exception if within a text block. @throws IOException If an I/O error occurs during writing to the output stream.
1113 Clips the current graphics path using non-zero winding rule, throws error if within a text block. @throws IOException If an I/O error occurs while writing to content stream
1114 Applies the even-odd rule to current clipping path in PDF content stream. Throws exception if used within a text block. @throws IOException If an I/O error occurs while writing operator to stream.
1115 Sets the width of lines drawn by subsequent graphics operations.
1116 Sets the line join style in PDF content stream. @param lineJoinStyle an integer value (0-2) representing different types of line joins @throws IOException if there is a problem writing to the stream
1117 Sets the line cap style in PDF content stream. Throws exception if input is invalid. @param lineCapStyle an integer (0-2) representing different line cap styles @throws IOException if writing to content stream fails
1118 Sets the line dash pattern in a PDF content stream. @param pattern Array of float values representing dashes and gaps @param phase Shifts the start point of the pattern along the line @throws IOException if an I/O error occurs while writing to the output stream
1119 Sets the miter limit for line joins, throwing an exception if invalid. @param miterLimit new value; must be greater than 0 @throws IOException if writing to output stream fails
1120 Ends marked content section in PDF stream by writing END_MARKED_CONTENT operator. @throws IOException if writing to the stream fails
1121 Sets character spacing and writes it to the output stream. @param spacing float value for character spacing @throws IOException if an I/O error occurs while writing
1122 Sets word spacing and writes to output stream. @param spacing Word spacing value; throws an exception if not finite @throws IOException If there's an I/O error during writing
1123 Sets horizontal scaling for text rendering and writes to the content stream
1124 Sets the text rendering mode for content stream, writing operator and value to the stream. @param rm RenderingMode object representing the desired rendering mode @throws IOException if an I/O error occurs while writing to the stream
1125 Sets text rise value and writes it to content stream. @param rise Amount of text rise; affects vertical positioning of text @throws IOException If an I/O error occurs while writing
1126 Initializes a PDRectangle object from a COSArray, handling potential invalid values. @param array Input array containing rectangle coordinates (4 elements)
1127 Initializes the line dash pattern from a COSArray and adjusts the phase if necessary. @param array COSArray defining dash lengths @param phase Dash pattern phase, adjusted to be positive if initially negative
1128 Returns a string representation of the PDRange. @return A string in format "PDRange{minValue, maxValue}"
1129 Evaluates a type 4 PDF function with input values, applying range clipping and returning output values. @param input Array of float values to be processed by the function @return Array of float values resulting from the evaluation and range clipping @throws IOException if an I/O error occurs during execution
1130 Reads and constructs a patch from an input stream for mesh-based shading. @param input data source @param isFree flag indicating if the patch is free or implicitly defined @return constructed Patch object, or null upon EOFException @throws IOException for input/output errors
1131 Reads a vertex from an image stream with position and color values. @param input ImageInputStream to read data from @param maxSrcCoord maximum source coordinate value @param colRangeTab array of PDColor ranges for components @return Vertex object containing transformed point and color component values
1132 Retrieves the first color value from the collection. @return PDGamma object or null if not found or invalid type
1133 Retrieves the second color value in the collection. @return PDGamma object or null if not found or invalid index
1134 Retrieves the start color at index 2 from the collection of four colors. @return Start color as a PDGamma object or null if not found or not an instance of COSArray
1135 Retrieves the end color from the collection as a PDGamma object. @return End color (PDGamma) or null if not found or invalid index
1136 Retrieves and returns the blend mode from the dictionary object. @return BlendMode instance or NORMAL if not found in dictionary
1137 Creates a matrix from provided base object, ensuring it's valid for transformation. @param base potential COSArray or other object containing transformation values @return Matrix instance with transformation parameters or default if invalid input
1138 Updates the highest object number in document with that from an imported page. @param importedPage Page to import and extract object numbers from
1139 Retrieves a COS dictionary using two keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return COSDictionary object or null if both keys fail
1140 Retrieves a boolean value from the dictionary using two keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @param defaultValue fallback value if neither key is found @return boolean value or defaultValue if not found or invalid type
1141 Retrieves an integer value from the dictionary using given keys. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @param defaultValue fallback value if no valid number is found @return integer value or defaultValue if not a COSNumber
1142 Retrieves and converts image filter names from parameters. @return List of String filter names or an empty list if none found
1143 Fetches and returns the color space for PDF document shading. @return PDColorSpace object or null if not defined in dictionary @throws IOException if error occurs during creation of color space
1144 Checks if a dictionary represents a PDF catalog or contains FDF key. @param dictionary COSDictionary to be examined @return true if it's a PDF catalog or has an FDF key, false otherwise
1145 Checks if a COSDictionary is a page tree node in the PDF document. @param node the dictionary to check @return true if it's a page tree node, false otherwise
1146 Retrieves the cryptographic filter method from the dictionary. @return COSName object representing the crypt filter method.
1147 Retrieves the stream filter name from the document's dictionary. @return the stream filter name as a COSName; defaults to IDENTITY if not found
1148 Retrieves and returns the string filter name from the document's dictionary. @return The COSName object for the string filter; defaults to IDENTITY if not set.
1149 Decrypts a COS dictionary and handles potential signature content. @param dictionary the dictionary to decrypt @param objNum object number for decryption @param genNum generation number for decryption
1150 Converts a code into its equivalent Unicode representation using ToUnicode CMap. @param code The input character code to convert @return Unicode string or null if conversion is not possible
1151 Retrieves the subtype of this soft mask. Initializes it if not already set. @return The COSName representing the subtype or null if not found.
1152 Retrieves the relationship type of the target directory. @return COSName representing the relationship, or null if not found
1153 Fetches appearance state of annotation from its internal structure.
1154 Checks if the PDF document is encrypted. @return true if encrypted; false otherwise
1155 Retrieves the encryption dictionary from the PDF document's trailer. @return COSDictionary containing encryption settings or null if none exists
1156 Parses and validates the FDF document's trailer. Throws an exception if the root object is missing. @throws IOException if there's an issue retrieving or parsing the trailer, or if the root object is not found
1157 Retrieves the AcroForm from the document with optional fixup application. @param acroFormFixup Optional fixup to apply before retrieving the form. @return PDAcroForm object or null if not available.
1158 Retrieves and initializes the viewer preferences from a PDF document's catalog. @return PDViewerPreferences object or null if not found in the document.
1159 Retrieves the named objects dictionary for the PDF document. @return PDDocumentNameDictionary or null if not found
1160 Retrieves the named destination dictionary for a PDF document. @return PDDocumentNameDestinationDictionary if it exists; otherwise, null
1161 Retrieves marking information from the PDF document's catalog dictionary. @return PDMarkInfo object or null if not present in the document
1162 Retrieves the URI dictionary from the PDF document's root, if it exists. @return a PDURIDictionary object or null if not found in the document.
1163 Retrieves the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
1164 Retrieves optional content properties from the PDF document. @return PDOptionalContentProperties object if present; otherwise, null
1165 Retrieves the destination name tree node from document dictionary or catalog. @return Destination name tree node if available; otherwise, null
1166 Retrieves the embedded files name tree node from the document's name dictionary. @return PDEmbeddedFilesNameTreeNode if it exists; otherwise, null.
1167 Retrieves the JavaScript node from the name dictionary. @return PDJavascriptNameTreeNode if it exists; otherwise, null
1168 Retrieves the transition effect for the PDF page, if present. @return PDTransition object or null if not found
1169 Retrieves a COSObject from the resources dictionary using given kind and name. @param kind resource type identifier, such as Font or ColorSpace @param name unique identifier for the object within its resource type @return COSObject if found; otherwise, null
1170 Retrieves a specific resource object from the PDF document. @param kind type of resource (e.g., Font, ColorSpace) @param name unique identifier for the resource @return the COSBase object representing the resource or null if not found
1171 Retrieves names of a specific resource type from the PDF document. @param kind the resource type (e.g., COSName.FONT) @return Iterable of COSNames or an empty set if not found
1172 Retrieves the associated PDF page from the marked content reference. @return PDPage object or null if not found in the COSDictionary
1173 Fetches a PDPage from the COSDictionary using the PG key. @return PDPage object or null if not found in dictionary
1174 Fetches and returns a PDPage object from the PDF document's structure, if it exists. @return PDPage object or null if not found in the document structure
1175 Retrieves the ID tree structure node from COSDictionary. @return PDStructureElementNameTreeNode if ID tree exists; otherwise, null
1176 Retrieves the parent tree of this node from its COSDictionary. @return PDNumberTreeNode object or null if no parent tree exists
1177 Retrieves and processes a map of class names to their corresponding attribute objects or lists. @return Map containing class names as keys and PDAttributeObjects or Lists thereof as values
1178 Retrieves a crypt filter dictionary by name from the encryption settings. @param cryptFilterName unique identifier for the crypt filter @return PDCryptFilterDictionary or null if not found
1179 Retrieves border style properties from the annotation's dictionary. @return PDBorderStyleDictionary if it exists; otherwise, null
1180 Retrieves the border effect dictionary for annotation. @return PDBorderEffectDictionary or null if not present in COSDictionary
1181 Retrieves the PDF document's digital signature if present. @return PDSignature object or null if not found in FDF catalog.
1182 Retrieves the JavaScript object associated with this FDF document. @return FDFJavaScript object if present; otherwise, null
1183 Retrieves the appearance dictionary from the field's COSDictionary. @return PDAppearanceDictionary object or null if not found
1184 Retrieves the appearance stream reference for a form field. @return FDFNamedPageReference if it exists; otherwise, null
1185 Retrieves the icon fitting configuration for a form field. @return FDFIconFit object or null if not configured
1186 Retrieves and returns additional actions associated with the FDF field. @return PDAdditionalActions object if available; otherwise, null
1187 Retrieves detailed page information from the COSDictionary. @return FDFPageInfo object or null if no page information exists
1188 Retrieves a named page reference from the FDF template. @return FDFNamedPageReference if it exists; otherwise, null
1189 Retrieves and constructs CID system info from the font dictionary. @return PDCIDSystemInfo object if available; otherwise, null
1190 Retrieves and constructs the PANOSE object from PDF style dictionary. @return PDPanose object if available; otherwise, null.
1191 Fetches and initializes PDF document resources. @return PDResources object or null if not available
1192 Retrieves the character procedures dictionary for this font. @return COSDictionary object containing character procedures or null if not defined
1193 Retrieves and initializes the DeviceN process using a COSDictionary. @return PDDeviceNProcess object if dictionary exists; otherwise, null
1194 Retrieves and returns the rendering state for a given destination (PRINT, VIEW). @param destination the rendering destination (PRINT or VIEW) @return corresponding RenderState or null if not found
1195 Retrieves or initializes an extended graphics state for the PDF document. @return PDExtendedGraphicsState object if available; otherwise, null
1196 Retrieves and initializes PDF document resources for tiling patterns. @return PDResources object or null if not found in COSDictionary
1197 Retrieves the target directory for navigation within a PDF document. @return a PDTargetDirectory object if it exists; otherwise, null
1198 Retrieves and constructs windows-specific launch parameters from the action's dictionary. @return PDWindowsLaunchParams object if available; otherwise, null
1199 Retrieves the target directory from current dictionary or returns null if not found. @return PDTargetDirectory object if exists; otherwise, null.
1200 Retrieves the appearance attributes of an annotation as a PDAppearanceDictionary. @return PDAppearanceDictionary or null if not found in COSDictionary
1201 Retrieves a PDPage using the underlying COSDictionary object. @return PDPage if it exists; otherwise, null
1202 Retrieves the border effect dictionary from the annotation's COS object. @return PDBorderEffectDictionary or null if not found
1203 Retrieves and returns border style dictionary if available, else returns null. @return a PDBorderStyleDictionary object or null if not found
1204 Retrieves the previous URI action from a PDF document link annotation. @return PDActionURI object or null if not found
1205 Retrieves external data dictionary from the annotation's COS object. @return External data dictionary or null if not present.
1206 Retrieves and returns the border style dictionary, if available. Otherwise, it returns null. @return PDBorderStyleDictionary object or null if not found
1207 Retrieves the border effect dictionary for PDF annotation, if present. @return PDBorderEffectDictionary object or null if not found
1208 Retrieves the border effect dictionary if it exists; otherwise, returns null. @return a PDBorderEffectDictionary object or null if not found
1209 Retrieves appearance characteristics dictionary for annotation widgets. @return PDAppearanceCharacteristicsDictionary if it exists; otherwise, null
1210 Retrieves additional action definitions for the annotation. @return PDAnnotationAdditionalActions object or null if not defined
1211 Retrieves and returns the border style dictionary if it exists; otherwise, returns null. @return PDBorderStyleDictionary or null if not found
1212 Retrieves the normal appearance entry from the dictionary.
1213 Fetches the filter property from the PDF signature dictionary. @return PDPropBuildDataDict object or null if not found
1214 Retrieves the publication security data dictionary. @return PDPropBuildDataDict if found; otherwise, null
1215 Retrieves the application data dictionary from the source COSDictionary. @return PDPropBuildDataDict if it exists; otherwise, null
1216 Retrieves the MDP (Modification Dictionary Permissions) from the seed value. @return a PDSeedValueMDP object if found; otherwise, null
1217 Retrieves digital signature certificate from the PDF document. @return PDSeedValueCertificate object or null if not found in dictionary
1218 Retrieves the timestamp from the seed value's COSDictionary. @return PDSeedValueTimeStamp object if present; otherwise, null
1219 Retrieves a PDPropBuild object from the digital signature properties. @return PDPropBuild object if it exists; otherwise, null
1220 Retrieves the structure element from the PDF document. @return PDStructureElement if it exists; otherwise, null
1221 Checks if this outline node has child nodes. @return true if children exist; otherwise, false
1222 Fetches default resources from the PDF document. @return PDResources object or null if not found in dictionary
1223 Retrieves and encapsulates additional actions for the form field using a COSDictionary. @return PDFormFieldAdditionalActions object or null if not found in the dictionary
1224 Retrieves the signature's value from its underlying COS dictionary. @return a new PDSignature instance if found; otherwise, null.
1225 Retrieves the default signature value from a PDF document. @return PDSignature object if it exists; otherwise, null
1226 Retrieves the seed value from the signature field's dictionary. @return PDSeedValue object if it exists; otherwise, null
1227 Retrieves and encapsulates measure data within the viewport settings. @return PDMeasureDictionary or null if not found in COSObject.
1228 Retrieves document information for the current PDF thread. @return PDDocumentInformation object or null if not found
1229 Retrieves the first bead in the PDF document's thread. @return PDThreadBead object or null if not found
1230 Retrieves a PDThread object from the associated COSDictionary if available. @return PDThread object or null if no associated thread found
1231 Retrieves and returns the next bead in the thread sequence, if available.
1232 Returns the previous bead in a thread, or null if it doesn't exist. @return Previous PDThreadBead object or null if not found
1233 Retrieves the associated PDF page from a threaded content bead. @return PDPage if found; otherwise, null
1234 Retrieves the metadata from the PDF document as a PDMetadata object. @return PDMetadata if found; otherwise, null
1235 Retrieves and encapsulates the metadata stream for this PDF page. @return PDMetadata object if available; otherwise, null.
1236 Retrieves the differences stream from FDF document. @return COSStream object for differences; otherwise, null
1237 Retrieves the font file stream from PDF dictionary using a unique identifier. @return PDStream object if found; otherwise, null
1238 Retrieves the font file 2 from the PDF document's dictionary, if available. @return PDStream object for FONT_FILE2 or null if not found
1239 Retrieves and encapsulates the font file 3's data stream from PDF document. @return PDStream object if found; otherwise, null
1240 Retrieves the CID set stream from the PDF document. @return PDStream object for CID set or null if not found
1241 Retrieves the sound stream associated with the PDF action. @return COSStream object containing sound data; null if not found
1242 Retrieves the normal icon as a form XObject from the annotation's COSDictionary. @return PDFormXObject representing the icon or null if not found
1243 Fetches and returns rollover icon as a PDFormXObject or null if not found. @return PDFormXObject for rollover icon; otherwise, null
1244 Retrieves alternate icon for PDF annotation as a form XObject. @return PDFormXObject containing alternative icon or null if not found
1245 Retrieves document ID array from trailer dictionary. @return Document ID array or null if not found.
1246 Retrieves and returns a list of output intents from the document's root dictionary. @return List<PDOutputIntent> containing output intent information, or an empty list if none found.
1247 Fetches thread beads from the PDF page's dictionary or creates a new array if not found. @return List of PDThreadBead objects extracted from page dictionary or an empty list if none exist
1248 Retrieves and constructs PDViewportDictionary objects from the page's COSArray. @return List of PDViewportDictionary or null if not found in the page's COSArray.
1249 Retrieves and creates child nodes from a COSArray of dictionaries. @return List of created PDNameTreeNode objects or null if no children exist
1250 Retrieves and organizes names from a COSArray in the PDF document node. @return Map of names with their corresponding values; or null if not found @throws IOException if an unexpected object type is encountered in the array
1251 Retrieves and creates child nodes from the COSArray with key "KIDS". @return List of PDNumberTreeNode objects or null if no "KIDS" found.
1252 Extracts and converts numeric values from a COSArray into a Map. @return Map of integer keys to their corresponding COSObjectable values; null if error occurs @throws IOException if conversion fails or invalid data is encountered
1253 Retrieves the upper limit value from COSArray using LIMITS key, if available. @return Upper limit integer value or null if not found.
1254 Retrieves the lower limit value from a COSArray in the PDNumberTreeNode's node. @return Integer representing the lower limit or null if not found
1255 Fetches and stores range values from COS object.
1256 Retrieves the domain values for this PDFunction instance, or creates and stores them if not already defined. @return COSArray containing domain values
1257 Retrieves the size array from the COS object, or returns a cached value if available. @return The COSArray representing the size of the PDF function type 0 data
1258 Retrieves decoded values or defaults to range values if not present. @return COSArray of decoded values or range values as fallback
1259 Retrieves the array of functions defined in the PDF document. @return COSArray containing function definitions or null if not found
1260 Retrieves and initializes the bounds array from COS object if not already available. @return The bounds array, or null if it doesn't exist in the COS object.
1261 Retrieves the encoded COSArray for function evaluation. Initializes and returns 'encode' if not already set, using getCOSObject().getCOSArray(COSName.ENCODE). @return The encoded COSArray used in function evaluation
1262 Retrieves and constructs owner user properties from COSArray P. @return List of PDUserProperty objects extracted from COSArray P
1263 Checks if an edge is attached to the marked content artifact. @param edge The edge identifier to check for attachment @return True if edge is found in the attached list, otherwise False
1264 Retrieves the color of an annotation from a PDF document. @return Color object if found; otherwise, returns null.
1265 Retrieves the interior color from annotation's COSArray. @return Interior color as a Color object or null if not found/invalid
1266 Retrieves and converts the callout coordinates for a PDF annotation. @return Float array of callout coordinates, or null if not set.
1267 Retrieves and converts ink list from annotations to float arrays. @return List of float arrays representing ink data, or null if not found
1268 Retrieves line coordinates from the PDF annotation as a float array. @return Float array of line coordinates, or null if not found
1269 Retrieves the ending style of start point for line annotation. @return Name of ending style or "None" if not found/applicable
1270 Retrieves the ending style of line annotation's endpoint. @return Ending style name or "None" if not defined
1271 Retrieves the interior color from an annotation's COSArray. @return Interior color as a Color object or null if not found.
1272 Retrieves the horizontal offset for line caption. @return Horizontal offset as float; defaults to 0 if not found
1273 Fetches the vertical offset for line caption from PDF annotation data. @return Vertical offset as a float; defaults to 0 if not found.
1274 Retrieves the vertex coordinates of the polygon annotation. @return Float array of vertex coordinates; returns null if not defined
1275 Retrieves the interior color of the polygon annotation. @return Interior color as a Color object; null if not defined or invalid.
1276 Retrieves and converts the vertex coordinates of a polyline annotation to float array. @return Float array representation of COSArray elements or null if not found.
1277 Retrieves the starting point ending style of line annotation. @return Name of COSName object or "None" if not found/applicable
1278 Fetches the endpoint ending style of a polyline annotation. @return Endpoint ending style name or "None" if not found
1279 Retrieves the interior color from annotation data. @return Interior color as a Color object or null if not found
1280 Retrieves the interior color of the annotation as a Color object. @return Interior color or null if not defined in the annotation
1281 Retrieves and converts the quad points of an annotation to float array. @return Float array representation of quad points or null if not found
1282 Retrieves the unique identifier of the FDF document as a COSArray. @return COSArray containing the document ID; returns null if not found
1283 Retrieves and encapsulates all form fields from the FDF document. @return List of FDFField objects or null if no fields are present
1284 Retrieves and constructs a list of FDFPages from the document's PAGES array. @return List of FDFPage objects or null if no PAGES array is present
1285 Retrieves child fields (kids) from the current FDFField object. @return List of child FDFField objects or null if not found
1286 Retrieves and processes optional field values from the FDF document. @return List of Objects (Strings or FDFOptionElements) or null if not present
1287 Retrieves and returns a list of templates from the page's data. @return List<FDFTemplate> if templates exist; otherwise, returns null.
1288 Retrieves all form fields from the FDF template's dictionary. @return List of FDFField objects or null if no fields exist
1289 Retrieves and caches the widths of characters in the font. @return List<Float> containing character widths or an empty list if not found
1290 Retrieves the transformation matrix from the color dictionary. @return Float array representing the matrix; defaults to identity if not found
1291 Retrieves and returns a list of component names from the COSArray associated with COMPONENTS key.
1292 Fetches the background array from shading dictionary.
1293 Retrieves the shading domain array from the COS object. @return The COSArray representing the shading domain, or null if not found
1294 Retrieves and caches the EXTEND array from the COS object, if not already cached. @return the EXTEND COSArray or null if not found
1295 Retrieves the domain of shading properties as a COSArray. Lazily initializes from document if not already set. @return The domain as a COSArray, or null if not found in the document.
1296 Retrieves the coordinates array from the COS object. Initializes and caches if not already present. @return The COSArray of coordinates or null if not found in the COS object
1297 Retrieves the decode values array from the COS object. @return COSArray containing decode values; may be null if not found or initialized
1298 Retrieves and constructs a PDFontSetting object using the FONT key in the COSDictionary. @return PDFontSetting if FONT exists; otherwise, returns null
1299 Retrieves form fields from PDF document using unique identifier. @return COSArray of form fields; otherwise, returns null if not found
1300 Retrieves form fields from the PDF document. @return COSArray of form field objects; may be null if none exist
1301 Retrieves and converts rectangle difference values from a COSArray. @return Float array of rectangle differences, or empty if not found.
1302 Retrieves rectangle differences from the annotation's COS object. @return Float array of rectangle differences; empty if not found
1303 Retrieves the callout coordinates for a free text annotation. @return Float array of callout coordinates; returns null if not found
1304 Retrieves and converts the list of ink annotations to a 2D float array. @return A 2D float array representing ink annotation data or empty arrays if not found.
1305 Retrieves line coordinates from the COSArray object using key "L". @return Float array of line coordinates or null if not found
1306 Retrieves the ending style of the line's start point. Uses COSArray to get and validate end point style. @return Ending style name or default if not found/applicable
1307 Retrieves the endpoint ending style from a COSArray. @return Endpoint style name or default if not found/applicable
1308 Retrieves the horizontal offset for annotation caption. @return Horizontal offset as float; defaults to 0 if not found
1309 Retrieves the vertical offset for a line annotation's caption. @return Vertical offset as float; defaults to 0 if not found
1310 Retrieves quad points from the link annotation's COS object. @return Float array of quad points or null if not found
1311 Retrieves the vertices of a polygon annotation as a float array. @return Float array of vertex coordinates or null if not found.
1312 Retrieves and parses the polygon's vertices from COSArray. @return Float array of vertices or null if not found.
1313 Retrieves the starting point ending style from COSArray. @return Name of ending style or default if not found/applicable.
1314 Retrieves the endpoint ending style from COSArray using LE key. @return Endpoint style name or default if not found/applicable
1315 Retrieves the vertex coordinates of a polyline annotation. @return Float array of vertex coordinates; returns null if not found
1316 Retrieves rectangle differences as a float array. @return Float array of rectangle differences or empty if not found
1317 Retrieves and converts quad points for text markup annotation. @return Float array of quad points or null if not available
1318 Retrieves and converts sub-filter names from the PDF document's dictionary. @return List of sub-filter names; empty if not found or no sub-filters exist.
1319 Retrieves the digest methods used in the PDF signature. @return List of String names representing digest methods; empty if none found
1320 Retrieves and converts the reasons from COSArray to a list of strings. @return List of String reasons; an empty list if not found
1321 Retrieves legal attestation names from the PDF dictionary. @return List of String legal attestation names; empty if not found
1322 Extracts subject byte arrays from the certificate's dictionary data. @return List of byte arrays representing subjects; returns null if not found
1323 Retrieves and returns the list of key usage extensions from a COSDictionary. @return List of key usage strings or null if not found in the dictionary
1324 Retrieves the issuer's byte arrays from the certificate data. @return List of byte arrays representing the issuer, or null if not found
1325 Retrieves the Object Identifier (OID) from the certificate data. @return List of byte arrays representing OIDs; returns null if not found
1326 Retrieves the byte range from a COSArray within the PDF dictionary. @return int array of byte ranges or empty if not found
1327 Retrieves the calculation order of form fields from the PDF document. @return List of PDField objects in their calculated order, or an empty list if none found
1328 Retrieves the indexes of selected options from a COSArray object. @return List<Integer> with indexes; empty if no selection or error occurs
1329 Retrieves an array of number format dictionaries for change in X. @return Array of PDNumberFormatDictionary objects or null if not found
1330 Retrieves an array of PDNumberFormatDictionaries for Y coordinates. @return Array of PDNumberFormatDictionaries or null if not found
1331 Retrieves an array of number format dictionaries representing distances. @return Array of PDNumberFormatDictionary objects or null if not found
1332 Retrieves an array of PDNumberFormatDictionaries representing areas. @return Array of PDNumberFormatDictionaries for areas or null if not found.
1333 Retrieves an array of PDNumberFormatDictionaries representing angles. @return Array of PDNumberFormatDictionaries for angle formatting; or null if not found
1334 Retrieves an array of line slope format dictionaries from the COS object. @return Array of PDNumberFormatDictionary objects or null if not found
1335 Retrieves the origin coordinates of the measurement system. @return Float array representing origin coordinates; returns null if not found
1336 Retrieves the visibility policy from the PDF document dictionary. @return COSName object representing the visibility policy or ANY_ON by default.
1337 Retrieves a long value from dictionary using given string key. @param key unique identifier for the value as a string @return the long value or -1 if the key is not found/valid
1338 Retrieves a long value from dictionary using key. Defaults to -1 if not found or not a COSNumber. @param key unique identifier for the value @return long value or default -1 if key is not a COSNumber
1339 Retrieves a long value from dictionary using given string key or returns default if not found. @param key string identifier for the value @param defaultValue fallback value if key is not found or not a COSNumber @return the long value or defaultValue if the key is not a COSNumber
1340 Sets the start xref value and resolves cross-reference trailers. @param startxrefBytePosValue The byte position of the starting XRef object
1341 Retrieves a float value from dictionary by string key, with fallback. @param key unique identifier for the float value as a string @return float value associated with key, or -1 if not found/invalid
1342 Retrieves a float value from dictionary using a key. Falls back to default value (-1) if key is not found or value is invalid. @param key unique identifier for the float value @return float value associated with key, or -1 if not found/invalid
1343 Retrieves or creates a COSName instance and uses it to fetch a float value from the dictionary. @param key input string for the COSName @param defaultValue fallback value if key is invalid or non-numeric @return float value associated with key, or defaultValue if not found/invalid
1344 Retrieves the user unit value for the PDF page. Uses a default of 1.0f if not found or invalid. @return User unit value for the PDF page, defaults to 1.0f if invalid.
1345 Retrieves the width of the guideline from the COSDictionary. Defaults to 1 if not found.
1346 Retrieves the opacity level of the annotation using COSName.CA (constant key). Defaults to full opacity (1.0) if no value is found or it's invalid. @return float representing the opacity level, ranging from 0.0 (invisible) to 1.0 (fully visible)
1347 Returns the weight of the font. Uses a default value of 0 if not found. @return float representing the font weight, or 0 if not specified
1348 Retrieves the italic angle of the font from the descriptor dictionary. @return italic angle in degrees or 0 if not specified
1349 Retrieves font ascent value from the dictionary. @return Font ascent value, or 0 if not found/invalid.
1350 Retrieves the descent value of the font descriptor. @return The descent value as a float, defaults to 0 if not found/invalid.
1351 Retrieves the leading value of the font descriptor, defaulting to 0 if not found. @return float value representing the leading attribute of the font descriptor
1352 Retrieves the Cap Height value from the font descriptor dictionary. Handles negative values by returning their absolute value. @return Cap Height value in the PDF document's font descriptor
1353 Retrieves and ensures a positive X-height value from the font descriptor dictionary. @return The X-height value of the font, converting to absolute if negative (as per PDFBOX-429)
1354 Retrieves the stem vertical width from font descriptor dictionary. @return stem vertical width as a float value (default: 0 if not found)
1355 Retrieves the horizontal stem width from font descriptor dictionary. @return Horizontal stem width as a float; defaults to 0 if not found/invalid
1356 Retrieves the average width of the font descriptor. @return average width as a float value, or 0 if not found/invalid
1357 Retrieves the maximum width of the font from its descriptor dictionary. @return Maximum width value or default of 0 if not found/invalid
1358 Retrieves the missing width value from the font descriptor dictionary. @return the missing width value or default (0) if not found/invalid
1359 Retrieves gamma value from PDF color dictionary. Defaults to 1.0 if not found. @return float representing the gamma value in CALGRAY color space
1360 Retrieves the X step value of the tiling pattern. @return float value representing the X step, or 0 if not found/invalid
1361 Returns the Y step value of the tiling pattern. Uses a default value of 0 if not found or invalid. @return float representing Y step distance in pattern
1362 Retrieves the sound volume level for this PDF action. @return float value representing volume (-1 to 1), default is 1 if invalid.
1363 Retrieves the leader line length of the annotation using a key. Defaults to 0 if key is not found or value is not a number. @return float value representing the leader line length
1364 Retrieves the leader line extension length of the annotation. @return float value representing the leader line extension length
1365 Returns leader line offset length from PDF document. @return Float value of leader line offset length; defaults to 0 if not found
1366 Retrieves the constant opacity of the annotation markup. @return Constant opacity value (default is 1 if not set)
1367 Retrieves the width of border style from COSDictionary object. Handles Adobe behavior for COSName instances. @return float value representing border width; defaults to 1 if not found or invalid
1368 Retrieves the duration of the page transition in seconds. @return float value representing duration; defaults to 1 if not found/invalid
1369 Retrieves the fly scale value for page transitions. @return float value representing the fly scale, or 1 if not set
1370 Extracts text from specific regions of a PDF page and stores it for reuse. @param page the PDPage object representing the PDF page to extract from @throws IOException if an I/O error occurs during extraction
1371 Fetches color space for transparency group. @return PDColorSpace object or null if not found in resources @throws IOException if an error occurs during retrieval
1372 Creates and returns an appropriate property list based on the dictionary type. @param dict COSDictionary object for PDF property list representation @return PDPropertyList instance of specific subtype or default if type is unknown
1373 Retrieves the line width property from the PDF document's extended graphics state. @return float value representing the line width or null if not found
1374 Retrieves the miter limit value from the extended graphics state dictionary. @return float value representing the miter limit or null if not found
1375 Retrieves the flatness tolerance value from the extended graphics state dictionary. @return float value representing the flatness tolerance or null if not found/invalid type
1376 Retrieves smoothness tolerance value from graphics state dictionary. @return float value representing smoothness tolerance or null if not found
1377 Retrieves the stroking alpha constant from the extended graphics state dictionary. @return float value representing the stroking alpha constant or null if not found.
1378 Retrieves the non-stroking alpha constant from the PDF dictionary. @return float value representing the non-stroking alpha constant, or null if not found or invalid.
1379 Fetches and returns offsets of COS objects in the PDF stream. Triggers search if not already done. @return Map of COS object keys to their corresponding offsets @throws IOException if an I/O error occurs during search operation
1380 Writes a COSBase object to PDF and updates object references. @param obj the COSBase object to be written @throws IOException if I/O errors occur during writing
1381 Writes object reference to the standard output stream. @param obj COSBase object for which reference is written.
1382 Saves FDFDocument to an OutputStream using a COSWriter, managing encryption and updates. @param output the OutputStream for saving the document @throws IOException if there is an error during writing operation
1383 Clears all elements and updates document state.
1384 Removes an element at a given index and updates the array's state. @param i Index of the object to be removed @return The removed COSBase object or null if not found
1385 Removes an element and updates state if successful. @param o element to be removed. @return true if removal was successful, else false.
1386 Clears all data and updates document state to accepted. @throws UnsupportedOperationException if clearing is not supported by the underlying implementation
1387 Removes an item and updates document state. @param key Unique identifier of the item to be removed
1388 Updates document state if origin differs from the current state, ensuring consistency. @param updateState Represents new state of the document for comparison and potential update.
1389 Sets the object to a NULL state and updates its status accordingly.
1390 Sets the origin document state and updates related COSUpdateInfo objects. @param originDocumentState the new document state to set; null is not allowed @param dereferencing indicates if dereferencing is in progress; affects update behavior
1391 Retrieves a string from array at given index. @param index position of object in the array @return String representation or null if unavailable
1392 Retrieves and converts dictionary value to string using a PDF name as the key. @param key input string for the COSName used as the dictionary key @return String representation of the dictionary value or null if not found/supported type
1393 Retrieves and converts a named object to string with fallback. @param key unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
1394 Validates if the provided offset points to a valid XRef stream in PDF document. @param startXRefOffset long representation of the offset to check @return true if it's a valid XRef stream, false otherwise @throws IOException if an error occurs during reading or validation
1395 Retrieves and converts the document's page mode to an enum value. @return Corresponding PageMode or USE_NONE if not found/invalid.
1396 Fetches and interprets the page layout of a PDF document. @return PageLayout enum or defaults to SINGLE_PAGE if invalid/missing.
1397 Retrieves and returns the version of the PDF document as a string. @return String representation of the PDF version or null if not found/supported type
1398 Retrieves and returns the trapped attribute of the PDF document as a string. @return Trapped attribute value or null if not found/supported type
1399 Retrieves and returns the page labeling style as a string. @return Page labeling style or null if not found/supported type
1400 Retrieves and returns the type of the encapsulated PDF object as a string. @return Type name of the PDF object or null if not found/supported type
1401 Retrieves the owner of the PDF attribute as a string. @return String representation of the owner or null if not found/supported type
1402 Retrieves and returns the structure type of the PDF element as a string. @return Structure type or null if not found/supported type
1403 Creates and returns the appropriate structure node based on its type. @param node COS dictionary representing the PDF structure element or tree root @return PDStructureNode instance of either PDStructureElement or PDStructureTreeRoot
1404 Retrieves and returns the type of this structure node as a string. @return String representation of the node's type or null if not found/supported type
1405 Retrieves and converts user property name to string. @return User property name as a string or null if not found/supported type
1406 Retrieves and returns the language property of marked content as a string. @return Language property or null if properties dictionary is missing or language not found
1407 Retrieves and returns the type of marked content artifact as a string.
1408 Retrieves and returns the subtype of the marked content artifact as a string. @return Subtype of the marked content artifact or null if not found/supported type
1409 Retrieves and returns the filter name as a string from the document's encryption dictionary. @return Filter name or null if not found/supported type
1410 Retrieves and returns the sub filter of PDF document encryption settings. @return The sub filter name as a string or null if not found/supported type
1411 Creates a FDFAnnotation instance based on the subtype of the given COSDictionary. @param fdfDic dictionary containing annotation data for PDFBox library @return FDFAnnotation object corresponding to the subtype or null if unsupported/unrecognized type
1412 Retrieves the intent of the PDF annotation as a string. @return String representation of the annotation's intent or null if not found/supported type
1413 Retrieves and returns the line ending style of the annotation as a string. @return Line ending style or null if not found/supported type
1414 Retrieves and returns the version of the FDF document as a string. @return The version string or null if not found/supported type
1415 Retrieves the FDF document's encoding, defaults to "PDFDocEncoding" if not found. @return String representation of the FDF document's encoding
1416 Retrieves the scale option for icon fitting in FDF format. @return String representing the scale option, defaults to "Always" if not found.
1417 Retrieves and returns the scale type name from the fit object. If not found, defaults to proportional scaling. @return String representing the scale type or default if not set
1418 Retrieves and returns the base font name as a string from the CID font dictionary. @return Base font name or null if not found/supported type
1419 Retrieves and returns the type of this PDF font as a string. @return Font type as a string or null if not found/supported type
1420 Retrieves and returns the subtype of the PDF font as a string. @return Subtype name or null if not found/supported type
1421 Retrieves and returns the font name from the PDF document's descriptor. @return Font name as a string or null if not found/supported type
1422 Retrieves and returns the font stretch attribute as a string. @return Font stretch value or null if not found/supported type
1423 Retrieves and returns the base font name from the font dictionary. @return Base font name as a string or null if not found/supported type
1424 Retrieves and returns the base font name as a string from the dictionary object.
1425 Retrieves and returns the base font name as a string from the dictionary. @return The base font name or null if not found/supported type
1426 Retrieves and returns the base font name as a string. @return Base font name or null if not found/supported type
1427 Checks if the color space subtype is "NChannel". @return true if subtype equals "NChannel", false otherwise
1428 Retrieves and returns the type of PDF action as a string. @return String representation of the action's type or null if not found/supported type
1429 Retrieves and returns the subtype of the PDF document action as a string. @return Subtype of the action or null if not found/supported type
1430 Creates a PDF action from a COSDictionary. @param action dictionary containing action details @return PDAction object corresponding to the action type or null if invalid/unsupported
1431 Retrieves and returns the annotation subtype as a string. @return Subtype of the annotation, or null if not found/supported type
1432 Retrieves and returns the caption positioning of the line annotation as a string. @return String representation of the caption positioning or null if not found/supported type
1433 Retrieves and returns the intent of the annotation as a string. @return The name of the intent or null if not found/supported type
1434 Retrieves the subtype attribute from external data dictionary. @return Subtype attribute as a string or null if not found/supported type
1435 Retrieves and returns the name from the PDF signature dictionary
1436 Retrieves and returns the filter name as a string from the PDF signature dictionary. @return Filter name as a string or null if not found/supported type
1437 Retrieves and returns the URL type from the certificate's dictionary. @return String representation of the URL type or null if not found/supported type
1438 Retrieves and returns the filter name as a string from the PDF signature dictionary. @return The name of the filter used in the digital signature or null if not found/supported type.
1439 Retrieves and returns the subfilter name from the signature's dictionary. @return String representation of the subfilter or null if not found/supported type
1440 Retrieves and returns the field type as a string from this PDF non-terminal form field. @return String representation of the field type or null if not found/supported type
1441 Fetches and returns the name of the viewport settings as a string. @return Name of the viewport settings or null if not found/supported type
1442 Retrieves and returns the duplex setting as a string. @return Duplex setting name or null if not found/supported type
1443 Fetches a string from dictionary using given key. Utilizes caching and thread-safety for efficiency. @param key unique identifier for the string object @return the string if it exists; otherwise, null
1444 Retrieves a string from the dictionary using a given key. If the key is not found, returns a default value. @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
1445 Retrieves and returns the language of the PDF document. @return The language string if it exists; otherwise, null
1446 Retrieves the title of the PDF document. @return The document's title as a string, or null if not found.
1447 Retrieves the author's name from the PDF document metadata. @return The author's name as a string, or null if not found.
1448 Retrieves the subject metadata of the PDF document. @return The subject string if it exists; otherwise, null
1449 Retrieves and returns document keywords from metadata. @return document keywords as a string, or null if not found
1450 Retrieves the creator of the PDF document.
1451 Retrieves the producer information of the PDF document. @return a string representing the document's producer, or null if not found
1452 Retrieves the page label prefix from the PDF document. @return The page label prefix, or null if not set
1453 Retrieves the Unicode string representation of the file specification. @return the Unicode string if it exists; otherwise, null
1454 Retrieves the file name from the complex file specification. @return the file name as a string; null if not found or not set
1455 Retrieves DOS file system representation from the complex file specification. @return string representing DOS file system; null if not found
1456 Retrieves and returns the MAC (Machine Address Code) of the file specification. @return MAC as a string; null if not found
1457 Retrieves the Unix file specification string from the PDF dictionary. @return the Unix file specification if it exists; otherwise, null
1458 Retrieves the description of the file from the complex specification. @return The file description as a string or null if not found
1459 Retrieves the unique identifier of the PDF structure element. @return string representing the element's ID or null if not found
1460 Retrieves the title of the PDF structure element using COSName.T as key. @return The title string if it exists; otherwise, null.
1461 Retrieves the language of the PDF document structure element. @return the language as a string; otherwise, null if not found
1462 Retrieves an alternate description from the PDF element's COS object.
1463 Retrieves the expanded form of the PDF structure element. @return expanded form string if it exists; otherwise, null
1464 Retrieves actual text from the COS object using a predefined key. @return the actual text string if it exists; otherwise, null
1465 Retrieves and returns the formatted value from the COS object's dictionary using a predefined key. @return the formatted string value or null if not found
1466 Retrieves the actual text property from marked content properties. @return actual text if available; otherwise, null
1467 Retrieves the alternate description from PDF properties. @return String representing the alternate description or null if not found
1468 Retrieves the expanded form of marked content from properties dictionary. @return Expanded form string or null if not available
1469 Fetches and returns the modification date of the PDF annotation. @return mod date string or null if not found
1470 Retrieves the name of this PDF annotation using a unique identifier. @return the name if it exists; otherwise, null
1471 Retrieves and returns the contents of the PDF annotation
1472 Retrieves the title of the PDF annotation. @return Title string or null if not found
1473 Retrieves the subject of the PDF annotation.
1474 Retrieves the symbol used in the caret annotation from the PDF document. @return the symbol string or null if not found
1475 Retrieves and returns the rotation value of the free text annotation. @return rotation value as a string or null if not found
1476 Retrieves the default appearance string of the free text annotation. @return The default appearance string or null if not defined.
1477 Retrieves the default style of the free text annotation from the COSDictionary. @return the default style string or null if not found in the dictionary
1478 Retrieves the caption style of the line annotation from PDFBox's FDF dictionary. @return the caption style as a string; otherwise, null if not found
1479 Retrieves the state of the text annotation from its dictionary. @return the current state as a string, or null if not found
1480 Retrieves and returns the state model of this text annotation. @return a string representing the state model or null if not found
1481 Retrieves the status from the FDF document. @return the status string, or null if not found
1482 Retrieves the target string from the FDF document. @return The target string or null if not found
1483 Retrieves partial field name using key COSName.T. @return partial field name as a string or null if not found
1484 Retrieves the name of the referenced page from the FDF context. @return the page name as a string or null if it's not found
1485 Retrieves the font family name from the PDF descriptor. @return the font family name as a string, or null if not found
1486 Retrieves and returns the character set of the PDF font descriptor. @return the character set as a string, or null if not found
1487 Retrieves and returns the name of the OCG (Optional Content Group) from its dictionary. @return the name of the OCG as a string or null if it doesn't exist
1488 Retrieves the names of all optional content groups (OCGs) in the document. @return array of group names or empty if none exist
1489 Retrieves the file specification string from the PDF launch action. @return the file specification string or null if not found
1490 Retrieves the destination string from the PDF action. @return the destination string or null if not found
1491 Retrieves the operating system specific launch parameter from the action dictionary. @return the OS-specific launch parameter string or null if it doesn't exist
1492 Retrieves the 'P' parameter string from the PDF document action dictionary. @return The 'P' parameter string or null if not found
1493 Retrieves the URI from the COSDictionary of the action object. @return The URI as a string if present and valid; otherwise, null
1494 Retrieves the filename from the target directory's dictionary
1495 Retrieves the name of the annotation from the PDF dictionary. @return the annotation name as a string, or null if not found
1496 Retrieves the filename from launch parameters. @return the filename as a string or null if not found
1497 Retrieves the directory from the launch parameters. @return the directory string if it exists; otherwise, null
1498 Retrieves the execute parameter from the launch parameters dictionary. @return the execute parameter string if it exists; otherwise, null
1499 Retrieves the contents of the annotation from the COSDictionary. @return string representation of the annotation's content; null if not found
1500 Fetches and returns the modified date of the annotation.
1501 Retrieves the name of the annotation from its internal structure. @return Annotation name as a string or null if not found
1502 Retrieves default appearance string from the COS object using DA key. @return Default appearance string or null if not found
1503 Retrieves the default style string from the annotation's dictionary. @return the default style string or null if not found
1504 Retrieves the title of the popup annotation, if it exists. @return Title string or null if not present in the COS object.
1505 Retrieves the subject of the annotation from its COS object. @return the subject as a string, or null if not found
1506 Retrieves the state of the annotation as a string from its COS object. @return current state of the annotation or null if not defined
1507 Retrieves the state model of the annotation from its COS object. @return the state model as a string; otherwise, null if not found
1508 Retrieves the normal caption of PDF annotation appearance characteristics. @return normal caption string or null if not set
1509 Retrieves rollover caption from annotation's visual attributes. @return rollover caption string if it exists; otherwise, null
1510 Retrieves an alternate caption for PDF annotation appearance. @return Alternate caption string if present; otherwise, null
1511 Retrieves the date from the PDF signature properties dictionary. @return the date as a string; null if not found
1512 Retrieves the operating system name from a COSArray or string in the dictionary. @return Name of the operating system; otherwise, returns null if not found/applicable
1513 Retrieves a list of maps containing Subject DN attributes from the certificate dictionary. @return List of maps with attribute names and values; returns null if no Subject DN is found
1514 Retrieves the URL from the certificate's dictionary. @return the URL string, or null if not found
1515 Retrieves and returns the URL stored in the PDF signature's dictionary. @return The URL string, or null if it doesn't exist.
1516 Retrieves the name of the digital signature from its COSDictionary structure. @return the name of the digital signature or null if not found
1517 Retrieves the location string from the signature's metadata. @return the location string if it exists; otherwise, null
1518 Retrieves the reason string from the signature's COSDictionary. @return The reason for the digital signature, or null if not found
1519 Retrieves contact information from the digital signature's metadata. @return Contact information string; null if not available.
1520 Retrieves the title of the outline item from its COS object. @return the title as a string; null if not found
1521 Retrieves partial field name from PDF document's AcroForm structure. @return partial field name as a string or null if not found
1522 Retrieves an alternate field name from the PDF document's dictionary. @return The alternate field name if it exists; otherwise, null
1523 Retrieves the mapping name of the field from its dictionary. @return the mapping name as a string or null if not found
1524 Retrieves the default style string from the COS object. @return the default style string or null if not found
1525 Retrieves the scale ratio from the COSDictionary. @return the scale ratio as a string; otherwise, null
1526 Retrieves and converts the role map from a COSDictionary to a Java Map. @return Role map as a Map<String, Object>; empty map if not found or conversion fails
1527 Retrieves and extracts the options from a PDF choice field. @return List of string options; empty list if none found.
1528 Retrieves display values for choice field options. @return List of option display values; empty if none found
1529 Retrieves and processes a button's value based on its type. @return The string representation of the button's value or "Off" if not set.
1530 Retrieves and converts the list of string values associated with 'V' key.
1531 Retrieves default value(s) for choice field. @return list of default string values, or an empty list if not set
1532 Initializes an empty simple file specification with default name.
1533 Sets the file name of the PDF document specification. @param fileName the name to be assigned to the file
1534 Initializes a named destination with a given COSString. @param dest the input string to be encoded as a COSString object
1535 Sets the named destination with given text. Constructs a COSString object if text is not null, otherwise sets it to null. @param dest input string for named destination or null
1536 Reads and validates the PDF generation number. Throws exception if invalid. @return parsed and validated generation number @throws IOException if reading fails or number is invalid (negative/>5 digits)
1537 Reads and validates an object number from the PDF source. @return Parsed long value representing a valid object number. @throws IOException If reading, parsing, or validating the number encounters an error.
1538 Computes user password based on encryption revision. @param ownerPassword byte array representing the owner password @param owner original owner data @param encRevision encryption revision (2, 3, or 4) @param length desired length of the resulting user password @return computed user password as a byte array or empty if rev. is 5 or 6 @throws IOException if an I/O error occurs during encryption
1539 Initializes TensorPatch with control points and corner colors, computes levels, and generates triangles. @param tcp original control points @param color 2D array representing RGB values at corners [topLeft, topRight, bottomLeft, bottomRight]
1540 Encrypts data using the RC4 algorithm with a given key. @param finalKey encryption key as byte array @param input InputStream containing plaintext data @param output OutputStream for writing encrypted data @throws IOException if reading or writing streams fails
1541 Retrieves the current FontProvider or sets a default one if not already set. @return The active FontProvider for managing font information and mapping.
1542 Generates shaded triangles from a coordinate-color pair matrix. @param patchCC A 2D array of CoordinateColorPair objects @return List of generated ShadedTriangle objects
1543 Creates or retrieves an ICC-based color space from the given array and resources. @param iccArray contains color space data; index 1 holds the color stream @param resources for efficient resource retrieval and management @return PDICCBased object representing the color space @throws IOException if there's an issue accessing or validating the array/stream
1544 Initializes a CoonsPatch object with control points and corner colors. @param points Array of Point2D objects for the control points. @param color 2D array representing RGB values at corners.
1545 Processes a text position, handles duplicate and overlapping texts, and merges diacritics with their characters. @param text TextPosition object to be processed
1546 Overrides to process and customize a TextPosition object, handling duplicate overlapping text, articles, and diacritics. @param text The TextPosition object to be processed
1547 Converts a COSString to a Calendar object by parsing the string representation. @param text COSString containing date information @return Calendar instance if parsing succeeds, or null otherwise
1548 Begins a marked content sequence for a given PDF tag, setting up the PDF structure. @param tag COSName representing the PDF structure element to begin. @throws IOException if there's an issue writing to the output stream.
1549 Begins a marked content sequence with given tag and MCID, writing to the PDF stream. @param tag Name of the marking context; must not be null @param mcid Marked content identifier; should be non-negative
1550 Sets a marked content point with the given tag, writing it to output stream. @param tag COSName for the marked content point. @throws IOException if an I/O error occurs during write operations.
1551 Writes a COSString to an OutputStream in ASCII or hex format. @param string the COSString object containing data to be written @param output the destination stream for the data
1552 Writes byte array to an OutputStream as ASCII or hexadecimal. @param bytes the data to be written @param output the destination stream for the data
1553 Initializes PDFGraphicsStreamEngine with a specific page and sets up graphics operators. @param page the PDF document page to be processed
1554 Default constructor initializing marked content extractor with default operators.
1555 Initializes PDFTextStripperByArea without separating text by beads.
1556 Navigates through a path of keys or indices to retrieve an object from the COSBase instance. @param objPath string representation of the path @return COSBase object at the end of the path or null if not found
1557 Fetches attribute value by name from the PDF document dictionary.
1558 Retrieves attribute value by name or returns a default value if absent. @param attrName the attribute's name @param defaultValue the value to return if attribute is not found @return COSBase object representing the attribute value or defaultValue if not found
1559 Checks if a specific attribute is specified in the COSDictionary. @param name the name of the attribute to check @return true if attribute is present, false otherwise
1560 Retrieves an array of string values for a given attribute name. @param name the key for dictionary object @return Array of strings or null if not COSArray or contains non-COSName objects
1561 Retrieves a name or an array of names from the PDF structure. @param name key for dictionary object @param defaultValue fallback value if not found @return single name, array of names, or default value
1562 Retrieves a number or name based on input key. @param name the key to retrieve object from dictionary @param defaultValue fallback value if object is not found or not a number/name @return float value, string name, or default value based on object type
1563 Retrieves a number or array of numbers from the COSDictionary using given name. @param name key for dictionary object @param defaultValue fallback value if no valid number is found @return float value, float[] values, null, or defaultValue based on retrieved object type and defaultValue
1564 Retrieves a PDGamma object for the given color name from the COSDictionary. @param name the key to retrieve the color array @return PDGamma object or null if not found in the dictionary
1565 Generates a unique key for a given resource kind and prefix by appending an incrementing number. @param kind the type of resource @param prefix the initial string for the key @return a unique COSName instance representing the key
1566 Sets an integer value at a specific index and updates the array state
1567 Parses and retrieves a COSNumber instance for the input string, handling float or integer values. @param number String representation of numeric value to be parsed @return COSNumber object representing the input value @throws IOException if unable to parse or coerce the input string
1568 Appends a child element with the given MCID to the structure. @param mcid unique identifier for the child element
1569 Returns a COSInteger object with the angle value of this transition direction. @return A COSBase object representing the degrees as a COSInteger
1570 Parses a hexadecimal string from the source to a COSString object, handling whitespace and invalid characters.
1571 Default constructor initializing a rectangle at (0,0) with dimensions (0,0).
1572 Constructs a PDRectangle with specified width and height at the origin (0, 0). @param width Width of the rectangle @param height Height of the rectangle
1573 Creates and returns a PDRectangle based on the current bounding box dimensions.
1574 Computes and returns a difference rectangle based on annotation and bounding box coordinates. @return A PDRectangle representing the difference between annotRect/rectWithDiff and bounding box.
1575 Returns a new rectangle with applied padding to the original one. @param rectangle Original rectangle @param padding Distance to be removed from all sides of the rectangle @return New PDRectangle object with applied padding
1576 Adjusts a rectangle based on given differences array and returns the new rectangle. @param rectangle The original rectangle to be adjusted. @param differences An array containing differences for left, bottom, right, and top adjustments. @return A new PDRectangle with modified dimensions or the original if differences are invalid.
1577 Adjusts a rectangle by applying given differences to its dimensions and position. @param rectangle The initial rectangle @param differences Array containing adjustment values (dx, dy, dw, dh) @return Modified rectangle or the original if differences are invalid
1578 Adjusts the boundaries of a rectangle to apply padding. @param box The original PDRectangle object. @param padding The distance to be added or subtracted from the box's edges. @return A new PDRectangle with adjusted dimensions.
1579 Initializes cross-reference stream with new COSStream object from document. @param cosDocument the document to create COSStream in
1580 Creates a new PDObjectStream with a specified document. @param document the PDF document to associate with the stream @return a newly created and initialized PDObjectStream object
1581 Initializes a new instance of PDStream with a COSStream from the provided PDDocument. @param document The parent PDF document containing the stream to be managed.
1582 Initializes a new instance of PDStream with a COSDocument. Creates and assigns a new COSStream object to the 'stream' field. @param document the parent COSDocument for the new COSStream
1583 Initializes PDStream with given document, input stream, and filters. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filters any filtering options applied during output stream creation
1584 Creates a COSStream object from input data and adds it to the PDF document. @param document the target PDDocument object @param rawInput InputStream containing the raw image data @return COSStream object added to the document @throws IOException if input/output operations fail
1585 Encodes input data stream using provided parameters. @param input source of data to be encoded @param encoded output stream for the encoded data @param parameters COSDictionary containing encoding settings @throws IOException if IO operation fails
1586 Initializes an empty PDDefaultAttributeObject with a new COSDictionaryWrapper.
1587 Initializes an empty PDUserAttributeObject with the owner set to OWNER_USER_PROPERTIES.
1588 Constructs an empty PDStandardAttributeObject with a new COSDictionaryWrapper.
1589 Initializes an empty PDOutlineNode with a new COSDictionaryWrapper instance.
1590 Constructs a new PDVariableText instance with a specified parent AcroForm. @param acroForm the parent AcroForm structure to associate with this field
1591 Initializes PDExportFormatAttributeObject with a COSDictionary. @param dictionary manages PDF metadata, crucial for attribute data representation.
1592 Fetches the appearance stream for this entry. Throws exception if entry is not a stream. @return PDAppearanceStream object or throws IllegalStateException if entry is not a stream
1593 Retrieves and returns a sub-dictionary of appearance streams. @throws IllegalStateException if the entry is not an appearance subdictionary @return Map containing COSName as key and PDAppearanceStream as value
1594 Creates and returns an appropriate PDXObject based on the subtype of a COSStream. @param base COSBase object to create PDXObject from (must be COSStream) @param resources associated PDResources for managing resources @return PDXObject instance corresponding to the stream's subtype @throws IOException if base is not a COSStream or has an invalid subtype
1595 Adds and processes a TrueType or OpenType font file. @param ttfFile the font file to be processed
1596 Constructs mesh-based Type 6 shading with given dictionary. Inherits from base class constructor to initialize properties. @param shadingDictionary COSDictionary containing shading properties
1597 Constructs mesh-based Type 7 shading with given shading dictionary. Inherits from base class constructor to initialize properties. @param shadingDictionary COSDictionary containing shading properties.
1598 Retrieves a PDF destination by name from the dictionary. @param name unique identifier for the destination @return PDDestination object or null if not found or invalid type
1599 Retrieves and creates a destination from the COS object's dictionary. @return PDDestination object or null if input is invalid @throws IOException for errors in retrieving dictionary or conversion
1600 Creates a PDDestination object from the COS dictionary data. @return PDDestination object or null if input is invalid @throws IOException for unknown destination types or errors in conversion
1601 Retrieves and creates a destination object from the COS dictionary. @return a PDDestination object or null if input is invalid @throws IOException for errors in conversion or unknown destination types
1602 Retrieves and creates the destination for this outline item. @return a PDDestination object or null if input is invalid @throws IOException for errors in conversion or unknown destination types
1603 Constructs a new combo box field within the PDF form. @param acroForm Parent AcroForm structure. @param field COSDictionary representing the combo box field. @param parent The parent PDNonTerminalField (if any).
1604 Constructs a new list box within the PDF form. @param acroForm the parent AcroForm structure @param field COSDictionary representing the list box field @param parent the parent PDNonTerminalField (if any)
1605 Initializes a COSParser object with PDF document and decryption settings. @param source InputStream for the PDF document @param password String for decryption, if needed @param keyStore InputStream for the keystore with decryption keys @param keyAlias Alias for the decryption key in the keystore
1606 Creates an output stream for writing unfiltered data to the COSStream. @return OutputStream for writing unfiltered data. @throws IOException If there's an error checking if closed or creating output streams.
1607 Writes byte array data to the output stream of a given PDAppearanceStream. @param data byte array containing data to write @param appearanceStream target stream for writing data @throws IOException if there's an error creating or writing to the output stream
1608 Initializes an appearance content stream for a given PDF appearance and compression option. @param appearance the PDF appearance to customize @param compress true if output should be compressed, false otherwise
1609 Sets the text matrix for rendering text, with error check for text mode and throws IOException if encountered. @param matrix Matrix object to be transformed and set @throws IllegalStateException if not in text mode before calling this method @throws IOException if an I/O error occurs during transformation or writing
1610 Transforms the content stream using a given matrix and writes it to the output. @param matrix Matrix object to be transformed @throws IOException if an I/O error occurs during writing
1611 Retrieves the bounding box of marked content artifact. @return PDRectangle object or null if not found in properties.
1612 Retrieves the bounding box rectangle for PDF content. Uses a dictionary object to fetch and construct a rectangle. @return PDRectangle object or null if not found in the dictionary
1613 Retrieves the rectangle associated with the annotation. @return PDRectangle object if found; otherwise, returns null
1614 Retrieves the fringe dimensions for the caret annotation. @return PDRectangle object containing fringe dimensions or null if not found.
1615 Retrieves the fringe dimensions of the circular annotation from a COSArray. @return PDRectangle object if data is found; otherwise, returns null.
1616 Retrieves the fringe of a free text annotation as a rectangle. @return PDRectangle object or null if not found
1617 Retrieves the fringe dimensions of the square annotation as a PDRectangle object. @return PDRectangle if defined; otherwise, returns null
1618 Retrieves the font bounding box from PDF dictionary. @return PDRectangle object or null if not found in dictionary
1619 Retrieves the font bounding box from a COSArray using a unique key. @return PDRectangle object or null if not found in dictionary
1620 Retrieves the bounding box of the form XObject as a COSArray and converts it to a PDRectangle. @return PDRectangle object representing the bounds or null if not found in COSArray
1621 Retrieves the bounding box of the tiling pattern. @return PDRectangle object representing the bounding box, or null if not found.
1622 Retrieves the bounding box of the shading dictionary. @return A PDRectangle object representing the bounding box, or null if not defined.
1623 Retrieves and validates the annotation's rectangle from its COSDictionary. @return PDRectangle object if valid; otherwise, logs warning and returns null
1624 Retrieves rectangle difference if present, otherwise returns null. @return PDRectangle object or null if not found in COSArray
1625 Retrieves rectangle differences from the COS object. @return PDRectangle if differences exist; otherwise, returns null
1626 Retrieves the bounding box of the viewport as a PDRectangle object. @return PDRectangle containing the bounding box or null if not found
1627 Retrieves the rectangle coordinates from a bead's COSArray, creating a PDRectangle object if available. @return PDRectangle with coordinates or null if not found
1628 Sets and applies a custom line dash pattern for graphics rendering. @param array Defines the lengths of dashes; phase is adjusted if negative. @param phase Adjusts the start point of the dash pattern within a cycle.
1629 Retrieves and constructs a line dash pattern from the COSDictionary. @return PDLineDashPattern object if valid; otherwise, returns null
1630 Creates a stencil image from given PDImage and applies specified paint. @param pdImage source image to create the stencil from @param paint paint object used for creating the stencil effect @return BufferedImage representing the stencil image
1631 Retrieves and creates a transformation matrix from the PDF object's dictionary. @return Transformation matrix for this form XObject or default if not found.
1632 Retrieves the transformation matrix from pattern data dictionary. @return Matrix instance with transformation parameters or default if not found
1633 Retrieves and creates a transformation matrix from the shading dictionary. @return Matrix object for transformations or default if not found in dictionary
1634 Retrieves an inheritable attribute from a COSDictionary node based on the given key. @param node the COSDictionary to search in @param key unique identifier for the attribute @return the attribute value or null if not found or inherited
1635 Retrieves a boolean value from the dictionary using a single key. @param key primary key for retrieval @param defaultValue fallback value if key is not found or invalid type
1636 Retrieves an integer value using a primary key. @param key primary key for retrieval @param defaultValue fallback value if not a COSNumber @return integer value or defaultValue if not found
1637 Retrieves an integer value from dictionary using keys. Defaults to -1 if not found. @param firstKey primary key for retrieval @param secondKey secondary key used if firstKey fails @return integer value or -1 if not a COSNumber
1638 Decodes inline image data using specified filters and initializes the object. @param parameters COSDictionary containing image attributes @param data byte[] of encoded image data @param resources PDResources for additional resources (if needed)
1639 Determines the image file suffix based on its filters. @return Image file suffix as a String, defaults to "png".
1640 Retrieves COSObjects with specified dictionary types from the document pool. @param type1,type2: Dictionary types to search for @return List of matching COSObjects or an empty list if none found
1641 Converts input character code to Unicode using ToUnicode CMap. @param code The input character code to convert @return Unicode string or null if conversion is not possible
1642 Checks if the PDF document is encrypted. @return true if encrypted; false otherwise
1643 Parses the FDF document, including header validation and initial parsing. Throws an exception if any errors occur during these steps. @return FDFDocument object representing the parsed data or null if parsing fails @throws IOException if there are issues with reading the document or parsing its content
1644 Retrieves and initializes the AcroForm with default fixups for the PDF document. @return PDAcroForm object or null if not available in the document.
1645 Retrieves a color space resource by name from the PDF document. @param name unique identifier for the color space @param wasDefault flag indicating if it's the default color space @return PDColorSpace object or null if not found
1646 Checks if a specific color space resource is available in the PDF document. @param name unique identifier for the color space resource @return true if the color space exists, false otherwise
1647 Retrieves an extended graphics state by name from the PDF document's resources. @param name unique identifier for the extended graphics state @return PDExtendedGraphicsState object or null if not found
1648 Checks if a given name corresponds to an image XObject in the PDF document. @param name unique identifier for the resource @return true if it's an image XObject, false otherwise
1649 Retrieves names of all color spaces in the PDF document. @return Iterable of COSNames representing color space names, or an empty set if not found
1650 Retrieves names of all XObject resources in the PDF document. @return Iterable of COSNames or an empty set if not found
1651 Retrieves font names from the PDF document's resources. @return Iterable of COSNames representing font names, or an empty set if not found
1652 Retrieves names of properties from the PDF document. @return Iterable of COSNames or an empty set if not found
1653 Fetches shading names from PDF document resources.
1654 Retrieves names of all pattern resources in the PDF document. @return Iterable of COSNames or an empty set if not found
1655 Retrieves names of extended graphics states from the PDF document. @return Iterable of COSNames or an empty set if not found
1656 Retrieves the standard crypt filter dictionary from encryption settings. @return PDCryptFilterDictionary or null if not found
1657 Retrieves default crypt filter dictionary from encryption settings. @return PDCryptFilterDictionary or null if not found
1658 Retrieves a Type 3 character processor by encoding code or returns null if not found. @param code unique font encoding identifier @return PDType3CharProc object or null if not defined for this encoding and charProcs
1659 Retrieves the rollover appearance entry for annotation. @return PDAppearanceEntry or default normal if rollover not found
1660 Retrieves the down appearance entry from dictionary or normal if not available. @return PDAppearanceEntry object for down state; otherwise, the normal one.
1661 Retrieves the first child outline item. @return The first child PDOutlineItem or null if not found
1662 Retrieves the last child outline item in the PDF document
1663 Retrieves the signature's value from its underlying COS dictionary. @return a new PDSignature instance if found; otherwise, null.
1664 Fetches a value based on the given index from the number tree node. @param index to retrieve the corresponding object @return COSObjectable value or null if not found @throws IOException if data retrieval fails
1665 Calculates and returns the number of output parameters in the PDF function. @return The count of output parameters, derived from the size of range values.
1666 Fetches and returns a specific output range. @param n the index of the desired range value @return a PDRange object containing values from the specified index
1667 Clips input values within defined ranges from the PDF document. @param inputValues array of values to be clipped @return clipped values within specified range or original values if no range found
1668 Returns the total number of input parameters for this function. Calculated as half the size of domain values array. @return Number of input parameters or -1 if not yet defined
1669 Retrieves the domain for a specific input index. @param n the input index @return a PDRange object representing the domain values
1670 Calculates sample index from coordinate vector. @param vector Coordinates for interpolation @return Index used to retrieve interpolated sample value
1671 Retrieves a specific decoded range for a given parameter index. @param paramNum the parameter index @return PDRange object or null if not available
1672 Retrieves a specific range from the encoded array for parameter evaluation. @param n The starting index within the encoded array @return A PDRange object containing the specified range of data
1673 Checks if the top edge is attached to the marked content artifact. @return True if top edge is found in the attached list, otherwise False
1674 Checks if the bottom edge is attached to the marked content artifact. @return True if 'Bottom' edge is found in the attached list, otherwise False
1675 Checks if the left edge is attached to the marked content artifact
1676 Checks if right edge is attached to marked content artifact
1677 Constructs a PDCIDFont object with given dictionary and parent font. Initializes widths and vertical displacements for the CID font. @param fontDictionary The COS dictionary containing font data @param parent The parent type 0 font of this CID font
1678 Initializes DictionaryEncoding with font encoding and applies differences. @param fontEncoding COSDictionary containing font encoding info; may include BaseEncoding
1679 Initializes encoding for a font dictionary, handling base encodings and differences. @param fontEncoding COSDictionary containing encoding info @param isNonSymbolic true if the font is non-symbolic; false otherwise @param builtIn the font's built-in encoding (used for symbolic fonts)
1680 Initializes ShadingContext with PDF shading, color model, and transformations. Fetches color space, sets up output color model, and handles background values. @param shading PDShading object for the context @param cm ColorModel to be used @param xform AffineTransform for transformations @param matrix Matrix for additional transformations @throws IOException if error occurs during initialization
1681 Retrieves the decode range for a given parameter number. @param paramNum the index of the parameter to retrieve decoding values for @return PDRange object containing decode values; null if not available or valid
1682 Retrieves the signed content from the PDF file using byte range filtering. @param pdfFile input stream of the PDF document @return byte array containing the filtered and signed content @throws IOException if an I/O error occurs during processing
1683 Extracts signed content from the PDF file using specified byte range. @param pdfFile the input PDF file as a byte array @return byte array representing the signed content within the byte range @throws IOException if an I/O error occurs while reading or processing the data
1684 Retrieves the revision number from the property dictionary. @return Long value of revision or -1 if not found/not a COSNumber
1685 Retrieves the minimum revision value from the property dictionary. @return Minimum revision number or -1 if not found/not a COSNumber
1686 Creates a view of the data stream after applying any filters. @return RandomAccessRead object for accessing filtered data stream @throws IOException if input/output operations fail or filters are invalid
1687 Retrieves a number attribute from dictionary by string key. @param name unique identifier for the number as a string @return float value associated with name, or -1 if not found/invalid
1688 Retrieves the conversion factor from the number format settings. @return float value representing the conversion factor, or -1 if not found/invalid
1689 Retrieves leader length of line annotation in PDF document.
1690 Retrieves the leader extend value of the line annotation. @return the leader extend value, or -1 if not found/invalid
1691 Retrieves the leader line offset value from the annotation.
1692 Retrieves the 'V' value from the PDF signature dictionary. @return float value of 'V', or -1 if not found/invalid
1693 Retrieves CYX value from the underlying COSDictionary. @return Float value of CYX, or -1 if not found/invalid
1694 Retrieves or creates a float value from dictionary using given key. @param name input string for the COSName @param defaultValue fallback value if name is invalid or non-numeric @return float value associated with name, or defaultValue if not found/invalid
1695 Retrieves intensity level of border effect. @return Float value representing intensity, default to 0 if not found.
1696 Computes the font height for a given PDFont. @param font The input PDFont object @return The calculated font height as float
1697 Returns default position vector for a given CID. @param cid character identifier @return Vector with x-coordinate as half of the width and y-coordinate as dw2[0]
1698 Retrieves PDF properties with the given name from resources or creates a new one. @param name unique identifier for the property list @return PDPropertyList object if found or created; otherwise, null
1699 Retrieves the optional content property list for this form XObject. @return PDPropertyList if available, otherwise null
1700 Fetches and returns optional content from the PDF object if present; otherwise, returns null. @return PDPropertyList instance or null if not found in the PDF object
1701 Retrieves and creates property lists from optional content groups (OCGs). @return List of PDPropertyList objects or an empty list if no OCGs are found.
1702 Retrieves and creates a property list for optional content in the PDF document. @return PDPropertyList object or null if not found in COSDictionary
1703 Validates and corrects object offsets in the cross-reference table if necessary. Uses brute force search for correction if validation fails. @throws IOException if an I/O error occurs during search operation
1704 Saves FDFDocument to a file using the provided filename. @param fileName The name of the file where the document will be saved @throws IOException If there is an error during writing operation
1705 Removes object from list and associated COSArray, if found. Throws exception in filtered mode. @param o Object to remove @return True if object was removed, otherwise False
1706 Removes an element at the specified index, throwing exception if list is filtered. @param index The position of the object to be removed @return The removed object or null if not found
1707 Removes a COSBase object from the collection, handling dereferencing if needed. @param o object to be removed @return true if removal was successful, else false
1708 Removes a user property and updates the document structure. @param userProperty object to be removed
1709 Removes a subject from the certificate data in PDF document. @param subject byte array representing the subject to be removed
1710 Removes a specific key usage extension from the certificate dictionary. @param keyUsageExtension the extension to be removed as a string
1711 Removes a specified issuer from the certificate's dictionary. @param issuer byte array representing the issuer to be removed
1712 Removes a specific OID from the certificate's dictionary. @param oid byte array representing the OID to be removed
1713 Clears all data in both general and PDF-specific collections.
1714 Removes a key-value pair from the map and updates document state. @param key Unique identifier of the item to be removed @return The value associated with the removed key, or null if not found
1715 Recursively collects and updates COSDictionary objects based on their states. @param dictionary the object to be processed @return true if child demands parent update, otherwise false
1716 Collects COSObjects for update, managing states and relationships. @param object The input COSObject to be added or excluded from collection. @return false if the object is skipped in the collection process.
1717 Sets the origin document state. Calls the more detailed version of the method with dereferencing flag set to false. @param originDocumentState the new document state to set; null is not allowed
1718 Retrieves the upper limit string from the node's limits array, if available. @return Upper limit string or null if unavailable
1719 Retrieves the lower limit from node's limits array. @return String representation of lower limit or null if unavailable
1720 Retrieves and converts dictionary value to string using input name as key. @param name input string used as the dictionary key @return String representation of the dictionary value or null if not found/supported type
1721 Retrieves and parses the rendering intent string from PDF dict. @return Corresponding RenderingIntent enumeration or null if not found
1722 Retrieves and returns the named action's name as a string. @return Name of the action or null if not found/supported type
1723 Retrieves a named object as string with fallback. @param key unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
1724 Retrieves the style of the guideline from the COSDictionary. @return String representation of the guideline style or default if not found/supported type
1725 Retrieves and returns the icon name of the text annotation. @return String representation of the icon or default value if not found/supported type
1726 Retrieves and returns the name of the file attachment. @return String representation of the attachment name or a default value if not found/supported type
1727 Retrieves and converts the line ending style to a string with default fallback. @return String representation of line ending style or default if not found/supported type
1728 Retrieves highlight mode for the link annotation. @return String representing the highlight mode or default if not found/supported type
1729 Fetches and returns the reply type of the annotation as a string. @return Reply type or default value if not found/supported type
1730 Retrieves and returns the name of the rubber stamp annotation as a string. @return String representation of the name or default value if not found/supported type
1731 Retrieves and returns the name of the annotation text as a string. This method is essential for identifying and managing PDF text annotations. @return String representation of the annotation text's name or default value if not found/supported type
1732 Retrieves and returns the highlighting mode of the annotation as a string. @return String representation of the highlighting mode or "I" if not found/supported type.
1733 Retrieves and converts border style to string with fallback. @return String representation of the border style or default if not found/supported type
1734 Retrieves and returns the type of external data as a string. @return Type attribute of the COSDictionary object or "ExData" if not found.
1735 Retrieves and returns the transition style as a string. @return Transition style name or default if not found/supported type
1736 Retrieves and returns the dimension of the transition as a string. @return String representation of the dimension or default value "H" if not found/supported type
1737 Retrieves and returns the motion property of the transition as a string. @return String representation of the transition's motion or default value if not found/supported type
1738 Retrieves the non-full screen page mode preference as a string. @return String representation of the non-full screen page mode or default value if not set.
1739 Retrieves the reading direction preference as a string. @return String representation of the reading direction or default value if not set
1740 Retrieves and returns the view area setting as a string with fallback to crop box if not set. @return String representation of the view area or "CropBox" if not set
1741 Retrieves and returns the view clip setting as a string. Defaults to crop box if not set. @return String representation of the view clip setting or default crop box value if not found/supported type
1742 Retrieves and formats the print area setting as a string with a fallback to crop box if not found. @return String representation of the print area or crop box value if not set
1743 Retrieves and formats print clip setting as a string with a fallback to crop box if not found. @return Print clip setting or default crop box if not set.
1744 Retrieves the print scaling preference as a string. @return String representation of print scaling or default if not found/supported type
1745 Validates and corrects the XREF offset in PDF document. @param startXRefOffset long representation of the initial offset to check @return corrected XREF offset or -1 if not found, logs errors for invalid input
1746 Checks if attribute object is empty based on size and owner presence. @return true if only the owner exists, false otherwise
1747 Fetches and returns the parent node of a PDF structure element, or null if none exists. @return PDStructureNode instance representing the parent or null if not found
1748 Creates an object from a COSBase, handling dictionaries and integers. @param kid The base object to be converted @return Objectable representation or integer value of the input object
1749 Initializes encryption settings from a COSDictionary and sets up the security handler. @param dictionary contains encryption-related properties for PDF document
1750 Retrieves the security handler for PDF document. Throws exception if no handler is found. @return SecurityHandler<ProtectionPolicy> object or throws IOException with a message about unsupported filter @throws IOException if no security handler exists for the specified filter
1751 Retrieves and creates a list of FDFAnnotations from the document's ANNOTS array. @return List of FDFAnnotation objects or null if not found in the document @throws IOException for any input/output errors during processing
1752 Checks if character set matches between CIDSystemInfo and FontInfo. @param cidSystemInfo System info object to compare with @param info Font information object to compare with @return true if character sets match, false otherwise
1753 Checks if the color space subtype is "NChannel". @return true if subtype equals "NChannel", false otherwise
1754 Retrieves and interprets the open action from PDF root dictionary. Can be an action or destination based on object type. @return PDAction, PDDestination, or null if not found/supported @throws IOException for errors in conversion or unsupported types
1755 Retrieves and creates a PDF action from this field's COSDictionary. @return PDAction object or null if invalid/unsupported type in the dictionary.
1756 Retrieves a map of JavaScript actions from the document's COSDictionary. @return Map with string names and corresponding PDActionJavaScript objects, or null if not found/applicable
1757 Retrieves and creates an action associated with 'F' from the PDF document. @return PDAction object or null if invalid/unsupported or not present in the document
1758 Retrieves and returns the PDF action associated with key 'E'. @return PDAction object or null if no valid action is found for 'E'
1759 Retrieves and creates a PDF action from the 'X' dictionary. @return PDAction object or null if 'X' dictionary is not found/valid
1760 Retrieves and creates the D action from annotations' COSDictionary. @return PDAction object or null if not found in dictionary
1761 Retrieves and creates a PDF action from the 'U' dictionary if present. @return PDAction object or null if 'U' dictionary not found/unsupported
1762 Retrieves and creates the PDF action defined for "Fo". @return PDAction object if defined; otherwise, null
1763 Retrieves and creates a PDF action associated with the Blend (Bl) dictionary. @return PDAction object or null if Bl dictionary is not found or invalid
1764 Retrieves and creates a PDF action for the "PO" key. @return PDAction object or null if not found/supported
1765 Retrieves and creates a PDF action associated with the "PC" key in the annotation's actions. @return PDAction object if found; otherwise, null
1766 Retrieves and creates a PDF action from the 'PV' dictionary, if it exists. @return PDAction object or null if 'PV' dictionary is not present
1767 Retrieves and creates the PI (Page Interaction) action from the annotation's COSDictionary. @return PDAction object for PI or null if not defined
1768 Retrieves and creates the WClose action from the PDF document's catalog. @return PDAction object for WClose event or null if not defined
1769 Retrieves and creates a PDF action associated with the 'WS' event. @return PDAction object or null if no corresponding 'WS' action exists.
1770 Retrieves and creates a PDF action from the Document Security Store (DS). @return PDAction object if DS exists; otherwise, null
1771 Retrieves and creates the WP (Window Position) action from the document's catalog. @return PDAction object for WP or null if not defined
1772 Retrieves and creates the Document Preparation (DP) action from the PDF document's catalog. @return PDAction object for DP or null if not found
1773 Retrieves and creates a PDF action associated with the key 'K'. @return PDAction object or null if not present/supported
1774 Retrieves and creates a PDF action from the 'F' key in the actions dictionary. @return PDAction object or null if not found or invalid/unsupported type
1775 Retrieves and creates a PDF action from the 'V' key in the dictionary
1776 Retrieves and creates a PDF action associated with the key 'C'. @return PDAction object corresponding to the action type or null if not found/invalid
1777 Retrieves and creates a PDF action from the 'O' key in the COSDictionary. @return PDAction object or null if not found/invalid
1778 Retrieves and creates a PDF action from the 'C' dictionary, if it exists. @return PDAction object or null if no 'C' dictionary is found
1779 Retrieves and creates a PDF action from the internal COS dictionary. @return PDAction object or null if not found in the COS dictionary.
1780 Retrieves the PDF action associated with this annotation widget. @return PDAction object if available; otherwise, null
1781 Retrieves and creates a PDF action from the COSDictionary associated with this outline item. @return PDAction object or null if invalid/unsupported dictionary found
1782 Fetches a string value from document metadata using given key. @param propertyKey unique identifier for the string object @return the string if it exists; otherwise, null
1783 Retrieves custom metadata value by field name. @param fieldName unique identifier for the metadata field @return string value of the field if it exists; otherwise, null
1784 Fetches a string attribute by its key from the underlying COSDictionary. @param name unique identifier for the string object @return the string if it exists; otherwise, null
1785 Fetches the 'Base' string from the URI action dictionary.
1786 Fetches version string from the property dictionary using "REx" key.
1787 Retrieves the units used in number formatting from PDF document settings. @return string representing the units; null if not defined
1788 Retrieves a string value from the dictionary using a given key. @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
1789 Retrieves an embedded string using specified keys. @param embedded key for the dictionary to search in @param key unique identifier for the string object @param defaultValue fallback string if key is not found @return the string if it exists; otherwise, the default value
1790 Retrieves the operation type from launch parameters with a default of 'open'. @return the operation type or 'open' if not found in parameters
1791 Returns the default appearance string of the form field. @return the default appearance string, or an empty string if not found
1792 Retrieves the file name from various representations. @return the file name as a string; null if not found in any representation.
1793 Checks if a specific optional content group exists in the document. @param groupName name of the group to check for existence @return true if group exists, false otherwise
1794 Returns the fully qualified name of the PDField. @return Fully qualified field name or null if not applicable
1795 Exports options from PDF choice field. @return List of string options; empty list if none found
1796 Encrypts or decrypts input data using different algorithms based on key length and type. @param objectNumber unique object identifier @param genNumber generation number of the object @param data InputStream containing the data to be encrypted/decrypted @param output OutputStream for writing the result @param decrypt True for decryption, false for encryption @throws IOException if an error occurs during encryption/decryption or I/O operations
1797 Computes the encrypted key for PDF encryption based on revision. @param password encryption password @param o, u, oe, ue bytes of original and encrypted user/owner keys @param permissions access permissions @param id document identifier @param encRevision encryption revision (5 or 6 uses different logic) @param keyLengthInBytes desired key length @param encryptMetadata flag for metadata encryption @param isOwnerPassword flag indicating owner or user password usage @return byte array representing the computed encrypted key
1798 Validates a user password based on encryption revision. @param password input password to validate @param user original hashed user key and salt @param owner owner password bytes @param encRevision encryption standard revision (2-6) @return true if the password is valid; false otherwise
1799 Finds and returns a FontBoxFont based on format and PostScript name, applying various substitution strategies for fallback matching. @param format Font format (e.g., Type1, TrueType) @param postScriptName Unique font identifier @return Matching FontBoxFont or null if not found
1800 Converts a COSString to a Calendar object by parsing the string representation. @param text COSString containing date information @return Calendar instance if parsing succeeds, or null otherwise
1801 Writes a COSString to an OutputStream with space delimiter. @param output the destination stream for the data @param cosString the COSString object containing data to be written
1802 Displays text on the content stream with complex layout and subsetting if needed. @param text The input text to be displayed @throws IOException If an I/O error occurs during the process
1803 Initializes the PageDrawer with specified page and rendering parameters. @param parameters Object containing render settings, page, and other info.
1804 Retrieves and constructs the default PDColor object (CYAN). @return Default PDColor object representing CYAN; may be null if not found.
1805 Retrieves the border color for interactive PDF annotations. @return PDColor object representing the border color or null if not found
1806 Retrieves the background color used in annotations. @return PDColor object or null if not found or invalid color space
1807 Sets the high value in the color table at index 2
1808 Sets the destination page number in the PDF document. @param pageNumber The target page number for navigation.
1809 Parses a COS string from the source, handling hexadecimal and literal strings. @return COSString object created from parsing @throws IOException if there's an issue with reading or writing data
1810 Retrieves the signature contents from a PDF file using specified byte ranges. @param pdfFile InputStream of the PDF file @return Byte array representing the signature content or null if not found @throws IOException If there's an error reading the input stream
1811 Extracts and converts the contents of a PDF file based on specified byte range. @param pdfFile the byte array representation of the PDF file @return the converted contents as a byte array @throws IOException if there's an issue reading from the input stream
1812 Constructs an immutable rectangle with specified dimensions. @param width Width of the rectangle @param height Height of the rectangle
1813 Returns the bounding box of the object as a PDRectangle. @return PDRectangle representing the object's dimensions
1814 Initializes PDMetadata with a PDF document and sets necessary metadata properties. @param document The parent PDF document to manage metadata for.
1815 Initializes a new instance of PDEmbeddedFile with a PDDocument and sets its type to EMBEDDED_FILE. @param document The parent PDF document containing the embedded file.
1816 Initializes a new PDXObject with a specified document and subtype. @param document The parent PDF document containing the stream to be managed. @param subtype The specific type of XObject being created.
1817 Constructs a PDImageXObject with an empty stream and no resources. @param document the parent PDF document
1818 Initializes PDStream with given document and input stream. No filters are applied. @param doc the PDF document to associate the stream with @param input the source of data for the stream @throws IOException if an error occurs during initialization
1819 Initializes PDStream with given document, input stream, and filter. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filter any filtering options applied during output stream creation
1820 Initializes PDStream with given document, input stream, and filters. @param doc the PDF document to associate the stream with @param input the source of data for the stream @param filters any filtering options applied during output stream creation
1821 Constructs a PDImageXObject with specified parameters and adds it to the given document. @param encodedStream InputStream containing the image data @param initColorSpace Initial color space for the image object @throws IOException if input/output operations fail
1822 Initializes an empty PDLayoutAttributeObject and sets its owner to OWNER_LAYOUT.
1823 Constructs an empty PDListAttributeObject and sets its owner to OWNER_LIST.
1824 Constructs an empty print field attribute object and sets its owner to PRINT_FIELD.
1825 Constructs an empty PDTableAttributeObject and sets its owner to OWNER_TABLE.
1826 Creates a specific PDAttributeObject based on the given dictionary's owner. @param dictionary manages PDF metadata and properties; critical for attribute data representation @return PDAttributeObject subclass instance based on the owner or default if unrecognized
1827 Fetches the normal appearance stream for annotation. @return Normal appearance stream or null if unavailable.
1828 Retrieves the on-value of the first widget's appearance dictionary. @return The name of the entry if it exists and is not "Off", otherwise an empty string
1829 Retrieves the transparency group associated with this soft mask. @return PDTransparencyGroup object or null if not found/initialized @throws IOException if there's an issue processing the COSBase object
1830 Finds the named destination page in a PDF document. @param namedDest unique identifier for the destination @return PDPageDestination object or null if not found
1831 Initializes a COSParser object with an input PDF document. No decryption is applied. @param source InputStream for the PDF document
1832 Initializes PDFParser with source and encryption parameters. @param source input PDF document @param decryptionPassword password for encrypted documents (optional) @param keyStore keystore for additional encryption methods @param alias alias within the keystore
1833 Constructs an appearance content stream with a given PDF appearance. @param appearance the PDF appearance to customize @throws IOException if there's an error creating output streams
1834 Initializes a PDFormContentStream for a given PDFormXObject. @param form the PDF form object to create stream for @throws IOException if there's an error creating output streams or checking if closed
1835 Constructs a PDPageContentStream for PDF appearance stream with specified resources. @param doc the PDF document @param appearance the PDF appearance stream @throws IOException if there's an error creating output streams
1836 Constructs a content stream for a given tiling pattern. @param pattern the tiling pattern to create the stream for @throws IOException if an error occurs while creating the output stream
1837 Draws an arrow on PDF content stream at given point with specified length. @param cs PDF appearance content stream @param x, y coordinates of the arrow tip @param len length of the arrow arms
1838 Manages drawing of shapes in PDF appearance content streams, with options for stroke and fill. @param lineWidth width of the shape's outline; no stroking for very small lines @param hasStroke determines if the shape should have a stroke @param hasFill determines if the shape should be filled
1839 Draws a diamond shape in the PDF appearance content stream. @param cs content stream to draw on @param x center point's X coordinate @param y center point's Y coordinate @param r radius of the diamond
1840 Draws a circle on the PDF appearance content stream using Bezier curves. @param cs PDFAppearanceContentStream to draw on @param x, y center coordinates of the circle @param r radius of the circle
1841 Draws a circle in the PDF content stream with given center and radius. @param cs PDF appearance content stream @param x,y coordinates of the center of the circle @param r radius of the circle
1842 Draws a paperclip shape on the PDF appearance content stream. @param contentStream manages graphical elements in the PDF appearance object's content stream.
1843 Sets line width for drawing operations, handling default value of 1. @param lineWidth Desired width; if 1, no change is made to avoid redundancy
1844 Generates a BufferedImage for the given tiling pattern parameters. @param pattern PDTilingPattern object containing pattern details @param colorSpace Color space for the pattern @param color Pattern's color @return A BufferedImage with the rendered tiling pattern @throws IOException if an I/O error occurs during processing
1845 Calculates and returns the anchor rectangle for a tiling pattern with scaling applied. Handles edge cases where XStep or YStep is 0 by using BBox dimensions. Prevents overly large patterns to avoid performance issues. @param pattern The tiling pattern object @return Anchor rectangle as a Rectangle2D.Float object with scaling applied @throws IOException if the pattern's /BBox is missing
1846 Returns the stencil image for this PDImageXObject if it's used as a stencil in PDF, else throws an exception. @param paint Paint object used to create the stencil effect. @return BufferedImage representing the stencil image. @throws IOException If there is an error during image processing. @throws IllegalStateException If this PDImageXObject is not a stencil in PDF.
1847 Extracts raw raster data from a PDImage, handling color space and bit depth. @param pdImage source image to extract raster data from @return WritableRaster containing the extracted image data @throws IOException if an I/O error or invalid image parameters occur
1848 Decodes and converts a PDImage to BufferedImage. Handles various image types, subsampling, and region clipping. @param pdImage The image object to convert @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @param colorKey Array defining the color key mask values @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
1849 Retrieves and initializes PDF resources for the page. @return PDResources object containing document resources or null if not present
1850 Retrieves the media box of the page, initializing it if necessary. @return The media box rectangle or default US Letter size if not found.
1851 Retrieves and normalizes the rotation angle of the page. @return normalized rotation angle or 0 if not found or invalid
1852 Retrieves or creates a boolean value from dictionary using a string key. @param key input string for retrieval or COSName creation @param defaultValue fallback value if key is not found or invalid type @return the corresponding boolean value, defaults if necessary
1853 Checks if the file specification is volatile (temporary) using a COSName key. @return true if file is volatile, otherwise false; defaults to false if not found or invalid type
1854 Checks if user property is hidden in PDF document structure. @return true if property is hidden, false otherwise
1855 Checks if metadata in the document is encrypted. Default is true. @return boolean indicating encryption status of metadata
1856 Retrieves the caption status of the line annotation using a default value if not present. @return true if caption is enabled, otherwise false
1857 Checks if annotation scaling to fit is enabled in FDF settings. @return true if scaling to fit is enabled; otherwise, returns false.
1858 Checks if renaming is enabled in the FDF template. @return true if renaming is enabled, false otherwise
1859 Checks if the transparency group is isolated. @return true if isolated, false otherwise; defaults to false if not found or invalid type
1860 Checks if transparency group uses knockout property. @return true if knockout is enabled, otherwise false
1861 Retrieves the anti-aliasing property from the shading dictionary. @return true if anti-aliasing is enabled; otherwise, returns false.
1862 Retrieves stroking overprint control setting from PDF dictionary. @return true if OP is set to true in the COSDictionary; otherwise, returns false.
1863 Retrieves automatic stroke adjustment property from PDF dictionary. @return true if enabled, false otherwise (default)
1864 Retrieves the alpha source flag from the dictionary using a predefined key. @return true if alpha source is enabled, false otherwise (default)
1865 Retrieves text knockout flag from the dictionary. Defaults to true if not found.
1866 Retrieves the 'H' flag value for hiding action customization. @return current state of 'H' flag (true if hidden by default)
1867 Checks if the sound action is synchronous or asynchronous. @return true if synchronous; otherwise, false (asynchronous)
1868 Retrieves the repeat property of the sound action. @return true if the sound should repeat, otherwise false
1869 Retrieves the mix property value from the sound action. @return true if sound should be mixed; otherwise, returns false
1870 Checks if line annotation has a caption.
1871 Retrieves the open state of the PDF annotation text. @return true if open, false otherwise
1872 Retrieves the pre-release status of digital signature properties. @return true if in pre-release state; otherwise, returns false
1873 Retrieves Non-Embedded Font No Warning flag value from the property dictionary. @return boolean value of NON_EFONT_NO_WARN or defaults to true if not found
1874 Retrieves the trusted mode status from the property dictionary. @return true if in trusted mode, otherwise false (default)
1875 Retrieves the "need appearances" flag from the form's dictionary. @return true if need appearances, otherwise false (default)
1876 Checks if fly area of PDF transition is opaque. @return true if fly area is opaque; otherwise, false
1877 Retrieves user preference to hide toolbar in PDF viewer. @return true if toolbar should be hidden, otherwise false
1878 Checks if menubar should be hidden in PDF viewer based on preferences. @return true if menubar is set to hide; otherwise, returns false
1879 Checks if window UI should be hidden based on PDF preferences. @return true if HIDE_WINDOWUI is set to true; otherwise, returns false.
1880 Retrieves the 'fit window' preference setting. @return true if 'fit window' is enabled, otherwise false
1881 Determines if the window should be centered on screen. @return true if centering is enabled; otherwise, false
1882 Checks if document title should be displayed in the viewer. @return true if document title is set to display, otherwise false
1883 Retrieves an integer from a nested dictionary using primary and secondary keys. @param embeddedDictionary key for the outer COSDictionary @param key primary key for retrieval within the inner COSDictionary @param defaultValue fallback value if not found or not a COSNumber @return integer value or defaultValue if not found or invalid type
1884 Retrieves an integer value from COSDictionary using a string key. @param key the input string for retrieval @return integer value or -1 if not found or not a COSNumber
1885 Fetches an integer value associated with a COSName key. @param key COSName key for retrieval @return Integer value or -1 if not found
1886 Retrieves an integer value from the dictionary using a string key. @param key string-based primary key for retrieval @param defaultValue fallback value if not a COSNumber @return integer value or defaultValue if not found
1887 Checks if a specific flag is set in the provided field. @param field COSName of the data field @param bitFlag integer flag to check for @return true if flag is set, false otherwise
1888 Retrieves the total count of pages in the PDF document. @return Total number of pages or 0 if not a COSNumber
1889 Retrieves the starting page number for custom labeling. @return the starting page number or default value of 1 if not specified
1890 Retrieves the order of the PDF function type. @return The integer value representing the order, defaults to 1 if not found.
1891 Retrieves the revision number of the PDF document structure element. @return integer value representing the revision number or 0 if not found
1892 Retrieves the length of the encryption filter dictionary. @return integer value representing the length or default value if not found
1893 Retrieves the PDF document version. @return current version of the document (default is 0)
1894 Retrieves and returns the length of the PDF document, defaulting to 40 if not found. @return integer representing the document's length
1895 Retrieves the revision number of the PDF document. @return The revision number or a default value if not found.
1896 Retrieves permission settings from the PDF document's dictionary. @return Permission level as an integer value (default is 0 if not found)
1897 Retrieves justification value from free text annotation. @return string representation of the justification value or "0" if not found
1898 Retrieves the font descriptor flags. Initializes with default value if not set. @return current or initialized flags value
1899 Creates a PDF pattern from the given dictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache cache for storing resources @return PDAbstractPattern object representing the pattern @throws IOException if an error occurs during pattern creation
1900 Retrieves the paint type of this tiling pattern using a predefined key. @return integer value representing the paint type or default to 0 if not found
1901 Retrieves the tiling type of this pattern. @return integer value representing the tiling type or 0 if not found
1902 Creates a PDShading object based on the provided dictionary and its shading type. @param shadingDictionary COSDictionary containing shading properties @return PDShading object or null if shading type is unknown, throws IOException for errors
1903 Retrieves bits per flag from COS object using a predefined key. @return integer value representing bits per flag or -1 if not found
1904 Retrieves the number of vertices per row in PDF shading data. @return integer value or -1 if not found
1905 Retrieves the number of bits per color component used in shading calculations. @return the number of bits per color component, or -1 if not set
1906 Retrieves the number of bits per coordinate from the COSObject and logs its value. @return number of bits per coordinate or default (-1 if not found)
1907 Retrieves the action flags for form reset. @return integer value of action flags; default is 0 if not found
1908 Retrieves and returns the action flags for form submission. @return integer value representing action flags, or default 0 if not found
1909 Retrieves the page number associated with this target directory. @return the page number or -1 if not found
1910 Retrieves annotation index using predefined key A. @return annotation index or -1 if not a COSNumber
1911 Retrieves annotation flags from underlying COSDictionary. @return integer value representing the annotation's flags or default value if not found
1912 Retrieves the quality value (Q) of the free text annotation. @return integer Q value or 0 if not found in COSObject
1913 Retrieves the rotation setting of the PDF annotation. @return integer representing rotation angle or default value (0) if not found
1914 Checks if timestamp is required based on dictionary's FT value. @return true if timestamp is required (FT value not zero), false otherwise
1915 Retrieves the open count of outline items in a PDF document node. @return number of open outline items; defaults to 0 if not found
1916 Retrieves the quality or opacity of the form field. @return integer value representing Q (opacity) or default 0 if not found
1917 Retrieves the top index of displayed items in the list box. @return integer value representing the top index or default to 0 if not found
1918 Fetches COSObjects of a specific dictionary type. @param type Dictionary type to search for @return List of matching COSObjects or an empty list if none found
1919 Removes page-level resources from cache, excluding inherited ones.
1920 Retrieves color space resource by name. @param name unique identifier for the color space @return PDColorSpace object or null if not found @throws IOException if an error occurs during retrieval
1921 Fetches and returns an embedded file from EFDictionary. @return PDEmbeddedFile if found; otherwise, null
1922 Retrieves embedded file in DOS format. @return PDEmbeddedFile object if found; otherwise, null
1923 Retrieves the embedded MAC file from EF dictionary. @return PDEmbeddedFile object if found; otherwise, null
1924 Retrieves embedded file with UNIX specifications. @return Newly created PDEmbeddedFile if found; otherwise, null
1925 Retrieves the embedded file with Unicode support. @return PDEmbeddedFile object if found; otherwise, null
1926 Initializes AxialShadingContext with shading, color model, transforms and bounds. Calculates constants, transformations and color table for axial shading rendering. @param shading PDShadingType2 object containing shading parameters @param colorModel ColorModel used in the context of this shading @param xform AffineTransform object for transformation @param matrix Matrix object for additional transformations @param deviceBounds Rectangle defining the boundaries of the device @throws IOException if there's an issue with I/O operations during initialization
1927 Constructs a RadialShadingContext and initializes shading parameters, including coordinates, domain, extension, constants, and inverse transformations. @param shading Shading type 3 object containing shading information @param colorModel Color model used for the shading @param xform Affine transformation to apply @param matrix Matrix to be applied in calculations @throws IOException if there's an issue with I/O operations during construction
1928 Initializes the TriangleBasedShadingContext with PDF shading and color model. @param shading PDShading object for the context @param cm ColorModel to be used @param xform AffineTransform for transformations @param matrix Matrix for additional transformations @throws IOException if error occurs during initialization
1929 Initializes Type 1 shading context with transformations and domain settings. @param shading the Type 1 shading object @param colorModel the color model to use for shading @param xform the affine transformation matrix @param matrix the additional transformation matrix @throws IOException if an I/O error occurs during initialization
1930 Initializes PDFObjectStreamParser with a COSStream and COSDocument. @param stream input data stream to parse @param document associated COSDocument for context @throws IOException if parsing or validation of the stream fails
1931 Initializes PDCIDFontType0 object based on provided font dictionary and parent PDType0Font. Handles embedded CFF (Compact Font Format) or substitutes with fallback font if necessary. @param fontDictionary COSDictionary containing font information @param parent Parent PDType0Font object @throws IOException If input/output operations fail during font parsing
1932 Initializes PDCIDFontType2 with font dictionary and TrueTypeFont, handling embedded fonts and errors. @param fontDictionary PDF dictionary containing font info @param trueTypeFont object for font parsing, may be null for embedded font retrieval @throws IOException if font data is damaged or unreadable
1933 Reads and returns a CMap object from the provided base, handling both predefined and embedded CMap types. @param base the input data to be parsed into a CMap object (COSName for predefined or COSStream for embedded) @return the parsed CMap object; throws IOException if parsing fails or input is invalid @throws IOException if input/output operations fail, filters are invalid, or input type is unsupported
1934 Writes the body of a PDF document, managing objects and encryption. @param doc The COSDocument object to be written @throws IOException if I/O errors occur during writing
1935 Saves FDFDocument to a file using the provided filename. @param fileName The name of the file where the document will be saved @throws IOException If there is an error during writing operation
1936 Collects PDF document object if not already in collection; manages COSDictionary, COSObject, and COSArray types. @param base the COSBase object to be collected @return true if successfully added to collection, false otherwise
1937 Sets a new trailer dictionary and updates its origin document state. @param newTrailer the new COSDictionary object to set as the trailer
1938 Updates the document and sets origin state for COSUpdateInfo children. @param child a COSBase object to update; if it's a COSUpdateInfo, its origin doc state is set.
1939 Retrieves the value associated with a given name from this node or its children. @param name The key for which to retrieve the corresponding value. @return The value associated with the name, or null if not found. @throws IOException If there's an issue accessing the underlying PDF data.
1940 Retrieves a named object as string with fallback. @param name unique identifier for the dictionary object @param defaultValue value returned if key is not found or supported type @return String representation of the named object or defaultValue if not found/supported type
1941 Retrieves border effect style as a string. @return Style of the border effect, defaults to solid if not found
1942 Traverses up the structure to find and return the root of the tree. @return PDStructureTreeRoot if found, otherwise null
1943 Retrieves child elements associated with the structure node. @return List of child objects or an empty list if none found
1944 Retrieves encryption settings for the PDF document. @return PDEncryption object or null if not encrypted
1945 Prepares decryption for the PDF document by setting up security handler and access permissions. @throws IOException if there are issues with encryption dictionary, security handler setup, or input streams
1946 Reads and handles encoding for the font. Fetches predefined CMap or reads custom CMap, checks its validity. Also determines if descendant font is CJK based on system info.
1947 Repairs and validates the Length1 field of a Type 1 font. @param bytes byte array containing font data @param length1 initial value for Length1 field @return repaired or original Length1 value
1948 Repairs and validates the length2 parameter for a Type 1 font. @param bytes Font data byte array @param length1 First segment length @param length2 Second segment length to be repaired/validated @return Validated or repaired second segment length
1949 Retrieves the fractional display format for numerical values in PDF document. @return String representing the fractional display format, or a default value if not set
1950 Retrieves the thousands separator character used in numerical formatting. @return the thousands separator character, defaults to ',' if not set
1951 Retrieves the decimal separator used in number formatting. @return Decimal separator string, defaults to "." if not found
1952 Retrieves the label prefix string from the number format settings. @return Label prefix or a default space if not found.
1953 Retrieves label suffix string from number format settings. @return Suffix for numerical labels in PDF document, or " " if not found.
1954 Retrieves the label position to value from the COSDictionary object. @return Label position to value string, or a default if not found
1955 Overloaded version of getEmbeddedString. Retrieves an embedded string with a null default value. @param embedded dictionary to search in @param key unique identifier for the string object @return the string if it exists; otherwise, null
1956 Generates a priority queue of FontMatch objects based on compatibility with the provided descriptor and CID system info. @param fontDescriptor Font descriptor to match against @param cidSystemInfo Character set information for filtering @return PriorityQueue<FontMatch> sorted by compatibility score
1957 Validates the owner password for PDF documents based on encryption revision. @param ownerPassword byte array of the provided owner password @param user original user key bytes @param owner encrypted owner data @param permissions access permissions to validate @param encRevision document's encryption revision number @return true if owner password is valid, false otherwise @throws IOException for unknown encryption revisions
1958 Parses a CharSequence into an InstructionSequence using the provided syntax rules. @param text input to be processed @return the main instruction sequence derived from the input text
1959 Decrypts the given COSStream if necessary and handles metadata encryption. @param stream the stream to decrypt @param objNum the object number for decryption @param genNum the generation number for decryption @throws IOException if an error occurs during decryption or I/O operations
1960 Encrypts data in a COSStream and writes it to the raw output stream. @param stream COSStream containing data to be encrypted @param objNum unique object identifier for encryption @param genNum generation number of the object for encryption @throws IOException if an error occurs during input/output or encryption process
1961 Decrypts a COSString and returns the decrypted or original value based on encryption filter. @param string encrypted COSString object @param objNum unique object identifier @param genNum generation number of the object @return decrypted COSString or original if using identity filter
1962 Encrypts a given string and returns it as a COSBase object. @param string the input COSString to be encrypted @param objNum unique object identifier for encryption @param genNum generation number of the object for encryption @return encrypted COSString as a COSBase object @throws IOException if an error occurs during encryption or I/O operations
1963 Validates user password based on encryption revision and charset. @param password input password to validate @param encRevision encryption standard revision (5-6) @return true if the password is valid; false otherwise
1964 Locates and returns a FontBoxFont based on PostScript name, checking Type1, TrueType, and OpenType formats. @param postScriptName Unique font identifier @return Matching FontBoxFont or null if not found
1965 This method is responsible for processing and writing text content from a list of PositionWrapper objects. It handles sorting, spacing, line breaks, and paragraph formatting based on the provided conditions. The main functionality includes: - Iterating through each PositionWrapper object in the input data. - Determining the position and dimensions of the current character value. - Calculating expected start positions for the next word based on various spacing methods (wordSpacing and averageCharWidth). - Checking if the current text object is on the same line as the previous one, and handling line breaks accordingly. - Adding a word separator between words when necessary. - Writing paragraph starts and ends based on certain conditions. - Updating maximum and minimum values for line height and position tracking. - Handling various formatting and spacing adjustments based on the text direction and font properties.
1966 Retrieves a date from the dictionary using a given key, converting it to Calendar if possible. @param key unique identifier for the date object @return Calendar instance if conversion succeeds; otherwise, null
1967 Writes a token (COSBase object) to the PDF output stream. @param base The COSBase object to be written as a token @throws IOException if writing to the output stream fails
1968 Writes a COSBase object to an OutputStream. Handles various types and compression pooling. @param output the destination stream for writing data @param object the COSBase object to be written @param topLevel indicates if this is the top-level call in recursive processing @throws IOException if an I/O error occurs during writing or unknown object type encountered
1969 Displays text with custom positioning on the content stream. @param textWithPositioningArray array of strings and floats for text and positions @throws IOException if an I/O error occurs during the process
1970 Displays text on content stream, then writes an operator for showing text in PDF. @param text The input text to be displayed and shown in PDF @throws IOException If an I/O error occurs during the process
1971 Creates a PageDrawer with specified settings and annotation filter. @param parameters Object containing render settings for the PageDrawer. @return Initialized PageDrawer object.
1972 Constructs a new form XObject with the given parent PDF document. @param document The parent PDF document containing this form XObject.
1973 Initializes PDMetadata with a PDF document and input stream, sets metadata type and subtype. @param doc the PDF document to associate with metadata @param str the source of data for the metadata @throws IOException if an error occurs during initialization
1974 Initializes PDEmbeddedFile with given document and input stream. Sets the type to EMBEDDED_FILE. @param doc the PDF document to associate the embedded file with @param str the source of data for the embedded file @throws IOException if an error occurs during initialization
1975 Initializes PDEmbeddedFile with document, input stream, and filter. Sets the type to EMBEDDED_FILE. @param doc the PDF document @param input data source for the stream @param filter options applied during output stream creation
1976 Prepares an image object for embedding in a PDF document by compressing the input data and creating a PDImageXObject. @param byteArray raw image data to be compressed @param width pixel width of the image @param height pixel height of the image @param initColorSpace initial color space for the image object @return PDImageXObject ready for inclusion in a PDF document @throws IOException if input/output operations fail during compression or object creation
1977 Initializes an empty PDExportFormatAttributeObject with the specified owner. @param owner The entity responsible for this attribute object
1978 Retrieves and manages all attribute objects within this structure element. @return Revisions object containing PDAttributeObjects or an empty one if none exist
1979 Fetches normal appearance stream for given annotation. @param annotation PDF annotation object @return Normal appearance stream or null if unavailable
1980 Adds necessary font resources from annotations to the AcroForm's resources. @param acroFormResources The resources of the AcroForm. @param annotation The PDF annotation containing potential font resources.
1981 Retrieves and aggregates 'on' values from button element or its widgets. @return Set of unique 'on' values extracted from the element or widgets.
1982 Checks if this checkbox field is currently checked. @return true if its value equals the on-value, false otherwise
1983 Checks the PDF form field by setting its value to the on-value. @throws IOException if there is an error while retrieving or setting values
1984 Initializes FileSystemFontProvider and loads font files from the local system into cache. @param cache FontCache instance to store loaded font information.
1985 Initializes an FDFParser object with input data. Calls COSParser constructor. @param source InputStream for the FDF document; no decryption is applied @throws IOException if there's a problem reading from the source
1986 Initializes PDFParser with source and optional password. @param source input PDF document @param decryptionPassword password for encrypted documents (optional)
1987 Draws and customizes line endings for PDAnnotationLine objects in a PDF content stream. @param style Type of line ending to draw (e.g., arrow, diamond, circle) @param cs Content stream to draw on @param x, y Coordinates of the line ending's position @param width Width of the line ending shape @param hasStroke Whether to apply stroke to the shape @param hasBackground Whether to fill the shape with background color @throws IOException If an I/O error occurs while drawing
1988 Initializes a TilingPaint object with the given parameters and sets up the texture paint. @param drawer PageDrawer instance for drawing operations @param pattern PDTilingPattern object containing pattern details @param colorSpace Color space for the pattern @param color Pattern's color @param xform AffineTransform object for transformations @throws IOException if an I/O error occurs during processing
1989 Decodes and converts the PDImage to a BufferedImage with specified region and subsampling. @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
1990 Decodes and converts a PDImage to BufferedImage with optional color key mask. @param pdImage The image object to convert @param colorKey Array defining the color key mask values (can be null) @return Decoded and converted BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
1991 Manages and switches PDF resources for rendering. Fetches stream-specific or page resources, initializes if needed. @param contentStream the current stream being processed @return previous PDResources object or null
1992 Calculates and returns an AffineTransform for centering the overlay on a page. @param page The target PDF page to apply the overlay @param overlayMediaBox The media box of the overlay content @return An AffineTransform object for centering the overlay on the page
1993 Retrieves the rotated media box of a page if rotation angle is 90 or 270 degrees. @param page The PDF page to retrieve the media box from @return Rotated media box or original if no rotation needed
1994 Checks if the PDF element is marked using its logical structure metadata. @return true if marked, otherwise false
1995 Checks if the PDF document's marking dict uses user properties. @return true if UserProperties key exists and is true, otherwise false
1996 Checks if the PDF element is marked as suspect. @return true if element is marked as suspect, otherwise false
1997 Determines if mouse position tracking is enabled for this URI action. @return true if "IsMap" key exists and its value is true, otherwise false
1998 Retrieves the open state of the annotation popup. @return true if the popup is open, otherwise false
1999 Checks if the 'FD' (Fractional Digits) option is enabled in PDF number format settings. @return true if 'FD' is enabled, false otherwise
2000 Retrieves non-stroking overprint control setting from PDF dictionary. @return true if OP_NS is set to true in the COSDictionary; otherwise, returns stroking overprint control.
2001 Fetches an integer value from a nested dictionary using primary and secondary keys. @param embeddedDictionary Key for the outer COSDictionary. @param key Primary key for retrieval within the inner COSDictionary. @return Integer value or -1 if not found or invalid type.
2002 Retrieves the denominator value from numerical format settings in PDF document. @return the denominator integer value or -1 if not found or not a COSNumber
2003 Wraps output stream with predictor based on given decode parameters. @param out the original output stream @param decodeParams dictionary containing decoding information @return wrapped output stream or original if no prediction needed
2004 Fetches struct parents integer value from the PDF page.
2005 Fetches and returns bits per sample from PDF function object. @return Bits per sample value or -1 if not found
2006 Fetches the Marker Context Identifier (MCID) of the marked content reference. @return MCID integer value or -1 if not found
2007 Fetches the next key in the parent tree structure. Utilizes COSName.PARENT_TREE_NEXT_KEY as the identifier. @return Next integer key or -1 if not found
2008 Fetches the MCID (Marked Content Identifier) of the marked content. @return Integer MCID or -1 if not found in properties dictionary
2009 Fetches the line cap style integer value from the PDF dictionary. @return Line cap style integer or -1 if not found
2010 Fetches and returns the line join style as an integer value from the PDF dictionary. @return Line join style as an integer or -1 if not found
2011 Fetches the struct parent integer value from annotation data. @return Struct parent ID or -1 if not found
2012 Fetches and returns the integer value of COSName.P from the PDF signature configuration
2013 Fetches the maximum length constraint of the text field. @return Maximum length or -1 if not set
2014 Fetches an integer attribute from the COSDictionary. @param name key for the integer value @param defaultValue fallback value if not found @return integer value or defaultValue if not found
2015 Checks if the annotation is set to be invisible based on a specific flag. @return true if annotation is invisible, false otherwise
2016 Checks if the annotation is hidden by examining its flags. @return true if annotation is hidden, false otherwise
2017 Checks if the annotation is set to be printed in a PDF document. @return true if print flag is set, false otherwise
2018 Checks if zooming is disabled for the annotation. @return true if no zoom flag is set, false otherwise
2019 Checks if the 'no rotate' flag is set for the annotation. @return true if the flag is set, false otherwise
2020 Checks if the NO_VIEW flag is set for the annotation. @return true if NO_VIEW flag is set, false otherwise
2021 Checks if the annotation is set to read-only using a specific flag. @return true if read-only, false otherwise
2022 Checks if the annotation is locked based on a predefined flag. @return true if the lock flag is set, false otherwise
2023 Checks if the 'FLAG_TOGGLE_NO_VIEW' flag is set for the annotation. @return true if flag is set (annotation not visible), false otherwise
2024 Checks if the contents of the annotation are locked.
2025 Checks if the annotation is invisible by examining its flags. @return true if invisible, false otherwise
2026 Checks if the annotation is set to be hidden based on its COSDictionary data. @return true if flag for hidden is set, false otherwise
2027 Checks if the annotation is printed by examining its flags. @return true if the print flag is set, false otherwise
2028 Checks if zoom functionality is disabled for this annotation. @return true if zoom is not allowed, false otherwise
2029 Checks if no rotation flag is set for the annotation. @return true if no rotation flag is set, false otherwise.
2030 Checks if the annotation has the "no view" flag set. @return true if no view flag is set, false otherwise
2031 Checks if the annotation is read-only. @return true if read-only, false otherwise
2032 Checks if this annotation's 'Locked' flag is set in the PDF document. @return true if locked; false otherwise
2033 Checks if the Toggle No View flag is set for this annotation. @return true if flag is set, false otherwise
2034 Checks if annotation's contents are locked based on the F flag and FLAG_LOCKED_CONTENTS. @return true if contents are locked, false otherwise
2035 Checks if filtering is required based on seed value flags. @return true if filter flag is set, false otherwise
2036 Checks if subfilter is required in seed value attributes. @return true if flag for subfilter is set, false otherwise
2037 Checks if a digest method is required for the seed value. @return true if required, false otherwise
2038 Checks if the V flag is required in the seed value information. @return true if V flag is set, false otherwise
2039 Checks if the reason attribute is required in seed value. @return true if reason is required, false otherwise
2040 Checks if legal attestation is required for the digital signature. @return true if required, false otherwise
2041 Checks if additional revision information is required for the seed value. @return true if flag is set to add rev info, false otherwise
2042 Checks if subject flag is required in the certificate data. @return true if subject is required, false otherwise
2043 Checks if issuer flag is required in the certificate attributes
2044 Checks if OID (Object Identifier) is required in the certificate. @return true if OID is required, false otherwise
2045 Checks if Subject DN (Distinguished Name) flag is required in the certificate data. @return true if subject DN is required, false otherwise
2046 Checks if key usage flag is required in the certificate data field. @return true if key usage flag is set as required, false otherwise
2047 Checks if URL flag is set in certificate data field. @return true if URL flag is required, false otherwise
2048 Checks if the outline item's text is italicized. @return true if text is italicized, false otherwise
2049 Checks if the outline item's text is bold. @return true if bold flag is set, false otherwise
2050 Checks if signatures exist in the form fields of the PDF document. @return true if signatures exist, false otherwise
2051 Checks if the form field is append-only. @return true if append-only flag is set, false otherwise
2052 Determines if the button is a push button by checking its flag value. @return true if it's a push button, false otherwise
2053 Determines if this button is a radio button by checking specific flags. @return true if the button is a radio button, false otherwise
2054 Checks if sorting option is enabled for choice field. @return true if sorting is enabled, false otherwise.
2055 Checks if multiple selections are allowed in this choice field. @return true if multi-select is enabled, false otherwise
2056 Checks if spell-check is disabled for this choice field. @return true if spell-check is disabled, false otherwise
2057 Checks if the selection change should be committed immediately in the PDF form. @return true if commit on selection change is enabled, false otherwise
2058 Checks if the choice field allows multiple selections (combo). @return true if combo flag is set, false otherwise
2059 Checks if the combo box field is editable. @return true if editable, false otherwise
2060 Checks if the field is read-only based on its flags. @return true if read-only flag is set, false otherwise
2061 Checks if the PDF field is required to be filled out. @return true if required, false otherwise
2062 Checks if field has 'no export' flag set. @return true if no export flag is set, false otherwise
2063 Checks if radio buttons in the form operate in unison. @return true if radios are in unison, false otherwise
2064 Checks if the text field allows multiple lines of input. @return true if multiline, false otherwise
2065 Checks if the text field has a password character display flag set. @return true if password character display is enabled, false otherwise
2066 Checks if file selection flag is set in the PDF text field. @return true if flag is set (file select enabled), false otherwise
2067 Checks if spell-check is disabled for this text field. @return true if spell-check is disabled, false otherwise
2068 Checks if the DO NOT SCROLL flag is set for this text field. @return true if flag is set (scrolling disabled), false otherwise
2069 Checks if the COMB flag is set in the text field. @return true if COMB flag is set, false otherwise
2070 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
2071 Prepares the document for decryption using public key cryptography. This method checks if the provided decryption material is compatible, retrieves encryption settings, and handles recipient information. It also computes the encryption key and sets up access permissions based on the enveloped data and certificate in the decryption material. @param encryption The encryption dictionary containing encryption settings. @param decryptionMaterial The decryption material used for retrieving the certificate and private key. @throws IOException If there are issues with the provided decryption material, encryption settings, or recipient information.
2072 Retrieves the owner key for document encryption. @return The encrypted owner key or null if not found; adjusted size based on revision number. @throws IOException If an I/O error occurs during retrieval or copying of bytes.
2073 Retrieves and prepares the user encryption key based on PDF revision. @return User encryption key as byte array or null if not found @throws IOException for input/output errors during retrieval or copying
2074 Calculates displacement vector based on character width. @param code The character code to calculate displacement for @return Displacement vector as a new Vector object
2075 Calculates the total width of a given string in PDFont's encoding. @param text The input string @return Total width of the encoded string @throws IOException If an I/O error occurs during encoding or reading
2076 Retrieves a PDF pattern by its name from the resources dictionary. @param name unique identifier for the pattern @return PDAbstractPattern object if found; otherwise, null @throws IOException if an error occurs during pattern creation
2077 Retrieves a PDShading object based on the given name. @param name unique identifier for the shading resource @return PDShading object or null if not found, throws IOException for errors
2078 Retrieves or creates a PDShading object from the shading dictionary. @return PDShading object or null if not found, throws IOException for errors
2079 Checks if an outline item node in a PDF document is open. @return true if any child outline items are open; false otherwise
2080 Creates a PDField based on the type found in the provided COSDictionary. Handles various field types including choice, text, signature, and button subtypes. @param form parent AcroForm structure @param field COSDictionary containing field definitions @param parent the parent PDNonTerminalField (if any) @return a PDField object representing the appropriate field type or null if invalid
2081 Retrieves a PDXObject from the resources dictionary using given name. @param name COSName identifier for the object @return PDXObject if found; otherwise, null
2082 Initializes GouraudShadingContext for PDF document rendering. @param shading PDShading object representing the shading technique @param colorModel ColorModel for managing colors in graphics @param xform AffineTransform object for transforming coordinates @param matrix Matrix object for mathematical operations @throws IOException if there is an error initializing resources
2083 Creates an input stream using default decoding options. @return Decoded COSInputStream or throws IOException if raw input creation fails
2084 Parses and retrieves an object from the specified stream. Handles compressed object streams and manages parsing errors. @param objstmObjNr stream object number @param key unique identifier for the object @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
2085 Retrieves the page contents as an InputStream. Uses getContentsForRandomAccess() for content retrieval. @return InputStream containing page content or empty if not found @throws IOException if retrieving or handling page content fails
2086 Constructs a PDCIDFontType2 from a font dictionary and parent type 0 font. @param fontDictionary PDF dictionary containing font info @param parent PDType0Font for additional font data, may be null @throws IOException if font data is damaged or unreadable
2087 Generates and returns a PDCIDFontType2 object for complex character set representation. @return PDCIDFontType2 instance for text rendering in PDF documents @throws IOException if font data is damaged or unreadable
2088 Collects and processes COSArray objects, managing updates and relationships. @param array the COSArray object to be processed @return true if any descendant demands a parent update; false otherwise
2089 Collects and returns all COSBase objects in the collection, initializing if needed. @return Set of COSBase objects in this collection
2090 Adds object to the COSArray, managing direct and indirect references. @param object COSBase object to be added; may be a dictionary or array with a key
2091 Adds a COSBase object to the collection at specified index. Updates state if needed. @param i position in the array for new object @param object the COSBase object to be added, can be COSDictionary or COSArray
2092 Sets a COSBase object at a specific index in the array. Handles indirectly referenced dictionaries and arrays differently. @param index position to set the object @param object the COSBase object to be added or updated
2093 Sets or removes an item in the dictionary based on the input value. @param key COSName identifier for the item @param value COSBase object to be set; if null, item is removed
2094 Updates document state using an array of child objects.
2095 Retrieves the role map from the structure tree root. @return Role map as a Map or an empty map if not found.
2096 Adds object to pool, handles object streams and key updates. @param key unique identifier for the object @param base PDF document object to be managed @return base object after potential modifications
2097 Protects the PDF document with a given protection policy. Initializes encryption and sets up a security handler based on the provided policy. @param policy The protection policy to be enforced @throws IOException if no suitable security handler is found for the policy
2098 Retrieves the glyph name for a given character code using Unicode mapping. @param code integer character code @return corresponding glyph name or ".notdef" if not found
2099 Maps character codes to glyph identifiers based on font embedding and availability of mappings. @param code input character code @return corresponding glyph identifier or default value if not found
2100 Retrieves the Mac subtype from embedded file parameters. @return Mac subtype string or null if not found
2101 Retrieves the Mac creator attribute from embedded file parameters. @return Mac creator string if it exists; otherwise, null
2102 Retrieves the Mac OS resource fork embedded within a PDF document. @return String representing the Mac resource fork or null if not found
2103 Maps a base font to a CID font based on descriptor and system info. @param baseFont Font identifier @param fontDescriptor Describes the font's features @param cidSystemInfo Character set information for filtering @return CIDFontMapping object or last-resort fallback if not found
2104 Validates the owner password using ISO-8859-1 charset encoding. @param password owner password as a string @return true if owner password is valid, false otherwise @throws IOException for encryption errors or unknown revisions
2105 Extracts text from specific PDF regions and writes them to their respective outputs.
2106 Retrieves a date from the dictionary using a given string key, converting it to Calendar if possible. @param key unique identifier for the date object as a string @return Calendar instance if conversion succeeds; otherwise, null
2107 Retrieves a date from the dictionary. Uses default if not found. @param key unique identifier for the date object. @param defaultValue value to return if date is not found. @return Calendar instance or defaultValue if date is not found.
2108 Retrieves the creation date of the PDF document as a Calendar object. @return Calendar instance with creation date if available; otherwise, null
2109 Retrieves and returns the modification date of the PDF document. @return Calendar instance representing the modification date; otherwise, null
2110 Retrieves and returns the creation date of the PDF annotation. @return Creation date as a Calendar object, or null if not found or invalid @throws IOException if there's an error accessing the annotation data
2111 Retrieves and returns the creation date of the annotation. @return Creation date as a Calendar object or null if not found
2112 Retrieves the date of the digital signature from the PDF document. @return Calendar instance containing the signature date; otherwise, null
2113 Writes a token (Operator) to the output stream. Uses writeObject() to handle the writing process. @param op the Operator object to be written @throws IOException if writing to the output stream fails
2114 Writes prepared COS objects to a provided stream, setting up the object stream and applying compression. @param stream The target COSStream for writing data @return The modified COSStream with written data @throws IOException If an error occurs during writing or creating output streams
2115 Writes a COSDictionary to an OutputStream, handling keys and values, and managing dictionary formatting. @param output destination stream for writing data @param cosDictionary the dictionary object to be written @throws IOException if an I/O error occurs during writing
2116 Initializes a new transparency group with the given PDF document. @param document The parent PDF document containing this transparency group
2117 Constructs a new appearance stream for interactive annotations in the given PDF document. @param document The parent PDF document containing this appearance stream
2118 Creates a PDImageXObject from a BufferedImage with JPEG encoding. @param document PDF document to add the image to @param image Input BufferedImage object @param quality Compression quality (0-1) for JPEG encoding @param dpi Desired DPI for the output JPEG @return PDImageXObject with encoded image @throws IOException if input/output operations fail
2119 Validates if provided value is a valid option for the button field. @param value The input value to validate @throws IllegalArgumentException If value is not valid for the field
2120 Loads and parses an FDF document from a file. @param file The source FDF document as a File object @return Parsed FDFDocument or null if parsing fails @throws IOException If there's an issue reading the file or parsing its content
2121 Loads and parses an FDF document from input stream. @param input InputStream for the FDF document @return Parsed FDFDocument or null if parsing fails @throws IOException if there are issues with reading or parsing
2122 Initializes PDFParser with input document and no decryption password. @param source input PDF document
2123 Constructs a TilingPaint object with default color space and color. @param drawer PageDrawer instance for drawing operations @param pattern PDTilingPattern object containing pattern details @param xform AffineTransform object for transformations @throws IOException if an I/O error occurs during processing
2124 Fetches decoded image with full dimensions and no subsampling. @return Decoded BufferedImage object @throws IOException If an error occurs during decoding or reading input stream
2125 Decodes LZW-compressed data and wraps output stream with predictors based on given parameters. @param encoded InputStream containing compressed data @param decoded OutputStream for decompressed data @param parameters Dictionary containing decoding information @param index Parameter index @return DecodeResult object containing decoding results
2126 Appends a marked content kid to the structure using its MCID. Throws exception if MCID is invalid. @param markedContent object containing the MCID for appending
2127 Fetches and sets the Unicode (UCS-2) CMap for specific font types. @throws IOException if an I/O error occurs during fetching or construction of the CMap
2128 Checks if a text field should be combined based on specific conditions. @return true if comb conditions are met, false otherwise
2129 The Java method `prepareForDecryption` is an important part of the PDF decryption process. This method takes in a PDEncryption object, a COSArray object containing document ID bytes, and DecryptionMaterial for decryption. It performs various checks and computations to prepare for the decryption process based on the encryption version and type used in the PDF document. The method first verifies that the provided DecryptionMaterial is compatible with the document. If not, it throws an IOException. Then, depending on the encryption version (4 or 5), it sets stream filter name and string filter name from the PDEncryption object. It also determines whether AES encryption is used by checking the standard crypt filter dictionary in the encryption object. The method then retrieves document ID bytes using a helper function `getDocumentIDBytes`. It checks if metadata was encrypted during the encryption process and obtains user key and owner key from the PDEncryption object. Based on the encryption revision (5 or 6), it sets the password character set to UTF-8 and retrieves additional encryption keys. If the encryption revision is 6, it performs SASLprep querying on the password. The method then checks if the provided password matches either the owner password or user password. Depending on which password matches, it sets the current access permission accordingly. It computes an encrypted key using a helper function `computeEncryptedKey` based on various parameters such as the password bytes, encryption keys, permissions, document ID bytes, and whether metadata was encrypted. Finally, if the encryption revision is 5 or 6, it calls another method `validatePerms` to validate the permissions with the encryption object and whether metadata was encrypted. The resulting encrypted key is then set for decryption.
2130 Calculates and returns the width of a space character in PDFont. @return Space character's width as float, or 250 if calculation fails.
2131 Checks if font has fixed pitch. @return True if font has fixed pitch, false otherwise
2132 Checks if font descriptor flag indicates serif style. @return True if serif style, false otherwise
2133 Checks if the font descriptor has the symbolic flag set.
2134 Checks if the font descriptor flag indicates that it's a script. @return True if the font is a script, false otherwise
2135 Checks if the font descriptor flags indicate that the font is non-symbolic. @return True if the font is non-symbolic, false otherwise
2136 Checks if the font descriptor indicates an italic style. @return True if the italic flag bit is set, false otherwise
2137 Checks if all characters in the font are capitalized. @return True if all cap flag is set, false otherwise
2138 Checks if the small capitals flag is set in font descriptor. @return True if small caps are enabled, false otherwise
2139 Checks if the force bold flag is set in font descriptor flags. @return True if force bold is enabled, false otherwise
2140 Retrieves and validates a PDF pattern for the given color. @param color input color to find pattern for @return PDAbstractPattern object if found; otherwise, throws IOException
2141 Creates a PDField object based on the definitions in the provided COSDictionary. @param form Parent AcroForm structure. @param field COSDictionary containing field definitions. @param parent The parent PDNonTerminalField (if any). @return A PDField object representing the appropriate field type or null if invalid.
2142 Converts input stream data into a text string. @return String representation of the input stream or an empty string if IOException occurs
2143 Creates an input stream using default decoding options. @return Decoded COSInputStream or throws IOException if creation fails
2144 Collects and processes shading patches from a COSStream. @param xform Affine transformation to apply; matrix for coordinate conversion @param matrix Transformation matrix for coordinates @param controlPoints Number of control points in the patch @return List of Patch objects or an empty list if no patches found @throws IOException for input/output errors or missing Decode entry
2145 Creates a descendant CID font from given dictionary and parent type 0 font. @param dictionary font info in PDF format @param parent additional font data, may be null @return new PDCIDFontType0 or PDCIDFontType2 object based on subtype @throws IOException if font data is invalid or unreadable
2146 Provides an Iterator over all COSBase objects in this collection. @return An Iterator over elements of type COSBase
2147 Adds a COSObjectable to the array as its corresponding COSBase object. @param object the COSObjectable to be added; can be null, in which case it's ignored
2148 Expands collection to hold specified number of elements, adding a given object. @param size desired minimum capacity @param object COSBase object to be added repeatedly until capacity is reached
2149 Clears array and populates with new float values. @param value Array of floating-point numbers to be added to the COSArray
2150 Parses and constructs a COSArray from the PDF source, handling objects and indirect references. @return constructed COSArray object or null if parsing fails @throws IOException if an I/O error occurs while reading from the source
2151 Constructs a cross-reference stream, sets its properties, and returns it. @return COSStream object representing the constructed cross-reference stream @throws IOException if there's an error creating or writing to the output stream
2152 Initializes a PDRange object with default values [0,1]. Uses COSArray to store these values efficiently for PDF processing.
2153 Fetches and constructs the encode array for PDF function type 0. @return COSArray containing encoded values, or creates a default array if null
2154 Initializes Function Type 2 with control points and exponent from given COSBase object. @param function COSBase data structure containing function parameters
2155 Initializes an empty FDFOptionElement with two blank strings in its COSArray representation.
2156 Initializes font settings array with default values: null and size 1.0.
2157 Retrieves the white point coordinates for color space operations. If not found, defaults to (1, 1, 1) and adds to dictionary. @return White point as a PDTristimulus object.
2158 Retrieves black point value from the color space dictionary. If not found, creates and returns a default black point (0, 0, 0). @return PDTristimulus object representing black point values
2159 Converts color components to a COSArray for PDF handling, adds pattern name if present. @return COSArray representation of the color components and pattern name.
2160 Initializes a PDDeviceN object with default values for color space definition.
2161 Initializes PDGamma with zero RGB color components, setting up a COSArray for color data storage.
2162 Returns the alternate color space for this PDF stream. @return a PDColorSpace object representing the alternate color space @throws IOException if an error occurs during creation of the color space
2163 Initializes PDIndexed object with default values for an indexed color space in PDF.
2164 Creates a default range array for LAB color space. @return COSArray with preset values (-100 to 100) for L and A components.
2165 Initializes a color pattern for PDF document with given resources. @param resources the resources associated with the document
2166 Initializes a PDSeparation object with default values for color separation in PDF documents.
2167 Initializes PDTristimulus with default X, Y, Z tristimulus values of 0.0.
2168 Initializes a PDTristimulus object with up to 3 tristimulus values from an array. @param array float[] containing X, Y, Z color values (maximum of 3)
2169 Sets the transformation matrix for the form XObject using a given AffineTransform. @param transform The AffineTransform object containing the transformation data to be applied
2170 Creates a PDImageXObject from a byte array and specifies its color space based on the image components. @param document PDF document to which the image belongs @param byteArray input data for the image @return PDImageXObject with specified dimensions, color space, and compression type @throws IOException if there's an error reading or handling the input stream
2171 Transforms single values into a COSArray object for PDF manipulation. @return COSArray containing transformed floating-point numbers from the 'single' array.
2172 Sets a COSBase object at a specific index in the array. Critical for managing COSObjectable elements in the collection. @param index position to set the object @param object the COSObjectable to be added or updated; null allowed
2173 Sets an integer value at a specific index in the array.
2174 Sets a named COSBase object at a specific index in the array using a given string. @param index position to insert the object @param name the input string for the COSName
2175 Sets a String value at a specific index in the array. Creates a new COSString object if input is not null. @param index position to set the string @param string the input string or null
2176 Sets the minimum value of the numerical range in the PDF structure. @param min The new minimum value for the range
2177 Sets the maximum value of the numerical range and updates the corresponding COSArray. @param max The new maximum value for the range
2178 Sets the x-coordinate of the lower left corner of the rectangle. @param value new x-coordinate value
2179 Sets the lower left y-coordinate of the rectangle. @param value The new y-coordinate value to set for the lower left corner
2180 Sets the x-coordinate of the upper right corner of the rectangle. @param value The new x-coordinate value for the upper right corner.
2181 Sets the upper right y-coordinate of the rectangle in PDF document
2182 Sets a color at a specific index in the PDF document's color array. @param index position to set the color @param colour PDGamma object representing the color or null for none
2183 Decrypts each object in a COSArray and sets it back to the array. @param array the input COSArray @param objNum object number for decryption @param genNum generation number for decryption
2184 Sets and encodes the given string as the first element of the FDF option. @param opt the input string to be encoded and set as an FDF option
2185 Sets the default appearance string of the FDF option. @param da the new default appearance string for this option
2186 Sets the font size in the PDF document settings. @param size new font size to be applied
2187 Sets the DeviceN color space attributes and updates the internal COSArray. @param attributes The PDDeviceNAttributes object to be set; null removes existing attributes
2188 Sets the alternate color space for this device and updates the COS object representation. @param cs the new PDColorSpace to be set as alternate; nullable
2189 Sets the red component of the RGB color value. @param r The floating-point number representing the red component (0.0 - 1.0)
2190 Sets the green color component with gamma correction in the RGB array.
2191 Sets blue color component with gamma correction. @param b blue color value
2192 Sets the range for a color component in PDF stream. Extends array if needed. @param range PDRange object containing min and max values @param n Index of the color component
2193 Sets and updates the base color space for this PDIndexed object. @param base the new PDColorSpace to be used as the base color space
2194 Sets the colorant name in the PDF document. @param name new colorant name as a string
2195 Sets the alternate color space for this PDF document and updates its COS object representation. @param colorSpace the new alternate color space to be set (null indicates no alternate color space)
2196 Sets the X tristimulus value of the color. @param x the new X tristimulus value to be stored
2197 Sets the Y tristimulus value in the three-dimensional color space.
2198 Sets the Z tristimulus value in the color space. @param z The new Z value
2199 Sets or removes an item in the dictionary from a COSObjectable object. @param key COSName identifier for the item @param value COSObjectable to be converted and set; if null, item is removed
2200 Sets a boolean value in the dictionary under the specified key. @param key String identifier for the item @param value The boolean to be set
2201 Sets or removes a boolean item in the dictionary based on the input value. @param key Identifier for the boolean item @param value Boolean to be set; if false, item is removed
2202 Sets or removes an item in the dictionary using a string key and COSBase object. @param key String identifier for the item @param value COSBase object to be set; if null, item is removed
2203 Sets a named item in the dictionary with an optional string value. @param key COSName identifier for the item @param value String to be converted into a COSName; if null, removes the item
2204 Sets a string item in the dictionary. If value is null, removes the item. @param key COSName identifier for the item @param value String to be set; if null, item is removed
2205 Sets an integer value in the dictionary using a specified key. @param key COSName identifier for the item @param value Integer to be stored in the dictionary
2206 Sets a long integer value in the dictionary using a given key. @param key COSName identifier for the item @param value Long integer to be stored
2207 Sets a floating-point number in the dictionary using a given key. @param key COSName identifier for the item @param value Floating-point number to be stored
2208 Creates a COSStream from the given dictionary and input data. @param dictionary COSDictionary containing stream settings @param startPosition starting position of stream in document @param streamLength length of the stream @return initialized COSStream object for PDF processing
2209 Sets or removes the encryption dictionary in the document's trailer. @param encDictionary the new encryption dictionary; if null, it is removed
2210 Sets or removes the document ID in the PDF trailer dictionary. @param id COSArray object containing document ID; if null, ID is removed
2211 Wraps page content in a save/restore pair (q/Q) to create an isolated environment for adding content. @param page the PDF page to be wrapped @throws IOException if there's an error creating streams or writing to them
2212 Updates parent entry in array with new parent and structure type. @param kArray target COSArray to modify @param newParent new COSDictionary object to set as the parent @param newStructureType new COSName object for the structure type, can be null
2213 Brute forces the search for a PDF trailer dictionary containing root and info keys. @param trailer Output COSDictionary to store found objects if successful @return true if both root and info dictionaries are found, otherwise false
2214 Searches and compares COS objects for document catalog & info dictionaries. Sets the newer versions of these objects in the trailer dictionary if found. @param trailer COSDictionary to store the identified objects @return true if a document catalog object was found, false otherwise @throws IOException if an I/O error occurs during search operation
2215 Parses PDF document's trailer and root, sets up document structure, and marks parsing as done. @throws IOException if the root object specification is missing in the trailer.
2216 Parses the next token from the PDF stream, handling different data types and operators. @return The parsed object or operator; may be null if end of file is reached or input is invalid. @throws IOException if an I/O error occurs during parsing.
2217 Initializes writing process for a PDDocument, sets up encryption and ID for the document, and prepares it for signing or incremental updates. @param doc the PDF document to be written @param signInterface interface for signing operations; may affect encryption settings @throws IOException if there are issues with accessing security handlers or writing data
2218 Retrieves and initializes the document information from the trailer dictionary. @return PDDocumentInformation object containing metadata attributes
2219 Sets and updates the document information in PDDocument's trailer
2220 Initializes the catalog dictionary for a PDF document and sets it as its root object. @param doc The PDDocument to associate with this catalog
2221 Retrieves thread list from PDF document catalog. If none exists, creates a new one. @return List of PDThread objects, potentially empty but never null
2222 Retrieves or initializes document catalog additional actions. @return PDDocumentCatalogAdditionalActions object for managing actions.
2223 Adds an output intent to the document catalog's COSArray. Manages creation and updates of output intents. @param outputIntent PDOutputIntent object containing output intent data
2224 Initializes the name dictionary for a PDF document catalog. @param cat PDDocumentCatalog object to associate with this name dictionary
2225 Sets or removes the crop box for this PDF page. @param cropBox PDRectangle to set as crop box; if null, crop box is removed
2226 Retrieves or creates additional actions for the PDF page. @return PDPageAdditionalActions object containing page actions.
2227 Initializes an empty page tree for a PDF document and sets its basic structure.
2228 Extracts and validates child nodes from a given PDF node. @param node COSDictionary containing potential child nodes (KIDS) @return List of validated COSDictionaries, handles null entries
2229 Clears all elements and updates document state. If a parent dictionary is present, changes the item from single to an array.
2230 Converts page labels to a COSDictionary object for PDF representation. @return COSDictionary containing the page labels and their corresponding indices
2231 Initializes a complex file specification object for PDF context. Sets the type of the file specification to FILESPEC in its dictionary.
2232 Initializes a complex file specification with an optional dictionary. @param dict existing COSDictionary; if null, creates a new one and sets its type to FILESPEC
2233 Sets and updates the range values in this PDFunction object. @param rangeValues COSArray of range values to be set
2234 Sets and updates the domain values for this PDFunction object in both local and COSDictionary. @param domainValues array of domain values to be set
2235 Sets and updates the encoding values for this Type 0 PDF function. @param encodeValues COSArray of encoding data; critical for value transformation
2236 Sets and updates the decode values in the PDF function dictionary. @param decodeValues COSArray of decoded values to be set
2237 Sets or removes an attribute in the PDF document dictionary. @param attrName attribute name as a string @param attrValue COSBase object to be set; if null, attribute is removed
2238 Removes a specific attribute from the structure element's COSObject. @param attributeObject the object to be removed
2239 Updates the revision number in an attribute object's array or initializes a new one. @param attributeObject The object containing the attribute to be updated
2240 Adds a class name to the PDF structure element and updates its revision number. @param className the name of the class to be added; ignored if null
2241 Removes a class name from the COSArray or sets it to null based on conditions. @param className string representation of the class name to remove
2242 Manages and updates child elements (kids) in the structure node's COSDictionary. @param object COSBase object to be added as a kid; ignored if null
2243 Inserts a new child node before a reference node in the structure hierarchy. @param newKid COSBase object for the new child node @param refKid Reference to the existing child node before which insertion occurs
2244 Removes a child element from the structure node's kids list. @param object COSBase object to be removed @return true if removal was successful, else false
2245 Sets or removes the K attribute in the COSDictionary of this object. @param k COSBase object to be set; if null, item is removed
2246 Sets a new user property value and updates the document structure accordingly. @param value The updated COSBase object for the user property
2247 Retrieves or sets the default guideline color from/in the COSDictionary. @return PDColor object representing the guideline color.
2248 Retrieves or creates a line dash pattern for PDF guidelines. @return PDLineDashPattern object representing the dash pattern
2249 Sets or removes the line dash pattern for guidelines in PDF documents. @param dashArray COSArray object containing dash pattern; if null, removes the pattern
2250 Sets the cryptographic filter method in the dictionary. @param cfm COSName identifier for the method
2251 Sets the encryption filter for PDF document. @param filter name of the encryption filter to be applied
2252 Sets the owner encryption key in the PDF document's dictionary. @param o byte array representing the encryption key for owners
2253 Sets the user encryption key in the PDF document's security dictionary. @param u byte array representing the user encryption key @throws IOException if an error occurs during the operation
2254 Sets the owner encryption key in PDF document dictionary
2255 Sets the user encryption key in PDF document's dictionary. @param ue byte array representing the user encryption key @throws IOException if there's an error setting the encryption key
2256 Sets the encryption recipients for the PDF document. @param recipients array of byte arrays representing recipient keys @throws IOException if there's an issue with COSArray operations
2257 Sets or updates the crypt filter dictionary for PDF encryption settings. @param cryptFilterName COSName identifier for the crypt filter @param cryptFilterDictionary PDCryptFilterDictionary containing encryption settings
2258 Sets or removes a stream filter name in the document's dictionary.
2259 Sets the string filter name in the encryption dictionary for PDF documents. @param stringFilterName COSName object representing the new string filter name
2260 Sets document permissions using a byte array. @param perms byte array representing permissions to be set
2261 Removes V4/5 filters from the PDF document's encryption settings.
2262 Initializes a new empty FDFAnnotation with TYPE set to ANNOT
2263 Sets the color of the annotation using RGB components from a given Color object. @param c Color object to extract RGB values; if null, removes the color item
2264 Sets rich content for annotation using provided string. @param rc the rich content to be added; if null, removes existing content
2265 Sets the interior color of the circular annotation in PDF. @param color Color object to set; if null, removes the item from dictionary
2266 Sets the callout property of the free text annotation using a float array. @param callout Array defining the points for the callout line
2267 Sets the coordinates of a line annotation in PDF document. @param line Array containing the x and y coordinates of the line
2268 Sets or removes the interior color of the line annotation in the PDF document. @param color Color object to be set; if null, interior color is removed
2269 Sets the horizontal offset for a line caption in an FDFAnnotationLine object. @param offset Distance to shift the caption horizontally from its default position
2270 Sets the vertical caption offset for a line annotation in PDF document. @param offset float value representing the vertical offset
2271 Sets polygon vertices in FDF annotation using float array.
2272 Sets or removes the interior color of this polygon annotation in PDF context. @param color Color object to set as interior; if null, interior is removed
2273 Sets the vertex coordinates of the polyline annotation in PDF document. @param vertices Array of float values representing vertex coordinates.
2274 Sets the interior color of the polyline annotation using a given Color object. @param color the Color object to extract RGB components from; if null, removes the interior color
2275 Sets the interior color of the square annotation using a Color object. @param color Color object representing the desired interior color; if null, removes the color
2276 Sets the coordinates of the text markup annotation using a float array. @param coords Array containing the coordinate values for the annotation
2277 Sets or removes the document ID in the FDF dictionary.
2278 Sets or removes the DIFFERENCES stream in the FDF document.
2279 Sets the value of the field with COS object conversion. @param value input data to be converted and set (String, List<String>, or COSObjectable) @throws IOException if value type is unsupported for field import
2280 Sets the COSBase value of the form field in the FDF document.
2281 Sets the field flags for this FDFField instance. @param ff Integer representing the field flags to set; if null, clears existing flags
2282 Sets the field flags for this FDFField instance. If ff is null, removes the flag. @param ff Integer representing new field flags; if null, flag is removed
2283 Sets the clear field flags for the form field. @param ff Integer representing new clear field flags; null to remove existing flags
2284 Sets widget field flags using a given integer value. Null input removes the flag. @param f Integer value for field flags; null to remove
2285 Sets the widget field flags for this FDFField instance. @param ff Integer representing the field flags; if null, removes existing flags
2286 Sets the clear widget field flags for this FDFField object. @param ff Integer representing new field flags; if null, removes item from dictionary
2287 Sets the rich text value for the form field using a COSString object. @param rv COSString containing rich text; if null, removes the item
2288 Sets the rich text value for the form field using a COSStream object. @param rv COSStream containing the rich text value to be set
2289 Sets the 'before' JavaScript action in FDF context. Encodes and stores input string. @param before JavaScript code to be executed before an event
2290 Sets the JavaScript action to be executed after the current one. @param after The string representation of the JavaScript action
2291 Initializes PDFont object with base settings for a new PDF font. Sets up dictionary and toUnicodeCMap, and initializes other fields.
2292 Initializes a new PDF font descriptor with its type set to FONT_DESC.
2293 Sets or removes the font name in the PDF document's descriptor. @param fontName new font name; if null, removes existing font name
2294 Sets the font family in the PDF document's font descriptor. @param fontFamily String representing the font family; if null, removes the entry
2295 Sets the font stretch attribute in PDF document's font descriptor. @param fontStretch desired font stretch value; null to remove attribute
2296 Sets the font bounding box in the PDF document's dictionary. If a rectangle is provided, its dimensions are stored; otherwise, removes the item from the dictionary. @param rect PDRectangle object containing dimensional data; if null, removes the font bounding box item
2297 Sets or removes the character set in the font descriptor dictionary. @param charSet string representing the character set; if null, entry is removed
2298 Initializes font encoding with base and difference settings. @param baseEncoding COSName of the base encoding (Standard, WinAnsi, etc.) @param differences Array of encoding differences to apply
2299 Sets gamma correction value in the color space dictionary.
2300 Retrieves the gamma correction values for RGB color space. @return PDGamma object containing gamma correction values.
2301 Sets or removes the gamma correction values from this color space's dictionary. @param gamma PDGamma object containing gamma values; if null, removes gamma values
2302 Sets or removes the transformation matrix in the color dictionary. @param matrix 3x3 Matrix object; if null, item is removed from dictionary
2303 Retrieves and creates colorant separations for the DeviceN color space. @param resources associated PDF resources for management @return map of colorant names to their corresponding PDSeparation objects
2304 Initializes a transparency group with default settings.
2305 Initializes an optional content membership dictionary with a TYPE of OCMD.
2306 Sets or removes the document's visibility policy using a COSName identifier.
2307 Sets the transformation matrix for this pattern in PDF graphics. @param transform AffineTransform object to set as the matrix
2308 Sets or removes the bounding box of the tiling pattern in the PDF document. @param bbox Rectangle object representing the bounding box; if null, removes the existing one
2309 Sets and updates the background property in the shading dictionary. @param newBackground COSArray object representing the new background settings.
2310 Sets or removes the bounding box for shading properties in PDF documents. @param newBBox PDRectangle object; if null, item is removed from dictionary
2311 Sets or removes the color space for shading in PDF documents. @param colorSpace object defining the color space; if null, removes existing color space
2312 Sets the shading functions in the PDF document and updates the COSDictionary object. @param newFunctions array of new shading function objects to be set
2313 Sets the transformation matrix for the Type 1 shading. @param transform AffineTransform object containing the matrix values
2314 Sets and updates the shading domain with a new COSArray.
2315 Sets and updates the extend property for Type 2 shading in PDF document.
2316 Sets and updates the shading domain in PDF document
2317 Sets and updates the coordinates in the PDF document shading properties
2318 Sets and updates decode values for shading in PDF documents
2319 Initializes the extended graphics state dictionary for a PDF document.
2320 Sets the blend mode in the dictionary using a COSName identifier and its corresponding value. @param bm BlendMode object to be set
2321 Sets or removes a float item in the dictionary based on the input value. @param key Unique identifier for the item @param value Float object to be set; if null, item is removed
2322 Sets or removes the transfer function in the extended graphics state dictionary.
2323 Sets or removes the transfer function in the extended graphics state dictionary. @param transfer2 COSBase object for the transfer function; if null, it's removed.
2324 Sets or removes the 'T' item in the action dictionary based on input value. @param t COSBase object to be set; if null, item is removed.
2325 Sets or removes the 'H' flag in the action dictionary to hide/show elements.
2326 Sets or removes form fields in the PDF action using a COSArray. @param array COSArray containing field identifiers; if null, all fields are removed
2327 Sets the sound content associated with the PDF action. @param sound COSStream object representing the sound data
2328 Sets form fields in the PDF action using COSArray input.
2329 Sets or removes the destination item in the PDF action dictionary.
2330 Sets or removes the B item in the PDF action dictionary based on the input value. @param b COSBase object to be set; if null, item is removed
2331 Sets the relationship value of the target directory to either 'P' (parent) or 'C' (child). @param relationship COSName object representing the relationship type ('P' or 'C')
2332 Initializes a new empty annotation with TYPE set to ANNOT in the PDF document.
2333 Initializes PDAnnotation object from a COSDictionary, validating and setting the annotation type. @param dict COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
2334 Sets the annotation's rectangle dimensions using a PDRectangle object.
2335 Sets or updates the annotation's border using a COSArray.
2336 Sets the rectangle margin differences for this annotation in PDF document. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2337 Sets the rectangle differences for free text annotation appearance in PDF documents. @param differenceLeft Left margin difference @param differenceTop Top margin difference @param differenceRight Right margin difference @param differenceBottom Bottom margin difference
2338 Sets and formats the callout array for a free text annotation in PDF documents.
2339 Sets or removes the ink list in the COS object based on input data. @param inkList Array of float arrays representing ink paths; if null, removes the ink list
2340 Sets line coordinates in PDF annotation using input float array
2341 Sets the horizontal offset for the caption of this line annotation in a PDF document. @param offset The distance from the start point to position the caption horizontally
2342 Modifies the vertical offset of the annotation caption. @param offset new vertical position for the caption
2343 Sets the quad points for this link annotation in the PDF document. @param quadPoints array of 8 float values defining the quadrilateral shape
2344 Sets rich content (text) to the annotation. @param rc String containing the text to be displayed in the annotation
2345 Sets the vertices of the polygon annotation using input float array. @param points Array containing vertex coordinates for the polygon
2346 Sets and updates the vertices of the polyline annotation using input float array. @param points Array of float coordinates defining the vertices
2347 Sets the parent markup annotation for this popup annotation.
2348 Sets the rectangle differences for square or circular annotations in a PDF document. @param differenceLeft Left margin difference @param differenceTop Top margin difference @param differenceRight Right margin difference @param differenceBottom Bottom margin difference
2349 Sets and updates the quad points for text markup in PDF documents
2350 Initializes a PDF appearance dictionary and sets up the normal state entry.
2351 Sets the dash style of border in PDF annotation. @param dashArray COSArray defining dash patterns
2352 Retrieves and initializes the dash style for a line pattern. @return PDLineDashPattern object representing the line's dash style
2353 Sets or removes the operating system (OS) property in the dictionary. @param os the OS name; if null, removes the property
2354 Initializes a PDSeedValue object with a new COSDictionary and sets its type as SV.
2355 Sets or removes the filter attribute in the digital signature's dictionary. @param filter COSName identifier for the filter; if null, filter is removed
2356 Sets the MDP (Multimedia Permissions Dictionary) for digital signature configuration. @param mdp PDSeedValueMDP object containing MDP settings; if null, removes existing MDP
2357 Sets or removes the timestamp in the seed value based on input. @param timestamp PDSeedValueTimeStamp object; if null, timestamp is removed
2358 Initializes a new PDSeedValueCertificate with an empty COSDictionary and sets its type to SV_CERT.
2359 Adds a subject to the certificate's dictionary, managing its storage as a COSArray. @param subject byte array representing the subject to be added
2360 Adds a key usage extension to the certificate; validates and appends it to the KEY_USAGE array. @param keyUsageExtension string containing allowed characters (0, 1, X) for digital signature validation
2361 Adds a new issuer to the certificate's issuer list in the PDF document. @param issuer byte array representing the issuer's information
2362 Adds an Object Identifier (OID) to the certificate dictionary.
2363 Initializes a digital signature object with a default type (SIG).
2364 Sets the signature type in the underlying COSDictionary structure. @param type COSName identifier for the signature type
2365 Sets or removes the filter in the signature dictionary.
2366 Sets or removes the SubFilter in the digital signature dictionary. @param subfilter COSName object for the subfilter; if null, item is removed
2367 Sets the byte range for PDF document signature and ensures it's in a COSArray format. @param range an array of 4 integers representing the byte range
2368 Sets the contents of the digital signature with a byte array and ensures hex formatting. @param bytes input data to be represented as a COSString in the signature dictionary
2369 Sets the text color of the outline item using a given PDColor object. @param textColor The desired color for the text as a PDColor object
2370 Initializes an interactive form for a PDF document and sets up the field array. @param doc the PDDocument to associate with this form
2371 Initializes a PDButton instance and sets its field type to BTN in the AcroForm structure. @param acroForm parent AcroForm structure for this button
2372 Initializes a new PDChoice instance and sets its field type to "CH". @param acroForm the parent AcroForm structure for this choice field
2373 Sets the value for this non-terminal field and updates its COS object. @param object New COSBase value to be set for the field
2374 Sets or removes the default value in the PDF document field's dictionary. @param value COSBase object to be set as default; if null, default is removed
2375 Initializes a new PDSignatureField with FT and sets partial name, locks and prints the first widget. @param acroForm parent AcroForm structure to associate with this field
2376 Initializes a text field within the PDF form and sets its type to TX. @param acroForm parent AcroForm structure for this field
2377 Sets or removes the default style string in PDF document. @param defaultStyleString new style string; if null, existing one is removed
2378 Sets or removes rich text value for the PDF text field. @param richTextValue String to be set; if null, value is removed
2379 Sets the coordinate system origin with floating-point values. @param coordSystemOrigin array of float values representing the new origin
2380 Initializes a new instance of PDThread and sets its type to THREAD.
2381 Sets the transition direction between pages in a PDF document. @param direction PDTransitionDirection object representing the desired transition angle
2382 Sets the transition duration in seconds. @param duration The time taken for the transition to complete (in seconds)
2383 Sets fly scale property in PDF page transition dictionary.
2384 Sets fly area opacity for visual transitions in PDF document. @param opaque Boolean value to set fly area opacity (true = opaque)
2385 Adds all elements from the given COSArray to this object list and updates document state. @param objectList a collection of COSBase objects to be added
2386 Retrieves the standard structure type of a PDF element. @return Standard structure type as string or null/original if not found in role map.
2387 Adds structure to PDF, handles indirect objects and adds them to pool. @param current the object to be added to the PDF structure @throws IOException if there is an issue with adding or retrieving objects
2388 Retrieves a date from the dictionary using a string key. Uses caching for efficiency. @param key unique identifier for the date object as a string @param defaultValue value to return if date is not found @return Calendar instance or defaultValue if date is not found
2389 Retrieves a date from an embedded dictionary using given keys. Uses default if not found. @param embedded key for the embedded dictionary @param key unique identifier for the date object @return Calendar instance or defaultValue if date is not found
2390 Generates and inserts appearance for a combination field, handling text display based on alignment and size. @param contents PDF content stream to add text @param appearanceStream source of dimensions and positioning info @param font the typeface used for rendering text @param fontSize size of the font @throws IOException if an I/O error occurs during text display or calculation
2391 Creates a PDImageXObject from a BufferedImage with JPEG encoding. Defaults to 72 DPI. @param document PDF document to add the image to @param image Input BufferedImage object @param quality Compression quality (0-1) for JPEG encoding @return PDImageXObject with encoded image @throws IOException if input/output operations fail
2392 Loads and parses an FDF document from a file path string. @param filename The source FDF document as a String file path @return Parsed FDFDocument or null if parsing fails @throws IOException If there's an issue reading the file or parsing its content
2393 Adds the first intermediate curl to the cloudy border. @param angleCur current angle, r radius, alpha angle offset, cx center x, cy center y Calls getArcSegment() to generate curved arc segments for the curl shape.
2394 Generates a curvilinear template for cloudy border rendering. @param angleCur Current angle in radians @param r Radius of the arc segments @return Array of Point2D.Double representing the curve
2395 Overrides the showGlyph method to handle individual glyph rendering in a PDF document. This method calculates the displacement and transformation of each glyph, converts it into display units, and then processes the text position. It is specifically designed for use with PDFTextStripper and should not be used for other purposes as the calculations are deliberately incorrect outside this context. @param textRenderingMatrix The matrix used to render the text in device space. @param font The font of the glyph being rendered. @param code The character code of the glyph. @param displacement The displacement vector of the glyph from its original position. @throws IOException If an error occurs while reading or writing data.
2396 Splits the paragraph's text into lines based on specified width and font characteristics. @param font The PDFont object for text formatting @param fontSize Size of the font @param width Maximum allowed line width @return List of Line objects representing each line in the paragraph
2397 Retrieves symbolic flag from font descriptor. Returns null if no descriptor exists. @return Boolean value of the symbolic flag, or null if not applicable
2398 Determines and returns a fallback font name based on the font descriptor's properties. @param fontDescriptor describes various attributes of a font, such as name and style @return a string representing an appropriate substitute font name
2399 Returns a Paint object for rendering based on the provided color, considering various conditions and transformations. @param color PDColor object to convert into a Paint object @return Paint object suitable for PDF rendering or null if not possible @throws IOException if there are errors in retrieving pattern or shading information
2400 Retrieves and processes form fields from a PDF document. @return List of PDField objects or an empty list if none are found.
2401 Recursively searches for a child field with matching name. @param name array of names to search through @param nameIndex current index in the name array @return PDField object if match found; otherwise, null
2402 Retrieves and returns a list of child fields within the current field object. @return List<PDField> containing all child fields or an empty list if none exist
2403 Extracts string from COSBase object (string or stream). @param base COSBase object to extract string from @return String extracted from the object, or empty if not a valid type or error occurs
2404 Retrieves and returns the value of a form field, handling different types. @return The value of the field as Object or null if not found; may throw IOException for unknown types
2405 Retrieves rich text from the field's dictionary object. @return String representation of rich text or null if not found
2406 Retrieves and returns the 'before' event script from a PDF form. @return String containing JavaScript or null if not found or unsupported type
2407 Fetches the 'AFTER' JavaScript action from a PDF form. @return String representation of the action or null if not found
2408 Retrieves and returns JavaScript action string from PDF document. @return JavaScript action string or null if not found or invalid type
2409 Retrieves rich content from a PDF annotation. Supports both strings and streams. @return Rich content as a string or null if not available in supported formats.
2410 Extracts string value from a COSBase object, converting it based on its type. @param base the COSBase object (either COSString or COSStream) to extract string from @return String representation of the COSBase object or an empty string if not applicable
2411 Creates a layout page by combining content streams and initializing resources. @param page the original PDF page @return a LayoutPage object with combined content, resources, and rotation @throws IOException if an error occurs during stream creation or data transfer
2412 Retrieves stream data as a byte array. May throw IO exception during input stream creation or reading. @return Stream data as a byte array or throws IOException if an error occurs.
2413 Retrieves and initializes sample array from input stream based on PDF specification. @return int[][] representing sample values or throws IOException if creation fails
2414 Initializes PatchMeshesShadingContext with PDF shading and color model. Collects patches and creates pixel table. @param shading PDShading object for the context; xform, matrix for transformations; controlPoints number of points @param colorModel ColorModel to be used @param deviceBounds Bounds for pixel table creation @throws IOException if error occurs during initialization or patch collection
2415 Initializes Type4ShadingContext for PDF document rendering with specific shading parameters and transformation settings. @param shading PDShadingType4 object representing the shading technique @param cm ColorModel object for managing colors in graphics @param xform AffineTransform object for transforming coordinates @param matrix Matrix object for mathematical operations @param deviceBounds Rectangle defining the area of rendering @throws IOException if there is an error initializing resources
2416 Initializes Type5ShadingContext for PDF document rendering. @param shading PDShading object representing the shading technique. @param cm ColorModel for managing colors in graphics. @param xform AffineTransform object for transforming coordinates. @param matrix Matrix object for mathematical operations. @param deviceBounds Defines the pixel area for shading effects. @throws IOException if there is an error initializing resources.
2417 Adds an attribute to the PDF structure element and updates its revision number. @param attributeObject the attribute object to be added
2418 Adds a user property to the document's structure and notifies of changes. @param userProperty object containing specific user attribute details.
2419 Initializes a new instance of PDICCBased with an ICC-based color space and adds it to the document. @param doc The parent PDF document that will contain the initialized color space.
2420 Constructs a PDPattern for a given color space in resources. @param resources PDF document resources @param colorSpace the target color space for the pattern
2421 Sets and updates the COSArray of PDNumberFormatDictionaries for changeXs in the COSDictionary. @param changeXs an array of PDNumberFormatDictionaries to be added to the COSArray
2422 Sets and updates the Y-coordinate changes in a COSArray within the class's COSDictionary. @param changeYs an array of PDNumberFormatDictionaries to be added to the COSArray.
2423 Sets rectilinear distances in the COS dictionary and updates the PDF document. @param distances an array of PDNumberFormatDictionary objects representing distances
2424 Sets and updates the areas in the PDF document's measurement dictionary. @param areas an array of PDNumberFormatDictionary objects representing areas to be set
2425 Sets and updates the angular measurements in the PDF document's COSDictionary. @param angles an array of PDNumberFormatDictionary objects representing angles
2426 Sets the line slopes in the PDF document's measurement data. @param lineSloaps an array of PDNumberFormatDictionary objects representing line slopes
2427 Expands collection to hold specified number of elements. @param size desired minimum capacity
2428 Retrieves and creates text color for outline item if not present. @return PDColor object representing the RGB color of the text
2429 Clones and returns the COSBase object based on its type: COSArray or COSDictionary. @param src Source object to be cloned @param dstParent Parent of the destination object @param currentPageDict Current page dictionary @return Cloned COSBase object or original if not applicable for cloning
2430 Parses a direct object from the source based on its leading character. @return COSBase object or null if parsing fails; may be dictionary, string, array, name, boolean, or null object @throws IOException if an I/O error occurs during parsing
2431 Initializes parser for cross-reference stream, validates and sets up resources. @param stream COSStream containing cross-reference data @throws IOException if validation or I/O errors occur during setup
2432 Retrieves the subsequent action in a sequence of PDF document interactions. @return List of PDAction objects representing the next steps or null if none exist.
2433 Fetches the color range for a specific component in PDF stream. @param n the index of the color component @return PDRange object representing the specified component's range
2434 Fetches the range for a specific parameter in Type 0 PDF function. @param paramNum index of the desired parameter @return PDRange object or null if not found or invalid index
2435 Retrieves color or four colors based on the input name, handling COSArray objects. @param name string key for retrieving dictionary object @return PDGamma/PDFourColours object based on array size; otherwise, null
2436 Builds widths for Type 2 CID fonts and sets them in the provided dictionary. @param cidFont the destination dictionary to store the width data @throws IOException if there is an error accessing or manipulating font data
2437 Sets the line dash pattern in the graphics state dictionary for PDF rendering. @param dashPattern PDLineDashPattern object containing the length and phase values
2438 Initializes and sets up the CIE color space with RGB values. @param rgb Array containing color space data; index 1 holds dictionary
2439 Sets the color for PDF guidelines using a PDColor object. Converts the color to COSArray and adds it to the dictionary. @param color PDColor object representing the desired guideline color.
2440 Sets the color of the annotation using a PDColor object and updates the COSDictionary. @param c PDColor object representing the desired color
2441 Sets the interior color of the line annotation using a PDColor object. @param ic PDColor object containing RGB or CMYK components & pattern name.
2442 Sets the interior color of the polygon annotation using a PDColor object. @param ic The PDColor object representing the desired interior color.
2443 Sets the interior color of the polyline annotation using a PDColor object. @param ic PDColor object representing the desired interior color
2444 Sets the interior color of the annotation using a provided PDColor object.
2445 Sets border color using input PDColor object's components and pattern name
2446 Set the background color of PDF annotation appearance characteristics.
2447 Sets the text color for this outline item using a PDF color object. @param textColor PDColor object representing the desired text color
2448 Retrieves A-component range in LAB color space. Defaults to -100 to 100 if not defined. @return PDRange object containing the A-component range
2449 Retrieves the b-range component from dictionary or defaults to -100 to 100 if not found. @return PDRange object containing b-component range data
2450 Creates a PDImageXObject from an input stream for a given PDF document. @param document the PDF document to which the image belongs @param stream InputStream containing the image data @return PDImageXObject with specified dimensions and color space @throws IOException if there's an error reading or handling the input stream
2451 Sets the primary font for the PDF document at index 0. @param font the PDFont object to be used as the primary font
2452 Sets the tint transformation function and updates the internal COSArray representation. @param tint the PDFunction to be set as the tint transformation; null allowed
2453 Sets and updates the tint transformation function for color samples. @param tint PDFunction object representing the tint transformation; null allowed
2454 Sets the target PDF page for navigation. Critical for defining the destination within a document. @param page the PDPage object to navigate to; not null
2455 Sets or removes the upper limit of numeric values in the COSArray. @param upper Integer value to set as upper limit; if null, removes the limit
2456 Sets the lower limit for numeric values in a PDF document's COSArray. @param lower Integer representing the new lower limit; if null, removes it
2457 Sets the style for the starting point of a line annotation. @param style The style to apply; null maps to PDAnnotationLine.LE_NONE.
2458 Sets the ending style for the line annotation endpoint. @param style desired ending style; null defaults to LE_NONE
2459 Sets the starting point ending style for annotation in COSArray using a given string. @param style desired style; if null, uses PDAnnotationLine.LE_NONE as default
2460 Sets the ending style for polyline annotation endpoints in PDF documents. @param style ending style to be applied; if null, defaults to LE_NONE
2461 Sets the starting point ending style for line annotations in a PDF document. @param style desired ending style; if null, LE_NONE is used
2462 Sets the ending style for the line annotation's endpoint. @param style the desired style; null defaults to LE_NONE
2463 Sets the starting point ending style for a polyline annotation. @param style the desired style; if null, sets to LE_NONE (no style)
2464 Sets the ending style for the polyline's endpoint. @param style the desired ending style as a string; null defaults to no ending style
2465 Sets the upper limit for values in the tree node and updates the COSArray accordingly. @param upper the new upper limit as a String; if null, removes the limit
2466 Sets the lower limit for a name in the PDF document's object model. @param lower new lower limit value as a string; null to remove it
2467 Clips a rectangle to the media box of the page, returning a new rectangular region. @param box The input rectangle to be clipped @return A new PDRectangle within the bounds of the media box
2468 Creates a new rectangle with the same dimensions but at origin (0,0). @return New PDRectangle object with width and height of this instance.
2469 Sets the color at the beginning of the PDF document's color array.
2470 Sets the second color in the PDF document's color array. @param colour PDGamma object representing the new color or null for none
2471 Sets the start color in the PDF document's color array at index 2. @param colour PDGamma object representing the start color or null for none
2472 Sets the end color in the PDF document's color array at index 3.
2473 Decrypts and caches encrypted objects in PDF. Supports strings, streams, dictionaries, and arrays. @param obj COSBase object to decrypt @param objNum unique object identifier @param genNum generation number of the object @return decrypted or original COSBase object @throws IOException if an error occurs during decryption or I/O operations
2474 Sets or removes an item in the dictionary by converting a string key to COSName and setting its corresponding value. @param key String identifier for the item @param value COSObjectable to be set; if null, item is removed
2475 Sets or removes the AcroForm object in the PDF document catalog. @param acroForm PDAcroForm object to be set; if null, it is removed
2476 Sets or removes viewer preferences in the PDF document catalog. @param prefs PDViewerPreferences object to be set; if null, preferences are removed
2477 Sets or removes document outline in the PDF catalog dictionary.
2478 Sets or updates metadata in the PDF document catalog.
2479 Sets or removes the open action of the PDF document. @param action PDDestinationOrAction to be set; if null, it is removed
2480 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions to be set
2481 Sets or removes the document's name dictionary using a COSObjectable object. @param names PDDocumentNameDictionary to be set; if null, it is removed
2482 Sets or removes the mark information in the document catalog.
2483 Sets or removes the URI dictionary in the document catalog. @param uri PDURIDictionary object; if null, URI is removed
2484 Sets or removes the structure tree root of the PDF document.
2485 Sets or removes page labeling from the PDF document catalog. @param labels PDPageLabels object; if null, page labels are removed
2486 Sets or removes a destination name tree node in the document and updates the catalog. @param dests PDDestinationNameTreeNode to be set; if null, item is removed from document's catalog
2487 Sets or removes the embedded files node in the document catalog. @param ef PDEmbeddedFilesNameTreeNode object to be set; if null, item is removed
2488 Sets or removes the JavaScript item in the document's name dictionary. @param js PDJavascriptNameTreeNode to be set; if null, item is removed
2489 Initializes a PDPage object with the specified media box dimensions. @param mediaBox PDRectangle defining the size and shape of the page
2490 Sets or removes resources for the PDF page. @param resources PDResources object; if null, resources are removed
2491 Sets or removes the media box of the PDF page and updates document state. @param mediaBox Rectangle object representing the new media box; if null, removes it
2492 Sets or removes the bleed box of the PDF page. @param bleedBox Rectangle defining the bleed area; if null, removes the bleed box
2493 Sets or removes the trim box of the PDF page based on input rectangle. @param trimBox Rectangle to be set as trim box; if null, trim box is removed
2494 Sets or removes the Art Box property of the PDF page. @param artBox Rectangle object; if null, Art Box is removed.
2495 Sets or removes the content stream of the PDF page.
2496 Sets or removes metadata from the PDF page. @param meta PDMetadata object; if null, metadata is removed
2497 Sets or removes additional actions associated with this PDF page. @param actions PDPageAdditionalActions object; if null, actions are removed
2498 Sets or removes the page transition effect using a PDTransition object. @param transition PDTransition object containing the desired effect; if null, removes existing effect
2499 Sets the page transition and duration for a PDF document page.
2500 Adds or updates a resource in the PDF document's dictionary. @param kind type of resource (font, color space, etc.) @param name unique identifier for the resource @param object COSObjectable representing the resource to be added/updated
2501 Sets or removes an embedded file in the PDF document's EF dictionary. @param file PDEmbeddedFile to be set; if null, existing file is removed
2502 Sets or removes the embedded Unicode file in the EF dictionary of the file system. @param file PDEmbeddedFile to be set; if null, removes the existing Unicode file
2503 Sets the associated page for the marked content reference. @param page PDPage object to be associated with the marked content
2504 Sets and references a PDAnnotation object in the underlying COSDictionary. @param annotation The PDAnnotation to be referenced and set
2505 Sets the referenced object in the PDF dictionary and updates the OBJ entry.
2506 Sets the page associated with this PDObjectReference in its underlying COSDictionary. @param page The PDF page to be set; if null, the item is removed
2507 Sets the parent node for this structure node within a PDF document.
2508 Sets the PDF page associated with this structure element. @param page PDPage object representing a single page in the document
2509 Sets or removes the parent tree for this structure node in a PDF document. @param parentTree PDNumberTreeNode representing the new parent tree; if null, it's removed
2510 Sets or removes the rectangle item in the dictionary of the annotation object. @param rectangle a PDRectangle object representing the new dimensions; if null, item is removed
2511 Sets the border style of the PDF annotation using a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary containing border style properties to be applied
2512 Sets or removes the border effect property of the annotation.
2513 Sets the fringe dimensions of the caret annotation in the PDF document. @param fringe PDRectangle object representing the new fringe dimensions
2514 Sets or removes the fringe (border) of the circular annotation using a PDRectangle object.
2515 Sets the fringe property of a free text annotation with given rectangle. @param fringe PDRectangle object representing the new fringe property value
2516 Sets the fringe dimensions of the square annotation. @param fringe PDRectangle object representing the fringe dimensions
2517 Sets or removes FDF dictionary in the PDF document's catalog.
2518 Sets or removes digital signature from the FDF catalog. @param sig PDSignature object; if null, removes existing signature
2519 Sets or removes the file specification in the FDF document.
2520 Sets or removes JavaScript in the FDF document.
2521 Sets the FDFCatalog for the FDF document in its trailer dictionary. @param cat FDFCatalog object to be set as the root of the document
2522 Sets or removes the appearance dictionary of the form field in the FDF document. @param ap PDAppearanceDictionary object; if null, removes the appearance dictionary
2523 Sets or removes the appearance stream reference for a form field. @param ref FDFNamedPageReference object; if null, removes the item
2524 Sets the icon fitting property of the FDF field. @param fit FDFIconFit object representing icon fitting settings
2525 Sets an action to be performed on this form field. @param a PDAction object defining the action to be taken
2526 Sets or removes additional actions associated with the field. @param aa PDAdditionalActions object; if null, actions are removed
2527 Sets the fractional space to allocate for icons in FDF format. @param space PDRange object defining the space allocation
2528 Sets or removes the file specification for this page reference.
2529 Sets or updates the page information in FDF document's page. @param info FDFPageInfo object containing new data
2530 Sets or removes the template reference in the FDF document. @param tRef FDFNamedPageReference object; if null, item is removed.
2531 Sets or removes the font file stream in the PDF document's font descriptor. @param type1Stream PDStream object for the font file; if null, removes the item
2532 Sets the font file 2 for the PDF document, managing typographic properties. @param ttfStream the stream containing the TrueType Font data to be set as FONT_FILE2
2533 Sets or removes the FONT_FILE3 item in the font descriptor dictionary from a PDF document. @param stream PDStream object containing the font file; if null, item is removed
2534 Sets the CID set in the font descriptor dictionary using a given PDF stream. @param stream The PDF stream containing the CID set data.
2535 Sets the white point value and updates the color space cache. @param whitepoint PDTristimulus object containing white point values; cannot be null
2536 Sets the black point value in the color space dictionary.
2537 Sets the extended graphics state for shading patterns, affecting visual effects during rendering. @param extendedGraphicsState object defining graphical properties to be applied
2538 Sets the shading resource for PDF document and updates its COS object. @param shadingResources PDShading object defining graphical shading properties
2539 Sets or updates the resources associated with this tiling pattern. @param resources New PDF resources to be used in the pattern.
2540 Sets and updates the shading function in this PDShading instance.
2541 Sets the font setting in the graphics state dictionary of a PDF document. @param fs PDFontSetting object to be set in the dictionary
2542 Sets the destination for this GoToEmbedded action. Validates and sets a PDPageDestination object as the D key in the COS dictionary. @param d The destination to be set; must be an instance of PDPageDestination with integer page number
2543 Sets the file specification for this action in the PDF document.
2544 Sets the target directory for this interactive action. @param targetDirectory a PDTargetDirectory object specifying the destination
2545 Sets the destination for the navigation action in PDF document. @param d PDDestination object representing the new destination
2546 Sets the file specification for the PDF interactive action.
2547 Sets or removes file specification in PDF document launch action
2548 Sets Windows launch parameters for the PDF document action. @param win PDWindowsLaunchParams object containing configuration settings.
2549 Sets the file specification for this remote navigation action. @param fs PDFileSpecification object representing the linked resource or file
2550 Sets or removes the file specification in the PDF form submission action. @param fs PDFileSpecification object representing the file; if null, it is removed
2551 Sets the file specification for this PDF action thread.
2552 Sets an additional 'F' (Form) action in the PDF document. @param action PDAction object to be added as 'F' action
2553 Sets an "E" action in the PDF annotation's dictionary. @param e PDAction to be set
2554 Sets the X action for PDF annotation. @param x PDAction object defining the action
2555 Sets the destination action for PDF annotations.
2556 Sets the U action for PDF annotations to customize user interactions.
2557 Sets or removes the "Fo" action in the annotation's dictionary.
2558 Sets the Bl action definition in the annotation's dictionary. @param bl The PDAction to be associated with the Bl event
2559 Sets or removes the Page Open action in the annotation.
2560 Sets or removes an action to be executed when the mouse button is pressed inside an annotation's active area (Press). @param pc Action object to be set; if null, action is removed
2561 Sets the PV (Print) action for PDF annotation.
2562 Sets the Page Import action for PDF annotations. @param pi the PDAction representing the page import behavior.
2563 Sets a specific window close action to be performed on a PDF document.
2564 Sets the WS (Window State) action for a PDF document's catalog. @param ws the PDAction to be set as the Window State action
2565 Sets the document-level script to be executed when the PDF is opened. @param ds PDAction object containing the script to be set; if null, removes the script
2566 Sets the WP (Window Position) action for the PDF document's catalog
2567 Sets the document presentation action for this PDF catalog. @param dp PDAction object defining the presentation behavior
2568 Sets or removes the "K" action in the form field's dictionary.
2569 Sets the form field action to be performed when the field is activated (pressed).
2570 Sets or removes the "V" action in the form field's dictionary.
2571 Sets or removes the C action in the form field's additional actions.
2572 Sets or removes an 'O' action in the PDF page dictionary.
2573 Sets or removes the 'C' action in the PDF page dictionary.
2574 Sets the target directory in the PDF document. @param targetDirectory PDTargetDirectory object to be set as the target
2575 Sets or removes a named destination in the target directory. @param dest PDNamedDestination object; if null, removes existing destination.
2576 Sets or updates the appearance of the annotation in the PDF document.
2577 Sets optional content property list for annotation management. @param oc PDPropertyList object to be set as the annotation's OC property
2578 Associates annotation with a specific PDF page using COSDictionary object. @param page PDPage to be associated with the annotation
2579 Sets the file specification for the annotation attachment. @param file PDFileSpecification object
2580 Sets or removes border effect in free text annotation.
2581 Sets rectangle difference property for free text annotation. @param rd new PDRectangle object to be set
2582 Sets the PDAction for the link annotation in the PDF document
2583 Sets the border style of the link annotation in the PDF document.
2584 Sets the destination of the link annotation in a PDF document. @param dest PDDestination object representing the target location or action
2585 Sets the previous action URI for the link annotation. @param pa PDActionURI object representing the previous action URI to be set.
2586 Sets or removes an annotation's popup using a PDAnnotationPopup object.
2587 Sets or removes an in-reply-to annotation for this markup annotation. @param irt the PDAnnotation to which this one is a reply; if null, removes the reply
2588 Sets or removes the external data dictionary for the annotation. @param externalData PDExternalDataDictionary object; if null, item is removed
2589 Sets or removes the border style of the annotation using a COSName identifier and a PDBorderStyleDictionary object. @param bs PDBorderStyleDictionary object to be set; if null, border style is removed
2590 Sets or removes the border effect dictionary in the annotation's COS object.
2591 Sets or removes border effect using a PDBorderEffectDictionary object. @param be PDBorderEffectDictionary for the border effect; if null, effect is removed
2592 Sets or removes rectangle difference in annotation. @param rd PDRectangle object to be set; if null, item is removed
2593 Sets the visual characteristics of annotation widgets in PDF document. @param appearanceCharacteristics Dictionary containing properties like border style and highlighting mode.
2594 Sets the action associated with the annotation widget in PDF document. @param action PDAction object defining the interaction behavior of the widget
2595 Sets or removes additional actions to be performed by the annotation. @param actions PDAnnotationAdditionalActions object; if null, actions are removed
2596 Sets or removes the border style of the annotation widget using a COS dictionary object. @param bs PDBorderStyleDictionary containing border style properties; if null, border style is removed
2597 Sets the parent field of this annotation widget. Throws exception if it shares same COS object with the input field. @param field the new parent field to be set; cannot share same COS object as current widget
2598 Sets the normal appearance of an annotation in PDF document.
2599 Sets normal appearance stream for an interactive PDF annotation
2600 Sets rollover appearance in PDF annotation. @param entry new PDAppearanceEntry
2601 Sets the rollover appearance of an interactive annotation in PDF documents. @param ap PDAppearanceStream object representing rollover appearance; if null, removes the item
2602 Sets down appearance in annotation's dictionary. @param entry to be set
2603 Sets the down appearance of an interactive PDF annotation. @param ap PDAppearanceStream for the down state; if null, removes the entry
2604 Sets or removes the filter property within PDF digital signature properties. @param filter PDPropBuildDataDict object to be set; if null, it is removed
2605 Sets or removes the publication security property in the PDF document. @param pubSec COSObjectable representing publication security; if null, property is removed
2606 Sets or removes PDPropBuild application data in the COSDictionary. @param app PDPropBuildDataDict object; if null, item is removed
2607 Sets or removes the seed value certificate in the PDF document's signature dictionary. @param certificate SeedValueCertificate object; if null, certificate is removed
2608 Sets or removes the property build item in the digital signature's dictionary.
2609 Sets previous sibling node in PDF outline structure.
2610 Sets the next sibling in the outline structure of a PDF document
2611 Sets or removes the destination of this outline item in the PDF document.
2612 Sets the action associated with this outline item.
2613 Sets or removes a structure element in the PDF document outline item. @param structureElement The structure element to be set; if null, it is removed
2614 Sets the first child node in the PDF document's outline structure. @param outlineNode the PDOutlineNode to be set as the first child
2615 Sets the last child node in the PDF document outline structure.
2616 Sets default resources for the interactive form. @param dr PDResources object to be used as defaults
2617 Sets or removes the XFA resource from the form's dictionary. @param xfa PDXFAResource object to be set; if null, it is removed
2618 Sets the signature value and applies changes to the PDF document. @param value PDSignature object containing the new signature value @throws IOException if there is an error during setting or applying changes
2619 Sets the default value of the signature field in the PDF document. @param value PDSignature object to be set as the default value
2620 Sets the seed value for a digital signature in PDF document. @param sv PDSeedValue object containing the seed value; if null, removes the item
2621 Sets or removes additional actions associated with a PDFormField.
2622 Sets the bounding box of the viewport in the PDF document. @param rectangle PDRectangle object representing new bounds
2623 Sets or removes measurement details from viewport settings. @param measure PDMeasureDictionary holding the new measurement; if null, removes existing measurement
2624 Sets document information associated with this PDF thread. @param info DocumentInformation object containing metadata about the PDF
2625 Sets the thread association for this bead and updates its dictionary. @param thread PDThread object to associate with this bead
2626 Sets the next bead in a threaded PDF document. @param next The PDThreadBead to set as the next bead
2627 Sets the previous bead in threaded PDF content organization. @param previous Previous PDThreadBead object
2628 Sets or removes the associated page for this thread bead in PDF document.
2629 Sets or removes the rectangle item in the thread bead's dictionary.
2630 Sets the 'Marked' status in the PDF document's metadata. @param value The boolean to be set (true/false) for marking status
2631 Sets and updates the 'UserProperties' flag in the PDF document's metadata. @param userProps Boolean value indicating the new status of user properties.
2632 Sets the 'Suspect' status in PDF marking info.
2633 Sets whether to track mouse position in the URI action. @param value true if tracking should be enabled, false otherwise
2634 Sets the 'open' state of the annotation popup.
2635 Sets the "FD" boolean value in the number format dictionary, controlling decimal display
2636 Sets or removes the volatile flag in the file specification dictionary.
2637 Sets the visibility of user property in PDF document structure and notifies changes. @param hidden true to hide, false to display the property
2638 Sets the encryption status for metadata in PDF document. @param encryptMetaData Boolean value; true to enable encryption, false to disable.
2639 Sets or removes line caption based on the input value. @param cap Boolean to be set; if false, caption is removed.
2640 Sets or removes the scale to fit annotation based on input value.
2641 Sets or removes the rename option in the FDF template dictionary.
2642 Sets or removes the ANTI_ALIAS attribute in shading properties. @param antiAlias Boolean value to be set; if false, attribute is removed
2643 Sets or removes stroking overprint control in the PDF dictionary. @param op Boolean value to set; if false, control is removed
2644 Sets or removes non-stroking overprint control in the PDF document. @param op Boolean value to set; if false, overprint control is removed
2645 Sets or removes automatic stroke adjustment in PDF graphics state dictionary. @param sa Boolean value; if true, enables automatic stroke adjustment
2646 Sets or removes the Alpha Source Flag in the graphics state dictionary. @param alpha Boolean value to be set; if false, flag is removed
2647 Sets or removes text knockout flag in the graphics state dictionary. @param tk Boolean value; if true, text knockout is enabled
2648 Sets or removes NEW_WINDOW flag based on OpenMode. Critical method for PDF navigation behavior. @param value Determines how linked content should be opened (USER_PREFERENCE, SAME_WINDOW, or NEW_WINDOW)
2649 Sets the window behavior for launching external content in a PDF. Removes or sets 'NEW_WINDOW' COSName based on OpenMode value. @param value Determines how to open the content (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2650 Sets or removes new window behavior for remote navigation. @param value OpenMode: NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE
2651 Sets or removes the SYNCHRONOUS flag in the PDF action dictionary. @param synchronous If true, sets the flag; if false, removes it
2652 Sets or removes the 'repeat' property in the PDF document sound action. @param repeat Boolean value to enable/disable sound repetition
2653 Sets or removes the 'mix' property in the PDF sound action.
2654 Sets or removes the caption boolean item in the annotation line dictionary.
2655 Sets or removes the 'Open' property of the text annotation in PDF document. @param open Boolean value to be set; if false, 'Open' property is removed
2656 Sets or removes the pre-release flag in the property dictionary. @param preRelease Boolean indicating pre-release status; true to set, false to remove
2657 Sets or removes non-embedded font warning in the property dictionary
2658 Sets or removes the "trusted mode" flag in the property dictionary.
2659 Sets or removes the need for appearances in the PDF form. @param value Boolean to be set; if false, need for appearances is removed
2660 Sets or removes the toolbar visibility setting based on the input value. @param value Boolean to be set; if true, hides the toolbar; otherwise, shows it
2661 Sets or removes the menubar visibility based on the input value. @param value If true, menubar is hidden; if false, it's visible
2662 Sets or removes the preference to hide window UI in the PDF viewer based on the input value. @param value If true, hides window UI; if false, shows it
2663 Sets or removes the fit window preference in PDF viewer based on input. @param value Boolean to set; if false, fits window is turned off.
2664 Sets or removes the center window preference. @param value If true, centers the PDF viewer window; if false, removes centering
2665 Sets or removes the display of document title in the viewer based on input value. @param value True to show document title; false to hide it
2666 Sets an array of strings in the PDF dictionary with a given name and updates the object. @param name String identifier for the item @param values Array of string values to be added to the COSArray
2667 Sets an array of name values for a specified key in the object's dictionary. @param name String identifier for the array @param values Array of strings to be converted into COSName and added to the array
2668 Sets an array of numbers for a given name in the PDF dictionary object. @param name String identifier for the number array @param values Array of floating-point numbers to be set
2669 Parses stamp annotation appearance XML and constructs a COSDictionary object. Handles 'STREAM' elements in the XML to create corresponding entries in the COSDictionary. @param appearanceXML XML element containing annotation appearance data @return COSDictionary representing parsed annotation appearance or empty dictionary if not handled
2670 Sets a named item in dictionary with optional string value.
2671 Sets and configures the Page Mode for this PDF document catalog. @param mode The desired PageMode to be set; controls document's initial view.
2672 Sets the page layout configuration in the PDF document catalog. @param layout PageLayout object representing desired configuration
2673 Sets or updates the version of the PDF document using a provided string value. @param version String representation of the document's version to be set
2674 Sets the trap state of the document to True, False, or Unknown. @param value should be 'True', 'False', or 'Unknown' @throws IllegalArgumentException if an invalid value is provided
2675 Sets the page labeling style for a PDF document. @param style Page labeling style; if null, removes the existing style
2676 Initializes a typed dictionary wrapper with specified type name
2677 Sets the owner of the attribute in the PDF's COS object. @param owner String representation of the owner
2678 Initializes an empty marked content reference and sets its type.
2679 Initializes a PDF object reference with an empty dictionary and sets its type.
2680 Sets the structure type of the PDF element using a COSName identifier and string value. @param structureType String representing the type or structure to be set
2681 Initializes a PDStructureNode with its dictionary and sets the node's type. @param type String representing the COSName identifier for the node's type.
2682 Sets the user property name and notifies of changes if necessary. @param name New name for the user property
2683 Sets the style of the guideline using the provided string.
2684 Sets the sub filter in the encryption dictionary for PDF documents. @param subfilter String representing the sub filter to be set
2685 Sets the intent of the PDF annotation. @param intent String specifying the intent
2686 Sets the line ending style of the free text annotation. @param style The string representation of the line ending style to be set
2687 Sets the icon for text annotation in PDF document. @param icon String value representing the icon name
2688 Sets the FDF document version in the PDF catalog. @param version String representing the version to be set
2689 Sets the encoding of the FDF document. @param encoding String representation of the encoding to be used
2690 Sets the scale option for icons in FDF format. @param option String defining the scaling behavior
2691 Sets the scaling type for icons in FDF format. @param scale String representing the desired scaling type
2692 Initializes a new empty PDF pattern dictionary with the type set to PATTERN.
2693 Sets the type of the PDF document interactive action.
2694 Sets the subtype of the PDF action to the specified string.
2695 Sets the annotation's subtype within the COSDictionary object. @param subType String representing the annotation type
2696 Sets the appearance state of the annotation in the PDF document. @param as String representing the new appearance state
2697 Sets the attachment's name using a COSName identifier and a string value. @param name String to be set as the attachment's name
2698 Sets the line ending style in the annotation's COS object. @param style String representing the line ending style to be set
2699 Sets the positioning of annotation captions. @param captionPositioning string representing the position
2700 Sets the highlighting mode for the annotation link. @param mode String representing the highlighting mode to be set
2701 Sets the reply type of the annotation markup. @param rt String representing the reply type to be set
2702 Sets the intent of the annotation markup. @param it String representing the intent
2703 Sets the name of the rubber stamp annotation in its COS representation. @param name new name for the annotation as a String
2704 Sets the name of the text annotation in the PDF document.
2705 Sets the highlighting mode of annotation. Valid modes: N, I, O, P, T. @param highlightingMode String representing the mode to set
2706 Sets the border style property of interactive annotations in PDF documents. @param s String representing the desired border style
2707 Initializes an empty PDExternalDataDictionary with its type set to "ExData".
2708 Sets the subtype attribute in external data dictionary for PDF annotations. @param subtype String value to be set as the subtype attribute
2709 Sets the name property in the PDF signature dictionary
2710 Sets the URL type in the certificate's dictionary. @param urlType String representation of the URL type
2711 Initializes an empty PDDocumentOutline with the correct COS type name.
2712 Initializes document outline from a given COSDictionary and sets its type to OUTLINES. @param dic the underlying COSDictionary for managing PDF metadata and properties
2713 Sets the default value for a PDF button and validates its input. @param value The string to be set as the default value
2714 Initializes an empty measurement dictionary for PDF documents.
2715 Sets the measurement dictionary's subtype attribute in the COSDictionary. @param subtype String representing the new subtype value
2716 Initializes a new PDNumberFormatDictionary with default settings.
2717 Sets or updates the name of the viewport in the PDF document. @param name The new name for the viewport as a String
2718 Initializes a PDTransition with specified style and sets the transition type and style in the PDF document. @param style The desired transition style for the page navigation experience
2719 Sets the transition dimension using a PDTransitionDimension object. @param dimension Object representing the desired transition dimension
2720 Sets the transition motion property to a specified value. @param motion PDTransitionMotion object defining the desired motion type
2721 Sets a date item in the dictionary using a specified format. @param key COSName identifier for the date item @param date Calendar object to be formatted and set; if null, removes the item
2722 Sets a string item in the dictionary using a given key-value pair. @param key String identifier for the item @param value String to be set; if null, removes the item
2723 Sets or removes a string item in the embedded dictionary. If the dictionary does not exist and a non-null value is provided, it creates one. @param embedded COSName identifier for the embedded dictionary @param key COSName identifier for the item @param value String to be set; if null, removes the item
2724 Sets the document's primary language using COSName LANG identifier. @param language String representing the language code to be set
2725 Sets or updates the title of the PDF document metadata. @param title new title to be assigned to the document
2726 Sets the author metadata of the PDF document. @param author The name of the author to be set in the document's metadata
2727 Sets the document's subject metadata. @param subject The new subject for the PDF document. If null, removes the current subject.
2728 Sets or updates the PDF document's keywords metadata. @param keywords New keywords to be associated with the document; if null, removes existing keywords
2729 Sets or updates the document's creator metadata. @param creator The name of the creator to be stored in the PDF metadata.
2730 Sets the document's producer metadata. @param producer The new producer string to be set; if null, removes the item
2731 Sets or removes the page label prefix in the PDF document. @param prefix New prefix to be set; if null, prefix is removed
2732 Sets the Unicode filename in the PDF complex file specification.
2733 Sets the file name within the PDF context.
2734 Sets the file description using a provided string.
2735 Sets the unique identifier for the PDF structure element. @param id String representation of the identifier to be set
2736 Sets the title of the PDF structure element using COSName.T
2737 Sets the language of the PDF structure element using a string value. @param language String representing the new language for the element
2738 Sets an alternative description for the PDF structure element.
2739 Sets the expanded form of the PDF structure element using a string value. @param expandedForm String representation of the expanded form to be set
2740 Sets the actual text of the PDF structure element using COSName.ACTUAL_TEXT identifier. @param actualText String to be set as the actual text of the element
2741 Sets the formatted value and updates the document structure. @param formattedValue The new formatted string to be set
2742 Sets the modification date of the PDF annotation. @param date String representation of the new modification date
2743 Sets the name of the PDF annotation using COSName.NM key and provided string value.
2744 Sets the content of the PDF annotation. @param contents String to be displayed in the annotation
2745 Sets the title of the PDF annotation. @param title String to be used as the annotation's title
2746 Sets the subject of the PDF annotation. @param subject Subject to be assigned
2747 Sets the symbol for the caret annotation in the PDF document. @param symbol String representation of the symbol; "paragraph" is converted to "P", others become "None"
2748 Sets the default appearance of the free text annotation. @param appearance String representing the appearance properties
2749 Sets the default style of the free text annotation. @param style String representing the style
2750 Sets the style of the line annotation's caption. @param captionStyle new style for the caption
2751 Sets the state of the text annotation in FDF format. @param state String representing the new state of the annotation
2752 Sets the state model of the text annotation. @param stateModel new state model to be set
2753 Sets the status of the FDF document. @param status New status as a String
2754 Sets the target item in the FDF dictionary to the specified string value.
2755 Sets the partial name of the form field using COSName.T. @param partial String representing the partial field name to be set
2756 Sets the name of the referenced page in FDF context.
2757 Sets the name of the optional content group. @param name The new name for the OCG. If null, removes the name.
2758 Initializes the COSDictionary and sets up the initial structure for optional content groups (OCGs).
2759 Sets JavaScript action string in PDF document. @param sAction String containing JavaScript code to be executed
2760 Sets the file specification for launching an external resource in the PDF document. @param f File specification as a string
2761 Sets the destination path or file in the PDF launch action. @param d Path or file to be set for the launch action
2762 Sets the operating system specific launch parameters. @param o OS specific launch parameter
2763 Sets the launch parameter 'P' in the PDF document action dictionary. @param p String value for the launch parameter 'P'
2764 Sets the URI of the PDF document action. @param uri String representing the new URI for the action
2765 Sets the target directory's filename using COSName.N identifier in PDF dictionary. @param filename String representing the new filename for the PDF document
2766 Sets the annotation name in the PDF dictionary.
2767 Sets the filename in the launch parameters dictionary.
2768 Sets the directory attribute in the launch parameters. @param dir a string representing the new directory path
2769 Sets the operation type in the launch parameters dictionary.
2770 Sets the execution parameter in the launch parameters dictionary.
2771 Sets the contents of the annotation in the PDF document.
2772 Sets the modified date of the annotation in its COSDictionary. @param m new date to be set
2773 Sets the name of the PDF annotation. @param nm new name for the annotation
2774 Sets the default appearance string of the annotation in PDF document. @param daValue The new default appearance string to be set
2775 Sets the default style string for this free text annotation. @param defaultStyleString determines the appearance style of the annotation
2776 Sets the title for the popup display of this annotation markup. @param t String representing the new title; if null, removes the existing title
2777 Sets the subject of the annotation in the PDF document.
2778 Sets the annotation's state in the PDF document. @param state new state of the annotation
2779 Sets the state model of the text annotation in PDF document.
2780 Sets normal annotation caption text. @param caption new text for the caption
2781 Sets the rollover caption for the PDF annotation appearance. @param caption String to display on mouse hover; if null, removes the caption
2782 Sets an alternate caption for the PDF annotation. @param caption String to be used as alternate caption
2783 Sets the date of digital signature in PDF document's property dictionary. @param date String representation of the date to be set
2784 Sets the URL in the certificate's COSDictionary. @param url String representation of the URL
2785 Sets the URL in the PDF document's timestamp dictionary. @param url String representing the URL to be set
2786 Sets the name item in the signature dictionary.
2787 Sets the signature's location and updates the COSDictionary.
2788 Sets the reason for the digital signature. @param reason String representing the reason
2789 Sets the contact information in the digital signature dictionary.
2790 Sets the title of the outline item using a COS string object. @param title New title for the outline item
2791 Sets the default appearance of the form field.
2792 Sets the default value for the choice field in PDF form.
2793 Sets the partial name of the PDF form field, ensuring it doesn't include periods. @param name Partial name to be set; should not contain a period character
2794 Sets an alternative field name in the PDF document's AcroForm structure. @param alternateFieldName new name for the field
2795 Sets the mapping name in the field's dictionary. @param mappingName String to be used as the mapping name
2796 Sets the string value for this non-terminal field and updates its COS object. @param value the new string value for the field
2797 Sets the text field's value and applies changes to the PDF form. @param value The new string value for the text field
2798 Sets the default value of this text field in the PDF form.
2799 Sets the default appearance string for text fields in PDF forms. Handles both main object and child widgets' DA entries. @param daValue The new default appearance string to be set
2800 Sets the scale ratio in the COSDictionary. @param scaleRatio the new scale ratio as a String
2801 Sets an integer value in the dictionary using a string as the key.
2802 Sets an integer value in a nested dictionary within the main COSDictionary object. @param embeddedDictionary The outer COSName key for the nested dictionary. @param key The inner COSName key to store the integer under. @param value The integer value to be stored.
2803 Modifies a flag in the dictionary using a specified field and a bitwise operation. @param field COSName identifier for the item @param bitFlag Bitmask to select the flag @param value Boolean to set or clear the flag
2804 Sets the structural parent count for the PDF page.
2805 Sets the rotation angle of the PDF page. @param rotation Rotation angle in degrees (0, 90, 180, or 270)
2806 Constructs a PDPageTree from a COSDictionary and a PDDocument. Repairs bad PDFs by converting Page dict to page tree if necessary. @param root COSDictionary representing the page tree; cannot be null @param document associated PDDocument for context and resources
2807 Removes a COSDictionary from the page tree and updates ancestor counts. @param node COSDictionary to be removed from the tree
2808 Adds a page to the PDF document and updates parent-child relationships & ancestor counts. @param page PDPage object to be added to the document's page tree
2809 Sets the starting page number for label range. Throws exception if input is not a positive integer. @param start The desired starting page number
2810 Sets and stores the bits per sample value in the PDF function dictionary. @param bps Bits per sample to be set; affects data encoding and decoding.
2811 Sets the Marker Context Identifier (MCID) for this marked content reference. @param mcid Integer identifier to be set in the underlying dictionary
2812 Sets the revision number for the PDF structure element. @param revisionNumber Integer value representing the revision; must be >= 0
2813 Sets the next key for the parent tree in the COSDictionary. @param parentTreeNextKey The value to be set as the next key
2814 Sets the length of the encryption filter in the crypt dictionary. @param length Integer representing the length to be set
2815 Sets the encryption version of the PDF document in its dictionary.
2816 Sets the length of the PDF document in the encryption settings. @param length Integer representing the new length value
2817 Sets the PDF document's revision level using COSName.R as the key. @param revision The new revision level for the document
2818 Sets the permission level for the PDF document using COSName P and an integer value. @param permissions Integer representing the desired access permissions
2819 Sets the page number for the annotation in the PDF document.
2820 Sets the justification for free text annotation. @param justification String representing alignment ("centered", "right", or default is "left")
2821 Sets the rotation of the free text annotation. @param rotation Rotation value to be applied (degrees)
2822 Sets field flags in FDF document using specified integer value. @param ff Integer representing the new field flag values.
2823 Sets flags for the form field using a specified integer value. @param ff Integer representing the new field flags
2824 Sets clear field flags in FDF document. @param ff Integer representing the new clear field flags value
2825 Sets integer flags for widget fields using COSName.F as key. @param f Integer representing the new field flags value to be set.
2826 Sets widget field flags in FDF document using a specified integer value.
2827 Sets clear widget field flags using an integer value. @param ff Integer representing the new flags
2828 Sets the font descriptor flags and updates the dictionary with the new value. @param flags Integer representing the new flag settings for the font descriptor
2829 Sets character widths for a given TrueType font and glyph list in a PDF document. @param font the dictionary containing font properties @param glyphList the list of glyph names used by the font @throws IOException if an I/O error occurs during font processing
2830 Sets the paint type in the pattern dictionary using a COSName identifier. @param paintType Integer representing the desired paint type
2831 Sets the type of PDF graphics pattern. @param patternType an integer representing the pattern type to be set
2832 Sets and updates the paint type of the tiling pattern in PDF document. @param paintType Integer value representing the desired paint type
2833 Sets the tiling type for this pattern. @param tilingType Integer representing the tiling type to be set.
2834 Sets the type of shading in the PDF document's dictionary. @param shadingType Integer code representing the shading type
2835 Sets the number of bits per flag in the shading dictionary for PDF rendering. @param bitsPerFlag Number of bits used to represent each flag value
2836 Sets number of vertices per row for shading operations. @param verticesPerRow Number of vertices in each row
2837 Sets the number of bits per color component and updates the COS object.
2838 Sets the number of bits per coordinate and updates the COS object. @param bitsPerCoordinate Number of bits used to represent coordinates.
2839 Sets line cap style in the dictionary using a predefined key. @param style Integer representing the line cap style to be set
2840 Sets line join style in PDF document using specified integer value. @param style Integer representing line join style
2841 Sets or removes the overprint mode in the PDF document. @param overprintMode Value to set for OPM; null to remove it
2842 Sets the reset action flags in the PDF document. @param flags Integer representing the new action flags
2843 Sets action flags in the PDF form submission process. @param flags Integer representing specific actions or configurations
2844 Sets the target page number for navigation or linking in a PDF document. @param pageNumber The desired page number; if negative, removes the existing one
2845 Sets or removes the annotation index in the PDF dictionary. @param index An integer value to set; if < 0, index is removed
2846 Sets annotation flags using COSName.F and the provided integer value. @param flags Integer representing annotation flag settings
2847 Sets the structural parent of this annotation in a PDF document. @param structParent Integer representing the new structural parent identifier
2848 Sets the Q value in the annotation's COS object. @param q Integer to be stored as Q
2849 Sets annotation's rotation value. @param rotation Integer representing the rotation angle
2850 Sets the P value in the digital signature's configuration. Throws exception if input is invalid (not 0-3). @param p Integer value to be set for the digital signature's parameter; must be between 0 and 3 inclusive
2851 Sets the timestamp requirement in the PDF signature dictionary. @param flag Boolean value indicating if timestamp is required (true) or not (false).
2852 Sets the count of open child outline items and updates the COS object accordingly.
2853 Sets the 'Q' value in the form field dictionary. @param q Integer value to be set
2854 Sets the field flags in the PDF document's AcroForm structure. @param flags Integer representing the new field flags to set
2855 Sets the top index for displayed items in a PDF list box field. @param topIndex Integer representing the new top index or null to remove it
2856 Sets the maximum length constraint for the text field in PDF form. @param maxLen maximum character limit for input
2857 Sets the Q attribute value in PDF text field. @param q Integer representing the new Q attribute value
2858 Sets a long integer value in the dictionary using a given string key. @param key String identifier for the item @param value Long integer to be stored
2859 Writes the trailer dictionary to the PDF document output stream, handling sorting of cross-references and removal of unnecessary items. @param doc a COSDocument object containing the PDF data to be written
2860 Sets the revision number in the PDF signature properties dictionary. @param revision Long integer representing the revision number
2861 Sets the minimum revision number in PDF signature properties. @param revision Long integer representing the minimum revision
2862 Sets a floating-point number in the dictionary using a given string key. @param key String identifier for the item @param value Floating-point number to be stored
2863 Sets the user unit for this PDF page. User unit determines the conversion factor between user space units and points (1/72 inch). @param userUnit a positive floating-point number representing the new user unit value
2864 Sets the width of the guideline in the PDF document. @param width Floating-point value representing the width
2865 Sets the opacity of the annotation. @param opacity Float value representing transparency (0.0 - 1.0)
2866 Sets the length of line leader (perpendicular lines) in the line annotation. @param leaderLength The new length for the line leader
2867 Sets the leader extend of line annotation in PDF document. @param leaderExtend Floating-point value for line extension
2868 Sets the leader offset of the line annotation in PDF document. @param leaderOffset Distance from start/end point
2869 Sets the weight of the font in the PDF document. @param fontWeight Floating-point number representing font weight
2870 Sets the italic angle of the font descriptor in the PDF document.
2871 Sets the font ascent value in the PDF document's dictionary. @param ascent Floating-point number representing the font ascent
2872 Sets the font descent value in the PDF descriptor dictionary.
2873 Sets the leading value in the font descriptor dictionary. @param leading The new leading value to be used
2874 Sets and stores the font's capital height value in the PDF descriptor. @param capHeight Capital height value as a float
2875 Sets and updates X height in font descriptor dictionary.
2876 Sets the vertical stem width of a font in PDF document. @param stemV Vertical stem width value to be set
2877 Sets the horizontal stem width in the font descriptor dictionary. @param stemH Horizontal stem width value to be stored
2878 Sets the average width of a font in the PDF document. @param averageWidth Floating-point value representing the average width
2879 Sets the maximum width of the font descriptor and updates its dictionary.
2880 Sets the missing width value of the font descriptor. @param missingWidth The new missing width value to be set
2881 Sets the X step value for the tiling pattern in PDF documents.
2882 Sets the Y step value for tiling pattern. @param yStep The Y step value to be set in the PDF pattern dictionary.
2883 Sets the volume level for the sound action within -1.0 to 1.0. @param volume Float value from -1.0 (low) to 1.0 (high)
2884 Sets the length of the leader line in the annotation.
2885 Sets the length of the leader line extension for the annotation. @param leaderLineExtensionLength Float value representing the extension length
2886 Sets the length of the leader line offset for a PDF annotation. @param leaderLineOffsetLength The new offset length as a float value
2887 Sets constant opacity (transparency) of the annotation markup. @param ca Float value between 0.0 and 1.0; 1.0 is fully opaque, 0.0 is fully transparent.
2888 Sets the border width of the annotation. Handles floating-point and integer values. @param w float value for border width
2889 Sets the minimum required capability in the PDF signature dictionary. @param minimumRequiredCapability Minimum version of PDF for which this signature is valid
2890 Sets the CYX value in the COSDictionary for rectilinear measurements. @param cyx Float representing the new CYX value to be set
2891 Parses a COSStream from the given dictionary and handles stream length validation. @param dic The COSDictionary containing stream settings. @return A initialized COSStream object for PDF processing. @throws IOException If there's an error reading or parsing the stream.
2892 Clones and merges COS objects from source to target, handling null or self-referencing cases. @param base Source object with data to be cloned and merged @param target Target object that will receive the cloned data
2893 Parses a PDF document and creates a PDDocument instance. @param lenient specifies whether to use strict or lenient parsing mode @return PDDocument object for further processing, or throws IOException if an error occurs
2894 Processes operators in a PDF content stream, handling color operations based on specific conditions. @param contentStream the source of PDF operators to process @throws IOException if an I/O error occurs during parsing or processing
2895 Parses the PDF content stream and returns a list of objects. @return List of parsed objects from the PDF stream; may be empty if no valid tokens found. @throws IOException if an I/O error occurs during parsing.
2896 Parses a PDF stream to extract glyph bounding box coordinates. Returns null if parsing fails or conditions are not met. @return PDRectangle object containing the bounding box dimensions, or null if parsing fails @throws IOException if an error occurs during parsing
2897 Parses and returns the width from PDF stream operators for Type 3 fonts. @return Float value representing parsed width; throws IOException if parsing fails or end of stream is reached unexpectedly.
2898 Writes the PDDocument to output stream without signing. @param doc the PDF document to be written @throws IOException if there are issues with writing data
2899 Saves the PDF document incrementally with subsetted fonts to an output stream. @param output the output stream for writing the updated document @throws IOException if there are issues during saving or subsetting of fonts
2900 Creates a new PDDocument with an in-memory stream cache. Sets up the document structure for subsequent operations.
2901 Retrieves the document catalog containing metadata and references. @return PDDocumentCatalog object if available; otherwise, creates a new one
2902 Retrieves a COSDictionary from the page tree based on page number. @param pageNum 1-based page number to retrieve @return COSDictionary of the specified page or throws an exception if not found
2903 Creates a PDF File Specification from COSBase object. @param base the base object to create the file specification from @return PDFileSpecification or null if base is null, throws IOException for invalid types
2904 Notifies changes in the attribute to its associated structure element. Updates revision number if structure element is present.
2905 Appends a child element to the structure node from COSObjectable, handling null inputs. @param objectable COSObjectable to be converted and added as a kid; ignored if null
2906 Inserts a new COS objectable node before a reference node in the structure hierarchy. @param newKid The new child node to be inserted @param refKid Reference node before which insertion occurs
2907 Removes a child node from the structure's kids list using COSObjectable object. @param objectable COSObjectable to be removed @return true if removal was successful, else false
2908 Sets the standard crypt filter dictionary for PDF encryption settings. @param cryptFilterDictionary PDCryptFilterDictionary containing encryption settings
2909 Sets the default crypt filter dictionary for PDF encryption settings. @param defaultFilterDictionary PDCryptFilterDictionary containing encryption settings
2910 Initializes a new empty FDFAnnotationCaret with SUBTYPE set to ANNOT.
2911 Initializes a new empty FDFAnnotationCircle with its subtype set
2912 Initializes a new empty FDFAnnotationFileAttachment with TYPE set to ANNOT.
2913 Initializes a new empty FDFAnnotation with TYPE set to ANNOT_FREE_TEXT.
2914 Constructs an empty FDFAnnotationInk and initializes its subtype.
2915 Initializes a new empty FDFAnnotation with TYPE set to ANNOT_LINE.
2916 Initializes a new empty FDFAnnotation with TYPE set to ANNOTATION_LINK.
2917 Initializes a new empty FDFAnnotationPolygon with TYPE set to ANNOT.
2918 Initializes a new empty FDFAnnotationPolyline with the SUBTYPE set to ANNOT.
2919 Initializes a new empty FDFAnnotationSound with TYPE set to ANNOT.
2920 Constructs a new empty square annotation with subtype set to 'ANNOT'.
2921 Initializes a new empty FDFAnnotationStamp with SUBTYPE set to ANNOT.
2922 Constructs a new empty FDFAnnotation with TYPE set to ANNOT and SUBTYPE to TEXT.
2923 Initializes an empty FDFAnnotationTextMarkup of TYPE ANNOT.
2924 Builds and sets the vertical metrics for a CID font dictionary in PDF document. @param cidFont the CID font dictionary to modify @throws IOException if I/O operations fail during metric calculation
2925 Initializes an object representing a simple PDF font with default properties
2926 Retrieves an Optional Content Group by its name. @param name the unique identifier of the group @return PDOptionalContentGroup if found, otherwise null
2927 Retrieves all Optional Content Groups (OCGs) from the document. @return Collection of PDOptionalContentGroup objects representing OCGs
2928 Sets or removes line width in PDF document based on input value
2929 Sets or removes the miter limit in the graphics state dictionary. @param miterLimit Float value to be set; if null, item is removed
2930 Sets or removes the flatness tolerance value in the PDF document. @param flatness Float object representing the new tolerance; if null, removes it
2931 Sets or removes the smoothness tolerance in the extended graphics state dictionary. @param smoothness Float value for smoothness; if null, item is removed
2932 Sets or removes the stroking alpha constant in the graphics state dictionary. @param alpha Float object to be set; if null, item is removed (transparency)
2933 Sets or removes non-stroking alpha constant in extended graphics state dictionary.
2934 Initializes a PDF link annotation and sets its subtype.
2935 Initializes a new empty markup annotation in PDF documents.
2936 Initializes new popup annotation with its subtype set in the PDF document.
2937 Initializes an empty PDF annotation widget and sets its subtype.
2938 Initializes PDAnnotationLink object from a COSDictionary. @param field COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
2939 Constructs an instance of PDAnnotationMarkup from a COSDictionary. @param dict COSDictionary containing annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
2940 Constructs a popup annotation from a COSDictionary. @param field COSDictionary containing annotation data; sets TYPE to ANNOT if not already set or warns for invalid types.
2941 Initializes an unknown PDF document annotation from a COSDictionary. @param dic COSDictionary containing annotation data
2942 Initializes a PDAnnotationWidget object from a COSDictionary and sets its subtype. @param field COSDictionary containing annotation data
2943 Sets equal rectangle margin differences for this annotation in a PDF document. @param difference the same margin difference applied to all sides of the rectangle
2944 Sets uniform rectangle differences for free text annotation appearance. @param difference Uniform margin difference to be applied on all sides
2945 Sets equal rectangle differences for square or circular annotations in PDF document. @param difference The uniform margin difference to be applied on all sides.
2946 Sets border line style and width based on provided parameters. @param lineWidth desired width of the line @param bs border style dictionary @param border array containing border properties @throws IOException if there's an issue with I/O operations
2947 Adds key usage extensions to the certificate based on provided flags. @param digitalSignature flag for digital signature usage @param nonRepudiation flag for non-repudiation usage @param ... other key usage flags, each as a char ('0' or '1')
2948 Constructs a PDCheckBox object and initializes it within an AcroForm structure. @param acroForm the parent AcroForm structure for this checkbox
2949 Initializes a new PDComboBox instance and sets up the combo box field within a PDF form. @param acroForm the parent AcroForm structure for this combo box field
2950 Initializes a new PDListBox instance and sets up its form structure. @param acroForm the parent AcroForm structure for this list box field
2951 Sets the value of a single-valued choice field and clears multi-selection. @param value String to be set as the new value @throws IOException if I/O errors occur during setting the value
2952 Retrieves and validates the border array for annotation. Ensures a minimum size of 3 elements, filling missing values with zeros as per Adobe Reader behavior. @return COSArray representing the border attributes of the annotation.
2953 Initializes the compression pool with document and parameters. Sorts object and top-level structures. @param document The PDF document to be compressed @param parameters Compression settings; uses default if null @throws IOException If there's an issue adding structure or retrieving objects
2954 Retrieves a date from an embedded dictionary using given keys. Returns default if not found. @param embedded Key for the embedded dictionary @param key Unique identifier for the date object @return Calendar instance or null if date is not found
2955 Creates a PDImageXObject from a BufferedImage with default JPEG encoding quality (0.75). @param document PDF document to add the image to @param image Input BufferedImage object @return PDImageXObject with encoded image @throws IOException if input/output operations fail
2956 Adds a corner curl effect to the cloudy border. @param anglePrev previous angle, cx/cy center coordinates, radius and alphas for computation. @throws IOException if there is an error while generating the curve segment.
2957 Draws a basic ellipse using computed parameters and adds it to the PDF document. @param left/right/top/bottom coordinates of the bounding box for the ellipse
2958 Formats and displays text content based on given parameters and styles. @throws IOException If an I/O error occurs during formatting or displaying the text
2959 Calculates the optimal font size for text within a rectangle in consideration of content and size constraints. @param font PDFont object containing font information @param contentRect Rectangle defining the space where text will be placed @return Optimal font size as a float value @throws IOException If an I/O error occurs during calculation or retrieval of font metrics
2960 Reads and sets the font encoding based on dictionary values, handling symbolic flags and encodings.
2961 Determines if the font is symbolic based on its flag and encoding. @return Boolean value of symbolic property, or null if unknown
2962 Retrieves TrueTypeFont mapping based on base font and descriptor. @param baseFont unique font identifier @param fontDescriptor describes font attributes for fallback matching @return FontMapping with TrueTypeFont or fallback font if not found
2963 Maps and retrieves a FontBoxFont based on baseFont and fontDescriptor. Uses fallback if necessary. @param baseFont the primary font identifier @param fontDescriptor describes various attributes of a font @return FontMapping object containing matching FontBoxFont or fallback font with status
2964 Checks if the PDF form is dynamically generated using XFA. @return true if XFA is present and no fields are found; false otherwise
2965 Extracts rich content string from annotation's dictionary object. @return Rich content string, or empty if not found or error occurs
2966 Writes XML representation of field to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
2967 Retrieves rich text value from the PDF document. @return Rich text string or an empty string if not applicable
2968 Initializes Function Type 4 with a stream and processes it into instructions. @param functionStream COSBase containing PDF function data @throws IOException if there's an issue reading the stream
2969 Performs recursive interpolation on input coordinates. @param coord Coordinates for interpolation @param step Current index in the process @return Interpolated float array based on provided parameters
2970 Initializes Type6ShadingContext with shading and color model. Sets up for complex shading effect rendering. @param shading PDShadingType6 object; xform AffineTransform for transformations; matrix Matrix for additional transforms @param colorModel ColorModel to be used; deviceBounds Bounds for pixel table creation @throws IOException if error occurs during initialization or patch collection
2971 Initializes Type7ShadingContext for a given PDShadingType7 and ColorModel. Supports transformations. @param shading PDShadingType7 object; xform for AffineTransform; matrix for transformation settings @param colorModel ColorModel to be used; deviceBounds for pixel table creation @throws IOException if initialization or patch collection fails
2972 Extracts bytes from the XFA resource's COS object, handling both array and stream types. @return extracted byte data from the COS object or an empty array if not applicable @throws IOException if an I/O error occurs during extraction
2973 Initializes an empty PDPageFitDestination with default settings. Sets up the destination array and type for a PDF page view.
2974 Sets the fit bounding box for the PDF page view. Adjusts the type of destination based on input. @param fitBoundingBox boolean value to determine if bounding box should be fitted
2975 Initializes a new PDPageFitHeightDestination and sets its type.
2976 Sets the left position of a destination in PDF document. If input is -1, sets it to null; otherwise, sets it to the given value. @param x new left position or -1 to set as null
2977 Sets the fit bounding box for this PDF destination. @param fitBoundingBox boolean to enable/disable bounding box fitting
2978 Initializes a new empty PDPageFitRectangleDestination with default settings.
2979 Sets the left coordinate of the rectangle. @param x new left coordinate value; -1 to remove the coordinate
2980 Sets the bottom coordinate of the page rectangle. If -1 is provided, sets it to null. @param y new value for the bottom coordinate
2981 Sets the right coordinate of PDF page target rectangle. @param x new right coordinate or -1 to remove (nullify) it
2982 Sets the top coordinate of the rectangle in the PDF page destination. @param y the top coordinate value; -1 for null representation
2983 Initializes a PDPageFitWidthDestination object with default settings and type.
2984 Sets the top coordinate for a PDF page destination, adjusting its size and value as needed. @param y new top coordinate; -1 to unset the top coordinate
2985 Sets the fit bounding box type in the array for PDF page destination. @param fitBoundingBox true to use bounded type, false to use default type
2986 Initializes PDPageXYZDestination with default values. Sets up the destination type and allocates space for properties.
2987 Sets the left coordinate for the page destination or sets it to null if -1 is provided. @param x the value for the left coordinate or -1 to set it as null.
2988 Sets the top coordinate for a PDF page view destination. @param y new value for the top coordinate (-1 to remove)
2989 Sets the zoom level for the PDF destination. A value of -1 indicates no zooming. @param zoom The desired zoom level as a floating-point number
2990 Parses a value from a COS dictionary and resolves references if necessary. @return COSBase object or null; may be dictionary, string, array, name, boolean, or null object @throws IOException if an I/O error occurs during parsing
2991 Retrieves and processes decode parameters from the stream dictionary. @return List of Java objects representing decoded parameters, or null if not found @throws IOException if an error occurs during COS object manipulation
2992 Retrieves file decode parameters from the stream dictionary. @return List of Java objects representing decoded parameters or null if not found. @throws IOException if an error occurs during COS object manipulation.
2993 Initializes an instance of the class with CALGRAY color space name.
2994 Initializes a PDColor in CALRGB color space with default settings.
2995 Initializes a PDCIEDictionaryBasedColorSpace object in LAB color space. Calls parent constructor with COSName.LAB as argument.
2996 Constructs an instance of PDCalGray with provided COSArray. @param array COSArray containing color component values
2997 Constructs a PDCalRGB object from COSArray. @param rgb color components in COSArray format
2998 Constructs a new PDLab object with specified LAB color space data. @param lab Array containing color space data; inherits from COSArray
2999 Loads the ICC profile, handling exceptions and alternate color space. @throws IOException if input stream creation or profile processing fails
3000 Sets the 'a' component range in LAB color space of PDF document. @param range object containing min and max values; if null, resets to defaults
3001 Sets the blue component range in LAB color space. @param range object containing min and max values; if null, resets to defaults
3002 Retrieves the crop box of the page, clipping it to media box if necessary. @return The crop box rectangle or media box if not found or invalid.
3003 Resolves the bounding box for a widget's appearance stream. Uses BBox from stream or retranslates fieldWidget rectangle if null. @param fieldWidget annotation widget, provides fallback rectangle @param appearanceStream contains bounding box info, may be null @return non-null PDRectangle representing the bounding box
3004 Sets the bounding box for PDF layout attribute object and notifies changes. @param bbox PDRectangle object representing the new bounding box
3005 Sets or removes a color attribute in the PDF dictionary and notifies of changes. @param name attribute key to modify @param value PDGamma object for the color; if null, attribute is removed
3006 Sets or removes a four-color attribute in the PDF dictionary using a string name and its corresponding value. @param name String identifier for the color attribute @param value Four-color object to be set; if null, attribute is removed
3007 Initializes a PDPage object with default media box dimensions (Letter size).
3008 Adds a resource to the PDF document or retrieves its existing key. @param kind type of resource (font, color space, etc.) @param prefix initial string for new resource's key @param object COSObjectable representing the resource @return existing key if resource exists; otherwise, generates a new key and adds it to the document
3009 Adds or updates a font resource in the PDF document's dictionary. @param name unique identifier for the font resource @param font PDFont object representing the font to be added/updated
3010 Adds or updates a color space resource in the PDF document's dictionary.
3011 Adds or updates an extended graphics state resource in the PDF document's dictionary. @param name unique identifier for the extended graphics state @param extGState COSObjectable representing the extended graphics state to be added/updated
3012 Adds or updates a shading resource in the PDF document's dictionary.
3013 Adds or updates a pattern resource in the PDF document's dictionary. @param name unique identifier for the pattern @param pattern PDAbstractPattern object representing the pattern to be added/updated
3014 Adds or updates a property list resource in the PDF document's dictionary. @param name unique identifier for the property list @param properties PDPropertyList object to be added/updated
3015 Adds or updates an XObject resource in the PDF document's dictionary. @param name unique identifier for the XObject @param xobject PDXObject to be added/updated
3016 Retrieves or initializes the FDF dictionary from the PDF catalog. @return FDFDictionary object containing FDF data
3017 Initializes a new empty FDF document with default settings.
3018 Retrieves or creates the root FDFCatalog for the FDF document. @return The FDFCatalog object representing the document's root catalog.
3019 Retrieves the fractional space allocated for icons. Initializes and sets default if not found. @return PDRange object representing the fractional space for icons
3020 Initializes a tiling pattern with default resources and sets its type. Critical methods called: setResources, setInt.
3021 Retrieves or creates the appearance dictionary for a PDF annotation. @return PDAppearanceDictionary for managing annotation visuals.
3022 Inserts a new sibling before the current item in PDF outline structure. @param newSibling The PDOutlineItem to be inserted as a sibling
3023 Inserts a new sibling item after this node in the outline structure. @param newSibling the PDOutlineItem to be inserted as a sibling
3024 Appends a child outline item to this node and updates sibling relationships. @param newChild the PDOutlineItem to be appended as a child
3025 Prepends a new child to the outline item, managing hierarchy and siblings. @param newChild PDOutlineItem to be prepended
3026 Sets the first bead in the PDF document thread and updates the thread association. @param bead PDThreadBead object to set as the first; null removes current first bead
3027 Initializes a PDThreadBead object with default settings and self-referencing links.
3028 Appends a bead to the thread in PDF document navigation. @param append The PDThreadBead to add at the end of current thread.
3029 Sets a named item in dictionary and notifies of changes if applicable. @param name the key for the item @param value the string value to set
3030 Sets the rendering intent property in the PDF document's graphics state.
3031 Sets the name associated with this PDF document's named action. @param name the new name for the action
3032 Sets border effect style in PDF document's COSDictionary. @param s new style value
3033 Initializes page labels with a decimal style for the given document. @param document PDF document to apply page labeling
3034 Initializes a PDF structure element with type and parent node. @param structureType String representing the structure's type @param parent PDStructureNode to be set as the parent of this element
3035 Initializes and sets up the root of the PDF document structure tree with its type.
3036 Initializes a new shading pattern with the type set to SHADING_PATTERN.
3037 Initializes an empty PDAction with its default type.
3038 Retrieves the document outline if it exists; otherwise, returns null. @return PDDocumentOutline object or null if not found in PDF metadata
3039 Retrieves the parent node in the outline hierarchy. @return Parent node (PDOutlineNode) or null if no parent exists.
3040 Sets the button value based on index and validates input. Throws exception if index is invalid. @param index position of the value to be set; must be within valid range @throws IOException if an I/O error occurs during operation
3041 Initializes an empty rectilinear measurement dictionary and sets its subtype.
3042 Default constructor initializing PDTransition with REPLACE transition style.
3043 Sets a date item in the dictionary using a string key and a Calendar object. @param key String identifier for the date item @param date Calendar object to be formatted and set; if null, removes the item
3044 Sets or removes a date item in an embedded dictionary. @param embedded COSName identifier for the dictionary @param key COSName identifier for the date item @param date Calendar object to be set; if null, item is removed
3045 Sets the creation date of the PDF document. @param date a Calendar object representing the new creation date; if null, removes the date item
3046 Sets the modification date of the PDF document metadata. @param date Calendar object representing the new modification date; if null, removes the item
3047 Sets or updates the creation date of the PDF annotation
3048 Sets or removes the Modified date in annotation data. @param c Calendar object for modification; if null, removes the item
3049 Sets the creation date of the markup annotation in the PDF document. @param creationDate Calendar object representing the creation date to be set
3050 Sets the signing date of the PDF signature using the provided Calendar object. @param cal Calendar object representing the signing date to be set
3051 Sets a custom metadata value using a key-value pair in the PDF document's information dictionary. @param fieldName Metadata field name (key) @param fieldValue Value to be set for the metadata field; if null, removes the field
3052 Sets a string attribute and notifies changes in the PDF dictionary. @param name String identifier for the attribute @param value New string value; if null, removes the attribute
3053 Sets the 'Base' string in the URI action dictionary.
3054 Sets the version of the application in the signature properties dictionary.
3055 Sets the unit of measurement in the PDF number format dictionary.
3056 Sets the fractional display option for numerical values in a PDF document. @param fractionalDisplay String representing the display style ("D", "F", "R", or "T"; null allowed)
3057 Sets the thousand separator string in the PDF number format settings. @param thousandsSeparator String to be used as a thousand separator; null removes it
3058 Sets the decimal separator in the PDF document's number format settings. @param decimalSeparator String to be used as the decimal separator
3059 Sets the string used as a prefix in labels for numerical values. @param labelPrefixString The new prefix string to be set
3060 Sets the string suffix for labels in the PDF document. @param labelSuffixString String to be appended after labels
3061 Sets the position of a label in the PDF document. Accepts 'S' or 'P', else removes it. @param labelPositionToValue String representing the new label position ('S' or 'P')
3062 Sets the Macintosh subtype attribute for the embedded file. Creates a new PARAMS dictionary if needed and sets/removes the MAC SUBTYPE item. @param macSubtype String representing the Macintosh subtype; if null, removes the item
3063 Sets or removes the Mac creator attribute for the embedded file. @param macCreator String representing the Mac creator; if null, removes the attribute
3064 Sets or removes the Mac OS resource fork attribute for an embedded file. @param macResFork String representing the resource fork; if null, removes the attribute
3065 Constructs an FDFField object from XML element and initializes its properties. @param fieldXML XML element representing the form field @throws IOException if there's an issue with value conversion or setting
3066 Constructs a new optional content group with the given name. @param name The name for the OCG; if null, no name is assigned.
3067 Adds a group to the Optional Content Groups (OCG) and ensures it appears in the user interface. @param ocg the PDOptionalContentGroup object to be added; must not be null
3068 Retrieves the base state from the optional content dictionary. @return Corresponding BaseState or ON if not found in dictionary.
3069 Enables or disables a specific optional content group. @param group the PDOptionalContentGroup to modify @param enable true for enabling, false for disabling @return true if modification was successful; otherwise, false
3070 Sets an integer attribute and notifies if it changes. @param name the attribute key @param value the new integer value
3071 Sets an integer attribute and notifies of changes in the PDF dictionary. @param name attribute key @param value new integer value for attribute
3072 Sets the denominator in PDF document number format settings
3073 Sets annotation visibility in a PDF document. @param invisible true to hide, false to show
3074 Sets the visibility of the annotation in a PDF document. @param hidden boolean value to hide (true) or show (false) the annotation
3075 Sets or clears the "printed" flag for this annotation in the PDF document. @param printed boolean value to set the printed flag (true = printed, false = not printed)
3076 Sets or clears the 'no zoom' flag for this annotation. @param noZoom Boolean value to set (true) or clear (false) the flag
3077 Sets or clears the NO_ROTATE flag for the annotation, controlling its rotation behavior. @param noRotate boolean value to set (true) or clear (false) the flag
3078 Sets or clears the 'no view' flag for the annotation. @param noView true to hide the annotation; false to display it
3079 Sets the read-only status of this annotation using a flag in the dictionary. @param readOnly boolean value to set or clear the read-only status
3080 Sets or clears the lock flag on the annotation in the PDF document. @param locked Boolean value to set or clear the lock flag
3081 Sets the visibility of the annotation based on a boolean flag. @param toggleNoView true to hide, false to display the annotation
3082 Sets or clears the flag for locked contents in annotation. @param lockedContents boolean value to set lock status
3083 Sets the visibility of the annotation in the PDF document. @param invisible true to make it invisible; false to make it visible
3084 Sets the visibility of annotation in PDF document. @param hidden true to hide, false to show the annotation
3085 Sets or clears the 'printed' flag for the annotation in the PDF document. @param printed Boolean value to set or clear the 'printed' flag
3086 Sets or clears the No Zoom flag in annotation's dictionary, controlling zooming behavior. @param noZoom Boolean value to set (true) or clear (false) the No Zoom flag
3087 Sets the No Rotate flag for annotation, controlling its rotation behavior. @param noRotate Boolean value to enable or disable rotation of the annotation
3088 Sets or clears the No View flag for this annotation in the PDF document. @param noView true to hide the annotation, false to display it
3089 Sets or clears the read-only flag for this annotation's COSDictionary. @param readOnly Boolean value to set the read-only status
3090 Sets or clears the annotation's lock flag using a boolean value. @param locked Boolean to set (true) or clear (false) the lock flag
3091 Sets the flag to toggle annotation visibility in PDF viewer. @param toggleNoView true to hide, false to show annotation in viewer
3092 Sets or clears the flag for locked contents in annotation data. @param lockedContents Boolean to lock (true) or unlock (false) content
3093 Sets or clears the filter requirement flag in seed value attributes. @param flag Boolean to set (true) or clear (false) the filter requirement
3094 Sets the subfilter requirement for seed value in PDF signatures. @param flag Boolean to enable or disable subfilter requirement
3095 Sets the requirement for digest methods in the seed value. A true flag indicates that a digest method is necessary. @param flag Boolean to indicate if digest method is required (true) or not (false)
3096 Sets or clears the V bit in the seed value dictionary.
3097 Sets or clears the reason required flag for seed value. @param flag Boolean to set (true) or clear (false) the reason requirement
3098 Sets the legal attestation requirement for seed value in PDF document.
3099 Sets or clears the flag for adding revision information in PDF signature. @param flag Boolean value to add (true) or remove (false) revision info
3100 Sets required flag for subject in certificate data. @param flag true to require, false to unset
3101 Sets the issuer required flag in the certificate dictionary. @param flag Boolean value to set or clear the issuer requirement
3102 Sets the required flag for Object Identifier (OID) in the certificate. @param flag boolean value to require or not require OID
3103 Sets or clears the required flag for Subject DN in the certificate. @param flag boolean value to set or clear the required flag
3104 Sets or clears the required flag for key usage in the certificate dictionary. @param flag Boolean value to set (true) or clear (false) the key usage requirement
3105 Sets or clears the URL required flag in the certificate dictionary. @param flag boolean value to set (true) or clear (false) the URL requirement
3106 Sets or clears the italic formatting flag for this outline item. @param italic true to set italic, false to clear it
3107 Sets or clears the bold formatting flag for this PDF outline item
3108 Sets the flag for existing signatures in the PDF form.
3109 Sets or clears the 'append-only' flag for this form field. @param appendOnly boolean value to set or clear the flag
3110 Sets the sorting option for choice fields. @param sort true to enable sorting, false otherwise
3111 Sets the multi-selection option for the choice field. @param multiSelect boolean value to enable/disable multi-selection
3112 Sets the spell-check flag for choice fields in PDF forms. @param doNotSpellCheck boolean value to enable/disable spell-checking
3113 Sets the flag for committing changes upon selection in choice fields. @param commitOnSelChange boolean value to enable or disable this feature
3114 Sets or clears the combo flag for the choice field, enabling or disabling multi-selection. @param combo true to enable multi-selection, false otherwise
3115 Sets the editable state of the combo box field in the PDF form. @param edit boolean value to enable or disable editing
3116 Modifies read-only status of the field using a flag and bitwise operation.
3117 Sets or clears the 'required' flag in the field dictionary. @param required boolean value to set the requirement of the field
3118 Sets or clears the 'no export' flag for this field in PDF document. @param noExport true to set the flag, false to clear it
3119 Constructs a PDPushButton and initializes it as a push button in the AcroForm structure. @param acroForm parent AcroForm structure for this button
3120 Initializes a radio button in a PDF form. @param acroForm parent AcroForm structure for this button
3121 Sets the radio buttons to operate in unison or independently. Modifies the flag using a bitwise operation. @param radiosInUnison true for unison, false for independent behavior
3122 Sets or clears the multiline flag for this text field. @param multiline true to enable, false to disable multiline input
3123 Sets or clears the password protection flag on this text field. @param password true to protect with a password, false otherwise
3124 Sets or clears the 'file select' flag for this text field in PDF form. @param fileSelect true to enable, false to disable the file selection feature
3125 Sets the spell-checking flag for the text field. @param doNotSpellCheck true to disable spell-checking, false otherwise
3126 Sets or clears the 'do not scroll' flag in PDF text field, affecting display behavior. @param doNotScroll Boolean value to set or clear the flag
3127 Sets the Comb flag in the PDF form field, enabling or disabling character combination. @param comb boolean value to set or clear the Comb flag
3128 Sets or unsets the Rich Text flag for this text field. @param richText boolean value to set or unset the Rich Text flag
3129 Decodes JPEG2000 image data from input stream and writes the decoded data to output stream. @param encoded InputStream containing encoded JPX data @param decoded OutputStream for writing decoded data @param parameters COSDictionary containing decoding parameters @return DecodeResult object with additional information about the decoding process
3130 Validates and cleans the page structure in PDF document. Throws exception if invalid. @param root COSDictionary containing the PDF document's root data @throws IOException if page tree root is not a dictionary or if page objects are not dereferenced
3131 Retrieves the page tree of the PDF document. @return PDPageTree object representing the structure of pages in the document
3132 Constructs a PDPageTree from a COSDictionary. Used when no associated PDDocument is available. @param root COSDictionary representing the page tree; cannot be null
3133 Removes a PDPage from the page tree and updates ancestor counts.
3134 Inserts a new page before an existing one in the PDF document's page tree. @param newPage PDPage object to be inserted @param nextPage existing PDPage before which `newPage` is inserted
3135 Inserts a new page after a specified existing page in the document's page tree. @param newPage the PDPage object to be inserted @param prevPage the existing PDPage before which newPage will be placed
3136 Increments revision number of PDF structure element by one.
3137 Creates a PDImageXObject from a BufferedImage using CCITT encoding for 1-bit b/w images. @param document the PDF document to which the image will be added @param image the BufferedImage object to convert and include in the document @return a PDImageXObject representing the encoded image, or throws exception if not supported
3138 Creates a PDImageXObject from a RandomAccessRead source, specifically for CCITT-encoded images. @param reader RandomAccessRead object containing the image data @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3139 Sets a float number and notifies changes in the PDF dictionary. @param name String identifier for the item @param value Floating-point number to be stored
3140 Sets intensity of border effect in PDF document. @param i Floating-point value representing intensity level
3141 Sets the conversion factor in the PDF number format dictionary. @param conversionFactor Floating-point value for unit conversion
3142 Parses an object stream from the cross-reference table and updates the trailer resolver. @param objByteOffset byte offset of the object @param isStandalone standalone status of the xref table @return previous object reference or -1 if not found @throws IOException if parsing or I/O errors occur
3143 Parses and creates a PDDocument with lenient parsing mode. @return PDDocument object for further processing, or throws IOException if an error occurs
3144 Processes a transparency group in PDF document rendering, managing resources and graphics states. @param group the PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
3145 Processes a Type 3 character stream for accurate PDF rendering. @param charProc the character procedure to process @param textRenderingMatrix transformation matrix for text rendering @throws IOException if an I/O error occurs during processing
3146 Processes annotation appearance, scales and transforms according to its rectangle. @param annotation the annotation to process @param appearanceStream stream containing appearance details @throws IOException if I/O error occurs during processing
3147 Processes a tiling pattern, applying transformations and managing resources. @param tilingPattern The pattern to process @param color The color for the pattern @param colorSpace The color space for the pattern's color @param patternMatrix Transformation matrix for the pattern @throws IOException if an I/O error occurs during processing
3148 Processes a PDF content stream, managing resources and graphics states. @param contentStream the source of PDF operators to process @throws IOException if an I/O error occurs during parsing or processing
3149 Writes COSDocument to output stream as a PDDocument. @param doc The COSDocument to be written @throws IOException if there are issues with writing data
3150 Saves the document to an output stream with compression options. @param output the output stream for writing PDF data @param compressParameters parameters to control document compression
3151 Retrieves and returns the PDF version as a float. @return The highest version number between document header and catalog; -1 if not found/parsed correctly.
3152 Retrieves a page from the PDF document by index. @param index 0-based position of the page in the document @return PDPage object representing the specified page
3153 Removes a page from the PDF document at the specified index. @param index position of the page to be removed (0-based)
3154 Finds the index of a given page in the document's page tree. @param page PDPage object to find its index @return Index of the page or -1 if not found
3155 Retrieves the file specification from the PDF stream's dictionary. @return PDFileSpecification or null if not found, throws IOException for invalid types
3156 Retrieves and creates a file specification from the FDF document. @return PDFileSpecification or null if not found, throws IOException for errors
3157 Retrieves a list of embedded PDFileSpecifications from the FDF document. @return List<PDFileSpecification> or null if not found; throws IOException on error
3158 Retrieves and creates a PDF File Specification for the referenced page. @return PDFileSpecification object or null if not found; throws IOException on error
3159 Retrieves and creates a PDF File Specification from the embedded file's dictionary object. @return PDFileSpecification or null if not found, throws IOException for errors @throws IOException if there is an issue creating the file specification
3160 Retrieves and creates a PDF File Specification for the current action's file. @return PDFileSpecification object or null if not found, throws IOException
3161 Fetches and creates a file specification from the COS object dictionary. @return PDFileSpecification or null if not found, throws IOException for errors
3162 Retrieves and creates a file specification from the action's dictionary object. @return PDFileSpecification or null if base is null, throws IOException for invalid types.
3163 Retrieves and creates a PDF File Specification from the action's dictionary object. @return PDFileSpecification or null if not found, throws IOException for invalid types
3164 Retrieves and creates a PDF File Specification for the action's F dictionary object. @return PDFileSpecification or null if not found, throws IOException for invalid types
3165 Retrieves and creates a PDF File Specification for the attachment. @return PDFileSpecification object or null if not found, throws IOException.
3166 Notifies changes in attribute value and updates structure element
3167 Appends child element and sets parent in PDF struct tree; critical for hierarchy
3168 Inserts a structure element before a reference object in the node hierarchy. @param newKid The structure element to be inserted @param refKid Reference object before which insertion occurs
3169 Removes a child element from the node and updates its parent. @param structureElement The PDStructureElement to be removed @return true if removal was successful, else false
3170 Initializes an empty FDFAnnotationTextMarkup of TYPE ANNOT.
3171 Constructs an empty FDFAnnotationSquiggly and sets its subtype for identification.
3172 Initializes a strikeout annotation in FDF document. Sets the subtype for the annotation.
3173 Constructs and initializes a new FDFAnnotationUnderline object. Sets the subtype of the annotation.
3174 Initializes file attachment annotation and sets its subtype in PDF document.
3175 Initializes and sets the annotation subtype to ink during creation.
3176 Initializes a new empty line annotation and sets its subtype.
3177 Initializes an empty polygon annotation and sets its subtype in the PDF document.
3178 Initializes a new empty polyline annotation and sets its subtype in the PDF document.
3179 Initializes a new empty rubber stamp annotation and sets its subtype.
3180 Constructor to initialize square or circle annotation with a specified type. @param subType the type of the annotation ("Square" or "Circle")
3181 Initializes text annotation in PDF documents by setting its subtype.
3182 Initializes a new text markup annotation with the specified subtype. @param subType type of the text markup annotation
3183 Constructs an instance of PDAnnotationCaret from a COSDictionary. @param field COSDictionary containing caret annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
3184 Constructs an instance of PDAnnotationFileAttachment from a COSDictionary. @param field COSDictionary containing file attachment annotation data.
3185 Constructs an instance of PDAnnotationFreeText from a COSDictionary. @param field COSDictionary containing free text annotation data, calls super to set TYPE or warn for invalid types
3186 Constructs an instance of PDAnnotationInk from a COSDictionary. @param dict COSDictionary containing ink annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
3187 Constructs an instance of PDAnnotationLine from a COSDictionary. @param field COSDictionary containing line annotation data, calls super to handle annotation type checking and initialization
3188 Constructs an instance of PDAnnotationPolygon from a COSDictionary. Initializes polygon annotation properties.
3189 Constructs an instance of PDAnnotationPolyline from a COSDictionary. @param dict COSDictionary containing polyline annotation data.
3190 Initializes a PDAnnotationRubberStamp object from a COSDictionary. @param field the COSDictionary containing annotation data
3191 Initializes an instance of PDAnnotationSound from a COSDictionary. @param field COSDictionary containing sound annotation data, calls super to handle construction.
3192 Constructs an instance of PDAnnotationSquareCircle from a COSDictionary. @param dict COSDictionary containing square or circle annotation data.
3193 Constructs an instance of PDAnnotationText from a COSDictionary. @param field Dictionary containing text annotation data, sets TYPE to ANNOT if not set or warns for invalid types.
3194 Constructs an instance of PDAnnotationTextMarkup from a COSDictionary. @param field COSDictionary containing text markup annotation data
3195 Retrieves the popup annotation associated with this markup, if any. @return a PDAnnotationPopup object or null if not present
3196 Fetches and constructs a list of annotation widgets associated with the field. @return List of PDAnnotationWidget objects or an empty list if none found
3197 Writes the compressed body of a PDF document with object streams and encryption. @param document The COSDocument to be written @throws IOException If an error occurs during writing or creating output streams
3198 Checks if the font is symbolic. Assumes true unless proven otherwise. @return Boolean value of symbolic property, defaults to true if unknown
3199 Determines if the given PDF form has dynamically generated XFA content. @param acroForm the PDF form to be checked @return true if XFA is present and no fields are found; false otherwise
3200 Initializes FieldIterator with child fields from a PDF form. @param form PDAcroForm containing the fields to be iterated over
3201 Creates a PDF function based on the given COSBase object. @param function COSBase object representing the PDF function @return PDFunction instance corresponding to the function type in the input @throws IOException if the function is not a dictionary or has an unknown function type
3202 Initiates recursive interpolation on input data. @return Interpolated float array based on class's initialized values and coordinates.
3203 Extracts and converts the matte data from a soft-mask image to RGB. @param softMask PDImageXObject containing the soft mask @return Float array of RGB values or null if extraction fails @throws IOException for errors in retrieving color space or invalid data format
3204 Extracts and parses the XML document from the XFA resource's bytes. @return Document object representing the parsed XML structure @throws IOException if there's any issue reading or parsing the XML data
3205 Encodes and compresses the image for PDF inclusion with predictive filtering. @return PDImageXObject prepared for PDF or null if format is unsupported @throws IOException if there's an error during encoding or compression
3206 Sets or removes the destination of this outline item in a PDF document, based on the provided page. @param page PDPage object to set as the destination; null to remove the destination
3207 Initializes the rendering context for a given PDF page. @param page The PDF page to be initialized
3208 Retrieves the bleed box of the page, a region outside the media box used for printing. @return The bleed box rectangle or crop box if not found or invalid.
3209 Retrieves the trim box of the page, clipping it to media box if necessary. @return The trim box rectangle or crop box if not found.
3210 Retrieves the art box of the page, clipping it to media box if available; otherwise, returns crop box. @return The art box rectangle or crop box if not found or invalid.
3211 Returns a rotated crop box for the given page if rotation angle is 90 or 270 degrees, otherwise returns the original crop box. @param page The PDPage object to retrieve crop box and rotation angle from @return A PDRectangle representing the rotated crop box or original crop box
3212 Adds or retrieves a font resource in the PDF document. @param font the font to be added or retrieved @return existing key if font exists; otherwise, generates new key and adds it
3213 Adds or retrieves a colorspace resource in PDF document. @param colorSpace the PDColorSpace object to be added or retrieved @return existing key if colorspace exists; otherwise, generates a new key
3214 Adds or retrieves the key for an extended graphics state in PDF doc. @param extGState extended graphics state object to be added/retrieved @return existing key if state exists; otherwise, generates a new key and adds it
3215 Adds or retrieves a shading resource in PDF document. @param shading the PDShading object to be added or retrieved @return existing key if shading exists; otherwise, generates new key and adds it
3216 Adds or retrieves a pattern resource in PDF document. @param pattern PDAbstractPattern object to be added/retrieved @return existing key if pattern exists; otherwise, generates new key and adds it
3217 Adds a property list to the PDF document and returns its key. @param properties PDPropertyList to be added (group or optional content) @return COSName representing the key for the added property list
3218 Adds an image resource to the PDF document and returns its key. @param image PDImageXObject representing the image resource @return COSName key of the added or existing image resource
3219 Adds a form XObject resource to the PDF document or retrieves its existing key. @param form PDFormXObject to be added or retrieved @return existing key if form exists; otherwise, generates new key and adds it to the document
3220 Adds an XObject resource to the PDF document or retrieves its existing key. @param xobject PDXObject representing the resource @param prefix initial string for new resource's key @return existing key if resource exists; otherwise, generates a new key and adds it to the document
3221 Exports form data to an FDF document. @return FDFDocument containing exported field data or null on failure
3222 Retrieves or creates the 'down' appearance entry for annotation visuals. @return PDAppearanceEntry object, may be newly created if not existing.
3223 Retrieves or creates the rollover appearance entry for annotation. @return PDAppearanceEntry, may be newly created if not found.
3224 Retrieves the normal appearance entry for annotation, creating it if necessary. @return PDAppearanceEntry representing annotation's visual state.
3225 Adds a child outline item to the end of this node's children list and updates parent open count. @param newChild the PDOutlineItem to be appended as a child. Must have no siblings.
3226 Adds a new child outline item as the first child of this node, managing hierarchy and updates. @param newChild PDOutlineItem to be added
3227 Initializes page labels from a COSDictionary for the document. @param dict the dictionary containing page label information @throws IOException if an error occurs during retrieval of child nodes or numbers
3228 Constructs an empty PDActionEmbeddedGoTo and sets its subtype.
3229 Initializes a new PDF navigation action and sets its subtype.
3230 Initializes PDActionHide and sets its subtype to SUB_TYPE.
3231 Constructs an instance of PDActionImportData and sets its subtype.
3232 Initializes an empty PDActionJavaScript with its default subtype.
3233 Initializes an empty PDActionLaunch and sets its subtype.
3234 Initializes an empty PDActionMovie and sets its subtype.
3235 Initializes an empty PDActionNamed with its default subtype.
3236 Initializes a remote navigation action with its default subtype.
3237 Initializes a PDAction to reset form fields in a PDF document. Sets the subtype of this action for correct handling in the context.
3238 Initializes an empty PDActionSound with its default type and subtype.
3239 Initializes an empty PDAction of SUB_TYPE for form data submission.
3240 Initializes an empty PDActionThread with its default subtype.
3241 Initializes an empty PDActionURI and sets its subtype.
3242 Updates the open count of a node's parent based on the provided delta. @param delta change in open count to apply
3243 Sets the button value, validating and updating as needed. @param value The new value for the button. @throws IOException If there's an issue with I/O operations.
3244 Checks if a given optional content group is enabled or disabled. @param group the optional content group to check @return true if the group is enabled, false otherwise
3245 Enables or disables a specific optional content group by its name. @param groupName unique identifier for the group @param enable true to enable, false to disable @return true if modification was successful; otherwise, false
3246 Fetches and returns the page tree of the PDF document. @return PDPageTree object representing the structure of pages.
3247 Retrieves total number of pages in PDF document. @return Total count of pages; 0 if no valid page tree found.
3248 Sets or unsets the fixed pitch font descriptor flag. @param flag true to mark as fixed pitch, false otherwise
3249 Sets or unsets the serif font style attribute in the PDF font descriptor. @param flag true to set as serif, false otherwise
3250 Sets the symbolic flag in font descriptor. @param flag true if font is symbolic
3251 Sets the script flag in the font descriptor. @param flag Boolean value to enable or disable the script flag.
3252 Sets the non-symbolic flag in font descriptor. @param flag Boolean value to set
3253 Sets the italic style of the font descriptor. @param flag true for italic, false for normal
3254 Sets or unsets the ALL CAPITALS font descriptor flag. @param flag true to enable all capital letters, false otherwise
3255 Sets the small capitals font feature. @param flag True to enable, false to disable
3256 Sets or unsets the force bold font descriptor flag. @param flag true to force bold, false otherwise
3257 Creates PDImageXObject from byte array for CCITT-encoded images. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3258 Creates a PDImageXObject from a file for CCITT-encoded images. @param document PDF document to add the image to @param file Input file containing the image data @param number Page number to extract from TIFF format @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3259 Constructs a new FDFAnnotation object from the provided XML element. This method parses the attributes of the element to initialize various properties such as page, color, date, flags, name, rectangle, title, creation date, opacity, subject, intent, contents and border style. It also handles richtext content if present. @param element The XML element containing annotation data @throws IOException If the required 'page' or 'rect' attribute is missing or has incorrect values, or if there's an error while evaluating XPath expressions for contents and richtext contents
3260 Parses a COSBase object dynamically based on its key and requirements. @param objKey unique identifier for the object @param requireExistingNotCompressedObj flag to check if object is defined and not compressed @return parsed COSBase object or null if not found; throws IOException if errors occur
3261 Parses cross-reference tables and streams, validates object offsets, and builds a valid XREF table for the PDF document. @param document The COSDocument to parse and modify @param startXRefOffset Initial byte position of the first XREF table or stream @return Trailer dictionary containing metadata about the parsed XREF tables @throws IOException If an I/O error occurs during parsing or validation
3262 Displays a transparency group from PDF document. @param form the PDTransparencyGroup object to be displayed @throws IOException if an I/O error occurs during displaying
3263 Processes a soft mask for transparency groups, managing graphics states and colors. @param group the PDTransparencyGroup object to be processed @throws IOException if an I/O error occurs during processing
3264 Renders a Type 3 glyph for PDF rendering by processing the character stream. @param textRenderingMatrix transformation matrix for text rendering @param font the PDType3Font object containing the glyph data @param code unique font encoding identifier @throws IOException if an I/O error occurs during processing
3265 Manages and displays the visual representation of a PDF annotation. @param annotation The annotation object to be processed and displayed. @throws IOException If I/O error occurs during processing or rendering.
3266 Overloaded method to process a tiling pattern with default transformation matrix. @param tilingPattern The pattern to process @param color The color for the pattern @param colorSpace The color space for the pattern's color @throws IOException if an I/O error occurs during processing
3267 Renders a form object from PDF and processes its content stream, throwing exception if no current page is set. @param form the PDFormXObject to be displayed @throws IOException if an I/O error occurs during processing
3268 Saves the document to an output stream with default compression settings.
3269 Saves the document to a file with compression options. Warns if overwriting an existing non-empty file. @param file The destination file for saving the PDF data @param compressParameters Parameters to control document compression
3270 Creates a new PDDocument with metadata copied from the source document. @return A new PDDocument object with relevant metadata initialized @throws IOException if there is an error during document creation or metadata copying
3271 Sets the PDF document's version, enforcing no downgrades and updating catalog for versions >= 1.4. @param newVersion desired version to set; must not be lower than current version
3272 Returns an iterator over all pages in the document. @return An Iterator object for traversing the page tree structure
3273 Retrieves a specific page from the PDF document. @param pageIndex 0-based index of the desired page @return PDPage object representing the specified page
3274 Writes XML representation of FDF document to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3275 Prepares a PDF document for encryption using AES algorithm, sets up recipients and crypt filter settings. @param doc the PDDocument to be encrypted @throws IOException if encryption or encoding issues occur
3276 Initializes a new highlight annotation with the predefined subtype.
3277 Constructs a new squiggly line annotation with no document context.
3278 Constructs a new strikeout annotation and initializes with subtype.
3279 Initializes a new underline annotation with default settings. Calls parent constructor to set subtype as "Underline".
3280 Constructs an instance of PDAnnotationCircle from a COSDictionary. @param field COSDictionary containing circle annotation data
3281 Initializes a square annotation from a COSDictionary. @param field dictionary containing square annotation data
3282 Constructs an instance of PDAnnotationHighlight from a COSDictionary. @param dict contains highlight annotation data for initialization
3283 Constructs an instance of PDAnnotationSquiggly from a COSDictionary. @param dict COSDictionary containing squiggly line annotation data
3284 Constructs an instance of PDAnnotationStrikeout from a COSDictionary. @param dict Contains strikeout annotation data for initialization.
3285 Constructs an underline annotation from a COSDictionary. This is used to initialize and manage underline annotations in PDF documents. @param dict COSDictionary containing the data for the text markup annotation
3286 Imports data from an FDF field to the current PDField. Handles various COSBase types and updates field values and flags accordingly. @param fdfField source of data for importing @throws IOException if field value type is unknown or unsupported
3287 Draws an inline image at specified coordinates and dimensions in the PDF document. @param inlineImage PDInlineImage object containing image data @param x X-coordinate of the image's position @param y Y-coordinate of the image's position @param width Image width @param height Image height @throws IOException if an I/O error occurs during operation
3288 Creates and renders a cloud-like polygon from given path data. Calls cloudyPolygonImpl() to generate the shape and finish() to complete rendering. @param path array of points or curve segments defining the polygon @throws IOException if an I/O error occurs during rendering
3289 Creates and renders a cloud-like rectangle or ellipse based on input dimensions. @param left X coordinate of the rectangle's/ellipse's left side @param bottom Y coordinate of the rectangle's/ellipse's bottom side @param right X coordinate of the rectangle's/ellipse's right side @param top Y coordinate of the rectangle's/ellipse's top side @param isEllipse true if shape is an ellipse, false for rectangle
3290 Returns an iterator to traverse through the fields of the PDF form. @return An iterator initialized with child fields from this PDAcroForm instance.
3291 Evaluates input and chooses appropriate child function for calculation, based on input value. @param input Array of float values used in evaluation @return Float array containing the result of the chosen child function's evaluation
3292 Initializes a DeviceN color space with given COSArray and resources. @param deviceN array containing color space data @param resources associated PDF resources for the color space @throws IOException if there are issues processing the input data
3293 Retrieves and initializes the tint transform function if needed. @return PDFunction representing the tint transformation or null if not defined @throws IOException if there's an error during PDF function creation
3294 Initializes PDSeparation with an array and resources, setting up alternate color space and tint transform. @param separation COSArray containing separation data @param resources PDResources for creating alternate color space @throws IOException if the tint transform function has less output parameters than the alternate colorspace
3295 Retrieves the shading function for this PDShading instance, creating it if necessary. @return The PDFunction representing the shading function or null if not present. @throws IOException If there's an issue with creating the function from its dictionary object.
3296 Retrieves the functions array from the shading object. @return Array of PDFunctions used in shading calculations. @throws IOException if /Function element is not a dictionary or an array.
3297 Retrieves the transfer function for this soft mask, creating it if necessary. @return PDFunction representing the transfer function or null if not available @throws IOException if there's an issue with the underlying COSDictionary object
3298 Constructs a PDIndexed object from COSArray and initializes color tables. @param indexedArray input array containing color space information @param resources associated PDF resources for management @throws IOException if color table reading or initialization fails
3299 Evaluates input values through linear interpolation, as per PDF specification (section 3.9.1). @param input array of floating-point numbers to be evaluated @return an array of floats representing the evaluated output values @throws IOException if there's a problem with the function's /Decode entry
3300 Retrieves the image object as a BufferedImage, optionally applying region and subsampling. @param region Desired clipping area; if null, uses full image dimensions @param subsampling Factor for downsampling the image data @return Decoded and converted BufferedImage object with applied masking and alpha composition @throws IOException If an error occurs during decoding or reading input stream
3301 Creates PDImageXObject from BufferedImage with optimal encoding. Handles grayscale images and RGB images with predictive filtering. Falls back to sRGB for color preservation if necessary.
3302 Processes a PDF page, initializing context and rendering content stream. @param page The PDF page to be processed @throws IOException if an I/O error occurs during processing
3303 Processes a child content stream within the context of a PDF page. @param contentStream the source of PDF operators to process @param page the parent PDF page for the content stream @throws IOException if an I/O error occurs during processing
3304 Initializes a content stream for a PDF page with warning for overwriting. @param document the PDF document @param sourcePage the target PDF page @throws IOException if an I/O error occurs
3305 Sets the font for text rendering, managing the font stack and subsetting. @param font PDFont object to be set; throws IOException if not finite @param fontSize float value for the font size
3306 Sets parameters for an extended graphics state and writes to PDF content stream. @param state the extended graphics state object to be added/retrieved @throws IOException if writing operations fail
3307 Fills content with the specified shading, throws exception if used within a text block. @param shading The PDShading object to be filled into the content stream @throws IOException If an I/O error occurs while writing the shading resource
3308 Begins a marked content sequence with tag and properties. @param tag COSName identifier for the marked content @param propertyList PDPropertyList containing additional settings @throws IOException if an I/O error occurs while writing to output stream
3309 Sets a marked content point with properties in PDF document stream. @param tag COSName for the marking content point @param propertyList PDPropertyList to be added and referenced by the marking point
3310 Draws an image onto the content stream at specified position and dimensions. Throws exception if called within text mode. @param image PDImageXObject to be drawn @param x, y coordinates of the image's starting point @param width, height dimensions of the image @throws IOException, IllegalStateException
3311 Draws an image on the content stream using a given matrix and writes it to output. @param image PDImageXObject representing the image resource @param matrix Matrix object for transformation @throws IOException if an I/O error occurs during operation or within text mode
3312 Draws and writes a form XObject to the PDF document content stream. @param form PDFormXObject to be drawn and written to the content stream @throws IOException if an I/O error occurs when writing to the output stream
3313 Fetches and prepares normal appearance stream for annotation. @param compress true if output should be compressed, false otherwise @return PDAppearanceContentStream object or throws IOException if error occurs
3314 Retrieves page labels from the document's catalog dictionary. @return PDPageLabels object or null if not available in the PDF @throws IOException if error occurs during retrieval of the dictionary
3315 Initializes and sets JavaScript action string in PDF document. @param js JavaScript code to be executed
3316 Checks if a group with the given name is enabled. @param groupName unique identifier for the optional content group @return true if the group exists and is enabled, false otherwise
3317 Checks if a given optional content group is enabled or disabled in the PDF document. @param group the optional content group to check @return true if the group is enabled, false otherwise
3318 Adjusts destinations in the PDF document, checking and updating page references. @param destinationDocument The PDDocument object to modify
3319 Adds a page to PDF document & updates object numbers. @param page Page to be added
3320 Removes a specific page from the PDF document. @param page PDPage object to be removed
3321 Removes a single page from the PDF document at the specified index. @param pageNumber position of the page to be removed (0-based)
3322 Initializes PDFPrintable with document, rendering options, and configurations. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch @param center Boolean indicating if pages should be centered
3323 Initializes PDFRenderer with a PDDocument and sets up page tree for rendering. @param document the PDDocument to be rendered
3324 Initializes new instance of PageExtractor with source PDF document and sets end page to total number of pages. @param sourceDocument the PDF document from which to extract pages
3325 Generates a map of labels to their corresponding page indices. @return Map<String, Integer> with labels as keys and page indices as values
3326 Generates page labels for each index in the PDF document. @return Array of strings representing page labels; null if no label found.
3327 Initializes PDFPageable with document and printing settings. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print. @param dpi Print resolution in Dots Per Inch. @param center Indicates whether content is centered on the page.
3328 Constructs a font descriptor for the given Type 1 font. @param type1 The source Type 1 font object @return A populated PDFontDescriptor object @throws IOException if an error occurs during processing
3329 Constructs a font descriptor for given metrics, setting attributes such as name, family, symbolic status, bounding box, italic angle, and more. @param metrics FontMetrics object containing the required data @return PDFontDescriptor with populated attributes based on input metrics
3330 Generates a font descriptor for the given TrueTypeFont object. @param ttf The input TrueTypeFont object to create the descriptor from @return A PDFontDescriptor object containing font properties and metrics @throws IOException if required tables are missing in the font
3331 Creates PDImageXObject from byte array for CCITT-encoded images. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3332 Creates a PDImageXObject from a file for CCITT-encoded images. @param document PDF document to add the image to @param file Input file containing the image data @return PDImageXObject or null if extraction fails @throws IOException if an I/O error occurs
3333 Constructs FDFAnnotationCaret from XML, initializes subtype and fringe dimensions. Sets symbol if provided in the element's 'symbol' attribute. @param element The XML source for annotation data @throws IOException If required attributes are missing or invalid
3334 Initializes an FDFAnnotationCircle with XML element and sets interior color & fringe. @param element XML representation of the circle; contains 'interior-color' attribute @throws IOException if 'fringe' attribute in XML is invalidly formatted
3335 Constructs a new FDFAnnotationFileAttachment from the provided XML element and sets its subtype. @param element The XML element containing annotation data @throws IOException If there's an error while setting the subtype
3336 Initializes a free text annotation from XML element and sets its properties. @param element The XML element containing annotation data @throws IOException If there's an error during initialization or parsing
3337 Initializes FDFAnnotationInk with XML element and sets INKLIST annotation data. @param element XML element containing ink annotation data @throws IOException if 'gesture' element is missing in the input
3338 Initializes an FDFAnnotationLine with attributes from the provided XML element. Sets line coordinates, leader properties, endpoint styles, interior color, and caption settings. @param element XML element containing annotation details @throws IOException if required attributes are missing or invalid
3339 Initializes FDFAnnotationLink from an XML element, setting URI and action if present. @param element XML element containing link information @throws IOException if there's an error during initialization
3340 Constructs a polygon annotation from XML element and sets interior color. @param element source XML element containing vertex and color data @throws IOException if element is missing required attributes or values
3341 Initializes a polyline annotation from XML element and sets its name. @param element The input XML element containing annotation data @throws IOException If there's an error parsing the vertices or styles
3342 Initializes sound annotation from XML element and sets its subtype. @param element The XML element containing annotation data @throws IOException If there's an error while setting the subtype
3343 Constructs a square annotation from XML element and sets interior color & fringe dimensions. @param element the XML Element to initialize from
3344 Constructs a FDFAnnotationStamp object from XML element and sets its appearance based on XFDF specifications. @param element XML representation of the stamp annotation @throws IOException if there's issue parsing or reading XML data
3345 Constructs an FDFAnnotationText from XML element, initializes icon and state/model if available. @param element The XML element containing annotation data @throws IOException If required attributes are missing or invalid
3346 Constructs a text markup annotation from an XML element, sets its coordinates. @param element XML element containing annotation data @throws IOException if 'coords' attribute is missing or invalid
3347 Retrieves and validates the PDF document's trailer dictionary. Handles parsing, error handling, and decryption setup.
3348 Loads a PDF document from byte array with optional decryption and key store. @param input source of the PDF document as bytes @param password optional decryption password for encrypted documents @param keyStore input stream for keystore containing private keys @param alias alias of the private key to use in keystore @return parsed PDDocument object or throws IOException
3349 Loads a PDF document from the provided data source. @param randomAccessRead Data source for the PDF @return Parsed PDDocument object or null on failure @throws IOException If an I/O error occurs during loading
3350 Loads a PDF document from source with optional encryption key. @param randomAccessRead data source for the PDF @param password optional encryption key @return Parsed PDDocument object, may be encrypted or null on failure
3351 Loads a PDF document from a source using provided credentials. @param randomAccessRead Data source for the PDF. @param password Optional encryption key. @param keyStore Optional KeyStore for additional security. @param alias Optional alias within the KeyStore. @return Parsed PDDocument object, may be encrypted or null on failure.
3352 Initializes visual signature from a File input. @param file the PDF document containing the signature @throws IOException if there's an error during parsing or initialization
3353 Initializes visual signature from an input stream. @param is InputStream containing PDF data for the signature @throws IOException if there's an error during initialization or parsing
3354 Displays a glyph based on the font type and performs transformation using provided matrix. @param textRenderingMatrix Transformation matrix for text rendering @param font The PDFont object containing the glyph data @param code Unique font encoding identifier @param displacement Vector indicating displacement of the glyph @throws IOException if an I/O error occurs during processing.
3355 Constructs a PDF with a visible signature based on provided design properties. @param properties Object containing design parameters for the visible signature @return InputStream object representing the constructed PDF document @throws IOException if there are issues with writing or reading data during construction
3356 Saves the document to a file with default compression settings. @param file The destination file for saving the PDF data @throws IOException if an I/O error occurs during save operation
3357 Saves the PDF document to a file with optional compression. @param fileName The name of the destination file for saving the PDF data @param compressParameters Parameters controlling document compression; may be null for no compression
3358 Creates a new document if necessary based on split conditions and updates the document list, page maps, and annotation maps.
3359 Writes the PDF header, handles compression and versioning. @param doc COSDocument object to write header for
3360 Sets the optional content properties and adjusts version if needed. @param ocProperties new optional content properties; null to remove
3361 Retrieves and creates layout page from first PDF document page. @param doc the source PDF document @return LayoutPage object for overlaying content @throws IOException if an error occurs during page retrieval or layout creation
3362 Calculates and sets the size of a specific PDF page, including height and width, and handles rotation adjustments. @param document PDDocument object containing pages to process @param page Index (1-based) of the target page in the document
3363 Finds the destination page in a PDF document based on outline item's destination or action. @param doc The PDF document to search within @return PDPage object if found, otherwise null @throws IOException for unknown destination types or errors during retrieval
3364 Retrieves the page format for a specific index, considering rotation and orientation settings. @param pageIndex The 0-based index of the desired page @return PageFormat object representing the formatted page
3365 Retrieves the page number from a PDF document destination. @return Page number or -1 if not found or invalid type.
3366 Writes XML representation of FDF data to a writer stream. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3367 Prepares the PDF document for encryption by setting up an encryption dictionary and managing passwords, permissions, and versions. @param document The PDDocument to be encrypted @throws IOException if an error occurs during encryption setup
3368 Creates a specific annotation based on the subtype of the input COSDictionary. @param base The COSDictionary containing annotation data @return A PDAnnotation object corresponding to the subtype or unknown if not supported
3369 Draws an inline image at the specified coordinates using its original dimensions in the PDF document. @param inlineImage PDInlineImage object containing image data @param x X-coordinate of the image's position @param y Y-coordinate of the image's position @throws IOException if an I/O error occurs during operation
3370 Creates a cloud-like rectangle and applies finishing touches. @param rd Rectangle difference for dimensions; may affect output shape @throws IOException if an error occurs during rendering or closing path
3371 Implements the drawing of a cloud-like ellipse with a border effect based on intensity. @param leftOrig, bottomOrig, rightOrig, topOrig: coordinates for the bounding box @throws IOException if there is an error while generating the curve segment
3372 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects or an empty list if none found
3373 Refreshes appearances of all terminal fields in the form. @throws IOException if an I/O error occurs during refresh
3374 Returns an iterator to traverse through all fields in this PDF form. @return An iterator initialized with child fields from this PDAcroForm instance.
3375 Caches or clears the fields of this PDAcroForm for improved performance. @param cache true to enable caching, false to clear the cache
3376 Retrieves a form field by its fully qualified name, checking the cache first and then the field tree. @param fullyQualifiedName The unique identifier of the form field @return The PDField object if found; otherwise, null
3377 Creates PDColorSpace from COSBase object and manages resource usage. @param colorSpace the base color space to create from @param resources associated PDF document resources, can be null @return PDColorSpace object or throws IOException if creation fails
3378 Evaluates shading functions and ensures values are within valid range. @param input array of floating-point numbers for function evaluation @return array of evaluated function results, clamped to [0,1] range @throws IOException if an error occurs during function evaluation
3379 Constructs a PDIndexed object from COSArray with default resources. @param indexedArray input array containing color space information @throws IOException if color table reading or initialization fails
3380 Retrieves the full image object as a BufferedImage with no subsampling. @return Decoded and converted BufferedImage object or null if an error occurs @throws IOException If an error occurs during decoding or reading input stream
3381 Processes a PDF page and sets up the translation matrix based on crop box position. @param page The PDF page to be processed @throws IOException if an I/O error occurs during processing
3382 Sets the stroking color for PDF graphics, handling colorspace changes and writing values to content stream. @param color The PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
3383 Sets the non-stroking color for the content stream, managing color space changes and components. @param color PDColor object defining the new color settings @throws IOException if an error occurs during writing to output stream
3384 Draws an image at specified coordinates using its original width and height
3385 Fetches and prepares normal appearance stream for annotation. @return PDAppearanceContentStream object or throws IOException if error occurs
3386 Opens an outline item node in PDF document. If not open, switches node count and updates parent state.
3387 Closes an open outline node and updates its parent's count.
3388 Imports a page from another PDF and adds it to the document. @param page Page object to be imported @return Imported PDPage object or throws IOException if import fails
3389 Creates a PDF template from a given page and sets it for the PDF structure.
3390 Constructor for PDFPrintable with settings for document, rendering options, and configurations. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch @param center Boolean indicating if pages should be centered
3391 Creates PDFPageable with default settings for a given PDDocument. @param document The source PDF document to be printed
3392 Initializes PDFPageable with document and page orientation. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait).
3393 Constructs a PDFPageable object with default DPI and content centering. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print.
3394 Constructs a PDFPageable object with specified settings and default centering. @param document The source PDF document to be printed. @param orientation Page orientation (landscape or portrait). @param showPageBorder Determines if page borders are visible during print. @param dpi Print resolution in Dots Per Inch.
3395 Constructs a PDType1FontEmbedder for embedding Type 1 fonts into PDF documents. @param doc the target PDF document @param dict COSDictionary for storing font data @param pfbStream InputStream containing PFB (Picture File Base) data @param encoding FontBox Encoding object; if null, uses default from Type 1 font @throws IOException if an error occurs during processing
3396 Initializes TrueTypeEmbedder with document, dictionary, and font data. Checks embedding permissions and sets up font descriptors for PDF documents. @param document the PDF document to associate with the embedder @param dict the COSDictionary containing font properties @param ttf the input TrueTypeFont object @param embedSubset if true, allows embedding of a subset of the font; false for full embedding @throws IOException if embedding is not permitted or if an error occurs during setup
3397 Creates PDImageXObject from a file based on its extension. Supports JPG/JPEG, TIF/TIFF, GIF, BMP, and PNG formats. @param file Input image file @param doc PDF document to add the image to @return PDImageXObject or throws exception if format is not supported
3398 Creates an image object from a file for a given PDF document. @param file Input file containing the image data @param doc PDF document to add the image to @return PDImageXObject or throws exception if not supported or errors occur
3399 Initializes a highlight annotation from an XML element and sets its subtype. @param element the XML element containing annotation data @throws IOException if there's an issue with setting the subtype
3400 Constructs a squiggly line annotation from an XML element and sets its subtype. @param element XML element containing annotation data @throws IOException if subtype setting fails
3401 Initializes a strikeout annotation from XML and sets its subtype. @param element XML element containing annotation data @throws IOException if initialization fails due to missing data
3402 Initializes underline annotation from XML element and sets its subtype. @param element XML data for the annotation @throws IOException if data is missing or invalid
3403 Loads a PDF document from byte array with optional decryption. @param input source of the PDF document as bytes @param password optional decryption password for encrypted documents @return parsed PDDocument object or throws IOException
3404 Loads a PDF from file with an optional decryption password. @param file the PDF file to load @param password the decryption password if encrypted, or null otherwise @return loaded PDF document or throws IOException on failure
3405 Loads a PDF from file with optional password and keystore. @param file The PDF file to load. @param password Decryption password if encrypted. @param keyStore Keystore for certificate-based encryption. @param alias Alias of the certificate. @return Loaded PDF document or throws IOException on failure.
3406 Sets visual signature properties using a PDVisibleSigProperties object. @param visSignatureProperties object containing visible signature properties @throws IOException if an error occurs during initialization or parsing of the signature
3407 Builds and sets the visible signature by creating a PDF template, building the PDF, and setting it. @throws IOException if there are issues with writing or reading data during construction
3408 Saves the PDF document to a file with a given name. @param fileName The name of the destination file for saving the PDF data. @throws IOException if an I/O error occurs during save operation.
3409 Transfers optional content properties from source to target document. @param srcDoc the source PDF document containing OC properties @throws IOException if an error occurs during cloning or merging processes
3410 Initializes a new instance of PDVisibleSignDesigner with the provided document, image stream, and page. @param document PDF document containing pages to process @param imageStream Input stream for setting signature image @param page Index (1-based) of target page in the document @throws IOException if an error occurs during reading or processing
3411 Initializes PDVisibleSignDesigner with a PDF document, signature image, and target page. @param document The PDDocument object to process. @param image The BufferedImage object used as the signature's image. @param page The 1-based index of the target page in the document.
3412 Writes XML representation of FDF data to a writer stream, including catalog data. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing
3413 Retrieves and filters annotations based on a provided filter. @param annotationFilter filter to determine which annotations to include @return list of PDAnnotation objects that pass the filter criteria
3414 Fetches and returns a COSObjectable (XObject or Annotation) based on the OBJ key. @return COSObjectable object, XObject, Annotation, or null if not found/supported
3415 Retrieves the annotation to which this annotation is a reply. @return PDAnnotation object if this annotation has a reply; otherwise, null @throws IOException if there's an error accessing PDF data
3416 Retrieves and validates the parent markup annotation. @return PDAnnotationMarkup if successful; otherwise, logs error and returns null.
3417 Creates and draws a cloud-like ellipse with border effect based on the input rectangle. @param rd Input rectangle for dimensions; applies difference and minimum values @throws IOException if there's an error while generating or drawing the curve segment
3418 Retrieves signature dictionaries from PDF document fields. @return List of PDSignature objects or empty list if none found
3419 Imports data from an FDF document into the current PDF form fields. @param fdf FDFDocument containing data to be imported @throws IOException if there are issues with field value types or unsupported operations
3420 Evaluates shading function for a single input value. @param inputValue floating-point number to be evaluated @return evaluated function result, clamped to [0,1] range @throws IOException if an error occurs during evaluation
3421 Evaluates shading function and converts result to RGB color value. @param values array of floating-point numbers for function evaluation @return integer representation of evaluated RGB color @throws IOException if an error occurs during function evaluation or conversion
3422 Retrieves the non-stroking paint with soft mask applied, if available. @return Paint object for rendering non-stroking elements considering soft masks. @throws IOException If there's an issue processing graphics state or applying soft masks.
3423 Processes a PDF page and extracts text based on specified conditions. @param page The PDPage object to be processed @throws IOException if an I/O error occurs during processing
3424 Sets the stroking color for PDF graphics, handling various color spaces and writing values to content stream. @param color The PDColor object representing the new stroking color @throws IOException if an I/O error occurs while writing to the output stream
3425 Sets non-stroking color for content stream, managing color space and components. @param color PDColor object defining the new color settings @throws IOException if an error occurs during writing to output stream
3426 Appends a form as a new layer in target PDF page and manages optional content groups. @param targetPage the page to add the form layer to @param form the source form object to be drawn on the page @param transform transformation matrix for positioning and scaling @param layerName unique name for the new optional content group (layer) @return PDOptionalContentGroup object representing the newly created layer @throws IOException if an error occurs during PDF manipulation
3427 Renders a PDF form XObject if not hidden in OCG and content is rendered. @param form PDFormXObject to be shown @throws IOException if an I/O error occurs during rendering
3428 Renders transparency group on the graphics context and applies transformations. @param form TransparencyGroup to be rendered @param graphics Graphics2D object for rendering operations @throws IOException If there's an issue with image processing or drawing
3429 Manages visibility of marked content based on optional content group properties. @param tag name of the marked content sequence @param properties dictionary containing additional information about the content
3430 Constructor for PDFPrintable with settings for document and rendering options. @param document PDDocument to be printed @param scaling Scaling strategy for page content @param showPageBorder Boolean indicating border visibility @param dpi Desired resolution in dots per inch
3431 Constructs a PDType1Font object with specified encoding from input stream and document. @param doc the PDF document @param pfbIn Type 1 font data input stream @param encoding font encoding to be used, or null for default
3432 Initializes a PDFont object with the provided font dictionary and loads related data. @param fontDictionary COSDictionary containing font information
3433 Constructs a PDCIDFontType2Embedder object and sets up the font dictionary for embedding. @param document PDF document to embed font into @param dict Font descriptor dictionary @throws IOException if there's an error creating or accessing font data
3434 Constructs PDTrueTypeFontEmbedder and sets up font properties for PDF documents. @param document the PDF document to associate with embedder @param dict COSDictionary containing font properties @param ttf TrueTypeFont object @throws IOException if embedding is not permitted or if an error occurs during setup
3435 Creates PDImageXObject from a file path. Supports various formats. @param imagePath Path to the input image file @param doc PDF document to add the image to @return PDImageXObject or throws exception if format is not supported
3436 Constructs an FDFDictionary from XML data, initializing file specification, IDs, fields, and annotations. @param fdfXML the root XML element containing FDF data
3437 Loads a PDF document from byte array without decryption. @param input source of the PDF document as bytes @return parsed PDDocument object or throws IOException
3438 Loads a PDF from file with an optional decryption password. @param file the PDF file to load @param password the decryption password if encrypted, or null otherwise @return loaded PDF document or throws IOException on failure
3439 Loads and parses a PDF document from a given file. @param file The input PDF file @return Parsed PDDocument object or null if loading fails
3440 Imports a page from sourceDoc and returns it as a PDFormXObject for controlled addition to the targetDoc. @param sourceDoc the document containing the page to be imported @param page the specific page object to be transformed into a form @return the imported page as a PDFormXObject or null if not successful @throws IOException if an error occurs during content retrieval, resource cloning, or transformation processes
3441 Initializes PDVisibleSignDesigner with document source, image stream, and target page. @param documentSource Data source for the PDF. @param imageStream Input stream for visible signature image. @param page Index of the target page in the document (1-based). @throws IOException If an I/O error occurs during initialization.
3442 Initializes PDVisibleSignDesigner with an image & calculates PDF page size. @param documentSource Data source for the PDF @param image Signature's BufferedImage object @param page Index (1-based) of the target page in the document @throws IOException If I/O error occurs during initialization or calculation
3443 Saves FDF data in XML format to a writer stream and closes the output. @param output the Writer object for outputting XML data @throws IOException if an I/O error occurs during writing or closing
3444 Retrieves all annotations on the page.
3445 Retrieves the last signature dictionary from PDF document. @return Last PDSignature object or null if none exist
3446 Saves PDF document for external signing and initializes signing support. @param output OutputStream to write the signed document @return ExternalSigningSupport object or throws exception if unable to sign @throws IOException If I/O error occurs during writing or signing process
3447 Draws a glyph, transforming and rendering it based on provided parameters. @param path The shape of the glyph @param font The font in which the glyph is to be drawn @param code Unique code for the glyph @param displacement Vector defining displacement of the glyph @param at AffineTransform object for transforming the glyph shape
3448 Processes pages in PDF document based on bookmarks, extracting text from specified range. @param pages PDPageTree object containing all pages in the document @throws IOException if an I/O error occurs during processing
3449 Initializes and customizes the visual content of a widget's appearance stream. Handles background color, border style, and comb field dividers. @param widget annotation widget to be customized @param appearanceCharacteristics dict containing appearance properties @param appearanceStream target stream for writing content @throws IOException if there's an error creating or writing to the output stream
3450 Writes font settings to a content stream, setting the default size when required. @param contents target content stream @param zeroFontSize fallback font size if current is 0
3451 Constructs a PDFPrintable object with settings for the document and rendering options. @param document The PDDocument to be printed @param scaling The Scaling strategy for page content @param showPageBorder Boolean indicating border visibility
3452 Constructs a PDType1Font object with default encoding from input stream and document. @param doc the PDF document @param pfbIn Type 1 font data input stream @throws IOException if an I/O error occurs
3453 Initializes a simple font from a COS dictionary. @param fontDictionary contains font properties and settings
3454 Initializes a Type 0 font from dictionary and sets up its descendant font. @param fontDictionary contains font info in PDF format @throws IOException if font data is invalid or unreadable
3455 Initializes PDType0Font with TrueType font, handles subsetting, vertical text, and resource management. @param document PDF document for embedding @param ttf TrueTypeFont to be used @param embedSubset whether to embed a subset of the font or not @throws IOException if there's an error with font data or subsetting
3456 Initializes PDTrueTypeFont for PDF document embedding, setting up font properties and handling resource closure. @param document PDF document @param ttf TrueTypeFont object @param encoding Font encoding @param closeTTF Flag to close underlying data source after full load @throws IOException if embedding or closing fails
3457 Initializes FDFCatalog with XML data and sets the corresponding FDF dictionary. @param element root XML element containing FDF data
3458 Deprecated; loads and parses a PDF document from a given file. @param file The input PDF file @return Parsed PDDocument object or null if loading fails
3459 Imports a specific page of sourceDoc as a PDFormXObject for controlled addition to targetDoc. @param sourceDoc the document containing the desired page @param pageNumber 0-based index of the desired page @return the imported page as a PDFormXObject or null if not successful @throws IOException if an error occurs during content retrieval, resource cloning, or transformation processes
3460 Saves FDF data in XML format to a file, handling resources automatically. @param fileName the output file for saving XML data @throws IOException if an I/O error occurs during writing or closing
3461 Updates structural parent entries for a PDF page and its annotations. @param page The PDF page to update @param structParentOffset Value to adjust the structural parents count
3462 Clones the structure tree from source to destination PDF document. @param destinationDocument The target PDDocument for cloning structure tree. @throws IOException if an I/O error occurs during cloning or setting the structure tree.
3463 Processes and handles annotations on a specific PDF page during splitting. Clones annotations, fixes links, and adjusts references for split documents. @param imported PDPage containing annotations to be processed
3464 Adds a digital signature to the PDF document and updates related structures. @param sigObject Signature object containing details of the signature @param signatureInterface Interface for signing operations @param options Additional configuration options, including visual signature settings @throws IOException if there is an error during operation or saving changes to the document
3465 Fills and then strokes a path using specified winding rule, handling cloning for preserving the original path. @param windingRule Rule to determine which region of the path to fill (e.g., WIND_EVEN_ODD) @throws IOException If errors occur in setting paint or retrieving composite/stroke objects during strokePath()
3466 Extracts and writes text from a PDF document to an output stream. @param doc The input PDDocument object containing the PDF content @param outputStream Writer object for receiving the extracted text @throws IOException if an I/O error occurs during processing
3467 Inserts a generated appearance stream into the provided annotation widget based on the field's value and default appearance settings. This method handles various aspects such as font selection, size calculation, text alignment, and clipping paths to create the appearance that matches Acrobat's behavior. It also manages the generation of highlight rectangles for selected options in listboxes and supports multiline text fields. @param widget The annotation widget to insert the generated appearance stream into. @param appearanceStream The appearance stream that will be used to create the content stream. @param output The output stream where the generated appearance data will be written. @throws IOException If an I/O error occurs during the generation or writing of the appearance data.
3468 Renders a PDF page onto the provided Graphics2D context. @param g The target Graphics2D context for rendering @param pageSize Rectangle representing the size of the page to be rendered @throws IOException if I/O error occurs during rendering
3469 Constructs a PDFPrintable object with settings for the document and rendering options. @param document The PDDocument to be printed @param scaling The Scaling strategy for page content
3470 Provides the default font for PDF rendering, initializing it with HELVETICA if needed. @return The default PDType1Font object used in PDF rendering.
3471 Initializes PDTrueTypeFont with provided font dictionary. May embed or substitute the font. @param fontDictionary COSDictionary containing font data and metadata @throws IOException if input/output operations fail or font parsing fails
3472 Initializes a PDType1CFont object from a COSDictionary. Handles embedded Type1C fonts and fallback options. @param fontDictionary the dictionary containing font information @throws IOException if there are issues reading or parsing the font data
3473 Initializes a PDType1Font object with the given dictionary. Handles embedded Type1 and PFB fonts, repairs damaged fonts, and sets up generic font for rendering. @param fontDictionary COSDictionary object containing font information. @throws IOException if errors occur during font file reading or parsing.
3474 Constructs a Type 3 font from dictionary and initializes encoding. @param fontDictionary contains font properties and settings @param resourceCache manages shared resources like images and fonts @throws IOException if there's an error during input/output operations
3475 Loads and initializes a Type 0 font from input data. @param doc PDF document for embedding the font @param randomAccessRead input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @param vertical flag for handling vertical text orientation @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3476 Loads a Type 0 font from a TrueType font. Supports embedding and subsetting options. @param doc PDF document to load the font into @param ttf TrueTypeFont instance to be loaded @param embedSubset whether to embed a subset of the font or not @return PDType0Font instance for use in the PDF document @throws IOException if there's an error with font data or subsetting
3477 Loads a vertical Type 0 font into a PDF document. @param doc the PDF document to modify @param ttf the TrueTypeFont to be used @param embedSubset whether to embed only a subset of the font @return PDType0Font object for vertical text rendering @throws IOException if there's an error with font data or subsetting
3478 Loads a PDTrueTypeFont into the PDF document using specified parameters. @param doc PDF document @param ttf TrueTypeFont object @param encoding Font encoding @return Newly loaded PDTrueTypeFont instance @throws IOException if embedding fails
3479 Loads a TrueType font from a data source into the PDF document. @param doc the target PDF document @param randomAccessRead input data stream for the font file @param encoding font encoding to be used in the document @return PDTrueTypeFont object for manipulation within the PDF document @throws IOException if parsing or embedding fails
3480 Constructs an FDFDocument from a given XML Document, validating and setting the FDFCatalog. @param doc XML Document containing FDF data; root element should be 'xfdf' @throws IOException if root element is not 'xfdf'
3481 Initializes the PDVisibleSignDesigner with a file, image stream, and page index. Sets signature image and calculates page size. @param filename path to the input PDF file @param imageStream input stream for the signature image @param page target page index (1-based) in the document @throws IOException if there's an error processing the file or image stream
3482 Constructs PDVisibleSignDesigner by setting the image and calculating page size. @param filename path to the input PDF file @param image The BufferedImage object for the signature's image @param page index (1-based) of the target page in the document @throws IOException if there's an error loading or processing the PDF file
3483 Saves FDF data in XML format to a file, handling resources automatically. @param fileName the output file path for saving XML data @throws IOException if an I/O error occurs during writing or closing
3484 Processes a page in the PDF splitting process, managing document creation, importing, and annotation handling. @param page PDPage to be processed; contains content, resources, and potential annotations
3485 Adds digital signature with default settings. @param sigObject Signature object containing details of the signature @param options Additional configuration options for visual signature settings @throws IOException if there is an error during operation or saving changes to the document
3486 Adds a digital signature to the PDF document with default options. @param sigObject The signature object containing details of the signature. @param signatureInterface Interface for signing operations. @throws IOException If there is an error during operation or saving changes to the document.
3487 This is a complex method that merges two PDF documents into one. It handles various aspects of the PDF specification such as page resources, annotations, actions, and structure. The method begins by checking if the source document has a structure tree root (a logical structure hierarchy). If not, it creates a dummy structure tree in the destination to ensure that any existing source structure trees are cloned correctly. It then iterates over each page of the source catalog and creates a new page in the destination with a cloned copy of the source page's COSObject. If structure merging is enabled, it updates the StructParent entries of the new page to avoid overlapping with existing values. The method also handles merging of resources, open actions, structure trees (including role maps, ID trees, mark info, and language), viewer preferences, and metadata. It uses a cloner object to clone COSObjects from the source document into the destination document, taking care to handle any shared resources efficiently. Finally, if structure merging is enabled, it updates page references in the new parent tree node and merges K entries, role maps, ID trees, mark info, language, and viewer preferences from the source structure tree into the destination structure tree. Overall, this method provides a comprehensive solution for merging two PDF documents while preserving as much of their original structure and content as possible.
3488 Converts a PNG image to a format compatible with PDF documents. @param doc the target document for the converted image @param imageData byte array containing PNG data @return PDImageXObject if conversion is successful, otherwise null
3489 Extracts text from a PDF document and returns it as a string. @param doc The input PDDocument object containing the PDF content @return String representation of the extracted text @throws IOException if an I/O error occurs during processing
3490 Renders a specific page from the PDF document as an image with customizable settings. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @param imageType Type of the output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3491 Renders a specific page of the PDF to the given Graphics2D context. @param pageIndex 0-based position of the page in the document @param graphics The target Graphics2D context for rendering @throws IOException if I/O error occurs during rendering
3492 Constructs a PDFPrintable object with default scaling strategy for printing a PDDocument. @param document The PDDocument to be printed
3493 Renders and displays a string of text using current graphics and text state settings. @param string byte array representing the text to be displayed @throws IOException if an I/O error occurs during processing
3494 Constructs a PDMMType1Font object from a COSDictionary. @param fontDictionary contains font information for initialization @throws IOException if errors occur during font file reading or parsing
3495 Constructs a Type 3 font from dictionary. @param fontDictionary contains font properties and settings @throws IOException if there's an error during input/output operations
3496 Loads and initializes a Type 0 font from a file. @param doc PDF document for embedding the font @param file input TrueTypeFont file to load @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3497 Loads a Type 0 font from an input stream. @param doc PDF document for embedding the font @param input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3498 Loads and initializes a vertically oriented Type 0 font from a file. @param doc PDF document for embedding the font @param file input file containing TrueTypeFont data @return Initialized PDType0Font object with vertical text orientation @throws IOException if there's an error with font parsing or subsetting
3499 Loads a vertical Type 0 font from an input stream for the PDF document. @param doc target PDF document @param input source of TrueTypeFont data @return Initialized PDType0Font object with vertical text orientation support @throws IOException if there's an error during font loading or parsing
3500 Loads a vertical Type 0 font from an input stream. @param doc PDF document for embedding the font @param input input data to parse TrueTypeFont @param embedSubset whether to embed a subset of the font or not @return Initialized PDType0Font object with vertical text orientation @throws IOException if there's an error with font parsing or subsetting
3501 Loads a TrueType font from a file into the PDF document. @param doc target PDF document @param file input font file @param encoding font encoding for the document @return PDTrueTypeFont object for manipulation within the PDF document @throws IOException if parsing or embedding fails
3502 Loads a TrueType font from an input stream into the PDF document. @param doc target PDF document @param input data stream for the font file @param encoding font encoding to be used in the document @return PDTrueTypeFont object or throws IOException if loading fails
3503 Loads an XFDF document from the given InputStream. @param input Stream containing XML data of the XFDF document @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3504 Processes pages based on start and end page numbers. @throws IOException if there's an error during processing
3505 Adds digital signature with default settings to the PDF document. @param sigObject Signature object containing details of the signature @throws IOException if there is an error during operation or saving changes to the document
3506 Flattens a PDF form and handles dynamic XFA forms. @throws IOException if an I/O error occurs during the operation.
3507 Creates PDImageXObject from byte array based on detected image type. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @return PDImageXObject or throws exception if extraction fails or type not supported
3508 Renders a specific page from the PDF document as an image with customizable scaling and image type. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @param imageType Type of the output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3509 Renders a specific PDF page to the given Graphics2D context with scaling options. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @throws IOException If I/O error occurs during rendering
3510 Displays and renders a text string using current graphics and settings. @param string byte array representing the text to display @throws IOException if an I/O error occurs during processing
3511 Renders and displays text strings from a COSArray, handling displacement calculations based on font size and type. @param array the COSArray containing text elements to be displayed @throws IOException if an I/O error occurs during processing
3512 Creates a PDFont object based on the input dictionary and resource cache. @param dictionary COSDictionary containing font metadata @param resourceCache ResourceCache for managing font resources @return A PDFont object or throws IOException if invalid subtype found @throws IOException if an error occurs during font creation
3513 Loads Type 0 font from an input stream into a PDF document. @param doc PDF document for embedding the font @param input Data to parse TrueTypeFont @return Initialized PDType0Font object @throws IOException if there's an error with font parsing or subsetting
3514 Loads an XFDF document from a file. @param filename Path to the XML file containing XFDF data @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3515 Loads an XFDF document from a given File using a buffered input stream. @param file The source File containing XML data of the XFDF document @return FDFDocument object representing parsed XFDF structure @throws IOException if there's any issue reading or parsing the XML data
3516 Splits a PDF document into smaller documents, processes pages and destinations, and clones structure trees. @param document The source PDDocument to split @return List of resulting PDDocument objects after splitting @throws IOException if an I/O error occurs during processing or splitting
3517 Creates PDImageXObject from a byte array. Uses the detected image type. @param document PDF document to associate with the image object @param byteArray Image data as a byte array @param name Image object's name @return PDImageXObject or throws exception if extraction fails or type not supported
3518 Renders a specific page from PDF as an image with customizable scaling and default RGB type. @param pageIndex Index of the page to be rendered @param scale Scaling factor for rendering @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3519 Renders a specific PDF page as an image with custom DPI (dots per inch). @param pageIndex Index of the page to be rendered @param dpi Desired DPI for rendering @return Rendered BufferedImage object representing the specified PDF page with given DPI @throws IOException if I/O error occurs during rendering
3520 Renders a specific PDF page into an image with custom DPI and image type. @param pageIndex Index of the page to be rendered @param dpi Desired DPI for rendering @param imageType Type of output image (ARGB or other) @return Rendered BufferedImage object representing the specified PDF page at given DPI @throws IOException if I/O error occurs during rendering
3521 Renders a specific PDF page to the given Graphics2D context with scaling. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @param scale Scaling factor applied uniformly to width and height @throws IOException If I/O error occurs during rendering
3522 Retrieves a PDFont object by name from the resources or creates it if not cached. @param name unique identifier for the font @return PDFont object representing the requested font @throws IOException if an error occurs during font creation
3523 Creates a PDFont object with default resource cache.
3524 Extracts a specific range of pages from the source PDF document. @return A new PDDocument containing the extracted page range, or an empty one if invalid range.
3525 Renders a specific page from PDF as an image with default scaling. @param pageIndex Index of the page to be rendered @return Rendered BufferedImage object representing the specified PDF page @throws IOException if I/O error occurs during rendering
3526 Renders a specific PDF page to the given Graphics2D context without scaling. @param pageIndex Position of the page in the document (0-based) @param graphics Target Graphics2D context for rendering @throws IOException If I/O error occurs during rendering
3527 Copies necessary font resources to an appearance stream for a PDF document. @param appearanceStream the target stream to add/update font resources in @throws IOException if an error occurs during I/O operations
3528 Retrieves and creates a PDFont object based on the font setting. @return PDFont object or null if not a valid COSDictionary @throws IOException if there's an error retrieving or creating the font
3529 Generates and sets the appearance content for a PDF annotation widget using a given PDAppearanceStream. @param widget The target annotation widget to set the appearance content for @param appearanceStream The source stream containing the appearance data @throws IOException If there's an I/O error during processing or writing operations
3530 Copies the properties of this extended graphics state into another PDGraphicsState object, setting various graphical attributes and styles based on the keys present in the dictionary. This method iterates over all keys in the COSDictionary associated with this class instance, comparing each key to predefined constants like LW (line width), LC (line cap style), and others. Depending on the matching key, it calls appropriate methods on the provided PDGraphicsState object to set the corresponding graphical attribute or style. For keys such as FONT and TK, it accesses nested objects like PDFontSetting and PDTextState for further configuration. Additionally, this method handles special cases such as SMASK (soft mask) and TR/TR2 (transfer functions), ensuring that the CTM is properly set for soft masks and that TR2 takes precedence over TR if both are present. @param gs The PDGraphicsState object to copy properties into. @throws IOException If there is an error accessing or interpreting data from the dictionary.
3531 Processes appearance string operators for PDF content, handling font and color settings. @param content byte array representing the PDF stream to parse @throws IOException if an I/O error occurs during parsing
3532 Initializes PDDefaultAppearanceString with /DA and /DR entries, processes appearance string operators. @param defaultAppearance required PDF stream to parse for font settings @param defaultResources required resource dictionary containing font and color information @throws IOException if an I/O error occurs during parsing or if inputs are null
3533 Fetches default appearance string and creates a new instance. @return PDDefaultAppearanceString for text rendering or null if not found @throws IOException if an I/O error occurs during parsing or if inputs are null
3534 Sets and formats the appearance value for a form field. Handles multiline text fields and generates widget appearances. @param apValue The initial field value to be set and formatted
3535 Initializes helper and fetches default appearance string for a text field. @param field PDVariableText instance to process @throws IOException if error occurs during processing of the appearance string
