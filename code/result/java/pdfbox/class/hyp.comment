1 Initializes a new instance of the OperatorName class.
2 Constructs an OperatorProcessor with the given PDFStreamEngine context. @param context the PDFStreamEngine context for processing
3 Initializes a new instance of the COSBase class.
4 Constructs COSUpdateState with provided update information. @param updateInfo details for the state update
5 Initializes DecodeOptions with default values. This constructor is intentionally left empty.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion area to decode from
7 Initializes DecodeOptions with subsampling values. @param subsampling value for both subsamplingX and subsamplingY
8 Initializes a new Filter instance with default values.
9 Initializes PageExtractor with a PDF document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the first page to extract @param endPage the last page to extract
10 Constructs an AbstractXReference with a specified type. @param type the XReferenceType to be assigned
11 Constructs ContentStreamWriter with specified output stream. @param out output stream for writing content
12 Initializes DefaultResourceCacheCreateImpl with stable cache option. @param enableStableCache true to enable stable cache, false otherwise
13 Constructs PDDocumentCatalog with a document and its root dictionary. @param doc the PDDocument to associate @param rootDictionary the COSDictionary for the catalog
14 Initializes PDDocumentInformation with provided COSDictionary. @param dic document information dictionary
15 Constructs a PDDocumentNameDestinationDictionary with the given COSDictionary. @param dict the COSDictionary to initialize the nameDictionary
16 Constructs a PDDocumentNameDictionary with catalog and names. @param cat the document catalog @param names the dictionary of names
17 Constructs a PDPage object from a COSDictionary. @param pageDictionary dictionary containing page data
18 Constructs a PDPage with the given dictionary and resource cache. @param pageDictionary dictionary containing page data @param resourceCache cache for resources associated with the page
19 Constructs PDDictionaryWrapper with a COSDictionary. @param dictionary the COSDictionary to wrap
20 Constructs a PDNameTreeNode from a COSDictionary. @param dict the COSDictionary representing the node
21 Constructs a PDPageLabelRange with the given COSDictionary. @param dict the COSDictionary representing page label data
22 Initializes PDRange with a given COSArray. @param range COSArray representing the range values
23 Constructs a PDRange with specified COSArray and starting index. @param range COSArray representing the range values @param index starting position in the range
24 Initializes PDStream with a given COSStream. @param str the COSStream to associate with this PDStream
25 Constructs PDMarkInfo with a given COSDictionary. @param dic the COSDictionary to initialize the object
26 Constructs PDMarkedContentReference with a COSDictionary. @param dictionary content dictionary for marked content
27 Constructs a PDObjectReference with the given COSDictionary. @param theDictionary dictionary to reference
28 Constructs a PDStructureNode with a given COSDictionary. @param dictionary the COSDictionary to associate with this node
29 Initializes a new instance of the Revisions class.
30 Constructs a PDPropertyList with the given COSDictionary. @param dict the COSDictionary to associate with this property list
31 Constructs a PDBoxStyle instance with the provided dictionary. @param dic COSDictionary for style configuration
32 Initializes AccessPermission with default permission values.
33 Initializes AccessPermission with specified permissions. @param permissions bitwise permission values
34 Constructs a PDCryptFilterDictionary with the given COSDictionary. @param d the COSDictionary to initialize the crypt filter dictionary
35 Initializes a new RC4Cipher instance with a default salt array.
36 Constructs an FDFAnnotation from a COSDictionary. @param a the COSDictionary representing the annotation
37 Initializes FDFCatalog with a given COSDictionary. @param cat COSDictionary representing the catalog
38 Initializes FDFDictionary with a COSDictionary. @param fdfDictionary the COSDictionary to set
39 Constructs an FDFField with the given COSDictionary. @param f COSDictionary representing the field data
40 Constructs FDFIconFit with a COSDictionary. @param f COSDictionary for fitting configuration
41 Constructs FDFJavaScript with a given COSDictionary. @param javaScript the COSDictionary containing JavaScript data
42 Constructs FDFNamedPageReference with a given COSDictionary. @param r COSDictionary reference for the named page
43 Constructs FDFOptionElement with the given COSArray. @param o COSArray representing the option
44 Constructs an FDFPage with the given COSDictionary. @param p COSDictionary representing the page data
45 Constructs FDFPageInfo with given COSDictionary. @param p COSDictionary containing page information
46 Constructs an FDFTemplate from a COSDictionary. @param t the COSDictionary representing the template
47 Initializes a PDFontDescriptor with the provided COSDictionary. @param desc a COSDictionary containing font descriptor information
48 Initializes PDFontSetting with a COSArray for font settings. @param fs font settings as a COSArray
49 Constructs a PDLineDashPattern with default values. Initializes an empty dash array and phase to zero.
50 Constructs a PDColor with specified pattern name and color space. @param patternName name of the color pattern @param colorSpace color space associated with the color
51 Constructs PDDeviceNAttributes with given attributes. @param attributes device attributes in a COSDictionary
52 Constructs a PDDeviceNProcess with specified attributes. @param attributes device attributes in a COSDictionary
53 Initializes PDGamma with a COSArray of values. @param array array of values to be assigned
54 Initializes PDTristimulus with given COSArray values. @param array the COSArray to set as values
55 Initializes PDTransparencyGroupAttributes with a COSDictionary. @param dic COSDictionary for transparency group attributes
56 Constructs PDOptionalContentProperties with the given properties. @param props COSDictionary containing optional content properties
57 Constructs PDAbstractPattern with a given COSDictionary. @param dictionary pattern properties in a COSDictionary
58 Initializes a PDShading instance with a shading dictionary. @param shadingDictionary shading properties in a COSDictionary
59 Initializes PDExtendedGraphicsState with a dictionary and resource cache. @param dictionary graphics state properties @param resourceCache cache for graphic resources
60 Constructs a PDSoftMask with specified dictionary and resource cache. @param dictionary COSDictionary for mask properties @param resourceCache ResourceCache for managing resources
61 Constructs a Paragraph with specified text content. @param text the content of the paragraph
62 Constructs a Word object with specified text content. @param text the text content of the Word
63 Constructs a PDAction with the given COSDictionary. @param a COSDictionary representing the action
64 Private constructor for PDActionFactory utility class.
65 Initializes PDAdditionalActions with a COSDictionary. @param a COSDictionary containing action data
66 Constructs PDAnnotationAdditionalActions with specified actions. @param a COSDictionary containing action definitions
67 Constructs PDDocumentCatalogAdditionalActions with given actions. @param a COSDictionary containing action definitions
68 Constructs PDFormFieldAdditionalActions with provided actions. @param a COSDictionary containing field actions
69 Constructs PDPageAdditionalActions with specified actions. @param a COSDictionary containing page actions
70 Constructs PDTargetDirectory with a specified COSDictionary. @param dictionary the COSDictionary to initialize the directory
71 Initializes PDURIDictionary with a COSDictionary. @param dictionary the COSDictionary to be used
72 Constructs PDWindowsLaunchParams with specified parameters. @param p COSDictionary containing launch parameters
73 Constructs PDAppearanceCharacteristicsDictionary with a COSDictionary. @param dict COSDictionary containing appearance characteristics
74 Constructs PDAppearanceDictionary with the specified COSDictionary. @param dictionary the COSDictionary to associate with this instance
75 Constructs PDAppearanceEntry with a given COSDictionary. @param entry dictionary containing appearance data
76 Constructs PDBorderEffectDictionary with a given COSDictionary. @param dict the COSDictionary to initialize the dictionary
77 Constructs PDBorderStyleDictionary with the given COSDictionary. @param dict the COSDictionary to initialize the dictionary
78 Initializes PDExternalDataDictionary with a given COSDictionary. @param dictionary the COSDictionary to associate with this instance
79 Initializes CloudyBorder with appearance stream, intensity, line width, and rectangle. @param stream content stream for output @param intensity opacity of the border @param lineWidth thickness of the border line @param rect bounding rectangle for the border
80 Constructs PDPropBuild with a COSDictionary. @param dict the COSDictionary to be used
81 Constructs PDPropBuildDataDict with a COSDictionary. @param dict COSDictionary to initialize the object
82 Constructs PDSeedValue with a COSDictionary. @param dict COSDictionary to initialize the instance
83 Constructs PDSeedValueCertificate with a COSDictionary. @param dict COSDictionary to initialize the certificate
84 Constructs a PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary to initialize the instance
85 Constructs a PDSeedValueTimeStamp with a given COSDictionary. @param dict the COSDictionary to initialize the timestamp
86 Constructs a PDSignature using the provided COSDictionary. @param dict the COSDictionary representing the signature
87 Initializes SignatureOptions with default values.
88 Constructs a PDFTemplateCreator with a specified PDFTemplateBuilder. @param templateBuilder instance for building PDF templates
89 Private constructor for FieldUtils class. Prevents instantiation of utility class.
90 Constructs a PDField with the given acroForm, field dictionary, and parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
91 Constructs a PDXFAResource with the specified COSBase. @param xfaBase the COSBase instance to initialize the resource
92 Constructs PDMeasureDictionary with a given COSDictionary. @param dictionary the COSDictionary to initialize the measure dictionary
93 Constructs a PDNumberFormatDictionary from a COSDictionary. @param dictionary the COSDictionary to initialize with
94 Constructs PDViewportDictionary with a given COSDictionary. @param dictionary the COSDictionary to initialize the viewport
95 Constructs a PDThread with the given COSDictionary. @param t the COSDictionary representing the thread
96 Constructs a PDThreadBead with a given COSDictionary. @param b COSDictionary representing the bead data
97 Constructs PDViewerPreferences from a COSDictionary. @param dic the COSDictionary containing viewer preferences
98 Constructs PageDrawerParameters with specified rendering settings. @param renderer PDF renderer instance @param page PDF page to render @param subsamplingAllowed flag for subsampling @param destination rendering destination @param renderingHints hints for rendering @param imageDownscalingOptimizationThreshold threshold for downscaling
99 Initializes a new LineItem with a null text position.
100 Initializes a new Matrix instance with default transformation values.
101 Initializes a Matrix instance with the given source array. @param src array of float values for matrix initialization
102 Constructs a Matrix with specified values. @param a, b, c, d, e, f matrix elements
103 Initializes a new instance of XMLUtil. This constructor sets default values for instance variables.
104 Constructs a new instance of PDFStreamEngine.
105 Adds an OperatorProcessor to the operators map. @param op the OperatorProcessor to be added
106 Sets the terminator character if valid (118-126, excluding 'z'). @param term the character to set as terminator
107 Sets the split length for pagination. @param split number of pages to split; must be greater than zero
108 Sets the starting page number. @param start positive integer for the starting page @throws IllegalArgumentException if start is less than or equal to zero
109 Sets the end page number, must be greater than zero. @param end the end page number to set
110 Sets the leniency of parsing. @param lenient true for lenient parsing, false otherwise @throws IllegalArgumentException if parsing has already been done
111 Initializes CompressParameters with a non-negative object stream size. @param objectStreamSize size of the object stream, must be non-negative
112 Sets the blend mode for rendering. @param blendMode the BlendMode to set; must not be null
113 Constructs PDFieldTree with a non-null PDAcroForm. @param acroForm the PDAcroForm instance, must not be null
114 Retrieves the length of the COSStream if not writing. @return length as long, or throws IllegalStateException if writing
115 Initializes a PDFMergerUtility instance with an empty sources list.
116 Constructs a COSWriterObjectStream with a specified compression pool. @param compressionPool the pool used for compression
117 Initializes a list to buffer text clippings for a single clipping area.
118 Adds a source file to the sources collection. @param source the file to be added @throws FileNotFoundException if the file does not exist
119 Adds a source to the collection. @param source RandomAccessRead object to be added
120 Adds a name to the instructions list. @param name the name to add
121 Adds a child instruction sequence to the current instructions. @param child the InstructionSequence to be added
122 Adds a recipient to the recipients list. @param recipient the PublicKeyRecipient to be added
123 Adds a region with its area to the collection. @param regionName name of the region @param rect area of the region as a Rectangle2D object
124 Sets the trailer in the current XRef object. @param trailer the COSDictionary representing the trailer
125 Retrieves a COSBase object by its COSObjectKey. @param key unique identifier for the COSBase object @return COSBase object or null if not found
126 Retrieves an Operator by its name. @param operatorName the name of the operator @return Operator object or null if not found
127 Converts a Unicode sequence to its corresponding name. @param unicodeSequence the Unicode sequence to convert @return the name or ".notdef" if not found
128 Retrieves the current graphics state from the stack. @return PDGraphicsState object or null if stack is empty
129 Restores the previous graphics state by removing it from the stack.
130 Returns the number of elements in the graphics stack. @return int representing the graphics stack size
131 Transforms a point using a linear transformation matrix. @param x horizontal coordinate @param y vertical coordinate @return transformed Point2D.Float object
132 Decreases the level and logs an error if it becomes negative.
133 Adds an integer to the instructions list. @param value the integer to add
134 Checks if the stream is closed; throws IOException if it is. @throws IOException if the stream is closed
135 Throws IOException indicating reset is not supported. @throws IOException if reset is attempted
136 Throws IOException indicating reset operation is unsupported. @throws IOException when reset is called
137 Retrieves the encryption object if the document is parsed. @throws IOException if the document is not parsed @return PDEncryption encryption object
138 Retrieves access permission for the document. @throws IOException if the document is not parsed @return AccessPermission object
139 Constructs an InvalidPasswordException with a specified message. @param message detail message for the exception
140 Initializes Operator with validation against starting with '/'. @param aOperator the operator string to validate
141 Returns a string representation of the PDFOperator object. @return formatted string with operator details
142 Returns a string representation of the COSArray object. @return formatted string containing array elements
143 Returns string representation of COSObject with its key. @return formatted string including the object's key
144 Retrieves a Filter by its name. @param filterName the name of the filter to retrieve @return the corresponding Filter object @throws IOException if the filter name is invalid
145 Adds a real number to the instructions list. @param value the real number to add
146 Sets the image width and updates rectangle parameters. @param width the desired image width @return the current PDVisibleSignDesigner instance
147 Sets the image height and updates related parameters. @param height the new height for the image @return the updated PDVisibleSignDesigner instance
148 Calculates the distance between two points. @param ps starting point, @param pe ending point @return distance as a double
149 Calculates the edge equation value for a point relative to two endpoints. @param p point to evaluate, p1 first endpoint, p2 second endpoint @return double representing the edge equation result
150 Constructs PDMarkedContent with a tag and properties. @param tag COSName object for the content tag @param properties COSDictionary for associated properties
151 Retrieves the type of the object. @return type as a String from COSName.PATTERN
152 Retrieves the type of shading. @return the shading type as a String
153 Retrieves the default value as a String. @return default value or an empty String if not a COSName
154 Sets the value to 'Off' state. @throws IOException if an I/O error occurs during the operation
155 Checks if the white point coordinates are equal to 1. @return true if wpX, wpY, and wpZ are all 1, else false
156 Calculates a color table based on shading factors. @return int array of RGB values for color mapping
157 Calculates a color table based on shading factors. @return int[] array of RGB values for color mapping
158 Creates and returns a code table initialized with predefined values. @return List of byte arrays representing the code table
159 Retrieves an object from the collection by index. @param index position of the object in the collection @return the object at the specified index or null if not found
160 Retrieves an element by its index. @param index position of the element to retrieve @return element at the specified index
161 Returns the number of elements in the collection. @return the size as an integer
162 Returns the number of elements in the collection. @return the size as an integer
163 Returns the count of recipients. @return number of recipients as an integer
164 Checks if the objects collection is empty. @return true if objects is empty, false otherwise
165 Checks if the collection is empty. @return true if empty, false otherwise
166 Removes a recipient from the collection. @param recipient the PublicKeyRecipient to be removed @return true if removal was successful, false otherwise
167 Returns an iterator for the collection of COSBase objects. @return Iterator<COSBase> to traverse elements in the collection
168 Returns an iterator for the collection. @return Iterator<E> to traverse elements in the collection
169 Returns an iterator for the recipients collection. @return Iterator<PublicKeyRecipient> to traverse recipients
170 Converts stored objects to a list. @return List of COSBase objects from the collection
171 Converts objects to a list of COSName strings. @return List of COSName string representations
172 Converts a list of COS objects to a list of their string representations. @return List of strings from COSString objects
173 Converts Boolean to COSBoolean. @param value Boolean input, may be null @return COSBoolean representation of the input
174 Returns string representation of the object's value. @return string representation of the value
175 Writes TRUE_BYTES or FALSE_BYTES to output based on value. @param output the OutputStream to write data to @throws IOException if an I/O error occurs
176 Writes NULL_BYTES to the specified output stream. @param output the output stream to write to @throws IOException if an I/O error occurs
177 Writes byte array to the output stream. @param data the data to be written @throws IOException if an I/O error occurs
178 Returns a set of key-value pairs from the items map. @return Set of map entries (COSName, COSBase)
179 Checks if an entry has changed by comparing old and new entries. @param oldEntry previous entry object @param newEntry current entry object @return true if changed, false if not
180 Returns the number of elements in the collection. @return size of the collection as an integer
181 Retrieves an item by its key. @param key unique identifier for the item @return COSBase object or null if not found
182 Returns a set of keys from the items map. @return Set of COSName keys in the map
183 Retrieves a collection of COSBase objects from items. @return Collection of COSBase objects
184 Adds all items from the given COSDictionary to the current items map. @param dict COSDictionary containing items to add
185 Checks if the items map contains a key represented by the given COSName. @param name the COSName key to check @return true if the key exists, false otherwise
186 Splits a string into an array based on space delimiters. @param s input string to tokenize @return array of substrings split by spaces
187 Converts a string token to an integer. @param token the string to be converted @return the integer value of the token
188 Returns a string representation of the FunctionType. @return concatenated string of "FunctionType" and its type
189 Sets the encryption key length. @param l valid key lengths are 40, 128, or 256 @throws IllegalArgumentException if l is invalid
190 Sets the starting page value. @param startPageValue must be 1 or greater
191 Sets the end page value if valid; throws exception if non-positive. @param endPageValue 1-based end page number
192 Constructs a BruteForceParser with specified COSDocument and COSParser. @param cosDocument the COSDocument to parse @param cosParser the COSParser for parsing operations
193 Initializes XrefTrailerObj with default xrefType as TABLE.
194 Resets the xref table, clearing all entries.
195 Constructs PDResources with a resource dictionary. @param resourceDictionary dictionary of resources @throws IllegalArgumentException if resourceDictionary is null
196 Constructs PDResources with a resource dictionary and cache. @param resourceDictionary dictionary of resources @param resourceCache cache for resource management
197 Initializes the operators map with predefined operator constants.
198 Constructs a PDAcroForm with a document and a form dictionary. @param doc the PDDocument associated with the form @param form the COSDictionary representing the form
199 Returns the number of trailers in the xref map. @return int representing the trailer count
200 Retrieves a COSObject from the pool or creates a new one if absent. @param key identifier for the COSObject @return COSObject or null if key is null
201 Parses a string token to a float value. @param token the string to parse @return the parsed float value or NaN if invalid
202 Coerces float values to valid ranges, replacing infinities and very small numbers. @param floatValue the input float to coerce @return coerced float value within valid range
203 Determines the direction based on matrix scale and shear values. @return direction in degrees (0, 90, 180, 270)
204 Compares this COSFloat to another object for equality. @param o the object to compare @return true if equal, false otherwise
205 Computes the hash code for the object based on its float value. @return integer hash code representation of the object
206 Formats the value as a string, handling null and scientific notation. @return formatted string representation of the value
207 Writes "null" and a space to the output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
208 Constructs a COSIncrement with specified update information. @param incrementOrigin details for the update
209 Initializes PDFCloneUtility with a destination document. @param dest the PDDocument to clone into
210 Initializes DefaultResourceCache with stable cache option. @param enableStableCache true to enable stable caching, false otherwise
211 Determines if the object needs to be updated. @return true if an update is required, false otherwise
212 Checks if the collection contains a specified COSBase object. @param base the COSBase object to search for @return true if found, false otherwise
213 Checks if the given COSBase is excluded. @param base the COSBase object to check @return true if excluded, false otherwise
214 Adds a COSBase object to the collection if not null. @param object the COSBase object to add
215 Adds a COSObject to the processedObjects list if not null. @param base the COSObject to be added
216 Registers a TrueTypeFont for closing. @param ttf the TrueTypeFont object to be registered
217 Initializes ASCII85InputStream with an InputStream. @param is the input stream to read ASCII85 encoded data
218 Initializes CCITTFaxDecoderStream with provided parameters for decoding TIFF images. @param stream input stream for the decoder @param columns number of columns in the image @param type compression type for decoding @param options additional options for decoding @param byteAligned indicates if byte alignment is required
219 Checks equality with another COSInteger object. @param o object to compare @return true if equal, false otherwise
220 Returns a string representation of the COSInt object. @return formatted string containing the value
221 Writes the string representation of value to the output stream. @param output the output stream to write to @throws IOException if an I/O error occurs
222 Retrieves a value associated with the specified key. @param key identifier for the value to fetch @return the value associated with the key, or null if not found
223 Retrieves the mapped FontName for the given font name. @param fontName the name of the font to map @return corresponding FontName object or null if not found
224 Retrieves selected export values based on current field value. @return List of selected export values
225 Checks if the name is empty. @return true if name has no characters, false otherwise
226 Adds a comment to the output stream without newlines. @param comment the comment to add @throws IOException if an I/O error occurs
227 Writes a newline character to the output stream. @throws IOException if an I/O error occurs during writing
228 Converts a UTF-16 string to a hexadecimal character array. @param text input string to convert @return char array representing hexadecimal values of the string
229 Retrieves a COSBase object after dereferencing if not already done. @return the dereferenced COSBase object or null
230 Constructs a COSObjectKey with validation for num and gen parameters. @param num base number, must be non-negative @param gen generation number, must be non-negative @param index stream index
231 Computes the hash code for the object based on numberAndGeneration. @return int hash code as an integer value
232 Calculates the scaling factor in the X direction. @return scaling factor based on matrix values
233 Calculates the scaling factor in Y direction based on array values. @return scaling factor as a float
234 Initializes ASCII85OutputStream with specified OutputStream. @param out OutputStream for writing ASCII85 encoded data
235 Initializes COSStandardOutputStream with the provided OutputStream. @param out the OutputStream to write data to
236 Constructs COSStandardOutputStream with specified OutputStream and position. @param out OutputStream to write data to @param position initial position for writing data
237 Returns a copy of the byte array. @return a new byte array containing the copied elements
238 Writes incremental updates to the output stream. Throws IOException on failure.
239 Converts byte array to ASCII string. @return ASCII representation of the byte array
240 Determines if updates are accepted based on document state. @return true if updates are accepted, false otherwise
241 Converts byte array to string using a predefined character mapping. @param bytes input byte array @return corresponding string representation
242 Reads non-whitespace operators from source until a delimiter is encountered. @return String representation of the operator read @throws IOException if an I/O error occurs
243 Converts a string to a byte array using character mappings. @param text input string to convert @return byte array representation of the string
244 Checks if a character exists in the map. @param character the character to check for existence @return true if present, false otherwise
245 Checks if the specified key exists in the map. @param key the key to check for existence @return true if the key is present, false otherwise
246 Checks if a font name exists in the ALIASES map. @param fontName the name of the font to check @return true if fontName is present, false otherwise
247 Returns an unmodifiable view of the code-to-name mapping. @return unmodifiable Map of Integer to String mappings
248 Returns an unmodifiable view of the name-to-code mapping. @return Map with names as keys and codes as values
249 Indicates if the object needs to be updated. @param flag true to mark for update, false otherwise
250 Reads a byte from an Ascii85 encoded stream. @return byte value or -1 if end of stream is reached
251 Closes the resource and resets internal state. @throws IOException if an I/O error occurs during closing
252 Writes a byte to output and encodes data to ASCII85 after 4 bytes. @param b byte to write @throws IOException if an I/O error occurs
253 Flushes and encodes buffered data, writing it to the output destination. @throws IOException if an I/O error occurs during writing
254 Pads or truncates the password to a fixed length. @param password input byte array to process @return fixed-length byte array with padding
255 Closes the output stream and warns if endText() was not called. @throws IOException if an I/O error occurs during closing
256 Imports XMP metadata from a byte array. @param xmp byte array containing XMP metadata @throws IOException if an I/O error occurs during import
257 Checks if the page number can be split evenly. @param pageNumber the page number to evaluate @return true if it splits evenly, false otherwise
258 Throws exception when attempting to modify the source region. @param sourceRegion the region to set (ignored)
259 Throws UnsupportedOperationException when attempting to modify subsamplingX. @param ssX value for subsampling (not used)
260 Throws UnsupportedOperationException when attempting to set subsampling Y value. @param ssY the subsampling Y value (not used)
261 Sets the subsampling offset X, but throws an exception if modification is not allowed. @param ssOffsetX the subsampling offset value to set
262 Sets the subsampling offset Y, but operation is unsupported. @param ssOffsetY the Y offset value to set
263 Encodes input stream to output stream; not implemented yet. @param input Input stream to encode @param encoded Output stream for the encoded data @param parameters Encoding parameters
264 Throws an exception when attempting to set upper right Y value. @param value the Y coordinate to set (ignored)
265 Throws an exception when attempting to set the upper right X coordinate. @param value the new X coordinate (ignored)
266 Throws exception for setting lower left Y in an immutable class. @param value the Y coordinate to set (not applicable)
267 Sets the lower left X coordinate; not supported in immutable class. @param value the new X coordinate value
268 Retrieves the signature text; not yet implemented. @return Throws UnsupportedOperationException if called
269 Placeholder for setting signature text. @param signatureText the text for the signature @return UnsupportedOperationException if called
270 Throws exception when setting value as String; use setValue(PDSignature) instead. @param value the string value to set (not supported)
271 Retrieves the compression level setting. @return compression level between -1 and BEST_COMPRESSION
272 Checks if the collection contains the specified element. @param o the element to search for @return true if found, false otherwise
273 Initializes FlateFilterDecoderStream and skips zlib header bytes. @param inputStream the input stream to read from @throws IOException if an I/O error occurs
274 Closes the inflater and releases resources. @throws IOException if an I/O error occurs during closing
275 Sets the image and updates its dimensions in pixels. @param image the BufferedImage to set
276 Decodes a predictor row based on the given parameters. @param predictor type of predictor to apply @param colors number of color components @param bitsPerComponent bits per color component @param columns number of columns in the row @param actline current row data @param lastline previous row data for reference
277 Checks if the key exists in the key pool. @param key the key to check for existence @return true if the key is present, false otherwise
278 Checks if the inverted map contains the specified name. @param name the key to check in the map @return true if the name exists, false otherwise
279 Checks if the map contains a mapping for the specified code. @param code the key to check in the map @return true if the code exists, false otherwise
280 Escapes special XML characters in the input string. @param input string to escape @return escaped XML string
281 Sets bounding box for the rectangle. @param bbox the PDRectangle to set or null to remove BBOX
282 Decodes a hex string to a byte array. @param s hex string to decode @return byte array representation of the decoded data
283 Closes resources and logs exceptions, rethrowing the first encountered IOException.
284 Closes the document and associated streams, logging exceptions if any occur. @throws IOException if an error occurs during closing
285 Retrieves the COSDictionary object from functionStream or returns functionDictionary. @return COSDictionary instance
286 Constructs a PDXObject with a stream and subtype. @param stream PDStream to initialize the object @param subtype COSName indicating the object's subtype
287 Retrieves the COSStream object associated with this instance. @return COSStream instance from the internal stream
288 Retrieves the metadata COSStream object. @return COSStream instance for metadata
289 Sets the metadata for the stream. @param metadata COSStream containing metadata to be set
290 Compares this PDAnnotation with another object for equality. @param o object to compare with @return true if equal, false otherwise
291 Returns a set view of the keys in the map. @return Set of keys contained in the map
292 Returns a collection of all values from the actuals map. @return Collection of values contained in the actuals map
293 Initializes BaseParser with a PDF source. @param pdfSource source for reading PDF data
294 Checks if the next character in the source is a digit. @return true if the character is a digit, false otherwise
295 Sets the XRef entry for a given object key and offset if valid.\n@param objKey the object key\n@param offset the offset value to associate with the key
296 Adds a code-name pair and ensures name is mapped to code if absent. @param code unique identifier for the name @param name the name associated with the code
297 Checks if the next character in the source is a space. @return true if the character is a space, false otherwise
298 Determines if a line break should be skipped. @param linebreak character code for line break @return true if skipped, false if not
299 Checks for end of string based on byte patterns. @param bracesParameter indicates current brace state @return 0 if end of string detected, else bracesParameter
300 Checks if the character is an end-of-line (EOL) marker. @param c character code to check @return true if c is LF or CR, false otherwise
301 Reads a string of digits from the source. @return StringBuilder containing the read digits @throws IOException if the number is too long or read fails
302 Decodes a ByteArrayOutputStream to a UTF-8 string or alternative charset on failure. @param buffer input byte stream to decode @return decoded string or alternative charset representation if UTF-8 fails
303 Reads a character and checks if it matches the expected character. @param ec expected character to match @throws IOException if the character does not match
304 Checks if the next character from source is whitespace. @return true if whitespace, false otherwise
305 Parses the starting xref byte offset if valid. @return byte offset of the first referenced object or -1 if invalid
306 Searches for the last EOF marker in the source data. @return position of the last EOF marker or Long.MAX_VALUE if not found
307 Searches for xref table offsets in a PDF. @return list of found xref table offsets
308 Retrieves the number of color components. @return number of color components, calculated or cached
309 Searches for /XRef streams in a PDF and returns their offsets. @return list of offsets for found XRef streams
310 Retrieves the cross-reference table from the resolver. @return Map of COSObjectKey to Long or null if not available
311 Retrieves the startxref offset from the file. @return startxref offset position in the file @throws IOException if reading fails or markers are missing
312 Reads data until a keyword is found, filtering output to a stream. @param out the stream to filter output into @return length of the processed data
313 Initializes ToUnicodeWriter with default write mode set to 0.
314 Sets a label item for a given start page. @param startPage non-negative page index @param item PDPageLabelRange to associate with the page
315 Adds a mapping from CID to text. @param cid unique identifier (0-65535) @param text non-empty string to associate with CID
316 Checks if the data read contains non-binary content. @return true if no binary data is found, false otherwise
317 Checks if the next character is a space or newline. @return true if space/newline; false otherwise
318 Adds a new entry if its number is not already present in the collection. @param entry the entry to be added
319 Computes the width of columns based on maximum entry values. @return array of column widths in bytes
320 Initializes COSObjectPool with the highest XRef object number. @param highestXRefObjectNumber the new highest reference object number
321 Retrieves the first trailer from the byte position map. @return COSDictionary of the first trailer or null if map is empty
322 Retrieves the last trailer from the byte position map. @return COSDictionary trailer or null if map is empty
323 Retrieves object numbers matching a specific condition. @param objstmObjNr reference number for comparison @return Set of matching object numbers or null if unresolved
324 Retrieves the numeric value of the first column. @return numeric value as a long from the column type
325 Retrieves the generation number from the referenced key. @return generation as a long value
326 Returns a string representation of the FreeReference object. @return formatted string with key, nextFreeObject, and type's numeric value
327 Retrieves the value of the second column. @return long representing the byte offset value
328 Retrieves the generation number from the referenced COS object key. @return generation as a long
329 Returns a string representation of the object, including key and type details. @return formatted string with object type and key information
330 Retrieves the second column value by fetching the parent key's number. @return long value from the parent COS object key
331 Retrieves the value of the third column. @return long representing the third column value
332 Returns a string representation of the ObjectStreamEntry. @return formatted string with key, type value, index, and parent key
333 Writes bytes to output and updates the position. @param b byte array to write, @param off offset, @param len length of bytes to write
334 Writes a byte to output and updates position. @param b the byte to be written @throws IOException if an I/O error occurs
335 Writes end-of-line if not already on a new line. @throws IOException if an I/O error occurs
336 Checks if compression is enabled based on compressParameters. @return true if compression is enabled, false otherwise
337 Adds an XReferenceEntry to the list of entries. @param entry the XReferenceEntry to add
338 Writes an indirect reference to the output stream. @param output the output stream to write to @param indirectReference the COSObjectKey reference to write
339 Retrieves an MD5 MessageDigest instance. @return MessageDigest for MD5 hashing
340 Retrieves SHA-1 MessageDigest instance. @return MessageDigest for SHA-1 hashing
341 Retrieves SHA-256 MessageDigest instance. @return MessageDigest for SHA-256 hashing
342 Retrieves the highest cross-reference object number from the object pool. @return highest cross-reference object number as a long
343 Returns an unmodifiable list of prepared COSObjectKeys. @return unmodifiable List of COSObjectKey objects
344 Overwrites the mapping of code to name. @param code unique identifier for the name @param name new name to associate with the code
345 Removes specified region and its area from collections. @param regionName name of the region to be removed
346 Sets the maximum number of decimal fraction digits. @param fractionDigitsNumber maximum fraction digits to set
347 Constructs PDAbstractContentStream with document, output stream, and resources. @param document the PDDocument instance @param outputStream the output stream for content @param resources the PDResources for the stream
348 Retrieves vertical displacement Y value by code. @param code identifier for the vertical displacement @return float value of vertical displacement Y
349 Returns standardValue or defaultValue if standardValue is null. @param standardValue nullable Float to check @param defaultValue float returned if standardValue is null
350 Adjusts the image dimensions by a percentage. @param percent percentage to zoom in or out @return updated PDVisibleSignDesigner instance
351 Retrieves the width of the image. @return float representing the image width
352 Retrieves the height of the image. @return float value representing image height
353 Adjusts image coordinates and dimensions based on rotation angle. @return adjusted PDVisibleSignDesigner instance
354 Creates an AffineTransform using scale and translation values. @return AffineTransform instance with specified parameters
355 Encodes a string into a byte array using multi-byte representation. @param text input string to encode @return byte array of encoded data
356 Converts a Unicode code point to its name. @param codePoint the Unicode code point @return the name of the character or ".notdef" if not found
357 Applies GSUB rules to convert characters to glyph IDs and writes to output stream. @param gsubWorker worker for GSUB transformations @param out output stream for writing encoded glyph IDs @param font font containing glyph mapping @param word input string to process @return list of transformed glyph IDs
358 Initializes a PDDocument with the given document, source, and access permissions. @param doc the COSDocument to associate with this PDDocument @param source the RandomAccessRead source for the document @param permission the AccessPermission for document access control
359 Constructs FDFDocument with given COSDocument and source. @param doc the COSDocument to associate with this FDFDocument @param source the RandomAccessRead source for the document
360 Converts the actual collection to an array. @return an array containing all elements of the collection
361 Returns the index of the first occurrence of the specified object. @param o the object to search for @return index of the object or -1 if not found
362 Checks if this object is equal to the specified object. @param o object to compare for equality @return true if equal, false otherwise
363 Returns the hash code for the object using its actual value. @return integer hash code representation of the object
364 Returns the last index of the specified object. @param o the object to search for @return last index of o or -1 if not found
365 Returns a list iterator for the elements in this list. @return ListIterator for traversing the list
366 Returns a list iterator starting at the specified index. @param index starting position for the iterator @return ListIterator for the list elements
367 Returns a sublist of elements from the actual list. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List containing elements from fromIndex to toIndex
368 Checks if the collection contains the specified value. @param value the value to search for @return true if found, false otherwise
369 Returns an unmodifiable view of the map's entry set. @return Set of key-value pairs in the map
370 Returns an unmodifiable set of names from ALIASES map keys. @return Set of unique names as strings
371 Returns string representation of the object via actuals. @return String representation of actuals
372 Converts COSBase to a specific COSObjectable type. @param base COSBase instance to convert @return COSObjectable instance created from base @throws IOException if instantiation fails
373 Generates a letter label based on the given number. @param num integer input to determine the label @return String representation of the letter label
374 Returns the count of page ranges based on the number of labels. @return int representing the number of labels
375 Retrieves the page label range for a given starting page. @param startPage the page number to fetch the label range for @return PDPageLabelRange associated with the starting page
376 Retrieves a sorted set of page indices from labels. @return NavigableSet of page indices
377 Returns a copy of the dash array. @return a float array containing the dash values
378 Initializes PDColor with components and colorSpace. @param components color components array @param colorSpace associated color space
379 Retrieves color components based on color space. @return array of color components, cloned or resized as needed
380 Constructs a CoordinateColorPair with a point and color array. @param p point in 2D space @param c color values as an array
381 Returns a string representation of FunctionType2 with C0, C1, and N values. @return formatted string of FunctionType2 attributes
382 Calculates boundary coordinates from corner points. @return int array with min/max x and y values
383 Removes and returns the top number from the stack. @return the top Number or null if the stack is empty
384 Removes and returns the top integer from the stack. @return the top integer or null if the stack is empty
385 Removes and returns the top element as a float from the stack. @return float value of the top element or throws an exception if empty
386 Adds a boolean value to the instructions list. @param value the boolean to be added
387 Constructs ExecutionContext with specified operator set. @param operatorSet set of operators for execution context
388 Retrieves a list of compiled patterns from expressions. @return List of Pattern objects
389 Converts an array of objects to a formatted string representation. @param array the array of objects to convert @return a string representation of the array
390 Converts a float array to a formatted string. @param array input float array @return formatted string representation of the array
391 Adds a TextPosition object to the contents list. @param text the TextPosition to be added
392 Adds marked content to the existing contents. @param markedContent the content to be added
393 Adds a PDXObject to the contents list. @param xobject the PDXObject to be added
394 Sets printing permission if not in read-only mode. @param allowPrinting true to allow printing, false to disallow
395 Sets modification permission if not in read-only mode. @param allowModifications true to allow, false to disallow modifications
396 Sets content extraction permission if not read-only. @param allowExtraction true to allow, false to disallow extraction
397 Sets permission to modify annotations if not in read-only mode. @param allowAnnotationModification true to allow, false to disallow
398 Sets permission to fill in the form if not read-only. @param allowFillingInForm true to allow, false to disallow
399 Sets extraction permission for accessibility if not in read-only mode. @param allowExtraction true to allow extraction, false to disallow
400 Sets document assembly permission based on read-only status. @param allowAssembly true to allow, false to disallow assembly
401 Sets print permission if not in read-only mode. @param canPrintFaithful true to allow printing, false to disallow
402 Checks if printing is allowed based on permission. @return true if printing is permitted, false otherwise
403 Determines if modification is permitted based on permission bit. @return true if modification is allowed, false otherwise
404 Checks if content extraction is permitted. @return true if extraction is allowed, false otherwise
405 Checks if annotations can be modified based on permissions. @return true if modification is allowed, false otherwise
406 Checks if the user can fill in the form based on permissions. @return true if permitted, false otherwise
407 Checks if extraction for accessibility is permitted. @return true if allowed, false otherwise
408 Checks if the user can assemble a document. @return true if permission is granted, false otherwise
409 Checks if printing faithful documents is permitted. @return true if allowed, false otherwise
410 Retrieves the private key from the keystore. @return Key object or throws KeyStoreException if not found
411 Returns a SecureRandom instance, using a custom one if available. @return SecureRandom instance
412 Sets a key for processing, validating length and initializing salt. @param key byte array representing the key (1-32 bytes)
413 Encrypts and writes a byte to the output stream using a salt array. @param aByte the byte to encrypt and write @param output the OutputStream to write to @throws IOException if an I/O error occurs
414 Combines diacritic characters from a string. @param str input string to process @return processed string with diacritics combined
415 Checks if a codepoint is prohibited in text. @param codepoint Unicode codepoint to evaluate @return true if prohibited, false otherwise
416 Computes version number based on key length and AES preference. @return version number as an integer
417 Retrieves a singleton instance of BouncyCastleProvider. @return Provider instance, creating it if not already initialized
418 Retrieves concatenated text values from child nodes of an element. @param node the element whose child text nodes are processed @return concatenated string of text node values
419 Writes a string to the output destination. @param text the string to be written @throws IOException if an I/O error occurs
420 Retrieves or parses a predefined CMap by name. @param cMapName name of the CMap to fetch @return CMap object or null if not found
421 Parses a CMap from RandomAccessRead input. @param randomAccessRead source for CMap data @return CMap object or null if input is invalid
422 Generates a set of PostScript names from the given name. @param postScriptName original PostScript name @return Set of modified PostScript names
423 Calculates points on a line between two coordinates. @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Points representing the line
424 Calculates unique points from an array of Point2D. @param p array of Point2D objects @return count of unique points after rounding
425 Adds a font to the cache with a soft reference. @param info font information for identification @param font the font object to cache
426 Retrieves FontBoxFont from cache using FontInfo. @param info FontInfo object for identifying the font @return FontBoxFont object or null if not found
427 Adds a substitute for a match after converting it to lowercase. @param match the string to match, converted to lowercase @param replace the string to add as a substitute
428 Retrieves FontInfo by format and PostScript name. @param format desired font format @param postScriptName name of the font @return FontInfo object or null if not found
429 Retrieves substitutes for a given postScript name. @param postScriptName name to lookup substitutes for @return list of substitutes or empty list if none found
430 Retrieves name associated with a code or returns '.notdef' if absent. @param code the code to look up @return corresponding name or '.notdef'
431 Retrieves Type2 character string based on character ID. @param cid character identifier @return Type2CharString or null if not found
432 Converts a code to its corresponding CID using the current CMap. @param code input code to be converted @return CID representation of the input code
433 Converts color components to RGB format. @return RGB integer value representing the color
434 Adjusts color value for backdrop removal. @param groupRGB color of the group @param backdropRGB color of the backdrop @param shift bit shift for color extraction @param alphaFactor blending factor @return adjusted color value clamped to [0, 255]
435 Retrieves a subarray from bytes array. @return byte array containing specified range of data
436 Retrieves the default Adobe Glyph List. @return GlyphList containing default glyphs
437 Initializes cmap tables based on platform and encoding from the TrueType font.
438 Checks if embedding is allowed for a TrueTypeFont. @param ttf TrueTypeFont object to evaluate @return true if embedding is permitted, false otherwise
439 Checks if subsetting is allowed for the given TrueTypeFont. @param ttf TrueTypeFont object to evaluate @return true if subsetting is permitted, false otherwise
440 Converts a name to its Unicode representation. @param name the name to convert @return Unicode character or null if input is null
441 Constructs a PDColor with components, pattern name, and color space validation. @param components color components array @param patternName name of the color pattern @param colorSpace color space instance
442 Converts a WritableRaster to a BufferedImage using the specified ColorSpace. @param raster the WritableRaster to convert @param awtColorSpace the ColorSpace for the image @return BufferedImage created from the raster and color space
443 Converts a WritableRaster to a BufferedImage in RGB format. @param raster input raster data @param colorSpace color space for conversion @return BufferedImage in RGB format
444 Checks if the given ICC profile is for the sRGB color space. @param profile the ICC_Profile to check @return true if profile is sRGB, false otherwise
445 Returns the color space type based on ICC profile or alternate color space. @return int representing color space type or -1 if invalid
446 Initializes PredictorEncoder with document and image, setting up pixel data and properties. @param document PDDocument to process @param image BufferedImage containing pixel data
447 Scales an image to specified dimensions with optional interpolation. @param image the original BufferedImage to scale @param width desired width of the scaled image @param height desired height of the scaled image @param type image type for the new BufferedImage @param interpolate true to use interpolation during scaling @return scaled BufferedImage
448 Retrieves the COSDictionary of parameters. @return COSDictionary object containing parameters
449 Initializes Patch with a cloned color array. @param color 2D array of float representing corner colors
450 Computes the current clipping path from multiple paths. @return Area representing the combined clipping region
451 Constructs a TextAttribute with a specified name. @param name the name of the TextAttribute
452 Computes the hash code for the current object based on its dictionary. @return hash code as an integer
453 Retrieves an affine transformation matrix for translation. @return AffineTransform for translating coordinates.
454 Computes polygon parameters and stores results in an array. @param advInterm intermediate curl length, advCorner corner adjustment, k curvature factor, r radius, length segment length, array output array for angle and error @return number of curls in the segment
455 Flattens an ellipse into an array of points. @param left left boundary of the ellipse @param bottom bottom boundary of the ellipse @param right right boundary of the ellipse @param top top boundary of the ellipse @return array of Point2D.Double representing the ellipse's outline
456 Checks if the given path is a rectangular shape. @param path the GeneralPath to evaluate @return true if the path is rectangular, false otherwise
457 Retrieves the height of the template. @return height of the template as a float
458 Sets x and y coordinates and returns the updated PDVisibleSignDesigner instance. @param x the value for the x-axis @param y the value for the y-axis @return the updated PDVisibleSignDesigner instance
459 Transforms the designer with a new AffineTransform. @param affineTransform transformation parameters @return PDVisibleSignDesigner instance for method chaining
460 Ensures the node has no siblings; throws exception if it does. @param node the PDOutlineItem to check for siblings
461 Returns an iterable of child outline items. @return Iterable for traversing PDOutlineItem children
462 Applies rendering hints to improve graphic output quality. @param renderingHints a Map of rendering hints to apply
463 Adjusts the clipping path based on the current graphics transform. @param linePath the original clipping path @return modified GeneralPath or original if no adjustment needed
464 Calculates subsampling based on image size and transformation. @param pdImage the image to analyze @param at the affine transformation applied @return calculated subsampling value between 1 and 8
465 Rounds a number up to the nearest integer with 5 decimal places. @param num the number to round @return the rounded integer value
466 Calculates X rotation based on input angle. @param rotation angle in degrees @return calculated X translation based on rotation
467 Calculates Y coordinate for lower-left corner based on rotation. @param rotation angle in degrees @return Y coordinate as float
468 Calculates width based on rotation angle. @param rotation angle in degrees @return width as a float value
469 Writes Unicode characters from a TextPosition object to output. @param text the TextPosition containing characters to write
470 Returns the Unicode string representation of the object. @return Unicode string value
471 Retrieves text for a specified region. @param regionName the name of the region @return text as a String for the given region
472 Starts the article output based on text direction. @param isLTR indicates if the text is left-to-right @throws IOException if an I/O error occurs during writing
473 Ends the article by writing its content to the output. @throws IOException if an I/O error occurs during writing
474 Writes the current line separator to the output. @throws IOException if an I/O error occurs during writing
475 Writes the current word separator to the output. @throws IOException if an I/O error occurs during writing
476 Writes the start of a paragraph and manages paragraph state. @throws IOException if an I/O error occurs during writing
477 Writes the starting page string to the output. @throws IOException if an I/O error occurs during writing
478 Writes the page end information to the output. @throws IOException if an I/O error occurs during writing
479 Handles bidirectional text processing and reorders based on direction. @param word input string to process @return reordered string considering bidirectional rules
480 Parses a bidi file from the input stream and populates MIRRORING_CHAR_MAP. @param inputStream the input stream to read from @throws IOException if an I/O error occurs
481 Returns visually ordered Unicode string, reversing if RTL characters are present. @return visually ordered Unicode string
482 Processes text position and updates characters by article if within region area. @param text TextPosition object containing x and y coordinates
483 Checks if the character is a diacritic. @return true if it's a diacritic, false otherwise
484 Updates TimeZone ID based on its raw offset. @param tz TimeZone object to be updated
485 Converts a byte to its hexadecimal string representation. @param b the byte to convert @return hexadecimal string of the byte
486 Converts byte array to hexadecimal string representation. @param bytes input byte array @return hexadecimal string of the byte array
487 Converts a byte to an array of two hex byte values. @param b the byte to convert @return array of hex byte values representing high and low nibbles
488 Converts byte array to ASCII hex representation. @param bytes input byte array @return ASCII hex byte array
489 Writes the hexadecimal representation of a byte to an output stream. @param b byte to convert and write @param output destination OutputStream
490 Decodes a Base64-encoded string after removing spaces. @param base64Value the Base64 string to decode @return decoded byte array
491 Constructs a Matrix from an AffineTransform. @param at AffineTransform containing transformation parameters
492 Transforms a Point2D using predefined coefficients. @param point the Point2D to transform
493 Formats a float into ASCII bytes, returning the new buffer offset. @param value float to format, maxFractionDigits max digits after decimal, asciiBuffer output buffer @return new offset in asciiBuffer or -1 for invalid input
494 Retrieves the PDFBox version from properties file. @return version string or null if not found or an error occurs
495 Parses XML from an InputStream with optional namespace awareness. @param is InputStream containing XML data @param nsAware true for namespace support, false otherwise @return Document object representing the parsed XML
496 Finds value in a ByteTrie based on the provided byte array. @param bytes input byte array to traverse the trie @return the found value of type T or null if not found
497 Constructs a COSBoolean with the specified value. @param aValue boolean value to set
498 Initializes COSName with a specified name. @param aName the name to associate with this COSName
499 Singleton constructor for COSNull, restricts instance creation.
500 Constructs a COSString from byte array with optional hex format. @param bytes byte array to initialize COSString @param forceHex indicates if hex format should be used
501 Initializes a COSDictionary and sets its update state. @param updateInfo details for the state update
502 Initializes a COSObject with a base object and update state. @param object the base COSBase object for this COSObject
503 Constructs a COSObject with a base object and parser. @param object the base COS object @param parser the parser for COS data
504 Initializes COSObject with a key and parser. @param key unique identifier for the COS object @param parser parser for reading COS data
505 Creates DecodeOptions using specified dimensions. @param x x-coordinate of the region @param y y-coordinate of the region @param width width of the region @param height height of the region
506 Initializes FreeXReference with a key and next free object ID. @param key unique identifier for the COS object @param nextFreeObject ID of the next free object
507 Initializes ObjectStreamXReference with specified parameters. @param objectStreamIndex index of the object stream @param key the COSObjectKey of the object @param object the COSBase object @param parentKey the parent COSObjectKey
508 Constructs DefaultResourceCacheCreateImpl with stable cache enabled.
509 Constructs PDTypedDictionaryWrapper with a COSDictionary. @param dictionary the COSDictionary to wrap
510 Constructs PDAttributeObject with a COSDictionary. @param dictionary the COSDictionary to wrap
511 Initializes PDUserProperty with a COSDictionary and a user attribute object. @param dictionary COSDictionary to wrap @param userAttributeObject user attribute data
512 Constructs PDOutlineNode with a COSDictionary. @param dict the COSDictionary to initialize the node
513 Constructs PDTransition with a COSDictionary. @param dictionary the COSDictionary to wrap
514 Constructs a PDDestinationNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node
515 Constructs a PDEmbeddedFilesNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node
516 Constructs a PDJavascriptNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node
517 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic the COSDictionary representing the node
518 Creates a child PDNumberTreeNode from a given COSDictionary. @param dic COSDictionary for the child node @return PDNumberTreeNode instance
519 Constructs PDMetadata from a COSStream. @param str the COSStream to associate with this PDMetadata
520 Constructs PDObjectStream from a given COSStream. @param str the COSStream to associate with this PDObjectStream
521 Constructs PDEmbeddedFile from a given COSStream. @param str the COSStream for the embedded file
522 Initializes PDFunction with a COSBase object, handling streams and dictionaries. @param function COSBase object representing the function
523 Constructs a PDXObject with a COSStream and subtype. @param stream the COSStream for the object @param subtype the type of the object
524 Constructs a PDSimpleFileSpecification with the given file name. @param fileName the name of the file as a COSString
525 Constructs a PDStructureElement from a COSDictionary. @param dic the COSDictionary for this structure element
526 Constructs a PDStructureTreeRoot from a given COSDictionary. @param dic the COSDictionary for the structure tree root
527 Constructs StandardDecryptionMaterial with a specified password. @param pwd the password used for decryption
528 Initializes a new instance of PublicKeyProtectionPolicy.
529 Initializes a StandardProtectionPolicy with passwords and permissions. @param ownerPassword the owner's password for access control @param userPassword the user's password for access control @param permissions access permissions associated with the policy
530 Constructs a new instance of SecurityHandler.
531 Constructs an FDFAnnotationCaret from a COSDictionary. @param a the COSDictionary representing the caret annotation
532 Constructs an FDFAnnotationCircle from a COSDictionary. @param a the COSDictionary representing the annotation
533 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a the COSDictionary representing the attachment
534 Constructs an FDFAnnotationFreeText from a COSDictionary. @param a the COSDictionary representing the annotation
535 Constructs an FDFAnnotationInk from a COSDictionary. @param a the COSDictionary representing the ink annotation
536 Constructs an FDFAnnotationLine from a COSDictionary. @param a the COSDictionary representing the annotation line
537 Constructs an FDFAnnotationLink from a COSDictionary. @param a the COSDictionary representing the annotation link
538 Constructs an FDFAnnotationPolygon from a COSDictionary. @param a the COSDictionary representing the polygon annotation
539 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a the COSDictionary representing the annotation
540 Constructs an FDFAnnotationSound from a COSDictionary. @param a the COSDictionary representing the sound annotation
541 Constructs an FDFAnnotationSquare from a COSDictionary. @param a the COSDictionary representing the annotation
542 Constructs an FDFAnnotationStamp from a COSDictionary. @param a the COSDictionary representing the annotation
543 Constructs an FDFAnnotationText from a COSDictionary. @param a the COSDictionary representing the annotation
544 Constructs an FDFAnnotationTextMarkup from a COSDictionary. @param a the COSDictionary representing the annotation
545 Retrieves a PDPanoseClassification from a byte array slice. @return PDPanoseClassification object created from bytes 2 to 12
546 Creates a Composite based on blend mode and alpha value. @param blendMode the blending mode to use @param constantAlpha the alpha value (0 to 1) @return Composite instance for blending
547 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes or null if not available
548 Constructs PDShadingPattern with a given resource dictionary. @param resourceDictionary pattern properties in a COSDictionary
549 Initializes PDTilingPattern with a COSDictionary and ResourceCache. @param dictionary pattern properties in a COSDictionary @param resourceCache cache for resources
550 Constructs a PDShadingType1 instance from a shading dictionary. @param shadingDictionary shading properties in a COSDictionary
551 Constructs a PDShadingType2 instance using a shading dictionary. @param shadingDictionary shading properties in a COSDictionary
552 Constructs AxialShadingPaint with specified shading type and transformation matrix. @param shadingType2 the shading type to apply @param matrix the transformation matrix
553 Constructs RadialShadingPaint with specified shading and transformation matrix. @param shading the shading to apply @param matrix the transformation matrix
554 Constructs Type1ShadingPaint with specified shading and transformation matrix. @param shading the shading to apply @param matrix the transformation matrix
555 Initializes Type4ShadingPaint with shading and transformation matrix. @param shading the shading of type 4 to apply @param matrix the transformation matrix
556 Constructs Type5ShadingPaint with specified shading and transformation matrix. @param shading the shading of type PDShadingType5 @param matrix the transformation matrix
557 Constructs Type6ShadingPaint with specified shading and transformation matrix. @param shading the shading to apply @param matrix the transformation matrix
558 Constructs Type7ShadingPaint with specified shading and transformation matrix. @param shading the Type7 shading to apply @param matrix the transformation matrix
559 Constructs PDExtendedGraphicsState with specified graphics state properties. @param dictionary graphics state properties
560 Constructs a PDSoftMask with specified COSDictionary for mask properties. @param dictionary COSDictionary for mask properties
561 Constructs a PlainText object from the given text. @param textValue input string to create paragraphs from
562 Constructs a PDActionEmbeddedGoTo with the given COSDictionary. @param a COSDictionary representing the action
563 Initializes a PDActionGoTo with the specified COSDictionary. @param a COSDictionary representing the action
564 Constructs a PDActionHide with the given COSDictionary. @param a COSDictionary representing the action
565 Constructs a PDActionImportData from a COSDictionary. @param a COSDictionary representing the import action
566 Constructs a PDActionJavaScript with the given COSDictionary. @param a COSDictionary representing the JavaScript action
567 Constructs a PDActionLaunch with the given COSDictionary. @param a COSDictionary representing the action
568 Constructs a PDActionMovie from a COSDictionary. @param a COSDictionary representing the action
569 Constructs a PDActionNamed from a COSDictionary. @param a COSDictionary representing the action
570 Initializes a PDActionRemoteGoTo with a COSDictionary. @param a COSDictionary representing the action
571 Initializes a PDActionResetForm with a COSDictionary. @param a COSDictionary representing the action
572 Constructs a PDActionSound with the given COSDictionary. @param a COSDictionary representing the sound action
573 Constructs a PDActionSubmitForm from a COSDictionary. @param a COSDictionary representing the submit form action
574 Constructs a PDActionThread with the given COSDictionary. @param a COSDictionary representing the action
575 Constructs a PDActionURI from the given COSDictionary. @param a COSDictionary representing the action
576 Initializes a new PDVisibleSigBuilder and creates a PDF structure.
577 Initializes a PDNamedDestination with a given destination string. @param dest the destination string
578 Initializes a named destination with the given COSName. @param dest the COSName representing the destination
579 Constructs a PDNamedDestination object with default behavior.
580 Constructs a PDPageDestination with the given COSArray. @param arr the COSArray representing the destination
581 Initializes a PDNonTerminalField with acroForm, field dictionary, and parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
582 Initializes a PDTerminalField with given acroForm, field, and parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
583 Constructs PDRectlinearMeasureDictionary from a given COSDictionary. @param dictionary the COSDictionary to initialize the measure dictionary
584 Clones the current Matrix instance. @return a new Matrix object that is a copy of this instance
585 Creates a scaling matrix for 2D transformations. @param x scaling factor for the x-axis @param y scaling factor for the y-axis @return Matrix representing the scaling transformation
586 Creates a translation matrix for given x and y coordinates. @param x translation along the x-axis @param y translation along the y-axis @return Matrix representing the translation
587 Creates a rotation matrix for a given angle and translation. @param theta rotation angle in radians @param tx translation in x-direction @param ty translation in y-direction @return Matrix representing the rotation and translation
588 Transforms a Vector using predefined coefficients. @param vector input Vector to be transformed @return new transformed Vector based on input
589 Scales the vector by a specified factor. @param sxy scaling factor for both x and y coordinates @return new Vector with scaled coordinates
590 Initializes MacExpertEncoding by adding entries from MAC_EXPERT_ENCODING_TABLE.
591 Initializes MacRomanEncoding by populating character codes and names from a table.
592 Initializes StandardEncoding by adding entries from STANDARD_ENCODING_TABLE.
593 Initializes SymbolEncoding by populating it from SYMBOL_ENCODING_TABLE.
594 Initializes a new instance of Type1Encoding.
595 Initializes Type1Encoding with character metrics from FontMetrics. @param fontMetrics source of character metrics
596 Initializes WinAnsiEncoding mapping character codes to names.
597 Initializes ZapfDingbatsEncoding with character codes and names from a predefined table.
598 Creates and returns a new PDFieldTree instance. @return PDFieldTree constructed with the current object
599 Retrieves an object by index from the list of objects. @param index position of the object in the list @return the object at the specified index
600 Returns the number of objects in the collection. @return int representing the size of the collection
601 Retrieves the revision number at the specified index. @param index position in the revision list @return revision number as an integer
602 Parses PNG chunks from byte array. @param imageData byte array containing PNG image data @return PNGConverterState object or null if invalid
603 Retrieves Encoding instance based on the given COSName. @param name COSName representing the encoding type @return corresponding Encoding instance or null if not found
604 Creates a PDSoftMask from a COSBase dictionary and resource cache. @param dictionary COSBase for mask properties @param resourceCache ResourceCache for managing resources @return PDSoftMask object or null for invalid input
605 Returns the index of the first selected widget. @return index of the selected widget or -1 if none found
606 Adds a source file from a string path. @param source path of the file to be added @throws FileNotFoundException if the file does not exist
607 Parses the PDF trailer, returning true if successful; false otherwise. @return boolean indicating success of trailer parsing
608 Retrieves a COSBase object using its COSObjectKey. @param key unique identifier for the COSBase object @return COSBase object or null if not found
609 Executes instructions, handling operators and stacking objects. @param context execution context with stack and operators
610 Retrieves the current text line matrix from the graphics state. @return Matrix representing the text line layout
611 Sets the text line matrix for the current graphics state. @param value the Matrix to be set
612 Retrieves the current text matrix from the graphics state. @return Matrix object representing the text matrix
613 Sets the text matrix to the specified value. @param value the Matrix to set as the text matrix
614 Transforms width using the current graphics state transformation. @param width original width to transform @return transformed width based on scaling and shear
615 Retrieves the non-stroking color from the current graphics state. @return PDColor representing the non-stroking color
616 Sets the non-stroking color in the graphics state. @param color the PDColor to be set as non-stroking color
617 Retrieves the non-stroking color space from the current graphics state. @return PDColorSpace object or null if unavailable
618 Retrieves the current stroking color from the graphics state. @return PDColor representing the stroking color
619 Sets the stroking color for drawing operations. @param color the PDColor to be set
620 Retrieves the current stroking color space from the graphics state. @return PDColorSpace object representing the stroking color space
621 Creates an InputStream for reading data; throws IOException if conditions aren't met. @return InputStream for data access @throws IOException if stream is closed or no data is available
622 Finds an ImageReader by format name or throws an exception if not found. @param formatName the image format to search for @param errorCause the reason for the failure @throws MissingImageReaderException if no reader is found
623 Finds an ImageReader for a specified format name. @param formatName the image format name @param errorCause reason for failure if no reader found @return ImageReader for the format @throws MissingImageReaderException if no reader can read the raster
624 Retrieves an Operator by its name, creating it if not present. @param operator the name of the operator @return Operator object or null if not found
625 Returns string representation of COSArrayList with its elements. @return formatted string of the array contents
626 Determines if the edge defined by control points is a straight line. @param ctl array of control points @return true if edge is a line, false otherwise
627 Retrieves the lower-left X coordinate from the rectangle. @return float value of the lower-left X coordinate
628 Retrieves the Y-coordinate of the lower left corner of a rectangle. @return float value of the lower left Y-coordinate
629 Retrieves the upper right X coordinate from a rectangle. @return float value of the upper right X coordinate
630 Retrieves the upper right Y-coordinate from a rectangle. @return float value of the upper right Y-coordinate
631 Retrieves the font size from the font settings. @return font size as a float
632 Retrieves the float value of the first COSNumber in the values collection. @return float representation of the first COSNumber
633 Retrieves the float value from the second element of values. @return float value of the COSNumber at index 1
634 Retrieves the float value from the COSNumber at index 2. @return float value of the COSNumber
635 Retrieves the X coordinate as a float. @return float value of the first element in values collection
636 Retrieves the Y coordinate value from the values collection. @return float value of the Y coordinate
637 Retrieves the Z value from the values collection. @return float representation of the Z value
638 Retrieves an integer from the collection by index or returns default value. @param index position in the collection @param defaultValue value to return if index is out of bounds @return integer value or defaultValue if index is invalid
639 Retrieves the name at a specified index or returns a default value. @param index position in the collection @param defaultValue value to return if index is invalid @return the name as a String or defaultValue if index is out of bounds
640 Returns the index of the specified object in the collection. @param object the object to find; null is also valid @return index of the object or -1 if not found
641 Retrieves a list of filters based on the current filters. @return List of Filter objects @throws IOException if filter types are invalid
642 Evaluates exponential interpolation on input data. @param input array of float values @return interpolated float array clipped to range
643 Retrieves a list of COSName filters from the current stream. @return List of COSName objects or an empty list if none found
644 Retrieves file filters from the stream. @return List of filter names as Strings or empty list if none found
645 Writes a COSBoolean to output, followed by a space. @param output the OutputStream to write data to @param cosBoolean the COSBoolean to be written @throws IOException if an I/O error occurs
646 Writes ASCII-encoded string to the output stream. @param text the string to be written @throws IOException if an I/O error occurs
647 Notifies if an entry has changed. @param oldEntry previous entry object @param newEntry current entry object
648 Returns the number of elements in the collection. @return size of the collection as an integer
649 Retrieves a COSObject by its key. @param key unique identifier for the COSObject @return COSObject or null if not found
650 Retrieves an item by first or second key. @param firstKey primary key to search for @param secondKey secondary key if first is not found @return COSBase object or null if not found
651 Returns the number of recipients from the dictionary. @return count of recipients as an integer
652 Retrieves the recipient string at the specified index. @param i index of the recipient in the array @return COSString object or null if not found
653 Retrieves the direction item; returns zero if not found. @return COSBase direction item or COSInteger.ZERO if absent
654 Retrieves sorted metadata keys from the info map. @return Set of metadata key names as Strings
655 Retrieves attribute names excluding COSName.O. @return List of attribute names as Strings
656 Adds specified trailer information to the stream. @param trailerDict dictionary containing trailer data
657 Initializes COSDictionary with a given dictionary's contents. @param dict source COSDictionary to copy items from
658 Checks if the dictionary contains specific info keys. @param dictionary the COSDictionary to evaluate @return true if info keys exist, false otherwise
659 Checks if widths are defined in the dictionary. @return true if WIDTHS or MISSING_WIDTH keys exist, false otherwise
660 Checks if the dictionary has a missing width key. @return true if MISSING_WIDTH key exists, false otherwise
661 Checks if the dictionary contains the XFA key. @return true if XFA key exists, false otherwise
662 Initializes XrefParser with a COSParser instance. @param cosParser the COSParser used for parsing
663 Returns a string representation of COSFloat object. @return formatted string with COSFloat details
664 Writes a PDF formatted string to the specified output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
665 Writes a COSArray to the output stream. @param output OutputStream to write to @param cosArray COSArray to be serialized @throws IOException if an I/O error occurs
666 Converts update information to a COSIncrement object. @return COSIncrement instance created with updateInfo
667 Initializes LayerUtility with a target PDF document. @param targetDoc the PDDocument to be processed
668 Constructs DefaultResourceCache with stable caching enabled.
669 Checks if the given COSBase object requires an update. @param base COSBase object to evaluate @return true if an update is needed, false otherwise
670 Writes FDFDocument to COSDocument; updates trailer if incrementalUpdate is true. @param doc FDFDocument to write @throws IOException if an I/O error occurs during processing
671 Writes COSInteger to output stream, followed by a space. @param output the output stream to write to @param cosInteger the COSInteger to be written @throws IOException if an I/O error occurs
672 Retrieves a COSBase object by index, dereferencing if needed. @param index position in the objects list @return the COSBase object or null if it's a COSNull
673 Finds the index of an object in the collection. @param object the COSBase object to find @return index of the object or -1 if not found
674 Checks if the collection contains a specified value or its dereferenced object. @param value the value to search for @return true if found, false otherwise
675 Retrieves the key for a given value in the map. @param value the value to search for @return COSName key if found, or null if not
676 Retrieves a COSBase object from the dictionary by key. @param key the identifier for the desired object @return the COSBase object or null if not found
677 Retrieves the linearized dictionary from the PDF's xref table. @return COSDictionary if found, otherwise null
678 Closes all open streams and logs any encountered IOExceptions. @throws IOException if an error occurs during closing operations
679 Accepts a visitor and processes the COSBase object or COSNull. @param visitor the visitor to process this instance @throws IOException if an I/O error occurs during the visit
680 Checks if a COSObject references itself. @param parent the parent COSBase object @param value the COSBase object to check @return true if self-referencing, false otherwise
681 Retrieves COSNumber from a COSBase object or throws IOException for invalid types. @param lengthBaseObj the object representing length, can be COSNumber or COSObject @return COSNumber if valid, null if not found, or throws IOException on errors
682 Initializes NormalXReference with byte offset, key, and object. @param byteOffset position in the stream @param key unique identifier for the COS object @param object COSBase object to reference
683 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to retrieve the key for @return COSObjectKey or null if not found
684 Checks if the object is in the pool or is a COSObject in the pool. @param object the COSBase object to check @return true if present, false otherwise
685 Prepares and stores a COSObjectKey and COSBase object if both are non-null. @param key the COSObjectKey to prepare @param object the COSBase object to prepare
686 Constructs a COSObjectKey with a default stream index. @param num base number, must be non-negative @param gen generation number, must be non-negative
687 Compares this XReferenceEntry with another by referenced key. @param xReferenceEntry the entry to compare with @return negative if this < other, zero if equal, positive if this > other
688 Retrieves the scaling factor in the X direction from the text matrix. @return scaling factor as a float
689 Retrieves the Y scaling factor from the text matrix. @return scaling factor as a float
690 Creates a raw output stream for writing data. @return OutputStream for writing; throws IOException on failure.
691 Constructs a COSWriter with output stream and compression parameters. @param outputStream the output stream for writing data @param compressParameters parameters for compression settings
692 Initializes COSWriter with output stream and input data. @param outputStream output stream for writing data @param inputData data source for reading input
693 Updates the state if updates are accepted. @param updated new update state to set
694 Converts byte array to string based on BOM for UTF-16 or PDFDocEncoding. @return decoded string representation
695 Constructs a COSString from text, encoding based on PDFDocEncoding or UTF-16BE. @param text input string to encode @param forceHex determines if hex encoding is enforced
696 Checks if the font is a Standard 14 font. @return true if it's Standard 14, false if embedded or not found
697 Reads bytes into an array from a stream. @param data byte array to fill, @param offset start index, @param len number of bytes to read @return number of bytes read or -1 if end of stream is reached
698 Closes the resource, flushing data and releasing system resources. @throws IOException if an I/O error occurs during closing
699 Reads a byte from decoded data or returns -1 if EOF or no data available. @return byte value or -1 if end of data is reached
700 Reads bytes into an array from a decoded data source. @param data array to store read bytes @param offset starting position in data array @param length number of bytes to read @return number of bytes actually read, or -1 if EOF
701 Reads an image from an InputStream and sets it. @param stream the InputStream to read the image from @throws IOException if an error occurs during reading
702 Encodes raw data using a code table and writes to an output stream. @param rawData input stream of raw data @param encoded output stream for encoded data @param parameters additional encoding parameters @throws IOException if an I/O error occurs
703 Chooses the data row with the lowest estimated compression sum. @return byte array representing the chosen data row
704 Converts COSName to RenderState or returns null if input is null. @param state COSName representing the rendering state @return corresponding RenderState or null
705 Converts COSName to BaseState; defaults to ON if null. @param state COSName input @return corresponding BaseState
706 Closes all overlays and open documents, releasing resources. @throws IOException if an error occurs during closing
707 Constructs a PDFormXObject with a PDStream. @param stream PDStream to initialize the object
708 Initializes PDFStreamParser with a content stream. @param pdContentstream source for PDF content @throws IOException if an I/O error occurs
709 Initializes PDFStreamParser with byte array data. @param bytes PDF data as a byte array
710 Parses an object by its number. @param objectNumber identifier of the object to parse @return COSBase object or null if not found
711 Reads object numbers and closes the source. @return Map of object numbers to their offsets @throws IOException if an I/O error occurs
712 Skips whitespace characters in the input stream. @throws IOException if an I/O error occurs during reading
713 Checks if the next character is a line break and skips it. @return true if line break is skipped, false otherwise
714 Reads a line from the source, throwing IOException on EOF. @return the line read as a String
715 Skips whitespace and comments in the input source. @throws IOException if an I/O error occurs during reading
716 Finds the nearest xref offset from tables or streams. @param xrefOffset target offset to compare against @return closest xref offset or -1 if none found
717 Parses the PDF header and retrieves version information. @return true if version parsed successfully, false otherwise
718 Parses the FDF header for version info. @return true if version parsed successfully, false otherwise
719 Parses all objects from a PDF and returns a map of object keys to their corresponding bases. @return Map of COSObjectKey to COSBase objects @throws IOException if an error occurs during parsing
720 Calculates a final encryption key based on object and generation numbers. @param objectNumber identifier for the object @param genNumber generation number for the object @return byte array representing the final encryption key
721 Initializes PDAppearanceContentStream with appearance and output stream. @param appearance the PDAppearanceStream instance @param outputStream the output stream for content
722 Initializes PDPageContentStream with document, appearance, and output stream. @param doc the PDDocument instance @param appearance the PDAppearanceStream for resources @param outputStream the output stream for content
723 Transforms a point using the current graphics state. @param x x-coordinate of the point @param y y-coordinate of the point @return transformed Point2D.Float object
724 Creates a PaintContext with adjusted transformation for the given parameters. @param cm ColorModel for the context @param deviceBounds bounds of the device @param userBounds bounds in user space @param xform transformation to apply @param hints rendering hints @return PaintContext object for painting
725 Concatenates matrix to current single array after validation. @param matrix matrix to concatenate
726 Applies translation to a 3D point and validates the resulting values. @param tx translation along the x-axis @param ty translation along the y-axis
727 Scales the 'single' array elements by sx and sy factors. @param sx scaling factor for first three elements @param sy scaling factor for last three elements
728 Multiplies this matrix with another and returns a new Matrix. @param other the matrix to multiply with @return resulting Matrix after multiplication
729 Creates a new PDDocument using the specified document and source. @return PDDocument instance @throws IOException if document creation fails
730 Constructs a PDDocument with the given COSDocument and source. @param doc the COSDocument to associate with this PDDocument @param source the RandomAccessRead source for the document
731 Creates a SecurityHandler for the given ProtectionPolicy. @param policy the ProtectionPolicy to create a handler for @return SecurityHandler instance or null if no handler class found
732 Creates a SecurityHandler for the given filter name. @param name filter name to retrieve handler class @return SecurityHandler instance or null if not found
733 Sets stroking color if provided color is valid. @param color PDColor object to retrieve color components @return true if color set, false otherwise
734 Sets non-stroking color if provided color is valid. @param color PDColor object to retrieve color components @return true if color is set, false otherwise
735 Checks if the user has all necessary permissions for document ownership. @return true if all permissions are granted, false otherwise
736 Checks if the user has any revision 3 permissions. @return true if any permission is granted, false otherwise
737 Encrypts and writes an array of bytes to the output stream. @param data byte array to encrypt and write @param output OutputStream to write to @throws IOException if an I/O error occurs
738 Writes a byte array to the output stream from a specified offset. @param data byte array to write @param offset starting index in the array @param len number of bytes to write @param output OutputStream to write to @throws IOException if an I/O error occurs
739 Inserts a diacritic at the specified index in the unicode string. @param i index to insert the diacritic @param diacritic TextPosition object containing the diacritic info
740 Constructs a Line object with two points and their associated colors. @param p0 starting point, p1 ending point, c0 color at p0, c1 color at p1
741 Initializes SoftMask with paint, mask, bounding box, backdrop color, and transfer function. @param paint paint object for rendering @param mask image mask for the soft mask effect @param bboxDevice bounding box dimensions @param backdropColor color behind the mask @param transferFunction function for color transformation
742 Removes backdrop from the group image based on specified offsets. @param backdrop image to remove from group @param offsetX horizontal offset for backdrop alignment @param offsetY vertical offset for backdrop alignment
743 Retrieves FontMetrics for a given font name. @param fontName name of the font to fetch metrics for @return FontMetrics object or null if not found
744 Constructs a GlyphList from input stream with specified number of entries. @param input the input stream for glyph data @param numberOfEntries expected number of glyph entries
745 Constructs a GlyphList from an existing one and an input stream. @param glyphList existing GlyphList to copy data from @param input input stream for loading additional glyph data @throws IOException if an error occurs during input processing
746 Converts a code to its corresponding glyph ID. @param code the code to convert @return the glyph ID or 0 if not found
747 Retrieves font name or Unicode name if not embedded or glyph is absent. @param name the name to check in the font @return the font name or ".notdef" if not found
748 Retrieves the font name for a given glyph, using alternatives and Unicode if needed. @param name the glyph name to search for @return the corresponding font name or ".notdef" if not found
749 Initializes PDJPXColorSpace with the given ColorSpace. @param colorSpace the AWT ColorSpace to be used
750 Initializes color space and loads ICC profile for CMYK. @throws IOException if the ICC profile cannot be loaded
751 Applies a mask to an image with optional soft edges and interpolation. @param image the original image to apply the mask to @param mask the mask image to be applied @param interpolateMask true to use interpolation on the mask @param isSoft true for soft masking effects @param matte array of float values for matte calculations @return the masked image as a BufferedImage
752 Initializes a CubicBezierCurve with control points and level. @param ctrlPnts array of control points @param l level of detail for point generation
753 Checks if a point is contained within a geometric shape defined by corners. @param p point to check for containment @return true if the point is inside or on the edge, false otherwise
754 Calculates color based on point and interpolation degree. @param p the point for color interpolation @return array of color components as floats
755 Intersects clipping paths with a given GeneralPath. @param path the GeneralPath to intersect with clipping paths
756 Intersects the current clipping path with a specified Area. @param area the Area to intersect with the clipping path
757 Transfers the current clipping path to the given Graphics2D object. @param graphics the Graphics2D object to set the clip on
758 Draws a tiling pattern on the provided graphics context. @param g graphics context to draw on @param pattern tiling pattern to be drawn @param colorSpace color space for the pattern @param color color used for the pattern @param patternMatrix transformation matrix for the pattern
759 Adjusts X direction based on current direction. @return adjusted X direction as a float
760 Constructs a TextPosition with specified dimensions and rotation. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text positioning @param endX X coordinate of the text end position @param endY Y coordinate of the text end position @param maxHeight maximum height for the text @param individualWidth width of individual characters @param spaceWidth width of space between characters @param unicode unicode representation of the text @param charCodes array of character codes @param font font used for the text @param fontSize size of the font in points @param fontSizeInPt font size in points
761 Adjusts Y direction based on page dimensions. @return adjusted Y coordinate as float
762 Retrieves the width based on the current rotation angle. @return width as a float value
763 Calculates adjusted width based on direction. @return adjusted width as a float value
764 Initiates article output for left-to-right text. @throws IOException if an I/O error occurs during writing
765 Writes the end of a paragraph, starting one if not already in progress. @throws IOException if an I/O error occurs during writing
766 Normalizes a given word for specific Unicode ranges. @param word input string to normalize @return normalized string considering bidirectional processing
767 Converts Calendar to a formatted string with timezone offset. @param cal Calendar object to format @return formatted string or null if cal is null
768 Converts Calendar to ISO 8601 string format. @param cal Calendar object to format @return ISO 8601 formatted string
769 Converts byte array to its hexadecimal string representation. @return hexadecimal string of the byte array
770 Writes external signature to a PDF; validates input and manages output streams. @param cmsSignature the CMS signature byte array @throws IOException if writing fails or space is insufficient
771 Writes a PDF name to the output stream, encoding invalid characters as hex. @param output destination OutputStream for PDF content @throws IOException if an I/O error occurs
772 Writes hexadecimal representation of byte array to output stream. @param bytes array of bytes to convert and write @param output destination OutputStream
773 Parses XML from an InputStream without namespace support. @param is InputStream containing XML data @return Document object representing the parsed XML
774 Detects file type from input stream based on magic numbers. @param inputStream the stream to read file data @return FileType determined from the stream's bytes @throws IOException if the stream does not support marking or ends prematurely
775 Initializes LegacyPDFStreamEngine with various text operators for PDF processing.
776 Retrieves or creates a COSName by its string representation. @param aName the string name to retrieve or create @return COSName object or null if not found
777 Initializes a COSFloat object with a specified float value. @param aFloat the float value to set
778 Initializes COSFloat with a float value and its string representation. @param aFloat the float value to set @param valueString the string representation of the float value
779 Initializes COSFloat from a string representation of a float. @param aFloat string to parse as a float @throws IOException if parsing fails or format is invalid
780 Constructs a COSInteger with specified value and validity. @param val integer value to store @param valid indicates if the value is valid
781 Constructs a COSString from byte array without hex format. @param bytes byte array to initialize COSString
782 Initializes an empty COSArray with direct state.
783 Initializes a COSStream with a length of 0 and assigns a stream cache. @param streamCache cache for random access stream data
784 Constructs an unmodifiable COSDictionary from a given COSDictionary. @param dict the COSDictionary to wrap
785 Creates a default DecodeResult instance with an empty COSDictionary. @return DecodeResult object
786 Initializes a new PDDocumentInformation with an empty COSDictionary.
787 Initializes PDResources with default attributes. Creates a new COSDictionary and an empty font cache.
788 Constructs a PDDictionaryWrapper with a new COSDictionary instance.
789 Initializes a PDNameTreeNode with a new COSDictionary.
790 Constructs a PDPageLabelRange with default page label data.
791 Initializes PDMarkInfo with a new COSDictionary.
792 Constructs a PDPropertyList and initializes its COSDictionary.
793 Initializes a PDBoxStyle instance with a new COSDictionary.
794 Initializes a PDCryptFilterDictionary with a new COSDictionary. @return PDCryptFilterDictionary instance
795 Constructs a PDEncryption object with an initialized COSDictionary.
796 Initializes an FDFCatalog with a new COSDictionary.
797 Initializes an FDFDictionary with a new COSDictionary instance.
798 Initializes a new FDFField with an empty COSDictionary.
799 Initializes an FDFIconFit instance with a new COSDictionary.
800 Initializes FDFJavaScript with a new COSDictionary. @return instance of FDFJavaScript
801 Constructs an FDFNamedPageReference with a new COSDictionary instance.
802 Initializes a new FDFPage with an empty COSDictionary. @return instance of FDFPage
803 Initializes a new FDFPageInfo with an empty COSDictionary.
804 Initializes a new FDFTemplate with an empty COSDictionary.
805 Initializes a PDDeviceNAttributes instance with a new COSDictionary.
806 Initializes a PDDeviceNProcess instance with a new COSDictionary.
807 Initializes a PDShading object with a new COSDictionary.
808 Initializes a PDAdditionalActions object with an empty COSDictionary.
809 Constructs a PDAnnotationAdditionalActions object with an empty actions dictionary.
810 Initializes a PDDocumentCatalogAdditionalActions instance with an empty actions dictionary.
811 Initializes a PDFormFieldAdditionalActions instance with an empty COSDictionary.
812 Initializes a PDPageAdditionalActions instance with a new COSDictionary.
813 Constructs a PDTargetDirectory and initializes its COSDictionary.
814 Initializes a PDURIDictionary with a new COSDictionary instance.
815 Initializes PDWindowsLaunchParams with a new COSDictionary instance.
816 Initializes a PDBorderEffectDictionary with a new COSDictionary.
817 Constructs a PDBorderStyleDictionary with an empty COSDictionary.
818 Initializes a PDPropBuild instance with a direct COSDictionary.
819 Constructs a PDPropBuildDataDict and initializes a COSDictionary with direct objects.
820 Initializes a PDSeedValueMDP with a new COSDictionary in direct mode.
821 Constructs a PDSeedValueTimeStamp with a new COSDictionary set to direct.
822 Initializes PDField with a given PDAcroForm and default field dictionary. @param acroForm the PDAcroForm instance
823 Constructs a PDViewportDictionary with an initialized COSDictionary.
824 / ** Initializes PDViewerPreferences with a new COSDictionary instance.
825 Initializes COSObject with a base object and key. @param object the base COS object @param objectKey unique identifier for the COS object
826 Constructs PDDefaultAttributeObject with a COSDictionary. @param dictionary the COSDictionary to wrap
827 Initializes PDUserAttributeObject with a COSDictionary. @param dictionary the COSDictionary to wrap
828 Initializes PDStandardAttributeObject with a COSDictionary. @param dictionary the COSDictionary to wrap
829 Constructs PDOutlineItem with a COSDictionary. @param dic the COSDictionary to initialize the item
830 Retrieves PDMetadata from the stream. @return PDMetadata object or null if not present
831 Retrieves PDF metadata if available. @return PDMetadata object or null if no metadata exists
832 Retrieves the extended PDObjectStream or null if not present. @return PDObjectStream associated with EXTENDS or null
833 Constructs a Type 0 PDF function from a COSBase object. @param function COSBase object representing the function
834 Initializes a Type 3 PDF function with a COSBase stream. @param functionStream COSBase object representing the function stream
835 Constructs a PDPostScriptXObject from a COSStream. @param stream the COSStream for the object
836 Constructs a PDFormXObject from a COSStream. @param stream the COSStream for the form object
837 Initializes a PDFormXObject with a COSStream and ResourceCache. @param stream the COSStream for the object @param cache the ResourceCache associated with the object
838 Constructs a new instance of PublicKeySecurityHandler.
839 Constructs a new instance of StandardSecurityHandler.
840 Initializes PublicKeySecurityHandler with a public key protection policy. @param publicKeyProtectionPolicy defines security settings for public key access
841 Initializes StandardSecurityHandler with a protection policy. @param standardProtectionPolicy defines security settings for the handler
842 Constructs an FDFAnnotationHighlight from a COSDictionary. @param a the COSDictionary representing the annotation
843 Constructs an FDFAnnotationSquiggly from a COSDictionary. @param a the COSDictionary representing the annotation
844 Constructs an FDFAnnotationStrikeOut from a COSDictionary. @param a the COSDictionary representing the annotation
845 Constructs an FDFAnnotationUnderline from a COSDictionary. @param a the COSDictionary representing the annotation
846 Constructs a PDTilingPattern using a COSDictionary. @param dictionary pattern properties in a COSDictionary
847 Constructs a PDShadingType3 instance using a shading dictionary. @param shadingDictionary shading properties in a COSDictionary
848 Initializes a PDShadingType4 with specified shading properties. @param shadingDictionary shading properties in a COSDictionary
849 Constructs a PDShadingType5 with specified shading properties. @param shadingDictionary shading properties in a COSDictionary
850 Constructs a PDPageFitDestination using the specified COSArray. @param arr the COSArray representing the destination
851 Constructs a PDPageFitHeightDestination from a COSArray. @param arr the COSArray representing the destination
852 Initializes a PDPageFitRectangleDestination with a COSArray. @param arr the COSArray representing the destination
853 Constructs a PDPageFitWidthDestination from a COSArray. @param arr the COSArray representing the destination
854 Initializes a PDPageXYZDestination with a COSArray. @param arr the COSArray representing the destination
855 Constructs a PDButton with specified acroForm, field, and parent. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
856 Constructs a PDSignatureField from the given acroForm, field, and parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
857 Constructs a PDVariableText instance by initializing its parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
858 Initializes MacOSRomanEncoding with character codes and names from a predefined table.
859 Creates Type1Encoding from FontBox encoding. @param encoding FontBox encoding to extract code-name pairs @return Type1Encoding instance populated with codes and names
860 Generates a unique partial name by appending a number to "Signature". @return unique partial name as a String
861 Returns a string representation of the object with its details. @return formatted string of objects and their revision numbers
862 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase for mask properties @return PDSoftMask object or null for invalid input
863 Constructs COSDocument with a memory-only stream cache and parser. @param parser parser for COS document processing
864 Creates PDMarkedContent or PDArtifactMarkedContent based on the tag. @param tag content tag COSName @param properties associated properties COSDictionary @return PDMarkedContent instance
865 Calculates the width of the rectangle. @return float value representing the width
866 Checks if the point (x, y) is within the rectangle's bounds. @param x X-coordinate of the point @param y Y-coordinate of the point @return true if the point is inside, false otherwise
867 Calculates the height of a rectangle. @return float difference between upper right and lower left Y-coordinates
868 Transforms a rectangle using a given matrix and returns the new path. @param matrix transformation matrix @return GeneralPath representing the transformed rectangle
869 Converts rectangle coordinates to a GeneralPath object. @return GeneralPath representing the rectangle shape
870 Returns a string representation of the rectangle's coordinates. @return formatted string of rectangle's corners
871 Retrieves an integer by index, defaulting to -1 if out of bounds. @param index position in the collection @return integer value or -1 if index is invalid
872 Retrieves the name at a specified index using a default value of null. @param index position in the collection @return the name as a String or null if index is invalid
873 Creates an output stream with optional filters. @param filters the filters to apply, or null for none @return OutputStream for writing data @throws IOException if an I/O error occurs
874 Constructs a PDImageXObject from a stream and resources. @param stream input stream for image data @param resources associated resources for the image
875 Determines the file suffix based on stream filters. @return suffix string or null if no matching filter found
876 Writes a formatted operand to output stream. @param real the float value to write @throws IOException if an I/O error occurs
877 Writes a formatted integer operand to the output stream. @param integer the integer to format and write @throws IOException if an I/O error occurs
878 Writes a string followed by a newline to the output stream. @param text the string to be written @throws IOException if an I/O error occurs
879 Checks if the collection is empty. @return true if the collection has no elements, false otherwise
880 Writes a COSFloat to an OutputStream, followed by a space. @param output the OutputStream to write to @param cosFloat the COSFloat to be written @throws IOException if an I/O error occurs
881 Converts update state to a COSIncrement object. @return COSIncrement instance based on current update state
882 Converts collection to float array. @return array of float values from COSBase objects
883 Converts COSBase objects to a list of Float values. @return List of Float values or null for non-COSNumber objects
884 Converts COSBase objects to a list of integers. @return List of integers from COSNumber objects or null for others
885 Retrieves the minimum value from a range array. @return minimum float value from the range array
886 Retrieves the maximum value from the range array. @return maximum float value from the specified index
887 Retrieves PDGamma by index from an array. @param index position in the array @return PDGamma object or null if not found
888 Retrieves BlendMode from COSBase or defaults to NORMAL. @param cosBlendMode input object for BlendMode retrieval @return BlendMode instance or NORMAL if not found
889 Retrieves a list of colorant names from a COSArray. @return List of colorant names as strings
890 Retrieves the alternate color space, creating it if not already initialized. @return PDColorSpace instance of the alternate color space
891 Retrieves the colorant name from the array. @return the name of the colorant as a String
892 Retrieves the first page as a PDPage from an array if available. @return PDPage object or null if no page exists
893 Retrieves the page number from the first element of the array. @return page number or -1 if array is empty or not a COSNumber
894 Retrieves the zoom level from the array. @return zoom level as float or -1 if not a COSNumber
895 Constructs a Matrix from a COSArray, extracting float values from its elements. @param array COSArray containing numbers for matrix initialization
896 Retrieves a COSBase object by two keys, prioritizing the first. @param firstKey primary key for the object @param secondKey secondary key if the first is not found @return COSBase object or null if not found
897 Retrieves a COSName from the dictionary by key. @param key the identifier for the desired COSName @return COSName object or null if not found
898 Retrieves a COSDictionary from the dictionary by key. @param key the identifier for the desired dictionary @return COSDictionary object or null if not found
899 Retrieves a COSStream from the dictionary using a key. @param key identifier for the desired COSStream @return COSStream object or null if not found
900 Retrieves a COSArray from the dictionary by key. @param key the identifier for the desired COSArray @return COSArray object or null if not found
901 Retrieves a COSName from the dictionary or returns a default value. @param key the identifier for the desired COSName @param defaultValue the value to return if not found @return the found COSName or defaultValue if not found
902 Retrieves a long value from the dictionary by key or returns default. @param key the identifier for the desired long value @param defaultValue the value to return if key is not found @return long value associated with key or defaultValue if not found
903 Retrieves a float value from the dictionary by key or returns defaultValue. @param key the identifier for the desired float @param defaultValue the value to return if key is not found @return the float value or defaultValue if not found
904 Retrieves content streams from the page. @return Iterator of PDStream objects from the page's contents
905 Checks if the page has non-empty contents. @return true if contents exist and are non-empty, false otherwise
906 Retrieves class names from a COS object, adding them to Revisions collection. @return Revisions<String> containing class names and their revision numbers
907 Retrieves the COSBase object associated with key 'K'. @return COSBase object or null if not found
908 Retrieves the value from the COS object. @return COSBase object associated with the key COSName.V
909 Checks if metadata encryption is enabled. @return true if encryption metadata is set, false otherwise
910 Retrieves the owner encryption key as a byte array. @return byte array of the owner encryption key or null if not found
911 Retrieves a user encryption key as a byte array. @return byte array of the encryption key or null if not found
912 Retrieves permission bytes from the dictionary. @return byte array of permissions or null if not found
913 Retrieves the page number from the annotation. @return Integer page number or null if not found
914 Retrieves the COSBase value of a field or throws IOException if the type is unknown. @return COSBase object or null if not found
915 Retrieves field flags as an Integer. @return field flags or null if not present
916 Retrieves field flags from the dictionary. @return Integer flags or null if not found
917 Retrieves clear field flags from the dictionary. @return Integer flags or null if not found
918 Retrieves widget field flags from the dictionary. @return Integer field flags or null if not found
919 Retrieves widget field flags as an Integer. @return Integer flags or null if not found
920 Retrieves widget field flags or null if not present. @return Integer flags value or null if not found
921 Retrieves the default width; defaults to 1000 if not set. @return default width as float
922 Retrieves the color space from the dictionary. @return PDColorSpace or null if not found
923 Retrieves the PDColorSpace, creating it if absent. @param resources resources for color space creation @return PDColorSpace object or null if not available
924 Initializes PDOptionalContentGroup from a dictionary. @param dict COSDictionary containing group data; must be of type OCG
925 Initializes PDOptionalContentMembershipDictionary from a COSDictionary. @param dict the dictionary containing optional content data @throws IllegalArgumentException if dict is not of type OCMD
926 Retrieves the overprint mode as an Integer from the dictionary. @return Integer overprint mode or null if not set
927 Retrieves the PDSoftMask from the dictionary. @return PDSoftMask object or null if not found
928 Retrieves a Float value from the dictionary by key. @param key the identifier for the desired Float @return Float value or null if not found or not a number
929 Retrieves transfer object from dictionary; returns null if not a COSArray of size 4. @return COSBase transfer object or null if conditions are not met
930 Retrieves TR2 object if it's a COSArray of size 4. @return COSBase object or null if conditions are not met
931 Retrieves the backdrop color as a COSArray. @return COSArray of backdrop color or null if not set
932 Determines the open mode for a window based on COS dictionary settings. @return OpenMode indicating window behavior
933 Retrieves a COSBase object from the action dictionary by key T. @return COSBase object or null if not found
934 Determines the open mode for a window based on the COS object. @return OpenMode indicating window behavior (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
935 Determines open mode for a new window based on COS object setting. @return OpenMode indicating window behavior
936 Retrieves a named destination from the dictionary. @return PDNamedDestination or null if not found
937 Retrieves content bytes from the dictionary. @return byte array of content or an empty array if not found
938 Retrieves the XFA resource from the dictionary. @return PDXFAResource or null if not found
939 Retrieves inheritable attribute by key from dictionary or parent. @param key the COSName key for the attribute @return COSBase object or null if not found
940 Retrieves the COSBase object associated with the key COSName.V. @return COSBase object or null if not found
941 Retrieves the string value of a COSBase object from the dictionary. @return String representation or empty if not found
942 Retrieves the default value from the COS object. @return COSBase object representing the default value or null if not found
943 Closes visual signature and PDF source, handling IOExceptions. @throws IOException if an error occurs during closing operations
944 Clones a COSBase object for a new document. @param base the COSBase object to clone @return cloned COSBase object or the original if already cloned
945 Writes a COS object to the output, adding an XRef entry if valid. @param key unique identifier for the COS object @param obj COSBase object to write @throws IOException if an I/O error occurs
946 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to retrieve the key for @return COSObjectKey or null if not found
947 Checks if the object is in the object pool. @param object the COSBase object to check @return true if present, false otherwise
948 Creates a list of COSWriterObjectStream for object streams. @return List of COSWriterObjectStream objects
949 Retrieves a COSObjectKey by number and generation, using a cache for efficiency. @param num base number for the key @param gen generation number for the key @return COSObjectKey associated with num and gen
950 Searches for objects in a PDF stream until EOF. @throws IOException if an I/O error occurs during reading
951 Searches for object stream offsets and returns a map of their keys. @return map of offsets to COSObjectKey objects
952 Parses object references and updates XRef entries. @param resolver resolver for cross-reference entries @throws IOException if an I/O error occurs during parsing
953 Parses the XRef table from a source stream. @param startByteOffset starting byte position for XRef mapping @return true if parsing is successful, false otherwise
954 Retrieves or creates a COSObjectKey for the given COSBase object. @param obj the COSBase object to derive the key from @return the associated COSObjectKey
955 Stores a COSBase object with a unique COSObjectKey. @param key the key for the object, may be null @param object the COSBase object to store @return the assigned COSObjectKey or null if not stored
956 Constructs a COSWriter with an output stream. @param outputStream the output stream for writing data
957 Sets the update state based on the provided flag. @param flag indicates if an update is needed
958 Calls update with true to accept updates.
959 Retrieves a string from the collection by index or returns a default value. @param index position in the collection @param defaultValue value to return if index is invalid @return the string at index or defaultValue if not found
960 Retrieves the name as a string from a COSBase object by key. @param key identifier for the desired COSBase object @return name as a String or null if not found
961 Retrieves a string from the dictionary using the specified key. @param key the identifier for the desired string @return the string value or null if not found
962 Converts COSDictionary to a map of basic types. @param map the COSDictionary to convert @return COSDictionaryMap of converted values
963 Retrieves the file content as a string. @return decoded string representation of the file
964 Retrieves an option as a string. @return decoded string from the COSString object
965 Retrieves the default appearance string from the option object. @return decoded default appearance string
966 Retrieves the name from a named destination object. @return decoded name as a String or null if not applicable
967 Retrieves pairable strings from COSBase items based on the given index. @param items COSBase object containing strings or arrays @param pairIdx index to select from two-element arrays @return List of pairable strings
968 Retrieves export values as a list of strings. @return List of export values or an empty list if none found
969 Retrieves string values from a COSName dictionary entry. @param name the COSName key for the dictionary @return List of string values or empty list if not found
970 Retrieves the default appearance string from inheritable attributes. @return default appearance string or null if not a COSString
971 Constructs a COSString from the given text without enforcing hex encoding. @param text input string to encode
972 Initializes PDVisibleSignDesigner with a visible signature image from InputStream. @param imageStream InputStream containing the image data @throws IOException if an error occurs during image reading
973 Reads an image from a file and returns the current PDVisibleSignDesigner instance. @param path the file path of the image @throws IOException if an error occurs during image reading
974 Initializes a PDTransparencyGroup with a given PDStream. @param stream PDStream to initialize the group
975 Parses a COS dictionary from input. @param isDirect indicates if the dictionary is direct @return COSDictionary object parsed from input
976 Reads a string until an end-of-name character is found. @return extracted string from source @throws IOException if an I/O error occurs
977 Reads the expected string from source, optionally skipping spaces. @param expectedString array of expected characters @param skipSpaces indicates whether to skip whitespace @throws IOException if the expected string is not found
978 Reads a string of specified length from input, ignoring whitespace and certain characters. @param length maximum length of the string to read @return the read string @throws IOException if an I/O error occurs during reading
979 Reads an integer from the input, skipping spaces and handling errors. @return parsed integer value @throws IOException if input is not a valid integer
980 Reads a long value from input, skipping spaces and handling format errors. @return parsed long value @throws IOException if input is not a valid long
981 Calculates the fixed xref offset from the given object offset. @param objectOffset the object offset to search for @return fixed xref offset or 0 if invalid or not found
982 Computes encrypted user password based on various parameters. @param password user password bytes @param owner owner bytes for encryption @param permissions access permissions @param id identifier bytes @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key @param encryptMetadata flag for metadata encryption @return byte array of the computed encrypted password
983 Computes encrypted owner password using RC4 algorithm. @param ownerPassword byte array of the owner's password @param userPassword byte array of the user's password @param encRevision encryption revision number @param length desired length of the RC4 key @return byte array of the encrypted password
984 Rotates the current matrix by a specified angle. @param theta rotation angle in radians
985 Adjusts text position by applying translation to the text matrix. @param tx translation along the x-axis @param ty translation along the y-axis
986 Translates a 3D point using the vector's x and y coordinates. @param vector the Vector object containing translation values
987 Concatenates two matrices by multiplying the second with the first. @param a first matrix to concatenate @param b second matrix to concatenate @return resulting Matrix after concatenation
988 Constructs a PDDocument from a COSDocument. @param doc the COSDocument to associate with this PDDocument
989 Processes a CharSequence as a token. @param text the input text to be processed as a token
990 Retrieves current access permission, creating it if not already set. @return AccessPermission object representing current permissions
991 Computes the revision number based on the input version and permissions. @param version input version number @return computed revision number based on rules
992 Encrypts or decrypts data using AES. @param finalKey encryption key, @param data input stream, @param output output stream, @param decrypt true for decryption
993 Encrypts or decrypts data using AES-256. @param data input stream for data processing @param output output stream for processed data @param decrypt true for decryption, false for encryption @throws IOException if an I/O error occurs
994 Encrypts input data using RC4 with the specified key. @param finalKey byte array for encryption key (1-32 bytes) @param input byte array to encrypt @param output OutputStream to write encrypted data @throws IOException if an I/O error occurs
995 Writes data from InputStream to OutputStream in chunks. @param data InputStream to read from @param output OutputStream to write to @throws IOException if an I/O error occurs
996 Prepares a string for SASL query processing. @param str input string to process @return normalized string for SASL use
997 Prepares a string for SASL without allowing unassigned characters. @param str input string to process @return normalized string
998 Retrieves a FontBoxFont from cache or loads it based on format. @return FontBoxFont object or null if not found
999 Saves font information to a disk cache file.
1000 Sets the font provider and updates font info mapping. @param fontProvider the FontProvider to set
1001 Constructs a shaded triangle with points and colors, calculating area and edges. @param p array of triangle vertices, @param c array of colors for vertices
1002 Writes CMap data to the provided OutputStream. @param out output stream for writing CMap data @throws IOException if an I/O error occurs during writing
1003 Loads a GlyphList from a specified file. @param filename name of the glyph list file @param numberOfEntries number of entries to load @return GlyphList object
1004 Retrieves a mapping of glyph IDs to codes. @return Map of glyph ID to code, populated if empty
1005 Initializes PDICCBased with ICC profile data. @param iccArray array containing ICC profile information
1006 Finalizes text clipping by applying buffered shapes to the graphics state.
1007 Sets the clipping path if it has changed since the last update.
1008 Retrieves an InputStream for signing a PDF document. @return InputStream containing data to sign @throws IOException if an I/O error occurs @throws IllegalStateException if PDF is not prepared for signing
1009 Merges a diacritic into the current text position if conditions are met. @param diacritic TextPosition object representing the diacritic to merge
1010 Checks if the current TextPosition overlaps with another. @param tp2 the TextPosition to check for overlap @return true if they overlap, false otherwise
1011 Checks if this TextPosition completely contains another TextPosition. @param tp2 the TextPosition to check for containment @return true if this contains tp2, false otherwise
1012 Writes a paragraph separator by ending and starting a paragraph. @throws IOException if an I/O error occurs during writing
1013 Writes COSName to output stream followed by a space. @param output destination OutputStream for PDF content @param cosName the COSName to be written @throws IOException if an I/O error occurs
1014 Writes a COSName operand to the output stream followed by a space. @param name the COSName to write @throws IOException if an I/O error occurs
1015 Writes a byte array as ASCII or hexadecimal to an output stream. @param bytes the byte array to write @param forceHex flag to enforce hexadecimal output @param output the OutputStream to write to @throws IOException if an I/O error occurs
1016 Initializes PDFMarkedContentExtractor with specified encoding. @param encoding character encoding for PDF processing
1017 Initializes PDFTextStripper with content sequence operators.
1018 Retrieves a COSBase object from the dictionary by string key. @param key the identifier for the desired object @return COSBase object or null if not found
1019 Retrieves an item by its string key. @param key unique identifier for the item @return COSBase object or null if not found
1020 Checks if the items map contains a key by its string name. @param name the string name to check @return true if the key exists, false otherwise
1021 Retrieves a Filter by its name. @param filterName the name of the filter to retrieve @return corresponding Filter object @throws IOException if the filter name is invalid
1022 Parses a COSName from the input stream. @return COSName object or throws IOException on error
1023 Initializes PDColor with components and pattern name from a COSArray. @param array source array of color components and pattern name @param colorSpace color space associated with this color
1024 Retrieves or creates a COSInteger based on the specified value. @param val integer value to store @return COSInteger instance
1025 Parses a hex string into a COSString. @param hex input hex string @return COSString representation of the hex data @throws IOException if the hex string is invalid
1026 Constructs a COSArrayList with an empty COSArray and ArrayList.
1027 Constructs a COSArrayList from a COSDictionary and key. @param dictionary the COSDictionary to associate with the list @param dictionaryKey the key for the dictionary
1028 Constructs a PDPageDestination with an empty COSArray.
1029 Constructs a PDRectangle with specified position and dimensions. @param x rectangle's x-coordinate @param y rectangle's y-coordinate @param width rectangle's width @param height rectangle's height
1030 Constructs a PDRectangle from a BoundingBox object. @param box bounding box defining rectangle dimensions
1031 Creates and caches a new COSStream. @return the newly created COSStream instance
1032 Default constructor for COSStream initializes with null cache.
1033 Constructs a COSStream with stream cache and read view. @param streamCache cache for random access stream data @param randomAccessReadView view for reading data
1034 Converts the current instance to an unmodifiable COSDictionary. @return UnmodifiableCOSDictionary wrapping the current instance
1035 Retrieves the latest DecodeResult or creates a default if none exist. @return DecodeResult object
1036 Retrieves PDResources from the COSDictionary or returns empty resources if key exists. @return PDResources object or null if not found
1037 Constructs a PDAttributeObject instance.
1038 Constructs a PDUserProperty with the specified user attribute object. @param userAttributeObject the user attribute to associate with this property
1039 Constructs a PDOutlineNode instance.
1040 Constructs a new PDDestinationNameTreeNode instance.
1041 Constructs a new PDEmbeddedFilesNameTreeNode instance.
1042 Constructs a PDJavascriptNameTreeNode instance.
1043 Constructs a PDStructureElementNameTreeNode by calling the superclass constructor.
1044 Constructs a PDNonTerminalField with the specified PDAcroForm. @param acroForm the PDAcroForm instance
1045 Constructs a PDTerminalField from a given PDAcroForm. @param acroForm the PDAcroForm instance
1046 Constructs PDLayoutAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize the object
1047 Constructs PDListAttributeObject from a COSDictionary. @param dictionary the COSDictionary to wrap
1048 Constructs PDPrintFieldAttributeObject with a COSDictionary. @param dictionary the COSDictionary to wrap
1049 Constructs PDTableAttributeObject from a COSDictionary. @param dictionary the COSDictionary to wrap
1050 Constructs a PDAppearanceStream from a COSStream. @param stream the COSStream for the appearance stream
1051 Constructs a PDTransparencyGroup with a COSStream and ResourceCache. @param stream the COSStream for the transparency group @param cache the ResourceCache associated with the group
1052 Adds TrueType fonts from a collection file, processing headers and handling exceptions. @param ttcFile the TrueType collection file to process
1053 Adds a TrueType font to the list after validating its attributes. @param fontHeaders contains font metadata @param file the font file to be added @param hash unique identifier for the font
1054 Adds a Type1 font from a PFB file, handling errors and logging relevant warnings. *
1055 Creates a PDDestination from a COSBase object. @param base the COSBase object to convert @return PDDestination or null if base is null
1056 Constructs a PDCheckBox with specified acroForm, field, and parent. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1057 Constructs a PDPushButton with specified acroForm, field, and parent. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1058 Constructs a PDRadioButton with specified acroForm, field, and parent. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1059 Constructs a PDChoice instance by initializing its parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1060 Initializes a PDTextField instance inheriting from its parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1061 Saves the current graphics state by cloning and pushing it onto the stack.
1062 Saves and clears the graphics stack, returning the previous state. @return Deque of saved PDGraphicsState objects
1063 Constructs a COSDocument using a memory-only stream cache.
1064 Returns string representation of the object; logs error on IOException. @return string representation or error message on exception
1065 Clips the graphics context to the specified rectangle. @param rectangle the rectangle to clip to, or null to skip clipping
1066 Computes the transformed bounding box of a PDAppearanceStream. @param appearanceStream stream containing appearance data @return Rectangle2D of the transformed bounding box
1067 Initializes PDGraphicsState with a clipping path from the given rectangle. @param page rectangle defining the clipping area
1068 Retrieves the integer at index 2 from the array. @return integer value at index 2
1069 Retrieves the integer at index 2 from the array. @return integer value at index 2
1070 Retrieves the integer at index 3 from the array. @return integer value from the array
1071 Retrieves the integer at index 4 from the array. @return integer value at index 4 or -1 if out of bounds
1072 Retrieves the integer at index 5 from the array. @return integer value at index 5 or -1 if out of bounds
1073 Retrieves the integer at index 2 from the array. @return integer value at index 2
1074 Retrieves the integer at index 2 from the array. @return integer value at index 2
1075 Retrieves the integer at index 3 from the array. @return integer value at index 3 or -1 if out of bounds
1076 Checks if the second element's name matches the bounded type. @return true if it matches, false otherwise
1077 Checks if the second element's name matches the bounded type. @return true if it matches, false otherwise
1078 Checks if the second element's name matches the bounded type. @return true if it matches, false otherwise
1079 Creates an output stream without filters. @return OutputStream for writing data @throws IOException if an I/O error occurs
1080 Creates an output stream with specified filter. @param filter optional filter for the output stream @return OutputStream for writing data @throws IOException if an I/O error occurs
1081 Creates a thumbnail image from a COSStream. @param cosStream input stream for image data @return PDImageXObject representing the thumbnail
1082 Retrieves the image mask or null if none exists. @return PDImageXObject for the mask or null if absent
1083 Retrieves the soft mask image or null if not present. @return PDImageXObject for the soft mask or null
1084 Writes components of an AffineTransform to an output stream. @param transform the AffineTransform to process @throws IOException if an I/O error occurs
1085 Starts text mode; throws an exception if already in text mode. @throws IOException if an I/O error occurs
1086 Ends text mode; throws an error if not in text mode. @throws IOException if an I/O error occurs
1087 Sets the text leading value. @param leading the leading value to set @throws IOException if an I/O error occurs
1088 Inserts a new line in text mode. @throws IllegalStateException if not in text mode @throws IOException if an I/O error occurs
1089 Moves text to a new line at specified offsets. @param tx horizontal offset, @param ty vertical offset @throws IOException if an I/O error occurs
1090 Saves the current graphics state; throws if in text mode. @throws IOException if an I/O error occurs
1091 Restores graphics state; throws if in text mode. @throws IOException if an I/O error occurs
1092 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs
1093 Sets the stroking color in CMYK format. @param c, m, y, k color components (0 to 1) @throws IOException if an I/O error occurs
1094 Sets the stroking color to a specified gray value. @param g gray value between 0 and 1 @throws IOException if an I/O error occurs
1095 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
1096 Sets non-stroking color in CMYK; validates inputs and writes to output. @param c cyan component (0-1) @param m magenta component (0-1) @param y yellow component (0-1) @param k black component (0-1) @throws IOException if an I/O error occurs
1097 Sets the non-stroking color using a grayscale value. @param g grayscale value between 0 and 1 @throws IOException if an I/O error occurs
1098 Adds a rectangle with specified dimensions to the output. @param x rectangle's x-coordinate @param y rectangle's y-coordinate @param width rectangle's width @param height rectangle's height @throws IOException if an I/O error occurs
1099 Draws a Bézier curve with specified control points. @param x1, y1 control point 1 coordinates @param x2, y2 control point 2 coordinates @param x3, y3 endpoint coordinates @throws IOException if an I/O error occurs
1100 Draws a curve to specified points; throws if in text mode. @param x2, y2, x3 coordinates for the curve @throws IOException if an I/O error occurs
1101 Writes curve data to output; throws error if in text mode. @param x1, y1, x3, y3 control point coordinates @throws IOException if an I/O error occurs
1102 Moves to specified coordinates, throwing exception if in text mode. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
1103 Draws a line to specified coordinates, throws if in text mode. @param x target x-coordinate @param y target y-coordinate @throws IOException if an I/O error occurs
1104 Executes the stroke operation if not in text mode. @throws IOException if an I/O error occurs
1105 Closes and strokes the current graphics context. @throws IOException if an I/O error occurs @throws IllegalStateException if called in text mode
1106 Fills the output with a non-zero operator. @throws IOException if an I/O error occurs
1107 Fills even-odd operator; throws if in text mode. @throws IOException if an I/O error occurs
1108 Fills and strokes the current graphics context. @throws IOException if an I/O error occurs
1109 Fills and strokes using even-odd rule; throws error in text mode. @throws IllegalStateException if in text mode
1110 Closes the current path and fills it; throws if in text mode. @throws IOException if an I/O error occurs
1111 Closes and fills using even-odd rule; throws error in text mode. @throws IOException if an I/O error occurs
1112 Closes the current path; throws if in text mode. @throws IOException if an I/O error occurs
1113 Clips the current path; throws exception if in text mode. @throws IOException if an I/O error occurs
1114 Clips the current path to even-odd rule; throws if in text mode. @throws IOException if an I/O error occurs
1115 Sets the line width for drawing operations. @param lineWidth the width of the line to be set @throws IOException if an I/O error occurs
1116 Sets the line join style if valid; otherwise, throws IllegalArgumentException. @param lineJoinStyle value between 0 and 2 for line join style @throws IOException if an I/O error occurs
1117 Sets the line cap style if valid; otherwise throws an exception. @param lineCapStyle value for line cap style (0-2) @throws IOException if an I/O error occurs
1118 Sets the line dash pattern and phase for drawing. @param pattern array of dash lengths @param phase offset for the dash pattern @throws IOException if an I/O error occurs
1119 Sets the miter limit for line rendering. @param miterLimit positive float value for miter limit @throws IOException if an I/O error occurs
1120 Ends marked content by writing the corresponding operator to the output stream. @throws IOException if an I/O error occurs
1121 Sets character spacing and writes it to the output. @param spacing the spacing value to set @throws IOException if an I/O error occurs
1122 Sets word spacing and writes the operation to output. @param spacing the amount of spacing to set @throws IOException if an I/O error occurs
1123 Sets horizontal scaling by writing the scale and operator to output. @param scale the scaling factor to apply @throws IOException if an I/O error occurs
1124 Sets the rendering mode by writing its integer value and operator name. @param rm the rendering mode to set @throws IOException if an I/O error occurs
1125 Sets the text rise value and writes it to the output. @param rise the float value for text rise @throws IOException if an I/O error occurs
1126 Constructs a PDRectangle from a COSArray, normalizing values and handling large numbers. @param array COSArray containing rectangle dimensions
1127 Initializes PDLineDashPattern with dash array and phase adjustments. @param array COSArray converted to float array @param phase dash phase value, adjusted if negative
1128 Returns a string representation of the PDRange object. @return formatted string with min and max values
1129 Evaluates input values and returns clipped output values. @param input array of float values to evaluate @return array of clipped float output values
1130 Reads patch data from input stream and transforms points/colors. @param input data stream, @param isFree flag for free points, @return Patch object or null if EOF is reached
1131 Reads vertex data from input stream and transforms coordinates and colors. @param input data source for vertex information @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX range for x-coordinate mapping @param rangeY range for y-coordinate mapping @param colRangeTab color ranges for each color component @param matrix transformation matrix for coordinates @param xform affine transformation for the point @return Vertex object constructed from read data
1132 Retrieves the PDGamma object at the first index. @return PDGamma object or null if not found
1133 Retrieves PDGamma for the after color. @return PDGamma object from index 1 of the array
1134 Retrieves the starting color PDGamma from the color array. @return PDGamma object or null if not found
1135 Retrieves the end color PDGamma. @return PDGamma object from index 3 of the array
1136 Retrieves BlendMode from the dictionary. @return BlendMode instance or NORMAL if not found
1137 Creates a Matrix from a COSBase if valid; otherwise, returns an empty Matrix. @param base input COSBase object @return Matrix constructed from COSArray or empty Matrix if invalid
1138 Updates the highest imported object number from a given PDPage. @param importedPage the page to extract object number from
1139 Retrieves a COSDictionary by two keys. @param firstKey primary key for the dictionary @param secondKey secondary key if the first is not found @return COSDictionary object or null if not found
1140 Retrieves a boolean value from keys, defaults if not found. @param firstKey primary key for the boolean value @param secondKey secondary key if the first is not found @param defaultValue value to return if not found @return true if found and true, otherwise false
1141 Retrieves an integer value from a COSBase object or returns a default value. @param firstKey primary key for the object @param secondKey secondary key if the first is not found @param defaultValue value to return if no integer is found @return integer value from COSNumber or defaultValue
1142 Retrieves filter names from parameters. @return List of filter names as strings, or empty if none found.
1143 Retrieves PDColorSpace, creating it if not already cached. @return PDColorSpace instance
1144 Checks if a dictionary represents a catalog or contains FDF key. @param dictionary the COSDictionary to check @return true if it's a catalog or contains FDF, false otherwise
1145 Checks if a COSDictionary node is a page tree node by type or presence of kids. @param node the COSDictionary to check @return true if it's a page tree node, false otherwise
1146 Retrieves the crypt filter method from the dictionary. @return COSName object or null if not found
1147 Retrieves the stream filter name from the dictionary. @return COSName object or IDENTITY if not found
1148 Retrieves the string filter name from the dictionary. @return COSName object or IDENTITY if not found
1149 Decrypts specified COSDictionary entries, excluding signatures. @param dictionary the dictionary to decrypt @param objNum object number for decryption @param genNum generation number for decryption
1150 Converts a code to its Unicode representation using a CMap. @param code the character code to convert @return Unicode string or null if not found
1151 Retrieves the subtype COSName, initializing if null. @return COSName representing the subtype
1152 Retrieves the relationship COSName from the dictionary. @return COSName object or null if not found
1153 Retrieves the appearance state as a COSName. @return COSName associated with the appearance state
1154 Checks if the document is encrypted. @return true if encrypted, false otherwise
1155 Retrieves the encryption dictionary from the PDF trailer. @return COSDictionary containing encryption details or null if not found
1156 Parses the document trailer to retrieve the root dictionary. @throws IOException if the root object is missing
1157 Retrieves the PDAcroForm, applying fixes if necessary. @param acroFormFixup optional fixup to apply before retrieval @return PDAcroForm object or null if not found
1158 Retrieves viewer preferences from the root dictionary. @return PDViewerPreferences or null if not found
1159 Retrieves document name dictionary or null if not present. @return PDDocumentNameDictionary or null if names are absent
1160 Retrieves a PDDocumentNameDestinationDictionary from the root. @return PDDocumentNameDestinationDictionary or null if not found
1161 Retrieves PDMarkInfo from root's COSDictionary by MARK_INFO key. @return PDMarkInfo object or null if not found
1162 Retrieves PDURIDictionary from the root's COSDictionary by URI key. @return PDURIDictionary or null if not found
1163 Retrieves the structure tree root from the document. @return PDStructureTreeRoot or null if not found
1164 Retrieves optional content properties from the root. @return PDOptionalContentProperties or null if not found
1165 Retrieves destination nodes from the name dictionary or catalog. @return PDDestinationNameTreeNode or null if not found
1166 Retrieves embedded files node from name dictionary. @return PDEmbeddedFilesNameTreeNode or null if not found
1167 Retrieves a PDJavascriptNameTreeNode from the name dictionary. @return PDJavascriptNameTreeNode or null if not found
1168 Retrieves PDTransition from the page's COSDictionary. @return PDTransition object or null if not found
1169 Retrieves a COSObject from resources by kind and name. @param kind resource type, @param name resource identifier @return COSObject or null if not found or not indirect
1170 Retrieves a COSBase object from a specified COSDictionary. @param kind the key for the resources dictionary @param name the key for the desired object in the dictionary @return COSBase object or null if not found
1171 Retrieves COSName keys from a COSDictionary by type. @param kind identifier for the desired dictionary @return Iterable of COSName keys or an empty set if not found
1172 Retrieves a PDPage object from the COSDictionary or null if not found. @return PDPage instance or null if page data is absent
1173 Retrieves a PDPage object from the page dictionary. @return PDPage instance or null if page dictionary is absent
1174 Retrieves a PDPage object from the page dictionary. @return PDPage or null if the page dictionary is not found
1175 Retrieves the ID tree as a PDNameTreeNode. @return PDNameTreeNode or null if ID_TREE is not present
1176 Retrieves the parent number tree node from the COS dictionary. @return PDNumberTreeNode or null if not found
1177 Retrieves a map of class attributes from the COSDictionary. @return Map of class names to attribute objects or empty if not found
1178 Retrieves a PDCryptFilterDictionary by its name. @param cryptFilterName identifier for the crypt filter @return PDCryptFilterDictionary or null if not found
1179 Retrieves border style dictionary from annotation. @return PDBorderStyleDictionary or null if not present
1180 Retrieves border effect dictionary from annotation. @return PDBorderEffectDictionary or null if not present
1181 Retrieves the PDSignature from the catalog. @return PDSignature object or null if not found
1182 Retrieves FDFJavaScript from the FDF document. @return FDFJavaScript object or null if not found
1183 Retrieves PDAppearanceDictionary from the associated COSDictionary. @return PDAppearanceDictionary or null if not found
1184 Retrieves FDFNamedPageReference from field's appearance stream. @return FDFNamedPageReference or null if not found
1185 Retrieves FDFIconFit from field's COSDictionary using key COSName.IF. @return FDFIconFit object or null if not found
1186 Retrieves additional actions from the COSDictionary. @return PDAdditionalActions object or null if not found
1187 Retrieves FDFPageInfo from the page's COS dictionary. @return FDFPageInfo object or null if not found
1188 Retrieves FDFNamedPageReference from the template's COSDictionary. @return FDFNamedPageReference or null if not found
1189 Retrieves PDCIDSystemInfo from the COSDictionary if available. @return PDCIDSystemInfo object or null if not found
1190 Retrieves a PDPanose object from the style dictionary. @return PDPanose object or null if not found or invalid
1191 Retrieves PDResources, initializing if not already set. @return PDResources object or null if not available
1192 Retrieves the character procedures dictionary. @return COSDictionary of character procedures or null if not found
1193 Retrieves a PDDeviceNProcess from the COSDictionary. @return PDDeviceNProcess or null if not found
1194 Retrieves RenderState based on the specified RenderDestination. @param destination the rendering destination type @return corresponding RenderState or null if not found
1195 Retrieves the extended graphics state, creating it if not already initialized. @return PDExtendedGraphicsState or null if not found
1196 Retrieves PDResources from the COSObject's resources dictionary. @return PDResources object or null if not found
1197 Retrieves a PDTargetDirectory from the COSDictionary if available. @return PDTargetDirectory or null if not found
1198 Retrieves PDWindowsLaunchParams from action's COSDictionary for Windows. @return PDWindowsLaunchParams or null if not found
1199 Retrieves PDTargetDirectory from the COSDictionary by key. @return PDTargetDirectory or null if not found
1200 Retrieves PDAppearanceDictionary from the associated COSDictionary. @return PDAppearanceDictionary or null if not found
1201 Retrieves a PDPage object from the COS dictionary or null if not found. @return PDPage instance or null
1202 Retrieves border effect dictionary from the PDF object. @return PDBorderEffectDictionary or null if not found
1203 Retrieves border style dictionary or null if not present. @return PDBorderStyleDictionary or null if not found
1204 Retrieves the previous URI action from the COS object. @return PDActionURI or null if not found
1205 Retrieves external data dictionary or null if not present. @return PDExternalDataDictionary or null if EX_DATA not found
1206 Retrieves border style dictionary from the PDF object. @return PDBorderStyleDictionary or null if not found
1207 Retrieves border effect dictionary or null if not present. @return PDBorderEffectDictionary or null if not found
1208 Retrieves PDBorderEffectDictionary from the COS object. @return PDBorderEffectDictionary or null if not found
1209 Retrieves appearance characteristics from the COS object. @return PDAppearanceCharacteristicsDictionary or null if not found
1210 Retrieves additional actions from the annotation. @return PDAnnotationAdditionalActions or null if no actions exist
1211 Retrieves border style dictionary or null if not present. @return PDBorderStyleDictionary or null if not found
1212 Retrieves normal appearance entry from the dictionary. @return PDAppearanceEntry or null if not found
1213 Retrieves PDPropBuildDataDict from the dictionary using the FILTER key. @return PDPropBuildDataDict or null if not found
1214 Retrieves PDPropBuildDataDict from the dictionary if available. @return PDPropBuildDataDict or null if not found
1215 Retrieves PDPropBuildDataDict from the APP key in the dictionary. @return PDPropBuildDataDict or null if not found
1216 Retrieves a PDSeedValueMDP from the MDP COSDictionary. @return PDSeedValueMDP or null if MDP dictionary is absent
1217 Retrieves a PDSeedValueCertificate from the COSDictionary. @return PDSeedValueCertificate or null if not found
1218 Retrieves a PDSeedValueTimeStamp from the dictionary. @return PDSeedValueTimeStamp or null if not found
1219 Retrieves PDPropBuild from the dictionary if available. @return PDPropBuild object or null if not found
1220 Retrieves a PDStructureElement from the COSDictionary. @return PDStructureElement or null if not found
1221 Checks if the object has children. @return true if children exist, false otherwise
1222 Retrieves default resources from the dictionary. @return PDResources object or null if not present
1223 Retrieves additional actions from the field's dictionary. @return PDFormFieldAdditionalActions or null if not found
1224 Retrieves the PDSignature from the COSDictionary value. @return PDSignature object or null if not found
1225 Retrieves the default PDSignature from the COSDictionary. @return PDSignature object or null if not found
1226 Retrieves PDSeedValue from the COSDictionary using SV key. @return PDSeedValue object or null if not found
1227 Retrieves a PDMeasureDictionary from the COSDictionary. @return PDMeasureDictionary or null if not found
1228 Retrieves thread document information. @return PDDocumentInformation or null if not found
1229 Retrieves the first bead from the thread. @return PDThreadBead object or null if not found
1230 Retrieves a PDThread from a COSDictionary by key. @return PDThread object or null if dictionary is not found
1231 Retrieves the next PDThreadBead from the current bead.\n@return PDThreadBead object or null if not found
1232 Retrieves the previous thread bead from the current bead. @return PDThreadBead object or null if not found
1233 Retrieves a PDPage object from the bead's COSDictionary. @return PDPage or null if the dictionary is not found
1234 Retrieves PDMetadata from the root's COSStream if available. @return PDMetadata object or null if not found
1235 Retrieves PDMetadata from the page's COSStream. @return PDMetadata object or null if not found
1236 Retrieves a COSStream representing differences from the FDF object. @return COSStream object or null if not found
1237 Retrieves font file as PDStream from the dictionary. @return PDStream object or null if not found
1238 Retrieves the font file stream and returns it as a PDStream. @return PDStream object or null if FONT_FILE2 is not found
1239 Retrieves font file stream; returns PDStream or null if not found. @return PDStream object for FONT_FILE3 or null
1240 Retrieves CIDSet as PDStream from the dictionary. @return PDStream object or null if CIDSet not found
1241 Retrieves a COSStream for sound from the action dictionary. @return COSStream object or null if not found
1242 Retrieves a normal icon as a PDFormXObject. @return PDFormXObject or null if not found
1243 Retrieves the rollover icon as a PDFormXObject. @return PDFormXObject or null if not found
1244 Retrieves alternate icon as PDFormXObject if available. @return PDFormXObject or null if not found
1245 Retrieves the document ID from the PDF trailer. @return COSArray containing the document ID or null if not found
1246 Retrieves a list of PDOutputIntent from the output intents COSArray. @return List of PDOutputIntent objects
1247 Retrieves a list of PDThreadBead objects from the page's COSArray. @return List of PDThreadBead or empty if none found
1248 Retrieves a list of PDViewportDictionary from the page's COSArray. @return List of PDViewportDictionary or null if not found
1249 Retrieves child nodes from the KIDS array. @return list of PDNameTreeNode objects or null if none exist
1250 Retrieves a map of names from a COSArray. @return unmodifiable map of names or null if not found
1251 Retrieves child PDNumberTreeNodes from the KIDS COSArray. @return List of PDNumberTreeNode or null if not found
1252 Retrieves a map of integer keys and COSObjectable values from a COSArray. @return unmodifiable map of indices or null if values are invalid
1253 Retrieves the upper limit from the node's COSArray. @return Integer upper limit or null if not found
1254 Retrieves the lower limit from the COSArray of limits. @return Integer lower limit or null if not found
1255 Retrieves the COSArray of range values, initializing if null. @return COSArray of range values
1256 Retrieves the domain values as a COSArray. @return COSArray containing domain values or null if not set
1257 Retrieves the size as a COSArray, initializing if not already set. @return COSArray representing the size
1258 Retrieves decode values from the COS object or range values if not found. @return COSArray of decode values or range values if decode is null
1259 Retrieves the COSArray of functions, initializing if necessary. @return COSArray of functions or null if not found
1260 Retrieves the bounds as a COSArray, initializing if null. @return COSArray of bounds or null if not set
1261 Retrieves the encoding array from the COS object. @return COSArray of encoding or null if not set
1262 Retrieves a list of PDUserProperty from the COSArray in the owner object. @return List of PDUserProperty instances
1263 Checks if the specified edge is attached. @param edge the edge name to check @return true if attached, false otherwise
1264 Retrieves the color from an annotation as a Color object. @return Color object or null if not found
1265 Retrieves the interior color from an annotation. @return Color object or null if not defined
1266 Retrieves callout values as a float array. @return array of callout values or null if not found
1267 Retrieves a list of ink data as float arrays. @return List of float arrays or null if not found
1268 Retrieves line coordinates from annotation. @return array of float values or null if not found
1269 Retrieves the ending style of the start point from the annotation. @return ending style as String or default if not found
1270 Retrieves the ending style of an endpoint annotation. @return String representing the ending style or default if not found
1271 Retrieves the interior color from annotation. @return Color object or null if not defined
1272 Retrieves the horizontal offset of the caption. @return horizontal offset as float, or 0 if not found
1273 Retrieves vertical offset from annotation caption. @return vertical offset as float, or 0 if not found
1274 Retrieves vertex coordinates as a float array. @return array of vertex floats or null if not found
1275 Retrieves the interior color from annotation. @return Color object or null if not found
1276 Retrieves an array of vertex coordinates from an annotation. @return array of float vertices or null if not found
1277 Retrieves the starting point ending style for an annotation. @return String representation of the style or default if not found
1278 Retrieves the endpoint style for an annotation. @return String representing the endpoint style or a default value if not found
1279 Retrieves the interior color from an annotation. @return Color object or null if not found
1280 Retrieves the interior color from annotation. @return Color object or null if not defined
1281 Retrieves coordinates as a float array from annotation quad points. @return array of float coordinates or null if not found
1282 Retrieves the COSArray associated with the document ID. @return COSArray containing document ID or null if not found
1283 Retrieves a list of FDFField objects from the FDF document. @return List of FDFField or null if no fields are found
1284 Retrieves a list of FDFPage objects from the COSArray of pages. @return List of FDFPage or null if no pages exist
1285 Retrieves child FDF fields from the COS array. @return List of FDFField or null if no children exist
1286 Retrieves options from a COSArray and returns them as a list. @return List of option objects or null if no options found
1287 Retrieves a list of FDFTemplate objects from the page's COSArray of templates. @return List of FDFTemplate or null if no templates found
1288 Retrieves a list of FDFField objects from the template's COSArray. @return List of FDFField or null if not found
1289 Retrieves a list of Float widths from the dictionary. @return List of Float widths or an empty list if not found
1290 Retrieves the transformation matrix as a float array. @return float array representing the matrix or identity if not found
1291 Retrieves a list of component names from the dictionary. @return List of component names or empty if none found
1292 Retrieves the background COSArray from the dictionary. @return COSArray of background or null if not set
1293 Retrieves the domain COSArray, initializing it if not already set. @return COSArray representing the domain
1294 Retrieves the COSArray for EXTEND, initializing it if null. @return COSArray object or null if not found
1295 Retrieves the domain COSArray, initializing it if not already set. @return COSArray object representing the domain
1296 Retrieves the COSArray of coordinates, initializing if null. @return COSArray of coordinates or null if not found
1297 Retrieves the decode values as a COSArray. @return COSArray of decode values or null if not set
1298 Retrieves font settings from the dictionary. @return PDFontSetting object or null if not found
1299 Retrieves a COSArray of fields from the action dictionary. @return COSArray object or null if not found
1300 Retrieves the COSArray of fields from the action. @return COSArray object or null if not found
1301 Retrieves rectangle differences as a float array. @return array of float values or an empty array if not found
1302 Gets rectangle differences as a float array. @return array of float values or an empty array if none found
1303 Retrieves callout as a float array or null if not found. @return array of float values or null if callout is absent
1304 Retrieves a 2D float array of ink data from the COS object. @return 2D array of float values or empty if not found
1305 Retrieves line data as a float array. @return array of float values or null if not found
1306 Retrieves the start point ending style from a COSArray. @return style name or default LE_NONE if not found
1307 Retrieves the endpoint style from a COSArray. @return style as a String or LE_NONE if not found
1308 Retrieves the horizontal offset of the caption. @return float value of the offset or 0 if not found
1309 Retrieves the vertical offset from the caption array. @return vertical offset as float, or 0 if not found
1310 Retrieves quad points as a float array. @return array of quad points or null if not found
1311 Retrieves vertices as a float array from the COS object. @return array of float values or null if not found
1312 Retrieves a 2D float array representing the path from the COSArray. @return 2D float array of path coordinates or null if not found
1313 Retrieves the starting point ending style from a COSArray. @return style name or default LE_NONE if not found
1314 Retrieves the ending style of the endpoint. @return ending style as a String, defaults to LE_NONE if not found
1315 Retrieves vertex coordinates as a float array. @return array of vertex coordinates or null if not found
1316 Retrieves rectangle differences as a float array. @return array of float values or empty if not found
1317 Retrieves quad points as a float array. @return array of float values or null if not found
1318 Retrieves a list of sub-filter names from the dictionary. @return List of sub-filter names or an empty list if none found
1319 Retrieves digest method names from the dictionary. @return List of digest method names or an empty list if none found
1320 Retrieves a list of reasons from the dictionary. @return List of reason strings or an empty list if none found
1321 Retrieves legal attestation names from the dictionary. @return List of legal attestation names or an empty list if none found
1322 Retrieves subject byte arrays from the dictionary. @return List of byte arrays or null if not found
1323 Retrieves key usage extensions from the COSArray in the dictionary. @return List of key usage strings or null if not found
1324 Retrieves issuer byte arrays from the dictionary. @return List of byte arrays or null if not found
1325 Retrieves OID byte arrays from the dictionary. @return List of byte arrays or null if OID not found
1326 Retrieves byte range as an integer array from the dictionary. @return array of byte range values or empty if not found
1327 Retrieves calculation order of fields from the COS array. @return List of PDField objects in calculation order
1328 Retrieves selected options indices as a list of integers. @return List of selected indices or an empty list if none found
1329 Retrieves an array of PDNumberFormatDictionary from COSArray X. @return array of PDNumberFormatDictionary or null if not found
1330 Retrieves an array of PDNumberFormatDictionary from COSArray Y. @return array of PDNumberFormatDictionary or null if Y is not found
1331 Retrieves an array of PDNumberFormatDictionary from COSArray D. @return array of PDNumberFormatDictionary or null if D is absent
1332 Retrieves an array of PDNumberFormatDictionary from COSArray A. @return array of PDNumberFormatDictionary or null if not found
1333 Retrieves an array of PDNumberFormatDictionary from COSArray T. @return Array of PDNumberFormatDictionary or null if T is not found
1334 Retrieves an array of PDNumberFormatDictionary from COSArray S. @return array of PDNumberFormatDictionary or null if S is not found
1335 Retrieves the coordinate system origin as a float array. @return array of float values or null if not found
1336 Retrieves the visibility policy from the dictionary. @return COSName representing the visibility policy
1337 Retrieves a long value by key from the PDF dictionary. @param key the string identifier for the desired long value @return long value associated with key or -1 if not found
1338 Retrieves a long value from the dictionary by key. @param key the identifier for the desired long value @return long value associated with key or -1 if not found
1339 Retrieves a long value by key or returns default if not found. @param key identifier for the long value @param defaultValue value to return if key is absent @return long value associated with key or defaultValue
1340 Sets the startxref position and resolves XRef trailer data. @param startxrefBytePosValue byte position for the XRef
1341 Retrieves a float value by key from the PDF dictionary. @param key the identifier for the desired float @return float value or -1 if not found
1342 Retrieves a float value from the dictionary by key. @param key the identifier for the desired float @return float value or -1 if key is not found
1343 Retrieves a float value by key or returns defaultValue if not found. @param key the identifier for the desired float @param defaultValue the value to return if key is not found @return the float value or defaultValue if not found
1344 Retrieves the user unit value for a page. @return user unit as float, defaults to 1.0 if not found or invalid
1345 Retrieves the guideline width from the dictionary. @return float value of guideline width, defaulting to 1 if not found
1346 Retrieves the opacity value of an annotation. @return float opacity value or 1f if not specified
1347 Retrieves the font weight from the dictionary. @return float value of font weight or 0 if not found
1348 Retrieves the italic angle from the dictionary. @return float italic angle or 0 if not found
1349 Retrieves the ascent value from the dictionary. @return float ascent value or 0 if not found
1350 Retrieves the descent value from the dictionary. @return float descent value or 0 if not found
1351 Retrieves the leading value from the dictionary. @return leading float value, defaulting to 0 if not found
1352 Returns the cap height, calculating it if initially negative. @return float cap height value
1353 Retrieves xHeight, calculating it if uninitialized. @return xHeight value, adjusted for negative infinity if needed
1354 Retrieves the vertical stem width from the dictionary. @return float value of STEM_V or 0 if not found
1355 Retrieves the stem height from the dictionary. @return float value of stem height or 0 if not found
1356 Calculates the average width from the dictionary. @return average width as a float, defaulting to 0 if not found
1357 Retrieves the maximum width value from the dictionary. @return float representing the maximum width, or 0 if not found
1358 Gets the missing width from the dictionary. @return float value of missing width, defaulting to 0 if not found
1359 Retrieves the gamma value from the dictionary. @return float gamma value or 1.0f if not found
1360 Retrieves the X step value from the COS object. @return float value of X_STEP or 0 if not found
1361 Retrieves the Y step value from the COS object. @return float value of Y_STEP or 0 if not found
1362 Retrieves volume value, ensuring it's within [-1, 1] range. @return adjusted volume value
1363 Retrieves the leader line length from the COS object. @return float value representing the leader line length, defaulting to 0 if not found
1364 Retrieves the leader line extension length. @return float value of the leader line extension length, defaulting to 0 if not found
1365 Retrieves the leader line offset length from the COS object. @return float value of the leader line offset length
1366 Retrieves the constant opacity value from the COS object. @return float opacity value or 1 if not specified
1367 Retrieves the width value, defaults to 1 if not found. @return width as float, or 0 if the value is a COSName
1368 Retrieves the duration value from the COS object. @return float duration or 1 if not found
1369 Retrieves the fly scale value from the COS object. @return float scale value, defaulting to 1 if not found
1370 Extracts regions from a PDF page and initializes related data structures. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
1371 Retrieves the PDColorSpace, creating it if absent. @return PDColorSpace object or null if not available
1372 Creates a PDPropertyList based on the type in the COSDictionary. @param dict the COSDictionary to process @return corresponding PDPropertyList or subclass based on type
1373 Retrieves the line width as a Float value. @return Float line width or null if not found or not a number
1374 Retrieves the miter limit value for the graphics context. @return Float miter limit or null if not found or not a number
1375 Retrieves the flatness tolerance value. @return Float value or null if not found or not a number
1376 Retrieves the smoothness tolerance value. @return Float value or null if not found or not a number
1377 Retrieves the stroking alpha constant from the PDF dictionary. @return Float value or null if not found or not a number
1378 Retrieves the non-stroking alpha constant value. @return Float value representing the non-stroking alpha or null if not found
1379 Retrieves offsets of COS objects, triggering a search if not already done. @return Map of COSObjectKey to their offsets @throws IOException if an I/O error occurs during searching
1380 Writes a COSBase object and updates the writtenObjects list. @param obj COSBase object to write @throws IOException if an I/O error occurs
1381 Writes object reference to standard output. @param obj COSBase object to derive the reference from
1382 Saves the current FDFDocument to the specified output stream. @param output the OutputStream to write the document to @throws IOException if an I/O error occurs during saving
1383 Clears the collection and updates the state. @return void
1384 Removes an entry by index and updates the current state. @param i index of the entry to remove @return COSBase object that was removed
1385 Removes an object from the collection and updates the state if successful. @param o the object to be removed @return true if the object was removed, false otherwise
1386 Clears items and updates the current update state. @return void, no value is returned
1387 Removes an item by key and updates the current state. @param key the identifier for the item to be removed
1388 Updates the state if origin document states differ. @param updateState state to compare and potentially update
1389 Sets baseObject to null and updates state if baseObject is not null.
1390 Sets the origin document state if not already set. @param originDocumentState new state to set @param dereferencing indicates if dereferencing is needed
1391 Retrieves a string by index, returning null if not found. @param index position in the collection @return the string at index or null if not found
1392 Retrieves the name as a string using a given key. @param key identifier for the desired COSBase object @return name as a String or null if not found
1393 Gets name as string or returns default if not found. @param key identifier for the desired COSBase object @param defaultValue value to return if name is null @return name as a String or defaultValue if not found
1394 Validates if the given offset points to a valid XRef stream. @param startXRefOffset the offset to check @return true if valid XRef stream, false otherwise
1395 Retrieves the PageMode from the root object. @return PageMode instance or PageMode.USE_NONE if not found or invalid
1396 Retrieves the PageLayout based on the root's name. @return PageLayout instance or SINGLE_PAGE if invalid
1397 Retrieves the version from the root COSBase object. @return version as a String or null if not found
1398 Retrieves the trapped status from info as a string. @return trapped status as a String or null if not found
1399 Retrieves the style name from the root object. @return style name as a String or null if not found
1400 Retrieves the type of the COS object. @return type as a String or null if not found
1401 Retrieves the owner name from the COS object. @return owner name as a String or null if not found
1402 Retrieves the structure type as a string. @return structure type name or null if not found
1403 Creates a PDStructureNode from a COSDictionary based on its type. @param node dictionary containing structure info @return PDStructureNode instance or throws IllegalArgumentException if type is invalid
1404 Retrieves the type of the object as a string. @return type as a String or null if not found
1405 Retrieves the name from the COS object. @return name as a String or null if not found
1406 Retrieves the language property from the document. @return language as a String or null if not available
1407 Retrieves the type from properties as a string. @return type as a String or null if not found
1408 Retrieves the subtype property as a string. @return subtype name or null if not found
1409 Retrieves the filter name from the dictionary. @return filter name as a String or null if not found
1410 Retrieves the sub-filter name from the dictionary. @return sub-filter name as a String or null if not found
1411 Creates an FDFAnnotation from a COSDictionary based on its subtype. @param fdfDic COSDictionary representing the annotation @return FDFAnnotation instance or null if subtype is unsupported
1412 Retrieves the intent of the annotation. @return intent as a String or null if not found
1413 Retrieves the line ending style from the annotation. @return line ending style as a String or null if not found
1414 Retrieves the version from the catalog. @return version as a String or null if not found
1415 Retrieves encoding name, defaults to PDFDocEncoding if not found. @return encoding name as a String
1416 Retrieves scale option name; defaults to SCALE_OPTION_ALWAYS if not found. @return scale option as a String
1417 Retrieves the scale type, defaulting to proportional if not found. @return scale type as a String
1418 Retrieves the base font name from the dictionary. @return Base font name as a String or null if not found
1419 Retrieves the type from the dictionary. @return type as a String or null if not found
1420 Retrieves the subtype from the dictionary. @return subtype as a String or null if not found
1421 Retrieves the font name from the dictionary. @return font name as a String or null if not found
1422 Retrieves the font stretch value from the dictionary. @return font stretch as a String or null if not found
1423 Retrieves the base font name from the dictionary. @return base font name as a String or null if not found
1424 Retrieves the base font name from the dictionary. @return font name as a String or null if not found
1425 Retrieves the base font name from the dictionary. @return font name as a String or null if not found
1426 Retrieves the base font name from the dictionary. @return base font name as a String or null if not found
1427 Checks if the subtype in the dictionary is "NChannel". @return true if subtype is "NChannel", false otherwise
1428 Retrieves the action type as a string. @return action type name or null if not found
1429 Retrieves the subtype of the action. @return subtype as a String or null if not found
1430 Creates a PDAction from a COSDictionary based on its type. @param action COSDictionary representing the action @return PDAction object or null if action is invalid
1431 Retrieves the subtype name from the COS object. @return subtype as a String or null if not found
1432 Retrieves the caption positioning from the COS object. @return caption positioning as a String or null if not found
1433 Retrieves the intent as a string from the COS object. @return intent as a String or null if not found
1434 Retrieves the subtype name from the COS object. @return subtype as a String or null if not found
1435 Retrieves the name from the dictionary. @return name as a String or null if not found
1436 Retrieves the filter name from the dictionary. @return filter name as a String or null if not found
1437 Retrieves the URL type from the dictionary. @return URL type as a String or null if not found
1438 Retrieves the filter name from the dictionary. @return filter name as a String or null if not found
1439 Retrieves the sub-filter name from the dictionary. @return sub-filter name as a String or null if not found
1440 Retrieves the field type from the COS object. @return field type as a String or null if not found
1441 Retrieves the name as a string from the COS object. @return name as a String from the COS object
1442 Retrieves the duplex setting from preferences. @return duplex setting as a String or null if not found
1443 Retrieves a string from the dictionary using a specified key. @param key the identifier for the desired string @return the string value or null if not found
1444 Retrieves a string by key or returns default if not found. @param key the identifier for the desired string @param defaultValue the value to return if key is not found @return the found string or defaultValue if absent
1445 Retrieves the language from the root dictionary. @return language string or null if not found
1446 Retrieves the document title from the info dictionary. @return Title string or null if not found
1447 Retrieves the author name from the document's metadata. @return author string or null if not found
1448 Retrieves the subject string from the info dictionary. @return subject string or null if not found
1449 Retrieves the document's keywords from the info dictionary. @return keywords string or null if not found
1450 Retrieves the document creator string from metadata. @return Creator string or null if not found
1451 Retrieves the producer string from the PDF info dictionary. @return producer string or null if not found
1452 Retrieves the prefix string from the root dictionary. @return the prefix string or null if not found
1453 Retrieves the Unicode filename from the file system. @return Unicode filename as a string or null if not found
1454 Retrieves the file name from the file system. @return file name as a string or null if not found
1455 Retrieves the file DOS string from the filesystem. @return DOS string or null if not found
1456 Retrieves the MAC value from the file system. @return MAC string or null if not found
1457 Retrieves the Unix file string from the filesystem. @return Unix file string or null if not found
1458 Retrieves the file description from the filesystem. @return String description or null if not found
1459 Retrieves the element identifier from the COS object. @return the element identifier string or null if not found
1460 Retrieves the title from the COS object. @return Title string or null if not found
1461 Retrieves the language from the COS object. @return language string or null if not found
1462 Retrieves the alternate description from the COS object. @return String value of the alternate description or null if not found
1463 Retrieves the expanded form string from the COS object. @return expanded form string or null if not found
1464 Retrieves the actual text from the COS object. @return the actual text string or null if not found
1465 Retrieves formatted value from COS object. @return formatted string value or null if not found
1466 Retrieves the actual text from properties if available. @return the actual text string or null if properties are absent
1467 Retrieves the alternate description from properties. @return alternate description string or null if properties are absent
1468 Returns expanded form string or null if properties are absent. @return expanded form string or null
1469 Retrieves the date from the annotation. @return date string or null if not found
1470 Retrieves the name from the annotation. @return the name string or null if not found
1471 Retrieves the contents of the annotation. @return String value of the CONTENTS key or null if not found
1472 Retrieves the title from the annotation. @return title string or null if not found
1473 Retrieves the subject string from the annotation. @return subject string or null if not found
1474 Retrieves the symbol from the annotation. @return the symbol string or null if not found
1475 Retrieves the rotation value of the annotation. @return rotation as a string or null if not set
1476 Retrieves the default appearance string from the annotation. @return default appearance string or null if not found
1477 Retrieves the default style from the annotation. @return default style string or null if not found
1478 Retrieves the caption style from the annotation. @return caption style string or null if not found
1479 Retrieves the state from the annotation. @return state string or null if not found
1480 Retrieves the state model from the annotation. @return state model string or null if not found
1481 Retrieves the status string from the FDF dictionary. @return status string or null if not found
1482 Retrieves the target string from the FDF dictionary. @return target string or null if not found
1483 Retrieves the partial field name from the associated dictionary. @return String value of the field or null if not found
1484 Retrieves the name from the reference object. @return the name string or null if not found
1485 Retrieves the font family from the dictionary. @return font family string or null if not found
1486 Retrieves the character set from the dictionary. @return character set string or null if not found
1487 Retrieves the name from the dictionary. @return the name string or null if not found
1488 Retrieves group names from the COSArray; returns empty array if not found. @return Array of group names as strings
1489 Retrieves a specific string value from the action dictionary. @return the string associated with COSName.F or null if not found
1490 Retrieves the value associated with the key COSName.D. @return the string value or null if not found
1491 Retrieves the string value associated with the key COSName.O. @return the string value or null if not found
1492 Retrieves the value associated with the key COSName.P from the action dictionary. @return string value or null if not found
1493 Retrieves the URI from the action's dictionary. @return URI as a String or null if not found.
1494 Retrieves the filename from the dictionary. @return filename string or null if not found
1495 Retrieves the annotation name from the dictionary. @return the annotation name string or null if not found
1496 Retrieves the filename from parameters. @return filename string or null if not found
1497 Retrieves the directory string from parameters. @return directory string or null if not found
1498 Retrieves the execution parameter from the params dictionary. @return execution parameter string or null if not found
1499 Retrieves the contents string from the dictionary. @return The contents string or null if not found.
1500 Retrieves the modified date from the COS object. @return String representing the modified date or null if not found
1501 Retrieves the annotation name from the COSObject. @return the annotation name as a string or null if not found
1502 Retrieves the default appearance string from the COS object. @return default appearance string or null if not found
1503 Retrieves the default style string from the COS object. @return default style string or null if not found
1504 Retrieves the title from the COS object. @return Title string or null if not found
1505 Retrieves the subject string from the COS object. @return Subject string or null if not found
1506 Retrieves the state from the COS object. @return the state string or null if not found
1507 Retrieves the state model string from the COS object. @return state model string or null if not found
1508 Retrieves the normal caption from the COSObject. @return the normal caption string or null if not found
1509 Retrieves the rollover caption string from the COSObject. @return the rollover caption or null if not found
1510 Retrieves the alternate caption string from the COS object. @return alternate caption or null if not found
1511 Retrieves the date string from the dictionary. @return date string or null if not found
1512 Retrieves the operating system name from the dictionary. @return OS name as a String or null if not found
1513 Retrieves a list of subject DNs as maps from the dictionary. @return List of maps containing subject DN data or null if not found
1514 Retrieves the URL from the dictionary. @return URL string or null if not found
1515 Retrieves the URL from the dictionary. @return URL string or null if not found
1516 Retrieves the name from the dictionary. @return the name string or null if not found
1517 Retrieves the location string from the dictionary. @return location string or null if not found
1518 Retrieves the reason string from the dictionary. @return reason string or null if not found
1519 Retrieves contact information from the dictionary. @return the contact info string or null if not found
1520 Retrieves the document title from the COS object. @return title string or null if not found
1521 Retrieves a partial name from the dictionary. @return the partial name string or null if not found
1522 Retrieves the alternate field name from the dictionary. @return alternate field name string or null if not found
1523 Retrieves the mapping name from the dictionary. @return the mapping name string or null if not found
1524 Retrieves the default style string from the COS object. @return default style string or null if not found
1525 Retrieves the scale ratio from the COS object. @return scale ratio as a string or null if not found
1526 Retrieves a map of roles from the COS dictionary. @return Map of roles or an empty map if not found or error occurs
1527 Retrieves a list of option strings from the COS object. @return List of option strings or null if not found
1528 Retrieves display values for options from a COSBase object. @return List of option display values or null if not found
1529 Retrieves a value based on an inheritable attribute. @return the value as a String or "Off" if not applicable
1530 Retrieves string values for the COSName 'V'. @return List of string values or empty list if not found
1531 Retrieves default string values from the COSName dictionary. @return List of default string values or empty list if not found
1532 Initializes a PDSimpleFileSpecification with an empty COSString.
1533 Sets the file name by creating a COSString from the provided string. @param fileName name of the file to set
1534 Constructs a PDNamedDestination with a given COSString. @param dest the COSString representing the named destination
1535 Sets the named destination, encoding it if not null. @param dest the destination string or null to clear @throws IOException if encoding fails
1536 Reads and validates the generation number. @return valid generation number within threshold @throws IOException if number is negative or exceeds threshold
1537 Reads and validates an object number from input. @return valid object number (0 to OBJECT_NUMBER_THRESHOLD-1) @throws IOException if number is negative or exceeds threshold
1538 Retrieves user password based on encryption revision. @param ownerPassword owner's password bytes @param owner owner's data bytes @param encRevision encryption revision number @param length desired length of the password @return byte array of the user password
1539 Initializes TensorPatch with control points and color array. @param tcp array of Point2D control points @param color 2D array of float representing corner colors
1540 Encrypts data using RC4 algorithm. @param finalKey byte array for RC4 key (1-32 bytes) @param input InputStream to read data from @param output OutputStream to write encrypted data
1541 Retrieves the current FontProvider, setting a default if not initialized. @return FontProvider instance
1542 Generates shaded triangles from a grid of coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects created from the pairs
1543 Creates a PDICCBased color space from ICC profile data. @param iccArray ICC profile information array @param resources PDF resources for cache management @return PDICCBased color space object @throws IOException if array validation fails
1544 Initializes CoonsPatch with control points and color. @param points array of Point2D for patch corners @param color 2D array of float for corner colors
1545 Processes a TextPosition, managing overlaps and diacritics for rendering. @param text TextPosition object to process
1546 Processes and manages text positions, handling duplicates and diacritics. @param text TextPosition object to process
1547 Converts COSString to Calendar object. @param text COSString to convert @return Calendar object or null if text is null
1548 Initiates marked content with the given tag. @param tag the COSName representing the content tag @throws IOException if an I/O error occurs
1549 Begins marked content with a tag and MCID. @param tag the COSName tag for marked content @param mcid the MCID, must be non-negative @throws IOException if an I/O error occurs
1550 Sets a marked content point with the given COSName tag. @param tag the COSName marking the content point @throws IOException if an I/O error occurs
1551 Writes a COSString to an OutputStream in ASCII or hexadecimal format. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1552 Writes a byte array to an output stream in ASCII format. @param bytes the byte array to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1553 Initializes PDF graphics stream engine with operators for rendering on a given page. @param page the PDPage object representing the page to render graphics on
1554 Default constructor for PDFMarkedContentExtractor, initializes with null encoding.
1555 Constructs PDFTextStripperByArea, disabling bead separation. @throws IOException if an I/O error occurs
1556 Retrieves a COSBase object from a path string. @param objPath dot-separated path to the object @return COSBase object or null if not found
1557 Retrieves attribute value from the COS object by attribute name. @param attrName the name of the attribute @return COSBase object or null if not found
1558 Retrieves attribute value or returns default if not found. @param attrName name of the attribute to fetch @param defaultValue value to return if attribute is absent @return COSBase object corresponding to the attribute
1559 Checks if a specified object exists in the COS dictionary. @param name the key for the desired object @return true if the object is found, false otherwise
1560 Retrieves an array of strings from a COSArray by name. @param name the key for the COSArray in the dictionary @return array of string names or null if not found
1561 Retrieves name or array of names; defaults if not found. @param name key to fetch from dictionary @param defaultValue fallback value if not found @return String array or name, or defaultValue
1562 Retrieves a number or name from the COS object by key. @param name the key to lookup in the dictionary @param defaultValue the value returned if not found @return Float value or name as String, or defaultValue if neither found
1563 Retrieves a float or array of floats from a COS dictionary by name. @param name key for the desired value @param defaultValue fallback if no valid value is found @return float array, single float, or null if unspecified
1564 Retrieves PDGamma object by color name. @param name color identifier @return PDGamma object or null if not found
1565 Creates a unique COSName key based on a prefix. @param kind the type of resource dictionary @param prefix the base string for key generation @return unique COSName object
1566 Sets an integer value at a specified index in the objects list. @param index position to update in the list @param intVal integer value to store
1567 Parses a string to return a COSNumber or throws IOException if invalid. @param number input string representing a number @return COSNumber instance for valid input
1568 Appends a child element using a non-negative MCID. @param mcid the identifier for the child element
1569 Retrieves a COSBase instance representing degrees. @return COSBase object created from degrees value
1570 Parses a hex string from source until '>' and returns a COSString. @return COSString representation of the hex data @throws IOException if the hex string is malformed
1571 Default constructor initializes a PDRectangle at (0,0) with zero dimensions.
1572 Constructs a PDRectangle with specified width and height at origin. @param width rectangle's width @param height rectangle's height
1573 Creates a PDRectangle from bounding box coordinates. @return PDRectangle object representing the bounding box
1574 Calculates the rectangle difference based on given dimensions. @return PDRectangle representing the difference area
1575 Creates a padded rectangle from the original. @param rectangle the original PDRectangle @param padding amount to add around the rectangle @return new PDRectangle with applied padding
1576 Adjusts rectangle dimensions using specified differences. @param rectangle the original PDRectangle @param differences array of differences for x, y, width, and height @return modified PDRectangle or original if differences are invalid
1577 Adjusts rectangle dimensions based on differences array. @param rectangle original rectangle to modify @param differences array of four float values for adjustments @return modified PDRectangle or original if invalid differences
1578 Applies padding to a given rectangle and returns a new adjusted rectangle. @param box original rectangle to adjust @param padding amount of padding to apply @return new PDRectangle with applied padding
1579 Initializes PDFXRefStream with a COSStream from the given COSDocument. @param cosDocument the COSDocument to create the COSStream from
1580 Creates a PDObjectStream from a PDDocument. @param document the PDDocument to create the stream from @return a new PDObjectStream instance
1581 Initializes PDStream with a COSStream from the provided PDDocument. @param document the PDDocument to create the stream from
1582 Initializes PDStream with a COSStream from the given COSDocument. @param document the COSDocument to create the stream from
1583 Initializes a PDStream from a document and input stream with optional filters. @param doc the PDDocument containing the stream @param input the InputStream to read data from @param filters the filters to apply, or null for none @throws IOException if an I/O error occurs
1584 Creates a COSStream from PDDocument using raw input data. @param document the PDDocument to associate with the stream @param rawInput the input stream for raw data @return the created COSStream instance
1585 Encodes input stream to output using specified parameters. @param input Input stream to encode @param encoded Output stream for encoded data @param parameters COSDictionary with encoding parameters @param index Index for encoding context
1586 Constructs a PDDefaultAttributeObject instance.
1587 Constructs a PDUserAttributeObject and sets the owner to user properties.
1588 Constructs a PDStandardAttributeObject instance.
1589 Constructs a PDOutlineItem instance, initializing its superclass.
1590 Constructs a PDVariableText from a given PDAcroForm. @param acroForm the PDAcroForm instance
1591 Initializes PDExportFormatAttributeObject from a COSDictionary. @param dictionary the COSDictionary for initialization
1592 Retrieves the appearance stream if valid. @return PDAppearanceStream object @throws IllegalStateException if not an appearance stream
1593 Retrieves a map of appearance streams from the subdictionary. @return Map of COSName to PDAppearanceStream
1594 Creates a PDXObject from a COSBase input. @param base the COSBase object to convert @param resources the PDResources for resource management @return PDXObject or null if input is null
1595 Adds a TrueType or OpenType font from a file. @param ttfFile the font file to be added
1596 Constructs a PDShadingType6 with specified shading properties. @param shadingDictionary shading properties in a COSDictionary
1597 Constructs a PDShadingType7 with specified shading properties. @param shadingDictionary properties in a COSDictionary
1598 Retrieves PDDestination by name from the name dictionary. @param name the destination name @return PDDestination object or null if not found
1599 Retrieves a PDDestination from the COS object. @return PDDestination or null if not found
1600 Retrieves a PDDestination from the PDF dictionary. @return PDDestination object or null if not found
1601 Retrieves a PDDestination from the PDF COS object. @return PDDestination or null if not found
1602 Retrieves a PDDestination from the PDF dictionary. @return PDDestination object or null if not found
1603 Constructs a PDComboBox instance by initializing its parent field. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1604 Initializes a PDListBox instance as a subclass of PDChoice. @param acroForm the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField
1605 Constructs a COSParser with source, password, and key details. @param source input source for parsing @param password encryption password @param keyStore key store input stream @param keyAlias alias for the key
1606 Creates an output stream for writing data. @return OutputStream for writing data @throws IOException if an I/O error occurs
1607 Writes byte data to a specified appearance stream. @param data byte array to be written @param appearanceStream stream for output @throws IOException if an I/O error occurs
1608 Constructs a PDAppearanceContentStream with compression option. @param appearance the PDAppearanceStream instance @param compress true to enable compression, false otherwise @throws IOException if an I/O error occurs
1609 Sets the text matrix for the current text mode. @param matrix the Matrix to set; must be in text mode @throws IOException if an I/O error occurs
1610 Transforms the current matrix; throws if in text mode. @param matrix the Matrix to transform @throws IOException if an I/O error occurs
1611 Retrieves the bounding box as a PDRectangle. @return PDRectangle or null if BBOX not found in properties
1612 Retrieves the bounding box as a PDRectangle. @return PDRectangle from BBOX or null if not found
1613 Retrieves a PDRectangle from annotation's COSArray. @return PDRectangle or null if RECT not found
1614 Retrieves the fringe rectangle from an annotation. @return PDRectangle or null if not found
1615 Retrieves a PDRectangle from annotation's fringe data. @return PDRectangle or null if not found
1616 Retrieves a PDRectangle from the annotation's RD COSArray. @return PDRectangle or null if RD not found
1617 Retrieves a PDRectangle from the annotation's fringe data. @return PDRectangle object or null if fringe data is absent
1618 Retrieves the font bounding box as a PDRectangle. @return PDRectangle or null if FONT_BBOX is not present
1619 Retrieves the font bounding box from the dictionary. @return PDRectangle object or null if not found
1620 Retrieves the bounding box rectangle from the COS object. @return PDRectangle or null if BBOX is not found
1621 Retrieves the bounding box (BBOX) as a PDRectangle. @return PDRectangle object or null if BBOX not found
1622 Retrieves the bounding box (BBox) of a PDF page. @return PDRectangle object or null if not set
1623 Retrieves a PDRectangle from a COSArray in the dictionary. @return PDRectangle or null if not a valid rectangle array
1624 Computes the rectangle difference from the COS object. @return PDRectangle or null if not found
1625 Computes the rectangle difference from the COS object. @return PDRectangle or null if not found
1626 Retrieves the bounding box (BBox) as a PDRectangle. @return PDRectangle or null if BBox is not found
1627 Retrieves a PDRectangle from a COSArray based on a key. @return PDRectangle or null if the array is not found
1628 Sets the line dash pattern for graphics rendering. @param array dash pattern array; @param phase dash phase adjustment
1629 Retrieves line dash pattern from the dictionary. @return PDLineDashPattern or null if not valid
1630 Generates a stencil image from a PDImage and Paint. @param pdImage source image for stencil creation @param paint color used for the stencil background @return BufferedImage representing the stencil
1631 Retrieves a Matrix from the COSObject's dictionary using COSName.MATRIX. @return Matrix constructed from the COSObject or empty if invalid
1632 Retrieves a Matrix from the COS object dictionary. @return Matrix constructed from the dictionary or empty if invalid
1633 Retrieves a Matrix from the COS object dictionary. @return Matrix constructed from the dictionary or empty if invalid
1634 Retrieves an inheritable attribute from a COSDictionary or its parent. @param node the COSDictionary to search in @param key the key for the desired attribute @return COSBase attribute value or null if not found
1635 Retrieves a boolean value using a key, defaults if not found. @param key key for the boolean value @param defaultValue value to return if not found @return true if found and true, otherwise false
1636 Retrieves an integer value by key, using a default if not found. @param key primary key for the object @param defaultValue value to return if no integer is found @return integer value or defaultValue if not found
1637 Retrieves an integer using two COSName keys, defaulting to -1 if not found. @param firstKey primary key for the object @param secondKey secondary key if the first is not found @return integer value or -1 if not found
1638 Constructs a PDInlineImage with parameters, data, and resources, decoding if filters exist. @param parameters COSDictionary for image parameters @param data byte array of image data @param resources PDResources associated with the image @throws IOException if decoding fails
1639 Determines file suffix based on filter names. @return suffix as a String, defaults to "png"
1640 Retrieves COSObjects of specified types from the reference table. @param type1 first object type to filter by @param type2 second object type to filter by @return List of COSObject matching the specified types
1641 Converts a character code to its Unicode representation. @param code the character code to convert @param customGlyphList unused parameter @return Unicode string or null if not found
1642 Checks if the document is encrypted. @return true if encrypted, false otherwise
1643 Parses FDF data and returns an FDFDocument. @return FDFDocument object if successful, throws IOException on error
1644 Retrieves PDAcroForm using a default fixup for the associated document. @return PDAcroForm object or null if not found
1645 Retrieves PDColorSpace by name, optionally using a cached value. @param name resource identifier, @param wasDefault indicates default state @return PDColorSpace object
1646 Checks if a color space exists by name. @param name the key for the desired color space @return true if color space is found, false otherwise
1647 Retrieves extended graphics state by name, using cache if available. @param name identifier for the graphics state @return PDExtendedGraphicsState or null if not found
1648 Checks if the given COSName represents an image XObject. @param name the COSName to check @return true if it is an image XObject, false otherwise
1649 Retrieves color space COSName keys from a COSDictionary. @return Iterable of COSName keys for color spaces
1650 Retrieves XObject COSName keys from a COSDictionary. @return Iterable of COSName keys for XObjects
1651 Retrieves font COSName keys from a COSDictionary. @return Iterable of COSName keys for fonts
1652 Retrieves properties COSName keys from a COSDictionary. @return Iterable of COSName keys for properties
1653 Retrieves COSName keys for shading from a COSDictionary. @return Iterable of COSName keys related to shading
1654 Retrieves COSName keys of type PATTERN from a COSDictionary. @return Iterable of COSName keys or an empty set if not found
1655 Retrieves external graphics state names from a COSDictionary. @return Iterable of COSName keys for external graphics states
1656 Retrieves the standard crypt filter dictionary. @return PDCryptFilterDictionary for standard filter
1657 Retrieves the default crypt filter dictionary. @return PDCryptFilterDictionary for the default filter
1658 Retrieves PDType3CharProc by character code. @param code character code to lookup @return PDType3CharProc object or null if not found
1659 Retrieves rollover appearance entry or normal appearance if not found. @return PDAppearanceEntry object
1660 Retrieves down appearance entry or normal appearance if not found. @return PDAppearanceEntry object
1661 Retrieves the first child outline item. @return PDOutlineItem object or null if not found
1662 Retrieves the last child outline item. @return PDOutlineItem or null if not found
1663 Retrieves the PDSignature from the COSDictionary. @return PDSignature object or null if not found
1664 Retrieves value by index from numbers or child nodes. @param index the index to fetch the value for @return corresponding value or null if not found
1665 Returns the number of output parameters based on range values. @return count of output parameters as an integer
1666 Creates a PDRange using range values and a specified index. @param n starting index for the range @return PDRange object constructed with range values
1667 Clips input values to defined ranges; returns modified or original values. @param inputValues array of values to be clipped @return clipped array of values or original if no ranges
1668 Calculates the number of input parameters based on domain values. @return number of input parameters as an integer
1669 Creates a PDRange using domain values for a given index. @param n index for the PDRange @return PDRange object constructed from domain values
1670 Calculates the sample index from a vector based on size values. @param vector input array representing coordinates @return computed sample index as an integer
1671 Retrieves PDRange for the specified parameter number. @param paramNum index for range extraction @return PDRange or null if decode values are insufficient
1672 Retrieves PDRange for a given index from encoding values. @param n index for the range @return PDRange constructed from encoding values
1673 Checks if the 'Top' edge is attached. @return true if 'Top' is attached, false otherwise
1674 Checks if the bottom edge is attached. @return true if the bottom edge is attached, false otherwise
1675 Checks if the left edge is attached. @return true if left edge is attached, false otherwise
1676 Checks if the "Right" edge is attached. @return true if attached, false otherwise
1677 Constructs PDCIDFont with font dictionary and parent font. @param fontDictionary the CIDFont dictionary @param parent the parent PDType0Font object
1678 Initializes DictionaryEncoding with font encoding and processes base encoding mappings. @param fontEncoding the COSDictionary representing the font encoding
1679 Initializes DictionaryEncoding with font encoding and determines base encoding type. @param fontEncoding the COSDictionary containing encoding information @param isNonSymbolic indicates if the font is non-symbolic @param builtIn optional built-in Encoding instance
1680 Initializes ShadingContext with shading and color model; handles background if present. @param shading PDShading object for shading data @param cm ColorModel for color representation @param xform AffineTransform for transformation @param matrix Matrix for shading operations
1681 Retrieves a PDRange based on the specified parameter number. @param paramNum index to determine the range values @return PDRange object or null if conditions are not met
1682 Retrieves signed content from a PDF file. @param pdfFile InputStream of the PDF file @return byte array of signed content @throws IOException if an I/O error occurs
1683 Retrieves signed content from a PDF file. @param pdfFile byte array of the PDF document @return byte array of signed content @throws IOException if an I/O error occurs
1684 Retrieves the revision number from the dictionary. @return long revision number or -1 if not found
1685 Retrieves the minimum revision from the dictionary. @return long value of the minimum revision or -1 if not found
1686 Creates a RandomAccessRead view based on filters or raw input stream. @return RandomAccessRead object @throws IOException if stream creation fails
1687 Retrieves a float value from the COS object by name. @param name the identifier for the desired float @return float value or -1 if not found
1688 Retrieves the conversion factor from the COS object. @return float conversion factor or -1 if not found
1689 Retrieves the leader length from the annotation. @return leader length as a float value
1690 Retrieves the leader extension value from the annotation. @return float leader extension or -1 if not found
1691 Retrieves the leader offset value from the annotation. @return float leader offset or -1 if not found
1692 Retrieves the 'V' float value from the dictionary. @return float value for 'V' or -1 if not found
1693 Retrieves the CYX float value from the COS object. @return float value of CYX or -1 if not found
1694 Retrieves a float value by name or returns defaultValue if not found. @param name the identifier for the desired float @param defaultValue the value to return if name is not found @return the float value or defaultValue if not found
1695 Retrieves the intensity value from the COSObject. @return float intensity value or 0 if not found
1696 Computes font height based on bounding box and font descriptor. @param font PDFont object to derive height from @return calculated font height in float
1697 Creates a default position vector based on CID. @param cid identifier for the width @return Vector with calculated x and default y coordinates
1698 Retrieves PDPropertyList by name, using cache if available. @param name resource identifier @return PDPropertyList or null if not found
1699 Retrieves optional content as a PDPropertyList. @return PDPropertyList or null if optional content is not present
1700 Retrieves optional content as a PDPropertyList. @return PDPropertyList or null if optional content is absent
1701 Retrieves OCGs as a list of PDPropertyList from the dictionary. @return List of PDPropertyList or empty if none found
1702 Retrieves the optional content as a PDPropertyList. @return PDPropertyList or null if optional content is absent
1703 Validates xref offsets, replacing with brute force search results if invalid. @throws IOException if parser initialization or I/O error occurs
1704 Saves the document to the specified file. @param fileName the file to save the document into @throws IOException if an I/O error occurs during saving
1705 Removes an object from the list if not filtered. @param o object to remove @return true if removed, false if not found
1706 Removes an element at the specified index from the list. @param index the index of the element to remove @return the removed element
1707 Removes an object from the collection, searching if necessary. @param o the object to be removed @return true if the object was removed, false otherwise
1708 Removes a user property if not null and notifies change. @param userProperty the user property to be removed
1709 Removes a subject from the COSArray in the dictionary. @param subject byte array representing the subject to remove
1710 Removes the specified key usage from the dictionary if present. @param keyUsageExtension the key usage to remove
1711 Removes the issuer from the dictionary if present. @param issuer byte array representing the issuer
1712 Removes a COSString from the OID COSArray in the dictionary. @param oid byte array representing the OID to remove
1713 Clears all elements from map and actuals collections.
1714 Removes a value by key from the map and actuals. @param key the identifier for the value to be removed @return the removed value or null if not found
1715 Collects and updates COSDictionary entries based on their state and relationships. @param dictionary the COSDictionary to process @return true if child entries require parent update, false otherwise
1716 Collects and processes a COSObject, checking for updates and exclusions. @param object the COSObject to process @return false if already contained or no updates needed
1717 Sets the origin document state without dereferencing. @param originDocumentState new state to set
1718 Retrieves the upper limit value from a COSArray. @return string representing the upper limit or null if not found
1719 Retrieves the lower limit as a string from the COSArray of limits. @return the lower limit string or null if not found
1720 Retrieves the name using the provided key. @param name identifier for the desired COSBase object @return name as a String or null if not found
1721 Retrieves RenderingIntent from a dictionary entry. @return RenderingIntent or null if not found
1722 Retrieves the name associated with the key "N". @return name as a String or null if not found
1723 Retrieves name as string using a key or returns default if not found. @param key identifier for the desired name @param defaultValue value to return if name is null @return name as a String or defaultValue if not found
1724 Retrieves guideline style from the dictionary. @return style as a String or default GUIDELINE_STYLE_SOLID if not found
1725 Retrieves the icon name for the annotation. @return icon name as a String, defaults to PDAnnotationText.NAME_NOTE if not found
1726 Retrieves the attachment name from the COS object. @return attachment name as a String or default if not found
1727 Retrieves the line ending style for the annotation. @return line ending style as a String, defaults to LE_NONE if not found
1728 Retrieves the highlight mode as a string. @return highlight mode string or default if not found
1729 Retrieves the reply type as a string. @return reply type or default RT_REPLY if not found
1730 Retrieves the name from the COS object. @return name as a String or default NAME_DRAFT if not found
1731 Retrieves the name from the COS object. @return name as a String or default NAME_NOTE if not found
1732 Retrieves the highlighting mode as a string. @return Highlighting mode or default "I" if not found
1733 Retrieves the style as a string. @return style name or default 'STYLE_SOLID' if not found
1734 Retrieves the type as a string, defaulting to "ExData" if not found. @return type as a String
1735 Retrieves the style of the transition. @return style as a String, or default if not found
1736 Retrieves the dimension name from the COS object. @return Dimension name as a String or default if not found
1737 Retrieves motion name from COSObject. @return Motion name as a String or default if not found
1738 Retrieves non-fullscreen page mode setting. @return String representation of the page mode setting
1739 Retrieves the reading direction from preferences. @return reading direction as a String, defaulting to L2R if not found
1740 Retrieves the view area as a string. @return view area name or default CropBox string if not found
1741 Retrieves the view clip name from preferences. @return view clip name as a String or default CropBox if not found
1742 Retrieves print area name from preferences. @return Print area as a String or default CropBox value
1743 Retrieves the print clip name from preferences. @return print clip name as a String, or default CropBox if not found
1744 Retrieves the print scaling setting from preferences. @return Print scaling as a String or default value if not found
1745 Checks and returns valid XRef offset or -1 if invalid. @param startXRefOffset initial offset to validate @return valid offset or -1 if not found
1746 Checks if the collection has only the owner entry. @return true if empty, false otherwise
1747 Retrieves the parent PDStructureNode from the COSDictionary. @return PDStructureNode or null if no parent exists
1748 Creates an object from COSBase or returns its integer value. @param kid COSBase to create an object from @return created object or integer value, or null if invalid
1749 Constructs PDEncryption with a COSDictionary and initializes security handler. @param dictionary configuration data for encryption settings
1750 Retrieves the security handler; throws IOException if not initialized. @return SecurityHandler<ProtectionPolicy> instance
1751 Retrieves a list of FDF annotations from the document. @return List of FDFAnnotation or null if none exist
1752 Checks if character set matches based on CID and font info. @param cidSystemInfo character ID system information @param info font information @return true if match, false otherwise
1753 Checks if attributes are non-null and if it's an NChannel subtype. @return true if attributes is NChannel, false otherwise
1754 Retrieves open action or destination from the document root. @return PDDestinationOrAction or null if not found
1755 Retrieves a PDAction from the field's COSDictionary using COSName.A. @return PDAction object or null if action is invalid
1756 Retrieves a map of JavaScript actions from the document. @return Map of action names to PDActionJavaScript objects or null if not found
1757 Retrieves a PDAction based on the COSDictionary for key COSName.F. @return PDAction object or null if the action is invalid
1758 Retrieves a PDAction based on the 'E' key from actions. @return PDAction object or null if not found
1759 Retrieves a PDAction from the X COSDictionary or null if not found. @return PDAction object or null if X dictionary is absent
1760 Retrieves a PDAction from the COSDictionary by key D. @return PDAction object or null if not found
1761 Retrieves a PDAction from the actions dictionary by key 'U'. @return PDAction object or null if not found
1762 Retrieves a PDAction from the actions based on the FO key. @return PDAction object or null if FO not found or invalid
1763 Retrieves a PDAction from the BL key in actions. @return PDAction object or null if not found or invalid
1764 Retrieves a PDAction from the actions dictionary by key. @return PDAction object or null if not found
1765 Retrieves a PDAction from the actions' COSDictionary for the PC key. @return PDAction object or null if not found
1766 Retrieves a PDAction from the PV key in actions. @return PDAction object or null if not found
1767 Retrieves a PDAction from the actions dictionary by key 'PI'. @return PDAction object or null if not found
1768 Retrieves a PDAction from the WC key in actions' COSDictionary. @return PDAction object or null if not found
1769 Retrieves a PDAction from the WS COSDictionary, or null if not found. @return PDAction object or null if WS action is invalid
1770 Retrieves a PDAction from the DS entry in actions. @return PDAction object or null if DS entry is absent or invalid
1771 Retrieves a PDAction based on the WP key from actions. @return PDAction object or null if not found
1772 Retrieves a PDAction from the dictionary by key. @return PDAction object or null if not found
1773 Retrieves a PDAction from the actions dictionary by key 'K'. @return PDAction object or null if not found
1774 Retrieves PDAction from actions using COSName.F. @return PDAction object or null if not found
1775 Retrieves a PDAction from the actions dictionary by key. @return PDAction object or null if not found
1776 Retrieves a PDAction from the COSDictionary for key 'C'. @return PDAction object or null if dictionary or action is invalid
1777 Retrieves a PDAction from the COSDictionary by key. @return PDAction object or null if not found or invalid
1778 Retrieves a PDAction based on the 'C' key from actions. @return PDAction object or null if not found
1779 Retrieves PDAction from the COSDictionary of the object. @return PDAction object or null if no action is found
1780 Retrieves a PDAction from the COSDictionary associated with the object. @return PDAction object or null if not found
1781 Retrieves a PDAction from the COSDictionary for the specified COSName.A key. @return PDAction object or null if action is invalid
1782 Retrieves the value of a property as a string. @param propertyKey the key for the desired property @return the property value as a string or null if not found
1783 Retrieves custom metadata value by field name. @param fieldName the identifier for the desired metadata @return the metadata value or null if not found
1784 Retrieves a string from the COS object by name. @param name the identifier for the desired string @return the string value or null if not found
1785 Retrieves the 'Base' string from the COSObject. @return the 'Base' string or null if not found
1786 Retrieves the version string from the dictionary. @return version string or null if not found
1787 Retrieves the unit string from the COSDictionary. @return unit string or null if not found
1788 Retrieves a string by key, returning default if not found. @param key the identifier for the desired string @param defaultValue the value to return if key is not found @return the found string or defaultValue if absent
1789 Retrieves an embedded string by key or returns default if not found. @param embedded the identifier for the embedded dictionary @param key the identifier for the desired string @param defaultValue the value to return if key is not found @return the found string or defaultValue if absent
1790 Retrieves the operation string from parameters. @return operation string or default OPERATION_OPEN if not found
1791 Retrieves the default appearance string from the dictionary. @return default appearance string or empty if not found
1792 Retrieves the filename using various encoding methods. @return filename as a string or null if not found
1793 Checks if the specified group name exists in the group names array. @param groupName the name of the group to search for @return true if found, false otherwise
1794 Constructs fully qualified name from parent and partial name. @return fully qualified name string
1795 Retrieves a list of option strings for export. @return List of option strings or null if not found
1796 Encrypts or decrypts data based on the algorithm and key length. @param objectNumber identifier for the object @param genNumber generation number for the object @param data input stream for data processing @param output output stream for processed data @param decrypt true for decryption, false for encryption @throws IOException if an I/O error occurs
1797 Computes an encrypted key based on encryption revision. @param password user password, @param o owner key, @param u user key, @param oe encrypted owner key, @param ue encrypted user key, @param permissions access permissions, @param id identifier, @param encRevision encryption revision, @param keyLengthInBytes length of the key, @param encryptMetadata flag for metadata encryption, @param isOwnerPassword indicates owner access @return byte array of the encrypted key
1798 Validates user password based on encryption revision. @param password user password bytes @param user expected user password bytes @param owner owner data for validation @param permissions access permissions @param id unique identifier @param encRevision encryption version @param keyLengthInBytes length of the encryption key @param encryptMetadata flag to encrypt metadata @return true if password is valid, false otherwise
1799 Finds a font by format and PostScript name, considering various name variations. @param format desired font format @param postScriptName name of the font @return FontBoxFont object or null if not found
1800 Converts COSString to Calendar object or null if input is null. @param text COSString to convert @return Calendar object or null if text is null
1801 Writes a COSString to an OutputStream followed by a space. @param output the OutputStream to write to @param cosString the COSString to write @throws IOException if an I/O error occurs
1802 Displays text after validating state and encoding it for the current font. @param text the string to display @throws IOException if an I/O error occurs during writing
1803 Initializes PageDrawer with specified parameters. @param parameters configuration for the PageDrawer
1804 Retrieves PDColor for the constant color identifier. @return PDColor object or null if not found
1805 Retrieves border color from COS using predefined identifier. @return PDColor object or null if not found
1806 Retrieves the background color. @return PDColor object for background or null if not found
1807 Sets a high value at index 2 in the array. @param high integer value to store
1808 Updates the current page number in the array. @param pageNumber new page number to set
1809 Parses a COS string from input, supporting hex and octal sequences. @return COSString representation of the parsed string @throws IOException for invalid input format
1810 Retrieves filtered byte contents from a PDF input stream. @param pdfFile InputStream of the PDF file @return byte array of filtered contents @throws IOException if an I/O error occurs
1811 Retrieves byte content from a PDF file. @param pdfFile byte array of the PDF file @return byte array of parsed content @throws IOException if an I/O error occurs
1812 Constructs an immutable rectangle with specified width and height. @param width rectangle's width @param height rectangle's height
1813 Retrieves the bounding box as a PDRectangle. @return PDRectangle representing the bounding box
1814 Initializes PDMetadata with document and sets type and subtype properties. @param document the PDDocument to create metadata from
1815 Initializes PDEmbeddedFile with a PDDocument and sets its type to EMBEDDED_FILE. @param document the PDDocument to create the embedded file from
1816 Initializes PDXObject with a PDStream from document and sets type/subtype names. @param document the PDDocument to create the stream from @param subtype the COSName representing the subtype
1817 Constructs a PDImageXObject from a PDDocument. @param document the PDF document containing the image
1818 Constructs a PDStream from a document and input stream. @param doc the PDDocument containing the stream @param input the InputStream to read data from @throws IOException if an I/O error occurs
1819 Constructs a PDStream from a document and input stream with a specified filter. @param doc the PDDocument containing the stream @param input the InputStream to read data from @param filter the filter to apply, or null for none @throws IOException if an I/O error occurs
1820 Constructs a PDStream using a document, input stream, and optional filters. @param doc the PDDocument containing the stream @param input the InputStream to read data from @param filters the COSArray of filters to apply, or null for none
1821 Constructs a PDImageXObject from a document and encoded stream. @param document the PDDocument containing the image @param encodedStream input stream for image data @param cosFilter the filter applied to the image @param width image width @param height image height @param bitsPerComponent bits per color component @param initColorSpace initial color space of the image
1822 Constructs a PDLayoutAttributeObject and sets its owner to OWNER_LAYOUT.
1823 Initializes PDListAttributeObject and sets its owner to OWNER_LIST.
1824 Initializes a PDPrintFieldAttributeObject with OWNER_PRINT_FIELD as its owner.
1825 Constructs a PDTableAttributeObject and sets its owner to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the COSDictionary's owner attribute. @param dictionary COSDictionary containing attribute data @return corresponding PDAttributeObject instance
1827 Retrieves the normal appearance stream from the appearance dictionary. @return PDAppearanceStream or null if not found
1828 Retrieves the name of the first non-'Off' appearance entry. @return appearance entry name or an empty string if not found
1829 Retrieves the PDTransparencyGroup, creating it if not already cached. @return PDTransparencyGroup instance or null if not found
1830 Finds the page destination for a named destination. @param namedDest the named destination to lookup @return PDPageDestination or null if not found
1831 Constructs a COSParser with a source for parsing. @param source input source for parsing @throws IOException if an I/O error occurs
1832 Initializes PDFParser with decryption parameters. @param source data source for decryption @param decryptionPassword password for decrypting data @param keyStore keystore for managing cryptographic keys @param alias identifier for the key in the keystore
1833 Initializes PDAppearanceContentStream with a PDAppearanceStream.\n@param appearance the PDAppearanceStream instance\n@throws IOException if an I/O error occurs***
1834 Initializes PDFormContentStream with a form's content stream and resources. @param form the PDFormXObject to extract content and resources from @throws IOException if an I/O error occurs during stream creation
1835 Initializes PDPageContentStream with document and appearance stream. @param doc the PDDocument instance @param appearance the PDAppearanceStream for resources @throws IOException if an I/O error occurs
1836 Initializes PDPatternContentStream with a tiling pattern. @param pattern the PDTilingPattern instance @throws IOException if an I/O error occurs
1837 Draws an arrow on a PDF content stream. @param cs content stream for drawing @param x starting x position @param y starting y position @param len length of the arrow
1838 Draws a shape with specified line width, stroke, and fill options. @param lineWidth width of the stroke line @param hasStroke indicates if the shape should be stroked @param hasFill indicates if the shape should be filled
1839 Draws a diamond shape on the given content stream. @param cs content stream for PDF appearance @param x X-coordinate of the diamond center @param y Y-coordinate of the diamond center @param r radius from center to vertex
1840 Draws a circle using specified coordinates and radius. @param cs content stream for PDF drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1841 Draws a circle using a content stream. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1842 Draws a paperclip shape on the provided content stream. @param contentStream the stream to draw on @throws IOException if an I/O error occurs
1843 Sets line width if not default (1). @param lineWidth desired line width value @throws IOException if an I/O error occurs
1844 Generates a BufferedImage from a tiling pattern and transforms it. @param drawer used for rendering the pattern @param pattern the tiling pattern to render @param colorSpace color space for the pattern @param color color used in the pattern @param xform transformation applied to the image @param anchorRect dimensions for the image @return BufferedImage created from the pattern
1845 Computes the anchor rectangle for a tiling pattern. @param pattern the tiling pattern to analyze @return Rectangle2D representing the scaled anchor rectangle
1846 Retrieves a stencil image with specified background color. @param paint background color for the stencil @return BufferedImage of the stencil image
1847 Retrieves a WritableRaster from a PDImage. @param pdImage the image to read from @return WritableRaster containing pixel data @throws IOException if the image is empty or dimensions are invalid
1848 Converts a PDImage to a BufferedImage with optional subsampling and color key masking. @param pdImage the source image to convert @param region the area of the image to process @param subsampling the factor to reduce the image size @param colorKey the color key for masking, can be null @return BufferedImage representation of the processed image
1849 Retrieves page resources, initializing them if necessary. @return PDResources object or null if resources are not present.
1850 Retrieves the media box of a page, defaulting to U.S. Letter if not found. @return PDRectangle representing the media box dimensions
1851 Retrieves the rotation angle of a page in degrees. @return rotation angle (0, 90, 180, 270) or 0 if not set
1852 Retrieves a boolean value by key, defaults if not found. @param key key for the boolean value @param defaultValue value to return if not found @return true if found and true, otherwise false
1853 Checks if the file system is volatile. @return true if volatile, otherwise false
1854 Checks if the object is hidden. @return true if hidden, otherwise false
1855 Checks if metadata encryption is enabled. @return true if encryption is enabled, false otherwise
1856 Retrieves the caption status of the annotation. @return true if caption exists, otherwise false
1857 Determines if scaling to fit the annotation is required. @return true if scaling is needed, otherwise false
1858 Determines if renaming is required based on template settings. @return true if renaming is enabled, otherwise false
1859 Checks if the object is isolated. @return true if isolated, otherwise false
1860 Checks if the knockout flag is set in the COS object. @return true if knockout is enabled, otherwise false
1861 Checks if anti-aliasing is enabled. @return true if anti-aliasing is set, otherwise false
1862 Retrieves the stroking overprint control setting. @return true if stroking overprint is enabled, otherwise false
1863 Retrieves automatic stroke adjustment setting. @return true if adjustment is enabled, false otherwise
1864 Retrieves the alpha source flag from the dictionary. @return true if the flag is set, otherwise false
1865 Retrieves the text knockout flag from the dictionary. @return true if the flag is set, otherwise false
1866 Retrieves the value of the H action flag. @return true if H is found and true, otherwise false
1867 Checks if the action is synchronous. @return true if synchronous, otherwise false
1868 Retrieves repeat action status. @return true if repeat is enabled, otherwise false
1869 Retrieves the mix setting as a boolean value. @return true if mix is enabled, otherwise false
1870 Checks if the object has a caption. @return true if caption exists, otherwise false
1871 Checks if the PDF document is open. @return true if open, otherwise false
1872 Checks if the pre-release flag is set. @return true if pre-release is enabled, otherwise false
1873 Retrieves the NON_EFONT_NO_WARN boolean value from the dictionary. @return true if found and true, otherwise false
1874 Checks if trusted mode is enabled. @return true if trusted mode is set, otherwise false
1875 Checks if appearances are needed from the dictionary. @return true if needed, otherwise false
1876 Checks if the fly area is opaque. @return true if opaque, otherwise false
1877 Determines if the toolbar should be hidden. @return true if toolbar is hidden, otherwise false
1878 Determines if the menubar should be hidden based on user preferences. @return true if menubar is hidden, false otherwise
1879 Determines if the window UI should be hidden. @return true if UI is hidden, otherwise false
1880 Checks if the window should fit based on user preferences. @return true if fit window is enabled, otherwise false
1881 Centers the window based on user preferences. @return true if the window should be centered, false otherwise
1882 Checks if the document title should be displayed. @return true if display is enabled, otherwise false
1883 Retrieves an integer from an embedded dictionary or returns default if not found. @param embeddedDictionary the dictionary containing the integer @param key the identifier for the desired integer @param defaultValue value to return if not found @return the found integer or defaultValue if absent
1884 Retrieves an integer value by key. @param key the key to find the integer value @return integer value or -1 if not found
1885 Retrieves an integer value by key, defaulting to -1 if not found. @param key primary key for the object @return integer value or -1 if not found
1886 Retrieves an integer by key, using a default if not found. @param key the key to retrieve the integer value @param defaultValue value to return if not found @return integer value or defaultValue if not found
1887 Checks if a specific bit flag is set in the integer value of a field. @param field the COSName field to retrieve the integer from @param bitFlag the bit flag to check against the retrieved value @return true if the bit flag is set, false otherwise
1888 Retrieves the count value from the root object. @return integer count or 0 if not found
1889 Retrieves the start value from the root, defaulting to 1 if not found. @return start integer value
1890 Retrieves the order value from the COS object, defaulting to 1 if not found. @return integer order value
1891 Retrieves the revision number from the COS object. @return integer revision number, defaults to 0 if not found
1892 Retrieves the length from the crypt filter dictionary. @return integer length or 40 if not found
1893 Retrieves the version number from the dictionary. @return integer version number or 0 if not found
1894 Retrieves the length from the dictionary, defaulting to 40 if not found. @return integer length value
1895 Retrieves the document revision number. @return integer revision number or default if not found
1896 Retrieves permission integer from the dictionary. @return permission value or 0 if not found
1897 Retrieves justification string based on annotation's integer value. @return concatenated justification string
1898 Retrieves the flags value, initializing if necessary. @return integer flags value, or default if not set
1899 Creates a PDAbstractPattern from a COSDictionary. @param dictionary pattern definition data @param resourceCache cached resources for pattern creation @return PDAbstractPattern instance
1900 Retrieves the paint type from the COS object. @return integer paint type or 0 if not found
1901 Retrieves the tiling type from the COS object. @return integer representing the tiling type, defaulting to 0 if not found
1902 Creates a PDShading object based on shading type from the given dictionary. @param shadingDictionary shading parameters @return PDShading instance or throws IOException for unknown types
1903 Retrieves the number of bits per flag from the COS object. @return integer value or -1 if not found
1904 Retrieves the number of vertices per row from the COS object. @return integer value of vertices per row or -1 if not found
1905 Retrieves bits per color component, initializing if not set. @return int value of bits per component
1906 Retrieves bits per coordinate, calculating if not already set. @return bits per coordinate as an integer
1907 Retrieves action flags. @return integer flags value, defaults to 0 if not found
1908 Retrieves action flags as an integer. @return integer flags value, defaulting to 0 if not found
1909 Retrieves the page number from the dictionary. @return page number or -1 if not found
1910 Retrieves the annotation index from the dictionary. @return index of the annotation or -1 if not found
1911 Retrieves annotation flags as an integer. @return integer flags from the COSObject, defaulting to 0 if not found
1912 Retrieves the value of key Q from the COS object. @return integer value of Q or 0 if not found
1913 Retrieves the rotation value of the object. @return rotation as an integer, defaulting to 0 if not found
1914 Checks if a timestamp is required based on a dictionary value. @return true if timestamp is needed, false otherwise
1915 Retrieves the open count from the COS object. @return integer representing the open count, defaulting to 0 if not found
1916 Retrieves the value of key Q from the dictionary, defaulting to 0 if not found. @return integer value associated with key Q or 0 if not present
1917 Retrieves the top index value from the COS object. @return integer value of the top index or 0 if not found
1918 Retrieves COSObjects of a specified type. @param type object type to filter by @return List of COSObject matching the specified type
1919 Removes page resources from the cache if it exists. *
1920 Retrieves PDColorSpace by name. @param name resource identifier @return PDColorSpace object
1921 Retrieves an embedded file from the EF dictionary. @return PDEmbeddedFile object or null if not found
1922 Retrieves embedded file as PDEmbeddedFile from EF dictionary by key DOS. @return PDEmbeddedFile or null if not found
1923 Retrieves embedded file from MAC dictionary. @return PDEmbeddedFile or null if not a COSStream
1924 Retrieves the embedded file for UNIX format. @return PDEmbeddedFile or null if not found
1925 Retrieves an embedded file as PDEmbeddedFile if available. @return PDEmbeddedFile or null if not found
1926 Initializes AxialShadingContext with shading parameters and transformations. @param shading shading type data @param colorModel color model for rendering @param xform transformation for shading @param matrix transformation matrix @param deviceBounds bounds of the device
1927 Initializes RadialShadingContext with shading parameters and computes necessary values. @param shading shading type with coordinates and domain @param colorModel color model for rendering @param xform transformation for shading @param matrix matrix for shading context @param deviceBounds bounds of the device for rendering
1928 Constructs TriangleBasedShadingContext with shading and color model. @param shading PDShading for shading data @param cm ColorModel for color representation @param xform AffineTransform for transformation @param matrix Matrix for shading operations
1929 Initializes Type1ShadingContext with shading, color model, and transformation matrices. *
1930 Initializes PDFObjectStreamParser with stream and document, validating mandatory entries. @param stream COSStream to parse @param document COSDocument associated with the stream @throws IOException if mandatory entries are missing or invalid
1931 Constructs a PDCIDFontType0 from a font dictionary and parent font. @param fontDictionary the font's COS dictionary @param parent the parent PDType0Font @throws IOException if reading the font fails
1932 Constructs a PDCIDFontType2 from a font dictionary and TrueTypeFont; handles embedding and damage. @param fontDictionary font properties and data @param parent parent font object @param trueTypeFont optional TrueTypeFont instance @throws IOException if font data cannot be read
1933 Reads a CMap from a COSBase object; throws IOException for invalid types. @param base COSBase object (COSName or COSStream) @return CMap object or null if not found
1934 Writes the body of the PDF document, handling trailer items. @param doc the COSDocument to process @throws IOException if an I/O error occurs during writing
1935 Saves the document to the specified file. @param fileName the file to save the document into @throws IOException if an I/O error occurs during saving
1936 Collects a COSBase object if not already contained. @param base the COSBase object to collect @return false if already contained or unsupported type
1937 Sets the trailer for the document and updates its state. @param newTrailer the new COSDictionary trailer to set
1938 Updates the current state and sets origin if child is COSUpdateInfo. @param child the COSBase object to update
1939 Retrieves a value by name from names or child nodes. @param name the name to search for @return the associated value or null if not found
1940 Retrieves name as a string or returns default if not found. @param name identifier for the desired name @param defaultValue value to return if name is null @return name as a String or defaultValue if not found
1941 Retrieves the style as a string, defaulting to STYLE_SOLID if not found. @return style name as String
1942 Retrieves the root of the structure tree from the parent node. @return PDStructureTreeRoot or null if not found
1943 Retrieves a list of child objects from the COS structure. @return List of child objects, may be empty if none found
1944 Retrieves PDEncryption object, initializing it if necessary. @return PDEncryption instance or null if not encrypted
1945 Prepares the decryption process using the document's encryption details. @throws IOException if decryption setup fails
1946 Reads font encoding and checks for predefined CMap or CID mappings. @throws IOException if CMap is missing or invalid
1947 Repairs length1 by finding 'exec' in bytes array; returns adjusted length. @param bytes byte array to search within @param length1 initial length to validate @return adjusted length after processing
1948 Validates and repairs length2 based on byte array size. @param bytes byte array to check against @param length1 starting index @param length2 length to validate @return corrected length2 value
1949 Retrieves fractional display string from COSObject. @return fractional display string or default value if not found
1950 Retrieves the thousands separator string, defaulting to ',' if not found. @return thousands separator string
1951 Retrieves the decimal separator string, defaulting to '.' if not found. @return the decimal separator string
1952 Retrieves the label prefix string from the COS object. @return the label prefix or a default space if not found
1953 Retrieves the label suffix string from the COSObject. @return the label suffix or a space if not found
1954 Retrieves label position value from COSObject. @return corresponding string value or null if not found
1955 Retrieves an embedded string by key, returning null if not found. @param embedded the identifier for the embedded dictionary @param key the identifier for the desired string @return found string or null if absent
1956 Retrieves a priority queue of FontMatch objects based on font descriptor and CID info. @param fontDescriptor descriptor for the font to match against @param cidSystemInfo character ID system information for filtering matches @return PriorityQueue of FontMatch objects
1957 Validates owner password based on encryption revision. @param ownerPassword owner's password bytes @param user user byte array @param owner owner byte array @param permissions permissions for the owner @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes key length in bytes @param encryptMetadata flag for metadata encryption @return true if password is valid, false otherwise
1958 Parses text into an InstructionSequence. @param text input text to be parsed @return InstructionSequence constructed from the text
1959 Decrypts a COSStream if not using identity filter or metadata. @param stream the COSStream to decrypt @param objNum object number for decryption @param genNum generation number for decryption @throws IOException if an I/O error occurs during decryption
1960 Encrypts data from a stream if it contains data. @param stream the stream to encrypt @param objNum object identifier @param genNum generation number @throws IOException if an I/O error occurs
1961 Decrypts a COSString if not using identity filter. @param string the COSString to decrypt @param objNum object identifier for decryption @param genNum generation number for decryption @return decrypted COSString or original if error occurs
1962 Encrypts a COSString and returns the encrypted COSString. @param string the COSString to encrypt @param objNum object identifier @param genNum generation number @return encrypted COSString @throws IOException if an I/O error occurs
1963 Validates user password with specified encryption settings. @param password user password as a string @return true if valid, false otherwise
1964 Retrieves a FontBoxFont by PostScript name across multiple formats. @param postScriptName the name of the font to find @return FontBoxFont object or null if not found
1965 Writes the content of a page, processing text and managing layout. @throws IOException if an I/O error occurs during writing
1966 Retrieves a Calendar object from a dictionary using a key. @param key identifier for the desired date object @return Calendar object or null if not found or not a COSString
1967 Writes a COSBase object to an output stream in PDF format. @param base the COSBase object to write @throws IOException if an I/O error occurs
1968 Writes a COSBase object to the output stream. @param output the OutputStream to write to @param object the COSBase object to serialize @param topLevel indicates if the object is top-level @throws IOException if an I/O error occurs
1969 Displays text and operands from an array, ensuring valid types. @param textWithPositioningArray array of Strings and Floats @throws IOException if an I/O error occurs
1970 Displays text and writes an operator for showing it. @param text the string to display @throws IOException if an I/O error occurs
1971 Creates a PageDrawer instance with specified parameters. @param parameters configuration for the PageDrawer @return PageDrawer object
1972 Initializes PDFormXObject with a PDDocument and sets cache to null. @param document the PDDocument to initialize from
1973 Constructs PDMetadata from document and input stream. @param doc the PDDocument containing the metadata @param str the InputStream to read metadata from @throws IOException if an I/O error occurs
1974 Constructs an embedded file from a document and input stream. @param doc the PDDocument containing the embedded file @param str the InputStream for the file data @throws IOException if an I/O error occurs
1975 Constructs an embedded file from a document and input stream. @param doc the PDDocument containing the file @param input the InputStream for file data @param filter the filter to apply, or null for none @throws IOException if an I/O error occurs
1976 Prepares a PDImageXObject from byte array data. @param document the PDDocument containing the image @param byteArray raw image data @param width image width @param height image height @param bitsPerComponent bits per color component @param initColorSpace initial color space @return PDImageXObject created from the input data
1977 Constructs a PDExportFormatAttributeObject with the specified owner. @param owner the owner identifier for the object
1978 Retrieves PDAttributeObjects from a COS structure. @return Revisions of PDAttributeObject instances
1979 Retrieves the normal appearance stream for a given annotation. @param annotation the PDAnnotation object to fetch the stream from @return PDAppearanceStream or null if not found
1980 Adds fonts from a widget's appearance stream to AcroForm resources. @param acroFormResources resources for AcroForm fonts @param annotation the annotation containing the widget's appearance
1981 Retrieves unique 'On' values from widgets and export values. @return Set of unique 'On' values
1982 Checks if the current value matches the expected 'on' value. @return true if values are equal, false otherwise
1983 Checks and sets value based on the first non-'Off' appearance entry. @throws IOException if an I/O error occurs
1984 Initializes FontProvider, scans for fonts, and loads or builds font cache. @param cache FontCache instance for storing font info
1985 Constructs an FDFParser with a source for parsing. @param source input source for parsing @throws IOException if an I/O error occurs
1986 Initializes PDFParser with a data source and decryption password. @param source data source for decryption @param decryptionPassword password for decrypting data
1987 Draws a styled shape on a PDF content stream. @param style shape style identifier @param cs content stream for drawing @param x starting x position @param y starting y position @param width shape width @param hasStroke indicates if the shape should be stroked @param hasBackground indicates if the shape should have a background @param ending indicates if the shape is at the end
1988 Initializes TilingPaint with drawing parameters and pattern. @param drawer used for rendering the pattern @param pattern tiling pattern to apply @param colorSpace color space for the pattern @param color color used in the pattern @param xform transformation applied to the image @throws IOException if an error occurs during image generation
1989 Retrieves a BufferedImage with optional subsampling from the specified region. @param region area of the image to process @param subsampling factor to reduce the image size @return BufferedImage representation of the processed image
1990 Converts a PDImage to BufferedImage using an optional color key. @param pdImage the source image to convert @param colorKey the color key for masking, can be null @return BufferedImage representation of the image
1991 Updates resources based on content stream, returning previous resources. @param contentStream input stream for resource lookup @return previous PDResources object
1992 Calculates an AffineTransform for centering an overlay on a page. @param page the PDPage to center the overlay on @param overlayMediaBox the dimensions of the overlay @return AffineTransform for the calculated translation
1993 Returns the media box of a page adjusted for rotation. @param page the PDPage to retrieve the media box from @return adjusted PDRectangle or original if no rotation
1994 Checks if the item is marked. @return true if marked, otherwise false
1995 Checks if user properties are enabled. @return true if enabled, false otherwise
1996 Checks if the entity is a suspect. @return true if suspect is found, otherwise false
1997 Determines if mouse position tracking is enabled. @return true if tracking is enabled, otherwise false
1998 Checks if the object is open. @return true if open, otherwise false
1999 Checks if the current object is a field dictionary. @return true if 'FD' key is true, otherwise false
2000 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, otherwise false
2001 Retrieves an integer from an embedded dictionary. @param embeddedDictionary the dictionary containing the integer @param key the identifier for the desired integer @return the found integer or -1 if absent
2002 Retrieves the denominator value from the COSObject. @return integer denominator or -1 if not found
2003 Wraps an OutputStream with PredictorOutputStream based on decodeParams settings. @param out the original OutputStream @param decodeParams parameters for predictor configuration @return wrapped OutputStream or original if predictor <= 1
2004 Retrieves the structure parents integer value from the page. @return integer value for structure parents or -1 if not found
2005 Retrieves the bits per sample from the COS object. @return integer value representing bits per sample
2006 Retrieves the MCID value from the COS object. @return MCID integer value or -1 if not found
2007 Retrieves the next key in the parent tree. @return integer value of the next key or -1 if not found
2008 Retrieves the MCID value or -1 if properties are null. @return MCID integer value or -1 if not found
2009 Retrieves the line cap style from the dictionary. @return integer line cap style or -1 if not found
2010 Retrieves the line join style from the dictionary. @return integer representing the line join style
2011 Retrieves the structure parent identifier from the COS object. @return structure parent integer value
2012 Retrieves an integer value for the key COSName.P from the dictionary. @return integer value or -1 if not found
2013 Retrieves the maximum length value from the COS object. @return maximum length as an integer, defaulting to -1 if not found
2014 Retrieves an integer by name, using a default if not found. @param name key to retrieve the integer value @param defaultValue value to return if not found @return integer value or defaultValue if not found
2015 Checks if the annotation is marked as invisible. @return true if invisible, false otherwise
2016 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
2017 Checks if the annotation is marked as printed. @return true if printed flag is set, false otherwise
2018 Checks if zooming is disabled for the annotation. @return true if zoom is disabled, false otherwise
2019 Checks if the annotation has the no-rotate flag set. @return true if no-rotate flag is set, false otherwise
2020 Checks if the annotation is marked as 'no view'. @return true if 'no view' flag is set, false otherwise
2021 Checks if the annotation is read-only. @return true if read-only, false otherwise
2022 Checks if the annotation is locked. @return true if locked, false otherwise
2023 Checks if the toggle no view flag is set for the annotation. @return true if the toggle no view flag is active, false otherwise
2024 Checks if the contents are locked in the annotation. @return true if contents are locked, false otherwise
2025 Checks if the object is marked as invisible. @return true if invisible, false otherwise
2026 Checks if the object is hidden. @return true if hidden, false otherwise
2027 Checks if the document is marked as printed. @return true if printed, false otherwise
2028 Checks if zooming is disabled in the PDF document. @return true if zooming is not allowed, false otherwise
2029 Checks if the no-rotate flag is set. @return true if no-rotate flag is set, false otherwise
2030 Checks if the 'no view' flag is set. @return true if 'no view' flag is active, false otherwise
2031 Checks if the object is read-only. @return true if read-only, false otherwise
2032 Checks if the document is locked. @return true if locked, false otherwise
2033 Checks if the toggle no view flag is set. @return true if the toggle no view flag is active, false otherwise
2034 Checks if the contents are locked. @return true if contents are locked, false otherwise
2035 Determines if a filter is required based on COS object flags. @return true if filter is needed, false otherwise
2036 Determines if the sub-filter is required based on a flag. @return true if sub-filter is needed, false otherwise
2037 Determines if the digest method is required. @return true if the digest method flag is set, false otherwise
2038 Checks if the 'V' flag is set in the COS object. @return true if 'V' flag is set, false otherwise
2039 Checks if a reason is required based on flag status. @return true if reason is required, false otherwise
2040 Determines if legal attestation is required. @return true if required, false otherwise
2041 Determines if additional revision information is needed. @return true if revision info is required, false otherwise
2042 Checks if the subject field is required in the dictionary. @return true if the subject is required, false otherwise
2043 Checks if issuer information is required based on the dictionary's flag. @return true if issuer is required, false otherwise
2044 Determines if OID is required based on the dictionary flag. @return true if OID is required, false otherwise
2045 Checks if the subject DN is required based on a specific flag. @return true if subject DN is required, false otherwise
2046 Determines if key usage is required based on a specific flag. @return true if key usage is required, false otherwise
2047 Determines if a URL is required based on a specific flag. @return true if URL is required, false otherwise
2048 Checks if the text is italicized. @return true if italic flag is set, false otherwise
2049 Checks if the current object is bold. @return true if bold flag is set, false otherwise
2050 Checks if signatures exist in the dictionary. @return true if signatures are present, false otherwise
2051 Checks if the document is append-only. @return true if append-only flag is set, false otherwise
2052 Checks if the object is a push button. @return true if it's a push button, false otherwise
2053 Checks if the current object is a radio button. @return true if it is a radio button, false otherwise
2054 Checks if the sort flag is set for the COS object. @return true if sort flag is set, false otherwise
2055 Checks if the field allows multiple selections. @return true if multi-select is enabled, false otherwise
2056 Checks if the 'Do Not Spell Check' flag is set. @return true if the flag is set, false otherwise
2057 Checks if commit is enabled on selection change. @return true if commit on selection change is set, false otherwise
2058 Checks if the object is a combo field. @return true if combo flag is set, false otherwise
2059 Checks if the edit flag is set for the COS object. @return true if editable, false otherwise
2060 Checks if the document is read-only. @return true if read-only, false otherwise
2061 Checks if the required flag is set in the dictionary. @return true if the required flag is set, false otherwise
2062 Checks if the no-export flag is set in the dictionary. @return true if no-export flag is set, false otherwise
2063 Checks if radio buttons are in unison. @return true if radios are in unison, false otherwise
2064 Checks if the object supports multiline text. @return true if multiline is supported, false otherwise
2065 Checks if the COS object has the password flag set. @return true if the password flag is set, false otherwise
2066 Checks if the file select flag is set in the COS object. @return true if file select flag is set, false otherwise
2067 Checks if the do not spell check flag is set. @return true if the flag is set, false otherwise
2068 Checks if scrolling is disabled for the current object. @return true if scrolling is not allowed, false otherwise
2069 Checks if the object is a combination field. @return true if it's a combination field, false otherwise
2070 Checks if the current object supports rich text formatting. @return true if rich text is supported, false otherwise
2071 Prepares for decryption using provided encryption and decryption material. @param encryption encryption details @param documentIDArray array of document IDs @param decryptionMaterial material for decryption, must be PublicKeyDecryptionMaterial @throws IOException if decryption material is incompatible or other errors occur
2072 Retrieves the owner key as a byte array based on document revision. @return byte array of owner key or null if not found
2073 Retrieves the user key as a byte array based on document revision. @return byte array of user key or null if not found
2074 Calculates displacement vector based on character width. @param code character code for width calculation @return Vector representing displacement in x-direction
2075 Calculates the width of a given string. @param text input string to measure @return total width of the string in float
2076 Retrieves a PDAbstractPattern by name, using cache if available. @param name pattern identifier @return PDAbstractPattern or null if not found
2077 Retrieves PDShading by name, caching results for efficiency. @param name the shading resource identifier @return PDShading instance or null if not found
2078 Retrieves PDShading object, creating it if not already initialized. @return PDShading instance or null if shading is not defined
2079 Checks if the node is open based on the open count. @return true if open count is greater than 0, otherwise false
2080 Creates a PDField based on the provided field type and properties. @param form the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return PDField instance or null if invalid field type
2081 Retrieves a PDXObject by name, using cache if available. @param name the identifier for the XObject @return the corresponding PDXObject or null if not found
2082 Constructs a GouraudShadingContext with specified shading and transformation parameters. @param shading the shading to apply @param colorModel the color model used for rendering @param xform the affine transformation to apply @param matrix the matrix for shading calculations
2083 Creates a COSInputStream with default decoding options. @return COSInputStream instance @throws IOException if input stream creation fails
2084 Parses and retrieves an object from a compressed PDF object stream. @param objstmObjNr object stream number @param key identifier for the object to fetch @return COSBase object or null if not found
2085 Retrieves an InputStream of contents; returns empty stream if none found. @return InputStream with content or empty stream if no content available @throws IOException if stream creation fails
2086 Constructs a PDCIDFontType2 from a font dictionary and parent font. @param fontDictionary font properties and data @param parent parent font object @throws IOException if font data cannot be read
2087 Creates a PDCIDFont from existing font data. @return PDCIDFontType2 instance @throws IOException if font data cannot be read
2088 / Collects updates from a COSArray and its descendants. @param array the COSArray to process @return true if any child requires parent update
2089 Retrieves a set of COSBase objects, initializing if needed. @return Set of COSBase objects
2090 Adds a COSBase object or COSObject to the collection and updates its state. @param object the COSBase object to add
2091 Adds a COSBase object or COSObject to a list at index i and updates its state. @param i index to insert the object @param object the COSBase object to add
2092 Sets an object at a specified index and updates its state. @param index position in the list; @param object COSBase to set
2093 Sets or removes an item by key; updates state based on value type. @param key identifier for the item @param value associated value or null to remove the item
2094 Updates child states from a COSArray. @param children array of COSBase objects to update
2095 Retrieves a map of roles from the structure tree root. @return Map of roles or an empty map if root is null
2096 Adds a COSBase object to the pool, handling keys and object types. @param key the COSObjectKey for the object @param base the COSBase object to add @return the added COSBase object or null if not added
2097 Protects a document with a specified ProtectionPolicy. @param policy the ProtectionPolicy to apply for security @throws IOException if no security handler is found
2098 Retrieves the glyph name for a given character code. @param code character code to convert @return glyph name or ".notdef" if not found
2099 Converts a character code to its corresponding glyph ID. @param code character code to convert @return glyph ID or 0 if not found
2100 Retrieves the MAC subtype from the COS dictionary. @return MAC subtype string or null if not found
2101 Retrieves the MAC creator string from the document parameters. @return MAC creator string or null if not found
2102 Retrieves the MAC resource fork string from parameters. @return MAC resource fork string or null if not found
2103 Retrieves CIDFontMapping based on baseFont and font descriptor. @param baseFont the base font name @param fontDescriptor descriptor for the font @param cidSystemInfo character ID system information @return CIDFontMapping object or fallback if not found
2104 Validates owner password using byte representation. @param password owner's password as a string @param user user byte array @param owner owner byte array @param permissions permissions for the owner @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes key length in bytes @param encryptMetadata flag for metadata encryption @return true if password is valid, false otherwise
2105 Writes page content for each region, processing associated characters and text. @throws IOException if an I/O error occurs during writing
2106 Retrieves a Calendar object using the specified key. @param key identifier for the desired date object @return Calendar object or null if not found
2107 Retrieves a date from a key or returns a default value if not found. @param key identifier for the desired date @param defaultValue fallback Calendar if key is missing @return Calendar object or defaultValue if not found
2108 Retrieves the creation date from the document metadata. @return Calendar object or null if not found
2109 Retrieves the modification date from the info object. @return Calendar object representing the modification date or null if not found
2110 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found.
2111 Retrieves the document's creation date as a Calendar object. @return Calendar object representing the creation date or null if not found
2112 Retrieves the sign date from the dictionary. @return Calendar object representing the sign date or null if not found
2113 Writes a PDF Operator to the output stream. @param op the Operator to write @throws IOException if an I/O error occurs during writing
2114 Writes compressible objects to a COSStream. @param stream the COSStream to write objects to @return the updated COSStream @throws IOException if an I/O error occurs during writing
2115 Writes a COSDictionary to the output stream. @param output the OutputStream to write to @param cosDictionary the COSDictionary to serialize @throws IOException if an I/O error occurs
2116 Initializes a PDTransparencyGroup with a PDDocument. @param document the PDDocument to initialize from
2117 Initializes PDAppearanceStream with a PDDocument. @param document the PDDocument to initialize from
2118 Creates a PDImageXObject from a BufferedImage. @param document the PDDocument to hold the image @param image the input BufferedImage to encode @param quality compression quality (0-1) @param dpi image resolution in dots per inch @return PDImageXObject representing the image @throws IOException if encoding fails
2119 Validates a value against allowed options and throws an exception if invalid. @param value the value to check for validity
2120 Loads FDF data from a file and returns an FDFDocument. @param file the source file to read FDF data from @return FDFDocument object @throws IOException if an I/O error occurs
2121 Loads FDF data from an InputStream. @param input source stream for FDF data @return FDFDocument object @throws IOException if an I/O error occurs
2122 Constructs PDFParser with a data source. @param source data source for parsing PDF @throws IOException if an I/O error occurs
2123 Constructs TilingPaint with specified drawer, pattern, and transformation. @param drawer rendering context for the pattern @param pattern tiling pattern to apply @param xform transformation applied to the image @throws IOException if an error occurs during initialization
2124 Retrieves a BufferedImage without any specific region and default subsampling. @return BufferedImage representation of the image
2125 Decodes LZW data from input stream and returns DecodeResult. @param encoded input stream of encoded data @param decoded output stream for decoded data @param parameters dictionary of parameters for decoding @param index index for parameter retrieval @return DecodeResult containing decoding parameters
2126 Appends a child marked content if valid; throws if MCID is negative or null. @param markedContent the marked content to append
2127 Fetches UCS2 CMap for composite fonts with specific character collections. @throws IOException if CMap retrieval fails
2128 Determines if the field is a comb text field. @return true if conditions for a comb field are met, false otherwise
2129 Prepares decryption using provided encryption and decryption material. @param encryption encryption settings for the document @param documentIDArray array of document IDs @param decryptionMaterial material containing decryption credentials @throws IOException if decryption material is incompatible or password is incorrect
2130 Calculates the width of the space character in the font. @return float width of the space character
2131 Checks if the fixed pitch flag is set. @return true if fixed pitch is enabled, false otherwise
2132 Checks if the serif flag is enabled. @return true if serif is on, false otherwise
2133 Checks if the symbolic flag is set. @return true if symbolic flag is on, false otherwise
2134 Checks if the script flag is set. @return true if the script flag is on, false otherwise
2135 Checks if the non-symbolic flag is set. @return true if non-symbolic, false otherwise
2136 Checks if italic formatting is enabled. @return true if italic is on, false otherwise
2137 Checks if the ALL_CAP flag is set. @return true if ALL_CAP is active, false otherwise
2138 Checks if the small cap flag is set. @return true if small cap is enabled, false otherwise
2139 Checks if the force bold flag is enabled. @return true if force bold is active, false otherwise
2140 Retrieves a pattern by color; throws IOException if not found. @param color the color object to retrieve the pattern @return PDAbstractPattern associated with the color
2141 Creates a PDField from a given dictionary. @param form the PDAcroForm instance @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return PDField instance or null if invalid
2142 Converts input stream bytes to a text string. @return decoded string or empty if an error occurs
2143 Creates a COSInputStream by delegating to the stream object. @return COSInputStream instance @throws IOException if input stream creation fails
2144 Collects patches from a COSStream with transformation and matrix. @param xform transformation to apply, @param matrix color matrix, @param controlPoints count @return list of Patch objects
2145 Creates a descendant font from a dictionary and parent font. @param dictionary font dictionary @param parent parent font object @return PDCIDFont instance @throws IOException for invalid font types
2146 Returns an iterator for COSBase objects from the collection. @return Iterator for traversing COSBase elements
2147 Adds a COSObjectable to the collection after converting it to COSBase. @param object the COSObjectable to add
2148 Expands collection to specified size by adding a COSBase object. @param size target size for the collection @param object COSBase object to add if needed
2149 Sets an array of floats, clearing previous values first. @param value array of float values to set
2150 Parses a COSArray from the source, handling potential corrupt elements. @return COSArray object containing parsed elements @throws IOException if an I/O error occurs during parsing
2151 Constructs and returns a COSStream with xref data. @return COSStream object containing xref information @throws IOException if an I/O error occurs
2152 Initializes a PDRange with a default range from 0.0 to 1.0.
2153 Retrieves or initializes encode values from COSArray. @return COSArray of encode values or an empty array if not found
2154 Initializes PDFunctionType2 with default values for c0, c1, and exponent from COSBase. @param function the COSBase object representing the function
2155 Initializes FDFOptionElement with an empty COSArray and two empty COSStrings.
2156 Initializes PDFontSetting with a COSArray containing null and a COSFloat of 1.
2157 Retrieves the white point color values. @return PDTristimulus object representing the white point
2158 Retrieves the black point color value. @return PDTristimulus object representing the black point color
2159 Converts components to a COSArray and adds patternName if not null. @return COSArray representation of components
2160 Constructs a PDDeviceN object with a COSArray initialized for device representation.
2161 Initializes PDGamma with a COSArray containing three zero values.
2162 Retrieves the alternate color space or creates one based on component count. @return PDColorSpace instance derived from alternate color space or default
2163 Initializes a PDIndexed object with a default COSArray configuration.
2164 Creates a default range array with predefined float values. @return COSArray containing range values
2165 Constructs a PDPattern with specified resources. @param resources the PDResources to associate with this pattern
2166 Initializes a PDSeparation object with a COSArray containing placeholders.
2167 Initializes a PDTristimulus object with default zero values.
2168 Initializes a PDTristimulus object with up to three float values. @param array input float values array
2169 Sets a matrix using an AffineTransform. @param transform the AffineTransform to extract matrix values
2170 Creates a PDImageXObject from a byte array. @param document the PDDocument to associate with the image @param byteArray image data in byte array format @return PDImageXObject created image object @throws IOException if an error occurs during image processing
2171 Converts specified float values to a COSArray. @return COSArray containing COSFloat objects from 'single' array
2172 Sets a COSBase object at a specified index. @param index position in the list; @param object COSObjectable to convert and set
2173 Sets an integer value at a specified index. @param index position in the list; @param value integer to store
2174 Sets the name at a specified index using a COSName object. @param index position in the list; @param name the name to set
2175 Sets a string at a specified index, converting it to COSString if not null. @param index position in the list; @param string input string to set
2176 Sets the minimum value in the range array. @param min the minimum float value to set
2177 Sets the maximum value in the range array. @param max the maximum float value to set
2178 Sets the lower-left X coordinate of a rectangle. @param value the X coordinate to set
2179 Sets the lower left Y-coordinate of the rectangle. @param value the Y-coordinate to set
2180 Sets the upper right X coordinate of a rectangle. @param value the X coordinate to set
2181 Sets the upper right Y coordinate of a rectangle. @param value the Y coordinate to set
2182 Sets the color at a specified index in the array. @param index position in the array; @param colour PDGamma object or null for no color
2183 Decrypts each element in a COSArray. @param array the COSArray to decrypt @param objNum object number for decryption @param genNum generation number for decryption
2184 Sets the option by creating a COSString from the input. @param opt the option string to set
2185 Sets the default appearance string for an option. @param da the appearance string to set
2186 Sets the font size for the document. @param size the desired font size as a float
2187 Sets device attributes and updates the internal array accordingly. @param attributes new PDDeviceNAttributes to set or null to remove
2188 Sets the alternate color space. @param cs the PDColorSpace to set, may be null
2189 Sets the first value in the list to a specified float. @param r the float value to set
2190 Sets the green component value. @param g float value for the green component
2191 Sets the third value in the list to a specified float. @param b float value to set at index 2
2192 Sets the range for a component in the COSArray. @param range the PDRange to set; @param n index for the range
2193 Sets the base color space and updates the internal array. @param base PDColorSpace to set as the base color space
2194 Sets the colorant name at a specific index in the array. @param name the colorant name to set
2195 Sets the alternate color space for the object. @param colorSpace the PDColorSpace to set, or null to clear it
2196 Sets the X value in the values list. @param x the float value to set at index 0
2197 Sets the Y coordinate value. @param y the float value to set as the Y coordinate
2198 Sets the Z value in the values list. @param z the float value to set at index 2
2199 Sets the item by key, converting value to COSBase if not null. @param key identifier for the item @param value associated object or null to remove the item
2200 Sets a boolean item by key. @param key identifier for the boolean item @param value boolean value to set
2201 Sets a boolean value for a given key. @param key identifier for the boolean item @param value boolean value to be set
2202 Sets or removes an item by key in PDF context. @param key identifier for the item @param value associated value or null to remove the item
2203 Sets the name for a given key; updates item based on provided value. @param key identifier for the item @param value name to associate with the key, or null to clear
2204 Sets a string item by key; encodes if value is not null. @param key identifier for the item @param value input string to encode
2205 Sets an integer item by key. @param key identifier for the item @param value integer value to store
2206 Sets a long value associated with a key. @param key identifier for the item @param value long value to store
2207 Sets a float value for a specified key. @param key identifier for the item @param value the float value to set
2208 Creates a COSStream from a dictionary with specified position and length. @param dictionary data source for stream items @param startPosition starting position of the stream @param streamLength length of the stream @return constructed COSStream object
2209 Sets the encryption dictionary in the trailer. @param encDictionary the encryption settings to apply
2210 Sets the document ID in the trailer dictionary. @param id array containing the document ID
2211 Wraps page content in save/restore streams for controlled content addition. @param page the PDPage to modify @throws IOException if an I/O error occurs
2212 Updates parent and structure type for each COSDictionary in the array. @param kArray array of COSBase objects @param newParent new parent COSDictionary @param newStructureType optional new structure type COSName
2213 Searches for a trailer in the PDF structure and updates the provided dictionary. @param trailer COSDictionary to populate with found trailer information @return true if trailer is found, false otherwise
2214 Searches for trailer items in the PDF dictionary. @param trailer the COSDictionary to update with found items @return true if a root object is found, false otherwise
2215 Parses the document trailer and validates the root dictionary. @throws IOException if root object is missing or invalid
2216 Parses the next token from the source, handling various data types. @return Object representing the parsed token or null if EOF or error occurs @throws IOException if an I/O error occurs during parsing
2217 Writes the PDF document with optional signing and encryption. @param doc the PDDocument to write @param signInterface interface for signing the document @throws IOException if an I/O error occurs during writing
2218 Retrieves document information, initializing if not present. @return PDDocumentInformation object containing document metadata
2219 Sets the document information and updates the trailer. @param info document information to set
2220 Initializes PDDocumentCatalog with a document and sets its root in the trailer. @param doc the PDDocument to associate with this catalog
2221 Retrieves a list of PDThread objects from the COSArray. @return List of PDThread instances
2222 Retrieves or creates additional actions for the document catalog. @return PDDocumentCatalogAdditionalActions instance
2223 Adds an output intent to the document's COSArray. @param outputIntent the PDOutputIntent to add
2224 Initializes PDDocumentNameDictionary from catalog, creating if absent. @param cat the PDDocumentCatalog containing the dictionary
2225 Sets or removes the crop box for the page. @param cropBox the rectangle defining the crop area, or null to remove it
2226 Retrieves page additional actions, creating them if absent. @return PDPageAdditionalActions object containing page actions
2227 Initializes a PDPageTree with a root dictionary for pages.
2228 Retrieves child COSDictionaries from a given COSDictionary node. @param node the parent COSDictionary @return List of child COSDictionaries or empty if none found
2229 Clears collections and updates parent dictionary item to null if present.
2230 Constructs a COSDictionary with an array of labels. @return COSDictionary containing label data
2231 Initializes a PDComplexFileSpecification with a new COSDictionary.
2232 Constructs a PDComplexFileSpecification from a COSDictionary. @param dict optional COSDictionary, creates default if null
2233 Sets the range values and updates the COS object. @param rangeValues array of values to set as range
2234 Sets domain values and updates the COS object. @param domainValues array of domain values to set
2235 Sets encoding values and updates the COS object. @param encodeValues array of encoding values
2236 Sets the decode values and updates the COS object. @param decodeValues array of decode values to set
2237 Sets an attribute value and notifies changes. @param attrName the name of the attribute @param attrValue the new value for the attribute
2238 Removes an attribute from the structure and updates state accordingly. @param attributeObject the attribute to be removed
2239 Updates attribute revision number in COSArray or creates a new one if absent. @param attributeObject the attribute object to check against the COSArray
2240 Adds a class name to the COS object's class array. @param className the name of the class to add
2241 Removes a class name from the COS object. @param className the name of the class to remove
2242 Appends a child object to the COSBase; creates or updates a COSArray as needed. @param object the COSBase object to append
2243 Inserts newKid before refKid in the COS structure if both are non-null. @param newKid the COSBase object to insert @param refKid the reference object before which newKid is inserted
2244 Removes a child object from the collection. @param object the child object to remove @return true if removed, false if not found
2245 Sets the 'K' item in the COS object. @param k value to associate with the 'K' key
2246 Sets the value and notifies changes if necessary. @param value new COSBase value to be set
2247 Retrieves guideline color from dictionary or initializes to black if absent. @return PDColor object representing the guideline color
2248 Retrieves or initializes line dash pattern from the dictionary. @return PDLineDashPattern object with dash array
2249 Sets the line dash pattern in the dictionary. @param dashArray array defining the dash pattern or null to clear it
2250 Sets the crypt filter method in the crypt filter dictionary. @param cfm the crypt filter method to set
2251 Sets the filter in the dictionary. @param filter the name of the filter to set
2252 Sets the owner key in the dictionary. @param o byte array representing the owner key
2253 Sets the user key in the dictionary. @param u byte array representing the user key @throws IOException if an I/O error occurs
2254 Sets the owner encryption key in the dictionary. @param oe byte array representing the owner encryption key @throws IOException if an error occurs while setting the key
2255 Sets the user encryption key in the dictionary. @param ue byte array representing the user encryption key @throws IOException if an I/O error occurs
2256 Sets the recipients in the dictionary from a byte array. @param recipients array of recipient byte arrays
2257 Sets crypt filter dictionary in the COSDictionary. @param cryptFilterName name for the crypt filter @param cryptFilterDictionary associated crypt filter data
2258 Sets the stream filter name in the dictionary. @param streamFilterName the name of the stream filter
2259 Sets the string filter name in the dictionary. @param stringFilterName the name of the string filter to set
2260 Sets permissions in the dictionary from the given byte array. @param perms byte array representing permissions @throws IOException if an I/O error occurs
2261 Removes V4.5 filters from the dictionary.
2262 Initializes a new FDFAnnotation with a default COSDictionary.
2263 Sets the annotation color from a Color object. @param c Color object; null sets no color
2264 Sets the rich contents for the annotation. @param rc rich content string to be set
2265 Sets the interior color of the annotation. @param color Color object or null to remove the color
2266 Sets the callout for the annotation. @param callout array of float values for the callout
2267 Sets the line property for the annotation. @param line array of float values representing line coordinates
2268 Sets the interior color of the annotation. @param color the Color object to set or null to clear the color
2269 Sets horizontal offset for caption; initializes if not present. @param offset horizontal offset value
2270 Sets vertical offset for the caption; initializes if absent. @param offset vertical offset value
2271 Sets the vertices for the annotation. @param vertices array of float values representing vertices
2272 Sets the interior color of an annotation. @param color the Color object to set or null to remove the color
2273 Sets the vertices of the annotation. @param vertices array of float values representing vertices
2274 Sets the interior color of an annotation. @param color Color object to set, or null to remove the color
2275 Sets the interior color of the annotation. @param color the Color object to set or null to clear the color
2276 Sets annotation coordinates using a float array. @param coords array of float values for annotation coordinates
2277 Sets the document ID in the FDF object. @param id array containing the document ID
2278 Sets the differences in the FDF using the provided COSStream. @param diff COSStream representing the differences to set
2279 Sets the field value based on input type. @param value can be List, String, COSObjectable or null; throws IOException on error.
2280 Sets the value for a field. @param value the value to be set, represented as COSBase
2281 Sets field flags based on the provided integer. @param ff integer flags to set or null to clear
2282 Sets field flags using an integer value. @param ff the flags to set or null to clear the field
2283 Sets clear field flags using the provided integer. @param ff flags to set or null to clear the field
2284 Sets widget field flags based on the provided integer. @param f integer flag value or null to remove the flag
2285 Sets widget field flags. @param ff integer flags to set, or null to remove the item
2286 Sets clear widget field flags. @param ff integer flags to set or null to clear the item
2287 Sets rich text value for the field. @param rv the rich text to set
2288 Sets rich text value in the field. @param rv COSStream representing the rich text content
2289 Sets the 'before' item in the dictionary. @param before text to be stored as a COSString
2290 Sets the 'after' item in the dictionary. @param after string value to set as 'after'
2291 Initializes a PDFont instance with default values and an empty width map.
2292 Constructs a PDFontDescriptor with a new COSDictionary for font metadata.
2293 Sets the font name in the dictionary. @param fontName the name of the font to set, or null to remove it
2294 Sets the font family in the dictionary. @param fontFamily name of the font family to set, or null to remove it
2295 Sets the font stretch in the dictionary. @param fontStretch the stretch value of the font or null to remove it
2296 Sets the font bounding box in the dictionary. @param rect the rectangle defining the bounding box or null to remove it
2297 Sets the character set for the document. @param charSet the character set string or null to remove it
2298 Initializes DictionaryEncoding with base and differences encodings. @param baseEncoding the base encoding type @param differences array of differences to apply
2299 Sets the gamma value in the dictionary. @param value the gamma float value to set
2300 Retrieves PDGamma from dictionary or initializes it with default values. @return PDGamma object based on GAMMA array
2301 Sets the gamma value in the dictionary. @param gamma PDGamma object containing gamma data or null to remove it
2302 Sets a 3x3 matrix in the dictionary. @param matrix the matrix to set; if null, no action is taken
2303 Retrieves colorants from resources, creating if absent. @param resources PDResources for color space creation @return Map of colorant names to PDSeparation objects
2304 Initializes PDTransparencyGroupAttributes with a default COSDictionary and transparency setting.
2305 Initializes PDOptionalContentMembershipDictionary with type OCMD.
2306 Sets the visibility policy in the document dictionary. @param visibilityPolicy the visibility policy to set
2307 Sets the transformation matrix from an AffineTransform object. @param transform the AffineTransform to convert to a COSArray
2308 Sets or removes the bounding box; updates COS object accordingly. @param bbox the bounding box or null to remove it
2309 Sets the background color. @param newBackground array of color values to set as background
2310 Sets the bounding box; removes it if null, updates if not. @param newBBox new bounding box or null to remove
2311 Sets the color space; updates dictionary accordingly. @param colorSpace the color space to set or null to remove it
2312 Sets the function array to a new COSArray. @param newFunctions array of function definitions
2313 Sets the transformation matrix for the object. @param transform AffineTransform containing matrix values to set
2314 Sets the domain and updates the COS object. @param newDomain the new COSArray to set as domain
2315 Sets the extend value and updates the COS object. @param newExtend new COSArray to set as extend
2316 Sets the domain and updates the COS object with the new domain. @param newDomain array representing the new domain
2317 Updates the coordinates and sets them in the COS object. @param newCoords new coordinates to be set
2318 Sets the decode values for the object and updates the COS item. @param decodeValues array of decode values to set
2319 Constructs a PDExtendedGraphicsState with a new COSDictionary.
2320 Sets the blending mode in the dictionary. @param bm the BlendMode to set in the dictionary
2321 Sets or removes a float item in the dictionary by key. @param key identifier for the item @param value float value to set or null to remove the item
2322 Sets the transfer item in the dictionary. @param transfer value to set for the transfer item
2323 Sets the transfer2 item in the dictionary. @param transfer2 value to associate with the TR2 key
2324 Sets the 'T' item in the action with the provided COSBase value. @param t the COSBase value to associate with the 'T' key
2325 Sets the action's H property based on the provided boolean value. @param h boolean value for the H property
2326 Sets the fields for an action using a COSArray. @param array the COSArray containing field data
2327 Sets sound in the action item. @param sound COSStream to associate with the SOUND key
2328 Sets fields in the action with the provided COSArray. @param array array of fields to set
2329 Sets the 'D' item in the action with the provided COSBase value. @param d the COSBase value to set for the 'D' item
2330 Sets item B in the action state. @param b value to associate with item B
2331 Sets the relationship type; only P or C are valid. @param relationship the relationship COSName to set
2332 Initializes a PDAnnotation with a new COSDictionary and sets its type to ANNOT.
2333 Initializes PDAnnotation with a COSDictionary, setting default type if absent. @param dict the COSDictionary for the annotation
2334 Sets the rectangle in the dictionary. @param rectangle the PDRectangle to set in the dictionary
2335 Sets the border using the provided COSArray. @param borderArray array defining the border properties
2336 Sets rectangle differences for margins. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2337 Sets rectangle differences for margins. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2338 Sets the callout value as a COSArray from a float array. @param callout array of float values for the callout
2339 Sets the ink list; removes if null, adds COSArray of paths otherwise. @param inkList array of float arrays representing ink paths
2340 Sets line coordinates using an array of floats. @param l array of float values representing line coordinates
2341 Sets horizontal offset for caption; creates COSArray if none exists. @param offset horizontal offset value
2342 Sets the vertical offset for the caption. @param offset the vertical offset value to set
2343 Sets quad points for the PDF object. @param quadPoints array of float values representing quad points
2344 Sets rich content string in the COS object. @param rc rich content string to store
2345 Sets the vertices for the COS object from a float array. @param points array of vertex coordinates
2346 Sets the VERTICES item in the COSObject to the provided array of points. @param points array of float values representing vertices
2347 Sets the parent annotation for the given markup annotation. @param annot the markup annotation to set as parent
2348 Sets rectangle differences for margins. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2349 Sets quad points for the COS object. @param quadPoints array of float values representing quad points
2350 Constructs a PDAppearanceDictionary with a required N entry.
2351 Sets the dash style for drawing. @param dashArray array defining the dash pattern
2352 Retrieves or initializes line dash pattern for the object. @return PDLineDashPattern based on COSArray or a new one if absent
2353 Sets the operating system in the dictionary or removes it if null. @param os the OS name to set or null to remove it
2354 Constructs a PDSeedValue object with a COSDictionary initialized for seed values.
2355 Sets the filter in the dictionary. @param filter the COSName representing the filter to set
2356 Sets the MDP value in the dictionary if not null. @param mdp the PDSeedValueMDP object to set
2357 Sets the time stamp in the dictionary if not null. @param timestamp the time stamp to set
2358 Initializes a PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks it as direct.
2359 Adds a subject to the COSArray in the dictionary. @param subject byte array representing the subject
2360 Validates and adds key usage extension to the dictionary. @param keyUsageExtension string to validate and add
2361 Adds an issuer to the COSArray in the dictionary. @param issuer byte array representing the issuer
2362 Adds an OID to the COSArray in the dictionary. @param oid byte array representing the OID to add
2363 Initializes a PDSignature object with a COSDictionary set to signature type.
2364 Sets the document type in the dictionary. @param type the COSName representing the document type
2365 Sets the filter in the dictionary. @param filter the COSName representing the filter to set
2366 Sets the subfilter in the dictionary. @param subfilter the subfilter value to set
2367 Sets the byte range for the document. @param range an array of four integers representing the byte range
2368 Sets the contents of the dictionary with a COSString from byte array. @param bytes byte array to initialize COSString
2369 Sets the text color in the COS object. @param textColor the PDColor to be set as text color
2370 Constructs a PDAcroForm with a specified PDDocument. @param doc the PDDocument to associate with this form
2371 Constructs a PDButton from a given PDAcroForm. @param acroForm the PDAcroForm instance
2372 Constructs a PDChoice object from a given PDAcroForm. @param acroForm the PDAcroForm instance
2373 Sets the value in the COS object. @param object the COSBase value to set
2374 Sets the default value for the COS object. @param value the default COSBase value to set
2375 Initializes a PDSignatureField with specified properties. @param acroForm the PDAcroForm instance for the field
2376 Initializes PDTextField with the given PDAcroForm. @param acroForm the PDAcroForm instance
2377 Sets the default style string or removes it if null. @param defaultStyleString style string to set or null to remove
2378 Sets rich text value; removes it if null. @param richTextValue text to set or null to remove
2379 Sets the coordinate system origin. @param coordSystemOrigin array of float values for the origin coordinates
2380 Initializes a PDThread with a COSDictionary and sets its type to THREAD.
2381 Sets the transition direction for a PDF document. @param direction the PDTransitionDirection to set
2382 Sets the duration value in the COS object. @param duration the duration to set as a float
2383 Sets the fly scale for the object. @param scale the new scale value to set
2384 Sets the opacity of the fly area. @param opaque true for opaque, false for transparent
2385 Adds elements from COSArray to the current collection and updates state if modified. @param objectList collection of elements to add
2386 Retrieves the standard structure type, potentially mapped to a role. @return structure type name, possibly updated from role mapping
2387 Adds a COSBase structure to the pool and processes its elements. @param current the COSBase object to add @throws IOException if an I/O error occurs during processing
2388 Retrieves a date using a key or returns a default value. @param key identifier for the desired date @param defaultValue fallback Calendar if key is missing @return Calendar object or defaultValue if not found
2389 Retrieves an embedded date or returns a default value if not found. @param embedded the identifier for the embedded dictionary @param key the identifier for the desired date @param defaultValue fallback Calendar if date is missing @return Calendar object or defaultValue if not found
2390 Inserts generated comb appearance in the PDF content stream. @param contents content stream to modify @param appearanceStream appearance stream for layout @param font font used for text rendering @param fontSize size of the font for text
2391 Creates a PDImageXObject from a BufferedImage with default DPI. @param document the PDDocument to hold the image @param image the input BufferedImage to encode @param quality compression quality (0-1) @return PDImageXObject representing the image @throws IOException if encoding fails
2392 Loads FDF data from a file specified by filename. @param filename the path to the FDF file @return FDFDocument object @throws IOException if an I/O error occurs
2393 Adds intermediate curls based on the current angle and radius. @param angleCur current angle in radians @param r radius for the curls @param alpha additional angle offset @param cx x-coordinate center @param cy y-coordinate center
2394 Generates intermediate curl points based on the current angle and radius. @param angleCur current angle in radians @param r radius for arc segments @return array of calculated Point2D.Double points
2395 Renders glyph using transformation matrix and font; processes text position for display. @param textRenderingMatrix matrix for text rendering @param font font used for rendering @param code character code for the glyph @param displacement vector for glyph displacement
2396 Splits text into lines based on font size and width constraints. @param font the font used for measuring text width @param fontSize the size of the font @param width maximum width for each line @return List of Line objects containing the split text
2397 Retrieves the symbolic flag from the font descriptor. @return Boolean symbolic flag or null if font descriptor is absent
2398 Determines a fallback font name based on the given font descriptor. @param fontDescriptor the font descriptor to analyze @return the fallback font name as a String
2399 Retrieves a Paint object based on the provided color and its color space. @param color the PDColor object to convert to Paint @throws IOException if an error occurs during processing
2400 Retrieves a list of PDField objects from the dictionary. @return List of PDField or an empty list if none found
2401 Finds a child PDField by traversing its name hierarchy. @param name array of names to match @param nameIndex current index in the name array @return PDField object or null if not found
2402 Retrieves child PDFields from the current object's COSArray. @return List of PDField instances or empty if none found.
2403 Retrieves string from COSBase object or empty if null or unsupported type. @param base COSBase input object @return decoded string or empty if base is null or unsupported
2404 Retrieves value from field as Object based on its type. @return Object representation or null if not found
2405 Retrieves rich text from a dictionary. @return decoded string or null if not found
2406 Retrieves the 'BEFORE' value from the dictionary as a string. @return string representation or null if not found
2407 Retrieves the 'AFTER' value from the dictionary as a string. @return string representation or null if not found
2408 Retrieves action as a string from the COSBase object. @return action string or null if not applicable
2409 Retrieves rich content as a string from the COS object. @return rich content string or null if not found
2410 Retrieves string from COSBase, handling COSString and COSStream types. @param base input COSBase object @return decoded string or empty if not applicable
2411 Creates a LayoutPage from a PDPage object. @param page the PDPage to create the LayoutPage from @return a new LayoutPage instance @throws IOException if an I/O error occurs
2412 Converts input stream to byte array. @return byte array representation of the input stream @throws IOException if stream creation or reading fails
2413 Retrieves sample values as a 2D array. @return 2D array of sample values based on input/output parameters
2414 Constructs PatchMeshesShadingContext with shading and color model. @param shading mesh shading type, @param colorModel color representation, @param xform transformation, @param matrix shading operations, @param deviceBounds area for pixel table, @param controlPoints count
2415 Initializes Type4ShadingContext with shading parameters and device bounds. @param shading shading configuration @param cm color model for rendering @param xform transformation for triangle vertices @param matrix matrix for shading calculations @param deviceBounds bounds for rendering area
2416 Initializes Type5 shading context with specified parameters. @param shading shading parameters @param cm color model for rendering @param xform transformation to apply @param matrix matrix for shading calculations @param deviceBounds bounds for pixel table creation
2417 Adds an attribute to the COS object's attribute array. @param attributeObject the attribute to add
2418 Adds a user property to the COSArray and notifies change. @param userProperty the user property to add
2419 Constructs PDICCBased with a new COSArray and PDStream from the given document. @param doc the PDDocument to create the stream from
2420 Constructs a PDPattern with resources and color space. @param resources the PDResources for the pattern @param colorSpace the PDColorSpace associated with the pattern
2421 Sets change values in COSObject as a COSArray. @param changeXs array of PDNumberFormatDictionary objects
2422 Sets Y change values in the COSObject. @param changeYs array of PDNumberFormatDictionary to set
2423 Sets distance values in the COSObject. @param distances array of PDNumberFormatDictionary objects
2424 Sets areas in the COS object from an array of PDNumberFormatDictionary. @param areas array of PDNumberFormatDictionary objects
2425 Sets angles in the COS object. @param angles array of PDNumberFormatDictionary to set
2426 Sets line slopes in the COS object. @param lineSloaps array of PDNumberFormatDictionary representing slopes
2427 Expands collection to specified size, adding null object if needed. @param size target size for the collection
2428 Retrieves text color as PDColor; initializes if not present.
2429 Clones a COSBase object, handling COSArray and COSDictionary types. @param src source COSBase to clone @param dstParent parent COSBase for the clone @param currentPageDict current page dictionary context @return cloned COSBase object
2430 Parses a directory object from the source. @return COSBase object or null if end of stream is reached
2431 Parses a PDF Xref stream from the given COSStream. @param stream the COSStream to parse @throws IOException if stream view creation or parsing fails
2432 Retrieves the next PDAction(s) from the action dictionary. @return List of PDAction or null if not found
2433 Retrieves the PDRange for a specific component index.\n* @param n component index\n* @return PDRange object or default range if not found
2434 Retrieves PDRange for specified parameter number. @param paramNum parameter index for range extraction @return PDRange object or null if not enough values
2435 Retrieves color data by name; returns PDGamma or PDFourColours based on array size. @param name identifier for the color data @return Object representing color or null if not found
2436 Builds width data for a font and updates the provided COSDictionary. @param cidFont dictionary to store width data
2437 Sets the line dash pattern in the dictionary. @param dashPattern the pattern to be set in the dictionary
2438 Constructs a color space from a COSArray and fills the whitepoint cache. @param rgb COSArray containing color space data
2439 Sets guideline color in the dictionary. @param color the color to set or null to remove it
2440 Sets the color using a PDColor object. @param c color to set, converted to COSArray
2441 Sets the interior color of an object. @param ic the PDColor to set as interior color
2442 Sets the interior color for a PDF object. @param ic the color to set as PDColor object
2443 Sets the interior color for the object. @param ic the PDColor to set as interior color
2444 Sets the interior color using a PDColor object. @param ic the PDColor to be set as interior color
2445 Sets the border color for the object. @param c the PDColor to set as the border color
2446 Sets the background color using a PDColor object. @param c the PDColor to set as background
2447 Sets the text color in the COS object. @param textColor color to be set for the text
2448 Retrieves a PDRange from the dictionary or defaults if not found. @return PDRange object based on the range array
2449 Retrieves a PDRange from the dictionary or defaults if not found. @return PDRange object constructed from range values
2450 Creates a PDImageXObject from an InputStream. @param document the PDDocument to associate with the image @param stream input stream containing image data @return PDImageXObject created image object @throws IOException if an error occurs during image processing
2451 Sets the font for the document. @param font the PDFont object to be set
2452 Sets the tint transformation function. @param tint the PDFunction to be set in the tintTransform and array
2453 Sets the tint transformation function. @param tint PDFunction to apply as the tint transform
2454 Sets the specified PDPage at the first index of the array. @param page the PDPage object to be set
2455 Sets the upper limit in a COSArray; initializes if absent. @param upper the upper limit value or null to remove it
2456 Sets the lower limit in the COSArray; updates or initializes if null. @param lower the integer value to set as the lower limit or null to clear
2457 Sets the start point ending style for an annotation. @param style the desired ending style or null for default
2458 Sets the endpoint style for the annotation. @param style the desired endpoint style; defaults to LE_NONE if null
2459 Sets the ending style of a line annotation. @param style the ending style name or null for default
2460 Sets the endpoint style for the annotation. @param style the style to set, or null for default; updates COSArray in annotation
2461 Sets the start point ending style for a line annotation. @param style the style name to set or null for default
2462 Sets the ending style of the line annotation. @param style the style to set or null for default
2463 Sets the ending style for the start point annotation. @param style the style to set or null for default
2464 Sets the ending style for the endpoint. @param style the style name or null for default; updates COSArray in the object
2465 Sets the upper limit in the COSArray; initializes if absent. @param upper the upper limit string to set
2466 Sets the lower limit in the COSArray; initializes if absent. @param lower the lower limit string to set
2467 Clips a rectangle to fit within the media box. @param box the rectangle to be clipped @return PDRectangle representing the clipped dimensions
2468 Creates a PDRectangle with dimensions based on current width and height. @return PDRectangle object with specified dimensions
2469 Sets the color before the first index using PDGamma. @param colour PDGamma object or null for no color
2470 Sets the color at index 1 using the provided PDGamma object. @param colour PDGamma object or null for no color
2471 Sets the starting color using a PDGamma object. @param colour PDGamma object or null for no color
2472 Sets the end color using a PDGamma object. @param colour PDGamma object for the end color
2473 Decrypts a COSBase object based on its type. @param obj the COSBase object to decrypt @param objNum object identifier for decryption @param genNum generation number for decryption @return decrypted COSBase object @throws IOException if an I/O error occurs
2474 Sets an item using a key and value. @param key identifier for the item @param value associated object or null to remove the item
2475 Sets the AcroForm in the root object. @param acroForm the PDAcroForm to set, or null to remove
2476 Sets the viewer preferences for the document. @param prefs preferences to be applied to the viewer
2477 Sets the document outline in the PDF. @param outlines the PDDocumentOutline to set, or null to remove it
2478 Sets the PDF metadata. @param meta the PDMetadata object to set or null to remove
2479 Sets the document's open action. @param action the destination or action to perform on open
2480 Sets additional actions for the document catalog. @param actions actions to be associated with the document
2481 Sets the document names in the name dictionary. @param names the PDDocumentNameDictionary to set
2482 Sets mark information in the root object. @param markInfo the PDMarkInfo object to be set
2483 Sets the URI in the root dictionary. @param uri the PDURIDictionary containing the URI information
2484 Sets the structure tree root for the document. @param treeRoot the PDStructureTreeRoot to set
2485 Sets the page labels in the document. @param labels the PDPageLabels to be set
2486 Sets the destination names in the name dictionary. @param dests destination names tree node
2487 Sets the embedded files in the name dictionary. @param ef the PDEmbeddedFilesNameTreeNode to be set
2488 Sets the JavaScript item in the name dictionary. @param js the PDJavascriptNameTreeNode to associate with the JAVA_SCRIPT key
2489 Initializes a PDPage with a specified media box. @param mediaBox dimensions of the page
2490 Sets page resources; updates or removes them based on input. @param resources the resources to set or null to remove
2491 Sets the media box and updates the page accordingly. @param mediaBox the new media box or null to remove it
2492 Sets or removes the bleed box for the page. @param bleedBox the rectangle defining the bleed area, or null to remove it
2493 Sets or removes the trim box for the page. @param trimBox the rectangle defining the trim area or null to remove it
2494 Sets or removes the art box for the page. @param artBox rectangle defining the art box, or null to remove it
2495 Sets the page contents stream. @param contents the PDStream to set for the page
2496 Sets the page's metadata. @param meta PDMetadata object to associate with the page
2497 Sets additional actions for the page. @param actions additional actions to associate with the page
2498 Sets the page transition. @param transition the PDTransition object to set for the page
2499 Sets page transition and duration. @param transition the transition effect to apply @param duration duration of the transition in seconds
2500 Adds an object to a COSDictionary, creating it if necessary. @param kind dictionary type identifier @param name item key in the dictionary @param object value to associate with the key
2501 Sets the embedded file in the EF dictionary. @param file the embedded file to set, or null to remove it
2502 Sets the embedded file's Unicode representation in the EF dictionary. @param file the embedded file to set or null to skip
2503 Sets the page for the document. @param page PDPage object representing the page to set
2504 Sets the referenced PDAnnotation in the COSObject. @param annotation the PDAnnotation to associate with the object
2505 Sets the referenced object in the COSDictionary. @param xobject the PDXObject to associate with the COSDictionary
2506 Sets the page for the current object. @param page the PDPage to associate with this object
2507 Sets the parent structure node for the current object. @param structureNode the parent PDStructureNode to set
2508 Sets the page for the document. @param page the PDPage object to be set
2509 Sets the parent tree node in the COS object. @param parentTree the PDNumberTreeNode to set as the parent tree
2510 Sets the annotation rectangle. @param rectangle the PDRectangle to set for the annotation
2511 Sets the border style for the annotation. @param bs the border style dictionary to set
2512 Sets the border effect for the annotation. @param be border effect dictionary to apply
2513 Sets the fringe rectangle for the annotation. @param fringe the PDRectangle defining the fringe dimensions
2514 Sets the fringe rectangle for the annotation. @param fringe the PDRectangle representing the fringe area
2515 Sets the fringe of the annotation. @param fringe the PDRectangle representing the fringe
2516 Sets the fringe of the annotation. @param fringe the PDRectangle defining the fringe
2517 Sets the FDF dictionary in the catalog. @param fdf the FDFDictionary to set
2518 Sets the document signature. @param sig the PDSignature object to be set
2519 Sets the file specification in the FDF. @param fs the PDFileSpecification to associate with the file
2520 Sets JavaScript for the FDF document. @param js JavaScript object to be associated with the document
2521 Sets the FDFCatalog in the PDF document's trailer. @param cat the FDFCatalog to set as the root
2522 Sets the appearance dictionary for the field. @param ap the appearance dictionary to set
2523 Sets the appearance stream reference for a field. @param ref the FDFNamedPageReference to associate with the field
2524 Sets the icon fit for the field. @param fit the FDFIconFit to apply to the field
2525 Sets the action for the field. @param a the PDAction to associate with the field
2526 Sets additional actions for the PDF document. @param aa additional actions to be set
2527 Sets the fractional space to allocate in the fit object. @param space range of fractional space to allocate
2528 Sets the file specification for the current object. @param fs file specification to associate with the object
2529 Sets page information using FDFPageInfo object. @param info FDFPageInfo containing page details
2530 Sets the template reference in the COS structure. @param tRef the FDFNamedPageReference to set
2531 Sets the font file in the dictionary. @param type1Stream PDStream representing the font file
2532 Sets the font file (FONT_FILE2) in the dictionary. @param ttfStream the TrueType font stream to set
2533 Sets the font file (FONT_FILE3) in the dictionary. @param stream PDStream representing the font file
2534 Sets the CID set in the dictionary using the provided PDStream. @param stream the PDStream to associate with the CID set
2535 Sets the whitepoint in the dictionary and updates the cache. @param whitepoint non-null tristimulus values for the whitepoint
2536 Sets the black point in the dictionary. @param blackpoint the PDTristimulus object representing the black point
2537 Sets the extended graphics state for rendering. @param extendedGraphicsState new graphics state to apply
2538 Sets shading resources and updates the COS object. @param shadingResources shading data to be set
2539 Sets the PDF resources for the document. @param resources the PDResources to associate with the document
2540 Sets the PDF function and updates the COS object. @param newFunction the new PDF function to set
2541 Sets the font setting in the dictionary. @param fs the font setting to apply
2542 Sets the destination for a PDF action. @param d destination object, must be PDPageDestination with valid COSArray
2543 Sets the file specification for the PDF document. @param fs the file specification to associate with the document
2544 Sets the target directory for the PDF. @param targetDirectory the directory to be set
2545 Sets the destination for a PDF action. @param d destination object, must be a PDPageDestination
2546 Sets the file specification for the action. @param fs the file specification to be set
2547 Sets the file specification in the COS object. @param fs the file specification to set
2548 Sets Windows launch parameters. @param win the launch parameters for Windows
2549 Sets the file specification for the action. @param fs the PDFileSpecification to associate with the action
2550 Sets the file specification for the action. @param fs the PDFileSpecification to set
2551 Sets the file specification for the action. @param fs the PDFileSpecification to associate with the action
2552 Sets the F action in the actions list. @param action the PDAction to associate with the F key
2553 Sets the action for the key COSName.E. @param e the PDAction to be associated with the key
2554 Sets the X action in the actions map. @param x PDAction to be associated with the X key
2555 Sets the 'D' action in the PDF document. @param d the PDAction to set for the 'D' key
2556 Sets the U action for the PDF document. @param u the PDAction to be associated with the U key
2557 Sets the FO action in the actions collection. @param fo the PDAction to associate with the FO key
2558 Sets the BL action in the actions collection. @param bl action to be associated with the BL key
2559 Sets the PDAction for the PO key in actions. @param po the PDAction to associate with the PO key
2560 Sets the PDAction for the PC key in actions. @param pc the PDAction to be associated with the PC key
2561 Sets the PV action in the actions map. @param pv the PDAction to be set for the PV key
2562 Sets the PI action in the actions collection. @param pi the PDAction to be set for PI
2563 Sets the WC action in the actions map. @param wc the PDAction to associate with the WC key
2564 Sets the WS action in the actions map. @param ws the PDAction to associate with the WS key
2565 Sets the DS action in the actions object. @param ds the PDAction to set or null to remove
2566 Sets the WP action in the actions map. @param wp the PDAction to associate with the WP key
2567 Sets the DP action in the actions map. @param dp the PDAction to be set
2568 Sets the action associated with key 'K'. @param k the PDAction to set or null to remove
2569 Sets the action for the 'F' key. @param f the PDAction to associate with the 'F' key
2570 Sets the value of the PDAction. @param v the PDAction to set for the key COSName.V
2571 Sets the action for key 'C'. @param c the PDAction to set or null to remove the action
2572 Sets the PDAction object associated with the COSName.O key. @param o the PDAction object to set
2573 Sets the action for key C. @param c PDAction to be associated with key C
2574 Sets the target directory in the dictionary. @param targetDirectory the directory to be set
2575 Sets named destination or removes it if null. @param dest the named destination to set or null to remove
2576 Sets the appearance in the dictionary. @param appearance the appearance dictionary to set
2577 Sets optional content for the document. @param oc PDPropertyList representing optional content
2578 Sets the page for the current object. @param page the PDPage object to be set
2579 Sets the file specification in the COS object. @param file the PDFileSpecification to set
2580 Sets the border effect for a PDF object. @param be border effect dictionary to set
2581 Sets the rectangle difference for the PDF. @param rd the rectangle to set as the difference
2582 Sets the action for the current object. @param action the PDAction to be associated with the object
2583 Sets the border style for the PDF object. @param bs border style dictionary to apply
2584 Sets the destination for the PDF object. @param dest the destination to set in the PDF
2585 Sets the previous URI action for the PDF document. @param pa the PDActionURI object to set as previous action
2586 Sets the popup annotation for the current object. @param popup the PDAnnotationPopup to be set
2587 Sets the 'In Reply To' annotation. @param irt annotation to set or null to remove it
2588 Sets external data in the COS object. @param externalData data to be associated with the COS object
2589 Sets the border style in the PDF object. @param bs the border style dictionary to set
2590 Sets the border effect in the PDF dictionary. @param be the border effect dictionary to set
2591 Sets the border effect in the PDF dictionary. @param be the border effect dictionary to set
2592 Sets the rectangle difference for the PDF. @param rd rectangle to set as the difference
2593 Sets appearance characteristics for the object. @param appearanceCharacteristics the characteristics to set
2594 Sets the action for the current PDF object. @param action the PDAction to set, or null to remove the action
2595 Sets additional actions for the annotation. @param actions object containing additional actions to set
2596 Sets the border style in the PDF document. @param bs border style dictionary to apply
2597 Sets the parent field for the current terminal field. @param field the PDTerminalField to set as parent
2598 Sets the normal appearance for a PDF entry. @param entry appearance entry to set in the dictionary
2599 Sets the normal appearance of the PDF object. @param ap appearance stream to set as normal
2600 Sets the rollover appearance for a PDF entry. @param entry appearance entry to be set
2601 Sets the rollover appearance for the PDF appearance stream. @param ap the appearance stream to set as rollover
2602 Sets the down appearance for the entry. @param entry the appearance entry to set
2603 Sets the down appearance for the PDF appearance stream. @param ap the appearance stream to set as down appearance
2604 Sets the PDF property build filter. @param filter the PDPropBuildDataDict to set in the dictionary
2605 Sets the publication security property in the dictionary. @param pubSec property data for publication security
2606 Sets the application property in the dictionary. @param app application property data dictionary
2607 Sets the seed value certificate in the dictionary. @param certificate the PDSeedValueCertificate to be set
2608 Sets the property build in the dictionary. @param propBuild the property build object to set
2609 Sets the previous sibling of the outline node. @param outlineNode the outline node to set as previous sibling
2610 Sets the next sibling for the outline node. @param outlineNode the outline node to set as the next sibling
2611 Sets the destination for the PDF document. @param dest the destination to set in the COS object
2612 Sets the action for the current object. @param action the PDAction to be set
2613 Sets the structure element in the COS object. @param structureElement the structure element to set
2614 Sets the first child of the outline node. @param outlineNode the child PDOutlineNode to set
2615 Sets the last child of the outline node. @param outlineNode the outline node to set as last child
2616 Sets default resources in the PDF dictionary. @param dr the PDResources object to set as default resources
2617 Sets the XFA resource in the dictionary. @param xfa the PDXFAResource to be set
2618 Sets the signature value and applies the change. @param value the PDSignature to set @throws IOException if an I/O error occurs
2619 Sets the default value for a PDF signature. @param value the PDSignature object to set as default
2620 Sets the seed value if not null. @param sv the seed value to set, or null to skip setting
2621 Sets additional actions for a form field. @param actions the additional actions to set for the field
2622 Sets the bounding box for the current object. @param rectangle the PDRectangle defining the bounding box
2623 Sets the measure in the COSObject. @param measure the PDMeasureDictionary to set
2624 Sets thread information in the document. @param info document information to set
2625 Sets the thread for the bead. @param thread the PDThread object to associate with the bead
2626 Sets the next bead in the thread. @param next the PDThreadBead to set as the next bead
2627 Sets the previous bead in the thread. @param previous the PDThreadBead to set as previous
2628 Sets the page for the document. @param page the PDPage object to be set
2629 Sets the rectangle for the bead. @param rect the PDRectangle to set
2630 Sets the 'Marked' status in the dictionary. @param value boolean indicating the marked status
2631 Sets user properties in the dictionary. @param userProps boolean value for user properties
2632 Sets the suspect status in the dictionary to false. @param suspect indicates whether the item is a suspect
2633 Sets the mouse position tracking state. @param value true to enable tracking, false to disable it
2634 Sets the 'Open' status in the COS object.\n@param open true to open, false to close.
2635 Sets the 'FD' boolean flag in the COSDictionary. @param fd boolean value to set for the 'FD' key
2636 Sets the volatility status of the file. @param fileIsVolatile true if the file is volatile, false otherwise
2637 Sets the hidden state of the object and notifies changes. @param hidden true to hide, false to show
2638 Sets the encryption metadata flag for the document. @param encryptMetaData true to encrypt metadata, false otherwise
2639 Sets the caption state for the annotation. @param cap true to enable caption, false to disable
2640 Sets scale to fit annotation value. @param value boolean indicating scale to fit status
2641 Sets the rename flag in the template. @param value indicates whether renaming is enabled
2642 Sets anti-aliasing preference in the PDF dictionary. @param antiAlias true for enabled, false for disabled
2643 Sets the stroking overprint control flag. @param op true to enable overprint, false to disable it
2644 Sets the non-stroking overprint control flag. @param op true to enable, false to disable overprint control
2645 Sets automatic stroke adjustment flag. @param sa true to enable, false to disable stroke adjustment
2646 Sets the alpha source flag in the dictionary. @param alpha boolean indicating the alpha source status
2647 Sets the text knockout flag in the dictionary. @param tk boolean value for the knockout flag
2648 Sets the open mode for a document window. @param value desired OpenMode or null to remove the setting
2649 Sets the open mode for a document window. @param value desired OpenMode, null removes the setting
2650 Sets the open mode for a document window. @param value specifies the window opening behavior
2651 Sets the synchronous flag for actions. @param synchronous true to enable synchronous mode, false otherwise
2652 Sets the repeat action flag. @param repeat true to enable repeat, false to disable
2653 Sets the mix state for the action. @param mix boolean indicating mix state to be set
2654 Sets the caption flag in the COS object. @param cap boolean value to set for the caption
2655 Sets the 'Open' boolean value in the COS object. @param open true to set the document as open, false otherwise
2656 Sets the pre-release status in the dictionary. @param preRelease true for pre-release, false otherwise
2657 Sets a flag to control non-embedded font warnings. @param noEmbedFontWarning true to suppress warnings, false otherwise
2658 Sets the trusted mode flag in the dictionary. @param trustedMode indicates if trusted mode is enabled
2659 Sets the NEED_APPEARANCES flag in the dictionary. @param value true to set the flag, false otherwise
2660 Sets the visibility of the toolbar. @param value true to hide the toolbar, false to show it
2661 Sets the visibility of the menubar. @param value true to hide, false to show the menubar
2662 Sets the preference to hide the window UI. @param value true to hide, false to show the UI
2663 Sets the fit window preference. @param value true to enable, false to disable fit window
2664 Sets the preference for centering the window. @param value true to center the window, false otherwise
2665 Sets the display document title preference. @param value true to display title, false otherwise
2666 Sets an array of strings in the COS object by name. @param name identifier for the string array @param values array of strings to store
2667 Sets an array of COSName objects in the PDF dictionary. @param name the key for the array in the dictionary @param values array of string values to be converted to COSName
2668 Sets an array of floats in the COS object by name. @param name identifier for the float array @param values array of float values to set
2669 Parses XML for stamp annotation appearance and builds a COSDictionary. @param appearanceXML XML element containing appearance data @return COSDictionary populated with appearance information
2670 Sets the name for a given key using its PDF representation. @param key identifier for the item @param value name to associate with the key, or null to clear
2671 Sets the page mode for the document. @param mode the desired PageMode to apply
2672 Sets the page layout in the document. @param layout specifies the layout configuration
2673 Sets the version for the root item. @param version the version string to associate with the root
2674 Sets the trapped state; validates input value before updating. @param value must be 'True', 'False', or 'Unknown'
2675 Sets the style for the root; removes it if the style is null. @param style the style name to set or null to remove
2676 Constructs a PDTypedDictionaryWrapper with a specified type. @param type the type name to set in the dictionary
2677 Sets the owner name in the COS object. @param owner name to associate with the owner key
2678 Constructs a PDMarkedContentReference with a new COSDictionary and sets its type.
2679 Constructs a PDObjectReference with a new COSDictionary and sets its type.
2680 Sets the structure type for the object. @param structureType name to associate with the structure type
2681 Constructs a PDStructureNode with a specified type. @param type the type of the structure node
2682 Sets the name and notifies if it has changed. @param name new name to set for the object
2683 Sets the guideline style in the dictionary. @param style the style name to associate with the key
2684 Sets the subfilter name in the dictionary. @param subfilter name to associate with the SUB_FILTER key
2685 Sets the intent for the annotation. @param intent the intent string to associate with the annotation
2686 Sets the line ending style for the annotation. @param style the line ending style to apply
2687 Sets the icon for the annotation. @param icon the icon name to associate with the annotation
2688 Sets the document version in the catalog. @param version the version string to be set
2689 Sets the encoding type for the FDF object. @param encoding the encoding to be set
2690 Sets the scale option for fitting. @param option the scale option to set or null to clear
2691 Sets the scale type for fitting. @param scale the scale type to set
2692 Initializes a PDAbstractPattern with a new COSDictionary.
2693 Sets the type for an action. @param type the type name to associate with the action
2694 Sets the subtype name for an action. @param s the subtype name to associate with the action
2695 Sets the subtype for the current object. @param subType the subtype name to set
2696 Sets the appearance state for the object. @param as the appearance state to set
2697 Sets the attachment name in the COS object. @param name the name to associate with the attachment
2698 Sets the line ending style for the PDF object. @param style the line ending style to set
2699 Sets the caption positioning for the object. @param captionPositioning value to set for caption positioning
2700 Sets the highlight mode for the object. @param mode highlight mode to apply, or null to clear
2701 Sets the reply type in the COS object. @param rt the reply type to be set
2702 Sets the intent for the COS object.\n@param it the intent string to associate with the COS object
2703 Sets the name for the COS object. @param name the name to associate with the COS object
2704 Sets the name in the COS object. @param name the name to associate with the COS object
2705 Sets the highlighting mode; validates input and updates COS object. @param highlightingMode mode to set, must be one of 'N', 'I', 'O', 'P', or 'T'
2706 Sets the style name for the object. @param s the style name to set
2707 Initializes PDExternalDataDictionary with a new COSDictionary and sets its type to ExData.
2708 Sets the subtype for the current object. @param subtype the subtype name to be set
2709 Sets the name in the dictionary. @param name the name to associate with the key, or null to clear
2710 Sets the URL type in the dictionary. @param urlType the URL type to associate or null to clear
2711 Initializes PDDocumentOutline and sets its type name to OUTLINES.
2712 Initializes PDDocumentOutline from COSDictionary. @param dic COSDictionary to initialize the outline
2713 Sets the default value after validation. @param value the value to set as default
2714 Initializes a PDMeasureDictionary and sets its type in the COSDictionary.
2715 Sets the subtype for the current object. @param subtype the name to associate with the SUBTYPE key
2716 Initializes PDNumberFormatDictionary with a new COSDictionary and sets its type.
2717 Sets the name for the object using the provided value. @param name name to associate with the object
2718 Initializes a PDTransition with a specified style. @param style the transition style to set
2719 Sets the dimension for the transition. @param dimension transition dimension to set
2720 Sets the motion transition name in the COS object. @param motion the motion transition to set
2721 Sets a date item by key after converting it to a formatted string. @param key identifier for the date item @param date Calendar object to format
2722 Sets a string item by key; encodes if value is not null. @param key identifier for the item @param value input string to encode
2723 Sets an embedded string in a COSDictionary. @param embedded dictionary identifier @param key key for the string item @param value string to set or null to skip
2724 Sets the document language. @param language the language code to set for the document
2725 Sets the document title in the info dictionary. @param title the title string to set
2726 Sets the document's author. @param author the name of the author to set
2727 Sets the document subject. @param subject the subject string to be set in the document info
2728 Sets the document's keywords. @param keywords a comma-separated list of keywords for the document
2729 Sets the document creator string. @param creator the name of the document creator
2730 Sets the producer string in the document info. @param producer the producer string to set
2731 Sets the prefix string; removes it if null. @param prefix the prefix to set or null to remove it
2732 Sets the Unicode file name. @param file the Unicode file name to set
2733 Sets the file name in the file system. @param file name of the file to set
2734 Sets the file description. @param description text to describe the file
2735 Sets the element identifier in the COS object. @param id the identifier string to set
2736 Sets the document title. @param title the title string to set in the COS object
2737 Sets the document language. @param language the language code to set in the PDF object
2738 Sets the alternate description for the COS object. @param alternateDescription string to set as the alternate description
2739 Sets the expanded form in the COS object. @param expandedForm string representation of the expanded form
2740 Sets the actual text for the COS object. @param actualText string to set as actual text
2741 Updates the formatted value and notifies changes. @param formattedValue new formatted string value
2742 Sets the date for the annotation. @param date the date string to set in the annotation
2743 Sets the name in the annotation. @param name the name to set in the annotation
2744 Sets the contents of the annotation. @param contents the string to set as annotation content
2745 Sets the title of the annotation. @param title the title to set for the annotation
2746 Sets the subject of the annotation. @param subject the subject string to be set
2747 Sets the annotation symbol based on input. @param symbol input string to determine the annotation type
2748 Sets the default appearance for the annotation. @param appearance string representing the default appearance
2749 Sets the default style for the annotation. @param style the style string to be set
2750 Sets the caption style for the annotation. @param captionStyle the style string to be set
2751 Sets the annotation state. @param state the state string to be set in the annotation
2752 Sets the state model for the annotation. @param stateModel string representing the state model
2753 Sets the status in the FDF document. @param status the new status string to be set
2754 Sets the target string in the FDF document. @param target the target string to set
2755 Sets the partial name of a field. @param partial the partial field name to set
2756 Sets the name in the reference object. @param name the name string to set
2757 Sets the name in the dictionary. @param name the name to set, encoded if not null
2758 Initializes PDOptionalContentProperties with default settings and a named dictionary.
2759 Sets the action string for the object. @param sAction the action string to set
2760 Sets the value of F in the action object. @param f the string value to set for F
2761 Sets the string value for the D key in the action object. @param d input string to set for the D key
2762 Sets the string value for the key COSName.O. @param o input string to set
2763 Sets the string parameter 'p' in the action object. @param p the string value to set
2764 Sets the URI in the action object. @param uri the URI string to be set
2765 Sets the filename in the dictionary. @param filename the name of the file to set
2766 Sets the annotation name in the dictionary. @param name the name of the annotation to set
2767 Sets the filename in parameters. @param file the name of the file to set
2768 Sets the directory path for parameters. @param dir the directory path as a string
2769 Sets the operation parameter. @param op the operation string to set
2770 Sets execution parameter by encoding the given string. @param param the execution parameter to set
2771 Sets the contents of the dictionary. @param value string to set as contents
2772 Sets the modified date in the COSObject. @param m date string to set as modified date
2773 Sets the annotation name. @param nm the name to set for the annotation
2774 Sets the default appearance string for a PDF object. @param daValue the default appearance string to set
2775 Sets the default style string in the COS object. @param defaultStyleString the style string to set
2776 Sets the title in a PDF object. @param t the title string to set
2777 Sets the document subject in the COS object. @param subj the subject string to set
2778 Sets the state in the COS object. @param state the state string to set
2779 Sets the state model in the COS object. @param stateModel the state model string to set
2780 Sets the normal caption for the object. @param caption the string to set as the normal caption
2781 Sets the rollover caption string in the COS object. @param caption the caption to set for rollover
2782 Sets the alternate caption for the object. @param caption the alternate caption string to set
2783 Sets the date in the dictionary. @param date the date string to set
2784 Sets the URL in the dictionary. @param url the URL string to be set
2785 Sets the URL in the dictionary. @param url the URL string to set in the dictionary
2786 Sets the name in the dictionary. @param name the name string to set
2787 Sets the location in the dictionary. @param location the location string to set
2788 Sets the reason in the dictionary. @param reason the reason string to set in the dictionary
2789 Sets the contact information in the dictionary. @param contactInfo the contact information string to set
2790 Sets the document title in the COS object. @param title the title string to set
2791 Sets the default appearance string in the dictionary. @param daValue the appearance string to set
2792 Sets the default value in the COS object. @param value the default string value to set
2793 Sets a partial name in the dictionary, ensuring it doesn't contain a period. @param name the partial name to set @throws IllegalArgumentException if name contains a period
2794 Sets the alternate field name in the dictionary. @param alternateFieldName the name to set as alternate field
2795 Sets the mapping name in the dictionary. @param mappingName the name to be set in the dictionary
2796 Sets a string value in the COS object. @param value the string to set, may trigger change events @throws IOException if an I/O error occurs
2797 Sets a value in the COS object and applies the change. @param value string to set in the COS object @throws IOException if an I/O error occurs
2798 Sets the default value for a PDF object. @param value the default string value to set
2799 Sets default appearance for annotations and updates widget entries if present. @param daValue the default appearance string to set
2800 Sets the scale ratio for the COS object. @param scaleRatio the scale ratio as a string
2801 Sets an integer value for a given key in the PDF context. @param key identifier for the item @param value integer value to store
2802 Sets an integer in the embedded COSDictionary. @param embeddedDictionary the dictionary identifier @param key the item key @param value integer value to store
2803 Updates a flag in the specified field based on the value. @param field the field to update @param bitFlag the bit to set or clear @param value true to set the flag, false to clear it
2804 Sets the structure parents for the page. @param structParents integer value for structure parents
2805 Sets the rotation angle for the page. @param rotation angle in degrees to set for the page rotation
2806 Initializes PDPageTree with root dictionary and document. @param root the root COSDictionary for the page tree @param document the associated PDDocument object
2807 Removes a node from its parent's kids and updates ancestor counts. @param node the COSDictionary node to remove
2808 Adds a page to the document and updates ancestor counts. @param page the PDPage to be added
2809 Sets the starting page number. @param start positive integer for page numbering start @throws IllegalArgumentException if start is non-positive
2810 Sets the bits per sample in the COS object. @param bps integer value for bits per sample
2811 Sets the MCID (Marker Context Identifier) for the object. @param mcid the MCID value to set
2812 Sets the revision number, must be non-negative. @param revisionNumber the revision number to set @throws IllegalArgumentException if revisionNumber < 0
2813 Sets the next key in the parent tree. @param parentTreeNextkey integer value for the next key
2814 Sets the length in the crypt filter dictionary. @param length integer value representing the length
2815 Sets the PDF version in the dictionary. @param version the integer version to set
2816 Sets the length in the dictionary. @param length the length value to set
2817 Sets the revision number in the dictionary. @param revision the new revision value to store
2818 Sets the permissions in the dictionary. @param permissions integer value representing permissions
2819 Sets the page number for the annotation. @param page the page number to set
2820 Sets text justification based on input string. @param justification type of justification ("centered" or "right")
2821 Sets the rotation angle for the annotation. @param rotation angle in degrees to set
2822 Sets field flags using the provided integer value. @param ff integer flags to set for the field
2823 Sets field flags using the provided integer value. @param ff integer value for field flags
2824 Sets clear field flags for the PDF. @param ff integer value representing field flags
2825 Sets widget field flags. @param f integer flags for the widget field
2826 Sets widget field flags. @param ff integer flags for the widget field
2827 Sets flags for clearing widget fields. @param ff integer flags to set for the widget field
2828 Sets the flags value and updates the dictionary. @param flags integer value representing the flags
2829 Sets character widths in the font dictionary based on glyph metrics. @param font the font dictionary to update @param glyphList mapping of glyph names to Unicode
2830 Sets the paint type in the pattern dictionary. @param paintType integer representing the paint type
2831 Sets the pattern type in the pattern dictionary. @param patternType integer representing the pattern type
2832 Sets the paint type in the COS object. @param paintType integer value representing the paint type
2833 Sets the tiling type for the COS object. @param tilingType integer representing the tiling type
2834 Sets the shading type in the dictionary. @param shadingType integer representing the shading type
2835 Sets the number of bits per flag in the COS object. @param bitsPerFlag integer value for bits per flag
2836 Sets the number of vertices per row. @param verticesPerRow number of vertices to set
2837 Sets bits per color component and updates the COS object. @param bitsPerComponent number of bits per component
2838 Sets the bits per coordinate value. @param bitsPerCoordinate number of bits for coordinate precision
2839 Sets the line cap style in the PDF dictionary. @param style integer representing the line cap style
2840 Sets the line join style in the PDF dictionary. @param style integer representing the line join style
2841 Sets overprint mode; removes if null, otherwise updates with given value. @param overprintMode integer value for overprint mode, or null to remove
2842 Sets action flags. @param flags integer value representing action flags
2843 Sets action flags. @param flags integer value representing action flags
2844 Sets the page number; removes if negative, updates if non-negative. @param pageNumber the page number to set or remove
2845 Sets the annotation index; removes if negative, updates otherwise. @param index the new annotation index
2846 Sets the annotation flags. @param flags integer value representing annotation flags
2847 Sets the structure parent identifier. @param structParent integer representing the structure parent
2848 Sets the Q value in the COS object. @param q integer value to store as Q
2849 Sets the rotation value of the object. @param rotation the rotation angle to be set
2850 Sets the value of P in the dictionary; must be between 0 and 3. @param p integer value to set for P
2851 Sets the timestamp requirement flag. @param flag true to require timestamp, false otherwise
2852 Sets the open count in the COS object. @param openCount the number of times the object is opened
2853 Sets the 'Q' value in the dictionary. @param q integer value to store as 'Q'
2854 Sets field flags in the dictionary. @param flags integer value representing field flags
2855 Sets the top index or removes it if null. @param topIndex the index to set or null to remove the item
2856 Sets the maximum length value. @param maxLen integer value for maximum length
2857 Sets the Q value in the COS object. @param q integer value to set for Q
2858 Sets a long value associated with a key. @param key identifier for the item @param value long value to store
2859 Writes the PDF trailer to the output stream. @param doc the COSDocument containing the trailer information @throws IOException if an I/O error occurs during writing
2860 Sets the revision number in the dictionary. @param revision the revision number to set
2861 Sets the minimum revision value in the dictionary. @param revision the minimum revision to set
2862 Sets a float value for a specified key in PDF representation. @param key identifier for the item @param value the float value to set
2863 Sets the user unit for the page. @param userUnit positive float value for user unit @throws IllegalArgumentException if userUnit is non-positive
2864 Sets the guideline width in the dictionary. @param width the float value for the guideline width
2865 Sets the opacity of the annotation. @param opacity value to set for annotation opacity
2866 Sets the leader length for the annotation. @param leaderLength the length value to set
2867 Sets the leader extension value for the annotation. @param leaderExtend the float value to set as leader extension
2868 Sets the leader offset for the annotation. @param leaderOffset the float value to set as leader offset
2869 Sets the font weight in the document dictionary. @param fontWeight the weight of the font to set
2870 Sets the italic angle for the document. @param angle the italic angle to set as a float
2871 Sets the ascent value in the dictionary. @param ascent the float value representing ascent height
2872 Sets the descent value in the dictionary. @param descent the float value representing descent
2873 Sets the leading (line spacing) for text. @param leading the float value for line spacing
2874 Sets the cap height value and updates the dictionary entry. @param capHeight float value for cap height
2875 Sets the x-height value and updates the dictionary entry. @param xHeight the float value for x-height
2876 Sets the vertical stem width in the dictionary. @param stemV the float value representing the vertical stem width
2877 Sets the stem height in the dictionary. @param stemH the float value for stem height
2878 Sets the average width in the dictionary. @param averageWidth the average width value to set
2879 Sets the maximum width value for the PDF document. @param maxWidth the maximum width to set
2880 Sets the missing width value for the PDF dictionary. @param missingWidth the float value representing missing width
2881 Sets the X step value in the COS object. @param xStep the float value to set for the X step
2882 Sets the Y step value for the PDF object. @param yStep the float value representing the Y step
2883 Sets the volume level, ensuring it's between -1.0 and 1.0. @param volume the desired volume level
2884 Sets the leader line length. @param leaderLineLength the length of the leader line to set
2885 Sets the leader line extension length. @param leaderLineExtensionLength length value to set
2886 Sets the leader line offset length. @param leaderLineOffsetLength value to set for the leader line offset
2887 Sets the constant opacity value. @param ca the constant opacity value to set
2888 Sets the width, storing as int if whole number, else as float. @param w width value to set
2889 Sets the minimum required capability in the dictionary. @param minimumRequiredCapability value to set for the key COSName.V
2890 Sets the CYX float value in the COS object. @param cyx the float value to set for CYX
2891 Parses a COS stream from a dictionary, validating length and handling errors. @param dic COSDictionary containing stream data @return COSStream object created from the parsed data @throws IOException if stream length is missing or invalid
2892 Clones and merges COSBase objects from source to target. @param base source COSObjectable to clone from @param target target COSObjectable to merge into
2893 Parses a PDF document and returns a PDDocument instance. @param lenient allows for non-strict parsing; returns null on failure. @return PDDocument object or throws IOException on error.
2894 Processes operators in a PDF content stream. @param contentStream the source PDF content stream @throws IOException if an I/O error occurs
2895 Parses tokens into a list until EOF or error. @return List of parsed objects @throws IOException if an I/O error occurs
2896 Extracts glyph bounding box from PDF stream. @return PDRectangle or null if not found or invalid data @throws IOException if an I/O error occurs during parsing
2897 Retrieves width from PDF stream; throws IOException on unexpected end of stream. @return width as float
2898 Writes the PDF document without signing. @param doc the PDDocument to write @throws IOException if an I/O error occurs during writing
2899 Saves PDF incrementally to the provided output stream. @param output output stream for the PDF document @throws IOException if an I/O error occurs during saving
2900 Constructs a PDDocument with a memory-only stream cache.
2901 Retrieves the document catalog, initializing it if not already set. @return PDDocumentCatalog associated with the document
2902 Retrieves a COSDictionary by page number, checking for recursion. @param pageNum the page number to retrieve @param node the COSDictionary node to search within @param encountered the count of pages encountered so far @return the COSDictionary for the specified page number
2903 Creates a PDFileSpecification from a COSBase object. @param base COSBase input for file specification @return PDFileSpecification or null if base is null
2904 Notifies changes if the structure element is present. Calls attributeChanged on the structure element.
2905 Appends a COSObject from a COSObjectable if not null. @param objectable the COSObjectable to append
2906 Inserts a COSObjectable before a reference object if not null. @param newKid the COSObjectable to insert @param refKid the reference object before which newKid is inserted
2907 Removes a child object if not null. @param objectable the child object to remove @return true if removed, false if objectable is null
2908 Sets standard crypt filter dictionary for encryption. @param cryptFilterDictionary the crypt filter data to set
2909 Sets the default crypt filter dictionary for PDF encryption. @param defaultFilterDictionary the crypt filter dictionary to set
2910 Constructs FDFAnnotationCaret and initializes its subtype.
2911 Constructs an FDFAnnotationCircle and initializes its subtype.
2912 Constructs FDFAnnotationFileAttachment and sets its subtype name.
2913 Initializes a new FDFAnnotationFreeText with subtype set to SUBTYPE.
2914 Constructs FDFAnnotationInk and initializes its subtype.
2915 Constructs an FDFAnnotationLine and sets its subtype.
2916 Constructs an FDFAnnotationLink and sets its subtype.
2917 Constructs FDFAnnotationPolygon and initializes its subtype.
2918 Constructs FDFAnnotationPolyline and initializes its subtype.
2919 Constructs an FDFAnnotationSound and sets its subtype.
2920 Constructs a new FDFAnnotationSquare and initializes its subtype.
2921 Constructs an FDFAnnotationStamp and sets its subtype name.
2922 Constructs FDFAnnotationText and initializes its subtype.
2923 Initializes a new FDFAnnotationTextMarkup with default settings.
2924 Builds vertical metrics for a font based on glyph data. @param cidFont COSDictionary for font data
2925 Initializes a new instance of PDSimpleFont.
2926 Retrieves PDOptionalContentGroup by name. @param name the name of the content group @return PDOptionalContentGroup or null if not found
2927 Retrieves a collection of PDOptionalContentGroup from OCGs. @return Collection of PDOptionalContentGroup objects
2928 Sets the line width for drawing. @param width the line width to set, or null to remove it
2929 Sets the miter limit for graphics operations. @param miterLimit the miter limit value to set
2930 Sets the flatness tolerance for PDF rendering. @param flatness the float value for flatness tolerance
2931 Sets the smoothness tolerance for rendering. @param smoothness float value for smoothness or null to remove it
2932 Sets the stroking alpha constant for PDF rendering. @param alpha transparency level for stroking (0.0 to 1.0)
2933 Sets the non-stroking alpha constant. @param alpha float value for non-stroking transparency
2934 Initializes a PDAnnotationLink with a subtype name.
2935 Initializes a new PDAnnotationMarkup object.
2936 Constructs a PDAnnotationPopup and sets its subtype name.
2937 Initializes a PDAnnotationWidget with a subtype name.
2938 Constructs a PDAnnotationLink from a COSDictionary. @param field the COSDictionary representing the link annotation
2939 Constructs a PDAnnotationMarkup from a COSDictionary. @param dict the COSDictionary initializing the annotation
2940 Constructs a PDAnnotationPopup from a COSDictionary. @param field the COSDictionary for the annotation
2941 Initializes PDAnnotationUnknown with a COSDictionary. @param dic the COSDictionary for the annotation
2942 Constructs a PDAnnotationWidget from a COSDictionary. @param field the COSDictionary representing the annotation
2943 Sets rectangle differences uniformly for all margins. @param difference margin difference for all sides
2944 Sets all rectangle margins to the specified difference value. @param difference uniform margin difference for all sides
2945 Sets all rectangle margin differences to a uniform value. @param difference uniform margin difference for all sides
2946 Sets border line style and width based on provided parameters. @param lineWidth desired line width @param bs border style dictionary, may be null @param border array containing border style data @throws IOException if an I/O error occurs
2947 Constructs and adds key usage string from provided character flags. @param digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly, decipherOnly
2948 Constructs a PDCheckBox from a given PDAcroForm. @param acroForm the PDAcroForm instance
2949 Initializes a PDComboBox with the specified PDAcroForm. @param acroForm the PDAcroForm instance
2950 Constructs a PDListBox from a given PDAcroForm. @param acroForm the PDAcroForm instance
2951 Sets the value and updates the choice field; removes indices for single value. @param value the string value to set @throws IOException if an I/O error occurs
2952 Retrieves the border array, ensuring it has three elements. @return COSArray with border values, defaults to [0,0,1] if not found
2953 Initializes COSWriterCompressionPool with document and compression parameters. @param document PDDocument instance for the PDF @param parameters optional CompressParameters for compression settings
2954 Retrieves an embedded date using provided identifiers. @param embedded identifier for the embedded dictionary @param key identifier for the desired date @return Calendar object or null if not found
2955 Creates a PDImageXObject from a BufferedImage. @param document the PDDocument to hold the image @param image the input BufferedImage to encode @return PDImageXObject representing the image @throws IOException if encoding fails
2956 Adds a corner curl using two angles and a radius. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius radius for the curl @param cx center x-coordinate @param cy center y-coordinate @param alpha angle adjustment @param alphaPrev previous angle adjustment @param addMoveTo flag for moveTo action
2957 Draws an ellipse using specified bounding coordinates. @param left left boundary, bottom lower boundary, right right boundary, top upper boundary
2958 Formats and displays text content with optional line wrapping. @throws IOException if an I/O error occurs during processing
2959 Calculates appropriate font size based on content rectangle and font properties. @param font the font used for text rendering @param contentRect the rectangle defining the text area @return calculated font size as a float
2960 Reads and assigns font encoding from the dictionary. @throws IOException if an error occurs during reading
2961 Determines if the font is symbolic based on various checks. @return true if symbolic, false if not, or null if unknown
2962 Retrieves a TrueTypeFont mapping based on base font or fallback descriptor. @param baseFont the desired font name @param fontDescriptor the font descriptor for fallback @return FontMapping object with the found font
2963 Retrieves FontMapping for a base font or fallback font if not found. @param baseFont the name of the desired font @param fontDescriptor the descriptor for fallback font analysis @return FontMapping object with the found font
2964 Checks if XFA is dynamic based on its existence and field count. @return true if XFA exists and has no fields, false otherwise
2965 Retrieves rich content string from annotation's dictionary. @return decoded rich content string or empty if not found
2966 Writes XML representation of a field to the output. @param output Writer to write XML data
2967 Retrieves rich text value from inheritable attribute. @return decoded rich text string or empty if not applicable
2968 Initializes PDFunctionType4 from a function stream. @param functionStream COSBase stream for function data @throws IOException if stream processing fails
2969 Interpolates sample values based on coordinates and step index. @param coord current coordinate values @param step current step index for interpolation @return array of interpolated sample values
2970 Initializes Type6ShadingContext with shading parameters and color model. @param shading shading type, @param colorModel color representation, @param xform transformation, @param matrix shading operations, @param deviceBounds area for pixel table
2971 Initializes Type7ShadingContext with shading and color model parameters. @param shading shading type, @param colorModel color representation, @param xform transformation, @param matrix shading operations, @param deviceBounds area for pixel table
2972 Retrieves byte array from XFA, handling COSArray or COSStream types. @return byte array of XFA data or empty array if none @throws IOException if reading fails
2973 Initializes PDPageFitDestination with a two-element array and sets the second element's name.
2974 Sets bounding box type in the array based on the fitBoundingBox flag. @param fitBoundingBox true to set bounded type, false for regular type
2975 Initializes PDPageFitHeightDestination with default values.
2976 Sets the left value in the array; null if -1, otherwise sets integer x at index 2. @param x value to set or -1 to store null
2977 Configures bounding box fitting in the array. @param fitBoundingBox true to fit, false otherwise
2978 Initializes a PDPageFitRectangleDestination with a predefined array size.
2979 Sets the left value in the array, handling null case for -1. @param x value to set at index 2, or null if -1
2980 Sets the bottom value in the array at index 3. @param y value to set or null if -1
2981 Sets the right value in the array, adjusting size if necessary. @param x value to set, -1 clears the position
2982 Sets the top value in the array; null if y is -1, else stores y at index 5. @param y value to set or -1 to clear the position
2983 Initializes PDPageFitWidthDestination with a fixed array size and sets a type name.
2984 Sets the top value in an array; null if -1, else stores the value at index 2. @param y value to set or -1 to clear the position
2985 Sets bounding box fit type in an array based on input flag. @param fitBoundingBox true for bounded type, false for default type
2986 Initializes PDPageXYZDestination, setting up an array with a specific size and name.
2987 Sets the left value in the array; null if -1, otherwise stores the integer x. @param x value to set at index 2
2988 Sets the top value in the array; null if -1, else sets specified integer. @param y value to set at index 3
2989 Sets zoom level in the array; null if zoom is -1. @param zoom the zoom level to set
2990 Parses a COS dictionary value and retrieves the corresponding object. @return COSBase object or COSNull if invalid numbers are encountered @throws IOException if an I/O error occurs
2991 Retrieves decoded parameters from a PDF dictionary. @return List of decoded parameters or null if none found
2992 Retrieves file decoding parameters from a COS dictionary. @return List of decoding parameters or null if not found
2993 Constructs a PDCalGray instance with CALGRAY color space.
2994 Constructs a PDCalRGB object with CALRGB color space. Inherits from PDColor with CALRGB constant.
2995 Initializes a PDLab color space with COSName.LAB.
2996 Constructs a PDCalGray object from a COSArray. @param array the COSArray to initialize the object
2997 Constructs PDCalRGB from a COSArray of RGB components. @param rgb array of RGB color components
2998 Constructs a PD color space from a COSArray. @param lab COSArray containing color space data
2999 Loads ICC profile and sets up color space; falls back on error. @throws IOException if input stream creation fails or profile loading fails
3000 Sets component range using the specified PDRange. @param range the range to set or null to reset defaults
3001 Sets the B component range using the specified PDRange. @param range the range to set or null to reset defaults
3002 Retrieves the crop box of a page, defaulting to media box if not set. @return PDRectangle representing the crop box dimensions
3003 Resolves bounding box from appearance stream or field widget. @param fieldWidget the annotation widget for the field @param appearanceStream the appearance stream to fetch bounding box @return PDRectangle representing the bounding box
3004 Sets the bounding box and notifies changes. @param bbox the rectangle to set as the bounding box
3005 Sets the color value in the dictionary and notifies changes. @param name the color identifier @param value the PDGamma object representing the color
3006 Sets four color values in the COS object and notifies changes. @param name identifier for the color setting @param value new color value or null to remove
3007 Creates a PDPage with default LETTER size. Initializes with PDRectangle.LETTER media box.
3008 Adds an object to a resource dictionary or retrieves existing key if present. @param kind resource type, @param prefix base for key, @param object value to associate @return unique COSName key for the object
3009 Associates a font with a specified name in the PDF dictionary. @param name the key for the font in the dictionary @param font the font object to associate with the key
3010 Associates a color space with a given name in a COSDictionary. @param name identifier for the color space @param colorSpace the PDColorSpace object to associate
3011 Associates a PDExtendedGraphicsState with a COSName in the EXT_G_STATE dictionary. @param name the key for the graphics state @param extGState the graphics state to associate with the key
3012 Adds shading object to the COSDictionary. @param name identifier for the shading item @param shading shading object to add
3013 Adds a pattern to the COSDictionary. @param name identifier for the pattern @param pattern the pattern to add
3014 Adds properties to a COSDictionary using a specified name. @param name item key in the dictionary @param properties properties to associate with the key
3015 Associates a PDXObject with a specified COSName in the XOBJECT dictionary. @param name identifier for the XOBJECT entry @param xobject the object to associate with the name
3016 Retrieves FDFDictionary from catalog or creates a new one if not found. @return FDFDictionary instance
3017 Initializes an FDFDocument with default settings and a new FDFCatalog.
3018 Retrieves the FDFCatalog from the PDF document's trailer. @return FDFCatalog instance, creates a new one if not present
3019 Retrieves fractional space allocation as PDRange. @return PDRange with specified min/max or default if not found
3020 Initializes a new PDTilingPattern with default values and resources.
3021 Retrieves or creates an appearance dictionary for the annotation. @return PDAppearanceDictionary object
3022 Inserts a new sibling before the current outline item. @param newSibling the outline item to insert
3023 Inserts a new sibling after the current outline item. @param newSibling the outline item to insert
3024 Appends a new child to the outline item. @param newChild the PDOutlineItem to add as a child
3025 Prepends a new child to the outline item. @param newChild the PDOutlineItem to prepend
3026 Associates a PDThreadBead with the current thread and sets it as an item. @param bead the PDThreadBead to associate, or null to skip association
3027 Constructs a PDThreadBead and initializes its dictionary and links to itself.
3028 Appends a PDThreadBead to the current thread. @param append the PDThreadBead to append
3029 Updates the name in the COSObject dictionary and notifies changes. @param name identifier for the item @param value name to associate, or null to clear
3030 Sets the rendering intent in the dictionary. @param ri rendering intent value to associate with the key "RI"
3031 Sets the name for key "N". @param name the name to associate with key "N"
3032 Sets the style name for the object. @param s the style name to associate with the object
3033 Initializes PDPageLabels with a document and sets default page label style. @param document the PDDocument to associate with this label
3034 Constructs a PDStructureElement with a type and parent node. @param structureType the type of the structure element @param parent the parent PDStructureNode
3035 Constructs a PDStructureTreeRoot object, initializing with a predefined type.
3036 Constructs a PDShadingPattern and sets its pattern type to shading.
3037 Initializes a PDAction with a new COSDictionary and sets its type.
3038 Retrieves the document outline from the root. @return PDDocumentOutline or null if not present
3039 Retrieves the parent outline node from the current object. @return PDOutlineNode or null if no parent exists
3040 Sets a value at a specified index, validating the index first. @param index position to set, must be valid within export values @throws IOException if an I/O error occurs during update
3041 Constructs a PDRectlinearMeasureDictionary and sets its subtype.
3042 Constructs a PDTransition with default style (R).
3043 Sets a date item by key after converting it to a COSName. @param key identifier for the date item @param date Calendar object to format
3044 Sets the embedded date in a COSDictionary. @param embedded the identifier for the dictionary @param key the identifier for the date item @param date Calendar object to set as date
3045 Sets the creation date for the document. @param date Calendar object representing the creation date
3046 Sets the modification date for the document. @param date Calendar object representing the modification date
3047 Sets the creation date of the annotation. @param date Calendar object representing the creation date
3048 Sets the modified date in the COSObject. @param c Calendar object representing the modified date
3049 Sets the document's creation date. @param creationDate Calendar object representing the creation date
3050 Sets the signature date in the dictionary. @param cal Calendar object representing the signature date
3051 Sets custom metadata value for a specified field. @param fieldName identifier for the metadata field @param fieldValue value to be associated with the field
3052 Updates a string in the dictionary and notifies changes. @param name key for the string item @param value new string value to set
3053 Sets the 'Base' string in the COSObject. @param base the string value to set as 'Base'
3054 Sets the application version in the dictionary. @param applicationVersion the version string to store
3055 Sets units in the COSDictionary. @param units string representing the units to set
3056 Sets fractional display option; throws exception for invalid values. @param fractionalDisplay valid options: null, "D", "F", "R", or "T"
3057 Sets the thousands separator for formatting. @param thousandsSeparator string used as the thousands separator
3058 Sets the decimal separator in the COS object. @param decimalSeparator the string to set as the decimal separator
3059 Sets the label prefix string in the COSObject. @param labelPrefixString the prefix string to set
3060 Sets the label suffix string in the COSObject. @param labelSuffixString the suffix string to set
3061 Sets label position if valid; throws exception if invalid input. @param labelPositionToValue new label position or null
3062 Sets the MAC subtype in the COSDictionary. @param macSubtype the MAC subtype string to set or null to skip
3063 Sets the Mac creator string in the COSDictionary parameters. @param macCreator the Mac creator string to set
3064 Sets the Mac resource fork in the COSDictionary. @param macResFork string value for the resource fork
3065 Initializes FDFField from XML element, setting name, value, and child fields. @param fieldXML XML element representing the field @throws IOException on XML processing errors
3066 Initializes PDOptionalContentGroup with a name and sets its type. @param name the name for the content group
3067 Adds a PDOptionalContentGroup to the COSArray and updates the order entry. @param ocg the optional content group to add
3068 Retrieves the BaseState from the COSDictionary. @return BaseState corresponding to the BASE_STATE key
3069 Toggles the enabled state of a content group. @param group the content group to enable/disable @param enable true to enable, false to disable @return true if the state was changed, false otherwise
3070 Sets an integer in the PDF context and notifies changes. @param name identifier for the integer item @param value integer value to store
3071 Updates a number in the dictionary and notifies on change. @param name key for the number to update @param value new integer value to set
3072 Sets the denominator value in the COSObject. @param denominator integer value to set for the key "D"
3073 Sets the invisibility flag for the annotation. @param invisible true to make it invisible, false to make it visible
3074 Sets the visibility flag of the annotation. @param hidden true to hide the annotation, false to show it
3075 Sets the printed flag for the annotation. @param printed true to mark as printed, false otherwise
3076 Sets the no-zoom flag for an annotation. @param noZoom true to disable zoom, false to enable it
3077 Sets the no-rotate flag for the annotation. @param noRotate true to set the flag, false to clear it
3078 Sets the no-view flag for the annotation. @param noView true to set the flag, false to clear it
3079 Sets the read-only flag for the annotation. @param readOnly true to make it read-only, false to allow edits
3080 Sets the locked state of the annotation. @param locked true to lock, false to unlock the annotation
3081 Sets the toggle for no view flag in the annotation. @param toggleNoView true to enable, false to disable the flag
3082 Sets the locked contents flag for the annotation. @param lockedContents true to lock, false to unlock
3083 Sets the visibility flag of the object. @param invisible true to hide, false to show the object
3084 Sets the hidden flag for the PDF object. @param hidden true to hide, false to show the object
3085 Sets the printed flag for the COS object. @param printed true to mark as printed, false otherwise
3086 Sets the zoom flag in the COS object. @param noZoom true to disable zoom, false to enable it
3087 Sets the no-rotate flag for the COSObject. @param noRotate true to disable rotation, false to enable it
3088 Sets the no-view flag in the COSObject. @param noView true to set the flag, false to clear it
3089 Sets the read-only flag for the associated COS object. @param readOnly true to set as read-only, false to allow editing
3090 Sets the locked state of the object. @param locked true to lock, false to unlock
3091 Sets the toggle for no view flag in the COS object. @param toggleNoView true to enable, false to disable the flag
3092 Sets the locked state of contents. @param lockedContents true to lock, false to unlock contents
3093 Sets the filter required flag in the COS object. @param flag true to require filter, false otherwise
3094 Sets the sub-filter requirement flag. @param flag true to require the sub-filter, false otherwise
3095 Sets the digest method requirement flag. @param flag true to require the digest method, false otherwise
3096 Sets the V required flag in the COS object. @param flag true to set the flag, false to clear it
3097 Sets the reason required flag in the COS object. @param flag true to require a reason, false otherwise
3098 Sets the legal attestation requirement flag. @param flag true to require attestation, false otherwise
3099 Sets the add revision info flag in the COS object. @param flag true to require, false to not require revision info
3100 Sets the required flag for the subject in the dictionary. @param flag true to mark as required, false otherwise
3101 Sets the issuer required flag in the dictionary. @param flag true to require issuer, false otherwise
3102 Sets the OID required flag in the dictionary. @param flag true to require OID, false otherwise
3103 Sets the requirement for Subject DN in the dictionary. @param flag true to require Subject DN, false otherwise
3104 Sets the key usage requirement flag in the dictionary. @param flag true to require key usage, false otherwise
3105 Sets the URL required flag in the dictionary. @param flag true to require URL, false otherwise
3106 Sets the italic flag for the COS object. @param italic true to enable italic, false to disable
3107 Sets the bold flag for the COS object. @param bold true to enable bold, false to disable it
3108 Updates the signature existence flag in the dictionary. @param signaturesExist true to indicate signatures exist, false otherwise
3109 Sets the append-only flag in the dictionary. @param appendOnly true to enable, false to disable append-only mode
3110 Sets the sort flag in the COS object. @param sort true to enable sorting, false to disable it
3111 Sets the multi-select flag in the COS object. @param multiSelect true to enable multi-select, false to disable it
3112 Sets the do not spell check flag in the COS object. @param doNotSpellCheck true to disable spell checking, false to enable it
3113 Sets the commit flag based on selection change. @param commitOnSelChange true to enable, false to disable committing on selection change
3114 Sets the combo flag in the COS object. @param combo true to set the flag, false to clear it
3115 Sets the edit flag for the COS object. @param edit true to enable editing, false to disable
3116 Sets the read-only flag in the dictionary. @param readonly true to make read-only, false to allow editing
3117 Sets the required flag in the dictionary. @param required true to set as required, false otherwise
3118 Sets the no-export flag in the dictionary. @param noExport true to set the flag, false to clear it
3119 Constructs a PDPushButton from a PDAcroForm. @param acroForm the PDAcroForm instance
3120 Initializes a PDRadioButton and sets its flag in the provided PDAcroForm. @param acroForm the PDAcroForm instance
3121 Sets the radios in unison flag. @param radiosInUnison true to enable, false to disable the flag
3122 Sets the multiline flag for the COS object. @param multiline true to enable multiline, false to disable it
3123 Sets the password flag in the COS object. @param password true to set the flag, false to clear it
3124 Sets the file selection flag in the COS object. @param fileSelect true to enable, false to disable file selection.
3125 Sets the do-not-spell-check flag for the COS object. @param doNotSpellCheck true to disable spell check, false to enable it
3126 Sets the do-not-scroll flag in the COS object. @param doNotScroll true to prevent scrolling, false to allow it
3127 Sets the combination flag in the COS object. @param comb true to enable, false to disable the combination flag
3128 Sets the rich text flag in the COS object. @param richText true to enable rich text, false to disable it
3129 Decodes image data from input stream and writes to output stream. @param encoded input stream for encoded image data @param decoded output stream for decoded image data @param parameters configuration parameters for decoding @param index index for processing (not used) @param options options for decoding process @return DecodeResult containing decoding parameters
3130 Validates page objects in the COSDictionary root. @param root the COSDictionary containing page data @throws IOException if page tree root is not a dictionary
3131 Retrieves the page tree from the document. @return PDPageTree constructed from the root dictionary
3132 Initializes PDPageTree with a root dictionary. @param root the root COSDictionary for the page tree
3133 Removes the specified PDPage from its parent node. @param page the PDPage object to remove
3134 Inserts a new page before an existing page in the document. @param newPage the page to insert @param nextPage the reference page to insert before
3135 Inserts a new page after a specified previous page in the document structure.
3136 Increments the current revision number by one. @return void
3137 Creates a PDImageXObject from a 1-bit black and white BufferedImage. @param document the PDDocument for the image @param image the BufferedImage to convert @return PDImageXObject created from the image @throws IOException if an I/O error occurs
3138 Creates a PDImageXObject from TIFF data. @param document the PDDocument for the image @param reader source for TIFF data @param number page number to extract @return PDImageXObject or null if extraction fails
3139 Sets a float value in the COS object and notifies changes. @param name key for the float value @param value float to set in the COS object
3140 Sets the intensity value in the COSObject. @param i the float intensity value to set
3141 Sets the conversion factor for PDF representation. @param conversionFactor the float value to be set
3142 Parses a cross-reference object stream and returns previous object offset. @param objByteOffset byte offset for the object @param isStandalone indicates if the stream is standalone @return previous object offset or -1 if not found
3143 Parses a PDF document and returns a PDDocument instance. @return PDDocument object or throws IOException on error
3144 Processes a transparency group for the current page's graphics state. @param group the PDTransparencyGroup to process @throws IOException if an I/O error occurs
3145 Processes a Type 3 PDF stream with specified text rendering matrix. @param charProc Type 3 character procedure to process @param textRenderingMatrix matrix for text rendering transformation @throws IOException if an I/O error occurs
3146 Processes PDF annotation appearance if valid dimensions are present. @param annotation the annotation to process @param appearance the appearance stream associated with the annotation @throws IOException if an I/O error occurs during processing
3147 Processes a tiling pattern with specified color and transformation matrix. @param tilingPattern the pattern to process @param color the color to apply to the pattern @param colorSpace the color space for the pattern @param patternMatrix the transformation matrix for the pattern @throws IOException if an I/O error occurs
3148 Processes PDF content stream, managing graphics state and resources. @param contentStream the PDF content stream to process @throws IOException if an I/O error occurs
3149 Writes a COSDocument to a PDF file. @param doc the COSDocument to convert and write @throws IOException if an I/O error occurs during writing
3150 Saves the document to an output stream with compression options. @param output the output stream for the PDF @param compressParameters settings for compression @throws IOException if the document is closed or an I/O error occurs
3151 Retrieves the document version, considering catalog version if applicable. @return highest version as float
3152 Retrieves a PDPage by index, sanitizing its type and using resource cache. @param index the page index to retrieve @return PDPage object constructed from the dictionary
3153 Removes a COSDictionary node by index. @param index the index of the node to remove
3154 Finds the index of a page in the document. @param page the PDPage to search for @return index of the page or -1 if not found
3155 Retrieves a PDFileSpecification from a stream's dictionary object. @return PDFileSpecification or null if not found
3156 Retrieves PDFileSpecification from the F key in the FDF dictionary. @return PDFileSpecification or null if not found
3157 Retrieves embedded PDFileSpecification objects from FDF. @return List of PDFileSpecification or null if none found
3158 Retrieves a PDFileSpecification from the document's file reference. @return PDFileSpecification or null if not found
3159 Retrieves PDFileSpecification from the COS object. @return PDFileSpecification or null if not found
3160 Retrieves a PDFileSpecification from the action's dictionary. @return PDFileSpecification or null if not found
3161 Retrieves PDFileSpecification from the COS object. @return PDFileSpecification or null if not found
3162 Retrieves PDFileSpecification from the action's dictionary using COSName.F. @return PDFileSpecification or null if not found
3163 Retrieves PDFileSpecification from the action's dictionary. @return PDFileSpecification or null if not found
3164 Retrieves PDFileSpecification from the action's dictionary. @return PDFileSpecification or null if not found
3165 Retrieves a PDFileSpecification from the COS object. @return PDFileSpecification or null if not found
3166 Notifies change if old and new COSBase values differ. @param oldBase previous COSBase object, can be null @param newBase current COSBase object, can be null
3167 Appends a child structure element and sets its parent. @param structureElement the PDStructureElement to append
3168 Inserts a PDStructureElement before a reference object. @param newKid the PDStructureElement to insert @param refKid the reference object before which newKid is inserted
3169 Removes a child structure element and clears its parent reference. @param structureElement the child element to remove @return true if removed, false otherwise
3170 Constructs a FDFAnnotationHighlight and initializes its subtype.
3171 Constructs an FDFAnnotationSquiggly and sets its subtype name.
3172 Constructs a FDFAnnotationStrikeOut and initializes its subtype name.
3173 Constructs an FDFAnnotationUnderline with default settings.
3174 Constructs a PDAnnotationFileAttachment and sets its subtype.
3175 Initializes a PDAnnotationInk object with a specific subtype.
3176 Initializes a PDAnnotationLine object with default values.
3177 Constructs a PDAnnotationPolygon and sets its subtype.
3178 Constructs a PDAnnotationPolyline and sets its subtype.
3179 Initializes a PDAnnotationRubberStamp object with a specific subtype.
3180 Constructs a PDAnnotationSquareCircle with a specified subtype. @param subType the subtype of the annotation
3181 Initializes a PDAnnotationText object with a specific subtype.
3182 Initializes PDAnnotationTextMarkup with subtype and empty quad points. @param subType the subtype of the annotation
3183 Constructs a PDAnnotationCaret from a COSDictionary. @param field the COSDictionary initializing the annotation
3184 Constructs a PDAnnotationFileAttachment from a COSDictionary. @param field the COSDictionary initializing the annotation
3185 Constructs a PDAnnotationFreeText from a COSDictionary. @param field the COSDictionary initializing the annotation
3186 Constructs a PDAnnotationInk from a COSDictionary. @param dict the COSDictionary initializing the annotation
3187 Constructs a PDAnnotationLine from a COSDictionary. @param field the COSDictionary initializing the annotation line
3188 Constructs a PDAnnotationPolygon from a COSDictionary. @param dict the COSDictionary initializing the annotation
3189 Constructs a PDAnnotationPolyline from a COSDictionary. @param dict the COSDictionary initializing the annotation
3190 Constructs a PDAnnotationRubberStamp from a COSDictionary. @param field the COSDictionary initializing the rubber stamp annotation
3191 Constructs a PDAnnotationSound from a COSDictionary. @param field the COSDictionary initializing the annotation
3192 Initializes a PDAnnotationSquareCircle from a COSDictionary. @param dict the COSDictionary for the annotation
3193 Initializes a PDAnnotationText with a COSDictionary. @param field the COSDictionary for the annotation
3194 Constructs a PDAnnotationTextMarkup from a COSDictionary. @param field the COSDictionary initializing the annotation
3195 Retrieves a PDAnnotationPopup from the COSDictionary if available. @return PDAnnotationPopup object or null if not found
3196 Retrieves a list of PDAnnotationWidget objects from the COSArray KIDS.
3197 Writes compressed body of the PDF document, handling encryption and object streams. @param document the COSDocument to write to @throws IOException if an I/O error occurs during writing
3198 Determines if the font is symbolic, caching the result. @return true if symbolic, false if not, or null if unknown
3199 Checks if the given PDAcroForm is dynamic. @param acroForm the PDAcroForm to evaluate @return true if dynamic, false if null or not dynamic
3200 Initializes FieldIterator with fields from the given PDAcroForm. @param form the PDAcroForm containing fields to iterate over
3201 Creates a PDFunction from a COSBase function. @param function COSBase representation of the function @return PDFunction instance based on function type @throws IOException if function type is unknown or invalid
3202 Performs interpolation on input values. @return array of interpolated float values
3203 Extracts matte values from a soft mask image. @param softMask the PDImageXObject containing the soft mask @return float array of RGB matte values or null if invalid
3204 Retrieves a Document object from PDF byte array. @return Document parsed from PDF data @throws IOException if reading fails
3205 Encodes an image to a compressed format. @return PDImageXObject or null if encoding fails @throws IOException if an error occurs during encoding
3206 Sets the PDF destination for a given page. @param page the PDPage to set as the destination
3207 Initializes the current page and graphics state. @param page the PDPage to initialize; must not be null
3208 Retrieves the bleed box of a page or defaults to the crop box if not set. @return PDRectangle representing the bleed box dimensions
3209 Retrieves the trim box of a page or defaults to the crop box if not set. @return PDRectangle representing the trim box dimensions
3210 Retrieves the art box of a page or falls back to the crop box if not set. @return PDRectangle representing the art box dimensions
3211 Returns the crop box adjusted for page rotation. @param page the PDPage to retrieve crop box from @return adjusted PDRectangle based on rotation
3212 Adds a font to the resource dictionary. @param font the PDFont object to add @return unique COSName key for the font
3213 Adds a color space to the resource dictionary. @param colorSpace the color space to add @return unique COSName key for the color space
3214 Adds an extended graphics state to the resource dictionary. @param extGState the graphics state to add @return unique COSName key for the graphics state
3215 Adds a shading object to the resource dictionary. @param shading the shading object to add @return unique COSName key for the shading object
3216 Adds a pattern to the resource dictionary. @param pattern the pattern to add @return unique COSName key for the pattern
3217 Adds properties to a resource dictionary based on type. @param properties the properties to add @return unique COSName key for the added properties
3218 Adds an image to the XObject resource dictionary. @param image the image to be added @return unique COSName key for the image
3219 Adds a form XObject to the resource dictionary. @param form the PDFormXObject to add @return unique COSName key for the added form
3220 Adds a PDXObject to the resource dictionary. @param xobject the object to add, @param prefix key prefix @return unique COSName key for the added object
3221 Exports FDF data from the document. @return FDFDocument containing exported fields @throws IOException if an I/O error occurs
3222 Retrieves or creates the down appearance entry for an annotation. @return PDAppearanceEntry for down appearance
3223 Retrieves or creates rollover appearance entry for a PDF annotation. @return PDAppearanceEntry object
3224 Retrieves or creates the normal appearance entry for a PDF annotation. @return PDAppearanceEntry object
3225 Adds a child item to the outline and updates the parent's open count. @param newChild the PDOutlineItem to add
3226 Adds a new child to the outline as the first item. @param newChild the PDOutlineItem to prepend
3227 Initializes PDPageLabels from a document and optional dictionary. @param document the PDDocument to associate with labels @param dict optional COSDictionary for page labels @throws IOException if an I/O error occurs
3228 Initializes a PDActionEmbeddedGoTo with a specific subtype.
3229 Initializes a PDActionGoTo with a predefined subtype.
3230 Constructs a PDActionHide object and sets its subtype to SUB_TYPE.
3231 Initializes a PDActionImportData with a predefined subtype.
3232 Initializes a PDActionJavaScript with a predefined subtype.
3233 Initializes a PDActionLaunch with a specific subtype.
3234 Constructs a PDActionMovie and sets its subtype to SUB_TYPE.
3235 Initializes a PDActionNamed object with a predefined subtype.
3236 Constructs a PDActionRemoteGoTo and sets its subtype.
3237 Initializes a PDActionResetForm with a predefined subtype.
3238 Initializes a PDActionSound with a predefined subtype.
3239 Initializes a PDActionSubmitForm with a specific subtype.
3240 Initializes a PDActionThread and sets its subtype.
3241 Initializes a PDActionURI with a predefined subtype.
3242 Updates the parent's open count based on delta. @param delta change in open count, positive or negative
3243 Sets the value based on export options or direct input. @param value the value to set @throws IOException if an I/O error occurs
3244 Checks if a given content group is enabled based on its state and configuration. @param group the optional content group to check @return true if enabled, false if specifically disabled
3245 Enables or disables a content group by name. @param groupName the name of the content group @param enable true to enable, false to disable @return true if state changed, false otherwise
3246 Retrieves the page tree from the document. @return PDPageTree constructed from the document catalog
3247 Returns the total number of pages in the document. @return integer count of pages in the document
3248 Sets the fixed pitch flag. @param flag true to enable fixed pitch, false to disable it
3249 Sets the serif flag. @param flag true to enable serif, false to disable it
3250 Sets the symbolic flag based on the provided value. @param flag true to set the symbolic flag, false to clear it
3251 Sets the script flag. @param flag true to enable the script, false to disable it
3252 Sets the non-symbolic flag state. @param flag true to set, false to clear the non-symbolic flag
3253 Sets the italic flag for text formatting. @param flag true to enable italic, false to disable it
3254 Sets the all-capital flag state. @param flag true to enable, false to disable the all-capital flag
3255 Sets the small cap flag. @param flag true to enable, false to disable the small cap flag
3256 Sets the force bold flag. @param flag true to enable bold, false to disable it
3257 Creates PDImageXObject from byte array data. @param document the PDDocument for the image @param byteArray raw image data @param number page number to extract @return PDImageXObject or null if extraction fails
3258 Creates a PDImageXObject from a file. @param document the PDDocument for the image @param file the source file containing image data @param number page number to extract @return PDImageXObject or null if extraction fails
3259 Constructs an FDFAnnotation from an XML Element, setting various attributes. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3260 Parses a COSBase object dynamically from a key, handling offsets and object streams. @param objKey key for the object to parse @param requireExistingNotCompressedObj flag for validation @return COSBase object or null if not found or invalid
3261 Parses the cross-reference table from a PDF document. @param document the COSDocument to update with parsed data @param startXRefOffset starting position for parsing @return COSDictionary trailer of the parsed xref @throws IOException if an error occurs during parsing
3262 Displays the specified transparency group. @param form the PDTransparencyGroup to show @throws IOException if an I/O error occurs
3263 Processes a soft mask for a transparency group. @param group the PDTransparencyGroup to process @throws IOException if an I/O error occurs
3264 Displays Type 3 glyph using the provided rendering matrix and font. @param textRenderingMatrix matrix for text rendering transformation @param font Type 3 font to retrieve character procedure @param code character code to lookup @param displacement vector for glyph positioning @throws IOException if an I/O error occurs
3265 Displays the annotation if its appearance stream is valid. @param annotation the PDAnnotation to show @throws IOException if an I/O error occurs during processing
3266 Processes a tiling pattern with specified color and color space. @param tilingPattern the pattern to process @param color the color to apply to the pattern @param colorSpace the color space for the pattern @throws IOException if an I/O error occurs
3267 Displays a PDF form, processing it if valid. @param form the PDFormXObject to show @throws IOException if an I/O error occurs
3268 Saves the document to an output stream using default compression. @param output the output stream for the PDF @throws IOException if an I/O error occurs
3269 Saves a file with optional compression; warns if file already exists and is non-empty. @param file file to save @param compressParameters settings for compression @throws IOException if an I/O error occurs during saving
3270 Creates a new PDDocument, copying metadata from the source document if available. @return Newly created PDDocument with copied metadata
3271 Sets the document version if it's not a downgrade. @param newVersion the new version to set
3272 Returns an iterator for PDPage objects from the root node. @return Iterator<PDPage> for traversing pages
3273 Retrieves a page by index from the document's page tree. @param pageIndex the index of the page to retrieve @return PDPage object or null if not found
3274 Writes XML representation of file specifications and fields to the output. @param output Writer to write XML data
3275 Prepares a PDF document for encryption with settings and keys. @param doc the PDDocument to encrypt @throws IOException if encryption fails
3276 Initializes a PDAnnotationHighlight instance with a specific subtype.
3277 Initializes PDAnnotationSquiggly with a specific subtype.
3278 Initializes a PDAnnotationStrikeout instance with a specific subtype.
3279 Constructs a PDAnnotationUnderline object with a specific subtype.
3280 Constructs a PDAnnotationCircle from a COSDictionary. @param field the COSDictionary for the annotation
3281 Constructs a PDAnnotationSquareCircle from a COSDictionary. @param field the COSDictionary for the annotation
3282 Constructs a PDAnnotationHighlight from a COSDictionary. @param dict the COSDictionary initializing the annotation
3283 Constructs a PDAnnotationSquiggly from a COSDictionary. @param dict the COSDictionary initializing the annotation
3284 Constructs a PDAnnotationStrikeout from a COSDictionary. @param dict the COSDictionary initializing the annotation
3285 Constructs a PDAnnotationUnderline from a COSDictionary. @param dict the COSDictionary initializing the annotation
3286 Imports FDF field data into the current field. @param fdfField the FDFField object containing field data @throws IOException if the field type is unknown or an error occurs
3287 Draws an inline image at specified coordinates with given dimensions. @param inlineImage the image to draw @param x the x-coordinate for placement @param y the y-coordinate for placement @param width the width of the image @param height the height of the image @throws IOException if an I/O error occurs
3288 Creates a cloudy polygon from a 2D float array path. @param path array of float arrays representing polygon points @throws IOException if an I/O error occurs during processing
3289 Draws a rectangle or polygon based on input coordinates and ellipse flag. @param left, bottom, right, top rectangle coordinates @param isEllipse indicates if the shape is elliptical @throws IOException if an I/O error occurs
3290 Returns an iterator for PDField objects from the associated PDAcroForm. @return Iterator of PDField instances
3291 Evaluates input using child functions based on domain and bounds. @param input array of float values to evaluate @return processed float array after evaluation @throws IOException if no partition is found
3292 Initializes PDDeviceN with color space and attributes from a COSArray. @param deviceN COSArray for device color space @param resources PDResources for color space resources @throws IOException if color space or attributes are invalid
3293 Retrieves the tint transformation function, creating it if not already initialized. @return PDFunction instance representing the tint transformation @throws IOException if the function creation fails
3294 Initializes a PDSeparation instance with color space and tint transform. @param separation array of separation data @param resources resources for color space creation @throws IOException if output parameters mismatch
3295 Retrieves a PDFunction from the COS object. @return PDFunction instance or null if not found @throws IOException if an error occurs during function creation
3296 Retrieves an array of PDFunctions from the COS object. @return array of PDFunctions or throws IOException if invalid type
3297 Retrieves the transfer function for PDF, creating it if not already initialized. @return PDFunction instance or null if not found @throws IOException if an error occurs during function creation
3298 Constructs PDIndexed from array and resources, initializing color table. @param indexedArray array of color indices @param resources resources for color space creation @throws IOException if color table reading fails
3299 Evaluates input values through linear interpolation and returns transformed output values. @param input array of input float values @return array of interpolated float output values
3300 Retrieves a BufferedImage with optional subsampling from a specified region. **@param region the area of the image to process **@param subsampling factor to reduce the image size **@return BufferedImage representation of the processed image *
3301 Creates a PDImageXObject from a BufferedImage in a PDDocument. @param document the PDDocument for the image @param image the BufferedImage to convert @return PDImageXObject created from the image @throws IOException if an error occurs during processing
3302 Processes a PDF page if it contains content. @param page the PDPage to process; must not be null @throws IOException if an I/O error occurs
3303 Processes a child PDF content stream for a given page. @param contentStream the PDF content stream to process @param page the PDPage to initialize @throws IOException if an I/O error occurs
3304 Constructs a content stream for a PDF page. @param document the PDF document @param sourcePage the page to copy content from
3305 Sets the font and size, handling font stacking and subsetting warnings. @param font the PDFont to set @param fontSize the size of the font @throws IOException if an I/O error occurs
3306 Sets graphics state parameters in the resource dictionary. @param state the extended graphics state to set @throws IOException if an I/O error occurs
3307 Fills shading in the current graphics state. @param shading the shading object to fill @throws IOException if an I/O error occurs
3308 Begins marked content with a specified tag and properties. @param tag the COSName tag for the marked content @param propertyList properties associated with the content @throws IOException if an I/O error occurs
3309 Sets marked content point with properties. @param tag COSName for marking, @param propertyList properties to associate @throws IOException if an I/O error occurs
3310 Draws an image at specified coordinates and dimensions. @param image the image to draw @param x, y coordinates for placement @param width, height dimensions of the image @throws IOException if an I/O error occurs
3311 Draws an image using a transformation matrix. @param image the image to draw @param matrix the transformation matrix @throws IOException if an I/O error occurs
3312 Draws a form XObject to the output stream. @param form the PDFormXObject to draw @throws IOException if an I/O error occurs
3313 Retrieves the normal appearance as a content stream. @param compress true to enable compression @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3314 Retrieves page labels from the document. @return PDPageLabels object or null if not found
3315 Constructs PDActionJavaScript with specified JavaScript action. @param js the JavaScript action string to set
3316 Checks if a content group is enabled by its name. @param groupName the name of the content group @return true if enabled, false otherwise
3317 Checks if a content group is enabled in the document. @param group the optional content group to check @return true if enabled or properties are missing, false otherwise
3318 Fixes page destinations in the given document based on source page validity. @param destinationDocument document containing pages to update
3319 Adds a page to the document and updates the highest imported object number. @param page the PDPage to be added
3320 Removes a specified page from the document. @param page the PDPage object to remove
3321 Removes a page from the document by its number. @param pageNumber the index of the page to remove
3322 Constructs a PDFPrintable with document pages and rendering options. @param document the PDDocument to print @param scaling the scaling factor for rendering @param showPageBorder flag to show page borders @param dpi dots per inch for rendering quality @param center flag to center the printable content @param renderer the PDFRenderer instance for rendering
3323 Initializes PDFRenderer with a PDDocument and retrieves its page tree. @param document the PDDocument to render
3324 Constructs PageExtractor with a source PDF document. @param sourceDocument the PDF document to extract pages from
3325 Retrieves a map of page indices by their associated labels. @return Map of labels to page indices
3326 Retrieves labels for each page in the document. @return array of labels corresponding to page indices
3327 Constructs a PDFPageable with document settings. @param document PDF document to be paginated @param orientation page orientation @param showPageBorder flag to show page borders @param dpi dots per inch for rendering @param center flag to center the pages
3328 Constructs a PDFontDescriptor from a Type1Font object. @param type1 the Type1Font to build the descriptor from @return PDFontDescriptor object representing the font
3329 Builds a PDFontDescriptor from FontMetrics data. @param metrics font metrics for descriptor creation @return PDFontDescriptor object with font details
3330 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf TrueTypeFont object @return PDFontDescriptor representing the font details
3331 Creates PDImageXObject from byte array data. @param document the PDDocument for the image @param byteArray raw image data @return PDImageXObject or null if extraction fails
3332 Creates a PDImageXObject from a file at page 0. @param document the PDDocument for the image @param file the source file containing image data @return PDImageXObject or null if extraction fails
3333 Constructs an FDFAnnotationCaret from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3334 Constructs an FDFAnnotationCircle from an XML element. @param element XML element containing annotation data @throws IOException if an I/O error occurs
3335 Constructs an FDFAnnotationFileAttachment from an XML Element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3336 Constructs FDFAnnotationFreeText from XML element attributes. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3337 Constructs an FDFAnnotationInk from XML element, parsing gesture data into a float array.
3338 Initializes FDFAnnotationLine with attributes from XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3339 Constructs an FDFAnnotationLink from the given XML element. @param element XML element representing the annotation @throws IOException if an error occurs during processing
3340 Constructs an FDFAnnotationPolygon from an XML element. @param element XML element containing polygon data @throws IOException if element is invalid
3341 Constructs an FDFAnnotationPolyline from an XML Element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3342 Constructs an FDFAnnotationSound from an XML element. @param element XML element for annotation attributes @throws IOException if attributes are invalid
3343 Constructs an FDFAnnotationSquare from an XML element. @param element XML element for annotation setup @throws IOException if the element format is invalid
3344 Initializes FDFAnnotationStamp with appearance from XFDF XML element. @param element XML element containing stamp data @throws IOException if parsing or decoding fails
3345 Constructs an FDFAnnotationText from an XML Element, setting attributes and state. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3346 Constructs FDFAnnotationTextMarkup from an XML element with coordinate validation. @param element XML element containing coordinates @throws IOException if 'coords' is missing or invalid
3347 Retrieves and processes the PDF document's trailer. @return COSDictionary trailer or rebuilds if necessary @throws IOException if reading fails or decryption setup fails
3348 Loads a PDF document from byte array with optional password and keyStore. @param input PDF data as byte array @param password optional password for the PDF @param keyStore optional keyStore for decryption @param alias optional alias for keyStore @return PDDocument object
3349 Loads a PDF document from a RandomAccessRead source. @param randomAccessRead source for PDF data @return PDDocument object or throws IOException on error
3350 Loads a PDF document with optional password. @param randomAccessRead stream to read PDF data @param password optional password for encrypted PDFs @return PDDocument object or null if loading fails
3351 Loads a PDF document with decryption support. @param randomAccessRead source for PDF data @param password decryption password for the PDF @param keyStore keystore InputStream @param alias alias for the key in the keystore @return PDDocument object or null if loading fails
3352 Sets visual signature from a specified file. @param file the file containing the visual signature @throws IOException if an I/O error occurs during processing
3353 Sets the visual signature from an InputStream. @param is input stream for the visual signature @throws IOException if an I/O error occurs during processing
3354 Renders a glyph based on font type. @param textRenderingMatrix transformation matrix for text rendering @param font font used to render the glyph @param code glyph code to display @param displacement vector for glyph positioning @throws IOException if an I/O error occurs
3355 Builds a PDF with a visual signature from given properties. @param properties configuration for the PDF signature @return InputStream of the generated PDF @throws IOException if an I/O error occurs during PDF creation
3356 Saves a file with default compression settings. @param file the file to save @throws IOException if an I/O error occurs during saving
3357 Saves a file with given name and compression settings. @param fileName name of the file to save @param compressParameters settings for compression @throws IOException if an I/O error occurs during saving
3358 Creates a new document if needed based on the current page number. @throws IOException if document creation fails
3359 Writes the document header with version and optional FDF prefix. @param doc the COSDocument to write the header for @throws IOException if an I/O error occurs
3360 Sets optional content properties and updates document version if needed. @param ocProperties properties to set for optional content
3361 Retrieves the first page as a LayoutPage from the given PDF document. @param doc the PDDocument to extract the page from @return LayoutPage instance for the first page @throws IOException if an I/O error occurs
3362 Calculates and sets page dimensions from the specified PDF document's page. @param document the PDDocument object containing the pages @param page the page number to calculate size for (1-based index)
3363 Finds the page for a given destination in a PDF document. @param doc the PDF document to search within @return PDPage object or null if destination is invalid
3364 Returns the PageFormat for a specified page index. @param pageIndex index of the page to format @return PageFormat object with size and orientation settings
3365 Retrieves the page number from the first object in the array. @return page number or -1 if not found or invalid type
3366 Writes XML representation of FDFDictionary to the provided output. @param output Writer to write XML data @throws IOException if an I/O error occurs
3367 Prepares a PDF document for encryption. @param document the PDDocument to encrypt @throws IOException if an I/O error occurs
3368 Creates a PDAnnotation from a COSBase object. @param base the COSBase object representing the annotation @return a specific PDAnnotation type or PDAnnotationUnknown
3369 Draws an inline image at specified coordinates using its width and height. @param inlineImage the image to draw @param x the x-coordinate for placement @param y the y-coordinate for placement @throws IOException if an I/O error occurs
3370 Creates a cloudy rectangle using given dimensions. @param rd rectangle for dimension adjustments @throws IOException if an I/O error occurs
3371 Draws a cloudy ellipse or rectangle based on dimensions and intensity. @param leftOrig, bottomOrig, rightOrig, topOrig bounding coordinates @throws IOException if an I/O error occurs
3372 Retrieves all signature fields from the document's AcroForm. @return List of PDSignatureField objects, may be empty if none found
3373 Refreshes appearances for all terminal fields in the field tree. @throws IOException if an I/O error occurs during appearance construction
3374 Returns an iterator for PDField objects from the PDFieldTree. @return Iterator of PDField instances
3375 Sets the field cache based on the cache flag. @param cache true to initialize cache, false to clear it
3376 Retrieves a PDField by its fully qualified name from cache or field tree. @param fullyQualifiedName the unique identifier for the field @return PDField object or null if not found
3377 Creates a PDColorSpace from a COSBase object and resources. @param colorSpace the source color space representation @param resources resource management for color spaces @param wasDefault indicates if the color space was a default @return PDColorSpace instance
3378 Evaluates PDFunctions with given input and returns adjusted results. @param input array of float values for function evaluation @return adjusted float array of function results
3379 Initializes PDIndexed with a color index array. @param indexedArray array of color indices @throws IOException if color table reading fails
3380 Retrieves a BufferedImage with default parameters. @return BufferedImage representation of the image
3381 Processes a PDF page to set rotation, size, and translation matrix. @param page the PDPage to process; must not be null @throws IOException if an I/O error occurs
3382 Sets the stroking color for graphics context. @param color the PDColor to set as stroking color @throws IOException if an I/O error occurs during writing
3383 Sets the non-stroking color in the graphics state. @param color the PDColor to set as non-stroking color @throws IOException if an I/O error occurs
3384 Draws an image at specified coordinates using its natural dimensions. @param image the image to draw @param x, y coordinates for placement @throws IOException if an I/O error occurs
3385 Retrieves the normal appearance as a content stream without compression. @return PDAppearanceContentStream object @throws IOException if an I/O error occurs
3386 Opens the node if it's not already open; updates node count accordingly.
3387 Closes the node if it is currently open. Calls switchNodeCount() to update the node's state.
3388 Imports a page into the document and sets its properties. @param page the PDPage to import @return the imported PDPage object @throws IOException if an error occurs during import
3389 Creates a PDF template with the given page. @param page the PDPage to be added to the template
3390 Constructs a PDFPrintable with rendering options. @param document the PDDocument to print @param scaling the scaling factor for rendering @param showPageBorder flag to show page borders @param dpi dots per inch for rendering quality @param center flag to center the printable content
3391 Constructs PDFPageable with default settings using the provided document. @param document PDF document to be paginated
3392 Constructs PDFPageable with document and orientation settings. @param document PDF document to be paginated @param orientation page orientation
3393 Constructs a PDFPageable for document pagination. @param document PDF document to be paginated @param orientation page orientation @param showPageBorder flag to show page borders
3394 Constructs a PDFPageable with document settings. @param document PDF document to paginate @param orientation page orientation @param showPageBorder flag to show page borders @param dpi dots per inch for rendering *
3395 Initializes a PDType1FontEmbedder with font data and encoding. @param doc the PDDocument to embed the font into @param dict the COSDictionary for font properties @param pfbStream input stream of the PFB font data @param encoding optional font encoding, defaults to extracted if null
3396 Initializes TrueTypeEmbedder with font details and checks embedding permissions. @param document PDDocument to embed the font in @param dict COSDictionary for font properties @param ttf TrueTypeFont object to embed @param embedSubset flag for subset embedding @throws IOException if embedding is not permitted or fails
3397 Creates a PDImageXObject from a file based on its extension. @param file image file to process @param doc PDDocument to associate with the image @return PDImageXObject created from the file @throws IOException if an error occurs during file processing
3398 Creates a PDImageXObject from a file based on its content type. @param file the source image file @param doc the PDDocument to associate with the image @return PDImageXObject created from the file @throws IOException if file type detection fails
3399 Constructs FDFAnnotationHighlight from an XML element with validation. @param element XML element containing coordinates @throws IOException if 'coords' is missing or invalid
3400 Constructs FDFAnnotationSquiggly from an XML element. @param element XML element for initialization @throws IOException if parsing fails
3401 Constructs FDFAnnotationStrikeOut from XML element; sets annotation name subtype.
3402 
3403 Loads a PDF document from byte array with optional password. @param input PDF data as byte array @param password optional password for the PDF @return PDDocument object
3404 Loads a PDF document from a file with optional password protection. @param file the PDF file to load @param password the password for the PDF, if encrypted @return PDDocument object representing the loaded PDF
3405 Loads a PDF document from a file with optional encryption. @param file PDF file to load @param password encryption password @param keyStore InputStream for key store @param alias key alias in the key store @return loaded PDDocument object
3406 Sets the visual signature using provided properties. @param visSignatureProperties properties for the visual signature @throws IOException if an I/O error occurs
3407 Builds and sets a visible signature in a PDF. @throws IOException if an I/O error occurs during PDF creation
3408 Saves a file using the specified file name. @param fileName the name of the file to save @throws IOException if an I/O error occurs during saving
3409 Imports optional content properties from source to target document. @param srcDoc source PDDocument to import from @throws IOException if an I/O error occurs during import
3410 Initializes PDVisibleSignDesigner with document, image, and target page. @param document the PDF document to sign @param imageStream input stream for the signature image @param page the page number to place the signature on
3411 Constructs PDVisibleSignDesigner with document, image, and page number. @param document PDF document for page size calculation @param image BufferedImage to be set @param page 1-based index of the page to calculate size for
3412 Writes XML representation of XFDF to the provided output. @param output Writer for XML output @throws IOException if an I/O error occurs
3413 Retrieves filtered PDAnnotations from the page. @param annotationFilter criteria for filtering annotations @return list of accepted PDAnnotations
3414 Retrieves a referenced object from the COSDictionary. @return COSObjectable or null if not found or an error occurs
3415 Retrieves a PDAnnotation in reply to another annotation. @return PDAnnotation object or null if not found
3416 Retrieves the parent annotation as PDAnnotationMarkup. @return PDAnnotationMarkup or null if not found or type mismatch
3417 Creates a cloudy ellipse based on a rectangle's dimensions. @param rd rectangle for dimension adjustments; null uses defaults @throws IOException if an I/O error occurs during drawing
3418 Retrieves a list of PDSignature objects from signature fields. @return List of PDSignature objects
3419 Imports FDF field data into corresponding document fields. @param fdf FDFDocument containing field data @throws IOException if an error occurs during import
3420 Evaluates a function with a single float input. @param inputValue value for function evaluation @return adjusted float array of function results
3421 Evaluates shading function and converts results to RGB. @param values array of float values for evaluation @return RGB integer value
3422 Retrieves non-stroking Paint with applied soft mask. @return Paint object with soft mask applied @throws IOException if an error occurs during processing
3423 Processes a PDF page, managing sections and resources based on page criteria. @param page the PDPage to process; must not be null @throws IOException if an I/O error occurs during processing
3424 Sets the stroking color for the graphics context. @param color the PDColor to set as stroking color @throws IOException if an I/O error occurs during writing
3425 Sets the non-stroking color in the graphics state. @param color the PDColor to set @throws IOException if an I/O error occurs
3426 Appends a form as a layer to a target page. @param targetPage the page to which the form is added @param form the form to append as a layer @param transform transformation applied to the form @param layerName name of the optional content group @return PDOptionalContentGroup created for the layer
3427 Displays a form if it's not hidden and content is rendered. @param form the PDFormXObject to display
3428 Renders a transparency group on the provided graphics context. @param form the transparency group to render @param graphics the Graphics2D context for drawing @throws IOException if an error occurs during rendering
3429 Initiates a marked content sequence if not hidden. @param tag content tag @param properties properties for the content
3430 Constructs a PDFPrintable with rendering options. @param document the PDDocument to print @param scaling the scaling factor for rendering @param showPageBorder flag to show page borders @param dpi dots per inch for rendering quality
3431 Constructs a PDType1Font with specified document, input stream, and encoding. @param doc the PDDocument to associate with the font @param pfbIn input stream for font data @param encoding optional font encoding
3432 Initializes PDFont with a COSDictionary and loads font metrics and CMap. @param fontDictionary font data dictionary
3433 Constructs a PDCIDFontType2Embedder for embedding fonts. @param document the PDDocument object @param dict the COSDictionary for font properties @param ttf the TrueTypeFont to embed @param embedSubset flag to embed font subset @param parent the parent PDType0Font @param vertical flag for vertical text orientation
3434 Initializes PDTrueTypeFontEmbedder with font properties and settings. @param document PDDocument to embed the font in @param dict COSDictionary for font properties @param ttf TrueTypeFont object to embed @param encoding font encoding to use @throws IOException if embedding is not permitted or fails
3435 Creates a PDImageXObject from a file path. @param imagePath path to the image file @param doc PDDocument to associate with the image @return PDImageXObject created from the file @throws IOException if an error occurs during file processing
3436 Initializes FDFDictionary from XML element. @param fdfXML XML element containing FDF data.
3437 Loads a PDF document from byte array without a password. @param input PDF data as byte array @return PDDocument object
3438 Loads a PDF document from a file, optionally with a password. @param file the PDF file to load @param password the password for the PDF, if encrypted @return PDDocument object representing the loaded PDF
3439 Loads a PDF document from the specified file. @param file the PDF file to load @return PDDocument object or null if loading fails
3440 Imports a page as a form XObject from a source document. @param sourceDoc the source PDDocument to import from @param page the PDPage to be imported @return PDFormXObject representing the imported page
3441 Initializes PDVisibleSignDesigner with document and image streams. @param documentSource PDF data source @param imageStream InputStream for the signature image @param page page number for size calculation
3442 Constructs a PDVisibleSignDesigner with image and page size from PDF. @param documentSource source of PDF data @param image the BufferedImage for the signature @param page the page number (1-based index)
3443 Saves XML representation of XFDF to the output writer. @param output Writer for XML output @throws IOException if an I/O error occurs
3444 Retrieves all PDAnnotations from the page. @return list of PDAnnotations @throws IOException if an I/O error occurs
3445 Retrieves the last PDSignature from the signature dictionaries. @return last PDSignature or null if none exist
3446 Saves document for external signing, validating signatures and byte range. @param output stream for writing the signed document @return ExternalSigningSupport instance for signing operations
3447 Draws a glyph with transformations based on font and displacement. @param path glyph shape, font to render, code for glyph, displacement vector, transform @throws IOException if an error occurs during rendering
3448 Processes pages in a PDF, setting start and end bookmark page numbers. @param pages the PDPageTree containing pages to process @throws IOException if an I/O error occurs during processing
3449 Initializes appearance content for a PDF annotation widget. @param widget the annotation widget to initialize @param appearanceCharacteristics characteristics for appearance settings @param appearanceStream the stream to write the appearance content @throws IOException if an I/O error occurs during initialization
3450 Writes font settings to the content stream. @param contents content stream to write to @param zeroFontSize fallback font size if current is zero
3451 Constructs a PDFPrintable with specified rendering options. @param document the PDDocument to print @param scaling the scaling factor for rendering @param showPageBorder flag to show page borders
3452 Constructs a PDType1Font with specified document and input stream. @param doc the PDDocument to associate with the font @param pfbIn input stream for font data
3453 Constructs a PDSimpleFont from a COSDictionary. @param fontDictionary dictionary containing font data
3454 Constructs a PDType0Font from a COSDictionary, validating descendant fonts. @param fontDictionary font properties and data @throws IOException if descendant fonts are missing or invalid
3455 Constructs a PDType0Font with optional vertical support and font embedding. @param document the PDDocument for font embedding @param ttf the TrueTypeFont to embed @param embedSubset flag to embed font subset @param closeTTF flag to close the TrueTypeFont resource @param vertical flag for vertical text orientation @throws IOException if an error occurs during font processing
3456 Initializes a PDTrueTypeFont with embedding options. @param document PDDocument to embed the font in @param ttf TrueTypeFont object to embed @param encoding font encoding to use @param closeTTF flag to close TTF after loading @throws IOException if embedding fails
3457 Constructs FDFCatalog from an XML element. @param element XML element representing FDF data
3458 Loads a PDF document from a specified file. @param file the PDF file to load @return PDDocument object or null if loading fails
3459 Imports a page as a form XObject from a source document. @param sourceDoc the source PDDocument to import from @param pageNumber the index of the page to import @return PDFormXObject representing the imported page
3460 Saves XML representation of XFDF to the specified file. @param fileName the file to save the XFDF to @throws IOException if an I/O error occurs
3461 Updates structure parent entries for annotations on a PDPage. @param page the PDPage to update @param structParentOffset offset to apply to struct parents @throws IOException if an I/O error occurs
3462 Clones structure tree from source to destination document. @param destinationDocument target document for the cloned structure @throws IOException if an I/O error occurs during cloning
3463 Processes and clones annotations from a PDPage, updating links and popups. @param imported the PDPage containing annotations to process @throws IOException if an I/O error occurs during processing
3464 Adds a signature to the document. @param sigObject the PDSignature to add @param signatureInterface interface for signature processing @param options configuration options for the signature @throws IOException if an I/O error occurs
3465 Fills and strokes a path, cloning it to preserve original state. @param windingRule defines the winding rule for filling @throws IOException if an error occurs during filling or stroking
3466 Writes formatted text from a PDF document to an output stream. @param doc the PDDocument to read from @param outputStream the Writer to write output to @throws IOException if an I/O error occurs
3467 Generates and inserts appearance for a PDF annotation widget. @param widget the annotation widget to modify @param appearanceStream the stream for appearance content @param output the output stream for writing content @throws IOException if an I/O error occurs during processing
3468 Renders a PDF page with annotations using specified graphics context. @param g Graphics2D context for drawing @param pageSize Dimensions of the PDF page @throws IOException if an I/O error occurs during rendering
3469 Constructs a PDFPrintable with default page border settings. @param document the PDDocument to print @param scaling the scaling factor for rendering
3470 Retrieves the default font, initializing it if not already set. @return PDFont object representing the default font
3471 Constructs PDTrueTypeFont from a COSDictionary and handles embedded font parsing. @param fontDictionary the font dictionary containing font data @throws IOException if an error occurs during font processing
3472 Initializes PDType1CFont from a font dictionary, handling embedded font parsing and errors. @param fontDictionary the dictionary containing font data @throws IOException if reading the embedded font fails
3473 Initializes PDType1Font from a COSDictionary, handling font files and errors. @param fontDictionary dictionary containing font data @throws IOException if font data is unavailable or damaged
3474 Constructs a PDType3Font from a COSDictionary and initializes resource cache. @param fontDictionary dictionary containing font data @param resourceCache cache for font resources @throws IOException if an I/O error occurs during reading
3475 Loads and creates a PDType0Font from a TTF source. @param doc the PDDocument for font embedding @param randomAccessRead source for TTF data @param embedSubset flag to embed font subset @param vertical flag for vertical text orientation @return PDType0Font instance
3476 Loads a PDType0Font from a TrueTypeFont. @param doc the PDDocument for font embedding @param ttf the TrueTypeFont to embed @param embedSubset flag to embed font subset @return PDType0Font instance
3477 Loads a vertical PDType0Font from a TrueTypeFont. @param doc the PDDocument for font embedding @param ttf the TrueTypeFont to embed @param embedSubset flag to embed font subset @return PDType0Font object
3478 Loads a PDTrueTypeFont from given document and TrueTypeFont. @param doc PDDocument to embed the font in @param ttf TrueTypeFont object to embed @param encoding font encoding to use @return PDTrueTypeFont instance
3479 Loads a PDTrueTypeFont from a TTF file. @param doc PDDocument to embed the font in @param randomAccessRead source of font data @param encoding font encoding to use @return PDTrueTypeFont object
3480 Constructs FDFDocument from XML, validating root element as 'xfdf'. @param doc XML document to parse @throws IOException if root is not 'xfdf'
3481 Initializes PDVisibleSignDesigner with image and page size from a PDF. @param filename path to the PDF file @param imageStream InputStream for the signature image @param page page number (1-based index) @throws IOException if reading image or processing PDF fails
3482 Constructs a PDVisibleSignDesigner with image and page size from a PDF. @param filename path to the PDF file @param image the BufferedImage for the signature @param page page number (1-based index) @throws IOException if loading or processing fails
3483 Saves XML representation of XFDF to the specified file. @param fileName the file to save the XFDF to @throws IOException if an I/O error occurs
3484 Processes and imports a page, handling resources and annotations. @param page the PDPage to process @throws IOException if an I/O error occurs during processing
3485 Adds a signature to the document using provided options. @param sigObject the PDSignature to add @param options configuration options for the signature
3486 Adds a signature to the document using default options. @param sigObject the PDSignature to add @param signatureInterface interface for signature processing @throws IOException if an I/O error occurs
3487 Merges pages and metadata from source PDF into destination PDF. @param destination the target PDF document @param source the source PDF document @throws IOException if an error occurs during merging
3488 Converts a PNG image to PDImageXObject. @param doc PDDocument to which the image will be added @param imageData byte array of PNG image data @return PDImageXObject or null if conversion fails
3489 Retrieves text from a PDF document. @param doc the PDDocument to extract text from @return extracted text as a String @throws IOException if an I/O error occurs
3490 Renders a PDF page as a BufferedImage. @param pageIndex index of the page to render @param scale scaling factor for the image @param imageType desired image type @param destination rendering destination @return BufferedImage of the rendered page @throws IOException if image size exceeds limits or rendering fails
3491 Renders a PDF page to a Graphics2D context with scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for drawing @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination rendering destination @throws IOException if an I/O error occurs during rendering
3492 Constructs a PDFPrintable with default scaling to fit the page. @param document the PDDocument to print
3493 Renders text from a byte array using the current font and text state. @param string byte array containing encoded text @throws IOException if an I/O error occurs during rendering
3494 Constructs PDMMType1Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if font data is unavailable or damaged
3495 Constructs a PDType3Font from a COSDictionary. @param fontDictionary dictionary containing font data @throws IOException if an I/O error occurs during reading
3496 Loads a PDType0Font from a file for a given PDDocument. @param doc the PDDocument for font embedding @param file the source file for TTF data @return PDType0Font instance
3497 Loads a PDType0Font from an InputStream for a PDDocument. @param doc the PDDocument for font embedding @param input source for TTF data @param embedSubset flag to embed font subset @return PDType0Font instance
3498 Loads a vertical PDType0Font from a TTF file. @param doc the PDDocument for font embedding @param file the TTF file to load @return PDType0Font instance
3499 Loads a vertical PDType0Font from an InputStream. @param doc the PDDocument for font embedding @param input InputStream for TTF data @return PDType0Font instance
3500 Loads a vertical PDType0Font from a TTF InputStream. @param doc the PDDocument for font embedding @param input TTF data source as InputStream @param embedSubset flag to embed font subset @return PDType0Font instance
3501 Loads a PDTrueTypeFont from a TTF file into a PDDocument. @param doc PDDocument to embed the font in @param file source TTF file @param encoding font encoding to use @return PDTrueTypeFont object
3502 Loads a PDTrueTypeFont into a PDDocument from an InputStream. @param doc the document to embed the font in @param input source of font data @param encoding font encoding to use @return PDTrueTypeFont object
3503 Loads an FDFDocument from an XFDF input stream. @param input InputStream containing XFDF data @return FDFDocument constructed from parsed XML @throws IOException if parsing fails
3504 Processes pages within a specified range from the source document. @throws IOException if an I/O error occurs during processing
3505 Adds a signature to the document with default options. @param sigObject the PDSignature to add
3506 Flattens PDF fields if not using dynamic XFA forms. Throws IOException on failure.
3507 Creates PDImageXObject from byte array based on detected file type. @param document PDDocument for the image @param byteArray raw image data @param name image name for error messages @param customFactory optional factory for custom image creation @return PDImageXObject or throws IllegalArgumentException if unsupported
3508 Renders a PDF page as a BufferedImage with a specified scale and image type. @param pageIndex index of the page to render @param scale scaling factor for the image @return BufferedImage of the rendered page @throws IOException if rendering fails
3509 Renders a PDF page to a Graphics2D context with scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for drawing @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs during rendering
3510 Renders text from a byte array. @param string byte array containing encoded text @throws IOException if an I/O error occurs during rendering
3511 Renders text from a COSArray, adjusting position based on font and state. @param array COSArray containing text and positioning data @throws IOException if an I/O error occurs during rendering
3512 Creates a PDFont from the given COSDictionary and ResourceCache. @param dictionary the font dictionary @param resourceCache cache for resources @return a PDFont object based on the dictionary content
3513 Loads a PDType0Font from an InputStream for a PDDocument with subset embedding. @param doc the PDDocument for font embedding @param input source for TTF data @return PDType0Font instance
3514 Loads an FDFDocument from a specified XFDF file. @param filename path to the XFDF file @return FDFDocument constructed from the file @throws IOException if file reading fails
3515 Loads an FDFDocument from a specified file. @param file the source file containing XFDF data @return FDFDocument constructed from parsed XML @throws IOException if file reading fails
3516 Splits a PDF document into multiple documents. @param document the source PDDocument to split @return list of PDDocument instances created from the split
3517 Creates PDImageXObject from byte array. @param document PDDocument for the image @param byteArray raw image data @param name image name for error messages @return PDImageXObject
3518 Renders a PDF page as a BufferedImage with default RGB image type. @param pageIndex index of the page to render @param scale scaling factor for the image @return BufferedImage of the rendered page @throws IOException if rendering fails
3519 Renders a PDF page as a BufferedImage with specified DPI. @param pageIndex index of the page to render @param dpi dots per inch for image scaling @return BufferedImage of the rendered page @throws IOException if rendering fails
3520 Renders a PDF page as a BufferedImage with specified DPI. @param pageIndex index of the page to render @param dpi dots per inch for image scaling @return BufferedImage of the rendered page @throws IOException if rendering fails
3521 Renders a PDF page to a Graphics2D context with uniform scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for drawing @param scale uniform scaling factor for both dimensions @throws IOException if an I/O error occurs during rendering
3522 Retrieves a PDFont by name, caching it for future use. @param name the font's COSName identifier @return PDFont object or null if not found
3523 Creates a PDFont from the given COSDictionary. @param dictionary the font dictionary @return PDFont object generated from the dictionary
3524 Extracts a portion of a PDF document based on start and end pages. @return PDDocument of the extracted pages @throws IOException if an I/O error occurs during extraction
3525 Renders a PDF page as a BufferedImage with default scale. @param pageIndex index of the page to render @return BufferedImage of the rendered page @throws IOException if rendering fails
3526 Renders a PDF page to a Graphics2D context with default scaling. @param pageIndex index of the page to render @param graphics Graphics2D context for drawing @throws IOException if an I/O error occurs during rendering
3527 Copies necessary resources to the given appearance stream. @param appearanceStream target stream for resource copying
3528 Retrieves a PDFont object from the font setting. @return PDFont or null if not a COSDictionary
3529 Sets the appearance content for a PDF annotation widget. @param widget the annotation widget to modify @param appearanceStream the stream for appearance content @throws IOException if an I/O error occurs during processing
3530 Copies graphic state properties from the dictionary to the given PDGraphicsState. @param gs the PDGraphicsState to update @throws IOException if an I/O error occurs during the operation
3531 Processes PDF appearance string operators from byte array content. @param content PDF data as a byte array @throws IOException if an I/O error occurs during parsing
3532 Constructs PDDefaultAppearanceString with required appearance and resources. @param defaultAppearance PDF appearance string @param defaultResources PDF resources @throws IOException if processing fails
3533 Retrieves the default appearance string for the PDF. @return PDDefaultAppearanceString object or null if not found
3534 Sets the appearance value for a PDF field based on input and widget characteristics. @param apValue the field value to be formatted @throws IOException if an I/O error occurs during processing
3535 Initializes AppearanceGeneratorHelper with a PDVariableText field and validates resources.
