1 Initializes a new instance of the `OperatorName` class.
2 Initializes OperatorProcessor with PDFStreamEngine context. @param context The engine managing the PDF content stream
3 Initializes an empty COSBase instance.
4 Initializes a new instance of the class with provided update information. @param updateInfo Update info object
5 Initializes an empty instance of the DecodeOptions class.
6 Initializes a new instance of the class with specified source region. @param sourceRegion rectangle defining the source area for decoding
7 Initializes a new instance with uniform subsampling settings. @param subsampling X and Y subsampling values (same for both)
8 Initializes a new instance of the Filter class.
9 Initializes a new instance of the class with the specified PDF document and page range. @param sourceDocument the input PDF document @param startPage the starting page number (inclusive) @param endPage the ending page number (inclusive)
10 Initializes a new instance of the XrefParser class with the provided COSParser. @param cosParser COSParser object used for parsing cross-reference data
11 Initializes an instance of AbstractXReference with specified reference type. @param type XReferenceType enum value indicating reference type
12 Initializes a new instance of the ContentStreamWriter class with the specified output stream. @param out OutputStream to write content to
13 Initializes a new instance with stable cache enabled option. @param enableStableCache true to enable stable caching, false otherwise
14 Initializes a new instance of the `PDDocumentCatalog` class. @param doc PDF document object @param rootDictionary catalog dictionary to manage
15 Initializes a new instance of the class with the provided PDF document information. @param dic COSDictionary object containing metadata
16 Initializes a new instance of the class from a COSDictionary. @param dict PDF document dictionary containing named destinations
17 Initializes a new instance of the PDDocumentNameDictionary class. @param cat document catalog @param names name dictionary
18 Initializes a new instance of the PDPage class from a COSDictionary. @param pageDictionary dictionary containing page data
19 Initializes a new PDPage instance from the provided COSDictionary and ResourceCache. @param pageDictionary COS dictionary representing the PDF page @param resourceCache cache of resources for the document
20 Initializes a new instance of COSDictionaryMap with the given map and dictionary. @param actualsMap standard map to integrate with the COS dictionary @param dicMap COS dictionary to store key-value pairs
21 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary.
22 Initializes a PDNameTreeNode instance from a given COSDictionary. @param dict dictionary containing hierarchical tree data
23 Initializes a new PDNumberTreeNode instance from a given COS dictionary and value class. @param dict COS dictionary containing numeric data @param valueClass Class of the values contained in the dictionary
24 Initializes a new instance of the class from a given COSDictionary. @param dict COSDictionary containing page label range data
25 Initializes a new instance of the class with the given range data. @param range COSArray object containing the range values
26 Initializes a new instance of the PDRange class from a COSArray and index. @param range COSArray containing range data @param index starting index in the array
27 Initializes a new instance of the class with the given COSStream object. @param str COSStream object to be managed by this PDStream instance
28 Initializes a new instance of PDMarkInfo with the provided COSDictionary. @param dic COSDictionary containing marking information
29 Initializes a new instance of the class with the given COSDictionary. @param dictionary COSDictionary containing marked content reference data
30 Initializes a new instance of the class with a reference to a COSDictionary. @param theDictionary COSDictionary object to be referenced
31 Initializes a new instance of the class from a COSDictionary. @param dictionary underlying data representation
32 Initializes a new instance of the Revisions class.
33 Initializes a new instance of PDPropertyList with specified COSDictionary. @param dict COSDictionary object representing property list
34 Initializes a new instance of the `PDBoxStyle` class with the provided styling attributes from the given COSDictionary. @param dic COSDictionary containing styling attributes
35 Initializes default permissions for PDF document access.
36 Initializes an instance of `AccessPermission` with given permission bits. @param permissions integer representing various access rights (importance score: 0.0)
37 Initializes PDCryptFilterDictionary with an existing COSDictionary.
38 Initializes the RC4 cipher instance with an empty salt array.
39 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
40 Initializes a new instance of FDFCatalog with provided COSDictionary. @param cat Form Data Format (FDF) catalog dictionary
41 Initializes an instance of FDFDictionary from COSDictionary. @param fdfDictionary input dictionary
42 Initializes an instance of FDFField from a COSDictionary object. @param f COSDictionary containing form field data
43 Initializes an instance of FDFIconFit with a COSDictionary.
44 Initializes a new instance of the class with the provided JavaScript data. @param javaScript COSDictionary containing JavaScript actions and metadata
45 Initializes a new instance of the class from COSDictionary. @param r COS dictionary containing page reference data
46 Initializes an FDFOptionElement instance from a COSArray representation. @param o COSArray object containing option data
47 Initializes an instance of FDFPage with a given COSDictionary. @param p COSDictionary representing the page's data
48 Initializes an FDFPageInfo instance with a COSDictionary. @param p COSDictionary containing page information
49 Initializes an FDFTemplate instance from a COSDictionary. @param t COSDictionary containing FDF template data
50 Initializes a new instance of the class from a given COS dictionary. @param desc font descriptor information in COS format
51 Initializes a new instance of the class with the given font settings. @param fs COSArray containing font settings
52 Initializes a new instance of the PDLineDashPattern class with default values.
53 Initializes a new BlendMode instance with specified parameters. @param name unique identifier for the blend mode @param blendChannel channel function for blending (optional) @param blend overall function for blending (required)
54 Creates a new PDColor instance with the specified pattern and color space. @param patternName COSName representing the color's pattern @param colorSpace PDColorSpace associated with the color
55 Initializes a new instance of PDDeviceNAttributes with provided attributes. @param attributes COSDictionary containing device N color space attributes
56 Initializes a new instance of PDDeviceNProcess with given device-dependent color space attributes. @param attributes COSDictionary containing color space attributes
57 Initializes PDGamma instance from COSArray. @param array COSArray containing color data
58 Initializes a new instance of PDTristimulus from tristimulus values. @param array COSArray containing X, Y, and Z values
59 Initializes a new instance of PDTransparencyGroupAttributes with a given COSDictionary. @param dic transparency group attributes stored in a COSDictionary object
60 Initializes a new instance of the class with given optional content properties. @param props COSDictionary containing optional content properties
61 Initializes a new instance of PDAbstractPattern from a COSDictionary. @param dictionary COSDictionary containing pattern properties
62 Initializes a new instance of PDShading from a given COSDictionary. @param shadingDictionary COSDictionary containing shading properties
63 Initializes a new instance of the `PDExtendedGraphicsState` class from a COSDictionary. @param dictionary COSDictionary containing extended graphics state properties @param resourceCache ResourceCache object for caching resources
64 Initializes soft mask from COSDictionary and ResourceCache. @param dictionary PDF soft mask properties @param resourceCache cache of resources for rendering
65 Initializes a new PDAction instance from a COSDictionary. @param a COSDictionary containing interactive action details
66 Initializes a new instance of the PDActionFactory utility class.
67 Initializes the PDAdditionalActions object with a given COSDictionary. @param a COSDictionary containing action data
68 Initializes a new instance of the class with a given annotation dictionary. @param a COSDictionary representing the annotation's properties
69 Initializes a new instance of the class with the provided catalog actions. @param a COSDictionary containing additional actions
70 Initializes additional actions from the provided COSDictionary. @param a COSDictionary containing form field actions
71 Initializes a new instance of PDPageAdditionalActions with the given actions dictionary. @param a COSDictionary containing interactive actions for the PDF page
72 Initializes a new instance of the PDTargetDirectory class from a COSDictionary object.
73 Initializes a new instance of the class with the given COSDictionary. @param dictionary underlying COSObject containing URI data
74 Initializes a new instance of the class from a COSDictionary. @param p COSDictionary containing launch parameters
75 Initializes a new instance of the class from a COSDictionary. @param dict COSDictionary containing appearance characteristics
76 Initializes a new instance of PDAppearanceDictionary from a COSDictionary. @param dictionary appearance attributes to be managed
77 Initializes a new instance of PDAppearanceEntry with the given COSDictionary.
78 Initializes the PDBorderEffectDictionary instance from a COSDictionary. @param dict COSDictionary containing border effect properties
79 Initializes a new instance of the class from a COSDictionary. @param dict COSDictionary containing border style properties
80 Initializes a new instance of `PDExternalDataDictionary` with an external data dictionary. @param dictionary COSDictionary object representing the external data
81 Initializes a new instance of the CloudyBorder class with specified parameters. @param stream PDAppearanceContentStream to render the border @param intensity level of cloudiness (0.0 - 1.0)
82 Initializes PDPropBuild with a COSDictionary. @param dict COSDictionary containing digital signature properties
83 Initializes the PDPropBuildDataDict instance from a COSDictionary. @param dict input dictionary
84 Initializes a new instance of the class from a given COSDictionary. @param dict input dictionary containing seed value information
85 Initializes a new PDSeedValueCertificate instance from a COSDictionary. @param dict COSDictionary containing certificate data
86 Initializes PDSeedValueMDP with a COSDictionary. @param dict dictionary containing seed value configuration
87 Initializes PDSeedValueTimeStamp with the given COSDictionary. @param dict COSDictionary containing timestamp data
88 Initializes a new instance of the PDSignature class from a COSDictionary object. @param dict underlying COSDictionary structure containing signature-related information
89 Initializes a new instance of the `SignatureOptions` class with default settings.
90 Initializes the PDFTemplateCreator with a configured PDF template builder. @param templateBuilder PDFTemplateBuilder instance
91 Prevents instantiation of this utility class.
92 Initializes a new instance of the PDField class with the given AcroForm, COSDictionary, and parent non-terminal field.
93 Initializes a new instance of the class with an XFA base.
94 Initializes a new instance of PDMeasureDictionary with the specified measurement dictionary. @param dictionary COSDictionary object representing the measurement data
95 Initializes a new instance of PDNumberFormatDictionary with a given COSDictionary. @param dictionary COSDictionary object containing formatting options
96 Initializes a new instance of the class with the given COSDictionary. @param dictionary COSDictionary containing viewport settings
97 Initializes a new instance of the class with the given thread. @param t the thread to be managed by this PDThread object
98 Initializes a new instance of PDThreadBead with a given COSDictionary. @param b COSDictionary representing the thread bead data
99 Initializes a new instance of the class with viewer preferences from a COSDictionary. @param dic COSDictionary containing viewer preferences
100 Initializes a new instance of PageDrawerParameters with specified settings. @param renderer PDFRenderer instance @param page PDPage object to render @param subsamplingAllowed whether subsampling is permitted @param destination RenderDestination for output @param renderingHints RenderingHints for optimization @param imageDownscalingOptimizationThreshold threshold value
101 Initializes a new instance of the class with given text position. @param position TextPosition object representing current text location
102 Initializes a new instance of the Matrix class with an identity transformation matrix.
103 Initializes a new instance of the Matrix class from an array of float values. @param src source transformation parameters
104 Initializes a new Matrix instance with the specified transformation parameters. @param a horizontal scale factor @param b horizontal shear factor @param c vertical translation factor @param d vertical scale factor @param e horizontal translation factor @param f vertical shear factor
105 Initializes a new instance of the class with default settings.
106 Initializes the PDFStreamEngine object with default values.
107 Processes M2 operator. @param op OperatorProcessor object
108 Validates and sets the ASCII85 terminator character. @param term character to validate (must be 118-126, excluding 'z')
109 Validates and sets the number of pages to split. @param split Number of pages for splitting
110 Validates and sets the start page for PDF splitting. @param start minimum page number (must be > 0)
111 Validates and sets the end mask page. @param end End page value
112 Sets the parsing mode to lenient or strict. @param lenient true for lenient, false for strict
113 Initializes CompressParameters with the specified object stream size. @param objectStreamSize size of the PDF object stream
114 Initializes a PDResources instance with the provided dictionary, resource cache, and font cache. Ensures non-null arguments. @param resourceDictionary COSDictionary containing resources @param resourceCache ResourceCache for caching resources @param directFontCache Map of cached fonts
115 Sets the blending mode for graphics rendering. @param blendMode the BlendMode to apply
116 Initializes an instance of the PDFieldTree class with a PDAcroForm. @param acroForm non-null root AcroForm instance
117 Returns the length mask for this COSStream. @throws IllegalStateException if an OutputStream is associated with this stream
118 Initializes a new instance of the PDFMergerUtility class.
119 Initializes a new instance of COSWriterObjectStream with a specified compression pool. @param compressionPool the compression pool for efficient data management
120 Initializes a new instance of PublicKeyProtectionPolicy with default settings.
121 Initializes text clipping list.
122 Adds a PDF file to be merged by the utility. @param source input PDF document
123 Merges source PDF document into this utility's output. @param source RandomAccessRead object representing source PDF data
124 Adds instruction with given name to sequence. @param name unique identifier for instruction
125 Executes function mask operation on InstructionSequence. @param child InstructionSequence to apply operation to
126 Associates a public key recipient with the policy. @param recipient PublicKeyRecipient object
127 Defines a rectangular text extraction area within the PDF document. @param regionName unique identifier for the text region @param rect rectangle defining the spatial criteria for text extraction
128 Updates the current cross-reference trailer object with a new trailer. @param trailer COSDictionary representing the trailer to update
129 Retrieves object from pool using the given key. @param key unique identifier (COSObjectKey)
130 Retrieves an operator object from the collection by its name. @param operatorName unique operator identifier (String)
131 Converts Unicode sequence to glyph name. @param unicodeSequence input Unicode string
132 Handles exceptions thrown during PDF operator execution, logging warnings or rethrowing the exception based on its type.
133 Retrieves and returns the top element from the graphics state stack. @return Graphics state object or null if empty
134 Pushes mask-related state onto graphics stack.
135 Retrieves a mask value from the graphics stack. @return Mask integer value
136 Applies matrix transformation to point (x, y). @param x input x-coordinate @param y input y-coordinate @return transformed point as Point2D.Float object
137 Decrements rendering level and logs warning if it reaches zero.
138 Applies mask to instruction sequence based on given value. @param value input value to determine masking
139 Checks for stream closure. @throws IOException if the underlying data stream is closed
140 Throws an IOException when reset is requested.
141 Throws an IOException when reset operation is attempted.
142 Returns the PDF encryption settings. @throws IOException if the document has not been parsed
143 Returns access permission for the parsed PDF document. @throws IOException if document has not been parsed
144 Initializes an instance of the class with a custom error message. @param message descriptive text indicating invalid password
145 Initializes an instance of the Operator class, enforcing operators cannot start with '/'. @param aOperator operator string to initialize with
146 Returns string representation of PDF operator.
147 Returns string representation of COSArray instance.
148 Returns string representation of COSObject in functional notation.
149 Retrieves a filter instance by name, throwing an exception for invalid filters. @param filterName COSName identifier of the desired filter @return Filter object if found, or null (not applicable here)
150 Validates operands against specified class using predicate. @param operands list of COSBase objects to validate @param clazz target class type
151 Injects a float value into the instruction sequence using m1 operation. @param value the float value to be injected
152 Sets the image width of a visible digital signature. @param width new image width
153 Sets digital signature image height and updates formatter rectangle parameters. @param height new image height in float
154 Calculates the square of the distance between two points. @param ps starting point @param pe ending point @return squared Euclidean distance between points
155 Calculates the area of a triangle formed by three points. @param p point 1 @param p1 point 2 @param p2 point 3
156 Initializes a new instance of PDMarkedContent with the given tag and properties. @param tag COSName representing the content's type @param properties COSDictionary containing additional metadata
157 Returns the mask value associated with this PDF pattern. @return Pattern mask string
158 Retrieves the mask value associated with this shading. @return the mask value (m1) of the shading
159 Retrieves the mask value associated with this button.
160 Sets the mask value associated with this checkbox. @param mask COSName instance representing the mask value
161 Applies terminal-specific functionality to each form field. @param fields list of PDFields to process
162 Checks if white point coordinates are zero.
163 Calculates color mapping for axial shading based on specified dimensions and parameters. @return int array representing color mapping
164 Computes a mapping of shading values based on the specified parameters. @return array of int values representing the shading map
165 Initializes LZW filter's code table with default values. @return pre-initialized code table
166 Applies mask to source PDFs. @param sourcesList collection of PDF documents to be masked
167 Retrieves an item from storage by key using underlying array's retrieval mechanism. @param index unique item identifier
168 Retrieves an item from storage by key. @param index unique item identifier
169 Calls size() on the underlying COSArray collection to retrieve its size.
170 Calculates the size of the associated COSArray object. @return The size of the COSArray
171 Returns the mask value based on recipient count. @return A value derived from the number of recipients
172 Calls helper function from objects collection.
173 Calls underlying COS structure to perform operation 'm1'.
174 Checks if a public key recipient matches the specified mask value. @param recipient PublicKeyRecipient object to check
175 Returns an iterator over the COSBase elements in this collection.
176 Returns an iterator over the elements in this COSArrayList. @return Iterator object
177 Retrieves an iterator over public key recipients. @return Iterator over PublicKeyRecipient objects
178 Returns a list of all COSBase objects in the array.
179 Retrieves a list of COSName objects with specific masks. @return List of masked COSName objects or empty list if none found
180 Retrieves and processes COSBase object data using stream operations. @return List of processed string elements or null if input is invalid
181 Converts standard Boolean to COSBoolean representation. @param value input Boolean value
182 Converts boolean value to string representation using mask. @return formatted string or null if not applicable
183 Writes boolean value to specified output stream. @param output target output stream
184 Writes null bytes to the specified output stream. @param output target output stream
185 Writes masked content to output stream using m1. @param data input byte array
186 Returns an unmodifiable Set view of key-value pairs in this dictionary. @return Set containing all entries in the map
187 Checks for changes in user-defined properties by comparing old and new entries. @param oldEntry previous property entry @param newEntry updated property entry
188 Retrieves size from underlying collection.
189 Retrieves a single item from storage based on its key. @param key unique identifier of the entity to retrieve
190 Retrieves a set of COSName objects from an underlying data structure. @return Set of COSName objects
191 Invokes an action on each item in the collection. @param action BiConsumer to execute on each item
192 Retrieves COSBase objects from the dictionary using the 'm1' key. @return Collection of COSBase objects or empty collection if not found
193 Masks items in the COS dictionary using m1. @param dict COS dictionary to modify
194 Checks if the COSDictionary contains a specified name.
195 Extracts substrings from input string using space pattern. @param s input string to process
196 Converts string representation of an integer to its native numeric value. @param token input string containing integer value
197 Returns function type as string.
198 Validates and sets the encryption key length. @param l key length (must be 40, 128 or 256)
199 Sets the starting page number for masked text extraction. @param startPageValue 1-based page value (must be > 0)
200 Validates and sets the end page value for text extraction. @param endPageValue 1-based page number (must be > 0)
201 Initializes a new instance of the BruteForceParser class with the given PDF document and parser. @param cosDocument COSDocument object containing the PDF data @param cosParser COSParser object for parsing and comparing COS objects
202 Initializes a new instance of the class with default configuration.
203 Initializes a PDResources object from a COSDictionary. @param resourceDictionary COS dictionary containing PDF resources
204 Initializes a PDResources object from the given COSDictionary and ResourceCache. @param resourceDictionary COSDictionary containing PDF resources
205 Initializes the Operators class by populating its internal collection with predefined operator objects.
206 Initializes a new instance of the PDAcroForm class with the given PDF document and form dictionary. @param doc the parent PDF document @param form the COSDictionary representing the form to be managed
207 Returns the function mask value based on cross-reference map.
208 Retrieves a COSObject instance from the pool or creates a new one. @param key unique identifier for the COSObject
209 Updates the cross-reference table with new values. @param xrefTableValues map of COSObjectKey to Long values
210 Converts string representation of a floating-point number to its numeric value. @param token string containing a decimal number
211 Coerces float values to a valid range. @param floatValue input value to be coerced
212 Calculates the text rotation direction based on the text matrix. @return Rotation angle in degrees (0, 90, 180, or 270)
213 Compares this float value with another object's float representation. @param o Object to compare, must be a COSFloat instance
214 Computes and returns the hash code of this COSFloat object.
215 Formats the floating-point value as a string, choosing between scientific and decimal notation. @return String representation of the float value
216 Writes null value and whitespace to the specified output stream. @param output target output stream
217 Initializes an instance of COSIncrement with update origin information. @param incrementOrigin COSUpdateInfo object specifying update origin
218 Initializes utility instance with destination PDDocument. @param dest target PDDocument object
219 Initializes the DefaultResourceCache instance with caching stability enabled. @param enableStableCache whether to use a stable cache
220 Determines if update mask is set based on document update state. @return true if update mask is enabled, false otherwise
221 Checks if the given COSBase object is managed by this collection. @param base the COSBase object to search for
222 Checks if COSBase object has exclusion mask set. @param base COSBase object to check
223 Processes COSBase object by passing it to internal collection. @param object COSBase object to process
224 Processes COSBase object and updates internal state. @param base COSBase object to process
225 Closes TrueType font resource. @param ttf TrueType font object
226 Retrieves a set of COS dictionaries representing form widgets. @param fields list of PDField objects @return Set of COS dictionaries for the specified fields' widgets, or empty set if no widgets found
227 Initializes COSInputStream with provided input stream and list of decode results. @param input the input stream to process @param decodeResults a collection of decode results to be managed by this object
228 Initializes ASCII85InputStream object with given input stream. @param is the InputStream to be decoded
229 Initializes a CCITTFaxDecoderStream instance with specified parameters. @param stream input stream containing TIFF image data @param columns number of columns in the image @param type compression type (CCITT Modified Huffman RLE, T4, or T6) @param options additional encoding options @param byteAligned whether to align bytes in the output
230 Creates a COSInteger instance for the given value within the specified range. @param val long integer value in range [LOW, HIGH]
231 Checks if this COSInteger instance matches another object's integer mask value. @param o Object to compare with
232 Returns string representation of COSInteger instance.
233 Writes integer value as ISO-8859-1 encoded string to the specified output stream. @param output target output stream
234 Retrieves a dictionary entry by its key. @param key unique dictionary identifier
235 Maps font name to its base name using alias. @param fontName font name to map
236 Registers standard font alias with its corresponding base name. @param alias unique font alias @param baseName actual font name (e.g. "Helvetica")
237 Retrieves a list of selected export values. @return List of String export values
238 Checks whether the COSName object is empty.
239 Writes content to the specified output stream, escaping special characters and appending a newline. @param comment input text to be written @throws IOException if an I/O error occurs
240 Writes a newline character to the output stream. @throws IOException if I/O error occurs
241 Converts input string to hexadecimal format. @param text input string
242 Constructs a COSObjectKey instance with the given object number, generation value, and stream index. @param num PDF object number @param gen generation value @param index stream index
243 Calculates hash code based on number and generation values.
244 Calculates a value based on the first and second elements of the 'single' array. If the result of Float.isInfinite() with the second element as argument is not zero, returns the square root of the sum of the first two elements squared plus 2 times each, otherwise returns the first element.
245 Calculates a weighted value based on the first and fourth elements of the 'single' array. @return The result of the calculation or the fifth element if condition fails
246 Initializes COSOutputStream with provided filters, parameters, output stream, and cache. @param filters list of filters to apply @param parameters dictionary of parameters for encoding data @param output output stream to write to @param streamCache cache for managing random access streams
247 Initializes a new instance of the ASCII85OutputStream class. @param out OutputStream to encode binary data into ASCII85 format
248 Initializes a new instance of the class with the specified output stream. @param out target OutputStream to write data to
249 Initializes a new instance of COSStandardOutputStream with output stream and current writing position. @param out output stream @param position initial writing position
250 Cleans up stream and access resources. @throws IOException if an I/O error occurs during cleanup
251 Closes cached streams and associated resources.
252 Creates a copy of the internal string representation. @return new byte array containing same elements as original
253 Initializes the PDF structure with incremental data. @throws IOException if an I/O error occurs
254 Returns the ASCII-encoded string representation of bytes.
255 Checks if the document state is accepting updates. @return true if not parsing, false otherwise
256 Converts a byte array to a string using the PDFDocEncoding mapping. @param bytes input byte array
257 Extracts and formats a mask value from the input stream. @throws IOException if an I/O error occurs during parsing
258 Converts a String to a byte array using the specified encoding. @param text input string to be encoded
259 Checks if input character has a mapping in PDFDocEncoding. @param character the character to check
260 Checks if dictionary contains specified key. @param key the key to look up in the map
261 Checks if standard 14 fonts map contains specified alias. @param fontName the font name to look up in the map
262 Returns an unmodifiable map of font code-to-name associations. @return a read-only view of the code-to-name mapping
263 Returns an unmodifiable map of inverted font encoding mappings. @return map of inverted code-to-name associations
264 Disallows modification by setting mask based on input flag. @param flag boolean indicating whether to disallow modification
265 Reads individual bytes from the ASCII85 encoded data stream. @return next byte value or -1 if end of file
266 Resets internal state and closes ASCII85InputStream resource.
267 Encodes input byte into ASCII85 output stream, triggering further processing and writing. @param b the input byte to be encoded
268 Writes ASCII85 encoded output, handling flushing and resetting state. @throws IOException if an I/O error occurs
269 Prepares password for encryption by padding and copying. @param password user-provided password @return byte array with padded password
270 Flushes graphical content to output stream, ensuring proper rendering in PDF document.
271 Exports XMP metadata to an output stream. @param xmp byte array containing XMP data
272 Checks if page number is a valid split point. @param pageNumber current page number
273 Encodes JPEG2000 image data using provided parameters. @param input InputStream containing the image data @param encoded OutputStream for storing the encoded data @param parameters COSDictionary with encoding settings
274 Updates the COSDictionary with key-value pairs from the provided map.
275 Throws an exception when attempting to modify the rectangle's mask.
276 Prevents modification of rectangle dimensions.
277 Disallows setting a mask value on an immutable rectangle.
278 Disallows modifying rectangle dimensions.
279 Returns the mask value. @throws UnsupportedOperationException as this method is not yet implemented
280 Sets mask pattern based on provided text.
281 Sets mask value, unsupported - use setValue(PDSignature value) instead.
282 Determines the mask for compression level based on system property and default settings. @return Compressed value as int
283 Calls actual implementation of m1 method.
284 Initializes FlateFilterDecoderStream with input stream and skips Zlib header. @param inputStream underlying input stream to decode from
285 Decompresses data using Flate algorithm and closes underlying stream. @throws IOException if I/O error occurs during decompression
286 Initializes a new instance of the PDVisibleSigBuilder class.
287 Initializes PDVisibleSignDesigner with a BufferedImage, setting its properties. @param image the input image
288 Retrieves the LZW code for a given pattern from the provided code table. @param codeTable list of byte arrays representing the code table @param pattern byte array to search for in the code table @return LZW code (integer) if found, -1 otherwise
289 Applies the specified predictor algorithm to the image data. @param predictor type of prediction to apply @param colors number of color components in the image @param bitsPerComponent number of bits per component in the image @param columns number of columns in the image @param actline current line of image data @param lastline previous line of image data
290 Checks if COSBase object exists in pool based on given key. @param key unique identifier of the COSBase object
291 Registers a security handler by name and associated protection policy. @param name unique identifier for the security handler @param securityHandler class of the security handler to register @param protectionPolicy class of the protection policy to associate with the security handler
292 Checks if font encoding mapping contains specified name. @param name the name to search for
293 Checks if font encoding mapping exists for specified code. @param code unique font encoding identifier
294 Escapes XML special characters in the input string. @param input input string to be processed
295 Updates the form's bounding box mask array based on provided rectangle. @param bbox the rectangle to update with
296 Converts a hexadecimal string to a byte array, ignoring newline and carriage return characters. @param s input string containing hexadecimal data @return byte[] representation of the input data
297 Performs cleanup operations on the PDF document. @throws IOException if any resource cannot be closed
298 Validates FDF document sources and throws an IOException if any source is invalid. @throws IOException if validation fails
299 Retrieves the COSDictionary representing this PDF stream's filter mask. @return Filter mask COSDictionary or null if not applicable
300 Initializes a new PDXObject instance with the given PDStream and COSName subtype. @param stream underlying PDF stream object @param subtype type of graphical object (e.g. XOBJECT)
301 Retrieves the filter mask COSStream associated with this PDF stream's data. @return Filter mask COSStream or null if not applicable
302 Retrieves the filter mask COSStream object.
303 Applies filter mask to PDF metadata. @param metadata COSStream object containing metadata
304 Checks if any annotation in the list matches a specific condition based on widget properties. @param annotations list of PDAnnotations to check @param widget related PDAnnotationWidget for matching criteria @return true if a match is found, false otherwise
305 Compares this annotation with another for equality. @param o the object to compare with @return true if both annotations are equal, false otherwise
306 Retrieves a set of actual keys from the underlying map.
307 Checks for a specific signature field in the given iterator. @param fieldIterator iterator containing fields to search @param signatureField target signature field to find @return true if found, false otherwise
308 Retrieves collection of values from underlying map. @return Collection of values associated with keys in COSDictionaryMap
309 Initializes a new instance of the BaseParser class with a given PDF source. @param pdfSource the RandomAccessRead object representing the PDF file
310 Parses PDF content using the M1 parsing result. @throws IOException if an I/O error occurs
311 Adds XRef entry for the given object key at specified offset. @param objKey COSObjectKey representing the object @param offset long value indicating the offset
312 Updates mapping from code to name and vice versa. @param code font character code @param name corresponding font name
313 Recursively processes COS dictionary using m1() and returns result. @throws IOException if processing fails
314 Checks for line breaks in PDF data. @param linebreak ASCII code of the character to check
315 Calculates the function mask based on input parameter and PDF source data. @param bracesParameter input parameter @return function mask value or original input if invalid
316 Evaluates input character against custom masks. @param c ASCII code of the character to check
317 Reads and appends mask characters from the PDF source to a StringBuilder. @return StringBuilder containing the extracted mask characters or an empty string if none found
318 Decodes input buffer and returns its string representation. @param buffer ByteArrayOutputStream containing encoded data
319 Verifies the next character in the PDF source matches a specified mask. @param ec expected character
320 Extracts PDF component using COS dictionary parser. @throws IOException if extraction fails
321 Parses the start cross-reference value from the PDF trailer. @throws IOException if an error occurs during parsing
322 Retrieves the last EOF marker position by brute-forcing the PDF data stream. @return last found EOF marker position or Long.MAX_VALUE if not found
323 Searches for XRef tables offsets in the PDF data stream. @return list of long values representing XRef table offsets or empty if not found
324 Retrieves the number of color components for triangle-based shading. @return int value representing the number of color components
325 Fetches offsets of cross-reference streams in the PDF data stream. @return List of Long values representing the offsets, or an empty list if not found
326 Resolves object offsets using the cross-reference trailer resolver. @return map of COSObjectKeys to Long object offsets
327 Fetches the function mask from the PDF file, handling trailing bytes and markers. @throws IOException if an I/O error occurs while reading the file
328 Processes endstream data from the PDF stream filter. @param out EndstreamFilterStream object to process
329 Initializes a new instance of the ToUnicodeWriter class with default values.
330 Sets a page label range for the specified start page. @param startPage starting page index @param item PDPageLabelRange object containing label details
331 Maps character identifier (CID) to Unicode representation. @param cid valid CID value @param text string representation of the CID
332 Determines if the current position is within a binary data section. @return true if no binary data found, false otherwise
333 Checks if the next token is a mask.
334 Computes mask value for XReferenceEntry. @param entry cross-reference entry to process
335 Calculates the width of each column in the cross-reference stream. @return array of three integers representing the maximum width of each column
336 Initializes a new instance of the class with the given highest cross-reference object number. @param highestXRefObjectNumber unique identifier for the highest object in pool
337 Resolves the cross-reference trailer based on offsets. @return COSDictionary object representing the trailer, or null if not found
338 Resolves the PDF trailer dictionary based on cross-reference table offsets. @return COSDictionary object representing the trailer, or null if not found
339 Retrieves object references by mask value. @param objstmObjNr object stream object number
340 Calculates the function mask by combining m1 and m2 values. @return combined long value
341 Calculates the object's functional mask value. @return The combined generation values of the COSObjectKey
342 Returns the string representation of a FreeXReference, including its attributes.
343 Returns the mask value based on internal reference information. @return The calculated mask value
344 Retrieves the function mask key by combining generation values. @return combined COSObjectKey representing the function mask
345 Returns a string representation of the cross-reference entry, including its key and byte offset.
346 Retrieves the mask value from the parent object key.
347 Retrieves index mask as per ObjectStreamXReference's requirements. @return index mask value
348 Formats the reference details into a string, representing an ObjectStreamEntry. @return A formatted string with key, type, object stream index, and parent object's key.
349 Writes data to output stream with carriage return and line feed sequences. @param b byte array to be written @param off starting offset in the array @param len number of bytes to write
350 Writes binary data to output stream with carriage return and line feed sequences, starting from current writing position.
351 Writes EOL sequence and toggles new line mode.
352 Checks if compression is enabled based on object stream size and parameter evaluation. @param compressParameters parameters for evaluating compression
353 Updates cross-reference table with given XReferenceEntry. @param entry new reference entry to add
354 Writes a COS object reference to the specified output stream. @param output target output stream @param indirectReference COSObjectKey instance containing reference data
355 Generates a mask array from the provided XReferenceEntry list. @param xRefEntriesList list of cross-reference entries
356 Retrieves an MD5 message digest instance. @throws RuntimeException if the MD5 algorithm is not found
357 Returns a SHA-1 message digest instance. @throws RuntimeException if SHA-1 algorithm is not available
358 Returns a SHA-256 message digest instance. @throws RuntimeException if SHA-256 algorithm is not available
359 Updates the PDF document with FDF data, handling incremental updates and encryption. @param doc FDFDocument object containing user input
360 Retrieves compressed object from pool based on M1 value.
361 Returns an unmodifiable list of COS object keys. @return List of COSObjectKey objects
362 Updates the font encoding mapping with a new or updated association. @param code unique font code @param name associated font name
363 Initializes a region by name. @param regionName unique identifier for the region
364 Formats decimal values with specified number of fraction digits. @param fractionDigitsNumber maximum allowed fraction digits (0-20)
365 Initializes a new instance of the PDAbstractContentStream class. @param document PDDocument instance @param outputStream OutputStream for writing content stream @param resources PDResources object for accessing graphics settings
366 Retrieves the vertical displacement Y value for a given CID. @param code font metric identifier
367 Returns masked value using standard or default value. @param standardValue preferred value to use @param defaultValue fallback value if standard is null
368 Adjusts the digital signature's dimensions based on a percentage increase. @param percent percentage value to scale the signature size
369 Calculates mask width as a float value.
370 Calculates the mask value based on image height.
371 Rotates the visible sign designer's image based on the current rotation. @param none
372 Constructs an AffineTransform from the given matrix values. @return AffineTransform object representing the transformation
373 Encodes specified text into a byte array using the current font. @param text input string to encode @return encoded byte array representation of the text
374 Retrieves glyph name by Unicode code point. @param codePoint Unicode identifier
375 Retrieves a specific rendering state based on the provided COSName instance. @param state COSName instance to determine the rendering state from
376 Retrieves the fundamental state of optional content from a COSName instance. @param state COSName object containing state information
377 Retrieves the CMAP lookup table with functional mask. @param font PDType0Font object representing the font
378 Initializes a PDDocument instance from a COSDocument and input streams. @param doc COSDocument containing PDF metadata @param source RandomAccessRead stream for reading PDF content @param permission AccessPermission object controlling document access
379 Initializes a new instance of the FDFDocument class with the provided COSDocument and RandomAccessRead source. @param doc COSDocument object associated with the FDF document @param source RandomAccessRead source for the FDF data
380 Retrieves data from associated COS structure. @return array of objects or null if not found
381 Delegates element array transformation to associated COS structure. @param a input array of elements
382 Calls the actual implementation of m1. @param o the element to search for
383 Checks if this COSArrayList contains all elements of another collection. @param c the collection to check against
384 Iterates over a collection and performs an action on each element in the context of this COSArrayList. @param c Collection to iterate over
385 Iterates over a collection and removes elements that do not match the underlying COSArray. @param c Collection to process
386 Calls the m1 method on associated COS object.
387 Calls the hashCode method on associated COSArrayList's underlying object. @return hash code value
388 Calls actual implementation of lastIndexOf via delegate. @param o target object to search for
389 Returns an iterator over the COSArrayList's elements in forward order. @return list iterator object
390 Returns an iterator over the specified collection's elements at the given position. @param index the list index to start iterating from
391 Returns a portion of this COSArrayList's elements. @param fromIndex index of first element to include (inclusive) @param toIndex index of last element to include (exclusive)
392 Checks if a specified value is present in the collection. @param value the value to search for @return true if value exists, false otherwise
393 Returns an unmodifiable set view of key-value pairs in this COSDictionaryMap. @param s backed by the original map's mappings
394 Returns a set of aliases for standard fonts. @return unmodifiable set of font aliases
395 Calls the toString method on the underlying COSDictionary. @return string representation of the dictionary
396 Creates a COS object representing the mask for a numeric node. @param base COSBase object containing relevant data @return COSObjectable object or throws IOException on failure
397 Generates a string representation of a number in letter format. @param num the input number
398 Computes mask value based on m1 calculation. @return Mask value derived from labels.m1()
399 Computes page label range starting from given page. @param startPage initial page index
400 Returns a set of unique page indices based on the current label configuration.
401 Returns the first element of the 'm1' array.
402 Constructs a new PDColor instance with the specified components and color space. @param components array of color components @param colorSpace associated color space
403 Retrieves the mask for this color's components. @return array of float values representing the mask
404 Initializes a new instance of the `CoordinateColorPair` class with a point and its associated color values. @param p two-dimensional point @param c array of color values
405 Returns a string representation of the Function Type 2 parameters. @return string in format "FunctionType2{ C0: m1 C1: m2 N: m3 }"
406 Calculates the boundary of a shaded triangle. @return array of 4 integers representing the minimum and maximum x and y coordinates
407 Retrieves the function mask from the top of the execution context stack. @return Function mask value as a Number object
408 Retrieves and returns a specific integer value from the stack. @return int representation of the m1 value
409 Retrieves m2 value from top of execution stack. @param none @return m2 value as a float
410 Sets the mask instruction based on the provided boolean value. @param value true to enable or false to disable the mask
411 Initializes an ExecutionContext instance with the given operator set. @param operatorSet Operator set to be managed by this context
412 Compiles and combines list item pattern expressions into a List of Patterns. @return A list of compiled patterns
413 Initializes the Mac Expert encoding table.
414 Initializes the MacRoman character mapping table.
415 Initializes the standard encoding table by populating entries into a COSBase object. @param none
416 Initializes the symbol encoding table from the predefined SYMBOL_ENCODING_TABLE.
417 Initializes the WinAnsiEncoding object by populating it with character mappings from the WIN_ANSI_ENCODING_TABLE.
418 Initializes the ZapfDingbatsEncoding with predefined character mappings.
419 Constructs a string representation of an array, using objects' toString() method. @param array array of objects to be converted
420 Formats an array of floats into a comma-separated string. @param array float values to be formatted
421 Applies mask to text at specified position. @param text TextPosition object representing the location of the text
422 Applies marked content to PDMarkedContent instance. @param markedContent managed content object
423 Applies mask operation to PDXObject. @param xobject object to be masked
424 Enables or disables printing permission. @param allowPrinting true to allow, false to disallow
425 Updates modification permission bit based on user authorization. @param allowModifications true to permit modifications, false otherwise
426 Enables or disables PDF content extraction based on permission. @param allowExtraction true to enable, false to disable extraction
427 Enables or disables annotation modification based on permission. @param allowAnnotationModification true to allow, false to deny
428 Enables or disables filling in forms based on permission. @param allowFillingInForm true to enable, false to disable
429 Enables or disables document extraction based on accessibility needs. @param allowExtraction true to enable, false to disable
430 Configures assembly permission based on input. @param allowAssembly true to enable, false to disable document assembly
431 Updates faithful print permission based on user authorization. @param canPrintFaithful true to enable or false to disable faithful print
432 Returns permission mask for printing PDF documents. @return true if print permission is granted, false otherwise
433 Checks if modification permission is enabled. @return true if MODIFICATION_BIT is set, false otherwise
434 Checks if EXTRACT_CONTENT permission bit is set in the mask. @return true if user can extract content, false otherwise
435 Checks if modify annotations permission bit is set in the mask. @return true if permitted, false otherwise
436 Checks if fill-in-form permission bit is enabled. @return true if fill-in-form allowed, false otherwise
437 Checks if extract for accessibility permission bit is set.
438 Checks if ASSEMBLE_DOCUMENT permission is enabled.
439 Returns whether faithful print permission is enabled.
440 Retrieves a decryption key from the keystore based on the current keystore state. @throws KeyStoreException if the private key is not recoverable or the required algorithm is missing
441 Returns a secure random instance, either a custom one or a default system-provided one.
442 Initializes the RC4 cipher with a given encryption key. @param key input byte array to be used for encryption
443 Encrypts a single byte using the RC4 cipher algorithm and writes it to an output stream. @param aByte the byte to be encrypted @param output output stream where encrypted data will be written
444 Normalizes input string by handling diacritics and applying Unicode normalization. @param str input string to be normalized
445 Validates a Unicode code point against the Simple Authentication and Security Layer (SASL) protocol's rules. @param codepoint Unicode code point value to validate @return true if the code point is invalid, false otherwise
446 Calculates the encryption mask based on key length and policy. @return int mask value indicating encryption type
447 Retrieves the BouncyCastleProvider instance. @return Singleton instance of BouncyCastleProvider
448 Extracts text values from child nodes of the given XML element. @param node XML Element object containing child nodes @return concatenated string of text values from child nodes
449 Extracts and formats PDF text into structured format. @param text raw text from PDF document
450 Retrieves a CMap by name from the cache or creates and caches it if not found. @param cMapName unique identifier of the CMap
451 Retrieves and parses a predefined CMap resource. @param randomAccessRead input data to be parsed
452 Fetches font name variants by PostScript name. @param postScriptName unique PostScript identifier
453 Generates a set of points that make up the line between two given coordinates. @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate
454 Calculates the number of unique points in a collection of Point2D arrays. @param p array of Point2D objects to process @return integer count of unique points
455 Stores a font reference in the cache using the provided FontInfo. @param info unique identifier for the font @param font FontBoxFont object to be cached
456 Retrieves font from cache based on provided FontInfo. @param info font information
457 Maps font name to functional mask (font alias). @param baseName base font name
458 Applies font mapping by converting the PostScript name to lowercase and using it as a key to find the substitute. @param match PostScript name of the font to be mapped @param replace replacement font information
459 Fetches FontInfo by PostScript name and format. @param format FontFormat to match @param postScriptName unique PostScript identifier @return FontInfo object or null if not found
460 Retrieves list of font substitutes based on PostScript name. @param postScriptName unique PostScript identifier
461 Retrieves font encoding name from code using mapping m1. @param code unique font code
462 Finds the best font match by iterating over a priority queue of FontMatch objects. @param queue PriorityQueue containing FontMatch objects to evaluate @return The best matching FontMatch object or null if queue is empty
463 Retrieves a 2-character string representation of a CID font type. @param cid unique character identifier @return Type2CharString object or null if not found
464 Retrieves the CMap for font masking using the given code. @param code input value to process
465 Converts color components to an integer RGB value. @return combined integer RGB value
466 Calculates the color value for a group graphic, blending with backdrop RGB. @param groupRGB input color of the group @param backdropRGB background color @param shift bit shift for extracting color components @param alphaFactor transparency factor (0.0-1.0) @return blended color value (0-255) or 0/255 if out of range
467 Returns a byte array representing the mask of this chunk. @return byte array containing the mask data
468 Retrieves glyph list with mask functionality enabled. @return GlyphList object with default glyphs and mask enabled
469 Initializes cmap data by iterating through cmap subtables and setting cmapWinUnicode, cmapWinSymbol, and cmapMacRoman variables accordingly.
470 Loads and parses the font metrics for a given standard 14 font. @param fontName FontName enumeration value
471 Evaluates TrueType font embedding permission based on file system type. @param ttf TrueTypeFont object
472 Evaluates TrueType font subsetting permissions. @param ttf TrueTypeFont object @return true if subsetting is allowed, false otherwise
473 Generates a mask string from the provided GID-to-CID map. @param gidToCid mapping of glyph IDs to character IDs
474 Converts glyph name to Unicode sequence. @param name glyph name @return Unicode sequence or null if not found
475 Initializes a Type1Encoding instance from the given FontMetrics. @param fontMetrics FontMetrics object containing character metrics and encoding information
476 Constructs a PDColor instance with specified color components, pattern name, and color space. @param components array of float values representing the color @param patternName COSName object for the pattern name @param colorSpace PDColorSpace object for the color space
477 Creates a buffered image from the provided writable raster and color space. @param raster WritableRaster instance @param awtColorSpace ColorSpace object
478 Converts a WritableRaster to a BufferedImage with the specified ColorSpace. @param raster source raster data @param colorSpace target color space @return converted BufferedImage or null on failure
479 Checks if the given ICC profile matches the sRGB color space. @param profile ICC_Profile object to be checked @return true if the profile is for sRGB, false otherwise
480 Determines the color space type based on ICC profile or alternate color space. @return Color space type (TYPE_GRAY, TYPE_RGB, TYPE_CMYK) or invalid (-1)
481 Creates a JPEG image from a BufferedImage and adds it to the given PDDocument. @param document target PDF document @param image source BufferedImage
482 Initializes a PredictorEncoder instance for the given image and PDF document. @param document PDDocument object representing the PDF file @param image BufferedImage object containing the image data
483 Resizes and interpolates an image to the specified dimensions while maintaining its original aspect ratio. @param image the input image @param width the desired width of the output image @param height the desired height of the output image @param type the color type of the output image (e.g. BufferedImage.TYPE_BYTE_GRAY) @param interpolate whether to perform interpolation when resizing the image @return the resized and interpolated image or null if an error occurs
484 Returns the mask dictionary for inline image.
485 Parses PNG image data and extracts relevant information. @param imageData the input PNG image bytes @return a PNGConverterState object or null if parsing fails
486 Merges IDAT chunks into a single input stream. @param state PNGConverterState object containing IDAT chunks
487 Initializes patch with specified color values from corners. @param color 2D array of color values (red, green, blue) per corner
488 Calculates the clipping area for a PDF graphics state. @return Clipped Area object
489 Initializes a PlainText instance with a list of paragraph strings. @param listValue collection of text values to be converted into paragraphs
490 Calculates a mask value based on dictionary contents. @return integer mask value
491 Computes an affine transform mask based on bounding box coordinates. @return AffineTransform object with translation applied to bboxMinX and bboxMinY
492 Computes parameters for a cloud-like shape based on input values and dimensions. @param advInterm intermediate value of the shape's appearance @param advCorner corner value of the shape's appearance @param k scaling factor for the shape's dimensions @param r radius of the shape @param length total length of the shape @param array output array to store computed parameters (alpha, dx)
493 Calculates the functional mask value for a cloud-like border based on two points and curvature. @param pt first point @param ptNext second point @param r radius @param curlAdv curvature advance value
494 Applies mask transformation to cloud border shape based on polygon area. @param points array of Point2D.Double objects representing polygon vertices
495 Computes and returns an array of Point2D.Double objects representing the outline of a cloud-like shape, given its bounding box coordinates. @param left left edge of the bounding box @param bottom bottom edge of the bounding box @param right right edge of the bounding box @param top top edge of the bounding box @return array of Point2D.Double objects or null if computation failed
496 Checks if a GeneralPath represents a mask. @param path Path to check @return true if the path is a valid mask, false otherwise
497 Calculates the mask value based on the 'm1' property. @return Mask value as a floating-point number
498 Sets horizontal and vertical transformations for the visible digital signature. @param x horizontal scaling factor @param y vertical positioning (Y-coordinate)
499 Initializes the designer with a custom affine transformation. @param affineTransform custom transformation matrix
500 Initializes PDPageFitDestination object from given COSArray. @param arr COSArray containing page destination data
501 Initializes PDPageFitHeightDestination object from given COSArray. @param arr COSArray containing page destination data
502 Initializes PDPageFitRectangleDestination object from given COSArray. @param arr COSArray containing page destination data
503 Initializes PDPageFitWidthDestination object from given COSArray. @param arr COSArray containing page destination data
504 Initializes PDPageXYZDestination object from given COSArray. @param arr COSArray containing page destination data
505 Ensures a given PDOutlineItem has no sibling nodes, throwing an exception otherwise. @param node the outline item to validate
506 Returns an iterator over child outline items.
507 Sorts form field key-value pairs in ascending order. @param pairs list of key-value pairs to be sorted
508 Sorts key-value pairs by key using a custom comparator. @param pairs list of KeyValue objects to be sorted
509 Applies rendering hints and mask function to graphics context. @param renderingHints map of rendering hint keys to values
510 Applies a transformation to the specified line path based on its type. If the type is not translation or flip, scales the path by the horizontal and vertical scale factors if they are both greater than 1.0. Otherwise, returns the original line path. @param linePath the input graph path @return transformed GeneralPath object or the original one if no transformation was applied
511 Calculates the optimal subsampling factor for a given PDImage and AffineTransform. @param pdImage input image data @param at affine transformation applied to the image
512 Rounds a double value to the nearest integer and returns it as an integer. @param num input double value
513 Calculates the function mask value for a given rotation angle. @param rotation angle of rotation in degrees
514 Calculates the function mask value based on rotation and text matrix properties. @param rotation angle of rotation in degrees
515 Calculates the function mask value for a given rotation. @param rotation input rotation angle
516 Formats text position and writes Unicode representation. @param text TextPosition object to process
517 Returns text element mask based on m1 calculation. @return String representing text element mask
518 Retrieves text from specified PDF region by name. @param regionName unique identifier of region to extract text from
519 Generates article start mask based on language direction. @param isLTR whether to use left-to-right or right-to-left formatting
520 Generates article end mask and writes it to output stream. @throws IOException if an I/O error occurs during writing
521 Formats extracted text using m1 function and writes result to output stream.
522 Formats extracted text using m2 and m1 methods. @throws IOException if an I/O error occurs during formatting
523 Writes paragraph start marker and updates internal state. @throws IOException if an I/O error occurs during writing
524 Generates mask to reset page start position.
525 Calculates and writes current page end mask to output stream.
526 Filters a list of patterns to find the first match. @param string input string to search @param patterns collection of patterns to apply @return matching pattern or null if none found
527 Reorders and formats text in a word based on its bidirectional properties. @param word input string to process
528 Processes input stream to extract and format text. @param inputStream Input stream containing PDF content
529 Returns a string representation of the text element with directional layout adjustment. @return adjusted string representation or original string if no adjustments needed
530 Processes text within the specified region area. @param text TextPosition object containing text coordinates
531 Checks if the text element represents a Unicode mask. @return true if the text is a valid mask, false otherwise
532 Formats the given timezone as a string (e.g., GMT+05:30 or -05:30). @param tz TimeZone object representing the time zone to format
533 Extracts and combines two nibbles from a byte using hexadecimal conversion. @param b input byte
534 Converts a byte array to its hexadecimal representation. @param bytes input byte array @return hexadecimal string representation of the input bytes
535 Returns an array of two bytes representing the hexadecimal form of the input byte. @param b input byte to mask
536 Converts byte array to ASCII representation. @param bytes input byte array
537 Writes hexadecimal representation of two nibbles from input byte to output stream. @param b input byte @param output output stream where data will be written
538 Encodes a given string to Base64 format. @param base64Value input string to encode
539 Merges two sorted segments of an array into a temporary auxiliary array. @param arr original array @param aux auxiliary array for merging @param from start index of the first segment @param mid end index of the first segment and start index of the second segment @param to end index of the second segment @param cmp comparator for element comparison
540 Initializes a Matrix from an AffineTransform. @param at the AffineTransform to convert
541 Transforms a 2D point using the provided matrix. @param point Point2D object to transform
542 Formats a floating-point number into ASCII byte representation. @param value the input value @param maxFractionDigits maximum number of fraction digits to display @param asciiBuffer buffer to store formatted bytes @return final offset in asciiBuffer, or -1 if invalid input
543 Retrieves the PDFBox library version from a properties file. @return version string or null on failure
544 Creates a new Document instance from the provided input stream, with options for namespace awareness. @param is InputStream containing XML data @param nsAware true to enable namespace awareness, false otherwise @return Document object or throws IOException on parsing error
545 Fetches trie value by byte sequence. @param bytes input byte array
546 Initializes a new COSBoolean instance with the given boolean value. @param aValue the initial boolean value
547 Initializes a COSName instance with the given name. @param aName string representation of the name
548 Ensures singleton instance by limiting creation to one instance.
549 Initializes a COSString instance from a byte array. @param bytes source byte data @param forceHex whether to force hexadecimal representation
550 Initializes a new instance of the COSDictionary class with an embedded COSUpdateState object.
551 Initializes a new COSObject instance with the provided COSBase object. @param object the underlying COSBase object
552 Initializes a new COSObject instance with the given COSBase object and ICOSParser. @param object COSBase object to be managed @param parser ICOSParser instance for parsing purposes
553 Initializes a new COSObject instance with the provided key and parser. @param key unique object identifier @param parser ICOSParser implementation for parsing PDF data
554 Initializes a new instance of the class with specified source region. @param x left coordinate @param y top coordinate @param width source region width @param height source region height
555 Initializes a FreeXReference instance with provided COSObjectKey and next free object. @param key unique identifier for the PDF object @param nextFreeObject ID of the next available free object in the cross-reference table
556 Creates an ObjectStreamXReference instance with specified index, referenced object key, and parent object's key. @param objectStreamIndex index of the object stream @param key referenced object key @param object referenced object @param parentKey parent object key
557 Initializes a new instance with stable cache enabled.
558 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary.
559 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary.
560 Initializes a new instance of PDUserProperty from the given COSDictionary and user attribute object. @param dictionary COSDictionary representation @param userAttributeObject associated user attribute object
561 Initializes a new instance of PDOutlineNode from a given COSDictionary. @param dict PDF outline data represented as a dictionary
562 Initializes a new instance of PDTransition from a COSDictionary.
563 Initializes a PDNameTreeNode instance from a given COSDictionary. @param dict dictionary containing hierarchical tree data
564 Initializes a PDNameTreeNode instance from a given COSDictionary. @param dict dictionary containing hierarchical tree data
565 Initializes a PDJavascriptNameTreeNode instance from a given COSDictionary. @param dic dictionary containing hierarchical tree data
566 Initializes a PDStructureElementNameTreeNode instance from a given COSDictionary. @param dict dictionary containing hierarchical tree data
567 Retrieves a PDNumberTreeNode instance with a specified mask value. @param dic COS dictionary containing numeric data
568 Initializes a new instance of the class with the given COSStream object. @param str COSStream object to be managed by this PDMetadata instance
569 Initializes a new instance of the class with the given COSStream object. @param str COSStream object to be managed by this PDStream instance
570 Initializes a new instance of the class with the given COSStream object. @param str COSStream object to be managed by this PDStream instance.
571 Initializes a new instance of the PDFunction class from a given COSBase object. @param function COSBase object representing mathematical function data
572 Initializes a PDXObject instance with the given COSStream and subtype. @param stream underlying COSStream object @param subtype COSName subtype identifier
573 Initializes a new instance of the class from a COSDictionary. @param dictionary underlying data representation
574 Initializes a new instance of the class from a COSDictionary. @param dictionary underlying data representation
575 Default constructor for the SecurityHandler class.
576 Initializes a new instance of the SecurityHandler class with specified protection policy. @param protectionPolicy security policy object
577 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
578 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
579 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
580 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
581 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
582 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
583 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
584 Initializes an FDFAnnotationPolygon object from a COSDictionary. @param a COSDictionary containing polygon annotation data
585 Initializes an FDFAnnotationPolyline object from a COSDictionary. @param a COSDictionary containing polyline annotation data
586 Initializes an FDFAnnotationSound object from a COSDictionary. @param a COSDictionary containing sound annotation data
587 Initializes an FDFAnnotationSquare object from a COSDictionary. @param a COSDictionary containing annotation data
588 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
589 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
590 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
591 Extracts and returns PANOSE font classification mask. @return PDPanoseClassification object with extracted mask
592 Returns a Composite instance based on the blend mode and alpha value. @param blendMode blending operation to apply @param constantAlpha alpha value for the source image (clamped between 0 and 1)
593 Retrieves the transparency group attributes for this form XObject. @return PDTransparencyGroupAttributes object or null if not initialized
594 Initializes a new instance of PDShadingPattern from a COSDictionary. @param resourceDictionary COSDictionary containing shading pattern properties
595 Initializes a new instance of PDAbstractPattern from a COSDictionary and sets up the resource cache. @param dictionary COSDictionary containing pattern properties @param resourceCache ResourceCache for managing associated resources
596 Initializes a new instance of PDShading from a given COSDictionary. @param shadingDictionary COSDictionary containing shading properties
597 Initializes a new instance of PDShading from a given COSDictionary. @param shadingDictionary COSDictionary containing shading properties
598 Initializes an AxialShadingPaint object with specified axial shading type and transformation. @param shadingType2 axial shading type @param matrix transformation matrix
599 Initializes a new instance of RadialShadingPaint with provided radial shading and transformation. @param shading PDShadingType3 object @param matrix transformation matrix
600 Initializes a new instance of the ShadingPaint class with provided Type 1 shading and transformation. @param shading Type 1 shading object @param matrix transformation matrix
601 Initializes a new instance of Type4ShadingPaint with provided type 4 shading and transformation. @param shading type 4 shading object @param matrix transformation matrix
602 Initializes a new instance of Type5ShadingPaint with provided Type 5 shading and transformation. @param shading PDShadingType5 object @param matrix transformation matrix
603 Initializes a new instance of the ShadingPaint class with type 6 shading and transformation. @param shading PDShadingType6 object @param matrix transformation matrix
604 Initializes Type7ShadingPaint with provided PDShadingType7 and transformation matrix. @param shading Type 7 shading object @param matrix transformation matrix for rendering
605 Initializes a new instance of the `PDExtendedGraphicsState` class from a COSDictionary. @param dictionary COSDictionary containing extended graphics state properties
606 Initializes soft mask from COSDictionary. @param dictionary PDF soft mask properties
607 Initializes PlainText object from input text value. @param textValue input text to be managed by this PlainText instance
608 Initializes a new PDActionEmbeddedGoTo instance from a COSDictionary. @param a COSDictionary containing interactive action details
609 Initializes a new PDActionGoTo instance from a COSDictionary. @param a COSDictionary containing interactive action details
610 Initializes a new PDActionHide instance from a COSDictionary. @param a COSDictionary containing interactive action details
611 Initializes a new PDActionImportData instance from a COSDictionary. @param a COSDictionary containing import data specifications
612 Initializes a new PDActionJavaScript instance from a COSDictionary. @param a COSDictionary containing interactive action details
613 Initializes a new PDActionLaunch instance from a COSDictionary. @param a COSDictionary containing interactive action details
614 Initializes a new PDActionMovie instance from a COSDictionary. @param a COSDictionary containing movie action details
615 Initializes a new PDActionNamed instance from a COSDictionary. @param a COSDictionary containing interactive action details
616 Initializes a new PDActionRemoteGoTo instance from a COSDictionary. @param a COSDictionary containing interactive action details
617 Initializes a new PDActionResetForm instance from a COSDictionary. @param a COSDictionary containing interactive action details
618 Initializes a new PDActionSound instance from a COSDictionary. @param a COSDictionary containing interactive action details
619 Initializes a new PDActionSubmitForm instance from a COSDictionary. @param a COSDictionary containing interactive action details for form submission
620 Initializes a new PDActionThread instance from a COSDictionary. @param a COSDictionary containing interactive action details
621 Initializes a new PDActionURI instance from a COSDictionary. @param a COSDictionary containing interactive action details
622 Creates a list of KeyValue pairs from given key and value lists. @param key list of unique identifiers @param value list of associated string values
623 Initializes a new instance of the non-terminal form field with the given AcroForm, COSDictionary, and parent non-terminal field. @param acroForm PDF document's interactive form @param field COS dictionary representing the field @param parent parent non-terminal field
624 Initializes a new instance of the PDTerminalField class with the given AcroForm, COSDictionary, and parent non-terminal field.
625 Initializes a new instance of PDMeasureDictionary with the specified measurement dictionary. @param dictionary COSDictionary object representing the measurement data
626 Returns a copy of the matrix from the single instance's m1(). @return cloned Matrix object
627 Creates a matrix for horizontal and vertical scaling. @param x horizontal scale factor @param y vertical scale factor
628 Creates a scaling matrix with specified translation values. @param x horizontal translation factor @param y vertical translation factor
629 Creates a rotation matrix with the specified angle and translation. @param theta rotation angle in radians @param tx horizontal translation factor @param ty vertical translation factor @return RotationMatrix object representing the transformation
630 Applies a 2D transformation to the given vector using the provided transformation matrix. @param vector input vector @return transformed vector
631 Scales vector coordinates by a specified factor. @param sxy scaling factor @return scaled Vector object
632 Returns a new instance of PDFieldTree for form masks. @return non-null PDFieldTree object
633 Sets default value for trie nodes with unassociated values. @param defaultValue default value to be associated
634 Retrieves object at specified index from revisions collection. @param index unique position identifier
635 Retrieves the revision number of an object from the collection. @return Revision number as integer or -1 if not found
636 Retrieves a mask value by index. @param index unique identifier
637 Updates revisions and associated objects with specified mask values. @param object T object to be updated @param revisionNumber current revision number
638 Updates the specified object's revision information. @param object managed object to update @param revisionNumber new revision number
639 Returns the standard encoding instance based on the given COSName. @param name COSName to check
640 Creates a soft mask from the given COSBase instance and ResourceCache. @param dictionary PDF soft mask properties @param resourceCache cache of resources for rendering
641 Finds the index of the first checked radio button.
642 Initializes PDF merger with input file. @param source path to PDF document to be merged
643 Parses the trailer section of a cross-reference table. @throws IOException if an I/O error occurs during parsing
644 Retrieves object from pool using the given key. @param key unique identifier (COSObjectKey)
645 Executes instruction sequence in the given context. @param context execution context for instructions
646 Initializes a new instance of COSDocument with specified StreamCache creation function and parser. @param streamCacheCreateFunction function to create StreamCache @param parser ICOSParser instance for document parsing
647 Processes FUNC_MASK operator and its operands. @param operator the current PDF operator @param operands list of COSBase objects representing operator arguments
648 Retrieves and returns the top element from the graphics state stack. @return Graphics state object or null if empty
649 Applies text line transformation matrix using graphics state stack. @param value new matrix to apply
650 Retrieves and returns the top element from the graphics state stack. @return Graphics state object or null if empty
651 Calls m1() and then executes m2 with provided Matrix object. @param value The matrix to be used in m2 operation
652 Calculates the function mask value based on the given width and transformation matrix. @param width non-negative input value
653 Retrieves and returns the non-stroking color from the graphics state stack. @return PDColor object representing the non-stroking color
654 Sets non-stroking color and its associated color space. @param color PDColor object to set as non-stroking color
655 Retrieves and returns the non-stroking color space with masking.
656 Retrieves and returns the stroking color from the graphics state stack. @return PDColor object representing the current stroking color
657 Sets stroking color in graphics state. @param color PDColor object representing new stroke color
658 Retrieves and returns the top color space element from the graphics state stack. @return Color space object or null if empty
659 Creates an InputStream for reading the contents of the current COSStream. @throws IOException if underlying data is closed or not properly initialized
660 Returns an OutputStream for writing to the COSStream. @throws IllegalStateException if another stream writer is already open
661 Retrieves list of ImageReader objects by format name and returns the first available one. @param formatName specific image file format (e.g. JPEG, PNG) @param errorCause detailed description of the image reader absence issue @return the first ImageReader object or null if not found
662 Retrieves ImageReader instance by format name, handling exceptions and iterating through available readers. @param formatName specific image file format (e.g. JPEG, PNG) @param errorCause detailed description of the image reader absence issue @return ImageReader object or throws MissingImageReaderException if not found
663 Retrieves an Operator instance based on the provided operator string. @param operator input operator string @return initialized Operator object or retrieved from cache
664 Returns string representation of COSArrayList instance by concatenating it with "COSArrayList{" and its child's string representation.
665 Checks if a point lies within a control polygon. @param ctl array of Point2D objects representing the control points
666 Calculates rectangle's width from storage.
667 Calculates the mask value from the first element of the rectangle array.
668 Calculates rectangle's width from stored array. @return Width of the rectangle
669 Calculates mask value based on rectangular shape.
670 Retrieves font size from PDFontSetting. @return Font size as a floating-point value
671 Retrieves gamma correction value from PDGamma's storage. @param index unique item identifier
672 Retrieves gamma correction factor from PDGamma's internal storage. @return gamma correction value as a float
673 Retrieves gamma correction factor from storage. @return gamma correction value as float
674 Retrieves X tristimulus value from PDTristimulus color representation. @return X component of the color
675 Retrieves and returns the Y tristimulus value from storage. @param index unique item identifier (always 1)
676 Retrieves and returns the X tristimulus value.
677 Retrieves a value from the array at specified index, or returns default value. @param index array index @param defaultValue default return value if index out of bounds
678 Retrieves a COSName object from the array at specified index, or returns default value if not found. @param index unique item identifier @param defaultValue fallback value to return in case of failure
679 Finds the mask index for a given COSBase object by iterating over the array and checking for matches. @param object COSBase object to search for @return index of matching item or -1 if not found
680 Retrieves the filter mask from the stream.
681 Initializes COSArrayList with actual list and associated COSArray. @param actualList collection of elements @param cosArray underlying COS structure
682 Evaluates the Function Type 2 PDF function for input values. @param input array of input values @return array of evaluated function values
683 Retrieves a list of COSName objects from the stream, handling different filter types. @return List of COSName objects or an empty list if not found
684 Retrieves the filter mask associated with this PDF stream. @return List of filter masks or empty list if none found
685 Writes a boolean value to the output stream with trailing space. @param output target output stream @param cosBoolean boolean value to be written
686 Writes masked content to output stream using ASCII encoded string. @param text input text string to be masked
687 Writes COSDictionary content to the specified output stream. @param output target output stream @param cosDictionary dictionary containing key-value pairs
688 Updates user attribute mask based on property changes. @param oldEntry previous property entry @param newEntry updated property entry
689 Retrieves value from underlying map in COSDictionaryMap. @return Value associated with key 'm1' or 0 if not found
690 Retrieves a COSObject from storage based on the provided key. @param key unique identifier of the entity to retrieve
691 Retrieves a COSBase object associated with either the first or second key, preferring the first key. Returns null if neither exists.
692 Retrieves the recipient mask from the PDF document's encryption settings. @return Recipient mask value
693 Retrieves a recipient's mask from the document's recipients array. @param i index of the recipient in the array @return COSString representation of the recipient's mask or null if not found
694 Retrieves the transition duration from storage. @return COSBase object containing the duration value or ZERO if not found
695 Retrieves a set of COSName keys from the underlying data structure. @return Set of COSName keys
696 Retrieves attribute names from the underlying COSDictionary. @return List of attribute names as strings
697 Filters and writes trailer dictionary entries to output stream. @param trailerDict PDF document trailer dictionary
698 Initializes this COSDictionary instance with items from another dictionary. @param dict source dictionary to copy items from
699 Checks if a COSDictionary contains metadata fields. @param dictionary the PDF document's internal structure @return true if metadata fields are present, false otherwise
700 Checks if mask widths are present in the font dictionary.
701 Checks if the font descriptor contains missing width information. @return true if present, false otherwise
702 Checks if XFA form is present in the COSDictionary.
703 Initializes a new XrefTrailer object for the specified PDF section. @param startBytePos starting byte position of the section @param type XRefType enum value indicating the section type
704 Parses and coerces string representation of a floating-point number to its numeric value. @param aFloat string containing a decimal number
705 Returns string representation of COSFloat value using 'm1' and enclosing in "COSFloat{...}".
706 Writes PDF float value to specified OutputStream. @param output target output stream
707 Creates a COSIncrement object with update origin information. @param updateInfo COSUpdateInfo specifying update origin
708 Initializes utility instance with destination PDDocument. @param targetDoc target PDDocument object
709 Initializes the DefaultResourceCache instance with caching stability enabled.
710 Checks if update info is present and valid. @param base COSBase object to inspect @return true if update info is found, false otherwise
711 Validates and initializes the MCID attribute with a valid COSInteger instance. @param mcid non-negative integer identifier
712 Returns a COSInteger instance representing degrees as a mask value.
713 Writes COSInteger value with mask to the specified output stream. @param output target output stream @param cosInteger integer value with mask
714 Writes escaped comment to output stream, appending a newline if no special characters present. @param comment input text to be written
715 Writes escaped comment to output stream, appending a newline if no newline is present in the input. @param comment text to be written @throws IOException if an I/O error occurs
716 Writes escaped comment to output stream, ensuring no newlines. @param comment input text to be written
717 Writes content to the specified output stream, escaping special characters and appending a newline. @param comment input text to be written
718 Constructs a COSObjectKey instance with the given object number and generation value. @param num PDF object number @param gen generation value
719 Compares this XReference entry with another, returning a mask value. @param xReferenceEntry the other XReference entry to compare with
720 Calculates mask value based on 'textMatrix' component. @return m1 value of text matrix
721 Calculates mask value based on first element of 'textMatrix'.
722 Initializes a new instance of the class with the specified output stream and compression parameters. @param outputStream target OutputStream to write data to @param compressParameters object containing compression settings
723 Initializes a new instance of COSWriter with output stream and input data. @param outputStream OutputStream to write PDF data @param inputData RandomAccessRead containing PDF document data
724 Updates update state based on new flag. @param updated true to reflect update
725 Extracts and decodes a mask from the given byte array. @param bytes input byte array
726 Initializes a COSString instance from the given text, encoding it in PDFDocEncoding if possible. @param text input string to be encoded @param forceHex whether to enforce hexadecimal representation (default: false)
727 Checks if font is excluded from PDF rendering.
728 Reads bytes from ASCII85 encoded data stream. @param data target byte array @param offset starting index in the array @param len number of bytes to read @return actual number of bytes read or -1 if end of file
729 Writes ASCII85 encoded output, handling flushing and resetting state.
730 Flushes graphical content to output stream, potentially terminating text mode. @throws IOException if I/O operation fails
731 Renders text content to output stream, ensuring proper display. @throws IOException if rendering fails
732 Renders content stream, ensuring proper rendering in PDF document.
733 Renders pattern content stream, flushing graphical content to output stream. @throws IOException if rendering fails
734 Fetches the next byte from the compressed input stream. @return The next byte value or -1 if end of data is reached
735 Fetches and decodes a specified chunk of data from the Flate compressed input stream. @param data the byte array to read from @param offset starting position in the data array @param length number of bytes to read @return the actual number of bytes read, or -1 if end-of-file is reached
736 Reads and processes input data from an InputStream. @param stream Input stream containing data to process
737 Calculates the LZW filter function mask based on table size and early change flag, then encodes input data using the calculated mask. @param rawData input stream containing raw data to be encoded @param encoded output stream where encoded data will be written @param parameters COSDictionary object with parameters for encoding @throws IOException if an I/O error occurs during encoding process
738 Selects the most compressible filtering method for a given image row. @return byte array representing the chosen filtered row
739 Iterates over cross-reference trailers, resets their configuration using m2 method.
740 Performs overlay-specific cleanup and processing.
741 Initializes a new PDXObject instance with the given PDF stream and subtype FORM. @param stream underlying PDF stream object
742 Initializes a new instance of the PDFStreamParser class with a given PDContentStream. @param pdContentstream the PDContentStream object to parse
743 Initializes a new instance of the PDFStreamParser with a given byte array.
744 Fetches a COSBase object by its object number. @param objectNumber unique PDF object identifier
745 Fetches object numbers and offsets from the PDF stream. @return Map of object numbers to their corresponding file offsets
746 Initializes built-in encoding mappings from code to name. @param codeToName mapping of font character codes to names
747 Creates a Type1Encoding instance from given Encoding object. @param encoding input encoding data @return initialized Type1Encoding object
748 Skips leading whitespace and line breaks in PDF data. @throws IOException if an I/O error occurs
749 Verifies PDF data integrity using a secondary parser. @param result of primary parsing attempt
750 Evaluates input character against custom masks and returns a string representation. @throws IOException if End-of-File is reached unexpectedly
751 Skips whitespace and special characters from PDF input. @throws IOException on parsing error
752 Retrieves the number of color components for triangle-based shading. @return int value representing the number of color components
753 Retrieves the number of color components for triangle-based shading. @return int value representing the number of color components
754 Calculates the best XRef table offset by comparing offsets of cross-reference tables and streams. @param xrefOffset input XRef table offset value @return The optimal offset, or -1 if not found
755 Checks if the PDF document's header matches the expected version. @throws IOException if an I/O error occurs
756 Validates PDF document header and updates version value. @throws IOException if an I/O error occurs
757 Fetches and parses all COS objects from the PDF object stream. @return A map of COSObjectKey to COSBase, containing the parsed objects
758 Generates a masked encryption key based on object and generation numbers. @param objectNumber unique object identifier @param genNumber generation number @return byte array representing the masked encryption key
759 Initializes a new instance of the PDAppearanceContentStream class. @param appearance Appearance stream object @param outputStream OutputStream for writing content stream
760 Initializes a new instance of the PDPageContentStream class. @param doc PDDocument instance @param appearance PDAppearanceStream object for appearance settings @param outputStream OutputStream for writing content stream
761 Applies a transformation to the input coordinates. @param x input x-coordinate @param y input y-coordinate @return transformed point or null on failure
762 Applies a combined AffineTransform to the graphics context. @param cm ColorModel object @param deviceBounds bounding box of the graphics area @param userBounds bounding box of the user-defined area @param xform combined transformation matrix @param hints rendering preferences @return PaintContext object representing the transformed graphics context
763 Applies transformation to the Matrix's 'single' value. @param matrix input Matrix object
764 Updates transformation matrix by scaling or shearing. @param tx horizontal translation or scale factor @param ty vertical translation or scale factor
765 Scales the matrix's transformation parameters. @param sx scale factor along x-axis @param sy scale factor along y-axis
766 Computes the product of two matrices and returns a new matrix. @param other another Matrix object to multiply with
767 Generates a byte array representation of the content stream for the given text. @param gsubWorker Gsub worker object @param glyphIds Set of glyph IDs to be added to the output stream @param font PDType0Font object representing the font @param text Input string to process @return Byte array representation of the content stream
768 Creates a PDDocument instance from encrypted PDF content. @return PDDocument object representing decrypted PDF data
769 Initializes a PDDocument instance from a COSDocument and input streams. @param doc COSDocument containing PDF metadata @param source RandomAccessRead stream for reading PDF content
770 Instantiates a security handler based on the given protection policy. @param policy ProtectionPolicy object
771 Retrieves a registered security handler by name. @param name unique handler identifier @return SecurityHandler instance or null if not found
772 Checks if a PDColor object has valid mask components. @param color the color to check @return true if the color has valid mask, false otherwise
773 Applies non-stroking color mask based on input color. @param color PDColor object
774 Initializes the Mac OS Roman character mapping table.
775 Combines all permission bits to create the final mask. @return true if all permissions are enabled, false otherwise
776 Checks various permission bits to determine if a document can be printed with specific characteristics. @return true if print permission is granted, false otherwise
777 Encrypts entire byte array using RC4 cipher algorithm and writes it to an output stream. @param data the byte array to be encrypted @param output output stream where encrypted data will be written
778 Encrypts a byte array and writes it to an output stream. @param data the byte array to be encrypted @param offset starting index in the byte array @param len number of bytes to encrypt @param output output stream where encrypted data will be written
779 Updates the text representation and widths of a TextPosition object based on input constraints. @param i current index @param diacritic TextPosition object containing diacritic handling information
780 Extracts and formats PDF text into structured format. @param text raw text from PDF document @throws IOException if extraction fails
781 Initializes a new Line object with two points and their associated colors. @param p0 starting Point @param p1 ending Point @param c0 color at starting point (float array) @param c1 color at ending point (float array)
782 Initializes a new SoftMask instance with the specified paint, mask, device bounding box, backdrop color (optional), and transfer function. @param paint graphical content @param mask soft mask image @param bboxDevice device coordinates of the bounding box @param backdropColor background color or null for default @param transferFunction transfer function or null for identity
783 Performs a mask operation on the group image by blending it with the backdrop. @param backdrop the background image to blend with @param offsetX the x offset of the backdrop @param offsetY the y offset of the backdrop
784 Loads and parses the font metrics for a given standard 14 font. @param fontName FontName enumeration value
785 Initializes a GlyphList instance with default values and loads glyph list entries from the input stream. @param input InputStream containing glyph list data @param numberOfEntries expected number of glyph entries
786 Initializes a GlyphList instance by copying an existing list and loading glyph data from the input stream. @param glyphList existing GlyphList to copy, or null for a fresh start @param input InputStream containing additional glyph list data
787 Retrieves glyph ID from code using various font encodings and mapping tables. @param code unique font code @return glyph ID or 0 if not found
788 Determines the font name for a given string, applying masking rules. @throws IOException if an I/O error occurs
789 Resolves font glyph name by attempting multiple alternatives. @param name original font glyph name @return resolved font glyph name or ".notdef" if not found
790 Initializes the CMYK color space with default values and loads the ICC profile. @throws IOException if the default profile cannot be loaded
791 Applies an interpolation mask to the input image based on the provided mask and matte values. @param image the input image @param mask the interpolation mask @param interpolateMask whether to perform interpolation when applying the mask @param isSoft whether to apply soft or hard masking @param matte the matte value used for color correction (null for no correction) @return the modified image with the applied mask and matte values
792 Validates a PNG chunk based on its position and CRC value. @param chunk the chunk to be validated @return true if valid, false otherwise
793 Initializes a new instance of the CubicBezierCurve class with specified control points and detail level. @param ctrlPnts array of Point2D objects representing control points @param l number of points to generate along the curve
794 Checks if a point lies within the shaded triangle. @param p the point to check
795 Calculates interpolated color at given Point. @param p the target point @return float array representing the interpolated color
796 Updates clipping paths and cache with the provided GeneralPath. @param path GeneralPath object to add or clone
797 Updates clipping paths and cache using provided path. @param path Path2D object to add or clone @param clonePath whether to create a new copy of the input path
798 Applies a clipping path to the graphics context. @param graphics Graphics2D object
799 Applies rendering hints and mask function to graphics context. @param g the Graphics2D object to modify
800 Calculates function mask value based on internal text positioning. @return Function mask value
801 Initializes a TextPosition object with given page rotation, dimensions, text matrix, and character properties. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix text rendering matrix
802 Calculates the function mask value based on rotation and text matrix properties. @return Function mask value
803 Calculates function mask value based on rotation.
804 Calculates the function mask value based on text properties.
805 Extracts article text from PDF document.
806 Writes paragraph end marker and updates internal state. @throws IOException if an I/O error occurs during writing
807 Compiles and returns a pattern mask based on the current text position. @param pw PositionWrapper object containing text position data
808 Formats text in a word based on its bidirectional properties. @param word input string to process
809 Formats date according to locale and timezone offset. @param cal Calendar instance for which to format the date
810 Formats calendar object as a human-readable string. @param cal Calendar instance to format
811 Converts byte array to hexadecimal string representation using m1 mask. @return hexadecimal string representation of input bytes
812 Sets the CMS (Cryptographic Message Syntax) signature for incremental PDF updates. @param cmsSignature CMS signature bytes @throws IOException if I/O error occurs or not enough space in output
813 Writes the COSName instance as a PDF stream. @param output OutputStream to write the name to
814 Writes hexadecimal representation of each byte in input array to output stream. @param bytes input byte array @param output output stream where data will be written
815 Iteratively sorts the input array using merge sort algorithm. @param arr array to be sorted @param cmp comparator for element comparison
816 Creates a new Document instance from the provided input stream. @param is InputStream containing XML data
817 Detects file type from input stream using magic numbers. @param inputStream InputStream object to read from @return FileType enum value representing the detected file type
818 Initializes LegacyPDFStreamEngine with default text rendering operators.
819 Retrieves a COSName instance associated with the given name. @param aName string representation of the name @return COSName object or null if not found
820 Initializes a COSString instance from a byte array. @param bytes source byte data
821 Initializes an empty COSArray instance with direct access.
822 Initializes a new instance of the COSArray class with provided COSBase objects. @param cosObjectables list of COSObjectable objects to manage
823 Initializes a new instance of COSStream with the given RandomAccessStreamCache. @param streamCache cache for storing and retrieving streams
824 Initializes an unmodifiable COSDictionary instance from a given dictionary. @param dict the underlying dictionary to wrap
825 Creates a new instance of DecodeResult with default decoding configuration.
826 Initializes a new instance of the PDDocumentInformation class.
827 Initializes a new instance of the PDResources class, creating an empty resource dictionary and font caches.
828 Creates a COSDictionary instance from the provided map. @param someMap input map to be converted @return COSDictionary representation of the map
829 Initializes a new instance of the PDDictionaryWrapper class with an empty PDF dictionary.
830 Initializes a new instance of the PDNameTreeNode class.
831 Initializes a new instance of the PDNumberTreeNode with a specified numeric data type. @param valueClass the class of the numeric values to be managed by this node
832 Initializes a new instance of the class with default page label range data.
833 Initializes a new instance of the PDMarkInfo class with an empty COSDictionary.
834 Initializes a new instance of the PDPropertyList class with an empty property list dictionary.
835 Initializes a new instance of the PDBoxStyle class with an empty COSDictionary.
836 Initializes an empty cryptographic filter dictionary.
837 Initializes a new instance of the PDEncryption class with an empty COSDictionary.
838 Initializes a new instance of the FDFCatalog class with an empty COSDictionary.
839 Initializes a new instance of the FDFDictionary class.
840 Initializes an empty FDF field instance with an embedded COS dictionary.
841 Initializes an instance of FDFIconFit with an empty COSDictionary.
842 Initializes a new instance of FDFJavaScript with an embedded COSDictionary.
843 Initializes an empty named page reference.
844 Initializes a new instance of FDFPage with an empty COSDictionary.
845 Initializes an empty FDF page info instance with a default COSDictionary.
846 Initializes a new instance of the FDFTemplate class with an empty COSDictionary.
847 Initializes a new instance of PDDeviceNAttributes with an embedded COSDictionary.
848 Initializes a new instance of PDDeviceNProcess with an empty color space dictionary.
849 Initializes a new instance of PDShading with an empty shading dictionary.
850 Initializes a new instance of PDAdditionalActions with an empty action dictionary.
851 Initializes a new instance of the PDAnnotationAdditionalActions class.
852 Initializes the catalog additional actions with an empty COSDictionary.
853 Initializes a new instance of the PDFormFieldAdditionalActions class with an empty COSDictionary to store additional form field actions.
854 Initializes a new instance of PDPageAdditionalActions with an empty COSDictionary.
855 Initializes a new instance of the PDTargetDirectory class.
856 Initializes a new instance of the PDURIDictionary class with an empty URI dictionary.
857 Initializes a new instance of the PDWindowsLaunchParams class with an empty COSDictionary.
858 Initializes a new instance of the PDBorderEffectDictionary class.
859 Initializes a new instance of the PDBorderStyleDictionary class.
860 Initializes a new instance of the PDPropBuild class with an empty digital signature properties dictionary.
861 Initializes a new instance of the PDPropBuildDataDict class with an embedded COSDictionary object.
862 Initializes a new instance of the PDSeedValueMDP class with an embedded COSDictionary object.
863 Initializes a new instance of PDSeedValueTimeStamp with an embedded COSDictionary.
864 Initializes a new instance of the PDField class with the given AcroForm and an empty COSDictionary.
865 Initializes a new instance of the PDViewportDictionary class with an empty viewport dictionary.
866 Initializes viewer preferences with an empty dictionary.
867 Initializes a new COSObject instance with the provided object and key. @param object the underlying COSBase object @param objectKey unique identifier for the PDF object
868 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary.
869 Initializes a new instance of PDUserAttributeObject from the given COSDictionary.
870 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary COSDictionary to be wrapped
871 Initializes a new instance of PDOutlineNode from a given COSDictionary. @param dict PDF outline data represented as a dictionary
872 Retrieves PDMetadata from the given stream. @return PDMetadata object or null if not found
873 Retrieves metadata from the given image object. @return PDMetadata object or null if not found
874 Retrieves the object stream with the specified mask. @return PDObjectStream instance or null if not found
875 Initializes a new instance of the PDFunctionType0 class from a given COSBase object. @param function COSBase object representing mathematical function data
876 Initializes a new instance of the PDFunctionType3 class from a given COSBase object representing mathematical function data. @param functionStream COSBase object containing Type 3 function data
877 Initializes a PostScript XObject instance with the given COSStream and subtype. @param stream underlying COSStream object
878 Initializes a PDXObject instance with the given COSStream and subtype FORM. @param stream underlying COSStream object
879 Initializes a PDXObject instance with the given COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
880 Default constructor for the PublicKeySecurityHandler class.
881 Default constructor for the SecurityHandler class.
882 Initializes a new instance of the SecurityHandler class with specified public key protection policy. @param publicKeyProtectionPolicy security policy object
883 Initializes a new instance of the StandardSecurityHandler class with specified protection policy. @param standardProtectionPolicy security policy object
884 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
885 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
886 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
887 Initializes an FDFAnnotation object from a COSDictionary. @param a COSDictionary containing annotation data
888 Initializes a new instance of PDAbstractPattern from a COSDictionary. @param dictionary COSDictionary containing pattern properties
889 Initializes a new PDShadingType3 instance from a COSDictionary containing Type 3 shading properties. @param shadingDictionary COSDictionary with Type 3 shading data
890 Initializes a new instance of PDShadingType4 from a given COSDictionary. @param shadingDictionary COSDictionary containing shading properties
891 Initializes a new instance of PDShading from a given COSDictionary. @param shadingDictionary COSDictionary containing shading properties
892 Initializes a new PDButton instance with the given AcroForm, COSDictionary, and parent non-terminal field.
893 Initializes a new instance of the PDSignatureField class with the given AcroForm, COSDictionary, and parent non-terminal field.
894 Initializes a new instance of the PDVariableText class with the given AcroForm, COSDictionary, and parent non-terminal field.
895 Generates a unique signature field name by appending an incrementing integer to the base "Signature" name.
896 Returns a string representation of the revisions, listing each object and its revision number.
897 Creates a soft mask from the given COSBase instance. @param dictionary PDF soft mask properties
898 Initializes a new COSDocument instance with specified parser. @param parser ICOSParser instance for document parsing
899 Initializes a new instance of COSDocument using specified StreamCache creation function. @param streamCacheCreateFunction function to create StreamCache
900 Processes PDF operator with given operands. @param operation string representing the current operator @param arguments list of COSBase objects for operator arguments
901 Creates a PDMarkedContent instance based on the provided tag and properties. @param tag COSName representing the content's type @param properties COSDictionary containing additional metadata
902 Calculates the mask value as difference between m1 and m2. @return Mask value
903 Checks if point (x, y) lies within the rectangle's mask bounds. @param x horizontal coordinate @param y vertical coordinate
904 Calculates the mask value based on the rectangle's dimensions. @return difference between m1 and m2 values
905 Applies a matrix transformation to the rectangle's corners and returns the transformed shape as a GeneralPath. @param matrix The transformation matrix to apply
906 Creates a GeneralPath representing the rectangle's boundary. @return A closed path object containing the rectangular shape
907 Concatenates mask values into a string representation. @return comma-separated string of mask values
908 Returns value at specified array index or default value if out of bounds. @param index array index
909 Retrieves COSName object at specified array index or returns default value if not found. @param index unique item identifier
910 Creates a stream writer for the COSOutputStream with optional filters and cache. @param filters list of filters to apply (null if not used)
911 Initializes a new PDImageXObject instance with the given PDStream and resources. @param stream underlying PDF stream object @param resources associated resources for image processing
912 Determines the image file suffix based on filter types. @return Image file extension (e.g., "png", "jpg", "jpx") or null if unknown
913 Writes a floating-point number to the output stream. @param real the input value
914 Formats decimal value and writes to output stream. @param integer decimal value to format
915 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked @throws IOException if I/O error occurs
916 Checks if mask value is zero. @return true if m1() equals 0, false otherwise
917 Parses and coerces string representation of a floating-point number to its numeric value. @param number input string containing a decimal number
918 Writes a PDF float value to the specified OutputStream with padding. @param output target output stream @param cosFloat floating point number to be written
919 Creates a COSIncrement object by invoking another update processor.
920 Calculates a unique COSObjectKey identifier from given PDF object number and generation value. @param num PDF object number @param gen generation value @return COSObjectKey instance or null if not cached
921 Searches for the next cross-reference table in the PDF data stream. @throws IOException if an I/O error occurs during the search process
922 Fetches COS object streams offsets and keys by searching for dictionary start patterns. @return Map of stream offsets to corresponding COSObjectKey instances
923 Masks and interprets cross-reference stream data to extract object IDs and offsets. @param resolver XrefTrailerResolver instance for handling extracted object keys
924 Fetches the object key with specified mask value. @param objectKey The COSObjectKey instance to fetch @param offset The long offset value @param xrefOffset Map of COSObjectKey to Long offsets @return The updated or new COSObjectKey instance, or null if not found
925 Parses XRefTable from the specified start byte offset. @param startByteOffset starting byte position of the section @return true if parsing is successful, false otherwise
926 Initializes a new instance of the class with the specified output stream and default compression settings. @param outputStream target OutputStream to write data to
927 Initializes a new instance of COSWriter with output stream and input data. @param outputStream OutputStream to write PDF data @param inputData RandomAccessRead containing PDF document data @param objectsToWrite Set of COSDictionary objects to be written
928 Updates update state based on new flag and triggers subsequent processing. @param flag true to trigger update
929 Marks update state as updated using the COSUpdateState's update mechanism.
930 Retrieves a string value from the array at specified index or returns default value. @param index position in the array @param defaultValue fallback string if not found
931 Extracts and decodes the mask from the file's COSBase object. @return decoded mask as a string
932 Retrieves the mask value associated with this named destination. @return String representation of the mask or null if not found
933 Retrieves a list of strings from the given COSBase items based on the specified index. @param items COSBase object containing key-value pairs @param pairIdx index into the two-element array (0 or 1) @return List of strings extracted from the items, or an empty list if not found
934 Retrieves and processes the mask value from the given COSBase object. @return List of processed string elements or null if input is invalid
935 Retrieves the default appearance mask.
936 Initializes a COSString instance from the given text. @param text input string to be encoded
937 Initializes PDVisibleSignDesigner with an input image stream. @param imageStream InputStream containing the digital signature image data
938 Initializes PDVisibleSignDesigner with data from the specified file. @param path file path containing signature data
939 Initializes a new PDXObject instance with the given PDF stream and subtype FORM. @param stream underlying PDF stream object
940 Creates a COSDictionary object representing the 'func' mask in PDF data. @throws IOException on parsing error
941 Fetches and appends masked or whitespace characters from PDF input. @throws IOException on parsing error
942 Verifies that the input matches a given expected string. @param expectedString array of characters to match @param skipSpaces whether to skip whitespace characters @throws IOException on mismatch or parsing error
943 Reads a string from PDF input up to the specified length, excluding certain special characters. @param length maximum number of characters to read @return resulting string or null if end-of-input reached
944 Extracts and parses the mask value from the PDF input. @return the extracted mask value as an integer
945 Parses a string into a long integer value from PDF input. @throws IOException on parsing error
946 Calculates the optimal XRef table offset for a given object offset. @param objectOffset input object offset value @return The optimal offset, or 0 if not found
947 Computes the encryption key for PDF documents based on provided password and owner information. @param password user-provided password @param owner owner information @param permissions document permissions @param id unique identifier for encryption key generation @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return byte array representing the computed encryption key
948 Computes a masked PDF encryption key from user and owner passwords. @param ownerPassword the owner password @param userPassword the user password @param encRevision the encryption revision number @param length the desired key length in bytes @return the generated encryption key as a byte array
949 Applies rotation matrix transformation. @param theta rotation angle in radians
950 Updates transformation matrix by scaling or shearing. @param tx horizontal translation or scale factor @param ty vertical translation or scale factor
951 Applies transformation to a vector using matrix multiplication. @param vector input Vector object
952 Computes the difference between two matrices. @param a first Matrix object @param b second Matrix object
953 Initializes a PDDocument instance from a COSDocument. @param doc COSDocument containing PDF metadata
954 Recursively processes input text by applying mask operation on instruction sequence. @param text input text to process
955 Returns the default access permission for PDF document access. @return AccessPermission object with all permissions set to true
956 Determines the applicable revision mask based on document version and access permissions. @param version document version
957 Decrypts or encrypts data using AES with a provided key. @param finalKey encryption key @param data input stream containing encrypted/decrypted data @param output target output stream for writing decrypted/encrypted data @param decrypt whether to decrypt or encrypt data
958 Encrypts or decrypts PDF document data using AES algorithm. @param data InputStream containing the document data @param output OutputStream for writing the encrypted/decrypted data @param decrypt true to decrypt, false to encrypt
959 Encrypts PDF data using RC4 cipher with a given encryption key. @param finalKey encryption key @param input PDF data to be encrypted @param output OutputStream where encrypted data will be written
960 Reads data from the InputStream and writes it to the OutputStream after encryption. @param data input stream containing plain bytes @param output output stream where encrypted bytes will be written
961 Masks input string using SASL preparation rules. @param str input string to be masked
962 Masks input string using SASL preparation rules. @param str input string to be masked
963 Formats extracted text from a given line, applying formatting rules and separators. @param line list of words with their positions
964 Retrieves a FontBoxFont object based on the current format and cached results. Uses cache if available; otherwise, loads the appropriate font type (PFB, TTF, OTF) and stores it in the cache for future use.
965 Writes FSFontInfo objects to the disk cache.
966 Fetches and processes FSFontInfo objects from a disk cache file. @param files list of File objects to process @return List<FSFontInfo> object containing processed font information or null if failed
967 Updates font information and provider based on PostScript names. @param fontProvider FontProvider object to update
968 Initializes a new ShadedTriangle object with vertices and colors. @param p array of Point2D objects representing triangle vertices @param c array of float arrays representing vertex colors
969 Writes CMap data for font rendering in PDFs to the specified output stream. @param out target output stream
970 Loads a glyph list from the specified file and returns its contents. @param filename name of the glyph list file @param numberOfEntries number of entries in the glyph list @return loaded GlyphList object or null if file not found
971 Builds glyph ID to code mapping table. @throws IOException if an I/O error occurs
972 Validates the PNG converter state by checking for valid IHDR, PLTE, iCCP, tRNS, sRGB, cHRM, gAMA chunks and at least one IDAT chunk. @param state PNGConverterState object containing image data @return true if state is valid, false otherwise
973 Updates clipping paths and cache with the provided GeneralPath when rendering mode is for clipping with fill or stroke.
974 Updates page clipping paths based on the current document content. @param graphics Graphics2D object for rendering
975 Creates an InputStream for signing the PDF document. @throws IOException if an I/O error occurs
976 Calculates function mask value based on internal text positioning and updates the TextPosition object accordingly. @param diacritic TextPosition object containing diacritic handling information
977 Checks if two text positions overlap. @param tp2 TextPosition object to check against
978 Checks if two text positions overlap. @param tp2 TextPosition object to compare with @return true if overlapping, false otherwise
979 Initializes text extraction settings. @throws IOException if an I/O error occurs during initialization
980 Calculates the function mask value based on internal text positioning. @param position current PositionWrapper object @param lastPosition previous PositionWrapper object @param lastLineStartPosition start position of the previous line @param maxHeightForLine maximum height for a line
981 Creates a WordWithTextPositions instance from the given word and its positions. @param word input string to process @param wordPositions list of TextPosition objects indicating locations within the PDF document
982 Writes a COSName instance to the specified OutputStream. @param output target output stream @param cosName COSName object to be written
983 Writes COSName instance and a space character to output stream. @param name COSName instance
984 Formats byte array as text or hexadecimal representation and writes to output stream. @param bytes input byte array @param forceHex whether to force hexadecimal representation (if ASCII, will be formatted as text) @param output output stream where data will be written
985 Iteratively sorts the input array using merge sort algorithm. @param list the input list to be sorted @param cmp comparator for element comparison
986 Initializes PDFMarkedContentExtractor with specified encoding. Adds operators for marked content sequences and points to the extractor.
987 Initializes the PDFTextStripper with default operators for marked content sequences.
988 Retrieves an item from storage based on its key. @param key string representation of the key
989 Checks if COSDictionary contains a specified name. @param name string representation of the name
990 Retrieves a filter instance by COSName. @param filterName string representation of the desired filter
991 Parses a COS name from the PDF source.
992 Initializes a PDColor instance from a COSArray and color space. @param array input COSArray containing color components @param colorSpace the color space associated with the color
993 Parses and decodes hexadecimal string into a COSString representation. @param hex input hexadecimal string @return COSString object or throws IOException for invalid input
994 Creates a COSArray instance from a list of integers. @param integer List of integers to convert @return COSArray object containing the converted integers
995 Converts a list of string names into a COSArray. @param strings list of string identifiers
996 Converts a list of strings to a COSArray. @param strings list of string values
997 Initializes a new instance of COSArrayList with an empty COSArray and ArrayList.
998 Initializes a new instance of COSArrayList with the given COSDictionary and key. @param dictionary associated COSDictionary object @param dictionaryKey unique identifier for the dictionary in the PDF structure
999 Initializes an empty COSArray instance with direct access.
1000 Initializes a PDRectangle instance with specified coordinates and dimensions. @param x top-left x-coordinate @param y top-left y-coordinate @param width rectangle's width @param height rectangle's height
1001 Initializes a new PDRectangle instance from a given BoundingBox. @param box bounding box containing rectangle's dimensions and coordinates
1002 Applies filter list to PDStream. @param filters list of COSNames representing filters
1003 Sets alternate color space for PDF stream. @param list list of PDColorSpace objects
1004 Creates a new COSStream instance with custom encryption settings. @return encrypted COSStream object
1005 Initializes a new instance of COSStream with no underlying stream.
1006 Initializes a new COSStream instance with the given stream cache and read view. @param streamCache cache for storing and retrieving streams @param randomAccessReadView current read position and length of the stream
1007 Returns an unmodifiable dictionary containing key-value pairs for function masks.
1008 Retrieves a decode result based on filter configuration. @return DecodeResult object with decoded data or null if not applicable
1009 Retrieves the resources for form mask. @return PDResources object or null if not found
1010 Default constructor for PDAttributeObject instance creation.
1011 Initializes a new instance of PDUserProperty with the provided user attribute object.
1012 Initializes an empty outline node within the hierarchical structure of PDF items.
1013 Initializes an empty PDDestinationNameTreeNode instance.
1014 Initializes an empty tree node for embedded file names in a PDF document.
1015 Initializes an empty JavaScript name tree node in a PDF document.
1016 Initializes a new instance of the PDStructureElementNameTreeNode class.
1017 Initializes a new instance of the PDNonTerminalField class with the given AcroForm.
1018 Initializes a new instance of the PDTerminalField class with the given AcroForm.
1019 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary COSDictionary to be wrapped
1020 Initializes a new instance of PDListAttributeObject from the given COSDictionary. @param dictionary COSDictionary containing list attribute data
1021 Initializes a new instance of PDDictionaryWrapper with the given COSDictionary. @param dictionary COSDictionary to be wrapped
1022 Initializes a new instance of PDTableAttributeObject with the given COSDictionary. @param dictionary COSDictionary containing table attribute data
1023 Initializes a PDAppearanceStream instance from the given COSStream. @param stream underlying COSStream object
1024 Initializes a transparency group with the given COSStream and resource cache. @param stream underlying COSStream object @param cache ResourceCache instance for managing resources
1025 Loads TrueType Collection (TTC) font from a specified file and processes its headers. @param ttcFile TTC font file to load
1026 Processes a font file and populates the font info list based on its contents. @param fontHeaders font headers containing metadata about the font @param file File object representing the font file to process @param hash font hash value associated with the font file
1027 Processes a PFB (PostScript Type 1 Binary) font file and populates the fontInfoList with font information. @param pfbFile the PFB font file to process
1028 Initializes a new PDCheckBox instance with the given AcroForm, COSDictionary, and parent non-terminal field.
1029 Initializes a new PDPushButton instance with the given AcroForm, COSDictionary, and parent non-terminal field.
1030 Initializes a new PDRadioButton instance with the given AcroForm, COSDictionary, and parent non-terminal field.
1031 Initializes a new instance of the PDChoice class with the given AcroForm, COSDictionary, and parent non-terminal field.
1032 Initializes a new instance of the PDTextField class with the given AcroForm, COSDictionary, and parent non-terminal field.
1033 Creates a deep copy of the current PDGraphicsState and pushes it onto the stack.
1034 Saves the current graphics state and pushes a new one onto the stack. @return The saved Deque of PDGraphicsState objects
1035 Initializes a new instance of COSDocument with default StreamCache settings.
1036 Constructs a COSParser instance for parsing PDF documents. @param source input stream containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param keyAlias alias of the decryption key to use @param streamCacheCreateFunction function to create StreamCache
1037 Updates clipping paths and cache with the provided rectangle. @param rectangle the PDF rectangle object to add or clone
1038 Computes the bounding box of a form field's appearance stream, applying transformation. @param appearanceStream form field appearance stream @return transformed bounding box as Rectangle2D
1039 Initializes a new instance of this class with the specified page's clipping path. @param page PDRectangle object representing the page to be rendered
1040 Retrieves a specific value from an array using index 2. @param none @return int value or default if out of bounds
1041 Retrieves value at specified index from array m1. @param index index of interest
1042 Returns mask value from array at index 3. @param none
1043 Returns the mask value from the array at index 4. @param none @return integer mask value
1044 Retrieves mask value from array at index 5. @param none @return integer mask value
1045 Retrieves a specific value from an array using index 2.
1046 Retrieves the mask value from the array at index 2. @return integer mask value
1047 Retrieves mask value from array at index 3. @param none
1048 Retrieves bounded flag value from array. @return true if bounded, false otherwise
1049 Checks if mask is bounded within page bounds. @return true if bounded, false otherwise
1050 Checks if mask is within bounds. @param array array containing bounds information
1051 Creates an output stream writer without filters or cache.
1052 Creates an output stream with specified filter. @param filter COSName representing the filter to apply
1053 Creates a masked PDImageXObject from the given COS stream. @param cosStream underlying PDF stream object
1054 Fetches image mask from underlying PDF stream and resources. @return PDImageXObject object or null if not found
1055 Creates a masked image object using the SMASK filter. @return PDImageXObject instance or null if not found
1056 Writes affine transformation matrix to output stream. @param transform AffineTransform object
1057 Begins text mode and masks input using ASCII encoding.
1058 Ends text mode and writes END_TEXT operator.
1059 Masks text using ASCII encoding and sets leading. @param leading the input value
1060 Masks next line of text using ASCII encoding and writes it to output stream.
1061 Masks input text using ASCII encoding and writes it to output stream at specified offset. @throws IOException if I/O error occurs
1062 Saves the graphics state by masking input text and writing it to output stream.
1063 Resets graphics state. @throws IOException if I/O error occurs
1064 Validates and applies RGB color mask within valid range [0, 1]. @param r red component @param g green component @param b blue component @throws IOException if I/O error occurs
1065 Validates and sets the CMYK color values for a PDF content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1066 Masks input value using gray scale and writes it to output stream. @param g float representing mask value (0..1)
1067 Validates and sets non-stroking color values for RGB operations. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1068 Validates and sets the color values for non-stroking CMYK operations. @param c float value representing cyan @param m float value representing magenta @param y float value representing yellow @param k float value representing black
1069 Validates and applies grayscale mask to output stream. @param g float representing grayscale value (0..1)
1070 Adds a rectangular mask to the content stream. @param x left coordinate of rectangle @param y top coordinate of rectangle @param width rectangle's width @param height rectangle's height
1071 Writes a curve to the output stream using the given coordinates. @param x1, y1 first point of the curve @param x2, y2 second point of the curve @param x3, y3 third point of the curve
1072 Writes a Bezier curve to the output stream. @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1073 Writes a Bezier curve to the output stream. @param x1, y1 first control point @param x3, y3 final (replicated) point
1074 Masks input coordinates using ASCII encoding and writes them to the output stream. @param x horizontal coordinate @param y vertical coordinate
1075 Masks input coordinates using ASCII encoding and writes them to output stream. @param x horizontal coordinate @param y vertical coordinate
1076 Masks input string using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1077 Masks input text using ASCII encoding and closes the current graphics state. @throws IOException if I/O error occurs
1078 Masks input text using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1079 Masks input stream using ASCII encoding and sets graphics state for filling even/odd shapes.
1080 Masks input content using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1081 Masks input text and writes it to output stream using ASCII encoding.
1082 Masks the current graphical state by closing, filling non-zero areas, and stroking. @throws IOException if I/O error occurs
1083 Masks input text and writes it to output stream. @throws IOException if I/O error occurs
1084 Masks current path and closes it.
1085 Masks input text by clipping non-zero areas.
1086 Masks input graphics using even-odd clipping.
1087 Masks line width and sets it in graphics state. @param lineWidth value to be masked
1088 Sets the line join style based on the given integer value. @param lineJoinStyle integer value representing the line join style (0-2)
1089 Masks input text using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1090 Sets a line dash pattern in PDF graphics state. @param pattern array of float values for dash and gap lengths @param phase additional phase value for the pattern
1091 Sets the line miter limit for PDF output. @param miterLimit non-negative value for line join mitering
1092 Masks input content using END MARKED CONTENT operator.
1093 Masks character spacing in output stream. @param spacing input floating-point value
1094 Masks input text using ASCII encoding and sets word spacing. @param spacing float value representing word spacing @throws IOException if I/O error occurs
1095 Masks text using ASCII encoding and sets horizontal scaling. @param scale scaling factor
1096 Sets text rendering mode and masks input string using ASCII encoding. @param rm RenderingMode object specifying rendering requirements
1097 Masks text using ASCII encoding and sets text rise. @param rise floating-point number representing text rise
1098 Returns COS object key offsets after triggering brute-force search. @throws IOException if an I/O error occurs during the search process
1099 Writes FDF data to the specified OutputStream. @param output target OutputStream
1100 Invokes object management operations.
1101 Updates COSArray with elements from provided list. @param objectsList collection of COSBase objects to add
1102 Updates collection with elements from specified list. @param objectsList Collection of COSBase objects to add
1103 Updates array element at specified index with a new integer value. @param index array index to update @param intVal integer value to assign
1104 Removes element at specified index and returns it. @param i position of the element to be removed (0-based)
1105 Removes a COSBase object from the collection. @param o COSBase object to be removed @return true if removal was successful, false otherwise
1106 Updates COSDictionary internal state using update mechanism.
1107 Updates the update state mask using COSUpdateState's mechanism. @param key unique identifier @param m1 not critical, retrieves item from dictionary @param m2 and m3 high importance, updates update state mask
1108 Updates the document state based on the provided COSUpdateState. @param updateState current update state to be updated
1109 Updates function mask and resets parser. @param none
1110 Updates the origin document state based on the given update info and dereferencing flag. @param originDocumentState current state of the origin document @param dereferencing whether to dereference child objects
1111 Retrieves value from array at specified index or returns default value. @param index position in the array
1112 Retrieves and processes the mask value from the given COSBase object. @return List of processed string elements or null if input is invalid
1113 Initializes an empty PDSimpleFileSpecification instance.
1114 Initializes COSString instance from given text. @param fileName input string to be encoded
1115 Initializes a named destination with the given identifier. @param dest unique destination identifier
1116 Initializes a named destination with the given string identifier. @param dest unique identifier for the named destination
1117 Validates and returns the generation number mask value. @return integer mask value or throws IOException if invalid
1118 Validates and returns the object mask value from m1() function. @throws IOException if object number exceeds threshold or is invalid
1119 Generates an RC4 encryption key from a given owner password and string, following specific encryption revisions (2-4). @param ownerPassword user-provided password @param owner owner string @param encRevision encryption revision number (2, 3, or 4) @param length key length in bytes @return generated RC4 encryption key as a byte array
1120 Initializes a TensorPatch with specified control points and color values. @param tcp array of 16 control points @param color 2D array of color values (red, green, blue) per corner
1121 Encrypts data using RC4 cipher with a given key. @param finalKey encryption key @param input plain data stream @param output encrypted data stream
1122 Returns the default font provider instance.
1123 Generates a list of shaded triangles from the specified color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects representing color values at corners
1124 Initializes a Coons patch with specified color values and corner control points. @param points array of 12 Point2D objects representing the original control points @param color 2D array of color values (red, green, blue) per corner
1125 Processes and potentially suppresses a character based on overlapping text positions. @param text the TextPosition object to process
1126 Calculates function mask value based on internal text positioning and updates the TextPosition object accordingly. @param diacritic TextPosition object containing diacritic handling information
1127 Removes consecutive whitespace text positions from the list. @param textList collection of TextPositions to process
1128 Calculates function mask value based on internal text positioning. @param current current PositionWrapper object @param lastPosition previous PositionWrapper object @param lastLineStartPosition start position of the previous line @param maxHeightForLine maximum height for a line @return updated lastLineStartPosition object
1129 Processes a LineItem and updates the normalized list, line builder, word positions, and returns the updated line builder. @param normalized list of processed words @param lineBuilder current line being built @param wordPositions list of text positions for each word @param item LineItem object containing processing information
1130 Attempts to parse input text into a Calendar instance using various date formats. @param text Input string to parse @return Parsed Calendar instance or null on failure
1131 Masks PDF content stream and begins marked content section. @param tag COSName instance
1132 Masks content in PDF document with specified COSName and MCID. @param tag COSName instance @param mcid unique marked content ID (non-negative)
1133 Masks input content point using ASCII encoding and writes it to output stream. @param tag COSName instance for content point
1134 Writes COSString contents to output stream. @param string input string object @param output target output stream
1135 Formats byte array as text or hexadecimal representation and writes to output stream. @param bytes input byte array @param forceHex whether to force hexadecimal representation (if ASCII, will be formatted as text) @param output output stream where data will be written
1136 Initializes the PDFGraphicsStreamEngine with a given page, adding various graphics operators for rendering. @param PDPage page The page instance to render on
1137 Default constructor initializes extractor with no encoding.
1138 Initializes PDFTextStripperByArea instance with default settings. @see #setShouldSeparateByBeads(boolean) for details on separation behavior.
1139 Parses and decodes hexadecimal string into a COSString representation. @throws IOException if invalid input or missing closing bracket is encountered
1140 Applies PDF filters to the stream. @param filters list of filter identifiers
1141 Initializes a PDRectangle instance with default coordinates and dimensions.
1142 Initializes a PDRectangle instance with specified dimensions. @param width rectangle's width @param height rectangle's height
1143 Creates a PDRectangle instance with the bounding box's dimensions. @return a rectangle representing the cloud-like border's bounds
1144 Calculates rectangle's mask value based on bounding box and annotation rectangle dimensions. @return PDRectangle instance with updated coordinates and dimensions
1145 Generates a mask rectangle by expanding the input rectangle with specified padding. @param rectangle input rectangle @param padding expansion value for top-left and bottom-right corners @return expanded PDRectangle instance
1146 Calculates a new PDRectangle with modified coordinates based on the input differences. @param rectangle original PDRectangle object @param differences array of 4 floats representing changes to m1, m2, m3, and m4 values @return new PDRectangle instance or original if differences are invalid
1147 Calculates a new rectangle based on the provided original rectangle and differences array. @param rectangle PDRectangle instance to modify @param differences array of 4 floats representing differences in m1, m2, m3, and m4 values @return modified PDRectangle object or original if input is invalid
1148 Generates a visual mask rectangle based on the provided form field box and padding. @param box form field box dimensions @param padding additional space to add around the form field @return new PDRectangle instance with updated dimensions
1149 Initializes a new instance of the class with the given COS Document. @param cosDocument input document containing cross-reference data
1150 Creates a PDObjectStream instance with custom encryption settings. @param document PDDocument object
1151 Initializes this PDF stream with a new COSStream instance from the given PDDocument. @param document underlying PDF document
1152 Initializes a new instance of the class from a COSDocument. @param document COSDocument to create the stream from
1153 Initializes a new instance of the PDStream class by creating a COSStream from the provided PDDocument and copying data from an InputStream, applying optional filters. @param doc PDDocument object @param input InputStream to copy data from @param filters list of filters to apply (null if not used)
1154 Creates a new COSStream instance with masked image data from the given PDDocument and InputStream. @param document PDDocument object @param rawInput input stream containing image pixel data @return COSStream object representing the masked image
1155 Applies filter to encoded PDF data. @param input InputStream containing raw PDF data @param encoded OutputStream for filtered output @param parameters COSDictionary with filter settings (m1) @param index unspecified parameter index
1156 Default constructor for PDDefaultAttributeObject instance creation.
1157 Initializes PDUserAttributeObject with user properties ownership.
1158 Default constructor for creating a new instance of PDStandardAttributeObject.
1159 Initializes an empty outline node within the hierarchical structure of PDF items.
1160 Initializes a new instance of the PDVariableText class with the given AcroForm. @param acroForm interactive form containing variable text fields
1161 Initializes a new instance of PDExportFormatAttributeObject from the given COSDictionary. @param dictionary COSDictionary containing export format attributes
1162 Creates a PDAppearanceStream instance from the current COSStream. @return PDAppearanceStream object or throws IllegalStateException if not valid
1163 Processes a TrueType or OpenType font file and populates the font info list. @param ttfFile File object representing the font file to process
1164 Initializes a new instance of PDShadingType6 from a given COSDictionary. @param shadingDictionary COSDictionary containing Type 6 shading properties
1165 Initializes a new instance of PDShadingType7 from a given COSDictionary. @param shadingDictionary COSDictionary containing Type 7 shading properties
1166 Initializes a new instance of the PDComboBox class with the given AcroForm, COSDictionary, and parent non-terminal field.
1167 Initializes a new instance of the PDListBox class with the given AcroForm, COSDictionary, and parent non-terminal field.
1168 Constructs a COSParser instance for parsing PDF documents with encryption. @param source input stream containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param keyAlias alias of the decryption key to use
1169 Constructs a PDFParser instance for parsing PDF documents. @param source input stream containing the PDF file @param decryptionPassword encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use @param streamCacheCreateFunction function to create StreamCache
1170 Returns an output stream writer with specific decoding options.
1171 Writes visual appearance stream to the specified output stream. @param data byte array containing form field data @param appearanceStream PDAppearanceStream object for generating appearance
1172 Initializes a new instance of the PDAppearanceContentStream class with specified compression. @param appearance Appearance stream object @param compress whether to apply compression (true) or not (false)
1173 Applies affine transformation matrix to text output stream. @param matrix AffineTransform object representing the transformation
1174 Applies a concatenated affine transformation to the output stream. @param matrix Matrix object containing transformation values
1175 Enters text mode, masking input using ASCII encoding.
1176 Begins text mode and masks input using ASCII encoding.
1177 Enters text mode and masks input using ASCII encoding. @throws IOException if an I/O error occurs
1178 Begins text mode, masking input using ASCII encoding.
1179 Ends text mode and writes END_TEXT operator.
1180 Ends text mode and writes END_TEXT operator.
1181 Ends text mode and writes END_TEXT operator.
1182 Ends text mode and writes END_TEXT operator.
1183 Masks text using ASCII encoding and sets leading. @param leading input leading value
1184 Masks text using ASCII encoding and sets leading. @param leading input leading value
1185 Masks text using ASCII encoding and sets leading. @param leading the input value
1186 Masks text using ASCII encoding and sets leading. @param leading input value
1187 Masks next line of text and writes it to output stream.
1188 Masks next line of text and writes it to output stream, but only in text mode. @throws IllegalStateException if not in text mode
1189 Masks next line of text using ASCII encoding, throwing an exception if not in text mode.
1190 Masks next line of text using ASCII encoding, requiring beginText() to be called first.
1191 Masks input text at specified offset using ASCII encoding. @param tx x-coordinate of the mask position @param ty y-coordinate of the mask position
1192 Masks input text and writes it to output stream at specified offset. @param tx horizontal offset @param ty vertical offset
1193 Masks input text using ASCII encoding and writes it to output stream at specified offset. @param tx horizontal offset @param ty vertical offset
1194 Masks input text using ASCII encoding and writes it to output stream at specified offset.
1195 Saves the graphics state, masking input text and writing it to output stream.
1196 Saves graphics state, masking input text and restoring color spaces.
1197 Saves the graphics state, masking input text by resetting font and color spaces.
1198 Saves the graphics state by masking input text and restoring color spaces.
1199 Resets graphics state, excluding text objects.
1200 Resets graphics state. @throws IOException if I/O error occurs
1201 Resets graphics state, except in text mode. @throws IOException on I/O error
1202 Resets graphics state, excluding text mode.
1203 Validates and applies RGB color mask within valid range [0, 1]. @param r red component\n@param g green component\n@param b blue component
1204 Validates and applies RGB color mask within valid range [0, 1]. @param r red component @param g green component @param b blue component @throws IOException if I/O error occurs
1205 Validates and applies RGB color mask within valid range [0, 1]. @param r red component @param g green component @param b blue component
1206 Validates and applies RGB color mask within valid range [0, 1]. @param r red component @param g green component @param b blue component
1207 Validates and sets the CMYK color values for a PDF content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1208 Validates and sets the CMYK color values for a PDF content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1209 Validates and sets the CMYK color values for a PDF content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1210 Validates and sets the CMYK color values for a PDF content stream. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1211 Masks input color value using gray scale and writes it to output stream. @param g float representing mask value (0..1)
1212 Masks input value using gray scale and writes it to output stream. @param g float representing mask value (0..1)
1213 Masks input color value using gray scale and sets stroking color. @param g float representing mask value (0..1)
1214 Masks input value using gray scale and applies it to stroking color. @param g float representing mask value (0..1)
1215 Validates and sets non-stroking RGB color values within the valid range (0..1). @param r red component @param g green component @param b blue component
1216 Validates and sets non-stroking color values for RGB operations. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1217 Validates and applies non-stroking color values for RGB operations. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1218 Validates and applies non-stroking RGB color values within 0..1 range. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1219 Validates and sets the color values for non-stroking CMYK operations. @param c float value representing cyan (0..1) @param m float value representing magenta (0..1) @param y float value representing yellow (0..1) @param k float value representing black (0..1)
1220 Validates and sets the color values for non-stroking CMYK operations. @param c float value representing cyan (0..1) @param m float value representing magenta (0..1) @param y float value representing yellow (0..1) @param k float value representing black (0..1)
1221 Validates and sets non-stroking CMYK color values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1222 Validates and sets non-stroking CMYK color values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1223 Validates and applies grayscale mask to output stream. @param g float representing grayscale value (0..1)
1224 Validates and applies grayscale mask to output stream. @param g float representing grayscale value (0..1)
1225 Applies grayscale mask to output stream using specified intensity. @param g float representing grayscale value (0..1)
1226 Applies grayscale mask to output stream. @param g float representing grayscale value (0..1)
1227 Adds a rectangular mask to the content stream. @param x left coordinate of rectangle @param y top coordinate of rectangle @param width rectangle's width @param height rectangle's height
1228 Adds a rectangular mask to the content stream. @param x left coordinate of rectangle @param y top coordinate of rectangle @param width rectangle's width @param height rectangle's height
1229 Adds a rectangular mask to the content stream. @param x left coordinate of rectangle @param y top coordinate of rectangle @param width rectangle's width @param height rectangle's height
1230 Adds a rectangular mask to the content stream. @param x left coordinate of rectangle @param y top coordinate of rectangle @param width rectangle's width @param height rectangle's height
1231 Writes a curve to the output stream using six coordinates. @param x1, y1 first point of the curve @param x2, y2 second point of the curve @param x3, y3 third point of the curve
1232 Writes a curve to the output stream using the given coordinates. @param x1, y1 first point of the curve @param x2, y2 second point of the curve @param x3, y3 third point of the curve
1233 Draws a curve on the PDF page using the specified coordinates. @param x1, y1 first point of the curve @param x2, y2 second point of the curve @param x3, y3 third point of the curve
1234 Writes a curve to the output stream using the given coordinates. @param x1, y1 first point of the curve @param x2, y2 second point of the curve @param x3, y3 third point of the curve
1235 Writes a Bezier curve to the output stream, replicating initial points. @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1236 Writes a Bezier curve to the output stream. @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1237 Writes a Bezier curve to the output stream. @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1238 Writes a Bezier curve to the output stream. @param x2 first control point X-coordinate @param y2 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1239 Sets a Bezier curve to the output stream, specifying control and final points. @param x1, y1 first control point @param x3, y3 final (replicated) point
1240 Writes a Bezier curve to the output stream with replicated final point. @param x1, y1 first control point @param x3, y3 final (replicated) point
1241 Writes a Bezier curve to the output stream, replicating the final point. @param x1, y1 first control point @param x3, y3 final (replicated) point
1242 Writes a Bezier curve to the output stream. @param x1, y1 first control point @param x3, y3 final (replicated) point
1243 Masks input coordinates using ASCII encoding and writes them to the output stream. @param x horizontal coordinate @param y vertical coordinate
1244 Masks input coordinates using ASCII encoding and writes them to the output stream. @param x horizontal coordinate @param y vertical coordinate
1245 Masks input coordinates using ASCII encoding and writes them to the output stream. @param x horizontal coordinate @param y vertical coordinate
1246 Masks input coordinates using ASCII encoding and writes them to the output stream. @param x horizontal coordinate @param y vertical coordinate
1247 Masks input coordinates using ASCII encoding and writes them to output stream. @param x horizontal coordinate @param y vertical coordinate
1248 Masks input coordinates using ASCII encoding and writes them to output stream. @param x horizontal coordinate @param y vertical coordinate
1249 Masks input coordinates using ASCII encoding and writes them to output stream. @param x horizontal coordinate @param y vertical coordinate
1250 Masks input coordinates using ASCII encoding and writes them to output stream. @param x horizontal coordinate @param y vertical coordinate
1251 Masks input string using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1252 Disallows stroking in text mode; enables stroking otherwise.
1253 Enforces non-text content mode by throwing an error if already in text mode.
1254 Prevents stroke operation within a text block.
1255 Masks input text using ASCII encoding and closes graphics state. @throws IOException if I/O error occurs
1256 Masks input text using ASCII encoding and closes the current graphics state.
1257 Masks input text using ASCII encoding and closes graphics state.
1258 Disallows closing the graphics state while in text mode.
1259 Disallows filling non-zero areas when in text mode.
1260 Disables fill mode when in text mode.
1261 Prevents filling in text mode, throwing an error or executing fill operation otherwise.
1262 Disables fill operation in non-zero mode when text mode is active.
1263 Masks input stream using ASCII encoding and sets graphics state for filling even/odd shapes.
1264 Masks input stream using ASCII encoding and sets graphics state for filling even/odd shapes. @throws IOException if I/O error occurs
1265 Masks input stream using ASCII encoding and sets graphics state for filling even/odd shapes.
1266 Masks input stream using ASCII encoding and sets graphics state for filling even/odd shapes.
1267 Disallows fill and stroke operations outside of non-text content.
1268 Disallows fill and stroke operations when in text mode.
1269 Disallows fill-and-stroke operations in text mode.
1270 Masks input content using ASCII encoding and writes it to output stream. @throws IOException if I/O error occurs
1271 Disallows fill and stroke operations in text blocks.
1272 Disallows fill-and-stroke operation in text mode.
1273 Masks input text by invoking fillAndStrokeEvenOdd operation.
1274 Disables text mode and masks input text, then calls fillAndStrokeEvenOdd. @throws IllegalStateException if called from text block
1275 Masks the current graphical state by closing, filling non-zero areas, and stroking. @throws IOException if I/O error occurs
1276 Masks current graphical state by closing, filling non-zero areas, and stroking. @throws IOException if I/O error occurs
1277 Masks the current graphical state by closing, filling non-zero areas, and stroking. @throws IOException if I/O error occurs
1278 Masks the current graphical state by closing, filling non-zero areas, and stroking. @throws IOException if I/O error occurs
1279 Disallows drawing even/odd fill and stroke in text mode.
1280 Masks input text and writes it to output stream. @throws IOException if I/O error occurs
1281 Masks input text and writes it to output stream.
1282 Disallows closeAndFillAndStrokeEvenOdd() method calls when in text mode.
1283 Masks current path and closes it, unless in text mode.
1284 Masks current path and closes it, unless in text mode.
1285 Prevents closing path while in text mode.
1286 Masks current path and closes it, unless in text mode.
1287 Masks input text by clipping non-zero areas, if inTextMode. @throws IllegalStateException if called within a text block
1288 Applies clipping mask to content stream.
1289 Clamps non-zero areas in graphics state, only outside of text blocks.
1290 Masks input content by clipping non-zero areas.
1291 Masks input graphics using even-odd clipping.
1292 Applies even-odd clipping to the graphics stream.
1293 Masks input graphics using even-odd clipping.
1294 Masks input graphics using even-odd clipping, disallowed in text blocks.
1295 Masks line width and sets it in graphics state. @param lineWidth value to be masked
1296 Masks line width in graphics state and sets it. @param lineWidth value to be masked
1297 Masks line width and sets it in graphics state. @param lineWidth value to be masked
1298 Masks line width and sets it in graphics state. @param lineWidth value to be masked
1299 Sets the line join style based on the given integer value. @param lineJoinStyle integer value representing the line join style (0-2)
1300 Sets the line join style based on the given integer value. @param lineJoinStyle integer value representing the line join style (0-2)
1301 Sets the line join style based on the given integer value. @param lineJoinStyle integer value representing the line join style (0-2)
1302 Sets the line join style based on the given integer value. @param lineJoinStyle integer value representing the line join style (0-2)
1303 Sets the line cap style and masks input text using ASCII encoding. @throws IOException if I/O error occurs
1304 Masks input text using ASCII encoding and writes it to output stream. @param lineCapStyle integer value specifying the line cap style (0-2)
1305 Masks input text using specified ASCII encoding and writes it to output stream. @param lineCapStyle integer specifying line cap style (0-2)
1306 Masks input text using ASCII encoding and writes it to output stream. @param lineCapStyle int parameter (0-2) controlling the line cap style
1307 Sets a line dash pattern in PDF graphics state. @param pattern array of float values for dash and gap lengths @param phase additional phase value for the pattern
1308 Sets a line dash pattern in PDF graphics state. @param pattern array of float values for dash and gap lengths @param phase additional phase value for the pattern
1309 Sets a line dash pattern in PDF graphics state. @param pattern array of float values for dash and gap lengths @param phase additional phase value for the pattern
1310 Sets a line dash pattern in PDF graphics state. @param pattern array of float values for dash and gap lengths @param phase additional phase value for the pattern
1311 Sets the line miter limit for PDF output. @param miterLimit non-negative value for line join mitering
1312 Sets the line miter limit for PDF output. @param miterLimit non-negative value for line join mitering
1313 Sets the line miter limit for PDF output, ensuring a valid non-negative value. @param miterLimit non-negative float value for line join mitering
1314 Sets the line miter limit for PDF output. @param miterLimit non-negative value for line join mitering
1315 Masks input content using END MARKED CONTENT operator.
1316 Masks input content using END MARKED CONTENT operator.
1317 Masks input content using END MARKED CONTENT operator.
1318 Masks input content using END MARKED CONTENT operator.
1319 Masks character spacing in output stream. @param spacing input floating-point value
1320 Masks character spacing in output stream. @param spacing input floating-point value
1321 Masks character spacing in output stream. @param spacing input floating-point value
1322 Masks character spacing in output stream. @param spacing input floating-point value
1323 Masks input text using ASCII encoding and sets word spacing. @param spacing float value representing word spacing @throws IOException if I/O error occurs
1324 Masks input text using ASCII encoding and sets word spacing. @param spacing float value representing word spacing
1325 Masks input text using ASCII encoding and sets word spacing. @param spacing float value representing word spacing
1326 Masks input text using ASCII encoding and sets word spacing. @param spacing float value representing word spacing
1327 Sets horizontal scaling and masks text using ASCII encoding. @param scale scaling factor
1328 Masks text using ASCII encoding and sets horizontal scaling. @param scale scaling factor
1329 Masks text using ASCII encoding and sets horizontal scaling. @param scale scaling factor
1330 Applies horizontal scaling to text content stream. @param scale floating-point factor for horizontal scaling
1331 Sets text rendering mode and masks input string using ASCII encoding. @param rm RenderingMode object specifying rendering requirements
1332 Sets text rendering mode and masks input string using ASCII encoding. @param rm RenderingMode object specifying rendering requirements
1333 Sets text rendering mode and masks input string using ASCII encoding. @param rm RenderingMode object specifying rendering requirements
1334 Sets text rendering mode and masks input string using ASCII encoding. @param rm RenderingMode object specifying rendering requirements
1335 Masks text using ASCII encoding and sets text rise. @param rise floating-point number representing text rise
1336 Masks text using ASCII encoding and sets text rise. @param rise floating-point number representing text rise
1337 Masks text using ASCII encoding and sets text rise. @param rise floating-point number representing text rise
1338 Masks text using ASCII encoding and sets text rise. @param rise floating-point number representing text rise
1339 Performs a brute-force search for cross-reference table and updates offsets. @throws IOException if an I/O error occurs during the search process
1340 Writes FDF data to the specified file using a FileOutputStream. @param fileName target file name
1341 Sets the high bit mask value in the color table. @param high integer value to assign
1342 Sets the target page number for navigation. @param pageNumber unique page identifier
1343 Removes the first occurrence of specified element from the list. @param o the element to search for @return true if found and removed, false otherwise
1344 Removes an element at the specified index, delegating to associated arrays. @param index position of the element to be removed (0-based)
1345 Calls map and actuals methods to perform some operation. @param map COSDictionaryMap object @param actuals another object, purpose unclear
1346 Retrieves a COSName instance associated with the given name. @param key string representation of the name
1347 Recursively checks if any COSBase objects in the given array demand their parent update. @param array The array of COSBase objects to search @return true if any object demands its parent update, false otherwise
1348 Updates the origin document state based on the given update info and dereferencing flag. @param originDocumentState current state of the origin document
1349 Updates origin document state based on given update info from child object. @param child COSBase object containing update information
1350 Processes input tokens using the specified syntax handler. @param input input string to be processed @param handler responsible for handling syntax-related tasks
1351 Generates a masked encryption key and encrypts/decrypts PDF document data using AES or RC4 algorithm. @param objectNumber unique object identifier @param genNumber generation number @param data InputStream containing the document data @param output OutputStream for writing the encrypted/decrypted data @param decrypt true to decrypt, false to encrypt
1352 Computes a masked encryption key or file key using the provided password and revision. @param password user-provided password @param isOwnerPassword true for owner password, false for user password @param o entry containing owner-specific data (if owner password) @param u user authentication data (if owner password or user password) @param oe entry containing encrypted file key (if owner password) @param ue entry containing encrypted file key (if user password) @param permissions document permissions @param id unique identifier for encryption key generation @param encRevision encryption revision @param keyLengthInBytes length of the generated key @param encryptMetadata whether to include metadata in the key @return masked byte array or null if not found
1353 Validates PDF document encryption based on the specified encryption revision. @param password user-provided password @param user user information @param owner owner information @param permissions document permissions @param id unique identifier for validation @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return true if passwords are valid, false otherwise or throws IOException on unknown revision
1354 Fetches FontInfo by PostScript name and format. @param format FontFormat to match @param postScriptName unique PostScript identifier @return FontInfo object or null if not found
1355 Processes a list of LineItems to extract words with positions. @param line input list of LineItem objects @return List<WordWithTextPositions> containing extracted words and their positions
1356 Recursively attempts to parse input date string into a Calendar instance. @param text Input date string @return Parsed Calendar instance or null on failure
1357 Begins marked content section in PDF appearance object. @param tag COSName instance to mask content stream
1358 Begins marked content section with specified COSName. @param tag COSName instance to mask and begin marked content
1359 Begins marked content section in PDF page content stream. @param tag COSName instance for masking PDF content
1360 Begins marked content section with specified masking. @param tag COSName instance to mask
1361 Masks content in PDF document with specified COSName and MCID. @param tag COSName instance @param mcid unique marked content ID (non-negative)
1362 Masks content in PDF document with specified COSName and MCID. @param tag COSName instance @param mcid unique marked content ID (non-negative)
1363 Masks content in PDF document with specified COSName and MCID. @param tag COSName instance @param mcid unique marked content ID (non-negative)
1364 Masks content in PDF document with specified COSName and MCID. @param tag COSName instance @param mcid unique marked content ID (non-negative)
1365 Masks input content point using ASCII encoding and writes it to output stream. @param tag COSName instance for content point
1366 Masks input content point using ASCII encoding and writes it to output stream. @param tag COSName instance for content point
1367 Masks input content point using ASCII encoding and writes it to output stream. @param tag COSName instance for content point
1368 Masks input content point using ASCII encoding and writes it to output stream. @param tag COSName instance for content point
1369 Writes COSString contents to output stream with a space separator. @param output target output stream @param cosString input string object
1370 Embeds glyphs for specified IDs in the current PDF document. @param text input string to process @throws IOException if an I/O error occurs during processing
1371 Initializes the PageDrawer object with provided parameters. @param parameters PageDrawerParameters object containing page, renderer, subsampling permissions, destination, rendering hints, and downsampling threshold.
1372 Calculates the function mask based on input parameter and PDF source data. @throws IOException if invalid input is encountered
1373 Initializes a PDImmutableRectangle instance with specified dimensions. @param width rectangle's width @param height rectangle's height
1374 Creates a PDRectangle instance representing the cloud-like border's bounds. @return rectangle object with bounding box dimensions
1375 Initializes this PDMetadata instance with a new COSStream from the given PDDocument. @param document underlying PDF document
1376 Initializes this PDF stream with a new embedded file from the given PDDocument. @param document underlying PDF document
1377 Initializes this PDXObject with a new PDStream instance from the given document and subtype. @param document underlying PDF document @param subtype object type as COSName instance
1378 Initializes a new PDImageXObject instance from the given PDDocument. @param document PDDocument object to extract image data from
1379 Initializes a new instance of the PDStream class from PDDocument and InputStream. @param doc PDDocument object @param input InputStream to copy data from
1380 Initializes a new instance of the PDStream class by creating a COSStream from the provided PDDocument and applying an optional filter. @param doc PDDocument object @param input InputStream to copy data from @param filter COSName representing the filter to apply (null if not used)
1381 Creates a new instance of the PDStream class from a PDDocument and an InputStream, applying optional filters.
1382 Initializes a PDImageXObject instance from the given PDDocument, encoded stream, and filter. @param document PDDocument object @param encodedStream InputStream containing image data @param cosFilter COSBase filter object @param width target image width @param height target image height @param bitsPerComponent number of bits per color component @param initColorSpace initial color space
1383 Initializes a new instance of PDLayoutAttributeObject with default layout owner.
1384 Initializes a new instance of PDListAttributeObject with default list owner.
1385 Initializes a new instance of PDPrintFieldAttributeObject with print field ownership.
1386 Initializes PDTableAttributeObject with default settings.
1387 Constructs a COSParser instance for parsing PDF documents without encryption. @param source input stream containing the PDF file
1388 Constructs a PDFParser instance for parsing PDF documents with strict decryption. @param source input stream containing the PDF file @param decryptionPassword encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use
1389 Initializes a new instance of the PDAppearanceContentStream class from an appearance stream. @param appearance Appearance stream object
1390 Initializes a new instance of the PDFormContentStream class from the given form. @param form PDFormXObject object containing content stream and resources
1391 Initializes a new instance of the PDPageContentStream class with default settings. @param doc PDDocument instance @param appearance PDAppearanceStream object for appearance settings
1392 Applies affine transformation matrix to text output stream while in text mode. @param matrix AffineTransform object representing the transformation
1393 Applies affine transformation matrix to text output stream in PDF form content. @param matrix AffineTransform object representing the transformation
1394 Applies affine transformation matrix to text output stream in text mode. @param matrix AffineTransform object representing the transformation
1395 Applies affine transformation matrix to text output stream in pattern context. @param matrix AffineTransform object representing the transformation
1396 Applies a concatenated affine transformation to the output stream. @param matrix Matrix object containing transformation values
1397 Applies a concatenated affine transformation to the output stream. @param matrix Matrix object containing transformation values
1398 Applies a concatenated affine transformation to the output stream. @param matrix Matrix object containing transformation values
1399 Applies concatenated affine transformation to pattern content stream. @param matrix Matrix object containing transformation values
1400 Draws an arrow shape in the appearance content stream. @param cs PDAppearanceContentStream to draw on @param x horizontal coordinate of the arrow base @param y vertical coordinate of the arrow base @param len length of the arrow arm
1401 Manages the stream based on line width, stroke, and fill flags. @param lineWidth line width value @param hasStroke whether stroke operation is allowed @param hasFill whether fill operation is allowed
1402 Draws a circular mask in the content stream. @param cs appearance content stream @param x center x-coordinate @param y center y-coordinate @param r radius of the circle
1403 Masks a circular area with specified radius using the FUNC_MASK method. @param cs PDAppearanceContentStream object @param x horizontal center coordinate @param y vertical center coordinate @param r radius of the circle
1404 Creates a circular mask with radius 'r' centered at (x, y) and writes it to the output stream. @param cs content stream to write to @param x horizontal coordinate of center @param y vertical coordinate of center @param r radius of circle
1405 Draws a series of shapes and curves to the output stream using various methods. @param contentStream PDAppearanceContentStream object for drawing
1406 Masks line width and sets it in graphics state. @param lineWidth value to be masked
1407 Invokes file-based FDF data saving using the specified file name. @param fileName target file name
1408 Recursively checks if the given COSBase object demands its parent update. @param base The COSBase object to check @return true if the object demands its parent update, false otherwise
1409 Updates document state based on the given trailer dictionary. @param newTrailer updated trailer dictionary
1410 Updates origin document state using update info from child object. @param child child object containing update information
1411 Processes update info from the given iterable of children. @param children collection of child objects
1412 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1413 Validates PDF document encryption based on the specified revision. @param ownerPassword owner password byte array @param user user byte array @param owner owner byte array @param permissions document permissions @param id unique identifier for validation @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return true if encryption is valid, false otherwise
1414 Processes input tokens using the specified syntax handler. @param text input string to be processed
1415 Encrypts/decrypts PDF document data using AES or RC4 algorithm. @param stream COSStream object @param objNum unique object identifier @param genNumber generation number
1416 Decrypts a COSString instance using the provided object number and generation number. @param string COSString instance to decrypt @param objNum unique object identifier @param genNum generation number @return decrypted COSString instance or original input if decryption fails
1417 Generates a masked encryption key and encrypts/decrypts PDF document data using AES or RC4 algorithm. @param string input string to process @param objNum unique object identifier @param genNum generation number @return encrypted/decrypted COSBase object
1418 Validates PDF document encryption based on the specified encryption revision. @param password user-provided password @param user user information @param owner owner information @param permissions document permissions @param id unique identifier for validation @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return true if passwords are valid, false otherwise or throws IOException on unknown revision
1419 Finds FontBoxFont by PostScript name, attempting various font formats (PFB, TTF, OTF). @param postScriptName unique PostScript identifier
1420 Calculates and writes current page end mask to output stream.
1421 Writes COSBase object contents to the output stream with mask functionality. @param base COSBase instance to be written
1422 Masks input text using ASCII encoding and writes it to output stream. @param textWithPositioningArray array of Floats for positioning and Strings for text to mask
1423 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked
1424 Initializes and returns a PageDrawer object with provided parameters. @param parameters PageDrawerParameters object containing page, renderer, subsampling permissions, destination, rendering hints, and downsampling threshold
1425 Initializes this PDXObject as a form XObject in the given PDF document. @param document underlying PDF document
1426 Initializes a new PDMetadata instance from the given PDDocument and InputStream. @param doc the associated PDDocument object @param str the InputStream to copy data from
1427 Initializes a new instance of the PDEmbeddedFile class from PDDocument and InputStream. @param doc PDDocument object @param str InputStream to copy data from
1428 Initializes a new PDEmbeddedFile instance from a PDDocument and InputStream. @param doc PDDocument object @param input InputStream to copy data from @param filter optional filter (null if not used)
1429 Creates a PDImageXObject instance from the given byte array using FLATE decode filter. @param document PDDocument object @param byteArray input image data in bytes @param width target image width @param height target image height @param bitsPerComponent number of bits per color component @param initColorSpace initial color space @return PDImageXObject instance or throws IOException if processing fails
1430 Initializes PDExportFormatAttributeObject with specified layout owner. @param owner unique identifier of the layout
1431 Initializes a FileSystemFontProvider instance with a FontCache. Scans the local system for font files, loads cached FontInfo objects, and optionally builds and saves an on-disk font cache if necessary. @param cache FontCache object used to manage font information
1432 Initializes FDFParser with a specified input source. @param source input stream containing the FDF file
1433 Constructs a PDFParser instance for parsing PDF documents with strict decryption. @param source input stream containing the PDF file @param decryptionPassword encryption password (optional)
1434 Masks a shape in the content stream based on the specified style. @param style annotation line style (e.g. LE_OPEN_ARROW, LE_CLOSED_ARROW, etc.) @param cs PDAppearanceContentStream to draw on @param x horizontal coordinate of the shape @param y vertical coordinate of the shape @param width shape's width @param hasStroke whether stroke operation is allowed @param hasBackground whether fill operation is allowed @param ending flag indicating shape orientation (default: true)
1435 Recursively checks if any COSBase objects in the given dictionary demand their parent update. @param dictionary The dictionary to check @return true if any object demands its parent update, false otherwise
1436 Returns a set of COSBase objects, initializing the collection if necessary. @return Set of COSBase objects
1437 Handles a COSBase object by delegating to the appropriate methods based on its type and properties. @param object the COSBase instance to process
1438 Processes COSBase object based on its type and properties. @param i index for accessing the COSArray @param object the COSBase instance to process
1439 Updates the COSArray at specified index with provided object and key. @param index array position @param object the underlying COSBase object to update
1440 Updates the update state mask with a new COSName key and COSBase value. @param key unique identifier for the PDF object @param value underlying COSBase object or null to trigger a different action
1441 Processes update info from the collection of COSBase objects. @param objectsList Collection of COSBase elements to process
1442 Updates internal state based on provided collection and index. @param i the index to consider @param objectList collection of COSBase objects to process
1443 Processes child updates from the given COS array. @param children collection of child objects
1444 Retrieves a COSBase object from the array at the specified index. @param index position in the array
1445 Retrieves function mask by searching through existing COSBase objects. @param o COSBase object to search for @return true if found, false otherwise
1446 Searches the COSArray for a match to the provided object. @param object COSBase object to search for @return index of matching item or -1 if not found
1447 Checks for the specified object in the dictionary. @param value target object to search for @return true if object is present, false otherwise
1448 Retrieves the function mask as a COSName object. @param value Object to compare with the existing values in the dictionary @return The retrieved COSName object or null if not found
1449 Retrieves the function mask as a COSBase object. @param key unique identifier of the entity to retrieve @return COSBase object representing the function mask or null if not found
1450 Recursively processes indirect objects within a COSDictionary. @param indirectObjects Collection of COSObjectKeys to process
1451 Retrieves the function mask as a COSDictionary object. @return COSDictionary instance or null if not found
1452 Retrieves the function mask from internal components and performs error handling. @throws IOException if an I/O error occurs during processing
1453 Processes COSObject object by recursively checking for demands from its parent and children.
1454 Invokes visitor on the masked COS object, or its replacement if not found. @param visitor ICOSVisitor instance for processing
1455 Checks if the given COSBase 'value' contains a self-reference. @param parent the parent object @param value the COSBase object to check @return true if 'value' has a reference to its parent, false otherwise
1456 Retrieves the function mask as a COSNumber object from the given COSBase. @param lengthBaseObj input COSBase object to parse @return COSNumber object representing the function mask or null if not found
1457 Constructs a NormalXReference instance with specified byte offset, key, and object. @param byteOffset unique byte offset @param key COSObjectKey identifier @param object referenced object (COSBase or COSObject)
1458 Retrieves the function mask associated with a given PDF object. @param obj target PDF object @return COSObjectKey representing the function mask or null if not found
1459 Retrieves the function mask as a COSBase object. @param object COSBase object from which to retrieve the mask
1460 Retrieves function mask as COSBase object. @param object the COSBase object to search for
1461 Prepares the function mask for writing, using a specified key and COSBase object. @param key COSObjectKey to identify the PDF content @param object COSBase object containing the function mask data
1462 Validates PDF document encryption based on the specified revision. @param password string representation of the password @param user user byte array @param owner owner byte array @param permissions document permissions @param id unique identifier for validation @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata should be encrypted @return true if encryption is valid, false otherwise
1463 Iterates over defined text regions, retrieving article and text data for each. @throws IOException if an I/O error occurs during processing
1464 Masks input text using ASCII encoding and writes it to output stream. @param textWithPositioningArray array of Floats for positioning and Strings for text to mask
1465 Masks input text using ASCII encoding in a PDF form content stream. @param textWithPositioningArray array of Floats for positioning and Strings for text to mask
1466 Masks input text using ASCII encoding and writes it to output stream. @param textWithPositioningArray array of Floats for positioning and Strings for text to mask
1467 Masks input text using ASCII encoding and writes it to output stream. @param textWithPositioningArray array of Floats for positioning and Strings for text to mask
1468 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked
1469 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked
1470 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked
1471 Masks input text using ASCII encoding and writes it to output stream. @param text input string to be masked
1472 Initializes this transparency group within the given PDF document. @param document underlying PDF document
1473 Initializes this PDXObject as a form XObject in the given PDF document. @param document underlying PDF document
1474 Creates a JPEG image from a BufferedImage and adds it to the given PDDocument. @param document target PDF document @param image source BufferedImage @param quality compression quality (0.0 - 1.0) @param dpi dots per inch for image resolution @return PDImageXObject instance or null if failed
1475 Constructs a PDFParser instance with lenient decryption. @param source input stream containing the PDF file
1476 Draws a cloud-like shape at specified coordinates using the provided template. @param template array of points defining the shape @param x horizontal coordinate to draw from @param y vertical coordinate to draw from
1477 Draws a cloud-like shape using the provided parameters and adds points to the output list. @param startAng starting angle in radians @param endAng ending angle in radians @param cx central X-coordinate @param cy central Y-coordinate @param rx radius of outer circle @param ry radius of inner circle @param out list of points to add @param addMoveTo whether to add a move-to instruction at the start
1478 Retrieves COSBase objects and returns an iterator. @return Iterator over COSBase objects
1479 Recursively processes a COSBase object. @param object the COSObjectable instance to process
1480 Updates the COSArray with a specified number of copies of a given COSBase object. @param size number of copies to add @param object COSBase instance to process
1481 Processes an array of floating-point values by invoking COSFloat conversions. @param value the input float array
1482 Parses a PDF function mask array from the input source. @throws IOException on parsing error
1483 Writes functional mask values to the stream and initializes index entries. @throws IOException if an I/O error occurs
1484 Initializes a new instance of the COSArrayList class with a given object, item, and associated dictionary key. @param actualObject the actual object to be stored @param item the initial item in the array @param dictionary the parent dictionary @param dictionaryKey the key associated with the dictionary
1485 Converts a list of objects to a COSArray. @param cosObjectableList List of objects to convert @return COSArray representation of the input list, or null if input is null
1486 Initializes a PDRange instance with default bounds (0, 1).
1487 Initializes a new FDFOptionElement instance with default options.
1488 Initializes default font setting with a size of 1.0.
1489 Creates a COSArray instance representing the color's mask. @return COSArray object containing mask components and pattern data
1490 Initializes a PDDeviceN instance with default colorant attributes.
1491 Initializes a new PDGamma instance with default RGB color components set to zero.
1492 Retrieves the color space filter mask for a PDF stream. @return PDColorSpace object representing the color space or null if not applicable
1493 Initializes the PDIndexed object with a color space array containing indexed and device RGB keys.
1494 Creates a COSArray representing the color component mask.
1495 Initializes a PDPattern instance with specified resources. @param resources PDResources object containing pattern data
1496 Initializes a new PDSeparation instance with default color separation settings.
1497 Initializes a PDTristimulus object with default tristimulus values (X=0, Y=0, Z=0). @param none
1498 Initializes PDTristimulus with tristimulus values from array. @param array 3-element float array representing X, Y, Z color values
1499 Sets the transformation matrix from an AffineTransform object. @param transform transformation to be applied
1500 Creates a PDImageXObject from the given byte array, using the provided PDDocument. @param document the parent PDDocument @param byteArray ByteArrayInputStream containing the image data @return PDImageXObject instance or null if creation fails
1501 Creates a COSArray from six single values.
1502 Recursively updates the COSArray at specified index with provided object and key. @param index array position @param object the underlying COSBase object to update
1503 Sets a COSInteger instance at specified array position with given integer value. @param index array position @param value long integer value in range [LOW, HIGH]
1504 Fetches and sets COSName instance at specified array position. @param index array position @param name string representation of the name
1505 Sets a COSBase object at specified index in the array with the given text. @param index position in the array @param string input string to be encoded or null for removal
1506 Initializes minimum value of numerical range. @param min minimum float value
1507 Sets maximum value of numerical range to given float. @param max maximum float value
1508 Sets the mask value of the rectangle to a specified floating-point value. @param value float value to be represented as mask
1509 Sets rectangle mask with given floating-point value. @param value float value to represent in mask
1510 Updates rectangle's width with given floating-point value. @param value the float width to be set
1511 Updates rectangle's width with given floating-point value. @param value the float value to set as width
1512 Sets gamma correction mask at specified index with provided color. @param index array position @param colour PDGamma object to update
1513 Encrypts PDF content within the specified COSArray using provided object and key. @param array COSArray collection to encrypt @param objNum unique object identifier @param genNum generation number for encryption
1514 Sets FDF option value. @param opt option string
1515 Sets the first option value in FDF document to specified string. @param da input string to be encoded
1516 Sets the font size to specified value. @param size float value representing font size
1517 Initializes colorant names from provided list. @param names list of string identifiers
1518 Initializes device N attributes from provided attributes object. @param attributes PDDeviceNAttributes object to initialize from
1519 Initializes alternate color space and populates mask array. @param cs PDColorSpace object to initialize
1520 Updates the gamma correction value with specified red component. @param r the red color component
1521 Applies gamma correction to color representation. @param g float value representing gamma correction factor
1522 Applies gamma correction to color component 'b' using m1. @param b value to be corrected
1523 Initializes the mask array and sets the base color space. @param base PDColorSpace object to initialize
1524 Retrieves and sets mask name for color separation. @param name string representation of the name
1525 Sets the alternate color space and updates the mask array with the provided color space. @param colorSpace alternate color space to apply
1526 Sets the X value of the tristimulus color representation. @param x floating-point X coordinate
1527 Sets Y tristimulus value. @param y floating-point value for Y component
1528 Sets X value in tristimulus color representation. @param z Z value as floating-point number
1529 Recursively updates the update state mask with a new COSName key and optional COSObjectable value. @param key unique identifier for the PDF object @param value underlying COSObjectable object or null to trigger a different action
1530 Updates the update state mask with a new key and boolean value. @param key unique identifier for the PDF object @param value underlying boolean value to be converted and stored
1531 Updates update state mask with a new COSName key and boolean value. @param key unique identifier for the PDF object @param value input boolean value
1532 Sets item with specified key and value. @param key unique identifier for the PDF object @param value underlying COSBase object
1533 Updates the update state mask with a new COSName key and optional string value. @param key unique identifier for the PDF object @param value underlying string or null to trigger a different action
1534 Updates the update state mask with a new COSName key and optional COSString value. @param key unique identifier for the PDF object @param value underlying string value or null to trigger a different action
1535 Updates the update state mask with a specified range of values. @param key unique identifier for the PDF object @param value long integer value in the range [LOW, HIGH]
1536 Updates the update state mask with a new key and integer value. @param key unique identifier for the PDF object @param value underlying integer value in range [LOW, HIGH]
1537 Updates the update state mask with a floating-point value. @param key unique identifier for the PDF object @param value the float value to be represented
1538 Initializes a new COSStream instance with the given dictionary and stream parameters. @param dictionary COSDictionary object @param startPosition starting position of the stream @param streamLength length of the stream @return initialized COSStream object
1539 Updates the PDF document's encryption settings from the provided dictionary. @param encDictionary COSDictionary containing encryption information
1540 Updates the update state mask with a new COSName key and COSBase value. @param id unique identifier for the PDF object
1541 Fetches and interprets the next token from the PDF content stream. This method determines the type of token based on the current character and performs subsequent actions accordingly. It handles various token types, including operators, dictionaries, arrays, strings, numbers, and more. @throws IOException if an I/O error occurs during parsing
1542 Initializes a PDDocument instance with an empty PDF document structure.
1543 Updates functional mask information in the PDF document. @param info PDDocumentInformation object containing functional data
1544 Initializes a new instance of the PDDocumentCatalog class with the given PDF document. @param doc the underlying PDF document
1545 Updates the document's thread catalog with provided thread list. @param threads list of PDThread objects to manage
1546 Updates the OUTPUT_INTENTS dictionary with a list of PDOutputIntent objects. @param outputIntents list of PDF output intents to update dictionary
1547 Updates the update state mask with a new crop box rectangle. @param cropBox rectangle to apply (null uses default)
1548 Initializes page's content stream with provided list of streams. @param contents list of PDStream objects to manage
1549 Updates the page's update state mask with thread beads. @param beads list of PDThreadBead objects to manage
1550 Updates the page's annotations with provided list. @param annotations collection of PDAnnotations to add
1551 Updates the update state mask for each viewport dictionary. @param viewports list of PDViewportDictionary objects
1552 Initializes an empty PDPageTree instance with a root COSDictionary and a new COSArray for page children.
1553 Processes an element of type E, potentially updating the associated COSArray and parent COSDictionary. @param o object to be processed
1554 Updates the update state mask with a new key and value. @param dictKey unique identifier for the PDF object
1555 Replaces an element at the specified index with a new object. @param index position to replace @param element new object to insert (must be instance of COSObjectable)
1556 Inserts an element at the specified index while handling underlying COS structures. @param index position to insert the new element @param element object to be added to the collection
1557 Updates the update state mask with a new PDF object key and COSBase value. @param key unique identifier for the PDF object @param value underlying COSBase object or null to trigger a different action
1558 Computes the functional mask for page labels. @return COSDictionary object representing the computed mask
1559 Initializes a new instance of PDComplexFileSpecification. @param fs underlying COSDictionary object for file specification management
1560 Initializes a PDComplexFileSpecification instance from a COSDictionary. @param dict input dictionary or null to create a new one
1561 Updates function domain and range values from input array. @param rangeValues COSArray containing new domain and range values
1562 Initializes function mask with domain values. @param domainValues array of domain values
1563 Updates the update state mask with encoded values. @param encodeValues COS array containing encoded function data
1564 Updates the update state mask with decoded values. @param decodeValues array of decoded function parameters
1565 Updates the update state mask with a new COSName key and COSBase value. @param k underlying COSBase object or null to trigger a different action
1566 Updates the update state mask with a user-provided class map. @param classMap A dictionary of class attributes and their values
1567 Updates the update state mask with a list of user properties. @param userProperties list of PDUserProperty objects to manage
1568 Updates the line dash pattern with a new COSArray value. @param dashArray new dash pattern values
1569 Updates the cryptographic filter dictionary with the specified mask. @param cfm COSName representing the mask value
1570 Updates the update state mask with a filter name. @param filter string representation of the filter name
1571 Initializes the owner password from a byte array. @param o source byte data
1572 Updates user update state mask with a byte array. @param u source byte data
1573 Initializes PDF encryption settings with owner/encrypt mask. @param oe byte array representing the owner/encrypt mask
1574 Updates the update state mask with user encryption byte array. @param ue user encryption data
1575 Sets the recipients mask for PDF encryption. @param recipients array of recipient byte arrays
1576 Updates the update state mask with the specified COSName key. @param streamFilterName unique identifier for the PDF object
1577 Updates the filter mask with a new COSName key. @param stringFilterName unique identifier for the PDF object
1578 Updates the update state mask with PDF permissions. @param perms byte array representing PDF permissions
1579 Initializes and configures the update state mask with default encryption settings.
1580 Initializes an empty annotation instance.
1581 Updates the annotation's fill color with a specified Color object. @param c Color object to set as the annotation's fill color
1582 Updates annotation visibility mask with a new RC value. @param rc unique identifier for the PDF object
1583 Updates the annotation's interior color with a specified color. @param color Color object to set as interior color
1584 Updates the m2 attribute of the annotation with a new float array value. @param callout array of floats representing the callout data
1585 Updates the annotation's ink list with the provided collection of floating-point arrays. @param inklist list of ink data points
1586 Updates line annotation's m2 state with line coordinates. @param line array of line coordinates
1587 Updates the line annotation's mask with a specified color. @param color Color object defining the new mask value
1588 Sets polygon vertices from an array. @param vertices array of float coordinates
1589 Applies polygon annotation mask with specified interior color. @param color interior color of the polygon
1590 Updates polyline annotation vertex coordinates. @param vertices array of float values representing x,y,z coordinates
1591 Updates the annotation's interior color with a specified Color object. @param color the new interior color
1592 Updates the annotation's interior color mask with a specified color. @param color Color object representing the desired interior color
1593 Updates quadpoints coordinates of the annotation. @param coords array of float values representing the updated coordinates
1594 Updates the update state mask with ID from COSArray. @param id array of PDF object identifiers
1595 Updates FDF document with provided form fields. @param fields list of FDFField objects to manage
1596 Updates the update state mask with page list. @param pages list of FDF pages to manage
1597 Sets FDF annotations in the document. @param annots list of annotations to include
1598 Updates the update state mask with differences from a COSStream. @param diff COSStream containing updates to be applied
1599 Updates FDF document with embedded file specifications. @param embedded list of file specifications to manage
1600 Updates the KIDS mask with provided list of FDFFields. @param kids collection of form fields to manage
1601 Updates the field's V flag with a new COSBase instance. @param value the underlying object or primitive to be converted and used
1602 Updates the update state mask with a new COSName key and COSBase value. @param value underlying COSBase object or null to trigger a different action
1603 Updates the FF field mask with a new integer value. @param ff optional field flag value
1604 Sets the FF mask for this field based on the provided integer value. @param ff Integer value representing the FF mask
1605 Sets the field flag for the specified Forms Data Format (FDF) field. @param ff field flag value
1606 Updates the update state mask with a new F flag and integer value or null. @param f Integer value for F flag in range [LOW, HIGH] or null
1607 Updates the update state mask with a new integer value. @param ff integer value to be set
1608 Updates the form field's update state mask with a new integer value. @param ff optional integer value for the update state mask
1609 Updates the update state mask with a new COSString value. @param rv COSString containing the updated value
1610 Updates the update state mask with a new RV COSName key and COSStream value.
1611 Updates the update state mask with a JavaScript action's BEFORE key and string value. @param before input string to be encoded
1612 Updates the update state mask with the 'after' string value. @param after input string to be encoded in the PDF object
1613 Updates the JavaScript actions in the PDF document using the provided map. @param map Map of JavaScript actions keyed by name
1614 Updates the page's template masks with provided FDFTemplates. @param templates list of templates to manage
1615 Updates the update state mask with FDF field list. @param fields list of FDFFields to manage
1616 Generates width map for Type 2 CID font. @param cidToGid mapping of CID to GID
1617 Initializes a new instance of the PDFont class.
1618 Initializes a new instance of the PDFontDescriptor class with default font descriptor properties.
1619 Updates the PDFontDescriptor's font name with the given string. @param fontName unique identifier for the font name
1620 Sets the PDF font family and updates the dictionary. @param fontFamily unique identifier for the PDF object
1621 Updates the PDF font stretch attribute. @param fontStretch string representation of the font stretch value
1622 Updates the font bounding box with a new mask array. @param rect rectangle object containing updated dimensions
1623 Sets the character set for font descriptor. @param charSet string representing the character set
1624 Sets gamma correction factor in CALGRAY color space. @param value floating-point value for gamma factor
1625 Updates the color space dictionary with the gamma correction mask array. @param gamma PDGamma object containing the gamma correction information
1626 Sets the transformation matrix from a 3x3 float array. @param matrix the input Matrix object
1627 Updates the COLORANTS attribute with a COSDictionary representation of the provided colorants map. @param colorants input map containing DeviceN color space attributes
1628 Initializes a new instance of the transparency group attributes class.
1629 Updates filter mask with specified image processing filters. @param filters list of string identifiers for the filters to apply
1630 Initializes an instance of PDOptionalContentMembershipDictionary with OCMD type.
1631 Updates the update state mask with a new visibility policy. @param visibilityPolicy COSName key for the PDF object
1632 Applies the given AffineTransform to generate a function mask. @param transform transformation object
1633 Updates the update state mask with a bounding box representation. @param bbox rectangle object or null to use default values
1634 Updates shading background with a new COSArray value. @param newBackground new background array
1635 Updates the bounding box mask in the PDF dictionary. @param newBBox new rectangle dimensions or null to reset
1636 Updates the PDF shading's color space based on the provided PDColorSpace object. @param colorSpace PDColorSpace object to set or null to reset
1637 Initializes the shading function mask dictionary with a new array of functions. @param newFunctions array of shading functions
1638 Initializes Type 1 shading with a transformation matrix. @param transform AffineTransform object containing the matrix data
1639 Updates the shading's update state mask with a new domain from the given COSArray. @param newDomain array of points defining the shading's domain
1640 Updates the Type 2 shading's extend values and notifies listeners. @param newExtend updated COSArray of extend values
1641 Updates the shading domain and notifies listeners. @param newDomain new COSArray representing the updated shading domain
1642 Updates shading coordinates and notifies listeners. @param newCoords array of updated coordinates
1643 Updates update state mask with new decode values. @param decodeValues array of decode values
1644 Initializes a new instance of PDExtendedGraphicsState. @param none
1645 Sets the mask blend mode. @param bm BlendMode object
1646 Updates the update state mask using a given key and floating-point value. @param key unique identifier @param value float value to be represented or null for alternative action
1647 Updates the update state mask with a new value. @param transfer COSBase object or null to trigger a different action
1648 Sets the TR2 value in the extended graphics state dictionary. @param transfer2 COSBase object containing the new TR2 value
1649 Updates the update state mask with subsequent actions. @param next list of PDActions to manage
1650 Updates the 'T' item with a new COSBase value. @param t underlying COSBase object to set
1651 Sets 'H' flag to control visibility of PDF elements. @param h true to hide, false to show
1652 Updates the update state mask with form fields from the provided COSArray. @param array list of PDF objects to be updated
1653 Updates the update state mask with the given COSStream sound. @param sound audio stream to be processed
1654 Configures update state mask with form fields from COSArray. @param array collection of PDF form field data
1655 Updates the update state mask with a new COSName key and COSBase value. @param d COSBase object to trigger an action
1656 Updates the update state mask with a new COSName key and COSBase value. @param b underlying COSBase object or null to trigger a different action
1657 Validates and sets the relationship mask to a valid PDF object. @param relationship COSName instance representing the target directory
1658 Initializes a new instance of the PDAnnotation class with default annotation type.
1659 Updates the annotation's mask with the provided rectangle. @param rectangle the rectangle to update
1660 Sets annotation mask settings using a COSArray of borders. @param borderArray array of border settings
1661 Updates rectangle margin differences for the caret annotation. @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
1662 Updates rectangle differences with custom margins. @param differenceLeft offset from left @param differenceTop offset from top @param differenceRight offset from right @param differenceBottom offset from bottom
1663 Updates the update state mask with free text callout settings. @param callout float array containing callout settings
1664 Updates the update state mask with a new Inklst key and COSArray value. @param inkList 2D array of float paths representing ink annotations
1665 Updates annotation line mask with new coordinates. @param l array of floating-point values representing line coordinates
1666 Updates the update state mask with the provided quad points. @param quadPoints array of float values representing the quad points
1667 Sets the red color annotation mask. @param rc annotation value as string
1668 Updates polygon vertices with new point coordinates. @param points array of float values representing vertex positions
1669 Updates polyline vertices from provided point array. @param points float array of vertex coordinates
1670 Updates the parent annotation reference in the popup. @param annot markup annotation to associate with the popup
1671 Updates rectangle differences with new values. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
1672 Updates quad points with new annotation text markup. @param quadPoints array of float coordinates defining the marked area
1673 Initializes a new instance of the PDAppearanceDictionary class with default appearance entries.
1674 Updates the update state mask with the provided dash array. @param dashArray COSArray object containing dash pattern values
1675 Initializes a new instance of PDSeedValue with default seed value attributes.
1676 Updates the update state mask with a filter COSName key and value. @param filter unique identifier for the PDF filter
1677 Sets the SUB_FILTER mask with a list of string filters. @param subfilter collection of filter identifiers
1678 Validates and sets the allowed digital signature digest methods. @param digestMethod list of allowed digest method names
1679 Sets the list of reason codes. @param reasons collection of reason strings
1680 Sets the seed value MDP configuration from a PDSeedValueMDP object. @param mdp non-null PDSeedValueMDP instance to update the dictionary
1681 Updates the update state mask with a timestamp. @param timestamp PDSeedValueTimeStamp object or null to clear
1682 Updates the LEGAL ATTESTATION mask with a list of string values. @param legalAttestation list of string attestations
1683 Initializes a new instance of PDSeedValueCertificate with default certificate type.
1684 Sets subject certificate attribute with byte array values. @param subjects list of byte arrays representing subject data
1685 Sets the subject DN attribute by iterating over a list of subject DN items and creating a COSDictionary for each. @param subjectDN list of subject DN attributes
1686 Sets key usage extensions in the certificate. @param keyUsageExtensions list of string values for extension flags
1687 Validates and sets issuer certificates from the provided list. @param issuers List of byte arrays representing issuer certificate data
1688 Initializes OID mask with provided byte strings. @param oidByteStrings list of OID byte arrays to process
1689 Initializes a new instance of PDSignature with default digital signature type.
1690 Sets the type of digital signature mask. @param type COSName representing the signature type
1691 Updates the update state mask with a new FILTER key and COSBase value. @param filter digital signature filter to be updated
1692 Updates the update state mask with a new SUB_FILTER key and value. @param subfilter COSName object representing the filter type
1693 Initializes a BYTERANGE signature field with the specified integer value range. @param range array of 4 integers representing the byte range [LOW, HIGH]
1694 Updates the update state mask with contents from byte array. @param bytes source byte data
1695 Sets the text color mask for this outline item. @param textColor Color object representing the desired text color
1696 Initializes a new PDAcroForm instance with the given PDDocument. @param doc the parent PDF document
1697 Updates the update state mask with form field list. @param fields collection of PDFields to manage
1698 Updates the update state mask with a list of form fields. @param fields collection of PDFields to manage
1699 Initializes a new instance of the PDButton class with the given AcroForm. @param acroForm parent form object
1700 Updates the update state mask with a list of string values. @param values list of string values
1701 Initializes a new instance of the PDChoice class with an AcroForm and sets the field type to choice. @param acroForm interactive form containing variable text fields
1702 Updates the update state mask with child fields. @param children list of PDField objects to manage
1703 Updates the update state mask with a new COSName key and COSBase value. @param object underlying COSBase object to trigger an action
1704 Updates the update state mask with a new COSBase value. @param value underlying COSBase object or null to trigger a different action
1705 Initializes a new PDSignatureField instance within the given AcroForm, setting its type to 'Signature' and locking the first widget. @param acroForm parent PDF form
1706 Initializes a new instance of the PDTextField class within the given interactive form. @param acroForm interactive form containing variable text fields
1707 Updates the update state mask with default style string. @param defaultStyleString input string to set default appearance
1708 Updates the update state mask with rich text value. @param richTextValue input string to be encoded
1709 Updates origin coordinates of the rectilinear measurement's coordinate system. @param coordSystemOrigin array of float values representing new origin coordinates
1710 Initializes a new instance of the PDThread class with default thread properties.
1711 Sets transition style based on given direction. @param direction PDTransitionDirection enum value
1712 Sets transition duration. @param duration time in seconds to display page @see #setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)
1713 Updates transition style with specified scaling factor. @param scale floating-point value representing the scale
1714 Updates transition style based on opacity. @param opaque true for solid background, false otherwise
1715 Updates the collection with elements from the specified collection. @param c collection of elements to be added
1716 Processes the operands for a non-stroking color operator. @param operands list of COSBase objects containing color components
1717 Inserts elements from the specified collection at a specific index. @param index insertion point @param c collection containing elements to be inserted
1718 Processes the given COS array of objects and propagates child updates. @param objectList collection of objects to be processed
1719 Extracts a float array from the COSArray, where each element is either a COSNumber value or 0. @return float array with extracted values
1720 Retrieves a list of Float values from the underlying COSArray collection. @return List of Float values or null if not found
1721 Retrieves a list of integers by iterating over the COSBase objects in the array and extracting their values. @return List<Integer> containing extracted integer values or null if not found
1722 Updates COSDictionary entries in the given array with a new parent and structure type. @param kArray array of PDF objects @param newParent new parent dictionary for each entry @param newStructureType optional new structure type for each entry
1723 Retrieves minimum value from PDRange object's underlying array. @return Minimum value as a float
1724 Retrieves maximum value from the range array. @return maximum value as a float
1725 Retrieves a PDGamma instance from the array at the specified index. @param index position in the array
1726 Retrieves and decodes the mask from the first COSBase object in the array. @param index position in the array (unused)
1727 Extracts and decodes the mask from the first COSBase object.
1728 Resolves a blend mode by its name or array of names. @param cosBlendMode COSBase object representing the blend mode @return resolved BlendMode object, or NORMAL if not found
1729 Retrieves list of masked colorant names.
1730 Retrieves the alternate color space. @return PDColorSpace object or null if not initialized
1731 Retrieves mask value associated with colorant.
1732 Creates a PDDestination object from the given COSBase representation. @param base COSBase instance to be converted @return PDDestination object or throws IOException for unknown types
1733 Retrieves the target page object based on specific criteria. @return PDPage object or null if not found
1734 Retrieves the mask value from the first page object. @return The mask value or -1 if not found
1735 Retrieves the mask value from the PDF document. @return float representation of the mask value or -1.0f if invalid
1736 Initializes a Matrix instance from a COSArray containing transformation parameters. @param array COSArray object with transformation data
1737 Retrieves dictionary object by name. @param key string representation of the entity to retrieve
1738 Retrieves the value associated with either of two provided keys. @param firstKey primary key to search for @param secondKey secondary key to search if primary is not found @return COSBase object representing the retrieved value or null if not found in both keys
1739 Retrieves the function mask as a COSName object. @param key unique identifier of the entity to retrieve
1740 Retrieves the function mask as a COSDictionary object. @param key unique identifier of the entity to retrieve @return COSDictionary object representing the function mask or null if not found
1741 Retrieves the function mask as a COSStream object. @param key unique identifier of the entity to retrieve @return COSStream object representing the function mask or null if not found
1742 Retrieves the function mask as a COSArray object. @param key unique identifier of the entity to retrieve @return COSArray object representing the function mask or null if not found
1743 Retrieves the function mask as a COSName object. @param key unique identifier of the entity to retrieve @param defaultValue default value to return if not found
1744 Retrieves the function mask associated with the given COSName instance. @param key unique identifier of the entity
1745 Retrieves the string value associated with a given key. @param key unique identifier of the entity to retrieve
1746 Retrieves the function mask as a Calendar object. @param key unique identifier of the entity to retrieve @return Parsed Calendar instance or null if not found
1747 Retrieves the function mask as a long value. @param key unique identifier of the entity to retrieve @param defaultValue default value to return if not found @return long value representing the function mask or defaultValue
1748 Retrieves the function mask as a floating-point value. @param key unique identifier of the entity to retrieve @param defaultValue fallback value if not found or invalid @return float representing the function mask, or default value if not applicable
1749 Updates the page's contents with saved and restored graphics state streams. @param page target PDF page
1750 Retrieves the function mask as a list of managed PDStream instances. @return Iterator over PDStream objects or empty iterator if not found
1751 Checks the function mask of a page. @return true if the page has a non-empty function mask, false otherwise
1752 Fetches the function mask from a given COS dictionary. @param map COS dictionary to retrieve the function mask from @return COSDictionaryMap containing the function mask or null if not found
1753 Updates the function mask for a given PDAttributeObject. @param attributeObject object to be associated with the updated function mask
1754 Retrieves the function mask as a Revisions object. @return Revisions object representing the function mask or null if not found
1755 Updates the function mask with a new COSName key and value. @param className string representation of the class name
1756 Updates the function mask with a given COSBase object. @param object the COSBase instance to process
1757 Updates the function mask with a new instance of COSBase. @param newKid new COSBase object to include @param refKid reference COSBase object (can be null)
1758 Updates the function mask by removing or updating the given object. @param object COSBase object to remove or update @return true if the object was removed or updated, false otherwise
1759 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1760 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask
1761 Retrieves the function mask as a boolean value. @return true if metadata encryption is enabled, false otherwise
1762 Retrieves the owner encryption key as a byte array. @return byte[] representing the owner encryption key or null if not found
1763 Retrieves the user encryption key as a byte array. @return byte[] representing the user encryption key or null if not found
1764 Retrieves the function mask as a byte array. @return byte array representing the function mask or null if not found
1765 Retrieves the function mask from the annotation's COSDictionary. @return Integer representing the function mask or null if not found
1766 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1767 Retrieves the function mask as an Integer value. @return Integer representation of the function mask or null if not found
1768 Retrieves the function mask as a numeric value. @return Integer representation of the function mask or null if not found
1769 Retrieves the function mask as an Integer value. @return Integer representation of the function mask or null if not found
1770 Retrieves the function mask as an Integer value. @return function mask or null if not found
1771 Retrieves the function mask as an Integer.
1772 Retrieves the function mask as an Integer value. @return Function mask value or null if not found
1773 Retrieves the function mask as a float value.
1774 Retrieves the color space function mask. @return PDColorSpace object or null if not found
1775 Retrieves the function mask as a PDColorSpace instance from the given resource dictionary. @param resources resource dictionary for color space creation @return PDColorSpace object representing the function mask or null if not found
1776 Initializes an instance of PDOptionalContentGroup from a given COSDictionary object. @param dict COSDictionary representing the optional content group
1777 Initializes a PDOptionalContentMembershipDictionary instance from the provided COSDictionary. @param dict COSDictionary containing optional content membership data
1778 Retrieves the function mask as an Integer. @return Function mask integer or null if not found
1779 Retrieves and creates a soft mask based on the function mask dictionary. @return PDSoftMask object or null if not found
1780 Retrieves the function mask as a Float value from the COSDictionary. @param key unique identifier of the entity to retrieve @return Float value representing the function mask or null if not found
1781 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1782 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1783 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
1784 Determines the mode in which to open embedded content. @return OpenMode enum value indicating how linked content is displayed
1785 Retrieves function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1786 Determines the open mode based on function mask settings. @return OpenMode enum value indicating how to open the launched file (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1787 Determines the window mode for opening linked content based on function mask. @return OpenMode enum value: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE
1788 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1789 Initializes a new instance of the PDAnnotation class from a COSDictionary. @param dict dictionary containing annotation properties
1790 Retrieves the function mask from the underlying COSDictionary. @return a byte array representing the function mask or an empty array if not found
1791 Retrieves XFA function mask as a PDXFAResource object. @return PDXFAResource object representing the function mask or null if not found
1792 Retrieves function mask as a list of strings. @return List of strings representing the function mask
1793 Retrieves the function mask as a list of strings.
1794 Retrieves the function mask as a list of strings. @param name unique identifier of the entity to retrieve
1795 Retrieves the function mask as a COSBase object. @param key unique identifier of the entity to retrieve
1796 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
1797 Retrieves the function mask as a string. @return Function mask value or empty string if not found
1798 Retrieves function mask as COSBase object. @return COSBase object representing function mask or null if not found
1799 Retrieves a COSDictionary instance's mask value. @return String representation of the mask or an error message if an exception occurs
1800 Recursively processes indirect objects within a COSDictionary. @param indirectObjects Collection of COSObjectKeys to process
1801 Updates the highest XREF object number in the COSDocument based on imported page's indirect objects. @param importedPage PDPage object containing imported page data
1802 Updates visual signature properties and closes associated resources. @throws IOException on processing error
1803 Writes the function mask for a given COSObjectKey and COSBase object. @param key unique COSObjectKey identifier @param obj referenced COSBase object (null or empty if not found)
1804 Writes the PDF object mask to the output stream. @param obj target COSBase object
1805 Retrieves the key from the pool using the provided COSBase object. @param object COSBase object to retrieve key from
1806 Retrieves or creates a COSObjectKey instance for the given object. @param key existing COSObjectKey instance (optional) @param object COSBase object to be associated with the key @return the updated COSObjectKey instance, or null if not found or created
1807 Checks if an object from the pool contains the given COSBase. @param object COSBase to search for
1808 Prepares the function mask by creating and configuring a list of COSWriterObjectStream objects. @return List of configured object streams
1809 Formats and displays plain text content for each line in the provided list, handling alignment and optional line wrapping based on the specified settings. @param lines list of lines to be formatted @param isFirstParagraph flag indicating whether it's the first paragraph
1810 Computes and draws cloud-like shapes at specified angles and dimensions. @param angleCur current angle in radians @param r radius of outer circle @param alpha parameter for shape computation @param cx central X-coordinate @param cy central Y-coordinate
1811 Computes and returns an array of points representing a stylized cloud-like shape based on the provided angle and radius. @param angleCur current angle in radians @param r radius of the shape @return Array of Point2D.Double objects or throws IOException if an error occurs
1812 Draws a cloud-like shape at specified coordinates using the provided parameters and adds points to the output list. @param startAng starting angle in radians @param endAng ending angle in radians @param cx central X-coordinate @param cy central Y-coordinate @param rx radius of outer circle @param ry radius of inner circle @param out list of points to add @param addMoveTo whether to add a move-to instruction at the start
1813 Initializes a PDICCBased instance with the given PDDocument. @param doc underlying PDF document
1814 Initializes a PDPattern instance with the given resources and color space. @param resources PDResources object @param colorSpace underlying color space (PDColorSpace)
1815 Updates the optional content groups dictionary with a list of policy dictionaries. @param ocgs list of PDPropertyList objects representing policy dictionaries
1816 Updates the measurement dictionary with a set of rectilinear measurements. @param changeXs array of PDNumberFormatDictionary objects to process
1817 Updates the measurement dictionary with a list of rectilinear measurements. @param changeYs array of PDNumberFormatDictionary objects representing measurements to update
1818 Updates the measurement dictionary with an array of rectilinear measurements. @param distances array of PDNumberFormatDictionary objects representing distances
1819 Updates the measurement dictionary with rectilinear measures from an array of PDNumberFormatDictionaries. @param areas array of measurement dictionaries to process
1820 Updates the rectilinear measurement dictionary with an array of angles. @param angles array of PDNumberFormatDictionary objects representing angles
1821 Processes an array of rectilinear measurement dictionaries. @param lineSloaps array of PDNumberFormatDictionary objects
1822 Initializes COSArray with specified number of empty copies. @param size number of empty COSBase objects to add
1823 Fetches and interprets the function mask from the PDF source. @throws IOException on parsing error
1824 Sets DECODE_PARMS metadata in the PDF stream. @param decodeParams list of parameters to encode
1825 Sets PDF decoding parameters using the provided list. @param decodeParams List of parameters to set
1826 Updates function mask with child elements. @param kids List of child objects to convert and store
1827 Updates the update state mask with a new option list. @param options list of optional values
1828 Retrieves the PDF stream's filter mask as a COSStream object. @return Filter mask COSStream or null if not applicable
1829 Updates the CID font dictionary with glyph widths and metrics. @param cidFont COSDictionary representing the Type 2 CID font
1830 Sets the line style mask based on the provided PDLineDashPattern object. @param dashPattern pattern describing the line style
1831 Sets the update state mask with a new color value. @param color The PDColor object to apply
1832 Initializes color mask with given PDColor object. @param c color settings
1833 Sets color mask based on input color. @param ic PDColor object to determine mask
1834 Creates color mask appearance stream. @param ic interior color of the polygon
1835 Creates a COSArray instance representing the color's mask. @param ic input color object
1836 Initializes mask components with interior color. @param ic interior color of the annotation
1837 Updates the color mask with a new PDColor instance. @param c PDColor object containing color values
1838 Creates a COSArray instance representing the color's mask. @param c target color object
1839 Creates color mask with given text color. @param textColor PDColor object defining text color
1840 Creates a PDImageXObject from an input stream. @param document parent PDDocument @param stream ByteArrayInputStream containing image data
1841 Updates PDFont with mask settings. @param font target PDFont object
1842 Sets Tint Transform function in alternate color space. @param tint PDFunction object representing tint transformation
1843 Applies tint transformation to color separation. @param tint PDFunction object representing tint transformation
1844 Updates the COSArray at index 0 with the provided PDPage object and key. @param page target page to update in the COSArray
1845 Calculates rectangle's mask value based on its dimensions. @return Mask value
1846 Updates gamma correction mask at index 0 with provided color. @param colour PDGamma object to update
1847 Sets gamma correction mask at index 1 with provided color. @param colour PDGamma object to update
1848 Sets gamma correction mask at index 2 with provided color. @param colour PDGamma object to update
1849 Sets gamma correction mask at index 3 with provided color.
1850 Encrypts or decrypts the specified PDF object using provided object number and generation number. @param obj PDF object to encrypt/decrypt @param objNum unique object identifier @param genNum generation number for encryption/decryption
1851 Recursively updates the dictionary with a new key-value pair. @param key unique identifier for the PDF object @param value underlying COSObjectable object or null to trigger a different action
1852 Updates the update state mask for the given PDAcroForm instance. @param acroForm PDAcroForm object to be updated
1853 Updates viewer preferences with a new mask. @param prefs ViewerPreferences object to update
1854 Updates document outline state mask with given PDDocumentOutline object. @param outlines PDDocumentOutline object to update
1855 Updates metadata in the catalog dictionary with provided PDMetadata. @param meta PDMetadata object to update
1856 Updates the open-action mask in the catalog dictionary. @param action PDDestinationOrAction object to update with
1857 Updates the update state mask with additional actions. @param actions PDDocumentCatalogAdditionalActions object
1858 Updates document catalog dictionary with a new NAMES key and value. @param names PDDocumentNameDictionary object to update
1859 Updates the update state mask with a new MARK_INFO key and optional COSObjectable value. @param markInfo PDMarkInfo object or null to trigger a different action
1860 Updates URI mask in document catalog. @param uri PDURIDictionary object containing URI information
1861 Updates the update state mask for the document catalog. @param treeRoot root node of the structure tree
1862 Updates page label catalog with new labels. @param labels PDPageLabels object containing updated labels
1863 Updates the document function mask with destinations and embedded files. @param dests PDDestinationNameTreeNode object
1864 Updates embedded files mask in the name dictionary. @param ef PDEmbeddedFilesNameTreeNode object
1865 Updates the JavaScript update state mask in the PDF document name dictionary. @param js PDJavascriptNameTreeNode object to associate with the document
1866 Initializes a new instance of the PDPage class with specified media box dimensions. @param mediaBox dimensions for the PDF page
1867 Updates the page's update state mask with resources from the given PDResources object. @param resources PDResources object or null to trigger default behavior
1868 Updates the update state mask for a PDF page's media box. @param mediaBox PDRectangle object representing the page's dimensions
1869 Updates the update state mask for the bleed box. @param bleedBox rectangle representing the bleed area or null to reset
1870 Updates the update state mask for the page's trim box. @param trimBox PDRectangle object representing the trim box or null to reset
1871 Updates the update state mask for the page's ART_BOX. If the input box is null, triggers a default action; otherwise, updates the mask with the provided box.
1872 Updates the page's content stream mask with a new PDStream object. @param contents the page's content stream to be updated
1873 Updates the update state mask with metadata from the provided PDMetadata object. @param meta PDMetadata object containing updated metadata
1874 Updates the update state mask with additional actions. @param actions PDPageAdditionalActions object containing new actions
1875 Updates the update state mask with transition information. @param transition PDTransition object containing transition data
1876 Updates page metadata with transition and duration values. @param transition PDTransition object @param duration floating-point duration value
1877 Updates the update state mask with the given PDPage's COSName. @param page PDPage object representing the associated page
1878 Updates update state mask with annotation. @param annotation PDAnnotation object to be added
1879 Updates the update state mask with a new COSName key (OBJ) and PDXObject value.
1880 Updates the update state mask with the given PDPage. @param page target page to be added
1881 Updates the update state mask with the parent node of the given PDStructureNode. @param structureNode the node to be updated
1882 Updates the update state mask of the current element's child page. @param page PDPage object to be updated
1883 Updates the update state mask with a new COSName key and revisions collection. @param attributes revisions collection of PDAttributeObject instances
1884 Updates update state mask with ID tree root. @param idTree PDStructureElement representing the logical structure tree
1885 Updates the update state mask with the parent tree's identifier. @param parentTree PDNumberTreeNode representing the parent structure
1886 Updates annotation's update state mask with rectangle data. @param rectangle bounding box of the annotated region
1887 Updates annotation mask with border style dictionary. @param bs PDBorderStyleDictionary object
1888 Updates annotation's m1 field with PDBorderEffectDictionary. @param be PDBorderEffectDictionary object
1889 Updates the update state mask with the fringe rectangle. @param fringe PDRectangle object describing the fringe dimensions
1890 Updates the annotation's update state mask with the given fringe rectangle. @param fringe rectangle defining the fringe dimensions
1891 Updates the update state mask with a new RD key and optional PDRectangle value. @param fringe rectangle defining the fringe area
1892 Updates the update state mask with the fringe rectangle. @param fringe PDRectangle object representing the fringe dimensions
1893 Updates FDF catalog with new dictionary. @param fdf Form Data Format (FDF) dictionary
1894 Updates the update state mask with the given PDSignature object. @param sig PDSignature object to be added
1895 Updates the update state mask with a new file specification. @param fs file specification object
1896 Updates the JavaScript associated with the FDF document. @param js FDFJavaScript object to set
1897 Updates the FDF catalog with a new root entry. @param cat FDF catalog object
1898 Updates the appearance flags of the form field. @param ap PDAppearanceDictionary instance
1899 Updates the reference flag in the FDF field. @param ref FDFNamedPageReference object
1900 Sets icon fit mask based on provided FDFIconFit enum value. @param fit Icon fit mode (e.g. stretch, scale)
1901 Updates the update state mask with a new PDAction instance. @param a the action to be added
1902 Updates the update state mask with additional actions. @param aa PDAdditionalActions object containing action details
1903 Sets the icon fitting mask based on provided PDRange. @param space range of values defining icon space allocation
1904 Updates the update state mask with a new file specification. @param fs PDFileSpecification object
1905 Updates FDF page info using the provided mask. @param info PageInfo object containing the new data
1906 Updates the update state mask with a named page reference. @param tRef FDFNamedPageReference object
1907 Updates font file mask in the PDF stream. @param type1Stream underlying PDStream object
1908 Updates font file mask in PDF stream. @param ttfStream PDStream object containing TTF font data
1909 Updates font file mask in PDF stream. @param stream target PDStream object
1910 Updates the update state mask with CID set information from the PDStream. @param stream the PDF stream object
1911 Updates the color space with a new white point from PDTristimulus representation. @param whitepoint PDTristimulus object containing X, Y, and Z values
1912 Sets the black point of the color space. @param blackpoint PDTristimulus object representing the black point
1913 Updates the extended graphics state with a new PDExtendedGraphicsState object. @param extendedGraphicsState updated graphics state
1914 Updates shading resources with new values from the provided PDShading object. @param shadingResources shading properties to apply
1915 Updates the update state mask with pattern resource information. @param resources PDResources object containing pattern data
1916 Updates the shading function mask dictionary with a new PDFunction. @param newFunction the new shading function to replace the previous one
1917 Updates the PDF extended graphics state with font settings. @param fs PDFontSetting object containing font properties
1918 Validates and updates the destination mask for a GoToE action. @param d PDDestination object to validate
1919 Updates the update state mask with a file specification. @param fs PDF file specification
1920 Updates the update state mask with destination information. @param targetDirectory target directory object
1921 Validates the destination of a PDActionGoTo instance and updates its function mask. @param d PDDestination object containing the navigation information
1922 Updates file specification mask with F key. @param fs FileSpecification object to configure
1923 Updates the launch mask with file specification parameters. @param fs PDFileSpecification object containing external file details
1924 Updates Windows launch parameters. @param win PDWindowsLaunchParams object containing configuration details
1925 Updates file specification mask with target PDFileSpecification. @param fs PDF file specification object
1926 Updates ACTION flag with file specification mask. @param fs PDFileSpecification object
1927 Updates the update state mask with file specification details. @param fs PDFileSpecification object containing file attributes
1928 Updates the update state mask with an F-action. @param action PDAction object to be associated
1929 Updates the update state mask with an action definition. @param e PDAction object containing the updated definition
1930 Updates action response mask with new PDAction instance. @param x PDAction object to set as response
1931 Updates the update state mask with a custom action definition. @param d PDAction object defining the new behavior
1932 Updates the update state mask with a new action definition. @param u action instance to be added
1933 Updates FO action mask with given PDAction object. @param fo PDAction object to set
1934 Updates the update state mask with a blur action definition. @param bl PDAction object defining the blur behavior
1935 Updates the update state mask with a new action definition. @param po PDAction object
1936 Updates the update state mask with PC action definition. @param pc PDAction object defining how to handle PC
1937 Updates the update state mask with a new PV action definition. @param pv PDAction object defining the behavior
1938 Updates the update state mask with the given PDAction instance.
1939 Updates interactive action mask with WC event. @param wc PDAction object associated with document closing
1940 Updates the update state mask with an action triggered on document opening. @param ws PDAction object associated with document opening
1941 Updates the update state mask with a new PDAction triggered by document opening. @param ds PDAction object to be associated with the document catalog
1942 Sets the mask action associated with document opening. @param wp PDAction object controlling the event
1943 Updates the document page transition mask with a new action. @param dp PDAction object to update the mask
1944 Updates update state mask with action. @param k PDAction object to set
1945 Updates the mask action with a new PDAction. @param f the PDAction to update
1946 Updates the update state mask with a new PDAction object. @param v PDAction object to be added
1947 Updates the update state mask with a new PDAction object associated with key C. @param c PDAction object to be linked
1948 Updates the update state mask with a new COSName key and optional PDAction value. @param o PDAction object to associate with the 'O' key
1949 Updates the update state mask with a new COSName key and action. @param c PDAction object associated with the PDF page
1950 Updates the update state mask with a named destination key. @param targetDirectory PDTargetDirectory object
1951 Updates the update state mask for a named destination. @param dest PDNamedDestination object or null to trigger default action
1952 Updates the update state mask with a new PDAppearanceDictionary. @param appearance appearance settings to be applied
1953 Updates the annotation's update state mask with the given PDPropertyList. @param oc PDPropertyList object containing updated properties
1954 Updates annotation mask with appearance settings. @param page PDPage object associated with the annotation
1955 Updates attachment appearance stream with file specification details. @param file PDFileSpecification object containing file details
1956 Updates border effects dictionary with new free text annotation appearance stream. @param be PDBorderEffectDictionary object containing annotation properties
1957 Updates rectangle differences with free text annotation's appearance stream. @param rd PDRectangle object representing the annotation's bounds
1958 Updates the update state mask with an action's destination. @param action PDAction object containing navigation details
1959 Updates border style dictionary mask with given PDBorderStyleDictionary. @param bs Border style data to be updated
1960 Updates link annotation destination and mask. @param dest PDDestination object to set as link target
1961 Updates the update state mask with a URI action. @param pa PDActionURI object containing navigation details
1962 Updates popup annotation state with new COSObjectable value. @param popup PDAnnotationPopup object to update
1963 Updates IRT mask with annotation details. @param irt PDAnnotation object containing user input
1964 Updates the update state mask with external data dictionary. @param externalData PDExternalDataDictionary instance
1965 Updates the update state mask with border style dictionary. @param bs Border style dictionary to be updated
1966 Updates border effect dictionary with new polygon properties. @param be PDBorderEffectDictionary to update
1967 Updates border effects dictionary with new value. @param be PDBorderEffectDictionary object to update
1968 Updates rectangle differences with new values. @param rd PDRectangle object containing updated values
1969 Updates the update state mask with appearance characteristics. @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary object
1970 Updates annotation appearance based on provided PDAction. @param action PDAction instance driving visual changes
1971 Updates annotation additional actions with specified mask. @param actions PDAnnotationAdditionalActions object
1972 Updates border style with a new PDBorderStyleDictionary. @param bs updated border style dictionary
1973 Validates and sets the parent widget for a terminal field. @param field terminal field to update
1974 Sets normal appearance entry in PDAppearanceDictionary. @param entry Normal appearance configuration
1975 Sets the normal appearance entry in the PDAppearanceDictionary. @param ap PDAppearanceStream object containing appearance data
1976 Updates rollover appearance with specified PDAppearanceEntry. @param entry appearance configuration
1977 Updates rollover appearance in PDAppearanceDictionary. @param ap PDAppearanceStream object
1978 Updates the down appearance entry of this PDAppearanceDictionary. @param entry PDAppearanceEntry object containing visual attributes
1979 Updates the down appearance stream in the PDAppearanceDictionary. @param ap The PDAppearanceStream to update
1980 Updates the update state mask with a new filter key and value. @param filter PDPropBuildDataDict object containing filter data
1981 Updates publication security mask in PDPropBuild. @param pubSec Publication security data
1982 Updates the application mask in the PDPropBuildDataDict. @param app PDPropBuildDataDict object containing application data
1983 Updates the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object containing seed value data
1984 Updates the PROP_BUILD property with a new PDPropBuild object. @param propBuild new property build data
1985 Updates the update state mask of the given PDOutlineNode with the previous item.
1986 Updates the update state mask with the next item's COSName key and optional value. @param outlineNode current PDOutlineNode instance
1987 Updates the update state mask with a destination COS object. @param dest PDDestination object to associate with the mask
1988 Updates the update state mask with an action-specific key and value. @param action associated PDAction object
1989 Updates the update state mask of the given PDStructureElement. @param structureElement element to be updated
1990 Updates the update state mask of the given PDOutlineNode. @param outlineNode node to be updated
1991 Recursively updates the update state mask of the given PDOutlineNode. @param outlineNode outline node to be updated
1992 Updates the update state mask with the given PDResources. @param dr PDF resources to update
1993 Updates XFA resource mask in form dictionary. @param xfa PDXFAResource object to update
1994 Updates the update state mask with a new digital signature value. @param value PDSignature object containing the updated signature
1995 Updates the update state mask with a digital signature value. @param value PDSignature object containing the new signature data
1996 Updates the seed value mask with a new PDSeedValue. @param sv new seed value to update the mask with
1997 Updates the update state mask with additional actions. @param actions PDFormFieldAdditionalActions object
1998 Updates the field's update state mask with provided annotation widgets and their relationships. @param children list of PDAnnotationWidget objects to manage
1999 Sets the bounding box of the viewport to the specified rectangle. @param rectangle the new bounding box
2000 Updates the viewport settings dictionary with measure-related attributes. @param measure PDMeasureDictionary object containing measurement details
2001 Updates thread's mask with document information. @param info PDDocumentInformation object containing relevant data
2002 Updates the update state mask of the current bead with the given PDThread. @param thread PDThread object containing relevant information
2003 Updates the update state mask with a new bead's position. @param next the newly encountered PDThreadBead
2004 Updates thread bead with next bead's mask value. @param previous Previous PDThreadBead instance
2005 Updates bead's update state mask with the given page. @param page PDPage object to associate with this bead
2006 Updates the update state mask with a new rectangle. @param rect bounding box of the updated area
2007 Updates the marked state in the PDF document's logical structure. @param value underlying boolean value to be converted and stored
2008 Updates UserProperties in PDF document's logical structure. @param userProps boolean value to be stored
2009 Marks PDF element as suspected or cleared. @param suspect true to mark as suspect, false otherwise
2010 Updates the update state mask with a new key and boolean value. @param value underlying boolean value to be converted and stored
2011 Updates popup visibility state with new boolean value. @param open true to show popup, false otherwise
2012 Updates the update state mask with a new key and boolean value. @param fd underlying boolean value to be converted and stored
2013 Updates volatile state mask with new boolean value. @param fileIsVolatile input boolean flag
2014 Updates metadata encryption status in crypt filter dictionary. @param encryptMetaData boolean indicating whether to encrypt metadata
2015 Updates line annotation's caps update state with a new value. @param cap input boolean value indicating whether to cap lines
2016 Updates update state mask with a boolean value. @param value input boolean value
2017 Updates rename mask with a new boolean value. @param value input boolean value
2018 Updates the anti-aliasing mask with a new value. @param antiAlias input boolean value
2019 Updates the overprint mask with a new boolean value. @param op input boolean value
2020 Updates overprint state mask with a new boolean value. @param op input boolean value
2021 Updates SA mask with new boolean value. @param sa input boolean value
2022 Updates the overprint mask with a new alpha value. @param alpha input boolean value
2023 Updates the TK extended graphics state property. @param tk input boolean value
2024 Updates window behavior for embedded file navigation based on user preference. @param value OpenMode enum value to determine window behavior
2025 Configures the launch action's window behavior based on the provided OpenMode value. @param value OpenMode enum value (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW) or null to reset to default (NEW_WINDOW)
2026 Configures the window behavior for remote navigation actions. @param value OpenMode enum value (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2027 Updates sound action's synchronous state. @param synchronous new synchronous state value
2028 Configures sound repetition behavior. @param repeat true to enable sound looping
2029 Updates sound mixing state. @param mix boolean value to enable or disable sound mixing
2030 Updates line annotation appearance with caps style based on input boolean value. @param cap true to apply caps style, false otherwise
2031 Updates annotation update state mask with 'Open' key and boolean value. @param open input boolean value indicating whether to open or close the annotation
2032 Updates pre-release status flag in digital signature properties. @param preRelease true to mark as pre-release, false otherwise
2033 Updates update state mask with non-embed font warning flag. @param noEmbedFontWarning input boolean value
2034 Sets trust mode flag in PDF properties dictionary. @param trustedMode input boolean value indicating trusted mode status
2035 Updates form field appearance mask with a new boolean value. @param value input boolean value
2036 Updates toolbar visibility preference. @param value input boolean value controlling toolbar display
2037 Updates menu bar visibility state. @param value true to hide or false to show the menu bar
2038 Updates window UI visibility in viewer preferences. @param value input boolean value indicating whether to hide or show window UI
2039 Updates the window fit mask with a new boolean value. @param value input boolean value
2040 Updates viewer preference mask with new boolean value. @param value input boolean value
2041 Updates display document title visibility. @param value input boolean value
2042 Builds a COSDictionary representation for the given appearance XML. @param appearanceXML XML Element containing appearance definition @return COSDictionary object or null if not handled
2043 Updates the update state mask with a new COSName key and optional string value. @param key unique identifier for the PDF object @param value underlying string or null to trigger a different action
2044 Updates page mode in catalog dictionary. @param mode PageMode enumeration value
2045 Configures page layout mask with specified layout. @param layout PageLayout object to set
2046 Updates the PDF document's catalog with the specified version. @param version string representation of the document version
2047 Validates and sets the trapped mask with a specific string value. @param value valid value: 'True', 'False', or 'Unknown'
2048 Updates page label style in PDF document. @param style new style string or null to reset
2049 Initializes a new instance of the PDDictionaryWrapper class with a typed dictionary. @param type unique identifier for the PDF object's type
2050 Updates update state mask with COSName key and optional string value. @param owner underlying string or null to trigger a different action
2051 Initializes a new instance of PDMarkedContentReference with default values.
2052 Initializes a new instance of the PDObjectReference class with default values.
2053 Updates the update state mask with a new COSName key and optional string value. @param structureType unique identifier for the PDF object
2054 Updates the update state mask with a new COSName key and optional revisions collection. @param classNames Revisions collection of class names
2055 Initializes a new instance of the PDStructureNode with the specified structure type. @param type unique identifier for the PDF object's structure type
2056 Updates the update state mask with a new style string. @param style visual style identifier
2057 Updates the update state mask with a new COSName key and optional string value. @param subfilter unique identifier for the PDF object
2058 Updates the update state mask with a new COSName key and optional string value. @param intent underlying string or null to trigger a different action
2059 Updates the update state mask with a new style value. @param style updated style string
2060 Updates text annotation icon. @param icon new icon string
2061 Updates the update state mask with FDF catalog version. @param version new FDF catalog version
2062 Updates FDF document's encoding. @param encoding new character encoding scheme
2063 Updates the update state mask with a specified icon fitting option. @param option Fitting configuration to apply
2064 Updates icon scaling configuration with specified scale type. @param scale icon scale type (e.g. "100%")
2065 Initializes a new instance of the PDAbstractPattern class.
2066 Updates the update state mask with the specified action type. @param type new action type
2067 Updates the update state mask with a new string value. @param s string value to be updated
2068 Updates the subtype mask with a new string value. @param subType unique identifier for the annotation's type
2069 Updates annotation appearance settings with a new string value. @param as updated appearance string
2070 Updates attachment file specification with new COSName key and optional string value. @param name unique identifier for the PDF object
2071 Updates free text annotation appearance stream with specified style. @param style new appearance style
2072 Updates the line annotation's appearance stream with caption positioning. @param captionPositioning new positioning value
2073 Updates the update state mask with a new destination and optional string value. @param mode link action or string to trigger different behavior
2074 Updates update state mask with new RT key and optional string value. @param rt string value or null to trigger different action
2075 Updates the update state mask with an IT-related annotation. @param it string value related to IT
2076 Updates rubber stamp annotation's update state mask with new COSName key and optional string value. @param name new name for the rubber stamp annotation
2077 Calls m1() and triggers update state mask with COSName key and string value. @param name underlying string or null to trigger a different action
2078 Updates the update state mask with a new COSName key and optional string value based on the provided highlighting mode. @param highlightingMode valid values: 'N', 'I', 'O', 'P', or 'T'
2079 Sets the function mask dictionary with a new string value. @param s string value to update the function mask
2080 Initializes an instance of PDExternalDataDictionary with default values. Sets the type attribute to "ExData".
2081 Updates the function mask with a new subtype value. @param subtype unique identifier for the PDF object
2082 Sets the update state mask with a new COSName key and optional string value. @param name user-provided string or null to trigger a different action
2083 Updates the URL type in the PDF document. @param urlType new URL type value
2084 Initializes an empty outline node within the hierarchical structure of PDF items.
2085 Initializes a new instance of PDDocumentOutline from an existing COSDictionary. @param dic PDF outline data represented as a dictionary
2086 Initializes a new instance of the PDMeasureDictionary class. Sets the measurement type attribute in the underlying COSDictionary.
2087 Sets the function mask subtype. @param subtype measurement subtype
2088 Initializes a new instance of PDNumberFormatDictionary with default settings. @param none
2089 Updates the viewport dictionary with a new COSName key and optional string value. @param name unique identifier for the PDF object
2090 Initializes a new PDTransition instance with the specified visual transition style. @param style the style of the page transition
2091 Updates transition dimension mask with specified dimension. @param dimension target dimension to update
2092 Updates the transition's style with a new COSName key and optional PDTransitionMotion value. @param motion motion properties for the transition
2093 Updates NON FULL SCREEN PAGE MODE preference. @param value new page mode setting
2094 Updates reader direction preference. @param value new reading direction
2095 Updates the update state mask with a new view area boundary. @param value view area boundary
2096 Updates the update state mask with a new view clip boundary. @param value updated boundary value
2097 Updates the print area preference with new boundary value. @param value updated boundary coordinates
2098 Updates print clip boundary mask. @param value Boundary object containing new settings
2099 Updates the update state mask with the duplex setting. @param value duplex setting (e.g. DUPLEX or SINGLE)
2100 Updates print scaling preference. @param value new scaling factor
2101 Updates the update state mask with a formatted date. @param key unique identifier for the PDF object @param date Calendar instance to format
2102 Sets or updates string value associated with given COSName. @param key unique identifier for PDF object @param value underlying string value or null to trigger different action
2103 Updates the update state mask with a new language value. @param language language identifier
2104 Updates document title metadata. @param title new title value
2105 Updates document author metadata. @param author new author string
2106 Updates the PDF document's subject metadata. @param subject new subject string
2107 Updates the PDF document's keywords attribute. @param keywords new set of keywords to associate with the document
2108 Updates document creator metadata. @param creator name of the document's creator
2109 Updates the producer metadata in the PDF document. @param producer new producer value
2110 Updates page label range mask with a new prefix. @param prefix optional prefix string or null to reset
2111 Updates the update state mask with a COSString value. @param file underlying string value
2112 Updates the update state mask with a new file specification. @param file name of the file to be updated
2113 Updates the update state mask with a file specification description.
2114 Updates the update state mask with a new ID. @param id unique identifier for the PDF object
2115 Updates the update state mask with a new title. @param title title string to be assigned
2116 Updates the document language based on the provided locale. @param language unique identifier for the PDF object
2117 Updates alternate description in PDF structure. @param alternateDescription new text value
2118 Updates the update state mask with an expanded form using COSName.E and optional string value. @param expandedForm underlying string value or null to trigger a different action
2119 Updates the update state mask with actual text value. @param actualText string value to be updated
2120 Updates annotation update state mask with a new date value. @param date the date to be set in the annotation
2121 Updates annotation update state mask with given COSString value. @param name unique identifier for the PDF object
2122 Updates annotation content with new string value. @param contents new content to be displayed
2123 Updates the update state mask with a new COSName key and optional string value. @param title annotation title
2124 Updates the annotation's subject field. @param subject new subject value
2125 Updates the annotation symbol with a new value based on the provided string. @param symbol input string to determine the new symbol
2126 Updates the update state mask with new appearance text. @param appearance new free text annotation appearance
2127 Updates the update state mask with a new style value. @param style new style string
2128 Updates line annotation update state mask with caption style. @param captionStyle new style for the caption
2129 Updates the update state mask with a new string value. @param state new text annotation state
2130 Updates the update state mask with a new STATE_MODEL key and optional value. @param stateModel underlying string value or null to trigger a different action
2131 Updates the update state mask with a new STATUS key and value. @param status new status string
2132 Updates the update state mask with a new TARGET key and optional string value. @param target unique identifier or string value
2133 Updates the update state mask with a new COSName key and optional string value. @param partial underlying string value or null to trigger a different action
2134 Updates the named page reference with a new COSName key. @param name unique identifier for the PDF object
2135 Updates the update state mask with a new COSName key and optional COSString value. @param name unique identifier for the PDF object
2136 Initializes the PDOptionalContentProperties object with default OCG settings.
2137 Updates JavaScript action string. @param sAction new JavaScript code to execute
2138 Updates the update state mask with a new F key and optional string value. @param f file path or null to trigger a different action
2139 Updates the update state mask with a new COSString value. @param d string value or null to trigger a different action
2140 Updates the update state mask with an O-specific value. @param o string value or null to trigger different action
2141 Updates the update state mask with a new P key and optional string value. @param p underlying string value or null to trigger a different action
2142 Updates URI action with new external resource. @param uri URL to navigate to
2143 Updates target directory's named destination with a new COSString value. @param filename underlying string value or null to trigger a different action
2144 Updates the update state mask with a new COSString value. @param name underlying string value
2145 Updates the update state mask with the given filename. @param file name of the file to be managed
2146 Updates directory mask with a new value. @param dir path to the directory
2147 Updates the update state mask with a new COSName key and optional string value. @param op operation type to be performed
2148 Updates the update state mask with a new COSName key and optional COSString value. @param param string parameter to be updated
2149 Updates annotation contents with a new string value. @param value underlying string value
2150 Updates annotation's update state mask with a new COSName key and optional string value. @param m underlying string value or null to trigger a different action
2151 Updates the update state mask with a new COSName key and optional COSString value. @param nm unique identifier for the PDF object
2152 Updates free text annotation's update state mask with new value. @param daValue new string value
2153 Updates free text annotation's appearance with a new default style string. @param defaultStyleString underlying string value for the default style
2154 Updates the update state mask with a new string value. @param t the underlying string value
2155 Updates the subject annotation with a new string value. @param subj new subject text
2156 Updates the update state mask with a new string value. @param state updated state to be stored
2157 Updates the update state mask with a new STATE_MODEL value. @param stateModel new string value or null to trigger different action
2158 Updates annotation appearance settings with new caption. @param caption visual representation of the annotation
2159 Updates annotation appearance settings with custom caption. @param caption new caption string
2160 Updates annotation appearance settings with a new caption. @param caption text to display in the annotation
2161 Updates the date property in the digital signature dictionary. @param date new date value
2162 Updates the URL attribute with a new value. @param url unique identifier of the PDF object
2163 Updates the timestamp URL in the COSDictionary. @param url unique identifier for the PDF object
2164 Updates the update state mask with a new COSName key and optional string value. @param name unique identifier for the PDF object
2165 Updates the update state mask with the specified location. @param location unique identifier for the PDF object
2166 Updates the update state mask with a new reason string. @param reason justification for updating the mask
2167 Updates the update state mask with contact info. @param contactInfo underlying string value or null to trigger a different action
2168 Updates the outline item's title. @param title new title string
2169 Updates dynamic appearance mask with new value. @param daValue updated string value
2170 Updates the update state mask with a new COSString value. @param value underlying string value
2171 Validates the field name against specific rules. @param name The field's identifier
2172 Updates the update state mask with an alternate field name. @param alternateFieldName new COSString value or null to trigger a different action
2173 Updates the update state mask with a new COSName key and optional mapping name. @param mappingName unique identifier for the PDF object
2174 Updates the update state mask with a new string value. @param value new string value or null to trigger a different action
2175 Updates text field formatting options. @param value new formatting string or null to reset
2176 Updates the update state mask with a new string value. @param value underlying string value
2177 Updates the update state mask with a new COSName key and optional COSString value. @param daValue underlying string value or null to trigger a different action
2178 Updates rectilinear measurement dictionary with specified scale ratio. @param scaleRatio new scale factor value
2179 Sets an integer value in the COSDictionary. @param key unique identifier for the PDF object @param value long integer value to be set
2180 Updates the update state mask with specified parent structure values. @param structParents long integer value in the range [LOW, HIGH] for STRUCT_PARENTS
2181 Updates the page's rotation. @param rotation new rotation value
2182 Validates and sets the page numbering start value. @param start positive integer value for starting page number
2183 Updates function update state mask with bits per sample value. @param bps bits per sample value
2184 Updates the marked content reference's mask with a specified MCID value. @param mcid Marker Context Identifier (MCID)
2185 Initializes the update state mask with a specified range of values. @param revisionNumber long integer value in the range [0, HIGH]
2186 Updates the parent tree next key with a specified value. @param parentTreeNextkey long integer value in the range [LOW, HIGH]
2187 Updates the update state mask with a specified range of values. @param length int value in the range [LOW, HIGH]
2188 Updates encryption settings mask with specified version. @param version long integer value in the range [LOW, HIGH]
2189 Updates the update state mask with a specified range of values. @param length integer value in the range [LOW, HIGH]
2190 Updates the update state mask with the specified revision. @param revision long integer value in the range [LOW, HIGH]
2191 Updates the update state mask with specified permission values. @param permissions long integer value in the range [LOW, HIGH]
2192 Updates annotation update state mask with page-specific values. @param page page identifier
2193 Updates the text justification based on the provided string. @param justification "centered" or "right" to set the quadding
2194 Updates the annotation's rotation mask with the specified value. @param rotation new rotation value in degrees
2195 Updates the update state mask with specified range values. @param ff long integer value in the range [LOW, HIGH]
2196 Updates field flags with specified mask value. @param ff integer bitmask to apply to field flags
2197 Updates the update state mask with a specified range of values. @param ff long integer value in the range [LOW, HIGH]
2198 Updates the update state mask with a specified range of values. @param f long integer value in the range [LOW, HIGH]
2199 Updates the update state mask with a specified range of values. @param ff integer value in the range [LOW, HIGH]
2200 Updates the update state mask with a specified range of values. @param ff integer value in the range [LOW, HIGH]
2201 Updates font descriptor flag state. @param flags integer value representing font attributes
2202 Calculates and stores the character width mask for a TrueType font. @param font COSDictionary representing the PDF object @param glyphList GlyphList instance containing font data
2203 Updates the pattern dictionary with the specified paint type. @param paintType integer value representing the paint type
2204 Updates the pattern dictionary with the specified pattern type. @param patternType integer identifier for the pattern type
2205 Updates the paint type with specified value. @param paintType new paint type value
2206 Updates the tiling type. @param tilingType new tiling pattern type
2207 Updates the update state mask with a specified shading type. @param shadingType unique identifier for the PDF object
2208 Updates the shading type mask with specified color component properties. @param bitsPerFlag number of bits per flag in the shading type
2209 Configures shading parameters based on the number of vertices per row. @param verticesPerRow number of vertices in each row
2210 Configures shading type based on color component mask. @param bitsPerComponent number of bits per color component
2211 Updates the bits per coordinate mask. @param bitsPerCoordinate number of bits to use for each coordinate
2212 Updates LC (Line Cap) mask with specified style. @param style line cap style value
2213 Updates the line join mode with a specified value. @param style int value representing the line join mode
2214 Updates the overprint mode using COSUpdateState's mechanism. @param overprintMode null for default or custom value
2215 Updates the update state mask with specified flags. @param flags integer value representing flags
2216 Updates action flags with user input. @param flags integer value representing user input
2217 Updates page navigation mask based on the provided page number. @param pageNumber zero-based index of the target page
2218 Updates update state mask based on index. @param index non-negative integer value
2219 Updates annotation mask with specified flags. @param flags integer value to update mask
2220 Updates the update state mask with the specified parent's range of values. @param structParent unique identifier for the PDF object
2221 Updates the update state mask with a specified range of values. @param q long integer value in the range [LOW, HIGH]
2222 Updates annotation appearance settings with specified rotation value. @param rotation new rotation value
2223 Updates the update state mask with a specified range of values. @param p integer value in the range [0, 3] representing the update state mask
2224 Updates timestamp requirement with specified flag value. @param flag boolean indicating whether to enable or disable timestamp requirement
2225 Updates the update state mask based on the current open count. @param openCount number of opened outline items
2226 Updates the update state mask with a specified value. @param q integer value in the range [LOW, HIGH]
2227 Updates field flags with specified values. @param flags long integer value in the range [LOW, HIGH]
2228 Updates the update state mask based on the provided top index. @param topIndex integer value specifying the top index for displayed items
2229 Updates MAX_LEN mask with specified maximum length. @param maxLen maximum allowed text length
2230 Updates the Q attribute with a specified range of values. @param q integer value in the range [LOW, HIGH]
2231 Updates the COSDictionary with a new integer key-value pair. @param key string representation of the PDF object identifier @param value underlying integer value in range [LOW, HIGH]
2232 Updates the update state mask with new revision information. @param revision current revision number
2233 Updates the update state mask with a new "Revision" key and integer value. @param revision underlying integer value in range [LOW, HIGH]
2234 Updates the COSDictionary with a floating-point value. @param key unique identifier for the PDF object @param value the float value to be represented
2235 Updates the user unit mask with a floating-point value. @param userUnit positive float value representing the user unit
2236 Updates guideline width in COSDictionary. @param width new width value
2237 Updates the annotation's opacity with a floating-point value. @param opacity float value between 0 and 1 representing transparency
2238 Updates the leading line's update state mask with a floating-point value. @param leaderLength length of the leading line
2239 Updates the leader extend mask with a floating-point value. @param leaderExtend float value to be represented
2240 Updates the leader offset of the annotation with a floating-point value. @param leaderOffset new leader offset value
2241 Updates font weight in PDF document. @param fontWeight numerical value of font weight
2242 Updates the italic angle of the PDF font descriptor. @param angle floating-point value representing the italic angle
2243 Updates the font's ascender height. @param ascent float value representing the ascender height
2244 Updates font descent with a floating-point value. @param descent font descent in points
2245 Updates the leading edge mask with the specified floating-point value. @param leading leading edge value to be represented
2246 Updates font descriptor with cap height value. @param capHeight cap height of the font in points
2247 Updates font descriptor with x-height value. @param xHeight float representing the height of lowercase 'x'
2248 Updates PDF font's stem vertical dimension. @param stemV new value for stem vertical dimension
2249 Updates the update state mask with the specified stem height. @param stemH stem height value
2250 Updates font descriptor with average character width. @param averageWidth float value representing average character width
2251 Updates maximum width of font descriptor. @param maxWidth new maximum width value
2252 Updates the missing width mask with a floating-point value. @param missingWidth the float value to be represented
2253 Updates X-step value in tiling pattern. @param xStep new float value for X-step
2254 Updates the tiling pattern with a floating-point Y-step value. @param yStep float value representing the vertical step size
2255 Configures the sound volume mask within the specified range. @param volume float value between -1.0 and 1.0
2256 Updates the line annotation's leader line length. @param leaderLineLength new leader line length value
2257 Updates line extension length with given lead-in value. @param leaderLineExtensionLength lead-in float value
2258 Updates line annotation's appearance stream with leader line offset length. @param leaderLineOffsetLength value to be represented in the PDF object
2259 Updates the update state mask with a floating-point value representing highlight color. @param ca the float value to be represented
2260 Updates the function mask dictionary with a float border width value. @param w new border width value
2261 Updates the update state mask with a float value representing the minimum required capability. @param minimumRequiredCapability the float value to be represented
2262 Updates the update state mask with a rectilinear measurement value. @param cyx float value representing the CYX coordinate system origin
2263 Validates the PDF stream length and updates the COSDictionary with correct offset. @param dic COSDictionary object to update @return initialized COSStream object or null if invalid
2264 Fetches and interprets tokens from the PDF content stream, adding them to a list. @throws IOException if an I/O error occurs during parsing
2265 Fetches the bounding box of a Type 3 font character from the PDF content stream. @throws IOException if an I/O error occurs during parsing
2266 Evaluates the operands for a mask operation and returns the first operand's value. @throws IOException if an I/O error occurs during parsing
2267 Initializes an empty PDDocument instance using a memory-only stream cache.
2268 Creates a PDFileSpecification instance from the given COSBase object. @param base the COSBase object to convert @return a PDFileSpecification instance or null if unknown
2269 Initializes an empty annotation instance with default subtype.
2270 Initializes an empty circular annotation instance with subtype "circle".
2271 Initializes an empty file attachment annotation instance.
2272 Initializes an empty free text annotation instance with subtype set to 'SUBTYPE'.
2273 Initializes an empty ink annotation instance with subtype.
2274 Initializes an empty line annotation instance with subtype.
2275 Initializes an empty annotation instance with subtype set to "SUBTYPE".
2276 Initializes an empty polygon annotation instance with subtype.
2277 Initializes an empty polyline annotation instance with subtype set to SUBTYPE.
2278 Initializes an empty sound annotation instance with default subtype.
2279 Initializes an empty square annotation with default subtype.
2280 Initializes an empty stamp annotation instance with subtype.
2281 Initializes an empty text annotation instance with default subtype.
2282 Initializes an empty text markup annotation instance.
2283 Updates the CID font's 'W' mask with glyph widths and heights. @param cidToGid map of CID to GID mappings @throws IOException if an I/O error occurs
2284 Initializes the CID font dictionary with glyph metrics. @param cidFont CID font dictionary to be updated
2285 Initializes an instance of the PDSimpleFont class.
2286 Updates update state mask with new decode values. @param decodeValues array of decode values
2287 Updates update state mask with new decode values from COSArray. @param decodeValues array of decode values
2288 Updates line width using the provided float value. @param width new line width
2289 Updates the miter limit in the extended graphics state. @param miterLimit new miter limit value
2290 Updates the update state mask using the FL key and provided flatness value. @param flatness float value to be represented or null for alternative action
2291 Updates the smoothness mask using the given float value. @param smoothness float value to be represented
2292 Sets the overprint mask using a given alpha value. @param alpha transparency factor (0.0 to 1.0)
2293 Updates the mask state using alpha constant and floating-point value. @param alpha float value to be represented or null for alternative action
2294 Initializes a new instance of the PDAnnotationLink class with default annotation type. @param SUB_TYPE default annotation subtype
2295 Initializes a new instance of the PDAnnotationMarkup class with default annotation properties.
2296 Initializes a new instance of the PDAnnotationPopup with default subtype. @param SUB_TYPE subtype value (e.g. "Popup")
2297 Initializes a new instance of the PDAnnotationWidget with default annotation type. @param SUB_TYPE type of annotation (e.g. 'Square', 'Highlight')
2298 Updates rectangle margin differences for the caret annotation. @param difference single margin adjustment value
2299 Updates rectangle differences with custom margins. @param difference Left offset (also used for top, right, and bottom)
2300 Sets rectangle differences with uniform value. @param difference single margin value
2301 Initializes a new instance of the PDCheckBox class with the given AcroForm. @param acroForm parent form object
2302 Initializes a new instance of the PDComboBox class with an AcroForm and sets the field type to choice. @param acroForm interactive form containing variable text fields
2303 Initializes a new instance of the PDListBox class with an AcroForm. @param acroForm interactive form containing variable text fields
2304 Initializes a PDRectangle instance from the provided COSArray. @param array COSArray containing rectangle data
2305 Initializes a new instance of the PDLineDashPattern class with a given dash pattern array and phase value. @param array COSArray containing dash lengths @param phase initial dash phase value, which may be adjusted according to PDF 2.0 specification
2306 Returns string representation of PDRange object. @return formatted string "PDRange{m1, m2}"
2307 Evaluates a PDF Function Type 4 by executing the instruction sequence and retrieving output values. @param input input values for function evaluation @return array of float output values
2308 Initializes range array for PDF stream filter mask. @param range PDRange object with color space properties @param n integer value representing filter mask size
2309 Processes patch data from input stream and populates control points and colors. @param input stream of input data @param isFree whether patch data is free or not @param implicitEdge initial edge coordinates @param implicitCornerColor initial corner color values @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range values @param rangeY Y-axis range values @param colRange color range values array @param matrix transformation matrix @param xform affine transform object @param controlPoints number of control points to process @return processed patch data or null if failed
2310 Fetches vertex data from image input stream. @param input input stream to read from @param maxSrcCoord maximum source coordinates @param maxSrcColor maximum source color value @param rangeX X-axis range object @param rangeY Y-axis range object @param colRangeTab array of color range objects @param matrix transformation matrix @param xform affine transform @return Vertex object with calculated position and color components
2311 Retrieves the first color value from the collection using FUNC_MASK. @return The first PDGamma object in the array
2312 Returns color at index 1 from the managed collection.
2313 Returns the color at index 2 from the managed array. @return PDGamma instance representing the color
2314 Retrieves the color at index 3 using getColourByIndex(int). @return PDGamma object representing the color at index 3
2315 Retrieves the blend mode as a BlendMode object. @return BlendMode object representing the blend mode or NORMAL if not found
2316 Retrieves the function mask as a PDDestination object. @return PDDestination object or null if not found
2317 Retrieves the function mask as a PDDestination object.
2318 Retrieves the function mask as a destination. @return PDDestination object representing the function mask
2319 Retrieves function mask destination as PDDestination object.
2320 Creates a Matrix instance from a COSArray with transformation parameters. @param base COSBase object containing the array @return Matrix object or empty matrix if invalid data is provided
2321 Retrieves a COSBase object by navigating through the dictionary structure based on the provided path. @param objPath string representation of the navigation path
2322 Retrieves the destination for the given name, returning a PDDestination object or null if not found. @param name unique identifier of the entity to retrieve
2323 Retrieves attribute value by name. @param attrName string representation of the attribute to retrieve
2324 Retrieves attribute value with default handling. @param attrName attribute name @param defaultValue default value to return when absent
2325 Checks if a standard attribute exists in the dictionary. @param name string representation of the entity to check
2326 Retrieves an array of COSNames from the dictionary by name. @param name string representation of the entity to retrieve
2327 Updates a standard attribute with an array of values. @param name the attribute's key @param values array of string representations for the attribute
2328 Retrieves the mask value associated with this standard attribute. @param name string representation of the entity to retrieve @param defaultValue default value to return if not found
2329 Updates a standard attribute with the given name and values. @param name unique identifier for the PDF object @param values array of string representations of values to update
2330 Retrieves the mask value associated with this attribute, or returns a default value if not found. @param name string representation of the entity to retrieve @param defaultValue default value to return when retrieval fails
2331 Retrieves a float array or single value based on the specified name and default value. @param name string representation of the entity to retrieve @param defaultValue default value to return if not found @return float array or single value, or null if undefined and default is zero
2332 Updates the specified attribute with a float value array. @param name attribute identifier @param values array of float values to be represented
2333 Retrieves a gamma value by name. @param name string representation of the entity to retrieve @return PDGamma object or null if not found
2334 Retrieves and parses the mask attribute from a COSArray. @param name string representation of the entity to retrieve @return PDGamma or PDFourColours object, or null if not found
2335 Retrieves the value associated with either of two provided keys in the context of a PDF document. @param firstKey primary key to search for @param secondKey secondary key to search if primary is not found @return COSDictionary object representing the retrieved dictionary or null if not found
2336 Retrieves a boolean value from the dictionary using either of two provided keys. If both keys are not found, returns the default value. @param firstKey primary key to search for @param secondKey secondary key to search if primary is not found @param defaultValue default boolean value to return if neither key is found @return true or false value from the dictionary, or default value
2337 Retrieves a numeric value from the dictionary using either of two keys. @param firstKey primary key to search for @param secondKey secondary key to search if primary is not found @param defaultValue default value to return if neither key is found @return int value associated with the retrieved key or default value
2338 Retrieves a list of filtered image masks based on the provided parameters. @return List of filtered image masks or empty list if not found
2339 Retrieves and returns the color space for the current shading. @return PDColorSpace object representing the retrieved color space or null if not found
2340 Retrieves function mask from the given COSDictionary. @param dictionary COSDictionary to search @return true if function mask is found, false otherwise
2341 Initializes a new instance of the PDPageTree class from a given COSDictionary root and PDDocument. @param root COSDictionary representing the page tree's root @param document PDDocument associated with the page tree
2342 Checks if a COSDictionary node represents the root of a page tree. @param node COSDictionary to check
2343 Retrieves function mask as a COSName object. @return COSName object representing function mask
2344 Retrieves the function mask as a COSName object. @return COSName object or IDENTITY if not found
2345 Retrieves the function mask as a COSName object. @return COSName object representing the function mask or IDENTITY if not found
2346 Retrieves Unicode string representation of a given character code. @param code the character code to convert
2347 Creates a PDXObject instance based on the given COSBase and resources, returning an image, form, or PostScript object depending on the subtype. @param base COSBase object @param resources PDResources object @return PDXObject instance or null if invalid subtype @throws IOException if unexpected object type or invalid subtype
2348 Retrieves function mask as a COSName object.
2349 Retrieves the function mask as a COSName object. @return COSName object representing the function mask
2350 Retrieves the function mask as a COSName object. @return COSName object representing the annotation's function mask
2351 Updates the function mask with a key-value pair. @param embedded COSName object representing the PDF object @param key unique identifier for the PDF object @param value underlying string value or null to trigger a different action
2352 Updates the function mask in an embedded dictionary with a specified range of values. @param embeddedDictionary embedded dictionary containing the update state @param key unique identifier for the PDF object @param value long integer value representing the start of the range
2353 Checks if document has encryption enabled. @return true if encryption is set, false otherwise
2354 Retrieves the document's function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2355 Retrieves the function mask as a COSDictionary object from the trailer. @throws IOException if root object specification is missing
2356 Fetches and processes PDF function mask from trailer. @throws IOException if root object specification is missing
2357 Retrieves the function mask as a PDDocumentInformation object. @return PDDocumentInformation object representing the function mask or null if not found
2358 Retrieves the function mask as a PDDocumentCatalog object. @return PDDocumentCatalog instance or null if not available
2359 Retrieves the AcroForm function mask as a COSDictionary object. @param acroFormFixup an instance of PDDocumentFixup containing fixes for AcroForm @return PDAcroForm object representing the function mask or null if not found
2360 Retrieves the function mask as a viewer preferences dictionary. @return PDViewerPreferences object or null if not found
2361 Retrieves the function mask as a PDDocumentCatalogAdditionalActions object. @return PDDocumentCatalogAdditionalActions object representing the function mask or null if not found
2362 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2363 Retrieves the name destination dictionary function mask. @return COSDictionary object representing the function mask or null if not found
2364 Retrieves function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2365 Retrieves the function mask as a URI dictionary. @return PDURIDictionary object representing the function mask or null if not found
2366 Retrieves function mask as a PDStructureTreeRoot object. @return PDStructureTreeRoot object or null if not found
2367 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2368 Initializes a PDDocumentNameDictionary instance from the given document catalog. @param cat PDDocumentCatalog object containing the document's metadata
2369 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the document's function mask or null if not found
2370 Retrieves the embedded files function mask as a PDEmbeddedFilesNameTreeNode. @return PDEmbeddedFilesNameTreeNode object or null if not found
2371 Retrieves function mask as a PDJavascriptNameTreeNode instance. @return PDJavascriptNameTreeNode object representing the function mask or null if not found
2372 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2373 Retrieves the function mask of the page as a PDTransition object. @return PDTransition object representing the function mask or null if not found
2374 Retrieves the function mask as a COSObject based on kind and name. @param kind unique identifier of the entity type @param name unique identifier of the entity to retrieve @return COSObject representing the function mask or null if not found
2375 Retrieves function mask as a COSBase object. @param kind type of the entity to retrieve @param name unique identifier of the entity @return COSBase representation of the function mask or null if not found
2376 Retrieves the function mask as a set of COSName objects. @param kind unique identifier of the entity to retrieve @return Set of COSName objects representing the function mask or an empty set if not found
2377 Retrieves the function mask as a COSDictionary object. @param kind type of function to retrieve @param prefix unique identifier prefix for the function @return COSName object representing the function mask or null if not found
2378 Updates the function mask for a given resource type. @param kind resource type identifier @param name unique identifier of the entity to update @param object underlying COSObjectable object or null
2379 Retrieves the function mask as a PDPage object. @return PDPage object representing the function mask or null if not found
2380 Retrieves the function mask as a PDPage object. @return PDPage object representing the function mask or null if not found
2381 Retrieves function mask as a PDPage object. @return PDPage object representing the function mask or null if not found
2382 Retrieves the function mask as a PDStructureElement instance. @return PDStructureElement object representing the function mask or null if not found
2383 Retrieves the function mask as a PDNumberTreeNode instance. @return PDNumberTreeNode object representing the function mask or null if not found
2384 Retrieves the function mask as a COSDictionary object. @return Map of function mask entries
2385 Retrieves the function mask for a specified encryption filter. @param cryptFilterName name of the encryption filter to retrieve @return PDCryptFilterDictionary object or null if not found
2386 Updates the cryptographic filter dictionary with a specified name and value. @param cryptFilterName unique identifier of the cryptographic filter @param cryptFilterDictionary PDCryptFilterDictionary object to update
2387 Retrieves the border style function mask as a PDBorderStyleDictionary object. @return PDBorderStyleDictionary object or null if not found
2388 Retrieves the border effect function mask as a PDBorderEffectDictionary object. @return PDBorderEffectDictionary object or null if not found
2389 Retrieves the function mask as a PDSignature object. @return PDSignature object or null if not found
2390 Retrieves the JavaScript function mask as an FDFJavaScript object. @return FDFJavaScript object or null if not found
2391 Retrieves the function mask as a PDAppearanceDictionary object. @return PDAppearanceDictionary object or null if not found
2392 Retrieves function mask as a Named Page Reference. @return FDFNamedPageReference object or null if not found
2393 Retrieves function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2394 Retrieves function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2395 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2396 Retrieves function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2397 Retrieves the CID system info as a PDCIDSystemInfo object. @return PDCIDSystemInfo instance or null if not found
2398 Retrieves the function mask as a PDPanose instance from the PDFontDescriptor. @return PDPanose object representing the function mask or null if not found
2399 Retrieves the function mask as a PDResources object. @return PDResources object representing the function mask or null if not found
2400 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2401 Retrieves the function mask as a map of PDSeparations. @param resources PDResources object to use for color space creation @return Map of String keys and corresponding PDSeparation values
2402 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2403 Retrieves the function mask as a RenderState object based on the provided destination. @param destination type of rendering destination (PRINT, VIEW, or EXPORT)
2404 Retrieves the function mask as a PDExtendedGraphicsState object. @return PDExtendedGraphicsState object representing the function mask or null if not found
2405 Retrieves function mask as a PDResources object. @return PDResources object or null if not found
2406 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2407 Retrieves Windows launch parameters as a PDWindowsLaunchParams object. @return PDWindowsLaunchParams object or null if not found
2408 Retrieves function mask as a PDTargetDirectory instance. @return PDTargetDirectory object representing the function mask or null if not found
2409 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2410 Retrieves the function mask as a PDPage object. @return PDPage object representing the function mask or null if not found
2411 Retrieves function mask as a PDBorderEffectDictionary object. @return PDBorderEffectDictionary instance or null if not found
2412 Retrieves the function mask border style dictionary. @return PDBorderStyleDictionary object or null if not found
2413 Retrieves function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2414 Retrieves function mask as a PDExternalDataDictionary object. @return PDExternalDataDictionary object or null if not found
2415 Retrieves the border style dictionary as a PDBorderStyleDictionary object. @return PDBorderStyleDictionary object or null if not found
2416 Retrieves the function mask as a PDBorderEffectDictionary object. @return PDBorderEffectDictionary object or null if not found
2417 Retrieves the function mask as a PDBorderEffectDictionary object. @return PDBorderEffectDictionary instance or null if not found
2418 Retrieves the function mask as a PDAppearanceCharacteristicsDictionary object. @return dictionary representing the function mask or null if not found
2419 Retrieves additional annotation actions as a PDAnnotationAdditionalActions object. @return PDAnnotationAdditionalActions object or null if not found
2420 Retrieves the function mask as a PDBorderStyleDictionary object. @return PDBorderStyleDictionary object representing the function mask or null if not found
2421 Retrieves the function mask as a PDAppearanceEntry object. @return PDAppearanceEntry object representing the function mask or null if not found
2422 Retrieves the function mask as a PDPropBuildDataDict object. @return PDPropBuildDataDict representing the function mask or null if not found
2423 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2424 Retrieves the function mask as a PDPropBuildDataDict object. @return PDPropBuildDataDict object representing the function mask or null if not found
2425 Retrieves the function mask as a PDSeedValueMDP object. @return PDSeedValueMDP object or null if not found
2426 Retrieves function mask as a PDSeedValueCertificate instance. @return PDSeedValueCertificate object or null if not found
2427 Retrieves the function mask as a PDSeedValueTimeStamp object. @return PDSeedValueTimeStamp object or null if not found
2428 Retrieves the function mask as a PDPropBuild object. @return PDPropBuild object representing the function mask or null if not found
2429 Retrieves the function mask as a PDStructureElement. @return PDStructureElement object or null if not found
2430 Checks if the first child outline item is present. @return true if the first child exists, false otherwise
2431 Retrieves the function mask as a PDResources object. @return PDResources instance or null if not found
2432 Retrieves additional actions from the function mask. @return PDFormFieldAdditionalActions object or null if not found
2433 Retrieves the function mask as a PDSignature object. @return PDSignature object representing the function mask or null if not found
2434 Retrieves function mask as a PDSignature object. @return PDSignature object or null if not found
2435 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2436 Retrieves the function mask as a PDMeasureDictionary object. @return PDMeasureDictionary object representing the function mask or null if not found
2437 Retrieves the function mask as a PDDocumentInformation object. @return PDDocumentInformation object or null if not found
2438 Retrieves the function mask as a PDThreadBead object. @return PDThreadBead representing the function mask or null if not found
2439 Retrieves function mask as a PDThread object. @return PDThread object representing the function mask or null if not found
2440 Retrieves the function mask bead from the thread. @return PDThreadBead object representing the function mask or null if not found
2441 Retrieves the function mask bead. @return PDThreadBead object representing the function mask or null if not found
2442 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2443 Retrieves document function mask as a COSStream object. @return COSStream object representing the function mask or null if not found
2444 Retrieves function mask as a PDMetadata object. @return PDMetadata object representing the function mask or null if not found
2445 Retrieves function mask as a COSStream object. @return COSStream object representing the function mask or null if not found
2446 Retrieves the function mask as a COSStream object. @return COSStream object representing the function mask or null if not found
2447 Retrieves the function mask as a PDStream object. @return PDStream object representing the function mask or null if not found
2448 Retrieves the function mask as a PDStream object. @return PDStream object representing the function mask or null if not found
2449 Retrieves the function mask as a PDF stream object. @return COSStream object representing the function mask or null if not found
2450 Retrieves the sound function mask as a COSStream object.
2451 Retrieves function mask as a PDXObject instance. @return PDFormXObject object representing the function mask or null if not found
2452 Retrieves function mask as a PDFormXObject. @return PDFormXObject object representing the function mask or null if not found
2453 Retrieves function mask as a PDXObject instance. @return PDFormXObject object representing the function mask or null if not found
2454 Retrieves the function mask as a Map of COSName to PDAppearanceStream objects. @return A Map where keys are COSName objects and values are PDAppearanceStream objects
2455 Retrieves the document's function mask as a COSArray object. @return Function mask or null if not available
2456 Updates the document's trailer dictionary with mask information. @param doc COSDocument instance
2457 Retrieves the function mask as a list of PDThreads. @return List<PDThread> object representing the function mask or null if not found
2458 Retrieves the output intent function mask as a list of PDOutputIntent objects. @return List<PDOutputIntent> representing the output intent function mask or empty list if not found
2459 Updates the FUNC_MASK dictionary with a new output intent. @param outputIntent PDOutputIntent object representing the new output intent
2460 Retrieves the function mask as a list of PDThreadBead objects. @return List<PDThreadBead> representing the function mask or empty list if not found
2461 Retrieves the viewport dictionaries for the current page. @return List of PDViewportDictionary objects or null if not found
2462 Retrieves the function mask as a list of COSDictionary objects. @param node parent COSDictionary object @return List of COSDictionary objects representing the function mask or empty list if not found
2463 Retrieves function mask as a list of PDNameTreeNode objects. @return List<PDNameTreeNode<T>> containing the function mask or null if not found
2464 Retrieves the function mask as a COSArray object. @return Map of string keys and values of type T, or null if not found
2465 Retrieves the function mask as a string. @return String representation of the function mask or null if not found
2466 Updates the function mask with a new upper limit value. @param upper new upper limit string
2467 Retrieves the function mask as a string from the named structure. @return Function mask value or null if not found
2468 Updates the function mask with a new string value. @param lower input string to be encoded or null for removal
2469 Retrieves a list of PDNumberTreeNode instances representing the function mask. @return List<PDNumberTreeNode> containing the function mask or null if not found
2470 Retrieves the function mask as a map of COSObjectables keyed by integers. @return Map<Integer, COSObjectable> representing the function mask or null if not found
2471 Retrieves the function mask as an Integer value. @return Integer representing the function mask or null if not found
2472 Updates the function mask with a new upper limit. @param upper the new upper limit value or null to reset
2473 Retrieves the function mask as a numeric value. @return Integer representing the function mask or null if not found
2474 Updates the function mask with a new lower limit. @param lower optional new lower limit value
2475 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2476 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask
2477 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2478 Retrieves the function mask as a COSArray object.
2479 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2480 Retrieves the function mask as a COSArray object.
2481 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2482 Retrieves the function mask as a list of PDUserProperty objects. @return List of user properties associated with the function mask or empty list if not found
2483 Updates the function mask of a PDUserProperty. @param userProperty property to modify
2484 Retrieves the function mask as a COSArray object for the given user property. @param userProperty PDUserProperty object associated with the document
2485 Retrieves the function mask as a PDColor object. @return PDColor instance representing the function mask or null if not found
2486 Checks if the edge of the marked content artifact is attached. @param edge edge to check @return true if attached, false otherwise
2487 Retrieves the function mask as a Color object. @return Color object representing the function mask or null if not found
2488 Retrieves the function mask as a color value. @return Color object representing the function mask or null if not found
2489 Retrieves the function mask as a float array. @return float array with extracted values or null if not found
2490 Fetches function mask as a list of float arrays. @return List of float arrays representing the function mask or null if not found
2491 Retrieves the function mask as a float array from the line annotation. @return float array with extracted values or null if not found
2492 Updates the line annotation's function mask with specified style. @param style string representation of the style to apply
2493 Retrieves line annotation function mask as a string. @return Function mask value or default LE_NONE if not found
2494 Updates the line annotation's function mask with a new style. @param style the desired line style (null for none)
2495 Retrieves the function mask as a string value. @return Function mask string or default "LE_NONE" if not found
2496 Retrieves the function mask color as a Color object. @return Color object representing the function mask color or null if not found
2497 Updates the function mask with a new offset value. @param offset new offset to be represented
2498 Retrieves the function mask value from the annotation. @return Function mask value as a float or 0 if not found
2499 Updates the function mask with a new offset value. @param offset the new offset to be represented
2500 Retrieves the function mask value from the annotation.
2501 Retrieves function mask as a float array from polygon annotation. @return float array with extracted values or null if not found
2502 Retrieves the interior color of the polygon annotation as a Color object. @return Color object representing the interior color or null if not found
2503 Retrieves polyline annotation function mask as a float array. @return float array representing the function mask or null if not found
2504 Updates the function mask with a new line style. @param style the desired line style (e.g. "solid", "dashed") or null to reset
2505 Retrieves the function mask as a string from the polyline annotation. @return string representation of the function mask or LE_NONE if not found
2506 Updates the function mask with a new line style. @param style string representation of the desired line style
2507 Retrieves polyline annotation function mask. @return String representation of function mask or default value if not found
2508 Returns the function mask color. @return Color object representing the function mask or null if not found
2509 Retrieves the function mask as a color from the annotation. @return Color object or null if not found
2510 Retrieves the function mask as a float array. @return float array representing the function mask or null if not found
2511 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2512 Retrieves the function mask as a list of FDFFields. @return List<FDFField> containing fields in the FDF document
2513 Retrieves the function mask as a list of FDFPages. @return List<FDFPage> object representing the function mask or null if not found
2514 Retrieves the function mask as a list of FDFFields. @return List<FDFField> representing the function mask or null if not found
2515 Retrieves the function mask as a list of objects. @return List<Object> object or null if not found
2516 Retrieves the function mask as a list of FDFTemplates. @return List<FDFTemplate> object or null if not found
2517 Retrieves the function mask as a list of FDFFields. @return List<FDFField> or null if not found
2518 Retrieves the function mask as a list of Float values. @return List of Float values representing the function mask or null if not initialized
2519 Retrieves the function mask as a PDTristimulus object.
2520 Retrieves the function mask as a PDTristimulus object. @return PDTristimulus object representing the function mask or null if not found
2521 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2522 Retrieves the function mask as a float array. @return float array representing the function mask or default values if not found
2523 Retrieves the function mask as a list of component names. @return List of String representing the function mask or empty list if not found
2524 Retrieves the function mask as a PDRange object. @return PDRange object representing the function mask or null if not found
2525 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2526 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2527 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2528 Retrieves the function mask as a COSArray object.
2529 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2530 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2531 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2532 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2533 Retrieves the function mask as a COSArray object. @return COSArray representing the function mask or null if not found
2534 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2535 Retrieves the annotation's function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2536 Retrieves function mask as a float array from annotation's margin. @return float array representing the function mask or empty array if not found
2537 Retrieves function mask as a float array. @return float array representing the function mask or empty if not found
2538 Retrieves the function mask as a float array. @return float array representing the function mask or null if not found
2539 Retrieves the function mask as a 2D array of floats. @return 2D float array representing the function mask or empty array if not found
2540 Retrieves function mask as a float array. @return float array representing the function mask or null if not found
2541 Sets the function mask for this annotation line based on the provided style. @param style desired line style or null to reset to default
2542 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or LE_NONE if not found
2543 Sets the line style function mask. @param style string representation of the desired style
2544 Retrieves the function mask as a string based on line annotation properties. @return string representation of the function mask or default value if not found
2545 Updates the function mask with a new offset value. @param offset floating-point value representing the updated offset
2546 Retrieves the function mask value. @return function mask value or 0.0 if not found
2547 Updates the function mask with a given offset value. @param offset floating-point offset to be represented
2548 Retrieves the function mask value from the annotation line's properties. @return The function mask value as a float or 0 if not found
2549 Retrieves the function mask as a float array. @return float array representing the function mask or null if not found
2550 Retrieves the function mask as a float array. @return float array with extracted values or null if not found
2551 Retrieves the function mask as a 2D array of floats. @return 2D float array representing the function mask or null if not found
2552 Updates the function mask with a specified style. @param style line style (e.g. "solid", "dashed") or null to reset
2553 Retrieves the function mask as a string, considering the polyline's appearance. @return Function mask or default value if not found
2554 Updates the function mask for polyline annotation. @param style line style (null to reset)
2555 Retrieves the function mask as a string. @return Function mask value or default if not found
2556 Retrieves the function mask as a float array from the polyline's vertex coordinates. @return float array representing the function mask or null if not found
2557 Retrieves the function mask as a float array. @return float array representing the function mask or empty if not found
2558 Retrieves quad points as a float array. @return Float array representing the function mask or null if not found
2559 Updates the function mask in the dictionary based on the operating system. @param os the name of the OS (null to use default OS)
2560 Retrieves the list of function masks associated with this seed value. @return List of function masks or empty list if none found
2561 Retrieves the function mask as a list of strings. @return List of strings representing the function mask or empty list if not found
2562 Retrieves the function mask as a list of strings. @return List of masked strings or empty list if none found
2563 Retrieves the function mask as a list of strings. @return List of masked entity names or empty list if none found
2564 Retrieves function mask from PDF document. @return list of byte arrays representing the function mask or null if not found
2565 Updates the subject function mask with a new byte array value. @param subject unique identifier for the PDF object
2566 Updates the function mask with a new subject value. @param subject byte representation of the subject
2567 Retrieves the function mask as a list of strings. @return List of extension names or null if not found
2568 Validates and sets the key usage extension in the PDF document's dictionary. @param keyUsageExtension string representing the allowed characters (0, 1, X)
2569 Sets the key usage extension of a digital signature certificate. @param keyUsageExtension string value for the key usage extension
2570 Retrieves function mask as a list of byte arrays from issuer's COSDictionary. @return List<byte[]> representing the function mask or null if not found
2571 Updates the issuer's function mask with a new byte array value. @param issuer unique identifier of the entity to update
2572 Sets the function mask for a digital certificate issuer. @param issuer byte array representing the issuer's identity
2573 Retrieves the function mask as a list of byte arrays from the OID dictionary. @return List of byte arrays representing the function mask or null if not found
2574 Updates the OID function mask with a new value. @param oid byte array representing the OID to update
2575 Updates OID function mask with given byte array. @param oid unique identifier bytes
2576 Retrieves the function mask as an array of integers. @return int[] function mask or empty array if not found
2577 Retrieves the function mask as a PDColor object. @return PDColor instance representing the function mask or null if not found
2578 Fetches form field masks from the dictionary and returns a list of matching PDField objects. @return List of PDField objects representing the form field masks, or an empty list if not found
2579 Retrieves the function mask as a list of integers. @return List<Integer> containing extracted integer values or null if not found
2580 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return array of PDNumberFormatDictionary objects or null if not found
2581 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return Array of PDNumberFormatDictionary objects or null if not found
2582 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return Array of PDNumberFormatDictionary objects or null if not found
2583 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return Array of PDNumberFormatDictionary objects or null if not found
2584 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return array of PDNumberFormatDictionary objects or null if not found
2585 Retrieves the function mask as an array of PDNumberFormatDictionary objects. @return array of PDNumberFormatDictionaries or null if not found
2586 Retrieves the function mask as a float array. @return float array with extracted values or null if not found
2587 Retrieves function mask as a COSName object. @return COSName object representing the function mask
2588 Retrieves string value associated with given COSName instance. @param key unique identifier of the entity
2589 Retrieves value associated with COSName instance; returns default value if not found. @param key unique identifier of the entity @param defaultValue Value to return when key is not present
2590 Checks if an XRef table exists at the specified offset. @param startXRefOffset starting offset of the cross-reference table
2591 Retrieves the page mode from the catalog dictionary. @return PageMode instance or USE_NONE if not found
2592 Retrieves the page layout based on the function mask associated with the document. @return the corresponding PageLayout instance or SINGLE_PAGE as default
2593 Retrieves the function mask associated with the document version. @return function mask as a string
2594 Retrieves function mask associated with the document. @return Function mask string or null if not found
2595 Retrieves the function mask associated with the page label style. @return function mask string or null if not found
2596 Retrieves function mask associated with COSName TYPE. @return function mask as string or null if not found
2597 Creates a PDAttributeObject instance based on the owner information in the given COSDictionary. @param dictionary COSDictionary containing attribute data and owner information
2598 Retrieves function mask associated with COSName instance O. @param none
2599 Retrieves the function mask associated with the given COSName instance.
2600 Creates a PDStructureNode instance based on the given COSDictionary's type. @param node COSDictionary containing the structure node's information @return PDStructureNode object representing the created structure node
2601 Retrieves function mask as string using COS dictionary. @return string representation of function mask
2602 Retrieves the function mask associated with the given COSName instance. @return String representation of the function mask
2603 Retrieves function mask properties as a string. @return Function mask value or null if not found
2604 Retrieves function mask associated with COSName TYPE. @param key unused parameter (always COSName TYPE)
2605 Retrieves function mask subtype. @return Function mask subtype string
2606 Retrieves function mask associated with the FILTER entity. @return function mask as a string
2607 Retrieves the function mask associated with the SUB_FILTER entity. @return the function mask as a string
2608 Creates an FDFAnnotation object based on the subtype of the provided COSDictionary. @param fdfDic COSDictionary containing annotation data @return FDFAnnotation object or null if unsupported type
2609 Retrieves the function mask associated with the given annotation.
2610 Retrieves the function mask associated with the COSName instance 'LE'.
2611 Retrieves the function mask associated with the FDF catalog. @return function mask as a string
2612 Retrieves the function mask associated with the FDF document. @return the encoding scheme used in the FDF document
2613 Retrieves the function mask for icons in FDF format. @return function mask as string or default value on failure
2614 Retrieves the function mask for scaling icons, defaulting to proportional scaling. @return String representation of the function mask or "SCALE_TYPE_PROPORTIONAL" if not found
2615 Retrieves function mask associated with base font. @return Function mask as string
2616 Retrieves function mask associated with COSName.TYPE. @param none
2617 Retrieves font function mask from dictionary. @return function mask value
2618 Retrieves font function mask from dictionary using FONT_NAME key. @return string representation of font function mask
2619 Retrieves font stretch function mask. @return unique identifier of the entity
2620 Retrieves the function mask associated with the base font. @return function mask as string
2621 Retrieves the function mask associated with the base font. @return function mask as string
2622 Retrieves the function mask associated with the base font. @return function mask string or null if not found
2623 Retrieves the function mask associated with the BASE_FONT entity. @return function mask as a string
2624 Retrieves function mask associated with NChannel subtype. @return true if found, false otherwise
2625 Retrieves the function mask associated with the action type. @return Function mask string
2626 Retrieves the function mask associated with the given COSName instance. @param key unique identifier of the entity
2627 Returns a PDAction object based on the given COSDictionary action details. @param action COSDictionary containing interactive action details @return PDAction object or null if not found
2628 Retrieves annotation function mask. @return COSDictionary object containing mask attributes
2629 Retrieves function mask associated with CP COSName instance. @return Function mask string
2630 Retrieves function mask for IT annotation. @return function mask string
2631 Retrieves function mask subtype from COSDictionary instance.
2632 Retrieves the function mask associated with the given COSName instance. @return function mask as a string
2633 Retrieves the function mask associated with the filter.
2634 Retrieves the URL type function mask from the COSDictionary. @return unique identifier of the URL type
2635 Retrieves filter function mask from underlying COSDictionary. @return function mask value
2636 Retrieves the function mask associated with the SUB_FILTER entity. @return String representation of the function mask or null if not found
2637 Retrieves function mask by executing nested operations and invoking COSName instance. @return Function mask string
2638 Retrieves the function mask associated with the viewport settings.
2639 Retrieves function mask associated with duplex printing. @return String representing function mask
2640 Retrieves string value associated with given COSName instance. @param key unique identifier of the entity to retrieve
2641 Returns string value associated with the given key or default value. @param key unique identifier of the entity to retrieve @param defaultValue fallback string value if not found
2642 Retrieves the language mask from the catalog dictionary. @return string value of the 'Lang' key or null if not found
2643 Retrieves the title value from PDF document metadata.
2644 Retrieves author metadata from PDF document information. @return string value associated with COSName.AUTHOR key
2645 Retrieves document subject metadata. @return string value of the subject or null if not found
2646 Retrieves the keywords associated with the PDF document. @return string value of KEYWORDS metadata or null if not found
2647 Retrieves creator metadata from PDF document. @return string value associated with COSName.CREATOR
2648 Retrieves the producer metadata from the PDF document. @return string value of the producer attribute
2649 Retrieves prefix string from PDF page label configuration. @return Prefix value or null if not found
2650 Retrieves the mask string associated with UF (User File) key. @return The string value or null if not found
2651 Retrieves the file specification mask value. @return string representation of the file specification mask
2652 Retrieves the DOS file specification mask value. @return string representation of the DOS file specification mask
2653 Retrieves the mask value from the file system. @return string representation of the mask value
2654 Retrieves UNIX file specification mask value. @return string representation of UNIX file mask
2655 Retrieves the file specification mask value associated with the DESC key. @return string representation of the mask value
2656 Retrieves entity ID as string. @return Entity identifier or empty string if not found
2657 Retrieves the string value associated with the logical structure title. @return string representation of the title or null if not found
2658 Retrieves the language mask from the document structure. @return Language string or null if not found
2659 Retrieves the string value associated with the ALT key. @return The string value or null if not found
2660 Retrieves entity string value associated with COSName.E. @param COSName unique identifier of the entity to retrieve
2661 Retrieves the actual text value from the logical structure.
2662 Retrieves the string value associated with the 'F' key. @param none @return the masked value as a string or null if not found
2663 Retrieves actual text function mask properties. @return string value associated with ACTUAL_TEXT key or null if not found
2664 Retrieves function mask string from m1 object. @return Function mask string or null if not found
2665 Retrieves function mask string from COS dictionary. @return Function mask string or null if not found
2666 Retrieves the string value associated with key "M" from the annotation dictionary. @return The string value or null if not found
2667 Retrieves annotation mask value using NM key.
2668 Retrieves annotation content value. @return string representation of annotation contents or null if not found
2669 Retrieves the string value associated with key T from annotation properties. @return The retrieved string or null if not found
2670 Retrieves the subject annotation value. @return string representation of the subject annotation
2671 Retrieves the string value associated with SY key. @return annotation symbol as string
2672 Retrieves rotation mask value from annotation. @return string representation of rotation mask or null if not found
2673 Retrieves the string value associated with 'DA' key from annotation properties. @return string value or null if not found
2674 Retrieves the string value associated with the 'DS' key from the annotation. @return string representation of the 'DS' entity
2675 Retrieves line annotation caption using Forms Data Format (FDF) key. @return caption string or null if not found
2676 Retrieves the state mask associated with the annotation. @return state mask value as a string
2677 Retrieves the string value associated with the STATE_MODEL key. @return the state model string or null if not found
2678 Retrieves status string from FDF document. @return Status value associated with COSName.STATUS key
2679 Retrieves the target entity's string value from FDF dictionary. @return string representation of the target entity
2680 Retrieves the mask value from the field's m1 attribute. @return The mask string associated with COSName.T
2681 Retrieves the string value associated with the NAME key from the COSName object. @return The retrieved string value or null if not found
2682 Retrieves font family name from PDF document. @return Font family string or null if not found
2683 Retrieves the character set mask from the dictionary. @return string representation of the character set mask
2684 Retrieves the string value associated with the 'NAME' key from the dictionary. @param COSName.NAME constant representing the key to retrieve
2685 Retrieves an array of function masks from the optional content dictionary. @return array of string values representing function masks or empty array if not found
2686 Retrieves mask string from launch action configuration. @return Mask value associated with key 'F'
2687 Retrieves launch mask value from m1 parameter. @return String representation of launch mask
2688 Retrieves launch mask string value from action parameters. @param COSName.O OS-specific launch parameter
2689 Retrieves launch mask value from configuration. @return string representation of the launch mask
2690 Retrieves the function mask as a string. @return String representation of the function mask or null if not found
2691 Retrieves mask value from dictionary using named destination key. @param COSName.N named destination key
2692 Retrieves the string value associated with key A from dictionary m1. @return The retrieved string value or null if not found
2693 Retrieves the mask value using COSDictionary parameter 'F'. @return string representation of the mask value
2694 Retrieves the string value associated with COSName.D. @param params PDWindowsLaunchParams instance
2695 Retrieves the value associated with key P from COSDictionary. @return string value or null if not found
2696 Retrieves annotation content string from COSDictionary. @return contents string or null if not found
2697 Retrieves annotation mask settings. @return COSDictionary object containing mask attributes
2698 Retrieves annotation mask string using appearance settings. @return string representation of mask attributes
2699 Retrieves and formats DA annotation value. @return string representation of DA annotation
2700 Retrieves the string value associated with DS key from annotation properties. @return string value or null if not found
2701 Retrieves the string value associated with the markup annotation's title. @return The title string or null if not found
2702 Retrieves subject annotation value. @return string representation of subject
2703 Retrieves the state string representation. @return state string value
2704 Retrieves state model string value. @return string representation of state model
2705 Retrieves the icon string associated with the annotation's appearance characteristics. @return icon string or null if not found
2706 Retrieves the string value associated with the 'mask' key. @return string representation of annotation mask
2707 Retrieves dictionary key representing annotation mask. @return string identifier of annotation appearance setting
2708 Retrieves the date mask value from the properties dictionary.
2709 Retrieves the function mask as a string value from the properties dictionary. @return string representation of the function mask or default value if not found
2710 Retrieves the function mask as a list of maps. @return List of maps representing the function mask or null if not found
2711 Retrieves URL value from COSDictionary structure. @return string representation of URL
2712 Retrieves timestamp URL value from COSDictionary. @return URL string or null if not found
2713 Retrieves the mask value from the dictionary's 'NAME' key. @return the string representation of the mask value
2714 Retrieves the location value from the digital signature's COSDictionary. @return string representation of location
2715 Retrieves the reason value from the COSDictionary. @param none
2716 Retrieves contact information from COSDictionary structure. @return string representation of contact info or null if not found
2717 Retrieves the title value associated with this outline item. @return string representation of the title
2718 Retrieves the value associated with COSName.T. @return string representation of m1 attribute
2719 Retrieves the TU field value from the AcroForm structure. @return string representation of the TU field
2720 Retrieves the field's mask value from its dictionary. @return String representation of the mask value
2721 Retrieves the mask string value associated with COSName.DS. @return mask string or null if not found
2722 Retrieves rectilinear measurement mask value. @return string representation of the measurement mask
2723 Retrieves COSName instance associated with given name. @param key string representation of the name
2724 Returns a Calendar instance associated with the given COSName key, or uses the default value if not found. @param key unique identifier of the entity to retrieve @param defaultValue fallback Calendar instance
2725 Retrieves creation date of PDF document. @return Parsed Calendar instance or null if not found
2726 Retrieves document modification date as a Calendar object.
2727 Retrieves function mask as a Calendar object. @return Parsed Calendar instance or null if not found
2728 Retrieves creation date as a Calendar object from annotation metadata. @return Parsed Calendar instance or null if not found
2729 Retrieves function mask from COSDictionary structure. @return Parsed Calendar instance or null if not found
2730 Retrieves the function mask as a long value from COSDictionary. @param key string representation of the name to retrieve @return long value representing the function mask or -1L if not found
2731 Retrieves function mask as a long value. @param key unique identifier of the entity to retrieve
2732 Retrieves value associated with the given COSName instance as a long. @param cosName COSName instance to retrieve @param defaultValue default value to return if not found @return long value or defaultValue if not found
2733 Applies a series of filters to encoded data using specified filter list, parameters, and options. @param encoded input stream with encoded data @param filterList collection of filters to apply @param parameters COSDictionary containing decoding parameters @param options DecodeOptions object @param results optional list of DecodeResult objects @return RandomAccessRead buffer representing filtered data
2734 Resolves the XRef trailer based on the given startxref byte position value. @param startxrefBytePosValue unique identifier of the entity to retrieve
2735 Retrieves a COSName instance associated with the given name and uses it to fetch an unknown value. @param key unique identifier of the entity to retrieve
2736 Retrieves function mask as a floating-point value. @param key unique identifier of the entity to retrieve
2737 Retrieves a COSName instance associated with the given name and uses it to retrieve a float value. @param key unique identifier of the entity to retrieve @param defaultValue fallback value if not found or invalid
2738 Retrieves the function mask as a floating-point value. @return float representing the function mask, or default value (1.0f) if not applicable
2739 Retrieves the function mask as a floating-point value from the COSDictionary. @return float representing the function mask
2740 Retrieves annotation's function mask. @return float representing the function mask
2741 Retrieves the font weight function mask. @return float representing the font weight function mask
2742 Retrieves the italic angle function mask. @return float representing the italic angle function mask
2743 Retrieves font mask as a floating-point value. @return float representing the function mask
2744 Retrieves the font descriptor's function mask. @return float representing the function mask
2745 Retrieves function mask as a floating-point value. @return float representing the function mask
2746 Retrieves the function mask as a floating-point value. @return float representing the function mask
2747 Retrieves the function mask as a floating-point value. @return float representing the function mask
2748 Retrieves function mask as a floating-point value from font descriptor. @return float representing the function mask
2749 Retrieves font descriptor's function mask. @return function mask as a floating-point value
2750 Retrieves font descriptor's function mask. @return float representing the function mask
2751 Retrieves function mask as a floating-point value. @return float representing the function mask
2752 Retrieves the font function mask as a floating-point value. @return float representing the font function mask
2753 Retrieves function mask as a floating-point value from dictionary. @return float representing function mask
2754 Retrieves function mask as a floating-point value. @return float representing the function mask
2755 Retrieves function mask as a floating-point value. @return float representing the function mask
2756 Retrieves and normalizes the sound action's volume. @return Volume value in range [-1, 1] or 1 if invalid
2757 Retrieves line annotation's function mask. @return function mask as a floating-point value
2758 Retrieves line annotation's function mask. @return float representing the function mask
2759 Retrieves the function mask as a floating-point value from associated entity. @return float representing the function mask
2760 Retrieves function mask as a floating-point value. @return float representing the function mask
2761 Retrieves the function mask as a floating-point value. @return float representing the function mask, or default value if not applicable
2762 Retrieves the function mask as a floating-point value. @return float representing the function mask
2763 Retrieves function mask as a floating-point value. @return float representing the function mask
2764 Applies mask functionality based on Operator instance. @param op Operator containing mask operation parameters
2765 Processes page function mask and extracts text from specified regions. @param page PDPage object to process
2766 Retrieves the function mask as a COSDictionary object. @return Map containing the function mask or null if not found
2767 Updates the function mask with a given COSObjectable instance. @param objectable the COSObjectable to process
2768 Updates the function mask with a new child node and reference node. @param newKid new COSBase object to include @param refKid reference COSBase object (can be null)
2769 Evaluates the function mask based on a given COSObjectable. @param objectable COSObjectable instance to evaluate @return true if the object is valid, false otherwise
2770 Updates function mask with new COSBase object. @param value new COSBase object for the function mask
2771 Retrieves the function mask as a PDColorSpace instance from the resource dictionary. @return PDColorSpace object representing the function mask or null if not found
2772 Creates a PDPropertyList instance based on the given COSDictionary, determining its type and returning the corresponding subclass. @param dict COSDictionary object representing property list
2773 Retrieves the function mask as a Float value. @return Float representation of the function mask or null if not found
2774 Retrieves function mask as a Float value from COSDictionary. @return Float value representing the function mask or null if not found
2775 Retrieves function mask value from COSDictionary. @return Float representation of function mask or null if not found
2776 Retrieves function mask as a Float value from COSDictionary. @return Float value representing the function mask or null if not found
2777 Retrieves the function mask as a Float value from the COSDictionary. @return Float value representing the function mask or null if not found
2778 Retrieves the function mask as a Float value from the COSDictionary. @return Float value representing the function mask or null if not found
2779 Initializes a new instance of the PDAnnotationLink class from a COSDictionary. @param field dictionary containing annotation properties
2780 Initializes a new instance of the PDAnnotationMarkup class from a COSDictionary. @param dict dictionary containing annotation properties
2781 Initializes a new instance of the PDAnnotationPopup class from a COSDictionary. @param field dictionary containing annotation properties
2782 Initializes a new instance of PDAnnotationUnknown from a COSDictionary. @param dic dictionary containing annotation properties
2783 Initializes a new instance of the PDAnnotationWidget class from a COSDictionary. @param field dictionary containing annotation properties
2784 Retrieves function mask as a list of strings. @return List of strings representing the function mask
2785 Retrieves function mask as a list of strings. @return List of string values representing the function mask
2786 Retrieves function mask as a list of strings. @return list of strings representing the function mask
2787 Processes a COSBase object by writing related objects and updating the current object key. @param obj target COSBase object
2788 Writes the function mask of a given COSBase object to the specified output stream. @param output target output stream @param object COSBase object containing function mask data @param topLevel true if writing at top level, false otherwise
2789 Draws two cloud-like shapes with specified parameters and adds points to the output list. @param anglePrev initial angle in radians @param angleCur final angle in radians @param radius shape radius @param cx central X-coordinate @param cy central Y-coordinate @param alpha intensity parameter (m1) @param alphaPrev previous intensity parameter (m1) @param addMoveTo whether to add a move-to instruction at the start
2790 Calculates and sets parameters for a cloud-like shape within the given bounds. @param left left boundary @param bottom bottom boundary @param right right boundary @param top top boundary
2791 Initializes an empty PDF page fit destination with default configuration. @param none
2792 Configures the page fitting destination based on bounding box consideration. @param fitBoundingBox true to consider bounding box, false otherwise
2793 Initializes a new instance of PDPageFitHeightDestination with default settings. Calls growToSize to allocate space for COSName instances and sets the first name to TYPE.
2794 Updates destination properties based on provided integer value. @param x input integer value
2795 Configures the destination's bounding box fitting based on the provided flag. @param fitBoundingBox true to enable fitting, false otherwise
2796 Initializes PDPageFitRectangleDestination with default settings.
2797 Configures the viewport by setting a mask based on input value 'x'. @param x input value determining target area (-1 for reset, otherwise index)
2798 Updates the COSArray with a rectangle destination based on the given Y-coordinate. @param y Y-coordinate of the target area within the PDF page
2799 Updates the COSArray instance based on the input integer value. @param x input value (-1 or a valid long integer)
2800 Updates the destination rectangle's dimensions based on input Y-coordinate. @param y target Y-coordinate for navigation
2801 Initializes an empty PDPageFitWidthDestination instance with a COSArray of size 3 and sets the first element to TYPE.
2802 Updates the destination's bounding box based on the specified page number. @param y the page number to adjust for
2803 Configures the destination to fit either the bounding box or full page width. @param fitBoundingBox true to adjust for bounding box, false for full page
2804 Initializes PDPageXYZDestination with default page view properties.
2805 Configures the COSArray based on input param. @param x input parameter determining configuration
2806 Sets the destination page's zoom level and coordinates based on input Y coordinate. @param y Y-coordinate value
2807 Updates the PDF destination view with specified zoom level. @param zoom the desired zoom factor
2808 Fetches the function mask from the PDF source. @throws IOException on parsing error
2809 Retrieves the bounding box for a form field's visual appearance. @param fieldWidget Form field widget @param appearanceStream Appearance stream containing visual characteristics @return Bounding box rectangle or null if not found
2810 Encrypts or decrypts PDF objects within the given dictionary using provided object number and generation number. @param dictionary COSDictionary instance containing PDF objects to encrypt/decrypt @param objNum unique object identifier for encryption/decryption @param genNum generation number for encryption/decryption
2811 Updates the mask graphics rectangles with a new bounding box. @param bbox new bounding box to apply
2812 Updates gamma correction mask with a new value. @param name string representation of the entity @param value PDGamma object or null to reset
2813 Updates the PDF standard attribute object with a new color mask. @param name string representation of the entity to update @param value four-color mask values or null to remove
2814 Initializes a new instance of the PDPage class with standard letter media box dimensions.
2815 Retrieves function mask as COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2816 Initializes a new instance of the FDFDocument class with default settings. @param fdfSource not used in this constructor
2817 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2818 Retrieves the function mask as a PDRange object.
2819 Updates the update state mask with CID set information from the provided TreeMap. @param cidToGid TreeMap mapping CIDs to GIDs
2820 Initializes a new instance of the PDTilingPattern class. Sets default properties and resources according to PDF specifications.
2821 Updates sibling relationships and properties of the current outline item. @param newSibling newly added sibling PDOutlineItem
2822 Updates the update state mask of a sibling outline item and its descendants. @param newSibling PDOutlineItem instance to be updated
2823 Updates bead's update state mask and recursively updates the thread. @param bead PDThreadBead object containing relevant information
2824 Initializes a new instance of PDThreadBead with default values.
2825 Updates the update state mask with a new ROLE_MAP key and corresponding COSDictionary value. @param roleMap map of role mappings to be added to the update state
2826 Updates the dictionary object by name and notifies listeners. @param name string representation of the entity to update @param value underlying string or null to trigger a different action
2827 Updates the RI key in the extended graphics state dictionary. @param ri new RI value as a string
2828 Updates the update state mask with a new COSName key and optional string value. @param name unique identifier for the PDF object
2829 Updates border effect mask settings with user-provided string value. @param s input string to be applied
2830 Initializes a new instance of the class with default page label range data for the specified document. @param document PDDocument object to manage and manipulate page labels within
2831 Initializes a new instance of the PDStructureElement with specified type and parent node. @param structureType unique identifier for the PDF object's structure type @param parent the parent node of the structural element
2832 Initializes a new instance of the PDStructureTreeRoot.
2833 Initializes a new instance of the PDShadingPattern class with default shading pattern type.
2834 Initializes a new instance of the PDAction class with default settings. @param type default action type
2835 Retrieves the function mask as a PDDocumentOutline object. @return PDDocumentOutline object or null if not found
2836 Retrieves the function mask as a PDDocumentOutline or PDOutlineItem object. @return A PDDocumentOutline or PDOutlineItem instance representing the function mask, or null if not found
2837 Initializes a new instance of the PDRectlinearMeasureDictionary class. Sets the subtype attribute in the underlying COSDictionary to rectilinear measurements.
2838 Initializes a new PDTransition instance with default transition style (R).
2839 Updates the update state mask with a formatted date. @param key unique identifier for the PDF object @param date Calendar instance to format
2840 Retrieves or initializes the function mask as a COSDictionary object. @param embedded embedded COSUpdateState object @param key unique identifier of the entity to retrieve @param date Calendar instance for formatting (optional)
2841 Updates the creation date of the PDF document. @param date Calendar instance to format and update
2842 Updates the document's modification date. @param date Calendar instance to format
2843 Updates the update state mask with creation date. @param date Calendar instance to format
2844 Updates annotation's update state mask with formatted date. @param c Calendar instance to format
2845 Updates mask with formatted creation date. @param creationDate Calendar instance to format
2846 Updates the update state mask with a formatted date. @param cal Calendar instance to format
2847 Updates PDF document metadata with field value. @param fieldName unique identifier for PDF object @param fieldValue underlying string value or null to trigger different action
2848 Updates string attribute associated with given PDF object name. @param name unique identifier for PDF object @param value underlying string value or null to trigger different action
2849 Sets or updates 'Base' string associated with URI mask. @param base underlying string value
2850 Updates the pre-release flag in the digital signature properties dictionary. @param applicationVersion new version string
2851 Sets mask for numerical values in PDF document. @param units string representation of units (e.g. "mm", "in")
2852 Validates and sets the display mask for numerical values. @param fractionalDisplay one of "D", "F", "R", or "T" (or null)
2853 Sets thousand separator in PDF document. @param thousandsSeparator string value for thousand separator
2854 Sets decimal separator in PDF number format. @param decimalSeparator new separator string
2855 Applies formatting options to PDF numerical data using COSDictionary. @param labelPrefixString prefix string for formatting
2856 Applies formatting mask to PDF dictionary. @param labelSuffixString suffix string for formatting
2857 Validates and sets a numerical value based on the specified position label. @param labelPositionToValue string identifying value type ("S" or "P") or null
2858 Initializes a new FDFField instance from the given XML element. @param fieldXML XML representation of the form field
2859 Initializes a new instance of the PDOptionalContentGroup class with specified name. @param name unique identifier for the PDF object
2860 Updates a boolean mask in the COSDictionary. @param name unique identifier for the PDF object @param value boolean value to be set
2861 Sets a standard attribute in the COSDictionary. @param name unique identifier for the PDF object @param value long integer value to be set
2862 Formats numerical value with specified denominator. @param denominator integer value to be used in formatting
2863 Creates a PDImageXObject from a BufferedImage, ensuring it's a 1-bit b/w image. @param document PDDocument object @param image BufferedImage containing the image data @return PDImageXObject object or throws IOException if creation fails
2864 Configures shading type based on color component mask. @param bitsPerComponent number of bits per color component
2865 Configures shading type based on color component mask. @param bitsPerComponent number of bits per color component
2866 Updates the bits per coordinate mask. @param bitsPerCoordinate number of bits to use for each coordinate
2867 Updates the bits per coordinate mask. @param bitsPerCoordinate number of bits to use for each coordinate
2868 Updates the COSDictionary with a floating-point mask attribute. @param name unique identifier for the PDF object @param value the float value to be represented
2869 Sets border effect mask intensity. @param i float value representing intensity
2870 Applies unit conversion factor to format dictionary. @param conversionFactor scaling factor for numerical values
2871 Creates a PDFileSpecification instance from the file specification filter. @return PDFileSpecification object or null if unknown
2872 Retrieves function mask as COSBase object. @return COSBase object representing function mask or null if not found
2873 Retrieves the function mask as a list of PDFileSpecifications. @return List<PDFileSpecification> containing specifications or null if not found
2874 Retrieves the function mask as a COSBase object from the named page reference. @return COSBase object representing the function mask or null if not found
2875 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
2876 Retrieves function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
2877 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
2878 Retrieves function mask as a COSBase object from action entity. @return COSBase object representing the function mask or null if not found
2879 Retrieves and configures the function mask. @return PDFileSpecification instance representing the function mask
2880 Retrieves function mask as COSBase object. @return COSBase object representing function mask or null if not found
2881 Retrieves the function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
2882 Initializes an empty highlight annotation instance with subtype.
2883 Initializes an empty squiggly annotation instance with default subtype.
2884 Initializes a new strikeout annotation instance with subtype set to COSName.SUBTYPE.
2885 Initializes an empty underline annotation instance.
2886 Initializes a new instance of the PDAnnotationFileAttachment class with default annotation properties. Sets the subtype to COSName.SUBTYPE.
2887 Initializes a new instance of the PDAnnotationInk class with default annotation properties.
2888 Initializes a new instance of PDAnnotationLine with default annotation properties.
2889 Initializes a new instance of the PDAnnotationPolygon class with default annotation properties. Sets the subtype to COSName.SUBTYPE and value to {@link #SUB_TYPE}.
2890 Initializes a new instance of PDAnnotationPolyline with default annotation properties.
2891 Initializes a new instance of the PDAnnotationRubberStamp class with default rubber stamp annotation properties.
2892 Initializes a new instance of the PDAnnotationSquareCircle class with a specified subtype. @param subType annotation subtype
2893 Initializes a new instance of PDAnnotationText with default annotation properties.
2894 Initializes a new instance of the PDAnnotationTextMarkup class with default annotation properties and an empty quad point array.
2895 Retrieves function mask as a PDRectangle object. @return PDRectangle instance or null if not found
2896 Retrieves the bounding box layout attribute as a PDRectangle object. @return PDRectangle instance or null if not found
2897 Retrieves the function mask rectangle. @return PDRectangle object or null if not found
2898 Retrieves function mask as a PDRectangle object. @return PDRectangle instance or null if not found
2899 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2900 Retrieves function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
2901 Retrieves function mask as a PDRectangle object. @return PDRectangle instance or null if not found
2902 Retrieves the function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
2903 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2904 Retrieves the bounding box rectangle from the PDF document. @return PDRectangle object or null if not found
2905 Retrieves the function mask as a PDRectangle object. @return PDRectangle instance or null if not found
2906 Retrieves the function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
2907 Retrieves the function mask as a PDRectangle instance from the dictionary. @return PDRectangle object or null if not found
2908 Retrieves function mask as a PDRectangle instance. @return PDRectangle object representing the function mask or null if not found
2909 Retrieves the function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
2910 Retrieves the function mask as a PDRectangle object. @return PDRectangle representing the function mask or null if not found
2911 Retrieves function mask as a PDRectangle instance. @return PDRectangle object or null if not found
2912 Initializes and executes a line dash pattern in the graphics state. @param array COSArray containing dash lengths @param phase initial dash phase value
2913 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2914 Retrieves the line dash pattern function mask as a PDLineDashPattern object.
2915 Retrieves the function mask dictionary as a PDLineDashPattern object. @return PDLineDashPattern object representing the function mask or null if not found
2916 Applies a color mask to the specified PDImage using the provided Paint object. @param pdImage input image data @param paint graphics context for rendering graphics on the specified component @return BufferedImage representation of the masked image or null if not compatible
2917 Returns a Matrix instance representing the form's transformation matrix.
2918 Retrieves function mask matrix. @return Matrix object representing the function mask
2919 Retrieves function mask as a COSBase object. @return COSBase object representing the function mask or null if not found
2920 Updates attribute value by name and triggers updates. @param attrName string representation of the attribute to update @param attrValue new attribute value or null for default handling
2921 Recursively fetches the value associated with the given key from the page tree. @param node current page dictionary @param key unique identifier of the entity to retrieve
2922 Retrieves a boolean value from the dictionary using the provided key. @param key primary key to search for @param defaultValue default boolean value to return if key is not found
2923 Retrieves a numeric value from the dictionary using the provided key. @param key primary key to search for @param defaultValue default value to return if key is not found
2924 Retrieves a numeric value from the dictionary using either of two keys. @param firstKey primary key to search for @param secondKey secondary key to search if primary is not found
2925 Creates a new instance of PDInlineImage with the provided parameters, data, and resources. Decodes the image data using the specified filters and updates the parameters accordingly. @param parameters COS dictionary containing image attributes @param data raw image byte array @param resources PDResources object for accessing additional resources
2926 Determines the image format based on the filter masks. @return Image format (png, jpg or tiff) based on the presence of specific filters
2927 Retrieves a list of COSObject instances based on the given keys and types. @param type1 first type to filter by (optional) @param type2 second type to filter by (optional) @return list of matching COSObject instances or empty list if none found
2928 Searches for the PDF trailer in the data stream and extracts its contents. @param trailer COSDictionary representing the PDF trailer @return true if trailer is found, false otherwise
2929 Retrieves the function mask from the given COSDictionary. @param trailer COSDictionary to search @return true if function mask is found, false otherwise
2930 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
2931 Initializes a new instance of the PDPageTree class from a given COSDictionary root. @param root COSDictionary representing the page tree's root
2932 Retrieves Unicode string representation of a given character code. @param code the character code to convert
2933 Retrieves the function mask as a PDTransparencyGroup instance. @return PDTransparencyGroup object representing the function mask or null if not found
2934 Updates the function mask with a Mac OS subtype. @param macSubtype unique identifier for the PDF object
2935 Updates the function mask with Mac OS creator information. @param macCreator unique identifier for the PDF object
2936 Updates the function mask with Mac OS fork value. @param macResFork string value representing Mac OS fork
2937 Checks if PDF document has encryption enabled.
2938 Retrieves the function mask as an FDFDocument object. @throws IOException if root object specification is missing
2939 Creates a PDDocument instance from encrypted PDF content, handling decryption and parsing. @param lenient whether to perform lenient or strict parsing @return PDDocument object representing decrypted PDF data @throws IOException if errors occur during parsing or creation of the document
2940 Retrieves the AcroForm function mask as a COSDictionary object. @return PDAcroForm object representing the function mask or null if not found
2941 Retrieves the function mask as a PDPageDestination object for the given PDNamedDestination. @param namedDest unique identifier of the entity to retrieve @return PDPageDestination object or null if not found
2942 Retrieves a PDColorSpace object by name. @param name unique identifier of the color space @param wasDefault whether to retrieve the default color space if not found @return PDColorSpace object or null if not found
2943 Checks if color space function mask is present. @param name unique identifier of the entity
2944 Retrieves extended graphics state as a PDExtendedGraphicsState object. @param name COSName representing the extended graphics state to retrieve
2945 Retrieves the function mask as a COSBase object, checking for specific conditions. @param name unique identifier of the entity
2946 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask or an empty set if not found
2947 Retrieves function mask as COSName objects. @return Set of COSName objects representing the function mask or an empty set if not found
2948 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask
2949 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask or an empty set if not found
2950 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask
2951 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask or an empty set if not found
2952 Retrieves function mask as a set of COSName objects. @return Set of COSName objects representing the function mask or an empty set if not found
2953 Retrieves the function mask as a COSName object based on the specified kind and prefix. If an existing function mask is found in the dictionary that matches the provided kind and object, it returns the corresponding COSName object. Otherwise, it creates a new function mask using m10(kind, prefix) and updates it with m11(kind, name, object). @param kind type of function to retrieve @param prefix unique identifier prefix for the function @param object underlying COSObjectable object or null @return The retrieved or created COSName object representing the function mask.
2954 Sets font resource with given COSName and PDFont. @param name unique identifier of the entity to update @param font underlying PDFont object
2955 Initializes a color space resource. @param name unique identifier of the color space @param colorSpace underlying COSColorSpace object
2956 Initializes extended graphics state. @param name COSName representing the entity to update
2957 Sets the shading resource with the given identifier. @param name COSName instance representing the shading resource
2958 Updates pattern resource in PDF document. @param name COSName identifier @param pattern PDAbstractPattern object
2959 Initializes property list with given COSName and resource properties.
2960 Updates the XObject resource in the PDResources. @param name COSName identifier of the XObject @param xobject PDXObject instance to update
2961 Updates the function mask with a PDEmbeddedFile object. @param file embedded file to be added or updated
2962 Updates the function mask with an embedded file specification. @param file PDEmbeddedFile object to be associated with the function mask
2963 Retrieves function mask for standard encryption filter.
2964 Retrieves the function mask for the default encryption filter.
2965 Updates the cryptographic filter dictionary with a specified name and value. @param cryptFilterDictionary PDCryptFilterDictionary object to update
2966 Updates the cryptographic filter dictionary with a specified name and value. @param defaultFilterDictionary PDCryptFilterDictionary object to update
2967 Retrieves the function mask as a PDType3CharProc object. @return PDType3CharProc instance or null if not found
2968 Retrieves the function mask as a BaseState object. @return BaseState object representing the function mask or null if not found
2969 Updates the update state mask with a new base state. @param state current BaseState object
2970 Updates the function mask for an optional content group. @param group PDOptionalContentGroup object @param enable boolean flag to indicate whether to enable or disable the group @return true if the update was successful, false otherwise
2971 Initializes a new instance of the PDPatternContentStream class for a given PDTilingPattern. @param pattern PDTilingPattern object to associate with this content stream
2972 Retrieves the appearance dictionary for a given annotation. @return PDAppearanceDictionary object or null if not found
2973 Retrieves the function mask as a PDAppearanceEntry object. @return PDAppearanceEntry object representing the function mask or null if not found
2974 Retrieves the function mask as a PDAppearanceEntry object. @return PDAppearanceEntry object representing the function mask or null if not found
2975 Retrieves the function mask as a PDOutlineItem. @return PDOutlineItem object representing the function mask or null if not found
2976 Retrieves the function mask as a PDOutlineItem. @return PDOutlineItem object representing the function mask
2977 Retrieves the function mask as a PDSignature object. @return PDSignature object representing the function mask
2978 Updates thread bead with next bead's mask value and updates update state mask. @param append PDThreadBead instance to be updated
2979 Retrieves the function mask as a PDAppearanceStream object. @return PDAppearanceStream object representing the annotation's function mask or null if not found
2980 Fetches the function mask as a COSName object from the annotation widget. @return COSName object representing the function mask or an empty string if not found
2981 Retrieves the function mask as a COSDictionary object from the given PDF root. @param root COSDictionary representing the PDF structure
2982 Retrieves the value associated with a given name from the current node's named structure. @param name unique identifier for the desired value @return Value of type T or null if not found
2983 Retrieves a numeric value from the tree structure represented by this node. @param index unique identifier for the desired numeric value @return Object representing the retrieved numeric value or null if not found
2984 Updates the function mask with new limits based on the provided list of child nodes. @param kids list of child PDNumberTreeNode objects
2985 Updates the function mask with a new set of numeric values and limits. @param numbers Map containing numeric keys and corresponding COSObjectable values
2986 Calculates the number of output values for the function mask. @return Number of output values or 0 if not found
2987 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2988 Extracts and processes function domain values from the COSArray object. @param inputValues array of input values to be processed @return float array with extracted and processed domain values
2989 Retrieves the number of input values from the function mask. @return The total count of input parameters or -1 if not initialized
2990 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask
2991 Calculates the sample index based on input vector and size values. @param vector input data point
2992 Retrieves the function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2993 Retrieves the function mask for a given parameter number. @param paramNum index of the parameter to fetch the mask for @return PDRange object containing the function mask or null if not found
2994 Retrieves function mask as a COSArray object. @return COSArray object representing the function mask or null if not found
2995 Checks if the top edge of the marked content artifact is attached.
2996 Checks if the bottom edge of the marked content artifact is attached.
2997 Checks if the left edge of the marked content artifact is attached.
2998 Determines if the right edge of the marked content artifact is attached.
2999 Initializes a new instance of the PDCIDFont class from a COSDictionary object. @param fontDictionary COSDictionary containing CID font data @param parent PDType0Font parent object
3000 Initializes a DictionaryEncoding instance with the given base encoding and differences. @param baseEncoding base font encoding (may be null) @param differences differences that may apply to the base encoding
3001 Initializes a new instance of the DictionaryEncoding class with the given font encoding. @param fontEncoding COSDictionary containing font encoding information
3002 Initializes a DictionaryEncoding instance from the provided COSDictionary, determining and applying the base encoding based on its contents. @param fontEncoding the COSDictionary to initialize from @param isNonSymbolic whether this is a non-symbolic font @param builtIn the built-in encoding for symbolic fonts (null for nonsymbolic)
3003 Initializes the color space with RGB data and white point coordinates. @param rgb COSArray containing RGB values
3004 Updates the color component mask in the dictionary with values from the given PDRange object. @param range the PDRange object containing minimum and maximum values
3005 Updates color component mask with values from given PDRange object. @param range the PDRange object containing minimum and maximum values
3006 Retrieves a function mask as a PDOptionalContentGroup object. @param name unique identifier of the entity to retrieve @return PDOptionalContentGroup object or null if not found
3007 Processes the function mask for a given PDOptionalContentGroup. @param ocg the optional content group
3008 Retrieves the function mask as a collection of optional content groups. @return Collection of PDOptionalContentGroup objects representing the function mask or empty if not found
3009 Initializes a ShadingContext instance from a PDShading object, ColorModel, AffineTransform, and Matrix. @param shading the PDShading object to initialize from @param cm the ColorModel for this context @param xform the AffineTransform for this context @param matrix the Matrix for this context
3010 Retrieves function mask as a PDRange object. @param paramNum parameter index @return PDRange object representing the function mask or null if not found
3011 Retrieves function mask as a PDColor object. @return PDColor object representing the function mask or null if not found
3012 Retrieves the function mask as a PDColor object. @return PDColor object representing the function mask or null if not found
3013 Retrieves the function mask as a PDColor object. @return PDColor object representing the function mask or null if not found
3014 Validates and sets various key usages in the PDF document's dictionary. @param digitalSignature flag for digital signature @param nonRepudiation flag for non-repudiation @param keyEncipherment flag for key encipherment @param dataEncipherment flag for data encipherment @param keyAgreement flag for key agreement @param keyCertSign flag for key certificate sign @param cRLSign flag for CRL sign @param encipherOnly flag for encipher only @param decipherOnly flag for decipher only
3015 Retrieves the function mask from the PDF file. @param pdfFile InputStream for the PDF document @return byte[] function mask or null if not found
3016 Retrieves the function mask from a PDF file. @param pdfFile contents of the PDF document @return byte array representing the function mask or null if not found
3017 Retrieves the function mask from a PDF file. @param pdfFile InputStream to read from @return byte[] function mask or null if not found
3018 Retrieves function mask from PDF file. @param pdfFile byte array containing the PDF document @return int[] function mask or null if not found
3019 Retrieves standardized attribute value as string. @param name unique identifier of the entity
3020 Retrieves the rendering intent from the COSDictionary. @return RenderingIntent object or null if not found
3021 Retrieves named mask value from associated COSDictionary. @return string representation of the mask value
3022 Retrieves value associated with COSName instance; returns default value if not found. @param key unique identifier of the entity @param defaultValue Value to return when key is not present
3023 Retrieves solid guideline style identifier from COSDictionary. @return unique identifier string
3024 Returns note name of text annotation. @param COSName.NAME and PDAnnotationText.NAME_NOTE used as keys to retrieve value
3025 Retrieves attachment name from push pin annotation. @param none
3026 Retrieves line style attribute value. @param key COSName instance
3027 Retrieves highlight mode configuration value. @return Highlight mode string
3028 Retrieves reply data from annotation properties. @return String representation of reply data or null if not found
3029 Retrieves rubber stamp name from COS representation. @param key unique identifier of the entity
3030 Retrieves note name from annotation metadata. @return note name or null if not found
3031 Retrieves mask value associated with COSName instance 'H' and default value 'I'. @return Mask string or default value if not found
3032 Retrieves function mask dictionary based on solid style.
3033 Retrieves function mask value from COSDictionary instance. @return Function mask string or null if not found
3034 Retrieves transition style as string. @return Transition style representation or null
3035 Retrieves dimension value associated with COSName instance. @param key unique identifier of the entity
3036 Retrieves transition motion by combining COSName and predefined motion style. @return Motion string representation
3037 Retrieves preference value for non-full screen page mode. @return string representation of preference value
3038 Retrieves viewer preference for reading direction. @return Value representing left-to-right reading mode
3039 Retrieves crop box boundary value from viewer preferences. @param COSName.VIEW_AREA unique identifier of the entity
3040 Retrieves viewer preference value for 'VIEW_CLIP' with default crop box mask. @param key COSName instance @return cropped boundary string or default value if not found
3041 Retrieves print area boundary as string. @param COSName.PRINT_AREA key identifier @return Print area value or default if not found
3042 Retrieves print clip boundary value from viewer preferences. @return Crop box value as a string
3043 Retrieves print scaling preference value. @return preferred print scaling factor or default if not set
3044 Determines the optimal XRef table offset for a given object offset. @param startXRefOffset input object offset value @return The optimal offset, or -1 if not found
3045 Returns the maximum function mask associated with the document version. @return function mask as a string
3046 Retrieves the function mask as a collection of attribute objects. @return Revisions<PDAttributeObject> object containing attribute data
3047 Checks if function mask is enabled. @return true if enabled, false otherwise
3048 Retrieves the function mask as a PDStructureNode object. @return PDStructureNode representing the function mask or null if not found
3049 Retrieves the function mask as a COSBase object. @param kid input parameter representing a structure node
3050 Notifies observers of property changes and updates visibility. @param name unique identifier for the PDF object
3051 Initializes a new instance of PDEncryption with the given COSDictionary. @param dictionary COSDictionary object containing encryption settings
3052 Retrieves the configured security handler for a given ProtectionPolicy. @throws IOException if no security handler is set
3053 Retrieves the function mask as a list of FDFAnnotations. @return List<FDFAnnotation> object representing the function mask or null if not found
3054 Calculates the combined mask value for font ranges based on CID system info and font characteristics. @param cidSystemInfo PDC ID system information @param info Font information object @return true if font range matches, false otherwise
3055 Checks if alternate color space has attribute 'm1' enabled. @return true if enabled, false otherwise
3056 Retrieves the function mask as a PDAction or PDDestination object, based on its type in the document catalog.
3057 Retrieves the function mask as a PDAction object. @return PDAction object representing the function mask or null if not found
3058 Retrieves the function mask as a Map of JavaScript actions. @return Map<String, PDActionJavaScript> object representing the function mask or null if not found
3059 Retrieves a list of PDActions based on the function mask. @return List of PDAction objects or null if not found
3060 Retrieves function mask as a PDAction object.
3061 Retrieves the function mask as a PDAction object. @return PDAction object or null if not found
3062 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3063 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3064 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
3065 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3066 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3067 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3068 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3069 Retrieves function mask as interactive action based on PV value. @return PDAction object or null if not found
3070 Retrieves the function mask as a PDAction object. @return PDAction object or null if not found
3071 Retrieves function mask as interactive action. @return PDAction object or null if not found
3072 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3073 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3074 Retrieves interactive action for document opening event. @return PDAction object or null if not found
3075 Retrieves the function mask as a PDAction object. @return PDAction object or null if not found
3076 Retrieves function mask as a PDAction object associated with key K. @return PDAction object or null if not found
3077 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3078 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3079 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3080 Retrieves function mask as PDAction object. @return PDAction object or null if not found
3081 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3082 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3083 Retrieves function mask as a PDAction object. @return PDAction object or null if not found
3084 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
3085 Retrieves metadata value associated with given key. @param propertyKey unique identifier of entity to retrieve
3086 Retrieves mask value associated with given field name. @param fieldName unique identifier of the entity to retrieve
3087 Retrieves string value associated with given COSName instance. @param name unique identifier of the entity to retrieve
3088 Retrieves URI mask string associated with 'Base' entity. @return URI-related data or null if not found
3089 Retrieves the 'mask' property value from the underlying dictionary. @return string representation of the mask property or null if not found
3090 Retrieves formatted string value associated with 'FUNC_MASK' key. @return string representation or null if not found
3091 Retrieves string value associated with the given COSName or default value. @param key unique identifier of the entity to retrieve @param defaultValue fallback string value if not found
3092 Retrieves function mask as string with fallback value. @param embedded embedded object @param key unique identifier of the entity to retrieve @param defaultValue fallback string value if not found
3093 Retrieves operation type as string. @return Operation type (e.g. "open") or default value
3094 Retrieves form mask string from dictionary. @param dictionary PDAcroForm dictionary object
3095 Retrieves the file specification mask value by sequentially calling various file retrieval methods until a valid string is obtained.
3096 Updates user attribute mask with formatted value. @param formattedValue string representation of the user attribute
3097 Checks if a function mask exists in the optional content dictionary. @param groupName name of the optional content group
3098 Concatenates field name with its parent's name, if applicable. @return full field name or null if not found
3099 Retrieves a Calendar instance associated with the given COSName key, or uses the default value if not found. @param key unique identifier of the entity to retrieve @param defaultValue fallback Calendar instance
3100 Retrieves the function mask as a Calendar instance. @param embedded COSName representing the entity to retrieve @param key unique identifier of the entity's function mask @param defaultValue fallback Calendar instance to return if not found
3101 Retrieves function mask from the managed dictionary. @return Function mask as a long value
3102 Retrieves function mask as a long value from the dictionary.
3103 Applies a series of filters to encoded data using specified filter list, parameters, and options. @param filters collection of filters to apply @param parameters COSDictionary containing decoding parameters @param in input stream with encoded data @param options DecodeOptions object
3104 Generates a random access read buffer for the stream's filter mask. @throws IOException if underlying data is closed or not properly initialized
3105 Applies a series of filters to encoded data using specified filter list, parameters, and options, while stopping at the first filter in the stopFilters collection. @param stopFilters collection of COSName identifiers of filters to stop at @return InputStream object representing filtered data
3106 Retrieves the unknown value associated with the given entity. @param name unique identifier of the entity to retrieve
3107 Retrieves the formatted value of 'C' from the dictionary. @return float representation of value 'C'
3108 Initializes a new PDFunctionType2 instance from the provided PDF function. @param function COSBase object representing the input PDF function
3109 Retrieves function mask value from annotation properties. @return The function mask as a floating-point value
3110 Retrieves function mask value from annotation properties. @return floating-point representation of functional mask
3111 Retrieves line annotation's function mask value. @return float representation of function mask
3112 Retrieves function mask as a floating-point value. @return m1 attribute
3113 Retrieves function mask as a floating-point value from COSDictionary.
3114 Retrieves a COSName instance associated with the given name and uses it to retrieve a float value. @param name unique identifier of the entity to retrieve @param defaultValue fallback value if not found or invalid
3115 Retrieves border effect intensity from PDBorderEffectDictionary. @return intensity value or default (0) if not found
3116 Calculates the function mask for a given PDFont object. @param font input PDFont object @return float representing the function mask
3117 Processes a list of tokens by calling m1() on each element.
3118 Retrieves function mask from PDFBox dictionaries. @return List of Object containing the function mask or null if not found
3119 Retrieves function mask from COS dictionary. @return List of Object containing the function mask or null if not found
3120 Updates function mask and notifies parent PDStructureNode. @param structureElement the element to process
3121 Updates function mask with a new child node and reference node. @param newKid new COSBase object to include @param refKid reference COSBase object (can be null)
3122 Evaluates function mask for a given PDStructureElement. @param structureElement the element to evaluate @return true if the element is valid, false otherwise
3123 Retrieves CID font's function mask as a vector. @param cid unique character identifier
3124 Retrieves a PDPropertyList instance by name. @param name unique identifier of the property list
3125 Fetches the optional content mask property list. @return PDPropertyList object or null if not found
3126 Fetches and constructs a PDPropertyList instance for masking. @return PDPropertyList object or null if not found
3127 Retrieves the function mask as a list of PDPropertyList objects. @return List of PDPropertyList objects or empty list if not found
3128 Retrieves the function mask as a PDPropertyList instance. @return PDPropertyList object representing the function mask or null if not found
3129 Initializes a new instance of the PDAnnotationCaret class from a COS dictionary. @param field dictionary containing annotation properties
3130 Initializes a new instance of the PDAnnotationFileAttachment class from a COSDictionary. @param field dictionary containing annotation properties
3131 Initializes a new instance of the PDAnnotationFreeText class from a COSDictionary. @param field dictionary containing annotation properties
3132 Initializes a new instance of the PDAnnotationInk class from a COSDictionary. @param dict dictionary containing annotation properties
3133 Initializes a new instance of the PDAnnotationLine class from a COSDictionary. @param field dictionary containing annotation properties
3134 Initializes a new instance of the PDAnnotationPolygon class from a COSDictionary. @param dict dictionary containing annotation properties
3135 Initializes a new instance of the PDAnnotationPolyline class from a COSDictionary. @param dict dictionary containing polyline annotation properties
3136 Initializes a new instance of PDAnnotationRubberStamp from a COSDictionary. @param field dictionary containing annotation properties
3137 Initializes a new instance of the PDAnnotationSound class from a COSDictionary. @param field dictionary containing annotation properties
3138 Initializes a new instance of the PDAnnotationSquareCircle class from a COSDictionary. @param dict dictionary containing annotation properties
3139 Initializes a new instance of the PDAnnotationText class from a COSDictionary. @param field dictionary containing annotation properties
3140 Initializes a new text markup annotation from a COSDictionary. @param field dictionary containing annotation properties
3141 Retrieves the function mask as a PDAnnotationPopup object. @return PDAnnotationPopup object or null if not found
3142 Retrieves the function mask as a list of PDAnnotationWidgets. @return List<PDAnnotationWidget> representing the function mask or an empty list if not found
3143 Retrieves the function mask as a COSBase object for the given input. @param base input COSBase object @return COSBase object representing the function mask or null if not found
3144 Writes the function mask of a given COSBase object to the specified output stream. @param stream target output stream
3145 Writes the function mask of a COSArray object to an OutputStream. @param output target output stream @param cosArray COSArray object containing function mask data
3146 Computes the function mask for a cloud-like shape based on its vertices and whether it's an ellipse. @param vertices array of Point2D.Double objects representing the shape's vertices @param isEllipse true if the shape is an ellipse, false otherwise
3147 Generates a compressed PDImageXObject instance from the given image data. @throws IOException if processing fails
3148 Initializes and updates the destination for a given page. @param page PDPage object associated with the destination
3149 Masks PDF document data using the provided object number and generation number. @param stream COSStream instance containing the PDF document @param objNum unique object identifier for encryption/decryption @param genNum generation number for encryption/decryption
3150 Initializes a new instance of PDActionEmbeddedGoTo with default settings.
3151 Initializes a new instance of PDActionGoTo with default subtype.
3152 Initializes a new instance of the PDActionHide class with default subtype.
3153 Initializes a new instance of the PDActionImportData class with default settings.
3154 Initializes a new JavaScript action instance with default settings.
3155 Initializes a new instance of PDActionLaunch with default subtype settings.
3156 Initializes a new instance of the PDActionMovie class with default settings.
3157 Initializes a new instance of the PDActionNamed class with default subtype.
3158 Initializes a new instance of the PDActionRemoteGoTo class with default settings. @param type default action type
3159 Initializes a new instance of the PDActionResetForm class with default settings.
3160 Initializes a new instance of the PDActionSound class with default settings.
3161 Initializes a new instance of the PDActionSubmitForm class with default settings.
3162 Initializes a new instance of the PDActionThread class with default settings.
3163 Initializes a new instance of the PDActionURI with default subtype.
3164 Initializes a new instance of the PDAnnotationHighlight class with default annotation properties.
3165 Initializes a new instance of PDAnnotationSquiggly with default properties.
3166 Initializes a new instance of the PDAnnotationStrikeout class.
3167 Initializes a new instance of the PDAnnotationUnderline class with default properties.
3168 Creates a BufferedImage representing the given tiling pattern. @param drawer PageDrawer instance used for rendering @param pattern PDTilingPattern object containing pattern data @param colorSpace PDColorSpace object defining color space @param color PDColor object specifying fill color @param xform AffineTransform object describing transformation matrix @param anchorRect Rectangle2D object representing anchor rectangle @return BufferedImage instance of the rendered tiling pattern
3169 Retrieves the function mask as a PDRectangle object. @param pattern PDTilingPattern instance @return PDRectangle instance or null if not found
3170 Applies image masking operation using the provided Paint object. @param paint graphics context for rendering graphics on the specified component
3171 Applies a color mask to the given PDF image data, converting it into a BufferedImage representation. @param pdImage input PDF image data
3172 Applies a function mask to the specified PDImage, using the provided clipping rectangle and subsampling. @param pdImage input image data @param region clipped rectangle defining the area to process @param subsampling filtering factor @return BufferedImage object or null on failure
3173 Retrieves the PDF resources for this page. @return PDResources object or null if not found
3174 Retrieves the page's media box rectangle. @return PDRectangle object representing the page's dimensions or a default value if not found
3175 Calculates the rotation angle mask for this page. @return Rotation angle mask value or 0 if not applicable
3176 Retrieves boolean value from dictionary using provided key. @param key primary key to search for @param defaultValue default boolean value to return if key is not found
3177 Retrieves mask flag from file specification. @param key COSName.V @param defaultValue false
3178 Checks if the 'H' property is set to true. @param key primary key to search for
3179 Retrieves encryption metadata flag. @return true if metadata is encrypted, false otherwise
3180 Retrieves the mask value from the annotation dictionary. @return true if the annotation is visible, false otherwise
3181 Retrieves mask flag from FDF icon configuration. @param key primary key to search for
3182 Retrieves the RENAME flag from the COSDictionary. @param m1 importance score of the callee
3183 Retrieves the function mask using COSDictionary. @return boolean value indicating function mask
3184 Retrieves transparency function mask from COSDictionary. @return true if transparent, false otherwise
3185 Retrieves anti-aliasing property from shading dictionary. @param none @return true if anti-aliasing is enabled, false otherwise
3186 Retrieves boolean overprint value from dictionary. @param COSName.OP key to search for @return true if found, false otherwise
3187 Retrieves the mask value from the dictionary. @return boolean mask value
3188 Retrieves the mask value from the dictionary. @return boolean mask value or false if not found
3189 Retrieves the mask value from the dictionary. @param dict COSDictionary instance
3190 Retrieves 'H' flag value from associated action. @return H flag visibility state
3191 Retrieves a boolean mask value from the sound action dictionary. @param key primary key to search for @return boolean mask value or default if not found
3192 Retrieves repeat flag from sound action dictionary. @return true if sound should repeat, false otherwise
3193 Retrieves mix mode flag from sound action. @return true if mixing is enabled, false otherwise
3194 Checks if CAP annotation flag is set. @return true if CAP flag is enabled, false otherwise
3195 Checks if 'Open' annotation is enabled. @return true if 'Open' annotation is enabled, false otherwise
3196 Checks if pre-release flag is set. @return true if pre-release, false otherwise
3197 Retrieves a boolean value indicating whether to mask font warnings. @return true if non-EFont fonts should not trigger warnings
3198 Retrieves flag indicating trusted mode from dictionary. @return true if trusted mode is enabled, false otherwise
3199 Checks if NEED_APPEARANCES should be masked. @return true if NEED_APPEARANCES should be hidden, false otherwise
3200 Retrieves transition mask value. @return true if transition is enabled, otherwise false
3201 Retrieves the hide toolbar preference value. @return true if toolbar is hidden, false otherwise
3202 Retrieves whether to hide the menubar in PDF viewer preferences. @return true if menubar should be hidden, false otherwise
3203 Retrieves whether to hide window UI from viewer preferences. @return true if hiding is enabled, false otherwise
3204 Retrieves whether to fit the PDF window to its contents. @return true if fitting is enabled, false otherwise
3205 Retrieves viewer preference to mask function. @return true if masking is enabled, false otherwise
3206 Retrieves display doc title preference. @return true if enabled, false otherwise
3207 Updates the update state mask with a specified range of values. @param field COSName representing the PDF object @param bitFlag specific bit flag to modify @param value boolean indicating whether to set or clear the flag
3208 Retrieves function mask as a numeric value from the dictionary. @param embeddedDictionary embedded object to search @param key unique identifier of the entity to retrieve @param defaultValue default value to return if key is not found
3209 Retrieves a numeric value from the dictionary using the provided COSName. @param name COSName instance associated with the given key @return numeric value or default (-1) if not found
3210 Retrieves a numeric value from the dictionary using the provided key. @param key primary key to search for
3211 Retrieves an integer value from the dictionary using the provided key. @param key primary key to search for @param defaultValue default value to return if key is not found
3212 Checks if a specific mask flag is present in a COSName field. @param field COSName field to search @param bitFlag mask flag to look for
3213 Recursively searches for a specified page in the PDF document's page tree. @param pageNum 1-based index of the target page @param node root COSDictionary object representing the page tree @param encountered current page count when searching @return COSDictionary object representing the target page, or null if not found
3214 Retrieves the count value from the root page dictionary. @return numeric count or default value if not found
3215 Calculates start page mask value based on m1 dictionary entry. @return Mask value or default if not found
3216 Evaluates the function mask by calling m2 with ORDER key and default value of 1. @return int value representing the function mask
3217 Retrieves mask value using m2 with COSName.R and default 0.
3218 Retrieves the length mask from the cryptographic filter dictionary. @return integer length mask
3219 Retrieves encrypted document mask value from dictionary. @return integer mask value or default if not found
3220 Retrieves the length mask value from the encryption settings. @return numeric length mask value
3221 Retrieves a numeric mask value from the encryption settings dictionary. @return The retrieved mask value
3222 Retrieves the document permissions mask. @return integer representing document permissions
3223 Retrieves and concatenates the value of 'm1' attribute from the annotation's dictionary. @param COSName.Q primary key to search for
3224 Retrieves the font descriptor flags from the dictionary. @return integer flags value or recalculated from dictionary if initially unknown
3225 Creates a PDF abstract pattern from the provided dictionary and resource cache. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for retrieving resources @return PDAbstractPattern object or throws IOException if unknown pattern type
3226 Retrieves paint type value from dictionary. @return numeric paint type value
3227 Retrieves tiling type from dictionary. @return numeric value of tiling type or default if not found
3228 Creates a PDShading instance based on the provided COSDictionary, identifying and instantiating the corresponding subclass (e.g., PDShadingType1-7) based on the 'SHADING_TYPE' value. @param shadingDictionary dictionary containing shading properties @return an instance of the appropriate PDShading subclass or null if failed
3229 Retrieves bits per flag value from dictionary. @param none @return numeric value or default if not found (m2 importance score: 0.3)
3230 Calculates shading mask based on vertices per row. @return shading mask value
3231 Retrieves the number of bits per color component. @return The bits per color component value or -1 if not found
3232 Retrieves the bit mask value for coordinates. @return The number of bits per coordinate or -1 if not set
3233 Retrieves the flags mask from the action dictionary. @return integer value representing the flags mask
3234 Retrieves the flags mask from the dictionary. @return flags mask value
3235 Retrieves integer value from dictionary using COSName.P key. @param defaultValue default value to return if key is not found
3236 Retrieves numeric value from dictionary using named destination key. @param COSName.A primary key to search for
3237 Retrieves annotation appearance settings. @return COSDictionary object containing mask attributes
3238 Retrieves annotation mask from COS dictionary. @param COSName annotation key
3239 Retrieves and combines appearance characteristics using provided key. @return combined integer value representing annotation settings
3240 Checks if timestamp mask is present. @return true if timestamp mask exists, false otherwise
3241 Retrieves the count mask value from the dictionary. @return numeric count mask value
3242 Retrieves the mask value from the dictionary. @return numeric mask value or default if not found
3243 Retrieves a numeric value from the dictionary using COSName.TI key. @return integer mask value or default if not found
3244 Retrieves COSObjects by specific type. @param type required object type
3245 Retrieves the page tree from the document. @return PDPageTree object representing the page hierarchy
3246 Loads and parses the function mask from a specified PDF file. @param file input file containing the function mask @return FDFDocument object representing the parsed function mask or throws IOException if parsing fails
3247 Retrieves function mask as an FDFDocument object from the specified input stream. @param input InputStream containing the FDF file @return FDFDocument object representing the function mask @throws IOException if root object specification is missing in the FDF file
3248 Creates a PDDocument instance from encrypted PDF content. @throws IOException if errors occur during parsing or document creation
3249 Retrieves function mask as COSDictionary object.
3250 Retrieves a PDColorSpace object by name. @param name unique identifier of the color space
3251 Retrieves the function mask as a COSName object based on the specified kind and prefix. @param font PDFont object
3252 Retrieves or creates a color space function mask. @param colorSpace PDColorSpace object
3253 Retrieves or creates extended graphics state function mask. @param extGState PDExtendedGraphicsState object
3254 Retrieves function mask as COSName object based on provided kind and prefix. @param shading underlying PDShading object
3255 Retrieves or creates function mask based on provided pattern. @param pattern PDAbstractPattern object
3256 Retrieves the function mask as a COSName object based on provided parameters. @param properties PDPropertyList object to retrieve function mask from
3257 Retrieves the function mask as a COSName object for an image XObject. @param image PDImageXObject instance
3258 Retrieves the function mask as a COSName object for the given Form XObject. @param form PDFormXObject instance
3259 Retrieves function mask as COSName object based on XOBJECT kind and provided prefix. @param xobject underlying PDXObject or null @param prefix unique identifier prefix for the function
3260 Retrieves embedded file function mask as a COSStream object. @return PDEmbeddedFile instance or null if not found
3261 Retrieves embedded file function mask as a PDEmbeddedFile object. @return PDEmbeddedFile object or null if not found
3262 Retrieves the embedded file function mask as a PDEmbeddedFile object. @return PDEmbeddedFile object representing the function mask or null if not found
3263 Retrieves embedded file as a PDEmbeddedFile object. @return PDEmbeddedFile object or null if not found
3264 Retrieves embedded file representation as a PDEmbeddedFile object. @return PDEmbeddedFile object or null if not found
3265 Checks if a PDOptionalContentGroup is enabled based on its function mask. @param group the group to check @return true if the group is enabled, false otherwise
3266 Recursively traverses optional content groups to find and enable a specific group. @param groupName unique identifier of the group to enable @param enable flag to indicate whether to enable or disable the group @return true if the group was found and enabled, false otherwise
3267 Retrieves the function mask as a PDAppearanceEntry object. @return PDAppearanceEntry object representing the function mask or null if not found
3268 Retrieves the rollover appearance dictionary and updates it if necessary. @return PDAppearanceEntry object representing the updated rollover appearance
3269 Retrieves the function mask as a PDAppearanceEntry object. @return PDAppearanceEntry object representing the function mask or null if not found
3270 Validates and updates the function mask for a specified field index. @param index valid index within the range defined by the field's size
3271 Updates the function mask of the current outline node by adding a new child item. @param newChild newly added PDOutlineItem
3272 Updates the function mask of this PDOutlineNode with a new child item. @param newChild the newly added outline item
3273 Retrieves the PDSignatureField representing the function mask from an iterator sequence. @param fieldIterator Iterator of PDFields to search in @param sigObject PDSignature object for comparison @return The matched PDSignatureField or null if not found
3274 Retrieves function mask as a PDAppearanceStream object from the given PDAnnotation. @param annotation annotation containing the function mask @return PDAppearanceStream object representing the annotation's function mask or null if not found
3275 Processes the function mask of an annotation, adding font resources to AcroForm if necessary. @param acroFormResources resources associated with the AcroForm @param annotation PDAnnotation object containing the function mask
3276 Retrieves the function mask values from associated PDAnnotationWidgets. @return Set of string representations or an empty set if no valid widgets found
3277 Checks if checkbox state is consistent with function mask. @return true if states match, false otherwise
3278 Sets function mask based on COSName object from annotation widget. @throws IOException if an I/O error occurs
3279 Retrieves a unique mask value for the given PDPage object. @param page the PDF page to be processed
3280 Updates function mask based on parent node's limits. @param parentNode PDNameTreeNode instance with updated limits
3281 Updates the function mask for this PDNameTreeNode based on its children. @param kids list of child nodes to consider
3282 Updates the function mask for this PDNameTreeNode based on the provided name-value pairs. @param names map of string keys to values
3283 Initializes a new PDPageLabels instance from a PDDocument and COSDictionary. @param document the parent PDF document @param dict COS dictionary containing page label data
3284 Retrieves the function mask as a PDRange object based on parameter number. @param paramNum index of the parameter @return PDRange object representing the function mask or null if not found
3285 Initializes a new instance of the PDCalGray class.
3286 Constructs a new PDCalRGB instance using the CALRGB color space.
3287 Initializes a new instance of PDLab with LAB color space.
3288 Initializes a new instance of PDCalGray from a COSArray representation. @param array COSArray containing CALGRAY color space data
3289 Constructs a new PDColor instance with the specified CALRGB components. @param rgb array of CALRGB color components
3290 Initializes the color space with LAB data and white point coordinates. @param lab COSArray containing LAB values
3291 Constructs an AxialShadingContext object from specified parameters and shading type. @param shading PDShadingType2 object representing axial shading @param colorModel ColorModel object for color mapping @param xform AffineTransform object for coordinate transformation @param matrix Matrix object for rendering calculations @param deviceBounds Rectangle object defining device bounds @throws IOException if an I/O error occurs during initialization
3292 Initializes RadialShadingContext object with specified parameters. @param shading PDShadingType3 object defining radial shading properties @param colorModel ColorModel instance representing color space @param xform AffineTransform object for coordinate transformation @param matrix Matrix instance for inverse transformation (if applicable) @param deviceBounds Rectangle object specifying device bounds
3293 Initializes a TriangleBasedShadingContext instance from a PDShading object and other parameters. @param shading the PDShading object to initialize from @param cm the ColorModel for this context @param xform the AffineTransform for this context @param matrix the Matrix for this context
3294 Initializes a Type1ShadingContext object with the specified parameters. @param shading PDShadingType1 object representing the type 1 shading @param colorModel ColorModel object describing the color model for rendering @param xform AffineTransform object specifying the transformation to apply @param matrix Matrix object defining the matrix used in the shading operation
3295 Retrieves function mask as a PDRange object for the given parameter index. @param paramNum parameter index @return PDRange object representing the function mask or null if not found
3296 Retrieves function mask as a PDRange object for the given parameter index. @param paramNum parameter index @return PDRange object representing the function mask or null if not found
3297 Retrieves value associated with given COSName instance or returns default value if not found. @param name unique identifier of entity @param defaultValue Value to return when key is not present
3298 Retrieves border effect style. @return Style as string (e.g., "solid") or null if not found
3299 Masks line width and sets it in graphics state based on the provided PDBorderStyleDictionary and COSArray parameters. @param lineWidth value to be masked @param bs PDBorderStyleDictionary object for style determination @param border COSArray object containing border information
3300 Retrieves the function mask from the source PDF document and updates it in the destination PDF document.
3301 Updates the document's version with a new value, enforcing versioning rules and triggering corresponding actions based on the current document catalog. @param newVersion new version number as float
3302 Retrieves the function mask as a PDStructureTreeRoot object. @return PDStructureTreeRoot instance or null if not found
3303 Retrieves the function mask as a list of COSBase objects. @return List of COSBase objects representing the function mask or empty list if not found
3304 Retrieves the document's function mask as a PDEncryption object. @return PDEncryption object representing the function mask or null if not found
3305 Retrieves and configures the document's encryption details, including initializing a PDEncryption object and setting up decryption material.
3306 Retrieves the function mask associated with this Type 0 font, and performs additional checks for CMap and CID system info.
3307 Calculates the function mask from internal font data. @param bytes input byte array @param length1 length of interest @return calculated function mask
3308 Retrieves valid function mask length from input byte array. @param bytes input byte array @param length1 starting index of function mask @param length2 ending index of function mask (must be within bounds)
3309 Retrieves formatted string representation of a mask using m1 and m2. @return formated string value
3310 Returns the dictionary containing formatting options for numeric values.
3311 Retrieves dictionary key value using default separator. @return formatted string or null if not found
3312 Retrieves mask string value from COSDictionary. @return formatted mask string or default value
3313 Returns formatted string value associated with 'SS' key or default space.
3314 Retrieves formatted string value using 'O' as key and appending suffix.
3315 Retrieves function mask as string with fallback value. @param embedded embedded object @param key unique identifier of the entity to retrieve
3316 Retrieves a priority queue of font matches based on the provided PDFontDescriptor and PDCIDSystemInfo. The queue is populated with FontMatch objects, each representing a potential font match, and sorted in descending order of their scores. @param fontDescriptor the PDFontDescriptor object containing PostScript name and format @param cidSystemInfo the PDC ID system information @return PriorityQueue<FontMatch> containing font matches sorted by score in descending order.
3317 Retrieves function mask as a Calendar instance. @param embedded COSName representing the entity to retrieve @param key unique identifier of the entity's function mask @return Calendar instance or null if not found
3318 Applies a series of filters to input stream using specified filter list and parameters. @param filters collection of filters to apply @param parameters COSDictionary containing decoding parameters @param in input stream with encoded data
3319 Initializes the PDFObjectStreamParser with a COSStream and COSDocument. @param stream COSStream to parse @param document COSDocument associated with the stream
3320 Initializes a new instance of the PDFXrefStreamParser class. @param stream cross-reference stream to parse
3321 Initializes the PDCIDFontType0 object with a COSDictionary and PDType0Font. @param fontDictionary the COSDictionary containing the font information @param parent the PDType0Font parent object @throws IOException if an error occurs while reading the embedded CFF font
3322 Initializes a PDCIDFontType2 object from a COSDictionary and TrueTypeFont. @param fontDictionary the COS dictionary representing the font @param parent the PDType0Font parent of this CID font @param trueTypeFont the TrueTypeFont to use, or null for embedded OTF/TTF @throws IOException if an error occurs while parsing the font data
3323 Retrieves a CMap instance based on the provided COSBase object. @param base COSName or COSStream containing CMap information @return CMap instance or throws IOException if invalid input
3324 Initializes a new instance of the PDAnnotationCircle class from a COSDictionary. @param dict dictionary containing annotation properties
3325 Initializes a new instance of the PDAnnotationSquare class from a COSDictionary. @param field dictionary containing annotation properties
3326 Initializes a new highlight annotation from a COSDictionary. @param dict dictionary containing annotation properties
3327 Initializes a new squiggly annotation from a COSDictionary. @param dict dictionary containing annotation properties
3328 Initializes a new strikeout annotation from a COSDictionary. @param dict dictionary containing annotation properties
3329 Initializes a new underline annotation from a COSDictionary. @param dict dictionary containing annotation properties
3330 Recursively clones the structure tree, handling dictionaries and arrays. @param cloner utility for cloning PDF objects @param parentTreeEntry current dictionary entry being processed @param objMapping mapping of existing objects to their cloned counterparts
3331 Copies PDF object properties from source (src) to destination (dst) dictionary, excluding specified keys and using provided cloning utility. @param src source COSDictionary @param dst destination COSDictionary @param cloner PDFCloneUtility instance for cloning purposes @param exclude set of COSName keys to be excluded from the copy process
3332 Handles COSDocument trailer dictionary and updates encryption state. @param doc the PDF document to process
3333 Computes the function mask for a cloud-like shape based on its vertices. @param path 2D array of float arrays representing the shape's vertices
3334 Generates the mask for a cloud-like shape based on its vertices and whether it's an ellipse. @param left left coordinate of the shape @param bottom top coordinate of the shape @param right right coordinate of the shape @param top top coordinate of the shape @param isEllipse true if the shape is an ellipse, false otherwise
3335 Initializes a new JavaScript action instance with given code. @param js JavaScript code to execute
3336 Initializes a TilingPaint instance with the specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object containing pattern data @param colorSpace PDColorSpace object defining color space @param color PDColor object specifying fill color @param xform AffineTransform object describing transformation matrix
3337 Applies a function mask to the image, using the specified clipping rectangle and subsampling. @param region clipped rectangle defining the area to process @param subsampling filtering factor
3338 Creates a sampled image from PDImage using provided color key. @param pdImage input PDF image data @param colorKey color transformation data
3339 Retrieves PDF resources for the current page, prioritizing resources from the content stream. @param contentStream PDContentStream object @return PDResources object or null if not found
3340 Calculates the transformation mask for a given page and overlay media box. @param page PDPage object @param overlayMediaBox PDRectangle representing overlay's dimensions @return AffineTransform object or null if failed
3341 Creates a PDRectangle object representing the intersection mask of two given rectangles. @param box first rectangle to intersect @return resulting PDRectangle object or null if invalid input
3342 Calculates the mask value for a given page, considering its rotation angle. @param page PDPage object containing page dimensions and rotation information @return PDRectangle object representing the page's dimensions or a default value if not found
3343 Checks if document has been marked. @return true if marked, false otherwise
3344 Retrieves user properties flag from PDF document's logical structure. @return true if UserProperties are present, false otherwise
3345 Checks if 'Suspects' flag is set in dictionary. @param none @return true if Suspects flag is set, false otherwise
3346 Checks if URI action is a map. @return true if action is a map, false otherwise
3347 Determines if "Open" is enabled in popup settings. @return true if enabled, false otherwise
3348 Retrieves formatting option for mask. @return true if mask is enabled
3349 Updates user attribute mask and notifies of changes based on property visibility. @param hidden true to hide the 'H' property
3350 Retrieves the NS mask value from the dictionary. @return true if found, false otherwise
3351 Draws an inline image at the specified position and size. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of top-left corner of image @param y y-coordinate of top-left corner of image @param width image width @param height image height @throws IOException if I/O error occurs during drawing
3352 Sets annotation invisibility flag. @param invisible whether to set or clear the invisible flag
3353 Sets the hidden flag for annotations. @param hidden boolean indicating whether to hide or show annotations
3354 Updates the print flag annotation state. @param printed boolean indicating whether to set or clear the print flag
3355 Updates the update state mask with F flag and NO_ZOOM bit. @param noZoom whether to set or clear the NO_ZOOM flag
3356 Updates rotation flag in annotation. @param noRotate whether to prevent rotation
3357 Updates the annotation's visibility flag. @param noView boolean indicating whether to hide or show the annotation
3358 Updates the read-only flag of an annotation. @param readOnly boolean indicating whether to enable or disable read-only mode
3359 Updates lock flag on annotation. @param locked boolean indicating whether to lock or unlock
3360 Toggles the 'no view' flag in the annotation's update state mask. @param toggleNoView boolean indicating whether to enable or disable no view
3361 Updates flag indicating whether contents are locked. @param lockedContents true if contents are locked, false otherwise
3362 Updates annotation visibility flag. @param invisible true to make annotation invisible
3363 Hides or shows annotation based on visibility flag. @param hidden true to hide, false to show
3364 Updates annotation flag based on print status. @param printed whether the annotation is printed
3365 Updates annotation's zoom flag. @param noZoom boolean indicating whether to set or clear the zoom flag
3366 Updates annotation's update state mask with specified range of values. @param noRotate boolean indicating whether to set or clear the flag
3367 Initializes annotation mask with visibility setting. @param noView flag to indicate whether to hide or show annotation
3368 Updates annotation's read-only flag. @param readOnly boolean indicating whether to enable or disable read-only mode
3369 Updates annotation lock state. @param locked boolean indicating whether to lock or unlock
3370 Updates the update state mask with F flag and toggle no view setting. @param toggleNoView boolean indicating whether to set or clear the flag
3371 Updates annotation's update state mask with specified range of values. @param lockedContents boolean indicating whether to lock or unlock contents
3372 Updates the update state mask with a specified range of values. @param flag boolean indicating whether to set or clear the filter flag
3373 Updates the update state mask with a specified range of values. @param flag boolean indicating whether to set or clear the flag
3374 Updates the update state mask with a specified range of values based on the provided flag. @param flag boolean indicating whether to set or clear the flag
3375 Updates the update state mask with a specified range of values based on the provided flag. @param flag boolean indicating whether to set or clear the flag
3376 Updates the update state mask with a specified range of values. @param flag boolean indicating whether to set or clear the flag
3377 Updates the legal attestations flag in the PDF signature. @param flag boolean indicating whether to set or clear the flag
3378 Updates the update state mask with FF bit flag to add/remove rev info based on the provided flag. @param flag boolean indicating whether to add or remove rev info
3379 Updates subject certificate flags based on the provided boolean value. @param flag true to set or false to clear the SUBJECT flag
3380 Updates issuer flag in digital signature certificate. @param flag boolean indicating whether to set or clear the ISSUER flag
3381 Updates the OID flag in the certificate dictionary. @param flag boolean indicating whether to set or clear the flag
3382 Sets update state mask for subject DN attribute. @param flag boolean indicating whether to set or clear the flag
3383 Sets or clears key usage flag in certificate.
3384 Updates the update state mask with FF field. @param flag boolean indicating whether to set or clear the flag
3385 Updates italic flag in PDF object. @param italic boolean indicating whether to set or clear italic flag
3386 Updates text formatting flags within the PDF outline. @param bold true to apply bold formatting, false otherwise
3387 Updates signature flags in the PDF document. @param signaturesExist boolean indicating whether signatures exist
3388 Updates form flags based on append-only state. @param appendOnly indicates whether to set or clear append-only flag
3389 Updates the sort flag based on the provided boolean value. @param sort true to enable sorting, false otherwise
3390 Updates the FF flag to indicate whether this choice field supports multi-selection. @param multiSelect boolean indicating if multiple selections are allowed
3391 Configures spell-checking behavior for choice fields. @param doNotSpellCheck whether to disable spell-checking
3392 Updates the update state mask with the specified flag. @param commitOnSelChange whether to commit changes upon selection
3393 Updates the update state mask with COMBO flag. @param combo boolean indicating whether to set or clear the flag
3394 Updates combo box field's editable state and update mask. @param edit boolean indicating whether to enable or disable editing
3395 Updates the read-only flag of this PDField. @param readonly boolean indicating whether to set (true) or clear (false) the read-only state
3396 Sets the required flag in the PDF field's AcroForm structure. @param required boolean indicating whether the field is required
3397 Updates export mask with specified value. @param noExport boolean flag indicating whether to enable or disable export
3398 Initializes a new instance of the PDPushButton class with the given AcroForm. @param acroForm parent form object
3399 Initializes a new instance of the PDRadioButton class with the given AcroForm. @param acroForm parent form object
3400 Configures radio button unison mode. @param radiosInUnison boolean indicating whether radio buttons operate in unison
3401 Configures text field input mode. @param multiline true to enable multiline input
3402 Configures password protection for the text field. @param password boolean indicating whether to enable password protection
3403 Configures the file select flag in the PDF form. @param fileSelect boolean indicating whether to enable or disable file selection
3404 Configures text field to disable or enable spell checking. @param doNotSpellCheck boolean flag indicating whether to disable (true) or enable (false) spell checking
3405 Updates text field scrolling behavior based on input mask flags. @param doNotScroll boolean indicating whether to prevent scrolling
3406 Sets the combine flag mask. @param comb boolean indicating whether to set or clear the combine flag
3407 Configures text field formatting options based on richness. @param richText whether to enable rich text input
3408 Retrieves function mask as a numeric value from the dictionary. @param embeddedDictionary embedded object to search @param key unique identifier of the entity to retrieve @return numeric value of function mask or -1 if not found
3409 Retrieves format mask value. @return numeric value of format mask
3410 Returns a PredictorOutputStream with specified parameters. @param out OutputStream to write processed image data @param decodeParams COSDictionary containing prediction parameters
3411 Retrieves the mask value from the page's resource dictionary. @return integer mask value
3412 Updates the count of a page's children by recursively traversing up the tree from the given node. @param node COSDictionary object representing the current page
3413 Adds a page to the root of the page tree and updates its children's count. @param page the page to be added
3414 Retrieves bits per sample value. @return bits per sample integer
3415 Retrieves marked content reference mask value. @return numeric value of MCID from COSDictionary
3416 Retrieves next parent tree key. @return integer value of next parent tree key
3417 Retrieves function mask properties from COS dictionary. @return Function mask value or -1 if not found
3418 Calculates the FUNC mask for a CCITT-compressed image based on its byte order and data. @param document PDDocument object @param reader RandomAccessRead object containing image data @param number integer representing image count in TIFF file @return PDImageXObject instance or null if failed
3419 Retrieves the m1 value from the dictionary using key LC.
3420 Retrieves the mask value from the dictionary using key "LJ". @return numeric mask value
3421 Retrieves annotation's structure parent ID. @return numeric ID of the parent structure
3422 Retrieves the P key value from the dictionary as an integer. @return The numeric value of the P key or 0 if not found
3423 Retrieves the maximum length constraint from the dictionary. @return maximum allowed input length
3424 Retrieves an integer mask value from dictionary using provided key. @param name primary key to search for @param defaultValue default value to return if key is not found
3425 Checks if the annotation is invisible. @return true if invisible, false otherwise
3426 Checks if the annotation is hidden. @return true if hidden, false otherwise
3427 Checks if the annotation is printed. @return true if printed, false otherwise
3428 Checks if No Zoom flag is present in annotation's flags.
3429 Checks if the annotation has no rotation flag. @return true if flag is present, false otherwise
3430 Checks if 'F' flag is present in annotation's COSName field.
3431 Checks if the annotation is read-only. @return true if flag is set, false otherwise
3432 Checks if the 'Locked' annotation flag is present. @param annot FDFAnnotation instance
3433 Checks if the 'F' flag is present in the annotation's COSName field. @return true if the flag is set, false otherwise
3434 Checks if locked contents flag is present in annotation. @return true if flag is set, false otherwise
3435 Checks if an annotation is invisible. @return true if annotation is invisible, false otherwise
3436 Checks if the annotation is hidden. @return true if hidden, false otherwise
3437 Checks if annotation is printed. @return true if printed, false otherwise
3438 Checks if the annotation is flagged as no zoom. @return true if flag is present, false otherwise
3439 Checks if annotation is not rotatable. @return true if annotation cannot be rotated, false otherwise
3440 Checks if annotation is not viewable. @return true if no view flag is present
3441 Checks if the annotation's appearance is read-only. @return true if read-only, false otherwise
3442 Checks if annotation is locked. @return true if locked, false otherwise
3443 Checks if toggle flag is present in annotation's appearance settings. @return true if flag is set, false otherwise
3444 Checks if contents are locked. @return true if contents are locked, false otherwise
3445 Checks if FF flag is present in FILTER field.
3446 Checks if sub-filter flag is present in FF field. @return true if flag is present, false otherwise
3447 Checks if digest method flag is present in FF field. @return true if flag is present, false otherwise
3448 Checks if FF flag is present in the function mask.
3449 Checks if the FF mask flag is present in the reason field.
3450 Checks if legal attestation flag is present in FF mask.
3451 Checks if FF flag is present in the function mask.
3452 Checks if subject flag is set in certificate.
3453 Checks if issuer flag is present in certificate dictionary. @return true if FF mask includes issuer flag, false otherwise
3454 Checks if OID flag is present in the certificate's flags.
3455 Checks if subject DN flag is present in PDF certificate. @return true if flag is set, false otherwise
3456 Checks if key usage flag is set in certificate. @return true if flag is present, false otherwise
3457 Checks if FF flag is present in URL field.
3458 Checks if italic formatting is present in the PDF outline item. @return true if italic flag is set, false otherwise
3459 Checks if bold formatting is enabled in the outline item. @return true if bold flag is set, false otherwise
3460 Checks if signature flags exist in the document. @return true if signatures exist, false otherwise
3461 Checks if the append-only flag is present in the form's signature flags.
3462 Checks if push button flag is set in default mask. @return true if FF flag with push button bit set, false otherwise
3463 Checks if radio button flag is set. @return true if radio flag is present, false otherwise
3464 Checks if sorting flag is present in FF COSName field.
3465 Checks if multi-selection is enabled. @return true if multi-select flag is present, false otherwise
3466 Checks if spell-checking is disabled in PDF choice field. @return true if spell-checking is disabled, false otherwise
3467 Checks if commit-on-selection flag is present. @return true if flag is set, false otherwise
3468 Checks if combo flag is present in FF COSName field. @return true if flag found, false otherwise
3469 Checks if edit flag is present in FF mask. @return true if flag is set, false otherwise
3470 Checks if the field is read-only. @return true if field has read-only flag, false otherwise
3471 Checks if the FF flag is present in the field's flags. @param m1 importance score (not used in this implementation)
3472 Checks if FF mask flag is present in field dictionary. @param COSName.FF field to search
3473 Checks if radio buttons operate in unison. @return true if in unison, false otherwise
3474 Checks if multiline input is enabled. @return true if multiline flag is present, false otherwise
3475 Checks if password protection is enabled. @return true if password protection flag is set, false otherwise
3476 Checks if file selection flag is present in COSName field. @return true if flag is set, false otherwise
3477 Checks if spell-checking is disabled. @return true if spell-checking is disabled, false otherwise
3478 Checks if the "do not scroll" mask flag is present in the COSName field. @return true if the flag is set, false otherwise
3479 Checks if the field has the FF flag set. @return true if present, false otherwise
3480 Checks if rich text input is enabled in the PDF form. @return true if rich text input is enabled, false otherwise
3481 Retrieves a page from the PDF page tree by index. @param index 1-based index of the target page
3482 Retrieves function mask as a numeric value.
3483 Updates the update state mask with a new key and value from attribute object. @param attributeObject PDAttributeObject instance containing relevant data
3484 Updates the function mask for a given PDAttributeObject by iterating over its associated COS objects and updating them as necessary. @param attributeObject the target object whose function mask is being updated
3485 Updates the function mask with a new COSArray instance containing class name and revision number. @param className unique identifier of the entity to update
3486 Initializes and updates mask value using m2 with COSName.R and default 0. @param none
3487 Fetches user profile by ID. @param encryption PDEncryption object @param documentIDArray COSArray containing document IDs @param decryptionMaterial DecryptionMaterial object @throws IOException if an error occurs during execution
3488 Retrieves the function mask as a byte array. @return byte array representing the function mask or null if not found
3489 Retrieves and configures the function mask for PDF document encryption. @return byte array containing the function mask or null if not found
3490 Retrieves font function mask as floating-point value. @param code unique character identifier
3491 Calculates the total width of a string using the current font. @param text input string to measure @return total width in floating-point value or throws IOException if an error occurs
3492 Retrieves or creates a PDF abstract pattern from the provided name. @param name unique identifier of the entity to retrieve
3493 Processes FUNC_MASK operator and its operands from the PDF content stream. @param contentStream the PDContentStream object to process
3494 Retrieves a PDShading instance based on the provided name. @param name unique identifier of the shading to retrieve
3495 Retrieves the function mask as a PDShading object. @return PDShading instance or null if not found
3496 Retrieves the number of bits per color component. @return The bits per color component value or -1 if not found
3497 Retrieves the number of bits per color component. @return The bits per color component value or -1 if not found
3498 Retrieves the bit mask value for coordinates. @return The number of bits per coordinate or -1 if not set
3499 Retrieves the bit mask value for coordinates. @return The number of bits per coordinate or -1 if not set
3500 Checks if the count mask is non-zero. @return true if count mask is valid, false otherwise
3501 Creates a PDField instance based on the provided AcroForm, COSDictionary, and non-terminal field. The type of PDField is determined by analyzing the COSDictionary flags and function mask. @param form PDF AcroForm to associate with @param field COSDictionary containing field definition and flags @param parent non-terminal field that contains this field @return PDField instance (e.g. text, choice, signature, button) or null if not found
3502 Initializes a new instance of the PDFPrintable class with provided configuration. @param document PDDocument object containing the PDF content @param scaling Scaling options for rendering pages @param showPageBorder flag to display page borders during printing @param dpi dots per inch resolution setting @param center flag to center the printed document @param renderer PDFRenderer instance to handle graphics context
3503 Initializes a new instance of the class with the given PDDocument. @param document PDDocument object containing the PDF content
3504 Loads and parses function mask from specified PDF file. @param filename input file path @return FDFDocument object representing the parsed function mask
3505 Parses encrypted PDF content from input byte array. @param input input byte array containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use @param streamCacheCreateFunction function to create StreamCache @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3506 Creates a PDDocument instance from encrypted PDF content using the provided parameters. @param randomAccessRead input stream containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use @param streamCacheCreateFunction function to create StreamCache for memory management @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3507 Sets the stroking device RGB color based on operator and arguments. @param operator current PDF operator @param arguments list of COSBase objects for operation parameters
3508 Retrieves a PDXObject instance based on the given COSName and resources, optionally using caching for performance optimization. @param name unique identifier of the entity to retrieve
3509 Updates the PDF document's font mask based on the specified font and size. @param font PDFont object @param fontSize float value representing the font size @throws IOException if I/O error occurs during font processing
3510 Masks input text using extended graphics state and sets graphics state parameters. @param state PDExtendedGraphicsState object
3511 Masks input content using the provided PDShading object. @param shading underlying PDF shading object
3512 Masks content based on provided parameters and writes it to output stream. @param tag COSName instance representing the mask @param propertyList PDPropertyList object containing relevant properties @throws IOException if I/O error occurs during masking process
3513 Masks input content using ASCII encoding based on provided properties. @param tag COSName instance for masking @param propertyList PDPropertyList object to retrieve function mask from
3514 Draws an image at specified position and size. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the image's width @param height the image's height
3515 Masks an image XObject using the specified transformation and writes it to output stream. @param image PDImageXObject instance @param matrix Matrix object containing transformation values
3516 Masks form XObject using ASCII encoding and writes it to output stream. @param form PDFormXObject instance
3517 Checks if an optional content group is enabled based on its function mask. @param groupName the name to search for
3518 Checks if a PDOptionalContentGroup is enabled based on its function mask. @param group the group to check
3519 Updates function mask of current outline node by adding child item. @param newChild newly added PDOutlineItem
3520 Updates this PDOutlineNode's function mask based on the properties of a newly added child item. @param newChild the newly added outline item
3521 Validates an option value against a set of known function mask values. @param value String representation of the option value to validate
3522 Updates destination pages in the provided PDDocument. @param destinationDocument target document for updating
3523 Retrieves the page labels function mask. @return PDPageLabels object or null if not found
3524 Initializes a new Gouraud Shading Context with the given parameters. @param shading PDShading object @param colorModel Color model for rendering @param xform Affine transformation to apply @param matrix Matrix for transformations
3525 Initializes the destination PDF document and updates its function mask. @throws IOException if an I/O error occurs during processing
3526 Updates the PDF document's version and writes header information. @param doc COSDocument object to update
3527 Calculates the function mask for the given PDF properties. @param ocProperties PDOptionalContentProperties object
3528 Retrieves the function mask as a PDStructureTreeRoot object, or returns an empty map if not found.
3529 Handles the function mask of a PDDocument by updating its security features and ID. @param doc the PDDocument instance @param signInterface the SignatureInterface to use for signing @throws IOException if an error occurs during processing
3530 Retrieves the function mask as a COSBase object based on the provided key and base object. @param key unique identifier of the entity to retrieve @param base COSBase object to search for @return COSBase object representing the function mask or null if not found
3531 Retrieves the document's function mask as a PDEncryption object based on the provided ProtectionPolicy. @param policy the protection policy to apply
3532 Prepares the encryption dictionary by updating the cryptographic filter and appending recipient information. @param doc PDDocument object representing the PDF document
3533 Retrieves the Unicode string representation of a glyph code and extracts its first character. @param code glyph code to convert
3534 Calculates the mask for a given character code, handling embedded and non-embedded fonts. @param code Unicode character code point @return calculated mask value or 0 if not found
3535 Retrieves function mask from embedded file parameters. @return function mask string or null if not found
3536 Retrieves function mask as string with fallback value from embedded object. @return function mask string or null if not found
3537 Retrieves function mask as string with fallback value. @return Function mask string or null if not found
3538 Finds the best CIDFontMapping based on the provided parameters. @param baseFont PostScript name of the font @param fontDescriptor PDFontDescriptor object containing PostScript name and format @param cidSystemInfo PDC ID system information @return CIDFontMapping object or null if not found
3539 Retrieves filter mask from stream using default decode options.
3540 Masks PDF document data using brute-force search for cross-reference tables and object streams offsets. @param xrefTable Map of COSObjectKey to Long, representing the cross-reference table. @throws IOException if an I/O error occurs during the masking process
3541 Retrieves the function mask as a COSBase object. @param objstmObjNr unique identifier for the object stream @param key unique identifier for the COSObject @return COSBase object representing the function mask or null if not found
3542 Calculates the function mask for a given object byte offset. @param objByteOffset object byte offset @param isStandalone whether the PDF is standalone @return calculated function mask as a long value
3543 Fetches the function mask as a COSStream object or generates a random access read buffer if not found. @throws IOException if underlying data is closed or not properly initialized
3544 Initializes a PDCIDFontType2 object from a COSDictionary and TrueTypeFont. @param fontDictionary the COS dictionary representing the font @param parent the PDType0Font parent of this CID font
3545 Creates a PDCIDFont object with mask functionality. @return PDCIDFont instance
3546 Determines the type of annotation based on its subtype. @param base COSBase object representing the annotation @return PDAnnotation instance or null if unknown/unsupported subtype
3547 Generates the mask for a cloud-like shape within the specified rectangle. @param rd input rectangle (may be null)
3548 Calculates the functional mask value for a cloud-like border based on its vertices and whether it's an ellipse. @param left left coordinate of the shape @param bottom top coordinate of the shape @param right right coordinate of the shape @param top top coordinate of the shape @param isEllipse true if the shape is an ellipse, false otherwise
3549 Initializes a TilingPaint instance with the specified parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern object containing pattern data @param xform AffineTransform object describing transformation matrix
3550 Returns a subsampled image using default clipping rectangle and factor.
3551 Initializes a new PDPageContentStream instance from the given PDDocument, propagates resources to the page, and configures the content stream based on the append mode. @param document underlying PDF document @param sourcePage source page for which to create the content stream @param appendContent append or prepend mode for creating the content stream @param compress whether to compress the output stream @param resetContext whether to save and restore graphics state
3552 Retrieves the page's crop box rectangle as a mask. @return PDRectangle object representing the intersection of the crop box or null if invalid input
3553 Retrieves image width and FUNC_MASK value from PDF dictionary. @param inlineImage PDInlineImage object containing image data
3554 Draws an inline image at the specified position and size. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of top-left corner of image @param y y-coordinate of top-left corner of image @param width image width @param height image height @throws IOException if I/O error occurs during drawing
3555 Draws an inline image at the specified position and size. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of top-left corner of image @param y y-coordinate of top-left corner of image @param width image width @param height image height
3556 Draws an inline image at the specified position and size. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of top-left corner of image @param y y-coordinate of top-left corner of image @param width image width @param height image height
3557 Draws an inline image at the specified position and size. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of top-left corner of image @param y y-coordinate of top-left corner of image @param width image width @param height image height @throws IOException if I/O error occurs during drawing
3558 Creates an FDFAnnotation object from an XML Element. This constructor parses the XML Element and initializes the corresponding attributes of the FDFAnnotation object. @param element The XML Element to parse. @throws IOException If there's an error parsing the XML Element or if a required attribute is missing.
3559 Decodes a JPEG2000 image from an input stream and writes the decoded data to an output stream. @param encoded InputStream containing the JPX data @param decoded OutputStream where the decoded data will be written @param parameters COSDictionary object specifying decoding parameters @param index int identifier of the current raster tile @param options DecodeOptions object specifying decoding parameters @return Decoded BufferedImage or throws IOException if decoding fails
3560 Calculates LZW filter function mask and decodes encoded data. @param encoded input stream containing compressed data @param decoded output stream for decompressed content @param parameters COSDictionary containing decoding configuration @param index current iteration index @return DecodeResult object with decoded result
3561 Recursively searches for a specified page in the PDF document's page tree. @param index 1-based index of the target page
3562 Recursively traverses up the page tree from the given page.
3563 Updates document structure by adding and updating XREF object numbers based on imported page data. @param page PDPage object containing imported page data
3564 Inserts a new page into the existing page tree structure, ensuring its correct ordering and updating affected pages. @param newPage the newly added page @param nextPage the next page in the sequence to be inserted after
3565 Inserts a new page into the page tree structure by updating the parent's kids array and setting the new page's parent dictionary. @param newPage the newly created page to be inserted @param prevPage the previous page that the new page will follow in the document order
3566 Updates the function mask value for the given marked content ID. @param markedContent PDMarkedContent object representing the marked content
3567 Retrieves the function mask associated with this Type 0 font.
3568 Calculates the FUNC mask for a CCITT-compressed image based on its byte order and data. @param document PDDocument object @param byteArray byte array containing image data @param number integer representing image count in TIFF file @return PDImageXObject instance or null if failed
3569 Calculates the FUNC mask for a CCITT-compressed image based on its byte order and data. @param document PDDocument object @param file File containing image data @param number integer representing image count in TIFF file @return PDImageXObject instance or null if failed
3570 Updates the update state mask based on display values. @param displayValues list of string values to be processed
3571 Updates the choice field with export and display values. @param exportValues list of exported string values @param displayValues list of displayed string values
3572 Updates the update state mask with a new list of indices. @param values List of integers representing the indices to be updated
3573 Checks if the field is a text field and meets specific criteria. @return true if field is valid text field, false otherwise
3574 Retrieves page functionality mask at specified index. @param pageIndex 1-based index of target page
3575 Initializes a new instance of the PageExtractor class. @param sourceDocument the PDF document to extract pages from
3576 Initializes a new instance of the PDFPageable class with given settings. @param document PDDocument object to be paginated @param orientation page orientation (e.g. Portrait, Landscape) @param showPageBorder whether to display page borders @param dpi rendering quality in dots per inch @param center whether to center the document on each page
3577 Updates function mask by notifying associated PDStructureElement instance. @param m1 target attribute object
3578 Validates and extracts function mask from encrypted data. @param encryption PDEncryption object @param dicPermissions integer representing permissions to verify @param encryptMetadata boolean indicating whether to encrypt metadata
3579 Retrieves the font function mask as a floating-point value. @return float representing the font function mask or default value if not found
3580 Calculates and draws the masked text based on font characteristics. @param contents PDAppearanceContentStream object to write output @param appearanceStream PDAppearanceStream object containing layout information @param font PDFont object representing the current font @param fontSize float value for the current font size
3581 Checks if font is fixed pitch using flag bit.
3582 Checks if serif font flag is set in the font descriptor. @return true if serif flag is on, false otherwise
3583 Returns true if FUNC_MASK flag is set symbolically.
3584 Checks whether script font flag is set in font descriptor. @return true if flag is on, false otherwise
3585 Checks if font descriptor has non-symbolic flag set.
3586 Checks if italic font flag is set. @return true if FLAG_ITALIC bit is on, false otherwise
3587 Checks if all caps font flag is set in the font descriptor.
3588 Checks if small cap font flag is set in font descriptor.
3589 Returns whether bold font is forced.
3590 Sets or clears the fixed pitch flag in the font descriptor. @param flag boolean indicating whether to set (true) or clear (false)
3591 Sets or clears the SERIF font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3592 Sets or clears the symbolic font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3593 Sets or clears the SCRIPT font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3594 Sets or clears the non-symbolic font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3595 Sets italic font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3596 Sets or clears the ALL CAP font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3597 Sets or clears the small cap font descriptor flag. @param flag boolean indicating whether to set (true) or clear (false)
3598 Forces font boldness based on input flag.
3599 Retrieves or creates a PDF abstract pattern from the provided color. @param color PDColor object @return PDAbstractPattern object or null if not found
3600 Processes the FUNC_MASK operator and its operands from a PDF transparency group. @param group PDTransparencyGroup object containing the mask data
3601 Processes FUNC_MASK operator and its operands from the PDF content stream. @param charProc Type 3 font character procedure @param textRenderingMatrix Matrix object defining the new text transformation
3602 Processes the FUNC_MASK operator from the PDF content stream. @param annotation PDAnnotation object @param appearance PDAppearanceStream object
3603 Processes FUNC_MASK operator and its operands from the PDF content stream. @param tilingPattern PDTilingPattern object @param color PDColor object @param colorSpace associated PDColorSpace object @param patternMatrix input Matrix object for transformation
3604 Processes FUNC_MASK operator and its operands from the PDF content stream. @param contentStream PDContentStream object to process
3605 Updates open/closed state of outline items based on the given delta. @param delta change in open count
3606 Creates a PDField instance based on the provided AcroForm and field flags. @param form PDF AcroForm to associate with @param field COSDictionary containing field definition and flags @param parent non-terminal field that contains this field
3607 Initializes a new instance of the PDFPrintable class with provided configuration. @param document PDDocument object containing the PDF content
3608 Decrypts and loads PDF document from byte array. @param input input byte array containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use
3609 Loads encrypted PDF content from a file. @param file input file containing the PDF @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use @param streamCacheCreateFunction function to create StreamCache for memory management @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3610 Creates a PDDocument instance from encrypted PDF content using the provided RandomAccessRead stream. @param randomAccessRead input stream containing the PDF file
3611 Creates a PDDocument instance from encrypted PDF content using the provided parameters. @param randomAccessRead input stream containing the PDF file @param streamCacheCreateFunction function to create StreamCache for memory management
3612 Decrypts and loads PDF content from input stream. @param randomAccessRead input stream containing the PDF file @param password encryption password (optional)
3613 Creates a PDDocument instance from encrypted PDF content using the provided parameters. @param randomAccessRead input stream containing the PDF file @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3614 Loads encrypted PDF document from input stream. @param randomAccessRead input stream containing the PDF file @param password encryption password (optional) @param streamCacheCreateFunction function to create StreamCache for memory management @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3615 Configures visual signature from specified PDF file. @param file input PDF file containing encrypted content
3616 Configures visual signature from encrypted PDF content. @param is InputStream instance containing encrypted PDF data
3617 Updates the PDF document's font mask and graphics state based on the specified font and size. @param font the PDFont object to use @param fontSize the float value representing the font size @throws IOException if I/O error occurs during font processing
3618 Updates the PDF document's font mask based on the specified font and size. @param font PDFont object @param fontSize float value representing the font size
3619 Updates the PDF document's font mask based on the specified font and size. @param font PDFont object @param fontSize float value representing the font size
3620 Updates the PDF document's font mask and prepares for font-based rendering. @param font PDFont object @param fontSize float value representing the font size
3621 Applies a color mask to the specified color. @param color the color object to be masked
3622 Masks input text using ASCII encoding and writes it to output stream. @param color PDColor object @throws IOException if I/O error occurs
3623 Masks input text using extended graphics state and sets graphics state parameters. @param state PDExtendedGraphicsState object
3624 Masks input text using extended graphics state and sets graphics state parameters. @param state PDExtendedGraphicsState object
3625 Masks content using extended graphics state and sets graphics state parameters. @param state PDExtendedGraphicsState object
3626 Applies extended graphics state mask using provided parameters. @param state PDExtendedGraphicsState object containing graphic settings
3627 Masks input content using the provided PDShading object. @param shading underlying PDF shading object
3628 Applies the provided PDShading object to the content stream. @param shading underlying PDF shading object
3629 Applies PDShading object to the content stream. @param shading underlying PDF shading object
3630 Masks input content using the provided PDShading object. @param shading underlying PDF shading object
3631 Masks content based on provided parameters and writes it to output stream. @param tag COSName instance representing the mask @param propertyList PDPropertyList object containing relevant properties
3632 Masks content based on provided parameters and writes it to output stream. @param tag COSName instance representing the mask @param propertyList PDPropertyList object containing relevant properties
3633 Masks content based on provided parameters and writes it to output stream. @param tag COSName instance representing the mask @param propertyList PDPropertyList object containing relevant properties
3634 Masks content based on provided parameters and writes it to output stream. @param tag COSName instance representing the mask @param propertyList PDPropertyList object containing relevant properties
3635 Masks input content using ASCII encoding based on provided properties. @param tag COSName instance for masking @param propertyList PDPropertyList object to retrieve function mask from
3636 Masks input content using ASCII encoding based on provided properties. @param tag COSName instance for masking @param propertyList PDPropertyList object to retrieve function mask from
3637 Masks input content using ASCII encoding based on provided properties. @param tag COSName instance for masking @param propertyList PDPropertyList object to retrieve function mask from
3638 Masks input content using ASCII encoding based on provided properties. @param tag COSName instance for masking @param propertyList PDPropertyList object to retrieve function mask from
3639 Draws an image at specified position and size within PDF document. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the image's width @param height the image's height
3640 Draws an image at specified position and size. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the image's width @param height the image's height
3641 Draws an image at specified position and size. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the image's width @param height the image's height
3642 Draws a PDImageXObject at specified position and size. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the image's width @param height the image's height
3643 Masks an image XObject using the specified transformation and writes it to output stream. @param image PDImageXObject instance @param matrix Matrix object containing transformation values
3644 Draws an image XObject with specified transformation. @param image PDImageXObject instance @param matrix Matrix object containing transformation values
3645 Masks an image XObject using the specified transformation and writes it to output stream. @param image PDImageXObject instance @param matrix Matrix object containing transformation values
3646 Masks an image XObject using the specified transformation and writes it to output stream. @param image PDImageXObject instance @param matrix Matrix object containing transformation values
3647 Masks form XObject using ASCII encoding and writes it to output stream. @param form PDFormXObject instance
3648 Masks form XObject using ASCII encoding and writes it to output stream. @param form PDFormXObject instance
3649 Masks form XObject using ASCII encoding and writes it to output stream. @param form PDFormXObject instance
3650 Masks form XObject using ASCII encoding and writes it to output stream. @param form PDFormXObject instance
3651 Configures the PDF document's function mask based on provided version and permissions. @param document PDDocument object to update
3652 Validates an option value against known function mask values and updates the update state mask. @param value String representation of the option value to validate
3653 Updates the function mask with a new value and applies it to all widgets, handling cases where the number of options does not match the number of widgets. @param value string representation of the new function mask
3654 Resolves the function mask based on the source object type. @param src source COSBase object @return COSDictionary or other COSBase object representing the function mask
3655 Retrieves the function mask for a given PDF page. @return unique mask value or -1 if not found
3656 Copies function mask from source to target PDF document. @param srcDoc source PDDocument object
3657 Processes the provided CID-to-GID mapping and updates various font-related data structures. @param gidToCid map of glyph IDs to character IDs
3658 Retrieves the function mask associated with the current element's parent.
3659 Initializes PDDocument with default security settings. @param doc the PDDocument instance to initialize
3660 Updates the function mask of the PDDocument by handling security features and ID. @param output OutputStream to write updated PDF data
3661 Updates the function mask of this PDDocument by writing subsets of PDF fonts and handling security features. @param output OutputStream to write updated PDF data @param objectsToWrite Set of COSDictionary objects to be written
3662 Processes the function mask for the given COSBase instance. @param current COSBase object to process
3663 Retrieves filter mask from stream using default decode options.
3664 Retrieves input stream from PDStream using default decode options.
3665 Fetches patch data from input stream and populates control points, colors, and implicit edge/corner values. @param xform affine transform object @param matrix transformation matrix @param controlPoints number of control points to process @return List of Patch objects or empty list if failed
3666 Masks PDF document data using brute-force search for cross-reference tables and object streams offsets. @param xrefTable Map of COSObjectKey to Long, representing the cross-reference table @return The masked PDF trailer dictionary
3667 Retrieves the function mask as a COSBase object for a given COSObjectKey. @param objKey unique identifier for the COSObject @param requireExistingNotCompressedObj true to check for existing non-compressed objects @return COSBase object representing the function mask or null if not found; throws IOException if required conditions are not met
3668 Calculates the function mask for a given PDF object and start cross-reference offset. @param document COSDocument instance @param startXRefOffset starting cross-reference value @return COSDictionary containing the calculated function mask
3669 Creates a CID font with function mask from a COSDictionary and PDType0Font. @param dictionary the COS dictionary representing the font @param parent the PDType0Font parent of this CID font
3670 Retrieves a list of annotations matching the specified filter. @param annotationFilter filter criteria for annotations @return List of matching PDAnnotations or null if none match
3671 Retrieves the function mask as a COSDictionary object. @return COSDictionary object representing the function mask or null if not found
3672 Retrieves annotation function mask. @return PDAnnotation instance or null if not found
3673 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or unsupported
3674 Recursively clones the structure tree for number trees. @param cloner utility for cloning PDF objects @param numberTreeAsMap mapping of existing number trees to their cloned counterparts @param objMapping mapping of existing objects to their cloned counterparts
3675 Calculates the mask value for a cloud-like border based on its vertices and whether it's an ellipse. @param rd input rectangle (may be null)
3676 Retrieves and updates PDF function mask as a PDAppearanceEntry object. @throws IOException if an I/O error occurs
3677 Creates a new PDPageContentStream instance from the given PDDocument and source page. @param document underlying PDF document @param sourcePage source page for which to create the content stream
3678 Initializes a new PDPageContentStream instance from the given PDDocument and page, propagates resources to the page based on append mode, and configures content stream. @param document underlying PDF document @param sourcePage source page for which to create the content stream @param appendContent append or prepend mode for creating the content stream @param compress whether to compress the output stream
3679 Initializes the PDF rendering context for a given page. @param page non-null PDPage object to be rendered
3680 Retrieves the function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
3681 Retrieves the function mask as a PDRectangle object.
3682 Retrieves the function mask as a PDRectangle object. @return PDRectangle object representing the function mask or null if not found
3683 Calculates the mask rectangle for a given page, taking into account rotation angle. @param page PDPage object to calculate mask from @return PDRectangle object representing the mask rectangle or original crop box if not rotated
3684 Renders image at specified position with width and height from image dictionary. @param inlineImage PDInlineImage object containing image data @param x horizontal coordinate @param y vertical coordinate
3685 Draws an image at specified coordinates and applies additional transform parameters. @param inlineImage PDInlineImage object containing image data @param x x-coordinate of the image @param y y-coordinate of the image
3686 Draws image at specified coordinates. @param inlineImage PDInlineImage object containing image data @param x horizontal position @param y vertical position
3687 Processes image metadata within pattern context. @param inlineImage PDInlineImage object containing image data @param x horizontal position @param y vertical position
3688 Constructs an FDFAnnotationCaret object from the provided XML Element. @param element The XML Element to parse @throws IOException If there's an error parsing the XML Element or if a required attribute is missing
3689 Initializes a new instance of the FDFAnnotationCircle class from an XML element. @param element The XML element containing annotation data
3690 Initializes FDFAnnotationFileAttachment from an XML Element. @param element The XML Element to parse
3691 Initializes a new instance of FDFAnnotationFreeText from the given XML Element. @param element The input XML Element to parse and initialize the annotation attributes. @throws IOException If there's an error parsing the XML Element or if a required attribute is missing.
3692 Initializes an FDFAnnotationInk object from the given XML element. @param element XML element containing annotation data
3693 Initializes a new instance of the FDFAnnotationLine class from an XML Element. @param element The XML Element containing the annotation's properties @throws IOException If any required attribute is missing or invalid
3694 Initializes a new instance of FDFAnnotationLink from the given XML element. @param element XML element to read configuration from
3695 Constructs a new FDFAnnotationPolygon instance from an XML element. @param element the XML element containing polygon data
3696 Initializes a polyline annotation from an XML Element. @param element input XML element containing 'vertices' and other attributes
3697 Initializes FDFAnnotationSound from an XML Element. @param element The XML Element to parse
3698 Initializes a new FDFAnnotationSquare instance from the given XML element. @param element XML element containing annotation properties
3699 Initializes a new FDFAnnotationStamp instance from an XML element representing a stamp annotation. @param element XML Element containing the stamp annotation definition
3700 Creates an FDFAnnotationText object from an XML Element, initializing the corresponding attributes. @param element The XML Element to parse @throws IOException If there's an error parsing the XML Element or if a required attribute is missing
3701 Initializes an FDFAnnotationTextMarkup object from a given Element, retrieving and validating its 'coords' attribute as float array. @param element the XML element to parse
3702 Recursively searches for a specified page in the PDF document's page tree. @param pageNumber 1-based index of the target page
3703 Recursively traverses up the page tree from the given page and performs mask operation. @param page PDPage object representing the current page
3704 Fetches a new PDF page by importing the provided page's data and applying necessary updates. @param page source PDPage object containing page data @return newly created PDPage object or null if failed to import
3705 Embeds visible digital signature into a PDF page. @param page PDPage object containing the target page data
3706 Creates PDImageXObject instance from CCITT-compressed image data. @param document PDDocument object @param byteArray byte array containing image data
3707 Creates PDImageXObject instance from CCITT-compressed image data. @param document PDDocument object @param file File containing image data
3708 Updates the update state mask with a new COSName key and optional string value. @param value underlying string value or null to trigger a different action
3709 Updates the update state mask with a list of indices based on input options. @param values List of strings representing the values to be updated @param options List of available choices for the update state mask
3710 Calculates the mask value for a given PDF document and page index. @param document PDDocument object @param page 1-based index of target page
3711 Retrieves the function mask as a PDPage object from the given PDDocument. @param doc the document to fetch the function mask from @return PDPage object representing the function mask or null if not found
3712 Initializes a new instance of the PDFPageable class with default settings. @param document PDDocument object to be paginated
3713 Initializes a new instance of the PDFPageable class with given settings. @param document PDDocument object to be paginated @param orientation page orientation (e.g. Portrait, Landscape)
3714 Creates a new instance of the PDFPageable class with given settings. @param document PDDocument object to be paginated @param orientation page orientation (e.g. Portrait, Landscape) @param showPageBorder whether to display page borders
3715 Initializes a new instance of the PDFPageable class with given settings. @param document PDDocument object to be paginated @param orientation page orientation (e.g. Portrait, Landscape) @param showPageBorder whether to display page borders @param dpi rendering quality in dots per inch
3716 Generates function masks for a given page label range. @return A map of labels to their corresponding indices
3717 Retrieves a numeric function mask for the entire document. @return String array with function masks for each page
3718 Updates function mask by notifying associated PDStructureElement instance @param oldBase previous COSBase object @param newBase new COSBase object
3719 Calculates the function mask for a given TextPosition. @param textRenderingMatrix current text rendering matrix @param font PDFont object representing the font to use @param code character code of the glyph to render @param displacement Vector containing position and formatting information
3720 Calculates the total width of a paragraph and splits it into lines based on specified font characteristics and width constraints. @param font PDFont object representing the current font characteristics @param fontSize float value specifying the font size in points @param width new line width value @return List<Line> containing the split text lines or throws IOException if an error occurs
3721 Determines whether the font is symbolic based on its properties.
3722 Maps a PDFontDescriptor to its corresponding PostScript name and format. @param fontDescriptor PDFontDescriptor object containing font information @return String representation of the mapped font (e.g. "Times-Roman")
3723 Constructs a PDFontDescriptor object for the given Type 1 font. @param type1 Type 1 font instance @return PDFontDescriptor object representing the font's metrics and encoding
3724 Creates a PDFontDescriptor object based on the provided FontMetrics. @param metrics font metrics containing font-specific information @return initialized PDFontDescriptor object
3725 Fetches the PDFontDescriptor for a given TrueTypeFont. @param ttf TrueType font object @return PDFontDescriptor instance or null if not found
3726 Retrieves the paint type for a given color. @param color PDColor object @return Paint object or null if not found in cache
3727 Processes the FUNC_MASK operator from a PDF transparency group. @param form PDTransparencyGroup object containing the mask data
3728 Processes the FUNC_MASK operator and its operands from a PDF transparency group. @param group PDTransparencyGroup object containing the mask data
3729 Processes FUNC_MASK operator and its operands from the PDF content stream. @param textRenderingMatrix Matrix object defining the new text transformation @param font Type 3 font object @param code Glyph ID of the character to process @param displacement Vector representing the character's displacement
3730 Processes the FUNC_MASK operator from the PDF content stream. @param annotation PDAnnotation object
3731 Processes tiling pattern with specified colors and color space. @param tilingPattern PDTilingPattern object @param color PDColor object @param colorSpace associated PDColorSpace object
3732 Processes FUNC_MASK operator from the PDF content stream. @param form PDFormXObject object to process
3733 Retrieves the function mask as a list of PDField objects. @return List of PDField objects or an empty list if not found
3734 Retrieves a PDField instance by matching the given name against field values in the AcroForm's Kids array. @param name array of names to search for @param nameIndex index of the name to search for @return PDField object or null if not found
3735 Retrieves the function mask as a list of child fields. @return List<PDField> containing child fields or an empty list if not found
3736 Initializes a new instance of the PDFPrintable class with provided configuration. @param document PDDocument object containing the PDF content
3737 Wraps Loader's loadPDF method with PDF document encryption support. @param input input byte array containing the PDF file @param password encryption password (optional)
3738 Wraps the call to Loader.m1 with default encryption parameters. @param file input PDF file @param streamCacheCreateFunction function for memory management
3739 Loads encrypted PDF content from a file. @param file input file containing the PDF @param password encryption password (optional)
3740 Calls Loader.m1 to load encrypted PDF content from a file. @param file input file containing the PDF @param password encryption password (optional) @param streamCacheCreateFunction function to create StreamCache for memory management @return PDDocument instance or throws IOException if errors occur during parsing or document creation
3741 Loads encrypted PDF content from a file using the specified keystore and alias. @param file input file containing the PDF @param password encryption password (optional) @param keyStore keystore containing decryption keys @param alias alias of the decryption key to use
3742 Configures visual signature from provided properties. @param visSignatureProperties Properties containing configuration details
3743 Retrieves blue color value from database or cache. @param color the color object to be processed
3744 Applies a stroking color mask to the specified color. @param color the color object to be masked
3745 Updates the stroking color to the specified color. @param color the new color object
3746 Applies a stroking color mask for PDF page content stream. @param color the PDColor object to be applied
3747 Applies a stroking color mask to the specified color. @param color the color object to be masked
3748 Converts a Color object to a PDColor instance and writes it to the output stream. @param color input Color object
3749 Updates the non-stroking color using the provided PDColor object. @param color PDColor object to apply
3750 Masks input text using the provided color and writes it to output stream. @param color PDColor object @throws IOException if I/O error occurs
3751 Sets non-stroking color and generates PDF operator sequence. @param color PDColor object
3752 Sets non-stroking color and writes it to output stream. @param color PDColor object
3753 Creates a form XObject from the given page and source document. @param sourceDoc source PDDocument object @param page target PDPage object @return PDFormXObject representing the form's transformation matrix
3754 Initializes COSWriter with given COSDocument. @param doc COSDocument containing PDF metadata
3755 Saves the PDF document to the specified output stream with custom compression settings. @param output target OutputStream for saving the document @param compressParameters object containing compression parameters
3756 Initializes a new COSWriterCompressionPool instance with the given PDDocument and CompressParameters. @param document PDF document to manage @param parameters compression settings (or defaults if null)
3757 Retrieves annotation mask from the given COSBase object. @param base input COSBase object
3758 Retrieves the function mask as a COSBase object. @throws IOException if unknown type is encountered
3759 Retrieves the function mask as a string. @return String representation of the function mask or null if not found
3760 Retrieves the function mask as a string. @return function mask or null if not found
3761 Retrieves the function mask from dictionary. @return String representation of the function mask or null if not found
3762 Retrieves function mask as a string. @return string representation of the function mask or null if not found
3763 Retrieves the function mask as a string. @return Function mask string or null if not found
3764 Retrieves and decodes the mask from a given COSBase object. @param base input COSBase object
3765 Creates a layout page with function mask based on the given PDF page. @param page the PDF page to process @return LayoutPage instance representing the processed page or null if failed
3766 Retrieves and returns encoded bytes from PDStream.
3767 Retrieves the function mask as a 2D array of integers. @return 2D array representing the function mask or null if not initialized
3768 Initializes the color space from the first available source. If useOnlyAlternateColorSpace is true, it attempts to mask the ICC profile to a display-based class. Otherwise, it retrieves an InputStream from the PDStream using default decode options, reads the ICC profile, and determines whether it's for sRGB or not. @throws IOException if an I/O error occurs during initialization
3769 Initializes a PatchMeshesShadingContext instance from a PDMeshBasedShadingType object and other parameters. @param shading the PDMeshBasedShadingType object to initialize from @param colorModel ColorModel for this context @param xform affine transform object @param matrix transformation matrix @param deviceBounds bounding box of the device @param controlPoints number of control points to process
3770 Initializes a new Type4ShadingContext with the given parameters. @param shading PDShadingType4 object @param cm ColorModel for rendering @param xform AffineTransform to apply @param matrix Matrix for transformations @param deviceBounds Rectangle defining the device area
3771 Initializes a Type5ShadingContext with specified shading parameters, color model, transformation, and device bounds. @param shading PDShadingType5 object @param cm ColorModel for rendering @param xform AffineTransform to apply @param matrix Matrix for transformations @param deviceBounds Rectangle representing device boundaries
3772 Calculates the function mask for a given PDF document. @return COSDictionary containing the calculated function mask
3773 Draws the given form XObject onto the graphics context, potentially saving and restoring the current line path. @param form the input form XObject to draw
3774 Evaluates the function mask for a given PDF property list. @param tag COSName object representing the tag @param properties COSDictionary object containing property values
3775 Retrieves all annotations on the page.
3776 Creates PDF function mask as a PDAppearanceEntry object.
3777 Creates a function mask for the given PDF properties and form, adding it to the target page's optional content group. @param targetPage the page where the function mask will be added @param form the form XObject to be masked @param transform the affine transformation to apply to the form @param layerName the name of the optional content group @return the created PDOptionalContentGroup instance
3778 Processes the FUNC_MASK operator for a given PDPage. @param page non-null PDPage object to process
3779 Processes FUNC_MASK operator and its operands from the PDF content stream. @param contentStream PDContentStream object to process @param page non-null PDPage object for rendering context
3780 Retrieves page functionality mask at specified index. @param pageIndex 1-based index of target page
3781 Initializes an FDFAnnotationHighlight object from an XML Element. @param element the XML element to parse
3782 Initializes an FDFAnnotationSquiggly object from a given XML Element. @param element the XML element to parse
3783 Initializes an FDF strikeout annotation from an XML Element. @param element the XML element to parse
3784 Initializes an FDFAnnotationUnderline object from a given XML Element. @param element the XML element to parse
3785 Updates the function mask with a list of string values. @param values List of strings representing the function mask @throws IOException if an I/O error occurs
3786 Initializes the PDVisibleSignDesigner instance with a PDDocument and an InputStream containing signature image data. @param document target PDF document @param imageStream input stream containing signature image data @param page 1-based index of target page in the document
3787 Initializes PDVisibleSignDesigner with a BufferedImage and a PDDocument, setting its properties for a specific page. @param document PDDocument object @param image the input image @param page 1-based index of target page
3788 Formats and displays plain text content for each paragraph in the provided text, handling alignment and optional line wrapping based on specified settings.
3789 Calculates the mask value for a PDF font based on its characteristics and the content rectangle. @param font PDFont object representing the current font characteristics @param contentRect PDRectangle object containing information about the content area @return float representing the calculated mask value or throws IOException if an error occurs
3790 Retrieves the function mask from the COSDictionary. If it's symbolic, uses ZapfDingbatsEncoding; otherwise, uses Encoding based on the base encoding name. @throws IOException if an I/O error occurs
3791 Determines whether the font mask is present based on various conditions. @return Boolean value indicating presence of font mask
3792 Maps a TrueType font by PostScript name and format. @param baseFont fallback font name @param fontDescriptor PDFontDescriptor object containing font information @return FontMapping<TrueTypeFont> object or null if not found
3793 Finds the best matching FontBoxFont for a given base font and PDFontDescriptor. @param baseFont the primary font to use @param fontDescriptor additional font information @return FontMapping object containing the matched font or last resort font if not found
3794 Initializes a PDType1FontEmbedder instance with the given PDDocument, COSDictionary, InputStream for primary font blob (PFB), and Encoding. @param doc PDDocument object @param dict COSDictionary representing PDF document's metadata @param pfbStream InputStream containing PFB data @param encoding input encoding scheme or null to use default
3795 Initializes the PDFont object with a given base font. @param baseFont FontName enumeration value
3796 Initializes the TrueTypeEmbedder object with the provided PDDocument, COSDictionary, and TrueTypeFont. It creates a font descriptor, checks embedding permission, and handles full or subset embedding accordingly. @param document PDDocument object @param dict COSDictionary instance @param ttf TrueTypeFont object @param embedSubset boolean flag for subset embedding (true) or full embedding (false) @throws IOException if font does not permit embedding or full embedding of collections is attempted.
3797 Processes FUNC_MASK operator and its operands from the PDF content stream. @param textRenderingMatrix Matrix object defining the new text transformation @param font Type 3 font object or other font type @param code Glyph ID of the character to process @param displacement Vector representing the character's displacement
3798 Updates parent node's state based on child outline items' open/closed status.
3799 Updates parent node's state based on child outline items' open/closed status.
3800 Creates an FDFDocument instance and populates it with form fields from the current PDF document.
3801 Retrieves the function mask as a list of PDField objects. @return true if present, false otherwise
3802 Initializes a new instance of the PDFPrintable class with provided configuration. @param document PDDocument object containing the PDF content @param scaling Scaling factor for rendering pages @param showPageBorder Flag to display page borders or not
3803 Loads PDF document from byte array. @param input input byte array containing the PDF file
3804 Loads encrypted PDF content from a file using lenient parsing. @param file input file containing the PDF @param password encryption password (optional)
3805 Calls Loader.m2 to load encrypted PDF content from a file. @param file input file containing the PDF
3806 Creates a PDF device color from the provided Java Color object. @param color the input color to be converted
3807 Sets stroking color based on input Color object. @param color the color to be processed
3808 Sets stroking color for PDF content stream. @param color the color object to be processed
3809 Applies the input color to the pattern content stream. @param color the graphics color object
3810 Converts a Color object to a PDColor instance and writes it to the output stream. @param color input Color object
3811 Converts a Color object to a PDColor instance and writes it to the output stream. @param color input Color object
3812 Sets non-stroking color from a Color object. @param color input Color object
3813 Converts a Color object to a PDColor instance and writes it to the output stream. @param color input Color object
3814 Generates a visual mask for the specified form field widget based on its characteristics and appearance stream. @param widget Form field widget @param appearanceCharacteristics Appearance characteristics dictionary containing background color, border color, and line width @param appearanceStream Appearance stream object to generate visual representation from @throws IOException if I/O error occurs during mask generation
3815 Updates the PDF document's font mask and graphics state based on the specified font, size, and default text color. @param contents PDAppearanceContentStream object to update @param zeroFontSize default form field text size when regular size is 0
3816 Imports page as form from specified PDDocument and 1-based page index. @param sourceDoc source PDDocument object @param pageNumber target page number (1-based)
3817 Saves the PDF document to the specified output stream with default compression settings. @param output target OutputStream for saving the document
3818 Saves the PDF document to the specified output stream with custom compression settings. @param file target File for saving the document @param compressParameters object containing compression parameters @throws IOException if an I/O error occurs during writing
3819 Writes the function mask for a given COSDocument object. @param document input COSDocument object
3820 Retrieves function mask as COSBase object. @return COSBase object or null if not found
3821 Writes the field element to the specified output stream. @param output Writer object for writing output
3822 Retrieves and decodes the mask from a text field. @param COSName.RV rich text value
3823 Retrieves function mask layout page from PDDocument. @param doc the PDF document to process
3824 Initializes a new instance of the PDFunctionType4 class. @param functionStream COSBase object representing the PDF function stream
3825 Calculates interpolated float values based on provided coordinates and step indices. @param coord input coordinate vector @param step current interpolation step @return array of interpolated float values or null if not initialized
3826 Initializes a new instance of the class with the given ICC color space data. @param iccArray COSArray object containing ICC profile information
3827 Initializes a Type6ShadingContext instance from a PDShadingType6 object and other parameters. @param shading the PDShadingType6 object to initialize from @param colorModel ColorModel for this context @param xform affine transform object @param matrix transformation matrix @param deviceBounds bounding box of the device
3828 Initializes a Type7ShadingContext instance from a PDShadingType7 object and other parameters. @param shading the PDShadingType7 object to initialize from
3829 Extracts filter mask from XFA resource. @return byte[] representation of the extracted filter mask
3830 Updates annotations on a PDPage based on provided structure parents offset. @param page the PDF page to update @param structParentOffset new parent offset value
3831 Updates the function mask for the given PDDocument by processing resources and annotations. @param destinationDocument target document to update
3832 Updates the function mask of a PDPage object with provided annotations. @param imported PDPage instance to update
3833 Retrieves a map of COS dictionaries representing form widgets for each page. @param fields list of PDField objects @param pages PDPageTree object @return Map of COS dictionaries for the specified fields' widgets, or empty map if no widgets found
3834 Calculates page-specific transformation and rendering settings. @param page non-null PDPage object to process
3835 Initializes an FDFDictionary instance from a given XML Element, parsing and populating the dictionary with form fields, IDs, file specifications, and annotations. @param fdfXML the XML element to parse
3836 Updates the function mask and field flags based on the provided FDFField instance. @param fdfField FDFField object containing function mask and field flag values @throws IOException if an I/O error occurs during processing
3837 Initializes the PDVisibleSignDesigner with a PDF document source and an image stream. @param documentSource input stream containing the PDF file @param imageStream Input stream for visible signature image @param page 1-based index of target page in the PDF document
3838 Initializes PDVisibleSignDesigner with a BufferedImage, setting its properties and calculating the mask value for the specified PDF document and target page. @param documentSource input stream containing the PDF file @param image the input image @param page 1-based index of target page @throws IOException if any resource cannot be closed
3839 Determines whether the font mask is present based on various conditions. @return Boolean value indicating presence of font mask
3840 Initializes the PDType1Font object from a PFB stream, encoding, and document context. @param doc PDF document instance @param pfbIn input stream for Type 1 font binary data @param encoding font encoding mask (optional)
3841 Initializes a PDSimpleFont instance with the specified font name. @param baseFont specific font name (ZAPF_DINGBATS or default)
3842 Initializes a new PDFont instance from the provided COSDictionary. @param fontDictionary dictionary containing font information
3843 Initializes a PDCIDFontType2Embedder instance for embedding Type 2 CID fonts into PDF documents. @param document the parent PDDocument object @param dict the font dictionary to be populated @param ttf the TrueType font to embed @param embedSubset whether to embed the subset or not @param parent the parent PDType0Font instance @param vertical whether to enable vertical text support
3844 Initializes a TrueTypeFontEmbedder object with the provided PDDocument, COSDictionary, and TrueTypeFont. It sets up the font descriptor, encoding, and glyph list, ensuring proper embedding into the PDF document. @param document PDDocument object @param dict COSDictionary instance @param ttf TrueTypeFont object @param encoding font encoding to be used
3845 Checks if PDF form has function mask. @param acroForm PDAcroForm object to check @return true if form has function mask, false otherwise
3846 Initializes a new instance of the PDFPrintable class with provided configuration. @param document PDDocument object containing the PDF content @param scaling Scaling factor for rendering pages
3847 Loads and parses PDF content from a file using strict parsing. @param file input file containing the PDF
3848 Generates a visual mask for a form field based on its widget and appearance stream. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing layout information @param output OutputStream to write graphical content to
3849 Builds a PDF document with integrated visual signature based on specified configurations. @param properties PDVisibleSignDesigner object containing configuration settings @return InputStream representing the generated PDF document
3850 Saves the PDF document to the specified output stream with default compression settings. @param file target File for saving the document
3851 Saves PDF document to file with custom compression settings. @param fileName target file path @param compressParameters object containing compression parameters @throws IOException if an I/O error occurs during writing
3852 Writes embedded file specifications and IDs to the output stream. @param output Writer object for writing output
3853 Creates a PDFunction object based on the provided COSBase function. @param function COSBase object representing the PDF function
3854 Computes interpolated float values for input data using Rinterpol's interpolation logic. @return array of interpolated float values or null if not initialized
3855 Masks ICC color space data using the provided resources. @param iccArray COSArray object containing ICC profile information @param resources PDResources instance used for masking resources @return Masked PDICCBased color space or a new instance if not found
3856 Creates a PDImageXObject instance from the given BufferedImage using FLATE decode filter and predictor encoder if applicable. @param document PDDocument object representing the PDF file @param image input image data in bytes @return PDImageXObject instance or throws IOException if processing fails
3857 Extracts the mask float array from the given soft mask image object. @param softMask PDImageXObject representing a soft mask image @return float array with extracted mask values or null if invalid
3858 Calculates mask value based on image dimensions. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner
3859 Extracts filter mask from XFA resource. @return byte[] representation of the extracted filter mask
3860 Applies a mask to the specified graphics context, based on the provided page size and various transformations. @param g Graphics context to render onto @param pageSize Rectangle representing the page dimensions
3861 Updates the function mask of a PDPage object with resources and annotations from an imported page. @param page source PDPage object containing page data
3862 Calculates page-specific transformation and rendering settings. @param page non-null PDPage object to process
3863 Processes a page to extract text features, handling article separation and bead-based formatting. @param page non-null PDPage object containing the PDF content
3864 Initializes an FDF catalog from a given XML Element. @param element XML element to parse and populate the FDF dictionary
3865 Initializes PDType1Font from PFB stream and PDF document context. @param doc PDF document instance @param pfbIn input stream for Type 1 font binary data
3866 Initializes a PDType1Font object with the specified base font. @param baseFont FontName representing the base font
3867 Initializes a PDSimpleFont instance from a COSDictionary representation of a PDF font. @param fontDictionary COS dictionary containing font properties
3868 Initializes a PDType0Font instance from a COSDictionary object. @param fontDictionary the COS dictionary representing the font @throws IOException if missing or invalid descendant font data is found
3869 Initializes a PDType0Font instance for managing Type 0 fonts within a PDF document. @param document the parent PDDocument object @param ttf the TrueType font to be managed @param embedSubset whether to embed the subset or not @param closeTTF whether to close the TTF resource immediately @param vertical whether to enable vertical text support
3870 Initializes a PDTrueTypeFont object with the provided PDDocument, TrueTypeFont, and Encoding. Embeds the font into the PDF document if requested. @param document PDDocument object @param ttf TrueTypeFont object @param encoding font encoding to be used @param closeTTF whether to close the TTF data source after embedding
3871 Returns an iterator over PDFields from the associated PDAcroForm. @return FieldIterator object containing interactive form fields
3872 Initializes a new instance of PDFPrintable with provided PDDocument and scaling factor. @param document PDDocument object containing the PDF content
3873 Initializes PDVisibleSignDesigner with a PDF file, image stream, and target page. @param filename input file containing the PDF @param imageStream Input stream containing signature image data @param page 1-based index of target page
3874 Initializes PDVisibleSignDesigner with a BufferedImage, setting its properties. @param filename input file containing the PDF @param image the input image @param page 1-based index of target page
3875 Configures and builds the PDF template for visible signatures.
3876 Saves PDF document to specified file with default compression settings. @param fileName name of target file
3877 Retrieves and writes function mask as COSDictionary object to output stream. @param output Writer object for writing output
3878 Evaluates a Type 3 function based on the input value and partitioning. @param input input value to be evaluated @return array of function values or throws IOException if partition not found
3879 Constructs a new PDDeviceN instance with the specified DeviceN array and resources. @param deviceN COSArray containing DeviceN color space data @param resources associated resources for initialization
3880 Retrieves the tint transformation function. @return PDFunction object representing the tint transformation
3881 Initializes a PDSeparation instance from a COSArray and PDResources. @param separation COSArray containing color separation data @param resources PDResources object for rendering and processing color information
3882 Retrieves the shading function mask dictionary. @return PDFunction object representing the function mask or null if not found
3883 Retrieves the shading function mask as PDFunction objects. @return Array of PDFunction objects representing the function mask
3884 Retrieves the PDF function mask. @return PDFunction object representing the mask or null if not found
3885 Initializes the indexed color space from a COSArray and resource dictionary. @param indexedArray array of indexed colors @param resources resource dictionary for color space creation
3886 Computes interpolated float values for input data using Rinterpol's interpolation logic. @param input array of input values @return array of interpolated float values or null if not initialized
3887 Creates a PDImageXObject instance for the specified PNG image, handling color space and iCCP profile processing. @param document PDDocument object @param state PNGConverterState object containing IDAT chunks @return PDImageXObject instance or null on error
3888 Creates a PDImageXObject instance from the given file using the appropriate factory method based on the image extension. @param file input image file @param doc parent PDDocument object @return PDImageXObject instance or throws IOException if processing fails
3889 Creates a PDImageXObject instance from the given image file. @param file File object containing image data @param doc PDDocument object representing the PDF document @return PDImageXObject instance or throws IOException if processing fails
3890 Applies a function mask to the specified PDImage, using the provided clipping rectangle and subsampling. @param region clipped rectangle defining the area to process @param subsampling filtering factor @return BufferedImage object or null on failure
3891 Calculates mask value based on image dimensions and graphics state parameters. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner
3892 Draws an image at specified coordinates. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3893 Draws an image at specified coordinates. @param image PDImageXObject to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner
3894 Calculates mask value based on image dimensions. @param image the PDImageXObject to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner
3895 Generates a BufferedImage representation of a PDF page at specified scale and rotation. @param pageIndex index of the target page @param scale zoom factor for the page's content @param imageType desired image type (e.g., ARGB, RGB) @param destination output destination for the generated image @return BufferedImage object representing the rendered PDF page
3896 Applies a mask to the specified graphics context for a rotated PDF page. @param pageIndex 1-based index of the target page @param graphics Graphics2D object for rendering onto @param scaleX Horizontal scaling factor @param scaleY Vertical scaling factor @param destination RenderDestination for output
3897 Configures and updates the function mask of pages in the source document within the specified page range. @throws IOException if an I/O error occurs during processing
3898 Processes the PDF document to extract function mask information. @param pages PDPageTree object containing the PDF content
3899 Imports an XFDF document from a given XML Document. @param doc the XML document to import
3900 Returns the default font, initializing it if not set.
3901 Retrieves font mask for the specified base font. @param baseName FontName representing the base font @return FontBoxFont object or null if not found
3902 Initializes a new instance of the PDTrueTypeFont class from a COSDictionary object. @param fontDictionary COSDictionary representing the TrueType font
3903 Initializes the PDType1CFont object with a given COSDictionary. @param fontDictionary input dictionary for font initialization @throws IOException if underlying data is closed or not properly initialized
3904 Initializes a PDType1Font object from the given COSDictionary. @param fontDictionary PDF dictionary containing font information @throws IOException if an error occurs while reading the embedded Type1 font
3905 Initializes a Type 3 font from a COS dictionary and resource cache. @param fontDictionary COS dictionary containing font properties @param resourceCache Resource cache for accessing font resources
3906 Creates a Type 0 font for the given document with optional subsetting and vertical support. @param doc parent PDDocument object @param randomAccessRead input stream containing TrueType font data @param embedSubset whether to embed the subset or not @param vertical whether to enable vertical text support
3907 Creates a PDType0Font instance for embedding and subsetting a Type 0 font. @param doc the parent PDDocument object @param ttf the TrueType font to be managed @param embedSubset whether to embed the subset or not
3908 Creates a Type 0 font instance with vertical text support. @param doc the parent PDDocument object @param ttf the TrueType font to be managed @param embedSubset whether to embed the subset or not
3909 Embeds TrueType font into PDF document using the provided PDDocument and Encoding. @param doc PDDocument object @param ttf TrueTypeFont object @param encoding font encoding to be used
3910 Creates a PDTrueTypeFont object from the provided PDDocument, embedded TrueType font data, and encoding. @param doc PDDocument object @param randomAccessRead embedded TTF data source @param encoding font encoding to be used
3911 Retrieves the AcroForm function mask as a list of PDSignatureFields.
3912 Iterates over form masks and applies terminal behavior. @throws IOException if I/O error occurs
3913 Returns an iterator over interactive form fields using PDFieldTree. @return FieldIterator object containing form fields
3914 Initializes or clears the form field cache based on the provided boolean flag. @param cache true to populate or false to empty the field cache
3915 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique identifier for the form field
3916 Calculates function mask layouts for each PDF page based on specified overlays. @param specificPageOverlayMap map of overlay data with integer keys @return the processed PDDocument instance
3917 Calculates function mask for each PDF page based on its layout and stores it in the provided document map. @param specificPageOverlayDocumentMap a map of overlay documents keyed by integer IDs @return the updated PDDocument instance containing the calculated function masks
3918 Writes FDF document to an XML stream. @param output Writer object for writing output
3919 Retrieves a PDColorSpace object based on the given COSBase color space and optional resources. @param colorSpace COSBase object representing the color space @param resources PDResources object for color space creation (optional) @param wasDefault whether to retrieve the default color space if not found @return PDColorSpace object or null if not found
3920 Evaluates the shading function mask for a given input array. @param input input data to be processed @return an array of float values representing the evaluated function mask, with values clamped between 0 and 1
3921 Initializes the indexed color space from a COSArray. @param indexedArray array of indexed colors
3922 Creates a PDImageXObject instance from the given image file by extension. @param imagePath path to input image file @param doc parent PDDocument object
3923 Generates an image object using default settings.
3924 Generates a BufferedImage representation of a PDF page at specified scale and rotation. @param pageIndex index of the target page @param scale zoom factor for the page's content @param imageType desired image type (e.g., ARGB, RGB)
3925 Renders a single PDF page to the specified graphics context. @param pageIndex 1-based index of the target page @param graphics Graphics2D object for rendering onto @param scaleX Horizontal scaling factor @param scaleY Vertical scaling factor
3926 Configures and splits the source document into multiple PDDocuments based on split parameters. @param document source PDF document to be split @return List of resulting PDDocuments or throws IOException if an error occurs during processing.
3927 Processes the PDF document to customize text extraction and formatting features. @param doc PDDocument object containing the PDF content @param outputStream Writer object for outputting formatted text
3928 Creates an FDF document from the given input stream. @param input InputStream containing FDF data
3929 Processes FUNC_MASK operator and its operands from the PDF content stream. @param string byte array representing the mask
3930 Retrieves the glyph path for a given font and glyph name. @param baseName FontName representing the base font @param glyphName String representing the glyph name to retrieve @return GeneralPath object representing the glyph path or an empty path if not found
3931 Initializes a PDMMType1Font object from the given COSDictionary. @param fontDictionary PDF dictionary containing font information
3932 Initializes a Type 3 font from a COS dictionary. @param fontDictionary COS dictionary containing font properties
3933 Creates a Type 0 font from the given TrueType font file. @param doc parent PDDocument object @param file input stream containing TrueType font data
3934 Creates a Type 0 font from the given input stream with optional subsetting. @param doc parent PDDocument object @param input TrueType font data as InputStream @param embedSubset whether to embed the subset or not
3935 Creates a Type 0 font from a TrueType font file. @param doc parent PDDocument object @param file input stream containing TrueType font data
3936 Creates a Type 0 font from the given input stream within the provided document. @param doc parent PDDocument object @param input input stream containing TrueType font data
3937 Creates a Type 0 font with optional subsetting and vertical support. @param doc parent PDDocument object @param input InputStream containing TrueType font data @param embedSubset whether to embed the subset or not
3938 Embeds TrueType font from a file into the given PDDocument. @param doc PDDocument object @param file embedded TTF file to be loaded @param encoding font encoding to be used
3939 Creates a PDTrueTypeFont object from the provided PDDocument, embedded TrueType font data, and encoding. @param doc PDDocument object @param input embedded TTF data source @param encoding font encoding to be used
3940 Retrieves the AcroForm function mask as a list of PDSignature objects. @return List of PDSignature objects representing the function mask or empty if not found
3941 Configures the document's function mask with a digital signature based on provided options and interface. @param sigObject PDSignature instance for signing @param signatureInterface SignatureInterface implementation to interact with @param options SignatureOptions object containing configuration settings
3942 Updates form fields in the PDF document based on the provided FDFDocument instance. @param fdf FDFFocument object containing field values and metadata
3943 Writes FDF document to an XML stream with masking functionality. @param output Writer object for writing output
3944 Evaluates the shading function mask for a given input value. @param inputValue single float input data to be processed
3945 Evaluates shading function mask for input data. @param values input array to be processed
3946 Applies function mask to PDF page drawing. @return Paint object representing transformed image
3947 Applies a function mask to the input transparency group. @param form TransparencyGroup object containing function mask and other attributes @param graphics Graphics2D object for rendering
3948 Renders PDF page at specified index and scale. @param pageIndex target page index @param scale zoom factor for the page's content
3949 Generates a BufferedImage representation of a PDF page at specified DPI. @param pageIndex index of the target page @param dpi desired dots per inch for image rendering
3950 Renders PDF page at specified scale and DPI to image. @param pageIndex index of the target page @param dpi desired dots per inch @param imageType desired image type (e.g., ARGB, RGB)
3951 Scales and renders a single PDF page to the specified graphics context. @param pageIndex 1-based index of the target page @param graphics Graphics2D object for rendering onto @param scaleX Horizontal scaling factor @param scaleY Vertical scaling factor (not used)
3952 Returns a PDDocument representing the extracted page range. @throws IOException if an error occurs during processing
3953 Formats PDF text extraction and formatting features. @param doc PDDocument object containing the PDF content @return extracted and formatted text as a string
3954 Loads an FDF document from the specified file. @param filename path to the file containing FDF data
3955 Creates an FDF document from the given file. @param file File containing FDF data
3956 Processes FUNC_MASK operator and its operands from the PDF content stream. @param string byte array representing the mask
3957 Processes FUNC_MASK operator and its operands from the PDF content stream. @param array COSArray containing operands
3958 Creates a PDFont object based on the COSDictionary and ResourceCache. @param dictionary COS dictionary containing font information @param resourceCache Resource cache used to retrieve resources @return PDFont object representing the font or null if not found
3959 Creates a Type 0 font from the given input stream. @param doc parent PDDocument object @param input TrueType font data as InputStream
3960 Retrieves the AcroForm function mask as a list of PDSignature objects. @return List of PDSignature objects representing the function mask or empty if not found
3961 Fetches and initializes external signing support for a PDF document. @param output OutputStream to write the signature @return ExternalSigningSupport instance or null if failed
3962 Updates function masks for the specified form fields, handling dynamic XFA forms and visual field appearances. @param fields list of PDField objects to process @param refreshAppearances whether to refresh visual field appearances @throws IOException on I/O error
3963 Configures document's function mask with digital signature based on provided options and interface. @param sigObject PDSignature instance for signing @param options SignatureOptions object containing configuration settings
3964 Configures document's function mask with digital signature using provided options and interface. @param sigObject PDSignature instance for signing @param signatureInterface SignatureInterface implementation to interact with
3965 Writes FDF document to a file with UTF-8 encoding. @param fileName the output file path
3966 Applies function mask to PDF page drawing based on the provided path, font, and displacement. @param path GeneralPath object representing the shape to apply function mask to @param font PDFont object containing font information @param code int value indicating font-related operations (e.g. character codes) @param displacement Vector object specifying displacement values for scaling or transforming the shape @param at AffineTransform object used for applying transformations to the shape @throws IOException if an I/O error occurs during function mask computation
3967 Creates a PDImageXObject instance representing the mask of the given indexed image. @param doc PDDocument object @param state PNGConverterState containing relevant parameters and data @return PDImageXObject instance with the derived mask or null on error
3968 Fetches rendered image for the specified PDF page index. @param pageIndex target page index
3969 Renders a single PDF page to the specified graphics context. @param pageIndex 1-based index of the target page
3970 Retrieves a PDFont object from the resource cache or creates a new one based on the COSDictionary and ResourceCache. @param name unique identifier of the font to retrieve @return PDFont object representing the font or null if not found
3971 Creates a PDFont object from the given COSDictionary. @param dictionary COS dictionary containing font information
3972 Processes form fields and emits a warning message if dynamic XFA forms are not supported.
3973 Configures document's function mask with digital signature based on provided options and interface. @param sigObject PDSignature instance for signing
3974 Saves FDF document to a file with UTF-8 encoding. @param fileName output file path
3975 Evaluates and updates shading function masks for a list of triangles within the specified device bounds. @param triangleList collection of shaded triangles @param array 2D pixel data array @param deviceBounds rectangle representing the device's boundaries
3976 Applies function mask to PDF page drawing based on specified winding rule. @param windingRule WINDING_RULE_* constant
3977 Creates a PDImageXObject instance representing the mask of the given indexed image. @param doc PDDocument object @param state PNGConverterState containing relevant parameters and data
3978 Processes the 'set font' operator with operands. @param operands list of COSBase objects containing the font name and size
3979 Retrieves and initializes font resources for the given PDAppearanceStream. @param appearanceStream PDAppearanceStream object
3980 Retrieves a PDFont object from the specified index in the font settings. @throws IOException if an I/O error occurs
3981 Here's a succinct yet thorough explanation of the code: Functionality** This method appears to be part of a PDF merging library. It takes two input parameters: `destination` (a `PDPageable` object) and `srcCatalog` (a `PDPageable` object). The method merges the contents of `srcCatalog` into `destination`. Merge Process** The merge process involves several steps: 1. **Metadata**: If `srcCatalog` has metadata, it is copied to `destination`. 2. **OC Properties**: If `srcCatalog` has OC properties, they are copied to `destination`. 3. **Page Labels**: If `srcCatalog` has page labels, they are copied to `destination`. 4. **Structure Tree**: The structure tree of `srcCatalog` is merged into the structure tree of `destination`. This involves creating a new parent tree node in `destination` and mapping the child nodes from `srcCatalog` to it. 5. **Pages**: Each page in `srcCatalog` is copied to `destination`, with any annotations, resources, or other metadata preserved. Notes on Specific Sections** The `m9()` method seems to be a utility function that performs some sort of metadata copying or merging. The `PDNumberTreeNode` class appears to represent a node in the structure tree, and has methods for accessing its child nodes and parent reference. The `objMapping` map is used to keep track of object mappings between the source and destination structures. Overall** This method performs a complex merge operation on two PDF documents, preserving metadata, annotations, resources, and other important information.
3982 Creates a PDImageXObject instance representing the mask of the given indexed image. @param doc PDDocument object @param imageData input PNG image bytes @return PDImageXObject instance or null if invalid
3983 Processes the appearance string operator with operands. @param operator Operator instance @param operands list of COSBase objects containing font, color, or other settings
3984 Generates a visual mask for a form field based on its widget and appearance stream. @param widget PDAnnotationWidget instance representing the form field @param appearanceStream PDAppearanceStream instance containing layout information
3985 Updates the graphics state with function mask properties from a COSDictionary. @param gs PDGraphicsState object to update
3986 Merges multiple PDF documents into a single output file using the provided StreamCacheCreateFunction and CompressParameters. If sources are available, creates a PDDocument instance from each source and merges them into the destination document. Updates metadata and saves the merged document to the specified output stream with custom compression settings. @param streamCacheCreateFunction function used to create streams for merging PDF documents @param compressParameters object containing compression parameters for saving the merged document
3987 Detects the file type of a given image byte array and creates a PDImageXObject instance accordingly. @param document PDDocument object @param byteArray byte array containing image data @param name Image name for error messages @param customFactory Custom factory to use for unsupported file types (optional) @return PDImageXObject instance or throws IOException if processing fails
3988 Parses and processes appearance string operators from a PDF content stream. @param content byte array containing the PDF content
3989 Determines the document merge mode and calls either legacy or optimized merging method. @param streamCacheCreateFunction function used to create streams for merging PDF documents @param compressParameters object containing compression parameters for saving the merged document
3990 Creates a PDImageXObject from the provided image byte array. @param document PDDocument object @param byteArray byte array containing image data @param name Image name for error messages @throws IOException if processing fails
3991 Initializes PDDefaultAppearanceString with default appearance and resources. @param defaultAppearance COSString containing the default appearance settings @param defaultResources PDResources object for managing font, size, and color settings
3992 Merges PDF documents using a specified stream creation function. @param streamCacheCreateFunction function used to create streams for merging PDF documents
3993 Retrieves the function mask as a PDDefaultAppearanceString object.
3994 Fetches the function mask from a given string and applies scripting if available. @param apValue the appearance value to process @throws IOException if I/O error occurs during mask generation
3995 Initializes an instance of the AppearanceGeneratorHelper class with a PDVariableText field. Validates and ensures AcroForm resources, then retrieves the default appearance string from the field. If retrieval fails, throws an IOException with a detailed error message. @param field PDVariableText object representing the interactive form field
