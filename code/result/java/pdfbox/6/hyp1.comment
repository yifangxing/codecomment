1 Private constructor to prevent instantiation from outside the class.
2 Constructs an OperatorProcessor with a given PDFStreamEngine. @param context PDFStreamEngine to manage and process PDF content streams
3 Initializes a new instance of the COSBase class.
4 Initializes a new COSUpdateState instance with specified update information. @param updateInfo contains details about the document's update state
5 Initializes a new instance of the DecodeOptions class.
6 Constructs DecodeOptions with specified source region. @param sourceRegion defines the area to decode in the image
7 Initializes DecodeOptions with specified subsampling. @param subsampling factor for both X and Y axes
8 Initializes a new instance of the Filter class.
9 Initializes a new PageExtractor with specified document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the starting page number (inclusive) @param endPage the ending page number (inclusive)
10 Initializes an XrefParser with a COSParser. @param cosParser the parser responsible for reading PDF data
11 Constructs an XReference with a specified type. @param type reference type to be assigned
12 Constructs a new ContentStreamWriter. @param out OutputStream to write PDF content to
13 Initializes resource cache with stable caching option. @param enableStableCache flag to enable or disable stable caching
14 Constructs a PDDocumentCatalog instance. @param doc PDF document to associate with the catalog @param rootDictionary dictionary representing the catalog's structure
15 Initializes PDF document metadata from a dictionary. @param dic COSDictionary containing metadata
16 Constructs a new dictionary from an existing COSDictionary. @param dict the underlying COSDictionary containing named destinations
17 Constructs a new instance of PDDocumentNameDictionary. @param cat the document catalog to associate with this dictionary @param names the COSDictionary containing named objects
18 Initializes a new PDPage instance from a COSDictionary. @param pageDictionary PDF dictionary representing the page content
19 Constructs a new PDPage instance. @param pageDictionary PDF dictionary representing the page @param resourceCache cache for managing shared resources
20 Initializes a new instance of COSDictionaryMap. @param actualsMap the standard map to be used for key-value storage @param dicMap the COSDictionary for PDF-specific data handling
21 Wraps a COSDictionary object. @param dictionary the PDF dictionary to wrap
22 Initializes a new instance of PDNameTreeNode with a given dictionary. @param dict COSDictionary containing name-value pairs
23 Initializes a PDNumberTreeNode with a dictionary and value class. @param dict the COSDictionary representing the node @param valueClass the Class of objects stored in the node
24 Initializes page label range with dictionary. @param dict PDF dictionary containing page label information
25 Constructs a new PDRange from a COSArray. @param range COSArray containing the range bounds
26 Initializes PDRange with specified COSArray and index. @param range COSArray containing the range data @param index Starting index within the COSArray
27 Constructs a PDStream instance from a COSStream. @param str underlying COSStream object
28 Initializes a new instance of PDMarkInfo with a given dictionary. @param dic COSDictionary containing marking metadata
29 Initializes a new instance of PDMarkedContentReference. @param dictionary COSDictionary containing marked content information
30 Initializes a PDF object reference with a given COSDictionary. @param theDictionary the COSDictionary representing the PDF object
31 Constructs a new structure node from a COS dictionary. @param dictionary underlying COS dictionary representing the structure node
32 Constructs a new instance of the Revisions class.
33 Initializes a new instance of PDPropertyList with a given COSDictionary. @param dict the COSDictionary to associate with this property list
34 Constructs a new instance of PDBoxStyle with the given dictionary. @param dic COSDictionary containing styling attributes
35 Initializes an AccessPermission instance with default permissions.
36 Constructs an AccessPermission with specified permissions. @param permissions integer representing permission bits
37 Constructs a new PDCryptFilterDictionary instance. @param d COSDictionary containing encryption settings
38 Initializes an instance of RC4Cipher with a default salt array.
39 Constructs an FDFAnnotation with a given COSDictionary. @param a COSDictionary representing the annotation data
40 Constructs an FDFCatalog instance from a COSDictionary. @param cat COSDictionary representing the FDF catalog
41 Constructs an FDFDictionary from a COSDictionary. @param fdfDictionary underlying COSDictionary containing FDF data
42 Constructs an FDFField instance from a COSDictionary. @param f dictionary representing the FDF field attributes
43 Constructs an FDFIconFit instance with a given dictionary. @param f COSDictionary containing icon fitting properties
44 Constructs an FDFJavaScript object. @param javaScript COSDictionary containing JavaScript data
45 Constructs an FDF named page reference. @param r COSDictionary representing the page reference
46 Constructs an FDFOptionElement with a given COSArray. @param o COSArray representing the option data
47 Constructs an FDFPage instance. @param p COSDictionary representing the page data
48 Constructs an FDFPageInfo instance with specified page data. @param p COSDictionary containing page information
49 Initializes an FDF template with a given COSDictionary. @param t the COSDictionary containing form data and structure
50 Constructs a new PDFontDescriptor instance. @param desc dictionary containing font descriptor information
51 Constructs a new PDFontSetting instance. @param fs COSArray containing font settings
52 Constructs a default line dash pattern with no dashes. Initializes an empty dash array and sets phase to zero.
53 Constructs a new BlendMode instance. @param name the blend mode identifier @param blendChannel the channel function for blending @param blend the blend function to apply
54 Constructs a PDColor with a pattern name and color space. @param patternName the name of the pattern @param colorSpace the color space associated with the color
55 Constructs PDDeviceNAttributes with given dictionary. @param attributes COSDictionary containing DeviceN attributes
56 Constructs a new PDDeviceNProcess instance with specified attributes. @param attributes COSDictionary containing color space attributes
57 Constructs a PDGamma instance from a COSArray. @param array COSArray containing RGB color components
58 Initializes a new instance of PDTristimulus from a COSArray. @param array COSArray containing tristimulus values (X, Y, Z)
59 Constructs a new transparency group attributes instance. @param dic COSDictionary containing transparency settings
60 Initializes optional content properties with given dictionary. @param props COSDictionary containing optional content data
61 Initializes a new instance of PDAbstractPattern with a given COSDictionary. @param dictionary the COSDictionary containing pattern properties
62 Constructs a new PDShading instance from a COSDictionary. @param shadingDictionary PDF dictionary containing shading properties
63 Initializes a new instance of PDExtendedGraphicsState with a given dictionary and resource cache. @param dictionary COSDictionary containing graphics state properties @param resourceCache ResourceCache for managing resources
64 Constructs a PDSoftMask from a COSDictionary. @param dictionary PDF dictionary containing mask properties @param resourceCache cache for managing resources
65 Constructs a new PDAction instance. @param a COSDictionary representing the PDF action details
66 Private constructor to prevent instantiation of utility class.
67 Constructs a new instance of PDAdditionalActions. @param a COSDictionary containing action data
68 Constructs a new instance of PDAnnotationAdditionalActions. @param a COSDictionary containing annotation action definitions
69 Constructs a new instance of PDDocumentCatalogAdditionalActions. @param a COSDictionary containing PDF catalog actions
70 Constructs a new instance with specified actions. @param a COSDictionary containing form field actions
71 Constructs a new PDPageAdditionalActions object with a given dictionary. @param a COSDictionary containing page actions
72 Constructs a PDTargetDirectory from a COSDictionary. @param dictionary the COSDictionary containing target directory data
73 Initializes a new instance of the PDURIDictionary. @param dictionary COSDictionary containing URI action data
74 Constructs a new PDWindowsLaunchParams instance with given parameters. @param p COSDictionary containing launch parameters
75 Constructs a new appearance characteristics dictionary. @param dict COSDictionary containing appearance properties
76 Constructs a new appearance dictionary from a COSDictionary. @param dictionary The underlying COSDictionary with appearance entries.
77 Initializes a new appearance entry. @param entry COSDictionary representing the appearance data
78 Initializes a new instance of PDBorderEffectDictionary. @param dict COSDictionary containing border effect properties
79 Constructs a border style dictionary from a COSDictionary. @param dict existing COSDictionary containing border properties
80 Constructs a new instance of PDExternalDataDictionary. @param dictionary COSDictionary to manage external data
81 Constructs a CloudyBorder instance. @param stream PDF appearance content stream for rendering @param intensity visual intensity of the border effect @param lineWidth width of the border line @param rect bounding rectangle defining the border area
82 Initializes a new instance of PDPropBuild with a given COSDictionary. @param dict COSDictionary containing digital signature properties
83 Constructs a new instance of PDPropBuildDataDict with a given COSDictionary. @param dict the underlying COSDictionary containing digital signature properties
84 Constructs a new PDSeedValue from a COSDictionary. @param dict the dictionary containing seed value information
85 Initializes a new instance of PDSeedValueCertificate with a given COSDictionary. @param dict the COSDictionary containing certificate data
86 Constructs a new instance of PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary containing seed value information for digital signatures
87 Initializes a new instance of PDSeedValueTimeStamp with the given COSDictionary. @param dict the COSDictionary to manage timestamp information
88 Constructs a new PDSignature instance from a COSDictionary. @param dict COSDictionary containing signature information
89 Initializes default signature options. Sets default page number to 0.
90 Constructs a new PDFTemplateCreator instance. @param templateBuilder builder for creating PDF templates
91 Private constructor to prevent instantiation of utility class.
92 Constructs a new PDField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
93 Constructs a new PDXFAResource instance. @param xfaBase COSBase object representing the XFA resource
94 Initializes a new instance of PDMeasureDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary representing the measurement data
95 Initializes a new instance of PDNumberFormatDictionary with a given COSDictionary. @param dictionary the COSDictionary containing number format settings
96 Constructs a new PDViewportDictionary from a given COSDictionary. @param dictionary COSDictionary containing viewport settings
97 Constructs a PDThread instance with a given dictionary. @param t COSDictionary representing the thread data
98 Constructs a new PDThreadBead instance. @param b dictionary representing the bead data
99 Initializes viewer preferences from a COS dictionary. @param dic dictionary containing PDF preferences
100 Constructs a new PageDrawerParameters instance. @param renderer PDF renderer to use for drawing @param page PDPage object representing the current page @param subsamplingAllowed flag allowing image subsampling @param destination RenderDestination for output @param renderingHints additional rendering hints @param imageDownscalingOptimizationThreshold threshold for image optimization
101 Constructs a new PositionWrapper. @param position TextPosition object representing current text position in PDF
102 Initializes a new identity transformation matrix.
103 Initializes a new instance of the Matrix class with a source array. @param src the source array containing transformation parameters
104 Initializes a new transformation matrix with specified parameters. @param a, b, c, d, e, f matrix elements for scaling, rotation, etc.
105 Private constructor for XMLUtil class.
106 Initializes a new instance of the PDFStreamEngine class.
107 Processes mask operator. @param op OperatorProcessor instance containing operation details
108 Sets the ASCII85 stream terminator. @param term character representing the terminator (must be 118-126 excluding 'z')
109 Sets the number of pages for splitting. @param split number of pages per split document @throws IllegalArgumentException if split is less than or equal to zero
110 Sets the starting page for splitting. @param start page number to begin splitting from
111 Sets the end page for splitting. @param end the last page number to include in the split @throws IllegalArgumentException if end is less than or equal to zero
112 Sets the leniency mode for PDF parsing. @param lenient true to enable lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parsing is done
113 Constructs CompressParameters with specified object stream size. @param objectStreamSize size of the PDF object stream @throws IllegalArgumentException if size is negative
114 Initializes a PDResources instance with given dictionaries and caches. @param resourceDictionary PDFBox COSDictionary containing resources @param resourceCache Cache for managing resources efficiently @param directFontCache Cache specifically for fonts
115 Sets the blending mode for graphics operations. @param blendMode the blending mode to apply
116 Constructs a PDFieldTree for a given PDAcroForm. @param acroForm the PDAcroForm instance to manage fields for @throws IllegalArgumentException if acroForm is null
117 Returns the length of the stream. Throws IllegalStateException if OutputStream is open. @return Length of the stream as a long value
118 Constructs a new instance of PDFMergerUtility. Initializes an empty list to hold source PDFs.
119 Initializes a new instance of COSWriterObjectStream. @param compressionPool pool used for managing compressed data
120 Initializes a new instance of the PublicKeyProtectionPolicy class.
121 Initializes text clipping list for PDF rendering.
122 Adds a source PDF file to the merger. @param source PDF file to be added
123 Adds a PDF source to the merger utility. @param source RandomAccessRead object representing the PDF file
124 Masks an instruction by name. @param name unique identifier of the instruction to mask
125 Adds an instruction sequence to the current instructions. @param child InstructionSequence to be added
126 Adds a public key recipient to the list. @param recipient the PublicKeyRecipient to add
127 Defines and registers a text extraction region in a PDF. @param regionName unique identifier for the region @param rect bounding rectangle defining the region area
128 Sets the trailer for the current cross-reference object. @param trailer COSDictionary containing trailer information
129 Retrieves a COSBase object by its key. @param key unique identifier for the COSBase object @return COSBase object associated with the key or null if not found
130 Retrieves an operator by name. @param operatorName name of the operator to fetch @return Operator object or null if not found
131 Converts Unicode sequence to glyph name. @param unicodeSequence the input Unicode sequence @return corresponding glyph name or ".notdef" if not found
132 Handles exceptions during PDF processing. Logs specific exceptions, rethrows others. @param operator current PDF operator @param operands list of operands for the operator @param exception caught exception to handle @throws IOException if an unrecoverable error occurs
133 Retrieves and returns the current graphics state from the stack. @return PDGraphicsState object representing the current graphics state
134 Executes mask operation by modifying graphics state. Uses m1 to update graphics stack.
135 Returns the size of the graphics stack. @return integer representing the number of elements in the graphics stack
136 Applies 2D transformation to a point. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float
137 Decreases graphics state nesting level. Logs error if level goes below zero.
138 Masks an integer value using a specific instruction. @param value integer to be masked
139 Checks if the stream is open for reading. Throws an exception if the stream or document is closed.
140 Throws an exception indicating reset is not supported. @throws IOException always thrown with message "Reset is not supported"
141 Throws an exception indicating that reset operation is not supported. @throws IOException always thrown with message "reset is not supported"
142 Retrieves the PDF encryption settings. @return PDEncryption object or null if not encrypted @throws IOException if document is not parsed yet
143 Retrieves document access permissions. @throws IOException if document is not parsed @return AccessPermission object
144 Constructs an InvalidPasswordException with a specific error message. @param message detail message explaining the invalid password scenario
145 Initializes a PDF operator. @param aOperator the operator string to set @throws IllegalArgumentException if operator starts with '/'
146 Returns string representation of PDF operator. @return formatted string with operator name
147 Generates a string representation of a COSArray. @return formatted string including contained objects
148 Generates a string representation of the COSObject. @return formatted string with object details
149 Retrieves a filter by name. @param filterName the name of the filter to retrieve @return Filter instance or throws IOException if not found
150 Checks if all operands are instances of the specified class. @param operands list of COSBase objects to check @param clazz expected class type @return true if all operands match the class, false otherwise
151 Adds a float value to the instruction sequence. @param value the float value to add
152 Sets the image width of the visible signature. @param width the new width for the signature image @return the current PDVisibleSignDesigner instance for method chaining
153 Sets the image height for the signature. @param height the new height of the signature image @return the PDVisibleSignDesigner instance with updated height
154 Calculates the Euclidean distance between two points. @param ps starting point @param pe ending point @return distance as a double
155 Calculates the determinant for a point relative to two other points. @param p reference point @param p1 first corner point @param p2 second corner point @return determinant value indicating position relation
156 Initializes a new PDMarkedContent instance. @param tag unique identifier for the marked content @param properties dictionary containing additional attributes
157 Retrieves the mask name for pattern. @return The string representation of the mask name
158 Returns the mask value associated with shading. @return The mask string from COSName.SHADING.
159 Retrieves the default value of the button. @return Default value as a string or empty string if not applicable
160 Masks the checkbox by setting its state to off. @throws IOException if an I/O error occurs during processing
161 Masks specified form fields. @param fields list of PDField objects to be masked
162 Checks if white point coordinates are zero. @return true if wpX, wpY, and wpZ are all zero, false otherwise
163 Generates a color mapping array for axial shading. @return int array representing color mappings @throws IOException if an I/O error occurs during processing
164 Generates a mapping array for radial shading. @return int array representing color mappings
165 Initializes the LZW code table with standard values. @return List of byte arrays representing the initial code table
166 Merges multiple PDF source files. @param sourcesList list of RandomAccessRead objects representing PDF sources
167 Retrieves an element from the COSArray at the specified index. @param index position of the element in the array @return COSBase object at the given index, or null if out of bounds
168 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index or null if out of bounds
169 Returns the number of elements in the COSArray. @return int representing the size of the array
170 Delegates size calculation to the underlying collection. @return int representing the number of elements
171 Returns the count of public key recipients. @return int representing the number of recipients
172 Checks if the COSArray is empty. @return true if no elements are present, false otherwise
173 Checks if the COSArrayList is empty. @return true if no elements are present, false otherwise
174 Removes a public key recipient from the list. @param recipient the PublicKeyRecipient to be removed @return true if the recipient was successfully removed, false otherwise
175 Returns an iterator over COSBase elements. @return Iterator<COSBase> instance
176 Returns an iterator over the COSArrayList elements. @return Iterator<E> instance for iterating over COS objects
177 Returns an iterator over the list of public key recipients. @return Iterator<PublicKeyRecipient> instance
178 Returns a list of COSBase objects. @return List containing all COSBase elements
179 Converts COSBase objects to strings. @return List of string representations of COSBase objects
180 Converts COSBase objects to strings and collects them. @return List of string representations of COSBase objects
181 Converts standard Boolean to COSBoolean. @param value standard Boolean object @return corresponding COSBoolean instance (TRUE or FALSE)
182 Returns string representation of boolean value. @return "true" or "false"
183 Writes boolean value as PDF COSBoolean to output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
184 Writes null bytes to the specified output stream. @param output OutputStream to write to @throws IOException if an I/O error occurs
185 Writes mask data to output stream. @param data byte array containing mask information @throws IOException if an I/O error occurs during writing
186 Returns a set view of the mappings in this dictionary. @return Set of entries representing key-value pairs in the dictionary
187 Compares two entries for changes. @param oldEntry the original entry object @param newEntry the updated entry object @return true if there is a change, false otherwise
188 Returns the number of elements in the dictionary. @return int representing the size of the dictionary
189 Retrieves a value from the dictionary by key. @param key the key associated with the desired value @return the corresponding COSBase object or null if not found
190 Retrieves all keys from the dictionary. @return Set containing all COSName keys in the dictionary
191 Executes an action on each key-value pair in the dictionary. @param action the action to be performed on each entry
192 Returns all enum constants as a collection. @return Collection of COSBase objects representing enum constants
193 Merges key-value pairs from another dictionary into this one. @param dict source dictionary containing items to merge
194 Checks if the dictionary contains an item with the specified key. @param name the key to check for in the dictionary @return true if the key exists, false otherwise
195 Splits input string by spaces using regex. @param s input string to split @return array of words from input string
196 Converts string token to integer. @param token string representation of an integer @return parsed integer value
197 Returns the function mask string. @return Concatenated string of "FunctionType" and result from m1()
198 Sets the encryption key length. @param l key length to set (must be 40, 128, or 256)
199 Sets the starting page for text extraction. @param startPageValue 1-based page number to begin extraction @throws IllegalArgumentException if startPageValue is less than or equal to 0
200 Sets the end page for text extraction. @param endPageValue 1-based end page number @throws IllegalArgumentException if value is less than or equal to 0
201 Initializes a new instance of BruteForceParser. @param cosDocument the PDF document to parse @param cosParser the COSParser used for parsing @throws IOException if an I/O error occurs during initialization
202 Private constructor initializes cross-reference table type.
203 Initializes PDResources with a COSDictionary. @param resourceDictionary the dictionary containing PDF resources @throws IllegalArgumentException if the dictionary is null
204 Initializes PDResources with a dictionary and cache. @param resourceDictionary PDF resource dictionary @param resourceCache caching mechanism for resources
205 Initializes the Operators class with predefined PDF type 4 function operators. Populates a cache with operator names and their corresponding constants.
206 Constructs a new PDAcroForm instance. @param doc PDF document containing the form @param form COSDictionary representing the form structure
207 Returns the count of elements in the cross-reference map. @return int representing the number of mapped entries
208 Retrieves or creates a COSObject for the given key. @param key unique identifier for the COSObject @return COSObject associated with the key or null if key is null
209 Updates the cross-reference table with new values. @param xrefTableValues map of COSObjectKey to Long representing object offsets
210 Converts a token to a float value. @param token the string token representing a number @return the parsed float value from the token
211 Masks special float values and small magnitudes. @param floatValue the input floating-point value @return masked float value, handling infinities and subnormal numbers
212 Determines the visual direction of text based on matrix transformations. @return The direction angle in degrees (0, 90, 180, or 270)
213 Checks if this COSFloat is equal to another object. @param o the object to compare with @return true if objects are equal, false otherwise
214 Generates hash code for the float value. @return hash code based on the float's content
215 Generates a masked string representation of the float value. @return formatted string with trailing zeros removed if in plain format
216 Writes a null value followed by a space to the output stream. @param output OutputStream to write to @throws IOException if an I/O error occurs
217 Constructs a new COSIncrement instance. @param incrementOrigin source of update information
218 Initializes a new instance of PDFCloneUtility. @param dest destination PDF document to clone content into
219 Constructs a new resource cache instance. @param enableStableCache flag to enable or disable stable caching
220 Determines if the COS object requires an update. @return true if updated, false otherwise
221 Checks if a COSBase object is managed or processed. @param base the COSBase object to check @return true if object is in collection or has been processed, false otherwise
222 Checks if a COSBase object is excluded. @param base the COSBase object to check @return true if the object is excluded, false otherwise
223 Processes a COSBase object. @param object the COSBase object to process
224 Marks a COSBase object as processed. @param base COSBase object to be marked
225 Registers a TrueTypeFont for closing. @param ttf TrueTypeFont instance to manage
226 Collects widget dictionaries from form fields. @param fields list of PDF form fields @return set of COSDictionary representing widget dictionaries
227 Constructs a new COSInputStream with specified input and decode results. @param input the InputStream to be processed @param decodeResults list of DecodeResult objects for processing
228 Initializes a new ASCII85InputStream. @param is input stream containing ASCII85 encoded data
229 Initializes a CCITTFaxDecoderStream for decoding fax images. @param stream input stream containing encoded TIFF data @param columns number of columns in the image @param type compression type used (e.g., CCITT Modified Huffman RLE, T4, T6) @param options additional decoding options @param byteAligned flag indicating if data is byte-aligned
230 Returns a COSInteger instance for the given value within a range. @param val the integer value to represent @return COSInteger object with the specified value
231 Checks if the given object is a COSInteger with the same value. @param o the object to compare @return true if equal, false otherwise
232 Returns string representation of COSInteger. @return formatted string with integer value
233 Writes integer value to output stream as ISO-8859-1 encoded string. @param output destination for writing data @throws IOException if an I/O error occurs
234 Retrieves value by key from the underlying map. @param key unique identifier for the value @return value associated with the key or null if not found
235 Masks and retrieves the base font name from an alias. @param fontName alias or full font name @return base font name or null if not found
236 Maps an alias to its corresponding font name. @param alias alternative font name @param baseName standard font name
237 Filters and retrieves selected export values from a PDF form. @return List of selected export values or an empty list if none are found
238 Checks if the COSName is empty. @return true if the name has no elements, false otherwise
239 Writes a masked comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs during writing
240 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
241 Converts a string to its hexadecimal character array representation. @param text input string to convert @return char array containing hexadecimal values of the input string
242 Constructs a COSObjectKey with validation. @param num object number (must be non-negative) @param gen generation value (must be non-negative) @param index stream index
243 Generates hash code based on the object's content. @return integer hash code value
244 Calculates the magnitude of a vector. @return magnitude of the vector represented by 'single'
245 Calculates the magnitude of a vector based on matrix elements. @return float representing the magnitude or single[4] if condition met
246 Initializes a new COSOutputStream with specified filters, parameters, and output. @param filters list of filters to apply during data processing @param parameters dictionary containing additional configuration parameters @param output underlying OutputStream for data writing @param streamCache cache for buffering data streams @throws IOException if an I/O error occurs during initialization
247 Constructs a new ASCII85OutputStream. @param out underlying output stream for encoded data
248 Initializes a new instance of COSStandardOutputStream. @param out underlying output stream to write to
249 Initializes a new instance of COSStandardOutputStream. @param out underlying output stream @param position initial writing position
250 Closes all associated streams and resources. Ensures proper resource management to prevent leaks.
251 Closes and releases resources for stream cache, random access, and read view.
252 Masks the internal byte array by creating an immutable copy. @return Immutable copy of the byte array
253 Handles incremental PDF updates by copying data from input to output. @throws IOException if an I/O error occurs during processing
254 Converts byte array to ASCII string. @return ASCII representation of the byte array
255 Checks if the origin document state is valid and ready for updates. @return true if both origin document state exists and accepts updates, false otherwise
256 Converts byte array to string using PDFDocEncoding. @param bytes input byte array representing encoded text @return decoded string or '?' for invalid characters
257 Parses and masks characters from the PDF stream. @return Masked string of parsed characters.
258 Converts a string to a byte array using PDFDocEncoding. @param text input string to encode @return byte array representation of the input string
259 Checks if a character is maskable. @param character the character to check @return true if the character can be masked, false otherwise
260 Checks if the map contains a specified key. @param key the key to search for @return true if the key is present, false otherwise
261 Checks if the given font name is an alias. @param fontName the font name to check @return true if fontName is an alias, false otherwise
262 Returns an unmodifiable view of the code-to-name mapping. @return unmodifiable map of font codes to names
263 Returns an unmodifiable view of the inverted code-to-name map. @return unmodifiable Map where keys are font names and values are codes
264 Throws an exception as this operation is unsupported. @param flag boolean value to mask
265 Reads a byte from the ASCII85 encoded input stream. Handles decoding and manages end-of-file conditions. @return next byte or -1 if EOF is reached @throws IOException if an I/O error occurs
266 Resets the ASCII85 input stream and closes resources. Sets internal state to indicate end-of-file and nullifies buffers.
267 Encodes a single byte into ASCII85 format and writes it to the output stream. @param b byte to encode @throws IOException if an I/O error occurs
268 Completes the ASCII85 encoding process. Flushes remaining data, writes encoded characters, and finalizes output.
269 Pads the password with a fixed string to ensure consistent length. @param password user-provided password @return padded byte array of fixed length
270 Ends the content stream processing. Logs a warning if text mode is active without ending text. @throws IOException if an I/O error occurs during stream closure
271 Writes XMP metadata to an output stream. @param xmp byte array containing XMP data @throws IOException if I/O operations fail
272 Determines if a page should be a split point. @param pageNumber current page number (1-based) @return true if the page is a split boundary, false otherwise
273 Throws an exception as JPX encoding is not supported. @param input source image data stream @param encoded destination for encoded data @param parameters additional configuration options
274 Throws an exception as this method is not yet implemented. @param t map to be processed
275 Throws an exception as modifying an immutable rectangle is unsupported.
276 Throws exception as modifying rectangle is unsupported.
277 Throws an exception as this method is not supported in immutable rectangles.
278 Throws an exception as the rectangle's dimensions are immutable.
279 Placeholder method for masking functionality. @return None, as it throws an exception
280 Placeholder method to set visible signature text. @param signatureText text to be displayed on the signature @return updated PDVisibleSignDesigner instance
281 Throws an exception as signature fields do not support string values. @param value string value to be set (not supported)
282 Retrieves and validates the deflate compression level. @return valid compression level between -1 and Deflater.BEST_COMPRESSION
283 Checks if the collection contains the specified element. @param o element to search for in the collection @return true if element is present, false otherwise
284 Initializes FlateFilterDecoderStream with an input stream. Skips the first two bytes of the zlib header. @param inputStream source of compressed data
285 Initializes and closes resources for Flate decoding. Calls m1 to prepare inflater and then closes the stream.
286 Initializes a new instance of PDVisibleSigBuilder. Constructs the PDF structure for visible signatures.
287 Sets the signature image and updates dimensions. @param image BufferedImage to be used as the signature
288 Finds the index of a pattern in the code table. @param codeTable list containing encoded patterns @param pattern byte array to search for @return index of pattern if found, otherwise -1
289 Applies a predictor algorithm to decode image data. @param predictor type of prediction algorithm @param colors number of color components @param bitsPerComponent bits per color component @param columns number of columns in the image @param actline current line of image data @param lastline previous line of image data (used for predictors 10-14)
290 Checks if the COSBase object with the given key exists in the pool. @param key unique identifier of the COSBase object @return true if the object exists, false otherwise
291 Registers a security handler with a given name and protection policy. @param name unique identifier for the security handler @param securityHandler class implementing SecurityHandler @param protectionPolicy class implementing ProtectionPolicy Throws IllegalStateException if the name is already registered
292 Checks if a font encoding name is not present in the mapping. @param name font encoding name to check @return true if name is absent, false otherwise
293 Checks if a font encoding exists for the given code. @param code font encoding code to check @return true if encoding exists, false otherwise
294 Escapes XML special characters in the input string. @param input original string to be processed @return escaped XML string
295 Sets or removes the bounding box for a mask. @param bbox the new bounding box or null to remove it
296 Converts a hexadecimal string to a byte array. @param s input hexadecimal string @return byte array representation of the hex string
297 Closes resources associated with the PDF document. Throws IOException if any resource fails to close.
298 Ensures the document is open and throws an exception if not. @throws IOException if the document or source is closed
299 Returns the dictionary associated with the PDF function. @return COSDictionary containing function details or null if not set
300 Initializes a new PDXObject with a given PDStream and subtype. @param stream the PDStream containing the object's data @param subtype the COSName representing the object's subtype
301 Retrieves the underlying PDF stream. @return COSStream representing the PDF content
302 Retrieves metadata stream from the ICC profile. @return COSStream containing metadata or null if not found
303 Sets metadata stream for ICC profile. @param metadata COSStream containing metadata information
304 Checks if any annotation in the list matches the given widget. @param annotations list of PDAnnotation objects to check @param widget PDAnnotationWidget object to match against @return true if a matching annotation is found, false otherwise
305 Compares this annotation with another for equality. @param o the object to compare @return true if equal, false otherwise
306 Returns a set view of the keys in this map. @return Set<K> containing all keys from the underlying COSDictionaryMap
307 Checks for a matching signature field in the document. @param fieldIterator iterator over PDF fields @param signatureField specific signature field to match @return true if a matching signature field is found, false otherwise
308 Returns all values from the underlying map. @return Collection of values stored in the COSDictionaryMap
309 Initializes the BaseParser with a PDF source. @param pdfSource RandomAccessRead object representing the PDF file
310 Parses source data using helper method. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs during parsing
311 Adds an XRef entry to the current trailer. @param objKey key of the object being added @param offset byte offset in the PDF file
312 Adds or updates font encoding mappings. @param code character code @param name character name
313 Parses PDF source using helper method. @return true if parsing successful, false otherwise
314 Checks line break character and processes accordingly. @param linebreak character to check @return true if processing is successful, false otherwise
315 Masks parameter based on PDF content. @param bracesParameter initial parameter value @return masked parameter or original if conditions not met
316 Determines if character is line feed or carriage return. @param c character to check @return true if character is LF or CR, false otherwise
317 Reads and parses a number from the PDF source. @return StringBuilder containing the parsed number @throws IOException if parsing fails or number exceeds MAX_LENGTH_LONG
318 Decodes a ByteArrayOutputStream to a UTF-8 string. Tries alternative charset if decoding fails. @param buffer input byte array stream @return decoded string or throws exception on failure
319 Reads a character from the source and checks if it matches the expected character. @param ec expected character to match @throws IOException if the read character does not match the expected character
320 Parses PDF source using m1 and checks result. @return true if parsing successful, false otherwise @throws IOException if an I/O error occurs
321 Parses the PDF to find the start of the xref table. @return the offset of the start xref or -1 if not found @throws IOException if an I/O error occurs during parsing
322 Finds the last EOF marker in the PDF. @return position of the last EOF marker or Long.MAX_VALUE if not found @throws IOException if an I/O error occurs during reading
323 Searches for and returns offsets of cross-reference tables in the PDF. @return list of long integers representing offsets of xref tables @throws IOException if an I/O error occurs during reading
324 Determines the number of color components. @return int representing the number of color components @throws IOException if an I/O error occurs
325 Searches for and returns offsets of XRef streams in PDF. @return List of Long containing offsets or empty list if none found @throws IOException if an I/O error occurs during reading
326 Retrieves cross-reference table. @return Map of COSObjectKey to Long representing object references or null if not resolved
327 Reads and processes the trailing bytes of a PDF file to locate key markers. @return Position of the 'startxref' marker in the file. @throws IOException if an I/O error occurs or required markers are missing
328 Parses and filters data stream to detect 'endstream' or 'endobj'. @param out EndstreamFilterStream for output processing @return Length of processed content @throws IOException if I/O error occurs during parsing
329 Constructs a new instance of the class with default wMode set to 0.
330 Sets a page label range starting from a given page. @param startPage first page index for the label range (must be non-negative) @param item PDPageLabelRange object defining the label properties
331 Maps a CID to its Unicode text representation. @param cid character identifier @param text corresponding text for the CID
332 Checks for binary data after "EI" token. @return true if no binary data found, false otherwise
333 Checks if current character is whitespace or newline. @return true if character is space, tab, or newline; false otherwise
334 Processes a cross-reference entry. @param entry XReferenceEntry to process
335 Calculates mask widths based on entry values. @return int array representing calculated widths
336 Initializes the COSObjectPool with a given highest cross-reference object number. @param highestXRefObjectNumber initial highest XRef object number
337 Retrieves the trailer dictionary from the PDF. @return COSDictionary containing trailer information or null if empty
338 Retrieves the trailer dictionary from the PDF. @return COSDictionary containing trailer information or null if empty
339 Retrieves object numbers referencing a given object stream. @param objstmObjNr object stream number to search for @return set of object numbers that reference the specified object stream, or null if trailer is unresolved
340 Returns the function mask value for the XReference entry. @return Long representing the function mask
341 Returns the generation number of the free object reference. @return long representing the generation number
342 Returns a string representation of the FreeXReference object. @return String containing details of the free reference
343 Returns the mask value associated with the reference. @return Mask value representing reference properties
344 Retrieves the generation number of the cross-reference entry. @return the generation number as a long value
345 Returns a string representation of the reference. @return String describing the reference type, key, function mask, and byte offset
346 Returns the generation part of the parent object's key. @return The generation value as a long
347 Returns the mask value for the object stream reference. @return The mask value representing the object stream index.
348 Generates a string representation of the object stream entry. @return String detailing the entry's key, type, index, and parent key
349 Writes data to output stream without newline. @param b byte array containing the data @param off starting offset in the byte array @param len number of bytes to write
350 Writes data to output stream without newline. @param b data byte to write
351 Handles writing operations with line control. Writes EOL and sets newline flag if condition is met.
352 Checks if compression is enabled based on parameters. @return true if compression is enabled and parameters are valid, false otherwise
353 Adds an XReferenceEntry to the cross-reference table. @param entry XReferenceEntry to be added
354 Writes an indirect reference to the output stream. @param output the OutputStream to write to @param indirectReference the COSObjectKey representing the reference @throws IOException if an I/O error occurs
355 Generates a mask for cross-reference entries. @param xRefEntriesList list of XReferenceEntry objects @return array of Long representing the mask
356 Returns an MD5 MessageDigest instance. @return MessageDigest object for MD5 algorithm
357 Returns a SHA-1 MessageDigest instance. @return MessageDigest object for SHA-1 hashing @throws RuntimeException if SHA-1 algorithm is unavailable
358 Returns a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing @throws RuntimeException if SHA-256 algorithm is unavailable
359 Writes and manages PDF document output. @param doc FDFDocument to process @throws IOException if an I/O error occurs
360 Retrieves the highest cross-reference object number from the pool. @return The highest XRef object number in the COSWriterCompressionPool
361 Returns an unmodifiable list of prepared keys. @return List of COSObjectKey objects
362 Updates font encoding mapping for a given code and name. @param code font code to map @param name font name associated with the code
363 Removes specified region from text extraction areas. @param regionName name of the region to remove
364 Sets maximum fraction digits for decimal formatting. @param fractionDigitsNumber number of fraction digits to set
365 Initializes a new PDAbstractContentStream instance. @param document PDF document to write content to @param outputStream stream for outputting the PDF content @param resources resources used in the PDF content
366 Retrieves the vertical displacement Y for a given character code. @param code character identifier @return vertical displacement value as float
367 Returns the standard value if not null; otherwise, returns the default value. @param standardValue the preferred value to use @param defaultValue the fallback value if standardValue is null @return the non-null value of either standardValue or defaultValue
368 Adjusts the signature size by a percentage. @param percent the percentage to increase the size @return PDVisibleSignDesigner instance for method chaining
369 Returns the width of the signature image. @return the width in pixels
370 Returns the height of the signature image. @return height of the image in float format
371 Adjusts signature position and rotation. @return PDVisibleSignDesigner instance with updated properties
372 Creates an AffineTransform object from matrix elements. @return AffineTransform representing the transformation matrix
373 Converts a string to a byte array using font encoding. @param text input string to encode @return byte array representation of the encoded string @throws IOException on I/O error during encoding
374 Converts a Unicode code point to its corresponding glyph name. Uses unicodeToName.m1 for conversion. @param codePoint Unicode code point to convert @return Glyph name as String or ".notdef" if not found
375 Converts a COSName to a RenderState. @param state the COSName representing the rendering state @return corresponding RenderState or null if invalid
376 Determines base state from COSName, defaulting to ON for null. @param state PDF content state name @return BaseState object representing the content's visibility
377 Converts a word to its corresponding glyph IDs and writes them to the output stream. @param gsubWorker object for applying GSUB transformations @param out stream to write glyph data @param font font used for character-to-glyph mapping @param word input string to process @return list of glyph IDs after GSUB processing
378 Initializes a new PDF document. @param doc COSDocument representing the underlying PDF structure @param source RandomAccessRead for accessing the PDF data @param permission AccessPermission defining user permissions
379 Constructs a new FDFDocument. @param doc associated COSDocument @param source input stream for the FDF data
380 Returns an array containing all elements from the collection. @return array of COS objects
381 Delegates array conversion to internal implementation. @param a source array of generic type X @return Object array containing all elements from the input array
382 Delegates to actual.m1 to find index of specified element. @param o element to search for @return index of the element or -1 if not present
383 Delegates to actual COSArrayList to check if it contains all elements of the specified collection. @param c the collection to be checked for containment @return true if this list contains all elements of the specified collection, false otherwise
384 Removes all elements from the collection that match items in the provided collection. @param c collection of items to be removed @return true if any elements were removed, false otherwise
385 Filters and retains elements in the collection based on COSBase equality. @param c collection containing elements to be filtered @return true if this collection changed as a result of the call
386 Delegates equality check to underlying object. @param o the object to compare with @return true if objects are equal, false otherwise
387 Calls the hashCode method on the underlying object. @return integer hash code of the object
388 Delegates call to underlying implementation. @param o object to search for @return last index of object or -1 if not found
389 Returns an iterator over the elements in this list. @return a ListIterator of the elements in this list
390 Returns a list iterator over elements starting from the specified index. @param index starting index for the iterator @return ListIterator of elements from the given index
391 Returns a sublist of this list between fromIndex (inclusive) and toIndex (exclusive). @param fromIndex start index (inclusive) @param toIndex end index (exclusive) @return List containing elements from fromIndex to toIndex
392 Checks if the map contains a mapping for the specified value. @param value value whose presence in this map is to be tested @return true if this map maps one or more keys to the specified value
393 Returns an unmodifiable set view of the entries. @return Unmodifiable set of map entries
394 Returns an unmodifiable set of font aliases. @return Set containing all font aliases
395 Overrides m1 to delegate functionality to actuals. @return Result of calling m1 on the actuals object
396 Converts a COSBase object to a COSObjectable. @param base the input COSBase object @return COSObjectable representation of the input @throws IOException if conversion fails
397 Converts a number to a letter-based mask. @param num the input number to convert @return a string representing the letter mask
398 Returns the mask value for page labels. @return int representing the mask value
399 Retrieves page label range starting from a given page. @param startPage index of the starting page @return PDPageLabelRange object representing the label range
400 Returns a navigable set of page indices with custom labels. @return NavigableSet containing page indices in sorted order
401 Returns the dash pattern as an array of floats. @return Array representing the dash pattern
402 Constructs a PDColor with specified components and color space. @param components array of color components @param colorSpace color space associated with the color
403 Retrieves color components based on color space. @return float array of color components
404 Constructs a new CoordinateColorPair with given point and color. @param p 2D point representing the coordinate @param c array of floats representing the color values
405 Generates a string representation of Function Type 2. @return A formatted string with C0, C1, and N values
406 Calculates the bounding box of a triangle. @return array containing [minX, maxX, minY, maxY]
407 Retrieves and returns the top element of the stack as a Number. @return the top element of the stack cast to Number, or null if empty
408 Retrieves an integer value from the stack. @return the top element of the stack as an integer
409 Retrieves and converts the top element of the stack to a float. @return the numeric value as a float from the stack's top element
410 Adds a boolean instruction to the sequence. @param value the boolean value to add
411 Initializes an execution context with a set of operators. @param operatorSet the set of operators to be used in execution
412 Initializes and returns a list of compiled regex patterns. @return List of Pattern objects for text processing
413 Initializes the Mac Expert encoding table. Populates the encoding map with character codes and names from the MAC_EXPERT_ENCODING_TABLE.
414 Initializes MacRoman character encoding. Populates the encoding map with character codes and names from the table.
415 Initializes the standard encoding table by populating it with character codes and names.
416 Initializes symbol encoding from predefined table.
417 Initializes WinAnsiEncoding with character mappings. Populates mapping from character codes to names using WIN_ANSI_ENCODING_TABLE. Assigns 'bullet' to unused codes greater than 40 as per PDF spec.
418 Initializes the ZapfDingbatsEncoding with predefined character mappings.
419 Converts an array of objects to a formatted string. @param array input object array @return String representation of the array with elements separated by commas and enclosed in brackets
420 Converts a float array to a formatted string. @param array input float array @return String representation of the array
421 Masks text position within marked content. @param text TextPosition object to be masked
422 Masks content by adding it to the marked content list. @param markedContent PDMarkedContent object representing the content to be masked
423 Adds an XObject to the marked content. @param xobject PDXObject to be added
424 Sets printing permission for PDF. @param allowPrinting true to enable, false to disable printing
425 Sets modification permission for PDF. @param allowModifications true to allow modifications, false otherwise
426 Sets permission to allow or disallow content extraction. @param allowExtraction true to allow extraction, false otherwise
427 Enables or disables annotation modification permission. @param allowAnnotationModification true to allow, false to disallow
428 Enables or disables form filling permission. @param allowFillingInForm true to allow, false to disallow
429 Sets content extraction permission. @param allowExtraction true to allow, false to restrict content extraction
430 Sets assembly permission for PDF documents. @param allowAssembly true to allow document assembly, false otherwise
431 Sets permission to print PDF faithfully. @param canPrintFaithful true to allow faithful printing, false otherwise
432 Checks if print permission is granted. @return true if print permission is enabled, false otherwise
433 Checks if modification permission is enabled. @return true if modification is allowed, false otherwise
434 Checks if extraction permission is enabled. @return true if extraction is allowed, false otherwise
435 Checks if annotations modification permission is set. @return true if annotation modifications are allowed, false otherwise
436 Checks if form-filling permission is enabled. @return true if form-filling is allowed, false otherwise
437 Checks if accessibility extraction permission is granted. @return true if allowed, false otherwise
438 Checks if assemble document permission is set. @return true if assemble document permission is enabled, false otherwise
439 Checks if the print permission bit is set. @return true if print permission is enabled, false otherwise
440 Retrieves a decryption key from the keystore. @return the private key associated with the alias or default entry @throws KeyStoreException if the key cannot be retrieved
441 Returns a secure random instance. Uses customSecureRandom if available, otherwise creates a new one. @return SecureRandom instance for cryptographic operations
442 Initializes encryption with a given key. @param key byte array representing the encryption key (1-32 bytes) @throws IllegalArgumentException if key length is outside valid range
443 Encrypts a single byte and writes it to the output stream. @param aByte the byte to encrypt @param output the OutputStream to write the encrypted byte to @throws IOException if an I/O error occurs
444 Masks text by handling diacritics or normalizing. @param str input string to be masked @return masked string with diacritics managed or normalized
445 Determines if a Unicode code point is masked or prohibited in SASL. @param codepoint the Unicode code point to check @return true if codepoint is masked or prohibited, false otherwise
446 Determines encryption mask based on key length and policy. @return integer mask value for encryption settings
447 Returns the singleton instance of BouncyCastleProvider. Initializes the provider if not already created. @return BouncyCastleProvider instance
448 Extracts text content from all child nodes of a given XML element. @param node the parent XML element @return concatenated text content of all child nodes
449 Masks and writes text to output stream. @param text text to be processed and written @throws IOException if an I/O error occurs
450 Retrieves or parses a CMap by name. @param cMapName unique identifier for the CMap @return CMap object or null if not found
451 Parses a RandomAccessRead to create and return a CMap object. @param randomAccessRead source of data for parsing @return CMap object or null if input is null
452 Generates a set of font names for a given PostScript name. @param postScriptName original PostScript font name @return set containing the original and modified font names
453 Calculates the set of points that make up a line segment between two given points. Uses Bresenham's algorithm for efficient line drawing. @param x0 starting x-coordinate @param y0 starting y-coordinate @param x1 ending x-coordinate @param y1 ending y-coordinate @return Set of Point objects representing the line segment
454 Calculates the number of unique points after scaling. @param p array of Point2D objects representing vertices @return count of distinct points after scaling by 1000
455 Caches a font with its information. @param info font information details @param font FontBoxFont object to cache
456 Retrieves a FontBoxFont from the cache. @param info font information to locate the font @return cached FontBoxFont or null if not found
457 Maps font aliases to their base names. @param baseName the base font name object
458 Adds a font substitution rule. @param match PostScript name to match (case-insensitive) @param replace Font replacement string
459 Retrieves font information by format and PostScript name. @param format font format to match @param postScriptName font's PostScript name @return FontInfo object if found, otherwise null
460 Retrieves font substitutes for a given PostScript name. @param postScriptName the original PostScript name of the font @return an unmodifiable list of substitute font names or empty if none found
461 Retrieves font name for given code. @param code font encoding code @return corresponding font name or ".notdef" if not found
462 Finds the best font match from a priority queue. @param queue priority queue containing FontMatch objects @return the best FontMatch object
463 Retrieves Type 2 char string for a CID. @param cid character identifier @return Type2CharString or null if not found
464 Applies a mask to a font code using parent's mapping functions. @param code font code to be masked @return masked code result
465 Converts color components to RGB value. @return integer representing RGB color
466 Applies mask effect to a color component. @param groupRGB color value of the group @param backdropRGB color value of the backdrop @param shift bit shift for extracting color component @param alphaFactor transparency factor @return masked color component, clamped between 0 and 255
467 Retrieves a masked portion of byte array. @return byte array containing specified segment
468 Retrieves the default GlyphList instance. @return predefined GlyphList object from GlyphList class
469 Initializes character mapping tables for the font. Checks and assigns specific CMAPs based on platform and encoding.
470 Loads font metrics for a given font name. @param fontName the font name to load metrics for @throws IOException if resource is not found or an I/O error occurs
471 Checks TrueType font embedding permissions. @param ttf TrueTypeFont object to evaluate @return true if embedding is allowed, false otherwise
472 Checks font embedding permissions. @param ttf TrueTypeFont object to evaluate @return true if subsetting is allowed, false otherwise
473 Encodes a GID-to-CID map into a Base25 string. @param gidToCid mapping of glyph IDs to character codes @return encoded Base25 string representation
474 Converts glyph name to Unicode string. @param name glyph name to convert @return Unicode representation or null if not found
475 Constructs a Type1Encoding using font metrics. @param fontMetrics FontMetrics object containing character details
476 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName name of the pattern (optional) @param colorSpace PDColorSpace object representing the color space
477 Creates a buffered image from a writable raster and AWT color space. @param raster the source writable raster @param awtColorSpace the AWT color space to use @return BufferedImage with specified color model and raster
478 Converts raster to BufferedImage with specified color space. @param raster source WritableRaster data @param colorSpace target ColorSpace for conversion @return BufferedImage with converted colors
479 Checks if the ICC profile represents an sRGB color space. @param profile ICC_Profile object to examine @return true if the profile is for sRGB, false otherwise
480 Determines the color space type. @return integer representing the color space type or -1 if undefined
481 Creates a JPEG image XObject from a BufferedImage with default quality. @param document PDF document to add the image to @param image BufferedImage to be encoded as JPEG @return PDImageXObject representing the JPEG image @throws IOException if an I/O error occurs
482 Initializes the PredictorEncoder with a document and image. @param document PDDocument where the image will be encoded @param image BufferedImage to be processed for PDF inclusion
483 Scales and masks a BufferedImage. @param image source image to process @param width target width @param height target height @param type image type @param interpolate use interpolation if true @return scaled and masked BufferedImage
484 Returns the mask parameters dictionary for the image. @return COSDictionary containing mask parameters or null if not applicable
485 Parses PNG image data to initialize state for PDF conversion. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
486 Combines IDAT chunks into a single InputStream. @param state PNG conversion state containing IDAT chunks @return Combined InputStream of all IDAT data
487 Initializes a new Patch instance with specified corner colors. @param color 2D array of corner colors
488 Computes and returns the masking area for clipping paths. @return Area representing the combined clipping region
489 Constructs a PlainText object from a list of strings. Each string is converted into a Paragraph object. @param listValue List of text strings to be processed
490 Returns the mask value from the annotation's dictionary. @return mask value as an integer
491 Creates an affine transform to adjust coordinates based on bounding box. @return AffineTransform object for coordinate transformation
492 Computes parameters for cloud-like border rendering. @param advInterm intermediate advance value @param advCorner corner advance value @param k curvature factor @param r radius @param length total length of the border @param array output: angle and offset values @return number of segments or -1 if length is zero
493 Computes mask angle for a cloud-like border segment. @param pt current point @param ptNext next point @param r radius of the border @param curlAdv advancement factor for curvature @return computed angle or default if conditions are met
494 Adjusts polygon orientation and reverses points if necessary. @param points array of border points defining the polygon
495 Generates a cloud-like border by sampling points from an ellipse. @param left, bottom, right, top bounding box coordinates of the ellipse @return array of Point2D.Double representing sampled points on the ellipse boundary
496 Determines if a path is a simple mask. @param path the GeneralPath to evaluate @return true if path can be used as a mask, false otherwise
497 Returns a masked value. @return masked float value from m1()
498 Sets the position of the signature on the PDF page. @param x horizontal coordinate @param y vertical coordinate @return reference to this PDVisibleSignDesigner instance
499 Applies a transformation to the signature's position and orientation. @param affineTransform defines the transformation matrix @return updated PDVisibleSignDesigner instance
500 Constructs a PDPageFitDestination from a COSArray. @param arr COSArray representing the destination in PDF format
501 Constructs a PDPageFitHeightDestination from a COSArray. @param arr COSArray representing the destination in PDF format
502 Constructs a PDPageFitRectangleDestination from a COSArray. @param arr COSArray representing the destination in PDF format
503 Constructs a PDPageFitWidthDestination from a COSArray. @param arr COSArray representing the destination in PDF format
504 Constructs a PDPageXYZDestination from a COSArray. @param arr COSArray representing the destination in PDF format
505 Ensures the given outline node has no siblings. @param node PDOutlineItem to validate @throws IllegalArgumentException if node has siblings
506 Provides an iterable over child outline items. @return Iterable of PDOutlineItem objects
507 Masks key-value pairs by sorting them by value. @param pairs list of KeyValue objects to be sorted
508 Masks key-value pairs by sorting them by key. @param pairs list of KeyValue objects to be masked
509 Applies rendering hints to the graphics context. @param renderingHints Map of rendering hints to apply
510 Applies mask scaling to a given path if necessary. @param linePath the original path to be processed @return the adjusted path with applied mask scaling or the original path
511 Calculates image subsampling factor for PDF rendering. @param pdImage PDImage object to be rendered @param at AffineTransform for scaling the image @return Subsampling factor, clamped between 1 and 8
512 Applies a mask to a number by scaling and rounding it. @param num the input number to be masked @return the masked integer value
513 Calculates mask value based on rotation. @param rotation angle of text rotation in degrees @return mask value for text positioning
514 Calculates mask value based on rotation. @param rotation angle of text rotation @return mask value adjusted for rotation
515 Calculates mask value based on rotation. @param rotation text rotation angle @return calculated mask value
516 Writes Unicode representation of text position to output. @param text TextPosition object containing text data
517 Returns the masked Unicode representation of the text. @return Masked Unicode string of the text element
518 Extracts and returns text from a specified PDF region. @param regionName name of the region to extract text from @return extracted text as String or null if no text found
519 Configures text direction and writes start marker. @param isLTR true if left-to-right, false otherwise @throws IOException if I/O error occurs during writing
520 Writes formatted text to output stream. Uses m1 to fetch data and writes it using m2. @throws IOException if writing fails
521 Writes extracted text to output with line separation. @throws IOException if an I/O error occurs
522 Writes extracted text to output stream using current word separator. @throws IOException if an I/O error occurs during writing
523 Ends current paragraph, writes text, and starts a new one. @throws IOException on IO error
524 Writes formatted text to the output stream. @throws IOException if an I/O error occurs during writing
525 Writes masked data to output. @throws IOException if I/O error occurs
526 Searches for a matching pattern in the list. @param string input to match against patterns @param patterns list of regex patterns @return Pattern that matches the input, or null if none found
527 Masks text by reversing and mirroring characters in right-to-left runs. @param word input string to process @return masked string with reversed and mirrored characters as needed
528 Processes input stream to build a mirroring character map. @param inputStream source of data to process @throws IOException if reading fails
529 Masks text if right-to-left content is detected. @return original or reversed text based on directionality
530 Processes text positions within defined regions. @param text TextPosition object to process
531 Checks if the text is a valid mask character. @return true if text is a non-spacing mark, modifier symbol, or modifier letter; false otherwise
532 Sets the timezone string representation. @param tz TimeZone object to process
533 Converts a byte to its hexadecimal string representation. @param b input byte @return two-character hexadecimal string
534 Converts a byte array to its hexadecimal representation. @param bytes input byte array @return String containing hexadecimal values
535 Masks and converts a byte to its hexadecimal representation. @param b input byte @return byte array containing two hex bytes
536 Converts byte array to ASCII representation in hexadecimal. @param bytes input byte array @return byte array containing ASCII hex values
537 Writes hexadecimal representation of a byte to an output stream. @param b the input byte @param output OutputStream to write to @throws IOException if writing fails
538 Decodes and removes spaces from a Base64 string. @param base64Value Base64 encoded string with possible spaces @return Decoded byte array without spaces
539 Merges two sorted segments of an array. @param arr the original array containing elements to merge @param aux auxiliary array for merging @param from starting index of the first segment @param mid ending index of the first segment and starting of second @param to ending index of the second segment @param cmp comparator for element ordering
540 Constructs a Matrix from an AffineTransform. Initializes transformation parameters based on the given AffineTransform.
541 Applies a transformation to the given 2D point. @param point the point to be transformed
542 Formats a float value into ASCII byte representation. @param value the number to format @param maxFractionDigits maximum fraction digits allowed @param asciiBuffer buffer to store ASCII bytes @return new offset after formatting or -1 if invalid input
543 Retrieves the PDFBox library version. @return version string or null if unable to read
544 Parses XML input stream into a Document. @param is input stream containing XML data @param nsAware true for namespace awareness, false otherwise @return Document object representing the parsed XML @throws IOException if parsing fails
545 Retrieves value associated with byte sequence. @param bytes input byte array @return value from trie or default if not found
546 Initializes a new COSBoolean instance. @param aValue standard boolean value to encapsulate
547 Private constructor initializes a COSName with a given name. @param aName the string representation of the PDF name
548 Private constructor to restrict instantiation. Ensures only one singleton instance exists.
549 Constructs a COSString with specified byte array and hex encoding option. @param bytes the byte array to be used @param forceHex true if hexadecimal form should be forced
550 Initializes a new COSDictionary instance. Sets up an initial update state for managing document changes.
551 Initializes a new COSObject with a given COSBase. @param object the underlying COSBase object to wrap
552 Initializes a new COSObject with the given base object and parser. @param object underlying COSBase object to wrap @param parser ICOSParser instance for handling PDF parsing tasks
553 Initializes a new COSObject with a given key and parser. @param key unique identifier for the COS object @param parser ICOSParser instance used to parse the object
554 Constructs DecodeOptions with specified source region. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width region width @param height region height
555 Initializes a free object reference. @param key unique identifier for the PDF object @param nextFreeObject ID of the next free object in the list
556 Constructs an ObjectStreamXReference for a PDF object. @param objectStreamIndex index of the object stream @param key reference key of the object @param object associated COSBase object @param parentKey key of the parent object
557 Creates an instance of DefaultResourceCacheCreateImpl with stable caching enabled.
558 Wraps a COSDictionary object. @param dictionary the PDF dictionary to wrap
559 Constructs a PDAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
560 Constructs a PDUserProperty with a given COSDictionary and user attribute. @param dictionary the PDF dictionary to wrap @param userAttributeObject the user attribute object associated with the property
561 Initializes a new PDOutlineNode with a given COS dictionary. @param dict the PDF dictionary representing the outline node
562 Constructs a PDTransition object wrapping a COSDictionary. @param dictionary PDF dictionary containing transition properties
563 Constructs a new PDDestinationNameTreeNode. @param dic COSDictionary containing name-value pairs for the node
564 Constructs an embedded files tree node from a dictionary. @param dic COSDictionary containing file metadata
565 Constructs a new PDJavascriptNameTreeNode instance. @param dic COSDictionary containing JavaScript name tree data
566 Constructs a new PDStructureElementNameTreeNode from a COSDictionary. @param dic COSDictionary containing structure element data
567 Constructs a PDNumberTreeNode from a COSDictionary. @param dic the COSDictionary representing the node @return PDNumberTreeNode instance initialized with the dictionary and value type
568 Constructs a PDMetadata instance from a COSStream. @param str underlying COSStream object containing metadata
569 Initializes a PDObjectStream from a given COSStream. @param str underlying COSStream object representing the PDF stream
570 Initializes a PDEmbeddedFile with a given COSStream. @param str underlying COSStream object representing the embedded file
571 Initializes PDFunction with a given COSBase object. @param function the underlying COSBase object representing the PDF function
572 Initializes a PDXObject with a given COSStream and subtype. @param stream underlying COSStream object @param subtype the subtype of the XObject
573 Constructs a new PDF structure element from a COS dictionary. @param dic underlying COS dictionary representing the structure node
574 Constructs a new structure tree root from a COS dictionary. @param dic underlying COS dictionary representing the structure node
575 Default constructor for SecurityHandler.
576 Initializes a new SecurityHandler with a specified protection policy. @param protectionPolicy the security policy to apply
577 Constructs an FDFAnnotationCaret with a given COSDictionary. @param a COSDictionary representing the annotation data
578 Constructs an FDFAnnotationCircle with a given COSDictionary. @param a COSDictionary representing the annotation data
579 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a COSDictionary representing the file attachment annotation data
580 Constructs an FDFAnnotationFreeText with a given COSDictionary. @param a COSDictionary representing the annotation data
581 Constructs an FDFAnnotationInk from a COSDictionary. @param a COSDictionary containing annotation data
582 Constructs an FDFAnnotationLine with a given COSDictionary. @param a COSDictionary representing the line annotation data
583 Constructs an FDFAnnotationLink from a COSDictionary. @param a COSDictionary representing the annotation data
584 Constructs an FDFAnnotationPolygon with a given COSDictionary. @param a COSDictionary representing the polygon annotation data
585 Constructs an FDFAnnotationPolyline from a COSDictionary. @param a COSDictionary representing the polyline annotation data
586 Constructs an FDFAnnotationSound from a COSDictionary. @param a COSDictionary representing the sound annotation data
587 Constructs an FDFAnnotationSquare with a given COSDictionary. @param a COSDictionary representing the annotation data
588 Constructs an FDFAnnotationStamp with a given COSDictionary. @param a COSDictionary representing the annotation data
589 Constructs an FDFAnnotationText with a given COSDictionary. @param a COSDictionary representing the annotation data
590 Constructs an FDF text markup annotation from a COSDictionary. @param a COSDictionary representing the annotation data
591 Extracts and returns font classification data. @return PDPanoseClassification object containing extracted data
592 Creates a Composite instance for blending images. @param blendMode the blending mode to apply @param constantAlpha the alpha value for transparency (clamped between 0 and 1) @return Composite object for image blending
593 Retrieves or creates transparency group attributes. @return PDTransparencyGroupAttributes object or null if not set
594 Constructs a new PDShadingPattern instance. @param resourceDictionary COSDictionary containing shading pattern properties
595 Constructs a new PDTilingPattern instance. @param dictionary COSDictionary containing pattern properties @param resourceCache cache for managing resources
596 Constructs a new PDShadingType1 instance from a COSDictionary. @param shadingDictionary PDF dictionary containing Type 1 shading properties
597 Constructs a new PDShadingType2 instance from a COSDictionary. @param shadingDictionary PDF dictionary containing Type 2 shading properties
598 Constructs an AxialShadingPaint object using specified shading and transformation. @param shadingType2 Axial shading type for the effect @param matrix Transformation matrix to apply to the shading
599 Constructs a new RadialShadingPaint object. @param shading PDShadingType3 object representing the radial shading @param matrix Transformation matrix for the shading effect
600 Constructs a new Type1ShadingPaint instance. @param shading PDShadingType1 object to apply @param matrix Transformation matrix for the shading
601 Constructs a new Type4ShadingPaint object. @param shading PDShadingType4 object representing the type 4 shading @param matrix Transformation matrix for the shading
602 Constructs a new Type5ShadingPaint instance. @param shading PDShadingType5 object to apply @param matrix Transformation matrix for the shading effect
603 Constructs a new Type6ShadingPaint object. @param shading PDShadingType6 object to apply @param matrix Transformation matrix for the shading
604 Constructs a new Type7ShadingPaint object. @param shading PDShadingType7 object to apply @param matrix Transformation matrix for the shading
605 Constructs a new PDExtendedGraphicsState with a given COSDictionary. @param dictionary COSDictionary containing graphics state properties
606 Constructs a PDSoftMask from a COSDictionary. @param dictionary PDF dictionary containing mask properties
607 Initializes PlainText with given text, splitting into Paragraphs. @param textValue raw text input to be processed
608 Constructs an embedded goto action. @param a COSDictionary with action details
609 Constructs a new PDActionGoTo instance. @param a COSDictionary representing the PDF action details
610 Constructs a new PDActionHide instance. @param a COSDictionary representing the PDF action details
611 Constructs a new PDActionImportData instance. @param a COSDictionary representing the PDF action details
612 Constructs a new JavaScript action from a COS dictionary. @param a COSDictionary representing the PDF action details
613 Constructs a new PDActionLaunch instance. @param a COSDictionary representing the PDF launch action details
614 Constructs a new PDActionMovie instance. @param a COSDictionary representing the PDF action details
615 Constructs a new named action from a COSDictionary. @param a COSDictionary representing the PDF action details
616 Constructs a new remote navigation action from a PDF dictionary. @param a COSDictionary containing the action details
617 Constructs a new PDActionResetForm instance. @param a COSDictionary representing the PDF action details
618 Constructs a new PDActionSound instance. @param a COSDictionary representing the sound action details
619 Constructs a new PDActionSubmitForm instance. @param a COSDictionary containing PDF action details
620 Constructs a new PDActionThread instance. @param a COSDictionary representing the PDF action details
621 Constructs a new PDActionURI instance. @param a COSDictionary representing the PDF URI action details
622 Combines keys and values into a list of KeyValue pairs. @param key list of keys @param value list of corresponding values @return List of KeyValue objects
623 Constructs a new PDNonTerminalField instance. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
624 Constructs a new terminal field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
625 Initializes a new instance of PDRectlinearMeasureDictionary. @param dictionary the underlying COSDictionary representing measurement data
626 Creates and returns a copy of this matrix. @return A new instance with the same transformation parameters as this matrix
627 Creates a scaling transformation matrix. @param x horizontal scale factor @param y vertical scale factor @return Matrix representing the scaling transformation
628 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation transformation
629 Creates a transformation matrix for rotation and translation. @param theta angle of rotation in radians @param tx horizontal translation @param ty vertical translation @return Matrix representing the combined rotation and translation
630 Applies 2D transformation to a vector. @param vector the input vector to transform @return transformed vector after applying matrix transformation
631 Scales the vector by a factor. @param sxy scaling factor @return new Vector with scaled coordinates
632 Creates and returns a PDFieldTree instance for this PDAcroForm. @return PDFieldTree object representing the field tree
633 Sets a default value at the root of the trie. @param defaultValue the default value to be set
634 Retrieves an object by index. @param index position of the object in the collection @return object at the specified index or null if not found
635 Returns the size of the managed object list. @return int representing the number of objects
636 Retrieves data using an index. @param index position of the data to retrieve @return data associated with the index or null if not found
637 Masks an object with a given revision number. @param object the object to be masked @param revisionNumber the associated revision number
638 Updates the revision number for a given object. @param object the object to update @param revisionNumber the new revision number
639 Retrieves the appropriate Encoding based on the provided COSName. @param name the COSName representing the encoding type @return corresponding Encoding instance or null if not found
640 Creates a PDSoftMask from a COSBase object. @param dictionary the PDF dictionary or name containing mask properties @param resourceCache cache for managing resources @return PDSoftMask object or null if invalid input
641 Finds the index of the first selected radio button. @return Index of the selected button or -1 if none is selected
642 Adds a source PDF file to the merger. @param source path to the PDF file to be added @throws FileNotFoundException if the specified file does not exist
643 Parses and validates the trailer section of a PDF. @return true if trailer is successfully parsed, false otherwise @throws IOException if an I/O error occurs during parsing
644 Retrieves an object from the pool by its key. @param key unique identifier for the COSBase object @return COSBase object associated with the key or null if not found
645 Executes a sequence of instructions within the given context. @param context execution context for instruction processing
646 Initializes a COSDocument with specified stream cache and parser. @param streamCacheCreateFunction function to create stream cache @param parser ICOSParser for document parsing
647 Processes mask operation in PDF content. @param operator the PDF operator being processed @param operands list of operands associated with the operator @throws IOException if an I/O error occurs during processing
648 Retrieves and returns the current graphics state's text line matrix. @return Matrix representing the current text line transformation
649 Sets text line matrix in current graphics state. @param value Matrix representing the new transformation
650 Retrieves the current graphics state's text matrix. @return Matrix representing the current text transformation
651 Updates the text matrix in the current graphics state. @param value new transformation matrix for text rendering
652 Calculates mask value based on width and current transformation matrix. @param width the width parameter for calculation @return computed mask value as float
653 Retrieves the current non-stroking color. @return PDColor object representing the non-stroking color
654 Sets non-stroking color in PDF graphics state. @param color PDColor to be set
655 Retrieves the non-stroking color space. @return PDColorSpace object representing the current non-stroking color space
656 Retrieves the current stroking color. @return PDColor object representing the current stroking color
657 Sets the stroking color for mask operations. @param color new stroking color to apply
658 Retrieves the current stroking color space. @return PDColorSpace used for stroking operations
659 Creates an input stream for reading the PDF stream. @throws IOException if there's no data or a writer is open
660 Creates an output stream for writing to the PDF stream. Ensures only one writer is open and initializes necessary resources. @return OutputStream for writing data @throws IOException if I/O operations fail or multiple writers are attempted
661 Retrieves an appropriate ImageReader for a given format. @param formatName the format name of the images @param errorCause cause of the error if no reader is found @return ImageReader object or throws MissingImageReaderException if none available
662 Retrieves an ImageReader for a specified format. @param formatName the format name of the images @param errorCause additional information if no reader is found @return ImageReader object if available, otherwise throws MissingImageReaderException
663 Retrieves or creates an Operator instance for inline images. @param operator the operator string to process @return Operator object representing the image data
664 Generates a string representation of the COSArrayList. @return formatted string including contained objects
665 Determines if control points form a valid mask. @param ctl array of control points defining the shape @return true if mask is valid, false otherwise
666 Retrieves the x-coordinate of the rectangle. @return The x-coordinate value as a float.
667 Retrieves the y-coordinate of the rectangle. @return y-coordinate value as a float
668 Retrieves the y-coordinate of the rectangle's bottom-left corner. @return y-coordinate as a float
669 Retrieves the y-coordinate of the bottom-left corner. @return y-coordinate as a float
670 Retrieves font size from PDFontSetting. @return Font size as a float
671 Retrieves the first color value from the COSArray. @return float representing the first color component
672 Retrieves and converts the second element of the COSArray to a float. @return float value of the second element in the array
673 Retrieves the gamma value from the color array. @return gamma value as a float
674 Retrieves the X tristimulus value. @return float representing the X value
675 Retrieves Y tristimulus value from COSArray. @return Y component as float
676 Retrieves the Z value from tristimulus data. @return Z component as a float
677 Retrieves an integer value from the COSArray at a specified index. @param index position of the element in the array @param defaultValue default value to return if element is not found or not a COSNumber @return integer value of the COSNumber at the given index, or defaultValue
678 Retrieves string value at index, defaulting to provided value if not found. @param index position in the array @param defaultValue fallback if element is missing or not a COSName @return String representation of COSName or default value
679 Searches for an object in the COSArray. @param object the COSBase object to search for @return index of the found object or -1 if not present
680 Retrieves and creates a list of filters from the stream. @return List of Filter objects @throws IOException if an error occurs during filter retrieval
681 Constructs a COSArrayList with specified actual list and COSArray. @param actualList List of COS objects to manage @param cosArray Underlying COSArray for data storage
682 Evaluates Function Type 2 with given input. @param input array of input values @return float array representing the function result
683 Retrieves and returns a list of filter names applied to the PDF stream. @return List of COSName objects representing filter names or an empty list if none are set
684 Retrieves the list of filter names applied to the PDF stream. @return List of filter names or an empty list if no filters are present
685 Writes a boolean value as PDF COSBoolean to output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
686 Writes mask data from ASCII string to output stream. @param text input string to be converted and written @throws IOException if an I/O error occurs during writing
687 Writes a COSDictionary to an OutputStream. @param output stream to write dictionary to @param cosDictionary dictionary containing key-value pairs to serialize
688 Masks user property if it has changed. @param oldEntry original entry object @param newEntry updated entry object
689 Returns the size of the dictionary. @return int representing the number of elements in the COSDictionaryMap
690 Retrieves a COSObject by key from the dictionary. @param key the key associated with the desired COSObject @return COSObject or null if not found or not a COSObject
691 Retrieves a value from the dictionary by one of two keys. @param firstKey primary key to try for retrieval @param secondKey fallback key if first key is not found @return COSBase object or null if neither key is found
692 Returns the number of recipients in the encryption settings. @return int representing the count of recipients
693 Retrieves a recipient's mask from the encryption settings. @param i index of the recipient in the recipients list @return COSString representing the mask or null if not found
694 Retrieves the mask value for the transition. @return COSBase object representing the mask or zero if not found
695 Retrieves all metadata keys from the PDF document. @return Sorted set of metadata keys as strings
696 Retrieves non-standard attribute names from the PDF document. @return List of attribute names excluding standard ones
697 Filters and adds specific entries from the trailer dictionary to the stream. @param trailerDict dictionary containing PDF trailer information
698 Constructs a new COSDictionary by copying entries from an existing dictionary. @param dict source dictionary containing items to copy
699 Checks if a PDF dictionary is a mask. @param dictionary the COSDictionary to check @return true if dictionary contains specific metadata, false otherwise
700 Checks if font descriptor contains width information. @return true if WIDTHS or MISSING_WIDTH is present, false otherwise
701 Checks if font descriptor contains missing width data. @return true if missing width is defined, false otherwise
702 Checks if the XFA key is present in the dictionary. @return true if XFA key exists, false otherwise
703 Initializes a new cross-reference trailer object. @param startBytePos starting byte position of the trailer @param type type of cross-reference table
704 Constructs a COSFloat from a string. @param aFloat the string representation of the float @throws IOException if parsing fails or input is invalid
705 Generates a string representation of the COSFloat object. @return formatted string with float value enclosed in "COSFloat{}"
706 Writes masked float value to output stream. @param output destination stream for writing @throws IOException if I/O error occurs during write operations
707 Creates and returns a new COSIncrement instance. @return COSIncrement object initialized with update info
708 Initializes a new LayerUtility instance. @param targetDoc the target PDF document to manipulate layers in
709 Constructs a new resource cache instance with stable caching enabled.
710 Checks if a COS object needs to be updated. @param base the COSBase object to check @return true if the object requires an update, false otherwise
711 Sets the MCID for a structure element. @param mcid non-negative mark content identifier @throws IllegalArgumentException if mcid is negative
712 Returns a COSInteger representing the mask value. @return COSInteger object with the degrees value
713 Writes a COS integer to the output stream. @param output destination for writing data @param cosInteger integer value to write @throws IOException if an I/O error occurs
714 Masks and writes a comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs during writing
715 Writes a masked comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs during writing
716 Masks and writes a comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs during writing or invalid comment format
717 Writes a masked comment to the output stream. @param comment text to be written, must not contain newlines @throws IOException if an I/O error occurs during writing
718 Constructs a COSObjectKey with default stream index. @param num object number (must be non-negative) @param gen generation value (must be non-negative)
719 Compares current entry with another XReferenceEntry. @param xReferenceEntry the entry to compare with @return negative if less, zero if equal, positive if greater; -1 if m1 is null
720 Returns the scaling factor in X direction. @return horizontal scaling factor of the text matrix
721 Retrieves the scaling factor in Y direction from the text matrix. @return float representing the scaling factor
722 Initializes a new COSWriter instance for PDF output. @param outputStream the OutputStream to write PDF data to @param compressParameters parameters for PDF compression settings
723 Initializes a new COSWriter for PDF output. @param outputStream target stream to write the PDF @param inputData input data for incremental updates @throws IOException if an I/O error occurs
724 Sets the update state of the document. @param updated indicates whether updates are accepted
725 Decodes byte array to string using UTF-16BE or UTF-16LE if BOM present; otherwise, uses PDFDocEncoding. @return decoded string
726 Constructs a COSString from the given text. @param text input string to be converted @param forceHex if true, forces hexadecimal encoding
727 Checks font mask condition. @return true if condition is met, false otherwise
728 Reads specified number of bytes into array. Handles decoding and manages end-of-file conditions. @param data buffer to store read bytes @param offset starting index in the buffer @param len number of bytes to read @return actual number of bytes read or -1 if EOF @throws IOException if an I/O error occurs
729 Completes ASCII85 encoding process. Calls superclass method and resets internal buffers.
730 Ends content stream processing. Logs a warning if text mode is active without ending text. @throws IOException if an I/O error occurs during stream closure
731 Closes the content stream, logging a warning if text mode is active. Ends text mode and closes the underlying output stream. @throws IOException if an I/O error occurs during closure
732 Ends the content stream processing. Logs a warning if text mode is active without ending text. @throws IOException if an I/O error occurs during stream closure
733 Ends the content stream processing. Logs a warning if text mode is active without ending text. @throws IOException if an I/O error occurs during stream closure
734 Returns the next byte from the decoded data. @return next byte or -1 if end of stream @throws IOException if an I/O error occurs
735 Reads and decodes data from the input stream into a byte array. @param data target array to store decoded bytes @param offset starting position in the target array @param length number of bytes to read @return actual number of bytes read or -1 if end of stream is reached @throws IOException if an I/O error occurs during reading or decoding
736 Sets signature image from input stream. @param stream source of image data @throws IOException if an I/O error occurs
737 Encodes raw data using LZW compression. @param rawData input stream of raw data to compress @param encoded output stream for the compressed data @param parameters dictionary containing encoding parameters @throws IOException if an I/O error occurs
738 Determines the best encoded row using PNG filtering techniques. @return byte array of the most compressible row
739 Iterates over and processes cross-reference objects. Resets each object and clears current references.
740 Calls m1 on various overlay objects and documents. @throws IOException if an I/O error occurs during processing
741 Constructs a new PDFormXObject from a given PDStream. @param stream the PDStream containing the form's data
742 Initializes PDFStreamParser with content stream. @param pdContentstream PDContentStream object containing PDF data @throws IOException if an I/O error occurs during initialization
743 Initializes PDFStreamParser with byte array. @param bytes PDF content as byte array
744 Retrieves and parses a PDF object by its number. @param objectNumber the unique identifier of the PDF object @return COSBase representation of the PDF object or null if not found @throws IOException if an I/O error occurs during parsing
745 Parses PDF object stream to extract object numbers and offsets. @return Map of object numbers to their offsets @throws IOException if an I/O error occurs during parsing
746 Initializes encoding mappings from a map of character codes to names. @param codeToName map containing character codes and their corresponding names
747 Converts an Encoding to a Type1Encoding. @param encoding source font encoding @return Type1Encoding instance with populated mappings
748 Skips leading whitespace and processes line breaks in the PDF source. @throws IOException if an I/O error occurs
749 Parses PDF component and handles errors. @return true if parsing is successful, false otherwise
750 Reads and returns a masked string from the PDF source. @throws IOException if end-of-file is reached unexpectedly
751 Skips whitespace and comments in PDF source. @throws IOException if an I/O error occurs
752 Determines the number of color components for shading. @return int representing the number of color components @throws IOException if an I/O error occurs
753 Returns the number of color components. @return int representing the number of color components @throws IOException if an I/O error occurs during determination
754 Determines the closest xref offset to a given xrefOffset. @param xrefOffset the target offset value @return the closest xref offset or -1 if not found @throws IOException if an I/O error occurs during processing
755 Parses the PDF header and sets document version. @return true if parsing is successful, false otherwise
756 Parses PDF header and sets document version. @return true if successful, false otherwise
757 Parses and retrieves all objects from a PDF object stream. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
758 Generates a masked encryption key for PDF objects. @param objectNumber unique object identifier @param genNumber generation number of the object @return byte array representing the masked key
759 Initializes a new content stream for PDF appearance. @param appearance PDF appearance stream to write to @param outputStream stream for outputting the PDF content
760 Initializes a new PDPageContentStream instance. @param doc PDF document to write content to @param appearance appearance stream for the content @param outputStream stream for outputting the PDF content
761 Transforms a point using the current graphics state's transformation matrix. @param x the original X coordinate @param y the original Y coordinate @return transformed Point2D.Float object
762 Creates a tiling pattern context for PDF rendering. @param cm color model for the context @param deviceBounds device space bounding box @param userBounds user space bounding box @param xform transformation matrix @param hints rendering hints @return PaintContext object for tiling pattern
763 Applies transformation to matrix. @param matrix input transformation matrix
764 Applies a translation transformation to the matrix. @param tx horizontal translation value @param ty vertical translation value
765 Applies scaling transformation to the matrix. @param sx scale factor for x-axis @param sy scale factor for y-axis
766 Applies transformation from another matrix. @param other matrix to apply transformation from @return new Matrix representing combined transformations
767 Applies GSUB transformations to text and writes glyphs to output stream. @param gsubWorker object for applying GSUB transformations @param glyphIds set to collect processed glyph IDs @param font font used for character-to-glyph mapping @param text input string to process @return byte array of transformed glyphs @throws IOException on I/O error
768 Creates and returns a new PDDocument instance. @return PDDocument object initialized with document, source, and permissions @throws IOException if an error occurs during initialization
769 Constructs a new PDF document. @param doc COSDocument representing the underlying PDF structure @param source RandomAccessRead for accessing the PDF data
770 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the protection policy to apply @return SecurityHandler instance or null if not found
771 Retrieves and instantiates a SecurityHandler by name. @param name unique identifier for the security handler @return SecurityHandler instance or null if not found
772 Sets stroking color using provided PDF color. @param color PDColor object to set as stroking color @return true if color is successfully applied, false otherwise @throws IOException if an I/O error occurs during color setting
773 Sets the non-stroking masking color for PDF content. @param color PDColor object representing the color to be set @return true if color components are valid and set, false otherwise
774 Initializes Mac OS Roman character encoding. Populates the encoding map with character codes and names from the table.
775 Checks if all permissions are enabled. @return true if all permission checks pass, false otherwise
776 Checks if any permission is enabled. @return true if at least one permission is granted, false otherwise
777 Encrypts and writes an array of bytes to the output stream. @param data the byte array to encrypt @param output the OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs
778 Encrypts a portion of byte array and writes it to the output stream. @param data the byte array containing the data to encrypt @param offset the starting index in the data array @param len the number of bytes to encrypt @param output the OutputStream to write the encrypted bytes to @throws IOException if an I/O error occurs
779 Masks text by integrating diacritics and adjusting positions. @param i index in the text @param diacritic TextPosition object representing a diacritic
780 Processes and writes text to output stream. @param text text content to be written @param textPositions positions of text in PDF @throws IOException if an I/O error occurs
781 Initializes a Line segment with start and end points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for the starting point @param c1 color array for the ending point
782 Initializes a SoftMask with specified parameters. @param paint the paint object for rendering @param mask the BufferedImage representing the mask @param bboxDevice the bounding box in device space @param backdropColor the background color as PDColor @param transferFunction the transfer function for color transformation
783 Applies mask effect to a group image using a backdrop. @param backdrop the backdrop image @param offsetX horizontal offset for backdrop @param offsetY vertical offset for backdrop
784 Retrieves font metrics for a given font name. Handles aliases and ensures thread-safe loading. @param fontName the font name to load metrics for @return FontMetrics object or null if not found
785 Initializes a GlyphList with specified number of entries. @param input InputStream containing the glyph list data @param numberOfEntries expected number of entries in the glyph list @throws IOException if an I/O error occurs while loading the list
786 Constructs a GlyphList by copying mappings from an existing GlyphList and loading additional data. @param glyphList existing GlyphList to copy mappings from @param input InputStream containing new glyph list data @throws IOException if an I/O error occurs while reading the input
787 Converts font encoding code to glyph ID. @param code font encoding code @return glyph ID associated with the code, or 0 if not found
788 Masks font name, checking for embedding and glyph presence. @param name original font name @return masked or original font name based on conditions
789 Masks font name based on various checks and transformations. @param name original font name @return masked or alternative font name, or ".notdef" if none found
790 Initializes the CMYK color space with ICC profile. @throws IOException if default CMYK profile cannot be loaded
791 Masks an image with another image. @param image source image to mask @param mask masking image @param interpolateMask whether to use interpolation for resizing the mask @param isSoft whether to apply soft masking @param matte color values for soft masking @return masked BufferedImage
792 Validates PNG chunk integrity. @param chunk the PNG chunk to validate @return true if valid, false otherwise
793 Initializes a cubic Bezier curve with given control points and detail level. @param ctrlPnts array of control points defining the curve @param l level of detail (number of segments)
794 Determines if a point is inside the shaded triangle. @param p point to check @return true if point is inside, false otherwise
795 Computes interpolated color at a given point. @param p the point for which to calculate the color @return float array representing the interpolated color
796 Updates clipping paths with a given GeneralPath. @param path the GeneralPath object to process
797 Updates clipping paths using an Area. @param area the Area object to process
798 Applies a clipping path to the graphics context. @param graphics the target graphics context for rendering
799 Applies a mask to the given graphics context using a tiling pattern. @param g Graphics2D context for rendering @param pattern PDTilingPattern to apply as mask @param colorSpace PDColorSpace of the mask color @param color PDColor used in the mask @param patternMatrix Matrix defining the transformation for the pattern @throws IOException if an I/O error occurs during processing
800 Calculates text mask value based on rotation and direction. @return Computed mask value for text positioning
801 Constructs a TextPosition object with specified parameters for text element. @param pageRotation rotation of the PDF page @param pageWidth width of the PDF page @param pageHeight height of the PDF page @param textMatrix transformation matrix for text positioning @param endX ending X coordinate of the text @param endY ending Y coordinate of the text @param maxHeight maximum height of the text @param individualWidth width of an individual character @param spaceWidth width of a space character @param unicode Unicode representation of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font in user space units @param fontSizeInPt size of the font in points
802 Calculates mask value based on text direction. @return Adjusted mask value for current text orientation
803 Calculates mask value based on rotation. @return calculated mask value using text rotation angle
804 Calculates mask value based on text properties. @return computed mask value
805 Starts an article with left-to-right text direction. @throws IOException if I/O error occurs during writing
806 Ends current paragraph, writes text, and marks end of paragraph. @throws IOException on IO error
807 Compiles and matches patterns against text from a PDF position. @param pw wrapper for PDF text position @return compiled Pattern object for the text content
808 Masks text by reversing and mirroring characters in right-to-left runs. @param word input string to process @return masked string with reversed and mirrored characters as needed
809 Converts Calendar to formatted date string with timezone. @param cal Calendar instance to convert @return Formatted date string or null if input is null
810 Formats a Calendar instance to ISO 8601 string with timezone. @param cal Calendar object to format @return ISO 8601 formatted date-time string
811 Converts byte array to hexadecimal string representation. @return Hexadecimal string of the internal byte array
812 Writes CMS signature to PDF. @param cmsSignature byte array of the CMS signature @throws IOException if I/O error occurs or not enough space for signature
813 Writes the COSName to an OutputStream in PDF format. @param output the OutputStream to write to @throws IOException if writing fails
814 Writes hexadecimal representation of each byte in the array to an output stream. @param bytes input byte array to be processed @param output OutputStream to write to @throws IOException if writing fails
815 Iteratively sorts the array using merge sort. @param arr array to be sorted @param cmp comparator for element ordering
816 Parses XML input stream into a Document without namespace awareness. @param is input stream containing XML data @return Document object representing the parsed XML @throws IOException if parsing fails
817 Detects file type from input stream using magic numbers. @param inputStream source to read file content @return FileType object representing the detected file type @throws IOException if stream does not support mark/reset or ends prematurely
818 Initializes the LegacyPDFStreamEngine with text processing operators. Registers various PDF operators for text handling and rendering.
819 Retrieves or creates a COSName instance for the given name. @param aName the name string to process @return COSName object associated with the provided name
820 Constructs a COSString from a byte array. @param bytes the byte array to be used
821 Constructs an empty COSArray.
822 Constructs a COSArray from a list of COSObjectable objects. @param cosObjectables list of COSObjectable items to convert
823 Initializes a new COSStream with a given cache. @param streamCache the cache for managing stream data
824 Creates an unmodifiable wrapper around a COSDictionary. @param dict the original COSDictionary to wrap
825 Creates a new DecodeResult instance with default parameters. @return DecodeResult object initialized with an empty COSDictionary
826 Initializes a new PDDocumentInformation instance. Creates an empty COSDictionary to store document metadata.
827 Constructs a new PDResources instance. Initializes internal dictionaries and caches for resource management.
828 Converts a map to a COSDictionary. @param someMap input map with string keys and COSObjectable values @return COSDictionary containing the same key-value pairs as the input map
829 Initializes a new PDDictionaryWrapper with an empty COSDictionary.
830 Initializes a new PDNameTreeNode with an empty COSDictionary.
831 Constructs a PDNumberTreeNode. @param valueClass type of numeric values managed by this node
832 Constructs an empty page label range. Initializes with a default PDF dictionary.
833 Initializes a new instance of PDMarkInfo. Sets up an empty COSDictionary to manage marking information.
834 Initializes a new PDPropertyList instance. Creates and associates an empty COSDictionary for property storage.
835 Initializes a new PDBoxStyle instance with an empty COSDictionary.
836 Initializes a new cryptographic filter dictionary. Creates and sets up an underlying COSDictionary for storing encryption settings.
837 Initializes a new PDEncryption instance. Sets up an empty encryption dictionary.
838 Initializes a new FDFCatalog instance. Sets up an empty COSDictionary for storing catalog data.
839 Initializes a new FDFDictionary instance. Encapsulates an empty COSDictionary to manage FDF data.
840 Initializes a new FDFField instance. Creates an underlying COSDictionary to manage field properties.
841 Initializes a new FDFIconFit instance. Sets up a COSDictionary to manage icon fitting properties.
842 Initializes a new instance of FDFJavaScript. Sets up an internal COSDictionary for managing JavaScript data.
843 Initializes a named page reference with a new COSDictionary.
844 Constructs a new FDFPage. Initializes an empty COSDictionary to store page data.
845 Constructs an instance of FDFPageInfo with default page settings. Initializes a new COSDictionary to store page information.
846 Initializes a new FDF template with an empty COSDictionary.
847 Constructs a new PDDeviceNAttributes instance. Initializes an associated COSDictionary for attribute storage.
848 Constructs a new PDDeviceNProcess instance. Initializes the internal COSDictionary for color space attributes.
849 Initializes a new PDShading instance with an empty dictionary.
850 Initializes a new instance of PDAdditionalActions with an empty COSDictionary.
851 Initializes a new instance of PDAnnotationAdditionalActions. Sets up an internal dictionary to store annotation actions.
852 Constructs a new instance of PDDocumentCatalogAdditionalActions. Initializes an empty COSDictionary to store document actions.
853 Initializes additional actions for PDF form fields. Sets up an empty COSDictionary to store field actions.
854 Initializes a new instance of PDPageAdditionalActions. Sets up an empty dictionary to manage page actions.
855 Constructs a new PDTargetDirectory. Initializes an internal COSDictionary for storing directory attributes.
856 Initializes a new PDURIDictionary. Creates and sets up an underlying COSDictionary for URI actions.
857 Initializes launch parameters for Windows actions. Sets up a COSDictionary to manage file execution attributes.
858 Initializes a new border effect dictionary. Creates an underlying COSDictionary to manage border properties.
859 Initializes a new border style dictionary. Creates an underlying COSDictionary to manage border properties.
860 Initializes a new instance of PDPropBuild. Creates and configures a COSDictionary for managing digital signature properties.
861 Constructs a new PDPropBuildDataDict instance. Initializes an empty COSDictionary with direct object usage enabled.
862 Initializes a new instance of PDSeedValueMDP. Sets up a COSDictionary with direct updates enabled.
863 Initializes a new PDSeedValueTimeStamp instance. Sets up a COSDictionary with direct update state.
864 Constructs a new PDField instance with default attributes. @param acroForm the AcroForm containing this field
865 Initializes a new PDViewportDictionary with an empty COSDictionary.
866 Initializes viewer preferences. Sets up internal dictionary for storing configuration settings.
867 Initializes a COSObject with a given base object and key. @param object the underlying COSBase object @param objectKey unique identifier for the COS object
868 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
869 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
870 Initializes a PDStandardAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
871 Constructs a new PDOutlineItem from a given COS dictionary. @param dic the PDF dictionary representing the outline item
872 Retrieves metadata stream from PDF document. @return PDMetadata object or null if not found
873 Retrieves metadata from the image object. @return PDMetadata object or null if not found
874 Retrieves and initializes an extended object stream. @return PDObjectStream or null if no extension exists
875 Constructs a PDFunctionType0 instance. @param function the underlying COSBase object representing the PDF function
876 Constructs a PDFunctionType3 object. @param functionStream COSBase object representing the PDF Type 3 function
877 Constructs a PDPostScriptXObject with a given COSStream. @param stream underlying COSStream object representing PostScript content
878 Constructs a PDFormXObject from a given COSStream. @param stream underlying COSStream object representing the form XObject
879 Initializes a PDFormXObject with a given COSStream and resource cache. @param stream underlying COSStream object representing the form XObject @param cache resource cache for managing resources efficiently
880 Default constructor for PublicKeySecurityHandler.
881 Default constructor for StandardSecurityHandler.
882 Initializes a new PublicKeySecurityHandler with a specified public key protection policy. @param publicKeyProtectionPolicy the security policy to apply using public keys
883 Initializes a new StandardSecurityHandler with a specified protection policy. @param standardProtectionPolicy the security policy to apply
884 Constructs an FDF highlight annotation from a COSDictionary. @param a COSDictionary representing the annotation data
885 Constructs an FDF squiggly annotation from a COSDictionary. @param a COSDictionary representing the annotation data
886 Constructs an FDF strikeout annotation from a COSDictionary. @param a COSDictionary representing the annotation data
887 Constructs an underline annotation from a COSDictionary. @param a COSDictionary representing the annotation data
888 Constructs a new PDTilingPattern instance. @param dictionary COSDictionary containing pattern properties
889 Constructs a new PDShadingType3 instance from a COSDictionary. @param shadingDictionary PDF dictionary containing Type 3 shading properties
890 Constructs a new triangle-based shading type from a PDF dictionary. @param shadingDictionary PDF dictionary containing shading properties
891 Constructs a new triangle-based shading type from a PDF dictionary. @param shadingDictionary PDF dictionary containing shading properties
892 Constructs a new PDF button. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button attributes @param parent the parent field in the hierarchy, if any
893 Constructs a new signature field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
894 Constructs a new variable text field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
895 Generates a unique signature field name. @return Unique field name for a new signature
896 Generates a string representation of managed objects and their revisions. @return formatted string with object details and revision numbers
897 Creates a PDSoftMask from a COSBase object using default resource cache. @param dictionary PDF dictionary or name containing mask properties @return PDSoftMask object or null if invalid input
898 Initializes a COSDocument with default memory-only stream cache. @param parser ICOSParser for document parsing
899 Initializes a COSDocument with specified stream cache and default parser. @param streamCacheCreateFunction function to create stream cache
900 Processes a PDF operation with given arguments. @param operation the operation string to process @param arguments list of COSBase operands for the operation @throws IOException if an I/O error occurs during processing
901 Creates a PDMarkedContent instance based on the tag. @param tag unique identifier for the marked content @param properties dictionary containing additional attributes @return PDArtifactMarkedContent if tag is ARTIFACT, else PDMarkedContent
902 Calculates the horizontal distance between the rectangle's left and right edges. @return The difference in x-coordinates as a float
903 Checks if a point is within the rectangle bounds. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the rectangle, false otherwise
904 Calculates the vertical offset of the rectangle. @return difference between bottom-left y-coordinates as a float
905 Applies a transformation matrix to the rectangle's corners and returns a GeneralPath. @param matrix transformation matrix to apply @return transformed GeneralPath representing the rectangle
906 Creates a GeneralPath representing the rectangle. @return GeneralPath object defining the rectangle's boundary
907 Generates a string representation of the rectangle's dimensions. @return A formatted string with x, y coordinates and dimensions.
908 Retrieves an integer value from the COSArray at a specified index. @param index position of the element in the array @return integer value of the COSNumber at the given index, or -1 if not found or not a COSNumber
909 Retrieves string value at specified index with no default. @param index position in the array @return String representation of COSName or null if not found
910 Creates an output stream for writing data to a PDF stream. @param filters list of filters to apply during data processing @return OutputStream for writing data @throws IOException if an I/O error occurs
911 Constructs a PDImageXObject from a given stream and resources. @param stream the PDStream containing image data @param resources the PDResources object associated with the image
912 Determines the image file suffix based on PDF filter types. @return File extension as a String or null if no matching filter is found
913 Writes a float value to the output stream after validating and formatting it. @param real the float value to write @throws IOException if an I/O error occurs during writing
914 Writes masked integer to output stream. @param integer value to mask and write @throws IOException if writing fails
915 Writes mask data from ASCII string and appends a newline. @param text input string to be processed @throws IOException if an I/O error occurs during processing
916 Checks if the mask function is disabled. @return true if mask is disabled (m1() == 0), false otherwise
917 Parses and returns a COSNumber from a string. @param number the numeric string to parse @return COSNumber instance representing the parsed value @throws IOException if parsing fails or input is invalid
918 Writes masked float value to output stream. @param output destination stream for writing @param cosFloat the COSFloat object to write @throws IOException if I/O error occurs during write operations
919 Converts update state to COSIncrement object. @return COSIncrement object representing the update info
920 Generates a COSObjectKey with caching. @param num object number @param gen generation value @return cached or newly created COSObjectKey
921 Parses PDF to find and store object keys. @throws IOException if an I/O error occurs during parsing
922 Parses PDF for object streams and caches their offsets. @return Map of object stream offsets to COSObjectKey @throws IOException if I/O error occurs during parsing
923 Parses cross-reference stream entries. @param resolver object to handle parsed XRef entries @throws IOException if I/O error occurs during parsing
924 Parses and validates PDF objects based on xref data. @param objectKey key of the object to validate @param offset file offset for the object @param xrefOffset map of object keys to their offsets @return validated COSObjectKey or null if invalid @throws IOException if parsing fails
925 Parses a cross-reference table in a PDF. @param startByteOffset starting byte offset of the xref table @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
926 Initializes a new COSWriter instance with default compression settings. @param outputStream the OutputStream to write PDF data to
927 Initializes a new COSWriter for PDF output. @param outputStream target stream to write the PDF @param inputData input data for incremental updates @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs
928 Updates the COS object's update state. @param flag indicates whether updates are accepted
929 Sets the document update state to accepted.
930 Retrieves string at index, defaulting to provided value. @param index position in the array @param defaultValue fallback if index is out of bounds or not a COSString @return decoded string or default value
931 Retrieves and returns the mask value of the file. @return Mask value as a string
932 Retrieves the name of the named destination. @return The decoded string representation of the named destination
933 Extracts strings from COSBase items based on index. @param items COSBase object containing data @param pairIdx index to access within two-element arrays (0 or 1) @return List of extracted strings or empty list if no match
934 Retrieves masked values from button options. @return List of masked string values or empty list if none found
935 Retrieves the default appearance string for a text field. @return Decoded default appearance string or null if not found
936 Constructs a COSString from the given text. @param text input string to be converted
937 Initializes PDVisibleSignDesigner with an image stream. @param imageStream source of the signature image data @throws IOException if an I/O error occurs during initialization
938 Sets signature image from file. @param path file path of the signature image @return PDVisibleSignDesigner instance for method chaining
939 Initializes a new PDTransparencyGroup from a given PDStream. @param stream the PDStream containing the form's data
940 Parses a COSDictionary from the PDF source. @param isDirect indicates if the dictionary is direct or indirect @return parsed COSDictionary object @throws IOException if an I/O error occurs during parsing
941 Parses and masks characters from the PDF source. @return masked string representation of parsed characters @throws IOException if an I/O error occurs during parsing
942 Masks and checks for an expected string in the PDF source. @param expectedString the string to expect @param skipSpaces true if spaces should be skipped @throws IOException if the expected string is not found or an I/O error occurs
943 Parses a masked string of specified length from PDF source. @param length maximum characters to parse @return parsed string or empty if no characters found @throws IOException if an I/O error occurs
944 Parses and returns an integer value from the PDF source. @return parsed integer value @throws IOException if parsing fails or encounters invalid data
945 Parses and returns a long value from the PDF source. @return parsed long value @throws IOException if parsing fails or data is invalid
946 Adjusts an object offset to its corresponding xref table/stream. @param objectOffset initial object offset @return adjusted offset or 0 if not found @throws IOException if I/O error occurs during adjustment
947 Masks PDF encryption password based on revision. @param password user-provided password @param owner owner permissions @param permissions document permissions @param id document identifier @param encRevision encryption revision @param keyLengthInBytes desired output length @param encryptMetadata flag to encrypt metadata @return masked byte array for encryption
948 Generates a masked key for PDF encryption. @param ownerPassword the PDF document's owner password @param userPassword the PDF document's user password @param encRevision encryption revision level @param length desired key length @return byte array representing the masked key @throws IOException if there is an error in processing
949 Applies rotation transformation to matrix. @param theta angle of rotation in radians
950 Applies mask translation to graphics state. @param tx horizontal translation value @param ty vertical translation value
951 Applies translation transformation to the matrix using vector coordinates. @param vector Vector containing translation values
952 Applies transformation from matrix 'a' using matrix 'b'. @param a source matrix to apply transformation from @param b target matrix to apply transformation to @return new Matrix representing combined transformations
953 Constructs a new PDF document. @param doc COSDocument representing the underlying PDF structure
954 Processes and masks PDF instruction tokens. @param text input character sequence to process
955 Returns document's owner access permissions. Initializes if not already set. @return AccessPermission object with full permissions
956 Determines the appropriate PDF revision based on version and permissions. @param version current PDF version @return updated PDF revision number
957 Handles PDF encryption/decryption. @param finalKey encryption key @param data input stream containing encrypted/decrypted data @param output output stream for processed data @param decrypt true for decryption, false for encryption
958 Handles encryption or decryption of PDF data. @param data input stream containing encrypted/decrypted data @param output output stream for processed data @param decrypt true for decryption, false for encryption @throws IOException if I/O error occurs during processing
959 Encrypts PDF content using RC4 algorithm. @param finalKey encryption key (1-32 bytes) @param input data to encrypt @param output stream for encrypted data @throws IOException if an I/O error occurs
960 Encrypts data from an InputStream and writes it to an OutputStream. @param data the InputStream containing plain bytes @param output the OutputStream for encrypted bytes @throws IOException if an I/O error occurs
961 Masks and normalizes input string for SASL use. @param str input string to process @return masked and normalized string suitable for SASL
962 Masks and validates input string for SASL use. @param str input string to process @return masked and validated string suitable for SASL
963 Processes and writes a line of text to the output stream. @param line list of words with their text positions @throws IOException if an I/O error occurs during writing
964 Retrieves or loads a FontBoxFont based on format. @return loaded FontBoxFont or null if not found
965 Writes font information to a cache file. Handles exceptions and logs errors if writing fails.
966 Loads and validates font information from disk cache. @param files list of font files to process @return List of FSFontInfo objects or null if new fonts are found
967 Initializes font mapping with provided FontProvider. @param fontProvider source of font information
968 Initializes a ShadedTriangle with vertices and colors. @param p array of Point2D objects representing triangle vertices @param c 2D float array for vertex colors
969 Writes CMap data to an output stream for character mapping in PDFs. @param out destination for writing the CMap data @throws IOException if an I/O error occurs during writing
970 Loads a glyph list from a specified resource file. @param filename the name of the glyph list file @param numberOfEntries the number of entries in the glyph list @return a GlyphList object initialized with data from the file @throws RuntimeException if an I/O error occurs while loading the file
971 Initializes or retrieves the mapping of glyph IDs to font encoding codes. @return Map containing glyph ID to encoding code mappings @throws IOException if an I/O error occurs during initialization
972 Validates PNG chunks for PDF conversion. @param state current PNG parsing state @return true if all chunks are valid, false otherwise
973 Applies clipping paths for text rendering. Checks if clipping is needed and updates graphics state accordingly.
974 Updates the graphics context's clipping paths. Compares current clipping paths with the last applied ones and updates accordingly.
975 Prepares an input stream for PDF signing. @throws IOException if preparation fails
976 Masks text by integrating diacritics and adjusting positions. @param diacritic TextPosition object representing a diacritic
977 Determines if two TextPosition elements overlap significantly. @param tp2 second TextPosition element to compare @return true if significant overlap exists, false otherwise
978 Checks if two TextPosition objects overlap horizontally and vertically. @param tp2 second TextPosition object to compare @return true if the text positions overlap, false otherwise
979 Handles paragraph formatting and text extraction. @throws IOException on IO error
980 Determines if a new paragraph should start based on text position changes. @param position current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line position wrapper @param maxHeightForLine maximum height for a line
981 Masks and encapsulates text with positions. @param word input string to mask @param wordPositions list of TextPosition objects for the word @return WordWithTextPositions instance containing masked word and positions
982 Writes a COSName to the output stream with a trailing space. @param output OutputStream to write to @param cosName COSName object to serialize @throws IOException if writing fails
983 Writes a mask to the output stream. @param name COSName representing the mask @throws IOException if writing fails
984 Writes bytes to the output stream, using ASCII if possible or hexadecimal otherwise. @param bytes byte array to be written @param forceHex flag to enforce hexadecimal writing @param output OutputStream for data output @throws IOException if writing fails
985 Sorts a list using an iterative merge sort. @param list the list to be sorted @param cmp comparator for element ordering
986 Initializes a PDFMarkedContentExtractor with specified encoding. Adds operators for handling marked content sequences and drawing objects.
987 Initializes PDFTextStripper with text extraction operators. Adds operators for handling marked content sequences in PDFs.
988 Retrieves or creates a COSName instance and fetches its value from the dictionary. @param key the name string to process @return corresponding COSBase object or null if not found
989 Checks if dictionary contains an item with the specified key. @param name the key to check for in the dictionary @return true if the key exists, false otherwise
990 Retrieves a PDF filter by name. @param filterName the name of the filter to retrieve @return Filter instance or throws IOException if not found
991 Parses a COSName from the PDF source, handling masked characters and hex sequences. @return COSName object parsed from the source @throws IOException if an I/O error occurs or invalid data is encountered
992 Initializes a PDColor from a COSArray and color space. @param array COSArray containing color data @param colorSpace the associated color space
993 Converts a hexadecimal string to a COSString. @param hex the input hexadecimal string @return COSString representation of the hex input @throws IOException if the hex string is invalid and FORCE_PARSING is false
994 Converts a list of integers into a COSArray. @param integer list of integers to convert @return COSArray containing COSInteger objects
995 Converts a list of strings to a COSArray of COSNames. @param strings list of string identifiers @return COSArray containing COSName objects
996 Converts a list of strings to a COSArray. @param strings list of string values @return COSArray containing COSString objects
997 Constructs a new COSArrayList with empty underlying COSArray and ArrayList.
998 Initializes a COSArrayList with an associated dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key in the dictionary for this list
999 Initializes a new empty destination. Constructs an underlying COSArray to store destination properties.
1000 Constructs a PDRectangle with specified coordinates and dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
1001 Constructs a PDRectangle from a BoundingBox. @param box source bounding box with coordinates
1002 Sets the filter list for the PDF stream. @param filters list of filter names to apply
1003 Sets alternate color spaces in the PDF stream. @param list of PDColorSpace objects to be set as alternates
1004 Creates and initializes a new COSStream. @return initialized COSStream object
1005 Constructs a new COSStream with no initial cache.
1006 Constructs a COSStream with a cache and a read view. @param streamCache the cache for managing stream data @param randomAccessReadView the view for reading stream data @throws IOException if an I/O error occurs
1007 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance wrapping this COSDictionary
1008 Determines and returns a DecodeResult based on the current state of decodeResults. @return DecodeResult object initialized or retrieved from decodeResults
1009 Retrieves resources for the form XObject. @return PDResources object or null if not found
1010 Protected default constructor for PDAttributeObject.
1011 Constructs a new PDUserProperty with a specified attribute object. @param userAttributeObject the user-defined attribute for the property
1012 Initializes an empty PDOutlineNode with no parent or children.
1013 Initializes a new PDNameTreeNode with an empty COSDictionary.
1014 Constructs a new PDEmbeddedFilesNameTreeNode with an empty COSDictionary.
1015 Constructs a new empty PDJavascriptNameTreeNode.
1016 Initializes a new PDStructureElementNameTreeNode. Calls the superclass constructor with an empty COSDictionary.
1017 Constructs a new PDNonTerminalField instance. @param acroForm the AcroForm containing this field
1018 Constructs a new PDTerminalField instance. @param acroForm the AcroForm containing this field
1019 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
1020 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
1021 Initializes a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
1022 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to encapsulate
1023 Constructs a PDAppearanceStream from a COSStream. @param stream underlying COSStream object representing the appearance stream
1024 Initializes a PDTransparencyGroup with a given COSStream and resource cache. @param stream underlying COSStream object representing the transparency group @param cache resource cache for managing resources efficiently
1025 Processes a TrueType Collection (TTC) font file. @param ttcFile the TTC font file to process
1026 Processes font headers and adds font info to list. @param fontHeaders object containing font metadata @param file font file @param hash file hash
1027 Processes a PFB font file to extract and validate font information. @param pfbFile the PFB font file to process
1028 Constructs a new PDF checkbox. @param acroForm the AcroForm containing this checkbox @param field the COSDictionary representing the checkbox attributes @param parent the parent field in the hierarchy, if any
1029 Constructs a new PDF push button. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button attributes @param parent the parent field in the hierarchy, if any
1030 Constructs a new PDF radio button. @param acroForm the AcroForm containing this button @param field the COSDictionary representing the button attributes @param parent the parent field in the hierarchy, if any
1031 Constructs a new choice field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
1032 Constructs a new text field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
1033 Applies mask to current graphics state. Clones and modifies graphics state based on stack top.
1034 Saves and resets the current graphics state stack. @return The original graphics state stack
1035 Constructs a new COSDocument using an in-memory stream cache.
1036 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param keyAlias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @throws IOException if an I/O error occurs during initialization
1037 Applies a mask to the specified rectangle. @param rectangle target area for masking
1038 Calculates the transformed bounding box of an appearance stream. @param appearanceStream the appearance stream to process @return transformed bounding box as Rectangle2D
1039 Initializes graphics state with page boundaries. @param page PDF rectangle defining page dimensions
1040 Retrieves the mask value from the array at index 2. @return integer value of the mask or -1 if not found or not a COSNumber
1041 Retrieves the mask value from the COSArray. @return integer value representing the mask at index 2
1042 Retrieves the mask value from the array at index 3. @return integer value of the mask or -1 if not found
1043 Retrieves the mask value from the array at index 4. @return integer value representing the mask or -1 if not found
1044 Retrieves a mask value from the internal array. @return integer mask value at index 5 of the COSArray
1045 Retrieves a mask value from the COSArray at index 2. @return integer value of the mask or -1 if not found or invalid
1046 Retrieves the mask value from the array at index 2. @return integer value of the mask or -1 if not found
1047 Retrieves the mask value from the COSArray at index 3. @return integer value of the mask or -1 if not found
1048 Determines if destination fits page bounds. @return true if page view fits bounding box; false otherwise
1049 Checks if destination fits height within bounds. @return true if fitting condition met; false otherwise
1050 Checks equality of destination with another object. @param obj the reference object to compare with @return true if equal, false otherwise
1051 Creates an output stream with no filters applied. @return OutputStream for writing data @throws IOException if an I/O error occurs
1052 Creates an output stream with specified filter. @param filter name of the filter to apply @return OutputStream for writing data @throws IOException if an I/O error occurs
1053 Creates a masked image from a COSStream. @param cosStream the COSStream containing image data @return PDImageXObject with masking applied
1054 Creates a masked image object from the PDF stream. @return PDImageXObject with applied mask or null if no valid mask is found
1055 Creates a PDImageXObject from the SMASK stream. @return PDImageXObject object or null if no SMASK is present
1056 Applies a transformation matrix to the graphics state. @param transform the AffineTransform object to apply @throws IOException if an I/O error occurs during writing
1057 Begins text mode for PDF content stream. @throws IOException if an I/O error occurs during processing
1058 Ends text mode and writes end text operator. @throws IOException if I/O error occurs
1059 Sets text leading in PDF content stream. @param leading line spacing value @throws IOException if an I/O error occurs during writing
1060 Ends text mode and moves to the next line. Throws exception if not in text mode. @throws IOException if an I/O error occurs
1061 Moves the text cursor by specified offsets. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during operation
1062 Saves the current graphics state, ensuring no text mode and managing color spaces. @throws IOException if an I/O error occurs during processing
1063 Restores graphics state and color settings. Throws exception if in text mode. @throws IOException if an I/O error occurs during processing
1064 Sets RGB color for stroking operations. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs during operation
1065 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1066 Sets gray level for stroking color and writes to content stream. @param g gray level (must be within 0..1) @throws IOException if I/O error occurs during writing
1067 Sets non-stroking color for masks using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs during setting color
1068 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
1069 Sets non-stroking gray color with validation. @param g gray value (must be between 0 and 1) @throws IOException if I/O error occurs during setting color
1070 Adds a rectangular mask to the PDF content stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs during writing
1071 Draws a cubic Bezier curve. @param x1, y1, x2, y2, x3, y3 control points of the curve @throws IOException if an I/O error occurs during drawing
1072 Draws a Bezier curve with replicated initial point. @param x2,y2,x3,y3 control and end points of the curve @throws IOException if an I/O error occurs during drawing
1073 Draws a cubic Bézier curve with specified control points. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point @param y3 the y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing
1074 Sets the starting point for a mask operation. @param x x-coordinate of the starting point @param y y-coordinate of the starting point @throws IOException if an I/O error occurs during processing
1075 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing
1076 Applies mask to current path. @throws IllegalStateException if called within text mode @throws IOException if I/O error occurs during processing
1077 Ends the current path by closing it and stroking it. Throws an exception if called within a text block. @throws IOException if I/O error occurs during processing
1078 Applies mask to current graphics state. @throws IOException if an I/O error occurs during processing
1079 Applies even-odd rule for filling shapes. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1080 Applies mask operation in non-text mode. @throws IOException if an I/O error occurs during processing
1081 Sets mask for fill and stroke operations. @throws IOException if an I/O error occurs during processing
1082 Handles mask operation in PDF content stream. Throws exception if called within text mode. @throws IOException if an I/O error occurs during processing
1083 Ends and strokes even-odd filled path. @throws IOException if an I/O error occurs during processing
1084 Ends the current path and fills it. Throws exception if called in text mode. @throws IOException if an I/O error occurs during processing
1085 Applies clipping mask and ends path. @throws IOException if I/O error occurs during processing
1086 Applies even-odd clipping to the current path and ends it. Throws IllegalStateException if called within a text block.
1087 Sets line width and writes mask data. @param lineWidth desired line width for PDF content @throws IOException if an I/O error occurs during processing
1088 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style value
1089 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during processing
1090 Writes a line dash pattern to the PDF content stream. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
1091 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to apply @throws IllegalArgumentException if miter limit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
1092 Ends marked content section in PDF. @throws IOException if an I/O error occurs during processing
1093 Sets character spacing in PDF content stream. @param spacing float value representing space between characters @throws IOException if an I/O error occurs during writing
1094 Sets word spacing in PDF content stream. @param spacing float value representing word spacing @throws IOException if an I/O error occurs during writing
1095 Applies mask and sets text scaling. @param scale factor for text horizontal scaling @throws IOException if an I/O error occurs during processing
1096 Sets text rendering mode. @param rm RenderingMode object defining the mode @throws IOException if I/O error occurs
1097 Sets text rise in content stream. @param rise amount to adjust text position vertically @throws IOException if I/O error occurs during operation
1098 Ensures PDF parsing and returns COS object key offsets. @throws IOException if an I/O error occurs during parsing
1099 Writes FDF document to output stream. @param output OutputStream to write FDF data to @throws IOException if an I/O error occurs
1100 Clears and updates document state. Calls update twice to clear and set state.
1101 Updates COSArray with new objects and sets document update state. @param objectsList collection of COSBase objects to add
1102 Updates COSArray with elements from provided list. @param objectsList collection of COSBase objects to retain
1103 Updates array element at specified index with integer value. @param index position in the array to update @param intVal new integer value for the element
1104 Removes and returns an element from the array at the specified index. @param i index of the element to remove @return COSBase object that was removed
1105 Removes a COSBase object from the array. @param o the COSBase object to be removed @return true if the object was successfully removed, false otherwise
1106 Clears and updates dictionary items. Calls update methods to reset and validate document state.
1107 Removes a key from the dictionary and marks the document as updated. @param key the COSName key to be removed
1108 Updates document state based on origin and current state. @param updateState current state of the document update
1109 Resets the COS object to a null state. Updates the object status and clears associated resources.
1110 Sets the origin document state and processes update info. @param originDocumentState the original document state to set @param dereferencing flag indicating if dereferencing should occur
1111 Retrieves string at specified index with no default value. @param index position in the array @return decoded string or null if out of bounds or not a COSString
1112 Retrieves masked value from button options. @return Masked string value or "Off" if not applicable
1113 Initializes a new PDSimpleFileSpecification with an empty file name.
1114 Sets the file name for the PDF specification. @param fileName name of the file to be specified
1115 Initializes a named destination with a given string. @param dest the name of the destination
1116 Sets the named destination with the given string. @param dest destination string to be set
1117 Parses and validates a generation number from the PDF source. @return parsed generation number @throws IOException if parsing fails or the number exceeds 5 digits or is negative
1118 Parses and validates an object number from the PDF source. @return parsed long value representing the object number @throws IOException if parsing fails, number is invalid, or exceeds threshold
1119 Masks the user password for PDF encryption. @param ownerPassword the PDF document's owner password @param owner user data associated with the document @param encRevision encryption revision level @param length desired key length @return byte array representing the masked key or empty if revision is 5 or 6
1120 Initializes a new TensorPatch with specified control points and corner colors. @param tcp array of 16 control points defining the patch @param color 2D array of corner colors for shading operations
1121 Encrypts PDF data using RC4 algorithm. @param finalKey encryption key for RC4 @param input stream containing plain bytes @param output stream for encrypted bytes
1122 Returns the current FontProvider, initializing with default if none set. @return FontProvider instance
1123 Generates shaded triangles from color-coordinate pairs. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the patch
1124 Initializes a new CoonsPatch with given control points and corner colors. @param points array of 12 Point2D objects representing control points @param color 2D array of corner colors
1125 Masks text position within marked content, handling duplicates and overlaps. @param text TextPosition object to be masked
1126 Masks and processes text positions in PDF documents. @param text TextPosition object to be processed
1127 Removes consecutive spaces between overlapping TextPositions. @param textList list of TextPosition objects to process
1128 Processes text position and handles paragraph separation. @param current current text position wrapper @param lastPosition previous text position wrapper @param lastLineStartPosition start of the last line position wrapper @param maxHeightForLine maximum height for a line @return updated last line start position @throws IOException on IO error
1129 Masks and processes words for PDF text extraction. @param normalized list of WordWithTextPositions objects @param lineBuilder StringBuilder to accumulate line text @param wordPositions list of TextPosition objects for current line @param item LineItem containing current processing details @return updated StringBuilder with processed text
1130 Parses a date string and returns a Calendar instance. @param text input date string to parse @return Calendar instance or null if parsing fails
1131 Begins a marked content section in a PDF document. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs during processing
1132 Writes a mask to the PDF content stream. @param tag COSName representing the mask @param mcid mark identifier, must be non-negative @throws IOException if writing fails
1133 Writes mask and marked content point to PDF. @param tag COSName representing the mask @throws IOException if I/O operations fail
1134 Writes a COSString to an output stream. @param string COSString to be written @param output OutputStream for data output @throws IOException if writing fails
1135 Writes byte array to output stream using ASCII or hexadecimal encoding. @param bytes byte array to be written @param output OutputStream for data output @throws IOException if writing fails
1136 Initializes PDFGraphicsStreamEngine with a page and sets up operators for rendering. @param page PDPage to render graphics on
1137 Default constructor initializes a PDFMarkedContentExtractor with no encoding. Delegates to parameterized constructor with null encoding.
1138 Initializes a new instance of PDFTextStripperByArea. Disables text separation by beads.
1139 Parses a hexadecimal string from the PDF source. @return COSString containing parsed data @throws IOException if parsing fails or reaches end of stream
1140 Sets the filter list for the PDF stream. @param filters list of filter names to apply
1141 Constructs a default PDRectangle at origin with zero dimensions.
1142 Constructs a PDRectangle at origin with specified dimensions. @param width rectangle width @param height rectangle height
1143 Creates a PDRectangle based on bounding box coordinates. @return PDRectangle representing the bounding box area
1144 Creates a PDRectangle for masking. Uses annotation rectangle or computes based on bounding box differences. @return PDRectangle for masking purposes
1145 Adds padding to a rectangle. @param rectangle original rectangle @param padding amount of padding to add @return new PDRectangle with increased padding
1146 Adjusts the position and size of a rectangle based on given differences. @param rectangle original PDRectangle to be adjusted @param differences array containing x/y offsets for top-left, bottom-right corners @return new PDRectangle with adjusted dimensions or original if input is invalid
1147 Applies a mask to adjust the dimensions of a PDRectangle. @param rectangle original PDRectangle object @param differences array containing x and y adjustments for top-left and bottom-right corners @return new PDRectangle with adjusted dimensions or the original if differences are invalid
1148 Adjusts the rectangle dimensions by adding padding. @param box original rectangle @param padding amount to add to each side @return new PDRectangle with adjusted size
1149 Initializes a new PDFXRefStream with a given COS document. @param cosDocument the COS document to associate with this stream
1150 Creates a PDObjectStream from a given PDDocument. @param document PDDocument to extract the stream from @return PDObjectStream initialized with the document's COSStream
1151 Constructs a new PDStream instance associated with the given PDDocument. @param document the PDDocument to which this stream belongs
1152 Initializes a new PDStream with an associated COSDocument. @param document the PDF document to which the stream belongs
1153 Initializes a new PDStream from an InputStream. @param doc PDDocument containing the PDF content @param input InputStream for reading data @param filters COSBase representing stream filters @throws IOException if I/O operations fail
1154 Creates a masked image stream in the PDF document. @param document PDDocument to add the image @param rawInput InputStream containing raw image data @return COSStream representing the masked image @throws IOException if I/O operations fail
1155 Encodes input stream using specified parameters. @param input source data stream @param encoded output stream for encoded data @param parameters configuration settings for encoding @param index current processing index (unused) @throws IOException if an I/O error occurs during encoding
1156 Protected default constructor for PDAttributeObject.
1157 Initializes user attribute object with default owner.
1158 Protected default constructor for PDStandardAttributeObject.
1159 Constructs a new PDOutlineItem with no parent or children.
1160 Constructs a new PDVariableText instance. @param acroForm the AcroForm containing this field
1161 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the PDF dictionary to wrap
1162 Retrieves the appearance stream for this entry. @throws IllegalStateException if the entry is not a COSStream @return PDAppearanceStream object representing the appearance stream
1163 Parses and processes a TrueType or OpenType font file. @param ttfFile the font file to process
1164 Constructs a new Type 6 mesh-based shading from a PDF dictionary. @param shadingDictionary PDF dictionary containing shading properties
1165 Constructs a new Type 7 mesh-based shading from a PDF dictionary. @param shadingDictionary PDF dictionary containing shading properties
1166 Constructs a new combo box field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
1167 Constructs a new list box field in a PDF form. @param acroForm the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any
1168 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param keyAlias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1169 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param decryptionPassword password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @throws IOException if an I/O error occurs during initialization
1170 Creates an output stream with no filters applied. @return OutputStream for writing data @throws IOException if an I/O error occurs
1171 Masks data by writing it to the appearance stream. @param data bytes to be masked and written @param appearanceStream PDAppearanceStream object for output @throws IOException if an I/O error occurs during processing
1172 Initializes a new content stream with optional compression. @param appearance PDF appearance stream to write to @param compress flag indicating whether to compress the output stream @throws IOException if an I/O error occurs
1173 Sets the text matrix for masking. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during processing
1174 Applies a mask using a transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during processing
1175 Begins text mode for PDF content stream. @throws IOException if an I/O error occurs or nested beginText() is called
1176 Begins text mode for PDF content stream. @throws IOException if an I/O error occurs or nested beginText() is called
1177 Begins text mode in PDF content stream. @throws IOException if an I/O error occurs during processing
1178 Begins text mode for PDF content stream. Throws exception if already in text mode. @throws IOException if an I/O error occurs during processing
1179 Ends text mode and writes the end text operator. Must be called after beginText(). @throws IOException if I/O error occurs or not in text mode
1180 Ends text mode and writes end text operator. Throws IllegalStateException if not in text mode.
1181 Ends text mode and writes end text operator. @throws IOException if I/O error occurs or not in text mode
1182 Ends text mode and writes end text operator. Throws exception if not in text mode.
1183 Sets text leading and updates graphics state. @param leading line spacing value @throws IOException if an I/O error occurs during writing
1184 Sets text leading in PDF form content stream. @param leading line spacing value @throws IOException if an I/O error occurs during writing
1185 Sets text leading in PDF content stream. @param leading line spacing value @throws IOException if an I/O error occurs during writing
1186 Sets text leading in pattern content stream. @param leading line spacing value @throws IOException if an I/O error occurs during writing
1187 Ends text mode and moves to the next line. @throws IllegalStateException if not in text mode @throws IOException if an I/O error occurs
1188 Ends text mode and moves to the next line. Throws exception if not in text mode. @throws IOException if an I/O error occurs
1189 Ends text mode and moves to the next line. Throws exception if not in text mode. @throws IOException if an I/O error occurs
1190 Ends text mode and moves to the next line. Throws exception if not in text mode. @throws IOException if an I/O error occurs
1191 Moves text cursor by specified offsets within text mode. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs during operation
1192 Moves text cursor by specified offsets within a text block. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1193 Moves text cursor by specified offsets in current text mode. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1194 Moves text cursor by specified offsets within a pattern. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs or not in text mode
1195 Saves the current graphics state, ensuring no text mode and managing color spaces. Throws IllegalStateException if in text mode. @throws IOException if an I/O error occurs during processing
1196 Saves the current graphics state, ensuring no text mode and managing color spaces. @throws IOException if an I/O error occurs during processing
1197 Saves the current graphics state, ensuring no text mode and managing color spaces. @throws IOException if an I/O error occurs during processing
1198 Saves the current graphics state, ensuring no text mode and managing color spaces. Throws IllegalStateException if called within a text object. @throws IOException if an I/O error occurs during processing
1199 Restores graphics state and color settings. Throws exception if in text mode. @throws IOException if an I/O error occurs during processing
1200 Restores the graphics state, ensuring it's not used within text mode. Throws exception if in text mode. Adjusts font and color space stacks.
1201 Restores the graphics state and color settings. Throws exception if in text mode. @throws IOException if an I/O error occurs during processing
1202 Restores graphics state and color settings, ensuring not in text mode. Throws exception if in text mode. Manages font and color space stacks. @throws IOException if an I/O error occurs during processing
1203 Sets RGB color for stroking operations. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs during operation
1204 Sets RGB color for stroking operations. Validates and normalizes color components, then applies the color to the PDF form content stream. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs during operation
1205 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside the 0..1 range @throws IOException if an I/O error occurs during operation
1206 Sets stroking color using RGB values. Validates and normalizes color components, then applies them to the content stream. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs during operation
1207 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1208 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1209 Sets CMYK color for stroking. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1210 Sets CMYK color for stroking within a pattern. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
1211 Sets gray level for stroking color and writes to content stream. @param g gray level (must be within 0..1) @throws IllegalArgumentException if parameter is out of bounds @throws IOException if I/O error occurs during writing
1212 Sets stroking color gray level. @param g gray level (must be within 0..1) @throws IllegalArgumentException if parameter is out of bounds @throws IOException if I/O error occurs during writing
1213 Sets stroking color to a specified gray level. @param g gray level (must be within 0..1) @throws IllegalArgumentException if parameter is out of range @throws IOException if I/O error occurs during writing
1214 Sets stroking color to gray level. @param g gray level (must be within 0..1) @throws IOException if I/O error occurs during writing
1215 Sets non-stroking color for masks using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs during setting color
1216 Sets non-stroking color for masks using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs during setting color
1217 Sets non-stroking color for masks using RGB values. Validates and normalizes input colors, then applies them. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if I/O error occurs during setting color
1218 Sets non-stroking color for masks using RGB values. Validates and sets RGB components, then applies the color. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs during setting color
1219 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IllegalArgumentException if any parameter is outside 0..1 range @throws IOException if I/O error occurs during operation
1220 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) Validates and applies CMYK color for non-stroking operations.
1221 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
1222 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if I/O error occurs
1223 Sets non-stroking gray color with validation. @param g gray value (must be between 0 and 1) @throws IOException if I/O error occurs during setting color or invalid parameter
1224 Sets non-stroking gray color. @param g gray value (must be between 0 and 1) @throws IOException if I/O error occurs during setting color or invalid parameter
1225 Sets non-stroking gray color. @param g gray value (must be between 0 and 1) @throws IllegalArgumentException if parameter is out of range @throws IOException if I/O error occurs during setting color
1226 Sets non-stroking gray color for pattern content. @param g gray value (must be between 0 and 1) @throws IOException if I/O error occurs during setting color
1227 Applies a rectangular mask to the PDF content stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs during writing
1228 Adds a rectangular mask to the PDF content stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs during writing or if called within a text block
1229 Applies a rectangular mask to the PDF content stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs during writing @throws IllegalStateException if called within a text block
1230 Adds a rectangular mask to the PDF content stream. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs during writing or text mode is active
1231 Draws a cubic Bezier curve with specified control points. @param x1, y1, x2, y2, x3, y3 control points of the curve @throws IOException if an I/O error occurs during drawing or text mode is active
1232 Draws a cubic Bezier curve. @param x1, y1, x2, y2, x3, y3 control points of the curve @throws IOException if an I/O error occurs or called within text mode
1233 Draws a cubic Bezier curve on the PDF page. @param x1, y1, x2, y2, x3, y3 control points of the curve @throws IOException if an I/O error occurs during drawing or if called within a text block
1234 Draws a cubic Bezier curve within a pattern content stream. @param x1, y1, x2, y2, x3, y3 control points of the curve @throws IOException if an I/O error occurs during drawing or text mode is active
1235 Draws a Bezier curve with replicated initial point. @param x2,y2,x3,y3 control and end points of the curve @throws IOException if an I/O error occurs during drawing or text mode is active
1236 Draws a Bezier curve with replicated initial point. @param x2,y2,x3,y3 control and end points of the curve @throws IOException if an I/O error occurs during drawing or text mode is active
1237 Draws a Bezier curve with replicated initial point. @param x2,y2,x3,y3 control and end points of the curve @throws IOException if an I/O error occurs during drawing or text mode is active
1238 Draws a Bezier curve with replicated initial point. @param x2,y2,x3,y3 control and end points of the curve @throws IOException if an I/O error occurs during drawing
1239 Draws a cubic Bézier curve with specified control points. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point @param y3 the y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing or if called within a text block
1240 Draws a cubic Bézier curve outside text mode. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point @param y3 the y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing
1241 Draws a cubic Bézier curve with specified control points. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point @param y3 the y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing
1242 Draws a cubic Bézier curve within a pattern content stream. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point @param y3 the y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing
1243 Initiates a mask operation at the specified coordinates. @param x x-coordinate of the starting point @param y y-coordinate of the starting point @throws IOException if an I/O error occurs during processing
1244 Moves the current point to (x, y) for mask operations. @param x x-coordinate of the new position @param y y-coordinate of the new position @throws IOException if an I/O error occurs or called within a text block
1245 Moves the current point to specified coordinates for mask operations. @param x x-coordinate of the new position @param y y-coordinate of the new position @throws IOException if an I/O error occurs during processing
1246 Sets the starting point for a mask operation. @param x x-coordinate of the starting point @param y y-coordinate of the starting point @throws IOException if an I/O error occurs during processing
1247 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing or if called within a text block
1248 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing or if called within text mode
1249 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing @throws IllegalStateException if called within a text block
1250 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs during drawing or if called within a text block
1251 Applies mask to current path. @throws IllegalStateException if called within text mode @throws IOException if I/O error occurs during processing
1252 Applies mask to current path. @throws IllegalStateException if called within text mode @throws IOException if I/O error occurs during processing
1253 Applies mask to current path. Throws exception if called in text mode.
1254 Applies mask to current path. @throws IllegalStateException if called within text mode @throws IOException if I/O error occurs during processing
1255 Ends the current path by closing and stroking it. Throws an exception if called within a text block. @throws IOException if I/O error occurs during processing
1256 Closes and strokes the current path. Throws exception if called within text mode. @throws IOException if I/O error occurs during processing
1257 Ends the current path by closing and stroking it. Throws an exception if called within a text block.
1258 Ends the current path by closing and stroking it. Throws an exception if called within a text block. @throws IOException if I/O error occurs during processing
1259 Applies mask to current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs
1260 Applies mask to current graphics state, disallowing use within text blocks. @throws IOException if an I/O error occurs during processing
1261 Applies mask to current graphics state. @throws IllegalStateException if called within a text block @throws IOException if an I/O error occurs during processing
1262 Applies mask to current graphics state. Throws exception if in text mode. @throws IOException if an I/O error occurs during processing
1263 Applies even-odd rule for filling shapes. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1264 Applies even-odd rule for filling shapes. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1265 Applies even-odd rule for filling shapes. Throws exception if called in text mode. @throws IOException if an I/O error occurs
1266 Applies even-odd rule for filling shapes outside text mode. Throws exception if called in text mode.
1267 Applies mask operation in non-text mode. @throws IOException if an I/O error occurs during processing
1268 Applies mask operation outside of text mode. @throws IOException if an I/O error occurs during processing
1269 Applies mask operation in non-text mode. Throws exception if called within a text block. @throws IOException if an I/O error occurs during processing
1270 Applies mask operation in non-text mode. @throws IOException if an I/O error occurs during processing
1271 Sets mask for fill and stroke operations. @throws IOException if an I/O error occurs during processing
1272 Applies mask for fill and stroke operations outside text mode. @throws IOException if an I/O error occurs during processing
1273 Applies mask for fill and stroke operations. Throws exception if in text mode. @throws IOException if an I/O error occurs during processing
1274 Applies mask for fill and stroke operations. @throws IOException if an I/O error occurs during processing
1275 Applies mask operation by closing, filling, and stroking the path. Throws exception if called within text mode. @throws IOException if an I/O error occurs during processing
1276 Applies mask operation in PDF content stream. Throws exception if called within text mode. @throws IOException if an I/O error occurs during processing
1277 Applies mask operation in PDF content stream. Throws exception if called within text mode. @throws IOException if an I/O error occurs during processing
1278 Closes and fills the current path, then strokes it. Throws exception if called within text mode. @throws IOException if an I/O error occurs during processing
1279 Ends and strokes an even-odd filled path, disallowed in text mode. @throws IOException if an I/O error occurs during processing
1280 Ends and strokes even-odd filled path, ensuring not in text mode. @throws IOException if an I/O error occurs or if called within a text block
1281 Ends and strokes even-odd filled path, disallowed in text mode. @throws IOException if an I/O error occurs during processing
1282 Ends and strokes even-odd filled path, disallowing use within text blocks. @throws IOException if an I/O error occurs during processing
1283 Ends the current path and fills it. Throws exception if called in text mode.
1284 Ends the current path and fills it. Throws exception if called in text mode. @throws IOException if an I/O error occurs during processing
1285 Ends the current path and fills it, ensuring not in text mode. @throws IOException if an I/O error occurs or if called in text mode
1286 Ends the current path and fills it, ensuring not in text mode. Throws exception if called in text mode. @throws IOException if an I/O error occurs during processing
1287 Applies clipping mask and ends path, ensuring not in text mode. @throws IOException if I/O error occurs during processing
1288 Applies non-zero winding rule clipping mask and ends path. Throws exception if called within text mode. @throws IOException if I/O error occurs during processing
1289 Applies clipping mask and ends path, disallowed in text mode. @throws IOException if I/O error occurs during processing
1290 Applies clipping mask and ends path, disallowed in text mode. @throws IOException if I/O error occurs during processing
1291 Applies even-odd clipping to the current path and ends it. Throws IllegalStateException if called within a text block.
1292 Applies even-odd clipping to the current path and ends it. Throws IllegalStateException if called within a text block.
1293 Applies even-odd clipping to the current path and ends it. Throws IllegalStateException if called within a text block.
1294 Applies even-odd clipping and ends the current path. Throws IllegalStateException if called within a text block.
1295 Sets line width and writes mask data. @param lineWidth desired line width for PDF content @throws IOException if an I/O error occurs during processing
1296 Sets line width and applies mask. @param lineWidth desired line width for PDF content @throws IOException if an I/O error occurs during processing
1297 Sets line width and writes mask data. @param lineWidth desired line width for PDF content @throws IOException if an I/O error occurs during processing
1298 Sets line width and applies mask. @param lineWidth desired line width for PDF content @throws IOException if an I/O error occurs during processing
1299 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style value
1300 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style value
1301 Sets the line join style in the PDF content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style value
1302 Sets the line join style in the PDF pattern content stream. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs during writing @throws IllegalArgumentException for invalid line join style value
1303 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during processing
1304 Sets the line cap style in the PDF content stream. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during processing @throws IllegalArgumentException if lineCapStyle is out of valid range
1305 Sets the line cap style for PDF content. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during processing
1306 Sets the line cap style for pattern content. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs during processing
1307 Sets line dash pattern for PDF appearance. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
1308 Sets line dash pattern in PDF content stream. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
1309 Sets line dash pattern for PDF content stream. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
1310 Sets line dash pattern for pattern content stream. @param pattern array of float values representing dash lengths @param phase offset at which to start the dash pattern @throws IOException if an I/O error occurs during writing
1311 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to apply @throws IllegalArgumentException if miter limit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
1312 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to apply @throws IllegalArgumentException if miter limit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
1313 Sets the line miter limit for PDF rendering. @param miterLimit the miter limit value to apply @throws IllegalArgumentException if miter limit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
1314 Sets the line miter limit for pattern rendering. @param miterLimit the miter limit value to apply @throws IllegalArgumentException if miter limit is less than or equal to 0 @throws IOException if an I/O error occurs during writing
1315 Ends a marked content section in PDF. @throws IOException if an I/O error occurs during processing
1316 Ends marked content section in PDF form. @throws IOException if an I/O error occurs during processing
1317 Ends a marked content section in the PDF. @throws IOException if an I/O error occurs during processing
1318 Ends a marked content section in PDF. @throws IOException if an I/O error occurs during processing
1319 Applies character spacing to PDF content. @param spacing float value representing space between characters @throws IOException if an I/O error occurs during writing
1320 Sets character spacing in PDF form content stream. @param spacing float value representing space between characters @throws IOException if an I/O error occurs during writing
1321 Sets character spacing in PDF content stream. @param spacing float value representing space between characters @throws IOException if an I/O error occurs during writing
1322 Sets character spacing in pattern content stream. @param spacing float value representing space between characters @throws IOException if an I/O error occurs during writing
1323 Sets word spacing in PDF content stream. @param spacing float value representing word spacing @throws IOException if an I/O error occurs during writing
1324 Sets word spacing and applies mask operation. @param spacing float value representing word spacing @throws IOException if an I/O error occurs during writing
1325 Sets word spacing in PDF content stream. @param spacing float value representing word spacing @throws IOException if an I/O error occurs during writing
1326 Sets word spacing in pattern content stream. @param spacing float value representing word spacing @throws IOException if an I/O error occurs during writing
1327 Applies mask and sets text horizontal scaling. @param scale factor for text horizontal scaling @throws IOException if an I/O error occurs during processing
1328 Applies mask and sets text horizontal scaling. @param scale factor for text horizontal scaling @throws IOException if an I/O error occurs during processing
1329 Applies mask and sets text horizontal scaling. @param scale factor for text horizontal scaling @throws IOException if an I/O error occurs during processing
1330 Applies mask and sets text horizontal scaling. @param scale factor for text horizontal scaling @throws IOException if an I/O error occurs during processing
1331 Sets text rendering mode. @param rm RenderingMode object defining the mode @throws IOException if I/O error occurs
1332 Sets text rendering mode in PDF form content stream. @param rm RenderingMode object defining the mode @throws IOException if I/O error occurs
1333 Sets text rendering mode on PDF page. @param rm RenderingMode object defining the mode @throws IOException if I/O error occurs
1334 Sets text rendering mode in pattern content stream. @param rm RenderingMode object defining the mode @throws IOException if I/O error occurs
1335 Sets text rise and adds a SET_TEXT_RISE operator. @param rise amount to adjust text position vertically @throws IOException if I/O error occurs during operation
1336 Sets text rise in content stream. @param rise amount to adjust text position vertically @throws IOException if I/O error occurs during operation
1337 Adjusts text position vertically and sets text rise. @param rise amount to adjust text position vertically @throws IOException if I/O error occurs during operation
1338 Adjusts text rise within a pattern content stream. @param rise vertical adjustment amount for text position @throws IOException if I/O error occurs during operation
1339 Parses and validates cross-reference tables, using brute-force if necessary. @throws IOException if an I/O error occurs during parsing or validation
1340 Writes FDF document to specified file. @param fileName File where FDF data will be written @throws IOException if an I/O error occurs
1341 Updates mask value in array at index 2. @param high new mask value to set
1342 Sets the target page number in the destination. @param pageNumber the page to navigate to
1343 Removes an element from the list. @param o element to remove @return true if element was removed, false otherwise Throws UnsupportedOperationException if the list is filtered
1344 Removes an element at the specified index. @param index position of the element to remove @throws UnsupportedOperationException if list is filtered @return removed element
1345 Clears all elements from both the internal map and actuals collections.
1346 Removes a key from both the dictionary and internal map. @param key PDF object key to be removed @return value associated with the removed key or null if not found
1347 Recursively processes COSArray to update document state. @param array the COSArray to process @return true if any child requires parent update, false otherwise
1348 Sets the origin document state without dereferencing. @param originDocumentState the original document state to set
1349 Updates document state based on child object. @param child the child object to process
1350 Masks and processes input text using a tokenizer. @param input the CharSequence to be processed @param handler the SyntaxHandler for token processing
1351 Masks and processes PDF object encryption/decryption. @param objectNumber unique object identifier @param genNumber generation number of the object @param data input stream containing encrypted/decrypted data @param output output stream for processed data @param decrypt true for decryption, false for encryption @throws IOException if I/O error occurs during processing
1352 Masks and computes encryption keys for PDF documents. @param password user/owner password for encryption @param o owner entry from PDF metadata @param u user entry from PDF metadata @param oe owner encryption key from PDF @param ue user encryption key from PDF @param permissions document permissions @param id document identifier @param encRevision encryption revision used @param keyLengthInBytes desired output length for the key @param encryptMetadata flag to encrypt metadata @param isOwnerPassword flag indicating if the password is for owner access @return byte array of masked or decrypted key @throws IOException if security operations fail
1353 Masks and validates PDF encryption passwords based on revision. @param password user's password bytes @param user user data bytes @param owner owner permissions bytes @param permissions document permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired output length for encryption key @param encryptMetadata flag to encrypt metadata @return true if passwords match/are valid, false otherwise @throws IOException if security operations fail
1354 Retrieves a FontBoxFont by format and PostScript name. @param format font format to match @param postScriptName font's PostScript name @return FontBoxFont object or null if not found
1355 Masks and processes words from a list of LineItems. @param line list of LineItem objects containing text positions @return List of WordWithTextPositions with processed words
1356 Converts COSString to Calendar. @param text input COSString containing date information @return Calendar instance or null if conversion fails
1357 Begins a marked content section with a specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs during processing
1358 Begins a marked content section in PDF form. @param tag COSName representing the mask tag @throws IOException if I/O error occurs during processing
1359 Begins a marked content section in a PDF document. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs during processing
1360 Begins a marked content section with specified tag. @param tag COSName representing the mask tag @throws IOException if an I/O error occurs during processing
1361 Begins a marked content sequence in the PDF. @param tag COSName representing the mask @param mcid mark identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1362 Begins marked content sequence with a tag and MCID. @param tag COSName representing the mask @param mcid mark identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1363 Begins marked content sequence with a tag and MCID. @param tag COSName representing the mask @param mcid mark identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1364 Begins marked content with a specified tag and mark identifier. @param tag COSName representing the mask @param mcid mark identifier, must be non-negative @throws IOException if writing fails or mcid is negative
1365 Marks content in PDF with specified tag. @param tag COSName representing the mask tag @throws IOException if I/O operations fail
1366 Marks content with a specified tag. @param tag COSName representing the content tag @throws IOException if I/O operations fail
1367 Marks content point in PDF. @param tag COSName representing the mask @throws IOException if I/O operations fail
1368 Sets marked content point with a specified tag. @param tag COSName representing the mask @throws IOException if I/O operations fail
1369 Writes a COSString to an OutputStream with a trailing space. @param output OutputStream for data output @param cosString COSString to be written @throws IOException if writing fails
1370 Masks and writes text to the PDF content stream. @param text input string to process @throws IOException on I/O error during processing
1371 Initializes a new PageDrawer instance with specified parameters. @param parameters configuration for page rendering @throws IOException if an I/O error occurs during initialization
1372 Parses and masks a COS string from the PDF source. Handles different delimiters '(' and '<' and processes escape sequences. @return COSString containing parsed data @throws IOException if parsing fails or reaches end of stream
1373 Constructs an immutable rectangle with specified dimensions. @param width rectangle width @param height rectangle height
1374 Returns the bounding box rectangle for cloud-like shapes. @return PDRectangle representing the shape's boundary
1375 Constructs a new PDMetadata instance for the given PDF document. @param document the PDDocument to associate with this metadata object
1376 Constructs a new PDEmbeddedFile instance associated with the given PDDocument. @param document the PDDocument to which this embedded file belongs
1377 Initializes a PDXObject with a given document and subtype. @param document the PDDocument to associate with this object @param subtype the COSName representing the subtype of the XObject
1378 Constructs a PDImageXObject from a given PDF document. @param document the PDDocument containing the image data
1379 Constructs a new PDStream from an InputStream. @param doc PDDocument containing the PDF content @param input InputStream for reading data @throws IOException if I/O operations fail
1380 Creates a new PDStream with specified document, input stream, and filter. @param doc PDDocument containing the PDF content @param input InputStream for reading data @param filter COSName representing stream filters @throws IOException if I/O operations fail
1381 Constructs a new PDStream with specified document, input stream, and filters. @param doc PDDocument containing the PDF content @param input InputStream for reading data @param filters COSArray representing stream filters @throws IOException if I/O operations fail
1382 Constructs a PDImageXObject from an encoded stream. @param document PDF document to add the image @param encodedStream input stream containing encoded image data @param cosFilter filter for the image @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @throws IOException if I/O operations fail
1383 Initializes layout attribute object with OWNER_LAYOUT as owner.
1384 Initializes a new PDListAttributeObject with list owner.
1385 Initializes a new PDPrintFieldAttributeObject with print field owner. Sets the default owner to OWNER_PRINT_FIELD during construction.
1386 Initializes a new PDTableAttributeObject for table elements. Sets the owner to OWNER_TABLE by default.
1387 Initializes PDF parsing without encryption. @param source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
1388 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param decryptionPassword password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @throws IOException if an I/O error occurs during initialization
1389 Initializes content stream for PDF appearance. @param appearance PDF appearance object @throws IOException if I/O error occurs
1390 Initializes a new PDFormContentStream for manipulating PDF form content. @param form PDFormXObject representing the form to be modified @throws IOException if an I/O error occurs during initialization
1391 Initializes a new PDPageContentStream for an appearance stream. @param doc PDF document to write content to @param appearance appearance stream for the content @throws IOException if an I/O error occurs
1392 Sets the text matrix for masking. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during processing
1393 Sets text matrix for masking. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs or not in text mode
1394 Sets the text matrix for masking. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during processing
1395 Sets the text matrix for masking within a pattern. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs during processing
1396 Applies a mask using a transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during processing
1397 Applies a mask using a transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during processing
1398 Applies a mask using a transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during processing
1399 Applies a mask using a transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs during processing
1400 Draws a mask with an arrow shape at specified coordinates. @param cs content stream to draw on @param x x-coordinate of the starting point @param y y-coordinate of the starting point @param len length of the arrow arms @throws IOException if drawing fails
1401 Applies mask operation based on line width and fill/stroke flags. @param lineWidth the width of the line @param hasStroke indicates if stroke is applied @param hasFill indicates if fill is applied @throws IOException if an I/O error occurs during processing
1402 Draws a circular mask at the specified coordinates. @param cs content stream for appearance generation @param x x-coordinate of the center @param y y-coordinate of the center @param r radius of the circle @throws IOException if an I/O error occurs during drawing
1403 Draws a circle mask at specified coordinates. @param cs content stream for drawing @param x x-coordinate of the center @param y y-coordinate of the center @param r radius of the circle @throws IOException if an I/O error occurs during drawing
1404 Draws a circular mask at specified coordinates. @param cs content stream for PDF appearance @param x x-coordinate of the center @param y y-coordinate of the center @param r radius of the circle @throws IOException if an I/O error occurs during drawing
1405 Draws a mask for file attachment appearance. @param contentStream PDF content stream to draw on @throws IOException if an I/O error occurs during drawing
1406 Sets line width for PDF appearance content. @param lineWidth the desired line width @throws IOException if an I/O error occurs during processing
1407 Saves FDF document to specified file. @param fileName path where FDF data will be written @throws IOException if an I/O error occurs
1408 Checks if a COSBase object is managed or processed. @param base the COSBase object to check @return true if object is in collection or has been processed, false otherwise
1409 Updates the document's trailer dictionary and sets its state. @param newTrailer the new trailer dictionary to apply
1410 Recursively updates document state for a given child. @param child the child object to update
1411 Processes a collection of document children, updating their states. @param children iterable collection of COSBase objects representing document elements
1412 Dereferences and returns the underlying COSBase object. @return COSBase object or null if dereferencing fails
1413 Masks and validates PDF encryption passwords based on revision. @param ownerPassword document's owner password bytes @param user user identifier bytes @param owner owner identifier bytes @param permissions document permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if validation passes, false otherwise @throws IOException if operations fail or unknown revision
1414 Parses input text into an instruction sequence. @param text the CharSequence to be parsed @return The constructed InstructionSequence object
1415 Masks and encrypts a PDF stream. @param stream PDF stream to be processed @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if I/O error occurs during processing
1416 Decrypts a COSString using specified object number and generation number. @param string the COSString to decrypt @param objNum unique object identifier @param genNum generation number of the object @return decrypted COSString or original if decryption fails
1417 Masks and encrypts a PDF string. @param string input PDF string to be encrypted @param objNum object number of the PDF element @param genNum generation number of the PDF element @return encrypted COSBase object @throws IOException if I/O error occurs during encryption
1418 Validates PDF encryption password based on revision. @param password user's password string @param user user data bytes @param owner owner permissions bytes @param permissions document permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired output length for encryption key @param encryptMetadata flag to encrypt metadata @return true if passwords match/are valid, false otherwise @throws IOException if security operations fail
1419 Attempts to find a FontBoxFont by PostScript name across different font formats. @param postScriptName the font's PostScript name @return FontBoxFont object if found, otherwise null
1420 Processes and writes text from PDF articles to the output stream. Handles text sorting, spacing, and line breaks.
1421 Writes a COSBase object to the PDF output stream. @param base COSBase object to write @throws IOException if writing fails
1422 Writes masked text with positioning from an array. @param textWithPositioningArray array containing strings and floats for text and positioning @throws IOException if I/O error occurs during writing
1423 Applies mask to text and writes it to PDF content stream. @param text input string to be masked and written @throws IOException if an I/O error occurs during processing
1424 Initializes and configures a PageDrawer instance. @param parameters configuration for page rendering @return configured PageDrawer object @throws IOException if an I/O error occurs during initialization
1425 Constructs a PDFormXObject. @param document the PDDocument to associate with this form object
1426 Constructs PDMetadata for a PDF document. @param doc PDDocument containing the PDF content @param str InputStream for reading metadata data @throws IOException if I/O operations fail
1427 Constructs a new PDEmbeddedFile from an input stream. @param doc PDDocument containing the PDF content @param str InputStream for reading embedded file data @throws IOException if I/O operations fail
1428 Constructs a new embedded file for a PDF document. @param doc PDDocument containing the PDF content @param input InputStream for reading data @param filter COSName representing stream filters @throws IOException if I/O operations fail
1429 Creates a PDImageXObject from a byte array with compression. @param document PDF document to add the image @param byteArray input byte array containing image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of bits per color component @param initColorSpace initial color space for the image @return PDImageXObject instance with compressed image data @throws IOException if I/O operations fail
1430 Constructs an attribute object with a specified owner. @param owner the owner of the attribute object
1431 Initializes the FileSystemFontProvider with a given cache. Scans local system for font files, loads cached info if available, otherwise builds and saves the on-disk font cache. @param cache FontCache object to manage font information
1432 Initializes FDF document parsing from an input source. @param source RandomAccessRead object representing the FDF file @throws IOException if an I/O error occurs during initialization
1433 Initializes PDF parsing with encryption details. @param source input stream of the PDF document @param decryptionPassword password for encrypted documents @throws IOException if an I/O error occurs during initialization
1434 Draws a mask based on annotation style. @param style annotation line style @param cs content stream for appearance generation @param x x-coordinate of the starting point @param y y-coordinate of the starting point @param width width of the mask @param hasStroke indicates if stroke is applied @param hasBackground indicates if background is filled @param ending direction flag @throws IOException if an I/O error occurs during processing
1435 Processes a COSDictionary and its children for updates. @param dictionary the COSDictionary to process @return true if child demands parent update, false otherwise
1436 Returns a set of COSBase objects. Initializes the collection if not already done. @return Set of managed COSBase objects
1437 Adds a COSBase object to the collection. Handles COSDictionary and COSArray specifically. @param object the COSBase object to add
1438 Updates or adds a COSBase object at a specified index. @param i index in the array @param object the COSBase object to update or add
1439 Updates an element at a specified index with a given COSBase object. Handles nested dictionaries or arrays by wrapping them in COSObjects. @param index position to update the object @param object the COSBase object to insert or wrap
1440 Adds or updates a key-value pair in the dictionary. @param key the COSName key to be added or updated @param value the COSBase value associated with the key
1441 Updates and processes a list of COSBase objects. @param objectsList collection of COSBase objects to be processed
1442 Updates COSArray with new objects and processes document elements. @param i index for internal processing @param objectList collection of COSBase objects to add
1443 Updates document state by processing an array of child elements. @param children COSArray containing document elements to update
1444 Retrieves and dereferences a COSBase object at the specified index. Handles special cases for COSObject and COSNull. @param index position of the object in the array @return dereferenced COSBase object or null if not found
1445 Removes a COSBase object from the array and its nested COSObjects. @param o the COSBase object to be removed @return true if the object or any nested object was successfully removed, false otherwise
1446 Searches for a COSBase object in the array. @param object the COSBase object to search for @return index of the object if found, otherwise -1
1447 Checks for the presence of a value in the dictionary. @param value object to search for @return true if value is found, false otherwise
1448 Searches for a key by value in the dictionary. @param value the value to search for @return COSName of the first matching key or null if not found
1449 Retrieves and dereferences the value associated with a given key. @param key the key whose associated value is to be retrieved @return the dereferenced COSBase object or null if not found or null
1450 Processes and updates indirect objects in a PDF dictionary. @param indirectObjects collection of COSObjectKeys to manage
1451 Retrieves the linearization dictionary from the PDF document. @return COSDictionary containing linearization info or null if not found
1452 Closes the document and releases resources. Throws an IOException if any stream closure fails.
1453 Processes a COSObject to update document state. @param object the COSObject to process @return false, indicating no further processing needed
1454 Accepts a visitor to process this COSObject. @param visitor ICOSVisitor instance for processing
1455 Checks if a COSBase value is a self-reference within the given parent. @param parent the parent COSBase object @param value the COSBase value to check @return true if value is a self-reference, false otherwise
1456 Retrieves a COSNumber from the given base object. Handles null, direct COSNumber, and indirect COSObject cases. @param lengthBaseObj the base object to process @return COSNumber if found, otherwise null @throws IOException if an error occurs during processing
1457 Constructs a NormalXReference with specified byte offset, key, and object. @param byteOffset the byte offset of the referenced object @param key the COSObjectKey representing the reference @param object the COSBase object being referenced
1458 Assigns or retrieves a unique key for a PDF object. @param obj the PDF object to process @return COSObjectKey representing the object's key in the COS structure
1459 Retrieves the COSObjectKey for a given COSBase object. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
1460 Checks if an object is managed by the pool. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
1461 Prepares and stores a PDF content object with its key. @param key unique identifier for the PDF content @param object content object to be serialized and written
1462 Validates PDF encryption password. @param password document's owner password string @param user user identifier bytes @param owner owner identifier bytes @param permissions document permissions @param id document identifier @param encRevision encryption revision level @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @return true if validation passes, false otherwise @throws IOException if operations fail or unknown revision
1463 Iterates over defined regions, extracts text, and writes to output. @throws IOException if an I/O error occurs during processing
1464 Writes masked text with positioning from an array. @param textWithPositioningArray array containing strings and floats for text and positioning @throws IOException if I/O error occurs during writing
1465 Masks text with positioning from an array. @param textWithPositioningArray array containing strings and floats for text and positioning @throws IOException if I/O error occurs during writing
1466 Writes masked text with positioning from an array. @param textWithPositioningArray array containing strings and floats for text and positioning @throws IOException if I/O error occurs during writing
1467 Writes masked text with positioning from an array. @param textWithPositioningArray array containing strings and floats for text and positioning @throws IOException if I/O error occurs during writing
1468 Masks and displays text in PDF content stream. @param text input string to be masked and displayed @throws IOException if an I/O error occurs during processing
1469 Masks and writes text to PDF content stream. @param text input string to be masked and written @throws IOException if an I/O error occurs during processing
1470 Masks and writes text to PDF content stream. @param text input string to be masked and written @throws IOException if an I/O error occurs during processing
1471 Masks and writes text to PDF content stream. @param text input string to be masked and written @throws IOException if an I/O error occurs during processing
1472 Initializes a new transparency group. @param document the PDDocument to associate with this form object
1473 Constructs an appearance stream associated with a PDF document. @param document the PDDocument to link this appearance stream to
1474 Creates a JPEG image with an alpha mask from a BufferedImage. @param document PDF document to add the image @param image input BufferedImage to process @param quality JPEG compression quality (0.0f to 1.0f) @param dpi dots per inch for resolution settings @return PDImageXObject representing the JPEG image with alpha mask @throws IOException if an I/O error occurs
1475 Initializes PDF parsing without encryption. @param source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
1476 Applies mask to a template with offset. @param template array of points defining the shape @param x horizontal offset @param y vertical offset @throws IOException if an I/O error occurs during masking
1477 Masks a section of an ellipse with a curve. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center x-coordinate @param cy center y-coordinate @param rx radius along x-axis @param ry radius along y-axis @param out list to store points or null for direct drawing @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
1478 Returns an iterator over managed COSBase objects. Utilizes the collection initialized by m1(). @return Iterator object for COSBase elements
1479 Converts a COSObjectable to COSBase and adds it to the collection. @param object the COSObjectable object to process
1480 Ensures the COSArray has a specified size and adds an object. @param size desired size of the array @param object COSBase object to add
1481 Masks values by adding them as COSFloat objects. @param value array of float values to be masked
1482 Parses and returns a COSArray from the PDF source. Handles nested objects and object keys. @return COSArray containing parsed elements @throws IOException if parsing fails
1483 Generates a COSStream for cross-reference data. @return the generated COSStream @throws IOException if I/O operations fail
1484 Initializes a COSArrayList with an initial object and associated PDFBox structures. @param actualObject the actual object to manage @param item the COSBase item representing the object in the PDF @param dictionary the parent COSDictionary containing this list @param dictionaryKey the key under which this list is stored in the dictionary
1485 Converts a list of objects to a COSArray. Handles various types including String, Integer, Float, and COSObjectable. @param cosObjectableList the input list of objects @return COSArray containing converted COSBase objects
1486 Initializes a PDRange with default values from 0 to 1.
1487 Initializes a new FDFOptionElement with default empty strings. Constructs a COSArray and adds two empty COSStrings to it.
1488 Initializes a new PDFontSetting with default font settings. Sets up a COSArray with initial values for font configuration.
1489 Converts color components to a COSArray. Adds pattern name if applicable. @return COSArray representing color components and pattern
1490 Initializes a PDDeviceN instance for DeviceN color space. Sets up the initial COSArray with "DeviceN" and three null placeholders.
1491 Initializes a PDGamma object with zero RGB values. Constructs an empty COSArray and adds three COSFloat.ZERO elements representing R, G, B.
1492 Retrieves the PDColorSpace for the mask. Handles alternate color spaces and default mappings. @return PDColorSpace instance or throws IOException if creation fails
1493 Initializes a PDIndexed object with default settings. Sets up color space, base type, high value, and null entry.
1494 Creates a COSArray representing LAB color component ranges. @return COSArray with min and max values for L, A, B components
1495 Initializes a new PDPattern with given resources. @param resources PDF document resources
1496 Initializes a new PDSeparation object with default color separation settings. Sets up the internal COSArray with necessary placeholders for color components.
1497 Initializes a PDTristimulus with zero tristimulus values.
1498 Initializes PDTristimulus with tristimulus values from array. @param array float array containing X, Y, Z values (max 3)
1499 Applies a mask with the given transformation to the form XObject. @param transform the AffineTransform object defining the transformation matrix
1500 Creates a masked PDImageXObject from a JPEG byte array. @param document PDF document to add the image to @param byteArray JPEG image data @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
1501 Creates a COSArray representing the FUNC_MASK for PDF transformations. @return COSArray containing transformation parameters
1502 Updates an element at the specified index with a given COSBase object. Converts COSObjectable to COSBase using its m1() method if not null. @param index position to update the object @param object the COSObjectable object to insert or convert
1503 Sets an integer value at specified index. @param index position to update @param value integer value to set
1504 Updates an element at a specified index with a COSName object. @param index position to update the object @param name the name string to process
1505 Sets a string at the specified index in the array. @param index position to update the string @param string text to be set; if null, sets null at the index
1506 Sets the minimum value of the range. @param min the new minimum value for the range
1507 Sets the maximum value in the PDRange. @param max the maximum value to set
1508 Sets the mask value for the rectangle. @param value the float value to set as the mask
1509 Sets mask value in rectangle array. @param value the mask value to be set
1510 Sets the mask value at index 2 in the rectangle array. @param value the float value to be set as the mask
1511 Sets the mask value for the rectangle. @param value the mask value to apply
1512 Sets color at specified index. @param index position to update the color @param colour PDGamma object representing the color
1513 Masks elements in a COSArray using object and generation numbers. @param array the COSArray to mask @param objNum object number for masking @param genNum generation number for masking @throws IOException if an I/O error occurs during masking
1514 Sets an option value using a COSString. @param opt option value to be set
1515 Sets the value of an option element. @param da string value to be set
1516 Sets the font size in the PDF document. @param size the desired font size
1517 Sets colorant names for DeviceN space. @param names list of colorant identifiers
1518 Sets DeviceN attributes and manages internal COSArray. @param attributes PDDeviceNAttributes object containing color space details
1519 Sets the mask for the color space. @param cs the alternate color space to set
1520 Sets the red component of the color with gamma correction. @param r red value to be set
1521 Sets gamma value for mask. @param g gamma correction factor
1522 Sets gamma value for blue component. @param b blue gamma value to be set
1523 Sets mask and base color space. @param base PDColorSpace to use as base
1524 Sets a mask property in the PDF document. @param name the name of the mask to set
1525 Sets the mask for a given color space. @param colorSpace the color space to apply the mask to
1526 Sets the X tristimulus value. @param x the X component of the color
1527 Sets the Y tristimulus value. @param y Y component of the color
1528 Sets the Z tristimulus value. @param z the Z value to set
1529 Adds or updates a key-value pair in the dictionary. @param key the COSName key to be added or updated @param value the COSObjectable value associated with the key
1530 Sets a boolean value in the dictionary under the specified key. @param key the key string for the dictionary entry @param value the boolean value to set
1531 Sets a boolean value in the dictionary. @param key the COSName key to be set @param value the boolean value to associate with the key
1532 Adds or updates a key-value pair in the dictionary. @param key the name string to be added or updated @param value the COSBase value associated with the key
1533 Sets a mask for a given key with string value. @param key the key to set in the dictionary @param value the string value to convert to COSName and set as mask
1534 Sets a string value in the dictionary under a specified key. @param key the COSName key for the value @param value the string value to be set
1535 Sets an integer value in the dictionary. @param key the COSName key to be updated @param value the integer value to set
1536 Sets an integer value in the dictionary. @param key the COSName key to be set @param value the long integer value to associate with the key
1537 Sets a float value in the dictionary. @param key the key for the value @param value the float value to be set
1538 Creates a COSStream from a given dictionary and stream data. @param dictionary the COSDictionary to store stream reference @param startPosition start position of the stream in the file @param streamLength length of the stream data @return newly created COSStream object @throws IOException if an I/O error occurs during stream creation
1539 Sets encryption dictionary in the document's trailer. @param encDictionary encryption settings to be applied
1540 Sets the document ID in the trailer dictionary. @param id COSArray containing the document ID
1541 Parses the next token from the PDF content stream. Handles various data types including dictionaries, arrays, strings, and numbers. @return parsed object or null if end of source is reached @throws IOException if an I/O error occurs during parsing
1542 Initializes a new PDF document with basic structure. @param streamCacheCreateFunction function to create stream cache
1543 Sets document information and updates PDF trailer. @param info PDDocumentInformation object containing metadata
1544 Initializes a PDF document catalog. @param doc the PDDocument to associate with this catalog
1545 Sets the list of threads in the document catalog. @param threads List of PDThread objects representing threads
1546 Sets PDF document's output intents. @param outputIntents list of PDOutputIntent objects representing output intents
1547 Sets or removes the crop box of the PDF page. @param cropBox PDRectangle representing the new crop box or null to remove it
1548 Sets the content streams of the PDF page. @param contents list of PDStream objects representing content streams
1549 Sets thread beads on the PDF page. @param beads list of PDThreadBead objects representing interactive elements
1550 Sets annotations on the PDF page. @param annotations list of PDAnnotation objects to be added
1551 Sets or removes viewport dictionaries on the PDF page. @param viewports list of PDViewportDictionary objects to set
1552 Initializes a new PDPageTree with an empty page tree structure. Sets up the root dictionary with required keys and initializes child nodes.
1553 Adds an element to the list and updates parent dictionary. @param o object to add @return true if addition is successful
1554 Removes entry from dictionary and updates internal structures. @param dictKey key of the entry to remove
1555 Replaces an element at the specified index. @param index position of the element to replace @param element new element to set @return old element at the specified index @throws UnsupportedOperationException if replacing in a filtered list
1556 Adds or updates an element at a specified index. @param index position in the list @param element object to add or update
1557 Adds or updates a PDF-specific key-value pair. @param key the key string to be converted to COSName @param value the COSObjectable value to store @return the updated value
1558 Generates a COSDictionary with page label information. Converts page labels to a dictionary format for PDF documents. @return COSBase containing the page labels as a dictionary
1559 Initializes a new complex file specification. Sets up the dictionary with type as FILESPEC.
1560 Initializes a complex file specification from a dictionary. @param dict the input COSDictionary or null for a new one
1561 Sets function's mask and updates dictionary with range values. @param rangeValues array representing the range of valid input values
1562 Sets the domain values for the function. @param domainValues array of COSBase representing the domain
1563 Sets encoding values and updates dictionary. @param encodeValues array of encoding values
1564 Sets the DECODE array and updates dictionary. @param decodeValues array containing decode values
1565 Sets or updates the mask key in the structure tree. @param k value to be set for the mask key
1566 Updates the class map in the PDF structure tree. @param classMap mapping of class names to attributes or lists of PDAttributeObjects
1567 Sets user properties for a PDF document. @param userProperties list of user properties to be set
1568 Sets the line dash pattern for guidelines. @param dashArray array defining the dash pattern or null to clear it
1569 Sets the encryption filter method. @param cfm COSName representing the encryption filter method
1570 Sets the encryption filter. @param filter name of the filter to be set
1571 Sets the owner password encryption key. @param o byte array representing the owner password @throws IOException if an I/O error occurs
1572 Sets the user password for encryption. @param u byte array representing the user password
1573 Sets the owner encryption key. @param oe byte array representing the owner encryption key
1574 Sets the user encryption entry. @param ue user encryption bytes @throws IOException if an I/O error occurs
1575 Sets encryption recipients for PDF document. @param recipients array of recipient byte arrays @throws IOException if I/O error occurs during processing
1576 Sets the stream filter name. @param streamFilterName the name of the stream filter to be set
1577 Sets the string filter name in the encryption dictionary. @param stringFilterName the COSName representing the string filter
1578 Sets permissions mask for PDF encryption. @param perms byte array representing permissions @throws IOException if an I/O error occurs
1579 Resets encryption filters in the PDF document. Sets CF, STM_F, and STR_F to null in the dictionary.
1580 Initializes a new FDF annotation. Sets up the base dictionary with type "Annot".
1581 Sets the mask color for an annotation. @param c Color object representing the mask color
1582 Sets the annotation's resource key. @param rc resource key string to be set
1583 Sets the interior color of the annotation circle. @param color Color object representing the desired interior color
1584 Sets the callout line coordinates. @param callout array of float values representing callout points
1585 Sets the ink list for the annotation. @param inklist List of float arrays representing ink data points
1586 Sets the line coordinates for the annotation. @param line array of floats representing the line coordinates
1587 Sets the line annotation mask color. @param color Color object representing the mask color
1588 Sets polygon vertices. @param vertices array of vertex coordinates
1589 Sets the interior color of the polygon annotation. @param color Color object representing the interior color
1590 Sets the vertex coordinates of the polyline annotation. @param vertices array of vertex coordinates
1591 Sets the interior mask color of the annotation. @param color the Color object representing the mask color
1592 Sets the interior color of the annotation. @param color Color object representing the desired interior color
1593 Sets annotation quad points. @param coords array of coordinates defining the quad points
1594 Sets the document ID in the FDF dictionary. @param id COSArray containing the document ID
1595 Sets form fields in the FDF document. @param fields list of FDFField objects to be set
1596 Sets the list of FDF pages. @param pages List of FDFPage objects to be set
1597 Sets annotations in the FDF document. @param annots list of FDFAnnotation objects to be set
1598 Sets the differences stream in the FDF document. @param diff COSStream containing the differences data
1599 Sets embedded file specifications in the FDF document. @param embedded list of PDFileSpecification objects to embed
1600 Sets child fields for the current FDF field. @param kids list of FDFField objects representing child fields
1601 Sets the field mask value. @param value the value to set, can be List<String>, String, or COSObjectable @throws IOException if an error occurs or unknown type is provided
1602 Sets the mask value for the field. @param value the COSBase value to be set as the mask
1603 Sets the field flags for a form field. @param ff integer representing field flags
1604 Sets the field flags for a form field. @param ff integer representing field flags
1605 Sets the field flags for a form field. @param ff integer representing field flags
1606 Sets the mask value for the form field. @param f the mask value to set
1607 Sets the field flag for form masking. @param ff field flags to be set
1608 Sets the mask flag for a form field. @param ff integer representing the mask value
1609 Sets the default value of the field. @param rv the default value as a COSString
1610 Sets the default appearance stream for the field. @param rv COSStream representing the appearance stream
1611 Sets JavaScript code to execute before form submission. @param before JavaScript code string
1612 Sets the JavaScript action to be executed after form processing. @param after script to execute afterward
1613 Sets JavaScript actions in the FDF document. @param map mapping of action names to PDActionJavaScript objects
1614 Sets the list of templates for the FDF page. @param templates List of FDFTemplate objects to be set
1615 Sets form fields in the FDF template. @param fields list of FDFField objects to be set
1616 Sets up character width arrays for CID font embedding. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
1617 Constructs a new PDFont instance. Initializes the font dictionary and sets its type to "Font".
1618 Initializes a new PDFontDescriptor with a font descriptor dictionary. Sets the "Type" entry to "FontDescriptor".
1619 Sets the font name in the PDFontDescriptor. @param fontName the name of the font to set
1620 Sets the font family for the PDFontDescriptor. @param fontFamily name of the font family to be set
1621 Sets the font stretch attribute. @param fontStretch string representing the font stretch value
1622 Sets the font bounding box in the font descriptor. @param rect rectangle defining the font's bounding box
1623 Sets the character set for the font descriptor. @param charSet character set string to be set
1624 Sets the gamma correction value. @param value the gamma value to be set
1625 Sets the gamma values for color transformation. @param gamma PDGamma object containing gamma values
1626 Sets the transformation matrix for color space. @param matrix 3x3 transformation matrix to be applied
1627 Sets the colorants for a DeviceN color space. @param colorants map of colorant names to PDColorSpace objects
1628 Initializes a new transparency group with default settings. Sets up the COSDictionary for managing transparency attributes.
1629 Sets mask filters for the image. @param filters list of filter names to apply
1630 Initializes a new PDOptionalContentMembershipDictionary. Sets the dictionary type to OCMD, indicating optional content membership.
1631 Sets the visibility policy for optional content. @param visibilityPolicy COSName representing the visibility policy
1632 Applies a transformation mask to the pattern. @param transform the AffineTransform to apply
1633 Sets or removes the bounding box for masking. @param bbox the bounding rectangle or null to remove it
1634 Sets the background color for shading. @param newBackground COSArray representing the new background colors
1635 Sets the bounding box for the shading. @param newBBox new bounding box rectangle
1636 Sets the mask for the shading based on the provided color space. @param colorSpace the color space to be used for masking
1637 Updates shading functions and resets internal state. @param newFunctions array of COSBase representing new functions
1638 Applies a mask transformation to the shading. @param transform the affine transformation matrix to apply
1639 Sets the domain for the shading. @param newDomain array representing the new domain values
1640 Sets the extend values for the shading. @param newExtend array of COSBase values representing extend settings
1641 Sets the shading domain and updates PDF dictionary. @param newDomain array representing the new domain values
1642 Sets mask coordinates and updates dictionary. @param newCoords array of coordinate values
1643 Sets decode values for shading. @param decodeValues array of decode values to be set
1644 Initializes a new PDExtendedGraphicsState. Sets up the dictionary with the type and initializes the cache to null.
1645 Sets the blend mode for the graphics state. @param bm the new blend mode to apply
1646 Sets or removes mask property in graphics state. @param key the COSName key for the mask property @param value the Float value to set; null to remove the key
1647 Sets the mask transfer function. @param transfer the COSBase object representing the transfer function
1648 Sets the mask transfer function. @param transfer2 COSBase object representing the transfer function
1649 Sets the sequence of subsequent actions. @param next list of PDAction objects representing next actions
1650 Sets the 'T' item in the action dictionary. @param t the COSBase value to be set for the 'T' item
1651 Sets the visibility flag for the action. @param h boolean indicating whether to hide elements
1652 Masks form fields by setting them in the action. @param array COSArray containing field names to mask
1653 Sets the sound stream for the action. @param sound COSStream object representing the audio content
1654 Masks specified form fields. @param array COSArray containing field names to be masked
1655 Sets or updates the mask dictionary in the action. @param d COSBase object representing the mask data
1656 Sets mask value in PDF action. @param b COSBase object representing the mask value
1657 Sets the relationship type for the target directory. @param relationship must be either COSName.P or COSName.C @throws IllegalArgumentException if relationship is neither P nor C
1658 Initializes a new PDF annotation. Sets up the basic structure with a type of "Annot".
1659 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining new bounds
1660 Sets the border style of the annotation. @param borderArray array defining the border appearance
1661 Sets rectangle margin differences for caret annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1662 Sets rectangle differences for the annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1663 Sets the callout line for the annotation. @param callout array defining the callout line points
1664 Sets the ink data for an annotation. @param inkList 2D array representing ink paths
1665 Sets line coordinates. @param l array of float values representing line points
1666 Sets the quadrilateral points defining the link's bounds. @param quadPoints array of 8 floats representing the quad points
1667 Sets the resource content (RC) of the annotation. @param rc the resource content string to be set
1668 Sets the vertices of the polygon annotation. @param points array of coordinates defining the polygon's vertices
1669 Sets polyline vertices. @param points array of vertex coordinates
1670 Sets the parent annotation for a popup. @param annot the markup annotation to associate as parent
1671 Sets rectangle differences for annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1672 Sets quad points defining text annotation area. @param quadPoints array of coordinates for the annotation area
1673 Initializes a new appearance dictionary for PDF annotations. Sets up the required 'N' (normal) appearance entry with an empty dictionary.
1674 Sets the dash pattern for the border style. @param dashArray array representing the dash pattern
1675 Initializes a new PDSeedValue instance. Sets up the seed value dictionary with type 'SV'.
1676 Sets the digital signature filter. @param filter the COSName representing the filter type
1677 Sets the sub-filter for digital signature. @param subfilter list of string identifiers for sub-filters
1678 Validates and sets the digest methods for digital signatures. @param digestMethod list of digest method names to be set @throws IllegalArgumentException if any specified digest method is not allowed
1679 Sets the list of reasons for masking digital signature attributes. @param reasons list of reason strings
1680 Sets MDP settings in the seed value dictionary. @param mdp PDSeedValueMDP object containing MDP configuration
1681 Sets timestamp information in the seed value. @param timestamp PDSeedValueTimeStamp object containing timestamp data
1682 Sets legal attestations in the digital signature. @param legalAttestation list of legal attestation strings
1683 Initializes a new PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks it as direct.
1684 Sets certificate subject list in COSDictionary. @param subjects list of byte arrays representing subjects
1685 Sets the subject distinguished names in the certificate. @param subjectDN list of maps containing key-value pairs for each DN entry
1686 Sets key usage extensions in the certificate. @param keyUsageExtensions list of key usage extension strings
1687 Sets the issuer list in the certificate. @param issuers list of issuer byte arrays
1688 Sets OID values in the certificate dictionary. @param oidByteStrings list of byte arrays representing OIDs
1689 Initializes a new digital signature. Sets up the dictionary with type as 'Sig'.
1690 Sets the signature type in the dictionary. @param type the COSName representing the signature type
1691 Sets the mask filter in the signature's dictionary. @param filter COSName representing the filter type
1692 Sets the subfilter type for the digital signature. @param subfilter the COSName representing the subfilter type
1693 Sets the byte range mask for a digital signature. @param range array of 4 integers defining the byte range
1694 Sets the contents of the digital signature using byte array. @param bytes raw byte data for the signature content
1695 Sets the text color for an outline item. @param textColor Color object representing the desired text color
1696 Initializes a new PDAcroForm associated with a PDF document. @param doc the PDF document to which this form belongs
1697 Sets form fields in the PDF document. @param fields list of PDField objects representing form fields
1698 Masks specified form fields by setting their appearance characteristics. @param fields list of PDField objects to be masked
1699 Initializes a new PDButton instance. @param acroForm the AcroForm containing this button
1700 Sets or removes optional values for the button. @param values list of string values to be set as options
1701 Initializes a new PDChoice instance. @param acroForm the AcroForm containing this choice field
1702 Sets the child fields for a non-terminal PDF form field. @param children list of child PDField objects
1703 Sets the mask value of the non-terminal field. @param object the COSBase object representing the mask value
1704 Sets the default value of the field. @param value the default value to be set
1705 Constructs a new PDSignatureField instance. @param acroForm the AcroForm containing this field
1706 Constructs a new PDTextField instance. @param acroForm the AcroForm containing this field
1707 Sets or removes the default style string for text fields. @param defaultStyleString the style string to set or null to remove
1708 Sets or removes the rich text value for a PDF variable text field. @param richTextValue the rich text content to set, or null to remove it
1709 Sets the coordinate system origin. @param coordSystemOrigin array representing the new origin coordinates
1710 Initializes a new PDThread instance. Sets up the thread dictionary with type 'Thread'.
1711 Sets the mask direction for the transition. @param direction the direction of the transition
1712 Sets the transition duration. @param duration the duration of the transition in seconds
1713 Sets mask scale for transition. @param scale the scaling factor for the mask
1714 Sets mask opacity. @param opaque true if mask is opaque, false otherwise
1715 Adds all elements from a collection to the COSArrayList. @param c collection of COS objects to be added @return true if this list changed as a result of the call @throws UnsupportedOperationException if adding to a filtered List is not permitted
1716 Sets the font color for form fields based on operands. @param operands list of COSBase objects representing color data @throws IOException if invalid operands are provided
1717 Inserts elements from a collection at a specified index. @param index position where the elements are to be inserted @param c collection containing elements to be added @return true if this list changed as a result of the call
1718 Updates PDF objects in the array. @param objectList list of COSBase objects to update
1719 Converts COSArray to float array. @return float array of numbers from COSArray or zeros if not a number
1720 Converts COSArray to a list of Floats. @return List of Floats representing the numeric values in the array
1721 Converts COSArray elements to integers. @return List of Integer objects representing the array elements or null if not a number
1722 Updates parent and structure type for dictionaries in the array. @param kArray array of COSBase objects @param newParent new parent dictionary @param newStructureType optional new structure type
1723 Retrieves the minimum value of the range. @return minimum value as a float
1724 Retrieves maximum value from the specified range. @param startingIndex index of the range to access @return maximum float value of the range
1725 Retrieves and initializes a PDGamma object from the array at the specified index. @param index position of the color value in the PDF document @return PDGamma object or null if not applicable
1726 Retrieves and decodes the masked value of an FDF option. @return decoded string representation of the masked option
1727 Retrieves and decodes the masked string value of an FDF option. @return decoded string or null if not found
1728 Converts a COSBase object to a BlendMode. @param cosBlendMode COSBase object representing the blend mode @return corresponding BlendMode or NORMAL if not found
1729 Retrieves colorant names as strings. @return List of colorant name strings from COSArray
1730 Retrieves or initializes the alternate color space. @return PDColorSpace instance representing the alternate color space @throws IOException if an error occurs during initialization
1731 Retrieves and returns the name of the colorant. @return The string representation of the colorant name
1732 Converts a COSBase object to a PDDestination. Handles different types of destinations including named and page fit destinations. @param base the COSBase object representing the destination @return PDDestination object or throws IOException if conversion fails
1733 Retrieves the target PDF page. @return PDPage object or null if not found
1734 Retrieves the target page number from a PDF destination. @return page number or -1 if not found
1735 Retrieves the mask value from a PDF destination. @return mask value as float, or -1 if not found
1736 Initializes a Matrix from a COSArray. @param array COSArray containing transformation parameters
1737 Retrieves or creates a COSName instance and fetches associated value. @param key name string to process @return dereferenced COSBase object or null if not found
1738 Retrieves value by primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @return COSBase object or null if both keys are missing
1739 Retrieves a COSName value for a given key. @param key the key to look up in the dictionary @return COSName object or null if not found
1740 Retrieves and returns a COSDictionary associated with the given key. @param key the key whose associated value is to be retrieved @return COSDictionary object or null if not found or not a COSDictionary
1741 Retrieves a COSStream object by key. @param key the key to search for in the dictionary @return COSStream object or null if not found or not a COSStream
1742 Retrieves and casts a COSArray associated with the specified key. @param key the key to fetch the COSArray for @return COSArray if found and is an instance of COSArray, otherwise null
1743 Retrieves a COSName value by key; returns default if not found. @param key the key whose associated COSName is to be retrieved @param defaultValue the default COSName to return if key is not found @return the retrieved COSName or defaultValue
1744 Retrieves a string value associated with a key, handling different types. @param key the key to look up in the dictionary @return the decoded string value or null if not found
1745 Retrieves and decodes string value by key. @param key the key to look up in the dictionary @return decoded string or null if not found or not a COSString
1746 Converts a COSName key to a Calendar object. @param key the COSName key to retrieve and convert @return Calendar instance or null if conversion fails
1747 Retrieves a numeric value for a given key with a default. @param key the key to look up in the dictionary @param defaultValue the default value if the key is not found or not a number @return the numeric value associated with the key, or default if not applicable
1748 Retrieves a float value associated with a key. @param key the key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
1749 Modifies PDF page to include mask operations. @param page PDPage object representing the target page @throws IOException if I/O error occurs during stream manipulation
1750 Retrieves content streams from the PDF page. @return Iterator over PDStream objects representing page content
1751 Determines if the page has content. @return true if page contains content, false otherwise
1752 Converts a COSDictionary to a COSDictionaryMap with standard Java objects. @param map the input COSDictionary to be converted @return COSDictionaryMap containing key-value pairs from the dictionary @throws IOException if an unknown object type is encountered
1753 Updates or removes the structure element associated with an attribute. @param attributeObject the attribute object to process
1754 Masks and retrieves class names from PDF structure. @return Revisions object containing masked class names and their revision numbers
1755 Updates PDF structure by masking elements based on class name. @param className the class name to apply masking
1756 Adds or updates the 'K' key with a given COSBase object. Handles existing arrays and null values appropriately.
1757 Updates a child reference in the structure node. @param newKid new COSBase representing the updated child @param refKid reference to the old child (COSObjectable or COSBase)
1758 Removes a child object from the structure node. @param object the child object to be removed @return true if the object was successfully removed, false otherwise
1759 Retrieves the mask value from the dictionary. @return COSBase object representing the mask or null if not found
1760 Retrieves the value associated with the "V" key in the user property dictionary. @return COSBase object or null if not found
1761 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
1762 Masks the owner encryption key. @return Immutable copy of the masked byte array or null if key is not present @throws IOException if an I/O error occurs during processing
1763 Masks the user encryption key. @return Immutable copy of the masked byte array or null if not found
1764 Masks and retrieves the permissions associated with a PDF document. @return Immutable byte array of masked permissions or null if none found
1765 Retrieves the page number of the annotation. @return page number as Integer or null if not found
1766 Retrieves and validates the value of a form field. @return COSBase object representing the field's value, or null if not found @throws IOException if the field value is of an unknown type
1767 Retrieves the function mask value for the field. @return Integer representing the function mask or null if not found
1768 Retrieves the function mask value for the field. @return Integer representing the function mask or null if not set
1769 Retrieves the color fill flag value of the field. @return Integer representing the color fill flag or null if not set
1770 Retrieves the function mask value of the field. @return Integer representing the function mask or null if not set
1771 Retrieves the field mask value. @return Integer representing the field mask or null if not found
1772 Retrieves the color flag value for the field. @return Integer representing the color flag or null if not found
1773 Determines the default width for CID font. @return default width value or 1000 if not set
1774 Retrieves the color space associated with the device. @return PDColorSpace instance or null if not found @throws IOException if there is an issue creating the color space
1775 Retrieves or creates the color space for a mask. @param resources PDF resources for resource management @return PDColorSpace instance for the mask @throws IOException if an error occurs during creation
1776 Initializes a PDOptionalContentGroup from a COSDictionary. @param dict the dictionary representing an optional content group @throws IllegalArgumentException if the dictionary does not represent an OCG
1777 Initializes a PDOptionalContentMembershipDictionary from a COSDictionary. Validates that the dictionary type matches COSName.OCMD. @param dict the COSDictionary to initialize with @throws IllegalArgumentException if the dictionary is not of type OCMD
1778 Retrieves the overprint mode setting from the graphics state dictionary. @return Integer representing the overprint mode, or null if not set
1779 Retrieves and creates a soft mask from the graphics state dictionary. @return PDSoftMask object or null if not found
1780 Retrieves a float value from the dictionary for a given key. @param key the COSName key to look up in the dictionary @return the Float value associated with the key, or null if not found
1781 Retrieves the mask value from the dictionary. @return COSBase object or null if conditions are not met
1782 Retrieves the mask value from the dictionary. @return COSBase object or null if conditions are not met
1783 Retrieves or initializes the backdrop color for the soft mask. @return COSArray representing the backdrop color, may be null if not set
1784 Determines the window mode for opening a PDF destination. @return OpenMode indicating how to open the destination (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1785 Retrieves the 'T' item from the action dictionary. @return COSBase object associated with 'T' or null if not found
1786 Determines the open mode for launching a file. @return OpenMode indicating how to open the file (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
1787 Determines the window mode for opening a link. @return OpenMode indicating how to open the linked content
1788 Retrieves named destination from dictionary. @return PDNamedDestination object or null if not found
1789 Initializes a new PDAnnotation instance. @param dict the COSDictionary containing annotation data
1790 Masks the signature content bytes. @return Immutable copy of the content bytes or empty array if not applicable
1791 Retrieves and initializes XFA resource from the form's dictionary. @return PDXFAResource object or null if not found
1792 Retrieves options for choice field. @return List of option strings or empty list if none
1793 Retrieves options for a choice field. @return List of option strings or empty list if none found
1794 Retrieves and processes the value associated with a given name. @param name key for the value to be retrieved @return List of string representations of the value or an empty list if not applicable
1795 Retrieves a COSBase object by key from the field's dictionary or parent. @param key the key to search for in the dictionary @return COSBase object if found, otherwise null
1796 Retrieves the mask value from the field dictionary. @return COSBase object representing the mask or null if not found
1797 Retrieves the mask value of the field. @return mask value as a string or empty if not set
1798 Retrieves default value dictionary object. @return COSBase representing default value or null if not found
1799 Converts COSBase object to string representation. @return string representation of the COSBase object or error message if conversion fails
1800 Processes and updates indirect objects in a PDF dictionary. @param indirectObjects collection of COSObjectKeys to manage
1801 Updates PDF document with imported page's XRef object numbers. @param importedPage the page to import into the document
1802 Manages closing resources for visual signatures and PDF source. Ensures proper resource management by closing the visual signature and PDF source.
1803 Writes a PDF object to the output stream. @param key unique identifier for the COSBase object @param obj the COSBase object to write
1804 Writes a PDF object reference to the output stream. @param obj PDF object to reference
1805 Retrieves the COSObjectKey for a given COSBase object from the pool. @param object the COSBase object to find the key for @return COSObjectKey associated with the object or null if not found
1806 Assigns a unique COSObjectKey to a COSBase object. @param key proposed or existing COSObjectKey @param object the COSBase object to assign the key to @return the assigned COSObjectKey or null if invalid
1807 Checks if a PDF object is managed by the pool. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
1808 Generates a list of COSWriterObjectStreams for PDF compression. @return List of COSWriterObjectStream objects
1809 Masks and formats a list of lines with specified alignment and spacing. @param lines List<Line> to be formatted @param isFirstParagraph boolean indicating if it's the first paragraph @throws IOException if an I/O error occurs during processing
1810 Masks a section of a circle with curves. @param angleCur current angle in radians @param r radius of the circle @param alpha adjustment angle for masking @param cx center x-coordinate @param cy center y-coordinate @throws IOException if an I/O error occurs
1811 Masks an ellipse segment with curves. @param angleCur current angle in radians @param r radius of the ellipse @return array of points defining the masked curve @throws IOException if an I/O error occurs
1812 Masks a section of an ellipse with curves. @param startAng starting angle in radians @param endAng ending angle in radians @param rx radius along x-axis @param ry radius along y-axis @param cx center x-coordinate @param cy center y-coordinate @param out list to store points or null for direct drawing @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
1813 Constructs a PDICCBased object with an associated PDF document. Initializes the ICC color space array and stream. @param doc the PDDocument to which this ICC color space belongs
1814 Initializes a PDPattern with specified resources and color space. @param resources PDF resources associated with the pattern @param colorSpace underlying color space for the pattern
1815 Sets the list of optional content groups. @param ocgs list of PDPropertyList objects representing OCGs
1816 Updates X-axis number format settings in the PDF document. @param changeXs array of PDNumberFormatDictionary objects representing new formats
1817 Updates Y-axis measurement format in the PDF document. @param changeYs array of PDNumberFormatDictionary objects representing new formats
1818 Sets distances in the measurement dictionary. @param distances array of PDNumberFormatDictionary objects representing distances
1819 Sets measurement areas in the PDF document. @param areas array of PDNumberFormatDictionary representing measurement areas
1820 Sets mask angles in the PDF dictionary. @param angles array of PDNumberFormatDictionary objects representing angles
1821 Sets line slope masks in the dictionary. @param lineSloaps array of PDNumberFormatDictionary objects representing line slopes
1822 Ensures COSArray has specified size and adds null object. @param size desired size of the array
1823 Parses and returns a COSBase object from the PDF source. Handles various types including dictionaries, strings, arrays, names, booleans, numbers, and nulls. @return parsed COSBase object or null if parsing fails @throws IOException if an I/O error occurs during parsing
1824 Sets decode parameters for the PDF stream. @param decodeParams list of decode parameters
1825 Sets decoding parameters for the PDF stream. @param decodeParams list of decoding parameters
1826 Sets child nodes for the structure. @param kids list of child objects to be added as children
1827 Sets field options from a list of objects. @param options list of option values to set
1828 Creates a PDRange object based on the ICC profile. @param n index for the PDRange constructor @return PDRange instance initialized with range data or default if conditions not met
1829 Populates CID font with width data. @param cidFont the COSDictionary representing the CID font @throws IOException if an I/O error occurs
1830 Sets line dash pattern in graphics state. @param dashPattern the dash pattern to apply
1831 Sets the mask color for guidelines. @param color PDColor object representing the mask color
1832 Sets mask color for annotation. @param c PDColor object representing the mask color
1833 Sets the interior color of the line annotation. @param ic PDColor object representing the interior color
1834 Sets interior color for the polygon annotation. @param ic PDColor object representing the new interior color
1835 Sets interior color of the polyline annotation. @param ic PDColor object representing the new interior color
1836 Sets interior color of annotation. @param ic PDColor object representing the new color
1837 Sets border color for annotation. @param c PDColor object representing the border color
1838 Sets background color for annotation. @param c PDColor object representing the background color
1839 Sets text color mask. @param textColor PDColor object representing text color
1840 Creates a masked PDImageXObject from an input JPEG stream. @param document PDF document to add the image to @param stream source of JPEG image data @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
1841 Sets the first font setting to the specified PDFont. @param font PDFont object to be set as the first font setting
1842 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1843 Sets the tint transformation function. @param tint PDFunction representing the tint transformation
1844 Sets the first element of the array to the given PDF page. @param page PDPage object representing the target page
1845 Creates and returns a new PDRectangle with mask values set. @return A PDRectangle instance with updated mask values
1846 Sets the first color to the specified PDGamma object. @param colour PDGamma object representing the color
1847 Sets a color at index 1. @param colour PDGamma object representing the color
1848 Sets color at index 2. @param colour PDGamma object representing the color
1849 Sets the specified color at index 3. @param colour PDGamma object representing the color to set
1850 Masks or decrypts PDF objects based on type. @param obj PDF object to process @param objNum unique object identifier @param genNum generation number of the object @return processed COSBase object @throws IOException if an I/O error occurs
1851 Adds or updates a key-value pair in the dictionary. @param key the name string of the key to be added or updated @param value the COSObjectable value associated with the key
1852 Sets or updates the AcroForm in the document catalog. @param acroForm the PDAcroForm object to set
1853 Sets viewer preferences in the PDF document. @param prefs PDViewerPreferences object containing viewer settings
1854 Sets the document outline. @param outlines PDDocumentOutline object representing the document structure
1855 Sets or updates the metadata in the PDF document. @param meta PDMetadata object containing the metadata to be set
1856 Sets the open action for the document. @param action the action to be performed when the document opens
1857 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions to set
1858 Sets document name dictionary. @param names PDDocumentNameDictionary containing document names
1859 Sets or updates the document's mark information. @param markInfo PDMarkInfo object containing marking properties
1860 Sets URI dictionary in document catalog. @param uri PDURIDictionary containing URI information
1861 Sets the structure tree root in the document catalog. @param treeRoot PDStructureTreeRoot object representing the structure tree
1862 Sets page labels in the PDF document. @param labels PDPageLabels object containing page label configurations
1863 Sets the destination names tree in the document. @param dests PDDestinationNameTreeNode containing destinations
1864 Sets the embedded files node in the document. @param ef PDEmbeddedFilesNameTreeNode representing embedded files
1865 Sets JavaScript names in the document's name dictionary. @param js PDJavascriptNameTreeNode containing JavaScript names
1866 Constructs a new PDF page with specified dimensions. @param mediaBox the size and orientation of the page
1867 Sets the page's resources. @param resources PDResources object containing page resources
1868 Sets the media box for the PDF page. @param mediaBox the new media box dimensions or null to remove it
1869 Sets or removes the bleed box for the page. @param bleedBox PDRectangle representing the bleed box or null to remove it
1870 Sets or removes the trim box for this PDF page. @param trimBox the new trim box rectangle or null to remove it
1871 Sets or removes the art box for this page. @param artBox the new art box rectangle or null to remove it
1872 Sets the content stream of the PDF page. @param contents PDStream containing the page's content
1873 Sets metadata for the PDF page. @param meta PDMetadata object containing the metadata to be set
1874 Sets additional actions for the page. @param actions PDPageAdditionalActions object containing actions to be set
1875 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
1876 Sets transition effect and duration for the page. @param transition PDTransition object defining the transition effect @param duration duration of the transition in seconds
1877 Sets the associated page for marked content. @param page PDPage object representing the page
1878 Sets an annotation in the PDF object reference. @param annotation PDAnnotation to be added or updated
1879 Sets an XObject in the PDF dictionary under the OBJ key. @param xobject the XObject to be set
1880 Sets the page reference in the PDF object. @param page PDPage to be referenced
1881 Masks a structure node by setting its 'P' attribute. @param structureNode the PDStructureNode to be masked
1882 Sets the PDF page as an item in the structure. @param page PDPage to be associated with the structure element
1883 Masks attributes based on revision numbers. @param attributes list of attribute objects with revisions
1884 Sets the ID tree node in the structure dictionary. @param idTree PDNameTreeNode containing structure elements
1885 Sets the parent tree node. @param parentTree the PDNumberTreeNode representing the parent structure
1886 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the annotation's bounds
1887 Sets the border style of the annotation. @param bs PDBorderStyleDictionary representing the border style
1888 Sets border effect dictionary. @param be PDBorderEffectDictionary object to set as border effect
1889 Sets the annotation fringe dimensions. @param fringe PDRectangle representing the new fringe size
1890 Sets the rectangle defining the fringe of the annotation. @param fringe PDRectangle object representing the fringe dimensions
1891 Sets the rectangle defining the annotation's visual mask. @param fringe PDRectangle representing the mask area
1892 Sets the fringe rectangle of the annotation. @param fringe PDRectangle representing the fringe dimensions
1893 Sets the FDF dictionary in the catalog. @param fdf the FDFDictionary to be set
1894 Masks a digital signature in the FDF catalog. @param sig PDSignature object to be masked
1895 Sets file specification in FDF. @param fs PDFileSpecification to be set
1896 Sets JavaScript for the FDF document. @param js FDFJavaScript object containing script details
1897 Sets the catalog in the FDF document's trailer. @param cat FDFCatalog to be set as the root
1898 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object representing the appearance settings
1899 Sets the appearance reference for a field. @param ref FDFNamedPageReference to set as appearance reference
1900 Sets icon fit settings for the form field. @param fit FDFIconFit object defining how the icon should be scaled and positioned
1901 Sets an action associated with the field. @param a PDAction object representing the action to be set
1902 Sets additional actions for the field. @param aa PDAdditionalActions object containing actions to be set
1903 Sets mask fitting configuration. @param space PDRange defining the space allocation
1904 Sets file specification for a named page reference. @param fs file specification to be set
1905 Sets or updates the page's metadata. @param info FDFPageInfo object containing metadata details
1906 Sets the named page reference in the template. @param tRef FDFNamedPageReference object representing the page reference
1907 Sets the font file stream in the dictionary. @param type1Stream PDStream containing the font data
1908 Sets the TTF stream in the font descriptor. @param ttfStream the TrueType font stream to be set
1909 Sets the font file stream for the font descriptor. @param stream PDStream containing the font file data
1910 Sets CIDSet in font descriptor. @param stream PDStream containing CIDSet data
1911 Sets the white point for the color space. @param whitepoint PDTristimulus representing the new white point
1912 Sets the black point for the color space. @param blackpoint PDTristimulus representing the black point coordinates
1913 Sets the extended graphics state for masking. @param extendedGraphicsState the graphics state to apply
1914 Sets the shading resource and updates the dictionary. @param shadingResources PDShading object representing the shading pattern
1915 Sets the resources for masking. @param resources PDResources object containing mask resources
1916 Sets a new shading function. @param newFunction the new PDFunction to be set
1917 Sets font settings in the graphics state. @param fs PDFontSetting object containing font configuration
1918 Sets the destination for a GoToE action. Validates and processes the destination array. @param d PDDestination object representing the target destination
1919 Sets file specification for embedded action. @param fs file specification to be set
1920 Sets the target directory for an action. @param targetDirectory the destination to be set
1921 Sets the destination for a navigation action. Validates and updates the destination if it's a page dictionary. @param d PDDestination object to be set as the destination
1922 Sets file specification for an action. @param fs file specification to be set
1923 Sets file specification for launch action. @param fs PDFileSpecification object representing the file to be launched
1924 Sets Windows-specific launch parameters. @param win PDWindowsLaunchParams object containing window settings
1925 Sets the file specification for the remote goto action. @param fs the file specification to be set
1926 Sets file specification for form submission. @param fs file specification to be set
1927 Sets file specification for an action. @param fs PDFileSpecification object representing the file to be set
1928 Sets a mask action in the PDF document. @param action PDAction to be set as the mask action
1929 Sets an action for masking events. @param e PDAction representing the mask event action
1930 Sets a mask action for PDF annotations. @param x PDAction object representing the mask action
1931 Sets the mask action for the annotation. @param d the PDAction to be set as the mask action
1932 Sets the action to be performed on user click. @param u PDAction object representing the action
1933 Sets an action for mask interaction. @param fo PDAction representing the mask action
1934 Sets the mask action for the annotation. @param bl PDAction object representing the mask action
1935 Sets an action associated with a mask. @param po PDAction object representing the action to be set
1936 Sets an action for mask operations. @param pc PDAction object representing the mask operation
1937 Sets a mask action for the annotation. @param pv PDAction object representing the mask action
1938 Sets an action for mask interaction. @param pi PDAction object representing the mask action
1939 Sets a mask action in the PDF document catalog. @param wc PDAction object representing the mask action
1940 Sets a workspace action. @param ws PDAction representing the workspace action
1941 Sets the document-specific action for the PDF catalog. @param ds PDAction object representing the document-specific action
1942 Sets the WP action in the document catalog. @param wp PDAction object representing the action to be set
1943 Sets a mask action in the PDF catalog. @param dp PDAction object representing the mask action
1944 Sets the mask action for a form field. @param k PDAction object representing the mask action
1945 Sets an action for the 'F' key in the form field's actions dictionary. @param f PDAction to be set for the 'F' key
1946 Sets the mask action for the form field. @param v PDAction representing the mask action to be set
1947 Sets an additional action associated with a form field. @param c PDAction to be set
1948 Sets or updates the mask action for the PDF page. @param o PDAction to be set as the mask action
1949 Sets or updates the mask action for the PDF page. @param c PDAction object representing the mask action to be set
1950 Sets the target directory in the PDF dictionary. @param targetDirectory PDTargetDirectory object to be set
1951 Sets the named destination for the target directory. @param dest PDNamedDestination object or null to remove the entry
1952 Sets the appearance dictionary for this annotation. @param appearance PDAppearanceDictionary object representing the annotation's appearance
1953 Sets the optional content properties. @param oc PDPropertyList containing optional content settings
1954 Sets the annotation's P entry to the specified page. @param page PDPage object representing the target page
1955 Sets the file specification for the annotation. @param file PDFileSpecification object representing the attachment file
1956 Sets the border effect dictionary of the annotation. @param be the border effect dictionary to apply
1957 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the rectangle difference
1958 Sets an action for the annotation. @param action PDAction to be associated with the annotation
1959 Sets border style for the annotation. @param bs Border style dictionary to be applied
1960 Sets the destination for this link annotation. @param dest PDDestination object representing the target location
1961 Sets URI action for this annotation. @param pa PDActionURI object representing the URI action
1962 Sets the popup annotation for this markup. @param popup the PDAnnotationPopup to associate with this annotation
1963 Sets the "IRT" (In Reply To) annotation. @param irt the annotation this one is a reply to
1964 Sets external data dictionary. @param externalData the external data to associate with the annotation
1965 Sets border style of the annotation. @param bs BorderStyleDictionary object defining the border style
1966 Sets border effect dictionary. @param be border effect dictionary to apply
1967 Sets border effect dictionary for the annotation. @param be border effect dictionary to apply
1968 Sets the rectangle difference for the annotation. @param rd PDRectangle representing the new rectangle difference
1969 Sets the mask appearance characteristics. @param appearanceCharacteristics dictionary containing mask properties
1970 Sets the mask action for the annotation. @param action the PDAction to be set as the mask action
1971 Sets additional actions for the annotation. @param actions PDAnnotationAdditionalActions object containing actions to be set
1972 Sets the border style dictionary of the annotation. @param bs the border style dictionary to be set
1973 Sets the parent field for an annotation. @param field the terminal field to set as parent @throws IllegalArgumentException if field shares dictionary with its widget
1974 Sets the normal appearance of an annotation. @param entry PDAppearanceEntry representing the normal state appearance
1975 Sets the normal appearance stream. @param ap appearance stream to set
1976 Sets the rollover appearance entry. @param entry the PDAppearanceEntry to set as rollover appearance
1977 Sets the rollover appearance stream. @param ap the appearance stream for rollover state
1978 Sets the mask appearance entry. @param entry the appearance entry to set
1979 Sets the appearance stream for the masked state. @param ap the PDAppearanceStream object representing the appearance
1980 Sets the digital signature filter. @param filter PDPropBuildDataDict object containing filter details
1981 Sets publication security properties in the PDF. @param pubSec PDPropBuildDataDict containing security settings
1982 Sets application-specific data in the digital signature properties. @param app PDPropBuildDataDict containing application data
1983 Sets the digital signature certificate in the seed value. @param certificate PDSeedValueCertificate object to be set
1984 Sets property build in the signature dictionary. @param propBuild PDPropBuild object containing properties
1985 Sets the previous sibling for an outline item. @param outlineNode the node to set as the previous sibling
1986 Sets the next sibling for an outline node. @param outlineNode the PDOutlineNode to be linked as the next sibling
1987 Sets the destination for this outline item. @param dest PDDestination object representing the target location
1988 Sets an action for this outline item. @param action the action to be associated with the outline item
1989 Sets a mask for a PDF structure element. @param structureElement the PDStructureElement to be masked
1990 Sets the first child of an outline node. @param outlineNode the PDOutlineNode to be set as the first child
1991 Masks an outline node by setting it as the last item. @param outlineNode the PDOutlineNode to be masked
1992 Sets the resources dictionary for form fields. @param dr PDResources object containing form field resources
1993 Sets XFA resource in the form's dictionary. @param xfa the XFA resource to be set
1994 Sets the signature value for the field. @param value PDSignature object representing the digital signature @throws IOException if an I/O error occurs during processing
1995 Sets the default signature value. @param value PDSignature object representing the default signature
1996 Sets the seed value for the signature field. @param sv PDSeedValue object representing the seed value
1997 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
1998 Sets the mask for child annotation widgets. @param children list of PDAnnotationWidget objects to be masked
1999 Sets the bounding box for the viewport. @param rectangle PDRectangle representing the new bounding box
2000 Sets the measurement dictionary in the viewport. @param measure PDMeasureDictionary object containing measurement settings
2001 Sets document information to the thread. @param info PDDocumentInformation object containing document details
2002 Associates a thread with the current bead. @param thread the PDThread to be associated
2003 Sets the next bead in the thread. @param next PDThreadBead representing the subsequent bead
2004 Sets the previous bead in the thread. @param previous the preceding PDThreadBead object
2005 Associates a page with a thread bead. @param page the PDF page to associate
2006 Sets a mask rectangle for the bead. @param rect the bounding box defining the mask area
2007 Sets the marked status of the PDF element. @param value boolean indicating if the element is marked
2008 Sets the UserProperties flag in the dictionary. @param userProps boolean indicating whether to enable user properties
2009 Updates the suspect flag in the PDF marking information. @param suspect new suspect status to set
2010 Sets whether the action is a map. @param value true if the action is a map, false otherwise
2011 Sets the popup visibility state. @param open true to open the popup, false to close it
2012 Sets the FD mask in the number format dictionary. @param fd boolean value to set the FD mask
2013 Sets the volatile status of the file. @param fileIsVolatile indicates if the file is volatile
2014 Sets metadata encryption status. @param encryptMetaData flag to enable or disable metadata encryption
2015 Sets the line end style to be capped or not. @param cap true if the line ends are capped, false otherwise
2016 Sets mask fitting option. @param value boolean indicating whether to apply mask
2017 Sets renaming flag in FDF template. @param value boolean indicating whether renaming is enabled
2018 Sets the anti-aliasing property in the shading dictionary. @param antiAlias flag to enable or disable anti-aliasing
2019 Sets the overprint mode. @param op boolean indicating whether to enable or disable overprint
2020 Sets the overprint mode in the graphics state. @param op boolean value to enable or disable overprint
2021 Sets the soft mask attribute in the graphics state. @param sa soft mask value (true or false)
2022 Sets the Alpha Source flag. @param alpha true to enable alpha source, false otherwise
2023 Sets the mask flag in the graphics state. @param tk boolean value indicating the mask setting
2024 Sets the window behavior for opening linked content. @param value specifies how to open the destination (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2025 Sets the window behavior for launching external content. @param value OpenMode specifying how to open the content
2026 Sets the window behavior for remote navigation. @param value OpenMode specifying how to open the linked content
2027 Sets whether the sound action is synchronous. @param synchronous true if the sound should play synchronously
2028 Sets whether the sound should repeat. @param repeat true to enable repetition, false otherwise
2029 Sets whether sound should be mixed with other audio. @param mix true to mix sounds, false otherwise
2030 Sets the line end style to be rounded or squared. @param cap true for rounded ends, false for squared ends
2031 Sets the visibility of the text annotation. @param open flag indicating if the annotation is visible
2032 Sets the pre-release flag in the digital signature properties. @param preRelease boolean indicating if it's a pre-release version
2033 Sets whether to suppress warnings for non-embedded fonts. @param noEmbedFontWarning flag to disable embedding font warning
2034 Sets the trusted mode flag in the digital signature properties. @param trustedMode boolean indicating if the document is in trusted mode
2035 Sets the NEED_APPEARANCES flag in the dictionary. @param value boolean indicating whether appearances are needed
2036 Toggles toolbar visibility. @param value true to hide toolbar, false to show
2037 Toggles menu bar visibility in PDF viewer preferences. @param value true to hide the menu bar, false to show it
2038 Toggles window UI visibility. @param value true to hide, false to show
2039 Sets whether to fit PDF window to page. @param value true to fit window, false otherwise
2040 Sets center window preference. @param value true to center window on opening
2041 Sets whether to display the document title in the viewer. @param value true to display, false otherwise
2042 Parses appearance XML to create a COSDictionary. @param appearanceXML XML element defining the appearance @return COSDictionary with parsed data or empty if not applicable @throws IOException if I/O operations fail
2043 Sets a mask in the dictionary using a string key and value. @param key the key to set in the dictionary @param value the string value to convert to COSName and set as mask
2044 Sets the page mode of the PDF document. @param mode desired PageMode to apply
2045 Sets the page layout of the PDF document. @param layout desired page layout configuration
2046 Sets the PDF version in the catalog. @param version the version string to set
2047 Sets the trapped status of the PDF document. @param value the trapped status ("True", "False", or "Unknown")
2048 Sets or removes page label style. @param style the new style to apply or null to remove it
2049 Initializes a new PDTypedDictionaryWrapper with a specified type. @param type the type name for the PDF object
2050 Sets mask for attribute owner. @param owner the owner of the attribute
2051 Initializes a new PDMarkedContentReference with a COSDictionary. Sets the dictionary type to "MarkedContent".
2052 Initializes a new PDF object reference. Constructs a COSDictionary and sets its type to "ObjRef".
2053 Sets a mask for a given structure type. @param structureType the type of structure to set in the dictionary
2054 Sets a mask for class names with revision numbers. @param classNames collection of class names and their revisions
2055 Initializes a PDStructureNode with a specified type. @param type the type of structure node to create
2056 Sets the guideline style in the PDF document. @param style the style to be applied
2057 Sets the encryption subfilter. @param subfilter the encryption subfilter to set
2058 Sets the annotation's intent. @param intent purpose of the annotation (e.g., "Widget")
2059 Sets the mask for the annotation's style. @param style the style string to be set
2060 Sets the mask for the annotation's icon. @param icon the icon name to set as mask
2061 Sets the document version in the FDF catalog. @param version the version string to set
2062 Sets the encoding mask in the FDF document. @param encoding the encoding type to set
2063 Sets mask option for icon fitting. @param option mask configuration string
2064 Sets the scaling mask for an icon. @param scale scaling option as string
2065 Initializes a new PDF pattern with a type of "Pattern". Sets up the internal dictionary for managing pattern properties.
2066 Sets the action type in the COSDictionary. @param type the action type to set
2067 Sets a mask for the "S" key in the action dictionary. @param s the string value to set as mask
2068 Sets the subtype mask for an annotation. @param subType the subtype to set in the dictionary
2069 Sets the annotation appearance state. @param as appearance state string
2070 Sets mask for annotation using given name. @param name string value to set as mask
2071 Sets the line ending style for the annotation. @param style the line ending style to apply
2072 Sets the caption positioning for the line annotation. @param captionPositioning string indicating the position of the caption
2073 Sets link annotation mask with specified mode. @param mode the mask mode to apply
2074 Sets the 'RT' mask for the annotation with the given string value. @param rt the string value to set as the 'RT' mask
2075 Sets an item mask with the given string. @param it the string value for the mask item
2076 Sets the name for a rubber stamp annotation. @param name the name to assign to the annotation
2077 Sets a mask for a given key with string value in the annotation. @param name the string value to be used as the mask
2078 Sets the highlight mode for the annotation. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T' @throws IllegalArgumentException if invalid mode is provided
2079 Sets a mask for border style using provided string. @param s the string value to set as mask
2080 Initializes an external data dictionary. Sets up a COSDictionary with type "ExData".
2081 Sets the subtype mask in the external data dictionary. @param subtype the subtype value to set
2082 Sets the digital signature name. @param name the name to set in the dictionary
2083 Sets URL type mask in the PDF certificate. @param urlType the URL type to set as mask
2084 Initializes a new PDDocumentOutline with type set to "Outlines".
2085 Initializes a new PDDocumentOutline from an existing COSDictionary. Sets the outline type in the dictionary. @param dic the PDF dictionary representing the outline structure
2086 Initializes a new measurement dictionary. Sets up the initial COSDictionary and type attribute.
2087 Sets the subtype mask in the measurement dictionary. @param subtype the subtype to set as mask
2088 Initializes a new PDNumberFormatDictionary with default settings. Sets up the initial COSDictionary for managing numerical formatting in PDFs.
2089 Sets the viewport name. @param name the name to set for the viewport
2090 Initializes a PDTransition with a specified style. @param style transition effect style
2091 Sets mask for transition dimension. @param dimension PDTransitionDimension object specifying the transition properties
2092 Sets transition mask based on motion. @param motion PDTransitionMotion object defining the motion
2093 Sets the non-full screen page mode preference. @param value the new page mode setting
2094 Sets the reading direction preference. @param value the desired reading direction
2095 Sets the view area preference. @param value boundary setting to apply
2096 Sets view clipping preference. @param value boundary setting for view clipping
2097 Sets print area mask to specified boundary. @param value BOUNDARY object defining the mask region
2098 Sets print clipping preference. @param value boundary value to set for print clipping
2099 Sets duplex printing preference. @param value duplex setting to apply
2100 Sets print scaling preference. @param value the print scaling option to apply
2101 Sets a date value in the dictionary under a specified key. @param key the COSName key for the date @param date the Calendar instance to be converted and set
2102 Sets a string value in the dictionary under a specified key. @param key the name string for the key @param value the string value to be set
2103 Sets the document's language attribute. @param language the ISO 639-1 code for the language
2104 Sets the document's title metadata. @param title the new title for the PDF document
2105 Sets the author of the PDF document. @param author the name of the document's author
2106 Sets the subject of the PDF document. @param subject the subject string to be set
2107 Sets the document's keywords. @param keywords comma-separated list of keywords
2108 Sets the document's creator metadata. @param creator name of the document creator
2109 Sets the producer of the PDF document. @param producer the name of the producer application
2110 Sets or removes the page label prefix. @param prefix the prefix to set; if null, removes the prefix
2111 Sets the file name in the PDF specification. @param file the file name to be set
2112 Sets the mask file name in the PDF specification. @param file the file name to be set as the mask
2113 Sets the description of the file specification. @param description the new description to set
2114 Sets an ID for the structure element. @param id unique identifier for the element
2115 Sets the title of the structure element. @param title the new title to be set
2116 Sets the language attribute of the PDF element. @param language the language code to be set
2117 Sets an alternative description for the element. @param alternateDescription the alternative text description
2118 Sets the expanded form of an element. @param expandedForm the string representation to set
2119 Sets the actual text for an element. @param actualText the string to be set as actual text
2120 Sets the mask date of the annotation. @param date the mask date to be set
2121 Sets the annotation's name. @param name unique identifier for the annotation
2122 Sets the annotation's content text. @param contents the text to be set as annotation content
2123 Sets the title of the annotation. @param title the title string to be set
2124 Sets the annotation's subject. @param subject the subject string to be set
2125 Sets the annotation symbol based on input. @param symbol the input symbol string
2126 Sets the appearance string of the annotation. @param appearance the new appearance string
2127 Sets the annotation's mask style. @param style the style to be applied as a mask
2128 Sets the caption style for the annotation. @param captionStyle the style string to be applied to the caption
2129 Sets the annotation's state. @param state the new state value to be set
2130 Sets the state model of the annotation. @param stateModel the state model to be set
2131 Sets the document status in the FDF dictionary. @param status the new status to be set
2132 Sets the target string for the FDF document. @param target the target value to be set in the dictionary
2133 Sets the field mask to a specified partial value. @param partial the partial string value to set as the field mask
2134 Sets the mask name in the reference. @param name the mask name to be set
2135 Sets the mask name for the optional content group. @param name the mask name to be set
2136 Initializes a new PDOptionalContentProperties object. Sets up the dictionary with OCGs and default properties.
2137 Sets JavaScript action in PDF. @param sAction JavaScript code string to be set
2138 Sets the file specification for the launch action. @param f file path or name to be launched
2139 Sets the document mask for the launch action. @param d the document mask string to be set
2140 Sets the mask value for the PDF action. @param o the mask string to be set
2141 Sets the mask parameter for the PDF launch action. @param p the mask value to be set
2142 Sets the URI for the PDF action. @param uri the URL to be set as the action's URI
2143 Sets the target directory's filename. @param filename name of the file to be set
2144 Sets a mask attribute in the dictionary. @param name the value to be set as the mask attribute
2145 Sets the filename parameter for file operations. @param file the path to the file
2146 Sets the directory parameter in launch parameters. @param dir the directory path to be set
2147 Sets operation type in launch parameters. @param op the operation type as a string
2148 Sets a parameter related to file operations in a PDF context. @param param value to be set under key COSName.P
2149 Sets the contents of the annotation to the specified value. @param value the string content to be set
2150 Sets mask value for annotation. @param m mask string to be set
2151 Sets the name of the annotation. @param nm unique identifier for the annotation
2152 Sets the default appearance string for the annotation. @param daValue the default appearance string value
2153 Sets the default style string for free text annotation. @param defaultStyleString the style string to be applied
2154 Sets the title of the annotation. @param t the title string to be set
2155 Sets the subject of the annotation. @param subj the subject string to be set
2156 Sets the annotation's state. @param state the new state value for the annotation
2157 Sets the state model for the annotation. @param stateModel the state model to be set
2158 Sets the annotation's caption text. @param caption the text to be displayed as the annotation's caption
2159 Sets the caption for the annotation mask. @param caption text to be displayed as the mask caption
2160 Sets the caption text for an annotation. @param caption the text to be displayed as the annotation caption
2161 Sets the digital signature date. @param date the date string to be set
2162 Sets the URL attribute in the certificate dictionary. @param url the URL string to be set
2163 Sets the URL in the dictionary. @param url the URL to be stored
2164 Sets the mask value in the signature dictionary. @param name the mask value to be set
2165 Sets the signature location. @param location the location of the signature
2166 Sets the signature reason in the digital signature dictionary. @param reason the reason for the signature action
2167 Sets contact information in the PDF signature. @param contactInfo the contact information string to be set
2168 Sets the title of the outline item. @param title the title string to be set
2169 Sets the default appearance string for form fields. @param daValue the string representing the default appearance
2170 Sets the default value for the choice field. @param value the default value to be set
2171 Sets the field's name, ensuring it doesn't contain a period. @param name the field name to set
2172 Sets the alternate field name in the PDF form. @param alternateFieldName the alternative name for the field
2173 Sets the field's mask name. @param mappingName the name of the mask to be set
2174 Sets the mask value for the field. @param value the mask string to be applied
2175 Masks the text field with the given value. @param value the string to mask the field with @throws IOException if an I/O error occurs
2176 Sets the default value of the text field. @param value the default string value to be set
2177 Sets default appearance for text fields. @param daValue the default appearance string value
2178 Sets the scale ratio in the measurement dictionary. @param scaleRatio the scaling factor as a string
2179 Sets an integer value in the COSDictionary using a string key. @param key the name string to process @param value the integer value to set
2180 Sets the structure parent index for the PDF page. @param structParents index of the structure parent
2181 Sets the rotation of the PDF page. @param rotation degrees to rotate the page (0, 90, 180, or 270)
2182 Sets the starting page number for the label range. @param start positive integer representing the first page number
2183 Sets bits per sample for the function. @param bps number of bits per sample value to set
2184 Sets the Marker Context Identifier (MCID) for the marked content reference. @param mcid the MCID value to set
2185 Sets the revision number for the PDF structure element. @param revisionNumber non-negative integer representing the revision @throws IllegalArgumentException if revision number is negative
2186 Sets the next key in the parent tree. @param parentTreeNextkey the integer value for the next key
2187 Sets the mask length in the cryptographic filter. @param length the length of the mask to be set
2188 Sets the encryption version in the PDF document. @param version the encryption version to set
2189 Sets the encryption length. @param length the encryption key length in bits
2190 Sets the PDF encryption revision. @param revision the encryption revision level to set
2191 Sets document permissions mask. @param permissions bitmask representing user permissions
2192 Sets the annotation's page number. @param page the page index to associate with the annotation
2193 Sets the justification for the free text annotation. @param justification alignment type ("centered", "right")
2194 Sets the rotation angle of the annotation. @param rotation degrees to rotate the annotation
2195 Sets mask flags for the form field. @param ff integer representing mask flags
2196 Sets the field flags. @param ff integer value representing the field flags
2197 Sets the field flags for this FDFField. @param ff integer representing field flag values to set
2198 Sets mask flag for the field. @param f integer value representing the mask flag
2199 Sets the mask flags for the field. @param ff integer value representing the mask flags
2200 Sets mask flags for the field. @param ff integer value representing mask flags
2201 Sets font mask flags. @param flags bitmask representing font attributes
2202 Sets up font metrics and widths for embedding. @param font PDFBox dictionary to store font data @param glyphList mapping of glyph names to Unicode strings @throws IOException if an I/O error occurs
2203 Sets the paint type for the pattern. @param paintType the type of painting operation to use
2204 Sets the pattern type in the dictionary. @param patternType the type of pattern to set
2205 Sets the paint type for the tiling pattern. @param paintType the type of painting operation to be used
2206 Sets the tiling type for the pattern. @param tilingType the type of tiling to be applied
2207 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
2208 Sets bits per flag for shading. @param bitsPerFlag number of bits used for flags
2209 Sets the number of vertices per row in the shading model. @param verticesPerRow the number of vertices to set for each row
2210 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
2211 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
2212 Sets line cap style in graphics state. @param style integer representing line cap style
2213 Sets line join style in graphics state. @param style line join style to apply
2214 Sets the overprint mode in the graphics state. @param overprintMode the overprint mode to set or null to remove it
2215 Sets action flags. @param flags bitmask representing action options
2216 Sets action flags for form submission. @param flags bitmask representing various action options
2217 Sets or removes the page number in the dictionary. @param pageNumber the page number to set; if negative, removes the key instead
2218 Sets or removes mask value based on index. @param index the index to set; if negative, removes mask
2219 Sets mask flags for annotation. @param flags bitmask defining visibility and interaction settings
2220 Sets the structure parent index of the annotation. @param structParent the structure parent index to set
2221 Sets the quadding mode for text annotation. @param q the quadding mode (0 - left, 1 - center, 2 - right)
2222 Sets the rotation of the annotation. @param rotation degrees to rotate the annotation
2223 Sets the mask value for digital signature configuration. @param p mask value (0-3) @throws IllegalArgumentException if value is outside valid range
2224 Sets the mask flag in the dictionary. @param flag true to enable mask, false to disable
2225 Updates the count of open outline items. @param openCount number of open items to set
2226 Sets the mask value for form field appearance. @param q the mask integer value to set
2227 Sets field mask flags. @param flags integer representing mask values
2228 Sets or removes the top index for displayed items in the list box. @param topIndex the new top index value or null to remove it
2229 Sets the maximum length of the text field. @param maxLen the maximum number of characters allowed
2230 Sets the Q attribute of the text field. @param q the value to set for the Q attribute
2231 Sets a long value in the COSDictionary using a string key. @param key the string key to be set @param value the long integer value to associate with the key
2232 Sets the revision number of the digital signature. @param revision the revision level to set
2233 Sets the mask revision in the digital signature properties. @param revision the mask revision value to set
2234 Sets a float value in the dictionary using a string key. @param key the name string to process @param value the float value to be set
2235 Sets the user unit for the PDF page. @param userUnit positive float representing the user unit scale @throws IllegalArgumentException if userUnit is not positive
2236 Sets the guideline width in the PDF style configuration. @param width the width of the guideline
2237 Sets the annotation's opacity. @param opacity the opacity value to be set (0.0 - fully transparent, 1.0 - fully opaque)
2238 Sets the leader line length of the annotation. @param leaderLength the length of the leader line
2239 Sets the leader line extension for the annotation. @param leaderExtend float value representing the leader line extension
2240 Sets the leader line offset for the annotation. @param leaderOffset the offset value for the leader line
2241 Sets the font weight in the PDF descriptor. @param fontWeight numeric value representing the font weight
2242 Sets the italic angle of the font. @param angle the italic angle value to be set
2243 Sets the font's ascent value. @param ascent the ascent measurement to be set
2244 Sets the font descent value. @param descent the font descent metric
2245 Sets the leading (line spacing) for the font. @param leading the line spacing value to be set
2246 Sets the font's cap height. @param capHeight the cap height value to be set
2247 Sets the X-height of the font. @param xHeight the height of lowercase letters in the font
2248 Sets the vertical stem width of the font. @param stemV the vertical stem width value
2249 Sets the stem height of the font. @param stemH the height of the stem in PDF units
2250 Sets the average width of the font. @param averageWidth the average width value to be set
2251 Sets the maximum width of the font. @param maxWidth the maximum width value to be set in the dictionary
2252 Sets the missing width in the font descriptor. @param missingWidth the width to be set for missing glyphs
2253 Sets the X step for tiling pattern. @param xStep horizontal spacing between pattern tiles
2254 Sets the Y step value for tiling pattern. @param yStep vertical spacing between pattern tiles
2255 Sets the sound volume. @param volume sound level from -1.0 (min) to 1.0 (max)
2256 Sets the leader line length of the annotation. @param leaderLineLength the desired length of the leader line
2257 Sets the leader line extension length of the annotation. @param leaderLineExtensionLength the length of the leader line extension
2258 Sets the leader line offset length for the annotation. @param leaderLineOffsetLength the length of the leader line offset
2259 Sets the constant alpha (CA) value. @param ca float representing the constant alpha value to be set
2260 Sets the border width for PDF annotations. @param w the desired width of the border
2261 Sets the minimum required capability in the dictionary. @param minimumRequiredCapability the minimum capability value to be set
2262 Sets CYX coordinate value in measurement dictionary. @param cyx the CYX coordinate value to be set
2263 Parses and creates a COSStream from a dictionary. Handles missing length and lenient parsing mode. @param dic the COSDictionary containing stream data @return newly created COSStream object @throws IOException if an I/O error occurs during parsing
2264 Parses PDF content stream into a list of objects. @return List containing parsed objects from the stream or null if end reached @throws IOException if an I/O error occurs during parsing
2265 Parses and returns the bounding box rectangle for a Type 3 font character. @return PDRectangle object representing the bounding box or null if not found @throws IOException if an I/O error occurs during parsing
2266 Parses and processes PDF operators to extract float values. @return extracted float value from valid operator @throws IOException if parsing fails or unexpected end of stream
2267 Constructs a new PDF document with an in-memory stream cache.
2268 Creates a PDFileSpecification from a COSBase object. @param base the COSBase object to convert @return PDFileSpecification instance or throws IOException if unsupported type
2269 Constructs a new FDFAnnotationCaret. Initializes the annotation with subtype "Caret".
2270 Constructs a new circular annotation. Initializes the base dictionary with type "Annot".
2271 Initializes a new file attachment annotation. Sets the subtype to "FileAttachment".
2272 Initializes a new free text annotation. Sets the subtype to "FreeText".
2273 Initializes a new ink annotation. Sets the subtype to "INK".
2274 Initializes a new line annotation. Sets the subtype to "Line" in the annotation dictionary.
2275 Initializes a new hyperlink annotation. Sets the subtype to "Link".
2276 Constructs a new polygon annotation. Initializes the base FDF annotation and sets its subtype to "Poly".
2277 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
2278 Constructs an empty sound annotation. Initializes base dictionary with subtype "Sound".
2279 Constructs a new square annotation. Initializes base dictionary with type "Annot".
2280 Initializes a new stamp annotation. Sets the subtype to "Stamp".
2281 Initializes a new text annotation. Sets the subtype to "Text".
2282 Protected constructor for FDFAnnotationTextMarkup. Initializes a new annotation with base settings.
2283 Sets vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
2284 Embeds Type 2 CID font metrics into PDF. @param cidFont the CID font dictionary to update @throws IOException if an I/O error occurs
2285 Constructs a new instance of PDSimpleFont. Initializes default state and resources for managing simple fonts.
2286 Sets decode values and updates shading properties. @param decodeValues array of decode values for shading
2287 Sets decode values and updates shading properties. @param decodeValues array of decode values to be set
2288 Sets line width in graphics state. @param width new line width value
2289 Sets the miter limit in the graphics state. @param miterLimit the new miter limit value to apply
2290 Sets the mask property in graphics state. @param flatness value to set for mask property; null to remove it
2291 Sets mask smoothness in graphics state. @param smoothness value to set for mask smoothness
2292 Sets the alpha value for mask property. @param alpha the transparency level to set
2293 Sets the non-stroking alpha constant. @param alpha the alpha value to set; null to remove the key
2294 Initializes a new link annotation. Sets the subtype to "Link".
2295 Constructs a new markup annotation for PDF documents.
2296 Initializes a new PDF popup annotation. Sets the subtype to "Popup".
2297 Initializes a new PDF annotation widget. Sets the subtype to "Widget".
2298 Sets uniform rectangle margin differences for caret annotation. @param difference margin difference for all sides
2299 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
2300 Sets equal rectangle differences for all sides. @param difference uniform margin difference for all sides
2301 Constructs a new PDCheckBox instance. @param acroForm the AcroForm containing this checkbox
2302 Initializes a new PDComboBox instance. @param acroForm the AcroForm containing this combo box field
2303 Initializes a new PDListBox instance. @param acroForm the AcroForm containing this list box field
2304 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
2305 Initializes a PDLineDashPattern with a dash array and phase. Adjusts negative phases according to PDF specification. @param array COSArray representing dash lengths @param phase initial phase of the dash pattern
2306 Generates a string representation of the PDRange. @return formatted string with range bounds
2307 Evaluates input values through a series of PDF function operations. @param input array of input values to process @return processed output values as an array of floats @throws IOException if an I/O error occurs during processing
2308 Updates the PDF stream with specified range values. @param range PDRange object containing min and max values @param n index to update in the range array
2309 Reads and processes patch data for mesh-based shading. @param input stream to read from @param isFree indicates if the patch is free-form @param implicitEdge predefined edge points @param implicitCornerColor predefined corner colors @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range @param rangeY Y-axis range @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points @return Patch object or null if EOF encountered
2310 Reads and processes vertex data from an image stream. @param input ImageInputStream to read data from @param maxSrcCoord Maximum source coordinate value @param maxSrcColor Maximum source color value @param rangeX X-axis range for scaling coordinates @param rangeY Y-axis range for scaling coordinates @param colRangeTab Array of PDRange for each color component @param matrix Transformation matrix for initial vertex transformation @param xform Additional affine transform to apply @return Vertex object with position and color components @throws IOException if reading fails or invalid parameters are provided
2311 Retrieves the first color value from the PDF document. @return PDGamma object representing the first color or null if not applicable
2312 Retrieves the second color value from the PDF document. @return PDGamma object representing the second color or null if not applicable
2313 Retrieves and initializes the third color value from the PDF document. @return PDGamma object representing the third color or null if not applicable
2314 Retrieves the fourth color value as a PDGamma object. @return PDGamma representing the fourth color or null if not applicable
2315 Retrieves the blend mode from the graphics state dictionary. @return the blend mode or NORMAL if not found
2316 Retrieves destination from embedded file. @return PDDestination object or throws IOException if retrieval fails
2317 Retrieves destination from action. @return PDDestination object or null if not found @throws IOException if conversion fails
2318 Retrieves and converts the destination associated with the link annotation. @return PDDestination object or null if not found @throws IOException if conversion fails
2319 Retrieves and converts the destination of this outline item. @return PDDestination object or null if not found
2320 Creates a Matrix from a COSBase object. @param base input COSBase object @return new Matrix or default if conditions not met
2321 Traverses and retrieves a nested object in a PDF document. @param objPath path to the desired object using a specific syntax @return COSBase object at the specified path or null if not found
2322 Retrieves a named destination from the PDF document. @param name the name of the destination @return PDDestination object or null if not found
2323 Retrieves the value of a specified attribute from the underlying dictionary. @param attrName name of the attribute to fetch @return COSBase object representing the attribute's value or null if not found
2324 Retrieves attribute value by name with default handling. @param attrName attribute name to fetch @param defaultValue default value to return if attribute is absent @return COSBase object or provided default value if not found
2325 Checks if a named attribute exists in the dictionary. @param name attribute key to check @return true if attribute exists, false otherwise
2326 Retrieves and converts a COSArray of names to a string array. @param name key for the COSDictionary entry @return array of strings representing COSNames or null if not found
2327 Sets a masked attribute with multiple string values. @param name attribute key @param values array of string values to set
2328 Retrieves a named attribute, returning its value or default. @param name key of the attribute to fetch @param defaultValue value to return if attribute is not found @return String array or single string value, or default if missing
2329 Sets a mask attribute with multiple values. @param name attribute key @param values array of string values to set
2330 Retrieves and processes a named attribute from the COSDictionary. @param name key of the attribute to retrieve @param defaultValue default value if attribute is not found or not processable @return processed attribute value or default
2331 Retrieves a float value or array of floats by name. @param name attribute name to fetch @param defaultValue default value if not found @return float or float[] if found, otherwise null or default value
2332 Sets a mask attribute with float values. @param name the attribute name @param values array of float values for the mask
2333 Retrieves and constructs a PDGamma object from the dictionary. @param name key for the COSArray in the dictionary @return PDGamma object or null if not found
2334 Retrieves and processes a COSArray based on the specified name. @param name key to fetch the COSArray @return PDGamma or PDFourColours object, or null if conditions are not met
2335 Retrieves a COSDictionary by primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @return COSDictionary object or null if both keys are missing
2336 Determines boolean value by key. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @param defaultValue default boolean value if keys are missing @return boolean value from dictionary or default if not found
2337 Retrieves integer value by keys or returns default. @param firstKey primary key to search @param secondKey secondary key if primary is not found @param defaultValue value to return if no valid number found @return integer value from dictionary or default
2338 Retrieves filter names for the inline image. @return List of filter names or empty list if none found
2339 Retrieves the color space associated with the shading. @return PDColorSpace instance or throws IOException if creation fails
2340 Checks if dictionary represents a catalog or FDF. @param dictionary PDF dictionary to check @return true if dictionary type is catalog or FDF, false otherwise
2341 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree @param document the PDDocument associated with this page tree Throws IllegalArgumentException if root is null.
2342 Checks if a node represents a page tree or contains child nodes. @param node the COSDictionary to check @return true if node is valid and represents a page tree or has children; false otherwise
2343 Retrieves the cryptographic filter mask. @return COSName representing the filter mask or null if not found
2344 Retrieves or defaults the stream filter name. @return COSName representing the stream filter, defaulting to IDENTITY if null
2345 Retrieves or defaults the encryption filter function. @return COSName representing the filter function, defaulting to IDENTITY if not set
2346 Converts character code to Unicode string. @param code character code to convert @return Unicode string or null if conversion fails
2347 Creates a PDXObject based on the given COSBase and resources. @param base the underlying COSBase object @param resources PDResources for managing graphic resources @return a PDXObject instance or null if base is null @throws IOException if unexpected object type or invalid subtype
2348 Retrieves or initializes the subtype of the soft mask. @return COSName representing the subtype, defaulting to 'S' if not set
2349 Retrieves the mask value from the dictionary. @return COSName object representing the mask or null if not found
2350 Retrieves the mask value for the annotation. @return COSName representing the mask setting or null if not found
2351 Sets a string value in a nested dictionary under specified keys. @param embedded the outer key for the dictionary @param key the inner key for the value @param value the string value to be set
2352 Sets an integer value in the specified embedded dictionary. @param embeddedDictionary key for the embedded dictionary @param key the key to set the integer value under @param value the integer value to set
2353 Checks if the PDF document is encrypted. @return true if encryption dictionary exists in the trailer, false otherwise
2354 Retrieves encryption settings from the document's trailer. @return COSDictionary containing encryption details or null if not present
2355 Parses the FDF document trailer to retrieve the root dictionary. Throws an exception if the root is missing. Sets a flag indicating initial parsing completion.
2356 Parses PDF trailer and initializes document structure. @throws IOException if root object is missing or parsing fails
2357 Retrieves or creates the document information dictionary. @return PDDocumentInformation object containing metadata
2358 Initializes and returns the PDF document catalog. @return PDDocumentCatalog object representing the document's catalog
2359 Applies form fixup and retrieves the PDF document's AcroForm. @param acroFormFixup instance containing form fixup logic @return PDAcroForm object or null if not found
2360 Retrieves and returns viewer preferences for the PDF document. @return PDViewerPreferences object or null if not found
2361 Retrieves or creates the additional actions dictionary. @return PDDocumentCatalogAdditionalActions object representing the actions
2362 Retrieves and initializes the document name dictionary. @return PDDocumentNameDictionary object or null if not found
2363 Retrieves named destinations from the document catalog. @return PDDocumentNameDestinationDictionary object or null if not found
2364 Retrieves and returns the document's mark info. @return PDMarkInfo object or null if not present
2365 Retrieves and returns a PDURIDictionary from the document's catalog. @return PDURIDictionary object or null if not found
2366 Retrieves and returns the structure tree root of the PDF document. @return PDStructureTreeRoot object or null if not found
2367 Retrieves optional content properties from the document catalog. @return PDOptionalContentProperties object or null if not found
2368 Initializes the PDDocumentNameDictionary from a given document catalog. @param cat PDF document catalog
2369 Retrieves or creates a destination name tree node for the document. @return PDDestinationNameTreeNode object or null if not found
2370 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode object or null if not found
2371 Retrieves and returns a PDJavascriptNameTreeNode for JavaScript elements. @return PDJavascriptNameTreeNode object or null if not found
2372 Retrieves or creates the additional actions dictionary for the page. @return PDPageAdditionalActions object representing the page's additional actions
2373 Retrieves the transition effect of the page. @return PDTransition object or null if no transition is defined
2374 Retrieves a COSObject from the resources dictionary. @param kind type of resource dictionary to access @param name key for the specific resource within the dictionary @return COSObject if found, otherwise null
2375 Retrieves a resource object from the PDF dictionary. @param kind type of resource (e.g., font, color space) @param name specific resource identifier @return COSBase object representing the resource or null if not found
2376 Retrieves resource keys of a specific type. @param kind the type of resource to retrieve @return Iterable of COSName keys or empty set if not found
2377 Generates a unique COSName for a resource. @param kind type of resource @param prefix base string for the name @return unique COSName
2378 Adds or updates a resource in the PDF document. @param kind type of resource (e.g., font, image) @param name unique identifier for the resource @param object resource object to be added or updated
2379 Retrieves the page associated with this marked content reference. @return PDPage object or null if no associated page is found
2380 Retrieves and returns the associated PDPage. @return PDPage object or null if not found
2381 Retrieves and returns a PDPage object associated with the 'PG' key. @return PDPage object or null if not found
2382 Retrieves and constructs the ID tree node for structure elements. @return PDNameTreeNode of PDStructureElement or null if not found
2383 Retrieves and initializes the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not found
2384 Retrieves and maps class attributes from the PDF structure. @return Map of class names to their corresponding attribute objects or lists
2385 Retrieves and initializes a PDCryptFilterDictionary for a given crypt filter name. @param cryptFilterName the name of the crypt filter @return PDCryptFilterDictionary object or null if not found
2386 Configures a cryptographic filter for PDF encryption. @param cryptFilterName the name of the cryptographic filter @param cryptFilterDictionary the dictionary containing filter settings
2387 Retrieves border style dictionary of an annotation. @return PDBorderStyleDictionary object or null if not found
2388 Retrieves and initializes border effect dictionary from annotation. @return PDBorderEffectDictionary or null if not found
2389 Retrieves and returns the digital signature from the FDF catalog. @return PDSignature object or null if no signature is found
2390 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if not found
2391 Retrieves the appearance dictionary of the field. @return PDAppearanceDictionary object or null if not found
2392 Retrieves and returns an FDF named page reference. @return FDFNamedPageReference object or null if not found
2393 Retrieves and returns the icon fit settings of the field. @return FDFIconFit object or null if not found
2394 Retrieves additional actions associated with the form field. @return PDAdditionalActions object or null if not found
2395 Retrieves and returns an FDFPageInfo object containing the page's info dictionary. @return FDFPageInfo object or null if no info dictionary is found
2396 Retrieves and returns an FDF named page reference from the template. @return FDFNamedPageReference object or null if not found
2397 Retrieves and initializes CID system info from font dictionary. @return PDCIDSystemInfo object or null if not found
2398 Retrieves and returns a PDPanose object from the font descriptor. @return PDPanose object or null if not found or invalid data
2399 Retrieves or creates font resources. @return PDResources object representing font resources
2400 Retrieves or initializes character procedures dictionary. @return COSDictionary containing character procedures
2401 Retrieves and initializes separation attributes for a DeviceN color space. @param resources PDF resources for resource management @return Map of separation names to PDSeparation objects @throws IOException if an error occurs during retrieval or initialization
2402 Retrieves and initializes the DeviceN process attributes. @return PDDeviceNProcess object or null if not found
2403 Determines the rendering state for a given destination. @param destination the target rendering destination (PRINT or VIEW) @return RenderState object representing the current state, or null if not found
2404 Retrieves or creates the extended graphics state for the shading pattern. @return PDExtendedGraphicsState object representing the graphics state
2405 Retrieves and initializes mask resources. @return PDResources object or null if no resources found
2406 Retrieves and constructs a PDTargetDirectory from the PDF. @return PDTargetDirectory object or null if not found
2407 Retrieves and initializes Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not found
2408 Retrieves and constructs a PDTargetDirectory from the 'T' key. @return PDTargetDirectory object or null if not found
2409 Retrieves the appearance dictionary of the annotation. @return PDAppearanceDictionary object or null if not found
2410 Retrieves and initializes a PDPage from the annotation's dictionary. @return PDPage object or null if not found
2411 Retrieves and returns the border effect dictionary of the annotation. @return PDBorderEffectDictionary object or null if not found
2412 Retrieves and initializes border style dictionary. @return PDBorderStyleDictionary object or null if not found
2413 Retrieves and constructs a PDActionURI from the PDF document. @return PDActionURI object or null if not found
2414 Retrieves and constructs external data dictionary for annotation. @return PDExternalDataDictionary object or null if not found
2415 Retrieves and returns the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2416 Retrieves and initializes a border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2417 Retrieves and initializes the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
2418 Retrieves appearance characteristics of the annotation. @return PDAppearanceCharacteristicsDictionary object or null if not found
2419 Retrieves additional actions associated with the annotation. @return PDAnnotationAdditionalActions object or null if not found
2420 Retrieves and returns the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
2421 Retrieves normal appearance entry. @return PDAppearanceEntry for normal state or null if not found
2422 Retrieves and constructs a PDPropBuildDataDict for the FILTER property. @return PDPropBuildDataDict object or null if FILTER is not found
2423 Retrieves and initializes publication security properties. @return PDPropBuildDataDict object containing publication security settings or null if not found
2424 Retrieves and constructs a PDPropBuildDataDict for application data. @return PDPropBuildDataDict object or null if not found
2425 Retrieves and returns a PDSeedValueMDP instance for digital signature permissions. @return PDSeedValueMDP object or null if not found
2426 Retrieves and returns a PDSeedValueCertificate object. @return PDSeedValueCertificate instance or null if not found
2427 Retrieves and initializes a timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
2428 Retrieves and initializes a PDPropBuild object from the PROP_BUILD key in the dictionary. @return PDPropBuild object or null if not found
2429 Retrieves and returns a structure element from the SE key. @return PDStructureElement object or null if not found
2430 Checks if the outline node has a "First" child. @return true if "First" child exists, false otherwise
2431 Retrieves and initializes resources from the PDF document. @return PDResources object or null if not found
2432 Retrieves additional actions associated with a PDF form field. @return PDFormFieldAdditionalActions object or null if none exists
2433 Retrieves and returns a PDSignature object from the signature field. @return PDSignature object or null if not found
2434 Retrieves and returns a PDSignature object using the default value (DV). @return PDSignature object or null if default value is not found
2435 Retrieves and returns a PDSeedValue from the signature field. @return PDSeedValue object or null if not found
2436 Retrieves and returns a PDMeasureDictionary for the viewport. @return PDMeasureDictionary object or null if not found
2437 Retrieves document information from the PDF thread. @return PDDocumentInformation object or null if not found
2438 Retrieves and returns a PDThreadBead instance associated with the 'F' key. @return PDThreadBead object or null if not found
2439 Retrieves and returns a PDThread instance associated with the bead. @return PDThread object or null if no associated dictionary found
2440 Creates and returns a new PDThreadBead instance. @return PDThreadBead object initialized with data from the bead's COSDictionary
2441 Constructs and returns a new PDThreadBead instance. @return PDThreadBead object initialized with data from the "V" key
2442 Retrieves and initializes a PDPage from the bead's dictionary. @return PDPage object or null if not found
2443 Retrieves PDF metadata. @return PDMetadata object or null if not present
2444 Retrieves metadata from the PDF page. @return PDMetadata object or null if no metadata is found
2445 Retrieves the COSStream object associated with differences. @return COSStream object or null if not found
2446 Retrieves and wraps font file stream. @return PDStream object or null if not found
2447 Retrieves font file stream. @return PDStream object for FONT_FILE2 or null if not found
2448 Retrieves font file stream. @return PDStream object or null if not found
2449 Retrieves and wraps CID set stream from dictionary. @return PDStream object or null if not found
2450 Retrieves the sound content stream associated with the action. @return COSStream object containing sound data or null if not found
2451 Retrieves the mask form XObject. @return PDFormXObject representing the mask or null if not found
2452 Retrieves and returns the mask form XObject. @return PDFormXObject representing the mask or null if not found
2453 Retrieves and returns a PDFormXObject representing the mask. @return PDFormXObject or null if not found
2454 Retrieves appearance streams by key from the entry. @throws IllegalStateException if entry is not a subdictionary @return Map of COSName to PDAppearanceStream objects
2455 Retrieves the ID array from the trailer dictionary. @return COSArray containing document IDs or null if not found
2456 Writes PDF document trailer and updates cross-reference table. @param doc the COSDocument to process @throws IOException if I/O error occurs
2457 Retrieves or creates the list of threads in a PDF document. @return List of PDThread objects representing threads in the document
2458 Retrieves all output intents from the document catalog. @return List of PDOutputIntent objects representing output intents
2459 Adds or updates the output intent in the PDF document catalog. @param outputIntent the PDOutputIntent object to be added
2460 Retrieves and converts thread beads from the page. @return List of PDThreadBead objects representing thread beads on the page
2461 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none found
2462 Recursively retrieves and processes COSDictionary nodes from a PDF page tree. @param node the current node in the page tree @return list of COSDictionary representing processed pages
2463 Retrieves child nodes from the current node. @return List of PDNameTreeNode objects representing children or null if none exist
2464 Retrieves and converts name-value pairs from the COSArray. @return unmodifiable map of names to values or null if no names array exists @throws IOException if a non-string key is found in the array
2465 Retrieves the limit string for the node. @return the limit string or null if not found
2466 Sets the upper limit for a name tree node. @param upper the upper bound string to set
2467 Retrieves the limit value as a string. @return the limit value or null if not found
2468 Sets the lower limit in the limits array of a PDNameTreeNode. @param lower the new lower limit string
2469 Retrieves and returns child nodes of the current node. @return List of PDNumberTreeNode representing child nodes or null if none exist
2470 Retrieves and processes numeric mappings from a PDF node. @return Unmodifiable map of integer keys to COSObjectable values or null if invalid. @throws IOException if conversion fails
2471 Retrieves the upper limit from the node's limits array. @return Integer representing the upper limit, or null if not found
2472 Updates the upper limit of a COSArray associated with node limits. @param upper new upper limit value or null to remove it
2473 Retrieves the lower limit from the limits array. @return Integer representing the lower limit or null if not found
2474 Sets the lower limit for a node in the PDF tree. @param lower the new lower limit value or null to remove it
2475 Retrieves or initializes function's range. @return COSArray representing the range of function values
2476 Retrieves or initializes the function's domain. @return COSArray representing the domain or null if not set
2477 Retrieves or computes the SIZE array for the function. @return COSArray representing the SIZE property
2478 Retrieves or constructs the DECODE array. @return COSArray representing the DECODE values
2479 Retrieves or initializes the FUNCTIONS array. @return COSArray containing function definitions
2480 Retrieves or initializes the function's bounds. @return COSArray representing the function's bounds
2481 Retrieves or initializes the encoding array. @return COSArray representing the encoding
2482 Retrieves and constructs a list of user properties from the PDF document. @return List of PDUserProperty objects representing user attributes
2483 Adds or updates a user property in the PDF document. @param userProperty the property to add or update
2484 Masks a user property by removing it from the document's properties array. @param userProperty the user property to be masked
2485 Retrieves or creates a PDColor for the guideline mask. @return PDColor object representing the mask color
2486 Checks if the specified edge is attached. @param edge name of the edge to check @return true if the edge is attached, false otherwise
2487 Retrieves the color of the annotation. @return Color object representing the annotation's color or null if not available
2488 Retrieves the interior color of the annotation. @return Color object representing the annotation's interior color or null if not set
2489 Retrieves and converts the mask array from the annotation. @return float array of mask values or null if not found
2490 Retrieves ink data as a list of float arrays. @return List of float arrays representing ink coordinates or null if not found
2491 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not found
2492 Sets line style for annotation. @param style the desired line style or null for default
2493 Retrieves line end style from annotation. @return Line end style as string or default if not found
2494 Sets the line style for the annotation. @param style the desired line style or null to use default
2495 Retrieves line end style. @return line end style as string or default if not found
2496 Retrieves the color of the line annotation. @return Color object representing the annotation's color or null if not set
2497 Sets the caption offset for the line annotation. @param offset the new caption offset value
2498 Retrieves the mask value from line annotation. @return mask value as float or 0 if not found
2499 Sets the caption offset for the line annotation. @param offset the new offset value for the caption
2500 Retrieves the second float value from the CO array of the annotation. @return second float value or 0 if array is null or invalid
2501 Retrieves vertex coordinates of the polygon annotation. @return float array of vertex coordinates or null if not found
2502 Retrieves the interior color of a polygon annotation. @return Color object representing the interior color, or null if not set
2503 Retrieves vertex coordinates of polyline annotation. @return float array of vertex coordinates or null if not found
2504 Sets the line ending style for annotation. @param style the line ending style to apply
2505 Retrieves line ending style of the annotation. @return String representing line ending style or default if not found
2506 Sets the line endpoint style for the annotation. @param style the endpoint style to apply or null for default
2507 Retrieves mask value for annotation. @return Mask string or default if not found
2508 Retrieves the interior color of the polyline annotation. @return Color object representing the interior color or null if not set
2509 Retrieves the interior color of the annotation. @return Color object representing the interior color or null if not set
2510 Retrieves quadrilateral points for text markup annotation. @return float array of quad points or null if not found
2511 Retrieves the ID array from the FDF document. @return COSArray containing the document ID if present, otherwise null
2512 Retrieves and returns a list of form fields from the FDF document. @return List of FDFField objects representing the form fields or null if none exist.
2513 Retrieves and returns a list of FDFPage objects from the FDF document. @return List of FDFPage objects or null if no pages are found
2514 Retrieves and processes child fields of the current field. @return List of FDFField objects representing child fields or null if none exist
2515 Retrieves and processes options for a field. @return List of processed option elements or null if none found
2516 Retrieves and returns a list of FDFTemplates from the page. @return List of FDFTemplate objects or null if no templates are found
2517 Retrieves form fields from the FDF template. @return List of FDFField objects or null if no fields are present
2518 Retrieves or initializes the list of font widths. @return List of Floats representing character widths, empty if none found
2519 Retrieves or creates the white point for the color space. @return PDTristimulus object representing the white point
2520 Retrieves the black point of the color space. @return PDTristimulus object representing the black point
2521 Retrieves or creates a PDGamma instance for gamma correction. @return PDGamma object representing the gamma correction settings
2522 Retrieves the transformation matrix for color masking. @return float array representing the matrix or default identity matrix if not found
2523 Retrieves component names from the device's color space. @return List of component names as strings
2524 Retrieves or creates the LAB color range. @return PDRange object representing the color component ranges
2525 Retrieves or creates the LAB 'a' component range. @return PDRange object representing the 'a' component range
2526 Retrieves or creates the background array for shading. @return COSArray representing the background, or null if not set
2527 Retrieves or initializes the domain array for the shading. @return the COSArray representing the domain, or null if not found
2528 Retrieves or initializes the EXTEND array for shading. @return COSArray representing the EXTEND property, initialized if needed
2529 Retrieves or initializes the domain array. @return COSArray representing the domain
2530 Retrieves or initializes the coordinates array for shading. @return COSArray containing coordinate data
2531 Retrieves or computes the DECODE array for shading. Uses cached value if available; otherwise, fetches from PDF structure. @return COSArray representing DECODE values
2532 Retrieves and initializes PDFontSetting from dictionary. @return PDFontSetting object or null if not found
2533 Retrieves the COSArray of fields to be reset. @return COSArray containing field names or null if not found
2534 Retrieves the COSArray of fields to be masked during form submission. @return COSArray containing field names to mask or null if not found
2535 Retrieves or constructs the border array for an annotation. Ensures the border array has at least three elements. @return COSArray representing the border settings
2536 Retrieves and converts rectangle margins to float array. @return float array of margins or empty array if not found
2537 Retrieves margins for the annotation. @return float array of margins or empty if none found
2538 Retrieves and converts the callout array to a float array. @return float array of callout coordinates or null if not found
2539 Retrieves the ink data as a 2D float array. @return 2D float array representing ink paths or empty if not found
2540 Retrieves line coordinates from annotation. @return array of floats representing line coordinates or null if not available
2541 Sets the line style for the annotation. @param style the desired line style or null to reset
2542 Retrieves mask value for line annotation. @return String representation of mask or default value
2543 Sets the line style for the annotation. @param style the desired line style or null for default
2544 Retrieves mask value for line annotation. @return String representing the mask or default if not found
2545 Sets the offset for the line annotation's leader line. @param offset the distance of the leader line from the endpoint
2546 Retrieves the first float value from a COSArray associated with "CO". @return the first float value or 0.0f if not found
2547 Sets the offset for line annotation's CO property. @param offset the new offset value
2548 Retrieves the second float value from a COSArray associated with key "CO". @return second float value or 0 if not found
2549 Retrieves quad points as a float array. @return float array of quad points or null if not found
2550 Retrieves polygon vertices as float array. @return float array of vertex coordinates or null if not found
2551 Retrieves and converts polygon path to a 2D float array. @return 2D float array representing the polygon's vertices or null if not available
2552 Sets the line ending style for the annotation. @param style the line ending style to set
2553 Retrieves the mask value for the polyline annotation. @return String representing the mask value or default if not found
2554 Sets the line ending style for a polyline annotation. @param style the line ending style to apply
2555 Retrieves the mask value for the polyline annotation. @return String representing the mask value or LE_NONE if not applicable
2556 Retrieves vertex coordinates of the polyline. @return array of floats representing vertex coordinates or null if not found
2557 Retrieves and converts the RD (rectangle difference) array to a float array. @return float array representing rectangle differences or empty if not found
2558 Retrieves quad points defining text annotation area. @return float array of quad points or null if not found
2559 Sets or updates the operating system in digital signature properties. @param os operating system name to set
2560 Retrieves sub-filter names from digital signature. @return List of sub-filter names or empty list if none found
2561 Retrieves digest methods from the digital signature. @return List of string representations of digest methods or empty list if none found
2562 Retrieves reasons for digital signature. @return List of string representations of reasons or empty list if none found
2563 Retrieves legal attestation fields from the dictionary. @return List of string representations of legal attestation fields or empty list if none found
2564 Masks subject byte arrays from the certificate's COSDictionary. @return List of masked byte arrays or null if not found
2565 Adds a subject to the certificate's subject list. @param subject byte array representing the subject to add
2566 Adds a subject to the certificate's subject list. @param subject byte array representing the subject to add
2567 Retrieves key usage extensions from the certificate. @return List of key usage extensions or null if not found
2568 Validates and sets key usage extension in PDF certificate. @param keyUsageExtension string containing allowed characters '0', '1', 'X'
2569 Sets the Key Usage extension in the digital certificate. @param keyUsageExtension the usage extension to be set
2570 Masks issuer byte arrays from PDF certificate. @return List of masked byte arrays or null if no issuer data found
2571 Adds or updates the issuer in the certificate. @param issuer byte array representing the issuer's name
2572 Adds an issuer to the certificate's issuer list. @param issuer byte array representing the issuer name
2573 Masks byte arrays from OID values in the PDF certificate. @return List of masked byte arrays or null if OID is not found
2574 Adds an OID to the certificate's OID list. @param oid byte array representing the OID to add
2575 Adds an OID to the certificate's OID array. @param oid byte array representing the OID to add
2576 Retrieves the Byte Range array from the digital signature. @return int[] representing the Byte Range or an empty array if not found
2577 Retrieves or creates a color array for the mask. @return PDColor object representing the mask color
2578 Retrieves a list of PDField objects based on the COSArray associated with the key "CO". @return List of PDField objects matching the items in the COSArray.
2579 Retrieves and converts choice field options to integers. @return List of Integer objects representing the choice options or an empty list if none found
2580 Retrieves and converts X-axis number format dictionaries. @return array of PDNumberFormatDictionary or null if not found
2581 Retrieves number format dictionaries for the Y-axis. @return array of PDNumberFormatDictionary or null if not found
2582 Retrieves and returns an array of PDNumberFormatDictionary objects. @return array of PDNumberFormatDictionaries or null if not found
2583 Retrieves and initializes number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if none found
2584 Retrieves number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary or null if not found
2585 Retrieves and converts number format dictionaries from the PDF document. @return array of PDNumberFormatDictionary objects or null if none found
2586 Retrieves and converts the origin point of rectilinear measurements. @return float array representing the origin coordinates or null if not found
2587 Retrieves the mask value for optional content. @return COSName representing the mask value or default if not found
2588 Retrieves string value by key. @param key the key to look up in the dictionary @return decoded string value or null if not found
2589 Retrieves a string value for a given key, returning default if not found. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
2590 Checks if a valid XRef stream exists at the specified offset. @param startXRefOffset starting offset for XRef stream check @return true if XRef stream is valid, false otherwise
2591 Retrieves the page mode from the PDF document catalog. @return PageMode enum or USE_NONE if invalid or not found
2592 Retrieves the page layout of a PDF document. @return PageLayout instance or SINGLE_PAGE if invalid or not set
2593 Retrieves the version string from the PDF document's catalog. @return The version string or null if not found
2594 Retrieves trapped status from PDF document information. @return Trapped status as string or null if not found
2595 Retrieves the page label style as a string. @return The style of page labeling or null if not found.
2596 Retrieves the type of the PDF object. @return the type as a string or null if not found
2597 Creates a PDAttributeObject based on the dictionary's owner type. @param dictionary PDF dictionary containing attribute data @return Specific PDAttributeObject subclass or default if unknown
2598 Retrieves a masked string value associated with COSName.O. @return decoded string value or null if not found
2599 Retrieves the mask value as a string. @return decoded string value or null if not found
2600 Creates a PDStructureNode based on the node type. @param node COSDictionary representing the structure node @return PDStructureTreeRoot or PDStructureElement instance @throws IllegalArgumentException if Type is invalid
2601 Retrieves the type of the structure node. @return decoded string value representing the node's type or null if not found
2602 Retrieves and masks the name of the user property. @return masked name as a string or null if not found
2603 Retrieves language attribute of marked content. @return Language string or null if not available
2604 Retrieves the type of the marked content as a string. @return the type of the marked content or null if not found
2605 Retrieves the subtype of the marked content. @return the subtype as a string or null if not found
2606 Retrieves the filter name associated with encryption. @return the filter name as a string or null if not found
2607 Retrieves the sub-filter name associated with PDF encryption settings. @return the sub-filter name as a string or null if not found
2608 Creates an FDFAnnotation based on the subtype in the COSDictionary. @param fdfDic dictionary containing annotation data @return FDFAnnotation object or null if unsupported type
2609 Retrieves the mask value associated with the annotation. @return the mask value as a string or null if not found
2610 Retrieves mask value as string from annotation. @return Mask value or null if not found
2611 Retrieves the version string from the FDF catalog. @return version of the document as a string or null if not found
2612 Retrieves the encoding used in the FDF document. @return the encoding string, defaulting to "PDFDocEncoding" if not specified
2613 Retrieves mask fitting option for icon. @return mask option as string, defaulting to SCALE_OPTION_ALWAYS if not set
2614 Retrieves mask type for icon fitting. @return mask type as string, defaulting to proportional scale if not specified
2615 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
2616 Retrieves the font type as a string. @return the font type or null if not found
2617 Retrieves the subtype name of the font as a string. @return the font subtype or null if not found
2618 Retrieves the font name from the dictionary. @return the font name as a string or null if not found
2619 Retrieves font stretch attribute from dictionary. @return string value of font stretch or null if not found
2620 Retrieves the base font name from the font dictionary. @return base font name as a string or null if not found
2621 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
2622 Retrieves the base font name from the dictionary. @return base font name as a string or null if not found
2623 Retrieves the base font name from the dictionary. @return the base font name as a string or null if not found
2624 Checks if the DeviceN color space is of type "NChannel". @return true if the subtype is "NChannel", false otherwise
2625 Retrieves the type of PDF action as a string. @return the action type or null if not found
2626 Retrieves the mask value of the action. @return mask string or null if not found
2627 Creates a PDAction based on the action type specified in the COSDictionary. @param action COSDictionary containing action details @return PDAction object or null if type is unsupported
2628 Retrieves the subtype of the annotation. @return Subtype string or null if not found
2629 Retrieves the mask value associated with the annotation. @return The mask value as a string or null if not found.
2630 Retrieves the "IT" property as a string from annotation data. @return The string value of the "IT" property or null if not found.
2631 Retrieves the subtype of the external data dictionary. @return Subtype as a string or null if not found
2632 Retrieves the mask value as a string from the dictionary. @return the mask value or null if not found
2633 Retrieves the filter name used in the digital signature. @return the filter name as a string or null if not found
2634 Retrieves URL type from the certificate's dictionary. @return the URL type as a string or null if not found
2635 Retrieves the filter type used in the signature. @return The filter type as a string or null if not found.
2636 Retrieves the sub-filter of the digital signature. @return the sub-filter as a string or null if not found
2637 Retrieves field type as string. @return field type or null if not found
2638 Retrieves the viewport name as a string. @return the decoded string value of the viewport name or null if not found
2639 Retrieves duplex setting as string from preferences. @return duplex setting or null if not found
2640 Retrieves or creates a COSName instance and fetches its string value. @param key the name string to process @return decoded string from COSName or null if not found
2641 Retrieves string value by key or returns default if not found. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or provided default value
2642 Retrieves the language setting of the PDF document. @return Language code as a string or null if not set
2643 Retrieves the title from PDF document metadata. @return Title of the document as a string or null if not found
2644 Retrieves the author of the PDF document. @return The author's name or null if not set
2645 Retrieves the subject metadata of a PDF document. @return subject string or null if not found
2646 Retrieves keywords from PDF document metadata. @return Keywords associated with the document or null if not found
2647 Retrieves the creator of the PDF document. @return Creator string or null if not found
2648 Retrieves the producer of the PDF document. @return Producer string or null if not found
2649 Retrieves page label prefix from PDF document. @return prefix string or null if not found
2650 Retrieves the user file specification string. @return decoded string or null if not found
2651 Retrieves the mask value of the file specification. @return Mask string or null if not found
2652 Retrieves DOS mask value from file specification. @return decoded DOS mask string or null if not found
2653 Retrieves and decodes the MAC mask value from file specification. @return decoded MAC mask string or null if not found
2654 Retrieves file system mask for UNIX. @return Mask string or null if not found
2655 Retrieves the description of an embedded file. @return decoded description string or null if not found
2656 Retrieves ID string from element attributes. @return decoded ID string or null if not found
2657 Retrieves title of the PDF structure element. @return decoded title string or null if not found
2658 Retrieves the language attribute of the PDF structure element. @return language string or null if not found
2659 Retrieves alternative text for the PDF element. @return decoded alternative text or null if not found
2660 Retrieves mask value from PDF structure. @return decoded string representing the mask or null if not found
2661 Retrieves actual text associated with the element. @return decoded actual text or null if not found
2662 Retrieves and decodes string value associated with key 'F'. @return decoded string or null if not found or not a COSString
2663 Retrieves actual text from marked content. @return decoded actual text or null if not found
2664 Retrieves alternate text for marked content. @return decoded alternate text or null if not available
2665 Retrieves and decodes the string value associated with COSName.E. @return decoded string or null if not found or not a COSString
2666 Retrieves mask value from annotation. @return mask string or null if not found
2667 Retrieves the name of the annotation. @return decoded string representing the annotation's name or null if not found
2668 Retrieves the contents of the annotation. @return decoded string representing annotation content or null if not found
2669 Retrieves the text associated with the annotation. @return decoded text string or null if not found
2670 Retrieves the subject of the annotation. @return decoded subject string or null if not found
2671 Retrieves the annotation symbol. @return decoded string of the annotation symbol or null if not found
2672 Retrieves rotation angle of the annotation. @return rotation angle as a string or null if not found
2673 Retrieves default appearance string of the annotation. @return Default appearance string or null if not found
2674 Retrieves the mask value of the annotation. @return decoded mask string or null if not found
2675 Retrieves the mask value of the annotation. @return Mask value as a string or null if not found
2676 Retrieves the state of the annotation. @return The current state as a string or null if not found.
2677 Retrieves the state model of the annotation. @return State model as a string or null if not found
2678 Retrieves the status value from FDF document. @return decoded status string or null if not found
2679 Retrieves target string from FDF dictionary. @return decoded target string or null if not found
2680 Retrieves the "T" attribute of the field. @return The string value associated with the "T" key or null if not found.
2681 Retrieves the mask associated with the named page reference. @return decoded mask string or null if not found
2682 Retrieves font family name from dictionary. @return Font family as string or null if not found
2683 Retrieves character set from font descriptor. @return Character set string or null if not found
2684 Retrieves the mask name from the dictionary. @return decoded mask name or null if not found
2685 Retrieves names of optional content groups. @return array of OCG names or empty array if none found
2686 Retrieves the mask value for the PDF launch action. @return the mask value as a string or null if not found
2687 Retrieves and decodes a string value associated with key D. @return decoded string or null if not found
2688 Retrieves the mask value from the launch action. @return decoded mask string or null if not found
2689 Retrieves mask value from PDF action. @return mask string or null if not found
2690 Masks and decodes the URI string from a PDF action. @return decoded URI or null if not applicable
2691 Retrieves the mask value from the dictionary. @return decoded string representing the mask or null if not found
2692 Retrieves a masked string value from the dictionary. @return decoded string or null if not found
2693 Retrieves the mask parameter from PDF launch settings. @return decoded mask string or null if not found
2694 Retrieves masked parameter value. @return decoded string from COSDictionary or null if not found
2695 Retrieves masked parameter value. @return decoded string from COSDictionary or null if not found
2696 Retrieves the contents string of the annotation. @return The decoded contents string or null if not found.
2697 Retrieves mask value from annotation dictionary. @return decoded mask string or null if not found
2698 Retrieves the name of the annotation. @return Decoded string representing the annotation's name or null if not found
2699 Retrieves default appearance string for annotation. @return decoded default appearance string or null if not found
2700 Retrieves masked string value from COSDictionary. @return decoded string or null if not found
2701 Retrieves the mask value of the annotation. @return decoded string representing the mask or null if not found
2702 Retrieves the subject of the annotation. @return Subject string or null if not found
2703 Retrieves the state of the annotation. @return decoded state string or null if not found
2704 Retrieves the state model of the annotation. @return State model as a string or null if not found
2705 Retrieves the caption string of an annotation. @return decoded caption string or null if not found
2706 Retrieves the rotation setting of the annotation. @return rotation value as string or null if not found
2707 Retrieves the mask value associated with the annotation. @return decoded mask string or null if not found
2708 Retrieves the date property from the digital signature dictionary. @return Date string or null if not found
2709 Retrieves OS information from PDF properties. @return OS string from dictionary or default value
2710 Retrieves and processes the subject distinguished name (DN) from a digital certificate. @return List of maps containing key-value pairs for each DN entry, or null if not found
2711 Retrieves the URL attribute from the certificate's COSDictionary. @return The URL as a string or null if not found
2712 Retrieves URL from dictionary. @return decoded URL string or null if not found
2713 Retrieves masked content from the signature dictionary. @return decoded string of masked content or null if not found
2714 Retrieves the location information from the digital signature. @return Location string or null if not found
2715 Retrieves the reason for the digital signature. @return Reason string or null if not found
2716 Retrieves contact info from signature dictionary. @return decoded contact information string or null if not found
2717 Retrieves the title of the outline item. @return Title string or null if not found
2718 Retrieves the field's text mask value. @return decoded string or null if not found or not a COSString
2719 Retrieves the fully qualified name of the field. @return The full field name or null if not found
2720 Retrieves the mask value of the field. @return Mask string or null if not found
2721 Retrieves default appearance string from DS attribute. @return decoded default appearance string or null if not found
2722 Retrieves masked value from PDF dictionary. @return decoded string or null if not found
2723 Retrieves or creates a COSName instance and converts it to a Calendar object. @param key the name string to process @return Calendar instance or null if conversion fails
2724 Retrieves a Calendar value for a given COSName key. @param key the COSName key to look up @param defaultValue default Calendar to return if key is not found @return Calendar instance or provided default if null
2725 Retrieves the creation date of the PDF document. @return Calendar object representing the creation date or null if not found
2726 Retrieves the modification date of the PDF document. @return Calendar object representing the modification date or null if not found
2727 Retrieves the creation date of the annotation. @return Calendar object representing the creation date or null if not found @throws IOException if an error occurs while accessing the underlying data
2728 Retrieves the creation date of the annotation. @return Calendar representing the creation date or null if not found
2729 Retrieves the date associated with the signature mask. @return Calendar instance representing the date or null if not available
2730 Retrieves a numeric value for a given key with a default. @param key the name string to process @return the numeric value associated with the key, or -1 if not applicable
2731 Retrieves a numeric value for a given key with a default of -1. @param key the key to look up in the dictionary @return the numeric value associated with the key, or -1 if not applicable
2732 Retrieves a numeric value from the dictionary for a given key. @param key the key to look up in the dictionary @param defaultValue the default value if the key is not found or not a number @return the numeric value associated with the key, or default if not applicable
2733 Decodes input stream using a list of filters. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param options DecodeOptions for additional settings @param results List to store DecodeResult objects @return RandomAccessRead buffer with decoded data @throws IOException if I/O error occurs
2734 Resolves the XRef trailer from a given startxref byte position. @param startxrefBytePosValue starting byte position of the trailer
2735 Retrieves or creates a COSName instance and fetches its float value. @param key the name string to process @return float value from dictionary or default value (-1)
2736 Retrieves a float value associated with a specified key. @param key the key to look up in the dictionary @return float value from dictionary or default value of -1 if not found
2737 Retrieves a float value associated with a given key. @param key the key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
2738 Retrieves the user unit of the PDF page. @return User unit as a float, defaulting to 1.0 if not positive
2739 Retrieves guideline width from PDF dictionary. @return float value representing guideline width or default of 1.0f
2740 Retrieves the opacity of the annotation. @return float value representing opacity (default is 1.0)
2741 Retrieves font weight from dictionary. @return font weight as float or default value if not found
2742 Retrieves the italic angle of the font. @return italic angle as a float value or 0 if not found
2743 Retrieves the ascent value of the font. @return Ascent value as a float or 0 if not found
2744 Retrieves the font descent value. @return float value representing font descent or default of 0
2745 Retrieves the leading value of the font. @return leading value as a float, defaulting to 0 if not found
2746 Retrieves and caches the cap height of the font. @return float value representing the cap height
2747 Retrieves the x-height of the font. @return x-height value as a float
2748 Retrieves stem vertical value from font descriptor. @return stem vertical width as float or 0 if not found
2749 Retrieves stem height value from font descriptor. @return stem height as float or default value if not found
2750 Retrieves the average width of characters in the font. @return average width as a float, defaulting to 0 if not found
2751 Retrieves the maximum width of the font. @return maximum width or 0 if not specified
2752 Retrieves the missing width value from the font descriptor. @return float representing the missing width or 0 if not found
2753 Retrieves gamma value from dictionary. @return gamma correction factor or default of 1.0 if not found
2754 Retrieves the x-step value of the tiling pattern. @return x-step as a float, defaulting to 0 if not found
2755 Retrieves the y-step value for the tiling pattern. @return y-step as a float, defaulting to 0 if not found
2756 Retrieves and clamps the sound volume. @return Clamped volume between -1 and 1
2757 Retrieves the lower-left corner y-coordinate of the line annotation. @return y-coordinate as a float value
2758 Retrieves the lower-left x-coordinate of the line annotation. @return float value representing the x-coordinate or default if not found
2759 Retrieves line length from annotation. @return float value representing line length or default if not found
2760 Retrieves opacity value of the annotation. @return float representing opacity (default is 1)
2761 Retrieves the border width from PDF border style dictionary. @return float value of border width or default 1 if not set
2762 Retrieves the duration of the transition effect. @return duration as a float value or default 1 if not found
2763 Retrieves transition mask value. @return float representing mask setting or default of 1
2764 Handles mask operations in PDF content stream. @param op Operator containing mask instructions @throws IOException if writing fails
2765 Processes text extraction for specified regions on a PDF page. @param page the PDF page to process @throws IOException if an I/O error occurs
2766 Retrieves and converts the role map from a PDF structure tree. @return Map containing role mappings or an empty map if none found
2767 Masks an object by adding it to the structure node. @param objectable object to be masked, must not be null
2768 Updates a child reference in the structure node. @param newKid new child element to insert @param refKid reference to the old child element
2769 Checks if an object is a valid child for the structure node. @param objectable the object to check @return true if the object is a valid child, false otherwise
2770 Masks user property if it has changed. @param value new value for the property
2771 Retrieves or creates the color space for a mask. @return PDColorSpace instance for the mask @throws IOException if an error occurs during creation
2772 Creates a PDPropertyList instance based on the dictionary type. @param dict COSDictionary to be processed @return PDPropertyList or its subclass based on the dictionary's type
2773 Retrieves line width from graphics state. @return Float value representing line width or null if not found
2774 Retrieves mask value from graphics state. @return Float representing mask setting or null if not found
2775 Retrieves the float value associated with the FL key. @return the float value or null if not found
2776 Retrieves the mask value from the graphics state. @return the float value of the mask or null if not found
2777 Retrieves the alpha constant for non-stroking operations. @return Float value representing the alpha constant, or null if not found
2778 Retrieves the non-stroking alpha constant. @return Float value representing the non-stroking alpha constant
2779 Constructs a new PDAnnotationLink instance. @param field COSDictionary containing annotation data
2780 Constructs a new PDAnnotationMarkup instance. @param dict the COSDictionary containing annotation data
2781 Constructs a new PDAnnotationPopup instance. @param field COSDictionary containing annotation data
2782 Initializes an unknown annotation from a COSDictionary. @param dic the COSDictionary containing annotation data
2783 Initializes a new PDAnnotationWidget instance with a given COSDictionary. @param field the COSDictionary containing annotation data
2784 Returns options for choice field with masking applied. @return List of masked option strings or empty list if none
2785 Retrieves values associated with the 'V' key. @return List of string representations of the value or an empty list if not applicable
2786 Retrieves default values for choice fields. @return List of default string values or empty list if none set
2787 Writes and manages PDF objects during document serialization. @param obj the COSBase object to process
2788 Serializes and writes a PDF COSBase object to the output stream. Handles various COS types, including strings, numbers, booleans, names, arrays, and dictionaries. @param output OutputStream for data output @param object COSBase object to serialize @param topLevel true if top-level serialization is required @throws IOException if an I/O error occurs during writing
2789 Masks a section of an ellipse with curves based on angles and radii. @param anglePrev previous angle in radians @param angleCur current angle in radians @param radius radius of the ellipse @param cx center x-coordinate @param cy center y-coordinate @param alpha current alpha value @param alphaPrev previous alpha value @param addMoveTo flag to add initial move-to command @throws IOException if an I/O error occurs
2790 Masks an ellipse with curves to create a cloudy effect. @param left x-coordinate of the bounding box's left edge @param bottom y-coordinate of the bounding box's bottom edge @param right x-coordinate of the bounding box's right edge @param top y-coordinate of the bounding box's top edge @throws IOException if an I/O error occurs during masking
2791 Initializes a new PDPageFitDestination with a specific type. Grows the underlying COSArray to size 2 and sets the second element to the destination type.
2792 Configures page view fitting based on bounding box. @param fitBoundingBox flag to determine fitting behavior
2793 Initializes a destination to fit page height. Sets up COSArray with required size and type.
2794 Sets destination parameters based on input. @param x value to set or special case (-1)
2795 Sets destination to fit page height, optionally with bounding box. @param fitBoundingBox flag to determine if bounding box should be fitted
2796 Initializes a new destination for fitting a rectangle on a PDF page. Sets up the COSArray with necessary properties and assigns the type.
2797 Sets up a PDF page destination rectangle. @param x coordinate for the right and top of the rectangle
2798 Sets destination rectangle's top coordinate. @param y top coordinate value or -1 for no specific position
2799 Sets up a PDF page destination rectangle. @param x coordinate for the right and top bounds; if -1, sets to null
2800 Sets up a PDF page destination with a mask. @param y vertical coordinate for masking; -1 for no specific value
2801 Initializes a new destination to fit page width. Sets up COSArray for storing destination properties.
2802 Sets up destination for fitting page width. @param y vertical position or special value -1
2803 Sets destination to fit page width in PDF. @param fitBoundingBox true if bounding box should be fitted
2804 Initializes a new PDPageXYZDestination with default properties. Sets up an underlying COSArray for storing destination details.
2805 Sets up a PDF destination with specific properties. @param x zoom level or identifier for the destination
2806 Sets destination properties for a PDF page. @param y vertical coordinate or flag (-1 for null)
2807 Sets the zoom level for a PDF destination. @param zoom the desired zoom level; -1 indicates no zoom change
2808 Parses and returns a COSBase object from PDF source. Handles object numbers, generation numbers, and validates types. @return parsed COSBase object or null if invalid @throws IOException if an I/O error occurs during parsing
2809 Retrieves or creates the bounding box for a form field's appearance. @param fieldWidget widget representing the form field @param appearanceStream stream defining the field's visual appearance @return PDRectangle instance representing the bounding box
2810 Masks PDF objects within a dictionary. @param dictionary the COSDictionary to process @param objNum unique object identifier @param genNum generation number of the object @throws IOException if an I/O error occurs
2811 Updates the bounding box for layout attributes. @param bbox new bounding rectangle
2812 Sets a gamma-corrected RGB mask attribute. @param name attribute key @param value PDGamma object or null to remove the attribute
2813 Updates the mask attribute for a given name with a new color value. @param name attribute name to update @param value new PDFourColours value for the mask
2814 Constructs a new PDF page with default LETTER size.
2815 Retrieves or creates the FDF dictionary from the catalog. @return FDFDictionary instance associated with the catalog
2816 Initializes a new FDFDocument with version 1.2. Sets up an empty COSDocument and initializes a FDFCatalog as the root.
2817 Retrieves or creates the FDF catalog from the document. @return FDFCatalog object representing the document's catalog
2818 Retrieves or initializes mask fitting configuration. @return PDRange object representing the mask fit settings
2819 Creates and sets CIDSet for font embedding. @param cidToGid mapping of CIDs to GIDs @throws IOException if I/O operations fail
2820 Initializes a new PDTilingPattern with default settings. Sets up the COSObject with type and pattern type, and creates resources.
2821 Adds a new sibling to the outline item. @param newSibling the sibling to be added
2822 Masks this outline item by inserting a new sibling. @param newSibling the new sibling to insert
2823 Associates a bead with the thread and updates the document. @param bead the PDThreadBead to be associated
2824 Initializes a new PDThreadBead with default settings. Sets up the bead dictionary and links it to itself.
2825 Sets up role map dictionary for PDF structure. @param roleMap mapping of roles to their values
2826 Updates a dictionary entry and tracks changes. @param name key for the dictionary entry @param value new string value to set
2827 Sets the rendering intent in the graphics state. @param ri rendering intent value as string
2828 Sets a mask in the PDF action with key "N". @param name the value to set as the mask
2829 Sets mask for border effect using string value. @param s the string value to set as mask
2830 Initializes page labels for a PDF document. @param document the PDDocument to manage labels for
2831 Constructs a PDStructureElement with a specified type and parent node. @param structureType the type of structure element to create @param parent the parent PDStructureNode for this element
2832 Initializes a new PDStructureTreeRoot instance.
2833 Initializes a new PDF shading pattern. Sets the pattern type to TYPE_SHADING_PATTERN in the COS dictionary.
2834 Initializes a PDF action with a default type. Sets up a COSDictionary and assigns an initial action type.
2835 Retrieves and returns the document's outline. @return PDDocumentOutline object or null if not found
2836 Retrieves the parent outline node. @return PDOutlineNode representing the parent or null if none exists
2837 Initializes a new rectilinear measurement dictionary. Sets the subtype to "RectlinearMeasure".
2838 Initializes a PDTransition with default right-to-left style.
2839 Sets a date value in the dictionary under a specified key. @param key the name string for the date entry @param date the Calendar instance to be set
2840 Updates or sets a date in the embedded dictionary. @param embedded key for the embedded dictionary @param key key under which to set the date @param date Calendar instance representing the date to be set
2841 Sets the creation date of the PDF document. @param date the Calendar instance representing the creation date
2842 Sets the modification date of the PDF document. @param date Calendar instance representing the new modification date
2843 Sets the creation date of the annotation. @param date Calendar instance representing the creation date
2844 Sets the mask date in annotation. @param c Calendar instance representing the date to be set
2845 Sets the creation date of the annotation. @param creationDate Calendar instance representing the creation date
2846 Sets the mask date in the signature dictionary. @param cal Calendar instance representing the mask date
2847 Sets metadata field value in PDF document. @param fieldName name of the metadata field @param fieldValue value to set for the specified field
2848 Updates a string attribute in the dictionary. @param name the key for the attribute @param value the new string value to set
2849 Sets the 'Base' string for URI actions in the COSDictionary. @param base the base URL string to be set
2850 Sets the application version in the dictionary. @param applicationVersion the version string of the application
2851 Sets the measurement units in the PDF number format dictionary. @param units the string representing the measurement units
2852 Sets the fractional display format. @param fractionalDisplay format type ("D", "F", "R", "T" or null)
2853 Sets the thousands separator in the number format dictionary. @param thousandsSeparator character to use as thousands separator
2854 Sets the decimal separator in the number format dictionary. @param decimalSeparator character to use as decimal separator
2855 Sets prefix for labels in number format dictionary. @param labelPrefixString prefix to be set
2856 Sets the label suffix in the number format dictionary. @param labelSuffixString suffix to append to labels
2857 Sets a value in the dictionary for a given label position. @param labelPositionToValue the label position to set the value for
2858 Constructs an FDFField from XML. @param fieldXML XML element representing the field @throws IOException if an error occurs during processing
2859 Initializes a new optional content group with a specified name. @param name the name of the optional content group
2860 Updates an integer attribute in the PDF dictionary. @param name attribute key as a string @param value integer value to set
2861 Sets an integer attribute and tracks changes. @param name attribute key @param value integer value to set
2862 Sets the denominator for formatting. @param denominator value to set in the format dictionary
2863 Creates a PDImageXObject from a 1-bit binary BufferedImage. @param document PDF document to add the image @param image input BufferedImage containing image data @return PDImageXObject object representing the encoded image @throws IOException if I/O operations fail
2864 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
2865 Sets mask properties for shading. @param bitsPerComponent number of bits per color component
2866 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
2867 Sets the number of bits per coordinate for shading. @param bitsPerCoordinate the number of bits to set
2868 Sets a float attribute and compares the old and new values. @param name attribute key @param value float value to set
2869 Sets intensity of border effect. @param i intensity value to be set
2870 Sets conversion factor for measurement units. @param conversionFactor the conversion factor to apply
2871 Retrieves file specification from PDF stream. @return PDFileSpecification object or null if not found
2872 Retrieves file specification from FDF document. @return PDFileSpecification instance or null if not found
2873 Retrieves and converts embedded file specifications from FDF. @return List of PDFileSpecification objects or null if none found
2874 Retrieves and creates a file specification for the named page. @return PDFileSpecification instance or throws IOException if unsupported type
2875 Retrieves file specification from the destination. @return PDFileSpecification object or throws IOException
2876 Retrieves and converts file specification from action. @return PDFileSpecification instance or throws IOException if unsupported type
2877 Retrieves file specification from the launch action. @return PDFileSpecification object or null if not found
2878 Retrieves and processes the file specification from the action. @return PDFileSpecification object or throws IOException if unsupported type
2879 Retrieves and creates file specification from form action. @return PDFileSpecification instance or throws IOException if unsupported type
2880 Retrieves file specification from action parameters. @return PDFileSpecification object or throws IOException if unsupported type
2881 Retrieves file specification from annotation. @return PDFileSpecification instance or null if not found
2882 Creates a new highlight annotation. Initializes the subtype to "Highlight".
2883 Creates a new squiggly line annotation. Initializes the annotation with default settings.
2884 Initializes a new strikeout annotation. Sets the subtype to "StrikeOut".
2885 Initializes a new underline annotation. Sets the subtype to "Underline".
2886 Initializes a file attachment annotation. Sets the subtype to "FileAttachment".
2887 Initializes a new ink annotation. Sets the subtype to "INK" in the COS object.
2888 Initializes a new PDAnnotationLine instance. Sets the annotation subtype and initializes line coordinates to default values.
2889 Initializes a new polygon annotation. Sets the subtype to "PolyLine" in the COS object.
2890 Initializes a new polyline annotation. Sets the subtype to "PolyLine".
2891 Initializes a new rubber stamp annotation. Sets the subtype to indicate it's a rubber stamp.
2892 Constructs a new square or circle annotation. @param subType specifies the type of annotation ("Square" or "Circle")
2893 Initializes a new text annotation. Sets the subtype to "Text".
2894 Initializes a text markup annotation with a subtype. @param subType type of text markup annotation (e.g., "Highlight")
2895 Retrieves the bounding box of the marked content. @return PDRectangle representing the bounding box or null if not available
2896 Retrieves the bounding box rectangle for PDF layout. @return PDRectangle object or null if not found
2897 Retrieves the rectangle bounds of the annotation. @return PDRectangle representing the annotation's bounds or null if not found
2898 Retrieves and returns the rectangle bounds of the caret annotation. @return PDRectangle object representing the annotation's bounds or null if not available
2899 Retrieves the rectangle defining the annotation's bounding box. @return PDRectangle object if RD key exists, otherwise null
2900 Retrieves the rectangle bounds of the annotation. @return PDRectangle object representing the annotation's bounds or null if not set
2901 Retrieves and returns the rectangle defining the annotation's mask. @return PDRectangle object or null if not found
2902 Retrieves the font bounding box rectangle. @return PDRectangle object representing the font's bounding box or null if not found
2903 Retrieves the bounding box of the font. @return PDRectangle representing the font's bounding box or null if not found
2904 Retrieves the bounding box rectangle of the form XObject. @return PDRectangle representing the bounding box or null if not set
2905 Retrieves bounding box of the tiling pattern. @return PDRectangle object representing the bounding box or null if not found
2906 Retrieves the bounding box of the shading. @return PDRectangle representing the bounding box or null if not defined
2907 Retrieves the annotation's bounding rectangle. @return PDRectangle object if valid, otherwise null
2908 Retrieves and constructs a rectangle difference for the annotation. @return PDRectangle object representing the rectangle difference or null if not found
2909 Retrieves rectangle differences for square/circle annotation. @return PDRectangle object or null if not found
2910 Retrieves the bounding box of the viewport. @return PDRectangle object representing the bounding box or null if not found
2911 Retrieves rectangle bounds of the bead. @return PDRectangle object or null if not found
2912 Sets line dash pattern using given array and phase. @param array COSArray representing dash lengths @param phase initial phase of the dash pattern
2913 Retrieves or creates a line dash pattern for PDF guidelines. @return PDLineDashPattern object representing the dash pattern
2914 Retrieves line dash pattern from the graphics state dictionary. @return PDLineDashPattern object if defined, otherwise null
2915 Retrieves or creates a line dash pattern for the border. @return PDLineDashPattern object representing the dash pattern
2916 Applies a mask to a PDF image and converts it to a BufferedImage. @param pdImage the PDF image to process @param paint the color used for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an error occurs during processing
2917 Retrieves transformation matrix for masking. @return Matrix object representing the mask's transformation
2918 Retrieves and transforms the pattern's matrix. @return transformed Matrix object representing the pattern's transformation
2919 Retrieves transformation matrix from shading dictionary. @return Matrix object representing the transformation or default if not found
2920 Updates an attribute in the PDF document. @param attrName name of the attribute to update @param attrValue new value for the attribute
2921 Recursively retrieves a value from the PDF page tree. @param node current node in the page tree @param key key to search for the value @return COSBase object or null if not found
2922 Determines boolean value by key. @param key primary key to search @param defaultValue default boolean value if key is missing @return boolean value from dictionary or default if not found
2923 Retrieves integer value by key or returns default. @param key primary key to search @param defaultValue value to return if no valid number found @return integer value from dictionary or default
2924 Retrieves integer value by keys or returns default. @param firstKey primary key to search @param secondKey secondary key if primary is not found @return integer value from dictionary or -1 if no valid number found
2925 Constructs a PDInlineImage instance. @param parameters image attributes dictionary @param data raw image byte array @param resources PDF document resources @throws IOException if decoding fails
2926 Determines the mask format based on image filters. @return "jpg", "tiff", or "png" based on filter types
2927 Filters COSObjects by type from the document's cross-reference table. @param type1 first COSName type to match @param type2 second COSName type to match (optional) @return List of COSObjects matching specified types
2928 Parses PDF to find and validate trailer dictionary. @param trailer the COSDictionary to update with parsed values @return true if valid trailer is found, false otherwise @throws IOException if an I/O error occurs during parsing
2929 Parses PDF for catalog and info objects. @param trailer dictionary to update with parsed objects @return true if catalog object is found @throws IOException if I/O error occurs during parsing
2930 Retrieves and initializes the page tree of the PDF document. @return PDPageTree object representing the document's pages
2931 Constructs a PDPageTree from a COSDictionary. @param root the root dictionary of the page tree
2932 Converts character code to Unicode string using custom glyph list. @param code character code to convert @param customGlyphList optional custom glyph list for conversion @return Unicode string or null if conversion fails
2933 Retrieves or creates a PDTransparencyGroup for the soft mask. @return PDTransparencyGroup instance or null if not found @throws IOException if issues occur during resource creation
2934 Sets the Mac subtype for an embedded file. @param macSubtype the Mac subtype to be set
2935 Sets the Mac OS creator for the embedded file. @param macCreator the Mac OS creator string to set
2936 Sets Mac resource fork for embedded file. @param macResFork Mac resource fork data
2937 Checks if the PDF document is encrypted. @return true if the document is encrypted, false otherwise
2938 Parses an FDF document and returns an FDFDocument object. @return FDFDocument containing parsed data or null on error @throws IOException if parsing fails due to missing version info
2939 Parses and loads a PDF document with specified parsing mode. @param lenient true for lenient parsing, false for strict @return PDDocument object if successful @throws IOException if an error occurs during parsing or loading
2940 Retrieves and initializes the PDF document's AcroForm. @return PDAcroForm object or null if not found
2941 Retrieves a page destination from a named destination. @param namedDest the named destination object @return PDPageDestination object or null if not found
2942 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @param wasDefault indicates if it's a default colorspace @return PDColorSpace object or null if not found
2943 Checks if a color space resource exists. @param name specific resource identifier @return true if color space is found, false otherwise
2944 Retrieves an extended graphics state resource. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
2945 Checks if a resource is an image. @param name specific resource identifier @return true if the resource is an image, false otherwise
2946 Retrieves color space resource keys. @return Iterable of COSName keys representing color spaces or empty set if not found
2947 Retrieves XObject resource keys. @return Iterable of COSName keys or empty set if not found
2948 Retrieves font resource keys. @return Iterable of COSName keys representing fonts or empty set if none found
2949 Retrieves mask properties from PDF resources. @return Iterable of COSName keys representing mask properties or empty set if not found
2950 Retrieves shading resource keys. @return Iterable of COSName keys or empty set if not found
2951 Retrieves pattern resource keys. @return Iterable of COSName keys representing patterns or empty set if none found
2952 Retrieves mask resource keys. @return Iterable of COSName keys for mask resources or empty set if not found
2953 Adds a resource to the PDF document and returns its unique COSName. @param kind type of resource (e.g., font, image) @param prefix base string for the name @param object resource object to be added or updated @return unique COSName for the resource
2954 Adds or updates a font resource in the PDF document. @param name unique identifier for the font resource @param font PDFont object to be added or updated
2955 Adds or updates a color space resource in the PDF document. @param name unique identifier for the color space @param colorSpace color space object to be added or updated
2956 Adds or updates an extended graphics state resource. @param name unique identifier for the graphics state @param extGState graphics state object to be added or updated
2957 Adds or updates a shading resource in the PDF document. @param name unique identifier for the shading resource @param shading PDShading object representing the shading resource
2958 Adds or updates a pattern resource in the PDF document. @param name unique identifier for the pattern resource @param pattern PDAbstractPattern object to be added or updated
2959 Adds or updates a resource property list. @param name unique identifier for the property @param properties property list to be added or updated
2960 Adds or updates an XObject resource. @param name unique identifier for the XObject @param xobject XObject to be added or updated
2961 Sets the embedded file for a PDF specification. @param file the PDEmbeddedFile to be set
2962 Sets the embedded file for a PDF specification. @param file PDEmbeddedFile to be set
2963 Retrieves the standard crypt filter dictionary. @return PDCryptFilterDictionary object for standard encryption
2964 Retrieves default crypt filter dictionary. @return PDCryptFilterDictionary object or null if not found
2965 Configures encryption filter settings. @param cryptFilterDictionary dictionary containing filter configurations
2966 Configures default cryptographic filter settings. @param defaultFilterDictionary the dictionary containing default filter settings
2967 Retrieves and initializes a Type 3 character procedure by code. @param code font encoding code @return PDType3CharProc object or null if not found
2968 Retrieves and determines the base state of mask properties. @return BaseState object representing the mask's visibility
2969 Sets the base state for mask properties. @param state object representing the current state
2970 Enables or disables an optional content group. @param group the PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was successfully toggled, false otherwise
2971 Initializes a new PDPatternContentStream for a tiling pattern. @param pattern the PDTilingPattern to create content stream for @throws IOException if an I/O error occurs
2972 Retrieves or initializes the appearance dictionary for an annotation. @return PDAppearanceDictionary object representing the annotation's appearance
2973 Retrieves or creates a rollover appearance entry. @return PDAppearanceEntry for rollover state or default if not found
2974 Retrieves and returns the normal appearance entry. @return PDAppearanceEntry for normal state or a default if not found
2975 Retrieves the first outline item in the hierarchy. @return PDOutlineItem representing the first child or null if not found
2976 Retrieves the last outline item in the hierarchy. @return PDOutlineItem representing the last outline item or null if not found
2977 Retrieves the digital signature associated with the field. @return PDSignature object or null if not found
2978 Appends a new bead to the thread. @param append PDThreadBead object to be added
2979 Retrieves the appearance stream for a PDF annotation. @return PDAppearanceStream object or null if not found
2980 Retrieves the off state appearance name for a checkbox. @return COSName string of the off state or empty string if not found
2981 Validates and processes PDF page structure. @param root COSDictionary representing the PDF's root object @throws IOException if page tree validation fails
2982 Retrieves a value by name from the node or its children. @param name key to search for in the tree @return value associated with the name, or null if not found @throws IOException if an I/O error occurs
2983 Retrieves an object at a specified index from the node or its children. @param index position of the object to retrieve @return COSObjectable object or null if not found @throws IOException if retrieval fails
2984 Updates node limits and children based on input list. @param kids list of child nodes to manage
2985 Updates the tree with a map of numeric values. @param numbers map of integers to COSObjectable values
2986 Calculates the number of output values for the function. Uses the size of the range array divided by 2. @return int representing the number of output values
2987 Retrieves and initializes function's range. @param n index for range retrieval @return PDRange object representing the function's range
2988 Clips input values to specified ranges. @param inputValues array of input values to clip @return array of clipped values within defined ranges
2989 Returns the mask for function input values. Initializes numberOfInputValues if not set. @return int representing the number of input values
2990 Retrieves and initializes a PDRange object using the function's domain. @param n Index for initializing the PDRange @return PDRange object initialized with domain values at index n
2991 Computes an index based on a vector and size values. @param vector input coordinate vector @return computed index for interpolation
2992 Constructs or retrieves the FUNC_MASK array for encoding. Initializes with default values if not already set. @return COSArray representing the FUNC_MASK property
2993 Retrieves the range for a specified function parameter. @param paramNum index of the function parameter @return PDRange object or null if not found
2994 Retrieves and initializes a PDRange based on encoding values. @param n index for range initialization @return PDRange object initialized with specified encoding values
2995 Checks if the top edge of the content is attached. @return true if the top edge is attached, false otherwise
2996 Checks if the bottom edge is attached. @return true if bottom edge is attached, false otherwise
2997 Checks if the left edge is attached. @return true if left edge is attached
2998 Checks if the right edge is attached. @return true if the right edge is attached, false otherwise
2999 Constructs a new PDCIDFont instance. @param fontDictionary CID font dictionary from PDF @param parent PDType0Font parent font object
3000 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base font encoding type @param differences array of font differences to apply @throws IllegalArgumentException if invalid encoding is provided
3001 Initializes a new DictionaryEncoding instance with the provided font encoding. @param fontEncoding COSDictionary containing font encoding information
3002 Initializes a new DictionaryEncoding instance. @param fontEncoding the COSDictionary containing encoding data @param isNonSymbolic flag indicating if the font is non-symbolic @param builtIn the built-in Encoding for symbolic fonts
3003 Initializes the color space with RGB array. @param rgb COSArray containing RGB values
3004 Sets the color range for the L component. @param range PDRange object defining min and max values or null for default (-100 to 100)
3005 Sets color range for B component in LAB color space. @param range PDRange object defining min and max values or null for default (-100 to 100)
3006 Retrieves an optional content group by name. @param name the name of the optional content group @return PDOptionalContentGroup object or null if not found
3007 Adds an optional content group to the mask and order arrays. @param ocg the PDOptionalContentGroup to add
3008 Retrieves all optional content groups from the PDF document. @return Collection of PDOptionalContentGroup objects
3009 Initializes ShadingContext for PDF rendering. @param shading PDShading instance to manage @param cm ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color space creation fails
3010 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
3011 Retrieves annotation color using default key. @return PDColor object or null if not found
3012 Retrieves the background color of annotations. @return PDColor object representing the background color or null if not found
3013 Retrieves background color of annotation. @return PDColor object representing the background color
3014 Sets key usage flags for digital signature certificate. @param digitalSignature to nonRepudiation various key usages as characters
3015 Masks and retrieves the content of a PDF signature. @param pdfFile input stream of the PDF file @return byte array with masked content @throws IOException if I/O error occurs
3016 Masks the content of a PDF file by removing signature data. @param pdfFile byte array representing the PDF file @return byte array with masked content @throws IOException if I/O error occurs
3017 Masks PDF content by applying a transformation. @param pdfFile input stream of the PDF file @return masked byte array @throws IOException if an I/O error occurs
3018 Masks PDF file data using a transformation. @param pdfFile input byte array representing the PDF file @return masked byte array of the PDF content @throws IOException if an I/O error occurs during processing
3019 Retrieves string value by attribute name. @param name attribute key to look up @return decoded string value or null if not found
3020 Retrieves the rendering intent from the dictionary. @return RenderingIntent object or null if not found
3021 Retrieves the name associated with the PDF action. @return decoded string value of the action's name or null if not found
3022 Retrieves a string value from the dictionary using a given key. @param key the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
3023 Retrieves the guideline style as a string. @return "solid" if not found in the dictionary
3024 Retrieves the mask name of the annotation. Uses default if not found. @return mask name as string or default note name
3025 Retrieves attachment name as string. @return decoded attachment name or default value if not found
3026 Retrieves the line ending style of the annotation. @return the line ending style as a string or default value if not found
3027 Retrieves mask value as string. @return decoded string or default if not found
3028 Retrieves the reply type as a string. @return the reply type or default if not found
3029 Retrieves the mask name of the rubber stamp annotation. @return the mask name as a string or "DRAFT" if not found
3030 Retrieves the mask value for the annotation. @return the mask value as a string or default if not found
3031 Retrieves mask value as string. @return mask value or "I" if not found
3032 Retrieves the border style as a string. @return "Solid" if the style is solid, otherwise the default value
3033 Retrieves the type attribute from external data dictionary. @return "ExData" if present, otherwise null
3034 Retrieves transition style as string. @return transition style name or default value
3035 Retrieves transition mask as string. @return mask value or default if not found
3036 Retrieves transition mask as string. @return mask value or default if not found
3037 Retrieves non-full screen page mode preference. @return string representation of the non-full screen page mode or default value
3038 Retrieves reading direction preference. @return string representing reading direction or default if not found
3039 Retrieves the view area boundary setting. @return string representation of the view area setting
3040 Retrieves viewer preference for clipping view to crop box. @return string value representing clipping setting or default if not found
3041 Retrieves print area boundary as string. @return print area boundary or default value if not found
3042 Retrieves print clipping setting as string. @return value of PRINT_CLIP preference or default boundary crop box
3043 Retrieves print scaling preference. @return string representation of print scaling setting or default value
3044 Processes the start XRef offset to validate and adjust it. @param startXRefOffset initial starting offset for XRef processing @return adjusted XRef offset or -1 if invalid @throws IOException if I/O error occurs during processing
3045 Determines the maximum PDF version from header and catalog. @return Maximum version as float or header version if catalog version is invalid
3046 Masks and returns attribute revisions for the structure element. @return Revisions object containing PDAttributeObject instances
3047 Checks if attribute is valid and has non-null owner. @return true if condition met, false otherwise
3048 Retrieves and converts the parent structure node. @return PDStructureNode instance or null if not found
3049 Processes a child node to determine its object or integer value. @param kid the child node to process @return the corresponding COSObjectable instance or integer value, or null if unsupported
3050 Updates and masks user property by name. @param name new name for the user property
3051 Initializes PDF encryption with a given dictionary. @param dictionary containing encryption settings
3052 Retrieves the configured security handler. @throws IOException if no security handler is available @return SecurityHandler instance associated with the protection policy
3053 Retrieves annotations from the FDF document. @return List of FDFAnnotation objects or null if none exist
3054 Determines if a font matches CID system info criteria. @param cidSystemInfo CID font information @param info font information to match @return true if the font matches, false otherwise
3055 Checks if DeviceN color space has valid attributes. @return true if attributes are not null and of type "NChannel", false otherwise
3056 Retrieves the destination or action specified by the document's open action. @return PDDestinationOrAction object or null if not found or unsupported type
3057 Retrieves and creates an action associated with the field. @return PDAction object or null if not found or unsupported
3058 Retrieves JavaScript actions from the document's FDF context. @return Map of named JavaScript actions or null if none found
3059 Retrieves subsequent actions from a PDF document. @return List of PDAction objects or null if none found
3060 Retrieves and creates a PDAction based on the 'F' key in actions. @return PDAction object or null if 'F' key is not found or type is unsupported
3061 Retrieves and returns the action associated with the 'E' key. @return PDAction object or null if not found
3062 Retrieves and creates an action for the 'X' key. @return PDAction object or null if no valid action found
3063 Retrieves and creates a PDAction for the D (Down) event. @return PDAction object or null if not found or unsupported type
3064 Retrieves and creates an action for mouse up event. @return PDAction object or null if not found
3065 Retrieves and creates an action associated with the "FO" key. @return PDAction object or null if not found
3066 Retrieves and creates an action for the 'BL' (Before Load) event. @return PDAction object or null if no action is defined
3067 Retrieves and creates an action associated with the "PO" key. @return PDAction object or null if not found
3068 Retrieves and creates an action for a page close event. @return PDAction object or null if no action is defined
3069 Retrieves and creates an action associated with the 'PV' key. @return PDAction object or null if not found
3070 Retrieves and creates a PDAction for the "PI" action. @return PDAction object or null if not found or unsupported
3071 Retrieves and returns the WC action from PDF document catalog. @return PDAction object or null if not found
3072 Retrieves and creates an action associated with a specific event in the PDF document. @return PDAction object or null if no associated action is found
3073 Retrieves and creates a DS action from the document's catalog. @return PDAction object for DS or null if not found
3074 Retrieves an action associated with document window opening. @return PDAction object or null if no action is defined
3075 Retrieves and returns the PDAction associated with the DP key. @return PDAction object or null if not found
3076 Retrieves and creates an action associated with the 'K' key. @return PDAction object or null if no action is found
3077 Retrieves and returns the action associated with the 'F' key. @return PDAction object or null if not found or unsupported
3078 Retrieves and creates an action associated with the 'V' key. @return PDAction object or null if not found
3079 Retrieves and creates an action associated with the 'C' key. @return PDAction object or null if no valid action found
3080 Retrieves and creates an action associated with the 'O' key. @return PDAction object or null if not found or unsupported type
3081 Retrieves and creates an action associated with a PDF page. @return PDAction object or null if no action is found
3082 Retrieves and creates an action associated with the annotation. @return PDAction object or null if no valid action is found
3083 Retrieves and creates an action associated with the annotation. @return PDAction object or null if no action is found
3084 Retrieves and creates an action associated with this outline item. @return PDAction object or null if not found or unsupported
3085 Retrieves metadata value by key from PDF document. @param propertyKey the metadata key to fetch @return metadata value or null if not found
3086 Retrieves metadata field value from PDF document. @param fieldName name of the metadata field to retrieve @return value of the specified metadata field or null if not found
3087 Retrieves string value from COSDictionary using given key. @param name the key to look up in the dictionary @return decoded string or null if not found
3088 Retrieves the 'Base' string from the URI dictionary. @return decoded 'Base' string or null if not found
3089 Retrieves the mask value from the dictionary. @return mask string or null if not found
3090 Retrieves the unit mask from the number format dictionary. @return decoded string representing the unit mask or null if not found
3091 Retrieves string value by key or returns default if not found. @param key the key to look up in the dictionary @param defaultValue value to return if key is not found @return decoded string or provided default value
3092 Retrieves a string value from an embedded COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the value from within the embedded dictionary @param defaultValue default value if key is not found @return decoded string or provided default value
3093 Retrieves operation type from parameters. Uses COSDictionary to get operation value or defaults to OPEN. @return String representing the operation type
3094 Retrieves default appearance string from dictionary. @return Default appearance string or empty if not found
3095 Retrieves file specification mask. Tries multiple methods to get the filename. @return decoded filename or null if not found
3096 Masks user property if it has changed. @param formattedValue the new value to be set and masked
3097 Checks if a specific optional content group is present. @param groupName name of the optional content group to check @return true if the group is found, false otherwise
3098 Constructs the full field name by concatenating with parent's field name. @return complete field name including hierarchy or null if none exists
3099 Retrieves or creates a COSName instance and fetches its Calendar value. @param key the name string to process @param defaultValue default Calendar to return if key is not found @return Calendar instance or provided default if null
3100 Retrieves a Calendar value from an embedded COSDictionary. @param embedded the name of the embedded dictionary to look up @param key the key whose associated Calendar value is sought @param defaultValue default Calendar to return if not found @return Calendar instance or provided default if null
3101 Retrieves the revision number from the digital signature properties. @return the revision number as a long value
3102 Retrieves version mask from digital signature properties. @return numeric value representing version mask
3103 Creates a COSInputStream for PDF decoding. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @param options DecodeOptions for additional settings @return COSInputStream with decoded data @throws IOException if I/O error occurs
3104 Retrieves and decodes the stream data. @return RandomAccessRead buffer with decoded data @throws IOException if I/O error occurs
3105 Creates an input stream for the PDF stream with optional filter exclusion. @param stopFilters list of filter names to exclude during decoding @return InputStream containing decoded data or original stream if no filters applied @throws IOException if I/O error occurs
3106 Retrieves float value of an attribute by name. @param name attribute key @return float value from dictionary or default (-1)
3107 Retrieves a float value from the number format dictionary. @return float value associated with key "C"
3108 Constructs a PDFunctionType2 from a COSBase object. Initializes control points (c0, c1) and exponent value (N). @param function the COSBase object representing the PDF function
3109 Retrieves the lower-left corner y-coordinate of the line annotation. @return float value representing the y-coordinate or default value if not found
3110 Retrieves the lower-left edge x-coordinate of the line annotation. @return float value representing the x-coordinate or default -1 if not found
3111 Retrieves the line length offset of the annotation. @return float value representing the line length offset
3112 Retrieves the mask value from the dictionary. @return float value representing the mask or default of -1 if not found
3113 Retrieves the CYX value from measurement data. @return float value of CYX or default -1 if not found
3114 Retrieves a masked float value from the dictionary. @param name key to look up in the dictionary @param defaultValue default float value if key not found or not a COSNumber @return float value from dictionary or default value
3115 Retrieves intensity of border effect. @return float value representing effect intensity or default if not found
3116 Calculates the mask height for a given PDF font. Adjusts bounding box and uses font metrics to determine height. @param font the PDFont object @return float value representing the mask height @throws IOException if an I/O error occurs
3117 Writes a list of PDF tokens to the output stream. @param tokens List of objects representing PDF content @throws IOException if writing fails
3118 Retrieves decode parameters from PDF stream. @return List of decoded parameter objects or null if not found @throws IOException if an error occurs during retrieval
3119 Fetches decode parameters from PDF stream. @return List of decode parameters or null if not found @throws IOException if an error occurs during processing
3120 Masks a structure element by setting its parent and adding it to the node. @param structureElement the PDStructureElement to be masked
3121 Updates child reference in structure node. @param newKid new child element to insert @param refKid reference to the old child element
3122 Masks a structure element by removing its parent reference. @param structureElement the PDStructureElement to be masked @return true if masking was successful, false otherwise
3123 Computes position vector for a CID. @param cid Character Identifier @return Vector representing font metrics
3124 Retrieves a PDPropertyList from the resources. @param name key for the specific resource within the dictionary @return PDPropertyList instance or null if not found
3125 Retrieves the optional content property list. @return PDPropertyList for optional content or null if none exists
3126 Retrieves and processes optional content dictionary. @return PDPropertyList object or null if not found
3127 Retrieves optional content groups from the dictionary. @return List of PDPropertyList representing OCGs or an empty list if not found
3128 Retrieves and creates a PDPropertyList for optional content. @return PDPropertyList object or null if not found
3129 Constructs a new PDAnnotationCaret instance. @param field the COSDictionary containing annotation data
3130 Constructs a new file attachment annotation. @param field COSDictionary containing annotation data
3131 Constructs a new PDAnnotationFreeText instance. @param field the COSDictionary containing annotation data
3132 Constructs a new PDAnnotationInk instance. @param dict the COSDictionary containing annotation data
3133 Constructs a new PDAnnotationLine instance. @param field COSDictionary containing annotation data
3134 Constructs a new PDAnnotationPolygon instance. @param dict the COSDictionary containing annotation data
3135 Constructs a new PDAnnotationPolyline instance. @param dict the COSDictionary containing annotation data
3136 Constructs a new rubber stamp annotation. @param field COSDictionary containing annotation data
3137 Constructs a new PDAnnotationSound instance. @param field the COSDictionary containing annotation data
3138 Constructs a square or circular annotation from a COSDictionary. @param dict the dictionary containing annotation properties
3139 Constructs a new PDAnnotationText instance. @param field the COSDictionary containing annotation data
3140 Constructs a new PDAnnotationTextMarkup instance. @param field the COSDictionary containing annotation data
3141 Retrieves and returns a PDAnnotationPopup associated with the annotation. @return PDAnnotationPopup object or null if not found
3142 Retrieves all annotation widgets associated with the terminal field. @return List of PDAnnotationWidget objects
3143 Clones a PDFBase object handling self-references. @param base the original COSBase object to clone @return cloned COSBase object or original if already cloned @throws IOException if an I/O error occurs during cloning
3144 Prepares and writes a COSStream with object data and offsets. @param stream target COSStream to write to @return the prepared COSStream @throws IOException if an I/O error occurs during writing
3145 Writes a COSArray to the output stream. @param output OutputStream for writing @param cosArray COSArray to serialize @throws IOException if an I/O error occurs
3146 Applies cloud mask to a polygon or ellipse. @param vertices array of points defining the shape @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during processing
3147 Encodes an image for PDF inclusion with PNG filtering. @return PDImageXObject instance with encoded image data @throws IOException if I/O operations fail
3148 Sets the destination for this outline item to a page. @param page PDF page to navigate to
3149 Masks and decrypts a PDF stream. @param stream the COSStream to process @param objNum unique object identifier @param genNum generation number of the object @throws IOException if I/O error occurs during processing
3150 Creates an embedded Go-To action for PDF navigation. Initializes the action with a specific subtype for embedding.
3151 Constructs a new PDActionGoTo action. Initializes the action with a specific subtype for navigation.
3152 Initializes a PDF action to hide elements. Sets the subtype to 'Hide'.
3153 Initializes an import data action for PDF. Sets the subtype to 'Import'.
3154 Initializes a JavaScript action with default settings.
3155 Initializes a PDF launch action. Sets the subtype to "Launch".
3156 Constructs a new PDActionMovie instance. Initializes the action subtype to "Movie".
3157 Initializes a named PDF action. Sets the subtype to SUB_TYPE.
3158 Constructs a remote navigation action. Initializes with default settings and sets the subtype.
3159 Initializes a reset form action. Sets the subtype to "ResetForm".
3160 Initializes a sound action with default settings. Sets the subtype to "Sound".
3161 Creates a new PDF form submission action.
3162 Initializes a PDF thread action. Sets the subtype to "Thread".
3163 Initializes a URI action. Sets the subtype to 'URI'.
3164 Constructs a new highlight annotation.
3165 Creates a new squiggly annotation.
3166 Initializes a strikeout annotation.
3167 Constructs a new underline annotation. Initializes with the default subtype for underlines.
3168 Creates a masked BufferedImage using tiling patterns. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to apply as mask @param colorSpace PDColorSpace of the mask color @param color PDColor used in the mask @param xform AffineTransform defining the transformation @param anchorRect Rectangle2D defining the anchor area @return BufferedImage with applied tiling pattern mask @throws IOException if an I/O error occurs during processing
3169 Generates a mask rectangle for a tiling pattern. @param pattern the tiling pattern to process @return a Rectangle2D representing the mask or null if invalid
3170 Applies a mask to the image using the specified paint. @param paint the color used for masking @return BufferedImage with applied mask or null if invalid @throws IOException if an error occurs during processing
3171 Masks a PDF image and returns its writable raster. @param pdImage the PDF image to be masked @return WritableRaster containing the masked image data @throws IOException if processing fails or invalid dimensions
3172 Applies a mask to a PDF image based on color key and clipping. @param pdImage source image from PDF document @param region region of interest in the image @param subsampling level of subsampling @param colorKey COSArray defining color key ranges @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
3173 Retrieves or creates the resources for this PDF page. @return PDResources object representing the page's resources
3174 Retrieves the page's media box dimensions. @return PDRectangle representing the media box or U.S. Letter if not found
3175 Retrieves the rotation angle of the page. @return normalized rotation angle in degrees, multiple of 90
3176 Retrieves or creates a COSName instance and checks its boolean value. @param key the name string to process @param defaultValue default boolean value if key is missing @return boolean value from dictionary or default if not found
3177 Checks if a specific flag is set in the file specification. @return true if the flag is set, false otherwise
3178 Checks if a specific property is hidden. @return true if property is hidden, false otherwise
3179 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
3180 Checks if line annotation has a cap style. @return true if cap style is enabled, false otherwise
3181 Determines if mask fitting is enabled. @return true if mask fitting is enabled, false otherwise
3182 Checks if renaming is enabled in the FDF template. @return true if renaming is enabled, false otherwise
3183 Checks if mask is enabled. @return true if mask is enabled, false otherwise
3184 Checks if mask is enabled by key K. @return true if mask is enabled, false otherwise
3185 Checks if anti-aliasing is enabled. @return true if anti-aliasing is enabled, false otherwise
3186 Checks if overprint is enabled. @return true if overprint is enabled, false otherwise
3187 Checks if soft mask is applied. @return true if soft mask is enabled, false otherwise
3188 Determines if alpha source is ignored. @return true if alpha source is ignored, false otherwise
3189 Determines mask status from dictionary. @return boolean value indicating mask status or default true
3190 Checks if the 'H' flag is set in the PDF action. @return true if 'H' flag is set, otherwise default to true
3191 Checks if sound action is synchronous. @return true if synchronous, false otherwise
3192 Determines if sound should repeat. @return true if sound repeats, false otherwise
3193 Checks if sound mixing is enabled. @return true if mixing is enabled, false otherwise
3194 Determines if line annotation has a cap style. @return true if line has cap style, false otherwise
3195 Determines if the annotation is open by default. @return true if open by default, false otherwise
3196 Determines if the digital signature is in pre-release mode. @return true if pre-release flag is set, false otherwise
3197 Checks if non-EFont warning is masked. @return true if warning is masked, false otherwise
3198 Checks if trusted mode is enabled. @return true if trusted mode is enabled, false otherwise
3199 Checks if form fields need appearances. @return true if field appearances are needed, false otherwise
3200 Determines if mask is enabled. @return true if mask is enabled, false otherwise
3201 Determines if toolbar is hidden. @return true if toolbar is hidden, false otherwise
3202 Determines if the menu bar is hidden. @return true if menu bar is hidden, false otherwise
3203 Determines if window UI is hidden. @return true if window UI is hidden, false otherwise
3204 Determines if PDF window should fit to content. @return true if window fits content, false otherwise
3205 Determines if the PDF window should be centered. @return true if centering is enabled, false otherwise
3206 Determines if document title is displayed. @return true if display doc title preference is enabled, false otherwise
3207 Sets or clears a bit flag for a given field. @param field the COSName key to update @param bitFlag the specific bit flag to modify @param value true to set, false to clear the bit flag
3208 Retrieves integer value from an embedded dictionary. @param embeddedDictionary name of the embedded dictionary @param key primary key to search within the dictionary @param defaultValue value to return if no valid number found @return integer value from dictionary or default
3209 Retrieves integer value by key or returns default. @param key primary key to search @return integer value from dictionary or -1 if not found
3210 Retrieves integer value by key or returns default. @param key primary key to search @return integer value from dictionary or -1 if not found
3211 Converts string key to COSName and retrieves integer value. @param key key as string @param defaultValue default value if not found @return integer value from dictionary or default
3212 Checks if a specific bit flag is set in an integer value retrieved by key. @param field primary key to search for the integer value @param bitFlag bit flag to check within the integer value @return true if the bit flag is set, false otherwise
3213 Retrieves a COSDictionary representing the specified page number from the PDF page tree. @param pageNum 1-based page number to retrieve @param node current node in the page tree @param encountered count of pages already processed @return COSDictionary for the specified page or throws exception if not found
3214 Retrieves the count of pages in the PDF document. @return integer representing the number of pages or 0 if not found
3215 Retrieves start page number with default of 1. @return starting page number or 1 if not set
3216 Retrieves function order mask. @return integer value representing function order or default 1
3217 Retrieves mask value from PDF element. @return integer mask value or default (0)
3218 Retrieves the encryption length from the crypt filter dictionary. @return encryption length or default value of 40 if not specified
3219 Retrieves the mask value for encryption. @return mask value or default if not found
3220 Retrieves encryption key length. @return default key length or value from dictionary
3221 Retrieves the encryption version from the PDF document. @return encryption version number or default if not found
3222 Retrieves permission mask from PDF encryption settings. @return integer value representing permissions or default if not found
3223 Retrieves justification setting of annotation. @return string representation of justification value
3224 Retrieves font flags. @return integer value representing font flags
3225 Creates a PDAbstractPattern instance based on the pattern type. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for managing resources @return PDAbstractPattern object or throws IOException if unknown type
3226 Retrieves paint type from tiling pattern. @return integer value representing paint type or default (0)
3227 Retrieves tiling pattern type. @return integer representing tiling type or default value if not found
3228 Creates a PDShading object based on the given dictionary. @param shadingDictionary COSDictionary containing shading properties @return PDShading instance corresponding to the shading type @throws IOException if unknown shading type is encountered
3229 Retrieves bits per flag value. @return integer value representing bits per flag or -1 if not found
3230 Retrieves vertices per row setting. @return number of vertices per row or -1 if not set
3231 Retrieves bits per color component for shading. @return number of bits per color component
3232 Calculates the mask for coordinate bits. @return integer value representing the bit mask
3233 Retrieves action flags. @return integer value of flags or default if not found
3234 Retrieves action flags mask. @return integer value of action flags or default (0)
3235 Retrieves mask value for PDF target directory. @return integer mask value or -1 if not found
3236 Retrieves mask value from dictionary. @return integer mask value or -1 if not found
3237 Retrieves mask value from annotation dictionary. @return integer mask value or 0 if not found
3238 Retrieves quadding mode for text annotation. @return integer value representing quadding mode or default (0)
3239 Retrieves rotation setting of annotation. @return integer value representing rotation angle or default (0)
3240 Checks if a specific flag is set in the dictionary. @return true if flag is set, false otherwise
3241 Retrieves count of child outline items. @return integer count or 0 if not found
3242 Retrieves the field's quadding mode. @return integer representing the quadding mode or default value if not set
3243 Retrieves top index of displayed items in the list box. @return integer value representing the top index or default (0)
3244 Retrieves COSObjects by specified type. @param type COSName type to match @return List of COSObjects matching the specified type
3245 Retrieves and returns the page tree of the PDF document. @return PDPageTree object representing the document's pages
3246 Loads and parses an FDF document from a file. @param file the FDF file to load @return FDFDocument containing parsed data or null on error @throws IOException if an I/O error occurs during loading or parsing
3247 Parses an FDF document from an InputStream. @param input the InputStream containing the FDF data @return FDFDocument object or null on error @throws IOException if parsing fails
3248 Parses and loads a PDF document in lenient mode. @return PDDocument object if successful @throws IOException if an error occurs during parsing or loading
3249 Clears page resources by removing them from cache. @param COSName.RESOURCES key for accessing page resources in the cache
3250 Retrieves a PDColorSpace by name. @param name the COSName of the colorspace @return PDColorSpace object or null if not found
3251 Adds a font resource to the PDF document. @param font font object to be added @return unique COSName for the font resource
3252 Adds a colorspace resource to the PDF document. @param colorSpace colorspace object to be added @return unique COSName for the colorspace resource
3253 Adds an extended graphics state to the PDF document. @param extGState extended graphics state object @return unique COSName for the added graphics state
3254 Adds a shading resource to the PDF document. @param shading shading object to be added @return unique COSName for the shading resource
3255 Adds a pattern resource to the PDF document. @param pattern pattern object to be added @return unique COSName for the pattern resource
3256 Adds a property list to the PDF document. @param properties property list to be added @return unique COSName for the resource
3257 Adds an image resource to the PDF document. @param image PDImageXObject representing the image to be added @return unique COSName for the added image resource
3258 Adds a form resource to the PDF document. @param form PDFormXObject to be added @return unique COSName for the form resource
3259 Adds an XObject to the PDF document. @param xobject image or form object to be added @param prefix base string for the name @return unique COSName for the XObject
3260 Retrieves the embedded file associated with key 'F'. @return PDEmbeddedFile object or null if not found
3261 Retrieves the embedded file associated with DOS. @return PDEmbeddedFile object or null if not found
3262 Retrieves and returns the embedded file for macOS. @return PDEmbeddedFile object or null if not found
3263 Retrieves the embedded file for UNIX systems. @return PDEmbeddedFile object or null if not found
3264 Retrieves the embedded file associated with the UF key. @return PDEmbeddedFile object or null if not found
3265 Determines if a given PDOptionalContentGroup is enabled. @param group the optional content group to check @return true if the group is enabled, false otherwise
3266 Enables or disables an optional content group by name. @param groupName name of the OCG to modify @param enable true to enable, false to disable @return true if operation successful, false otherwise
3267 Retrieves or initializes the normal appearance entry for an annotation. @return PDAppearanceEntry representing the normal state appearance
3268 Retrieves or creates a rollover appearance entry for an annotation. @return PDAppearanceEntry for the rollover state
3269 Retrieves or initializes the normal appearance entry for an annotation. @return PDAppearanceEntry for normal state or a newly created one if not found
3270 Masks button value at specified index. @param index position of the button in the form @throws IOException if an I/O error occurs
3271 Masks a new outline item as the first child. @param newChild the new PDOutlineItem to be added
3272 Masks a new outline item in the PDF document. @param newChild the PDOutlineItem to be masked
3273 Finds a matching PDSignatureField in the document. @param fieldIterator iterator for PDF fields @param sigObject digital signature to match @return PDSignatureField with matching signature or null if not found
3274 Retrieves the appearance stream for a PDF annotation. @param annotation PDF annotation object @return PDAppearanceStream object or null if not found
3275 Processes font resources from annotation appearance streams. @param acroFormResources PDResources of the AcroForm @param annotation PDF annotation to process
3276 Retrieves masked values from button options. @return Set of masked string values or empty set if none found
3277 Checks if the checkbox is in its off state. @return true if checkbox is unchecked, false otherwise
3278 Masks the checkbox by setting its state to off. @throws IOException if an I/O error occurs
3279 Searches for a PDF page in the tree and returns its index. @param page PDPage object representing the document page @return index of the page if found, -1 otherwise
3280 Sets parent node and updates limits. @param parentNode the parent node to set
3281 Updates node with children and limits. @param kids list of child nodes to process
3282 Sets or clears the names and limits for this node. @param names map of name-value pairs to be set
3283 Initializes page labels for a PDF document using a dictionary. @param document the PDDocument to apply labels to @param dict the COSDictionary containing label data @throws IOException if an I/O error occurs during initialization
3284 Retrieves the range for a specific parameter using FUNC_MASK. @param paramNum index of the parameter @return PDRange object or null if not valid
3285 Constructs a new PDCalGray instance. Initializes with the COSName.CALGRAY name.
3286 Constructs a PDCalRGB color space with default settings.
3287 Initializes a CIE LAB color space.
3288 Constructs a PDCalGray object from a COSArray. @param array CosArray representing CALGRAY color space values
3289 Constructs a PDCalRGB object from a COSArray. @param rgb array representing RGB color components
3290 Initializes the LAB color space with provided array. @param lab COSArray containing LAB values
3291 Initializes axial shading context. @param shading PDShadingType2 object defining shading properties @param colorModel Color model for rendering @param xform Transform applied to device coordinates @param matrix Transformation matrix @param deviceBounds Bounds of the device area @throws IOException if an I/O error occurs during processing
3292 Initializes a RadialShadingContext for rendering radial gradients. @param shading PDShadingType3 object defining the gradient @param colorModel ColorModel for rendering colors @param xform AffineTransform for device space to user space conversion @param matrix transformation matrix for shading space to device space @param deviceBounds bounding rectangle in device space @throws IOException if an I/O error occurs
3293 Initializes a new TriangleBasedShadingContext for PDF rendering. @param shading PDShading instance to manage @param cm ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if color space creation fails
3294 Initializes a Type1ShadingContext for PDF rendering. @param shading PDShadingType1 object defining the shading @param colorModel ColorModel for rendering @param xform initial transformation matrix @param matrix additional transformation matrix @throws IOException if an I/O error occurs
3295 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
3296 Retrieves a PDRange for specified parameter. @param paramNum index of the parameter @return PDRange object or null if not available
3297 Retrieves a string value from the dictionary using a given key. @param name the key to look up in the dictionary @param defaultValue the value to return if the key is not present @return the decoded string value or the provided default
3298 Retrieves the mask value for solid style. @return the mask string or default value if key not found
3299 Sets line width and dash pattern for PDF appearance. @param lineWidth the desired line width @param bs border style dictionary @param border COSArray representing border properties @throws IOException if an I/O error occurs during processing
3300 Creates a new PDF document with metadata and catalog settings from the source document. @return PDDocument representing the newly created PDF @throws IOException if an I/O error occurs during document creation
3301 Updates the PDF document version. @param newVersion the new version number to be set
3302 Traverses up the structure hierarchy to find the root. @return PDStructureTreeRoot instance or null if not found
3303 Retrieves and processes child objects of the structure node. @return List of processed child objects or empty list if none found
3304 Retrieves or initializes PDF encryption. @return PDEncryption object for the document
3305 Initializes encryption and decryption settings. Handles PDF document encryption by parsing the encryption dictionary and setting up security handlers.
3306 Initializes font encoding and CMap. Sets up CMap based on font dictionary encoding. Checks for valid CMap and logs warnings if invalid.
3307 Calculates the valid offset for font data. @param bytes font data byte array @param length1 initial length to consider @return adjusted offset for font processing
3308 Validates and adjusts length2 for Type 1 font processing. @param bytes byte array containing font data @param length1 initial length parameter @param length2 length to validate and adjust @return valid length2 or adjusted value if invalid
3309 Retrieves fractional display format. @return formatted string representing fractional display
3310 Retrieves formatted string with key "RT". @return formatted string or "," if key not found
3311 Retrieves the number format dictionary and returns its string value. @return formatted string or default separator "."
3312 Retrieves PS value from dictionary or returns space if not found. @return PS string or space if key is missing
3313 Retrieves formatted string from dictionary. @return decoded string or space if key "SS" not found
3314 Retrieves the mask value from the number format dictionary. @return String representing the mask or default value if not found
3315 Retrieves a string value from an embedded COSDictionary. @param embedded key for the embedded dictionary @param key key to retrieve the value from within the embedded dictionary @return decoded string or null if key is not found
3316 Creates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object containing font details @param cidSystemInfo PDCIDSystemInfo object for CID font matching @return PriorityQueue of FontMatch objects sorted by match score
3317 Retrieves a Calendar value from an embedded COSDictionary. @param embedded the name of the embedded dictionary to look up @param key the key whose associated Calendar value is sought @return Calendar instance or null if not found
3318 Creates a COSInputStream for PDF decoding with default options. @param filters List of Filter objects to apply @param parameters COSDictionary with decoding parameters @param in InputStream containing encoded data @return COSInputStream with decoded data @throws IOException if I/O error occurs
3319 Initializes a PDFObjectStreamParser with the given COSStream and document. @param stream PDF object stream to parse @param document parent PDF document @throws IOException if required entries are missing or invalid
3320 Initializes a new PDFXrefStreamParser to parse the given COSStream. @param stream COSStream containing xref data @throws IOException if I/O error occurs during initialization
3321 Constructs a PDCIDFontType0 instance. @param fontDictionary the COS dictionary for the font @param parent the parent PDType0Font object @throws IOException if an I/O error occurs during font processing
3322 Initializes a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the PDType0Font parent @param trueTypeFont the TrueTypeFont to use @throws IOException if an I/O error occurs
3323 Retrieves a CMap based on the provided COSBase. @param base COSName or COSStream containing the CMap data @return CMap object or null if not found @throws IOException if I/O error occurs or input is invalid
3324 Constructs a circular annotation from a COSDictionary. @param field dictionary containing annotation properties
3325 Constructs a square annotation from a COSDictionary. @param field dictionary containing annotation properties
3326 Constructs a new PDAnnotationHighlight instance. @param dict the COSDictionary containing annotation data
3327 Constructs a new PDAnnotationSquiggly instance. @param dict the COSDictionary containing annotation data
3328 Constructs a new PDAnnotationStrikeout instance. @param dict the COSDictionary containing annotation data
3329 Constructs a new PDAnnotationUnderline instance. @param dict the COSDictionary containing annotation data
3330 Recursively clones and maps objects in a PDF structure tree. @param cloner utility for cloning PDF objects @param parentTreeEntry current entry in the structure tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during cloning
3331 Merges entries from source to destination dictionary, excluding specified keys. @param src source COSDictionary containing items to merge @param dst destination COSDictionary where items are added @param cloner utility for cloning PDFBase objects @param exclude set of COSName keys to exclude from merging @throws IOException if I/O error occurs during cloning
3332 Processes PDF document objects for writing. @param doc the COSDocument to process @throws IOException if an I/O error occurs during processing
3333 Applies a cloud mask to a polygon based on given path coordinates. @param path 2D float array representing the polygon vertices @throws IOException if an I/O error occurs during processing
3334 Applies a mask to create a cloudy effect. @param left bounding box left coordinate @param bottom bounding box bottom coordinate @param right bounding box right coordinate @param top bounding box top coordinate @param isEllipse flag indicating if the shape is an ellipse @throws IOException if an I/O error occurs during processing
3335 Constructs a JavaScript action with specified code. @param js JavaScript code string to be executed in PDF
3336 Initializes TilingPaint with specified parameters. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to apply @param colorSpace PDColorSpace of the mask color @param color PDColor used in the mask @param xform AffineTransform defining the transformation @throws IOException if an I/O error occurs during processing
3337 Applies mask to PDF image based on specified region and subsampling. @param region area of interest in the image @param subsampling level of subsampling for processing @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
3338 Converts PDImage to BufferedImage with optional clipping and subsampling. @param pdImage source image from PDF document @param colorKey COSArray defining color key ranges @return BufferedImage representation of the image with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
3339 Determines and sets the resource dictionary for a content stream. @param contentStream PDF content stream to process @return previous resources object
3340 Calculates transformation for centering an overlay on a PDF page. @param page the target PDF page @param overlayMediaBox dimensions of the overlay content @return AffineTransform for centering the overlay
3341 Masks a rectangle with another by setting the maximum coordinates. @param box the rectangle to mask with @return new PDRectangle with masked coordinates
3342 Adjusts the rectangle for page rotation. @param page the PDF page to process @return PDRectangle adjusted for rotation or original if not rotated
3343 Checks if the PDF element is marked. @return true if marked, false otherwise
3344 Checks if user properties are masked in the PDF. @return true if UserProperties are masked, false otherwise
3345 Checks if the document has any suspected elements. @return true if there are suspected elements, false otherwise
3346 Checks if the action is a map. @return true if the action is a map, false otherwise
3347 Determines if the popup annotation is open. @return true if the popup is open, false otherwise
3348 Checks if fractional digits are masked. @return true if FD is set to false, otherwise false
3349 Masks or unmasks a user property based on visibility. @param hidden true to mask the property, false to unmask it
3350 Checks if non-stroking overprint is enabled. @return true if non-stroking overprint is enabled, false otherwise
3351 Draws an inline image at specified coordinates. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
3352 Sets the visibility of the annotation. @param invisible true to make the annotation invisible, false otherwise
3353 Sets or clears the hidden flag of the annotation. @param hidden true to hide, false to show the annotation
3354 Sets the printed flag of the annotation. @param printed true if the annotation is marked as printed
3355 Sets or clears the 'No Zoom' flag for an annotation. @param noZoom true to disable zooming, false otherwise
3356 Sets or clears the NO_ROTATE flag for the annotation. @param noRotate true to set, false to clear the flag
3357 Sets or clears the 'no view' flag for an annotation. @param noView true to hide the annotation, false to show it
3358 Sets the read-only flag of the annotation. @param readOnly true to make the annotation read-only, false otherwise
3359 Sets or clears the locked flag of the annotation. @param locked true to lock, false to unlock the annotation
3360 Toggles the 'no view' flag of the annotation. @param toggleNoView true to enable, false to disable the no view flag
3361 Sets or clears the locked contents flag of an annotation. @param lockedContents true to lock, false to unlock the contents
3362 Sets visibility of annotation. @param invisible true to make annotation invisible
3363 Sets or clears the hidden flag of the annotation. @param hidden true to hide, false to show the annotation
3364 Sets the printed flag of the annotation. @param printed true to mark as printed, false otherwise
3365 Sets or clears the 'no zoom' flag for an annotation. @param noZoom true to prevent zooming, false otherwise
3366 Sets or clears the NO_ROTATE flag. @param noRotate whether to set or clear the flag
3367 Sets or clears the 'no view' flag for this annotation. @param noView true to set, false to clear the flag
3368 Sets or clears the read-only flag of the annotation. @param readOnly true to set as read-only, false otherwise
3369 Sets or clears the locked flag of the annotation. @param locked true to lock, false to unlock the annotation
3370 Toggles the "no view" flag of the annotation. @param toggleNoView true to set, false to clear the flag
3371 Sets the annotation's contents lock status. @param lockedContents true to lock contents, false to unlock
3372 Sets or clears the filter flag in seed value attributes. @param flag true to set, false to clear the filter flag
3373 Sets the FF subfilter flag. @param flag value to set the FF subfilter flag
3374 Sets or clears the digest method flag. @param flag true to set, false to clear the flag
3375 Sets or clears the validation flag in seed value information. @param flag true to set the flag, false to clear it
3376 Sets or clears the reason bit flag in seed value information. @param flag true to set, false to clear the reason bit
3377 Sets or clears the legal attestation flag. @param flag true to set, false to clear the flag
3378 Sets or clears the revision information flag. @param flag true to set, false to clear the flag
3379 Sets or clears the subject flag in the certificate. @param flag true to set, false to clear the subject flag
3380 Sets or clears the issuer flag in the certificate. @param flag true to set the flag, false to clear it
3381 Sets or clears the mask flag in the certificate. @param flag true to set, false to clear the mask flag
3382 Masks or unmasks the subject DN field in the certificate. @param flag true to mask, false to unmask
3383 Sets or clears the key usage flag in the certificate. @param flag true to set, false to clear the key usage flag
3384 Sets or clears the URL flag in the certificate. @param flag true to set, false to clear the URL flag
3385 Sets or clears the italic flag for this outline item. @param italic true to set italic, false to clear it
3386 Sets or clears the bold flag for this outline item. @param bold true to set bold, false to clear it
3387 Sets or clears the signature flag in the form's dictionary. @param signaturesExist true if signatures exist, false otherwise
3388 Sets or clears the append-only flag in form settings. @param appendOnly true to set, false to clear the append-only flag
3389 Sets or clears the sort flag for choice fields. @param sort true to enable sorting, false to disable
3390 Sets or clears the multi-select flag for PDF choice fields. @param multiSelect true to enable multi-selection, false otherwise
3391 Sets or clears the spell-check flag for choice fields. @param doNotSpellCheck true to disable spell-check, false to enable it
3392 Sets whether changes should be committed upon selection. @param commitOnSelChange true to enable automatic commit on selection change
3393 Sets or clears the combo flag for choice fields. @param combo true to enable combo mode, false otherwise
3394 Toggles editable state of the combo box. @param edit true to make combo box editable, false otherwise
3395 Sets or clears the read-only flag for the field. @param readonly true to make the field read-only, false otherwise
3396 Sets or clears the required flag for the field. @param required true to mark the field as required, false otherwise
3397 Sets or clears the NO_EXPORT flag for the field. @param noExport true to prevent export, false otherwise
3398 Initializes a new PDPushButton instance. @param acroForm the AcroForm containing this button
3399 Initializes a new PDRadioButton instance. @param acroForm the AcroForm containing this radio button
3400 Sets whether radio buttons are in unison. @param radiosInUnison true if all selected together, false otherwise
3401 Sets or clears the multiline flag for the text field. @param multiline true to enable multiline input, false otherwise
3402 Sets or clears password protection flag. @param password true to enable, false to disable password protection
3403 Enables or disables file selection capability. @param fileSelect true to enable, false to disable
3404 Enables or disables spell-checking for the text field. @param doNotSpellCheck true to disable spell-checking, false to enable it
3405 Sets the 'Do Not Scroll' flag on the text field. @param doNotScroll true to prevent scrolling, false otherwise
3406 Enables or disables comb field mode. @param comb true to enable comb mode, false otherwise
3407 Toggles rich text formatting on or off. @param richText true to enable rich text, false to disable
3408 Retrieves integer value from an embedded dictionary with default value. @param embeddedDictionary name of the embedded dictionary @param key primary key to search within the dictionary @return integer value from dictionary or -1 if no valid number found
3409 Retrieves bitmask value from dictionary. @return integer representing bitmask or -1 if not found
3410 Creates a PredictorOutputStream if predictor > 1. @param out underlying output stream for writing data @param decodeParams dictionary containing decoding parameters @return configured OutputStream or original if no prediction needed
3411 Retrieves structure parent index of the page. @return integer value representing the structure parent or -1 if not found
3412 Adjusts page count by decrementing ancestors' counts. @param node starting COSDictionary node in the hierarchy
3413 Updates the page tree by adding a new page and adjusting parent counts. @param page PDPage object to be added
3414 Retrieves bits per sample mask. @return integer value representing bits per sample or -1 if not found
3415 Returns the Marker Context Identifier (MCID) of the marked content. @return MCID value from the COSDictionary or -1 if not found
3416 Retrieves mask value from parent tree. @return integer value representing mask or -1 if not found
3417 Retrieves the mask value associated with marked content. @return integer mask value or -1 if not found
3418 Creates a PDImageXObject from TIFF data. @param document PDF document to add the image @param reader source of TIFF data @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
3419 Retrieves line cap style from graphics state. @return integer value representing line cap style
3420 Retrieves line join style from graphics state dictionary. @return integer value representing line join style or -1 if not found
3421 Retrieves structure parent index of annotation. @return integer value representing structure parent or -1 if not found
3422 Retrieves mask value for signature configuration. @return integer representing mask setting or -1 if not found
3423 Retrieves maximum length of text field. @return Maximum allowed characters in the text field
3424 Retrieves an integer value from the COSDictionary using a string key. @param name key as string @param defaultValue default value if not found @return integer value from dictionary or default
3425 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
3426 Checks if the annotation is hidden. @return true if the annotation is hidden, false otherwise
3427 Checks if the annotation is printed. @return true if the 'Printed' flag is set, false otherwise
3428 Checks if the "No Zoom" flag is set in the annotation's F field. @return true if the "No Zoom" flag is set, false otherwise
3429 Checks if the annotation has the no-rotate flag set. @return true if no-rotate is enabled, false otherwise
3430 Checks if annotation is not visible. Uses getFlag with COSName.F and FLAG_NO_VIEW. @return true if annotation is not visible, false otherwise
3431 Checks if an annotation is read-only. @return true if the annotation is read-only, false otherwise
3432 Checks if the annotation is locked. @return true if the annotation is locked, false otherwise
3433 Checks if the annotation is set to toggle visibility. @return true if visibility toggling is enabled, false otherwise
3434 Checks if the annotation's contents are locked. @return true if contents are locked, false otherwise
3435 Checks if annotation is invisible. @return true if annotation is invisible, false otherwise
3436 Checks if annotation is hidden. @return true if annotation is hidden, false otherwise
3437 Checks if the annotation is printed. @return true if the annotation is marked as printed, false otherwise
3438 Checks if the annotation is zoom-independent. @return true if no-zoom flag is set, false otherwise
3439 Checks if the annotation has the no-rotate flag set. @return true if no-rotate flag is set, false otherwise
3440 Checks if the annotation is not visible. @return true if annotation is not visible, false otherwise
3441 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
3442 Checks if annotation is locked. @return true if locked, false otherwise
3443 Checks if the annotation is set to be non-viewable. @return true if annotation is non-viewable, false otherwise
3444 Checks if locked contents flag is set in annotation. @return true if contents are locked, false otherwise
3445 Checks if the FILTER flag is set in the seed value. @return true if FILTER flag is set, false otherwise
3446 Checks if the subfilter flag is set in the seed value information. @return true if the subfilter flag is set, false otherwise
3447 Checks if the digest method flag is set. @return true if the digest method flag is enabled, false otherwise
3448 Checks if the validation flag is set in the seed value. @return true if validation flag is set, false otherwise
3449 Checks if reason flag is set in seed value. @return true if reason flag is set, false otherwise
3450 Checks if legal attestation flag is set. @return true if legal attestation flag is enabled, false otherwise
3451 Checks if the add revision info flag is set in seed value attributes. @return true if the flag is set, false otherwise
3452 Checks if the subject flag is set in the certificate's FF field. @return true if the subject flag is set, false otherwise
3453 Checks if the issuer flag is set in the FF field. @return true if the issuer flag is set, false otherwise
3454 Checks if OID flag is set in the certificate. @return true if OID flag is set, false otherwise
3455 Checks if the SUBJECT_DN flag is set in the FF field of the certificate. @return true if the flag is set, false otherwise
3456 Checks if key usage flag is set in certificate attributes. @return true if key usage is required, false otherwise
3457 Checks if URL flag is set in the digital signature certificate. @return true if URL flag is set, false otherwise
3458 Checks if the italic flag is set in the outline item. @return true if italic flag is set, false otherwise
3459 Checks if the bold flag is set in the outline item. @return true if the bold flag is enabled, false otherwise
3460 Checks if signatures exist in the form. @return true if signatures are present, false otherwise
3461 Checks if the form is in append-only mode. @return true if append-only flag is set, false otherwise
3462 Checks if the button is of push type. @return true if the button is a push button, false otherwise
3463 Checks if radio button flag is set. @return true if radio button flag is enabled, false otherwise
3464 Checks if the sort flag is set for choice fields. @return true if sort flag is enabled, false otherwise
3465 Checks if multi-select is enabled for choice fields. @return true if multi-select flag is set, false otherwise
3466 Checks if spell-check is disabled for the choice field. @return true if spell-check is disabled, false otherwise
3467 Checks if the commit on selection change flag is set. @return true if the flag is set, false otherwise
3468 Checks if combo box flag is set. @return true if combo box flag is enabled, false otherwise
3469 Checks if the combo box is editable. @return true if editable flag is set, false otherwise
3470 Checks if the field is read-only. @return true if the field is read-only, false otherwise
3471 Checks if the field is marked as required. @return true if the field is required, false otherwise
3472 Checks if the 'no export' flag is set in the field's flags. @return true if the 'no export' flag is set, false otherwise
3473 Checks if radio buttons operate in unison. @return true if radios are in unison, false otherwise
3474 Checks if the text field supports multiline input. @return true if multiline is enabled, false otherwise
3475 Checks if the text field is password-protected. @return true if password protection is enabled, false otherwise
3476 Checks if file selection flag is set. @return true if file select flag is enabled, false otherwise
3477 Checks if spell-checking is disabled. @return true if spell-checking is disabled, false otherwise
3478 Checks if the text field does not scroll. @return true if the 'do not scroll' flag is set, false otherwise
3479 Checks if the text field is configured for comb presentation. @return true if comb flag is set, false otherwise
3480 Checks if the text field supports rich text formatting. @return true if rich text is enabled, false otherwise
3481 Retrieves and initializes a PDF page by index. @param index 1-based index of the page to retrieve @return PDPage object representing the specified page
3482 Retrieves the page count of the PDF document. @return integer representing the number of pages or 0 if not found
3483 Updates mask attributes for a PDF structure element. @param attributeObject the attribute object to process
3484 Updates mask value in attribute object. @param attributeObject the PDAttributeObject to modify
3485 Updates or initializes the mask for a PDF structure element. @param className name of the class to be associated with the mask
3486 Increments and sets the revision number of the PDF structure element.
3487 Handles decryption of PDF documents using public key cryptography. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray with document ID information @param decryptionMaterial Decryption material including private key @throws IOException if decryption fails or required data is missing
3488 Masks the owner password for PDF encryption. @return masked byte array of the owner password or null if not set
3489 Masks the user encryption key based on the PDF version. @return masked user encryption key or null if not available
3490 Creates a vector representing character width. @param code character code @return Vector with x component as character width in PDF units @throws IOException if an I/O error occurs
3491 Calculates the total width of a string in PDF font. @param text input string to measure @return float representing the total width @throws IOException on I/O error during processing
3492 Retrieves a PDAbstractPattern by name. @param name the resource name @return PDAbstractPattern object or throws IOException if not found
3493 Processes mask operations in a PDF content stream. @param contentStream PDContentStream object containing PDF data @throws IOException if an I/O error occurs during processing
3494 Retrieves a PDShading object by name. @param name the name of the shading resource @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
3495 Retrieves the PDShading object for the current pattern. @return PDShading instance or null if not found @throws IOException if an error occurs during retrieval
3496 Retrieves the number of bits per color component. Uses cached value if available; otherwise, fetches from PDF document. @return int representing bits per color component
3497 Retrieves the bits per color component for shading. @return number of bits per color component, defaulting to -1 if not set
3498 Returns the function mask for coordinate bits. @return integer value representing the bit mask
3499 Calculates the function mask for shading. @return integer value representing the function mask
3500 Checks if any child outline items are open. @return true if at least one item is open, false otherwise
3501 Creates a PDField based on the field type and attributes. @param form the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any @return PDField instance or null if unsupported type
3502 Initializes PDFPrintable with document and rendering settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality @param center flag to center pages during printing @param renderer PDFRenderer instance for rendering pages
3503 Initializes PDFRenderer with a specified document. @param document PDDocument object to render
3504 Loads and parses an FDF document from a file. @param filename path to the FDF file @return FDFDocument containing parsed data or null on error @throws IOException if an I/O error occurs during loading or parsing
3505 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
3506 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3507 Sets stroking color to RGB in PDF content stream. @param operator the operator for setting color @param arguments list of operands (not used)
3508 Retrieves and caches a PDF XObject by name. @param name the name of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an error occurs during retrieval
3509 Applies a mask to the given PDFont with specified size. @param font PDFont object to apply mask @param fontSize size of the font @throws IOException if an I/O error occurs
3510 Applies an extended graphics state to the PDF document. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
3511 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3512 Writes mask data to PDF stream. @param tag COSName for the mask @param propertyList PDPropertyList containing mask properties @throws IOException if writing fails
3513 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
3514 Draws an image within a specified area of the PDF. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
3515 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
3516 Adds a form resource to the PDF and draws it. @param form PDFormXObject to be added @throws IOException if an I/O error occurs during processing
3517 Checks if an optional content group by name is enabled. @param groupName the name of the content group to check @return true if the group is enabled, false otherwise
3518 Checks if an optional content group is enabled in the PDF. @param group the optional content group to check @return true if the group is enabled or properties are null, false otherwise
3519 Masks a new outline item as the first child and updates its properties. @param newChild the new PDOutlineItem to be added
3520 Masks a new outline item and updates related properties. @param newChild the PDOutlineItem to be masked and updated
3521 Validates button value against allowed options. @param value user input to validate @throws IllegalArgumentException if value is invalid
3522 Updates page destinations in the destination document. @param destinationDocument PDF document to update
3523 Retrieves and initializes page labels for the PDF document. @return PDPageLabels object or null if no labels are found @throws IOException if an I/O error occurs during retrieval
3524 Initializes a new instance of GouraudShadingContext. @param shading PDShading object representing the shading details @param colorModel ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates
3525 Prepares a new destination document for splitting. @throws IOException if an I/O error occurs during document creation or processing
3526 Writes PDF header and performs version checks. @param doc the COSDocument to process @throws IOException if an I/O error occurs
3527 Sets optional content properties for the document. @param ocProperties Optional content properties to be set
3528 Retrieves role mappings from the PDF structure tree. @return Map containing role mappings or an empty map if not found
3529 Prepares the PDF document for writing by setting up security, IDs, and objects. @param doc PDDocument to be written @param signInterface interface for signing the document @throws IOException if an I/O error occurs
3530 Handles PDF object compression and key assignment. @param key proposed or existing COSObjectKey @param base the COSBase object to process @return processed COSBase object
3531 Applies a protection policy to the PDF document. @param policy the ProtectionPolicy to apply @throws IOException if no suitable security handler is found
3532 Configures PDF encryption settings using public key cryptography. @param doc PDDocument to be encrypted @throws IOException if I/O error occurs during encryption
3533 Converts character code to glyph name. @param code character code to convert @return glyph name or ".notdef" if not found
3534 Maps character code to glyph ID. @param code character code to map @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
3535 Retrieves Mac OS subtype of the embedded file. @return subtype string or null if not found
3536 Retrieves creator information from Mac OS-specific embedded file parameters. @return Creator string or null if not found
3537 Retrieves Mac OS resource fork from embedded file parameters. @return resource fork string or null if not found
3538 Maps a base font to a CIDFontMapping based on various criteria. @param baseFont the PostScript name of the base font @param fontDescriptor PDFontDescriptor for the font @param cidSystemInfo PDCIDSystemInfo for CID font matching @return CIDFontMapping object representing the best match or null if not found
3539 Creates and returns a decoded input stream for PDF data using default options. @return COSInputStream with decoded data @throws IOException if I/O error occurs
3540 Masks and processes PDF object streams. Updates cross-reference table with object offsets. @param xrefTable map of COSObjectKey to offset @throws IOException if I/O error occurs during processing
3541 Retrieves a COSBase object from the PDF document. @param objstmObjNr object stream number @param key unique identifier for the COSObject @return COSBase object or null if not found @throws IOException if an I/O error occurs during parsing
3542 Parses and processes a cross-reference stream in a PDF. @param objByteOffset byte offset of the object @param isStandalone flag indicating if the xref is standalone @return previous xref table offset or -1 if not found @throws IOException if I/O error occurs during parsing
3543 Retrieves the content stream of a PDF page. @return InputStream with page content or empty stream if none found @throws IOException if I/O error occurs
3544 Constructs a PDCIDFontType2 instance. @param fontDictionary the COS dictionary for the font @param parent the PDType0Font parent @throws IOException if an I/O error occurs
3545 Creates and returns a PDCIDFontType2 instance. @return PDCIDFontType2 object representing the embedded CID font
3546 Creates a PDAnnotation object based on the given COSBase. @param base the COSBase to process @return a PDAnnotation instance or throws an exception if unsupported @throws IOException if the base is not a COSDictionary or unknown annotation type
3547 Applies a mask to create a cloudy effect on a rectangle. Adjusts dimensions and applies visual effects. @param rd original rectangle or null @throws IOException if an I/O error occurs during processing
3548 Applies a mask to create a cloudy border effect. @param leftOrig x-coordinate of the bounding box's left edge @param bottomOrig y-coordinate of the bounding box's bottom edge @param rightOrig x-coordinate of the bounding box's right edge @param topOrig y-coordinate of the bounding box's top edge @throws IOException if an I/O error occurs during masking
3549 Initializes TilingPaint with specified parameters. @param drawer PageDrawer for rendering @param pattern PDTilingPattern to apply @param xform AffineTransform defining the transformation @throws IOException if an I/O error occurs during processing
3550 Retrieves an opaque image without subsampling. @return BufferedImage of the PDF image with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
3551 Initializes a content stream for a PDF page. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @param appendContent mode specifying how to handle existing content @param compress whether to compress the output stream @param resetContext whether to reset graphics context before appending @throws IOException if an I/O error occurs
3552 Retrieves and masks the crop box of a PDF page. @return PDRectangle representing the masked crop box or default if not found
3553 Draws an inline image at specified coordinates with default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
3554 Draws an inline image in the PDF content stream. @param inlineImage PDInlineImage to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs
3555 Draws an inline image in a PDF form. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
3556 Draws an inline image on the PDF page. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
3557 Draws an inline image within a pattern context. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width width of the image @param height height of the image @throws IOException if an I/O error occurs during processing
3558 This Java method, `FDFAnnotation(Element element)`, is a constructor for the `FDFAnnotation` class. It takes an XML element as input and initializes an annotation object with various properties defined in the element's attributes. Here's a breakdown of what the method does: 1. **Initialization**: The method starts by calling the default constructor (`this()`) to initialize any base class fields or perform initial setup. 2. **Page Attribute**: It retrieves the "page" attribute from the XML element and checks if it is null or empty. If either condition is true, an `IOException` is thrown with a message indicating that the required attribute 'page' is missing. Otherwise, it parses the page number as an integer and sets it using the `setPage()` method. 3. **Color Attribute**: The method looks for the "color" attribute. If found and formatted correctly (a 7-character string starting with '#'), it converts the hexadecimal color value to an integer and creates a `Color` object, which is then set using the `setColor()` method. 4. **Date Attribute**: It retrieves the "date" attribute and sets it using the `setDate()` method. 5. **Flags Attribute**: The method processes the "flags" attribute by splitting its value into tokens (assuming they are comma-separated). For each token, it checks if it corresponds to a known flag (like 'invisible', 'hidden', etc.) and sets the corresponding property using methods like `setInvisible()`, `setHidden()`, etc. 6. **Name Attribute**: It retrieves the "name" attribute and sets it using the `setName()` method. 7. **Rectangle Attribute**: The method looks for the "rect" attribute, which should contain four comma-separated numbers representing the rectangle's coordinates. If the attribute is missing or incorrectly formatted, an `IOException` is thrown. Otherwise, it parses these values into floats and creates a `PDRectangle` object, which is then set using the `setRectangle()` method. 8. **Title Attribute**: It retrieves the "title" attribute and sets it using the `setTitle()` method. 9. **Markup Annotation Attributes**: - **Creation Date**: The method converts the "creationdate" attribute to a calendar object using `DateConverter.toCalendar()` and sets it using `setCreationDate()`. - **Opacity Attribute**: If found, it parses the opacity value as a float and sets it using `setOpacity()`. - **Subject Attribute**: It retrieves the "subject" attribute and sets it using `setSubject()`. 10. **Intent Attribute**: The method checks for both "intent" and "IT" attributes (the latter being non-standard but accepted by Adobe). If either is found, it sets the intent using `setIntent()`. 11. **Contents and Rich Contents**: - It uses XPath to evaluate expressions to retrieve the contents of the annotation. - For standard content, it evaluates the "contents[1]" expression and sets it using `setContents()`. - For rich text content, it evaluates the "contents-richtext[1]" expression. If found, it converts the node to a string and sets both the rich contents and plain text contents using `setRichContents()` and `setContents()` respectively. 12. **Border Style**: - The method creates a new `PDBorderStyleDictionary` object. - It retrieves the "width" attribute and, if found, parses it as a float and sets the border width using `setWidth()`. - If the width is greater than 0, it processes additional style-related attributes like "style", "dashes", and "intensity": - **Style**: Depending on the value of the "style" attribute, it sets the border style to one of several predefined styles (DASHED, BEVELED, INSET, SOLID) or creates a `PDBorderEffectDictionary` for more complex styles like CLOUDY. - **Dashes**: If found, it splits the "dashes" attribute into values and adds them to a `COSArray`, which is then set as the dash pattern using `setDashStyle()`. - Finally, it sets the border style on the annotation using `setBorderStyle()`. This method effectively parses an XML element representing an annotation and initializes the corresponding `FDFAnnotation` object with all relevant properties. It handles various error conditions, such as missing or incorrectly formatted attributes, by throwing exceptions where appropriate.
3559 Decodes JPEG 2000 image data and writes to output stream. @param encoded input stream containing encoded image data @param decoded output stream for decoded image data @param parameters decoding parameters @param index index of the decode operation @param options additional decoding options @return DecodeResult object with decoded image and metadata @throws IOException if decoding fails
3560 Decompresses LZW-encoded PDF data. @param encoded InputStream of compressed data @param decoded OutputStream for decompressed data @param parameters COSDictionary with decoding parameters @param index index in the filter list @return DecodeResult object containing parameters @throws IOException if an I/O error occurs
3561 Removes page at specified index. @param index 0-based index of the page to remove
3562 Removes a PDF page from the tree. @param page PDPage object to be removed
3563 Adds a new page to the PDF document and updates its XRef object numbers. @param page PDPage object to be added
3564 Replaces a page in the PDF document. @param newPage the new page to insert @param nextPage the next page after which the new page will be inserted
3565 Inserts a new page after an existing page in the PDF document. @param newPage the new page to be inserted @param prevPage the existing page after which the new page will be inserted @throws IllegalArgumentException if the previous page is not found in its parent's children
3566 Processes a marked content element. @param markedContent the PDMarkedContent instance to process @throws IllegalArgumentException if MCID is invalid
3567 Handles font mask processing. Determines encoding and CMap names, retrieves UCS2 CMap if needed. @throws IOException if an I/O error occurs
3568 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
3569 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image @param file source TIFF file @param number of images to process @return PDImageXObject or null if no data @throws IOException if processing fails
3570 Sets or removes display values for choice fields. @param displayValues list of strings to be set as display values
3571 Masks choice field options with export and display values. @param exportValues list of actual values for options @param displayValues list of displayed values for options
3572 Sets or resets indices for choice field options. @param values list of index integers to set; null or empty resets the indices
3573 Determines if a text field should be masked. @return true if the field is a PDTextField with specific characteristics, false otherwise
3574 Retrieves a PDF page by index. @param pageIndex 1-based index of the page to retrieve @return PDPage object representing the specified page
3575 Initializes a PageExtractor with a PDF document. @param sourceDocument the original PDF document to extract pages from
3576 Initializes a new PDFPageable instance. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible @param dpi dots per inch for rendering quality @param center flag to center content on pages
3577 Updates mask value if associated attribute object is present.
3578 Masks and processes encryption keys for PDF documents. @param encryption PDEncryption object containing encryption details @param documentIDArray array containing document ID data @param decryptionMaterial material used for decryption @throws IOException if operations fail or unknown revision
3579 Determines the width of the space character in the PDF font. @return float representing the space width
3580 Masks and positions text within a PDF form field appearance. @param contents content stream for drawing appearances @param appearanceStream appearance stream to apply the mask to @param font font used for rendering text @param fontSize size of the font @throws IOException on I/O errors during processing
3581 Checks if the font is fixed pitch. @return true if font is fixed pitch, false otherwise
3582 Checks if the serif flag is set in the font descriptor. @return true if serif flag is set, false otherwise
3583 Checks if the font is symbolic. @return true if the font is symbolic, false otherwise
3584 Checks if the script flag is set in the font descriptor. @return true if the script flag is enabled, false otherwise
3585 Checks if the font is non-symbolic. @return true if the font is non-symbolic, false otherwise
3586 Checks if the italic flag is set in the font descriptor. @return true if the italic flag is set, false otherwise
3587 Checks if the 'All Caps' font flag is set. @return true if 'All Caps' flag is enabled, false otherwise
3588 Checks if the small caps flag is set in the font descriptor. @return true if small caps are enabled, false otherwise
3589 Checks if the FORCE_BOLD flag is set in the font descriptor. @return true if FORCE_BOLD is enabled, false otherwise
3590 Sets or clears the fixed pitch font flag. @param flag true to set fixed pitch, false to clear
3591 Sets or clears the serif font flag. @param flag true to set serif, false to clear
3592 Sets or clears the SYMBOLIC font flag. @param flag true to set, false to clear the flag
3593 Sets or clears the script font flag. @param flag true to set, false to clear the script flag
3594 Sets or clears the NON_SYMBOLIC font flag. @param flag true to set, false to clear the flag
3595 Sets or clears the italic font flag. @param flag true to set italic, false to clear
3596 Sets or clears the all-caps font flag. @param flag true to set all-caps, false to clear
3597 Sets or clears the small caps font flag. @param flag true to enable, false to disable small caps
3598 Sets or clears the force bold flag. @param flag true to set, false to clear the flag
3599 Retrieves a PDAbstractPattern by color name. @param color the color to find the pattern for @return PDAbstractPattern object or throws IOException if not found
3600 Applies mask to a transparency group. @param group PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
3601 Handles mask operations for a Type 3 character procedure. @param charProc Type 3 character procedure to process @param textRenderingMatrix current text rendering matrix @throws IOException if an I/O error occurs during processing
3602 Applies mask to annotation appearance. @param annotation PDF annotation to process @param appearance associated appearance stream @throws IOException if I/O error occurs
3603 Applies mask using tiling pattern and color. @param tilingPattern the tiling pattern to apply @param color the color for masking @param colorSpace the color space of the mask @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs
3604 Applies mask operations to a PDF content stream. @param contentStream PDContentStream object containing PDF data @throws IOException if an I/O error occurs during processing
3605 Adjusts open count of outline items recursively. @param delta amount to adjust open count by
3606 Creates a PDField instance based on field type and attributes. @param form the AcroForm containing this field @param field the COSDictionary representing the field attributes @param parent the parent field in the hierarchy, if any @return PDField instance or null if unsupported type
3607 Initializes a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality @param center flag to center pages during printing
3608 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
3609 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3610 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3611 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3612 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3613 Loads and parses a PDF document from a random access read source. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3614 Loads and parses a PDF document. @param randomAccessRead input source for the PDF document @param password decryption password for encrypted documents @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3615 Initializes visual signature settings from a PDF file. @param file PDF file containing the document to be processed @throws IOException if an I/O error occurs during initialization
3616 Initializes visual signature handling from an input stream. @param is source input stream of the PDF document @throws IOException if an I/O error occurs during initialization
3617 Applies a mask to the given PDFont with specified size. @param font PDFont object to apply mask @param fontSize size of the font @throws IOException if an I/O error occurs
3618 Sets the font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
3619 Sets the font and size for text rendering. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
3620 Sets the font and size for pattern content. @param font PDFont object to set @param fontSize size of the font @throws IOException if an I/O error occurs
3621 Sets stroking color and color space for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
3622 Sets non-stroking color and writes mask data for a given PDF color. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3623 Applies an extended graphics state to the PDF document. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
3624 Applies a graphics state to the PDF form. @param state PDExtendedGraphicsState object representing the graphics state @throws IOException if writing fails
3625 Applies an extended graphics state to the PDF page. @param state PDExtendedGraphicsState object representing the graphics state @throws IOException if writing fails
3626 Applies a graphics state to the pattern content stream. @param state PDExtendedGraphicsState object representing the graphics state to apply @throws IOException if writing fails
3627 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs or text mode is active
3628 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing
3629 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs or if called within a text block
3630 Applies a shading pattern to the PDF content stream. @param shading PDShading object representing the shading pattern @throws IOException if an I/O error occurs during processing or if called within a text block
3631 Begins marked content sequence in PDF stream. @param tag COSName for the mask @param propertyList PDPropertyList containing mask properties @throws IOException if writing fails
3632 Begins marked content with specified tag and properties. @param tag COSName for the marked content @param propertyList PDPropertyList containing properties @throws IOException if writing fails
3633 Begins marked content with a specified tag and property list. @param tag COSName for the marked content @param propertyList PDPropertyList containing properties @throws IOException if writing fails
3634 Begins marked content with specified tag and properties. @param tag COSName for the marked content @param propertyList PDPropertyList containing marked content properties @throws IOException if writing to stream fails
3635 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
3636 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
3637 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
3638 Applies a mask to the PDF content stream. @param tag COSName representing the mask @param propertyList PDPropertyList containing mask properties @throws IOException if an I/O error occurs during processing
3639 Draws an image on the PDF canvas. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
3640 Draws an image on the PDF form. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if drawing fails or text mode is active
3641 Draws an image on the PDF page. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing
3642 Draws an image within a specified area of the PDF. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width desired width of the image @param height desired height of the image @throws IOException if an I/O error occurs during drawing or text mode is active
3643 Draws an image with a specified transformation matrix, ensuring it's not used in text mode. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing or if used within text mode
3644 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
3645 Draws an image on the PDF page with a specified transformation. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing
3646 Draws an image with a specified transformation matrix. @param image PDImageXObject to be drawn @param matrix transformation matrix for the image @throws IOException if an I/O error occurs during drawing or text mode is active
3647 Draws a form resource in the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or drawForm is called within a text block
3648 Draws a PDF form object. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or drawForm is called within text mode
3649 Draws a form on the PDF page. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs during processing
3650 Draws a form object in the PDF content stream. @param form PDFormXObject to be drawn @throws IOException if an I/O error occurs or text mode is active
3651 Applies encryption to a PDF document. @param document PDDocument object to encrypt @throws IOException if security operations fail
3652 Sets mask and validates button value. @param value user input to set as mask and validate
3653 Masks button value and updates widget states. @param value the string value to mask @throws IOException if an I/O error occurs
3654 Clones a PDF element based on its type. @param src source COSBase object to clone @param dstParent parent COSDictionary for the cloned object @param currentPageDict current page dictionary context @return cloned COSBase object or original if unsupported type
3655 Retrieves the destination page number or index. @return Page number or -1 if not found
3656 Transfers optional content properties from source to target PDF document. @param srcDoc the source PDF document @throws IOException if an I/O error occurs during processing
3657 Embeds Type 2 CID font with specified tag and GID to CID mapping. @param ttfSubset input stream of TTF subset data @param tag prefix for the font name @param gidToCid mapping of GIDs to CIDs @throws IOException if I/O operations fail
3658 Retrieves and processes the mask value for a PDF element. @return processed mask value as a string or original type if not applicable
3659 Writes PDF document without signing. @param doc PDDocument to be written @throws IOException if an I/O error occurs
3660 Writes PDF document to output stream. @param output target stream for writing the PDF @throws IOException if an I/O error occurs
3661 Writes PDF content to an output stream. @param output target stream for writing the PDF @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs or document is not loaded
3662 Compresses and processes PDF objects. @param current the current COSBase object to process @throws IOException if an I/O error occurs
3663 Reads and decodes stream content. @return Decoded string from stream or empty if error occurs
3664 Retrieves an input stream for PDF data using default decoding options. @return COSInputStream with decoded data from the PDF stream @throws IOException if I/O error occurs during stream processing
3665 Reads and processes patch data for mesh-based shading. @param xform affine transform matrix @param matrix transformation matrix @param controlPoints number of control points @return List of Patch objects or empty list if no patches found @throws IOException if I/O error occurs
3666 Masks and processes PDF object streams, updating cross-reference table. @param xrefTable map of COSObjectKey to offset @return COSDictionary containing processed trailer information @throws IOException if I/O error occurs during processing
3667 Masks and retrieves a PDF object by key. @param objKey unique identifier for the COS object @param requireExistingNotCompressedObj flag to check for existing non-compressed objects @return masked or decrypted COSBase object or null if not found
3668 Parses and processes the cross-reference table of a PDF document. @param document the COSDocument to process @param startXRefOffset initial starting offset for XRef processing @return COSDictionary representing the parsed trailer @throws IOException if an I/O error occurs during parsing
3669 Creates a PDCIDFont from a COS dictionary. @param dictionary the font dictionary @param parent the PDType0Font parent @return PDCIDFont instance based on the dictionary subtype @throws IOException if the font type is invalid or an I/O error occurs
3670 Filters annotations on a PDF page based on given criteria. @param annotationFilter filter to apply to annotations @return list of filtered PDAnnotation objects @throws IOException if an error occurs during processing
3671 Retrieves and returns a COSObjectable from the referenced PDF object. @return COSObjectable instance or null if not found or invalid
3672 Retrieves and creates a PDAnnotation from the IRT key. @return PDAnnotation object or null if not found @throws IOException if an error occurs during annotation creation
3673 Retrieves and returns the parent markup annotation. @return PDAnnotationMarkup object or null if not found or invalid type
3674 Recursively processes and clones objects from a number tree. @param cloner utility for cloning PDF objects @param numberTreeAsMap map representation of the number tree @param objMapping mapping of original to cloned objects @throws IOException if an I/O error occurs during processing
3675 Applies a mask to create a cloudy border effect within a given rectangle. @param rd original rectangle or null @throws IOException if an I/O error occurs during masking
3676 Masks annotation's appearance stream. @param compress flag indicating whether to compress the output stream @return PDAppearanceContentStream for further modifications
3677 Initializes a new PDPageContentStream for appending content. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @throws IOException if an I/O error occurs
3678 Initializes a content stream for a PDF page. @param document the PDDocument to which this stream belongs @param sourcePage the PDPage where content will be added or modified @param appendContent mode specifying how to handle existing content @param compress whether to compress the output stream @throws IOException if an I/O error occurs
3679 Masks the current PDF page. @param page PDF page to be masked @throws IllegalArgumentException if page is null
3680 Retrieves and masks the bleed box of a PDF page. @return PDRectangle representing the masked bleed box or default if not found
3681 Retrieves and masks the Trim Box of a PDF page. @return PDRectangle representing the masked Trim Box or default if not found
3682 Retrieves and masks the art box of a PDF page. @return PDRectangle representing the masked art box or default if not found
3683 Masks and returns the crop box of a PDF page, adjusting for rotation. @param page the PDPage object to process @return PDRectangle representing the masked crop box
3684 Draws an inline image at specified coordinates using default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3685 Draws an inline image at specified coordinates using dimensions from the image. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
3686 Draws an inline image at specified coordinates with dimensions from the image. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
3687 Draws an inline image at specified coordinates using default dimensions. @param inlineImage the PDInlineImage to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @throws IOException if an I/O error occurs during processing
3688 Constructs a FDFAnnotationCaret from an XML element. Initializes name, fringe, and symbol properties. @param element XML element containing annotation data @throws IOException if parsing fails or invalid data is provided
3689 Initializes a circular annotation from an XML element. @param element XML element containing annotation data @throws IOException if 'fringe' attribute is malformed
3690 Constructs an FDFAnnotationFileAttachment from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
3691 Initializes a free text annotation from an XML element. @param element XML element containing annotation data @throws IOException if parsing fails or required attributes are missing
3692 Initializes an FDFAnnotationInk from an XML element. @param element XML element representing the annotation @throws IOException if required elements are missing or parsing fails
3693 Constructs a line annotation from an XML element. @param element XML element containing annotation attributes @throws IOException if required attributes are missing or invalid
3694 Constructs a FDFAnnotationLink from an XML element. Parses the element to set up hyperlink actions. @param element XML element representing the annotation @throws IOException if there's an error processing the element
3695 Initializes a polygon annotation from an XML element. @param element XML element containing polygon data @throws IOException if vertex parsing fails
3696 Initializes a polyline annotation from an XML element. @param element XML element representing the annotation @throws IOException if vertex data is missing or malformed
3697 Constructs an FDFAnnotationSound from an XML element. @param element the XML element representing the sound annotation @throws IOException if required attributes are missing or invalid
3698 Constructs a square annotation from an XML element. @param element XML element containing annotation data @throws IOException if parsing fails or incorrect number of values
3699 Initializes a stamp annotation from an XML element. Parses appearance XML, decodes Base64, and sets it in the annotation. @param element XML element representing the stamp annotation @throws IOException if I/O operations fail or invalid data is encountered
3700 Constructs a text annotation from an XML element. @param element XML element representing the annotation @throws IOException if required attributes are missing or invalid
3701 Constructs a text markup annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3702 Removes page from PDF document by number. @param pageNumber 1-based index of the page to remove
3703 Removes a specified PDF page from the document. @param page PDPage object to be removed
3704 Masks and imports a PDF page. @param page the PDPage object to be masked and imported @return new PDPage with masked content or null if issues occur @throws IOException if I/O error occurs during processing
3705 Prepares a PDF page for visible digital signature. @param page PDPage object to be prepared @throws IOException if an I/O error occurs
3706 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @return PDImageXObject or null if no data @throws IOException if processing fails
3707 Creates a PDImageXObject from a TIFF file. @param document PDF document to add the image @param file source TIFF file @return PDImageXObject or null if no data @throws IOException if processing fails
3708 Sets the mask value and resets selected options. @param value the mask string value to set
3709 Masks choice field options based on selected values. @param values list of selected option strings @param options list of all available option strings
3710 Sets up the signature design environment for a given PDF page. @param document PDDocument containing the pages @param page 1-based index of the target page Validates page number, retrieves page dimensions, and sets initial properties.
3711 Retrieves the target PDF page from an outline item's destination. @param doc the PDF document @return PDPage object or null if not found @throws IOException if issues occur during retrieval
3712 Initializes a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed
3713 Constructs a PDFPageable instance with default settings. @param document the PDDocument to be printed @param orientation page orientation (portrait or landscape)
3714 Constructs a new PDFPageable instance with default settings. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible
3715 Constructs a new PDFPageable instance with centering enabled. @param document the PDDocument to be paginated and printed @param orientation the page orientation (e.g., portrait, landscape) @param showPageBorder flag to indicate if page borders should be visible @param dpi dots per inch for rendering quality
3716 Generates a map of page labels to their indices. @return Map with page labels as keys and indices as values
3717 Generates an array of page labels for a PDF document. @return String array containing page labels or nulls for unassigned pages
3718 Updates mask value if attribute values differ. @param oldBase previous attribute value @param newBase current attribute value
3719 Masks and processes a text position for rendering. @param textRenderingMatrix current text transformation matrix @param font PDFont object representing the font @param code character code to process @param displacement vector for text positioning @throws IOException if an I/O error occurs
3720 Splits paragraph text into lines based on font and width constraints. @param font PDFont object for text styling @param fontSize size of the font @param width maximum line width @return List of Line objects representing formatted text @throws IOException on I/O error during processing
3721 Determines if the font is symbolic by checking its properties. @return true if the font is symbolic, false otherwise; null if m1() is null
3722 Determines the font name based on font descriptor properties. @param fontDescriptor PDFontDescriptor object containing font details @return Font name as a string, defaulting to "Times-Roman" if null
3723 Creates a PDFontDescriptor for embedding Type 1 fonts. @param type1 the Type 1 font to process @return PDFontDescriptor configured with font metrics and properties
3724 Creates a PDFontDescriptor from FontMetrics. @param metrics font metrics data @return configured PDFontDescriptor object
3725 Creates a PDFontDescriptor for a TrueType font. @param ttf TrueTypeFont instance @return PDFontDescriptor object representing the font @throws IOException if required tables are missing or invalid
3726 Converts PDF color to Java Paint. @param color PDColor object representing the color @return Paint object for rendering or null if invalid @throws IOException if an error occurs during processing
3727 Processes mask for transparency group. @param form PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
3728 Applies mask to a transparency group. @param group PDTransparencyGroup object representing the mask @throws IOException if an I/O error occurs during processing
3729 Handles mask operations for a Type 3 character in a PDF. @param textRenderingMatrix current text rendering matrix @param font Type 3 font containing the character procedure @param code font encoding code of the character @param displacement vector for character positioning @throws IOException if an I/O error occurs during processing
3730 Applies mask to a PDF annotation's appearance stream. @param annotation PDF annotation to process @throws IOException if I/O error occurs during processing
3731 Applies mask using tiling pattern and color. @param tilingPattern the tiling pattern to apply @param color the color for masking @param colorSpace the color space of the mask
3732 Applies mask operations to a PDF form object. @param form PDFormXObject to apply mask to @throws IOException if an I/O error occurs during processing
3733 Retrieves and converts form fields from a PDF dictionary. @return List of PDField objects representing the form fields
3734 Recursively finds a PDField by its hierarchical name. @param name array of field names in hierarchy @param nameIndex current index in the name array @return PDField instance or null if not found
3735 Retrieves child fields of the current non-terminal field. @return List of PDField objects representing child fields
3736 Constructs a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders @param dpi dots per inch for printing quality
3737 Loads and parses a PDF document from a byte array. @param input byte array containing the PDF data @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
3738 Loads and parses a PDF document from a file. @param file PDF file to load @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3739 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3740 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param streamCacheCreateFunction function to create stream cache @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3741 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @param keyStore keystore containing encryption keys @param alias alias for the key in the keystore @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3742 Sets visual signature properties. @param visSignatureProperties object containing signature settings @throws IOException if an I/O error occurs during setting properties
3743 Sets stroking color using RGB values. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
3744 Sets the stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
3745 Sets stroking color and updates graphic state. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
3746 Sets stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
3747 Sets stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during processing
3748 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
3749 Sets non-stroking color and handles pattern-specific logic. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3750 Sets non-stroking color for PDF form content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3751 Sets non-stroking color for PDF content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3752 Sets non-stroking color for pattern content. @param color PDColor object representing the color to set @throws IOException if an I/O error occurs during writing
3753 Creates a masked form XObject from a page. @param sourceDoc source PDF document @param page target PDF page @return PDFormXObject with applied mask and transformations @throws IOException if an I/O error occurs
3754 Writes PDF document using COSDocument. @param doc COSDocument to be written @throws IOException if an I/O error occurs
3755 Saves the PDF document to an output stream with specified compression. @param output OutputStream to write the PDF to @param compressParameters parameters for PDF compression settings @throws IOException if the document is closed or I/O error occurs
3756 Initializes a COSWriterCompressionPool for the given PDF document. @param document PDDocument to be compressed @param parameters compression parameters; defaults to new CompressParameters if null @throws IOException if an I/O error occurs during initialization
3757 Converts COSBase to text string. @param base COSBase object to convert @return Decoded text string or empty if unsupported type
3758 Retrieves and processes the value of a field based on its type. @return Processed value or null if no valid type is found @throws IOException if an error occurs during processing
3759 Retrieves and decodes the field's value. @return decoded field value as a string or null if not found
3760 Retrieves JavaScript code before form submission. @return Decoded JavaScript string or null if not found
3761 Retrieves JavaScript code from dictionary or stream. @return decoded JavaScript string or null if not found
3762 Retrieves JavaScript action as text. @return JavaScript code as string or null if not applicable
3763 Retrieves and decodes the value associated with key "RC". @return Decoded string or null if not found or null
3764 Converts COSBase to text string. @param base COSBase object to process @return Decoded text from COSString or COSStream, empty if unsupported type
3765 Creates a LayoutPage for applying overlays. @param page PDF page to process @return LayoutPage instance with merged content and resources @throws IOException if I/O error occurs during processing
3766 Retrieves and processes PDF data as a byte array. @return processed byte array from PDF stream @throws IOException if I/O error occurs during processing
3767 Initializes and returns a 2D array representing sample values. @return int[][] containing interpolated sample values
3768 Initializes color space based on ICC profile or alternate settings. Handles exceptions and sets up AWT color space for rendering.
3769 Initializes a PatchMeshesShadingContext for PDF mesh-based shading. @param shading PDMeshBasedShadingType instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints number of control points @throws IOException if I/O error occurs during patch collection or pixel table creation
3770 Initializes Type4ShadingContext with specific parameters. @param shading PDShadingType4 object representing the shading details @param cm ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates @param deviceBounds Rectangle defining the rendering area in device space @throws IOException if an I/O error occurs during initialization
3771 Initializes a Type5 shading context for PDF rendering. @param shading PDShadingType5 object representing the shading details @param cm ColorModel specifying the color space and pixel representation @param xform AffineTransform for device to user coordinate conversion @param matrix Matrix defining the transformation from source to destination coordinates @param deviceBounds Rectangle defining the bounds of the device area @throws IOException if I/O error occurs during processing
3772 Parses and processes PDF cross-reference table, rebuilding if necessary. @return COSDictionary representing the parsed or rebuilt trailer @throws IOException if an I/O error occurs during parsing
3773 Renders a PDF form object. @param form the PDFormXObject to render @throws IOException if an I/O error occurs
3774 Handles mask rendering based on optional content settings. @param tag COSName representing the mask tag @param properties COSDictionary containing mask properties
3775 Retrieves all annotations from the PDF page. @return list of PDAnnotation objects @throws IOException if an error occurs during processing
3776 Retrieves the normal appearance stream of an annotation. @return PDAppearanceContentStream for further modifications
3777 Creates a new optional content group and applies a form to a PDF page. @param targetPage the page where the form will be applied @param form the form object to apply @param transform the transformation matrix for the form @param layerName name of the new optional content group @return PDOptionalContentGroup representing the created layer
3778 Masks a PDF page if it contains content. @param page PDF page to be masked @throws IOException if an I/O error occurs during processing
3779 Masks a PDF page and processes its content stream. @param contentStream PDContentStream object containing PDF data @param page PDF page to be masked @throws IOException if an I/O error occurs during processing
3780 Retrieves page format for a PDF document. @param pageIndex 1-based index of the page to retrieve @return PageFormat object configured for printing
3781 Creates a highlight annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3782 Constructs a squiggly annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3783 Initializes a strikeout annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3784 Constructs an underline annotation from an XML element. @param element XML element containing annotation data @throws IOException if required attributes are missing or invalid
3785 Masks choice field options based on selected values. @param values list of selected option strings @throws IOException if an I/O error occurs
3786 Initializes visible signature design with a PDF document, image stream, and target page. @param document PDDocument containing the pages @param imageStream source of signature image data @param page 1-based index of the target page @throws IOException if an I/O error occurs
3787 Initializes visible signature design with specified PDF document, image, and page. @param document PDDocument containing the pages @param image BufferedImage to be used as the signature @param page 1-based index of the target page for signature placement
3788 Masks and formats text content with specified alignment and wrapping. @throws IOException if an I/O error occurs during processing
3789 Determines the appropriate font size for a given PDF form field. @param font the font used in the form field @param contentRect the rectangle defining the field's dimensions @return the calculated font size or default if no calculation is needed @throws IOException on I/O error during font processing
3790 Sets the encoding based on font properties and dictionary. Handles both COSName and COSDictionary encoding types.
3791 Determines if the font is symbolic based on encoding and properties. @return Boolean indicating if the font is symbolic, or null if undetermined
3792 Maps a TrueType font for a given base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object containing font details @return FontMapping with TrueTypeFont or last resort font if not found
3793 Maps a base font to a FontBoxFont, using fallbacks if necessary. @param baseFont the initial font name @param fontDescriptor PDFontDescriptor containing font details @return FontMapping with the resolved FontBoxFont and a boolean indicating if a fallback was used
3794 Embeds a Type 1 font into a PDF document. @param doc the PDDocument to embed the font into @param dict the COSDictionary for font properties @param pfbStream InputStream containing PFB font data @param encoding optional Encoding for the font @throws IOException if an I/O error occurs during embedding
3795 Constructs a PDFont instance for a given base font. Initializes the dictionary and sets up font descriptor and metrics. @param baseFont the base font name to initialize the PDFont with
3796 Initializes TrueTypeEmbedder with font and document details. @param document PDF document to embed the font into @param dict COSDictionary for storing font properties @param ttf TrueTypeFont instance to be embedded @param embedSubset true if subset embedding is required @throws IOException if font embedding is not permitted or fails
3797 Handles mask operations for rendering text glyphs. @param textRenderingMatrix matrix defining text transformation @param font font used for rendering @param code character code to render @param displacement vector for additional positioning @throws IOException if an I/O error occurs
3798 Adjusts open count of outline items based on child state. Checks if any child is open; if not, decrements open count recursively.
3799 Adjusts open count of outline items if any are open.
3800 Creates and populates an FDF document with form fields. @return FDFDocument containing the extracted form data @throws IOException if an I/O error occurs
3801 Checks if XFA key exists and form fields are not empty. @return true if both conditions are met, false otherwise
3802 Constructs a PDFPrintable instance with specified settings. @param document the PDDocument to print @param scaling the Scaling option for page content @param showPageBorder flag to display page borders
3803 Loads and parses a PDF document from a byte array using an empty password. @param input byte array containing the PDF data @return PDDocument object if successful @throws IOException if an I/O error occurs during loading or parsing
3804 Loads and parses a PDF document from a file. @param file PDF file to load @param password decryption password for encrypted documents @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3805 Loads and parses a PDF document from a file without encryption. @param file PDF file to load @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3806 Sets the stroking color using a Color object. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
3807 Sets stroking color using RGB values from the provided Color object. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
3808 Sets stroking color using RGB values. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
3809 Sets stroking color for pattern rendering. @param color Color object with RGB components @throws IOException if an I/O error occurs during processing
3810 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
3811 Converts a Color object to PDColor and sets non-stroking color. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
3812 Sets non-stroking color using a Color object. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
3813 Sets non-stroking color using RGB values from a Color object. @param color Color object containing RGB values (0-255) @throws IOException if an I/O error occurs during writing
3814 Masks and styles PDF form field appearances. @param widget form field widget to process @param appearanceCharacteristics characteristics for appearance @param appearanceStream stream defining the visual appearance @throws IOException if an I/O error occurs during processing
3815 Applies mask and font settings to PDF form field appearance. @param contents content stream for appearance @param zeroFontSize default font size if current is zero @throws IOException if I/O error occurs during operation
3816 Imports a PDF page as a form XObject. @param sourceDoc source PDF document @param pageNumber 1-based index of the page to import @return PDFormXObject representing the imported page @throws IOException if an I/O error occurs
3817 Saves the PDF document to an output stream with default compression. @param output OutputStream to write the PDF to @throws IOException if an I/O error occurs
3818 Saves the PDF document to a specified file with compression. @param file File where the PDF will be saved @param compressParameters Parameters for PDF compression settings @throws IOException if I/O error occurs during saving
3819 Handles PDF compression and encryption. @param document the COSDocument to process @throws IOException if I/O error occurs during processing
3820 Retrieves and processes the annotation's RC (Rich Content) property. @return Processed string representation of the RC property or empty if not found
3821 Writes field data to an output stream in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
3822 Retrieves the default appearance string for rich text. @return Default appearance string or null if not found
3823 Processes the first page of a PDF document to create an overlay layout. @param doc PDDocument object containing the PDF to process @return LayoutPage instance for the processed page @throws IOException if I/O error occurs during processing
3824 Initializes Function Type 4 from a PDF stream. @param functionStream the COSBase object representing the PDF function stream @throws IOException if I/O error occurs during initialization
3825 Interpolates float values based on given coordinates and step. @param coord coordinate vector for interpolation @param step current step index @return interpolated float array
3826 Initializes a PDICCBased object from an ICC profile array. @param iccArray COSArray containing ICC profile data @throws IOException if an error occurs during initialization
3827 Initializes a Type6ShadingContext for PDF Type 6 shading. @param shading PDShadingType6 instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
3828 Initializes a Type7ShadingContext for PDF Type 7 shading. @param shading PDShadingType7 instance to manage @param colorModel ColorModel for the shading @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @throws IOException if I/O error occurs during initialization
3829 Masks data from XFA resources. @return byte array of masked data or empty array if no valid source found @throws IOException if I/O error occurs during processing
3830 Adjusts structure parents and annotations for a PDF page. @param page the PDPage to modify @param structParentOffset offset to apply to structure parent indices @throws IOException if an error occurs during processing
3831 Masks and transfers structure tree from source to destination document. @param destinationDocument the target PDF document for structure transfer @throws IOException if an error occurs during processing
3832 Clones and processes annotations for a given PDF page. @param imported PDPage to process @throws IOException if an error occurs during annotation processing
3833 Maps form fields to their annotations on PDF pages. @param fields list of PDF form fields @param pages PDF page tree @return map of COSDictionary to set of COSDictionary representing widget mappings @throws IOException if an error occurs during processing
3834 Processes a PDF page, setting rotation and size, and adjusts translation matrix. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
3835 Initializes FDFDictionary from XML. @param fdfXML XML element representing FDF data
3836 Applies FDF field data to a PDF form field. @param fdfField the FDF field containing import data @throws IOException if an I/O error occurs during processing
3837 Initializes a PDVisibleSignDesigner with a PDF source, image stream, and target page. @param documentSource source of the PDF document @param imageStream source of the signature image @param page 1-based index of the target page for the signature @throws IOException if an I/O error occurs
3838 Initializes a PDVisibleSignDesigner with a PDF source, signature image, and target page. @param documentSource source of the PDF document @param image BufferedImage to be used as the signature @param page 1-based index of the target page @throws IOException if there's an error processing the document
3839 Determines if the font is symbolic. @return Boolean indicating if the font is symbolic, defaulting to true if undetermined
3840 Constructs a PDType1Font instance. @param doc PDF document containing the font @param pfbIn input stream of the PFB font file @param encoding character encoding for the font Initializes font embedding, sets encoding, and retrieves glyph list & Type 1 font.
3841 Constructs a PDSimpleFont instance. @param baseFont the font name to initialize with
3842 Initializes a PDFont with a given COSDictionary. @param fontDictionary the dictionary containing font data
3843 Constructs a PDCIDFontType2Embedder for embedding Type 2 CID fonts in PDFs. @param document the PDF document to embed the font into @param dict the COSDictionary representing the font @param ttf the TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @param parent the parent PDType0Font @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during font processing
3844 Constructs a PDTrueTypeFontEmbedder for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param dict COSDictionary for storing font properties @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @throws IOException if an error occurs during embedding
3845 Checks if the PDF form is valid and has dynamic XFA. @param acroForm the PDF form to check @return true if form is not null and has dynamic XFA, false otherwise
3846 Constructs a PDFPrintable instance without showing page borders. @param document the PDDocument to print @param scaling the Scaling option for page content
3847 Deprecated method to load and parse a PDF document from a file. @param file PDF file to load @return PDDocument object if successful @throws IOException if an error occurs during loading or parsing
3848 Generates and applies visual appearance for a form field. Handles masking, font settings, and text formatting.
3849 Builds a PDF with integrated visual signatures. @param properties configuration for the visible signature design @return InputStream of the generated signed PDF @throws IOException if I/O operations fail
3850 Saves PDF document to specified file with default compression. @param file File where the PDF will be saved @throws IOException if I/O error occurs during saving
3851 Saves PDF document to specified file with compression. @param fileName path to save the PDF file @param compressParameters settings for PDF compression @throws IOException if I/O error occurs during saving
3852 Writes FDF document data to a Writer in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
3853 Creates a PDFunction instance based on the provided COSBase object. @param function the COSBase object representing the PDF function stream @return PDFunction object or throws IOException if invalid function type
3854 Generates interpolated float values using default parameters. @return array of interpolated float values
3855 Creates or retrieves a PDICCBased color space from ICC profile data. @param iccArray COSArray containing ICC profile data @param resources PDF resources for resource management @return PDICCBased object initialized with the provided ICC array @throws IOException if an error occurs during initialization or retrieval
3856 Creates a PDImageXObject for PDF with mask handling. @param document PDDocument to embed the image @param image BufferedImage to process @return PDImageXObject suitable for PDF inclusion @throws IOException if I/O operations fail
3857 Processes the soft mask image to extract and validate its matte component. @param softMask PDImageXObject representing the soft mask @return float array of matte values or null if invalid @throws IOException if an error occurs during processing
3858 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3859 Masks XFA resources and returns parsed XML document. @return Document object representing masked XFA data @throws IOException if I/O error occurs during processing
3860 Prepares and renders annotations on a PDF page. @param g Graphics2D context to draw on @param pageSize dimensions of the PDF page @throws IOException if an I/O error occurs during rendering
3861 Masks and processes a PDF page for splitting. @param page the PDPage object to be processed @throws IOException if an I/O error occurs during processing
3862 Prepares the PDF page for processing by setting rotation and size. @param page the PDF page to process @throws IOException if an I/O error occurs during processing
3863 Processes a PDF page for text extraction and formatting. @param page the PDPage object to process @throws IOException if an I/O error occurs during processing
3864 Constructs an FDFCatalog from an XML element. @param element XML element representing FDF data
3865 Constructs a PDType1Font instance with default encoding. @param doc PDF document containing the font @param pfbIn input stream of the PFB font file @throws IOException if an error occurs during initialization
3866 Initializes a PDType1Font with the specified base font. @param baseFont the FontName representing the base font
3867 Constructs a new PDSimpleFont instance from a COSDictionary. @param fontDictionary PDF dictionary representing the font
3868 Initializes a PDType0Font from a font dictionary. Validates and retrieves descendant fonts, setting up encoding and CMap. @param fontDictionary the COSDictionary representing the font @throws IOException if required data is missing or invalid
3869 Initializes a PDType0Font for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @param closeTTF whether to close the TrueTypeFont after processing @param vertical whether the font supports vertical text @throws IOException if an I/O error occurs during font processing
3870 Constructs a PDTrueTypeFont instance for embedding TrueType fonts in PDFs. @param document PDF document to embed the font into @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @param closeTTF flag indicating if the TTF should be closed after processing @throws IOException if an error occurs during embedding
3871 Returns an iterator over interactive form fields. @return Iterator of PDField objects
3872 Constructs a PDFPrintable instance with default scaling. @param document the PDDocument to print
3873 Initializes a PDVisibleSignDesigner with a PDF file and signature image. @param filename path to the PDF file @param imageStream source of the signature image data @param page 1-based index of the target page @throws IOException if an I/O error occurs during processing
3874 Initializes a new PDVisibleSignDesigner with a specified PDF file, image, and page. Sets the signature image and calculates the page size for rendering. @param filename path to the PDF file @param image BufferedImage to be used as the signature @param page 1-based index of the target page @throws IOException if an error occurs during document loading or processing
3875 Configures and applies a visible signature to a PDF. @throws IOException if I/O operations fail during the process
3876 Saves PDF document to specified file. @param fileName path where the PDF will be saved @throws IOException if I/O error occurs during saving
3877 Writes FDF catalog data to a Writer in XML format. @param output Writer object to write the XML data @throws IOException if an error occurs during writing
3878 Evaluates input through specified functions and returns the result. @param input array of input values @return evaluated result as a float array @throws IOException if an error occurs during function evaluation
3879 Initializes a PDDeviceN instance from a COSArray and resources. @param deviceN COSArray representing DeviceN color space data @param resources PDResources for resource management @throws IOException if there's an issue with creating alternate color space or tint transform
3880 Retrieves or creates the tint transform function. @return PDFunction representing the tint transform @throws IOException if an error occurs during function creation
3881 Initializes a PDSeparation object from a COSArray. @param separation the COSArray representing the separation dictionary @param resources the PDResources for color space lookup @throws IOException if there's an issue with the tint transform or alternate color space
3882 Retrieves the mask function for shading. @return PDFunction object or null if not found
3883 Retrieves and initializes PDFunction instances from the shading dictionary. @return array of PDFunction objects representing the functions for shading @throws IOException if mandatory /Function element is invalid
3884 Retrieves the transfer function for the soft mask. @return PDFunction object representing the transfer function or null if not set
3885 Initializes an indexed color space from a COSArray. @param indexedArray array representing the indexed color space @param resources PDF resources for resource management @throws IOException if an error occurs during initialization
3886 Evaluates input through linear interpolation using function parameters. @param input array of input values @return array of interpolated output values
3887 Converts PNG to PDF-compatible image object. @param document PDF document to add the image to @param state PNG conversion state containing image data @return PDImageXObject for PDF or null if conversion fails
3888 Creates a PDImageXObject with mask handling from a file. @param file source image file @param doc PDF document to add the image to @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
3889 Creates a PDImageXObject with mask handling from a file. @param file source image file @param doc PDF document to add the image @return PDImageXObject with applied mask if necessary @throws IOException if I/O operations fail or unsupported file type
3890 Masks and processes an image based on region and subsampling. @param region area of interest in the image @param subsampling level of subsampling for processing @return BufferedImage with applied mask or original if no mask @throws IOException if an I/O error occurs during processing
3891 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3892 Draws an image on the PDF form at specified coordinates using calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3893 Draws an image at specified coordinates using calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3894 Draws an image at specified coordinates with calculated dimensions. @param image PDImageXObject to draw @param x top-left corner x-coordinate @param y top-left corner y-coordinate
3895 Renders a PDF page as a BufferedImage. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @param imageType desired image type @param destination target for rendered image @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
3896 Renders a specified PDF page into a graphics context with scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination RenderDestination for output @throws IOException if an I/O error occurs during rendering
3897 Masks and processes pages within a specified range. @throws IOException if an I/O error occurs during processing
3898 Processes PDF pages for text extraction, handling bookmarks and content. @param pages PDPageTree representing the document's pages @throws IOException if an I/O error occurs during processing
3899 Constructs an FDFDocument from an XML document. @param doc XML Document object representing the FDF data @throws IOException if the root element is not 'xfdf'
3900 Returns the default Helvetica font. Initializes the font if not already set. @return PDFont object representing Helvetica
3901 Retrieves or creates a FontBoxFont for the given base font name. @param baseName the FontName representing the base font @return FontBoxFont object associated with the base font
3902 Initializes a TrueType font from a PDF dictionary. @param fontDictionary the font dictionary containing font data @throws IOException if an I/O error occurs during initialization
3903 Initializes a Type 1C font from a given dictionary. @param fontDictionary the COSDictionary representing the font @throws IOException if font data cannot be read or parsed
3904 Initializes a PDType1Font from a font dictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during initialization
3905 Initializes a new Type 3 font from a PDF dictionary. @param fontDictionary PDF dictionary representing the font @param resourceCache cache for managing font resources @throws IOException on I/O errors during initialization
3906 Creates a PDType0Font from a font file. @param doc PDF document to embed the font into @param randomAccessRead font file data @param embedSubset whether to embed a subset of the font @param vertical whether the font supports vertical text @return PDType0Font object or throws IOException if an error occurs
3907 Creates a PDType0Font instance for embedding TrueType fonts in PDFs. @param doc PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @return PDType0Font object configured with specified parameters @throws IOException if an I/O error occurs during font processing
3908 Creates a PDType0Font for embedding TrueType fonts in PDFs. @param doc PDF document to embed the font into @param ttf TrueTypeFont to be embedded @param embedSubset whether to embed a subset of the font @return PDType0Font object configured for vertical text @throws IOException if an I/O error occurs during font processing
3909 Creates a PDTrueTypeFont instance for embedding in a PDF. @param doc PDF document to embed the font into @param ttf TrueTypeFont instance to be embedded @param encoding character encoding for the font @return PDTrueTypeFont object configured for embedding @throws IOException if an error occurs during embedding
3910 Creates a PDTrueTypeFont instance from a PDF document and font data. @param doc PDF document to embed the font into @param randomAccessRead source of TrueType font data @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
3911 Retrieves all signature fields from the PDF document. @return List of PDSignatureField objects
3912 Masks terminal fields in the PDF form. Iterates through all fields, applying masking to terminal fields.
3913 Returns an iterator over form fields. @return Iterator of PDField objects
3914 Initializes or clears a cache of form fields. @param cache true to initialize cache, false to clear it
3915 Retrieves a form field by its fully qualified name. @param fullyQualifiedName unique identifier for the field @return PDField object or null if not found
3916 Applies mask overlays to specified pages in a PDF document. @param specificPageOverlayMap map of page numbers and overlay paths @return modified PDDocument with applied overlays @throws IOException if an error occurs during processing
3917 Applies mask overlays to specific pages in a PDF document. @param specificPageOverlayDocumentMap map of page numbers to overlay documents @return modified PDDocument with applied overlays @throws IOException if an I/O error occurs during processing
3918 Exports FDF document data to XML format. @param output Writer object for writing XML data @throws IOException if an error occurs during writing
3919 Creates a PDColorSpace from a COSBase object. Handles different types of color spaces and resources. @param colorSpace base object representing the color space @param resources PDF resources for resource management @param wasDefault indicates if it's a default colorspace @return PDColorSpace instance or throws IOException if creation fails
3920 Applies mask function to input using shading functions. @param input array of input values for the function @return array of masked output values within [0, 1] @throws IOException if function evaluation fails
3921 Constructs an indexed color space from a COSArray. @param indexedArray array representing the indexed color space @throws IOException if an error occurs during initialization
3922 Creates a PDImageXObject with mask handling from an image file. @param imagePath path to the source image file @param doc PDF document to add the image to @return PDImageXObject with applied mask if necessary @throws IOException if an I/O error occurs during processing
3923 Retrieves and processes the image without any mask or subsampling. @return BufferedImage of the original image @throws IOException if an I/O error occurs during processing
3924 Renders a PDF page as a BufferedImage with specified options. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @param imageType desired image type @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
3925 Renders a specified PDF page into a graphics context with scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @throws IOException if an I/O error occurs during rendering
3926 Splits a PDF document into multiple smaller documents. @param document the source PDF document to split @return List of PDDocument objects representing the split documents
3927 Masks and extracts text from a PDF document. @param doc PDDocument object representing the PDF to process @param outputStream Writer for outputting extracted text @throws IOException if an I/O error occurs during processing
3928 Loads an FDF document from an input stream. @param input XML input stream containing FDF data @return FDFDocument object representing the loaded FDF document @throws IOException if loading fails
3929 Handles masking operations for rendering text strings. @param string byte array containing the text to render @throws IOException if an I/O error occurs during processing
3930 Generates a GeneralPath for the specified glyph in the given font. @param baseName FontName representing the base font @param glyphName name of the glyph to generate path for @return GeneralPath object or empty path if not found
3931 Constructs a PDMMType1Font from a COSDictionary. @param fontDictionary the COSDictionary containing font data @throws IOException if an I/O error occurs during initialization
3932 Constructs a Type 3 font from a PDF dictionary. @param fontDictionary PDF dictionary representing the font @throws IOException on I/O errors during initialization
3933 Loads a Type 0 font from a file into a PDF document. @param doc PDF document to embed the font into @param file font file @return PDType0Font object or throws IOException if an error occurs
3934 Creates a PDType0Font from an input stream. @param doc PDF document to embed the font into @param input font data as input stream @param embedSubset whether to embed a subset of the font @return PDType0Font object or throws IOException if an error occurs
3935 Loads and creates a PDType0Font from a TrueType font file. @param doc PDF document to embed the font into @param file TrueType font file @return PDType0Font object or throws IOException if an error occurs
3936 Creates a PDType0Font from an input stream. @param doc PDF document to embed the font into @param input font file data as input stream @return PDType0Font object or throws IOException if an error occurs
3937 Creates a PDType0Font from an InputStream. @param doc PDF document to embed the font into @param input font file data stream @param embedSubset whether to embed a subset of the font @return PDType0Font object or throws IOException if an error occurs
3938 Creates a PDTrueTypeFont instance from a PDF document and font file. @param doc PDF document to embed the font into @param file source TrueType font file @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
3939 Creates a PDTrueTypeFont instance from an input stream. @param doc PDF document to embed the font into @param input source of TrueType font data as InputStream @param encoding character encoding for the font @return PDTrueTypeFont object representing the embedded font @throws IOException if an error occurs during font embedding
3940 Retrieves all digital signatures from the PDF document. @return List of PDSignature objects representing document signatures
3941 Adds a digital signature to the PDF document. @param sigObject the PDSignature object representing the signature @param signatureInterface interface for handling signature operations @param options configuration options for the signature process @throws IOException if an I/O error occurs during signing
3942 Imports form data from an FDF document into the PDF. @param fdf the FDF document containing import data @throws IOException if an I/O error occurs during processing
3943 Exports FDF document data to XML format and closes the writer. @param output Writer object for writing XML data @throws IOException if an error occurs during exporting or closing
3944 Evaluates shading function with a single input value. @param inputValue single input value for the function @return array of masked output values within [0, 1] @throws IOException if function evaluation fails
3945 Applies mask function to input values. @param values input array of float values @return result of mask function evaluation @throws IOException if function evaluation fails
3946 Applies soft mask to current non-stroking color. @return Paint with applied soft mask or original if no mask is valid @throws IOException if issues occur during mask processing
3947 Renders a transparency group onto the specified graphics context. Handles visibility checks, transformations, and soft masks. @param form PDF transparency group to render @param graphics target graphics context for rendering
3948 Renders a PDF page as a BufferedImage. @param pageIndex 1-based index of the page to render @param scale scaling factor for rendering @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
3949 Renders a PDF page as an RGB image at specified DPI. @param pageIndex 1-based index of the page to render @param dpi desired dots per inch for rendering @return BufferedImage representation of the PDF page in RGB format @throws IOException if an I/O error occurs during rendering
3950 Renders a PDF page as a BufferedImage with specified DPI and image type. @param pageIndex 1-based index of the page to render @param dpi desired dots per inch for rendering @param imageType desired image type @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
3951 Renders a specified PDF page to a graphics context with uniform scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @param scale uniform scaling factor for both width and height @throws IOException if an I/O error occurs during rendering
3952 Extracts a range of pages from a PDF document. @return PDDocument containing the extracted pages or an empty document if invalid range
3953 Extracts and returns text from a PDF document. @param doc PDDocument object representing the PDF to process @return String containing extracted text @throws IOException if an I/O error occurs during processing
3954 Loads an FDF document from a file. @param filename path to the FDF file @return FDFDocument object representing the loaded FDF document @throws IOException if loading fails
3955 Loads an XFDF document from a file. @param file File containing XFDF data @return FDFDocument object representing the loaded XFDF document @throws IOException if loading fails
3956 Handles masking operations for rendering text strings. @param string byte array containing the text to render @throws IOException if an I/O error occurs during processing
3957 Processes text rendering operations from a PDF array. Handles text positioning, scaling, and font application. @param array COSArray containing text rendering instructions @throws IOException if an I/O error occurs during processing
3958 Creates a PDFont object from a COSDictionary. @param dictionary the input PDFont dictionary @param resourceCache cache for resources @return PDFont instance based on font type and subtype @throws IOException if I/O error occurs or unsupported font type
3959 Creates a PDType0Font from an input stream with font subsetting. @param doc PDF document to embed the font into @param input font data as input stream @return PDType0Font object or throws IOException if an error occurs
3960 Retrieves the last digital signature from the PDF document. @return PDSignature object or null if no signatures are present
3961 Prepares external signing support for a PDF document. @param output stream to write the signed PDF @return ExternalSigningSupport instance for signing operations @throws IOException if an I/O error occurs or document setup fails
3962 Masks specified form fields in a PDF document. @param fields list of PDField objects to be masked @param refreshAppearances flag indicating whether to refresh field appearances @throws IOException if an I/O error occurs during processing
3963 Adds a digital signature to the PDF document. @param sigObject PDSignature object representing the signature @param options configuration options for the signature process @throws IOException if an I/O error occurs during signing
3964 Adds a digital signature to the PDF document with default options. @param sigObject the PDSignature object representing the signature @param signatureInterface interface for handling signature operations @throws IOException if an I/O error occurs during signing
3965 Exports FDF document data to XML format and saves it to a file. @param fileName destination file for the XML output @throws IOException if an error occurs during exporting or file handling
3966 Applies mask to a given path for PDF rendering. @param path the shape to be masked @param font the font used for rendering @param code character code for glyph width calculation @param displacement vector for positioning adjustments @param at affine transformation matrix @throws IOException if issues occur during mask processing
3967 Converts PNG to PDF-compatible image object with transparency handling. @param doc PDF document to add the image @param state conversion state containing image properties @return PDImageXObject instance with processed image data or null if conversion fails @throws IOException if I/O operations fail
3968 Renders a PDF page as a BufferedImage with default scaling. @param pageIndex 1-based index of the page to render @return BufferedImage representation of the PDF page @throws IOException if an I/O error occurs during rendering
3969 Renders a specified PDF page to a graphics context with default scaling. @param pageIndex 1-based index of the page to render @param graphics Graphics2D context for rendering @throws IOException if an I/O error occurs during rendering
3970 Retrieves a PDFont object by name. @param name the COSName of the font resource @return PDFont instance or null if not found @throws IOException if I/O error occurs or unsupported font type
3971 Creates a PDFont object from a COSDictionary. @param dictionary the input PDFont dictionary @return PDFont instance based on font type and subtype @throws IOException if I/O error occurs or unsupported font type
3972 Flattens form fields in a PDF document. @throws IOException if an I/O error occurs during processing
3973 Adds a digital signature to the PDF document with default options. @param sigObject PDSignature object representing the signature @throws IOException if an I/O error occurs during signing
3974 Exports FDF document data to XML format and saves it to a file. @param fileName destination file path for the XML output @throws IOException if an error occurs during exporting or file handling
3975 Applies mask to shaded triangles within device bounds. @param triangleList list of ShadedTriangle objects @param array 2D array representing pixel data @param deviceBounds Rectangle defining rendering area @throws IOException if mask application fails
3976 Applies mask and draws a path with specified winding rule. @param windingRule rule for path operations @throws IOException if an error occurs during processing
3977 Converts PNG to PDF-compatible image object based on IHDR chunk. @param doc PDF document to add the image @param state conversion state containing image properties @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
3978 Sets mask appearance for form fields. @param operands list of COSBase objects representing font and size @throws IOException if font not found or invalid operand types
3979 Ensures the specified font is available in the appearance stream's resources. @param appearanceStream PDF appearance stream to modify @throws IOException if an I/O error occurs while processing the stream
3980 Retrieves and initializes a PDFont object from the font settings. @return initialized PDFont instance or null if not found @throws IOException if I/O error occurs during font creation
3981 Merges the contents of a source PDF document into a destination PDF document. This method performs a comprehensive merge of various elements from the source document, including pages, metadata, outlines, structure trees, and more, into the destination document. It ensures that all elements are correctly cloned and integrated while maintaining the integrity and functionality of the resulting PDF. @param destination The destination PDF document where content will be merged. @param source The source PDF document from which content will be taken. @throws IOException If an error occurs during the merging process.
3982 Converts PNG image data to a PDF-compatible PDImageXObject. @param doc PDF document to add the image @param imageData byte array containing PNG data @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
3983 Handles mask appearance operators for form fields. @param operator the PDF operator to process @param operands list of COSBase objects representing color or font data @throws IOException if processing fails
3984 Masks data in the form field's appearance stream. Handles BMC/EMC markers and writes masked content. @param widget PDAnnotationWidget representing the form field @param appearanceStream PDAppearanceStream for output @throws IOException if an I/O error occurs during processing
3985 Applies mask settings from dictionary to graphics state. @param gs PDGraphicsState object to update @throws IOException if I/O error occurs during font creation
3986 Merges multiple PDF documents into a single output file. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for PDF compression settings @throws IOException if an error occurs during merging or I/O operations
3987 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param name image identifier @param customFactory optional factory for custom image processing @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
3988 Parses and processes mask appearance operators for form fields. @param content PDF content as byte array @throws IOException if an I/O error occurs during parsing or processing
3989 Merges PDF documents based on the current merge mode. @param streamCacheCreateFunction function to create stream cache @param compressParameters parameters for compression settings @throws IOException if an error occurs during merging or I/O operations
3990 Creates a PDImageXObject from a byte array. @param document PDF document to add the image @param byteArray source of image data @param name image identifier @return PDImageXObject instance or null if conversion fails @throws IOException if I/O operations fail
3991 Initializes PDDefaultAppearanceString with appearance and resources. @param defaultAppearance PDF content as COSString @param defaultResources resources for form fields @throws IOException if an I/O error occurs during processing
3992 Merges PDF documents with default compression. @param streamCacheCreateFunction function to create stream cache @throws IOException if an error occurs during merging or I/O operations
3993 Retrieves and initializes default appearance string for a PDF text field. @return PDDefaultAppearanceString object configured with appearance and resources @throws IOException if an I/O error occurs during processing
3994 Masks and processes form field appearances. @param apValue current appearance value of the field @throws IOException if an I/O error occurs during processing
3995 Initializes the AppearanceGeneratorHelper with a PDVariableText field. Validates font resources and retrieves default appearance string. @param field PDVariableText field to process @throws IOException if an I/O error occurs during processing
