1 Default constructor for the OperatorName class.
2 Constructs an OperatorProcessor with the given PDFStreamEngine context.
3 Protected constructor for COSBase. No arguments or return.
4 Constructs a COSUpdateState with the provided update information. @param updateInfo The update information object.
5 Constructs a new {@code DecodeOptions} instance.
6 Constructs a DecodeOptions instance with a specified source region. @param sourceRegion The region of the image to decode.
7 Constructs a {@code DecodeOptions} instance with specified subsampling. @param subsampling Subsampling value for both X and Y dimensions.
8 Default constructor for the Filter class.
9 Constructs a PageExtractor with source document and page range. @param sourceDocument PDF document to extract pages from @param startPage Starting page number (inclusive) @param endPage Ending page number (inclusive)
10 Initializes the XrefParser with a COSParser instance. @param cosParser The COSParser used for parsing.
11 Constructs an {@code AbstractXReference} with the given reference type. @param type The type of the XReference.
12 Constructs a ContentStreamWriter with the given output stream. @param out the output stream to write to
13 Creates a cache with stable caching enabled or disabled. @param enableStableCache Flag indicating whether to enable stable cache.
14 Constructs a `PDDocumentCatalog` with a document and root dictionary.
15 Initializes a new PDDocumentInformation instance with a COSDictionary. @param dic The COSDictionary containing document information.
16 Initializes a new PDDocumentNameDestinationDictionary with a COSDictionary. @param dict The COSDictionary containing name destinations.
17 Constructs a {@code PDDocumentNameDictionary} with catalog & names. @param cat The document catalog. @param names The name dictionary.
18 Constructs a PDPage instance using the provided COSDictionary. @param pageDictionary Dictionary representing the page.
19 Constructs a PDPage instance with a page dictionary and resource cache.
20 Constructs a COSDictionaryMap with provided maps. @param actualsMap Map of keys to values. @param dicMap COSDictionary object.
21 Constructs a PDDictionaryWrapper with the given COSDictionary. @param dictionary The COSDictionary to wrap.
22 Constructs a {@code PDNameTreeNode} from a COSDictionary. @param dict The COSDictionary for the node.
23 Constructs a PDNumberTreeNode with a COS dictionary and value class.
24 Constructs a {@code PDPageLabelRange} from a COSDictionary. @param dict The COSDictionary containing page label information.
25 Constructs a PDRange object from a COSArray. @param range The COSArray representing the range.
26 Constructs a PDRange with the given COSArray and index. @param range The COSArray representing the range. @param index The starting index of the range.
27 Constructs a PDStream instance with the given COSStream. @param str The COSStream to wrap.
28 Constructs a PDMarkInfo instance with the provided COSDictionary. @param dic The COSDictionary containing marking information.
29 Constructs a {@code PDMarkedContentReference} with a COSDictionary. @param dictionary The COSDictionary containing reference data.
30 Constructs a PDObjectReference with the given COSDictionary. @param theDictionary The COSDictionary this reference is associated with.
31 Constructs a `PDStructureNode` with the given COS dictionary. @param dictionary The COS dictionary for this node.
32 Default constructor for the Revisions class.
33 Constructs a PDPropertyList with the given COSDictionary. @param dict The COSDictionary associated with the property list.
34 Constructs a {@code PDBoxStyle} instance from a COSDictionary. @param dic The COSDictionary containing style attributes.
35 Constructs a new {@code AccessPermission} with default permissions.
36 Constructs an {@code AccessPermission} with the given permission bits. @param permissions integer representing permission bits
37 Initializes the filter dictionary with a COSDictionary. @param d The COSDictionary to use for initialization.
38 Constructs an RC4Cipher instance, initializing the salt array.
39 Constructs an FDFAnnotation with the provided COSDictionary. @param a The COSDictionary representing the annotation.
40 Constructs an FDFCatalog with the given catalog dictionary. @param cat The COSDictionary representing the FDF catalog.
41 Constructs an FDF dictionary from a COSDictionary. @param fdfDictionary The COSDictionary to wrap.
42 Constructs a new FDFField instance with the provided COSDictionary. @param f The COSDictionary representing the field.
43 Constructs an FDFIconFit object with the provided COS dictionary. @param f The COS dictionary containing fit information.
44 Constructs a FDFJavaScript object from a COSDictionary. @param javaScript The COSDictionary containing JavaScript data.
45 Constructs a `FDFNamedPageReference` with the given COS reference. @param r The COS dictionary representing the reference.
46 Constructs a new FDFOptionElement with the given COS array. @param o The COS array representing the option.
47 Constructs a new FDFPage with the given COSDictionary. @param p The COSDictionary representing the page data.
48 Constructs a FDFPageInfo with the given COSDictionary. @param p The COSDictionary containing page information.
49 Constructs a new FDFTemplate with the given COSDictionary. @param t The COSDictionary representing the template.
50 Constructs a PDFontDescriptor with the given font dictionary. @param desc The COSDictionary containing font descriptor data.
51 Constructs a PDFontSetting object with the given font settings. @param fs COSArray containing font settings.
52 Constructs a PDLineDashPattern with an empty dash array and zero phase.
53 Constructs a BlendMode instance with given name, channel function, and blend function.
54 Constructs a PDColor instance with a pattern and color space. @param patternName Color pattern name. @param colorSpace Associated color space.
55 Constructs a {@code PDDeviceNAttributes} instance from a COSDictionary. @param attributes The COSDictionary containing device N attributes.
56 Constructs a PDDeviceNProcess with the given attributes dictionary.
57 Constructs a PDGamma object from a COSArray. @param array COSArray containing gamma values
58 Constructs a PDTristimulus object from a COSArray. @param array Array containing X, Y, and Z tristimulus values.
59 Constructs a {@code PDTransparencyGroupAttributes} from a COSDictionary.
60 Constructs a `PDOptionalContentProperties` instance with given properties. @param props The COSDictionary containing optional content properties.
61 Constructs a PDAbstractPattern with the given COSDictionary. @param dictionary The COSDictionary for the pattern.
62 Constructs a PDShading instance from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
63 Constructs a `PDExtendedGraphicsState` with a dictionary and resource cache.
64 Constructs a PDSoftMask with a dictionary and resource cache. @param dictionary COSDictionary for mask properties @param resourceCache ResourceCache for accessing resources
65 Constructs a PDAction instance using the provided COSDictionary. @param a The COSDictionary representing the action.
66 Private constructor to prevent instantiation; utility class.
67 Constructs a PDAdditionalActions instance with the given COSDictionary. @param a The COSDictionary containing action data.
68 Constructs a new {@code PDAnnotationAdditionalActions} instance. @param a The COSDictionary containing action definitions.
69 Constructs a new {@code PDDocumentCatalogAdditionalActions} with actions. @param a The COSDictionary containing the actions.
70 Constructs a {@code PDFormFieldAdditionalActions} with given actions. @param a The COSDictionary containing the actions.
71 Constructs a {@code PDPageAdditionalActions} with provided actions. @param a The COSDictionary containing the actions.
72 Constructs a PDTargetDirectory from a COSDictionary. @param dictionary COSDictionary containing target directory data.
73 Constructs a PDURIDictionary with the given COSDictionary. @param dictionary The COSDictionary to wrap.
74 Constructs a PDWindowsLaunchParams object from a COSDictionary. @param p The COSDictionary containing launch parameters.
75 Constructs a `PDAppearanceCharacteristicsDictionary` from a COSDictionary. @param dict The COSDictionary to use for initialization.
76 Constructs a PDAppearanceDictionary with the given COSDictionary.
77 Constructs a PDAppearanceEntry with the given COSDictionary. @param entry The COSDictionary representing the appearance entry.
78 Constructs a PDBorderEffectDictionary with the given COSDictionary. @param dict The COSDictionary to use for border effect properties.
79 Initializes PDBorderStyleDictionary with a COSDictionary. @param dict The COSDictionary containing border style data.
80 Constructs a {@code PDExternalDataDictionary} from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
81 Constructs a CloudyBorder with given stream, intensity, line width, and rectangle.
82 Constructs a PDPropBuild instance with the given COSDictionary. @param dict The COSDictionary to associate with this builder.
83 Initializes a `PDPropBuildDataDict` with a COSDictionary. @param dict The COSDictionary to use.
84 Constructs a PDSeedValue from a COSDictionary. @param dict The COSDictionary containing seed value data.
85 Constructs a {@code PDSeedValueCertificate} from a COSDictionary. @param dict The COSDictionary containing certificate data.
86 Constructs a PDSeedValueMDP instance with the provided COSDictionary. @param dict The COSDictionary containing seed value properties.
87 Constructs a PDSeedValueTimeStamp with the given COSDictionary. @param dict The COSDictionary to associate with this object.
88 Constructs a PDSignature object from a COSDictionary. @param dict The COSDictionary containing signature data.
89 Constructs a SignatureOptions object with default page number 0.
90 Constructs a PDFTemplateCreator with the given PDFBuilder. @param templateBuilder The PDFBuilder to use for PDF creation.
91 Private constructor to prevent instantiation of FieldUtils.
92 Constructs a PDField instance with given AcroForm, dictionary, and parent.
93 Constructs a PDXFAResource with the given XFA base object. @param xfaBase The XFA base object.
94 Constructs a PDMeasureDictionary with the given COSDictionary. @param dictionary The COSDictionary to associate with this object.
95 Constructs a `PDNumberFormatDictionary` with the given COSDictionary.
96 Constructs a PDViewportDictionary with the given COSDictionary. @param dictionary The COSDictionary to wrap.
97 Constructs a PDThread instance, initializing it with a COSDictionary.
98 Constructs a PDThreadBead instance from a COSDictionary. @param b The COSDictionary representing the bead.
99 Constructs a {@code PDViewerPreferences} object from a COSDictionary. @param dic The COSDictionary containing viewer preferences.
100 Constructs a `PageDrawerParameters` object with the given parameters.
101 Initializes a PositionWrapper with the given text position. @param position The text position to wrap.
102 Constructs a new Matrix with identity transformation parameters.
103 Creates a new Matrix with transformation data from the provided array. @param src float array containing transformation data
104 Constructs a 3x3 transformation matrix with given parameters.
105 Private constructor to prevent instantiation of XMLUtil.
106 Default constructor for PDFStreamEngine.
107 Processes an operator by associating it with its arguments. @param op OperatorProcessor instance to be processed.
108 Sets the terminator character. @param term Terminator character (118-126, excluding 'z') @throws IllegalArgumentException if term is invalid
109 Sets the number of pages per split. @param split Number of pages for each split; must be > 0.
110 Sets the starting page for splitting. @param start The starting page number (must be > 0).
111 Sets the end page for splitting. @param end The ending page number (must be > 0).
112 Sets lenient parsing mode. Throws exception if parsing is done. @param lenient boolean value indicating lenient mode
113 Constructs a CompressParameters object with the given object stream size. @param objectStreamSize Size of the object stream in bytes.
114 Constructs a PDResources object with a resource dictionary and cache. @param resourceDictionary Resource dictionary. @param resourceCache Resource cache. @param directFontCache Cache for direct fonts.
115 Sets the blend mode for graphics operations. @param blendMode The blend mode to set; cannot be null.
116 Constructs a PDFieldTree with the given PDAcroForm. @param acroForm The root form; must not be null.
117 Returns the length of the stream. Throws exception if writing.
118 Constructs a PDFMergerUtility with an empty list of sources.
119 Constructs a COSWriterObjectStream with the given compression pool. @param compressionPool Compression pool for efficient data management.
120 Constructs a new PublicKeyProtectionPolicy object.
121 Initializes the textClippings list to an empty ArrayList.
122 Adds a PDF source file to the merging process. @param source PDF file to be merged.
123 Adds a source PDF to the merging process. @param source PDF file to be merged.
124 Adds a name to the instruction list. @param name The name to add.
125 Adds a child instruction sequence to the instruction list. @param child The instruction sequence to add.
126 Adds a public key recipient to the list of recipients. @param recipient The recipient to add.
127 Associates a rectangle with a region name. @param regionName Name of the region. @param rect Rectangle defining the region's area.
128 Sets the trailer dictionary for the current XrefTrailerObj. @param trailer COSDictionary representing the trailer
129 Retrieves a COSBase object from the key pool. @param key the key of the COSBase object to retrieve @return COSBase object or null if not found
130 Retrieves the Operator object for the given operator name. @param operatorName Name of the operator to retrieve. @return Operator object or null if not found.
131 Maps a Unicode sequence to a glyph name; returns ".notdef" if null. @param unicodeSequence Unicode sequence to map @return Glyph name or ".notdef" if not found
132 Handles exceptions during PDF processing, logging errors as needed. @param operator The operator being processed. @param operands Operator operands. @param exception The exception to handle.
133 Retrieves the top graphics state from the graphics stack.
134 Applies a mask operation using the graphics stack.
135 Returns the current number of graphics states on the stack.
136 Applies transformation matrix to point (x, y). @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float
137 Decrements the 'level' and logs a message if it becomes negative.
138 Sets the instruction value using the provided integer. @param value The integer value to set.
139 Throws IOException if stream is closed and cannot be read.
140 Throws an IOException, indicating that reset functionality is unsupported.
141 Throws an IOException, indicating reset functionality is unsupported.
142 Returns the document's encryption if it exists, null otherwise. Throws IOException if document hasn't been parsed.
143 Returns the document's access permission. Throws IOException if document hasn't been parsed.
144 Constructs an InvalidPasswordException with a custom error message.
145 Constructs an Operator with the given name. @param aOperator the operator's name; must not start with "/"
146 Returns a string representation of the PDF operator.
147 Returns a string representation of the COSArray, including its objects.
148 Returns a string representation of the COSObject. Includes the string representation of the internal state.
149 Retrieves a filter by name. @param filterName name of the filter to retrieve @return Filter object, or throws IOException if not found
150 Checks if all operands are instances of the given class. @param operands List of operands to check. @param clazz The class to check against.
151 Adds a float value to the instruction sequence. @param value The float value to add.
152 Sets the width of the signature image and updates parameters. @param width The desired width of the signature image.
153 Sets the visible sign's height and updates related parameters. @param height The desired height of the signature image. @return A reference to this PDVisibleSignDesigner object.
154 Calculates the distance between two points. @param ps Start point. @param pe End point. @return Distance between ps and pe.
155 Calculates a masked value based on three points. @param p, p1, p2 Points used in the calculation. @return A double representing the masked value.
156 Constructs a `PDMarkedContent` object with a tag and properties. @param tag The tag for the marked content. @param properties The properties of the marked content.
157 Returns the pattern mask name.
158 Returns the shading COS name.
159 Retrieves the default value name. @return The default value name as a String, or "" if null.
160 Sets the checkbox state to unchecked (Off).
161 Processes terminal fields in a list, calling m1() on each. @param fields List of PDField objects to process.
162 Checks if white point values are equal to 1.
163 Generates a color map based on shading type and domain values. Returns an integer array representing the color map.
164 Generates a color map based on radial shading parameters. Returns an integer array representing the color map.
165 Creates and initializes the code table with initial codes. @return List of byte arrays representing the code table.
166 Adds a list of sources to the merger. @param sourcesList List of sources to add.
167 Retrieves a COSBase object at the given index. @param index index of the object to retrieve @return COSBase object at the specified index
168 Returns the element at the specified index. @param index index of the element to return
169 Returns the number of objects in the array.
170 Delegates to the underlying actual object's m1 method.
171 Returns the number of public key recipients.
172 Delegates emptiness check to the internal objects collection.
173 Delegates m1() call to the wrapped collection.
174 Checks if the recipient list contains the given recipient. @param recipient The recipient to check for. @return True if the recipient is present, false otherwise.
175 Returns an iterator for the COSBase objects in this array.
176 Returns an iterator for the elements in this collection.
177 Returns an iterator for the list of public key recipients.
178 Returns a new list containing the COSArray's objects.
179 Extracts string values from COS objects in the array. @return A List of strings representing COS object names.
180 Extracts string values from COS objects in the array. @return A List of strings extracted from the COS objects.
181 Creates a COSBoolean from a Boolean value. @param value The Boolean value to wrap. @return COSBoolean object representing the value.
182 Returns the string representation of the boolean value.
183 Writes the boolean value to the output stream as PDF bytes. @param output Output stream to write the boolean value to.
184 Writes NULL_BYTES to the provided OutputStream. @param output The OutputStream to write to.
185 Writes data to the output stream. @param data The byte array to write.
186 Returns a set of entries representing key-value pairs.
187 Checks if a new entry replaces the old one. Returns true if oldEntry is null and newEntry isn't.
188 Returns the number of items in the dictionary.
189 Retrieves the COSBase value associated with the given key. @param key The key to look up in the items map.
190 Returns a set of the keys in the items map.
191 Applies a bi-consumer action to each item in the dictionary. @param action BiConsumer to apply to each key-value pair.
192 Returns a collection of the dictionary's values.
193 Copies items from the provided dictionary to the internal items. @param dict The COSDictionary from which to copy items.
194 Checks if the dictionary contains a key. @param name The key to check for. @return True if the key exists, false otherwise.
195 Splits the string by spaces, removing leading/trailing spaces. @param s The string to split. @return Array of substrings after splitting.
196 Parses the token as an integer. @param token String representing an integer value @return Integer value of the token
197 Returns a string representing the function mask, prefixed with "FunctionType".
198 Sets the encryption key length. @param l Key length (40, 128, or 256). @throws IllegalArgumentException if l is invalid.
199 Sets the starting page for text extraction. @param startPageValue The starting page number (1-based).
200 Sets the end page for text extraction. @param endPageValue The ending page number (1-based).
201 Initializes the parser with a COSDocument and COSParser. @param cosDocument The PDF document to parse. @param cosParser Parser for COS objects.
202 Default constructor. Initializes the xrefType to XRefType.TABLE.
203 Constructs a PDResources object from a COSDictionary. @param resourceDictionary The COSDictionary containing resources. @throws IllegalArgumentException if resourceDictionary is null.
204 Constructs a PDResources object. @param resourceDictionary The COSDictionary for resources. @param resourceCache Resource cache to use.
205 Initializes the operators map with predefined operator constants.
206 Constructs a PDAcroForm with a document and form dictionary. @param doc The PDF document. @param form The COSDictionary representing the form.
207 Returns the size of the byte position to xref map.
208 Retrieves a COSObject from the object pool by key. @param key COSObjectKey - key to retrieve the object by @return COSObject or null if key is null
209 Updates the cross-reference table with provided values. @param xrefTableValues Map of xref table keys to long values.
210 Parses a token string as a float. @param token The string to parse. @return The parsed float value.
211 Masks float values: handles infinity and values near zero. @param floatValue The float value to mask. @return Masked float value.
212 Adjusts text direction based on text matrix values. Updates `direction` field; returns current direction value.
213 Checks if an object is a COSFloat with the same mantissa. @param o Object to check. @return True if object is COSFloat with same mantissa.
214 Returns the hash code value for the float value.
215 Returns string representation of the float value. Converts to BigDecimal if not in simple format.
216 Writes a null object and a space character to the output stream.
217 Constructs a COSIncrement object. @param incrementOrigin The origin of the increment.
218 Constructs a PDFCloneUtility, setting the destination document. @param dest The destination PDDocument for cloning.
219 Constructs a DefaultResourceCache. @param enableStableCache Enables/disables stable caching.
220 Checks if the COS object requires an update. Delegates to a nested method for the actual check.
221 Checks if the collection contains the given object. @param base object to check for existence @return true if present, false otherwise
222 Checks if a COSBase object is excluded. @param base The COSBase object to check. @return True if excluded, false otherwise.
223 Adds a COSBase object to the internal list, if not null. @param object The COSBase object to add.
224 Adds the given COSObject to the processedObjects list. @param base COSObject to be added, can be null.
225 Adds a TrueTypeFont to the list of fonts to be closed. @param ttf The TrueTypeFont to add.
226 Extracts COSDictionaries from PDF form fields. @param fields List of PDF form fields @return Set of COSDictionaries found in the fields
227 Constructs a COSInputStream with an input stream and decode results. @param input The input stream to decode. @param decodeResults List of decode results.
228 Constructs an ASCII85InputStream, initializing internal state. @param is The input stream to decode from.
229 Constructs a CCITTFaxDecoderStream with specified parameters. @param stream Input stream for fax image data @param columns Image column count @param type CCITT compression type
230 Returns a COSInteger, caching if within the defined range. @param val The integer value to be represented.
231 Checks if object is a COSInteger with the same value. @param o object to compare @return true if object is COSInteger with same value
232 Returns a string representation of the COS integer. @return String representation of the integer value.
233 Writes the integer value to the output stream as bytes. @param output The output stream to write to.
234 Delegates to the underlying map to retrieve a value. @param key the key whose value is to be retrieved @return the value associated with the key
235 Retrieves the FontName based on the provided font name alias. @param fontName the font name alias to lookup @return FontName object or null if not found
236 Associates a font alias with its base name in the ALIASES map.
237 Collects selected export values based on the form's state.
238 Delegates to the internal name's m1() method.
239 Writes a comment to the output stream, ensuring no newline chars. @param comment The comment string to write.
240 Writes a newline character to the output stream.
241 Converts a string to a hexadecimal char array. @param text String to convert; each char becomes 4 hex chars. @return Hexadecimal representation of the input string.
242 Creates a COSObjectKey with number, generation, and stream index. @param num The object number. @param gen The generation number. @param index The stream index.
243 Returns the hash code for the object's numberAndGeneration.
244 Calculates a value based on single array elements. Returns single[0] if single[1] is zero, otherwise calculates.
245 Returns a calculated value based on single array elements.
246 Constructs a COSOutputStream with filters, parameters, and output stream. @param filters List of filters to apply @param parameters COSDictionary containing parameters.
247 Constructs an ASCII85OutputStream that writes to the given OutputStream.
248 Constructs a COSStandardOutputStream with the given OutputStream.
249 Constructs a COSStandardOutputStream with given OutputStream and position.
250 Releases resources held by streamCache, randomAccess, etc.
251 Releases resources held by streamCache, randomAccess, and readView.
252 Returns a copy of the bytes array.
253 Writes incremental data to output, using input stream. Uses RandomAccessInputStream for input and ByteArrayOutputStream.
254 Converts byte array to String using US-ASCII encoding.
255 Checks if the origin document is accepting updates. @return True if origin document accepts updates, false otherwise.
256 Converts a byte array to a String, handling unknown characters. @param bytes The byte array to convert. @return The converted String.
257 Extracts a masked value from the PDF stream. Returns the extracted value as a String.
258 Converts a string to a byte array using a custom encoding. @param text The string to encode. @return Byte array representing the encoded string.
259 Checks if a character is present in the Unicode-to-code mapping. @param character The character to check. @return True if the character is mapped, false otherwise.
260 Delegates key existence check to the underlying map. @param key The key to check. @return True if the key exists in the map.
261 Checks if an alias exists for the given font name. @param fontName The font name to check. @return True if an alias exists, false otherwise.
262 Returns an unmodifiable map of code-to-name mappings.
263 Returns an unmodifiable map of inverted encoding mappings.
264 Throws an UnsupportedOperationException, indicating operation is not supported.
265 Reads a single byte from the ASCII85 encoded stream. Handles EOF, invalid data, and stream resetting.
266 Resets the internal state of the ASCII85InputStream.
267 Encodes a byte and writes ASCII85 data to the output stream. @param b The byte to encode.
268 Finishes writing ASCII85 encoded data, adds terminators. Writes encoded data, handles line breaks, and resets state.
269 Pads the password with ENCRYPT_PADDING to a fixed length. @param password The password to pad. @return The padded password array.
270 Closes the output stream and logs a warning if endText() wasn't called.
271 Writes XMP data to an output stream. @param xmp The XMP data to write. @throws IOException if an I/O error occurs.
272 Checks if a page number is a split boundary. @param pageNumber The page number to check.
273 Throws an UnsupportedOperationException, JPX encoding not implemented.
274 Throws an UnsupportedOperationException, implementation pending.
275 Throws an exception as this class is immutable.
276 Throws an exception as this class is immutable.
277 Throws an exception, indicating the class is immutable.
278 Throws an exception as the class is immutable.
279 Throws an UnsupportedOperationException, indicating unimplemented functionality.
280 Throws an UnsupportedOperationException, as the method is not implemented.
281 Throws an exception; signature values must be set via setValue().
282 Retrieves the compression level, falling back to default if invalid.
283 Delegates the m1 method to the underlying actual object. @param o object to check @return true if actual contains the object, false otherwise
284 Initializes the decoder with an input stream, skipping the zlib header. @param inputStream Input stream containing compressed data. @throws IOException If an I/O error occurs.
285 Inflates data and calls the superclass's m2 method.
286 Creates a new PDVisibleSigBuilder instance, initializing PDF structure.
287 Sets signature image and extracts its dimensions. @param image BufferedImage containing the signature image.
288 Finds the code table index matching the given pattern. Returns -1 if no match is found.
289 Applies predictor decoding based on the predictor type. @param predictor Predictor algorithm type. @param colors Number of color components.
290 Checks if a COS object with the given key exists in the pool. @param key The key of the COS object to check.
291 Registers a security handler with a name and policy. @param name Handler name. @param securityHandler Handler class. @param protectionPolicy Policy class.
292 Checks if a name exists in the inverted mapping. @param name The name to check. @return True if name exists, false otherwise.
293 Checks if a code exists in the code-to-name mapping. @param code The integer code to check. @return True if code exists, false otherwise.
294 Escapes a string for inclusion in an XML document. @param input The string to escape. @return The escaped string.
295 Sets the bounding box for the XObject. @param bbox The bounding box rectangle, or null to clear.
296 Converts a string to a byte array, parsing hex values. @param s Input string containing hex-encoded data. @return Byte array representing the decoded data.
297 Closes the document and resources, throwing an exception if any fail.
298 Ensures document is open; throws exception if not.
299 Returns the COSDictionary. Uses functionStream if available, else uses functionDictionary.
300 Constructs a PDXObject with a given stream and subtype. @param stream The underlying PDStream object. @param subtype The subtype of the XObject.
301 Returns the underlying COSStream object from the stream.
302 Retrieves the metadata stream from the color space. @return COSStream containing metadata.
303 Sets the metadata for the color space. @param metadata Metadata object to set.
304 Checks if any annotation matches the widget. @param annotations List of annotations to check. @param widget The widget to match against annotations.
305 Checks if this annotation is equal to another. @param o The object to compare with. @return True if equal, false otherwise.
306 Returns a set view of the keys in the underlying map.
307 Checks if a signature field matches any field in the iterator. @param fieldIterator Iterator of PDF fields @param signatureField Signature field to match @return True if a matching field is found, false otherwise.
308 Returns a collection of the map's values. @return Collection of values.
309 Initializes the BaseParser with a PDF source. @param pdfSource RandomAccessRead object representing PDF source.
310 Delegates parsing to internal method m2, using source.m1().
311 Adds an XRef entry for an object if it doesn't already exist. @param objKey The object key. @param offset The offset of the object.
312 Adds a code-to-name mapping and its inverse. @param code The font code. @param name The corresponding name.
313 Delegates parsing to a helper method, returning its result.
314 Handles line breaks, potentially advancing the source pointer. @param linebreak Line break character encountered. @return True if the linebreak is processed correctly.
315 Handles braces parameter; returns 0 or original value. Reads bytes, checks conditions, and returns based on input.
316 Checks if char is line feed or carriage return. @param c character to check @return True if line feed or carriage return, false otherwise.
317 Reads a numeric value from the PDF source into a StringBuilder. Throws IOException if the number exceeds MAX_LENGTH_LONG.
318 Decodes buffer to string, using UTF-8 or alternative charset. @param buffer ByteArrayOutputStream to decode @return String representation of the buffer content
319 Asserts the current character matches expected char. Throws IOException if mismatch found.
320 Delegates parsing to a helper method.
321 Extracts the startXref offset from the PDF xref table. Returns -1 if not found.
322 Finds the last EOF marker in the PDF source. Returns the marker's offset, or Long.MAX_VALUE if not found.
323 Finds offsets of cross-reference tables in the PDF. Returns a list of Long representing the offsets.
324 Returns the number of color components. Calculates if not already set.
325 Finds offsets of xref stream entries. Searches for object references within xref streams. @return List of found offsets.
326 Retrieves object offsets from the xref trailer. Returns a map of COSObjectKey to Long.
327 Skips to the end of the file and finds the startxref marker. @return Offset to the startxref marker, used for further parsing.
328 Parses an endstream filter stream, extracting content. @param out EndstreamFilterStream to populate with data @return Length of the processed stream
329 Default constructor for ToUnicodeWriter, initializes wMode.
330 Sets a label range, throwing IllegalArgumentException if startPage < 0. @param startPage Starting page index for the label range. @param item The PDPageLabelRange to set.
331 Maps a CID to a Unicode string, validating input. @param cid Character identifier (0-65535) @param text Unicode string representation
332 Checks for "EI" markers, determining if they're inlined. Returns true if no binary data is found, false otherwise.
333 Parses a PDF stream token. @return True if parsing successful, false otherwise.
334 Adds an XRef entry's object number if not already present. @param entry The XReferenceEntry whose object number to add.
335 Calculates column widths based on XReferenceEntry data. @return Array of integer column widths.
336 Constructs a COSObjectPool with a given highest cross-reference number. @param highestXRefObjectNumber The highest cross-reference object number.
337 Returns the trailer dictionary if xref map exists, null otherwise. Uses sorted xref offsets to retrieve trailer dictionary.
338 Resolves the FUNC mask trailer dictionary. Returns null if bytePosToXrefMap is empty.
339 Finds object numbers with a specific comparison value. @param objstmObjNr Object number to compare against. @return Set of object numbers matching the comparison value.
340 Returns a long value by composing results from m1() and m2().
341 Returns the FUNC_MASK value by retrieving it from m1 and m2.
342 Returns a string representation of the FreeReference object.
343 Returns a masked value, delegating to m1().
344 Returns a combined value derived from m1() and m2().
345 Returns a string representation of the reference. Includes key, type, and byte offset.
346 Returns a combined value by calling m1() and then m2().
347 Returns the value obtained from calling m1().
348 Returns a string representation of this ObjectStreamEntry.
349 Writes data to the stream, optionally starting on a new line. @param b The byte array to write. @param off Start offset in the data array. @param len Number of bytes to write.
350 Writes a byte to the output stream, manages line breaks. @param b The byte to write. Increments the current position.
351 Writes EOL and sets new line if not already on a new line.
352 Checks if parameters should be compressed. @return True if compression is enabled, false otherwise.
353 Adds a cross-reference entry to the list. @param entry The XReferenceEntry to add.
354 Writes an indirect reference string to the output stream. @param output The output stream to write to. @param indirectReference COSObjectKey for the reference.
355 Calculates and returns an array of Long values based on XRef entries. @param xRefEntriesList List of XReferenceEntry objects.
356 Gets an MD5 MessageDigest instance. @return MD5 MessageDigest or throws RuntimeException.
357 Generates a SHA-1 MessageDigest instance. Throws RuntimeException if SHA-1 is unavailable.
358 Gets a SHA-256 MessageDigest instance. @return SHA-256 MessageDigest or throws exception.
359 Writes FDF document to PDF, handling incremental updates. @param doc The FDFDocument to write. @throws IOException if an I/O error occurs.
360 Retrieves the next available object pool index. @return long representing the next index.
361 Returns unmodifiable list of prepared COS object keys.
362 Updates encoding mappings: removes old name if code matches, then adds/updates code-to-name and name-to-code mappings.
363 Removes a region by name. @param regionName Name of the region to remove.
364 Sets max fraction digits for decimal formatting. @param fractionDigitsNumber Max digits after decimal point.
365 Constructs a content stream with given document, stream, and resources. @param document The PDF document. @param outputStream The output stream. @param resources The resources to use.
366 Returns vertical displacement Y for a CID code. @param code The CID code to look up. @return Vertical displacement Y value.
367 Returns standardValue if not null, otherwise returns defaultValue.
368 Adjusts signature dimensions by a percentage and updates parameters. @param percent The percentage by which to increase dimensions.
369 Returns the width of the signature image.
370 Returns the height of the signature image.
371 Adjusts signature position and transform based on rotation.
372 Creates an AffineTransform from matrix elements.
373 Converts a string to a byte array using font encoding. @param text string to be encoded @return byte array representing the encoded string
374 Retrieves glyph name for a given Unicode code point. @param codePoint Unicode character code. @return Glyph name or ".notdef" if not found.
375 Returns the RenderState for the given COSName. @param state COSName representing the render state @return RenderState object or null if state is null
376 Returns BaseState based on the given COSName. @param state The COSName representing the state. @return BaseState object.
377 Finds glyph IDs, applies gsub, and writes glyph data. @param gsubWorker Gsub worker for glyph substitution.
378 Constructs a PDDocument with a COSDocument, source, and permission. @param doc The COSDocument to use. @param source Source for reading PDF data. @param permission Access permission for the document.
379 Constructs an FDFDocument from a COSDocument and source. @param doc The COSDocument to use. @param source Source for reading the document.
380 Delegates to the wrapped collection's toArray method.
381 Delegates array conversion to the actual implementation. @param <X> Type of elements in the array. @param a The array to convert. @return Converted array.
382 Delegates to the wrapped list's m1 method. @param o the object to search for @return index of the object, or -1 if not found
383 Delegates to the underlying collection's containsAll method. @param c collection to check for containment @return true if all elements in c are present
384 Removes all elements from the list that are also in the collection. @param c collection of elements to remove @return true if the list was modified, false otherwise
385 Removes elements from the list not present in the given collection. @param c the collection to compare against @return true if the list was modified
386 Delegates the method call to the wrapped object. @param o the object to pass to the wrapped method @return the result of the wrapped method
387 Delegates to the wrapped object's m1() method.
388 Delegates to the wrapped list's m1 method. @param o the object to pass to the wrapped list @return the result of the wrapped list's m1 method
389 Delegates to the underlying list's list iterator.
390 Returns a list iterator over the elements, starting at index.
391 Returns a portion of the list, from fromIndex to toIndex. @param fromIndex start index (inclusive) @param toIndex end index (exclusive)
392 Delegates value check to the underlying map. @param value value to check for existence @return true if value exists, false otherwise
393 Returns an unmodifiable set view of the map entries.
394 Returns unmodifiable set of font aliases.
395 Delegates to the wrapped object's toString() method.
396 Creates a COSObjectable from a COSBase, handling exceptions. @param base The base COS object. @return A COSObjectable or throws IOException on error.
397 Generates a string of letters based on the input number. @param num The number to convert to a letter string. @return String representation of the number as letters.
398 Returns the number of labels.
399 Creates a PDPageLabelRange for the specified start page. @param startPage The starting page number for the range.
400 Returns a navigable set of page labels as a TreeSet.
401 Returns the dash lengths array from the underlying structure.
402 Creates a PDColor instance with specified components and color space. @param components Color components; cloned for safety. @param colorSpace The color space for the color.
403 Returns color components as an array. Returns components if pattern or null color space.
404 Constructs a `CoordinateColorPair` with given coordinate and color. @param p the coordinate @param c the color values
405 Returns a string representation of the FunctionType2 object.
406 Calculates the bounding box coordinates of the triangle. Returns an integer array containing min/max x/y values.
407 Retrieves a number from the execution stack.
408 Pops an integer value from the execution stack.
409 Retrieves a float value from the stack. Returns a float from a Number object on the stack.
410 Adds a boolean value to the instruction list. @param value The boolean value to add.
411 Constructs an ExecutionContext with the provided operator set. @param operatorSet Set of operators for function execution.
412 Returns a list of regex patterns for text extraction. Lazily initializes the list if it's null.
413 Initializes MacExpertEncoding by populating the encoding table.
414 Initializes MacRomanEncoding by mapping characters from the table.
415 Initializes the StandardEncoding by iterating through the table.
416 Initializes the symbol encoding by iterating over the table.
417 Initializes the WinAnsiEncoding with character code mappings.
418 Initializes the encoding by mapping character codes to names.
419 Converts an object array to a comma-separated string. @param array The array of objects to convert. @return String representation of the array.
420 Converts a float array to a comma-separated string. @param array The float array to convert. @return String representation of the array.
421 Masks content at the given text position. @param text The TextPosition to mask.
422 Adds marked content to the list. @param markedContent The content to be added.
423 Masks content using the provided XObject. @param xobject The XObject used for masking.
424 Sets the printing permission if not in read-only mode. @param allowPrinting True to allow printing, false to disable.
425 Sets/clears the modification permission bit if not read-only. @param allowModifications True to allow modifications, false otherwise.
426 Allows/disallows content extraction if not in read-only mode. @param allowExtraction True to allow, false to disallow.
427 Allows/disallows annotation modification if not read-only. @param allowAnnotationModification True to allow, false to disallow.
428 Sets/clears the fill-in form permission bit if not read-only. @param allowFillingInForm True to allow filling, false to disallow.
429 Sets/clears the extract accessibility bit if not read-only. @param allowExtraction True to allow, false to disallow extraction.
430 Sets/clears the assemble document permission bit. @param allowAssembly True to allow, false to disallow.
431 Sets/clears the faithful print permission if not read-only. @param canPrintFaithful True to enable, false to disable.
432 Checks if the permission bit for printing is enabled.
433 Checks if modification permission is enabled. Uses isPermissionBitOn to determine modification status.
434 Checks if the EXTRACT_BIT permission is enabled. Uses m1 to check the bit's status.
435 Checks if MODIFY_ANNOTATIONS permission is enabled. Uses isPermissionBitOn to determine the permission status.
436 Checks if filling form is allowed. Uses `isPermissionBitOn` to check the FILL_FORM_BIT.
437 Checks if the accessibility bit is set. @return True if the accessibility bit is set, false otherwise.
438 Checks if the assemble document permission bit is enabled.
439 Checks if faithful printing permission is enabled. Uses `isPermissionBitOn` to determine the bit's status.
440 Retrieves the Key object from the keystore based on alias. @return Key object or throws KeyStoreException if not found.
441 Returns a SecureRandom instance, using custom if provided.
442 Initializes the RC4 cipher with the provided key. @param key Encryption key, length between 1 and 32 bytes.
443 Encrypts a byte using the RC4 cipher and writes it to output. @param aByte The byte to encrypt. @param output The output stream to write the encrypted byte.
444 Handles diacritics: returns diacritic value or normalized string. @param str Input string to process.
445 Checks if a codepoint is masked for SASL use. Uses multiple tagging checks to determine masking.
446 Returns a mask based on key length and policy. @return Mask value representing encryption level.
447 Returns the singleton BouncyCastle security provider. Creates it if it doesn't already exist.
448 Extracts text content from child nodes of an XML element. @param node The XML element to extract text from. @return A string containing the concatenated text content.
449 Writes the given text to the output stream. @param text The text to be written.
450 Retrieves a CMap by name, caching it for future use. @param cMapName Name of the CMap to retrieve. @return The CMap object or a new one if not cached.
451 Parses a CMap from a RandomAccessRead. Returns null if input is null.
452 Creates a set of font names based on the PostScript name. @param postScriptName The PostScript font name. @return A set containing the original and modified name.
453 Calculates a set of points representing a line segment. @param x0 start x coordinate @param y0 start y coordinate @param x1 end x coordinate @param y1 end y coordinate @return Set of Point objects representing the line.
454 Calculates the number of unique points from an array of Point2D objects.
455 Adds a font to the cache, associating it with font info. @param info FontInfo object @param font FontBoxFont object
456 Retrieves a FontBoxFont from the cache based on FontInfo. @param info FontInfo object used as cache key @return FontBoxFont or null if not found in the cache
457 Associates a base font name with its alias in the ALIASES map. @param baseName The base FontName object.
458 Adds a font substitution. @param match Font name to match (lowercase). @param replace Replacement font name.
459 Retrieves FontInfo by PostScript name, handling "+" prefix. @param format FontFormat @param postScriptName PostScript font name @return FontInfo or null if not found/mismatch.
460 Finds font substitutes for a given PostScript name. @param postScriptName PostScript font name to search for. @return List of font substitute names.
461 Retrieves the name associated with a given code point. @param code The integer code point to look up.
462 Retrieves the best font match from a priority queue. @param queue PriorityQueue of FontMatch objects @return Best FontMatch or null if queue is empty
463 Retrieves a Type2CharString for the given CID. @param cid Character identifier for the glyph. @return Type2CharString object or null if not found.
464 Calculates a masked value from the given code using parent's methods.
465 Converts color components to an RGB integer. @return RGB integer representation of the color.
466 Calculates a masked color value based on group, backdrop RGB and alpha. @param groupRGB Group RGB value. @param backdropRGB Backdrop RGB value. @param shift Shift value. @param alphaFactor Alpha factor. @return Masked color value.
467 Extracts a portion of the byte array. @return A new byte array containing bytes from start to end.
468 Returns the default GlyphList instance.
469 Initializes cmap fields based on TrueType font cmap table.
470 Parses AFM font file, extracts metrics, and associates them with font. @param fontName FontName object representing the font to parse. @throws IOException if resource is not found or parsing fails.
471 Checks font restrictions based on OS2 metrics. Returns false if restricted or bitmap-only, true otherwise.
472 Checks if subsetting is allowed based on TrueType font properties. @param ttf The TrueTypeFont object to check. @return True if subsetting is allowed, false otherwise.
473 Converts a number to a base-25 string, padding to length 6. @param gidToCid map (unused in this method) @return base-25 string representation of the number.
474 Resolves a character name to its Unicode representation. @param name The character name to resolve.
475 Creates a Type1Encoding from FontMetrics, adding character mappings. @param fontMetrics FontMetrics object containing character metrics
476 Constructs a PDColor with components, pattern name, and color space. @param components Color components (cloned). @param patternName Pattern name. @param colorSpace The color space.
477 Creates a BufferedImage using the provided raster and ColorSpace. @param raster WritableRaster for the image data. @param awtColorSpace ColorSpace for the image.
478 Converts a raster to a BufferedImage, handling single-band images. @param raster The input raster. @param colorSpace The color space. @return A BufferedImage representing the converted raster.
479 Checks if the device model of an ICC profile is "sRGB". @param profile The ICC profile to check.
480 Returns color space type, delegates to profile or alternate space.
481 Creates a PDImageXObject from a BufferedImage with default quality. @param document PDF document @param image BufferedImage to encode @return PDImageXObject
482 Initializes the PredictorEncoder with document and image data. @param document PDDocument object @param image BufferedImage to encode
483 Creates a masked image, resizing and interpolating if needed. @param image Source image. @param width Desired width. @param height Desired height.
484 Returns the FUNC mask dictionary from the parameters.
485 Parses PNG data and extracts chunks into a state object. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
486 Creates a multiple input stream from IDAT chunks in the state. @param state PNGConverterState containing IDAT chunks @return MultipleInputStream containing the IDAT data
487 Constructs a Patch object with the provided color coordinates. @param color 2D array representing color values at corners.
488 Calculates the combined clipping area based on stored paths. Returns the combined area or a cached version if available.
489 Constructs a PlainText object from a list of strings. @param listValue list of strings to be converted to paragraphs
490 Returns the hash code of the annotation dictionary.
491 Creates an AffineTransform with translation based on bbox. @return AffineTransform object with translation.
492 Calculates parameters for a cloudy border shape. @param length border length, advInterm, advCorner, k, r are params @param array stores calculated alpha and dx values @return Number of segments, or -1 if length is 0.
493 Calculates an angle based on points, radius, and curl advance. @param pt First point. @param ptNext Second point. @param r Radius. @param curlAdv Curl advance value.
494 Adjusts polygon point order if area is negative. @param points Array of Point2D.Double representing polygon vertices.
495 Extracts points from an ellipse path. @param left, bottom, right, top Ellipse dimensions @return Array of Point2D.Double representing the ellipse path
496 Checks if a GeneralPath starts with a valid mask shape. @param path The GeneralPath to check. @return True if the path is a valid mask, false otherwise.
497 Returns a value calculated by m1().
498 Sets the X and Y coordinates of the visible signature. @param x The X coordinate. @param y The Y coordinate. @return The PDVisibleSignDesigner instance.
499 Sets the affine transform and returns the designer instance. @param affineTransform Transformation matrix for signature placement.
500 Constructs a PDPageFitDestination from a COSArray. @param arr The COSArray containing destination information.
501 Constructs a PDPageFitHeightDestination from a COSArray. @param arr The COSArray containing destination information.
502 Constructs a `PDPageFitRectangleDestination` from a COSArray. @param arr The COSArray containing destination information.
503 Constructs a PDPageFitWidthDestination from a COSArray. @param arr The COSArray containing destination information.
504 Constructs a PDPageXYZDestination from a COSArray. @param arr The COSArray containing destination information.
505 Throws exception if node has siblings. Ensures a single node.
506 Returns an iterable of child outline items using an iterator.
507 Sorts a list of KeyValue pairs in ascending order.
508 Sorts a list of KeyValue pairs by key using the BY_KEY_COMPARATOR.
509 Applies rendering hints to the graphics context. @param renderingHints Map of rendering hints to apply.
510 Adjusts line path based on transform type and scale. @param linePath The GeneralPath to adjust. @return The adjusted GeneralPath.
511 Calculates image subsampling value based on transform and image dimensions.
512 Rounds a double to the nearest integer, using CEILING rounding. @param num The double to round. @return The rounded integer value.
513 Calculates a masked translation value based on text rotation.
514 Calculates a masked translation value based on rotation.
515 Calculates a position based on rotation. Returns a value based on rotation angle.
516 Writes the text element's Unicode representation to output.
517 Returns the Unicode representation of the text element.
518 Extracts text from a specified region and returns it as a string. @param regionName Name of the region to extract text from.
519 Writes the article start string to the output. @param isLTR Determines the left-to-right text direction.
520 Writes the current article to the output stream. Uses m2 to write the result of m1.
521 Writes a line separator to the output stream.
522 Writes the word separator string to the output.
523 Writes paragraph start string to output. Manages paragraph state and calls write paragraph start.
524 Writes the start string of the current PDF page to the output.
525 Writes extracted text to the output file using the end-of-page marker.
526 Finds a pattern that matches the input string. @param string String to match against patterns. @param patterns List of patterns to check. @return Matching pattern or null if none found.
527 Processes a word to handle bidirectional text mirroring. @param word The word to process.
528 Processes input stream, extracts char pairs, and stores them. @param inputStream Input stream to process. @throws IOException if an I/O error occurs.
529 Checks text directionality and reverses if needed. Returns reversed string if RTL is detected.
530 Processes a text position, extracting text within defined regions. Uses m6 to identify relevant regions and calls super.m5.
531 Checks if the text is a non-spacing mark/modifier. @return True if text is a non-spacing mark/modifier.
532 Sets timezone ID based on offset, formatting as GMT+/-HH:MM. @param tz TimeZone object to set the ID for.
533 Converts a byte to its hexadecimal string representation. @param b The byte to convert. @return Hexadecimal string (e.g., "A3").
534 Converts a byte array to a hexadecimal string representation. @param bytes The byte array to convert. @return Hexadecimal string.
535 Converts a byte to a two-byte hexadecimal representation. @param b The byte to convert. @return A byte array containing the hex representation.
536 Converts a byte array to its hexadecimal byte representation. @param bytes The byte array to convert. @return Hexadecimal byte array.
537 Writes a byte's hexadecimal representation to the output. @param b The byte to convert. @param output The output stream to write to.
538 Decodes a Base64 string and removes spaces. @param base64Value Base64 encoded string to decode. @return Decoded byte array.
539 Merges sorted segments of array into auxiliary array. @param arr input array, @param aux auxiliary array, indices.
540 Constructs a Matrix from an AffineTransform, extracting transformation values.
541 Applies a transformation to the given point. @param point The point to transform.
542 Formats a float value into an ASCII byte array. @param value The float to format. @param maxFractionDigits Max fraction digits. @param asciiBuffer The buffer to store the formatted bytes.
543 Reads PDFBox version from properties file. @return Version string or null if unable to read.
544 Parses an XML InputStream into a Document. @param is Input stream containing XML data. @param nsAware Flag for namespace awareness. @return Document object representing the XML.
545 Retrieves a value from the trie based on the provided byte sequence. @param bytes The byte array used as the key. @return The associated value or null if not found.
546 Creates a COSBoolean object with the given boolean value. @param aValue The boolean value to be represented.
547 Initializes a COSName with the provided name string. @param aName The string representation of the name.
548 Private constructor to limit COSNull instance creation.
549 Constructs a COSString from byte array. @param bytes The byte array representing the string data. @param forceHex Whether to force hexadecimal encoding.
550 Constructs a new, empty COSDictionary. Initializes the update state for tracking changes.
551 Constructs a COSObject wrapping the given COSBase object. @param object The COSBase object to wrap.
552 Constructs a COSObject with a COSBase and parser. @param object The COSBase object. @param parser The parser used to create the object.
553 Constructs a COSObject with a key and parser. @param key The object key. @param parser The parser for the object.
554 Creates DecodeOptions with specified rectangle coordinates. @param x The x coordinate of the rectangle. @param y The y coordinate of the rectangle. @param width Rectangle width. @param height Rectangle height.
555 Constructs a FreeXReference with a key and next free object. @param key The COS object key. @param nextFreeObject The next free object identifier.
556 Constructs an ObjectStreamXReference with given details. @param objectStreamIndex Index in object stream. @param key Object key.
557 Creates a cache with stable caching enabled by default.
558 Constructs a PDTypedDictionaryWrapper with the given COSDictionary. @param dictionary The COSDictionary to wrap.
559 Constructs a PDAttributeObject using a COSDictionary. @param dictionary The COSDictionary to use for initialization.
560 Constructs a PDUserProperty with a COSDictionary and user attribute object. @param dictionary The COSDictionary representing the property. @param userAttributeObject The associated user attribute object.
561 Constructs a PDOutlineNode using a COSDictionary. @param dict The COSDictionary containing node data.
562 Constructs a PDTransition with the given COSDictionary. @param dictionary The COSDictionary to use for the transition.
563 Constructs a {@code PDDestinationNameTreeNode} from a COSDictionary. @param dic The COSDictionary for the node.
564 Constructs a {@code PDEmbeddedFilesNameTreeNode} from a COSDictionary. @param dic The COSDictionary for the node.
565 Constructs a {@code PDJavascriptNameTreeNode} from a COSDictionary. @param dic The COSDictionary for the node.
566 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic The COSDictionary for the node.
567 Creates a PDNumberTreeNode from a COS dictionary. @param dic The COS dictionary to use for creation.
568 Constructs a PDMetadata object from a COSStream. @param str The COSStream to use for metadata.
569 Constructs a PDObjectStream with the given COSStream. @param str The COSStream to wrap.
570 Constructs a PDEmbeddedFile using a COSStream. @param str The COSStream to use for the embedded file.
571 Initializes a PDFunction with a COSBase object (stream or dict). @param function The COSBase representing the function definition.
572 Constructs a PDXObject with a COSStream and subtype. @param stream The COSStream to wrap in a PDStream. @param subtype The subtype of the XObject.
573 Constructs a `PDStructureElement` using the provided COS dictionary. @param dic The COS dictionary for the element.
574 Constructs a `PDStructureTreeRoot` from a COSDictionary. @param dic The COSDictionary containing structure tree data.
575 Default constructor for the SecurityHandler class.
576 Constructs a SecurityHandler with the given protection policy. @param protectionPolicy The policy defining encryption parameters.
577 Constructs an FDFAnnotationCaret with the provided COSDictionary. @param a The COSDictionary representing the annotation.
578 Constructs a `FDFAnnotationCircle` from a `COSDictionary`. @param a The `COSDictionary` representing the annotation.
579 Constructs an FDFAnnotationFileAttachment from a COSDictionary. @param a The COSDictionary representing the annotation.
580 Constructs a `FDFAnnotationFreeText` using a provided COSDictionary. @param a The COSDictionary representing the annotation.
581 Constructs an FDFAnnotationInk using the provided COSDictionary. @param a The COSDictionary representing the annotation.
582 Constructs an FDFAnnotationLine with the provided COSDictionary. @param a The COSDictionary representing the annotation.
583 Constructs an FDFAnnotationLink from a COSDictionary. @param a The COSDictionary representing the annotation.
584 Constructs a FDFAnnotationPolygon with a COSDictionary. @param a The COSDictionary representing the annotation.
585 Constructs a `FDFAnnotationPolyline` using a provided COSDictionary. @param a The COSDictionary representing the polyline annotation.
586 Constructs an FDFAnnotationSound from a COSDictionary. @param a The COSDictionary representing the sound annotation.
587 Constructs a FDFAnnotationSquare from a COSDictionary. @param a The COSDictionary representing the annotation.
588 Constructs an FDFAnnotationStamp with the provided COSDictionary. @param a The COSDictionary representing the stamp annotation.
589 Constructs an FDFAnnotationText with a provided COSDictionary. @param a The COSDictionary representing the annotation.
590 Constructs a `FDFAnnotationTextMarkup` with a provided COSDictionary. @param a The COSDictionary representing the annotation.
591 Creates a PDPanoseClassification from a portion of the bytes. @return New PDPanoseClassification object.
592 Creates a Composite object based on blendMode and alpha. @param blendMode Blend mode to use. @param constantAlpha Alpha value (clamped to 0-1). @return Composite object.
593 Returns the transparency group attributes, creating if necessary.
594 Constructs a PDShadingPattern from a COSDictionary. @param resourceDictionary The COSDictionary representing the pattern.
595 Constructs a PDTilingPattern with a dictionary and resource cache. @param dictionary The COSDictionary for the pattern. @param resourceCache Resource cache for pattern resources.
596 Constructs a PDShadingType1 instance from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
597 Constructs a PDShadingType2 from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
598 Constructs an AxialShadingPaint with the given shading type and matrix.
599 Constructs a RadialShadingPaint with a shading and transformation matrix.
600 Constructs a Type1ShadingPaint with a shading and transformation matrix.
601 Constructs a Type4ShadingPaint with the given shading and matrix.
602 Constructs a Type5ShadingPaint with the given shading and matrix.
603 Constructs a Type6ShadingPaint with the given shading and matrix.
604 Constructs a Type7ShadingPaint with a given shading and matrix.
605 Constructs a `PDExtendedGraphicsState` with a COSDictionary. @param dictionary The COSDictionary containing graphics state data.
606 Constructs a PDSoftMask using a COSDictionary. @param dictionary COSDictionary containing mask properties.
607 Constructs a PlainText object from a string, splitting into Paragraphs. @param textValue the string to be converted to Paragraphs
608 Constructs an EmbeddedGoTo action using a COSDictionary. @param a The COSDictionary representing the action.
609 Constructs a PDActionGoTo action from a COSDictionary. @param a The COSDictionary representing the action.
610 Constructs a PDActionHide object from a COSDictionary. @param a The COSDictionary representing the hide action.
611 Constructs a PDActionImportData object from a COSDictionary. @param a The COSDictionary to use for initialization.
612 Constructs a PDActionJavaScript action from a COSDictionary. @param a The COSDictionary representing the JavaScript action.
613 Constructs a PDActionLaunch using the provided COSDictionary. @param a The COSDictionary representing the action.
614 Constructs a PDActionMovie using the provided COSDictionary. @param a The COSDictionary representing the movie action.
615 Constructs a PDActionNamed using the provided COSDictionary. @param a The COSDictionary representing the action.
616 Constructs a `PDActionRemoteGoTo` action from a COSDictionary. @param a The COSDictionary containing action properties.
617 Constructs a PDActionResetForm using the provided COSDictionary. @param a The COSDictionary representing the reset action.
618 Constructs a PDActionSound using a COSDictionary. @param a The COSDictionary representing the sound action.
619 Constructs a PDActionSubmitForm using a COSDictionary. @param a The COSDictionary representing the submit form action.
620 Constructs a PDActionThread using the provided COSDictionary. @param a The COSDictionary representing the action.
621 Constructs a PDActionURI from a COSDictionary. @param a The COSDictionary representing the URI action.
622 Creates a list of KeyValue objects from key and value lists. @param key List of keys. @param value List of values. @return List of KeyValue objects.
623 Constructs a PDNonTerminalField with AcroForm, dictionary, and parent.
624 Constructs a PDTerminalField with AcroForm, dictionary, and parent.
625 Constructs a PDRectlinearMeasureDictionary from a COSDictionary. @param dictionary The COSDictionary to associate with this object.
626 Creates a new Matrix using data from the single Matrix. @return New Matrix object with transformation data.
627 Creates a transformation matrix with given x and y scaling factors.
628 Creates a 3x3 transformation matrix with scaling 1 and translation (x, y).
629 Creates a transformation matrix for rotation and translation. @param theta Rotation angle in radians. @param tx Translation along x-axis. @param ty Translation along y-axis.
630 Transforms a vector using matrix elements. @param vector The vector to transform. @return Transformed vector.
631 Scales the vector by sxy and returns a new Vector. @param sxy scaling factor @return new Vector with scaled coordinates
632 Creates a field tree for the form. @return A PDFieldTree representing the form's fields.
633 Sets the default value for the root node of the trie. @param defaultValue The default value to set.
634 Retrieves an object at the specified index. @param index The index of the object to retrieve.
635 Delegates to the underlying list's size method.
636 Retrieves a value from the collection at the given index. @param index Index of the value to retrieve. @return The value at the specified index.
637 Adds an object and its revision number to the revisions list. @param object The object to add. @param revisionNumber The revision number for the object.
638 Associates a revision number with an existing object. @param object The object to update. @param revisionNumber The revision number to assign.
639 Returns Encoding instance based on provided COSName. @param name COSName to check against known encodings. @return Encoding instance or null if not found.
640 Creates a PDSoftMask from a dictionary or returns null if invalid. @param dictionary COSBase dictionary for the mask. @param resourceCache ResourceCache for accessing resources.
641 Finds the first enabled radio button widget index. Returns -1 if no enabled widget is found.
642 Adds a PDF source file to the merging process. @param source Path to the PDF file to be merged.
643 Parses the PDF trailer object from the input stream. Returns true on success, false otherwise.
644 Retrieves a COSBase object from the object pool. @param key the key of the COSBase object to retrieve @return COSBase object or null if not found
645 Executes instructions, handling strings as operators. @param context Execution context for instruction execution.
646 Constructs a COSDocument with a stream cache and parser. @param streamCacheCreateFunction Function to create the cache. @param parser The parser used to read the PDF document.
647 Processes the 'mask' operator, executing processor or handling errors. @param operator The PDF operator. @param operands Operator operands.
648 Delegates to the underlying matrix. @return Matrix object from the underlying implementation.
649 Sets the text line matrix to the top graphics state. @param value The new text line matrix.
650 Delegates to the previous graphics state's text matrix. @return Matrix object representing the text matrix.
651 Applies a text matrix transformation. @param value The transformation matrix to apply.
652 Calculates a masked width based on transformation matrix values. @param width The width to mask.
653 Returns the non-stroking color, retrieving it from the graphics state.
654 Sets the non-stroking color. @param color The PDColor object representing the color.
655 Returns the non-stroking color space. Used for filling.
656 Returns the current stroking color from the graphics state.
657 Sets the stroking color using the graphics state and color space. @param color The PDColor object representing the new stroking color.
658 Retrieves the stroking color space. Delegates to the graphics state stack. @return PDColorSpace object or null.
659 Returns an InputStream for reading stream data. Throws IOException if stream is open or data is missing.
660 Creates a new OutputStream for writing to the stream. Returns a FilterOutputStream for data writing.
661 Finds an ImageReader for the given format name. @param formatName Image format name. @param errorCause Error message to include in exception. @return ImageReader or throws MissingImageReaderException.
662 Finds an ImageReader for the given format name. @param formatName Image format name. @param errorCause Error cause if reader not found.
663 Retrieves an Operator, creating it if not present. @param operator operator name @return Operator instance
664 Returns a string representation of the COSArrayList. Uses array.m1() to get the array's string representation.
665 Checks if control points satisfy a masking condition. @param ctl Array of control points used for masking.
666 Returns the rectangle's width from the array.
667 Returns the rectangle's width from the array.
668 Returns the rectangle's width from the array.
669 Returns the rectangle's width from the array.
670 Retrieves the font size from the font setting. @return Font size as a float.
671 Returns the gamma value from the color values array.
672 Returns the value of the second element in the values array.
673 Returns the gamma value from the color component array.
674 Returns the X value from the tristimulus values array.
675 Returns the Z value from the tristimulus values array.
676 Returns the Z value from the tristimulus values array.
677 Gets the number at the given index, or defaultValue if out of bounds. @param index the index of the number to get @param defaultValue the default value if index is out of bounds
678 Gets COSName value at index, returns defaultValue if not found. @param index index of COSName to retrieve @param defaultValue default value if COSName is not found
679 Finds the index of a matching COSBase object in the array. @param object COSBase object to search for @return Index of the object or -1 if not found
680 Parses filter list from COS stream. @return List of filters, or empty list if no filters.
681 Constructs a COSArrayList with a List and COSArray. Checks if list and array sizes match, sets isFiltered flag.
682 Evaluates Function Type 2 with input data. @param input Input array for the function evaluation. @return Float array representing the function's output.
683 Retrieves the stream filters as a list of COSName objects.
684 Extracts filter names from the stream's filters. Returns an empty list if no filters are found.
685 Writes a boolean value to the stream, followed by a space. @param output Output stream to write to. @param cosBoolean The boolean value to write.
686 Writes the byte representation of the text to the stream. @param text The string to write.
687 Writes a COSDictionary to the output stream, handling its entries. @param output The output stream to write to. @param cosDictionary The dictionary to write.
688 Adds a user property if a new entry replaces the old one. @param oldEntry The old entry being replaced. @param newEntry The new entry being added.
689 Returns the number of items in the underlying map.
690 Retrieves a COSObject by key, returns null if not an object. @param key The key to look up.
691 Retrieves COSBase value for firstKey, or secondKey if first is null. @param firstKey The first key to retrieve. @param secondKey The second key to retrieve if firstKey is null. @return COSBase value or null if neither key exists.
692 Gets the number of recipients from the recipients array.
693 Retrieves a recipient COSString from the recipients array. @param i Index of the recipient in the array.
694 Retrieves the FUNC_MASK value, defaulting to zero if null. @return COSBase representing the FUNC_MASK or zero.
695 Returns a set of keys from the document information.
696 Retrieves a list of attribute names from the COSDictionary.
697 Copies specific trailer dictionary entries to the stream. Filters entries based on key names (INFO, ROOT, etc.).
698 Constructs a COSDictionary with items copied from another dictionary. @param dict The COSDictionary to copy items from.
699 Checks if dictionary contains specific keys, returning false if present. @param dictionary The COSDictionary to check.
700 Checks if font descriptor has widths or missing width. Uses dic.m1() to check for presence of COSName keys.
701 Checks if the font descriptor has a missing width attribute. @return True if missing width exists, false otherwise.
702 Checks if the dictionary contains the XFA key. @return True if XFA key exists, false otherwise.
703 Associates start byte position with an XrefTrailerObj. @param startBytePos Starting byte position in the PDF. @param type XRefType of the associated trailer object.
704 Creates a COSFloat from a string, handling various PDF number formats. @param aFloat The string representation of the float.
705 Returns a string representation of the COSFloat object.
706 Writes the COS float value to the output stream. Uses ISO-8859-1 encoding for the byte representation.
707 Creates a new COSIncrement object using the update info.
708 Constructs a LayerUtility, initializing with a target document. @param targetDoc The PDF document to work with.
709 Constructs a DefaultResourceCache with stable caching enabled.
710 Checks if a COSUpdateInfo object requires an update. Returns true if the base object is a COSUpdateInfo; otherwise, false.
711 Sets the MCID value. Throws exception if MCID is negative. @param mcid The MCID value to set.
712 Returns a COSInteger representing the transition angle in degrees.
713 Writes a COSInteger to the output stream, followed by a space. @param output The output stream to write to. @param cosInteger The COSInteger object to write.
714 Writes a comment string to the output stream, ensuring no newlines. @param comment The comment string to write.
715 Writes a comment to the stream, ensuring no newline chars. @param comment The comment string to write.
716 Adds a comment to the stream, throwing exception if newline chars. @param comment The comment string to add.
717 Writes a comment to the stream, ensuring no newline chars. @param comment The comment string to write.
718 Creates a COSObjectKey with number and generation. @param num The object number. @param gen The generation number.
719 Compares this entry with another. @param xReferenceEntry The entry to compare to. @return Comparison result based on referenced objects.
720 Returns the horizontal scaling factor from the text matrix.
721 Returns the m1 value from the text matrix.
722 Creates a COSWriter with an output stream and compression parameters. @param outputStream The stream to write PDF data to. @param compressParameters Compression settings for the PDF.
723 Creates a COSWriter with an OutputStream and input data. @param outputStream The output stream for PDF data. @param inputData RandomAccessRead object for incremental updates.
724 Sets the updated flag if origin accepts updates. @param updated The new value for the updated flag.
725 Decodes string based on byte array prefix. Uses UTF-16BE/LE if applicable, else uses default encoding.
726 Creates a COSString with specified text and hex encoding flag. @param text The string to encode. @param forceHex Whether to force hexadecimal encoding.
727 Checks if the font is a standard 14 font. Uses m1() and Standard14Fonts.m3(m2()) for determination.
728 Copies bytes from the ASCII85 stream to the provided buffer. @param data buffer to copy to, @param offset offset in buffer, @param len number of bytes to copy @return number of bytes copied
729 Finishes writing ASCII85 data, calls super, and releases resources.
730 Closes the output stream, logs warning if endText() isn't called.
731 Closes the output stream, logs warning if endText() was not called.
732 Closes the output stream, logs warning if endText() is missing.
733 Closes the output stream; logs warning if endText() wasn't called.
734 Reads the next byte from the decoded data stream. Returns -1 if EOF is reached or no more data is available.
735 Reads compressed data and copies it to the provided byte array. @param data destination array, @param offset offset, @param length length @return Number of bytes read or -1 if EOF.
736 Reads signature image from stream and processes it. @param stream Input stream containing the signature image.
737 Encodes raw data to an OutputStream using LZW compression. @param rawData Input stream for data to be encoded. @param encoded Output stream for compressed data. @param parameters COSDictionary containing parameters.
738 Selects the best row based on estimated compression sum. Chooses the row with the highest compression efficiency. @return byte[] The selected row data.
739 Iterates through xref trailers, resets each, clears references.
740 Applies m1 to overlays, open documents, and maps.
741 Constructs a PDFormXObject with a given stream. @param stream The underlying PDStream object.
742 Creates a PDFStreamParser for a content stream. @param pdContentstream The PDF content stream to parse. @throws IOException if an I/O error occurs.
743 Creates a PDFStreamParser with a byte array as input. @param bytes The byte array representing the PDF stream.
744 Retrieves a COSBase object from the stream by object number. @param objectNumber The object number to retrieve. @return The COSBase object or null if not found.
745 Parses object numbers and offsets from the stream. Returns a map of object number to its offset.
746 Initializes with a code-to-name mapping. @param codeToName Map of font code to its name.
747 Creates a Type1Encoding from an existing encoding. @param encoding The encoding to use as a base. @return A new Type1Encoding object.
748 Skips whitespace characters from the PDF source. Advances the source pointer if not a linebreak.
749 Parses a PDF element. Returns false if parsing fails, increments source position.
750 Reads a masked value from the PDF source. Throws IOException on EOF. Returns the masked string.
751 Skips whitespace and '#' characters in the PDF source. Handles comments and advances the source position.
752 Returns the number of color components, calculating if needed.
753 Returns the number of color components. Calculates if needed.
754 Finds closest offset to xrefOffset, prioritizing streams. Uses brute force search for cross-reference tables/streams.
755 Parses PDF header using default version. @param PDF_HEADER Header marker string. @param PDF_DEFAULT_VERSION Default version string.
756 Parses FDF header, returns true if valid. @throws IOException if an I/O error occurs
757 Parses PDF object stream and returns a map of objects. @return Map of COSObjectKey to COSBase objects.
758 Generates a new encryption key by combining existing key & object number. @param objectNumber Object number to incorporate into the key. @param genNumber Generation number to incorporate into the key.
759 Constructs a content stream from an appearance stream. @param appearance The appearance stream to copy from. @param outputStream The output stream.
760 Creates a content stream with document, appearance, and output stream. @param doc The PDF document. @param appearance The appearance stream. @param outputStream The output stream.
761 Transforms point (x, y) using the current transformation matrix. @param x x-coordinate of the point @param y y-coordinate of the point @return Transformed Point2D.Float object.
762 Creates a PaintContext using provided parameters and transforms. @param cm ColorModel, deviceBounds, userBounds, xform, hints
763 Applies a transformation to the matrix, updating 'single'. @param matrix The Matrix object to transform.
764 Updates matrix elements based on translation values. @param tx Translation along x-axis @param ty Translation along y-axis
765 Scales the single matrix by sx and sy. @param sx Scaling factor for columns. @param sy Scaling factor for rows.
766 Combines this matrix with another, performing a matrix multiplication. @param other The other Matrix to multiply with. @return A new Matrix representing the combined transformation.
767 Writes content stream data based on glyphs or gsub results. @param gsubWorker Gsub worker for glyph substitution.
768 Creates a PDDocument instance using the document, source, and permissions.
769 Constructs a PDDocument with a COSDocument and source. @param doc The COSDocument to use. @param source Source for reading PDF data.
770 Creates a SecurityHandler for a given ProtectionPolicy. @param policy ProtectionPolicy to create handler for. @return SecurityHandler instance or null if not found.
771 Retrieves a SecurityHandler by name. @param name Name of the SecurityHandler to retrieve. @return SecurityHandler instance or null if not found.
772 Sets the stroking color if a valid color is provided. @param color The color to set; null if no color is needed. @return True if color set, false otherwise.
773 Sets the non-stroking color based on the provided color. @param color The color to set, or null to reset. @return True if color set, false otherwise.
774 Initializes MacOSRomanEncoding by mapping char codes to names.
775 Checks if all permission bits are enabled. Uses multiple permission checks to determine overall status.
776 Checks multiple permission bits; returns true if any are set.
777 Encrypts byte array and writes to output. @param data The byte array to encrypt. @param output The output stream to write encrypted data.
778 Encrypts a byte array and writes it to the output stream. @param data Byte array to encrypt. @param offset Start index in the array. @param len Number of bytes to encrypt. @param output Output stream to write encrypted data.
779 Updates text and widths based on diacritic processing. @param i index @param diacritic Diacritic object
780 Writes text to the output stream. @param text The text to be written.
781 Constructs a Line object with two points and colors. @param p0 start point @param p1 end point @param c0 color at p0 @param c1 color at p1
782 Constructs a SoftMask object with provided parameters. @param paint The paint to use. @param mask The mask image.
783 Masks group image data based on backdrop, offsetting by (x, y). @param backdrop Backdrop BufferedImage. @param offsetX Offset for X coordinate. @param offsetY Offset for Y coordinate.
784 Retrieves FontMetrics for a font name, parsing if necessary. @param fontName Alias for the font. Returns null if not found.
785 Constructs a GlyphList from an input stream. @param input Input stream containing glyph list data. @param numberOfEntries Initial capacity for hash maps. @throws IOException if an I/O error occurs.
786 Constructs a GlyphList, copying from another and loading from input. @param glyphList Source GlyphList to copy from. @param input Input stream to load additional glyphs.
787 Resolves a character code to its glyph ID, handling encodings. @param code The integer code point to resolve.
788 Resolves font name, returning a valid Unicode name or ".notdef". @param name The font name to resolve.
789 Resolves a font name, attempting alternate names and Unicode mappings. @param name The font name to resolve. @return Resolved font name or ".notdef" if not found.
790 Initializes the CMYK color space, loading an ICC profile. Throws IOException if profile loading fails.
791 Masks an image using a mask, resizing and interpolating. @param image Source image. @param mask Mask image.
792 Validates a chunk's CRC checksum. @param chunk Chunk object to validate @return True if CRC is valid, false otherwise.
793 Constructs a CubicBezierCurve with given control points and level. @param ctrlPnts Control points for the curve. @param l Level of detail for the curve.
794 Checks if a point is inside the triangle. @param p Point to check for containment.
795 Calculates color for a given point. @param p The point at which to calculate the color. @return An array of floats representing the color.
796 Sets the clipping path using the provided GeneralPath. @param path The GeneralPath to use for clipping.
797 Sets the current clipping area. @param area The Area object representing the clipping region.
798 Sets the clip region based on a computed clipping path. Uses a rectangle if the path computation is incomplete.
799 Renders a tiling pattern onto the graphics context. Saves and restores graphics context state for rendering.
800 Calculates a masked value using m1() and m2().
801 Constructs a TextPosition object with specified parameters. @param pageRotation rotation of the page
802 Calculates a masked translation value based on text direction.
803 Returns a position based on rotation angle.
804 Calculates a position based on rotation and returns it.
805 Calls m1(true) to start extracting text from a PDF article.
806 Writes a paragraph end string to output if not already in one.
807 Extracts a pattern for the text at the given position. @param pw Wrapper containing the text position @return Matching pattern or null if none found
808 Masks specific characters in a word based on Unicode ranges. @param word The input word to process.
809 Formats a Calendar object into a date string with timezone. @param cal Calendar object to format; null returns null.
810 Formats a Calendar object into a date/time string with offset. @param cal Calendar object to format. @return Formatted date/time string.
811 Converts byte array to hexadecimal string representation.
812 Writes a CMS signature to the PDF, handling incremental updates. @param cmsSignature The CMS signature to write.
813 Writes the COS name to the output stream, escaping invalid chars. @param output The output stream to write to.
814 Writes a byte array's hexadecimal representation to output. @param bytes The byte array to encode. @param output The output stream to write to.
815 Sorts the input array iteratively using merge sort. @param arr array to sort, @param cmp comparator for sorting
816 Parses an XML InputStream. @param is Input stream containing XML data. @return Document object representing the XML.
817 Detects file type from input stream by analyzing its content. @param inputStream BufferedInputStream to read file content. @return FileType object representing detected file type.
818 Initializes the LegacyPDFStreamEngine by adding various operators.
819 Retrieves a COSName from a cache, creating it if absent. @param aName The name to retrieve or create.
820 Constructs a COSString from a byte array. @param bytes The byte array representing the string data.
821 Constructs a COSArray with a new ArrayList and direct flag set to true.
822 Creates a COSArray from a list of COSObjectable objects. @param cosObjectables List of COSObjectable objects.
823 Constructs a COSStream with a given stream cache. @param streamCache Cache for RandomAccessStreams.
824 Creates an unmodifiable COSDictionary wrapping the given dictionary. @param dict The COSDictionary to wrap.
825 Creates a DecodeResult with an empty COSDictionary.
826 Constructs a new PDDocumentInformation object. Initializes the internal COSDictionary.
827 Constructs a new PDResources object, initializing internal data structures.
828 Creates a COSDictionary from a map, populating it with key-value pairs. @param someMap Map containing data to populate the COSDictionary. @return COSDictionary containing the data from the input map.
829 Constructs a new, empty PDDictionaryWrapper with a COSDictionary.
830 Constructs a new, empty `PDNameTreeNode` with a new COSDictionary.
831 Constructs a new PDNumberTreeNode with a specified value type. @param valueClass Class of the value stored in the node.
832 Constructs a {@code PDPageLabelRange} with a new COSDictionary.
833 Constructs a new PDMarkInfo object with an empty COSDictionary.
834 Constructs a new PDPropertyList with an empty COSDictionary.
835 Constructs a new PDBoxStyle object, initializing its COSDictionary.
836 Constructs a new, empty PDCryptFilterDictionary. Initializes the internal COSDictionary.
837 Constructs a new PDEncryption object, initializing its dictionary.
838 Constructs a new FDFCatalog with an empty COSDictionary.
839 Constructs a new, empty FDFDictionary. Initializes the FDF dictionary.
840 Constructs a new FDFField object. Initializes the internal field dictionary.
841 Constructs a new FDFIconFit object. Initializes the internal fit dictionary.
842 Constructs a new FDFJavaScript object. Initializes the internal COSDictionary.
843 Constructs a new, empty FDFNamedPageReference. Initializes the internal COSDictionary.
844 Constructs a new FDFPage, initializing its internal COSDictionary.
845 Constructs a new FDFPageInfo with an empty COSDictionary.
846 Constructs a new FDFTemplate with an empty COSDictionary.
847 Constructs a new `PDDeviceNAttributes` object. Initializes the internal COSDictionary.
848 Constructs a new PDDeviceNProcess object. Initializes the internal color space dictionary.
849 Constructs a new PDShading object, initializing its dictionary.
850 Constructs a new PDAdditionalActions object. Initializes the internal COSDictionary to store actions.
851 Constructs a new PDAnnotationAdditionalActions object. Initializes the actions dictionary to an empty COSDictionary.
852 Constructs a new `PDDocumentCatalogAdditionalActions` object. Initializes the actions dictionary.
853 Constructs a new `PDFormFieldAdditionalActions` object. Initializes the internal actions dictionary.
854 Constructs a new `PDPageAdditionalActions` object. Initializes the internal actions dictionary.
855 Constructs a new PDTargetDirectory object. Initializes the internal dictionary.
856 Constructs a new PDURIDictionary, initializing the URI dictionary.
857 Constructs a new PDWindowsLaunchParams object. Initializes the internal parameters dictionary.
858 Constructs a new PDBorderEffectDictionary with an empty COSDictionary.
859 Constructs a new PDBorderStyleDictionary, initializing its dictionary.
860 Constructs a new PDPropBuild with an empty COSDictionary.
861 Constructs a new PDPropBuildDataDict, initializing its dictionary.
862 Constructs a new PDSeedValueMDP with an empty COSDictionary.
863 Constructs a new PDSeedValueTimeStamp with an empty COSDictionary.
864 Constructs a PDField with an AcroForm, using default dictionary. @param acroForm The parent AcroForm instance.
865 Constructs a new PDViewportDictionary with an empty COSDictionary.
866 Constructs a new PDViewerPreferences object. Initializes the preferences dictionary.
867 Constructs a COSObject with a base object and key. @param object The COSBase object. @param objectKey The object key.
868 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
869 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
870 Constructs a PDStandardAttributeObject using a COSDictionary. @param dictionary The COSDictionary to use for initialization.
871 Constructs a PDOutlineItem using a COSDictionary. @param dic The COSDictionary containing item data.
872 Retrieves the PDF metadata stream, returning a PDMetadata object.
873 Retrieves metadata from the PDF document. @return PDMetadata object or null if not present.
874 Creates a PDObjectStream from an EXTENDS COSName stream. @return PDObjectStream or null if no stream exists.
875 Initializes a Type 0 PDF function. @param function The COSBase representing the function.
876 Creates a PDFunctionType3 with a function stream. @param functionStream COSBase object representing the function.
877 Constructs a PDPostScriptXObject with a COSStream. @param stream The COSStream containing PostScript content.
878 Constructs a PDFormXObject with a COSStream. @param stream The COSStream representing the form data.
879 Constructs a PDFormXObject with a COSStream and ResourceCache. @param stream The COSStream for the form XObject. @param cache ResourceCache to use.
880 Default constructor for the PublicKeySecurityHandler class.
881 Default constructor for the SecurityHandler class.
882 Constructs a PublicKeySecurityHandler with the given policy. @param publicKeyProtectionPolicy Encryption policy.
883 Constructs a StandardSecurityHandler with a protection policy. @param standardProtectionPolicy The policy defining encryption parameters.
884 Constructs a `FDFAnnotationHighlight` using a provided COSDictionary. @param a The COSDictionary representing the annotation.
885 Constructs a `FDFAnnotationSquiggly` from a COSDictionary. @param a The COSDictionary representing the annotation.
886 Constructs a `FDFAnnotationStrikeOut` using a provided COSDictionary. @param a The COSDictionary representing the annotation.
887 Constructs an `FDFAnnotationUnderline` from a COSDictionary. @param a The COSDictionary representing the annotation.
888 Constructs a PDTilingPattern using a COSDictionary. @param dictionary The COSDictionary for the pattern.
889 Constructs a PDShadingType3 from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
890 Constructs a `PDShadingType4` from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
891 Constructs a `PDShadingType5` from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
892 Constructs a PDButton with AcroForm, dictionary, and parent.
893 Constructs a PDSignatureField with AcroForm, dictionary, and parent.
894 Constructs a PDVariableText object. @param acroForm The PDF AcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
895 Generates a unique signature field name by incrementing a base name.
896 Generates a string representation of revisions. Iterates through revisions and formats them into a string.
897 Creates a PDSoftMask from a dictionary. @param dictionary COSBase dictionary for the mask.
898 Constructs a COSDocument using a memory-only stream cache. @param parser The parser used to read the PDF document.
899 Constructs a COSDocument with a stream cache. @param streamCacheCreateFunction Function to create the cache.
900 Processes a PDF operation with associated arguments. @param operation PDF operation string. @param arguments Arguments for the operation.
901 Creates a `PDMarkedContent` or `PDArtifactMarkedContent` based on tag. @param tag The tag to determine the content type. @param properties Properties for the created content.
902 Calculates a masked value by subtracting m2 from m1.
903 Checks if a point (x, y) lies within the rectangle's bounds. @param x x-coordinate of the point @param y y-coordinate of the point @return True if the point is within the rectangle, false otherwise.
904 Calculates a masked value by subtracting m2 from m1.
905 Creates a GeneralPath representing the rectangle, transformed by matrix. @param matrix Transformation matrix to apply. @return GeneralPath object.
906 Creates a GeneralPath representing the rectangle's outline. Uses helper methods to retrieve coordinates and draw lines.
907 Returns a string representation of the rectangle's coordinates.
908 Gets the number at the given index, or -1 if out of bounds. @param index the index of the number to get
909 Gets COSName value at index, returns null if not found. @param index index of COSName to retrieve
910 Creates an OutputStream for writing to a COS stream. @param filters Filters to apply to the stream. @return OutputStream for writing data.
911 Constructs a PDImageXObject with a stream and resources. @param stream The underlying PDStream object. @param resources The resources associated with the image.
912 Determines image suffix based on stream filters. Returns null if no matching filter is found.
913 Writes a finite float value to the output stream, handling formatting. @param real The float value to write.
914 Writes the formatted integer to the output stream, followed by a space. @param integer The integer to format and write.
915 Writes text to stream and adds a newline. @param text The string to write.
916 Checks if the map is empty. @return True if the map is empty, false otherwise.
917 Parses a string representation of a number into a COSNumber. @param number The string to parse as a number.
918 Writes a COSFloat to the output stream, followed by a space. @param output The output stream to write to. @param cosFloat The COSFloat object to write.
919 Delegates increment creation to the parent update info.
920 Retrieves a COSObjectKey, caching if xref table is large. @param num Object number. @param gen Generation number.
921 Searches for COS objects based on object markers and endobj. Uses source stream to find and record object offsets.
922 Finds object stream offsets using brute-force search. Returns a map of offset to COSObjectKey.
923 Parses cross-reference stream, resolving object locations. @param resolver XrefTrailerResolver to register object locations.
924 Finds a valid COS object at a given offset. @param objectKey The object key. @param offset The offset to search. @param xrefOffset Map of COSObjectKey to Long. @return COSObjectKey or null if not found.
925 Validates XRef table structure and resolves object offsets. Handles errors and logs warnings during parsing.
926 Creates a COSWriter with an output stream. @param outputStream The stream to write PDF data to.
927 Creates a COSWriter with an OutputStream, input data, and objects to write. @param outputStream OutputStream for PDF data. @param inputData RandomAccessRead for incremental updates. @param objectsToWrite Set of COSDictionaries to write.
928 Updates the COS object's update flag. @param flag The new value for the update flag.
929 Calls m1 with true as the parameter.
930 Gets string at index, returns defaultValue if out of bounds. @param index the index of the string to retrieve @param defaultValue the default string value
931 Returns the file name as a string.
932 Retrieves the name from the named destination. Returns name from COSString or COSName, null otherwise.
933 Extracts string values from COSBase objects. @param items COSBase object to extract from. @param pairIdx Index for nested arrays, must be 0 or 1. @return List of extracted strings, or empty list if none found.
934 Extracts string values from button flags. Returns empty list if null.
935 Retrieves the default appearance string for the text field. Returns null if the DA attribute is not a COSString.
936 Creates a COSString with the given text and default hex encoding flag. @param text The string to encode.
937 Creates a PDVisibleSignDesigner with a signature image. @param imageStream Input stream for the signature image.
938 Constructs a PDVisibleSignDesigner from an image file. @param path Path to the signature image file. @return PDVisibleSignDesigner object.
939 Constructs a PDTransparencyGroup with the given stream. @param stream The underlying PDStream object.
940 Parses a COSDictionary from the PDF source, handling errors. @param isDirect Indicates whether the dictionary is direct. @return COSDictionary object parsed from the source.
941 Reads and returns a functional mask from the PDF source. Skips non-mask characters and returns the accumulated string.
942 Verifies the PDF source against an expected string. @param expectedString String to match against the source. @param skipSpaces Whether to skip whitespace characters.
943 Extracts a string from the source, masked by a length limit. @param length Maximum length of the extracted string.
944 Parses an integer from the PDF source. Throws IOException if parsing fails or value is invalid.
945 Parses a long value from the PDF source. @return Long value or throws IOException on parsing error.
946 Finds xref table/stream offset; returns 0 if not found. @param objectOffset Offset to search for. @return New offset or 0 if not found.
947 Generates an encryption mask based on revision and parameters. @param password Password for encryption. @param owner Owner password. @param permissions Permissions flags.
948 Encrypts PDF content using RC4 with owner/user passwords. @param ownerPassword Owner password for encryption. @param userPassword User password for encryption.
949 Applies a rotation transformation to the matrix. @param theta Rotation angle in radians.
950 Translates the current graphics state by tx and ty. @param tx Translation along x-axis @param ty Translation along y-axis
951 Applies translation to the matrix based on vector components. @param vector Vector containing translation values (x, y).
952 Combines two matrices using b's multiply method with a. @param a The first Matrix. @param b The second Matrix, used for multiplication. @return A new Matrix representing the combined transformation.
953 Constructs a PDDocument from a COSDocument. @param doc The COSDocument to use for creating the document.
954 Processes a text sequence by tokenizing and recursively processing. @param text The CharSequence to be processed.
955 Returns the document's access permission, creating it if null.
956 Adjusts the PDF revision based on version and permissions. @param version PDF revision number to adjust. @return Adjusted PDF revision number.
957 Decrypts data from InputStream to OutputStream using AES. @param finalKey encryption key @param data input stream @param output output stream @param decrypt decryption flag
958 Decrypts or encrypts data stream using AES. @param data Input stream. @param output Output stream. @param decrypt Decryption flag.
959 Encrypts input using RC4 with the provided key and writes to output. @param finalKey RC4 encryption key. @param input Data to encrypt. @param output Output stream for encrypted data.
960 Encrypts data from an InputStream and writes to an OutputStream. @param data Input stream containing data to encrypt. @param output Output stream to write encrypted data.
961 Masks invalid characters in a string for SASL use.
962 Masks invalid characters in a string for SASL use.
963 Extracts and writes words from a line of PDF text. @param line List of words with their positions.
964 Retrieves a FontBoxFont, either from cache or loads it. Loads font based on format (PFB, TTF, OTF).
965 Writes font information to the font cache file. Handles SecurityException and IOException during the process.
966 Reads font info from disk cache, validates, and returns a list. @param files List of font files to validate. @return List of FSFontInfo objects or null if rebuild needed.
967 Initializes font info map and sets the font provider. @param fontProvider Provides access to font information.
968 Constructs a ShadedTriangle with given points and colors. @param p Array of triangle vertices. @param c Array of colors at each vertex.
969 Writes CMap data to an output stream. Writes CID-to-Unicode mappings to a stream.
970 Loads a GlyphList from a file. @param filename Name of the glyphlist file. @param numberOfEntries Number of entries in the glyphlist.
971 Initializes gidToCode map if empty, populating it with glyph IDs.
972 Validates PNG chunks in a PNGConverterState. @param state State object containing PNG chunks to validate.
973 Applies a mask to the graphics state if conditions are met. Uses textClippings to create and apply a GeneralPath mask.
974 Updates the graphics clip region based on clipping paths. Updates `lastClips` to the current clipping paths.
975 Creates an input stream for incremental PDF signing. Returns SequenceInputStream for signing data.
976 Processes a diacritic, adjusting text positions as needed. @param diacritic The diacritic to process.
977 Checks if two text positions overlap, returning true if they do. @param tp2 The other text position to compare against.
978 Checks if two TextPositions overlap. @param tp2 The second TextPosition to compare. @return True if the positions overlap, false otherwise.
979 Extracts a paragraph, calling helper methods for formatting.
980 Determines if the current position starts a new paragraph. @param position Current text position. @param lastPosition Last text position.
981 Creates a WordWithTextPositions object, masking characters in the word. @param word The word to process. @param wordPositions Positions of characters in the word.
982 Writes a COS name to the output stream, followed by a space. @param output The output stream to write to. @param cosName The COS name to write.
983 Writes a COS name to the output stream, followed by a space. @param name The COS name to write.
984 Writes byte array to output stream, escaping or hex encoding. @param bytes The byte array to write. @param forceHex Whether to force hex encoding. @param output The output stream to write to.
985 Sorts a list iteratively using merge sort. @param list List to sort, @param cmp Comparator for sorting
986 Constructs a PDFMarkedContentExtractor with specified encoding. Adds operators for managing marked content sequences and elements.
987 Constructs a PDFTextStripper, adding operators for content sequence handling.
988 Retrieves a COSBase value by key. @param key The key to look up. @return The COSBase value or null if not found.
989 Checks if the dictionary contains a key. @param name The key to check. @return True if the key exists, false otherwise.
990 Retrieves a filter by name. @param filterName Name of the filter to retrieve. @return Filter object.
991 Parses a COS name from the PDF source. Returns a COSName object representing the parsed name.
992 Constructs a PDColor from a COSArray and color space. @param array COSArray containing color components/pattern name. @param colorSpace The color space associated with the color.
993 Creates a COSString from a hex string. @param hex Hexadecimal string representation of the string.
994 Creates a COSArray from a list of integers. @param integer list of integers to convert @return COSArray containing the integers as COSInteger objects
995 Creates a COSArray from a list of strings, converting each to COSName. @param strings List of strings to be converted to COSNames @return COSArray containing the converted COSNames
996 Creates a COSArray from a list of strings. @param strings List of strings to be converted to COSStrings @return COSArray containing COSString objects
997 Constructs a new COSArrayList with an empty COSArray and ArrayList.
998 Constructs a COSArrayList with a parent dictionary and key. @param dictionary Parent COSDictionary. @param dictionaryKey Key used to identify the dictionary.
999 Constructs a new PDPageDestination with an empty COSArray.
1000 Creates a PDRectangle with specified coordinates and dimensions. @param x x-coordinate @param y y-coordinate @param width rectangle width @param height rectangle height
1001 Creates a PDRectangle from a BoundingBox. @param box BoundingBox containing rectangle coordinates.
1002 Sets the filters for the stream. @param filters List of filter names to apply.
1003 Sets the alternate color space for the stream. @param list List of PDColorSpace objects to use.
1004 Creates a COSStream using the stream cache and adds it to the list. @return The newly created COSStream object.
1005 Constructs a COSStream with no initial stream cache.
1006 Constructs COSStream with stream cache and read view. @param streamCache Cache for RandomAccessStreams @param randomAccessReadView Read view for the stream
1007 Returns an unmodifiable COSDictionary wrapping this dictionary.
1008 Returns a DecodeResult, returning an empty one if decodeResults is empty.
1009 Returns the form's resources or an empty PDResources object.
1010 Default constructor for PDAttributeObject. No-op.
1011 Constructs a PDUserProperty from a PDUserAttributeObject. @param userAttributeObject Source object for property data.
1012 Default constructor for PDOutlineNode.
1013 Constructs a new, empty `PDDestinationNameTreeNode`.
1014 Constructs a new, empty `PDNameTreeNode` with a new COSDictionary.
1015 Constructs a new, empty `PDJavascriptNameTreeNode`.
1016 Default constructor. Calls the superclass constructor.
1017 Constructs a PDNonTerminalField with a parent AcroForm. @param acroForm The parent AcroForm instance.
1018 Constructs a PDTerminalField with a PDAcroForm. @param acroForm The parent AcroForm instance.
1019 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
1020 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
1021 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
1022 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
1023 Constructs a PDAppearanceStream from a COSStream. @param stream The COSStream representing the appearance data.
1024 Constructs a PDTransparencyGroup with a COSStream and ResourceCache. @param stream The COSStream for the transparency group. @param cache ResourceCache to use.
1025 Loads a TrueType collection font file and processes its headers. @param ttcFile The TrueType collection file to load.
1026 Adds font info, skips if errors occur or name contains '|'. @param fontHeaders Font headers object. @param file The font file. @param hash Font hash.
1027 Processes a PFB font file, adding font info or skipping it. @param pfbFile The PFB font file to process.
1028 Constructs a PDCheckBox with AcroForm, dictionary, and parent.
1029 Constructs a PDPushButton with AcroForm, field, and parent.
1030 Constructs a PDRadioButton with AcroForm, dictionary, and parent.
1031 Constructs a PDChoice object. @param acroForm The PDF AcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
1032 Constructs a PDTextField object. @param acroForm The PDF AcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
1033 Pushes a cloned graphics state onto the graphics stack.
1034 Saves current graphics state, pushes a new one, returns saved state.
1035 Constructs a COSDocument using a default memory-only stream cache.
1036 Constructs a COSParser with specified source, password, and key. @param source Input stream for PDF data @param password Password for decryption, if any
1037 Sets the clipping path to a rectangle, using current graphics state. @param rectangle Rectangle defining the clipping region.
1038 Calculates the transformed bounding rectangle of an appearance stream. @param appearanceStream The appearance stream to process. @return The transformed Rectangle2D object.
1039 Initializes PDGraphicsState with a clipping path from the page rectangle. @param page PDRectangle defining the clipping path.
1040 Retrieves the value at index 2 from the array.
1041 Retrieves the value at index 2 from the array.
1042 Gets the element at index 3 from the array.
1043 Returns the element at index 4 from the array.
1044 Gets the number at index 5 from the array. Returns -1 if out of bounds.
1045 Returns the value at index 2 from the array.
1046 Retrieves the element at index 2 from the array.
1047 Returns the element at index 3 from the array.
1048 Checks if the type is bounded using an array element.
1049 Checks if the destination type is bounded. Uses TYPE_BOUNDED and array to determine the result.
1050 Checks if the type is bounded based on an array element.
1051 Creates an OutputStream for writing to a COS stream.
1052 Creates an OutputStream for the stream with the given filter. @param filter Filter to apply to the stream. @return OutputStream for writing data.
1053 Creates a PDImageXObject from a COSStream. @param cosStream The COSStream to create the image from. @return A PDImageXObject representing the image.
1054 Returns the mask for the image object, or null if none exists.
1055 Retrieves the image mask from the COS stream, or null if absent.
1056 Writes transformation matrix values to the content stream. @param transform AffineTransform object representing the matrix.
1057 Starts a text mode, throwing an exception if nested. Starts text mode and sets inTextMode to true.
1058 Ends text mode, throwing exception if not in text mode. Calls m1 to write END_TEXT operator and resets inTextMode.
1059 Sets the text leading value. @param leading The leading value to set.
1060 Writes a newline operator to the content stream. Throws exception if not in text mode.
1061 Moves the current text position to the specified coordinates. @param tx The x-coordinate for the text position. @param ty The y-coordinate for the text position.
1062 Saves graphics state if not in text mode. Checks and restores color spaces if empty.
1063 Restores graphics state, throwing exception if in text mode. Resets color spaces if empty.
1064 Sets stroking color to RGB. @param r, g, b Red, green, and blue color components (0..1) @throws IllegalArgumentException if any component is outside [0, 1]
1065 Sets CMYK stroking color. @param c, m, y, k CMYK color components (0..1) @throws IllegalArgumentException if any component is outside 0..1
1066 Sets the stroking color to gray, validating the grayscale value. @param g Grayscale value between 0 and 1.
1067 Sets RGB color, validating input and writing to the stream. @param r Red color component (0..1) @param g Green color component (0..1) @param b Blue color component (0..1)
1068 Sets CMYK color values, validating input and writing to stream. @param c, m, y, k CMYK color components (0.0 to 1.0)
1069 Sets the non-stroking gray color value. @param g Gray value between 0 and 1. @throws IllegalArgumentException if g is outside [0, 1]
1070 Adds a rectangle to the content stream. @param x, y rectangle coordinates; width, height its dimensions @throws IllegalStateException if called within a text block.
1071 Draws a cubic Bezier curve to the PDF stream. @param x1, y1, x2, y2, x3, y3 Coordinates of the curve.
1072 Draws a cubic Bezier curve. @param x2, y2, x3, y3 Coordinates for the curve.
1073 Draws a cubic Bezier curve. @param x1, y1, x3, y3 Coordinates of the curve's points.
1074 Moves the current point to the specified coordinates. @param x The x-coordinate. @param y The y-coordinate.
1075 Draws a line from the current point to (x, y). @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1076 Throws exception if in text mode, otherwise writes STROKE operator.
1077 Closes and strokes the current path, throws exception if in text mode.
1078 Fills the content stream with the non-zero fill operator. Throws exception if in text mode.
1079 Fills the content stream using the fillEvenOdd operator. Throws exception if called within a text block.
1080 Fills and strokes the current path, throws exception if in text mode.
1081 Fills and strokes with even-odd rule, throws exception if in text mode.
1082 Closes, fills, and strokes the current path. Throws exception if called within a text block.
1083 Fills and strokes a path using the CLOSE_FILL_EVEN_ODD_STROKE operator. Throws exception if called within a text block.
1084 Closes the current path. Throws exception if in text mode.
1085 Clips the content to the current path. Throws exception if in text mode.
1086 Clips content to even-odd rule. Throws exception if in text mode.
1087 Sets the line width to the specified value. @param lineWidth The width of the line to set.
1088 Sets the line join style. @param lineJoinStyle Line join style (0-2). Throws exception if invalid.
1089 Sets the line cap style. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if lineCapStyle is invalid.
1090 Writes a line dash pattern to the content stream. @param pattern The dash pattern values. @param phase The phase offset for the pattern.
1091 Sets the line miter limit. @param miterLimit The miter limit value. @throws IllegalArgumentException if miterLimit is invalid.
1092 Marks the end of a marked content sequence.
1093 Sets character spacing. @param spacing The spacing value to set.
1094 Sets word spacing. @param spacing The spacing value to set.
1095 Scales text horizontally and applies a scaling factor. @param scale The scaling factor to apply.
1096 Sets the text rendering mode. @param rm The rendering mode to set.
1097 Sets the text rise value. @param rise The rise value to set.
1098 Retrieves offsets of COS objects. Triggers initial search if needed.
1099 Writes the FDF document to an output stream. @param output The output stream to write to. @throws IOException if an I/O error occurs.
1100 Updates the array's internal state and calls m2.m3().
1101 Processes a list of COSBase objects; delegates to objects.m1. @param objectsList List of COSBase objects to process.
1102 Processes a list of COSBase objects; updates if true. @param objectsList List of COSBase objects to process.
1103 Sets the integer value at the given index in the objects array. @param index Index of the element to set. @param intVal The integer value to be set.
1104 Removes and returns element at index i. @param i index of element to remove @return The COSBase object at index i
1105 Removes an object from the array. @param o The object to remove. @return True if the object was removed.
1106 Initializes items and calls m2's m3 method.
1107 Removes an item from the dictionary based on the provided key. @param key The key of the item to remove.
1108 Updates the update state if origin state doesn't match. @param updateState The update state to potentially update.
1109 Releases resources and resets the COSObject to a null state.
1110 Recursively propagates update state. @param originDocumentState Origin document state. @param dereferencing Whether dereferencing is active.
1111 Gets string at index, returns null if out of bounds. @param index the index of the string to retrieve
1112 Retrieves button value: either from export list or COSName. Returns "Off" if value is not a COSName.
1113 Creates a new, empty PDSimpleFileSpecification. Initializes the file to an empty COSString.
1114 Creates a COSString representing the file name. @param fileName The name of the file.
1115 Creates a named destination with the given string identifier. @param dest The string identifier for the named destination.
1116 Sets the named destination. Null dest clears the destination. @param dest The destination string, or null to clear.
1117 Parses and validates the generation number. @throws IOException if the number is invalid.
1118 Parses and validates a PDF object number. @return Object number as long, throws IOException on error.
1119 Generates encryption key. Returns empty array for rev 5/6. @param ownerPassword Owner password for encryption. @param owner Owner data. @param encRevision Encryption revision.
1120 Constructs a TensorPatch with control points and color coordinates. @param tcp Array of control points. @param color Color values at corners.
1121 Encrypts data using RC4 cipher. @param finalKey Encryption key. @param input Input stream. @param output Output stream.
1122 Returns the font provider, initializing it if null. @return The FontProvider instance.
1123 Generates shaded triangles from coordinate-color pairs. @param patchCC 2D array of CoordinateColorPair objects. @return List of ShadedTriangle objects.
1124 Constructs a CoonsPatch with provided points and color coordinates. @param points array of Point2D objects @param color 2D array representing color values
1125 Masks content based on overlap and duplicates. Checks for overlapping/duplicate text and masks accordingly.
1126 Processes a text position, handling text duplication and article division. @param text The text position to process.
1127 Removes overlapping text positions from the list. @param textList List of TextPosition objects to process.
1128 Advances to the next position, managing paragraph/line separators. @param current Current position. @return Updated last line start position.
1129 Masks words based on LineItem state, building a line. @param normalized List of words. @param lineBuilder Current line being built. @param wordPositions Positions of words. @param item The LineItem to process. @return The updated line builder.
1130 Parses date text and returns a Calendar object. @param text Date string to parse, returns null if invalid.
1131 Starts a marked content sequence with the given tag. @param tag The tag name for the marked content sequence.
1132 Writes a marked content sequence to the stream. @param tag COS name tag for the sequence. @param mcid MCID value for the sequence.
1133 Marks content with a tag and adds a marked content point. @param tag The COS name tag to apply.
1134 Writes a COSString to the output stream. @param string The COSString to write. @param output The output stream to write to.
1135 Writes byte array to output stream, optionally hex encoded. @param bytes The byte array to write. @param output The output stream to write to.
1136 Initializes the PDFGraphicsStreamEngine with a page. @param page The PDF page to associate with this engine.
1137 Constructs a PDFMarkedContentExtractor with default encoding.
1138 Constructs a PDFTextStripperByArea object, disabling bead separation.
1139 Parses a hex-encoded string from the source, returning a COSString. Handles whitespace and missing closing brackets.
1140 Sets the stream filters. @param filters List of filter strings to apply.
1141 Creates a default PDRectangle with zero coordinates and dimensions.
1142 Creates a PDRectangle with specified width and height. @param width rectangle width @param height rectangle height
1143 Creates a PDRectangle representing the bounding box. @return PDRectangle object representing the bounding box.
1144 Creates a PDRectangle based on annotation or default dimensions.
1145 Creates a masked rectangle by adding padding. @param rectangle The input rectangle. @param padding Padding value to apply. @return A new PDRectangle with adjusted dimensions.
1146 Adjusts a rectangle based on provided differences. @param rectangle The rectangle to adjust. @param differences Array of adjustments for the rectangle.
1147 Adjusts a rectangle based on provided differences. @param rectangle The rectangle to adjust. @param differences Array of adjustments for rectangle coordinates.
1148 Adjusts a rectangle's position and size by adding padding. @param box The rectangle to adjust. @param padding Padding value to apply. @return Adjusted PDRectangle.
1149 Initializes a PDFXRefStream with a COSStream from the document. @param cosDocument The COSDocument to obtain the stream from.
1150 Creates a PDObjectStream from a PDF document. @param document The PDF document to create stream from. @return A PDObjectStream object.
1151 Creates a PDStream associated with the given document. @param document The document to associate with this stream.
1152 Creates a PDStream associated with the given COSDocument. @param document The COSDocument this stream belongs to.
1153 Creates a PDStream from an input stream, applying filters. @param doc The document. @param input Input stream. @param filters Filters.
1154 Creates a COSStream from an InputStream. @param document PDF document. @param rawInput Input stream. @return COSStream object.
1155 Encodes input stream to output stream using filter parameters.
1156 Default constructor for PDDefaultAttributeObject. No-op.
1157 Default constructor. Sets the owner to OWNER_USER_PROPERTIES.
1158 Protected constructor for PDStandardAttributeObject. No-op.
1159 Default constructor for PDOutlineItem, calls superclass constructor.
1160 Constructs a PDVariableText object with a parent PDAcroForm. @param acroForm The parent AcroForm instance.
1161 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary The COSDictionary to use for initialization.
1162 Creates a PDAppearanceStream from the appearance entry. Throws IllegalStateException if entry is not an appearance stream.
1163 Loads a TrueType/OTF font file, parses headers, and adds font info. @param ttfFile The font file to load.
1164 Constructs a `PDShadingType6` from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
1165 Constructs a `PDShadingType7` from a COSDictionary. @param shadingDictionary Shading dictionary to initialize from.
1166 Constructs a PDComboBox object. @param acroForm The PDF AcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
1167 Constructs a PDListBox object. @param acroForm The PDF AcroForm. @param field The COSDictionary representing the field. @param parent The parent PDNonTerminalField.
1168 Constructs a COSParser with a key store and alias. @param source Input stream for PDF data @param password Password for decryption, if any
1169 Constructs a PDFParser with specified source, password, and key. @param source Input stream for PDF data
1170 Returns an OutputStream for writing to the underlying stream.
1171 Writes appearance data to an appearance stream. @param data Byte array containing appearance data. @param appearanceStream The appearance stream to write to.
1172 Creates a content stream from an appearance stream, optionally compressing it. @param appearance The appearance stream to copy from. @param compress Whether to compress the stream.
1173 Sets the text matrix in content stream. @param matrix Matrix object defining the text transformation.
1174 Concatenates a transformation matrix to the content stream. @param matrix Matrix to concatenate. Throws exception in text mode.
1175 Starts text mode. Throws exception if nested. Sets inTextMode to true.
1176 Starts text mode, throws exception if nested. Sets inTextMode to true after calling m1.
1177 Starts a text mode, throwing an exception if nested.
1178 Starts text mode, throwing an exception if nested.
1179 Ends text mode; throws exception if not in text mode. Resets inTextMode flag after writing END_TEXT operator.
1180 Ends text mode. Throws exception if not in text mode. Resets inTextMode to false after writing END_TEXT operator.
1181 Ends text mode. Throws exception if not in text mode.
1182 Ends text mode; throws exception if not in text mode. Resets inTextMode flag after writing END_TEXT operator.
1183 Sets the text leading value. @param leading The leading value to set.
1184 Sets the text leading. @param leading The leading value to set.
1185 Sets the text leading. @param leading The leading value to set.
1186 Sets the text leading. @param leading The leading value to set.
1187 Writes a newline operator to the content stream in text mode.
1188 Throws exception if not in text mode, then writes newline.
1189 Writes a newline operator, ensuring text mode is active. Throws exception if not in text mode.
1190 Writes a newline operator to the content stream in text mode.
1191 Moves the text position to specified coordinates. @param tx The x-coordinate. @param ty The y-coordinate.
1192 Moves the current text position to (tx, ty) in PDF. @param tx The x-coordinate of the new text position. @param ty The y-coordinate of the new text position.
1193 Moves the text position to specified coordinates. @param tx The x-coordinate. @param ty The y-coordinate.
1194 Moves the text position to specified coordinates. @param tx The x-coordinate. @param ty The y-coordinate.
1195 Saves graphics state if not in text mode. Checks and restores color spaces if empty.
1196 Saves graphics state. Throws exception if in text mode.
1197 Saves graphics state if not in text mode. Restores color spaces.
1198 Saves graphics state if not in text mode; restores color spaces.
1199 Restores graphics state; throws exception if in text mode.
1200 Restores graphics state; throws exception if in text mode.
1201 Restores graphics state, throwing exception if in text mode.
1202 Restores graphics state, throwing exception if in text mode.
1203 Sets the stroking color to RGB. @param r, g, b Red, green, and blue color components (0..1)
1204 Sets the stroking color to RGB. @param r, g, b Red, green, and blue color components (0..1)
1205 Sets the stroking color to the specified RGB values. @param r, g, b Red, green, and blue color components (0..1) @throws IllegalArgumentException if any component is invalid.
1206 Sets the stroking color to the specified RGB values. @param r, g, b Red, green, and blue color components (0..1) @throws IllegalArgumentException if any component is invalid.
1207 Sets the stroking color to the specified CMYK values. @param c, m, y, k CMYK color components (0..1) @throws IllegalArgumentException if values are out of range.
1208 Sets the CMYK stroking color, validating input values. @param c, m, y, k CMYK color components (0..1) @throws IllegalArgumentException if any component is invalid
1209 Sets the CMYK stroking color, throwing exception if values are invalid. @param c, m, y, k CMYK color components (0..1) @throws IllegalArgumentException if any component is outside 0..1
1210 Sets the CMYK stroking color, validating input parameters. @param c, m, y, k CMYK color components (0..1) @throws IllegalArgumentException if any component is invalid
1211 Sets the stroking color to gray, validating the grayscale value. @param g Grayscale value between 0 and 1
1212 Sets the stroking color to gray, validating the grayscale value. @param g Grayscale value between 0 and 1.
1213 Sets the stroking color to gray, validating the grayscale value. @param g Grayscale value between 0 and 1.
1214 Sets the stroking color to gray, validating the grayscale value. @param g Grayscale value between 0 and 1.
1215 Sets the non-stroking RGB color. @param r Red color component (0..1) @param g Green color component (0..1) @param b Blue color component (0..1)
1216 Sets the non-stroking RGB color. @param r Red color component (0..1) @param g Green color component (0..1) @param b Blue color component (0..1)
1217 Sets the non-stroking RGB color. @param r Red color component (0..1) @param g Green color component (0..1) @param b Blue color component (0..1)
1218 Sets the non-stroking RGB color. @param r Red color component (0..1) @param g Green color component (0..1) @param b Blue color component (0..1)
1219 Sets CMYK color values, validating input and writing to stream. @param c, m, y, k CMYK color components (0.0 to 1.0)
1220 Sets CMYK color values, validating input and writing to stream. @param c, m, y, k CMYK color components (0.0 to 1.0)
1221 Sets CMYK color values, validating input and writing to stream. @param c, m, y, k CMYK color components (0.0 to 1.0)
1222 Sets CMYK color values, validating input and writing to stream. @param c, m, y, k CMYK color components (0.0 to 1.0)
1223 Sets the non-stroking gray color value. @param g Gray value between 0 and 1. @throws IllegalArgumentException if g is outside [0, 1]
1224 Sets the non-stroking gray color value. @param g Gray value between 0 and 1. @throws IllegalArgumentException if g is outside [0, 1]
1225 Sets the non-stroking gray color value. @param g Gray value between 0 and 1. @throws IllegalArgumentException if g is outside [0, 1]
1226 Sets the non-stroking gray color value. @param g Gray value between 0 and 1. @throws IllegalArgumentException if g is outside [0, 1]
1227 Adds a rectangle to the content stream. @param x, y rectangle coordinates; width, height its dimensions
1228 Adds a rectangle to the content stream. @param x,y rectangle coordinates; width, height its dimensions
1229 Adds a rectangle to the content stream. @param x, y rectangle coordinates; width, height its dimensions @throws IllegalStateException if called within a text block.
1230 Adds a rectangle to the content stream. @param x, y rectangle coordinates; width, height its dimensions
1231 Draws a cubic Bezier curve to the PDF stream. @param x1, y1, x2, y2, x3, y3 Curve coordinates.
1232 Draws a cubic Bezier curve to the PDF stream. @param x1, y1, x2, y2, x3, y3 Curve coordinates.
1233 Draws a cubic Bezier curve to the PDF stream. @param x1, y1, x2, y2, x3, y3 Curve coordinates
1234 Draws a cubic Bezier curve to the PDF stream. @param x1,y1,x2,y2,x3,y3 Coordinates of the curve.
1235 Draws a cubic Bezier curve, throwing exception if in text mode. @param x2, y2, x3, y3 Coordinates for the curve.
1236 Draws a cubic Bezier curve, throwing exception if in text mode. @param x2, y2, x3, y3 Coordinates for the curve.
1237 Draws a cubic Bezier curve, throwing exception if in text mode. @param x2, y2, x3, y3 Coordinates for the curve.
1238 Draws a cubic Bezier curve, throwing exception if in text mode. @param x2, y2, x3, y3 Coordinates for the curve.
1239 Draws a cubic Bezier curve, throwing exception if in text mode. @param x1, y1, x3, y3 Coordinates of the curve's points.
1240 Draws a cubic Bezier curve, throwing exception if in text mode. @param x1, y1, x3, y3 Coordinates of the curve's points.
1241 Draws a cubic Bezier curve, throwing exception if in text mode. @param x1, y1, x3, y3 Coordinates of the curve's points.
1242 Draws a cubic Bezier curve, throwing exception if in text mode. @param x1, y1, x3, y3 Coordinates of the curve's points.
1243 Moves the current point to (x, y) if not in text mode. @param x The x-coordinate. @param y The y-coordinate.
1244 Moves the current point to (x, y) if not in text mode. @param x The x-coordinate. @param y The y-coordinate.
1245 Moves the current point to (x, y) on the PDF page. @param x The x-coordinate. @param y The y-coordinate.
1246 Moves the current point to (x, y) in pattern content. @param x The x-coordinate. @param y The y-coordinate.
1247 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1248 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1249 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1250 Draws a line to the specified coordinates. @param x The x-coordinate of the line's endpoint. @param y The y-coordinate of the line's endpoint.
1251 Draws a stroke path if not in text mode, otherwise throws exception.
1252 Executes the STROKE operator if not in text mode. Throws IllegalStateException if in text mode.
1253 Draws a stroke if not in text mode, otherwise throws exception.
1254 Draws a stroke if not in text mode; otherwise, throws an exception.
1255 Executes CLOSE_AND_STROKE operator if not in text mode. Throws exception if called within a text block.
1256 Executes CLOSE_AND_STROKE operator, throws exception in text mode.
1257 Closes and strokes the current path, throws exception if in text mode.
1258 Closes and strokes the current path, throws exception if in text mode.
1259 Fills the content stream, throwing exception if in text mode.
1260 Fills the content stream, throwing an exception if in text mode.
1261 Fills the content stream, throwing exception if in text mode.
1262 Fills the content stream with the non-zero fill operator. Throws exception if in text mode.
1263 Fills the content stream with FILL_EVEN_ODD operator. Throws exception if called within a text block.
1264 Fills the content stream with FILL_EVEN_ODD operator. Throws exception if called within a text block.
1265 Fills the content stream with FILL_EVEN_ODD operator. Throws exception if called within a text block.
1266 Fills the content stream with the fillEvenOdd operator. Throws exception if called within a text block.
1267 Fills and strokes the current path, throws exception if in text mode.
1268 Fills and strokes the content, throws exception in text mode.
1269 Fills and strokes the current path, throws exception in text mode.
1270 Fills and strokes the current path, throws exception in text mode.
1271 Fills and strokes using even-odd rule, throws exception if in text mode.
1272 Fills and strokes using even-odd rule, throws exception in text mode.
1273 Fills and strokes using even-odd rule, throws exception if in text mode.
1274 Fills and strokes using even-odd rule; throws exception in text mode.
1275 Executes CLOSE_FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
1276 Executes CLOSE_FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
1277 Closes, fills, and strokes the current path. Throws exception if called within a text block.
1278 Executes the CLOSE_FILL_NON_ZERO_AND_STROKE operator. Throws exception if called within a text block.
1279 Fills and strokes a path, throwing exception in text mode.
1280 Fills and strokes a path, throwing an exception in text mode.
1281 Fills and strokes a path; throws exception if in text mode.
1282 Fills and strokes a path, throwing exception if in text mode. Uses `OperatorName.CLOSE_FILL_EVEN_ODD_AND_STROKE`.
1283 Closes the current path, throws exception if in text mode.
1284 Closes the current path. Throws exception if in text mode.
1285 Closes the current path. Throws exception in text mode.
1286 Closes the current path. Throws exception if in text mode.
1287 Clips the content to the current path, throws exception in text mode.
1288 Clips the content to the current path, throws exception if in text mode.
1289 Clips the content to the current path, throws exception if in text mode.
1290 Clips the content to the current path, throws exception if in text mode.
1291 Clips content using the even-odd rule. Throws exception in text mode.
1292 Clips content using the even-odd rule. Throws exception in text mode.
1293 Clips the content using the even-odd rule. Throws exception if in text mode.
1294 Clips the content stream using the even-odd rule. Throws exception if in text mode.
1295 Sets the line width for the current graphics context. @param lineWidth The width of the line to set.
1296 Sets the line width for subsequent drawing operations. @param lineWidth The width of the line to set.
1297 Sets the line width for subsequent drawing operations. @param lineWidth The desired line width.
1298 Sets the line width for the content stream. @param lineWidth The desired line width.
1299 Sets the line join style. Throws exception if invalid. @param lineJoinStyle Line join style (0-2)
1300 Sets the line join style. Throws exception if invalid. @param lineJoinStyle Line join style (0-2)
1301 Sets the line join style. Throws exception if invalid. @param lineJoinStyle Line join style (0-2).
1302 Sets the line join style. Throws exception if invalid. @param lineJoinStyle Line join style (0-2)
1303 Sets the line cap style if valid. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if invalid.
1304 Sets the line cap style if valid. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if invalid.
1305 Sets the line cap style if valid. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException on invalid style.
1306 Sets the line cap style if valid. @param lineCapStyle Line cap style value (0-2). @throws IllegalArgumentException if invalid.
1307 Sets the line dash pattern to the content stream. @param pattern The dash pattern values. @param phase The phase offset for the pattern.
1308 Sets the line dash pattern for the content stream. @param pattern The dash pattern values. @param phase The phase offset for the pattern.
1309 Sets the line dash pattern for the content stream. @param pattern The dash pattern values. @param phase The phase offset for the pattern.
1310 Sets the line dash pattern. @param pattern The dash pattern values. @param phase The phase offset for the pattern.
1311 Sets the line miter limit. @param miterLimit The miter limit value. @throws IllegalArgumentException if invalid.
1312 Sets the line miter limit. @param miterLimit The miter limit value. @throws IllegalArgumentException if invalid.
1313 Sets the line miter limit. @param miterLimit The miter limit value. @throws IllegalArgumentException if invalid.
1314 Sets the line miter limit. @param miterLimit The miter limit value.
1315 Marks the end of a marked content sequence.
1316 Marks the end of a marked content sequence.
1317 Marks the end of a marked content sequence.
1318 Marks the end of a marked content sequence.
1319 Sets character spacing. @param spacing The spacing value to set.
1320 Sets character spacing in the content stream. @param spacing The spacing value to set.
1321 Sets character spacing. @param spacing The spacing value to set.
1322 Sets character spacing. @param spacing The spacing value to set.
1323 Sets word spacing. @param spacing The spacing value to set.
1324 Sets word spacing. @param spacing The spacing value to set.
1325 Sets word spacing. @param spacing The spacing value to set.
1326 Sets word spacing for the content stream. @param spacing The word spacing value.
1327 Sets the horizontal text scaling. @param scale The scaling factor to apply.
1328 Sets the horizontal text scaling. @param scale Scaling factor for horizontal text.
1329 Sets horizontal text scaling. @param scale The scaling factor for horizontal text.
1330 Sets the horizontal text scaling. @param scale The scaling factor to apply.
1331 Sets the text rendering mode. @param rm The rendering mode to set.
1332 Sets the text rendering mode. @param rm The rendering mode to set.
1333 Sets the text rendering mode. @param rm The rendering mode to set.
1334 Sets the text rendering mode for the content stream. @param rm The rendering mode to set.
1335 Sets the text rise value. @param rise The rise value to set.
1336 Sets the text rise value. @param rise The rise value to set.
1337 Sets the text rise value. @param rise The rise value to set.
1338 Sets the text rise value and applies the operator. @param rise The rise value to set.
1339 Resolves xref table, falls back to brute force if validation fails.
1340 Writes the FDF document to a file. @param fileName The file to write the FDF to. @throws IOException if an I/O error occurs.
1341 Sets the value at index 2 of the array to the given high value. @param high The integer value to set.
1342 Sets the destination page number in the array. @param pageNumber The page number to set.
1343 Removes an element from the list if present. @param o object to remove @return true if object was removed, false otherwise
1344 Retrieves the element at the specified index. @param index index of the element to retrieve @return element at the specified index
1345 Clears the map and actuals collections.
1346 Retrieves a value associated with the given key. @param key The key to look up in the dictionary.
1347 Checks if a COSArray and its children require parent updates. @param array The COSArray to check. @return True if updates are needed, false otherwise.
1348 Propagates update state. @param originDocumentState Origin document state.
1349 Updates state of COSUpdateInfo child, propagating changes. @param child The COSBase child to update.
1350 Creates a Tokenizer and processes tokens using the handler. @param input Input text to tokenize. @param handler Syntax handler for token processing.
1351 Encrypts/decrypts PDF data using AES or RC4 based on config. @param objectNumber Object number for key generation. @param genNumber Generation number for key generation.
1352 Masks file key based on revision. Uses m2 or m1. @param password Password byte array. @param o Owner password.
1353 Masks the user key based on encryption revision. @param password User password. @return True if masking is successful.
1354 Finds a FontBoxFont by name, trying variations and substitutes. @param format FontFormat @param postScriptName PostScript font name @return FontBoxFont or null if not found.
1355 Masks words in a list of LineItems, returning masked words. @param line List of LineItems to process. @return List of masked WordWithTextPositions.
1356 Converts a COSString to a Calendar object. @param text COSString to convert, null if invalid. @return Calendar object or null if input is null.
1357 Starts a marked content sequence with the given tag. @param tag The tag name for the marked content sequence.
1358 Starts a marked content sequence with the given tag. @param tag The tag name for the marked content sequence.
1359 Begins a marked content sequence with a given tag. @param tag The tag name for the marked content.
1360 Starts a marked content sequence with the given tag. @param tag The tag name for the marked content sequence.
1361 Writes a marked content sequence to the stream. @param tag COS name tag for the sequence. @param mcid MCID value for the sequence.
1362 Writes a marked content sequence to the stream. @param tag COS name tag for the sequence. @param mcid MCID value for the sequence.
1363 Begins a marked content sequence with the given tag and MCID. @param tag COS name tag for the sequence. @param mcid MCID value for the sequence.
1364 Writes a marked content sequence to the stream. @param tag COS name tag for the sequence. @param mcid MCID value for the sequence.
1365 Marks content with a tag and adds a marked content point. @param tag The COS name tag to apply.
1366 Marks content with a tag and adds a marked content point. @param tag The COS name tag to apply.
1367 Marks content with a tag and adds a marked content point. @param tag The COS name tag to apply.
1368 Marks content with a tag and adds a marked content point. @param tag The COS name tag to apply.
1369 Writes a COSString to the output stream, followed by a space. @param output The output stream to write to. @param cosString The COSString to write.
1370 Writes text to the content stream, handling font encoding & glyphs. @param text The text string to write.
1371 Constructs a PageDrawer with provided parameters. @param parameters PageDrawerParameters object for configuration.
1372 Parses a COS string, handling escapes and brackets. Returns COSString object.
1373 Creates an immutable rectangle with the given width and height. @param width rectangle width @param height rectangle height
1374 Returns the rectangle object.
1375 Creates a PDMetadata object associated with the given document. @param document The PDF document this metadata belongs to.
1376 Constructs a PDEmbeddedFile, setting its type to EMBEDDED_FILE. @param document The PDF document this file is associated with.
1377 Creates a PDXObject with a stream and sets its type/subtype. @param document The PDF document. @param subtype The subtype of the XObject.
1378 Constructs a PDImageXObject using a provided PDDocument. @param document The PDF document to use for the image.
1379 Creates a PDStream from an input stream. @param doc The document. @param input Input stream.
1380 Creates a PDStream from an input stream, with a filter. @param doc The document. @param input Input stream. @param filter Filter.
1381 Creates a PDStream with filters. @param doc The document. @param input Input stream. @param filters Filters.
1382 Creates a PDImageXObject from a stream, width, height, and color space. @param document PDF document. @param encodedStream Image stream.
1383 Constructs a PDLayoutAttributeObject, setting the owner to OWNER_LAYOUT.
1384 Constructs a PDListAttributeObject, setting the owner to OWNER_LIST.
1385 Default constructor. Sets the owner to OWNER_PRINT_FIELD.
1386 Constructs a PDTableAttributeObject, setting the owner to OWNER_TABLE.
1387 Constructs a COSParser with only the source read. @param source Input stream for PDF data
1388 Constructs a PDFParser with source, password, keystore, and alias. @param source Input stream for PDF data @param decryptionPassword Password for decryption
1389 Creates a content stream from an appearance stream. @param appearance The appearance stream to copy from.
1390 Constructs a form content stream using the provided form object. @param form The PDF form XObject.
1391 Creates a content stream with document and appearance stream. @param doc The PDF document. @param appearance The appearance stream.
1392 Sets the transformation matrix for text rendering. @param matrix Transformation matrix for text. @throws IllegalStateException if beginText() wasn't called.
1393 Sets the transformation matrix for text rendering. @param matrix Transformation matrix for text. @throws IllegalStateException if beginText() hasn't been called.
1394 Sets the transformation matrix for text rendering. @param matrix Transformation matrix to apply. @throws IllegalStateException if beginText() was not called.
1395 Sets the transformation matrix for text rendering. @param matrix Transformation matrix for text. @throws IllegalStateException if not in text mode.
1396 Applies a transformation matrix if not in text mode. @param matrix Matrix to apply. Throws exception in text mode.
1397 Applies a transformation matrix if not in text mode. @param matrix Transformation matrix to apply. @throws IllegalStateException if called in text mode.
1398 Applies a transformation matrix to the content stream. @param matrix Transformation matrix to apply. Throws exception in text mode.
1399 Applies a transformation matrix to the content stream. @param matrix Transformation matrix to apply. Throws exception in text mode.
1400 Draws an arrow shape on the content stream. @param cs Content stream to draw on. @param x Starting x-coordinate. @param y Starting y-coordinate. @param len Arrow length.
1401 Draws a path based on line width, stroke, and fill flags.
1402 Draws a rounded rectangle mask. @param cs Content stream to draw onto. @param x X coordinate of the rectangle's center. @param y Y coordinate of the rectangle's center. @param r Radius of the rounded corners.
1403 Draws a rounded rectangle mask with given radius. @param cs Content stream to draw to. @param x, y, r Rectangle coords.
1404 Draws a mask shape onto the content stream. @param cs Content stream to draw on. x, y: center, r: radius.
1405 Draws a specific shape on the PDF content stream. @param contentStream Content stream to draw on.
1406 Sets line width if greater than 1. @param lineWidth The line width to set.
1407 Saves the FDF document to a file. @param fileName The file to save the FDF to. @throws IOException if an I/O error occurs.
1408 Recursively checks if a COSBase object requires updates. @param base The COSBase object to check. @return True if updates are needed, false otherwise.
1409 Sets the trailer dictionary and propagates the document state. @param newTrailer New trailer dictionary to set.
1410 Updates state if child is a COSUpdateInfo. Propagates update state to origin document.
1411 Processes child elements, updating origin document state. Iterates children, updating COSUpdateInfo instances.
1412 Dereferences the COSObject and returns the base object. Handles IOExceptions and resets parser on failure.
1413 Masks passwords based on encryption revision. @param ownerPassword Owner password. @param user User ID.
1414 Parses text into an InstructionSequence. @param text Input text to parse. @return InstructionSequence representing parsed instructions.
1415 Encrypts a PDF stream using AES/RC4. @param stream COSStream to encrypt @param objNum Object number for key generation @param genNum Generation number for key generation
1416 Decrypts a COSString using AES/RC4 based on config. @param string String to decrypt @param objNum Object number for key generation @param genNum Generation number for key generation
1417 Encrypts/decrypts a COSString using a key derived from object and generation numbers. @param string The COSString to encrypt/decrypt. @param objNum Object number for key generation. @param genNum Generation number for key generation.
1418 Recursively encrypts with different charsets based on revision. @param password Password to use for encryption.
1419 Finds a FontBoxFont by trying PFB, TTF, and OTF formats. @param postScriptName PostScript font name @return FontBoxFont or null if not found.
1420 Extracts text from PDF article lists, managing line and word positions.
1421 Writes a COSBase object to the output stream. @param base The COSBase object to write.
1422 Writes an array of strings/floats to the content stream. @param textWithPositioningArray Array of text/float values.
1423 Writes text to the stream, adds a space, and adds SHOW_TEXT operator. @param text The text string to write.
1424 Creates a PageDrawer with provided parameters and annotation filter. @param parameters PageDrawerParameters object for configuration @return PageDrawer object
1425 Creates a new form XObject. @param document The PDF document.
1426 Creates a PDMetadata object from a document and input stream. @param doc The PDF document. @param str Input stream.
1427 Creates a PDEmbeddedFile from an input stream. @param doc The document. @param str Input stream.
1428 Creates an embedded file object from a document, stream, and filter. @param doc The PDF document. @param input Input stream. @param filter Filter.
1429 Creates a PDImageXObject from a byte array, width, height, and color space. @param document PDF document. @param byteArray Image data.
1430 Constructs a PDExportFormatAttributeObject with the given owner. @param owner The owner string for this attribute object.
1431 Initializes the font provider, loading or building the cache. @param cache The font cache to use.
1432 Constructs an FDFParser with the given RandomAccessRead source. @param source Input stream for FDF data
1433 Constructs a PDFParser with a source and optional decryption password. @param source Input stream for PDF data @param decryptionPassword Password for decryption
1434 Draws a line end style on the content stream. @param style Line end style. @param cs Content stream to draw on.
1435 Checks if a dictionary requires updates based on its contents. @param dictionary The COSDictionary to check.
1436 Returns the set of COSBase objects to be updated. Initializes the update collection if not already done.
1437 Adds a COSBase object to the array, wrapping if needed. @param object The COSBase object to add.
1438 Adds a COSBase object to the list, wrapping if needed. @param i Index to add object. @param object COSBase object to add.
1439 Adds a COSBase object to the array at given index. @param index Index to insert object. @param object COSBase object to add.
1440 Adds or removes a key-value pair. Null value removes the key. @param key The key of the item. @param value The value to associate with the key.
1441 Updates the array with elements from the provided list. @param objectsList Collection of COSBase objects to add.
1442 Updates the array based on a condition and processes objects. @param i index. @param objectList collection of COSBase objects
1443 Processes child elements, updating origin document state. @param children Iterable of COSBase objects to process
1444 Retrieves element at index, dereferencing COSObjects and nulling COSNulls.
1445 Checks if an object is present and removes it. @param o The object to check and potentially remove.
1446 Finds the index of the object in the array. @param object The object to search for. @return The index of the object or -1 if not found.
1447 Checks if the dictionary contains a value. @param value value to search for, may be COSObject @return true if found, false otherwise
1448 Finds COSName for a value. Iterates through items, comparing values.
1449 Retrieves and dereferences a value by key. @param key the key to retrieve @return Value or null if not found/null.
1450 Processes a collection of indirect objects, recursively. @param indirectObjects Collection of COSObjectKeys to process.
1451 Finds linearized dictionary from xref table. Returns null if not found.
1452 Processes and validates COSStreams, throwing an exception on failure.
1453 Checks if a COSObject requires updates based on its children. @param object The COSObject to check for updates.
1454 Accepts a visitor to process the object or null if null. @param visitor The visitor object to process the object. @throws IOException if an I/O error occurs during processing.
1455 Checks if a COSBase object references its parent. Logs a warning if a self-reference is detected.
1456 Extracts COSNumber from length object, handling nulls and errors.
1457 Constructs a NormalXReference with offset, key, and object. @param byteOffset Byte offset of the referenced object. @param key COSObjectKey identifying the referenced object. @param object The COSBase object being referenced.
1458 Retrieves or creates a COSObjectKey for a COSBase object. @param obj The COSBase object. @return The COSObjectKey.
1459 Gets the COSObjectKey for a COSBase object. @param object The COSBase object to get the key for. @return The COSObjectKey, or a key derived from the object.
1460 Checks if an object is managed by the pool. @param object COSBase object to check. @return True if object is managed, false otherwise.
1461 Associates a key with an object, preparing them for writing. @param key COSObjectKey to associate with the object @param object COSBase object to be associated with the key
1462 Validates password with given parameters. @param password Password to validate.
1463 Iterates through defined regions, extracting and processing text.
1464 Writes text and positioning data to the content stream. @param textWithPositioningArray Array of text/float values.
1465 Writes text and positioning data to the content stream. @param textWithPositioningArray Array of text/float values.
1466 Writes text/float values to content stream, formatted as PDF. @param textWithPositioningArray Array of strings/floats.
1467 Writes text and positioning data to the content stream. @param textWithPositioningArray Array of text/float values.
1468 Writes text to the content stream. @param text The text string to write.
1469 Writes text to the stream, adds a space, and SHOW_TEXT operator. @param text The text string to write.
1470 Writes text to the stream, adds a space, and SHOW_TEXT operator. @param text The text string to write.
1471 Writes text to the content stream. @param text The text string to write.
1472 Creates a PDTransparencyGroup with the given PDF document. @param document The PDF document.
1473 Creates a new PDAppearanceStream. @param document The PDF document.
1474 Creates a PDImageXObject from a BufferedImage, encodes it as JPEG. @param document PDF document. @param image Image to encode.
1475 Constructs a PDFParser with a source and empty decryption password. @param source Input stream for PDF data
1476 Draws a cloud-like shape based on the provided template points. @param template Array of points defining the shape. @param x,y Translation offset for the shape.
1477 Draws a cloud-like shape using Bezier curves. @param startAng,endAng Angles for the shape. @param cx,cy Center coordinates. @param rx,ry Radius values.
1478 Returns an iterator for the COSBase objects to be updated.
1479 Adds a COSBase object to the array. @param object Object containing a COSBase to add.
1480 Adds objects to the array until the specified size is reached. @param size The desired size of the array. @param object The COSBase object to add.
1481 Adds float array elements as COSFloats to the array. @param value Array of floats to be added.
1482 Parses a functional mask from the PDF source. Returns a COSArray representing the functional mask.
1483 Creates a FUNC_MASK COSStream, writing index and width data. @return COSStream representing the FUNC_MASK data.
1484 Constructs a COSArrayList with initial object, item, dict, and key.
1485 Creates a COSArray from a list of COSObjectable objects. @param cosObjectableList List of COSObjectable objects. @return A COSArray containing the converted objects.
1486 Constructs a PDRange with default values (0.0 to 1.0).
1487 Creates a new FDFOptionElement with an empty COS array.
1488 Initializes a PDFontSetting object with an empty array and default values.
1489 Creates a color array with components, adds pattern name if present. @return COSArray representing the color, including pattern name.
1490 Constructs a PDDeviceN object with an empty DeviceN color space.
1491 Constructs a PDGamma object with initial gamma values of zero.
1492 Creates or retrieves the alternate color space array. @return PDColorSpace object representing the alternate space
1493 Constructs a PDIndexed object, initializing the color array.
1494 Creates a COSArray representing the function mask range. @return COSArray containing the function mask values.
1495 Constructs a PDPattern object with provided resources. @param resources The resources associated with the pattern.
1496 Constructs a `PDSeparation` object with initial color separation data.
1497 Initializes a PDTristimulus object with zero X, Y, and Z values.
1498 Initializes a PDTristimulus object from a float array. @param array X, Y, Z tristimulus values; max length 3.
1499 Sets the transform matrix for the form XObject. @param transform AffineTransform object representing the transformation.
1500 Creates a PDImageXObject from a byte array, handling color space and CMYK decoding. @param document PDF document @param byteArray Image data as bytes @return PDImageXObject instance
1501 Creates a COSArray from a float array. @return COSArray containing selected float values.
1502 Sets a COSBase object at the specified index in the array. @param index Index to set the object at. @param object COSObjectable object to set.
1503 Sets an integer value at the given index in the array. @param index Index to set the value. @param value Integer value to be set.
1504 Sets a COSName object at the specified index in the array. @param index Index to set the COSName at. @param name Name of the COSName to set.
1505 Sets the element at the given index to a COSString or null. @param index Index to set the element at. @param string String to set, or null to clear.
1506 Sets the minimum value of the range. @param min The minimum value for the range.
1507 Sets the maximum value of the range to the given float. @param max The maximum value for the range.
1508 Sets the rectangle's height to the given value. @param value The height value to set.
1509 Sets the value of the rectangle's height. @param value The height value to set.
1510 Sets the rectangle's width to the given value. @param value The width of the rectangle.
1511 Sets the value of the rectangle's width. @param value The width value to set.
1512 Sets the color value at the given index. @param index Index to set the color. @param colour The PDGamma object representing the color.
1513 Updates array elements with encrypted objects. @param array COSArray to update. @param objNum Object number for encryption. @param genNum Generation number for encryption.
1514 Sets the option value to the given string. @param opt The string value to set for the option.
1515 Sets the "DA" value for the option, representing its display text. @param da The display text string to set.
1516 Sets the font size. @param size The desired font size.
1517 Creates a COSArray from colorant names and sets it in the array. @param names List of colorant names to be added to the array.
1518 Sets DeviceN attributes. If null, sets default attributes. @param attributes DeviceN attributes, or null for defaults.
1519 Sets the alternate color space and adds it to the array. @param cs Alternate color space to set.
1520 Sets the red color component of the color value. @param r The red color value (0.0 - 1.0).
1521 Sets the gamma value in the color representation. @param g The gamma value to be set.
1522 Sets the blue color component to the given value. @param b The blue color value to set.
1523 Sets the function mask for the color space. @param base The base color space.
1524 Sets the color space name in the array. @param name The name of the color space.
1525 Sets the alternate color space and its function mask. @param colorSpace The alternate color space.
1526 Sets the X tristimulus value. @param x The X tristimulus value to set.
1527 Sets the Y tristimulus value. @param y The Y tristimulus value to set.
1528 Sets the Z tristimulus value. @param z The Z tristimulus value to set.
1529 Sets a key-value pair. Null value removes the key. @param key The key of the item. @param value The value to associate with the key.
1530 Sets a boolean value for the given key in the dictionary. @param key The key for the boolean value. @param value The boolean value to set.
1531 Sets a boolean value for a given key in the dictionary. @param key The key for the boolean value. @param value The boolean value to set.
1532 Sets a key-value pair in the dictionary. @param key The key to set. @param value The value associated with the key.
1533 Sets the value for a given key. Creates COSName if value exists. @param key The key to set. @param value The value to associate with the key.
1534 Sets a key-value pair; encodes string value if present. @param key The key to set. @param value The value to associate with the key.
1535 Sets an integer value for a given key in the dictionary. @param key The key to associate with the integer value. @param value The integer value to set.
1536 Sets the integer value associated with the given key. @param key The key for the integer value. @param value The integer value to set.
1537 Sets a float value associated with the given key. @param key The key to associate the value with. @param value The float value to set.
1538 Creates a COSStream from a dictionary and stream data. @param dictionary Dictionary containing stream information. @param startPosition Stream start position. @param streamLength Stream length. @return COSStream object.
1539 Sets the encryption dictionary in the trailer. @param encDictionary Encryption dictionary to set.
1540 Sets the ID of the document trailer. @param id The ID array to set.
1541 Parses a PDF stream token and returns an object. Handles various data types and error conditions.
1542 Constructs a PDDocument with a StreamCacheCreateFunction. @param streamCacheCreateFunction Function for creating stream cache.
1543 Sets document information and adds it to the trailer. @param info Document information to be set.
1544 Constructs a PDDocumentCatalog, linking it to a document. @param doc The PDF document this catalog is associated with.
1545 Sets the threads array in the document catalog. @param threads List of PDThread objects to be added.
1546 Sets the output intents array in the document catalog. @param outputIntents List of output intents to add.
1547 Sets the crop box for the page. Null cropBox resets it. @param cropBox The rectangle defining the crop box.
1548 Sets the page content stream. @param contents List of content streams to set.
1549 Sets the B entry in the page's dictionary with thread beads. @param beads List of PDThreadBead objects to set.
1550 Sets the annotations for the page. @param annotations List of annotations to set.
1551 Sets the viewports for the page. @param viewports List of PDViewportDictionary objects.
1552 Constructs a new, empty PDPageTree object. Initializes the root dictionary and associated attributes.
1553 Adds an element to the list and updates parent dictionary. @param o The object to add; casts to COSObjectable if needed.
1554 Clears the list, notifies parent dict, and clears related lists.
1555 Inserts the given element at the specified index. @param index Index at which to insert the element. @param element Element to insert. Returns the replaced element.
1556 Inserts an element into the list at the specified index. @param index Index where the element will be inserted. @param element Element to be inserted.
1557 Associates a key with a value, storing it in the map and actuals. @param key The key to associate with the value. @param value The value to associate with the key.
1558 Creates a dictionary containing page label masks. Iterates through labels, adding key/value pairs to the array.
1559 Constructs a new `PDComplexFileSpecification` object. Initializes the dictionary and sets the file type.
1560 Constructs a `PDComplexFileSpecification` from a COSDictionary. @param dict The COSDictionary to use, or null for a new one.
1561 Sets the range values for the function. @param rangeValues The range values to set.
1562 Sets the domain values for the function and stores them. @param domainValues Array of domain values.
1563 Sets the encode values and registers them with the dictionary. @param encodeValues The array of encode values.
1564 Sets the decode values and registers them with the object. @param decodeValues The array of decode values.
1565 Sets the 'K' item in the COSDictionary. @param k The value to associate with the 'K' key.
1566 Populates the class map dictionary. Null map clears it; otherwise, populates from input.
1567 Sets user properties. @param userProperties List of user properties to set.
1568 Sets the line dash pattern for guidelines. @param dashArray COSArray representing the dash pattern.
1569 Sets the CryptFilterMetadata key in the dictionary. @param cfm The CryptFilterMetadata COSName to set.
1570 Sets the filter for the dictionary. @param filter The filter name to set.
1571 Sets the object's raw bytes to the dictionary. @param o The raw bytes of the object.
1572 Sets the U value in the dictionary to the provided byte array. @param u The byte array representing the U value.
1573 Sets the owner encryption dictionary byte array. @param oe The owner encryption dictionary as bytes.
1574 Sets the user encryption dictionary value. @param ue User encryption data as a byte array.
1575 Adds recipients to the dictionary as COS strings. @param recipients Array of recipient byte arrays.
1576 Sets the stream filter name in the dictionary. @param streamFilterName The name of the stream filter.
1577 Sets the string filter name in the dictionary. @param stringFilterName The name of the string filter.
1578 Sets the document permissions from a byte array. @param perms The byte array representing the permissions.
1579 Removes encryption settings from the dictionary.
1580 Constructs a new FDFAnnotation with a COSDictionary. Sets the annotation type to ANNOT.
1581 Sets the annotation color. @param c The color to set, or null to remove the color.
1582 Sets the rectangle string value for the annotation. @param rc The rectangle string value.
1583 Sets the interior color mask for the annotation. @param color The interior color; null clears the mask.
1584 Sets the callout array for the annotation. @param callout The callout array to set.
1585 Converts ink data to a COSArray and sets it in the annotation. @param inklist List of float arrays representing ink data.
1586 Sets the line coordinates of the annotation. @param line Array of floats representing line coordinates.
1587 Sets the IC (Interactive Color) of the annotation. @param color The color to set; null to remove the IC.
1588 Sets the polygon vertices in the annotation. @param vertices Array of floats representing vertex coordinates.
1589 Sets the IC (Interior Color) of the annotation with the given color. @param color The color to set for the interior of the annotation.
1590 Sets the polyline vertices in the annotation. @param vertices Array of vertex coordinates.
1591 Sets the IC (Interior Color) of the annotation. @param color The color to set as the interior color.
1592 Sets the IC (Interior Color) of the annotation to the given color. @param color The color to set for the annotation's interior.
1593 Sets the quadpoints for the annotation. @param coords Array of coordinates for the quadpoints.
1594 Sets the document ID in the FDF dictionary. @param id The COSArray representing the document ID.
1595 Sets the fields in the FDF document. @param fields List of FDFField objects to set.
1596 Sets the PAGES entry in the FDF dictionary to the given pages. @param pages List of FDFPage objects to set as PAGES.
1597 Sets the annotations for the FDF document. @param annots List of FDF annotations to set.
1598 Sets the differences stream in the FDF dictionary. @param diff The stream containing differences.
1599 Sets the list of embedded file specifications within the FDF. @param embedded List of PDFileSpecification objects to set.
1600 Sets the KIDS array for the field with a list of FDFField objects. @param kids List of FDFField objects to be added to the KIDS array.
1601 Sets the field value based on the provided object type. @param value The value to set; can be List, String, or COSObjectable.
1602 Sets the field value. @param value The value to set for the field.
1603 Sets the FF value of the field. @param ff The integer value to set, or null to clear.
1604 Sets the field flag value. @param ff The field flag integer value.
1605 Sets the color flag value for the field. @param ff The color flag value, or null to clear.
1606 Sets the Flags value for the field. @param f The Flags value to set; null to remove.
1607 Sets the "SET_F" field value to an integer representation. @param ff Integer value to set, or null to clear.
1608 Sets the color flags for the field. @param ff The color flag value, or null to clear.
1609 Sets the value of the "RV" field to the given COSString. @param rv The value to set for the "RV" field.
1610 Sets the RV (Rich Text Value) stream for the field. @param rv The COSStream representing the rich text value.
1611 Sets the 'BEFORE' value in the dictionary to the given string. @param before The string value to set for the 'BEFORE' key.
1612 Sets the "After" field in the dictionary to the given string. @param after The string value for the "After" field.
1613 Adds JavaScript actions to a dictionary. @param map Map of JavaScript actions to be added.
1614 Sets the templates for the page. @param templates List of FDF templates to set.
1615 Sets the fields in the template to the provided list of fields. @param fields List of FDFField objects to set as fields.
1616 Creates font width array for CID font, based on horizontal metrics. @param cidToGid Mapping from CID to glyph ID.
1617 Constructs a new PDFont object, initializing its internal state.
1618 Constructs a new PDFontDescriptor with a font descriptor dictionary.
1619 Sets the font name in the dictionary. @param fontName The name of the font. Null if no font name.
1620 Sets the font family name. @param fontFamily The name of the font family.
1621 Sets the font stretch value. @param fontStretch The font stretch string, or null to clear.
1622 Sets the font bounding box in the PDF dictionary. @param rect The rectangle containing font bounding box data.
1623 Sets the character set for the font descriptor. @param charSet The character set string.
1624 Sets the gamma value for the CALGRAY color space. @param value The gamma value to set.
1625 Sets the gamma color values in the dictionary. @param gamma The PDGamma object containing gamma values.
1626 Sets the color transformation matrix to the dictionary. @param matrix The 3x3 transformation matrix.
1627 Sets the colorants dictionary from a map of color spaces. @param colorants Map of color space names to PDColorSpace objects.
1628 Constructs a new PDTransparencyGroupAttributes object. Initializes the dictionary with the transparency group type.
1629 Sets the filter parameter for the inline image. @param filters List of filter strings to apply.
1630 Initializes the dictionary with the OCMD type.
1631 Sets the visibility policy for the optional content group. @param visibilityPolicy The visibility policy to set.
1632 Sets the pattern matrix. @param transform AffineTransform object representing the matrix.
1633 Sets the bounding box of the tiling pattern. @param bbox The bounding box rectangle, or null to remove.
1634 Sets the background shading and adds it to the dictionary. @param newBackground The new background shading COSArray.
1635 Sets the bounding box for the shading. Removes if null. @param newBBox The new bounding box rectangle.
1636 Sets the color space and updates the dictionary accordingly. @param colorSpace The color space to set.
1637 Sets the function array for shading. @param newFunctions COSArray representing the new function array.
1638 Creates a matrix COS array from an AffineTransform. @param transform The AffineTransform to convert.
1639 Sets the shading domain. @param newDomain The new domain array.
1640 Sets the extend array and updates the dictionary. @param newExtend The new extend array for the shading.
1641 Sets the shading domain. @param newDomain The new domain array for the shading.
1642 Sets the shading coordinates and updates the dictionary. @param newCoords The new coordinates for the shading.
1643 Sets decode values and registers them with the dictionary. @param decodeValues Array of decode values for shading.
1644 Constructs a new `PDExtendedGraphicsState` object. Initializes the dictionary with the type attribute.
1645 Sets the blend mode for the graphics state. @param bm The blend mode to set.
1646 Sets the graphics state property. Null value removes the key. @param key COSName of the property. @param value The value of the property, or null to remove.
1647 Sets the transfer function for masking. @param transfer The transfer function COSBase object.
1648 Sets the transfer2 property in the dictionary. @param transfer2 The transfer function to set.
1649 Sets the 'Next' action to a list of subsequent actions. @param next List of PDAction objects to be the next actions.
1650 Sets the 'T' item in the action dictionary. @param t The value for the 'T' item.
1651 Sets the 'H' flag for the action to hide/show elements. @param h The boolean value for the 'H' flag.
1652 Sets the fields array for the reset action. @param array The array containing field names.
1653 Sets the sound content for the action. @param sound The COSStream representing the sound data.
1654 Sets the fields array for the action. @param array The array of field names.
1655 Sets the 'D' action parameter to the provided value. @param d The value to set as the 'D' action parameter.
1656 Sets the 'B' parameter of the action. @param b The value to set for the 'B' parameter.
1657 Sets the relationship name in the dictionary. @param relationship The relationship name (must be 'P' or 'C').
1658 Constructs a new PDAnnotation with an empty dictionary. Sets the annotation type to ANNOT.
1659 Sets the rectangle of the annotation's mask dictionary. @param rectangle The rectangle defining the mask.
1660 Sets the border array for the annotation. @param borderArray The border array to set.
1661 Sets the annotation margins based on provided differences. @param differenceLeft Left margin difference. @param differenceTop Top margin difference. @param differenceRight Right margin difference. @param differenceBottom Bottom margin difference.
1662 Sets the rectangle difference margins. @param differenceLeft Left margin difference. @param differenceTop Top margin difference. @param differenceRight Right margin difference. @param differenceBottom Bottom margin difference.
1663 Sets the callout array for the annotation. @param callout Callout array to set.
1664 Sets the ink list to the dictionary, creating it if null. @param inkList 2D float array representing ink paths.
1665 Sets the line coordinates for the annotation. @param l Array of floats representing the line coordinates.
1666 Sets the quad points for the annotation. @param quadPoints Array of four floats defining the quad points.
1667 Sets the RC value for the annotation. @param rc The RC value to set.
1668 Sets the polygon vertices. @param points Array of floats representing polygon coordinates.
1669 Sets the vertices of the polyline annotation. @param points Array of vertex coordinates for the polyline.
1670 Sets the parent annotation for the popup. @param annot The parent annotation object.
1671 Sets the rectangle difference margins. @param differenceLeft Left margin difference. @param differenceTop Top margin difference. @param differenceRight Right margin difference. @param differenceBottom Bottom margin difference.
1672 Sets the quad points for the annotation. @param quadPoints Array of quad points defining the area.
1673 Constructs a new PDAppearanceDictionary with an empty dictionary. Initializes the required 'N' entry within the dictionary.
1674 Sets the dash array for the border style. @param dashArray The dash pattern for the border.
1675 Constructs a new PDSeedValue object. Initializes the dictionary with type SV and sets it as direct.
1676 Sets the filter for the seed value dictionary. @param filter The filter to set (e.g., FlateDecode)
1677 Sets the subfilter value in the dictionary. @param subfilter List of subfilter names.
1678 Validates digest methods and sets them in the dictionary. @param digestMethod List of digest method names to validate.
1679 Sets the reasons for the PDSeedValue. @param reasons List of reasons to set; null to remove.
1680 Sets the MDP (Metadata for PDF) seed value in the dictionary. @param mdp The PDSeedValueMDP object containing MDP data.
1681 Sets the timestamp value in the dictionary. @param timestamp The PDSeedValueTimeStamp object to set.
1682 Sets the legal attestations for the seed value. @param legalAttestation List of legal attestations.
1683 Constructs a new PDSeedValueCertificate with a COSDictionary. Sets the type to SV_CERT and marks the dictionary as direct.
1684 Sets the subject attribute of the certificate. @param subjects List of byte arrays representing the subject.
1685 Processes subject DN list and sets it in the dictionary. @param subjectDN List of subject DN maps.
1686 Sets the Key Usage extensions for the certificate. @param keyUsageExtensions List of key usage OIDs.
1687 Sets the issuer data in the dictionary from a list of byte arrays. @param issuers List of byte arrays representing issuer data.
1688 Sets the OID value in the dictionary from a list of byte arrays. @param oidByteStrings List of byte arrays representing the OID.
1689 Constructs a new, empty PDSignature object. Initializes the signature type to "Sig".
1690 Sets the signature type in the signature dictionary. @param type The type of the signature (e.g., "Sig").
1691 Sets the filter key in the dictionary. @param filter The filter to set.
1692 Sets the subfilter value in the signature dictionary. @param subfilter The subfilter COSName to set.
1693 Creates a byte range array and adds it to the dictionary. @param range An integer array representing the byte range.
1694 Sets the signature contents to the given byte array. @param bytes The byte array representing the signature content.
1695 Sets the color for the outline item, normalizing RGB values. @param textColor The color to set, RGB values normalized to 0-1.
1696 Constructs a PDAcroForm associated with the given document. @param doc The document this form belongs to.
1697 Sets the fields array in the form dictionary. @param fields List of PDField objects to set.
1698 Sets the form fields in the dictionary. @param fields List of PDF form fields to set.
1699 Constructs a PDButton associated with the given AcroForm. @param acroForm The parent AcroForm instance.
1700 Sets the button options based on provided values. @param values List of strings for button options.
1701 Constructs a PDChoice object, initializing its field type to CH. @param acroForm The parent AcroForm instance.
1702 Sets the KIDS array for this field, linking to child fields. @param children List of child PDFields to include in KIDS array.
1703 Sets the value of the field. @param object The value to set for the field.
1704 Sets the dynamic value for this field. @param value The dynamic value to set.
1705 Creates a PDSignatureField associated with an AcroForm. @param acroForm The parent AcroForm instance.
1706 Constructs a PDTextField associated with the given AcroForm. @param acroForm The parent AcroForm instance.
1707 Sets the default style string for the text field. @param defaultStyleString The default style string, or null to remove.
1708 Sets the rich text value for the variable text field. @param richTextValue The rich text string to set, or null to clear.
1709 Sets the origin of the coordinate system. @param coordSystemOrigin Origin coordinates as an array.
1710 Constructs a new PDThread object. Initializes the thread dictionary with the type attribute.
1711 Sets the transition direction. @param direction The transition direction to set.
1712 Sets the transition duration. @param duration The duration of the transition in seconds.
1713 Sets the scale of the transition. @param scale The scaling factor for the transition.
1714 Sets the opacity flag. @param opaque True for opaque, false for transparent.
1715 Adds all elements from the given collection to this list. Throws UnsupportedOperationException if filtered.
1716 Sets the default font color based on operands. @param operands List of COSBase objects defining color. @throws IOException if operands are missing.
1717 Inserts all elements from a collection into this list at the specified index.
1718 Updates the array with elements from the provided list. @param objectList COSArray containing objects to add
1719 Converts COSBase objects in the array to float values. Returns an array of floats, defaulting to 0 if not a COSNumber.
1720 Extracts float values from COSBase objects in the array. Returns a List of Floats, null if the element is not COSNumber.
1721 Extracts integer values from COSBase objects into a List.
1722 Processes entries in a COSArray, setting parent and structure type.
1723 Gets the minimum value from the range array.
1724 Returns the maximum value of the range. Uses rangeArray to get the maximum COSNumber.
1725 Retrieves a PDGamma object at the specified index. @param index Index of the PDGamma to retrieve. @return PDGamma object or null if not found.
1726 Retrieves the string value of the option element. Returns the string from COSString after dereferencing.
1727 Returns the string value of the option at index 1.
1728 Determines the BlendMode from a COSBase object. @param cosBlendMode Blend mode object to evaluate. @return BlendMode or NORMAL if not found.
1729 Extracts colorant names from the array. @return List of colorant names as strings.
1730 Returns the alternate color space, creating it if null. @return PDColorSpace representing the alternate color space
1731 Retrieves the name of the colorant from the array. @return Colorant name as a String.
1732 Creates a PDDestination from a COSBase object. @param base The COSBase object to convert. @return PDDestination object or null if conversion fails.
1733 Extracts a PDPage from the array, if not empty. @return PDPage object or null if the array is empty.
1734 Extracts page number from array, returns -1 if empty.
1735 Retrieves zoom level from array; returns -1 if not a number.
1736 Initializes matrix from COS array, extracting transformation values.
1737 Retrieves a value by key from the dictionary. @param key The key to retrieve. @return The COSBase value associated with the key.
1738 Retrieves a value by the first key, or second if first is null. @param firstKey The primary key to retrieve. @param secondKey Fallback key if the first is not found. @return COSBase object or null if neither key is found.
1739 Retrieves a COSName value by key, or null if not a COSName. @param key the key to retrieve
1740 Retrieves a COSDictionary by key, or null if not found. @param key the key to retrieve
1741 Retrieves a COSStream value by key, or null if not a stream. @param key the key to retrieve
1742 Retrieves a COSArray by key; returns null if not an array. @param key the key to retrieve
1743 Returns the COSName if found, otherwise returns the default. @param key The key to search for. @param defaultValue The default value if key is not found.
1744 Retrieves a string value associated with the given key. @param key The key to look up in the dictionary. @return String value or null if not found.
1745 Retrieves string value associated with the given key. @param key the key to retrieve @return String value or null if not found/null
1746 Retrieves a Calendar object from a COSString value. @param key key to retrieve the COSString value for @return Calendar object or null if not a COSString.
1747 Gets the long value associated with a key, or default if absent. @param key the key to retrieve @param defaultValue default value if key is not found
1748 Retrieves a float value by key, using default if not found. @param key the key to retrieve @param defaultValue the default value if key is not found
1749 Saves/restores graphics state and updates page contents. @param page The PDF page to modify. @throws IOException If an I/O error occurs.
1750 Returns an iterator over the page's content streams. Handles COSStream and COSArray content structures.
1751 Checks if the page has content. Checks if content stream or array is empty. Returns true if content exists, false otherwise.
1752 Converts a COSDictionary to a COSDictionaryMap. @param map The COSDictionary to convert. @return COSDictionaryMap or null if map is null.
1753 Updates attribute based on existing COS value or removes it. @param attributeObject The attribute object to update.
1754 Retrieves class names and revisions from COS objects. Returns a Revisions object containing the found classes.
1755 Updates element based on class name. @param className The class name to use for update.
1756 Sets the FUNC_MASK value, creating or updating the COSArray. @param object The COSBase object to set as the FUNC_MASK value.
1757 Updates a child node based on a reference node. @param newKid The new child node to set. @param refKid Reference node to identify the child.
1758 Checks if an object is a FUNC_MASK and handles related updates. @param object The object to check. @return True if object is a FUNC_MASK, otherwise false.
1759 Retrieves a value from the parent using COSName.K. @return COSBase object or null if not found.
1760 Retrieves the value associated with the key 'V' from m1(). Uses getDictionaryObject to fetch the value.
1761 Checks if metadata is encrypted. @return True if metadata encryption is enabled, false otherwise.
1762 Retrieves the owner encryption key from the dictionary. @return Owner encryption key as a byte array, or null.
1763 Retrieves the user encryption key from the dictionary. @return User encryption key as byte array or null if absent.
1764 Retrieves the permissions bytes from the dictionary. @return Permissions byte array or null if not present.
1765 Gets the page number of the annotation. @return Page number as Integer, or null if not set.
1766 Retrieves the value of the field's mask. @return COSBase object representing the mask value. @throws IOException if the value type is unrecognized.
1767 Gets the field flags value. @return Integer field flags or null if not present.
1768 Retrieves the field flags value. Returns null if no flags exist.
1769 Gets the field flags value. Returns null if no flags exist.
1770 Retrieves the field flag value from the field's COS object. Returns null if the flag is not present.
1771 Retrieves the field flags value. @return Integer representing field flags or null if not present.
1772 Gets the field's color flag value. @return Integer color flag or null if not present.
1773 Retrieves the default width of the CID font. Uses DW dictionary entry, defaults to 1000 if not found.
1774 Retrieves the color space from the dictionary. @return PDColorSpace object or null if not found.
1775 Retrieves the color space, creating it if necessary. @param resources PDResources for color space management @return PDColorSpace object
1776 Constructs a PDOptionalContentGroup from a COSDictionary. @param dict The COSDictionary containing OCG properties.
1777 Constructs a PDOptionalContentMembershipDictionary. @param dict COSDictionary containing membership information.
1778 Retrieves the OPM mask value from the dictionary. Returns null if the value is not a COSNumber.
1779 Retrieves the soft mask from the dictionary, or null if absent. @return PDSoftMask object or null if no soft mask is present.
1780 Retrieves the float value associated with a key from the dictionary. @param key The key to look up in the dictionary. @return The float value or null if not found.
1781 Retrieves the function mask from the dictionary. Returns null if the mask is not a 4-element array.
1782 Retrieves the function mask from the dictionary. Returns null if it's not a COSArray of size 4.
1783 Returns the backdrop color array for the soft mask. @return COSArray representing the backdrop color, or null.
1784 Determines the open mode based on the NEW_WINDOW preference. @return OpenMode: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE.
1785 Retrieves the mask value associated with the action. @return COSBase object representing the mask value.
1786 Determines the open mode based on the 'new window' preference. @return OpenMode: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE.
1787 Determines the open mode based on the NEW_WINDOW preference. @return OpenMode: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE.
1788 Retrieves the named destination from the dictionary. @return PDNamedDestination object or null if not a string.
1789 Constructs a PDAnnotation from a COSDictionary. Sets annotation type if missing or incorrect.
1790 Retrieves signature content as bytes. Returns empty array if null.
1791 Retrieves the XFA resource from the dictionary. @return PDXFAResource object or null if not found.
1792 Retrieves the list of string values associated with the choice field.
1793 Retrieves choice options from the field's COS object. Uses m2 to get options, then m3 to extract strings.
1794 Extracts string values from a choice field's COS data. @param name COSName representing the choice field name. @return List of strings, or an empty list if not found.
1795 Retrieves a value from the dictionary or parent/acroForm. @param key The key to retrieve. @return COSBase object or null if not found.
1796 Retrieves the value associated with the 'V' key. Uses getDictionaryObject to fetch the value.
1797 Gets the value of the field mask. Returns empty string if the value is null.
1798 Retrieves the function mask value from the dictionary. Uses getDictionaryObject to fetch the value.
1799 Returns a string representation of the COSDictionary. Handles potential IOExceptions and returns an error message.
1800 Processes a collection of indirect objects and COSBase objects. @param indirectObjects Collection of COSObjectKeys to process.
1801 Updates XRef object number based on imported page objects. @param importedPage The imported PDF page.
1802 Calls m1 on visualSignature and pdfSource, handling nulls.
1803 Writes a COS object and its key to the PDF output stream. @param key COSObjectKey identifying the object. @param obj The COSBase object to write.
1804 Writes object key and reference to the output stream. @param obj The COSBase object to write.
1805 Retrieves the COSObjectKey for a given COSBase object. @param object The COSBase object to get the key for. @return The COSObjectKey.
1806 Associates a COSBase object with a COSObjectKey. @param key Initial key, may be updated. @param object The COSBase object to associate. @return The assigned COSObjectKey.
1807 Checks if the object is managed by the object pool. @param object COSBase object to check. @return True if managed, false otherwise.
1808 Creates a list of COSWriterObjectStreams for object compression. Iterates through objects, creating streams as needed.
1809 Formats lines of text with alignment and spacing. @param lines List of Line objects to format. @param isFirstParagraph Flag indicating first paragraph.
1810 Draws cloud segments using Bezier curves at specified angles. @param angleCur,r,alpha,cx,cy Parameters for the segments.
1811 Generates points for a cloud mask shape. @param angleCur Current angle. @param r Radius value. @return Array of Point2D.Double objects.
1812 Draws a cloud-like shape using Bezier curves. @param startAng,endAng Angles for the shape. @param cx,cy Center coordinates. @param rx,ry Radius values.
1813 Constructs a PDICCBased object, initializing its array and stream. @param doc The document to associate the stream with.
1814 Constructs a PDPattern with given resources and color space. @param resources Resource object for the pattern. @param colorSpace Color space for the pattern.
1815 Adds optional content groups to the dictionary. @param ocgs List of optional content groups to add.
1816 Adds number format dictionaries' data to the X array. @param changeXs Array of dictionaries to add to the array.
1817 Creates a Y array from changeYs and sets it in the dictionary. @param changeYs Array of PDNumberFormatDictionary objects.
1818 Creates a measurement array from distances and sets it in the dictionary. @param distances Array of PDNumberFormatDictionary objects.
1819 Creates a COSArray of formatted areas and sets it to dictionary. @param areas Array of PDNumberFormatDictionary objects.
1820 Creates a COSArray of angles and sets it to the dictionary. @param angles Array of PDNumberFormatDictionary objects.
1821 Creates a COSArray of number format dictionaries. @param lineSloaps Array of PDNumberFormatDictionary objects.
1822 Initializes the array to the specified size. @param size The desired size of the array.
1823 Parses a functional mask from the PDF source. Returns a COSBase object based on the parsed data.
1824 Sets the decode parameters for the stream. @param decodeParams List of decode parameters to set.
1825 Sets decode parameters for the stream. @param decodeParams List of decode parameters to set.
1826 Sets the K entry of the dictionary with a list of kids. @param kids List of child nodes to associate with this node.
1827 Sets the field options to a list of values. @param options List of options to set for the field.
1828 Creates a PDRange based on color range data. @param n Index for the PDRange. Returns empty range if invalid.
1829 Creates and sets the font's FUNC mask array based on glyph widths. @param cidFont The CID font dictionary to update.
1830 Sets the dash pattern for the mask. @param dashPattern The PDLineDashPattern to set.
1831 Sets the color value in the dictionary. @param color The color object, used to get color values.
1832 Sets the color of the annotation mask. @param c The color to set for the mask.
1833 Sets the color of the line annotation. @param ic The color to set for the line.
1834 Sets the interior color of the polygon annotation. @param ic The color object to set as the interior color.
1835 Sets the interior color of the polyline annotation. @param ic The color object to set as the interior color.
1836 Sets the interior color of the annotation. @param ic The PDColor object representing the interior color.
1837 Sets the background color of the appearance mask. @param c The PDColor object representing the background color.
1838 Sets the background color of the appearance mask. @param c The PDColor object representing the background color.
1839 Sets the color for the outline item's text. @param textColor The `PDColor` object representing the text color.
1840 Creates a PDImageXObject from an image stream. @param document PDF document @param stream Input stream containing image data @return PDImageXObject instance
1841 Sets the font at index 0 in the font setting array. @param font The PDFont object to set.
1842 Sets the tint transform and adds it to the array. @param tint The tint transformation function.
1843 Sets the tint transform and stores it in the array. @param tint The tint transform to apply.
1844 Sets the first element of the array to the provided page. @param page The PDF page to set as the first element.
1845 Creates a masked PDRectangle. Uses m1 and m3 to initialize the new rectangle.
1846 Sets the color at index 0. @param colour The PDGamma object representing the color.
1847 Sets the color value at index 1. @param colour The PDGamma object representing the color.
1848 Sets the color value at index 2. @param colour The PDGamma object representing the color.
1849 Sets the color value at index 3. @param colour The PDGamma object representing the color.
1850 Applies mask functionality to a PDF object. @param obj Object to apply the mask to. @param objNum Object number. @param genNum Generation number.
1851 Sets a key-value pair in the dictionary. @param key The key of the item. @param value The value to associate with the key.
1852 Sets the ACRO_FORM item in the root dictionary. @param acroForm The PDAcroForm object to set.
1853 Sets viewer preferences in the document catalog. @param prefs The viewer preferences object to set.
1854 Sets the document outlines in the catalog. @param outlines The document outline object.
1855 Sets the document metadata. @param meta The metadata object to set.
1856 Sets the open action for the PDF document. @param action The destination or action to execute.
1857 Sets the additional actions for the document catalog. @param actions Additional actions object.
1858 Sets the document names dictionary in the root dictionary. @param names The document names dictionary to set.
1859 Sets the document's mark information. @param markInfo The mark information to set.
1860 Sets the URI dictionary in the document catalog. @param uri The URI dictionary to associate with the catalog.
1861 Sets the structure tree root in the document catalog. @param treeRoot The root node of the structure tree.
1862 Sets the page labels for the document. @param labels Page label object to set.
1863 Associates destination tree and clears it from the catalog. @param dests Destination name tree node.
1864 Associates embedded files with the name dictionary. @param ef The embedded files name tree node.
1865 Associates a JavaScript name tree node with the name dictionary. @param js The JavaScript name tree node.
1866 Constructs a new PDPage with the specified media box. @param mediaBox The rectangle defining the page's dimensions.
1867 Sets page resources. Null resources removes the RESOURCES key. @param resources The resources object for the page.
1868 Sets the page media box. Uses default if null. @param mediaBox The media box rectangle.
1869 Sets the bleed box for the page. Null value removes it. @param bleedBox The bleed rectangle, or null to remove.
1870 Sets the trim box for the page. Null trimBox removes it. @param trimBox The trim box rectangle, or null to remove.
1871 Sets the ArtBox of the page. Null ArtBox removes it. @param artBox The ArtBox rectangle, or null to remove.
1872 Sets the page content stream. @param contents The content stream for the page.
1873 Sets the page metadata. @param meta The metadata object to set.
1874 Sets the additional actions for the page. @param actions Additional actions object to set.
1875 Sets the transition object for the page. @param transition The transition object to set.
1876 Sets transition and duration for the page. @param transition The transition object. @param duration The transition duration in seconds.
1877 Associates this reference with the given PDF page. @param page The PDF page to associate with this reference.
1878 Associates a PDAnnotation with this reference. @param annotation The annotation to associate.
1879 Associates an XObject with this reference. @param xobject The XObject to associate.
1880 Sets the page associated with this reference. @param page The PDPage object to associate.
1881 Sets the parent structure node. @param structureNode The parent node.
1882 Sets the page for the structure element. @param page The PDF page to associate with the element.
1883 Processes attributes, either directly or into an array. @param attributes Attributes to process, containing PDAttributeObject.
1884 Sets the ID tree for the structure tree root. @param idTree The ID tree to associate with the root.
1885 Sets the parent tree node for this tree. @param parentTree The parent tree node.
1886 Sets the rectangle for the annotation. @param rectangle The rectangle object to set.
1887 Sets the border style of the annotation. @param bs The border style to set.
1888 Sets the border effect for the annotation. @param be The border effect dictionary to set.
1889 Sets the RD property of the annotation to the given fringe. @param fringe The fringe rectangle to set.
1890 Sets the RD property of the annotation to the given fringe. @param fringe The rectangle representing the fringe.
1891 Sets the rectangle (RD) property of the annotation with a fringe. @param fringe The rectangle representing the fringe.
1892 Sets the rectangle dimension of the annotation. @param fringe The rectangle dimension to set.
1893 Sets the FDF dictionary in the catalog. @param fdf The FDF dictionary to associate with the catalog.
1894 Associates a signature with the catalog under the SIG key. @param sig The signature object to associate.
1895 Sets the file specification for the FDF document. @param fs The file specification object to set.
1896 Sets the JavaScript object for the FDF document. @param js The JavaScript object to associate with the document.
1897 Associates the FDF catalog with the document's root dictionary. @param cat The FDF catalog to associate.
1898 Sets the appearance dictionary for the field. @param ap The appearance dictionary to set.
1899 Sets the appearance reference for the field. @param ref The FDFNamedPageReference representing the AP reference.
1900 Sets the icon fit for the field. @param fit The icon fit object to set.
1901 Sets the action for the field. @param a The action to associate with the field.
1902 Sets the additional actions for the field. @param aa The additional actions to set.
1903 Sets the 'A' fitting parameter for the icon space. @param space The PDRange object representing the space.
1904 Sets the file specification for the named page reference. @param fs The file specification to set.
1905 Sets the page info using the provided FDFPageInfo object. @param info FDFPageInfo object containing page information.
1906 Sets the template reference. @param tRef The FDFNamedPageReference to set.
1907 Sets the font file for the descriptor using the provided stream. @param type1Stream The stream containing the font file data.
1908 Sets the font file to the provided stream. @param ttfStream The stream containing the font file.
1909 Sets the font file stream in the dictionary. @param stream The PDF stream object representing the font file.
1910 Associates a CID set stream with the font descriptor dictionary. @param stream The stream containing CID set data.
1911 Sets the whitepoint for the color space. @param whitepoint Whitepoint PDTristimulus object @throws IllegalArgumentException if whitepoint is null
1912 Sets the black point value in the dictionary. @param blackpoint The black point tristimulus value.
1913 Sets the extended graphics state for shading. @param extendedGraphicsState The extended graphics state to set.
1914 Sets the shading resource and registers it with the shading dictionary. @param shadingResources The shading resource to set.
1915 Sets the resources for the tiling pattern. @param resources The resources object to associate.
1916 Sets the function and updates the function mask dictionary. @param newFunction The new function to set.
1917 Sets the font setting for the graphics state dictionary. @param fs The font setting to apply.
1918 Sets the destination for the embedded GoTo action. @param d The destination object to set.
1919 Sets the file specification for the embedded action. @param fs The file specification to associate with the action.
1920 Sets the target directory for the embedded action. @param targetDirectory The directory to navigate to.
1921 Sets the destination for the GoTo action. @param d The destination object (PDDestination).
1922 Sets the file specification for the action. @param fs The file specification object.
1923 Sets the file specification for the launch action. @param fs The file specification object.
1924 Sets window launch parameters for Windows. @param win Windows launch parameters to set.
1925 Sets the file specification for the action. @param fs The file specification object.
1926 Sets the file specification for the action. @param fs The file specification to set.
1927 Sets the file specification for the action. @param fs The file specification to associate with the action.
1928 Sets the F action. @param action The action to set for the 'F' key.
1929 Sets the "E" action for a PDF annotation. @param e The action to be associated with the annotation.
1930 Sets the action associated with the "X" key. @param x The action to set; null removes the action.
1931 Sets the document action. @param d The document action to set.
1932 Sets the URI action for the annotation. @param u The URI action to set.
1933 Sets the "FO" action for the annotation. @param fo The action to set; null to remove.
1934 Sets the "BL" action for the annotation. @param bl The action to set for the "BL" key.
1935 Sets the PO action for the annotation. @param po The PO action to set.
1936 Sets the "PC" action for the annotation. @param pc The action to set; null to remove.
1937 Sets the private view action for the annotation. @param pv The action to be set for private view.
1938 Sets the "PI" action for a PDF annotation. @param pi The action to set for the annotation.
1939 Sets the document will change action. @param wc The action to set for document will change.
1940 Sets the document will-save action. @param ws The action to execute when saving.
1941 Sets the document's "DS" action. @param ds The document action to set.
1942 Sets the "WP" action (Will Print) in the actions dictionary. @param wp The action to associate with the "WP" key.
1943 Sets the document open action. @param dp The action to perform when the document opens.
1944 Sets the key action. @param k The action to associate with the key "K".
1945 Sets the form field action for a given key. @param f The action to associate with the key 'F'.
1946 Sets the "V" action for the form field. @param v The action to set.
1947 Sets the 'C' action for a form field. @param c The action to set.
1948 Sets the mask action for the page. @param o The action to set as the mask action.
1949 Sets the 'C' action on the page. @param c The action to set.
1950 Sets the target directory for the action. @param targetDirectory The target directory to set.
1951 Sets the named destination. Null value removes the entry. @param dest The named destination to set.
1952 Sets the appearance dictionary for the annotation. @param appearance The PDAppearanceDictionary to set.
1953 Sets the object content properties for the annotation. @param oc The PDPropertyList representing the OC properties.
1954 Sets the page for the annotation mask. @param page The page to which the annotation belongs.
1955 Sets the file specification for the annotation. @param file The file specification object.
1956 Sets the border effect for the annotation. @param be The border effect dictionary to set.
1957 Sets the rectangle for the annotation's content area. @param rd The rectangle defining the annotation's content.
1958 Sets the action associated with the annotation link. @param action The action to be performed when the link is activated.
1959 Sets the border style of the annotation using the provided dictionary. @param bs The PDBorderStyleDictionary to set.
1960 Sets the destination for the annotation link. @param dest The destination object for the link.
1961 Sets the URI action for the annotation. @param pa The URI action to set.
1962 Sets the popup annotation. @param popup The popup annotation to set.
1963 Sets the IRT (Interactive Rich Text) object for the annotation. @param irt The IRT object to associate with the annotation.
1964 Sets the external data dictionary for the annotation. @param externalData The external data dictionary to set.
1965 Sets the border style of the annotation. @param bs The border style to apply.
1966 Sets the border effect for the annotation using the provided dictionary. @param be The border effect dictionary to apply.
1967 Sets the border effect of the annotation. @param be The border effect dictionary to set.
1968 Sets the rectangle (RD) property of the annotation. @param rd The rectangle defining the annotation's bounds.
1969 Sets the MK appearance characteristic. @param appearanceCharacteristics Appearance characteristics to set.
1970 Sets the action associated with the annotation. @param action The action to be associated.
1971 Sets the additional actions for the annotation. @param actions The additional actions object.
1972 Sets the border style of the annotation using the provided dictionary. @param bs The PDBorderStyleDictionary to set.
1973 Sets the parent field of a terminal field. Throws exception if dictionary is shared with widget.
1974 Sets the mask for the appearance entry. @param entry The appearance entry to set as the mask.
1975 Sets the mask appearance stream in the dictionary. @param ap The appearance stream to set as the mask.
1976 Sets the mask for the appearance entry. @param entry The appearance entry object.
1977 Sets the mask for the appearance dictionary. @param ap The appearance stream to set as the mask.
1978 Sets the mask entry for the appearance dictionary. @param entry The mask appearance entry.
1979 Sets the mask for the appearance dictionary. @param ap The appearance stream to set as the mask.
1980 Sets the filter property in the dictionary. @param filter The filter object to set.
1981 Sets the publication security data dictionary. @param pubSec The PDPropBuildDataDict object to set.
1982 Sets the application data dictionary in the PDF property build. @param app The application data dictionary to set.
1983 Sets the certificate for the seed value within the dictionary. @param certificate The PDSeedValueCertificate to set.
1984 Sets the PROP_BUILD item in the dictionary with the given propBuild. @param propBuild The property build object to set.
1985 Sets the previous outline node for the given node. @param outlineNode The previous node in the outline.
1986 Sets the 'NEXT' entry for the given outline node. @param outlineNode The outline node to link to the next.
1987 Sets the destination for this outline item. @param dest The destination object to set.
1988 Sets the action for this outline item. @param action The action to associate with the item.
1989 Sets the structure element for this outline item. @param structureElement Structure element to associate.
1990 Sets the first child of the given outline node. @param outlineNode The child outline node to set.
1991 Sets the last child outline node. @param outlineNode The child outline node to set.
1992 Sets the resources for the form. @param dr The resources object to set.
1993 Associates an XFA resource with the form's dictionary. @param xfa The XFA resource to associate.
1994 Sets the signature value. @param value The signature value to set.
1995 Sets the DV (Digital Signature) value for the signature field. @param value The PDSignature object to set as the DV value.
1996 Sets the seed value for the signature field. @param sv The seed value to set; null to remove.
1997 Sets the additional actions for the form field. @param actions Additional actions object to set.
1998 Sets KIDS array and parent for widgets. @param children List of child widgets to process.
1999 Sets the bounding box for the viewport. @param rectangle The PDRectangle representing the bounding box.
2000 Sets the measure attribute of the viewport dictionary. @param measure The measure dictionary to set.
2001 Sets the document information for the thread. @param info Document information to associate with thread.
2002 Sets the thread associated with the bead. @param thread The PDThread object to associate.
2003 Sets the 'N' entry of the bead to the provided next bead. @param next The next PDThreadBead in the sequence.
2004 Sets the previous bead link for the current bead. @param previous Previous bead object.
2005 Sets the page associated with the bead. @param page The PDPage object to associate.
2006 Sets the rectangle associated with the bead. @param rect The rectangle object to associate.
2007 Sets the "Marked" flag in the dictionary to the given value. @param value The boolean value to set for the "Marked" flag.
2008 Sets the UserProperties flag in the dictionary to the given value. @param userProps The boolean value for UserProperties.
2009 Sets the "Suspects" flag to false in the dictionary.
2010 Sets the "IsMap" flag in the action dictionary to the given value. @param value The boolean value to set for the "IsMap" flag.
2011 Sets the popup's open state. @param open True to open, false to close.
2012 Sets the "FD" boolean value in the COSDictionary. @param fd The boolean value to set for the "FD" key.
2013 Sets the volatility status of the file. @param fileIsVolatile Boolean indicating file volatility.
2014 Sets the encrypt metadata flag in the crypt filter dictionary. @param encryptMetaData Flag indicating whether to encrypt metadata.
2015 Sets the CAP flag on the annotation dictionary. @param cap The boolean value to set for the CAP flag.
2016 Sets the 'FB' fitting boolean value in the fit dictionary. @param value The boolean value to set for the 'FB' key.
2017 Sets the rename flag on the template dictionary. @param value The boolean value for the rename flag.
2018 Sets the anti-alias flag in the shading dictionary. @param antiAlias boolean value indicating anti-aliasing
2019 Sets the overprint setting in the dictionary. @param op The overprint setting (true/false)
2020 Sets the overstrike rendering mode. @param op The overstrike rendering mode flag.
2021 Sets the 'SA' (Soft Mask) value in the dictionary. @param sa The boolean value for the soft mask.
2022 Sets the alpha value for the anti-alias mask. @param alpha The alpha value to set.
2023 Sets the "TK" (trimming) value in the graphics state dictionary. @param tk The trimming flag to set.
2024 Sets the window mode based on the provided OpenMode value. @param value The desired window open mode.
2025 Sets the window mode based on the provided OpenMode value. @param value The desired window open mode.
2026 Sets the window mode based on the provided OpenMode value. @param value The desired window open mode.
2027 Sets the synchronous flag for the action. @param synchronous True to perform synchronously, false otherwise.
2028 Sets the repeat flag for the action. @param repeat True to repeat the action, false otherwise.
2029 Sets the mix property of the action to the given boolean value. @param mix The boolean value to set as the mix property.
2030 Sets the CAP property of the annotation. @param cap The boolean value for the CAP property.
2031 Sets the "Open" flag on the annotation dictionary. @param open The boolean value for the "Open" flag.
2032 Sets the pre-release flag in the dictionary. @param preRelease True if the signature is pre-release.
2033 Sets the "non-embedded font warning" flag in the dictionary. @param noEmbedFontWarning Flag to indicate no embedded font warning.
2034 Sets the trusted mode flag in the dictionary. @param trustedMode The trusted mode flag to set.
2035 Sets the NEED_APPEARANCES flag in the dictionary to the given value. @param value The boolean value for the NEED_APPEARANCES flag.
2036 Sets the toolbar visibility preference. @param value `true` to show, `false` to hide the toolbar.
2037 Sets the hide menubar preference. @param value True to hide the menubar, false otherwise.
2038 Sets the hide window UI preference to the given value. @param value boolean value to set for hiding the window UI.
2039 Sets the fit window preference. @param value True to fit window, false otherwise.
2040 Sets the center window preference to the given boolean value. @param value The boolean value for centering the window.
2041 Sets whether to display the document title. @param value True to display, false otherwise.
2042 Builds a COSDictionary from an appearance XML element. @param appearanceXML XML element representing the appearance. @return COSDictionary representing the appearance.
2043 Sets the value for a given key. Creates COSName if needed. @param key The key to set. @param value The value to associate with the key.
2044 Sets the PageMode in the document catalog. @param mode The PageMode to set for the document.
2045 Sets the page layout in the document catalog. @param layout The page layout object.
2046 Sets the document version in the root dictionary. @param version The version string to set.
2047 Sets the 'Trapped' document information value. @param value The 'Trapped' value (True, False, or Unknown)
2048 Sets the page label style. @param style The style to set, or null to remove.
2049 Creates a PDTypedDictionaryWrapper with the given type. @param type The type of the dictionary.
2050 Sets the owner of the attribute using COSName.O. @param owner The owner string to associate with the attribute.
2051 Constructs a new PDMarkedContentReference with default type.
2052 Constructs a new, empty PDObjectReference. Initializes the object type to TYPE.
2053 Sets the structure type for the element. @param structureType The structure type to set.
2054 Processes class names and revisions, setting them in the document. @param classNames Revisions object containing class names/revisions.
2055 Constructs a new PDStructureNode with the given type. @param type The type of the structure node.
2056 Sets the style for the guideline. @param style The style string to set.
2057 Sets the subfilter value in the document dictionary. @param subfilter The subfilter string to set.
2058 Sets the annotation intent. @param intent The intent string to set.
2059 Sets the line style of the annotation. @param style The line style to apply.
2060 Sets the annotation icon. @param icon The icon to set for the annotation.
2061 Sets the FDF version. @param version The FDF version string.
2062 Sets the encoding of the FDF document. @param encoding The encoding string to set.
2063 Sets the scaling option for the southwest icon. @param option The scaling option to set.
2064 Sets the scale for icons. @param scale The scaling factor for icons.
2065 Constructs a new PDAbstractPattern with a COSDictionary. Sets the pattern type to PATTERN.
2066 Sets the action type. @param type The type of action to set.
2067 Sets the action's type to the given string. @param s The type of the action.
2068 Sets the annotation subtype. @param subType The subtype string to set.
2069 Sets the appearance stream name for the annotation. @param as The appearance stream name.
2070 Sets the annotation file attachment name. @param name The name of the attachment.
2071 Sets the left edge style. @param style The style to apply to the left edge.
2072 Sets the caption positioning. @param captionPositioning The positioning string for the caption.
2073 Sets the mode for the annotation using the helper method m2. @param mode The mode string to set.
2074 Sets the RT key's value. @param rt The value to set for the RT key.
2075 Sets the "IT" key's value. @param it The value to set for the "IT" key.
2076 Sets the annotation name using the COSName key. @param name The name to set for the annotation.
2077 Sets the annotation name using the provided string value. @param name The name to set for the annotation.
2078 Sets the highlighting mode. @param highlightingMode The highlighting mode to set.
2079 Sets the border style name. @param s The name of the border style.
2080 Constructs a new PDExternalDataDictionary. Initializes the data dictionary and sets its type to "ExData".
2081 Sets the subtype of the external data dictionary. @param subtype The subtype string to set.
2082 Sets the name property in the dictionary. @param name The name to be set.
2083 Sets the URL type in the certificate dictionary. @param urlType The type of URL associated with the certificate.
2084 Initializes the document outline with the correct type.
2085 Constructs a PDDocumentOutline from a COSDictionary. @param dic The COSDictionary containing outline data.
2086 Constructs a new, empty PDMeasureDictionary. Initializes the dictionary type to TYPE.
2087 Sets the subtype of the measurement dictionary. @param subtype The subtype string to set.
2088 Constructs a new, empty `PDNumberFormatDictionary`. Initializes the dictionary with the TYPE key.
2089 Sets the name of the viewport. @param name The new name for the viewport.
2090 Constructs a PDTransition with the specified transition style. @param style The transition style to apply.
2091 Sets the transition dimension for a specific direction. @param dimension The transition dimension object.
2092 Sets the motion key for the transition. @param motion The PDTransitionMotion object to set.
2093 Sets the non-fullscreen page mode preference. @param value The desired non-fullscreen page mode.
2094 Sets the reading direction preference. @param value The reading direction to set.
2095 Sets the view area preference. @param value The boundary value for the view area.
2096 Sets the view clip preference value. @param value The boundary value to set.
2097 Sets the print area preference. @param value Boundary object containing print area details.
2098 Sets the print clip value in preferences. @param value The boundary value to set for print clip.
2099 Sets the duplex preference. @param value The duplex setting to apply.
2100 Sets the print scaling preference. @param value The print scaling value to set.
2101 Sets a date value for the given key. @param key The key to associate with the date. @param date The Calendar object representing the date.
2102 Sets a key-value pair in the dictionary. @param key The key to set. @param value The value associated with the key.
2103 Sets the document language. @param language The document language code (e.g., "en-US").
2104 Sets the PDF document title. @param title The title to set for the document.
2105 Sets the PDF document author. @param author The author's name to set.
2106 Sets the document subject. @param subject The subject string to set.
2107 Sets the document keywords. @param keywords Keywords to associate with the document.
2108 Sets the PDF creator information. @param creator The creator's name to set.
2109 Sets the PDF producer string in the document information dictionary. @param producer The string representing the PDF producer.
2110 Sets the page label prefix. Null prefix removes it. @param prefix The prefix string, or null to remove.
2111 Sets the user file name. @param file The user file name to set.
2112 Sets the file name for a PDF file system entry. @param file The name of the file.
2113 Sets the file description. @param description The description to set.
2114 Sets the ID attribute of the element. @param id The ID string to set.
2115 Sets the title of the element. @param title The title string to set.
2116 Sets the language attribute of the element. @param language The language code (e.g., "en", "fr")
2117 Sets the alternate description for this element. @param alternateDescription The alternate description string.
2118 Sets the expanded form of the element. @param expandedForm The expanded form string.
2119 Sets the actual text for the element. @param actualText The text to set as the actual text.
2120 Sets the date value for the annotation mask. @param date The date string to set.
2121 Sets the annotation's name. @param name The name of the annotation.
2122 Sets the annotation contents. @param contents The text content of the annotation.
2123 Sets the annotation title. @param title The title string to set.
2124 Sets the annotation subject. @param subject The subject string to set.
2125 Sets the annotation symbol to "P" if symbol is "paragraph", otherwise "None". @param symbol The symbol to check.
2126 Sets the appearance string for the annotation. @param appearance The appearance string to set.
2127 Sets the "DS" appearance style string for the annotation. @param style The appearance style string to set.
2128 Sets the caption style for the annotation. @param captionStyle The style string for the caption.
2129 Sets the annotation's state. @param state The new state value to set.
2130 Sets the state model for the annotation. @param stateModel The state model string to set.
2131 Sets the status of the FDF document. @param status The status string to set.
2132 Sets the target value in the FDF dictionary. @param target The target string to set.
2133 Sets the field's text value to the given partial string. @param partial The string value to set for the field.
2134 Sets the name of the named page reference. @param name The name to associate with the reference.
2135 Sets the name of the content group. @param name The name to associate with the content group.
2136 Initializes a new PDOptionalContentProperties instance. Sets up default OCGs and a 'D' dictionary with a 'Name'.
2137 Sets the JavaScript action string for the action object. @param sAction The JavaScript action string to set.
2138 Sets the file name for the action. @param f The file name to set.
2139 Sets the document name for the action. @param d The document name to set.
2140 Sets the action's Open parameter with the given string value. @param o The string value to set as the Open parameter.
2141 Sets the page number for the action. @param p The page number to set.
2142 Sets the URI action. @param uri The URI string to associate with the action.
2143 Sets the filename for the target directory in the dictionary. @param filename The name of the file.
2144 Sets the 'A' key in the dictionary to the given name. @param name The name to associate with the 'A' key.
2145 Sets the file parameter for launching. @param file The file to be launched.
2146 Sets the directory parameter for launching. @param dir The directory path to set.
2147 Sets the 'D' parameter in the params dictionary with the given operation string.
2148 Sets the 'P' parameter in the params dictionary. @param param The value to set for the 'P' parameter.
2149 Sets the annotation content. @param value The string content of the annotation.
2150 Sets the annotation's mask value. @param m The mask value to set.
2151 Sets the annotation's name. @param nm The name to set for the annotation.
2152 Sets the DA (appearance) value for the annotation. @param daValue The appearance string to set.
2153 Sets the default style string for the annotation. @param defaultStyleString The default style string to set.
2154 Sets the annotation title. @param t The title string to set.
2155 Sets the subject of the annotation. @param subj The subject string to set.
2156 Sets the annotation state. @param state The annotation's state string.
2157 Sets the state model for the annotation. @param stateModel The state model string to set.
2158 Sets the CA (Caption) appearance dictionary entry. @param caption The caption string to set.
2159 Sets the radio chip caption. @param caption The text displayed on the radio chip.
2160 Sets the AC (Appearance Caption) property of the appearance mask. @param caption The appearance caption string to set.
2161 Sets the date property in the dictionary. @param date The date string to set.
2162 Sets the URL associated with the certificate. @param url The URL to set.
2163 Sets the URL within the dictionary. @param url The URL to be associated with the 'URL' key.
2164 Sets the signature name in the dictionary. @param name The name of the signature.
2165 Sets the signature location. @param location The location string to set.
2166 Sets the reason for the signature. @param reason The reason string to set.
2167 Sets the contact information within the signature dictionary. @param contactInfo The contact information to set.
2168 Sets the title of the outline item. @param title The title string to set.
2169 Sets the 'DA' value in the dictionary to the provided string. @param daValue The string value for the 'DA' field.
2170 Sets the DV (Data Value) property of the choice field. @param value The data value to set for the choice field.
2171 Validates field name; throws exception if invalid. @param name The name of the field to validate.
2172 Sets the alternate field name on the field's dictionary. @param alternateFieldName The alternate field name to set.
2173 Sets the text mapping name in the dictionary. @param mappingName The name of the text mapping.
2174 Sets the value of the field to the given string. @param value The string value to set.
2175 Sets the field's value. @param value The new value for the text field.
2176 Sets the default value for the text field. @param value The default string value to set.
2177 Sets the default appearance value (DA) for this variable text. @param daValue The new default appearance string.
2178 Sets the scale ratio in the COSDictionary. @param scaleRatio The scale ratio string value.
2179 Sets an integer value for a given key in the dictionary. @param key The key to associate with the integer value. @param value The integer value to set.
2180 Sets the number of structural parents for the page. @param structParents The number of structural parents.
2181 Sets the page rotation angle. @param rotation Rotation angle in degrees.
2182 Sets the page numbering start value. @param start The starting page number (must be positive).
2183 Sets the bits per sample value in the function's dictionary. @param bps Bits per sample value.
2184 Sets the MCID (Marker Context Identifier) for this reference. @param mcid The MCID to set.
2185 Sets the revision number for this element. @param revisionNumber The revision number to set.
2186 Sets the parent tree next key in the COSDictionary. @param parentTreeNextkey The key of the parent tree.
2187 Sets the length of the cryptographic filter dictionary. @param length The length value to set.
2188 Sets the PDF version in the document dictionary. @param version The PDF version to set.
2189 Sets the length of the dictionary entry. @param length The length value to set.
2190 Sets the PDF revision number in the document dictionary. @param revision The revision number to set.
2191 Sets PDF permissions for the document. @param permissions Integer representing access permissions.
2192 Sets the page number for the annotation. @param page The page number to associate with the annotation.
2193 Sets the text justification of the annotation. @param justification The justification string ("centered", "right")
2194 Sets the rotation angle of the annotation. @param rotation Rotation angle in degrees.
2195 Sets the field flags value. @param ff The field flags value to set.
2196 Sets the field flags for the field. @param ff The field flags to set.
2197 Sets the color field flag value for the field. @param ff The color field flag value to set.
2198 Sets the flags value for the field. @param f The flags value to set.
2199 Sets the field flags for the field. @param ff The field flags to set.
2200 Sets the color flags for the field. @param ff The color flags value to set.
2201 Sets the font flags and stores them in the dictionary. @param flags Integer representing the font flags.
2202 Populates font dictionary with glyph widths. Populates font dictionary with glyph widths.
2203 Sets the paint type for the pattern dictionary. @param paintType The integer representing the paint type.
2204 Sets the pattern type in the pattern dictionary. @param patternType The type of the pattern.
2205 Sets the paint type for the tiling pattern. @param paintType The integer representing the paint type.
2206 Sets the tiling type for the pattern. @param tilingType The type of tiling pattern to set.
2207 Sets the shading type in the dictionary. @param shadingType The type of shading to apply.
2208 Sets the bits per flag value in the dictionary. @param bitsPerFlag The number of bits used for each flag.
2209 Sets the number of vertices per row in the shading dictionary. @param verticesPerRow Number of vertices in each row.
2210 Sets bits per component in the dictionary. @param bitsPerComponent Number of bits per color component.
2211 Sets bits per coordinate and stores it in the dictionary. @param bitsPerCoordinate The number of bits per coordinate.
2212 Sets the line cap style in the graphics dictionary. @param style The line cap style to set.
2213 Sets the line join style in the graphics dictionary. @param style The line join style to set.
2214 Sets the overprint mode. Null resets to default; otherwise sets the mode. @param overprintMode The overprint mode to set.
2215 Sets the flags value for the action. @param flags The flags value to set.
2216 Sets the action flags within the PDF form. @param flags Integer representing the action flags to set.
2217 Sets the page number in the dictionary. @param pageNumber The page number to set; negative values reset.
2218 Sets the 'A' value in the dictionary based on the index. @param index The index to set; negative values set a default.
2219 Sets the flags value for the annotation's appearance dictionary. @param flags The flags value to set.
2220 Sets the struct parent for the annotation. @param structParent The ID of the parent structure.
2221 Sets the Q value in the dictionary. @param q The value to set for the 'Q' key.
2222 Sets the rotation angle for the annotation mask. @param rotation Rotation angle in degrees.
2223 Sets the 'P' value in the dictionary. @param p The value to set (must be between 0 and 3).
2224 Sets the FileType flag in the dictionary to 1 if true, 0 otherwise. @param flag boolean value to set the FileType flag to
2225 Sets the COUNT attribute in the dictionary to the given openCount.
2226 Sets the value of the 'Q' field in the dictionary. @param q The integer value to set for the 'Q' field.
2227 Sets the field flags in the dictionary. @param flags The flags to set for the field.
2228 Sets the top index of the list box. Null clears the value. @param topIndex The index of the top element (null to clear)
2229 Sets the maximum length for the text field. @param maxLen The maximum number of characters allowed.
2230 Sets the Q attribute of the text field dictionary. @param q The value to set for the Q attribute.
2231 Sets a long value for a given key in the dictionary. @param key The key for the value. @param value The long value to associate with the key.
2232 Sets the revision number in the dictionary. @param revision The revision number to set.
2233 Sets the PDF revision number in the dictionary. @param revision The revision number to set.
2234 Sets a float value for a given key in the dictionary. @param key The key to set the float value for. @param value The float value to be set.
2235 Sets the user unit for the page. @param userUnit The user unit value; must be positive.
2236 Sets the guideline width in the COSDictionary. @param width The width of the guideline.
2237 Sets the annotation's color opacity. @param opacity The opacity value to set (0.0-1.0)
2238 Sets the leader length for the annotation. @param leaderLength The length of the leader line.
2239 Sets the leader extend value for the annotation. @param leaderExtend The extend value for the leader line.
2240 Sets the leader offset for the annotation. @param leaderOffset The offset value to set.
2241 Sets the font weight in the descriptor dictionary. @param fontWeight The weight of the font (e.g., bold).
2242 Sets the italic angle for the font descriptor. @param angle The italic angle in degrees.
2243 Sets the ascent value in the PDF font dictionary. @param ascent The ascent value for the font.
2244 Sets the descent value in the font dictionary. @param descent The descent value for the font.
2245 Sets the leading value in the PDF font descriptor. @param leading The leading value to set.
2246 Sets the cap height of the font and stores it in the dictionary. @param capHeight The cap height value to set.
2247 Sets the x-height of the font descriptor. @param xHeight The x-height value to set.
2248 Sets the stemV value in the PDF font descriptor dictionary. @param stemV The vertical stem thickness value.
2249 Sets the stem height for the font descriptor. @param stemH The stem height value to set.
2250 Sets the average width of the font. @param averageWidth The average character width.
2251 Sets the maximum width for the font descriptor. @param maxWidth The maximum width value to set.
2252 Sets the missing width value in the dictionary. @param missingWidth The missing width value to set.
2253 Sets the X-step value for the tiling pattern. @param xStep The X-step value to set.
2254 Sets the Y-step value for the tiling pattern. @param yStep The vertical step size for the pattern.
2255 Sets the volume of the action. @param volume The volume to set, must be between -1.0 and 1.0.
2256 Sets the leader line length for the annotation. @param leaderLineLength The length of the leader line.
2257 Sets the leader line extension length. @param leaderLineExtensionLength Extension length in PDF units.
2258 Sets the leader line offset length. @param leaderLineOffsetLength Offset length value.
2259 Sets the color alpha value for the annotation. @param ca The color alpha value to set.
2260 Sets border width. If width is an integer, sets as int; otherwise, as float. @param w Border width value.
2261 Sets the minimum required capability value in the dictionary. @param minimumRequiredCapability The minimum capability value.
2262 Sets the CYX value in the COSDictionary. @param cyx The CYX value to set.
2263 Parses a PDF stream from a dictionary. @param dic Dictionary containing stream information. @return COSStream object representing the parsed stream.
2264 Parses a PDF stream, extracting tokens and storing them as objects. Returns a list of parsed objects from the stream.
2265 Parses Type 3 font mask data and returns a PDRectangle. Returns null if parsing fails or data is invalid.
2266 Parses the stream to extract a float value based on operators. @return Extracted float value or throws IOException on error.
2267 Constructs a PDDocument using a memory-only stream cache.
2268 Creates a PDFileSpecification from a COSBase object. @param base COSBase object representing the file specification @return PDFileSpecification object or null if base is null. @throws IOException if base is not a known type.
2269 Constructs a new FDFAnnotationCaret, setting the subtype.
2270 Constructs a new FDFAnnotationCircle. Sets the annotation subtype to SUBTYPE.
2271 Constructs a new FDFAnnotationFileAttachment. Sets the annotation subtype to SUBTYPE.
2272 Constructs a new FDFAnnotationFreeText. Sets the subtype to SUBTYPE.
2273 Constructs a new FDFAnnotationInk. Initializes the annotation subtype to SUBTYPE.
2274 Constructs a new FDFAnnotationLine with subtype set.
2275 Constructs a new FDFAnnotationLink, setting its subtype.
2276 Constructs a new FDFAnnotationPolygon. Sets the annotation subtype to SUBTYPE.
2277 Constructs a new FDFAnnotationPolyline. Sets the subtype to SUBTYPE.
2278 Constructs a new FDFAnnotationSound. Initializes the subtype to SUBTYPE.
2279 Constructs a new FDFAnnotationSquare. Sets the annotation subtype to SUBTYPE.
2280 Initializes the stamp annotation with the subtype.
2281 Constructs a new FDFAnnotationText. Sets the annotation subtype to SUBTYPE.
2282 Default constructor for FDFAnnotationTextMarkup.
2283 Embeds CID font data, generating height and width arrays. @param cidToGid Mapping of CID to glyph ID.
2284 Populates the CID font's W2 entry with glyph metrics. @param cidFont The CID font dictionary to update.
2285 Constructs a new PDSimpleFont object.
2286 Sets the decode values for the shading type. @param decodeValues Array of decode values.
2287 Sets the decode values for the shading. @param decodeValues Array of decode values.
2288 Sets the line width graphics state property. @param width The line width value, or null to remove.
2289 Sets the miter limit for graphics state. @param miterLimit The miter limit value.
2290 Sets the line flatness property in the graphics state. @param flatness The flatness value for line rendering.
2291 Sets the line smoothness value. @param smoothness The line smoothness value to set.
2292 Sets the CA (color adjustment) property with the given alpha value. @param alpha The alpha value for color adjustment.
2293 Sets the alpha constant for the color adjustment. @param alpha The alpha value to set, or null to remove.
2294 Constructs a PDAnnotationLink. Sets the subtype to SUB_TYPE.
2295 Constructs a new PDAnnotationMarkup object.
2296 Constructs a PDAnnotationPopup. Sets the annotation subtype to SUB_TYPE.
2297 Constructs a new PDAnnotationWidget. Sets the annotation subtype to SUB_TYPE.
2298 Sets annotation margins using provided difference. @param difference Margin difference to apply to all sides.
2299 Sets rectangle difference margins using a single value. @param difference Common margin value for all sides.
2300 Sets rectangle difference margins uniformly. @param difference Uniform margin difference value.
2301 Constructs a PDCheckBox associated with the given AcroForm. @param acroForm The parent AcroForm instance.
2302 Constructs a PDComboBox, initializing it with the provided AcroForm. @param acroForm The parent AcroForm instance.
2303 Constructs a PDListBox object, initializing its parent. @param acroForm The parent AcroForm instance.
2304 Creates a `PDRectangle` from a `COSArray`. @param array Array containing rectangle values.
2305 Creates a PDLineDashPattern from a COSArray and phase. @param array Array defining the dash pattern. @param phase Initial phase value for the dash pattern.
2306 Returns a string representation of the PDRange. Uses min/max values (m1, m2) to format the range.
2307 Evaluates a Function Type 4, applying range clipping. @param input Input values to the function. @return Array of processed float values.
2308 Initializes range array with default values and sets endpoints. @param range The range object. @param n The number of elements.
2309 Creates a patch from input data, applying transformations. @param input Input stream for reading patch data.
2310 Reads and processes triangle shading data from input stream. @param input Input stream for reading data.
2311 Retrieves the first PDGamma object (at index 0).
2312 Retrieves the PDGamma object at index 1.
2313 Retrieves the PDGamma object at index 2.
2314 Retrieves the PDGamma object at index 3.
2315 Retrieves the blend mode from the dictionary. @return BlendMode object or NORMAL if not found.
2316 Creates a destination using COSName.D from the document. @return PDDestination object representing the destination.
2317 Creates a destination object from the document's D entry. @return PDDestination object, or null if not found.
2318 Creates a destination object from the DEST COS name. @return PDDestination object or null if not found.
2319 Creates a destination from the DEST attribute. Uses COSName.DEST to retrieve and create a destination.
2320 Creates a Matrix from a COSArray, validating its structure. Returns an empty Matrix if validation fails.
2321 Retrieves a COSBase object by traversing a path of keys/indices. @param objPath Path to the desired object. @return The COSBase object at the specified path.
2322 Retrieves a PDDestination by name. @param name The name of the destination. @return PDDestination object or null if not found.
2323 Retrieves a value by key from the dictionary. @param attrName Attribute name to retrieve. @return COSBase value or null if not found.
2324 Retrieves attribute value, returns default if null. @param attrName Attribute name to retrieve. @param defaultValue Value to return if attribute is missing.
2325 Checks if a dictionary key exists. @param name The key to check for existence. @return True if the key exists, false otherwise.
2326 Extracts string array from COS array value by name. @param name Key to retrieve the COS array from. @return String array or null if not a COSArray.
2327 Updates a dictionary entry with a COSArray of strings. @param name Key of the dictionary entry. @param values Array of string values to set.
2328 Retrieves an array of names or a single name, or default. @param name Attribute name. @param defaultValue Default value if not found.
2329 Updates a dictionary entry with a new COSArray of values. @param name The key of the dictionary entry. @param values Values to be added to the COSArray.
2330 Retrieves attribute value; returns default if not a number/name. @param name Attribute name. @param defaultValue Default value if not found/invalid.
2331 Retrieves attribute value as float array or number. @param name Attribute name. @return float[] or number, null if default is UNSPECIFIED.
2332 Creates a COSArray from float values and updates dictionary. @param name Key for the array in the dictionary. @param values Float values to store in the array.
2333 Retrieves a PDGamma object by name from the dictionary. @param name The name of the PDGamma to retrieve. @return PDGamma object or null if not found.
2334 Retrieves a mask value (PDGamma or PDFourColours) by name. @param name The name of the mask to retrieve.
2335 Retrieves a COSDictionary by key, or null if not found. @param firstKey Primary key to search. @param secondKey Fallback key if first is not found.
2336 Retrieves a boolean value from the dictionary. @param firstKey Primary key to retrieve. @param secondKey Fallback key if first is null. @param defaultValue Default value if not found.
2337 Gets an integer value from the dictionary, defaults if not found. @param firstKey Primary key. @param secondKey Fallback key. @param defaultValue Default integer value.
2338 Retrieves image filters from parameters, returning a list of names. Returns an empty list if no filters are found.
2339 Returns the color space. Creates if it doesn't exist.
2340 Checks if dictionary is a catalog or contains FDF. @param dictionary The COSDictionary to check. @return True if catalog or contains FDF, false otherwise.
2341 Constructs a PDPageTree from a COSDictionary, handling edge cases. @param root The root COSDictionary of the page tree. @param document The parent PDDocument.
2342 Checks if a node represents a pages tree. @param node The COSDictionary node to check.
2343 Gets the function mask from the crypt filter dictionary.
2344 Returns the STM_F value, defaulting to IDENTITY if null.
2345 Returns the value of the /FuncMask entry, or IDENTITY if null.
2346 Converts a character code to its Unicode representation. @param code The character code to convert. @return Unicode string or null if conversion fails.
2347 Creates a PDXObject based on the provided COSBase and resources. @param base COSBase object representing the XObject @param resources PDResources object for resource management @return PDXObject instance or null if base is null
2348 Gets the soft mask subtype. Initializes if null. @return COSName representing the mask subtype.
2349 Retrieves the function mask COSName from the dictionary.
2350 Retrieves the function mask COS name. @return COSName representing the function mask.
2351 Adds/removes a key-value pair to a COSDictionary. @param embedded The embedded object. @param key The key of the item. @param value The value to associate with the key.
2352 Adds an integer value to an embedded dictionary. @param embeddedDictionary Dictionary to update. @param key Key for the integer value. @param value Integer value to set.
2353 Checks if the document is encrypted. Returns true if encryption exists, false otherwise.
2354 Retrieves the encryption dictionary from the document trailer.
2355 Parses the FDF trailer to retrieve the root object. Throws IOException if root object is missing.
2356 Parses PDF trailer, root object, and sets type if needed. Throws IOException if root object is missing.
2357 Returns the document information, creating it if it's null.
2358 Returns the document catalog, creating it if it doesn't exist.
2359 Returns the cached PDAcroForm, applying fixes if necessary. @param acroFormFixup Fixup object to apply, or null. @return The cached PDAcroForm.
2360 Retrieves viewer preferences from the document's catalog. @return PDViewerPreferences object or null if not present.
2361 Creates and returns {@code PDDocumentCatalogAdditionalActions}. Creates a new COSDictionary if one doesn't exist.
2362 Creates a {@code PDDocumentNameDictionary} from the names dictionary. @return {@code PDDocumentNameDictionary} or null if names is null.
2363 Gets the document's name destinations dictionary. @return PDDocumentNameDestinationDictionary or null.
2364 Retrieves the PDMarkInfo object from the document's root. @return PDMarkInfo object or null if not found.
2365 Retrieves the URI dictionary from the document root. @return PDURIDictionary object or null if not found.
2366 Retrieves the structure tree root from the document catalog. @return PDStructureTreeRoot object or null if not found.
2367 Retrieves optional content properties dictionary. @return PDOptionalContentProperties or null if not found.
2368 Constructs a `PDDocumentNameDictionary` from a `PDDocumentCatalog`. Retrieves or creates the names dictionary from the catalog.
2369 Retrieves the destination name tree node. Returns null if no destination names are found.
2370 Retrieves the embedded files name tree node. @return PDEmbeddedFilesNameTreeNode or null if not found.
2371 Retrieves the JavaScript name tree node from the dictionary. @return PDJavascriptNameTreeNode or null if not found.
2372 Creates and returns {@code PDPageAdditionalActions} for the page. Creates a new dictionary if one doesn't exist.
2373 Creates a PDTransition object from the page's transition dictionary. @return PDTransition object or null if transition is absent.
2374 Retrieves a COSObject from resource dictionary by kind and name. @param kind Resource kind (e.g., Font, Image). @param name Resource name. @return COSObject or null if not found.
2375 Retrieves a resource value from the resources dictionary. @param kind resource kind (e.g., Font, Image) @param name resource name @return Resource value or null if not found.
2376 Returns names of resources of a kind. @param kind the resource kind (e.g., Images, Fonts) @return Iterable of COSNames or empty set if not found.
2377 Generates a unique COSName for a resource kind. @param kind The resource kind. @param prefix Prefix for the generated name.
2378 Adds a resource to the specified dictionary. @param kind resource kind (e.g., Font, Image) @param name resource name @param object the resource object
2379 Creates a PDPage from the PG dictionary. @return PDPage object or null if PG dictionary is missing.
2380 Retrieves the associated PDF page, or null if not found. @return PDPage object representing the page, or null.
2381 Creates a PDPage from the PG dictionary. @return PDPage object or null if PG dictionary is missing.
2382 Retrieves the ID tree node or null if not found. Creates a PDStructureElementNameTreeNode from it.
2383 Returns the parent tree as a PDNumberTreeNode, or null.
2384 Extracts class map from COSDictionary, returning a Map. Returns an empty map if no class map dictionary exists.
2385 Retrieves a PDCryptFilterDictionary by crypt filter name. @param cryptFilterName The name of the crypt filter. @return A PDCryptFilterDictionary or null if not found.
2386 Sets the crypt filter dictionary for the PDF document. @param cryptFilterName filter name @param cryptFilterDictionary filter settings
2387 Gets the border style dictionary for the annotation. @return PDBorderStyleDictionary or null if not present.
2388 Creates a PDBorderEffectDictionary from the annotation's BE dictionary. @return PDBorderEffectDictionary or null if BE is not found.
2389 Retrieves the signature dictionary from the catalog. @return PDSignature object or null if signature is absent.
2390 Retrieves and constructs FDFJavaScript object from FDF dictionary. @return FDFJavaScript object or null if JavaScript not found.
2391 Retrieves the appearance dictionary for the field. @return PDAppearanceDictionary or null if not found.
2392 Gets the appearance reference from the field. @return FDFNamedPageReference or null if not found.
2393 Creates an FDFIconFit from the icon dictionary, or null. @return FDFIconFit object or null if icon dictionary is null
2394 Retrieves and constructs PDAdditionalActions from field AA dictionary. @return PDAdditionalActions object or null if not found.
2395 Retrieves page info dictionary. @return FDFPageInfo object or null if not found.
2396 Retrieves a `FDFNamedPageReference` from the template. @return A `FDFNamedPageReference` or null if not found.
2397 Retrieves CID system info from dictionary, or null if absent. @return PDCIDSystemInfo object or null if not found.
2398 Retrieves the Panose font descriptor from the font dictionary. Returns null if no descriptor is found or invalid.
2399 Returns the font's resources, creating them if necessary. @return PDResources object containing font resources.
2400 Retrieves the character procedures dictionary. Lazily initializes if not already present. @return COSDictionary containing character procedures
2401 Extracts separation color spaces from colorants. @param resources PDResources for color space management @return Map of separation color spaces.
2402 Creates a PDDeviceNProcess from the process dictionary. @return PDDeviceNProcess object or null if not found.
2403 Retrieves the RenderState based on the destination. @param destination RenderDestination (PRINT/VIEW) @return RenderState object or null if not found
2404 Returns the extended graphics state, creating it if needed. @return PDExtendedGraphicsState object or null if not found.
2405 Retrieves the resources dictionary for the mask. @return PDResources object or null if not found.
2406 Creates a PDTargetDirectory from a COSDictionary, or null.
2407 Creates PDWindowsLaunchParams from action's WIN dictionary. Returns null if the dictionary is not found.
2408 Creates a PDTargetDirectory from the target dictionary. @return PDTargetDirectory object or null if not found.
2409 Retrieves the appearance dictionary, or null if not present. @return PDAppearanceDictionary or null if AP dictionary is missing
2410 Creates a PDPage from the page dictionary associated with key 'P'. @return PDPage object or null if dictionary is not found.
2411 Creates a PDBorderEffectDictionary from the BE dictionary. @return PDBorderEffectDictionary or null if BE is not found.
2412 Creates a PDBorderStyleDictionary from the document's border style. @return PDBorderStyleDictionary or null if not found.
2413 Creates a PDActionURI from the previous URI dictionary. Returns null if no previous URI is found.
2414 Creates a {@code PDExternalDataDictionary} from external data. @return External data dictionary or null if not found.
2415 Creates a PDBorderStyleDictionary from the /BS dictionary. @return PDBorderStyleDictionary or null if /BS is missing.
2416 Creates a PDBorderEffectDictionary from the annotation's BE dictionary. @return PDBorderEffectDictionary or null if BE is not found.
2417 Creates a PDBorderEffectDictionary from BE COSDictionary. @return PDBorderEffectDictionary or null if not found.
2418 Creates an AppearanceCharacteristicsDictionary from the MK dictionary. @return PDAppearanceCharacteristicsDictionary or null if MK is missing.
2419 Creates PDAnnotationAdditionalActions from annotation actions. @return Actions object or null if no actions are present.
2420 Creates a PDBorderStyleDictionary from the /BS dictionary. @return PDBorderStyleDictionary or null if /BS is missing.
2421 Retrieves the normal appearance entry. @return PDAppearanceEntry object or null if not found.
2422 Retrieves the filter dictionary, or null if not present. @return PDPropBuildDataDict representing the filter.
2423 Retrieves the publication security dictionary. Returns null if no publication security dictionary exists.
2424 Retrieves the application data dictionary, or null if not found. @return PDPropBuildDataDict object or null.
2425 Creates a PDSeedValueMDP from the MDP dictionary, or null. @return PDSeedValueMDP object or null if MDP dictionary is missing
2426 Creates a PDSeedValueCertificate from the certificate dictionary. @return PDSeedValueCertificate or null if certificate is missing.
2427 Creates a PDSeedValueTimeStamp from the timestamp dictionary. @return PDSeedValueTimeStamp object or null if not found.
2428 Retrieves the PDPropBuild instance from the dictionary. @return PDPropBuild object or null if not found.
2429 Creates a `PDStructureElement` from a COSDictionary. @return `PDStructureElement` or null if dictionary is missing.
2430 Checks if the first child outline item exists. Uses m1() to get a dictionary and checks for a child.
2431 Gets the resources dictionary, or null if not present. @return PDResources object or null if DR not found.
2432 Retrieves additional actions for the form field. @return PDFormFieldAdditionalActions object or null.
2433 Creates a PDSignature object from the signature value. @return PDSignature object or null if no signature value exists.
2434 Creates a PDSignature from the document's DV dictionary. Returns null if DV is not found.
2435 Creates a PDSeedValue from the signature dictionary. @return PDSeedValue object or null if signature data is missing.
2436 Creates a PDMeasureDictionary from the MEASURE dictionary. @return PDMeasureDictionary object or null if not found.
2437 Retrieves document information from the thread. @return PDDocumentInformation object or null if not found.
2438 Retrieves a PDThreadBead instance from a COSDictionary. @return PDThreadBead object or null if no bead is found.
2439 Creates a PDThread from the bead's thread dictionary. @return A PDThread object or null if the dictionary is missing.
2440 Creates a PDThreadBead from the bead's dictionary. @return A new PDThreadBead object.
2441 Creates a PDThreadBead from the bead's 'V' dictionary. @return A new PDThreadBead instance.
2442 Creates a PDPage from the bead's page dictionary. @return PDPage object or null if dictionary is missing.
2443 Retrieves PDF metadata. Returns PDMetadata object or null.
2444 Creates a PDMetadata object from the page's metadata stream. @return PDMetadata object or null if no metadata exists.
2445 Retrieves the differences stream from the FDF document.
2446 Retrieves the font file stream from the dictionary. @return PDStream object or null if not found.
2447 Retrieves the font file stream from the dictionary. @return PDStream object or null if not found.
2448 Retrieves the font file stream from the dictionary. @return PDStream object or null if not found.
2449 Creates a PDStream from the CID set COSStream, or null.
2450 Retrieves the sound stream associated with the action.
2451 Creates a PDFormXObject from the appearance mask stream. @return PDFormXObject or null if no mask stream exists.
2452 Creates a PDFormXObject from the appearance mask stream. @return PDFormXObject or null if mask stream is not found.
2453 Creates a PDFormXObject from the appearance mask stream. @return PDFormXObject or null if no mask stream exists.
2454 Extracts appearance streams from a COSDictionary. Returns a map of COSName to PDAppearanceStream.
2455 Retrieves the ID array from the document's trailer dictionary.
2456 Writes trailer data to document, updates size and checksum. @param doc The COSDocument to write.
2457 Retrieves a list of PDF threads from the document's catalog. Creates a new array if threads are not already present.
2458 Retrieves a list of PDOutputIntent objects from the document. Extracts intent data from the OUTPUT_INTENTS array.
2459 Adds an output intent to the document's output intents array. @param outputIntent The output intent to add.
2460 Extracts PDThreadBeads from the page's thread beads array. Returns an empty list if no thread beads are present.
2461 Retrieves a list of PDViewportDictionary objects from the page. Returns null if no viewports are found.
2462 Extracts a list of COSDictionaries from a node's kids array. Handles null or unexpected base types, replacing with empty pages.
2463 Retrieves child nodes from the KIDS array. @return List of PDNameTreeNodes or null if no KIDS array.
2464 Extracts names and values from a names array. Returns a map or null if no names array exists.
2465 Gets the limits array from the node, returns string at index 1.
2466 Sets the upper limit for a PDF name tree node. @param upper The upper limit string to set.
2467 Gets the first limit value from the LIMITS array. Returns null if the array is missing or empty.
2468 Sets the lower limit for a PDF name tree node. @param lower The lower limit value as a String.
2469 Retrieves child nodes from a COS array; returns null if empty.
2470 Extracts and maps COS objects from a numbers array. @return Map of COSInteger keys to COSObjectable values, or null.
2471 Gets the numeric limit from the node's LIMITS array. Returns null if the array or value is not found.
2472 Sets the upper limit in the node's LIMITS array. @param upper The upper limit value, or null to remove.
2473 Gets the first limit from the LIMITS array, or null if empty.
2474 Sets the lower limit in the LIMITS array; null removes it. @param lower The lower limit value, or null to remove.
2475 Returns the function's range COSArray. Initializes if null.
2476 Retrieves the function's domain COSArray. Creates if null.
2477 Returns the size of the function's mask array. Lazily initializes size if it's null.
2478 Returns the decode array, fetching/creating if needed.
2479 Returns the functions array; initializes if null. @return COSArray containing function data.
2480 Returns the bounds array for the function; initializes if null.
2481 Retrieves the encode array for the function. Lazily initializes if null. @return COSArray containing the encode data.
2482 Retrieves a list of user properties from a COSArray. @return List of PDUserProperty objects.
2483 Adds a user property to the property array. @param userProperty The PDUserProperty to add.
2484 Removes user property if it exists in the property array. @param userProperty The user property to remove.
2485 Retrieves the color value for the guideline mask. Creates a default black color if none is specified. @return PDColor representing the guideline mask color.
2486 Checks if the edge is attached based on COSArray. @param edge the edge to check @return true if edge is attached, false otherwise
2487 Retrieves the annotation's color from the COS array. @return Color object or null if color data is unavailable.
2488 Retrieves the annotation's fill color from the IC array. Returns null if the array or RGB values are invalid.
2489 Retrieves the appearance array from the annotation. Returns null if the array is missing.
2490 Extracts ink data from the annotation. Returns a list of float arrays or null if no inklist exists.
2491 Gets the line coordinates from the annotation. @return Float array of coordinates or null if not found.
2492 Sets the line style. @param style The desired line style, or null for none.
2493 Gets the line ending style from the annotation. Returns LE_NONE if the style is not found.
2494 Sets the line style. @param style The style string, or null for default.
2495 Gets the line ending style from the annotation. Returns LE_NONE if the style is not found.
2496 Retrieves the line color from the annotation's IC array. Returns null if no color is found.
2497 Sets the end offset of the line annotation. @param offset The end offset value.
2498 Gets the first float value from the 'CO' COSArray, or 0.f.
2499 Sets the line caption offset. @param offset The offset of the line caption.
2500 Gets the y2 coordinate from the annotation's COS array. Returns 0.f if the array is null.
2501 Retrieves the vertices of the polygon annotation as a float array. Returns null if no vertices are defined.
2502 Retrieves the color of the annotation's mask. @return Color object representing the mask color, or null.
2503 Retrieves the vertices of the polyline annotation. Returns null if no vertices are defined.
2504 Sets the line end style. @param style The line end style, or null for PDAnnotationLine.LE_NONE.
2505 Gets the line end style from the annotation; returns default if null.
2506 Sets the line style for the annotation. @param style The line style; null uses default.
2507 Gets the line end style from the annotation. @return COSName representing line end style, or LE_NONE.
2508 Retrieves the polyline's interior color from the annotation. @return Color object or null if not found/invalid.
2509 Retrieves the interior color of the annotation. Returns null if no color is defined.
2510 Retrieves quad points as float array from annotation. @return Float array of quad points or null if not found.
2511 Retrieves the ID COSArray from the FDF document.
2512 Retrieves a list of FDF fields from the document. Returns null if no fields are found.
2513 Extracts FDF pages from the FDF document. @return List of FDFPage objects or null if no pages.
2514 Retrieves a list of FDFFields from the field's KIDS array. Returns null if the KIDS array is null.
2515 Extracts masked values from a field's options array. Returns null if the array is missing.
2516 Retrieves FDF templates from the page's templates array. @return List of FDFTemplate objects or null if no templates.
2517 Retrieves FDF fields from the template's FIELDS array. @return List of FDFField objects or null if no FIELDS array.
2518 Retrieves font widths from the dictionary. Returns an empty list if widths are not found.
2519 Returns the white point as a PDTristimulus object. Creates a default white point if none is found.
2520 Gets the black point of the color space. Returns a PDTristimulus object representing it.
2521 Returns a PDGamma object, creating one if GAMMA is missing. Creates a default gamma array if one doesn't exist.
2522 Retrieves the color transformation matrix. Returns default matrix if none is defined.
2523 Extracts color space component names from the dictionary. @return List of component names or an empty list if null.
2524 Retrieves the function mask range from the dictionary. Returns a new PDRange object representing the mask.
2525 Creates a PDRange object from the RANGE dictionary entry. Returns a default range if RANGE is not found.
2526 Returns the background COSArray, creating it if null.
2527 Retrieves the shading domain COSArray. @return COSArray representing the shading domain, or null.
2528 Returns the extend array, initializing it if null. @return COSArray representing the extend values.
2529 Returns the shading domain COSArray. Creates if null.
2530 Retrieves the coordinates array for the shading function. Creates it if null.
2531 Returns the decode array, fetching it if null. @return COSArray containing decode values.
2532 Creates a PDFontSetting from the font COSArray, or null.
2533 Retrieves the fields mask array from the action. @return COSArray representing the fields mask, or null.
2534 Retrieves the fields action mask. @return COSArray representing the fields action mask.
2535 Gets or creates the border array for the annotation. Returns a COSArray representing the border.
2536 Retrieves annotation margins from COS array; returns empty array if null.
2537 Retrieves margins from RD COSArray, or returns an empty array.
2538 Retrieves callout coordinates as a float array, or null.
2539 Extracts ink lists from the annotation. @return 2D float array of ink lists or empty array if null.
2540 Retrieves the line coordinates from the annotation. Returns null if the line array is not found.
2541 Sets the line style. If null, sets to LE_NONE. @param style The line style to set, or null for LE_NONE.
2542 Retrieves the first line end style from the LE array. Returns LE_NONE if the array is null or too short.
2543 Sets the line style. Uses LE_NONE if style is null. @param style The line style to set, or null for LE_NONE.
2544 Retrieves the line end style from the LE array. Returns LE_NONE if the array is invalid or empty.
2545 Sets the line width offset. Creates array if null. @param offset The offset value for the line width.
2546 Retrieves the first float value from the CO array, or 0.f.
2547 Sets the vertical offset of the annotation line. @param offset The vertical offset value.
2548 Retrieves the y-coordinate from the annotation's CO array. Returns 0.f if the array is null or empty.
2549 Retrieves quadpoints from COSArray; returns null if absent.
2550 Retrieves the polygon vertices as a float array. Returns null if vertices are not present in the annotation.
2551 Extracts polygon path data from the annotation. @return 2D float array of paths or null if no path exists.
2552 Sets the line style based on the provided style string. @param style The line style to apply, or null for default.
2553 Gets line end style from COS array, or default if missing.
2554 Sets the line style array. Uses default if style is null. @param style The line style, or null for default.
2555 Gets the line end style from COS array. Returns LE_NONE if array is null or too short.
2556 Retrieves the vertices of the polyline as a float array. Returns null if vertices are not present.
2557 Retrieves the annotation margin as a float array. Returns an empty array if margin is null.
2558 Retrieves quad points as a float array, or null if absent.
2559 Sets the OS property in the dictionary. Null OS clears it. @param os The operating system name, or null to clear.
2560 Gets sub filter names from dictionary or returns empty list.
2561 Retrieves digest method names from the dictionary. Returns an empty list if no digest method is found.
2562 Retrieves the reasons array from the dictionary. Returns an empty list if the array is null.
2563 Gets legal attestations from the dictionary. Returns an empty list if no legal attestations exist.
2564 Extracts byte arrays from the subject COSArray. Returns null if the subject array is not found.
2565 Sets the Subject field of the certificate dictionary. @param subject The subject as a byte array.
2566 Adds the subject to the certificate's COSArray. @param subject The subject byte array to add.
2567 Retrieves key usage extensions from the dictionary. Returns null if the key usage array is not found.
2568 Validates and sets the key usage extension in the dictionary. @param keyUsageExtension The key usage extension string.
2569 Adds a key usage extension to the dictionary. @param keyUsageExtension The key usage extension string.
2570 Retrieves issuer byte arrays from the dictionary. @return List of byte arrays or null if no issuer array.
2571 Sets the issuer for the certificate, creating the array if needed. @param issuer The issuer's byte array.
2572 Adds the issuer to the issuer array in the dictionary. @param issuer The issuer's byte array.
2573 Extracts OID byte arrays from the dictionary. @return List of byte arrays or null if OID is not present.
2574 Adds an OID to the certificate dictionary's OID array. @param oid The OID value to add as a byte array.
2575 Adds an OID to the OID array in the dictionary. @param oid The OID to add as a byte array.
2576 Extracts byte range values from the dictionary. @return An array of integers representing the byte range.
2577 Creates a PDColor object, defaulting to RGB if no color exists. @return A PDColor object representing the color.
2578 Retrieves a list of PDF form fields based on the FUNC_MASK. @return List of PDField objects matching the FUNC_MASK.
2579 Retrieves a list of integers from the choice field value. Returns an empty list if the value is null.
2580 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return Array of dictionaries or null if array is not found.
2581 Retrieves PDNumberFormatDictionary array from Y array. Returns null if Y array is not found.
2582 Retrieves number format dictionaries from COSArray. @return Array of PDNumberFormatDictionary or null if empty.
2583 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return array of PDNumberFormatDictionary or null if array is missing
2584 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return Array of dictionaries or null if array is not found.
2585 Retrieves an array of PDNumberFormatDictionary objects from COSArray. @return Array of dictionaries or null if array is not found.
2586 Retrieves origin coordinates as a float array. Returns null if origin is not present.
2587 Retrieves the function mask COS name from the dictionary.
2588 Retrieves a string value associated with the given key. @param key The key to look up in the dictionary. @return String value or null if not found.
2589 Gets value for key, using default if null. @param key The key to look up. @param defaultValue Value if key not found.
2590 Checks if an XRef stream exists at the given offset. @param startXRefOffset Offset to check for XRef stream. @throws IOException if an I/O error occurs.
2591 Retrieves the PageMode from the document's root dictionary. Returns PageMode.USE_NONE if no mode or invalid mode found.
2592 Retrieves the page layout mode. Returns SINGLE_PAGE if invalid. @return PageLayout object representing the document's layout.
2593 Gets the PDF version from the root dictionary.
2594 Gets the trapped status. @return Trapped status string or null if not set.
2595 Gets the page label style name. @return Style name string or null if not found.
2596 Gets the type name of the dictionary. Uses m1() to get the dictionary and then retrieves the type.
2597 Creates a PDAttributeObject based on the owner string in dictionary. @param dictionary The COSDictionary containing attribute data.
2598 Retrieves the object's name as a string. Uses m1() to get an object and then calls m2.
2599 Retrieves a string value using a COSName key.
2600 Creates a PDStructureNode based on the dictionary type. @param node COSDictionary representing the structure node @return PDStructureNode instance based on node type
2601 Gets the FUNC_MASK string value from the dictionary.
2602 Retrieves the name as a string using the COSName key.
2603 Gets the language of the mask. Returns null if mask is null.
2604 Gets the type as a string from the content artifact. @return String representing the content type, or null.
2605 Gets the subtype as a string from the dictionary.
2606 Gets the filter name from the dictionary.
2607 Gets the sub filter name from the dictionary.
2608 Creates an FDFAnnotation based on the subtype in a COSDictionary. @param fdfDic The COSDictionary representing the annotation.
2609 Returns the interactive form mask name. Uses m1 to retrieve the name associated with COSName.IT.
2610 Gets the left edge of the annotation. @return String representing the left edge value.
2611 Retrieves the FDF version string from the catalog.
2612 Gets the FDF encoding, defaulting to "PDFDocEncoding" if null.
2613 Gets the scaling option for the icon, defaulting to SCALE_OPTION_ALWAYS. @return Scaling option string.
2614 Retrieves the scaling type, defaulting to proportional if null. @return String representing the scaling type.
2615 Gets the base font name from the font dictionary.
2616 Retrieves the font type from the dictionary.
2617 Gets the font subtype from the dictionary.
2618 Gets the font name from the dictionary.
2619 Gets the font stretch value from the dictionary.
2620 Gets the base font name from the dictionary.
2621 Gets the base font name from the font dictionary.
2622 Gets the base font name from the font dictionary. @return Base font name as a String, or null if not found.
2623 Gets the base font name from the font dictionary.
2624 Checks if the color space subtype is "NChannel". Uses dictionary to retrieve subtype string value.
2625 Gets the action type. @return Action type string or null if not found.
2626 Retrieves the action mask from the action dictionary.
2627 Creates a PDAction based on the action type in a COSDictionary. @param action The COSDictionary representing the action. @return A PDAction object or null if action type is unknown.
2628 Gets the annotation subtype name from the COSDictionary.
2629 Retrieves the color space name for the annotation line. @return String representing the color space name.
2630 Retrieves the "IT" value from m1().m2.
2631 Returns the subtype string from the COSDictionary.
2632 Retrieves the name from the dictionary.
2633 Gets the filter value from the dictionary. @return Filter string or null if not found.
2634 Retrieves the URL type from the dictionary.
2635 Gets the filter value from the dictionary.
2636 Gets the sub filter from the dictionary.
2637 Returns the function mask string using COSName.FT.
2638 Gets the name of the viewport. Uses COSName.NAME to retrieve the name.
2639 Gets the duplex printing preference. @return String value or null if not found.
2640 Retrieves string value by key. @param key The key to retrieve. @return String value or null if not found.
2641 Gets string value for key, returning default if null. @param key the key to retrieve @param defaultValue the default value if key is not found
2642 Retrieves the language code from the PDF document's root. @return Language code string, or null if not found.
2643 Retrieves the PDF document title. Uses `info.m1()` to fetch the title string.
2644 Retrieves the PDF document author. @return Author string or null if not found.
2645 Gets the document subject. @return Subject string or null if not found
2646 Retrieves the document keywords. @return String containing keywords or null if not found.
2647 Gets the PDF creator string. @return Creator string or null if not found.
2648 Gets the PDF producer string from document information. @return Producer string or null if not found.
2649 Retrieves the prefix string from the PDF root dictionary.
2650 Gets the user font name. @return User font name or null if not found.
2651 Returns the file specification mask. Uses `fs.m1(COSName.F)` to retrieve the mask value.
2652 Retrieves the DOS string from the file system.
2653 Retrieves the MAC value associated with the file specification.
2654 Gets the UNIX timestamp string from the file system.
2655 Gets the file description. @return File description string or null if not found.
2656 Retrieves the ID string from the element's attributes.
2657 Gets the title of the element. @return Title string or null if not found.
2658 Gets the language attribute of this element. @return Language string or null if not set.
2659 Gets the alternative text for this element. Uses COSName.ALT to retrieve the text.
2660 Retrieves the element's language code using the COSName.E. @return String language code or null if not found.
2661 Gets the actual text content of this element.
2662 Retrieves the formatted string value associated with key 'F'.
2663 Gets the actual text of the mask. Returns null if mask is null.
2664 Retrieves the alternate mask string, or null if absent.
2665 Gets the mask content. Returns null if mask is missing.
2666 Returns the mask value of the annotation. @return String mask value or null if not found
2667 Retrieves the annotation's mask value. Uses m1 to get the value associated with COSName.NM.
2668 Gets the annotation content string. @return Annotation content string or null.
2669 Gets the annotation's text content. @return Annotation text or null if not found.
2670 Returns the annotation subject. @return Annotation subject string or null.
2671 Returns the annotation symbol string.
2672 Gets the rotation angle of the annotation. @return Rotation angle as a string, or null if not set.
2673 Gets the annotation's content string using key COSName.DA.
2674 Gets the document-specific data string from the annotation. @return Document-specific data string or null.
2675 Gets the color space name of the annotation. @return The color space name or null if not found.
2676 Gets the annotation state. @return Annotation state string or null if not found.
2677 Gets the state model for the annotation. @return State model string or null if not found.
2678 Gets the FDF status. @return FDF status string, or null if not found.
2679 Gets the target value from the FDF document.
2680 Retrieves the value associated with the "T" key.
2681 Retrieves the name associated with the reference. @return String name or null if not found.
2682 Retrieves the font family name from the dictionary.
2683 Gets the character set name from the dictionary.
2684 Retrieves the name of the content group from the dictionary.
2685 Retrieves names of optional content groups. Returns empty array if no OCGs are present.
2686 Retrieves the file name from the action. @return File name or null if not found
2687 Retrieves the display string from the action. @return Display string or null if not found.
2688 Retrieves the open action string from the action object.
2689 Retrieves the action parameter associated with the key 'P'. @return String parameter value or null if not found.
2690 Extracts URI string from action, handling different encodings. Returns null if no URI or invalid encoding is found.
2691 Retrieves the value associated with the named key 'N'.
2692 Retrieves the value associated with the key "A" from the dictionary.
2693 Retrieves the file parameter from the launch parameters.
2694 Retrieves the value associated with the key 'D' from params. @return String value or null if not found.
2695 Retrieves the value associated with the "P" key from params. @return String value or null if not found.
2696 Retrieves the content string from the annotation dictionary.
2697 Retrieves the value associated with the "M" key. @return String value or null if not found.
2698 Retrieves the name associated with the annotation. @return Annotation name or null if not found.
2699 Gets the content string for the annotation. Uses COSName.DA to retrieve the content.
2700 Retrieves the default string value associated with COSName.DS.
2701 Retrieves the title string from the annotation's properties.
2702 Retrieves the annotation subject string from the underlying object.
2703 Gets the annotation state string. @return Annotation state string or null.
2704 Gets the state model string from the annotation. Uses COSName.STATE_MODEL to retrieve the value.
2705 Retrieves the content appearance string from the appearance dictionary.
2706 Retrieves the RC appearance mask string from the dictionary.
2707 Retrieves the AC (Appearance Characteristics) string value.
2708 Gets the date property from the dictionary. @return Date string or null if not found.
2709 Gets the OS name from the dictionary, or defaults if null.
2710 Extracts Subject DN information from COSArray. Returns null if COSArray is not found.
2711 Gets the URL associated with the certificate. @return URL string or null if not found.
2712 Gets the URL from the dictionary. @return URL string or null if not found.
2713 Retrieves the signature name from the signature dictionary.
2714 Gets the signature location from the dictionary.
2715 Gets the reason for the signature. @return String representing the signature reason or null.
2716 Retrieves the contact info from the dictionary. @return Contact information string or null if not found.
2717 Gets the title of this outline item. @return Title string or null if not found.
2718 Gets the field's type. @return String representing the field type or null.
2719 Retrieves the field's trap string from the dictionary.
2720 Returns the text mask value from the dictionary.
2721 Gets the default string value associated with the "DS" key.
2722 Retrieves the 'R' value from the m1 COSDictionary.
2723 Retrieves a Calendar object by key. @param key The key to retrieve the Calendar object for.
2724 Retrieves a Calendar object for the given key, using default if null. @param key COSName key to retrieve @param defaultValue default Calendar object if key is null
2725 Gets the document's creation date. @return Calendar object representing creation date, null if absent.
2726 Gets the modification date of the PDF document. @return Calendar object representing the modification date.
2727 Gets the creation date of the annotation. @return Calendar object representing creation date, null if absent.
2728 Gets the creation date of the annotation. Uses m1() to retrieve the COSName and getDate(). @return Calendar object representing creation date.
2729 Gets the signature modification date. @return Calendar object representing the modification date.
2730 Gets the long value associated with a key, or -1 if absent. @param key The key to retrieve.
2731 Gets the long value associated with a key, or -1L if absent. @param key the key to retrieve
2732 Gets the long value for a key, or defaultValue if absent. @param key The key to retrieve. @param defaultValue Default value if key is not found.
2733 Decodes an input stream using a list of filters. @param encoded Input stream to decode. @param filterList List of filters to apply.
2734 Resolves xref trailer data based on start position. @param startxrefBytePosValue Starting byte position.
2735 Retrieves a float value by key, using -1 as default. @param key The key to retrieve the float value for.
2736 Retrieves a float value by key, using -1 as default. @param key the key to retrieve
2737 Gets a float value by key, using default if not found. @param key the key to retrieve @param defaultValue the default value if key is not found
2738 Returns the user unit value, defaulting to 1.0 if zero. @return The user unit value.
2739 Gets the width of the guideline style. @return Width of the guideline, defaults to 1 if not found.
2740 Gets the color adjustment mask value, using 1f as default.
2741 Gets the font weight from the descriptor dictionary. @return Font weight, defaults to 0 if not found.
2742 Gets the italic angle from the font dictionary, 0 default.
2743 Returns the font ascent value from the descriptor dictionary.
2744 Retrieves the font descent value from the font dictionary.
2745 Retrieves the leading value from the font dictionary. @return The leading value, or 0 if not found.
2746 Returns the cap height. Retrieves from dictionary if needed.
2747 Returns the xHeight value, using default if not present.
2748 Retrieves the stemV value from the dictionary, using 0 as default.
2749 Retrieves the stem height from the font dictionary. @return Stem height, using default 0 if not found.
2750 Retrieves the average font width from the dictionary.
2751 Retrieves the maximum width for this font descriptor. @return The maximum width, or 0 if not found.
2752 Retrieves the font width, defaulting to 0 if missing.
2753 Retrieves the gamma value from the dictionary, defaulting to 1.0f.
2754 Gets the X step size for the tiling pattern. Returns 0 if the key is not found.
2755 Gets the Y step value for the tiling pattern. Retrieves the Y step value from the pattern's data.
2756 Retrieves and clamps the action volume. @return Volume value, clamped between 0 and 1.
2757 Returns the lower left X coordinate of the annotation.
2758 Gets the left line endpoint's Y coordinate. Uses default 0 if not found.
2759 Gets the lower line coordinate. @return float value, default to 0 if not found.
2760 Gets the CA value.
2761 Returns border width, defaulting to 1 if not explicitly set.
2762 Retrieves the default duration for a transition. Uses COSName.D as key, returns 1 if not found.
2763 Gets the shadow stroke opacity. Uses default 1 if not found.
2764 Writes an operator to the content stream. @param op The Operator object to write.
2765 Extracts text from defined regions on a PDF page. @param page The PDF page to extract text from.
2766 Retrieves role map from COSDictionary, or empty map on error.
2767 Sets the FUNC_MASK value using the provided object's m1() value. @param objectable The object whose m1() value is used.
2768 Adds a child node before a reference node. @param newKid The new child node to add. @param refKid Reference node to identify insertion point.
2769 Checks if an object is a FUNC_MASK. @param objectable Object to check. @return True if FUNC_MASK, false otherwise.
2770 Sets the value of a user property. @param value The new value to set for the property.
2771 Retrieves the color space, creating it if necessary.
2772 Creates a PDPropertyList or subclass based on the COSDictionary type. @param dict The COSDictionary to determine the property list type.
2773 Retrieves the line width from the dictionary.
2774 Gets the mask value from the dictionary using COSName.ML.
2775 Retrieves the fill alpha value from the dictionary.
2776 Retrieves the shade mask value from the dictionary.
2777 Retrieves the CA alpha constant from the dictionary.
2778 Retrieves the alpha constant for non-stroked objects. Uses `getFloatItem` to fetch the value.
2779 Constructs a `PDAnnotationLink` from a `COSDictionary`. Passes the dictionary to the superclass constructor.
2780 Constructs a PDAnnotationMarkup from a COSDictionary. Inherits from parent class.
2781 Constructs a PDAnnotationPopup from a COSDictionary. Passes the dictionary to the superclass constructor.
2782 Constructs a PDAnnotationUnknown with a COSDictionary.
2783 Constructs a PDAnnotationWidget from a COSDictionary. Sets the annotation subtype to SUB_TYPE.
2784 Returns the list of options for this choice field.
2785 Retrieves values associated with the "V" choice field.
2786 Retrieves default values for the choice field. Uses getValueFor() to fetch values associated with COSName.DV. @return List of strings representing default values.
2787 Writes a COSBase object to the PDF output stream. @param obj The COSBase object to write.
2788 Writes a COSBase object to the output stream. Handles object dereferencing and type-specific formatting.
2789 Draws a cloud-like shape with Bezier curves based on angles. @param anglePrev,angleCur Angles for shape definition.
2790 Draws a cloud shape within the specified bounds. @param left,bottom,right,top Bounding rectangle coordinates.
2791 Constructs a PDPageFitDestination with initial TYPE entry.
2792 Configures the destination array based on fitBoundingBox. @param fitBoundingBox Whether to fit the bounding box.
2793 Constructs a `PDPageFitHeightDestination` object. Initializes the internal array with type information.
2794 Initializes the array and sets a value based on input. @param x Value to set; -1 sets null, otherwise sets x.
2795 Sets the destination type based on fitBoundingBox. @param fitBoundingBox Whether to fit the bounding box.
2796 Constructs a `PDPageFitRectangleDestination` with initial size.
2797 Initializes an array and sets a value or null at index 2. @param x Integer value; -1 sets null, otherwise value is set.
2798 Initializes array and sets value at index 3 based on y. @param y Integer value; -1 sets null, otherwise sets y.
2799 Initializes an array and sets value at index 4. If x is -1, sets null; otherwise, sets x.
2800 Sets the destination array based on the provided y coordinate. @param y Vertical coordinate; null if default.
2801 Constructs a `PDPageFitWidthDestination` with a fixed size array.
2802 Sets the destination array based on the provided y coordinate. @param y Y coordinate; null if y is -1.
2803 Sets the array based on fitBoundingBox. @param fitBoundingBox Whether to fit the bounding box.
2804 Constructs a PDPageXYZDestination with a pre-sized array.
2805 Sets array elements based on input. If x is -1, sets array[2] to null; otherwise, sets array[2] to x.
2806 Sets the array based on the provided y value. @param y Coordinate value; null if y is -1.
2807 Sets the zoom level in the array. @param zoom The zoom level to set; -1 uses default.
2808 Parses a functional mask from the PDF source. Returns a COSBase object or null if parsing fails.
2809 Gets the bounding box from appearance stream or widget. @param fieldWidget The annotation widget. @param appearanceStream The appearance stream. @return PDRectangle object.
2810 Applies mask to dictionary entries based on type and signature status. @param dictionary Dictionary to mask. @param objNum Object number. @param genNum Generation number.
2811 Sets the mask for the object, notifying listeners of the change. @param bbox The new mask rectangle, or null to clear it.
2812 Sets the gamma value for the specified name, notifies listeners. @param name The name of the gamma value. @param value The new gamma value.
2813 Updates the function mask for a given name. @param name Function mask name. @param value New PDFourColours value.
2814 Constructs a new PDPage with default LETTER size media box.
2815 Retrieves or creates an FDF dictionary for the catalog. Creates a new one if it doesn't exist.
2816 Constructs a new FDFDocument with a COSDocument and catalog.
2817 Creates and returns an FDFCatalog, using document root if available.
2818 Retrieves the FUNC_MASK range, creating a default if needed. Returns a PDRange object representing the FUNC_MASK.
2819 Creates CID set stream from CID-to-GID mapping. @param cidToGid Map of CID to GID.
2820 Constructs a new PDTilingPattern object, initializing its properties.
2821 Inserts a new sibling outline item into the existing structure. @param newSibling The outline item to insert as a sibling.
2822 Adds a new sibling outline item to the current item. @param newSibling The outline item to add as a sibling.
2823 Associates a bead with the thread and sets the thread on the bead. @param bead The PDThreadBead to associate with the thread.
2824 Constructs a new PDThreadBead, initializing its dictionary and links.
2825 Sets the role map dictionary. @param roleMap Map of role names to strings.
2826 Updates attribute value, notifies listeners, and stores old value. @param name Attribute name. @param value New attribute value.
2827 Sets the "RI" value in the dictionary. @param ri The value to set for the "RI" key.
2828 Sets the action name. @param name The name to associate with the action.
2829 Sets the border style. @param s The border style string value.
2830 Creates a PDPageLabels object for the given document. Initializes with a default page label range.
2831 Constructs a PDStructureElement with a type and parent node. @param structureType Element structure type. @param parent The parent structure node.
2832 Constructs a new PDStructureTreeRoot using the TYPE constant.
2833 Constructs a new PDShadingPattern with pattern type set.
2834 Constructs a new PDAction with a COSDictionary and sets the type.
2835 Creates a PDDocumentOutline from the document's outlines dictionary. @return PDDocumentOutline or null if outlines are not present.
2836 Creates a PDOutlineNode based on parent dictionary. Returns null if no parent exists.
2837 Constructs a new PDRectlinearMeasureDictionary. Sets the subtype to SUBTYPE.
2838 Constructs a PDTransition using the default transition style (R).
2839 Sets a date value for a given key in the dictionary. @param key The key to associate with the date. @param date The Calendar object representing the date.
2840 Sets a date value for a key within a COSDictionary. @param embedded Embedded object. @param key Key to associate with the date. @param date Calendar object representing the date.
2841 Sets the document's creation date. @param date The Calendar object representing the creation date.
2842 Sets the modification date for the PDF document's metadata. @param date The Calendar object representing the modification date.
2843 Sets the creation date of the annotation. @param date The Calendar object representing the creation date.
2844 Sets the modification date of the annotation. @param c Calendar object representing the modification date.
2845 Sets the creation date for the annotation. @param creationDate The date the annotation was created.
2846 Sets the modification date in the signature dictionary. @param cal Calendar object representing the modification date.
2847 Sets a document field's value. @param fieldName Name of the field to set. @param fieldValue The value for the specified field.
2848 Updates an attribute's value and notifies listeners. @param name Attribute name. @param value New attribute value.
2849 Sets the 'Base' string in the COSDictionary to the given value. @param base The base string to set.
2850 Sets the application version in the dictionary. @param applicationVersion The version string to set.
2851 Sets the units for the number format. @param units The units to be set, e.g., "mm".
2852 Sets fractional display type. @param fractionalDisplay "D", "F", "R", "T", or null.
2853 Sets the thousands separator for number formatting. @param thousandsSeparator The separator string.
2854 Sets the decimal separator for number formatting. @param decimalSeparator Decimal separator string.
2855 Sets the prefix label for number formatting. @param labelPrefixString The prefix label string.
2856 Sets the label suffix for the number format. @param labelSuffixString The suffix to set for the label.
2857 Sets value in COSDictionary based on label position. @param labelPositionToValue The label position value (S, P, or null).
2858 Creates a FDFField from an XML element. @param fieldXML The XML element representing the field.
2859 Constructs a new PDOptionalContentGroup with the given name. @param name The name of the optional content group.
2860 Updates attribute value, notifies listeners. @param name Attribute name. @param value New integer value for the attribute.
2861 Updates attribute value, notifies listeners. @param name Attribute name. @param value New integer value for the attribute.
2862 Sets the denominator for number formatting. @param denominator The denominator value to set.
2863 Creates a CCITTFAX image XObject from a binary image. @param document PDF document. @param image Binary image. @return PDImageXObject representing the image.
2864 Sets bits per component and updates internal state. @param bitsPerComponent Number of bits per color component.
2865 Sets bits per component and updates internal state. @param bitsPerComponent Number of bits per color component.
2866 Sets bits per coordinate and updates the internal state. @param bitsPerCoordinate The number of bits per coordinate.
2867 Sets bits per coordinate and stores it in the dictionary. @param bitsPerCoordinate The number of bits per coordinate
2868 Updates attribute value, notifies listeners. @param name Attribute name. @param value New float value for the attribute.
2869 Sets the intensity of the border effect. @param i The intensity value to set.
2870 Sets the conversion factor for the number format. @param conversionFactor The conversion factor to set.
2871 Retrieves the file specification from the stream. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2872 Retrieves the file specification from the FDF document. Uses COSName.F to find and dereference the file specification. @return PDFileSpecification object or null if not found.
2873 Retrieves embedded FDF file specifications. Returns null if no embedded files are present.
2874 Retrieves the file specification associated with the named page. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2875 Creates a file specification using COSName.F. @return PDFileSpecification object or null if not found.
2876 Creates a PDFileSpecification using the 'F' value from action. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2877 Creates a file specification using a COS name. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2878 Creates a file specification from the 'F' action parameter. @return PDFileSpecification object or null if not found. @throws IOException if an I/O error occurs.
2879 Creates a file specification for the mask. Uses action flags to retrieve and dereference the mask.
2880 Retrieves the file specification associated with the action. @return PDFileSpecification object or null if not found.
2881 Creates a PDFileSpecification from the file specification name. @return PDFileSpecification object or null if not found. @throws IOException if an error occurs during creation.
2882 Default constructor for FDFAnnotationHighlight. Initializes the annotation subtype to SUBTYPE.
2883 Default constructor for FDFAnnotationSquiggly. Initializes the annotation subtype to SUBTYPE.
2884 Constructs a new FDFAnnotationStrikeOut. Initializes subtype property.
2885 Default constructor for FDFAnnotationUnderline. Initializes the subtype of the annotation.
2886 Initializes the attachment, setting the subtype to FILE.
2887 Constructs a PDAnnotationInk object, setting its subtype.
2888 Constructs a PDAnnotationLine object, initializing subtype and line.
2889 Constructs a new PDAnnotationPolygon with subtype set.
2890 Initializes a new PDAnnotationPolyline with subtype set.
2891 Initializes the rubber stamp annotation with the subtype.
2892 Constructs a `PDAnnotationSquareCircle` with the given subtype. @param subType Annotation subtype string.
2893 Initializes a new PDAnnotationText object. Sets the subtype to SUB_TYPE using the COS object.
2894 Constructs a `PDAnnotationTextMarkup` with a subtype and empty quad points. @param subType Annotation subtype
2895 Retrieves the bounding box of the artifact as a PDRectangle. @return PDRectangle object or null if bounding box is missing.
2896 Retrieves the bounding box as a PDRectangle. @return PDRectangle object or null if not found.
2897 Gets the rectangle for the annotation. @return PDRectangle object or null if not found.
2898 Gets the rectangle for the annotation. @return PDRectangle object or null if not found.
2899 Creates a PDRectangle from the RD array, or null if absent.
2900 Gets the rectangle from the annotation. @return PDRectangle object or null if RD is missing.
2901 Creates a PDRectangle from the RD COSArray, or null if absent.
2902 Gets the font bounding box from the dictionary. @return PDRectangle object or null if not found.
2903 Retrieves the font bounding box as a `PDRectangle`. @return Bounding box rectangle or null if not found.
2904 Gets the bounding box of the form XObject. @return PDRectangle object or null if not found.
2905 Gets the bounding box of the tiling pattern. @return PDRectangle object or null if bounding box is missing.
2906 Returns the bounding box of the shading. Creates it if null, using the dictionary's BBOX. @return PDRectangle object representing the bounding box
2907 Retrieves the rectangle associated with the annotation. Returns a PDRectangle or null if invalid.
2908 Creates a PDRectangle from the RD COSArray, or null if absent.
2909 Creates a PDRectangle from the annotation's RD difference. @return PDRectangle object or null if RD difference is missing.
2910 Creates a PDRectangle from the BBOX COSArray, or null if absent.
2911 Retrieves the mask rectangle for the bead. @return PDRectangle object or null if not found.
2912 Sets the line dash pattern using the provided array and phase. @param array Defines the dash pattern. @param phase Initial phase value.
2913 Creates a PDLineDashPattern. Initializes dash pattern if missing. @return PDLineDashPattern object representing the dash pattern.
2914 Retrieves line dash pattern from dictionary. Returns null if pattern is not found or invalid.
2915 Creates a PDLineDashPattern with default dash pattern if none exists. @return PDLineDashPattern object representing the dash pattern.
2916 Creates a masked BufferedImage from a PDImage. @param pdImage Image to mask. @param paint Paint used for masking. @return Masked BufferedImage.
2917 Creates a transformation matrix using COSName.MATRIX.
2918 Creates a Matrix for the mask. Uses the pattern dictionary and COSName.MATRIX. @return Matrix object representing the mask.
2919 Retrieves the matrix associated with the shading. Uses m1().m2() to get the matrix value.
2920 Sets attribute value, replacing existing value if present. @param attrName Attribute name to set. @param attrValue New attribute value.
2921 Recursively finds a value in a COSDictionary tree. @param node Current COSDictionary node. @param key Key to search for. Returns value or null.
2922 Checks if a boolean value exists for the given key. @param key The key to check. @param defaultValue Default value if key is not found.
2923 Gets an integer value for the given key, using default if absent. @param key The key to retrieve. @param defaultValue Default integer value.
2924 Gets an integer value, using a default if not found. @param firstKey Primary key. @param secondKey Fallback key.
2925 Constructs a PDInlineImage with parameters, data, and resources. @param parameters COSDictionary containing image parameters. @param data Raw image data. @param resources PDF resources for the image.
2926 Determines image type based on filters. Returns "png", "jpg", or "tiff" based on image filters.
2927 Retrieves COSObjects of specified types. @param type1 First type to match. @param type2 Second type to match. @return List of COSObjects matching the types.
2928 Searches for a valid PDF trailer, extracting key objects. Handles exceptions and resets source offset on failure.
2929 Extracts and sets Root and Info objects from trailer dict. @param trailer The COSDictionary representing the trailer. @throws IOException if an I/O error occurs.
2930 Creates a PDPageTree from the document's pages dictionary. @return PDPageTree object representing the page tree.
2931 Constructs a PDPageTree from a COSDictionary. @param root The root COSDictionary of the page tree.
2932 Converts a character code to its Unicode representation. @param code The character code to convert.
2933 Returns the PDTransparencyGroup or creates if null. Uses COSName.G to find group, creates resources if needed.
2934 Sets the Mac Subtype parameter for the embedded file. @param macSubtype The subtype string for Mac OS compatibility.
2935 Sets the Mac Creator attribute for the embedded file. @param macCreator The creator string for Mac OS.
2936 Sets the Mac Resource Fork value for the embedded file. @param macResFork The value for the Mac Resource Fork.
2937 Delegates to the underlying document's m1() method.
2938 Parses FDF document, returning an FDFDocument object. Throws IOException on error; closes document if needed.
2939 Parses a PDF document with lenient or strict mode. @param lenient True for lenient parsing, false for strict. @return PDDocument object representing the parsed PDF. @throws IOException if parsing fails.
2940 Gets the PDAcroForm, applying fixes if necessary. @return The cached PDAcroForm.
2941 Retrieves a PDPageDestination by named destination. @param namedDest Named destination to find. @return PDPageDestination or null if not found.
2942 Retrieves a PDColorSpace by name, using caching if available. @param name COSName of the color space. @param wasDefault Whether the color space was default. @return PDColorSpace object or null if not found.
2943 Checks if a color space exists for the given name. @param name The name of the color space to check. @return True if color space exists, false otherwise.
2944 Retrieves an extended graphics state by name, caching results. @param name Graphics state name. @return PDExtendedGraphicsState object or null if not found.
2945 Checks if a resource is a valid image mask. @param name Resource name to check. @return True if the resource is a valid image mask.
2946 Gets color space names. @return Iterable of COSName objects representing color spaces.
2947 Returns XObject resource names.
2948 Returns font resource names. Uses getNames to retrieve names for the font resource.
2949 Returns the properties COSName resources.
2950 Returns shading resource names. @return Iterable of COSNames or empty set if not found.
2951 Returns pattern resource names.
2952 Retrieves the graphics state names. @return Iterable of COSNames representing graphics states.
2953 Finds/creates a resource name, returns it. @param kind resource kind, prefix for generated name @param prefix Prefix for the generated name @param object Resource object.
2954 Adds a font resource to the dictionary. @param name Font name @param font The font object to add.
2955 Adds a color space resource to a dictionary. @param name resource name @param colorSpace the color space object
2956 Adds an extended graphics state to a resource dictionary. @param name resource name @param extGState extended graphics state object
2957 Adds a shading resource to the dictionary. @param name resource name @param shading the shading object
2958 Adds a pattern resource to the dictionary. @param name resource name @param pattern the pattern object
2959 Adds properties to a resource dictionary. @param name resource name @param properties resource properties
2960 Adds an XObject resource to the dictionary. @param name XObject name @param xobject the XObject to add
2961 Sets the embedded file in the dictionary. @param file The PDEmbeddedFile to set.
2962 Sets the embedded file for the specification. @param file The embedded file to set, or null to remove.
2963 Retrieves the standard crypt filter dictionary. Returns a PDCryptFilterDictionary object.
2964 Retrieves the default crypt filter dictionary. Uses a helper method to fetch the dictionary.
2965 Sets a crypt filter and enables encryption. @param cryptFilterDictionary Filter settings to apply.
2966 Sets default filter and enables it. @param defaultFilterDictionary Default crypt filter dictionary.
2967 Retrieves a character procedure for a given code point. @param code The integer code point. @return PDType3CharProc or null if not found.
2968 Gets the base state from the FUNC mask dictionary. Retrieves the COSName and converts it to a BaseState.
2969 Sets the base state for the function mask dictionary. @param state The base state to set.
2970 Enables/disables an optional content group. @param group The optional content group to modify. @param enable True to enable, false to disable. @return True if group was found and modified.
2971 Creates a pattern content stream from a PDTilingPattern. @param pattern The tiling pattern to use.
2972 Gets or creates the annotation's appearance dictionary. @return PDAppearanceDictionary object
2973 Returns the mask appearance entry, or default if null.
2974 Retrieves the mask appearance entry. Creates one if null.
2975 Returns the first child outline item.
2976 Retrieves the last outline item.
2977 Returns a PDSignature object from the signature value.
2978 Appends a new bead to the thread sequence. @param append The bead to append to the sequence.
2979 Gets the function mask appearance stream. Returns stream or null if no appearance exists.
2980 Returns the COS name of the 'Off' appearance entry, or "" if not found.
2981 Processes PDF pages, recursively counting them if rebuilt. @param root The root COSDictionary of the PDF document.
2982 Finds a child node by name or searches names map. @param name The name to search for. @return Child node or null if not found.
2983 Retrieves a value from the node or its children based on index. @param index The index of the value to retrieve.
2984 Sets limits and kids for the node based on provided children. @param kids List of child nodes; null or empty skips processing.
2985 Sets NUMS and LIMITS on the node based on provided numbers. @param numbers Map of integer keys to COSObjectable values.
2986 Returns the number of output values. Initializes if needed.
2987 Creates a PDRange object with range values and index. @param n The starting index of the range. @return A PDRange object.
2988 Applies function ranges to input values. @param inputValues array of input values @return array of processed values or original input
2989 Returns the number of input values for the function. Uses COSArray size if not already cached.
2990 Creates a PDRange with domain values and index. @param n The starting index of the range. @return A PDRange object.
2991 Calculates an index based on a coordinate vector. @param vector Coordinate vector used for index calculation. @return Calculated index value.
2992 Returns the function mask array, creating it if null. Creates mask array with size values if encode is null.
2993 Returns PDRange if decode values exist for the given parameter. @param paramNum The parameter number to check. @return PDRange object or null if not available.
2994 Creates a PDRange with the function's encode values. @param n Index for the range. @return PDRange object.
2995 Checks if the top edge is attached.
2996 Checks if the bottom edge is attached.
2997 Checks if the left edge is attached.
2998 Checks if the right edge is attached.
2999 Constructs a PDCIDFont object from a dictionary and parent font. @param fontDictionary CID font dictionary. @param parent Parent font object.
3000 Constructs a `DictionaryEncoding` with base encoding and differences. @param baseEncoding Base encoding COSName. @param differences Differences COSArray.
3001 Initializes a DictionaryEncoding with a font encoding. @param fontEncoding The COSDictionary representing the font encoding.
3002 Constructs a DictionaryEncoding with base encoding derived from font. @param fontEncoding Font encoding dictionary. @param isNonSymbolic Whether the font is non-symbolic. @param builtIn The font's built-in encoding.
3003 Constructs a `PDCIEDictionaryBasedColorSpace` with RGB array. Initializes internal state and fills the whitepoint cache.
3004 Sets the function mask range. @param range The PDRange object to set.
3005 Sets the function mask range. @param range The PDRange object to set.
3006 Finds an OCG by name within the OCG array. @param name The name of the OCG to find. @return PDOptionalContentGroup or null if not found.
3007 Sets the FUNC mask for the optional content group. @param ocg The optional content group to set the mask for.
3008 Retrieves a collection of PDOptionalContentGroup objects. Iterates through OCGs and creates groups from their dictionaries.
3009 Constructs a ShadingContext with provided shading data and transforms. @param shading The PDShading object.
3010 Gets a PDRange for a given parameter number, if possible. @param paramNum Parameter number to check. @return PDRange object or null if not available.
3011 Retrieves PDColor for item named "C", returns null if not found.
3012 Retrieves the background color for the annotation. @return PDColor object representing the background color.
3013 Retrieves the background color for annotations. Uses COSName.BG to fetch the color.
3014 Constructs key usage string from provided flags. @param digitalSignature, nonRepudiation, etc. Flags to build the string.
3015 Extracts signature content from PDF file. @param pdfFile Input stream of PDF file @return Byte array containing the signature content
3016 Extracts signature contents from PDF file. Uses byte ranges to read signature data. @param pdfFile PDF file as byte array @return Signature contents as byte array
3017 Reads signature data from a PDF file. @param pdfFile Input stream for the PDF file. @return Byte array containing the signature data.
3018 Extracts filtered byte array from PDF file. @param pdfFile The PDF file to filter. @return Filtered byte array.
3019 Retrieves a string value by key from the COSDictionary. @param name The key to look up. @return String value or null if not found.
3020 Retrieves the RenderingIntent from the dictionary. @return RenderingIntent or null if "RI" key is not found.
3021 Retrieves the action name from the dictionary.
3022 Gets value for key, using default if null. @param key The key to look up. @param defaultValue Value if key not found.
3023 Gets the guideline style from the dictionary. @return Guideline style string, defaults to solid.
3024 Gets the annotation name. @return Annotation name as string.
3025 Gets the attachment name using a default if not found.
3026 Gets the line end style. Uses COSName.LE and default.
3027 Gets the highlight mode name. @return Highlight mode name string.
3028 Gets the RT reply as a string. Uses default if key not found.
3029 Gets the name of the rubber stamp annotation. @return Annotation name, uses NAME_DRAFT if null.
3030 Retrieves the annotation name using a default value. @return Annotation name as String.
3031 Gets the highlight mode. @return Highlight mode string ("I" if present).
3032 Retrieves the border style name. @return String representing the border style name.
3033 Retrieves the type of the external data dictionary. Uses default "ExData" if type is not explicitly set.
3034 Gets transition name. Uses default if not found.
3035 Gets the vertical dimension name. Uses default if not found.
3036 Gets the motion name string using default if not found.
3037 Gets the non-full screen page mode preference. Uses default if not found.
3038 Gets the reading direction preference. @return String representing the reading direction.
3039 Gets the view area as a string, using default crop box.
3040 Gets the view clip preference, using crop box as default.
3041 Gets the print area as a string, using crop box default.
3042 Gets print clip setting, using crop box boundary as default.
3043 Gets the print scaling value, using default if not set.
3044 Finds XRef table offset, returns -1 if not found. @param startXRefOffset Offset to search for XRef table. @throws IOException if an I/O error occurs.
3045 Returns the maximum PDF version between header and catalog. @return The higher PDF version value.
3046 Extracts and organizes attribute objects and revisions. Returns a Revisions object containing extracted attributes.
3047 Checks if the mask is enabled based on owner and presence.
3048 Creates a PDStructureNode from the parent dictionary, or null.
3049 Extracts data from a child dictionary or COSInteger. @param kid The child element to process. @return Extracted data or null if processing fails.
3050 Sets the user property name. @param name The name of the user property.
3051 Constructs a PDEncryption object from a COSDictionary. Initializes the security handler using the filter name.
3052 Returns the security handler for the current filter. Throws IOException if no handler is found.
3053 Retrieves a list of FDF annotations from the FDF document. Returns null if no annotations are found.
3054 Checks font CID system info based on font info and CID ranges.
3055 Checks if attributes are valid. Returns true if attributes exist and are valid.
3056 Extracts the document's open action or destination. Returns PDDestinationOrAction object or null if none.
3057 Creates a PDAction from the field's 'A' value. @return A PDAction object or null if value is missing.
3058 Extracts JavaScript actions from a COSDictionary array. Returns a map of action names to PDActionJavaScript objects.
3059 Retrieves a list of subsequent actions from the action dictionary. Returns null if no next actions are defined.
3060 Retrieves the "F" mask action. Uses action factory to create action from COSDictionary.
3061 Retrieves the "E" action from the actions dictionary. @return PDAction object or null if "E" action is missing.
3062 Retrieves the "X" action from the actions dictionary. @return PDAction object or null if no "X" action exists.
3063 Retrieves the "D" action from the actions dictionary. @return PDAction object or null if "D" action is not found.
3064 Retrieves the 'U' action from the actions dictionary. @return PDAction object or null if 'U' action is missing.
3065 Retrieves the "FO" action from the actions dictionary. @return PDAction object or null if "FO" action is missing.
3066 Retrieves the border action. @return PDAction object or null if no border action exists.
3067 Retrieves the "PO" action from actions dictionary. @return PDAction object or null if not found.
3068 Retrieves the PC action. @return PDAction object or null if not found.
3069 Retrieves the Presentation View action. @return PDAction object or null if not found.
3070 Retrieves the "PI" action from the actions dictionary. Returns a PDAction or null if "PI" action doesn't exist.
3071 Retrieves the "WillChange" action from the actions dictionary. @return PDAction object or null if "WillChange" action is absent.
3072 Retrieves the document will-save action. @return PDAction object representing the will-save action, or null.
3073 Retrieves the document's DS action. @return PDAction object or null if not found.
3074 Retrieves the WP action from the actions dictionary. @return PDAction object or null if not found.
3075 Retrieves the DP action from the actions dictionary. @return A PDAction object or null if no DP action exists.
3076 Retrieves the 'K' action from the actions dictionary. @return PDAction object or null if 'K' action is missing.
3077 Retrieves the 'F' action from the actions dictionary. @return PDAction object or null if 'F' action is missing.
3078 Retrieves the "V" action from the actions dictionary. @return PDAction object or null if "V" action is missing.
3079 Retrieves the "C" action from the actions dictionary. @return PDAction object or null if no action exists.
3080 Retrieves the mask action from the actions dictionary. @return PDAction object representing the mask action, or null.
3081 Retrieves the 'C' action from the actions dictionary. @return PDAction object or null if no such action exists.
3082 Creates a PDAction from a COSDictionary, or null if absent.
3083 Retrieves the action associated with the annotation. @return A PDAction object or null if no action is defined.
3084 Creates a PDAction from the "A" action dictionary. @return A PDAction object.
3085 Retrieves document property value by key. @param propertyKey Key for the property to retrieve.
3086 Retrieves the value of a document field. @param fieldName Name of the field to retrieve.
3087 Delegates attribute retrieval to the parent. @param name Attribute name to retrieve.
3088 Retrieves the 'Base' string from the URI action dictionary.
3089 Retrieves the "REx" value from the dictionary.
3090 Retrieves the "U" string value from the number format dictionary.
3091 Gets string value for key, or default if not found. @param key the key to retrieve @param defaultValue default value if key is not found
3092 Gets string value from embedded dictionary, or default. @param embedded embedded dictionary key @param key the key to retrieve @param defaultValue default value if key is not found
3093 Gets the operation name, defaulting to OPERATION_OPEN. @return String representing the operation name.
3094 Gets the DA (digital signature appearance) string from the dictionary.
3095 Retrieves the file specification mask by attempting multiple sources. @return File specification mask or null if not found.
3096 Updates property value and formats it; sets formatted value to key 'F'. @param formattedValue The new formatted value for the property.
3097 Checks if an optional content group name exists in layers. @param groupName Name of the optional content group to check. @return True if group name exists, false otherwise.
3098 Returns the fully qualified name of the field. @return The field's name, potentially prefixed with parent names.
3099 Retrieves a Calendar object for the given key. @param key COSName key to retrieve @param defaultValue default Calendar if key is null
3100 Gets a Calendar object from embedded dictionary, or default. @param embedded embedded dictionary @param key key for Calendar @param defaultValue default Calendar if not found
3101 Gets the value of the 'R' property from the dictionary.
3102 Gets the version number from the dictionary.
3103 Creates a COSInputStream, decoding input using filters. @param filters List of filters to apply. @param in Input stream to decode.
3104 Returns a RandomAccessRead implementation, applying filters if present.
3105 Decodes stream data, stopping at specified filters. @param stopFilters List of filters to stop decoding at. @return InputStream for reading decoded stream data.
3106 Retrieves a float value for the given attribute name. @param name The name of the attribute to retrieve.
3107 Retrieves the "C" float value from the number format dictionary.
3108 Constructs a PDFunctionType2 from a COSBase object, initializing interpolation parameters.
3109 Gets the lower left X coordinate of the annotation. @return The lower left X coordinate as a float.
3110 Gets the lower-left X coordinate of the line annotation. @return The X coordinate as a float.
3111 Returns the lower left X coordinate of the line annotation.
3112 Returns the value of the 'V' property from the dictionary.
3113 Gets CYX value. @return CYX value as float, -1 if not found.
3114 Retrieves a float value by name, using default if absent. @param name attribute name @param defaultValue default value if not found
3115 Gets the intensity of the border effect, defaults to 0.
3116 Calculates glyph height, adjusting based on font descriptor data.
3117 Writes a list of tokens to the output stream. @param tokens List of objects to be written. @throws IOException if an I/O error occurs.
3118 Retrieves decode parameters for the stream. @return List of decode parameters or null if not found.
3119 Retrieves stream decoding parameters. @return List of decoding parameters or null if not found.
3120 Sets the FUNC_MASK using structureElement's m2 and calls m1. @param structureElement Element to use for setting the mask.
3121 Adds a child node to the structure element before a reference node. @param newKid The new child node to add. @param refKid Reference node for insertion.
3122 Removes a child element and detaches it from the structure node. @param structureElement Element to be removed. @return True if removed, false otherwise.
3123 Calculates CID font mask position. @param cid CID value; used to determine mask position. @return Vector representing the font mask position.
3124 Retrieves a PDPropertyList by name, caching the result. @param name Name of the property list to retrieve.
3125 Gets the optional content list for this XObject, or null.
3126 Gets the optional content list, or null if it doesn't exist.
3127 Retrieves a list of PDPropertyLists from OCGs in the dictionary. Returns an empty list if no OCGs are found.
3128 Retrieves the optional content property list, or null if absent.
3129 Constructs a PDAnnotationCaret from a COSDictionary.
3130 Constructs a PDAnnotationFileAttachment from a COSDictionary.
3131 Constructs a PDAnnotationFreeText from a COSDictionary.
3132 Constructs a PDAnnotationInk from a COSDictionary.
3133 Constructs a PDAnnotationLine from a COSDictionary.
3134 Constructs a PDAnnotationPolygon from a COSDictionary.
3135 Constructs a PDAnnotationPolyline from a COSDictionary.
3136 Constructs a PDAnnotationRubberStamp from a COSDictionary.
3137 Constructs a PDAnnotationSound using a COSDictionary. @param field COSDictionary containing annotation data.
3138 Constructs a PDAnnotationSquareCircle from a COSDictionary.
3139 Constructs a PDAnnotationText from a COSDictionary. @param field The COSDictionary containing annotation data.
3140 Constructs a PDAnnotationTextMarkup from a COSDictionary.
3141 Creates a PDAnnotationPopup from the annotation's popup dictionary. @return PDAnnotationPopup object or null if no popup exists.
3142 Extracts PDAnnotationWidgets from the KIDS array. Returns an empty list if no KIDS array is present.
3143 Clones a COSBase object, handling nulls and existing clones. @param base The COSBase object to clone. @return Cloned COSBase or original if already cloned.
3144 Writes a masked stream with offsets and compressed objects. @param stream The COSStream to mask and write.
3145 Writes a COSArray to the output stream, handling null values. @param output The output stream to write to. @param cosArray The COSArray to write.
3146 Draws a cloud mask shape based on polygon vertices. @param vertices Array of points defining the polygon. @param isEllipse If true, uses ellipse parameters.
3147 Creates a PDF image object with raster data and compression. Handles different image types and applies filtering.
3148 Sets the destination for this outline item to a PDPageXYZDestination. @param page The page to set as the destination.
3149 Masks PDF stream data based on type and encryption status. @param stream COSStream to mask. @param objNum Object number. @param genNum Generation number.
3150 Constructs a `PDActionEmbeddedGoTo` action, setting its subtype.
3151 Constructs a PDActionGoTo object and sets its subtype.
3152 Constructs a PDActionHide object, setting its subtype.
3153 Constructs a PDActionImportData object, setting its subtype.
3154 Constructs a new PDActionJavaScript and sets its subtype.
3155 Constructs a PDActionLaunch and sets its subtype.
3156 Constructs a PDActionMovie and sets its subtype.
3157 Constructs a PDActionNamed with the default sub-type.
3158 Constructs a `PDActionRemoteGoTo` action, setting its subtype.
3159 Constructs a PDActionResetForm and sets its subtype.
3160 Constructs a PDActionSound, setting its subtype.
3161 Constructs a PDActionSubmitForm and sets its subtype.
3162 Constructs a PDActionThread, setting its subtype.
3163 Constructs a PDActionURI, setting its subtype to SUB_TYPE.
3164 Constructs a `PDAnnotationHighlight` with subtype.
3165 Constructs a `PDAnnotationSquiggly` with the defined subtype.
3166 Constructs a `PDAnnotationStrikeout` with the defined subtype.
3167 Constructs a `PDAnnotationUnderline` with the predefined subtype.
3168 Renders a tiling pattern to a BufferedImage. @param drawer PageDrawer for rendering. @param pattern Tiling pattern to render.
3169 Calculates tiling pattern rectangle, handling missing steps & clipping. @param pattern The tiling pattern to process. @return Rectangle2D representing the tiling pattern.
3170 Creates a masked BufferedImage from the image object. @param paint Paint used for masking. @return Masked BufferedImage.
3171 Creates a writable raster from a PDImage, handling bit depth. @param pdImage The image to create the raster from. @return WritableRaster representing the image data.
3172 Masks a PDF image and returns a BufferedImage. @param pdImage Image to mask. @param region Clipping rectangle. @param subsampling Subsampling factor. @param colorKey Color key for masking.
3173 Returns the page resources, creating them if they don't exist.
3174 Returns the page's media box. Creates if null. Uses U.S. Letter as default if MediaBox not found.
3175 Extracts and normalizes the page rotation angle. Returns 0 if no rotation is specified.
3176 Checks if a boolean value exists for the given key. @param key The key to check. @param defaultValue Default value if key is not found.
3177 Checks if the "V" property exists as a boolean, defaulting to false.
3178 Checks if the "H" property exists as a boolean.
3179 Checks if encryption metadata is enabled in the dictionary.
3180 Checks if the annotation has a caption. @return True if caption exists, false otherwise.
3181 Checks if the 'FB' flag is enabled in the fit configuration.
3182 Checks if renaming is enabled in the template. Uses COSName.RENAME to get boolean value.
3183 Checks if the transparency mask is set to isolation. Uses COSName.I as the key and defaults to false if not found.
3184 Checks if the mask key exists and is false.
3185 Checks if anti-aliasing is enabled in the shading dictionary.
3186 Checks if the operator mask is set in the dictionary. Returns true if set, false otherwise.
3187 Checks if the 'SA' property exists in the dictionary, defaults to false.
3188 Checks if the AIS (anti-aliasing) flag is set in the dictionary.
3189 Checks if the 'TK' property exists in the dictionary, defaulting to true.
3190 Checks if the 'H' flag is enabled for the action. Uses getBoolean to determine the flag's value.
3191 Checks if the action has synchronous property, defaults to false.
3192 Checks if the action has no repeat. Uses m1 to check for the REPEAT property.
3193 Checks if the action mix is enabled. Uses m1 to retrieve the mix value, defaulting to false.
3194 Checks if the annotation has a caption. Uses COSName.CAP to check for existence.
3195 Checks if the annotation is open, using cached COSName.
3196 Checks if the digital signature is a pre-release version.
3197 Checks if the 'NON_EFONT_NO_WARN' flag exists, defaulting to true.
3198 Checks if trusted mode is enabled in the dictionary. Returns true if enabled, false otherwise.
3199 Checks if the form requires appearances. @return True if appearances are needed, false otherwise.
3200 Checks if 'B' property exists (defaults to false if not).
3201 Checks if the toolbar should be hidden. @return True if toolbar is hidden, false otherwise.
3202 Checks if the hide menubar preference is enabled. @return True if hide menubar is enabled, false otherwise.
3203 Checks if the window UI is hidden, returns false if not found.
3204 Checks if the PDF window should fit to the window size.
3205 Checks if the window should be centered. @return True if centered, false otherwise.
3206 Checks if displaying the document title is enabled. Returns true if enabled, false otherwise.
3207 Updates a flag for a field based on a boolean value. @param field The field to update. @param bitFlag The flag to set or clear. @param value True to set, false to clear the flag.
3208 Gets integer value from embedded dictionary, or default. @param embeddedDictionary Embedded dictionary key. @param key Key to retrieve. @param defaultValue Default integer value.
3209 Gets an integer value for the given key, using -1 as default. @param key The key to retrieve.
3210 Gets an integer value for the given key, using -1 as default. @param key The key to retrieve.
3211 Gets an integer value for the given key, using default. @param key The key to retrieve. @param defaultValue Default integer value.
3212 Checks if a bit flag is set for a given field. @param field COSName representing the field. @param bitFlag The bit flag to check. @return True if the flag is set, false otherwise.
3213 Recursively finds a page within a page tree. @param pageNum 1-based page index. @param node Current node in the tree. @param encountered Pages encountered so far.
3214 Gets the number of pages in the page tree. Uses the COUNT key, defaults to 0 if absent.
3215 Gets the starting page number from the PDF structure. @return Starting page number, defaults to 1 if absent.
3216 Gets the function order from the dictionary. Uses default value of 1 if the key is absent.
3217 Gets the value associated with the 'R' key, using 0 as default.
3218 Gets the length of the cryptographic filter dictionary.
3219 Gets the version number from the dictionary.
3220 Gets the length of the encrypted content. Uses default value of 40 if not present.
3221 Gets the PDF version from the dictionary, using a default.
3222 Gets the PDF permissions mask from the dictionary. @return Integer representing the PDF permissions mask.
3223 Retrieves the text content of the annotation. @return The text string or an empty string if absent.
3224 Returns the font flags, caching the value. @return Font flags integer value.
3225 Creates a PDAbstractPattern based on the pattern type in the dictionary. @param dictionary COSDictionary containing pattern definition. @param resourceCache Resource cache for pattern resources. @return PDAbstractPattern instance.
3226 Gets the paint type of the tiling pattern. Uses default 0 if the key is absent.
3227 Gets the tiling type. Returns 0 if not specified.
3228 Creates a PDShading object based on the shading type. @param shadingDictionary Dictionary containing shading properties. @return PDShading object or throws IOException on error.
3229 Gets the bits per flag value, using -1 as default if absent.
3230 Gets the number of vertices per row from the shading dictionary.
3231 Returns the bits per color component, fetching if necessary.
3232 Returns the bits per coordinate value, fetching if necessary.
3233 Gets the reset action flags. @return Integer value for the reset action flags.
3234 Retrieves the action flags value, using 0 as default.
3235 Gets the page number for the target directory. Returns -1 if the property is not found.
3236 Gets the value associated with COSName.A, returns -1 if absent.
3237 Gets the F flag value from the annotation's COSDictionary.
3238 Retrieves a numeric value associated with COSName.Q, defaulting to 0.
3239 Gets the rotation angle for the annotation mask. @return Rotation angle as an integer, defaults to 0.
3240 Checks if the FT flag is set in the dictionary.
3241 Gets the number of child nodes. Uses COSName.COUNT as key, returns 0 if absent.
3242 Gets the mask value from the dictionary, using 0 as default.
3243 Gets the top index for the list box, using 0 as default.
3244 Retrieves COSObjects of specified type. @param type COSName representing the type to retrieve.
3245 Returns the page tree from the document's pages dictionary.
3246 Parses an FDF file and returns an FDFDocument. @param file Input FDF file. @return FDFDocument object. @throws IOException if an I/O error occurs.
3247 Parses an FDF document from an input stream. @param input Input stream containing FDF data @return FDFDocument object or null on error
3248 Parses a PDF document in lenient mode. @return PDDocument object or null if parsing fails. @throws IOException if parsing fails.
3249 Applies page resources, returns if cache is null. Uses m1 to get resources and m2 to apply them.
3250 Retrieves a PDColorSpace by name, without caching. @param name COSName of the color space. @return PDColorSpace object or null if not found.
3251 Adds a font resource, returning its name. @param font The font object to add.
3252 Adds a color space resource. @param colorSpace The color space to add. @return The resource name of the added color space.
3253 Adds an extended graphics state resource. @param extGState The extended graphics state object. @return COSName representing the resource name.
3254 Adds a shading resource. @param shading The shading object to add. @return The generated COSName for the shading.
3255 Adds a pattern resource. @param pattern The pattern to add. @return COSName resource name.
3256 Adds a property to the resources. @param properties Property list to add. @return COSName resource name.
3257 Adds an image resource, returning its COS name. @param image The image to add as a resource.
3258 Adds a form XObject resource. @param form The form XObject to add. @return The COSName of the added resource.
3259 Adds an XObject resource with a given prefix. @param xobject The XObject to add. @param prefix Prefix for the generated resource name.
3260 Retrieves the embedded file from the specification. Returns a PDEmbeddedFile or null if not a COSStream.
3261 Creates a PDEmbeddedFile from the DOS stream or returns null.
3262 Retrieves the embedded file from the COSStream (MAC). @return PDEmbeddedFile or null if not a COSStream.
3263 Creates a PDEmbeddedFile from the UNIX stream, or null.
3264 Creates a PDEmbeddedFile from the UF object, or null if not a stream.
3265 Checks if a group is enabled based on FUNC mask. @param group The optional content group to check. @return True if enabled, false otherwise.
3266 Enables/disables optional content group by name. @param groupName Name of the optional content group. @param enable True to enable, false to disable.
3267 Gets the annotation's normal appearance entry, creating it if needed. @return PDAppearanceEntry object
3268 Gets/creates rollover appearance entry. Creates if needed.
3269 Gets or creates the annotation's down appearance entry. Returns a new entry if the existing one is a stream.
3270 Sets the FUNC mask for a given index and updates appearance. @param index Index of the field; must be within valid range.
3271 Adds a child outline item, linking it into the outline structure. @param newChild The outline item to add as a child.
3272 Adds a new child outline item, linking it appropriately. @param newChild The outline item to add as a child.
3273 Finds a PDSignatureField matching a given signature. @param fieldIterator Iterator for PDF fields. @param sigObject Signature object to match. @return Matching PDSignatureField or null.
3274 Gets the function mask appearance stream from the annotation.
3275 Adds missing font resources to AcroForm from widget appearances. @param acroFormResources Resources of the form. @param annotation PDF annotation.
3276 Extracts button values from widgets and returns them as a set.
3277 Checks if the checkbox is masked. Uses COS name comparison to determine mask state.
3278 Sets the checkbox value based on the 'Off' appearance name.
3279 Finds the index of a page within the tree. @param page The PDF page to search for. @return Page index or -1 if not found.
3280 Sets the parent node and calculates limits for the subtree. @param parentNode The parent PDNameTreeNode.
3281 Sets KIDS and LIMITS on the node based on the provided kids list. @param kids List of child nodes; null or empty list clears them.
3282 Sets names and limits; clears if names is null. @param names Map of name-value pairs to set.
3283 Constructs PDPageLabels from a document and optional dictionary. @param document The PDF document. @param dict COS dictionary for page labels, or null.
3284 Returns the function mask array for the given parameter number. @param paramNum The parameter number to retrieve the mask for.
3285 Constructs a new PDCalGray object, initializing with COSName.CALGRAY.
3286 Constructs a PDCalRGB object, initializing with the CALRGB name.
3287 Constructs a PDLab color space using COSName.LAB.
3288 Constructs a PDCalGray object from a COSArray.
3289 Constructs a PDCalRGB object from a COSArray. @param rgb The array representing RGB color components.
3290 Constructs a `PDLab` object from a CIE LAB color array. @param lab CIE LAB color array
3291 Creates an AxialShadingContext with specified parameters. @param shading The shading type. @param colorModel The color model. @param xform Transform. @param matrix Matrix. @param deviceBounds Device bounds.
3292 Creates a RadialShadingContext with specified parameters. @param shading The shading object. @param colorModel The color model. @param xform Transform. @param matrix Matrix. @param deviceBounds Device bounds.
3293 Constructs a TriangleBasedShadingContext with shading data & transforms. @param shading The PDShading object.
3294 Constructs a Type1ShadingContext with domain and inverse transforms. @param shading The shading object. @param colorModel The color model.
3295 Gets a PDRange for a given parameter number, if available. @param paramNum Parameter number to check. @return PDRange object or null if not available.
3296 Gets a PDRange for a given parameter number. @param paramNum Parameter number to check. @return PDRange object or null if not available.
3297 Gets value for key, using default if null. @param name Key to look up. @param defaultValue Value if not found.
3298 Gets the border style. @return The border style string (e.g., "S" for solid).
3299 Sets the line dash pattern based on border style or array. @param lineWidth Line width. @param bs Border style dictionary. @param border Border array.
3300 Creates a PDF document, copying metadata from source. Copies document information and catalog preferences.
3301 Updates PDF document version. @param newVersion The new PDF version to set.
3302 Finds the root PDStructureTreeRoot of the element's structure. Returns null if no root is found.
3303 Extracts FUNC_MASK objects from the node, handling array or single element cases. @return List of extracted FUNC_MASK objects.
3304 Returns the document's encryption object, creating it if needed.
3305 Initializes security handler if no encryption exists. Handles key store and decryption material setup.
3306 Initializes CMap and checks descendant font properties. Uses encoding from dictionary, throws exception if missing.
3307 Calculates Length1 for Type 1 font, handling invalid values. @param bytes Font data. @param length1 Initial Length1 value. @return Adjusted Length1 value.
3308 Validates Length2, logs warning if invalid, returns valid length.
3309 Gets fractional display decimal string from number format.
3310 Gets the representation type string from the number format. Uses the COSDictionary to retrieve the string value.
3311 Retrieves the "RD" value from the number format dictionary, defaulting to ".".
3312 Retrieves the PS separator string from the number format.
3313 Gets the space string from the number format dictionary.
3314 Gets the label suffix value from the number format dictionary.
3315 Gets string value from embedded dictionary, or default. @param embedded embedded dictionary key @param key the key to retrieve
3316 Finds font matches based on descriptors and CID info. @param fontDescriptor Font descriptor object. @param cidSystemInfo CID system info object. @return PriorityQueue of FontMatch objects.
3317 Gets a Calendar object from embedded dictionary, or default. @param embedded embedded dictionary @param key key for Calendar
3318 Creates a COSInputStream, using default decode options. @param filters List of filters to apply. @param parameters Dictionary of parameters. @param in Input stream to decode.
3319 Initializes the parser with a stream and document, validating object stream metadata (/N and /First entries).
3320 Constructs a PDFXrefStreamParser from a COSStream. @param stream COSStream to parse; throws IOException on failure.
3321 Constructs a PDCIDFontType0 from a font dictionary. @param fontDictionary Font dictionary. @param parent Parent font.
3322 Constructs a PDCIDFontType2 object from a font dictionary. @param fontDictionary Font dictionary. @param parent Parent font. @param trueTypeFont TrueType font or null.
3323 Retrieves a CMap based on the provided COSBase object. @param base COSBase object representing the CMap source. @return CMap object or throws IOException if invalid.
3324 Constructs a PDAnnotationCircle from a COSDictionary.
3325 Constructs a PDAnnotationSquare from a COSDictionary.
3326 Constructs a PDAnnotationHighlight from a COSDictionary.
3327 Constructs a PDAnnotationSquiggly from a COSDictionary.
3328 Constructs a PDAnnotationStrikeout from a COSDictionary.
3329 Constructs a PDAnnotationUnderline from a COSDictionary.
3330 Processes a tree entry, mapping objects and recursing. @param cloner The PDFCloneUtility instance. @param parentTreeEntry The COSDictionary to process. @param objMapping Object mapping for replacing references.
3331 Copies entries from src to dst, excluding specified keys. @param src Source dictionary to copy from. @param dst Destination dictionary. @param cloner Utility for cloning COSBase objects. @param exclude Set of keys to exclude from copying.
3332 Writes document objects to the output stream. @param doc The PDF document to write.
3333 Draws a cloud mask shape based on polygon vertices. @param path Array of points defining the polygon.
3334 Draws a cloud mask shape. @param left, bottom, right, top Rectangle coordinates. @param isEllipse Uses ellipse parameters if true.
3335 Constructs a PDActionJavaScript with the given JavaScript string. @param js The JavaScript action string to be set.
3336 Creates a TilingPaint object with the given parameters. @param drawer PageDrawer for rendering. @param pattern Tiling pattern to render.
3337 Masks an image using the provided region and subsampling. @param region The region to mask. @param subsampling Subsampling factor.
3338 Reads a PDF image and returns a BufferedImage with a color mask. @param pdImage Image to read. @param colorKey Color key for masking.
3339 Returns parent resources, uses stream/page resources if available.
3340 Creates an AffineTransform for masking, calculating horizontal/vertical shifts. @param page The PDF page. @param overlayMediaBox Overlay's media box. @return AffineTransform object.
3341 Calculates the intersection rectangle of two rectangles. @param box The second rectangle to intersect with. @return The intersection rectangle.
3342 Returns page media box, swapping width and height if rotated. @param page The PDF page to get the media box from. @return PDRectangle representing the page's media box.
3343 Checks if the PDF element is marked. @return True if marked, false otherwise.
3344 Checks if \"UserProperties\" exists in the dictionary.
3345 Checks if the document element is flagged as suspect. @return True if suspect flag is set, false otherwise.
3346 Checks if the action is a map. @return True if the action is a map, false otherwise.
3347 Checks if the popup is open, using a default value if not.
3348 Checks if the "FD" boolean value exists in the COSDictionary.
3349 Sets the hidden state of the property and its "H" flag. @param hidden boolean value indicating visibility
3350 Checks if the operator mask is set in the dictionary.
3351 Draws an inline image to the content stream. @param inlineImage Inline image to draw. @param x X coordinate, width. @param y Y coordinate, height.
3352 Sets the invisible flag for the annotation. @param invisible True to make invisible, false otherwise.
3353 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
3354 Sets the printed flag for the annotation. @param printed True if annotation is printed, false otherwise.
3355 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false otherwise.
3356 Sets the no-rotate flag for the annotation. @param noRotate True to set the no-rotate flag.
3357 Sets the no-view flag for the annotation. @param noView True to set the no-view flag, false otherwise.
3358 Sets the read-only flag for the annotation. @param readOnly True to set read-only, false otherwise.
3359 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
3360 Sets the "Toggle No View" flag on the annotation. @param toggleNoView True to set, false to clear the flag.
3361 Sets the locked contents flag for the annotation. @param lockedContents True to lock, false to unlock.
3362 Sets the invisible flag of the annotation. @param invisible True to make annotation invisible, false otherwise.
3363 Sets the hidden flag for the annotation. @param hidden True to hide, false to show.
3364 Sets the printed flag on the annotation. @param printed True if annotation is printed, false otherwise.
3365 Sets the no-zoom flag for the annotation. @param noZoom True to disable zoom, false otherwise.
3366 Sets the no-rotate flag on the annotation. @param noRotate True to disable rotation, false otherwise.
3367 Sets the no-view flag for the annotation. @param noView True to disable viewing, false otherwise.
3368 Sets the read-only flag for the annotation. @param readOnly True to set read-only, false otherwise.
3369 Sets the locked flag for the annotation. @param locked True to lock, false to unlock.
3370 Sets the "No View" flag on the annotation. @param toggleNoView True to set, false to clear the flag.
3371 Sets the locked contents flag for the annotation. @param lockedContents True to lock contents, false otherwise.
3372 Sets the filter flag for the function mask. @param flag True to set, false to clear the filter flag.
3373 Sets the FF flag for the subfilter based on the provided boolean. @param flag True to set, false to clear the flag.
3374 Sets the digest method flag based on the provided boolean value. @param flag True to set, false to clear the digest method flag.
3375 Sets the FF flag value. @param flag The boolean value to set the flag to.
3376 Sets the FF flag based on the provided boolean value. @param flag True to set, false to clear the flag.
3377 Sets the Legal Attestation flag based on the input boolean. @param flag True to set, false to clear the flag.
3378 Sets the flag for adding revision info. @param flag True to add, false to remove.
3379 Sets the subject flag in the certificate dictionary. @param flag True to set, false to clear the flag.
3380 Sets the Issuer flag in the dictionary. @param flag True to set, false to clear the flag.
3381 Sets the required flag for the OID field in the certificate dictionary. @param flag True to set, false to clear the flag.
3382 Sets the subject DN flag in the dictionary. @param flag True to set, false to clear the flag.
3383 Sets the key usage flag for the certificate. @param flag True to set, false to clear the flag.
3384 Sets the URL flag in the dictionary. @param flag True to set, false to clear the flag.
3385 Sets the italic flag for the outline item. @param italic True to set italic, false to clear it.
3386 Sets the bold flag for the outline item. @param bold True to set bold, false to clear it.
3387 Updates signature existence flag in the form dictionary. @param signaturesExist True if signatures exist, false otherwise.
3388 Sets the SIG_FLAGS value in the dictionary based on appendOnly. @param appendOnly True to set FLAG_APPEND_ONLY, false otherwise.
3389 Sets the sort flag for the choice field. @param sort True to enable sorting, false to disable.
3390 Sets the multi-select flag for the choice field. @param multiSelect True to enable multi-selection.
3391 Sets the do-not-spellcheck flag for the choice field. @param doNotSpellCheck True to disable spellcheck.
3392 Sets the commit-on-selection-change flag for the choice field. @param commitOnSelChange True to commit changes on selection.
3393 Sets the combo flag for the choice field. @param combo True if it's a combo box, false otherwise.
3394 Sets the edit flag for the combo box field. @param edit True to enable editing, false otherwise.
3395 Sets the read-only flag for the field. @param readonly True to set read-only, false otherwise.
3396 Sets the required flag for the field. @param required True if the field is required.
3397 Sets the no-export flag for the field. @param noExport True to disable export, false otherwise.
3398 Constructs a PDPushButton associated with the given AcroForm. @param acroForm The parent AcroForm instance.
3399 Constructs a PDRadioButton associated with a PDAcroForm. @param acroForm The parent AcroForm instance.
3400 Sets the unison flag for radio buttons. @param radiosInUnison True if radios are in unison mode.
3401 Sets the multiline flag for the field. @param multiline True to enable multiline input.
3402 Sets the password flag for the field. @param password True if field requires password.
3403 Sets the FILE_SELECT flag for the field. @param fileSelect True to set, false to clear the flag.
3404 Sets the "do not spell check" flag for the field. @param doNotSpellCheck True to disable spell checking.
3405 Sets the "doNotScroll" flag for the field. @param doNotScroll True to set, false to clear the flag.
3406 Sets the COMB flag for the field. @param comb True to set, false to clear the COMB flag.
3407 Sets the rich text flag for the field. @param richText True to enable rich text, false to disable.
3408 Gets integer value from embedded dictionary, or default. @param embeddedDictionary Embedded dictionary key. @param key Key to retrieve.
3409 Retrieves the integer value associated with the key "D".
3410 Decodes image data using PredictorOutputStream if predictor > 1. @param out Output stream. decodeParams Dictionary containing decoding parameters.
3411 Retrieves the number of parent structures for the page.
3412 Decrements page count in parent nodes up the tree. @param node The current node to start traversal from.
3413 Adds a page to the page tree and updates parent counts. @param page The PDPage to add to the tree.
3414 Returns the bits per sample value from the m1 object.
3415 Returns the Marker Context Identifier (MCID) value.
3416 Gets the next parent tree key. Returns an integer value.
3417 Gets the mask content ID. Returns -1 if mask is null.
3418 Creates a PDImageXObject from a CCITT-encoded stream. @param document PDF document. @param reader Input stream. @param number Image number.
3419 Gets the line cap value from the dictionary.
3420 Gets the LJ mask value from the dictionary.
3421 Retrieves the parent structure integer value. @return Integer value from parent structure.
3422 Returns the value associated with the 'P' key from the dictionary.
3423 Returns the maximum allowed length of the text field. Uses COSName.MAX_LEN to retrieve the length.
3424 Retrieves an integer value for the given attribute name. @param name Attribute name. @param defaultValue Default value if not found.
3425 Checks if the annotation is masked. Uses m1 to determine if the invisible flag is set.
3426 Checks if the annotation has the hidden flag set.
3427 Checks if the annotation's print flag is set.
3428 Checks if the annotation has the no-zoom flag set.
3429 Checks if the annotation has the no-rotate flag set.
3430 Checks if the annotation has the "no view" flag set.
3431 Checks if the annotation has the read-only flag set.
3432 Checks if the annotation is locked. Uses m1 to check the F flag for the LOCKED bit.
3433 Checks if the annotation has the "F" flag set. Uses m1 to check for FLAG_TOGGLE_NO_VIEW.
3434 Checks if the annotation content is locked. Uses m1 to check the FLAG_LOCKED_CONTENTS flag.
3435 Checks if the annotation is masked. Uses flag to determine if the annotation is masked.
3436 Checks if the annotation is hidden. Uses COSDictionary to determine hidden status.
3437 Checks if the annotation has the print flag set. Uses internal methods to determine the flag status.
3438 Checks if the annotation has the no-zoom flag set. Uses COSDictionary to determine zoom restriction status.
3439 Checks if the annotation has the no-rotate flag set.
3440 Checks if the annotation is masked (not viewable). Uses COSDictionary to determine visibility.
3441 Checks if the annotation is read-only. Uses COSDictionary flags to determine read-only status.
3442 Checks if the annotation is locked. Uses COSDictionary to determine lock status.
3443 Checks if the annotation's toggle flag is set. Uses COSDictionary and checks a specific flag.
3444 Checks if annotation contents are locked. Uses COSDictionary to determine locked status.
3445 Checks if the filter flag is set for the function mask.
3446 Checks if the FF flag is set for the subfilter. @return True if the flag is set, false otherwise.
3447 Checks if the digest method flag is set in the function mask.
3448 Checks if the function mask has the FLAG_V bit set.
3449 Checks if the function mask is set for the reason flag.
3450 Checks if the legal attestation flag is set in the function mask.
3451 Checks if the flag for adding revocation info is set.
3452 Checks if the subject flag is set in the certificate dictionary.
3453 Checks if the issuer flag is set in the dictionary.
3454 Checks if the OID flag is set in the dictionary.
3455 Checks if the subject DN flag is set in the certificate dictionary.
3456 Checks if the key usage flag is set in the dictionary.
3457 Checks if the URL flag is set in the dictionary.
3458 Checks if the outline item's text is italic. Uses internal helper to check a flag.
3459 Checks if the item's text is bold. Uses m1() and checks the BOLD_FLAG with COSName.F.
3460 Checks if signature flags exist in the form dictionary. Uses m1 to check for signature flags. @return True if signature flags exist, false otherwise.
3461 Checks if the SIG_FLAGS bit is set to FLAG_APPEND_ONLY.
3462 Checks if the button is a push button. Uses m1() and checks the FF flag for push button type.
3463 Checks if the radio button flag is set for the field.
3464 Checks if the choice field has sorting enabled. Uses m1() to get a COSName and checks a flag.
3465 Checks if multi-select is enabled for the choice field.
3466 Checks if spell-check is disabled for this choice field.
3467 Checks if changes should be committed on selection.
3468 Checks if the combo flag is set for the field. Uses m1() to get a value and checks a flag.
3469 Checks if the combo box is editable. Uses m1() and checks the FLAG_EDIT flag.
3470 Checks if the field is read-only. Uses m1 to check the read-only flag.
3471 Checks if the field has the required flag set. Uses dictionary to check for the required flag.
3472 Checks if the field has the no-export flag set. Uses m1 to check the flag.
3473 Checks if radio buttons operate in unison. Uses m1() to get a value and checks a flag.
3474 Checks if the field is a multiline text field. Uses internal helper to determine the flag.
3475 Checks if the password flag is set for the field.
3476 Checks if the file select flag is set for the field.
3477 Checks if spell-checking is disabled for the field. Uses m1() to retrieve a value and checks a flag.
3478 Checks if the field should not scroll. Uses m1() and m2() to check a flag.
3479 Checks if the field has the "FF" flag set using a helper method.
3480 Checks if the field supports rich text formatting. Uses m1() and checks the FF flag for rich text.
3481 Retrieves a page at the specified index. @param index 1-based index of the page to retrieve.
3482 Calculates a value by chaining calls to m1, m2, and m3.
3483 Sets the attribute object's array with revision info. @param attributeObject The attribute object to add to array.
3484 Processes attribute object, updating array or creating one. @param attributeObject Attribute object to process.
3485 Updates the className and revision number in the COS array. @param className The name of the class.
3486 Increments revision number and sets it on the element.
3487 Decrypts a document using public key cryptography. Handles recipient information and decryption material.
3488 Extracts the owner password from the dictionary. Returns null if no owner password is found.
3489 Retrieves the user password from the dictionary. @return User password as bytes or null if not present.
3490 Calculates character width based on code, returns Vector. @param code Character code to determine width for.
3491 Calculates the total width of a string using font metrics. @param text String to calculate width for. @return Total width of the string in font units.
3492 Retrieves a PDAbstractPattern by name, using cache if available. @param name Pattern name. @return PDAbstractPattern or null if not found.
3493 Processes the 'mask' operator, handling operands and color operators. @param contentStream The PDF content stream.
3494 Retrieves a PDShading object by name, using caching if available. @param name Shading name. @return PDShading object or null if not found.
3495 Returns the shading pattern, creating it if necessary. Returns the shading object or null if no shading is defined.
3496 Returns bits per color component, fetching if necessary.
3497 Returns bits per color component, fetching if necessary.
3498 Returns the bits per coordinate value, caching if necessary.
3499 Returns the bits per coordinate value, caching if necessary.
3500 Checks if at least one child outline item exists.
3501 Creates a PDField based on field type; returns null if none match. @param form The PDF AcroForm. @param field Field dictionary. @param parent Parent field.
3502 Constructs a PDFPrintable with document, scaling, border, dpi, center flag, and renderer.
3503 Constructs a PDFRenderer with the given document. @param document The PDF document to render.
3504 Loads an FDF document from a file. @param filename Path to the FDF file. @return FDFDocument object. @throws IOException if an I/O error occurs.
3505 Parses a PDF document from a byte array. @param input PDF data as bytes @param password Password for encrypted PDFs @return PDDocument object or null if parsing fails @throws IOException if parsing fails
3506 Parses a PDF document from an input stream. @param randomAccessRead Input stream for PDF data
3507 Sets the stroking color space to DeviceRGB and processes operator. @param operator The PDF operator to process. @param arguments Arguments for the operator.
3508 Retrieves a PDXObject by name, caching if available. @param name COSName of the XObject. @return PDXObject or null if not found.
3509 Sets the current font and size. @param font The PDFont object to set. @param fontSize The font size to set.
3510 Sets graphics state parameters. @param state The extended graphics state object.
3511 Adds a shading fill operation to the content stream. @param shading The shading object to add.
3512 Writes a mask content sequence based on tag and properties. @param tag COSName identifying the mask content. @param propertyList Property list for the mask content.
3513 Writes marked content operator with tag and properties. @param tag Tag for the marked content. @param propertyList Properties to associate with the content.
3514 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x x coordinate. @param y y coordinate. @param width image width. @param height image height.
3515 Draws an image with the given matrix. @param image The image to draw. @param matrix Transformation matrix for the image.
3516 Draws a form XObject to the content stream. @param form The form XObject to draw. @throws IllegalStateException if called within a text block.
3517 Checks if an optional content group with the given name is enabled. @param groupName The name of the optional content group to check.
3518 Checks if an optional content group is enabled. @param group The optional content group to check.
3519 Adds a child outline item to this node. @param newChild The outline item to add as a child.
3520 Adds a new child outline item to this node. @param newChild The outline item to add as a child.
3521 Validates button value; throws exception if invalid. @param value The button value to validate.
3522 Fixes PDF page destinations in the destination document. @param destinationDocument The document to fix.
3523 Retrieves page labels from the document's catalog. @return PDPageLabels object or null if not found.
3524 Constructs a `GouraudShadingContext` with given parameters. @param shading The shading object. @param colorModel The color model. @param xform The affine transform. @param matrix The matrix.
3525 Initializes the destination document if needed. Checks split boundary and creates a new document if necessary.
3526 Writes PDF header and comments to the output stream. @param doc The COSDocument to write.
3527 Sets optional content properties and updates PDF version if needed. @param ocProperties Optional content properties to set.
3528 Retrieves a map from the structure tree root, or an empty map.
3529 Writes PDF data, handles signatures, and updates IDs. Writes data, handles signatures, and updates document IDs.
3530 Retrieves COSBase, manages object keys, and handles object streams. @param key Initial key, may be updated. @param base COSBase object.
3531 Applies security settings based on a protection policy. @param policy ProtectionPolicy defining security requirements. @throws IOException if security handler creation fails.
3532 Sets encryption parameters for the document. Sets filter, version, and recipient fields.
3533 Returns a string representation of the code point, or ".notdef". @param code The integer code point.
3534 Maps a character code to a glyph ID, handling embedded fonts. @param code The character code to map. @return Glyph ID or 0 if not found.
3535 Gets the Mac OS subtype from embedded file parameters. Returns null if parameters dictionary is not found.
3536 Gets the Mac Creator string from embedded file parameters. Returns null if parameters dictionary is not found.
3537 Gets the Mac Resource Fork value from the parameters dictionary. Returns null if the dictionary is null.
3538 Creates a CIDFontMapping based on font type and CID info. @param baseFont Base font name. @param fontDescriptor Font descriptor object. @param cidSystemInfo CID system info object.
3539 Creates a COSInputStream with default decoding options. @return COSInputStream for reading filtered stream data.
3540 Masks PDF object streams, handling security and offsets. @param xrefTable Map of COSObjectKey to Long for xref table.
3541 Retrieves a COSBase object from an object stream. @param objstmObjNr object stream number @param key COSObjectKey - key to retrieve
3542 Parses xref stream, resolves object locations, returns PREV. @param objByteOffset Offset of the object. @param isStandalone Whether the xref is standalone.
3543 Returns an InputStream for page content. Returns empty stream if null.
3544 Constructs a PDCIDFontType2 object with a parent font. @param fontDictionary Font dictionary. @param parent Parent font.
3545 Creates a PDCIDFontType2 object using provided font data. @param cidFont CID font. @param parent Parent font. @param ttf TrueType font.
3546 Creates a PDAnnotation based on the annotation dictionary. @param base The base object (COSDictionary) to create from. @throws IOException if the base object is not a COSDictionary.
3547 Creates a cloud mask shape based on a rectangle. @param rd Rectangle to use for cloud mask generation.
3548 Masks a region with cloud-like shapes based on dimensions. @param leftOrig,bottomOrig,rightOrig,topOrig Rectangle bounds.
3549 Creates a TilingPaint with a pattern and transform. @param drawer PageDrawer for rendering. @param pattern Tiling pattern to render. @param xform AffineTransform for pattern transformation.
3550 Masks an image using the provided region and subsampling.
3551 Creates a content stream for a PDF page with default resources. @param document The PDF document. @param sourcePage The PDF page.
3552 Returns the page's crop box, or defaults to letter size if missing.
3553 Draws an inline image at specified coordinates. @param inlineImage Image to draw. @param x X coordinate. @param y Y coordinate.
3554 Draws an inline image to the content stream. @param inlineImage Image to draw, x, y, width, height.
3555 Draws an inline image to the content stream. @param inlineImage Image to draw. @param x X coordinate, width. @param y Y coordinate, height.
3556 Draws an inline image to the content stream with specified dimensions. @param inlineImage Image to draw. @param x X coordinate, width. @param y Y coordinate, height.
3557 Draws an inline image to the content stream at specified coords. @param inlineImage Image to draw. @param x X coordinate, width. @param y Y coordinate, height.
3558 Constructs a FDFAnnotation from an Element. This method parses attributes from the provided Element and sets the corresponding properties of the FDFAnnotation. It handles attributes such as "page", "color", "date", "flags", "name", "rect", "title", "creationdate", "opacity", "subject", and "intent." It also handles setting border style attributes. @param element The Element from which to extract annotation data. @throws IOException If a required attribute is missing or if there's an error parsing attribute values.
3559 Decodes JPX mask data based on data type and writes to output. @param encoded Input stream for JPX data. @param decoded Output stream for decoded data.
3560 Decodes LZW data from input stream to output stream. @param encoded Input stream. @param decoded Output stream.
3561 Removes a page from the tree at the given 1-based index. @param index 1-based index of the page to remove.
3562 Removes a page from the page tree and updates parent counts. @param page The page to remove from the tree.
3563 Adds a page to the document and updates object numbers. @param page The page to add.
3564 Inserts a new page into the page tree, replacing an orphan page. @param newPage The page to insert. @param nextPage The page to replace.
3565 Inserts a new page before the previous page in the tree. @param newPage The page to insert. @param prevPage The page before which to insert.
3566 Sets the marked content ID. @param markedContent The marked content object.
3567 Handles font encoding and retrieves a UCS2 CMap if applicable. @throws IOException if an IO error occurs during CMap retrieval.
3568 Creates a PDImageXObject from a CCITT-encoded byte array. @param document PDF document. @param byteArray Image data. @param number Image number. @return PDImageXObject
3569 Creates a PDImageXObject from a CCITT file. @param document PDF document. @param file Input file. @param number Image number. @return PDImageXObject object.
3570 Updates choice field display values. @param displayValues List of strings to display; null clears.
3571 Sets choice field options, handling sorting and validation. @param exportValues Values to export. @param displayValues Display values for choices.
3572 Sets the indices for the choice field. @param values List of integer indices to set; null clears them.
3573 Checks if the field is a text field with specific flags unset.
3574 Retrieves a page from the document at the given index. @param pageIndex 1-based index of the page to retrieve @return PDPage object representing the requested page
3575 Initializes PageExtractor with source document and sets end page.
3576 Constructs a PDFPageable with specified document, orientation, border, DPI, and centering.
3577 Notifies the associated structure element about changes. Updates the structure element with the current object.
3578 Applies encryption parameters to a PDF document. Handles different encryption revisions and key lengths.
3579 Determines and caches the width of the space character. Uses cached values or calculates from font descriptors.
3580 Masks text appearance based on field properties. @param contents Content stream to write to. @param appearanceStream Appearance stream.
3581 Checks if the font is fixed-pitch based on a flag. @return True if fixed-pitch, false otherwise.
3582 Checks if the font has a serif flag set. @return True if serif flag is set, false otherwise.
3583 Checks if the symbolic flag is set. @return True if the symbolic flag is set, false otherwise.
3584 Checks if the script flag is set. @return True if the script flag is set, false otherwise.
3585 Checks if the font is non-symbolic based on a flag.
3586 Checks if the font is italic. @return True if italic flag is set, false otherwise.
3587 Checks if all caps flag is set. @return True if the flag is set, false otherwise.
3588 Checks if the small caps flag is set. @return True if the small caps flag is set, false otherwise.
3589 Checks if the font should be forced to be bold. @return True if bold is forced, false otherwise.
3590 Sets the fixed-pitch flag for the font descriptor. @param flag True to enable, false to disable.
3591 Sets a font flag. @param flag The flag value to set.
3592 Sets a symbolic flag on the font descriptor. @param flag True to set, false to clear the flag.
3593 Sets the script flag for the font descriptor. @param flag True to set, false to clear the script flag.
3594 Sets or clears the non-symbolic font flag. @param flag True to set, false to clear the flag.
3595 Sets the italic flag for the font descriptor. @param flag True to enable italic, false to disable.
3596 Sets a specific font flag. @param flag The boolean value for the flag.
3597 Sets/clears the small cap flag. @param flag True to set, false to clear the flag.
3598 Sets the force bold flag. @param flag True to enable, false to disable.
3599 Retrieves a PDAbstractPattern by name from resources. @param color The color object containing the pattern name. @throws IOException if the pattern is not found.
3600 Processes a PDF transparency group, setting graphics states. @param group The transparency group to process.
3601 Processes a mask operator, applying transformations and resources. @param charProc The character process object. @param textRenderingMatrix The text rendering matrix.
3602 Processes the 'mask' operator for PDF annotation rendering. Applies transformations and sets the clipping path.
3603 Processes the 'mask' operator for a tiling pattern. @param tilingPattern The tiling pattern to mask.
3604 Processes the 'mask' operator, applying graphics state and clipping. @param contentStream PDF content stream containing mask data.
3605 Adjusts the open count of the parent outline node. @param delta the amount to adjust the open count by
3606 Creates a PDField. @param form The PDF AcroForm. @param field Field dictionary. @param parent Parent field.
3607 Constructs a PDFPrintable with document, scaling, border, dpi, center.
3608 Loads a PDF document from bytes, handling encryption and keystores. @param input PDF data as bytes @param password Password for encrypted PDFs @return PDDocument object or null if parsing fails
3609 Loads a PDF document from a file, handling encryption if needed. @param file File containing the PDF document @param password Password for decryption, if applicable
3610 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Input stream for PDF data @return PDDocument object representing the loaded document
3611 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead Input stream for PDF data @param streamCacheCreateFunction Function for stream caching @return PDDocument object representing the loaded PDF
3612 Loads a PDF document from a RandomAccessRead, using a password. @param randomAccessRead Input stream for PDF data @param password Password for encrypted PDFs @return PDDocument object or null if loading fails
3613 Loads a PDF document with optional password and key store. @param randomAccessRead Input stream for PDF data
3614 Loads a PDF document from a RandomAccessRead. @param randomAccessRead Input stream for PDF data. @param password Password for encrypted PDFs.
3615 Initializes signature from file. @param file Input PDF file to process.
3616 Initializes visual signature from input stream. @param is Input stream for PDF data.
3617 Sets the current font and size, handling subsetting and GSUB data. @param font The PDFont object to set. @param fontSize The font size to set.
3618 Sets the current font and size, handling font embedding and GSUB data. @param font The PDFont object to set. @param fontSize The font size to set.
3619 Sets the current font and size, handling subsetting and GSUB data. @param font The PDFont object to set. @param fontSize The font size to set.
3620 Sets the current font and size, handling font embedding and GSUB data. @param font The PDFont object to set. @param fontSize The font size to set.
3621 Sets stroking color space and components, handling patterns. @param color The color to set, containing color space info.
3622 Writes non-stroking color data to the content stream. @param color The color to write, potentially a pattern.
3623 Sets graphics state parameters and applies them. @param state The extended graphics state object @throws IOException if an I/O error occurs
3624 Sets graphics state parameters and applies them. @param state The extended graphics state object
3625 Sets graphics state parameters from extended state. @param state The extended graphics state to apply.
3626 Sets graphics state parameters for content stream. @param state The extended graphics state object.
3627 Adds a shading fill operation to the content stream. @param shading The shading object to add.
3628 Adds a shading fill operation. Throws exception if in text mode. @param shading The shading object to add.
3629 Adds a shading fill operation, throwing error if in text mode. @param shading The shading object to add.
3630 Adds a shading fill operation. @param shading The shading object to add.
3631 Writes a mask content sequence based on tag and properties. @param tag COSName identifying the mask content @param propertyList Property list for the mask content
3632 Writes a marked content sequence with tag and properties. @param tag COSName identifying the marked content. @param propertyList Property list for the marked content.
3633 Writes a mask content sequence based on tag and properties. @param tag COSName identifying the mask content @param propertyList Property list for the mask content
3634 Writes a marked content sequence with tag and properties. @param tag COSName identifying the content. @param propertyList Property list for the content.
3635 Adds marked content operator with tag and properties. @param tag Tag for the marked content. @param propertyList Properties to associate with content.
3636 Adds a marked content point with tag and properties. @param tag Tag for the marked content. @param propertyList Properties to associate with the content.
3637 Adds marked content operator to the content stream. @param tag Tag for the marked content. @param propertyList Properties associated with the content.
3638 Adds marked content point with tag and properties. @param tag Tag for the marked content. @param propertyList Properties to associate with content.
3639 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x x coordinate. @param y y coordinate. @param width image width. @param height image height.
3640 Draws an image at specified coordinates with given dimensions. @param image The image to draw. @param x x coordinate. @param y y coordinate. @param width image width. @param height image height.
3641 Draws an image to the PDF page at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate. @param width image width. @param height image height.
3642 Draws an image at specified coordinates with given dimensions. @param image Image to draw. @param x x coordinate. @param y y coordinate. @param width image width. @param height image height.
3643 Draws an image with a transformation matrix. @param image The image to draw. @param matrix Transformation matrix for the image.
3644 Draws an image using the provided matrix, throwing exception if in text mode. @param image The image to draw. @param matrix Transformation matrix for the image.
3645 Draws an image using the provided matrix, throwing an exception if in text mode. @param image The image to draw. @param matrix Transformation matrix for the image.
3646 Draws an image using the provided matrix, throwing an exception if in text mode. @param image The image to draw. @param matrix Transformation matrix for the image.
3647 Draws a form XObject to the content stream. @param form The form XObject to draw. @throws IllegalStateException if called within a text block.
3648 Draws a form XObject to the content stream. @param form The form XObject to draw. @throws IllegalStateException if called within a text block.
3649 Draws a form XObject to the content stream. @param form The form XObject to draw. @throws IllegalStateException if called within a text block.
3650 Draws a form XObject to the content stream. @param form The form XObject to draw. @throws IllegalStateException if called within a text block.
3651 Masks PDF document with encryption details & permissions. Sets encryption dictionary in document.
3652 Sets the button's default value. @param value The default value to set.
3653 Sets the FUNC mask value. Validates or sets based on collection. @param value The FUNC mask value to set.
3654 Clones a COSBase object based on its type. @param src Source COSBase to clone. @return Cloned COSBase or original if not array/dictionary.
3655 Extracts page number from array, or delegates to page tree.
3656 Copies function mask from source to target document. @param srcDoc Source PDF document.
3657 Embeds CID font data, converting GID to CID mappings. @param ttfSubset Input stream for subsetted TTF font. @param tag Base font name tag. @param gidToCid Mapping of GID to CID.
3658 Retrieves a type string, potentially mapping it from a source.
3659 Writes PDF data to the document, handles signatures, updates IDs. @param doc The PDF document to write.
3660 Writes PDF data to the provided output stream. @param output The OutputStream to write the PDF data to.
3661 Writes PDF data to output stream, handles signatures. @param output Output stream for PDF data. @param objectsToWrite Set of COSDictionaries to write.
3662 Processes COSBase object, dereferencing and handling streams/arrays. Dereferences objects and processes arrays/dictionaries.
3663 Reads stream content to COSString, returns string. Handles IOExceptions, logs error, returns empty string.
3664 Delegates to the wrapped COSStream to get an input stream.
3665 Reads and processes PDF shading patches from a COSDictionary. @param xform AffineTransform for patch transformation. @param matrix Matrix for coordinate transformation. @param controlPoints Control points for shading. @return List of Patch objects representing the shading.
3666 Parses PDF trailer, handling object streams and xref tables. @param xrefTable Map of xref table keys to long values. @return COSDictionary representing the trailer.
3667 Resolves a COSBase object by key, handling null references. @param objKey COSObjectKey - key to retrieve object by @param requireExistingNotCompressedObj flag to check object existence @return COSBase object or null if not found
3668 Resolves xref trailer data, handles loops, and parses streams. @param document The PDF document being processed. @param startXRefOffset Starting offset for xref table.
3669 Creates a PDCIDFont based on font type and dictionary. @param dictionary Font dictionary. @param parent Parent font. @throws IOException if font type is invalid.
3670 Filters annotations on a page based on the provided filter. @param annotationFilter Filter to apply to annotations. @return List of filtered annotations.
3671 Retrieves the referenced object, returning null if not found.
3672 Creates a PDAnnotation from the IRT dictionary, or null if absent.
3673 Retrieves the parent markup annotation. Returns null if the parent is not a PDAnnotationMarkup.
3674 Recursively clones PDF objects from a number tree. @param cloner Utility for cloning PDF objects. @param numberTreeAsMap Map of number tree entries. @param objMapping Object mapping for reference replacement.
3675 Masks a region with cloud shapes based on rectangle dimensions. @param rd Rectangle to mask.
3676 Creates a content stream for the annotation's normal appearance. @param compress Whether to compress the content stream. @return PDAppearanceContentStream object.
3677 Creates a content stream for a PDF page, warns if overwriting. @param document The PDF document. @param sourcePage The PDF page.
3678 Creates a content stream for a PDF page, using default resources. @param document The PDF document. @param sourcePage The PDF page.
3679 Initializes rendering context for a PDF page. @param page The PDF page to render. Throws IllegalArgumentException if null.
3680 Gets the bleed box, or defaults to letter size if missing.
3681 Gets the page's trim box, using default size if missing.
3682 Returns the page's art box, or defaults if missing.
3683 Returns page crop box, swapping width and height if rotated. @param page The PDF page to get the crop box from. @return PDRectangle representing the page's crop box.
3684 Draws an inline image at specified coordinates. @param inlineImage Image to draw. @param x X coordinate. @param y Y coordinate.
3685 Draws an inline image at specified coordinates. @param inlineImage Image to draw. @param x X coordinate. @param y Y coordinate.
3686 Draws an inline image at specified coordinates. @param inlineImage Image to draw. @param x X coordinate. @param y Y coordinate.
3687 Draws an inline image at specified coordinates. @param inlineImage Image to draw. @param x X coordinate. @param y Y coordinate.
3688 Constructs a FDFAnnotationCaret from an Element. @param element XML element containing annotation data. @throws IOException If an error occurs during initialization.
3689 Creates a FDFAnnotationCircle from an XML element. @param element XML element representing the circle annotation. @throws IOException if fringe data is invalid.
3690 Constructs a FDFAnnotationFileAttachment from an Element. Sets the subtype to SUBTYPE.
3691 Creates FDFAnnotationFreeText from an Element. Parses attributes & initializes annotation properties.
3692 Creates an FDFAnnotationInk from an Element. @param element Element containing ink data. @throws IOException if 'gesture' element is missing.
3693 Constructs a FDFAnnotationLine from an XML element. Parses line coordinates and related attributes.
3694 Creates an FDFAnnotationLink from an Element. @param element The XML element representing the link. @throws IOException If an I/O error occurs.
3695 Constructs a FDFAnnotationPolygon from an XML Element. @param element XML element containing polygon data.
3696 Constructs a FDFAnnotationPolyline from an XML element. @param element XML element containing polyline data. @throws IOException if there's an I/O error.
3697 Constructs a sound annotation from an Element. Sets the subtype to SUBTYPE. @param element The Element from which to extract data. @throws IOException If there's an error parsing attribute values.
3698 Creates a FDFAnnotationSquare from an XML element. @param element XML element representing the annotation. @throws IOException if fringe data is invalid.
3699 Creates a FDFAnnotationStamp from an XML element. @param element XML element representing the stamp. @throws IOException if an I/O error occurs during parsing.
3700 Constructs a FDFAnnotationText from an Element. Parses attributes to set annotation properties.
3701 Constructs FDF annotation from an Element, parsing its "coords" attribute. @param element Element containing annotation data. @throws IOException if "coords" attribute is missing or invalid.
3702 Removes a page from the document at the specified index. @param pageNumber 1-based index of the page to remove.
3703 Removes a page from the document's page tree. @param page The page to remove.
3704 Imports a page from another document. @param page The page to import. @return A new PDPage containing the imported content.
3705 Adds a page to the PDF structure. @param page The page to add to the PDF document.
3706 Creates a PDImageXObject from a CCITT-encoded byte array. @param document PDF document. @param byteArray Image data.
3707 Creates a PDImageXObject from a CCITT file. @param document PDF document. @param file Input file.
3708 Sets the choice field value and clears selections. @param value The string value to set for the choice field.
3709 Sets choice field indices based on provided values and options. @param values List of choice values; null clears indices. @param options List of available choice options.
3710 Masks signature based on page dimensions. @param document PDF document. @param page Page number (1-based).
3711 Retrieves the target page based on a destination object. @param doc The PDF document. @return PDPage object or null if not found.
3712 Constructs a PDFPageable using the provided document. Uses default orientation, border, DPI, and centering.
3713 Constructs a PDFPageable with document, orientation, default border, DPI, and centering.
3714 Constructs a PDFPageable with document, orientation, and border.
3715 Constructs a PDFPageable with document, orientation, border, and DPI.
3716 Creates a map of page labels to page indices. @return Map of label to page index.
3717 Extracts page labels from the PDF document. @return Array of page labels, indexed by page number.
3718 Updates the attribute, notifying listeners if a replacement occurs. @param oldBase The previous COSBase value. @param newBase The new COSBase value.
3719 Masks text position, calculates transformations, and handles font details. @param matrix Transformation matrix for text rendering.
3720 Splits text into lines based on width, font, and size. @param font PDFont object for font metrics. @param fontSize Font size used for calculation. @param width Desired line width.
3721 Returns the FUNC_MASK value, or null if m1() is null.
3722 Generates a font name string based on descriptor flags. @param fontDescriptor Font descriptor object. @return Font name string.
3723 Creates a PDFontDescriptor from a Type1 font. Sets various font properties like bounding box, name, etc.
3724 Creates a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font data.
3725 Creates a PDFontDescriptor from a TrueTypeFont. @param ttf The TrueTypeFont to create the descriptor from. @return PDFontDescriptor object representing the font.
3726 Creates a paint object based on the provided color. @param color The color object to create a paint from. @return Paint object or transparent color if null/invalid. @throws IOException if an I/O error occurs.
3727 Processes a PDF transparency group. @param form The transparency group to process.
3728 Processes a transparency group, setting graphics states. @param group The transparency group to process.
3729 Processes a Type3 font mask operator. @param textRenderingMatrix Text rendering matrix. @param font The Type3 font. @param code The character code.
3730 Processes the 'mask' operator for a PDF annotation. @param annotation The PDF annotation to process.
3731 Delegates to overloaded method with a Matrix. @param tilingPattern The tiling pattern to process.
3732 Processes a form's mask content if it exists. @param form The form X object containing the mask. @throws IOException If an I/O error occurs.
3733 Extracts PDFields from the form's FIELDS array. Returns an empty list if no FIELDS array exists.
3734 Recursively finds a field by name within a field's kids. @param name Field name array. @param nameIndex Current name index. @return PDField object or null if not found.
3735 Retrieves child fields from the FUNC_MASK array. Returns a list of PDField objects representing the children.
3736 Constructs a PDFPrintable with document, scaling, border, dpi, and centers pages.
3737 Loads a PDF document from bytes, handling encryption. @param input PDF data as bytes @param password Password for encrypted PDFs @return PDDocument object or null if parsing fails
3738 Loads a PDF document from a file using a stream cache function. @param file File containing the PDF document @param streamCacheCreateFunction Function to create a stream cache @return PDDocument object or null if loading fails
3739 Loads a PDF document from a file, handling encryption. @param file File containing the PDF document. @param password Password for decryption, if applicable.
3740 Loads a PDF document from a file, handling encryption. @param file File containing the PDF document @param password Password for decryption, if applicable @return PDDocument object or null if loading fails
3741 Loads a PDF document from a file, handling encryption. @param file File to load. @param password Password for decryption.
3742 Initializes a visible signature from properties. @param visSignatureProperties Properties for the signature. @throws IOException if an I/O error occurs.
3743 Sets the stroking color to the given Color object. @param color The color to set, normalized to 0.0-1.0.
3744 Sets the stroking color, updating the content stream accordingly. @param color The color to set, including color space info.
3745 Sets the stroking color, handling color spaces and components. @param color The color to set, containing color space info.
3746 Sets the stroking color, updating the content stream accordingly. @param color The color to set, including color space info.
3747 Sets the stroking color and its components to the content stream. @param color The color to set, including color space info.
3748 Sets the non-stroking color to RGB value. @param color The color to set, normalized to 0-1 range.
3749 Sets the non-stroking color to the content stream. @param color The color to set, potentially a pattern.
3750 Sets the non-stroking color to the content stream. @param color The color to set, can be a pattern.
3751 Sets the non-stroking color and writes it to the content stream. @param color The color to set, potentially a pattern.
3752 Sets the non-stroking color, updating the content stream accordingly. @param color The color to set, potentially a pattern.
3753 Creates a form XObject with masked content from a page. @param sourceDoc Source PDF document. @param page Source PDF page.
3754 Writes PDF data to the document, handles signatures, updates IDs. @param doc The PDF document to write.
3755 Saves the PDF document to an output stream. @param output The output stream to save to. @param compressParameters Compression settings for PDF.
3756 Initializes the COSWriterCompressionPool with document and parameters. @param document The PDF document. @param parameters Compression parameters.
3757 Extracts string value from COSBase object. Returns empty string if base is null or not COSString/COSStream.
3758 Retrieves field import value, handling various COS types. @return Value or null if import is null, throws IOException on error.
3759 Gets the field value. Returns null if RV is null. Uses m3() for COSString, m2() for COSStream otherwise.
3760 Retrieves value from COS entry, handling COSString/COSStream. Returns null if entry is not a COSString or COSStream.
3761 Retrieves value from COS entry, handles string/stream. @return String value or null if not found/invalid.
3762 Retrieves JavaScript action string from action object. Returns null if no JS or stream action is found.
3763 Retrieves annotation content from COS object. Returns string from COSString or COSStream, null otherwise.
3764 Extracts text from COSBase, returns string or empty string.
3765 Creates a `LayoutPage` for the given PDF page. @param page the PDF page to create layout for @return A `LayoutPage` object representing the page.
3766 Reads the stream data into a byte array. Uses InputStream to read data. Returns byte[].
3767 Initializes the 'samples' array with interpolated values. Reads sample data from an input stream and populates the array.
3768 Initializes color space, using alternate if ICC read fails. Handles exceptions during initialization.
3769 Creates a `PatchMeshesShadingContext` with shading data. @param shading The PDMeshBasedShadingType object.
3770 Constructs a `Type4ShadingContext` with shading parameters. @param shading The Type 4 shading object.
3771 Constructs a `Type5ShadingContext` with shading params. @param shading The Type 5 shading object.
3772 Parses PDF trailer, handling xref tables and object streams. Returns COSDictionary representing the trailer.
3773 Renders a form XObject, skipping if content is hidden. Restores linePath if nested hidden OCG is present.
3774 Handles hidden optional content groups based on properties. @param tag The tag associated with the content. @param properties Dictionary containing optional content properties.
3775 Retrieves all annotations on the page. @return List of annotations.
3776 Gets the normal appearance as a content stream. @return PDAppearanceContentStream object
3777 Creates an optional content group (layer) and adds it to the document. @param targetPage The page to add the layer to. @param form The form XObject to draw. @param transform Transformation matrix to apply. @param layerName Name of the optional content group.
3778 Processes the 'mask' operator on a PDF page. @param page The PDF page to process.
3779 Processes a mask operator. Sets page, processes stream, resets currentPage.
3780 Creates a PageFormat based on the specified page index. @param pageIndex 1-based index of the page.
3781 Creates a FDFAnnotationHighlight from an Element. @param element Element containing annotation data. @throws IOException if element data is invalid.
3782 Creates a squiggly annotation from an XML element. @param element XML element containing annotation data. @throws IOException if element is invalid.
3783 Constructs a FDF strikeout annotation from an XML element. @param element Element containing annotation data. @throws IOException if parsing fails.
3784 Constructs an FDFUnderline annotation from an Element. @param element Element containing annotation data. @throws IOException if an I/O error occurs.
3785 Sets choice field values. @param values List of selected values; null clears selection.
3786 Creates a PDVisibleSignDesigner with a document, image stream, and page. @param document PDF document. @param imageStream Input stream for signature image. @param page Page number (1-based).
3787 Constructs a PDVisibleSignDesigner with a document, image, and page. @param document PDF document. @param image Signature image. @param page Page number.
3788 Formats and writes text content to the content stream. Handles line wrapping and alignment based on settings.
3789 Calculates appropriate font size based on content and rect. @param font PDFont object for font metrics. @param contentRect PDRectangle for content dimensions.
3790 Initializes font encoding based on dictionary values. Handles different encoding types and fallback mechanisms.
3791 Determines if the font is symbolic. Uses encoding and font name. @return True if symbolic, false otherwise, null if unknown.
3792 Maps a base font to a TrueTypeFont, using fallback if needed. @param baseFont Base font name. @param fontDescriptor Font descriptor object.
3793 Maps a base font to a FontBoxFont, using fallback if needed. @param baseFont Base font name. @param fontDescriptor Font descriptor object. @return FontMapping object.
3794 Embeds a Type 1 font into a PDF document. @param doc The document to embed the font into. @param dict The dictionary for the font. @param pfbStream Stream containing the font data. @param encoding The font encoding to use.
3795 Constructs a PDFont using the provided FontName. @param baseFont The base FontName for the PDFont.
3796 Embeds a TrueType font, handling subsetting and permissions. @param document The PDF document. @param dict The dictionary. @param ttf The TrueType font. @param embedSubset Whether to embed a subset.
3797 Renders a glyph based on font type. @param textRenderingMatrix Text rendering matrix. @param font The font object. @param code Character code. @param displacement Vector displacement.
3798 Adjusts node state based on child count. Calls m2 if no children.
3799 Adjusts node state if children exist. Calls m2() if m1() returns true.
3800 Creates and populates an FDF document from PDF form fields. Returns FDFDocument object with form data.
3801 Checks if a condition is met based on internal states. Returns true if both conditions are satisfied.
3802 Constructs a PDFPrintable with document, scaling, and border. @param document The PDF document to print. @param scaling The scaling factor for the document. @param showPageBorder Whether to show the page border.
3803 Loads a PDF document from bytes, handling encryption. @param input PDF data as bytes @return PDDocument object or null if parsing fails
3804 Loads a PDF document from a file, handling decryption. @param file File containing the PDF document. @param password Password for decryption, if applicable.
3805 Loads a PDF document from a file. @param file File containing the PDF document @return PDDocument object or null if loading fails
3806 Sets the color using a Color object, normalizing RGB values. @param color The color to set, normalized to 0.0-1.0.
3807 Sets the color to be used for subsequent drawing operations. @param color The color to set, normalized to 0.0-1.0.
3808 Sets the color to a PDF color object and applies it. @param color The color to set, normalized to 0.0-1.0.
3809 Sets the color for the content stream. @param color The color to set, normalized to 0.0-1.0.
3810 Sets the non-stroking color using a normalized RGB color. @param color The color to set, normalized to 0-1 range.
3811 Sets the non-stroking color to a PDF color object. @param color The color to set, normalized to 0-1 range
3812 Sets the non-stroking color using the provided RGB color. @param color The color to set, normalized to 0-1 range.
3813 Sets the non-stroking color to a PDF color object. @param color The color to set, normalized to 0-1 range.
3814 Masks appearance stream, handling background & border colors. @param widget The annotation widget. @param appearanceCharacteristics Appearance characteristics. @param appearanceStream Appearance stream to mask.
3815 Sets appearance stream content, using default font size or provided. @param contents The appearance content stream. @param zeroFontSize Fallback font size if default is zero.
3816 Imports a page as a form XObject. @param sourceDoc Source PDF document. @param pageNumber Page number to import (1-based) @return Form XObject representing the imported page.
3817 Saves the PDF document to an output stream with default compression. @param output The output stream to save to.
3818 Saves the PDF document to a file with compression. @param file The file to save to. @param compressParameters Compression settings for PDF.
3819 Writes compressed objects and prepares for encryption. @param document The COSDocument to process.
3820 Gets the rectangle content string from the annotation. Uses helper methods to extract the value.
3821 Writes field data to output, handling strings, lists, and kids.
3822 Returns the default appearance string for the RV property.
3823 Creates a LayoutPage for the first page of the document. @param doc The PDF document to get the first page from. @return LayoutPage object representing the first page.
3824 Creates a PDFunctionType4 from a COSBase. @param functionStream The COSBase representing the function stream.
3825 Interpolates float values based on coordinates and step. @param coord Coordinate vector. @param step Current step index. @return Array of interpolated float values.
3826 Constructs a PDICCBased object from an ICC array. @param iccArray COS array containing ICC profile data. @throws IOException if an I/O error occurs.
3827 Constructs a `Type6ShadingContext` with the provided shading parameters. @param shading The PDShadingType6 object for shading.
3828 Initializes a `Type7ShadingContext` with shading parameters. @param shading The PDShadingType7 object.
3829 Extracts FUNC_MASK data, handling COSArray or COSStream input.
3830 Updates page structural parents and annotations. @param page The PDF page to modify. @param structParentOffset Offset for structural parents.
3831 Copies structure tree from source to destination document. @param destinationDocument The document to add structure tree to.
3832 Clones annotations from imported page, handling destinations. @param imported The page from which to clone annotations.
3833 Creates a map of pages to widget dictionaries. @param fields List of PDF form fields @param pages Page tree to iterate over @return Map of pages to widget dictionaries
3834 Initializes page properties and translation matrix based on page size. @param page The PDF page to process.
3835 Constructs FDFDictionary from an Element. Parses FDF XML and sets document properties.
3836 Sets field value and flags based on FDF data. @param fdfField The FDF field object. @throws IOException if an unknown field type is encountered.
3837 Creates a PDVisibleSignDesigner with image and page info. @param documentSource PDF data stream. @param imageStream Signature image stream. @param page Page number (1-based) for signature.
3838 Creates a PDVisibleSignDesigner with image and page. @param documentSource PDF data stream. @param image Signature image. @param page Page number (1-based).
3839 Determines if the font is symbolic, caching the result. Uses m1() to check; defaults to true if m1() returns null. @return True if symbolic, false otherwise.
3840 Constructs a PDType1Font from an input stream and encoding. @param doc PDF document; @param pfbIn Input stream for font data. @param encoding Font encoding; uses embedder if null.
3841 Constructs a PDSimpleFont with glyph list assignment. @param baseFont The base font name.
3842 Constructs a PDFont object from a font dictionary. @param fontDictionary Dictionary containing font information.
3843 Embeds a Type 2 CID font into a PDF document. @param document The PDF document. @param dict The font dictionary.
3844 Embeds a TrueType font into a PDF document. @param document The PDF document. @param dict The font dictionary. @param ttf The TrueType font. @param encoding The font encoding.
3845 Checks if the form is valid based on internal state. @param acroForm The PDF form to validate. @return True if the form is valid, false otherwise.
3846 Constructs a PDFPrintable with document and scaling. @param document The PDF document to print. @param scaling The scaling factor for the document.
3847 Loads a PDF document from a file. @param file File containing the PDF document @return PDDocument object or null if loading fails
3848 Writes appearance content to output stream. Writes content, handles font and text formatting. @param widget Annotation widget. @param appearanceStream Appearance stream. @param output Output stream.
3849 Creates an input stream for the function mask. @param properties Designer properties for the visual signature. @return Input stream for the function mask.
3850 Saves the PDF document to a file using default compression. @param file The file to save to.
3851 Saves the PDF document to a file with compression. @param fileName File name to save to. @param compressParameters Compression settings.
3852 Writes FDF data to the output stream in XML format. Writes file spec, IDs, and fields to the output.
3853 Creates a PDFunction based on the provided COSBase. @param function The function to process, can be COSName.IDENTITY. @throws IOException if the function type is unknown or invalid.
3854 Performs interpolation on input data using default parameters.
3855 Creates or retrieves a PDICCBased color space from ICC array. @param iccArray COS array containing ICC profile data @param resources PDResources object @return PDICCBased object
3856 Creates a PDImageXObject, using predictor encoding if applicable. @param document PDF document. @param image BufferedImage to convert.
3857 Extracts and processes the matte array from a soft mask. @param softMask The PDImageXObject containing the soft mask. @return Matte array or null if insufficient length.
3858 Draws an image at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate.
3859 Parses XFA data from the internal stream into a Document.
3860 Draws PDF annotations onto a page, applying transformations. Handles scaling and positioning based on page size.
3861 Imports a page and handles resources/beads. @param page The page to import and process.
3862 Initializes page properties and translation matrix. @param page The PDF page to process.
3863 Extracts and processes text from a PDF page conditionally. @param page The PDF page to extract text from. @throws IOException If an I/O error occurs.
3864 Constructs a FDFCatalog from an Element. @param element The Element containing FDF data.
3865 Constructs a PDType1Font from a PDF document and input stream. @param doc PDF document; @param pfbIn Input stream for font data.
3866 Constructs a PDType1Font with a base font and encoding. @param baseFont The base font name for this font.
3867 Constructs a PDSimpleFont object from a COSDictionary.
3868 Creates a PDType0Font from a font dictionary. @param fontDictionary Font dictionary to initialize from. @throws IOException if font properties are invalid or missing.
3869 Creates a PDType0Font with given parameters. @param document PDF document. @param ttf TrueType font.
3870 Initializes a PDTrueTypeFont with a TrueType font and encoding. @param closeTTF Closes the TTF data source if true.
3871 Returns an iterator for the form fields in the PDAcroForm.
3872 Constructs a PDFPrintable with a document and default scaling. @param document The PDF document to print.
3873 Constructs a PDVisibleSignDesigner with filename, image stream, and page. @param filename PDF file path @param imageStream Signature image input stream @param page Page number (1-based)
3874 Creates a PDVisibleSignDesigner with image and page. @param filename PDF file path. @param image Signature image. @param page Page number (1-based).
3875 Creates a visible signature mask using a PDF template. Uses PDFTemplateBuilder and PDFTemplateCreator for mask creation.
3876 Saves the PDF document to a file. @param fileName The name of the file to save to.
3877 Writes the FDF dictionary to the output stream. @param output Writer object to write the FDF data to.
3878 Evaluates a Type 3 function with input values. @param input input values for the function @return float[] result of the function evaluation
3879 Creates a PDDeviceN object from a COSArray and resources. @param deviceN DeviceN array from PDF. @param resources PDF resources. @throws IOException if an error occurs during processing.
3880 Returns the tint transform PDFunction, creating it if null.
3881 Constructs a PDSeparation object from a COSArray and resources. @param separation The separation array. @param resources PDF resources. @throws IOException if parameters are incompatible.
3882 Retrieves the function mask. Creates if null. @return PDFunction object representing the function mask. @throws IOException if function type is unknown/invalid.
3883 Retrieves the function mask array. Returns null if not found.
3884 Gets the transfer function for the soft mask. @return PDFunction representing the transfer function. @throws IOException if the function type is invalid.
3885 Creates a PDIndexed object. @param indexedArray Indexed color array. @param resources PDF resources for color space.
3886 Evaluates the PDF function with given input values. @param input Input float array; values are transformed. @return Float array of evaluated function output values.
3887 Creates a PDImageXObject with PNG mask data. @param document The PDF document. @param state PNGConverterState object
3888 Creates a PDImageXObject from a file, supporting various image types. @param file Input file containing the image. @param doc PDF document to add the image to.
3889 Creates a PDImageXObject from a file, based on its type. @param file Input image file. @param doc PDF document.
3890 Masks image using region and subsampling, returns BufferedImage. Uses cached image if available, otherwise applies mask.
3891 Draws an image at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate.
3892 Draws an image at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate.
3893 Draws an image at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate.
3894 Draws an image at specified coordinates. @param image The image to draw. @param x x coordinate. @param y y coordinate.
3895 Renders a PDF page to a BufferedImage. @param pageIndex Page index (1-based). @param scale Scaling factor. @param imageType Image type for the output. @param destination Render destination. @return BufferedImage of the PDF page.
3896 Renders a PDF page with scaling and transformations. @param pageIndex Page index to render.
3897 Iterates through pages, processing those within the range. @throws IOException if an I/O error occurs.
3898 Extracts text from PDF pages based on bookmarks. @param pages Page tree to iterate over. @throws IOException If an I/O error occurs.
3899 Constructs an FDFDocument from a Document. @param doc The Document containing the xFDF data. @throws IOException if the root element is not "xfdf".
3900 Returns the default font; creates it if it doesn't exist. @return PDFont The default font to use for rendering.
3901 Retrieves a FontBoxFont for a base name, creating it if absent. @param baseName The base font name to retrieve or create.
3902 Creates a PDTrueTypeFont from a COSDictionary. @param fontDictionary Font dictionary to use.
3903 Constructs a PDType1CFont from a font dictionary. @param fontDictionary Font dictionary containing font data. @throws IOException if an I/O error occurs during font processing.
3904 Creates a PDType1Font from a font dictionary. Parses font data and handles potential errors.
3905 Constructs a `PDType3Font` from a font dictionary and cache. @param fontDictionary Font dictionary object. @param resourceCache Resource cache object.
3906 Creates a PDType0Font from a stream. @param doc PDF document. @param randomAccessRead Font stream. @param embedSubset Whether to embed a subset of the font. @param vertical Whether the font is vertical.
3907 Creates a PDType0Font instance with specified parameters. @param doc PDF document. @param ttf TrueType font. @param embedSubset Whether to embed subset.
3908 Creates a PDType0Font instance with specified parameters. @param doc PDF document. @param ttf TrueType font. @param embedSubset Embed subset flag.
3909 Creates a PDTrueTypeFont instance with the given document, font, and encoding.
3910 Creates a PDTrueTypeFont from a RandomAccessRead and encoding. @param doc PDF document; @param randomAccessRead TTF data; @param encoding Font encoding
3911 Retrieves a list of signature fields from the PDF form. Returns an empty list if no form or signature fields exist.
3912 Iterates through form fields and updates terminal fields.
3913 Returns an iterator for the form fields in this PDAcroForm.
3914 Initializes or clears the field cache based on the 'cache' flag. @param cache Whether to populate the field cache.
3915 Retrieves a field by its fully qualified name. @param fullyQualifiedName The field's name. @return The PDField object or null if not found.
3916 Masks pages based on overlay map entries. @param specificPageOverlayMap Map of page number to overlay path. @return PDF document with applied masking.
3917 Masks PDF pages based on overlay documents. @param specificPageOverlayDocumentMap Map of overlay documents. @return Modified PDF document.
3918 Writes the FDF document to the given Writer as XML. @param output Writer object to write the FDF data to.
3919 Creates a PDColorSpace from a COSBase or array. @param colorSpace COSBase or array representing color space.
3920 Evaluates shading functions for given input. Returns a float array of evaluated values, clamped [0,1].
3921 Creates a PDIndexed object with an indexed color array. @param indexedArray The indexed color array.
3922 Creates a PDImageXObject from an image file. @param imagePath Path to the image file. @param doc PDF document to add the image to.
3923 Returns masked image, using null region and subsampling 1.
3924 Renders a PDF page to a BufferedImage. @param pageIndex Page index (1-based). @param scale Scaling factor. @param imageType Image type for the output.
3925 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index to render @param graphics Graphics context to render to @param scaleX X scaling factor @param scaleY Y scaling factor
3926 Splits a PDF document into multiple documents. @param document The PDF document to split. @return List of PDDocument objects representing the splits.
3927 Extracts text from a PDF document and writes to output. @param doc The PDF document to process. @param outputStream Writer to write extracted text.
3928 Creates an FDFDocument from an input stream. @param input Input stream containing FDF data. @return FDFDocument object. @throws IOException if an I/O error occurs.
3929 Renders text from a byte array, handling font and spacing. @param string Byte array containing the text to render.
3930 Creates a GeneralPath for a glyph, handling font mappings. @param baseName The base font name. @param glyphName The glyph name to create a path for.
3931 Creates a PDMMType1Font using a font dictionary. @param fontDictionary Font dictionary to initialize from.
3932 Constructs a `PDType3Font` from a font dictionary. @param fontDictionary Font dictionary object. @throws IOException if an I/O error occurs.
3933 Creates a PDType0Font from a file. @param doc PDF document. @param file Font file.
3934 Creates a PDType0Font from an input stream. @param doc PDF document. @param input Font input stream. @param embedSubset Whether to embed a subset of the font.
3935 Creates a PDType0Font from a file. @param doc PDF document. @param file Font file.
3936 Creates a PDType0Font from an input stream. @param doc PDF document. @param input Font input stream.
3937 Creates a PDType0Font from an input stream. @param doc PDF document. @param input Font input stream. @param embedSubset Whether to embed a subset of the font.
3938 Creates a PDTrueTypeFont from a file and encoding. @param doc PDF document; @param file TTF file; @param encoding Font encoding
3939 Creates a PDTrueTypeFont from an InputStream and encoding. @param doc PDF document; @param input TTF data; @param encoding Font encoding
3940 Retrieves signatures from PDF form fields. Iterates through fields and creates PDSignature objects.
3941 Adds a signature to the document. @param sigObject Signature object to add. @param signatureInterface Signature interface. @param options Signature options.
3942 Imports FDF data into PDF form fields. @param fdf The FDF document to import from. @throws IOException if an error occurs during import.
3943 Writes FDF data to the given Writer as XML. @param output Writer object to write the FDF data to
3944 Evaluates shading function with given input value. @param inputValue Input value for evaluation. @return float array of evaluated values, clamped [0,1].
3945 Evaluates shading values. Applies function mask if available. @param values Input values for shading evaluation. @return Evaluated shading value. @throws IOException if function evaluation fails.
3946 Creates a paint object, applying a soft mask to the graphics state. @return Paint object with soft mask applied. @throws IOException if an I/O error occurs.
3947 Renders a transparency group, handling masks and transformations.
3948 Renders a PDF page to a BufferedImage with RGB format. @param pageIndex Page index (1-based). @param scale Scaling factor.
3949 Renders a PDF page to a BufferedImage at specified DPI. @param pageIndex Page index (1-based). @param dpi Dots per inch for rendering. @return BufferedImage containing the rendered page.
3950 Renders a PDF page to a BufferedImage. @param pageIndex Page index (1-based). @param dpi Dots per inch. @param imageType Image type for the output.
3951 Renders a PDF page to a graphics context with scaling. @param pageIndex Page index to render @param graphics Graphics context to render to @param scale Scaling factor
3952 Splits PDF document into multiple documents based on defined ranges. @return PDDocument representing the split document.
3953 Extracts text from a PDF document. @param doc The PDF document to process. @return Extracted text as a String.
3954 Loads an FDF document from a file. @param filename Path to the FDF file. @return FDFDocument object. @throws IOException if an I/O error occurs.
3955 Loads an FDF document from a file. @param file The file containing the FDF data. @return FDFDocument object. @throws IOException if an I/O error occurs.
3956 Renders text from a byte array. @param string Byte array containing the text to render
3957 Renders text from a COS array, handling scaling and fonts. @param array COSArray containing text and spacing data.
3958 Creates a PDFont object based on font dictionary type. @param dictionary Font dictionary. @param resourceCache Resource cache for font resources. @return PDFont instance or throws IOException.
3959 Creates a PDType0Font from an input stream. @param doc PDF document. @param input Font input stream.
3960 Retrieves the last signature dictionary from the list. Returns null if no signatures are present.
3961 Creates ExternalSigningSupport for PDF, validating signatures. @param output Output stream to write PDF data @return SigningSupport object for PDF document
3962 Processes form fields and applies appearance streams. Handles refreshAppearances and XFA form flattening.
3963 Adds a signature to the document. @param sigObject Signature object. @param options Signature options.
3964 Adds a signature to the document using default signature options. @param sigObject Signature object to add. @param signatureInterface Signature interface.
3965 Writes FDF data to a file using a BufferedWriter. @param fileName The file to write the FDF data to. @throws IOException if an I/O error occurs.
3966 Renders a glyph based on rendering mode and transformations. @param path The path to render. @param font The font to use.
3967 Creates a PDF image object from a PNG with indexed color data. @param doc PDF document. @param state PNGConverterState. @return PDImageXObject or null if conversion fails.
3968 Renders a PDF page to a BufferedImage. @param pageIndex Page index (1-based).
3969 Renders a PDF page to a graphics context with default scaling. @param pageIndex Page index to render @param graphics Graphics context to render to
3970 Retrieves a PDFont object by name, using caching if available. @param name Font name. @return PDFont instance or null if not found.
3971 Creates a PDFont object from a font dictionary. @param dictionary Font dictionary. @throws IOException if an IO error occurs.
3972 Flattens form fields, skipping dynamic XFA forms. Skips flattening if the form is dynamic XFA.
3973 Adds a signature to the document using default options. @param sigObject Signature object to add. @throws IOException if an I/O error occurs.
3974 Saves FDF data to a file. @param fileName The file to write the FDF data to. @throws IOException if an I/O error occurs.
3975 Shades triangles, applying mask if degree is 2. @param triangleList List of triangles to shade. @param array Pixel array to store shaded values. @param deviceBounds Bounding rectangle for shading.
3976 Draws a masked shape using the provided winding rule. @param windingRule The winding rule to apply for masking.
3977 Creates a PDImageXObject from PNG data, validating properties. @param doc PDF document. @param state PNGConverterState. @return PDImageXObject or null if conversion fails.
3978 Sets default font settings from operands. @param operands List of operands for the set font operator.
3979 Adds default font to appearance stream resources if missing. @param appearanceStream The appearance stream to modify.
3980 Retrieves the font from the font setting. @return PDFont object or null if no font is found. @throws IOException if an IO error occurs.
3981 Merges the contents of a source PDF document into a destination PDF document. This method handles various aspects of the merge, including pages, metadata, annotations, and structural elements. It ensures that resources are cloned appropriately to avoid unintended modifications to the original documents. The merging process involves cloning pages, resources, and annotations. It also incorporates metadata, handles page labels, and merges structural trees if applicable. Error handling is included for potential issues during metadata processing. The function also takes care of merging structural elements and updating the number tree maps.
3982 Converts PNG image data to a PDImageXObject. @param doc PDF document. @param imageData PNG image bytes. @return PDImageXObject or null if conversion fails.
3983 Processes appearance settings based on operator and operands. @param operator The operator to process. @param operands List of operands for the operator.
3984 Writes appearance content to stream, handling BMC/EMC tokens. @param widget Annotation widget. @param appearanceStream Appearance stream.
3985 Applies graphics state properties from dictionary. Iterates keys and sets corresponding GS properties.
3986 Merges PDF sources into a destination document with compression. @param streamCacheFunc Creates stream cache for destination. @param compressParameters Compression settings for output.
3987 Creates a PDImageXObject from a byte array, auto-detecting type. @param document PDF document. @param byteArray Image data.
3988 Parses PDF content, processes operators, and handles arguments. Parses content, processes operators, and handles arguments.
3989 Merges PDF sources based on the configured merge mode. @param streamCacheCreateFunction Creates stream cache. @param compressParameters Compression settings.
3990 Creates a PDImageXObject from a byte array, using default factory. @param document PDF document. @param byteArray Image data. @param name Image name.
3991 Constructs a PDDefaultAppearanceString with default appearance and resources. @param defaultAppearance Default appearance string. @param defaultResources Default resources object.
3992 Merges PDF sources using default compression. @param streamCacheCreateFunction Creates stream cache.
3993 Creates a PDDefaultAppearanceString from the DA attribute. @return PDDefaultAppearanceString object with appearance and resources.
3994 Masks appearance stream for widget, handles colors. @param apValue The appearance value to process.
3995 Constructs an AppearanceGeneratorHelper for a text field. @param field The PDVariableText field to process. @throws IOException if default appearance string processing fails.
