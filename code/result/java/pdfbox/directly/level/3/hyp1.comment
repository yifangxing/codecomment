1 Initializes PDF graphics stream engine for a page. @param page PDPage to be processed
2 Constructs a new PDFMarkedContentExtractor with default settings.
3 Initializes PDFTextStripperByArea with beads separation disabled.
4 Retrieves an object from a specified path in a PDF document. @param objPath path to the object, e.g., "Root/Pages/Kids[0]" @return COSBase object or null if not found
5 Retrieves a destination by name from the PDF document. @param name the destination name to look up @return PDDestination object or null if not found @throws IOException if an I/O error occurs during retrieval
6 Retrieves attribute value by name. @param attrName name of the attribute @return COSBase object representing the attribute value or null if not found
7 Retrieves attribute value by name. @param attrName name of the attribute to retrieve @param defaultValue default value to return if attribute is not found @return COSBase object representing the attribute value, or default value if not present
8 Checks if a specified key exists in the COS object. @param name the key to check @return true if the key exists, false otherwise
9 Retrieves an array of strings from a named dictionary object. @param name key for the COSArray in the dictionary @return array of string values or null if not found
10 Retrieves a name or array of names from the COSObject. @param name key to look up in the dictionary @param defaultValue default value if not found @return String or array of Strings, or default value if not applicable
11 Retrieves a number or name from the dictionary. @param name key for the dictionary object @param defaultValue default value to return if not found @return float value if COSNumber, string value if COSName, or default value
12 Retrieves a number or an array of numbers by name. @param name the key for the value in the COS dictionary @param defaultValue the default float value to return if not found @return a Float or float[] depending on the retrieved object, or null if unspecified
13 Retrieves color by name from PDF dictionary. @param name key for the color in the dictionary @return PDGamma object or null if not found
14 Creates a unique PDF dictionary key. @param kind type of resource dictionary @param prefix base string for the key @return unique COSName key
15 Parses a hexadecimal string from the source. @return COSString object parsed from hex data @throws IOException if parsing fails or missing closing bracket
16 Sets file filters in PDF stream. @param filters list of filter names
17 Initializes a new PDRectangle with zero dimensions.
18 Constructs a PDRectangle with specified width and height. @param width rectangle's width @param height rectangle's height
19 Returns a rectangle defined by bounding box coordinates. @return PDRectangle object representing the bounding box
20 Calculates the difference rectangle between annotation and bounding box. @return PDRectangle representing the difference or a default rectangle if no annotation is present
21 Returns a new PDRectangle with uniform padding applied. @param rectangle original rectangle to pad @param padding amount of padding to add on each side @return new PDRectangle with padding applied
22 Adjusts rectangle dimensions by specified differences. @param rectangle original PDRectangle to modify @param differences array of 4 floats: [left, bottom, right, top] @return new PDRectangle with adjusted dimensions
23 Applies differences to a rectangle's dimensions. @param rectangle original PDRectangle object @param differences array of four floats representing adjustments @return new PDRectangle with applied differences or original if invalid input
24 Applies padding to a rectangle. @param box original rectangle @param padding amount of padding to apply @return new PDRectangle with applied padding
25 Creates a PDF XRef stream from a COS document. @param cosDocument the COS document to create the stream from
26 Creates a new object stream in the given PDF document. @param document the PDF document to add the stream to @return the newly created PDObjectStream
27 Creates a PDStream from a PDDocument. @param document PDDocument to create stream from
28 Creates a new PDStream from a COSDocument. @param document the COSDocument to create the stream from
29 Initializes a PDStream with document and input stream. @param doc PDDocument object @param input InputStream for the stream content @param filters COSBase representing filter types @throws IOException if I/O operations fail
30 Creates a COSStream from an input stream. @param document PDDocument to create the stream in @param rawInput InputStream containing data for the stream @return COSStream created from the input stream @throws IOException if I/O error occurs
31 Encodes input stream using specified parameters. @param input source data stream @param encoded destination encoded stream @param parameters encoding configuration dictionary @param index current processing index (unused)
32 Default constructor for PDDefaultAttributeObject.
33 Initializes a new PDUserAttributeObject with OWNER_USER_PROPERTIES as owner.
34 Default constructor for PDStandardAttributeObject.
35 Constructs a new PDOutlineItem instance.
36 Constructs a PDVariableText object. @param acroForm the PDAcroForm to associate with this text field
37 Constructs a PDExportFormatAttributeObject from a COSDictionary. @param dictionary the COSDictionary to initialize with
38 Retrieves the appearance stream. @throws IllegalStateException if this entry is not an appearance stream @return PDAppearanceStream object
39 Retrieves appearance streams from the subdictionary. @return Map of COSName to PDAppearanceStream objects @throws IllegalStateException if entry is not an appearance subdictionary
40 Creates an XObject from a COSBase and resources. @param base the base object to create the XObject from @param resources the resources for the XObject @return a PDXObject or throws IOException if invalid type
41 Adds a TrueType or OpenType font from a file. @param ttfFile the font file to add
42 Constructs a PDShadingType6 from a COS dictionary. @param shadingDictionary the COS dictionary representing the shading
43 Constructs a PDShadingType7 from a COSDictionary. @param shadingDictionary dictionary containing shading details
44 Constructs a PDComboBox instance. @param acroForm the form containing the combo box @param field the dictionary representing the combo box @param parent the parent field of the combo box
45 Constructs a PDListBox. @param acroForm the form containing the list box @param field the dictionary representing the list box @param parent the parent non-terminal field
46 Constructs COSParser with specified parameters. @param source random access read source @param password decryption password @param keyStore input stream for keystore @param keyAlias alias for the key in keystore
47 Initializes a new PDF parser. @param source input source for the PDF file @param decryptionPassword password to decrypt the PDF if encrypted @param keyStore keystore containing security certificates @param alias alias for the certificate in the keystore @param streamCacheCreateFunction function to create cache streams @throws IOException if an I/O error occurs during initialization
48 Creates an output stream. @throws IOException if an I/O error occurs @return OutputStream instance
49 Writes byte data to a PDF appearance stream. @param data byte array containing the data to write @param appearanceStream PDAppearanceStream object to write to @throws IOException if an I/O error occurs
50 Initializes a content stream for an appearance. @param appearance the appearance stream to write to @param compress true if the output should be compressed @throws IOException if an I/O error occurs
51 Sets the text transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
52 Applies a transformation to the graphics context. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
53 Starts text mode for document. Throws exception if already in text mode.
54 Starts text mode. Throws IllegalStateException if already in text mode.
55 Starts text mode for PDF operations. Throws exception if already in text mode.
56 Starts text mode. Throws IllegalStateException if already in text mode.
57 Ends text mode and writes the END_TEXT operator. Throws IllegalStateException if not currently in text mode.
58 Ends text mode and writes END_TEXT operator. Throws IllegalStateException if not in text mode.
59 Ends text mode and writes the END_TEXT operator. Throws IllegalStateException if not in text mode.
60 Ends text mode and writes the END_TEXT operator. Throws IllegalStateException if not in text mode.
61 Sets text leading. @param leading new text leading value @throws IOException if I/O error occurs
62 Sets text leading. @param leading line spacing value @throws IOException if I/O error occurs
63 Sets text leading. @param leading the spacing between lines of text @throws IOException if an I/O error occurs
64 Sets text leading. @param leading line spacing value @throws IOException if writing fails
65 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
66 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
67 Writes a newline to the document. Throws an exception if not in text mode.
68 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
69 Moves text cursor to a new position with offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
70 Moves text cursor to a new line at specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
71 Moves text cursor to a new line at specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
72 Moves text cursor to a new line at specified offset. @param tx horizontal translation @param ty vertical translation @throws IOException if an I/O error occurs
73 Saves the current graphics state. Throws IllegalStateException if called within text mode.
74 Saves the current graphics state. Throws IllegalStateException if called within text mode.
75 Saves the current graphics state. Throws IllegalStateException if in text mode.
76 Saves the current graphics state. Throws IllegalStateException if in text mode.
77 Restores the graphics state by popping color spaces and fonts. Throws IllegalStateException if called within text mode.
78 Restores the graphics state. Throws IllegalStateException if called within text mode.
79 Restores the graphics state. Throws IllegalStateException if called within text mode.
80 Restores the graphics state. Throws IllegalStateException if in text mode. Pops from color space and font stacks.
81 Sets stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if writing fails
82 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
83 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
84 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
85 Sets the stroking color using CMYK values. @param c Cyan component (0.0 to 1.0) @param m Magenta component (0.0 to 1.0) @param y Yellow component (0.0 to 1.0) @param k Black component (0.0 to 1.0) @throws IOException if an I/O error occurs
86 Sets the stroking color using CMYK values. @param c Cyan component (0.0 to 1.0) @param m Magenta component (0.0 to 1.0) @param y Yellow component (0.0 to 1.0) @param k Black component (0.0 to 1.0) @throws IOException if an I/O error occurs
87 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
88 Sets stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
89 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
90 Sets the stroking color to grayscale. @param g grayscale value (must be within 0..1) @throws IOException if an I/O error occurs while writing
91 Sets the stroking color to a grayscale value. @param g grayscale level (0.0 to 1.0) @throws IOException if an I/O error occurs
92 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
93 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1) @throws IOException if an I/O error occurs
94 Sets the non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
95 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
96 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
97 Sets non-stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
98 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
99 Sets non-stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
100 Sets non-stroking color using CMYK values. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1) @throws IOException if an I/O error occurs
101 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
102 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
103 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
104 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
105 Adds a rectangle to the graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
106 Adds a rectangle to the drawing. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
107 Adds a rectangle to the graphics context. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
108 Adds a rectangle to the graphics. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
109 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
110 Draws a cubic Bézier curve. @param x1,y1 first control point @param x2,y2 second control point @param x3,y3 end point @throws IOException if an I/O error occurs
111 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
112 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 end point coordinates @throws IOException if an I/O error occurs
113 Draws a cubic Bézier curve with the given control points. @param x2 x-coordinate of the second control point @param y2 y-coordinate of the second control point @param x3 x-coordinate of the third control point @param y3 y-coordinate of the third control point @throws IOException if an I/O error occurs during drawing
114 Draws a cubic Bézier curve. @param x2 second control point's X coordinate @param y2 second control point's Y coordinate @param x3 third control point's X coordinate @throws IOException if an I/O error occurs
115 Draws a cubic Bézier curve. @param x2 control point X-coordinate @param y2 control point Y-coordinate @param x3 end point X-coordinate @param y3 end point Y-coordinate @throws IOException if an I/O error occurs
116 Draws a cubic Bézier curve. @param x2 second control point X @param y2 second control point Y @param x3 third control point X @throws IOException if an I/O error occurs
117 Draws a cubic Bézier curve with the given control points. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point (end point) @param y3 y-coordinate of the third control point (end point) @throws IOException if an I/O error occurs
118 Draws a cubic Bézier curve with repeated final control point. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point (also end point) @param y3 y-coordinate of the third control point (also end point) @throws IOException if an I/O error occurs
119 Draws a cubic Bézier curve with replicated final point. @param x1 control point X coordinate @param y1 control point Y coordinate @param x3 end point X coordinate @param y3 end point Y coordinate @throws IOException if an I/O error occurs
120 Draws a cubic Bézier curve with the specified control points. @param x1 x-coordinate of the first control point @param y1 y-coordinate of the first control point @param x3 x-coordinate of the third control point (final point) @param y3 y-coordinate of the third control point (final point) @throws IOException if an I/O error occurs during writing
121 Moves the cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
122 Moves the drawing cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
123 Moves the current position to specified coordinates. @param x target X coordinate @param y target Y coordinate @throws IOException if an I/O error occurs
124 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
125 Draws a line to specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs
126 Draws a line to specified coordinates. @param x target X coordinate @param y target Y coordinate @throws IOException if an I/O error occurs
127 Draws a line to the specified coordinates. @param x x-coordinate of the endpoint @param y y-coordinate of the endpoint @throws IOException if an I/O error occurs
128 Draws a line to the specified coordinates. @param x destination x-coordinate @param y destination y-coordinate @throws IOException if an I/O error occurs
129 Strokes the current path. Throws an exception if called in text mode. @throws IOException if writing fails
130 Renders the current path. Throws an exception if called in text mode.
131 Draws the current path. Throws an exception if called in text mode.
132 Applies stroke to the current path. Throws exception if called in text mode.
133 Closes and strokes the current path. Throws IllegalStateException if called in text mode. @throws IOException if an I/O error occurs
134 Closes and strokes the current path. Throws exception if called in text mode.
135 Closes and strokes the current path. Throws an exception if called in text mode.
136 Closes and strokes the current path. Throws an exception if called in text mode.
137 Fills the current path using non-zero winding rule. Throws IllegalStateException if called in text mode.
138 Fills the current path using non-zero winding rule. Throws IllegalStateException if called in text mode.
139 Fills non-zero areas in the current graphics context. Throws IllegalStateException if called within a text block.
140 Fills the current path using non-zero winding rule. Throws IllegalStateException if called in text mode.
141 Writes fill rule for even-odd. Throws exception if in text mode.
142 Fills even-odd areas in graphics. Throws IOException on I/O error. Throws IllegalStateException if called in text mode.
143 Writes FILL_EVEN_ODD operator. Throws IOException on error.
144 Fills the current path using the even-odd rule. Throws an exception if called in text mode.
145 Fills and strokes the current path. Throws exception if called in text mode.
146 Fills and strokes the current path. Throws an exception if called in text mode.
147 Fills and strokes the current path. Throws IOException on write failure. Throws IllegalStateException if called in text mode.
148 Fills and strokes the current path. Throws an exception if called in text mode.
149 Fills and strokes the current path using even-odd rule. Throws exception if called in text mode.
150 Fills and strokes the current path using even-odd rule. Throws IllegalStateException if called in text mode.
151 Fills and strokes the current path using even-odd rule. Throws exception if called in text mode.
152 Fills and strokes the current path using even-odd rule. Throws an exception if called in text mode.
153 Closes path, fills it using non-zero winding rule, and strokes it. Throws exception if called in text mode.
154 Closes path, fills using non-zero winding rule, and strokes it. Throws exception if called in text mode.
155 Closes path, fills using non-zero winding rule, and strokes it. Throws exception if called in text mode.
156 Closes, fills, and strokes the current path. Throws exception if called in text mode.
157 Closes path, fills using even-odd rule, and strokes. Throws exception if called in text mode.
158 Closes path, fills using even-odd rule, and strokes it. Throws exception if called in text mode.
159 Closes path, fills using even-odd rule, and strokes. Throws IllegalStateException if called in text mode.
160 Closes path, fills it using even-odd rule, and strokes it. Throws IllegalStateException if called in text mode.
161 Closes the current path in graphics mode. Throws IllegalStateException if called within a text block. @throws IOException if an I/O error occurs while writing
162 Closes the current path in graphics context. Throws exception if called within a text block.
163 Closes the current path in graphics context. Throws exception if called within a text block.
164 Closes the current path. Throws IllegalStateException if called within a text block.
165 Clips the current path. Throws an exception if called in text mode.
166 Clips the current path. Throws IllegalStateException if in text mode.
167 Clips the current path. Throws an exception if called in text mode.
168 Clips the current path. Throws an exception if called in text mode.
169 Clips the current path using an even-odd rule. Throws IllegalStateException if called within a text block.
170 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode.
171 Clips the current path using even-odd rule. Throws IllegalStateException if in text mode.
172 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode.
173 Sets line width for drawing operations. @param lineWidth the width of the line to be used in drawing @throws IOException if an I/O error occurs while writing
174 Sets the line width for drawing operations. @param lineWidth the desired line width @throws IOException if an I/O error occurs
175 Sets line width in graphics context. @param lineWidth width of the line @throws IOException if I/O error occurs
176 Sets line width in PDF. @param lineWidth desired line width @throws IOException if an I/O error occurs
177 Sets the line join style. @param lineJoinStyle integer representing the line join style (0, 1, or 2) @throws IOException if an I/O error occurs while writing
178 Sets the line join style. @param lineJoinStyle join style (0, 1, or 2) @throws IOException if writing fails
179 Sets the line join style. @param lineJoinStyle style identifier (0, 1, or 2) @throws IOException if I/O error occurs
180 Sets the line join style. @param lineJoinStyle integer representing line join style (0-2) @throws IOException if writing fails
181 Sets the line cap style. @param lineCapStyle integer representing the line cap style (0, 1, or 2) @throws IOException if an I/O error occurs
182 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if an I/O error occurs
183 Sets the line cap style. @param lineCapStyle line cap style (0-2) @throws IOException if an I/O error occurs
184 Sets the line cap style. @param lineCapStyle integer representing the cap style (0-2) @throws IOException if an I/O error occurs
185 Sets line dash pattern. @param pattern array of dash lengths @param phase offset for the start of the pattern
186 Sets line dash pattern. @param pattern array of dash lengths @param phase starting point of the pattern @throws IOException if writing fails
187 Sets line dash pattern. @param pattern array of dash lengths @param phase offset for the start of the dash pattern @throws IOException if writing fails
188 Sets line dash pattern and phase. @param pattern array of dash lengths @param phase starting point of the dash pattern
189 Sets the line miter limit. @param miterLimit float value for miter limit, must be greater than 0 @throws IOException if an I/O error occurs while writing
190 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs while writing
191 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs while writing
192 Sets the line miter limit. @param miterLimit the miter limit value (must be greater than 0) @throws IOException if an I/O error occurs
193 Ends marked content in PDF. @throws IOException if an I/O error occurs
194 Ends marked content in PDF. @throws IOException if an I/O error occurs
195 Ends marked content in PDF. @throws IOException if an I/O error occurs
196 Ends marked content in PDF. @throws IOException if an I/O error occurs
197 Sets character spacing in the document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
198 Sets character spacing in the document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs while writing
199 Sets character spacing in the document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs while writing
200 Sets character spacing in text. @param spacing the amount of space between characters @throws IOException if an I/O error occurs while writing
201 Sets word spacing in PDF. @param spacing the amount of space to add between words @throws IOException if an I/O error occurs
202 Sets word spacing in PDF document. @param spacing the amount of space between words @throws IOException if an I/O error occurs
203 Sets word spacing in PDF. @param spacing word spacing value @throws IOException if an I/O error occurs
204 Sets word spacing in PDF. @param spacing the spacing value to apply @throws IOException if an I/O error occurs
205 Sets horizontal scaling for text. @param scale factor to apply for horizontal scaling @throws IOException if an I/O error occurs
206 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
207 Sets text horizontal scaling. @param scale scaling factor to apply
208 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
209 Sets text rendering mode. @param rm rendering mode to apply @throws IOException if I/O error occurs
210 Sets rendering mode for text. @param rm new rendering mode to apply @throws IOException if I/O error occurs while writing
211 Sets rendering mode. @param rm new rendering mode @throws IOException if I/O error occurs
212 Sets rendering mode for text. @param rm RenderingMode to be applied @throws IOException if I/O error occurs during writing
213 Sets text rise value. @param rise amount of vertical space above baseline @throws IOException if I/O error occurs during operation
214 Sets text rise value. @param rise the amount of rise for text @throws IOException if I/O error occurs
215 Sets text rise. @param rise amount of text rise
216 Sets text rise value. @param rise amount of text rise @throws IOException if I/O error occurs
217 Retrieves the bounding box of the PDF element. @return PDRectangle object representing the bounding box or null if not set
218 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
219 Retrieves the rectangle associated with an annotation. @return PDRectangle object or null if no rectangle is defined
220 Retrieves the fringe rectangle of an annotation. @return PDRectangle representing the fringe or null if not set
221 Retrieves the fringe rectangle of an annotation. @return PDRectangle representing the fringe or null if not set
222 Retrieves the fringe rectangle of an annotation. @return PDRectangle object representing the fringe or null if not set
223 Retrieves the fringe rectangle from an annotation. @return PDRectangle representing the fringe or null if not set
224 Retrieves the font bounding box. @return PDRectangle representing the font's bounding box or null if not available
225 Retrieves font bounding box. @return PDRectangle object or null if not found
226 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not set
227 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not available
228 Retrieves the bounding box of the PDF object. @return PDRectangle representing the bounding box or null if not defined
229 Retrieves the rectangle from the dictionary. @return PDRectangle object or null if invalid data
230 Retrieves the rectangle difference. @return PDRectangle object or null if not available
231 Retrieves rectangle difference from PDF object. @return PDRectangle representing the difference or null if not present
232 Retrieves the bounding box rectangle. @return PDRectangle object or null if not found
233 Retrieves the rectangle from the bead. @return PDRectangle object or null if not found
234 Sets line dash pattern for graphics. @param array COSArray containing dash lengths @param phase offset of the pattern
235 Retrieves line dash pattern from dictionary. @return PDLineDashPattern object or null if not found
236 Generates a stencil image from a PDF image. @param pdImage source PDF image @param paint color to fill the stencil @return BufferedImage with applied stencil @throws IOException if I/O error occurs
237 Retrieves the transformation matrix. @return Matrix object representing the transformation
238 Retrieves matrix from COS object. @return Matrix object created from dictionary entry
239 Retrieves matrix from COS object. @return Matrix object created from dictionary entry or null if not present
240 Retrieves inheritable attribute from PDF dictionary. @param node current dictionary node @param key attribute key to fetch @return COSBase value or null if not found
241 Retrieves boolean value for a given COSName key. @param key the COSName to look up @param defaultValue the default boolean value if key is not found @return the boolean value associated with the key or default value
242 Retrieves an integer value from a COSName key with a default. @param key the COSName key to look up @param defaultValue the default integer value if key not found @return the integer value associated with the key or default
243 Retrieves integer value from nested COSDictionary keys. @param firstKey primary key in the dictionary @param secondKey secondary key nested under the first key @return integer value or -1 if not found
244 Constructs a PDInlineImage from given parameters, data, and resources. @param parameters COSDictionary containing image parameters @param data byte array of raw image data @param resources PDResources object for resource management @throws IOException if an I/O error occurs during decoding
245 Determines file suffix based on image filters. @return appropriate file suffix ("png", "jpg", or "tiff")
246 Retrieves COS objects by specified types. @param type1 first object type @param type2 second object type @return list of COSObject matching the types
247 Converts an integer code to its Unicode character representation. @param code the integer code of the character @return the Unicode character as a string
248 Checks if the document is encrypted. @return true if the document is encrypted, false otherwise
249 Parses an FDF file and returns a FDFDocument. @throws IOException if parsing fails
250 Retrieves the PDF acroform with default fixups applied. @return PDAcroForm object representing the form in the document
251 Checks if the document contains a specific color space. @param name COSName representing the color space @return true if the color space exists, false otherwise
252 Retrieves extended graphics state by name. @param name the name of the graphics state @return PDExtendedGraphicsState object or null if not found
253 Checks if the specified XObject is an image. @param name the name of the XObject to check @return true if the XObject is an image, false otherwise
254 Retrieves all color space names. @return Iterable of COSName objects representing color spaces
255 Retrieves XObject names. @return Iterable of COSName objects representing XObjects
256 Retrieves font names. @return Iterable of COSName objects representing font names
257 Retrieves property names. @return Iterable of COSName objects representing property names
258 Retrieves shading names. @return Iterable of COSName objects representing shading names
259 Retrieves pattern names from the document. @return Iterable of COSName containing pattern names
260 Retrieves external graphics state names. @return Iterable of COSName objects representing external graphics states
261 Retrieves standard crypt filter dictionary. @return PDCryptFilterDictionary object or null if not found
262 Retrieves default encryption filter dictionary. @return PDCryptFilterDictionary object or null if not found
263 Retrieves character procedure for a given code. @param code character code @return PDType3CharProc object or null if not found
264 Retrieves rollover appearance entry. @return PDAppearanceEntry for rollover state or normal state if not available
265 Retrieves the down appearance entry. @return PDAppearanceEntry for down state or normal state if not found
266 Retrieves the first child outline item. @return PDOutlineItem representing the first child or null if none exists
267 Retrieves the last child outline item. @return PDOutlineItem representing the last child or null if none exists
268 Retrieves the signature value. @return PDSignature object containing the signature details
269 Retrieves value by index from a tree node. @param index the index to retrieve the value for @return the value at the specified index or null if not found @throws IOException if an I/O error occurs
270 Retrieves the number of output parameters. @return Number of output parameters or 0 if none
271 Retrieves PDRange for specified output index. @param n index of the desired range @return PDRange object representing the range
272 Clips input values to specified ranges. @param inputValues array of input values to clip @return array of clipped values
273 Returns the number of input parameters. @return int representing the count of input parameters
274 Retrieves domain range for input index. @param n index of the domain value @return PDRange object representing the domain range
275 Calculates the sample index for a given vector. @param vector input vector of integers @return computed index as an integer
276 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not available
277 Retrieves encoding range for parameter. @param n index of the parameter @return PDRange object representing the encoding range
278 Checks if the top attachment is present. @return true if top attachment exists, false otherwise
279 Checks if the bottom attachment is active. @return true if bottom is attached, false otherwise
280 Checks if the left component is attached. @return true if left component is attached, false otherwise
281 Checks if the right side is attached. @return true if right side is attached, false otherwise
282 Constructs a PDCIDFont from a COSDictionary. @param fontDictionary dictionary containing font data @param parent PDType0Font that contains this CID font
283 Initializes a new DictionaryEncoding with the given font encoding. @param fontEncoding COSDictionary representing the font encoding
284 Initializes dictionary encoding for a font. @param fontEncoding font's encoding dictionary @param isNonSymbolic true if the font is non-symbolic @param builtIn built-in encoding for symbolic fonts
285 Initializes a ShadingContext with given parameters. @param shading PDShading object representing the shading @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs during initialization
286 Retrieves the decode range for a specific parameter. @param paramNum index of the parameter @return PDRange object or null if not applicable
287 Reads and signs PDF content. @param pdfFile input stream of the PDF file @return signed content as byte array @throws IOException if an I/O error occurs
288 Returns signed content of a PDF file. @param pdfFile the input PDF file as byte array @return signed content as byte array @throws IOException if an I/O error occurs
289 Retrieves the revision number from the dictionary. @return The revision number as a long value.
290 Retrieves the minimum revision number. @return the minimum revision as a long value
291 Creates a COSInputStream with decoding applied. @param filters list of filters to apply @param parameters dictionary of parameters for decoding @param in input stream to decode @param options decode options @return COSInputStream with decoded data @throws IOException if an I/O error occurs
292 Creates a view for reading data with optional filters. @return RandomAccessRead object @throws IOException if an I/O error occurs
293 Creates an InputStream with optional filtering. @param stopFilters list of filter names to stop at @return filtered InputStream or original if no filters applied @throws IOException if I/O error occurs
294 Retrieves a floating-point number from the COS object by key. @param name key to identify the number in the COS object @return the float value associated with the key, or default if not found
295 Retrieves conversion factor from COS object. @return float value of "C" key or default if not found
296 Retrieves the leader line length. @return float value representing the leader line length
297 Retrieves leader line extension value. @return float representing leader line extension
298 Retrieves leader line offset. @return Float value representing leader line offset
299 Retrieves the 'V' value from the dictionary. @return The float value associated with 'V', or default if not present
300 Retrieves the CYX value from the COS object. @return float value of CYX or default if not found
301 Retrieves a float value by key from COS object. @param name the key to look up in the COS object @param defaultValue the default value to return if key is not found @return the float value associated with the key or default value
302 Retrieves intensity value. @return float representing intensity, default is 0 if not found
303 Computes the font height for a given PDFont. Adjusts bounding box and uses CapHeight or Ascent/Descent if available. @param font the PDFont to compute the height for @return the computed font height @throws IOException if an I/O error occurs
304 Generates default position vector. @param cid component ID @return Vector with centered x-coordinate and initial y-coordinate
305 Retrieves properties by name. @param name the property name @return PDPropertyList object or null if not found
306 Retrieves optional content properties. @return PDPropertyList object or null if not present
307 Retrieves optional content properties. @return PDPropertyList object or null if not found
308 Retrieves OCGs from the dictionary. @return List of PDPropertyList objects representing OCGs
309 Retrieves optional content properties. @return PDPropertyList object or null if none exists
310 Validates and updates XRef offsets if necessary. Throws IOException on I/O errors during validation or update.
311 Saves data to a file. @param fileName the File object representing the destination @throws IOException if an I/O error occurs
312 Sets the third element of the array to the specified value. @param high the new value for the third element
313 Sets the current page number. @param pageNumber the new page number to set
314 Removes an object from the list. @param o object to be removed @return true if removal is successful, false otherwise
315 Removes element at specified index. @param index position of the element to remove @return removed element @throws UnsupportedOperationException if list is filtered
316 Removes an object from the list, handling nested COSObjects. @param o the object to remove @return true if the object was successfully removed, false otherwise
317 Removes a user property from the document. @param userProperty the property to remove
318 Removes a subject from the document's metadata. @param subject byte array representing the subject to remove
319 Removes a key usage extension from the dictionary. @param keyUsageExtension the key usage extension to remove
320 Removes an issuer from the document's issuer list. @param issuer byte array representing the issuer to remove
321 Removes an OID from the dictionary's OID array. @param oid byte array representing the OID to be removed
322 Clears all entries from both maps.
323 Removes entry by key from both maps. @param key unique identifier for the entry @return the value associated with the removed key, or null if not found
324 Recursively collects entries in a COSArray for incremental updates. @param array the COSArray to process @return true if any entry requires parent update, false otherwise
325 Recursively collects and processes COS objects. @param object the COS object to collect @return true if collection is successful, false otherwise
326 Sets the origin document state. @param originDocumentState new state to be set
327 Updates document state for a specific child. @param child the child object to update
328 Retrieves the upper limit from a COSArray. @return String representation of the upper limit or null if not found
329 Retrieves the lower limit from a COSArray. @return String representation of the lower limit or null if not found
330 Retrieves the value of a named attribute as a string. @param name the attribute key to look up @return the string value of the attribute, or null if not found
331 Retrieves rendering intent from dictionary. @return RenderingIntent object or null if not found
332 Retrieves the name associated with key "N". @return String representation of the name or null if not found
333 Retrieves name as string with default. @param key PDF key to fetch @param defaultValue default value if key not found @return name as string or default value
334 Retrieves guideline style as a string. @return Style of the guideline or null if not found
335 Retrieves the icon name of the annotation. @return The icon name as a string or null if not found.
336 Retrieves attachment name. @return Name of the attachment as a string
337 Retrieves the line ending style of an annotation. @return the line ending style as a string
338 Retrieves the highlight mode. @return Highlight mode as a string or default value if not set.
339 Retrieves the reply type from the COS object. @return reply type as a string or default value if not found
340 Retrieves the name from the COS object. @return The name as a string or an empty string if not found.
341 Retrieves the name from the COS object. @return The name as a string or null if not found.
342 Retrieves the highlighting mode. @return Highlighting mode as a string or default "I" if not set
343 Retrieves the style of the object. @return Style as a string or default value if not set
344 Retrieves the type of the COS object. @return The type as a string, defaulting to "ExData" if not specified.
345 Retrieves the transition style as a string. @return Transition style name or default if not specified
346 Retrieves the dimension of the transition effect. @return String representing the dimension or default if not specified
347 Retrieves motion transition effect. @return motion effect as string or null if not set
348 Retrieves non-full screen page mode preference. @return page mode as a string or default if not set
349 Retrieves the reading direction preference. @return Reading direction as a string (e.g., "L2R" for left-to-right)
350 Retrieves the view area setting. @return String representation of the view area or "CropBox" if not set
351 Retrieves the view clip setting. @return string representation of the view clip or default boundary if not set
352 Retrieves print area preference. @return String representing print area or default boundary if not set
353 Retrieves the print clip setting. @return String representation of the print clip or default boundary if not set.
354 Retrieves print scaling setting. @return current print scaling value or default if not set
355 Checks and validates the cross-reference table offset. @param startXRefOffset initial offset to check @return validated offset or -1 if invalid @throws IOException if an I/O error occurs
356 Checks if the collection has only one entry which is the owner. @return true if empty under specific conditions, false otherwise
357 Retrieves the parent structure node. @return PDStructureNode representing the parent, or null if none exists
358 Creates an object from a PDF COSBase element. @param kid the COSBase element to process @return created object or integer if applicable, otherwise null
359 Initializes PDEncryption with a COSDictionary. @param dictionary PDF encryption settings
360 Retrieves the security handler. @return SecurityHandler instance for protection policies @throws IOException if no security handler is available
361 Retrieves annotations from an FDF document. @return List of FDFAnnotation objects or null if none exist @throws IOException if there's an I/O error reading the annotations
362 Checks if character set matches between CIDSystemInfo and FontInfo. @param cidSystemInfo CIDSystemInfo object to compare @param info FontInfo object containing character set information @return true if character sets match, false otherwise
363 Checks if the channel is an N-channel. @return true if attributes are not null and it's an N-channel, false otherwise
364 Retrieves the open action for a PDF document. @return PDDestinationOrAction object representing the open action or null if none @throws IOException if an I/O error occurs while accessing the PDF
365 Retrieves an action from a PDF field. @return PDAction object or null if no action is defined
366 Retrieves JavaScript actions from document dictionary. @return Map of named JavaScript actions or null if not present
367 Retrieves an action from the "F" entry in the actions dictionary. @return PDAction object or null if not found
368 Retrieves an action associated with key 'E'. @return PDAction object or null if not found
369 Retrieves an action associated with key 'X'. @return PDAction object or null if not found
370 Retrieves the D action from the actions dictionary. @return PDAction object or null if not found
371 Retrieves the U action from the dictionary. @return PDAction object or null if not found
372 Retrieves the "FO" action from a PDF document. @return PDAction object or null if not found
373 Retrieves the "BL" action from PDF document. @return PDAction object for "BL" or null if not present
374 Retrieves and creates an action from the PO dictionary. @return PDAction object or null if not found
375 Retrieves PC action from document. @return PDAction object or null if not found
376 Retrieves an action associated with a PDF annotation. @return PDAction object or null if not found
377 Retrieves the PI action from the document. @return PDAction object representing the PI action or null if not present
378 Retrieves web capture action. @return PDAction object or null if not found
379 Retrieves the web search action. @return PDAction object representing the web search or null if not present
380 Retrieves DS action from document. @return PDAction object or null if not found
381 Retrieves WP action from dictionary. @return PDAction object or null if not found
382 Retrieves the DP action from the document. @return PDAction object or null if not found
383 Retrieves action associated with key 'K'. @return PDAction object or null if not found
384 Retrieves an action associated with key 'F'. @return PDAction object or null if not found
385 Retrieves and creates a PDF action from the 'V' dictionary entry. @return PDAction object or null if not found
386 Retrieves action dictionary and creates PDAction. @return PDAction object or null if not found
387 Retrieves an action from the document's O entry. @return PDAction object or null if not found
388 Retrieves an action from the dictionary. @return PDAction object or null if not found
389 Retrieves an action from the PDF object. @return PDAction instance or null if not present
390 Retrieves an action from the PDF object. @return PDAction object or null if not found
391 Retrieves an action from the PDF object. @return PDAction object created from the associated COS dictionary
392 Retrieves string value of a property. @param propertyKey key of the property to retrieve @return string value of the property or null if not found
393 Retrieves custom metadata value by field name. @param fieldName name of the metadata field @return value of the specified metadata field or null if not found
394 Retrieves string value by key. @param name key for the string value @return string value associated with the key
395 Retrieves the base string from the COS object. @return Base string or null if not found
396 Retrieves the version string from the dictionary. @return Version string associated with "REx" key
397 Retrieves units from COS object. @return units as string or null if not present
398 Retrieves string value by key with default. @param key unique identifier for the string @param defaultValue value to return if key not found @return string associated with key or default value
399 Retrieves a string value from an embedded dictionary. @param embedded name of the embedded dictionary @param key key for the desired string value @param defaultValue default value if key is not found @return string value or default if key is missing
400 Retrieves operation type from parameters. @return operation string or default "Open" if not specified
401 Retrieves default appearance string. @return default appearance value from dictionary or empty string if not found
402 Retrieves the filename using various file retrieval methods. @return the filename as a String, or null if all methods fail
403 Checks if a group exists by name. @param groupName the name of the group to check @return true if the group exists, false otherwise
404 Constructs the fully qualified name. @return String representing the fully qualified name
405 Retrieves export values of options. @return List of option export values
406 Parses input using provided syntax handler. @param input text to be parsed @param handler processes parsing events
407 Encrypts or decrypts data using specified algorithms. @param objectNumber unique identifier for the encryption context @param genNumber generation number for key calculation @param data input stream containing the data to be processed @param output output stream for the processed data @param decrypt true if decrypting, false if encrypting @throws IOException if an I/O error occurs during processing
408 Computes encrypted key based on encryption revision. @param password user or owner password @param o owner hash @param u user hash @param oe owner encryption key @param ue user encryption key @param permissions access permissions @param id document identifier @param encRevision encryption revision @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to encrypt metadata @param isOwnerPassword indicates if owner password is used @return encrypted key as byte array @throws IOException on encryption failure
409 Checks if the provided password matches user or owner permissions. @param password byte array of the password to check @param user byte array representing user data @param owner byte array representing owner data @param permissions permission level for the user @param id unique identifier for the document @param encRevision encryption revision version @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata should be encrypted @return true if password matches, false otherwise @throws IOException if unknown encryption revision is encountered
410 Finds a FontBoxFont based on format and PostScript name. @param format font format type @param postScriptName unique font identifier @return FontBoxFont object or null if not found
411 Normalizes a list of LineItem objects into WordWithTextPositions. @param line list of LineItem to be processed @return List of WordWithTextPositions representing normalized words
412 Converts COSString to Calendar. @param text COSString containing date information @return Calendar object or null if input is null
413 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
414 Begins marked content with specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
415 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs during writing
416 Begins marked content with a specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
417 Begins marked content sequence. @param tag COSName representing the content tag @param mcid Marked content identifier, must not be negative @throws IOException if an I/O error occurs
418 Begins marked content sequence. @param tag content tag name @param mcid unique mark identifier, must be non-negative @throws IOException if writing fails
419 Begins marked content with a tag and MCID. @param tag COSName representing the content tag @param mcid Marked content identifier, must not be negative @throws IOException if an I/O error occurs
420 Begins marked content with a tag and ID. @param tag the COSName tag for marking content @param mcid the marked content identifier, must be non-negative
421 Sets marked content point in PDF. @param tag COSName representing the mark @throws IOException if I/O error occurs
422 Writes marked content point with specified tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
423 Sets marked content point with specified tag. @param tag COSName representing the content tag
424 Sets marked content point in PDF. @param tag COSName representing the tag
425 Writes a COS string to an output stream. @param output the OutputStream to write to @param cosString the COSString to write
426 Shows text using the current font and mode. @param text string to display @throws IOException if an I/O error occurs
427 Initializes a PageDrawer with specified parameters. @param parameters configuration for page drawing @throws IOException if an I/O error occurs during initialization
428 Finds the page destination for a named destination. @param namedDest the named destination to find @return PDPageDestination object or null if not found @throws IOException if an I/O error occurs
429 Retrieves the color associated with 'C' key. @return PDColor object or null if not found
430 Retrieves the border color of a PDF element. @return PDColor object representing the border color
431 Retrieves the background color. @return PDColor representing the background
432 Parses a COS string from the input source. @return COSString object representing the parsed string @throws IOException if parsing fails due to invalid format or I/O error
433 Extracts contents from a PDF file using specified byte range. @param pdfFile input stream of the PDF file @return byte array containing extracted contents
434 Extracts contents from a PDF file. @param pdfFile PDF file as byte array @return extracted contents as byte array @throws IOException if an I/O error occurs
435 Constructs an immutable rectangle. @param width the width of the rectangle @param height the height of the rectangle
436 Retrieves the bounding box rectangle. @return PDRectangle representing the bounding box
437 Initializes metadata for a PDF document. @param document the PDF document to associate with this metadata
438 Creates a new embedded file in a PDF document. @param document the parent PDF document
439 Initializes a PDXObject with a document and subtype. @param document the PDF document to associate with @param subtype the XObject subtype
440 Constructs a new PDImageXObject from a given PDDocument. @param document The PDDocument to create the image from.
441 Constructs a PDStream from a document and input stream. @param doc PDDocument to associate with the stream @param input InputStream containing the stream data @throws IOException if an I/O error occurs
442 Constructs a PDStream with a document, input stream, and filter. @param doc PDDocument to associate the stream with @param input InputStream containing data for the stream @param filter COSName representing the filter applied to the stream @throws IOException if there's an error processing the input stream
443 Constructs a PDStream with document, input stream, and filters. @param doc PDDocument to associate the stream with @param input InputStream containing the stream data @param filters COSArray of filters to apply
444 Constructs an image object from a document and input stream. @param document the PDF document @param encodedStream the image data stream @param cosFilter the compression filter @param width the image width in pixels @param height the image height in pixels @param bitsPerComponent bits per color component @param initColorSpace initial color space for the image @throws IOException if an I/O error occurs
445 Constructs a new PDLayoutAttributeObject with OWNER_LAYOUT as owner.
446 Constructs a new PDListAttributeObject with OWNER_LIST as the owner.
447 Constructs a new PDPrintFieldAttributeObject with OWNER_PRINT_FIELD as owner.
448 Constructs a PDTableAttributeObject and sets its owner to OWNER_TABLE.
449 Creates an attribute object based on the dictionary's owner. @param dictionary COSDictionary containing attribute data @return PDAttributeObject instance or default if no match found
450 Retrieves the normal appearance stream. @return PDAppearanceStream object or null if not available
451 Retrieves the ON value from the first annotation widget. @return The name of the ON value or an empty string if not found
452 Retrieves the transparency group. @return PDTransparencyGroup object or null if not found @throws IOException if an I/O error occurs
453 Initializes a COSParser with a given source. @param source RandomAccessRead object containing PDF data
454 Initializes a PDF parser with decryption details. @param source input stream of the PDF file @param decryptionPassword password for decrypting the PDF @param keyStore InputStream containing the keystore data @param alias alias for the keystore entry @throws IOException if an I/O error occurs
455 Creates a content stream for an appearance. @param appearance PDF appearance object @throws IOException if there's an I/O error
456 Initializes a content stream for a PDF form. @param form PDF form object to write to @throws IOException if an I/O error occurs
457 Initializes a content stream for an appearance. @param doc PDF document @param appearance appearance stream to write to @throws IOException if there is an error creating the output stream
458 Initializes a content stream for a tiling pattern. @param pattern the tiling pattern to process @throws IOException if an I/O error occurs
459 Sets the text transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
460 Sets the text transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
461 Sets the text transformation matrix. @param matrix transformation matrix to apply @throws IOException if an I/O error occurs
462 Sets the text transformation matrix. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
463 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
464 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs while writing
465 Applies a transformation to the graphics state. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
466 Applies a transformation to the graphics context. @param matrix the transformation matrix to apply @throws IOException if an I/O error occurs
467 Draws an arrow on a PDF canvas. @param cs the content stream for drawing @param x starting x coordinate @param y starting y coordinate @param len length of the arrow @throws IOException if an I/O error occurs
468 Draws a shape with specified line width and optional stroke/fill. @param lineWidth thickness of the shape's outline @param hasStroke whether to apply a stroke @param hasFill whether to apply a fill @throws IOException if an I/O error occurs during drawing
469 Draws a diamond on the PDF canvas. @param cs content stream for drawing @param x center x-coordinate @param y center y-coordinate @param r radius of the diamond @throws IOException if an I/O error occurs
470 Draws a circle on the PDF canvas. @param cs content stream for drawing @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle @throws IOException if an I/O error occurs
471 Draws a circle on the PDF canvas. @param cs PDF content stream for drawing @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r radius of the circle @throws IOException if an I/O error occurs
472 Draws a paperclip shape on the PDF. @param contentStream the stream to draw on
473 Sets line width if different from default (1.0). @param lineWidth desired line width @throws IOException if an I/O error occurs
474 Generates a BufferedImage for a tiling pattern. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor for coloring @param xform AffineTransform for scaling and transformation @param anchorRect Rectangle2D defining the anchor area @return BufferedImage of the tiling pattern or null if error occurs
475 Calculates the anchor rectangle for a tiling pattern. @param pattern the PDTilingPattern object @return scaled Rectangle2D representing the anchor rect @throws IOException if /BBox is missing or other I/O error occurs
476 Retrieves the stencil image with specified paint. @param paint the paint to apply to the stencil @return BufferedImage of the stencil @throws IOException if an I/O error occurs
477 Retrieves raw raster data from a PDF image. @param pdImage the PDF image object @return WritableRaster containing pixel data @throws IOException if image is empty or invalid dimensions
478 Converts a PDF image to a BufferedImage. @param pdImage the PDF image object @param region the region of interest in the image @param subsampling factor for reducing image resolution @param colorKey array defining color key mask @return BufferedImage representation of the PDF image @throws IOException if image processing fails
479 Retrieves the resources for the page. @return PDResources object containing page resources
480 Retrieves the media box of the page. Returns a PDRectangle object representing the page's dimensions or default U.S. Letter if not found.
481 Retrieves the rotation angle of a PDF page. @return Rotation angle in degrees, multiple of 90, or 0 if not set
482 Retrieves a boolean value by key with a default. @param key the key to search for @param defaultValue the default boolean value if key not found @return the boolean value associated with the key, or default if not present
483 Checks if the PDF stream is marked as volatile. @return true if the stream is volatile, false otherwise
484 Checks if the PDF annotation is hidden. @return true if hidden, false otherwise
485 Determines if metadata should be encrypted. @return true if metadata encryption is enabled, false otherwise
486 Retrieves caption status. @return true if caption is enabled, false otherwise
487 Checks if content should scale to fit annotation. @return true if scaling is enabled, false otherwise
488 Determines if renaming is enabled. @return true if renaming is enabled, false otherwise
489 Checks if the PDF document is isolated. @return true if the document is isolated, false otherwise
490 Checks if the document is marked as a knockout. @return true if the document is a knockout, false otherwise
491 Retrieves anti-aliasing setting from dictionary. @return true if anti-aliasing is enabled, false otherwise
492 Retrieves stroking overprint control setting. @return true if stroking overprint is enabled, false otherwise
493 Retrieves automatic stroke adjustment setting. @return true if enabled, false otherwise
494 Retrieves the alpha source flag. @return true if alpha source is enabled, false otherwise
495 Retrieves the text knockout flag from the dictionary. @return true if text knockout is enabled, false otherwise
496 Retrieves boolean value of 'H' from action dictionary. @return true if 'H' is true or not present; false otherwise
497 Checks if the action is synchronous. @return true if the action is synchronous, false otherwise
498 Retrieves repeat status. @return true if repeat is enabled, false otherwise
499 Retrieves mix setting from action. @return true if mix is enabled, false otherwise
500 Checks if the PDF annotation has a caption. @return true if the annotation has a caption, false otherwise
501 Checks if the document is open. @return true if the document is open, false otherwise
502 Retrieves pre-release status from dictionary. @return true if pre-release is enabled, false otherwise
503 Retrieves non-EFont warning status. @return boolean indicating if non-EFont warnings are suppressed
504 Retrieves trusted mode status. @return true if trusted mode is enabled, false otherwise
505 Checks if appearances are needed. @return true if appearances need to be generated; otherwise, false
506 Checks if the fly area is opaque. @return true if the fly area is opaque, false otherwise
507 Checks if the toolbar should be hidden. @return true if toolbar is hidden, false otherwise
508 Checks if the menu bar is hidden. @return true if menu bar is hidden, false otherwise
509 Checks if window UI should be hidden. @return true if window UI is hidden, false otherwise
510 Checks if the window should fit the page. @return true if window should fit the page, false otherwise
511 Checks if window should be centered. @return true if window centering is enabled, false otherwise
512 Checks if document title should be displayed. @return true if document title is enabled, false otherwise
513 Retrieves an integer value from a nested dictionary. @param embeddedDictionary name of the embedded dictionary @param key dictionary key for the integer value @param defaultValue default integer value if key not found @return integer value or default if missing
514 Retrieves an integer value associated with a given key. @param key the key to look up @return the integer value or -1 if not found
515 Retrieves an integer value associated with a given COSName. @param key the COSName key to look up @return the integer value or -1 if not found
516 Retrieves an integer value from a map using a string key. @param key the key as a string @param defaultValue default value to return if key is not found @return integer value associated with the key or default value
517 Checks if a specific bit flag is set in an integer value. @param field COSName representing the field to check @param bitFlag integer value of the bit flag to test @return true if the bit flag is set, false otherwise
518 Retrieves the count value from the COS dictionary. @return The integer count value or 0 if not present
519 Retrieves the start value from the root. @return integer value of KEY_START or default 1 if not set
520 Retrieves the order value from the COS object. @return the order value as an integer, defaulting to 1 if not found
521 Retrieves the revision number of the PDF document. @return The revision number as an integer.
522 Retrieves the length value from the crypt filter dictionary. @return the length value or 40 if not specified
523 Retrieves the version from the dictionary. @return integer representing the version or 0 if not found
524 Retrieves the length of the dictionary. @return Length value from dictionary or default 40 if not set
525 Retrieves the revision number from the dictionary. @return Revision number or default version if not found
526 Retrieves permissions integer from dictionary. @return permissions value or default (0) if not found
527 Retrieves justification value as a string. @return justification value converted to string
528 Retrieves document flags. @return integer value of document flags
529 Creates a PDAbstractPattern from a COSDictionary. @param dictionary PDF dictionary containing pattern data @param resourceCache cache for shared resources @return PDAbstractPattern object based on pattern type @throws IOException if unknown pattern type is encountered
530 Retrieves paint type from COS object. @return integer representing paint type or default value if not found
531 Retrieves the tiling type. @return integer representing the tiling type or default value if not set
532 Creates a PDShading object based on the provided dictionary. @param shadingDictionary COSDictionary containing shading details @return PDShading instance or throws IOException for unknown types
533 Retrieves bits per flag from COS object. @return integer value of bits per flag or -1 if not found
534 Retrieves vertices per row. @return number of vertices per row or -1 if not specified
535 Retrieves the number of bits per color component. @return int value representing bits per component or -1 if not set
536 Retrieves the number of bits per coordinate. @return int value representing bits per coordinate
537 Retrieves flags value from action. @return integer representing flags or default 0 if not set
538 Retrieves the flags value. @return integer representing the flags
539 Retrieves the page number. @return page number as an integer, or -1 if not found
540 Retrieves the annotation index from the dictionary. @return The annotation index as an integer, or -1 if not found.
541 Retrieves annotation flags. @return integer representing annotation flags
542 Retrieves the Q value from the COS object. @return integer value of Q or 0 if not set
543 Retrieves rotation angle of the PDF page. @return Rotation angle in degrees (0, 90, 180, or 270)
544 Checks if timestamp is required. @return true if timestamp is required, false otherwise
545 Retrieves the open count of the COS object. @return the open count as an integer, defaulting to 0 if not set
546 Retrieves the integer value of Q from the dictionary. @return the integer value of Q or 0 if not found
547 Retrieves the top index from the COS object. @return integer value of the top index, default is 0 if not set
548 Retrieves COS objects by specified type. @param type object type to filter by @return list of COS objects matching the type
549 Removes page-specific resources from the cache.
550 Retrieves embedded file from the PDF. @return PDEmbeddedFile object or null if not found
551 Retrieves embedded file for DOS. @return PDEmbeddedFile object or null if not found
552 Retrieves embedded file for Mac. @return PDEmbeddedFile object or null if not found
553 Retrieves embedded file for UNIX. @return PDEmbeddedFile object or null if not found
554 Retrieves an embedded file using Unicode key. @return PDEmbeddedFile object or null if not found
555 Finds a PDSignatureField matching the given signature object. @param fieldIterator iterator for PDField objects @param sigObject signature object to match @return matching PDSignatureField or null if not found
556 Initializes an AxialShadingContext with specified parameters. @param shading PDShadingType2 object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for device to user space conversion @param matrix Matrix defining the shading coordinate system @param deviceBounds Rectangle defining the bounds of the device @throws IOException if an I/O error occurs
557 Initializes a RadialShadingContext. @param shading PDShadingType3 object representing radial shading @param colorModel ColorModel for color conversion @param xform AffineTransform for device space to user space @param matrix Matrix defining the coordinate system @param deviceBounds Rectangle representing device bounds @throws IOException if an I/O error occurs
558 Constructs a TriangleBasedShadingContext. @param shading PDShading object for shading @param cm ColorModel for color mapping @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs
559 Initializes Type1ShadingContext with specified parameters. @param shading PDShadingType1 object @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate space conversion @param matrix Matrix defining the shading's coordinate system @throws IOException if an error occurs during initialization
560 Retrieves the decode range for a parameter. @param paramNum index of the parameter @return PDRange object or null if not applicable
561 Retrieves the decode range for a specified parameter. @param paramNum index of the parameter @return PDRange object or null if not found
562 Creates an input stream with specified filters and parameters. @param filters list of filter objects to apply @param parameters dictionary containing additional parameters @param in original input stream @return COSInputStream with applied filters @throws IOException if an I/O error occurs
563 Initializes a PDFObjectStreamParser with given COSStream and document. @param stream PDF object stream containing objects @param document associated COSDocument @throws IOException if required entries are missing or invalid
564 Constructs a PDCIDFontType0 from a font dictionary and parent font. @param fontDictionary the COSDictionary containing font data @param parent the PDType0Font parent font @throws IOException if an I/O error occurs
565 Constructs a PDCIDFontType2 from a font dictionary and parent font. @param fontDictionary the COS dictionary for the font @param parent the parent PDType0Font @param trueTypeFont the TrueType font, if available @throws IOException if an I/O error occurs
566 Reads a CMap from a COSBase object. @param base COSBase containing the CMap data @return CMap object parsed from the input @throws IOException if the input is invalid or parsing fails
567 Writes document body, handling encryption and object preservation. @param doc the COSDocument to write
568 Saves data to a file. @param fileName name of the file to save to @throws IOException if an I/O error occurs
569 Recursively collects COSBase objects. @param base the object to collect @return true if collected, false otherwise
570 Updates document trailer. @param newTrailer dictionary containing trailer data
571 Updates the object and sets origin document state for COSUpdateInfo children. @param child the child COSBase object to update
572 Updates document with new children. @param children iterable collection of COSBase objects to update
573 Retrieves value by name from a map or child nodes. @param name key to search for @return value associated with the name, or null if not found @throws IOException if an I/O error occurs
574 Retrieves a named string value from COSObject. @param name key of the value to retrieve @param defaultValue default value if key not found @return string value or default if not present
575 Retrieves the style of the object. @return Style as a string, defaulting to "Solid" if not specified
576 Retrieves the structure tree root from the hierarchy. @return PDStructureTreeRoot object or null if not found
577 Retrieves list of child objects. @return List of child objects or empty list if none found
578 Returns document encryption settings. Initializes if not already created and document is encrypted. @return PDEncryption object or null if no encryption
579 Prepares the document for decryption. @throws IOException if an I/O error occurs during decryption setup
580 Reads and sets the CMap encoding from a PDF dictionary. Throws IOException if required CMap is missing or invalid.
581 Repairs the length of the first segment in a byte array. @param bytes input byte array @param length1 initial length of the first segment @return corrected length of the first segment
582 Repairs Length2 if it's out of bounds. @param bytes byte array containing font data @param length1 first length value @param length2 second length value to repair @return corrected Length2 or maximum possible length if invalid
583 Retrieves fractional display setting. @return String representing fractional display or default value if not set
584 Retrieves thousands separator from COS object. @return String representing thousands separator or default ","
585 Retrieves the decimal separator from the COS object. @return the decimal separator as a string, default is "."
586 Retrieves the label prefix string from the COS object. @return The label prefix or a space if not found.
587 Retrieves label suffix string from COS object. @return Suffix string or space if not found
588 Retrieves label position to value mapping. @return string representation of the mapping or default suffix if not found
589 Retrieves an embedded string value. @param embedded name of the embedded object @param key specific key within the embedded object @return string value or null if not found
590 Generates a priority queue of font matches based on descriptor and CID system info. @param fontDescriptor PDFontDescriptor object for comparison @param cidSystemInfo PDCIDSystemInfo object for filtering @return PriorityQueue containing FontMatch objects
591 Checks if the provided owner password matches for given encryption revision. @param ownerPassword password to validate @param user user permissions data @param owner owner permissions data @param permissions permission level @param id document identifier @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag indicating if metadata is encrypted @return true if password matches, false otherwise @throws IOException if unknown encryption revision
592 Parses a CharSequence into an InstructionSequence. @param text input containing instructions @return InstructionSequence object representing parsed instructions
593 Decrypts a PDF stream. @param stream the COSStream to decrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs
594 Encrypts a PDF stream. @param stream the COSStream to encrypt @param objNum object number of the stream @param genNum generation number of the stream @throws IOException if an I/O error occurs
595 Decrypts a COSString using the specified object number and generation number. @param string the encrypted COSString to decrypt @param objNum the object number of the COSString @param genNum the generation number of the COSString @return decrypted COSBase object or original if decryption fails
596 Encrypts a string using object number and generation number. @param string the string to encrypt @param objNum the object number @param genNum the generation number @return encrypted COSBase object @throws IOException if encryption fails
597 Checks if the provided password matches the user's encrypted credentials. @param password plain text password to verify @param user user data byte array @param owner owner data byte array @param permissions permission level @param id unique identifier byte array @param encRevision encryption revision number @param keyLengthInBytes length of the encryption key in bytes @param encryptMetadata flag to indicate if metadata is encrypted @return true if password matches, false otherwise @throws IOException if an I/O error occurs
598 Finds FontBoxFont by PostScript name. @param postScriptName the font's PostScript name @return FontBoxFont object or null if not found
599 Writes a page of text from a list of articles. Handles sorting, spacing, and layout adjustments.
600 Retrieves calendar date from dictionary by key. @param key the dictionary key for the date @return Calendar object or null if not found
601 Writes a token to the output stream. @param base the COSBase object to be written
602 Writes a COSBase object to an OutputStream. @param output the OutputStream to write to @param object the COSBase object to write @param topLevel indicates if it's at the top level of the document @throws IOException if an I/O error occurs
603 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positioning @throws IOException if writing fails
604 Displays text and writes a show text operator. @param text the text to display @throws IOException if an I/O error occurs
605 Creates and configures a PageDrawer. @param parameters configuration for the PageDrawer @return configured PageDrawer instance @throws IOException if an I/O error occurs during setup
606 Constructs a new PDF form object. @param document the document to which this form will belong
607 Initializes PDF metadata from a document and input stream. @param doc the PDF document @param str the input stream containing metadata @throws IOException if an I/O error occurs
608 Constructs a PDEmbeddedFile with the given document and input stream. @param doc PDF document to associate with the embedded file @param str input stream containing the file data @throws IOException if an I/O error occurs
609 Creates a new embedded file in a PDF document. @param doc the parent PDF document @param input stream containing the file data @param filter compression filter to apply @throws IOException if an I/O error occurs
610 Prepares an image XObject from a byte array. @param document PDF document to add the image to @param byteArray raw image data @param width image width in pixels @param height image height in pixels @param bitsPerComponent bits per color component @param initColorSpace initial color space for the image @return PDImageXObject with encoded image data @throws IOException if encoding fails
611 Initializes a new PDExportFormatAttributeObject with an owner. @param owner the owner of the attribute object
612 Retrieves attributes from the PDF object. @return Revisions containing PDAttributeObjects
613 Retrieves the normal appearance stream of an annotation. @param annotation PDF annotation object @return Appearance stream of the annotation or null if not set
614 Adds fonts from a widget's appearance stream to the AcroForm resources. @param acroFormResources the AcroForm resources to add fonts to @param annotation the annotation containing the widget
615 Retrieves all 'on' values from export or widgets. @return Set of 'on' values, possibly empty
616 Checks if the value matches the on-value. @return true if values match, false otherwise
617 Sets value to on-value. Throws IOException if an I/O error occurs.
618 Initializes font provider with system fonts. @param cache FontCache instance for caching font info
619 Constructs an FDFParser instance. @param source RandomAccessRead object representing the data source @throws IOException if an I/O error occurs
620 Constructs a PDF parser with a source and optional password. @param source RandomAccessRead object representing the PDF file @param decryptionPassword password for decrypting the PDF, if encrypted
621 Draws line endings based on style. @param style line ending style @param cs appearance content stream @param x x-coordinate @param y y-coordinate @param width line width @param hasStroke true if stroke is present @param hasBackground true if background is drawn @param ending true for end, false for start @throws IOException on I/O error
622 Initializes tiling paint for a given pattern. @param drawer the page drawer to use @param pattern the tiling pattern to apply @param colorSpace the color space for painting @param color the color to use for painting @param xform the transformation matrix @throws IOException if an I/O error occurs
623 Retrieves an opaque image from a specified region with subsampling. @param region the area of the image to retrieve @param subsampling factor for reducing image resolution @return BufferedImage object representing the opaque image @throws IOException if an I/O error occurs during image retrieval
624 Converts PDImage to RGB BufferedImage. @param pdImage PDF image object @param colorKey optional color key mask array @return RGB BufferedImage representation of the image @throws IOException if an I/O error occurs
625 Pushes resources from content stream to current context. @param contentStream the content stream to process @return previous resource state
626 Calculates affine transform to center an overlay on a page. @param page the PDPage to apply the transformation to @param overlayMediaBox the media box of the overlay content @return AffineTransform for centering the overlay
627 Returns the rotated media box of a page. @param page PDF page object @return PDRectangle representing the rotated media box
628 Checks if the item is marked. @return true if marked, false otherwise
629 Checks if user properties are used. @return true if UserProperties is enabled, false otherwise
630 Checks if the entity is marked as a suspect. @return true if the entity is a suspect, false otherwise
631 Determines if mouse position tracking is enabled. @return true if tracking is enabled, false otherwise
632 Checks if the document is open. @return true if the document is open, false otherwise
633 Checks if the "FD" flag is set. @return true if "FD" flag is set, false otherwise
634 Retrieves non-stroking overprint control setting. @return true if non-stroking overprint is enabled, false otherwise
635 Retrieves an integer from an embedded dictionary. @param embeddedDictionary the dictionary to search within @param key the key for the integer value @return the integer value or -1 if not found
636 Retrieves the denominator value. @return integer representing the denominator
637 Wraps output stream with a predictor. @param out original output stream @param decodeParams parameters for decoding @return wrapped output stream or original if no prediction needed
638 Retrieves the structure parents value. @return integer representing structure parents or default value
639 Retrieves bits per sample from COS object. @return integer representing bits per sample
640 Retrieves MCID value from COSObject. @return integer MCID or default if not found
641 Retrieves the next key in the parent tree. @return integer value of the next key or default if not present
642 Retrieves MCID from properties. @return MCID value or -1 if properties are null
643 Retrieves the line cap style from the dictionary. @return integer representing the line cap style
644 Retrieves line join style from dictionary. @return integer representing line join style
645 Retrieves the structure parent index. @return index of the parent structure element
646 Retrieves the integer value associated with key "P". @return integer value of key "P" or default if not found
647 Retrieves the maximum length value. @return integer representing the maximum length
648 Retrieves an integer value by key from the COS object. @param name key of the integer in the COS object @param defaultValue default value if the key is not found @return integer value associated with the key or default value
649 Checks if the annotation is invisible. @return true if the annotation is invisible, false otherwise
650 Checks if the annotation is hidden. @return true if hidden, false otherwise
651 Checks if the document has been printed. @return true if printed, false otherwise
652 Checks if zooming is disabled. @return true if no zoom flag is set, false otherwise
653 Checks if annotation rotation is disabled. @return true if no rotate flag is set, false otherwise
654 Checks if the annotation should not be viewed. @return true if no view flag is set, false otherwise
655 Checks if the annotation is read-only. @return true if the annotation is read-only, false otherwise
656 Checks if the annotation is locked. @return true if locked, false otherwise
657 Checks if toggle no view flag is set. @return true if toggle no view is enabled, false otherwise
658 Checks if contents are locked. @return true if contents are locked, false otherwise
659 Checks if the object is invisible. @return true if the object is invisible, false otherwise
660 Checks if the object is hidden. @return true if hidden, false otherwise
661 Checks if the document has been printed. @return true if printed, false otherwise
662 Checks if zooming is disabled. @return true if no zoom is allowed, false otherwise
663 Checks if rotation is disabled. @return true if no rotate flag is set, false otherwise
664 Checks if the document should not be viewed. @return true if the document has the no-view flag set, false otherwise
665 Checks if the document is read-only. @return true if the document is read-only, false otherwise
666 Checks if the document is locked. @return true if the document is locked, false otherwise
667 Checks if toggle no view flag is set. @return true if flag is set, false otherwise
668 Checks if contents are locked. @return true if contents are locked, false otherwise
669 Checks if filtering is required. @return true if filter is needed, false otherwise
670 Checks if subfilter is required. @return true if subfilter is required, false otherwise
671 Checks if digest method is required. @return true if digest method is required, false otherwise
672 Checks if 'v' flag is required. @return true if 'v' flag is set, false otherwise
673 Checks if reason is required. @return true if reason is required, false otherwise
674 Checks if legal attestation is required. @return true if legal attestation is required, false otherwise
675 Checks if revision information addition is required. @return true if required, false otherwise
676 Checks if subject is required. @return true if subject is required, false otherwise
677 Checks if issuer is required. @return true if issuer is required, false otherwise
678 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
679 Checks if subject DN (Distinguished Name) is required. @return true if subject DN is required, false otherwise
680 Checks if key usage is required. @return true if key usage is mandatory, false otherwise
681 Checks if URL input is required. @return true if URL is required, false otherwise
682 Checks if the font style is italic. @return true if the font is italic, false otherwise
683 Checks if the text is bold. @return true if text is bold, false otherwise
684 Checks if signatures exist in the document. @return true if signatures are present, false otherwise
685 Checks if the document is in append-only mode. @return true if the document supports appending only, false otherwise
686 Checks if the field is a push button. @return true if the field is a push button, false otherwise
687 Checks if the field is a radio button. @return true if the field is a radio button, false otherwise
688 Checks if sorting is enabled. @return true if sorting is enabled, false otherwise
689 Checks if the field allows multiple selections. @return true if multi-select is enabled, false otherwise
690 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
691 Checks if commit on selection change is enabled. @return true if commit on selection change is enabled, false otherwise
692 Checks if field is a combo box. @return true if field is a combo box, false otherwise
693 Checks if the field is editable. @return true if the field can be edited, false otherwise
694 Checks if the field is read-only. @return true if the field is read-only, false otherwise
695 Checks if the field is required. @return true if the field is marked as required, false otherwise
696 Checks if the field should not be exported. @return true if no export flag is set, false otherwise
697 Checks if radio buttons are in unison mode. @return true if radios are in unison, false otherwise
698 Checks if the field allows multiline input. @return true if multiline is enabled, false otherwise
699 Checks if the field requires a password. @return true if password is required, false otherwise
700 Checks if file selection is enabled. @return true if file select flag is set, false otherwise
701 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
702 Checks if scrolling is disabled. @return true if scrolling is disabled, false otherwise
703 Checks if the field should be displayed as a combo box. @return true if the field is a combo box, false otherwise
704 Checks if text field supports rich text. @return true if rich text is enabled, false otherwise
705 Prepares for decryption by validating material and extracting encryption key. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial used for decryption @throws IOException if decryption preparation fails
706 Retrieves the owner encryption key. @return byte array of the owner key or null if not found @throws IOException if an I/O error occurs
707 Retrieves user key from PDF dictionary. @return byte array containing user key or null if not found @throws IOException if an I/O error occurs
708 Calculates displacement vector from width code. @param code width identifier @return Vector representing displacement or null if invalid
709 Calculates the width of a string. @param text input string to measure @return total width of the string @throws IOException if an I/O error occurs
710 Retrieves a PDF pattern by name. @param name the name of the pattern @return PDAbstractPattern object or null if not found @throws IOException if an I/O error occurs
711 Retrieves a shading pattern by name. @param name the COSName of the shading @return PDShading object or null if not found @throws IOException if an I/O error occurs
712 Retrieves the shading for this resource. @return PDShading object or null if not found @throws IOException if an I/O error occurs
713 Retrieves the number of bits per color component. @return int value representing bits per component
714 Retrieves the number of bits per color component. @return int representing bits per component or -1 if not set
715 Retrieves the number of bits per coordinate. @return int representing bits per coordinate or default value if not set
716 Retrieves the number of bits per coordinate. @return int value representing bits per coordinate
717 Checks if the node is open. @return true if the node has open slots, false otherwise
718 Creates a PDField based on the given COSDictionary. @param form PDAcroForm containing the field @param field COSDictionary representing the field @param parent PDNonTerminalField parent of the field @return PDField instance or null if unsupported type
719 Retrieves an XObject by name. @param name the COSName of the XObject to retrieve @return PDXObject instance or null if not found @throws IOException if an I/O error occurs
720 Initializes GouraudShadingContext with given parameters. @param shading PDShading object representing the shading @param colorModel ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @throws IOException if an I/O error occurs
721 Creates an input stream with default decode options. @return COSInputStream instance @throws IOException if an I/O error occurs
722 Parses objects from a PDF object stream. @param objstmObjNr object stream number @param key object key to parse @return parsed COSBase object or null if not found
723 Retrieves the contents as an InputStream. @return InputStream of the contents or empty stream if not available
724 Constructs a PDCIDFontType2 from a font dictionary. @param fontDictionary the COSDictionary containing font info @param parent the parent PDType0Font
725 Creates and returns a PDCIDFontType2 instance. @throws IOException if an I/O error occurs during font creation
726 Collects and updates entries in a COSDictionary. @param dictionary the dictionary to process @return true if child entries demand parent update, false otherwise
727 Returns the set of COSBase objects. Initializes by collecting from incrementOrigin if not already done. @return Set of COSBase objects
728 Adds a COSBase object to the collection. @param object the COSBase object to add
729 Adds an object to the list at a specified index. @param i index at which to add the object @param object COSBase object to be added
730 Sets an object at the specified index. @param index position in the list @param object COSBase object to set
731 Sets an item in the dictionary with a key. @param key the COSName key for the item @param value the COSBase value to set, null removes the item
732 Adds all elements from the provided list to the collection. @param objectsList list of COSBase objects to add
733 Adds all elements from the specified collection to this list at the specified position. @param i index at which to insert the first element from the specified collection @param objectList collection containing elements to be added to this list
734 Updates elements from a COSArray. @param children array of COSBase objects to update
735 Retrieves the role map from the structure tree root. @return Map containing roles or an empty map if no root is found
736 Adds a PDF object to the pool, handling indirect objects and object streams. @param key unique identifier for the COSBase object @param base the COSBase object to be added @return the COSBase object after processing
737 Applies a protection policy to the document. @param policy the security policy to apply @throws IOException if no suitable security handler is found
738 Retrieves glyph name for a given Unicode code. @param code Unicode code point @return Glyph name as String, or ".notdef" if not found
739 Converts character code to glyph ID. @param code character code to convert @return glyph ID or 0 if not found @throws IOException if an I/O error occurs
740 Retrieves the MAC subtype from a PDF object. @return The MAC subtype as a String or null if not found
741 Retrieves MAC creator from PDF document parameters. @return Creator string or null if not found
742 Retrieves the Mac resource fork from PDF parameters. @return Resource fork string or null if not found
743 Retrieves CID font mapping for a given base font and descriptor. @param baseFont the base font name @param fontDescriptor the PDFontDescriptor object @param cidSystemInfo the PDCIDSystemInfo object @return CIDFontMapping object or default if not found
744 Checks if the provided password matches the owner's password. @param password user-provided password string @return true if password matches, false otherwise
745 Decrypts a PDF object. @param obj the PDF object to decrypt @param objNum the object number @param genNum the generation number @return decrypted COSBase object
746 Writes page content for each region. Iterates through regions, setting characters and output text before calling superclass method.
747 Retrieves date from COSDictionary using specified key. @param key PDF dictionary key @return Calendar object representing the date
748 Retrieves date from COSName key or returns default value. @param key the COSName key to search for @param defaultValue the default Calendar value if key is not found @return Calendar object associated with key or default value
749 Retrieves the creation date of the document. @return Calendar object representing the creation date, or null if not available
750 Retrieves the modification date of the document. @return Calendar object representing the modification date
751 Retrieves the creation date of the annotation. @return Calendar object representing the creation date @throws IOException if an I/O error occurs while accessing the annotation
752 Returns the creation date of the PDF document. @return Calendar object representing the creation date
753 Retrieves the signing date from the document. @return Calendar object representing the signing date or null if not available
754 Writes an Operator object to output. @param op Operator object to be written @throws IOException if I/O error occurs
755 Writes prepared objects to a COSStream. @param stream the COSStream to write to @return the updated COSStream with written objects @throws IOException if an I/O error occurs
756 Writes a COSArray to the given OutputStream. @param output target stream for writing @param cosArray array of COSBase objects to write
757 Writes a COSDictionary to the given OutputStream. @param output stream to write dictionary to @param cosDictionary dictionary to write @throws IOException if an I/O error occurs
758 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positions @throws IOException if writing fails
759 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positions @throws IOException if writing fails
760 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and position @throws IOException if I/O error occurs during writing
761 Writes text with positioning from an array. @param textWithPositioningArray array containing Strings and Floats for text and positioning @throws IOException if an I/O error occurs during writing
762 Displays text and writes a show text operator. @param text the string to display @throws IOException if an I/O error occurs
763 Displays given text and writes an operator. @param text string to display @throws IOException if I/O error occurs
764 Displays text and writes operator. @param text string to display @throws IOException if an I/O error occurs
765 Displays text and writes SHOW_TEXT operator. @param text the string to display @throws IOException if an I/O error occurs
766 Constructs a new PDTransparencyGroup. @param document The PDDocument to associate with this group.
767 Initializes a new appearance stream for the given PDF document. @param document the PDF document to associate with this appearance stream
768 Creates an image object from a BufferedImage. @param document PDF document to add the image to @param image source BufferedImage @param quality JPEG compression quality (0.0 - 1.0) @param dpi dots per inch for image resolution @return PDImageXObject representing the image in JPEG format @throws IOException if an I/O error occurs
769 Validates that the provided value is either 'Off' or in the set of allowed 'on' values. @param value the value to check
770 Loads an FDF document from a file. @param file the FDF file to load @return the parsed FDFDocument object @throws IOException if an I/O error occurs
771 Loads an FDF document from the given InputStream. @param input stream containing FDF data @return parsed FDFDocument object @throws IOException if an I/O error occurs
772 Constructs a PDF parser with a default password. @param source input stream for reading the PDF file @throws IOException if an I/O error occurs
773 Outputs a curl template using given points and offset. @param template array of Point2D.Double representing the template @param x horizontal offset @param y vertical offset @throws IOException if an I/O error occurs
774 Generates an arc segment. @param startAng starting angle in radians @param endAng ending angle in radians @param cx center x-coordinate @param cy center y-coordinate @param rx radius x @param ry radius y @param out output list for points or null @param addMoveTo flag to add move-to command @throws IOException if an I/O error occurs
775 Initializes tiling paint with specified parameters. @param drawer PageDrawer instance for drawing @param pattern PDTilingPattern to be used @param xform AffineTransform for coordinate transformation @throws IOException if an I/O error occurs
776 Retrieves an opaque image. @return BufferedImage object with opacity applied @throws IOException if an I/O error occurs
777 Decodes input stream using LZW algorithm. @param encoded InputStream containing encoded data @param decoded OutputStream for decoded output @param parameters COSDictionary with decoding parameters @param index parameter dictionary index @return DecodeResult object with parameters @throws IOException if an I/O error occurs
778 Appends a kid to the current object. @param markedContent PDMarkedContent instance to append
779 Fetches UCS2 CMap for composite or CJK fonts. Handles predefined CMaps excluding Identity-H/V.
780 Determines if a text field should be combined. @return true if the field is a PDTextField with comb enabled, max length set, and not multiline, password, or file select; false otherwise
781 Prepares the decryption process for a PDF document. @param encryption PDEncryption object containing encryption details @param documentIDArray COSArray representing the document ID @param decryptionMaterial DecryptionMaterial required for decryption @throws IOException if decryption material is incompatible or other I/O errors occur
782 Retrieves the width of a space character in the font. @return Width of space character or default value if not determined
783 Checks if the font is fixed pitch. @return true if the font is fixed pitch, false otherwise
784 Checks if the font style is serif. @return true if serif style is enabled, false otherwise
785 Checks if the file is symbolic. @return true if the file is symbolic, false otherwise
786 Checks if the script flag is set. @return true if script flag is on, false otherwise
787 Checks if the flag is non-symbolic. @return true if non-symbolic, false otherwise
788 Checks if text style is italic. @return true if italic, false otherwise
789 Checks if all characters in the string are uppercase. @return true if all characters are uppercase, false otherwise
790 Checks if the stock is small-cap. @return true if small-cap flag is set, false otherwise
791 Checks if force bold flag is set. @return true if force bold is enabled, false otherwise
792 Retrieves a pattern by color. @param color the PDColor object containing the pattern name @return the PDAbstractPattern if found, otherwise throws IOException
793 Creates a PDField from a dictionary. @param form the PDAcroForm containing the field @param field the COSDictionary representing the field @param parent the parent PDNonTerminalField @return PDField instance created from the dictionary
794 Converts input stream to text string. @return String representation of input stream or empty string on error
795 Creates an input stream from the underlying data source. @return COSInputStream representing the data stream @throws IOException if an I/O error occurs
796 Collects patches from a PDF shading dictionary. @param xform transformation matrix @param matrix additional transformation matrix @param controlPoints number of control points @return list of Patch objects or empty list if none found @throws IOException if an I/O error occurs
797 Creates a descendant CID font based on the provided dictionary. @param dictionary font dictionary containing font details @param parent parent Type0 font @return PDCIDFont object or throws IOException if invalid font type
798 Returns an iterator over the COSBase objects. @return Iterator of COSBase objects
799 Adds an object to the collection. @param object the object to be added
800 Expands the list to a specified size by adding an object. @param size target size of the list @param object item to be added to reach the desired size
801 Sets a float array. @param value array of float values to be set
802 Prepares and returns a COSStream for cross-reference. @return Configured COSStream object @throws IOException if an I/O error occurs
803 Initializes a COSArrayList with an initial object and corresponding COSBase. @param actualObject the actual Java object to be managed @param item the COSBase item associated with the actual object @param dictionary the parent COSDictionary @param dictionaryKey the key in the dictionary for this list
804 Converts a list of objects to a COSArray. @param cosObjectableList the list of objects to convert @return COSArray containing converted COSBase objects
805 Initializes a PDRange with default values.
806 Retrieves or constructs the encode values array. @return COSArray containing encode values, defaulting if null
807 Initializes a PDFunctionType2 with the given function base. @param function the COSBase object representing the function
808 Initializes a new FDFOptionElement with two empty strings in its option array.
809 Initializes a PDFontSetting with default values.
810 Retrieves the white point as a tristimulus value. @return PDTristimulus object representing the white point
811 Retrieves or creates the black point for color management. @return PDTristimulus object representing the black point
812 Converts components to a COSArray. @return COSArray containing components and pattern name if available
813 Initializes a new PDDeviceN object with default settings.
814 Initializes a PDGamma object with default values.
815 Retrieves the alternate color space. @return PDColorSpace object representing the alternate color space @throws IOException if an error occurs during retrieval or parsing
816 Initializes a PDIndexed object with default RGB color space and 256 colors.
817 Creates a default range array with predefined values. @return COSArray containing four COSFloat elements: -100, 100, -100, 100
818 Constructs a PDPattern with given resources. @param resources PDF document resources
819 Initializes a PDSeparation with default values.
820 Initializes a PDTristimulus with zero values.
821 Initializes a PDTristimulus with float array. @param array array of float values (max 3)
822 Sets the transformation matrix. @param transform AffineTransform object to apply
823 Creates a PDImageXObject from a byte array. @param document the PDDocument to add the image to @param byteArray the image data as a byte array @return PDImageXObject created from the byte array @throws IOException if an I/O error occurs
824 Converts single array elements to COSArray. @return COSArray containing specific float values from single array
825 Sets an object at the specified index. @param index position in the array @param object to be inserted
826 Sets an integer at a specified index. @param index position in the array @param value integer value to set
827 Sets the name at the specified index. @param index position in the list @param name string to be converted and set
828 Sets a string value at specified index. @param index position in the array @param string value to be set
829 Sets the minimum value in the range array. @param min the minimum value to be set
830 Sets the maximum value in the range array. @param max the new maximum value to set
831 Sets the x-coordinate of the lower-left corner. @param value the x-coordinate value
832 Sets the lower-left Y coordinate of a rectangle. @param value the Y coordinate value to set
833 Sets the upper right X coordinate of the rectangle. @param value the new X coordinate value
834 Sets the upper right Y coordinate of a rectangle. @param value the new Y coordinate value
835 Sets color at specified index. @param index array position to update @param colour PDGamma object or null
836 Sets an option by updating the first element of the option list. @param opt the new option value as a string
837 Sets default appearance string. @param da default appearance string value
838 Sets the font size. @param size the new font size in points
839 Sets colorant names in the array. @param names list of colorant names
840 Sets device attributes. @param attributes device attributes to set
841 Sets the alternate color space. @param cs the new color space to set
842 Sets the radius value. @param r the radius to be set
843 Sets the second value to a COSFloat representing 'g'. @param g the gravity value to be set
844 Sets the third value to a float. @param b the float value to be set
845 Sets the range for a specific component in a PDF stream. @param range the PDRange object representing the new range @param n the index of the component to set the range for
846 Sets the base color space. @param base PDColorSpace object to be set as base
847 Sets colorant name in PDF array. @param name new colorant name
848 Sets the alternate color space. @param colorSpace the new color space to set
849 Sets the X coordinate. @param x new X value
850 Sets the Y coordinate value. @param y new Y coordinate as float
851 Sets the Z value. @param z the Z coordinate to be set
852 Sets an item in the dictionary. @param key the key for the item @param value the object to be stored; may be null
853 Sets a boolean value in the PDF document. @param key the key under which to store the boolean value @param value the boolean value to store
854 Sets a boolean value in the dictionary. @param key the key under which to store the boolean @param value the boolean value to store
855 Sets an item in the dictionary using a string key. @param key the key to store the item under @param value the value to associate with the key
856 Sets a PDF dictionary item with the given key and string value. @param key the COSName key for the dictionary entry @param value the string value to be converted to COSName
857 Sets a string value for a given key. @param key the COSName key to associate with the value @param value the string value to be stored
858 Sets an integer value in the dictionary. @param key the name of the entry @param value the integer value to be set
859 Sets a long value in the PDF dictionary. @param key the dictionary key as a COSName @param value the long value to be set
860 Sets a float value in the dictionary. @param key the key to store the float under @param value the float value to set
861 Creates a COSStream from a dictionary and byte range. @param dictionary source dictionary for stream properties @param startPosition start position in the file @param streamLength length of the stream data @return newly created COSStream object @throws IOException if I/O error occurs
862 Sets the encryption dictionary in the PDF trailer. @param encDictionary the encryption dictionary to be set
863 Sets the document ID in the trailer. @param id COSArray containing the document ID
864 Wraps existing page content in a graphics state save/restore pair. @param page the PDF page to modify @throws IOException if an I/O error occurs
865 Updates parent and structure type for entries in a COSArray. @param kArray array of COSBase objects to update @param newParent new parent dictionary to set @param newStructureType optional new structure type to set
866 Updates page references in a PDF structure tree. @param cloner utility for cloning objects @param parentTreeEntry parent dictionary entry to update @param objMapping mapping of COSDictionaries @throws IOException if an I/O error occurs
867 Merges entries from source dictionary into destination dictionary, excluding specified keys. @param src source COSDictionary to merge from @param dst destination COSDictionary to merge into @param cloner utility for cloning COSBase objects @param exclude set of COSName keys to exclude from merging @throws IOException if an I/O error occurs during cloning
868 Searches for PDF trailer using brute force method. @param trailer dictionary to populate with found information @return true if trailer is successfully found and populated, false otherwise
869 Searches for and updates trailer items in a PDF document. @param trailer the COSDictionary representing the trailer to update @return true if a root object was found, false otherwise
870 Initializes PDF parsing by retrieving and validating the trailer. Throws IOException if root object is missing or invalid.
871 Parses the next token from the content stream. @return Parsed object or null if at EOF or closed @throws IOException if an I/O error occurs
872 Writes a PDF document with optional encryption and signature. @param doc PDDocument to write @param signInterface Signature interface for signing the document @throws IOException if an I/O error occurs
873 Initializes a PDDocument with a stream cache. @param streamCacheCreateFunction function to create stream cache
874 Retrieves or creates document information. @return PDDocumentInformation object containing metadata
875 Sets document information. @param info PDDocumentInformation object containing metadata
876 Initializes a PDF document catalog. @param doc the PDDocument to associate with this catalog
877 Retrieves threads from the document. @return List of PDThread objects representing threads in the document
878 Sets document threads. @param threads list of PDThread objects
879 Retrieves or creates additional actions for the document catalog. @return PDDocumentCatalogAdditionalActions object representing the actions
880 Adds an output intent to the PDF document. @param outputIntent the PDOutputIntent object to add
881 Sets the list of output intents. @param outputIntents List of PDOutputIntent objects
882 Initializes a PDDocumentNameDictionary from a document catalog. @param cat the PDDocumentCatalog to extract or create name dictionary from
883 Sets the crop box for a PDF page. @param cropBox the new crop box dimensions or null to remove it
884 Sets the list of content streams for the page. @param contents List of PDStream objects representing page content
885 Sets thread beads on a PDF page. @param beads list of PDThreadBead objects representing thread beads
886 Retrieves or creates additional actions for a PDF page. @return PDPageAdditionalActions object representing the page's actions
887 Sets annotations on a PDF page. @param annotations list of PDAnnotation objects to be added
888 Sets the list of viewports for a PDF page. @param viewports List of PDViewportDictionary objects representing viewports
889 Initializes a new PDPageTree with an empty root dictionary.
890 Retrieves child dictionaries (kids) from a PDF node. @param node the parent dictionary node @return list of child COSDictionary objects
891 Adds an element to the collection. Handles special cases for parent dictionary and string elements. @param o element to be added @return true if the element was successfully added
892 Clears the dictionary and associated arrays. If there's a parent dictionary, sets its item to null.
893 Sets an element at the specified index. @param index position in the list @param element new value to set @return the previous element at the specified position
894 Adds an element at the specified index. @param index position where to insert the element @param element the element to add @throws UnsupportedOperationException if adding in a filtered list
895 Puts a key-value pair in the map and updates the PDF document. @param key unique key for the entry @param value associated COSObjectable value @return previous value associated with the key or null if none
896 Converts label map to COSBase object. @return COSDictionary representing the label map
897 Initializes a new PDComplexFileSpecification with default values.
898 Initializes a PDComplexFileSpecification with a given dictionary. @param dict the COSDictionary to initialize with; if null, creates a new one
899 Sets the range values for a PDF annotation. @param rangeValues COSArray containing the range values
900 Sets domain values. @param domainValues array of COSBase objects representing domain values
901 Sets encoding values for the object. @param encodeValues array of COS objects representing encoding values
902 Sets decode values for the object. @param decodeValues array of decode values to be set
903 Sets an attribute with the given name and value. @param attrName name of the attribute @param attrValue value to set for the attribute
904 Removes an attribute from the PDF object. @param attributeObject the attribute to remove
905 Updates attribute revision number. @param attributeObject the attribute object to update
906 Adds a class name to the PDF object. @param className the class name to add
907 Removes a class name from the PDF object. @param className the name of the class to remove
908 Adds a child object to the current COSBase. @param object the child object to add
909 Inserts a new child before a reference child in the PDF structure. @param newKid the new child to insert @param refKid the reference child before which to insert
910 Removes a kid from the COS object. @param object the kid to remove @return true if the kid was removed, false otherwise
911 Sets the K item in the COS object. @param k the COSBase value to set
912 Sets the class map for the PDF document. @param classMap mapping of attribute names to PDAttributeObject or List of PDAttributeObjects
913 Sets user properties in PDF document. @param userProperties list of user properties to set
914 Sets the value of the COS object. @param value the new value to set
915 Retrieves the guideline color from the PDF dictionary. Initializes to black if not set. @return PDColor object representing the guideline color
916 Retrieves or creates a line dash pattern. @return PDLineDashPattern object with default settings if not previously set
917 Sets the line dash pattern. @param dashArray array defining the dash pattern
918 Sets the cryptographic filter method in the dictionary. @param cfm the cryptographic filter method to be set
919 Sets the PDF filter. @param filter name of the filter to apply
920 Sets the owner key in the dictionary. @param o byte array representing the owner key @throws IOException if an I/O error occurs
921 Sets user key in dictionary. @param u byte array representing user key @throws IOException if an I/O error occurs
922 Sets owner encryption key in dictionary. @param oe encryption key bytes @throws IOException if an I/O error occurs
923 Sets user encryption key in dictionary. @param ue user encryption key bytes @throws IOException if an I/O error occurs
924 Sets the recipients for a PDF document. @param recipients array of byte arrays representing recipient data @throws IOException if an I/O error occurs while setting recipients
925 Sets a cryptographic filter dictionary. @param cryptFilterName name of the crypt filter @param cryptFilterDictionary crypt filter settings
926 Sets the stream filter name in the dictionary. @param streamFilterName the filter name to be set
927 Sets the string filter name in the dictionary. @param stringFilterName the COSName to be set as the string filter
928 Sets permissions using byte array. @param perms byte array representing permissions @throws IOException if an I/O error occurs
929 Removes V45 filters from the dictionary.
930 Initializes a new FDF annotation. Sets up the underlying dictionary with type annotation.
931 Sets the annotation's color. @param c Color object to set; null for no color
932 Sets rich content to the annotation. @param rc rich content string
933 Sets the interior color of an annotation. @param color the new interior color or null to clear it
934 Sets the callout coordinates. @param callout array of float values representing coordinates
935 Sets the ink list for an annotation. @param inklist list of float arrays representing ink data
936 Sets a line annotation. @param line array representing the line coordinates
937 Sets the interior color of an annotation. @param color Color to be set; null removes the color
938 Sets horizontal offset for annotation caption. @param offset the horizontal offset value
939 Sets the vertical offset for the annotation caption. @param offset the vertical offset value
940 Sets the vertices of an annotation. @param vertices array of vertex coordinates
941 Sets the interior color of an annotation. @param color the desired interior color or null to clear it
942 Sets the vertices of an annotation. @param vertices array of vertex coordinates
943 Sets the interior color of an annotation. @param color Color object to set; null removes the color
944 Sets the interior color of an annotation. @param color Color object representing the new interior color
945 Sets annotation coordinates. @param coords coordinate array [x1,y1,x2,y2,...]
946 Sets the ID of the FDF document. @param id COSArray containing the ID information
947 Sets form fields in the FDF document. @param fields list of FDFField objects representing form fields
948 Sets the list of PDF pages. @param pages list of FDFPage objects
949 Sets annotations in the FDF document. @param annots list of FDF annotations to be set
950 Sets the differences stream in the FDF document. @param diff COSStream containing differences data
951 Sets embedded FDF files. @param embedded list of file specifications to embed
952 Sets the list of child fields. @param kids list of FDFField objects representing child fields
953 Sets the value of a PDF form field. @param value the value to set, can be List<String>, String, or COSObjectable @throws IOException if an I/O error occurs or unknown type is provided
954 Sets the value of a PDF form field. @param value the new value to be set
955 Sets field flags. @param ff field flag integer value
956 Sets field flags. @param ff field flag integer value
957 Sets clear field flags for a form field. @param ff flag values to set
958 Sets widget field flags. @param f flag integer value
959 Sets widget field flags. @param ff field flag values
960 Sets widget field clear flags. @param ff flag values to set
961 Sets rich text value for a field. @param rv rich text string to be set
962 Sets rich text content. @param rv COSStream containing rich text data
963 Sets the "before" value in the dictionary. @param before the string to be set as the "before" value
964 Sets the "after" attribute in the dictionary. @param after value to be set
965 Sets document actions from a map. @param map key-value pairs of document action names and their JavaScript actions
966 Sets PDF form templates. @param templates list of FDFTemplate objects
967 Sets form fields in the PDF template. @param fields list of FDFField objects representing form fields
968 Builds character width arrays for a font. @param cidToGid mapping of CID to GID @throws IOException if an I/O error occurs
969 Initializes a new PDFont object. Sets up the dictionary with type 'Font' and initializes other attributes.
970 Constructs a new font descriptor. Initializes a dictionary with type set to FONT_DESC.
971 Sets the font name in a PDF dictionary. @param fontName the name of the font to set
972 Sets the font family for a PDF document. @param fontFamily name of the font family to be set
973 Sets the font stretch for a PDF dictionary. @param fontStretch the font stretch value as a string
974 Sets the font bounding box. @param rect rectangle defining the bounding box or null to clear it
975 Sets the character set for the document. @param charSet character set string to be set
976 Initializes a DictionaryEncoding with a base encoding and differences. @param baseEncoding the base encoding name @param differences array of character differences
977 Sets the gamma value in the dictionary. @param value the gamma value to set
978 Retrieves or creates the gamma array for color correction. @return PDGamma object representing the gamma settings
979 Sets the gamma value in the dictionary. @param gamma PDGamma object representing the gamma settings
980 Sets the transformation matrix in the dictionary. @param matrix the transformation matrix to set
981 Retrieves and creates separation colorants from resources. @param resources PDF document resources @return Map of colorant names to PDSeparation objects @throws IOException if an I/O error occurs
982 Sets the colorants for a PDF document. @param colorants map of color names to PDColorSpace objects
983 Initializes a new instance of PDTransparencyGroupAttributes. Sets up the dictionary with the necessary transparency settings.
984 Sets document filters. @param filters list of filter names
985 Constructs a PDOptionalContentMembershipDictionary. Sets the dictionary type to "OCMD".
986 Sets the visibility policy. @param visibilityPolicy the COSName representing the visibility policy
987 Sets the transformation matrix for an object. @param transform AffineTransform containing the matrix values
988 Sets the bounding box for the PDF object. @param bbox PDRectangle representing the bounding box or null to remove it
989 Sets the document's background. @param newBackground COSArray representing the new background
990 Sets the bounding box for this object. @param newBBox the new bounding box rectangle
991 Sets the color space for PDF rendering. @param colorSpace the new color space to apply
992 Sets the function array. @param newFunctions new COSArray of functions
993 Sets the transformation matrix for an object. @param transform AffineTransform object defining the matrix
994 Sets the domain for the COS object. @param newDomain the new domain to be set
995 Sets the extend array. @param newExtend the new COSArray to set
996 Sets the domain for the COS object. @param newDomain the new domain array to be set
997 Sets coordinates for the object. @param newCoords array of coordinates to be set
998 Sets the decode values for the COS object. @param decodeValues array of decode values to be set
999 Initializes a new PDExtendedGraphicsState with default settings.
1000 Sets blend mode for an object. @param bm the BlendMode to apply
1001 Sets a float item in the dictionary. @param key the key for the item @param value the float value to set
1002 Sets the transfer attribute in the dictionary. @param transfer COSBase object representing the transfer
1003 Sets the second transfer object in the dictionary. @param transfer2 the COSBase object representing the second transfer
1004 Sets the next actions in the PDF document. @param next list of PDAction objects representing subsequent actions
1005 Sets the "T" item in the action. @param t COSBase object to be set
1006 Sets the 'h' flag in the action item. @param h boolean value to set the 'h' flag
1007 Sets form fields in an action. @param array COSArray containing field names
1008 Sets the sound for an action. @param sound COSStream representing the sound to be set
1009 Sets form fields to the given COSArray. @param array containing field definitions
1010 Sets the destination item. @param d COSBase object representing the destination
1011 Sets the base item B in the action. @param b the COSBase object to set
1012 Sets the relationship to either 'P' (Parent) or 'C' (Child). @param relationship COSName representing the relationship type
1013 Initializes a new annotation with a type of "Annot".
1014 Initializes a PDAnnotation with the given dictionary. @param dict the COSDictionary to use for initialization
1015 Sets the rectangle bounds. @param rectangle PDRectangle object defining bounds
1016 Sets the border array for the PDF object. @param borderArray COSArray representing the border properties
1017 Sets rectangle differences for PDF cropping. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1018 Sets rectangle differences for a PDF annotation. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1019 Sets the callout coordinates. @param callout array of float values representing callout coordinates
1020 Sets the ink list for a PDF annotation. @param inkList 2D float array representing ink paths
1021 Sets line coordinates. @param l array of float values representing line coordinates
1022 Sets the horizontal offset for the caption. @param offset the horizontal offset value
1023 Sets vertical caption offset. @param offset vertical offset value
1024 Sets quad points for annotation. @param quadPoints array of float values defining points
1025 Sets rich content string. @param rc rich content to be set
1026 Sets vertex coordinates. @param points array of vertex coordinates
1027 Sets vertices for a shape. @param points array of vertex coordinates
1028 Sets the parent annotation. @param annot the parent PDAnnotationMarkup object
1029 Sets rectangle differences for PDF content. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
1030 Sets quadrilateral points for annotation. @param quadPoints array of 8 floats representing the quad points
1031 Initializes a new PDAppearanceDictionary with required N entry.
1032 Sets the dash style for a PDF line. @param dashArray array defining dash pattern
1033 Retrieves or creates the dash style for a line. @return PDLineDashPattern representing the dash pattern
1034 Sets the operating system name. @param os OS name string
1035 Initializes a PDSeedValue with a COSDictionary. Sets the type to SV and marks it as a direct object.
1036 Sets the filter for compression. @param filter COSName representing the filter type
1037 Sets the sub-filter items in the dictionary. @param subfilter list of sub-filter names
1038 Sets the digest method for the dictionary. @param digestMethod list of allowed digest names
1039 Sets the list of reasons. @param reasons list of reason strings
1040 Sets the MDP seed value in the dictionary. @param mdp PDSeedValueMDP object to set
1041 Sets the time stamp in the dictionary. @param timestamp PDSeedValueTimeStamp object to be set
1042 Sets legal attestations. @param legalAttestation list of attestation strings
1043 Initializes a PDF seed value certificate. Sets up a COSDictionary with type SV_CERT and direct flag.
1044 Sets document subject from list of byte arrays. @param subjects list containing byte array representations of subjects
1045 Adds a subject to the document. @param subject byte array representing the subject
1046 Sets the subject distinguished name (DN) in a PDF document. @param subjectDN list of maps containing DN attributes and values
1047 Sets key usage extensions. @param keyUsageExtensions list of key usage strings
1048 Adds a key usage extension to the dictionary. @param keyUsageExtension string containing '0', '1', or 'X' characters
1049 Sets the list of issuers in the dictionary. @param issuers list of issuer byte arrays
1050 Adds an issuer to the document's issuer list. @param issuer byte array representing the issuer
1051 Sets OID values from byte array list. @param oidByteStrings list of byte arrays representing OIDs
1052 Adds an OID to the dictionary. @param oid byte array representing the OID
1053 Initializes a PDSignature object with a signature type.
1054 Sets the type of the dictionary. @param type the COSName representing the type
1055 Sets the filter for compression. @param filter the compression filter to apply
1056 Sets the sub-filter type. @param subfilter the sub-filter name to be set
1057 Sets byte range for a PDF signature. @param range array of 4 integers defining the byte range
1058 Sets the contents of the document. @param bytes byte array representing the content
1059 Sets the text color for a PDF object. @param textColor Color object representing the desired text color
1060 Initializes a new PDAcroForm with a given document. @param doc the PDF document to associate with this form
1061 Sets form fields in the document. @param fields list of PDF form fields to be set
1062 Sets calculation order for form fields. @param fields list of PDField objects representing form fields
1063 Initializes a new PDButton instance. @param acroForm parent form containing the button
1064 Sets export values for the object. @param values list of string values to be exported
1065 Initializes a new choice field in an Acrobat form. @param acroForm the parent form containing the field
1066 Sets display options. @param displayValues list of option strings to set
1067 Sets export and display options. @param exportValues list of export values @param displayValues corresponding list of display values
1068 Sets selected options indices. @param values list of option indices to select
1069 Sets the list of child fields. @param children list of PDField objects representing child fields
1070 Sets value for COSObject. @param object the new value to set
1071 Sets default value for COS object. @param value the default value to be set
1072 Creates a new PDSignatureField in the given form. @param acroForm the parent form containing this field
1073 Creates a new text field in an Acrobat form. @param acroForm the form to which this field belongs
1074 Sets the default style string for a PDF document. @param defaultStyleString the style string to set or null to remove it
1075 Sets the rich text value. @param richTextValue the rich text content to set
1076 Sets the coordinate system origin. @param coordSystemOrigin array representing the origin coordinates
1077 Initializes a new PDF thread. Sets up the thread dictionary with type 'Thread'.
1078 Sets the transition direction. @param direction the new transition direction to set
1079 Sets the duration of an object. @param duration the duration value to be set
1080 Sets the flying scale factor. @param scale the scaling factor for flying animations
1081 Sets the fly area's opacity. @param opaque true to make the fly area opaque, false otherwise
1082 Adds all elements from a collection to the list. Throws UnsupportedOperationException if the list is filtered. Updates dictionary item to an array if applicable. @param c collection of elements to add @return true if the list was modified
1083 Sets font color based on operand size. @param operands list of color operands @throws IOException if invalid operand count
1084 Adds all elements from a collection at a specified index. Throws UnsupportedOperationException if list is filtered. Updates dictionary if parent dictionary exists. @param index position to insert elements @param c collection of elements to add @return true if elements were added, false otherwise
1085 Adds all objects from the given list to this array. @param objectList list of COSBase objects to add
1086 Retrieves the standardized structure type. @return Standardized structure type as a String
1087 Adds structure to the PDF by processing COSBase objects. Handles streams, dictionaries, arrays, and objects recursively. @param current the COSBase object to process @throws IOException if an I/O error occurs
1088 Decrypts each element in the provided COSArray. @param array the COSArray to decrypt @param objNum object number for decryption @param genNum generation number for decryption
1089 Retrieves date value by key with default. @param key PDF key string @param defaultValue default Calendar if key not found @return Calendar object or default if missing
1090 Retrieves a date from an embedded dictionary. @param embedded name of the embedded dictionary @param key key for the date value @param defaultValue default date if not found @return Calendar object or default value
1091 Writes a list of tokens to an output stream. @param tokens list of objects to be written @throws IOException if an I/O error occurs
1092 Processes lines of text for alignment and rendering. @param lines list of Line objects to process @param isFirstParagraph flag indicating if it's the first paragraph
1093 Inserts text with comb appearance into PDF field. @param contents content stream for rendering @param appearanceStream appearance stream of the field @param font font to use for text @param fontSize size of the font @throws IOException if an I/O error occurs
1094 Loads an FDF document from a specified file. @param filename path to the FDF file @return FDFDocument object loaded from the file @throws IOException if an I/O error occurs
1095 Adds the first intermediate curl segment to the path. @param angleCur current angle in degrees @param r radius of the arc @param alpha additional angle parameter @param cx x-coordinate of the center @param cy y-coordinate of the center @throws IOException if an I/O error occurs
1096 Generates intermediate curl template points. @param angleCur current angle in degrees @param r radius of the arc segments @return array of Point2D.Double representing the curl shape @throws IOException if an I/O error occurs
1097 Generates arc segments for a given ellipse. @param startAng starting angle in radians @param endAng ending angle in radians @param rx horizontal radius of the ellipse @param ry vertical radius of the ellipse @param cx x-coordinate of the center @param cy y-coordinate of the center @param out list to store output points, may be null @param addMoveTo whether to add a move-to command at the start @throws IOException if an I/O error occurs during processing
1098 Renders text glyph with specific transformations and displacements. @param textRenderingMatrix current text rendering matrix @param font PDF font used for rendering @param code character code to render @param displacement vector for character positioning @throws IOException if an I/O error occurs
1099 Splits text into lines based on font and width constraints. @param font PDFont used for measuring text width @param fontSize size of the font @param width maximum line width @return List of Line objects containing formatted words
1100 Retrieves symbolic flag from font descriptor. @return Boolean value or null if font descriptor is missing
1101 Determines fallback font name based on PDFontDescriptor. @param fontDescriptor font descriptor object @return fallback font name as String
1102 Converts PDColor to Java Paint. @param color PDF color to convert @return Java Paint object or Color with transparency if conversion fails @throws IOException on error during processing
1103 Retrieves fields from a PDF dictionary. @return List of PDField objects representing form fields
1104 Recursively finds a PDField by matching names. @param name array of field names to match @param nameIndex current index in the name array @return PDField object or null if not found
1105 Retrieves child fields of the current field. @return List of PDField objects representing child fields
1106 Converts a COSBase object to a string. @param base the COSBase object to convert @return string representation of the base or empty string if unsupported type
1107 Retrieves the value of a PDF field. @return Value as Object or null if not found @throws IOException if an unknown type is encountered
1108 Retrieves rich text from a field dictionary. @return Rich text as a String or null if not found
1109 Retrieves the "Before" attribute as a string. @return String representation of the "Before" attribute or null if not applicable
1110 Retrieves the "after" value from a dictionary. @return String representation of the "after" value or null if not found
1111 Retrieves the action string from a PDF document. @return The action as a string, or null if not found
1112 Retrieves rich content from a PDF object. @return String representation of rich content or null if not applicable
1113 Converts COSBase to string or stream content. @param base COSBase object to convert @return String representation of the base, or empty string if not applicable
1114 Creates a LayoutPage from a given PDPage. @param page the source PDF page @return a LayoutPage object @throws IOException if an I/O error occurs
1115 Converts input stream to byte array. @return byte array of input stream content @throws IOException if an I/O error occurs
1116 Retrieves and processes image samples from a PDF stream. @return 2D array containing processed sample values
1117 Initializes a PatchMeshesShadingContext with specified parameters. @param shading PDMeshBasedShadingType for shading @param colorModel ColorModel for rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations @param deviceBounds Rectangle defining the device bounds @param controlPoints Number of control points for patch collection @throws IOException if an I/O error occurs during initialization
1118 Initializes a Type4ShadingContext. @param shading PDShadingType4 instance @param cm ColorModel for rendering @param xform AffineTransform for coordinate conversion @param matrix transformation matrix @param deviceBounds bounding rectangle of the device @throws IOException if an I/O error occurs
1119 Initializes a Type5ShadingContext for PDF rendering. @param shading PDShadingType5 object representing the shading @param cm ColorModel for color management @param xform AffineTransform for coordinate transformation @param matrix Matrix defining the shading pattern @param deviceBounds Rectangle specifying the device bounds @throws IOException if an I/O error occurs during initialization
1120 Adds an attribute to the PDF structure. @param attributeObject the attribute to add
1121 Adds a user property to the document. @param userProperty the property to add
1122 Initializes a PDICCBased object with a document. @param doc PDDocument to associate with the ICCBased object
1123 Initializes a PDPattern with given resources and color space. @param resources PDResources object for pattern @param colorSpace PDColorSpace for pattern colors
1124 Sets the Optional Content Groups (OCGs) in the document. @param ocgs list of PDPropertyList objects representing OCGs
1125 Sets the X values with number format dictionaries. @param changeXs array of PDNumberFormatDictionary objects
1126 Sets the Y-axis number format dictionaries. @param changeYs array of PDNumberFormatDictionary objects for Y-axis
1127 Sets an array of number format dictionaries. @param distances PDNumberFormatDictionary array to be set
1128 Sets the number format areas. @param areas array of PDNumberFormatDictionary objects
1129 Sets the angles in a PDF number format dictionary. @param angles array of PDNumberFormatDictionary objects
1130 Sets line slope dictionaries. @param lineSloaps array of PDNumberFormatDictionary objects
1131 Grows the list to the specified size. @param size desired size of the list
1132 Retrieves text color from PDF object. @return PDColor representing the text color
1133 Creates a clone of the given COSBase object. @param src source COSBase object to clone @param dstParent parent object in destination @param currentPageDict current page dictionary context @return cloned COSBase object or original if not an array/dictionary
1134 Initializes a parser for a PDF XRef stream. @param stream the COSStream containing the XRef data @throws IOException if an I/O error occurs during initialization
1135 Retrieves the next action(s) from a PDF document. @return List of PDAction objects or null if none exist
1136 Sets decode parameters for the stream. @param decodeParams list of decode parameters
1137 Sets file decoding parameters. @param decodeParams list of decoding parameters
1138 Sets the list of kids in the PDF document. @param kids List of kid objects to be set
1139 Sets options for a PDF form field. @param options list of options to be set
1140 Retrieves the range for a specific component. @param n index of the component @return PDRange object representing the range or default if not found
1141 Retrieves the encoding range for a parameter. @param paramNum the index of the parameter @return PDRange object or null if not found
1142 Retrieves color or four colors based on array size. @param name dictionary key for the color array @return PDGamma or PDFourColours object, or null if invalid size
1143 Builds and sets CID font widths. @param cidFont COSDictionary representing the CID font @throws IOException if an I/O error occurs
1144 Sets line dash pattern. @param dashPattern line dash pattern to apply
1145 Initializes color space with RGB array. @param rgb COSArray containing color space data
1146 Sets the guide line color in a PDF document. @param color PDColor object representing the desired color
1147 Sets the color of the object. @param c PDColor object representing the new color
1148 Sets the interior color of the PDF element. @param ic PDColor object representing the new interior color
1149 Sets the interior color. @param ic PDColor object representing the new interior color
1150 Sets the interior color. @param ic PDColor object representing the interior color
1151 Sets the interior color. @param ic PDColor object representing the new interior color
1152 Sets the border color of the PDF element. @param c PDColor object representing the new border color
1153 Sets the background color. @param c PDColor object representing the color
1154 Sets the text color. @param textColor color to apply to text
1155 Retrieves a range from the dictionary. @return PDRange object representing the range
1156 Retrieves the B-range from a PDF dictionary. @return PDRange object representing the B-range
1157 Creates an image from an input stream. @param document PDF document to add the image to @param stream input stream containing image data @return PDImageXObject created from the input stream @throws IOException if there is an error reading the stream
1158 Sets the font for text rendering. @param font PDFont object to be used for text
1159 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1160 Sets the tint transformation function. @param tint PDFunction representing the tint transform
1161 Sets the first page in the document. @param page the PDPage to be set as the first page
1162 Sets the upper limit in a COSArray. @param upper the upper limit value to set
1163 Sets the lower limit in a COSArray. @param lower the new lower limit value
1164 Sets the start point line ending style for an annotation. @param style the line ending style to set; if null, sets to LE_NONE
1165 Sets the line ending style for an annotation. @param style the desired line ending style or null for no style
1166 Sets the starting style of an annotation line. @param style the starting style to be set or null for no style
1167 Sets the endpoint style for a line annotation. @param style the style to set; null sets no style
1168 Sets the starting style of a line annotation. @param style the style to apply (null for no style)
1169 Sets the end point style for a line annotation. @param style the style to apply; null sets it to none
1170 Sets the starting style of a line annotation. @param style the style to set; null sets it to LE_NONE
1171 Sets the end point style for an annotation line. @param style the style of the end point (e.g., "Square", "Circle")
1172 Sets the upper limit for a COSArray in a PDF node. @param upper the upper limit string to be set
1173 Sets the lower limit in a COSArray. @param lower the lower limit value as a String
1174 Clips a rectangle to the media box. @param box the rectangle to clip @return clipped rectangle within media box bounds
1175 Creates a retranslated rectangle with current width and height. @return PDRectangle object representing the translated rectangle
1176 Sets the before color. @param colour PDGamma color to be set
1177 Sets the after color. @param colour PDGamma color to be set
1178 Sets the start color. @param colour PDGamma object representing the start color
1179 Sets the end color using PDGamma. @param colour PDGamma object representing the color
1180 Sets an item in the dictionary using a string key. @param key the key to use for setting the item @param value the COSObjectable value to associate with the key
1181 Sets the AcroForm for the PDF document. @param acroForm the new AcroForm to be set
1182 Sets viewer preferences for PDF document. @param prefs PDViewerPreferences object containing preferences
1183 Sets the document outline. @param outlines PDDocumentOutline object to be set
1184 Sets metadata for the document. @param meta PDMetadata object containing metadata information
1185 Sets the open action for the document. @param action the destination or action to be executed on opening
1186 Sets additional actions for the document catalog. @param actions PDDocumentCatalogAdditionalActions object containing actions
1187 Sets document names dictionary. @param names PDDocumentNameDictionary to be set
1188 Sets the mark information for the document. @param markInfo PDMarkInfo object containing mark details
1189 Sets the URI dictionary in the root. @param uri PDURIDictionary object to be set
1190 Sets the structure tree root. @param treeRoot PDStructureTreeRoot object to be set
1191 Sets page labels for a PDF document. @param labels PDPageLabels object containing page label information
1192 Sets destination names in the document. @param dests PDDestinationNameTreeNode containing destinations
1193 Sets embedded files in the document. @param ef node containing embedded file information
1194 Sets JavaScript for the document. @param js PDJavascriptNameTreeNode containing JavaScript names
1195 Creates a new PDF page with specified media box. @param mediaBox dimensions and position of the page
1196 Sets the resources for the page. @param resources PDResources object to be set
1197 Sets the media box for the page. @param mediaBox rectangle defining the page's dimensions
1198 Sets the bleed box for a PDF page. @param bleedBox rectangle defining the bleed area
1199 Sets the trim box for a PDF page. @param trimBox rectangle defining crop area or null to remove it
1200 Sets the art box for a PDF page. @param artBox rectangle defining the art box area
1201 Sets the contents stream of a PDF page. @param contents PDStream containing the page content
1202 Sets metadata for the PDF document. @param meta PDMetadata object containing metadata details
1203 Sets additional actions for the PDF page. @param actions PDPageAdditionalActions object containing the actions
1204 Sets the transition effect for the page. @param transition PDTransition object representing the transition effect
1205 Sets page transition effect and duration. @param transition PDTransition object defining the transition effect @param duration duration of the transition in seconds
1206 Adds an item to the resources dictionary. @param kind type of resource category @param name unique identifier for the resource @param object the resource object to add
1207 Sets an embedded file. @param file the PDEmbeddedFile to be set
1208 Sets the embedded file with Unicode name. @param file PDEmbeddedFile object to be set
1209 Sets the PDF page. @param page PDPage object to be set
1210 Sets the referenced object in the COS dictionary. @param annotation PDAnnotation to be referenced
1211 Sets the referenced object. @param xobject PDXObject to be referenced
1212 Sets the page associated with this object. @param page PDPage to be set
1213 Sets the parent node in the PDF document's structure. @param structureNode the new parent node to be assigned
1214 Sets the page in the document. @param page PDPage object to be set
1215 Sets attributes for a PDF structure element. @param attributes list of attribute objects with revisions
1216 Sets the ID tree node in the COS object. @param idTree PDNameTreeNode containing structure elements
1217 Sets the parent tree node. @param parentTree PDNumberTreeNode representing the parent structure
1218 Sets the annotation's bounding rectangle. @param rectangle PDRectangle defining the new bounds
1219 Sets the border style of an annotation. @param bs PDBorderStyleDictionary object defining the border style
1220 Sets the border effect for an annotation. @param be the border effect dictionary to apply
1221 Sets the fringe rectangle of an annotation. @param fringe PDRectangle defining the fringe area
1222 Sets the fringe rectangle of the annotation. @param fringe PDRectangle defining the fringe area
1223 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1224 Sets the annotation's fringe rectangle. @param fringe PDRectangle defining the fringe area
1225 Sets FDF dictionary in document catalog. @param fdf FDFDictionary to be added
1226 Sets the signature in the PDF document. @param sig PDSignature object to be set
1227 Sets the file specification for the PDF document. @param fs PDFileSpecification object representing the file
1228 Sets JavaScript for FDF document. @param js JavaScript object to be set
1229 Sets the catalog in the PDF document. @param cat FDFCatalog to be set as the document's root catalog
1230 Sets the appearance dictionary for the field. @param ap PDAppearanceDictionary object to be set
1231 Sets appearance stream reference for a field. @param ref FDFNamedPageReference object representing the appearance stream
1232 Sets the icon fit for a form field. @param fit the icon fit specification
1233 Sets an action for the field. @param a PDAction to be associated with the field
1234 Sets additional actions for a PDF field. @param aa PDAdditionalActions object containing actions
1235 Sets the fractional space to allocate. @param space PDRange defining the space allocation
1236 Sets file specification. @param fs PDFileSpecification object to be set
1237 Sets page information. @param info FDFPageInfo object containing page details
1238 Sets the template reference. @param tRef FDFNamedPageReference object representing the template
1239 Sets the font file stream. @param type1Stream PDStream containing the font data
1240 Sets the embedded TrueType font file. @param ttfStream stream containing the TrueType font data
1241 Sets the font file 3 stream. @param stream PDF stream containing the font data
1242 Sets the CID set stream in the dictionary. @param stream the PDStream containing the CID set data
1243 Sets the white point for color calibration. @param whitepoint tristimulus values representing the white point
1244 Sets the black point for color calibration. @param blackpoint PDTristimulus object representing the black point
1245 Sets the extended graphics state. @param extendedGraphicsState the new graphics state to apply
1246 Sets the shading resource. @param shadingResources the shading resource to be set
1247 Sets PDF resources. @param resources PDResources object to be set
1248 Sets a new PDF function. @param newFunction the new PDFunction to use
1249 Sets the font setting in the dictionary. @param fs PDFontSetting object to be set
1250 Sets the destination for a PDF action. @param d the destination object to set
1251 Sets the file specification. @param fs PDFileSpecification object to be set
1252 Sets the target directory. @param targetDirectory PDTargetDirectory object to be set
1253 Sets the destination for an action. @param d the destination object to set
1254 Sets the file specification for an action. @param fs PDFileSpecification object representing the file
1255 Sets the file specification for the PDF document. @param fs file specification object to be set
1256 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing launch settings
1257 Sets the file specification for an action. @param fs file specification to be set
1258 Sets the file specification for an action. @param fs PDF file specification to be set
1259 Sets the file specification for an action. @param fs PDFileSpecification object representing the file
1260 Sets an action for field F. @param action PDAction to be associated with field F
1261 Sets the E action in PDF document. @param e PDAction to be set
1262 Sets the X action. @param x PDAction to be set
1263 Sets the D action in the PDF document. @param d PDAction object representing the action to be set
1264 Sets the user action. @param u PDAction object representing the user action
1265 Sets the action associated with FO. @param fo PDAction object to be set
1266 Sets the action to be performed. @param bl PDAction object representing the action
1267 Sets the PO action. @param po PDAction object to be set
1268 Sets the action associated with the "PC" key. @param pc the PDAction to be set
1269 Sets the action to be performed. @param pv PDAction object representing the action
1270 Sets the PI action. @param pi PDAction object to be set
1271 Sets the WC action. @param wc PDAction object to be set
1272 Sets the WS action. @param ws PDAction object to be set
1273 Sets the digital signature action. @param ds the digital signature action to set
1274 Sets the WP action in the PDF document. @param wp PDAction object representing the WP action
1275 Sets the default action for a PDF form field. @param dp PDAction object representing the action
1276 Sets the action associated with key 'K'. @param k PDAction object to be set
1277 Sets an action associated with key 'F'. @param f PDAction to be set
1278 Sets an action associated with key 'V'. @param v PDAction to be set
1279 Sets an action associated with key 'C'. @param c PDAction to be set
1280 Sets the action associated with key 'O'. @param o PDAction to be set
1281 Sets the action associated with key 'C'. @param c PDAction to be set
1282 Sets the target directory for a PDF document. @param targetDirectory PDTargetDirectory object representing the target directory
1283 Sets a named destination in the document. @param dest PDNamedDestination object to set or null to remove
1284 Sets the appearance dictionary. @param appearance PDAppearanceDictionary object to be set
1285 Sets optional content properties. @param oc PDPropertyList object containing optional content settings
1286 Sets the current page. @param page PDPage object to be set
1287 Sets the file specification for this object. @param file PDFileSpecification to be set
1288 Sets border effect dictionary. @param be PDBorderEffectDictionary object representing the border effect
1289 Sets the rectangle difference. @param rd PDRectangle representing the rectangle difference
1290 Sets the action associated with this PDF object. @param action PDAction to be set
1291 Sets the border style dictionary. @param bs border style to be applied
1292 Sets the destination for this action. @param dest PDDestination object representing the target location
1293 Sets the previous URI action. @param pa PDActionURI object representing the URI action
1294 Sets the annotation's associated popup. @param popup PDAnnotationPopup object to associate
1295 Sets the annotation in reply to another. @param irt PDAnnotation representing the annotation being replied to
1296 Sets external data dictionary. @param externalData PDExternalDataDictionary to be set
1297 Sets border style dictionary. @param bs border style to apply
1298 Sets the border effect dictionary. @param be the border effect dictionary to apply
1299 Sets the border effect dictionary. @param be the border effect dictionary to apply
1300 Sets the rectangle difference. @param rd PDRectangle object representing the difference
1301 Sets the appearance characteristics. @param appearanceCharacteristics dictionary containing appearance settings
1302 Sets an action associated with this object. @param action PDAction to be set
1303 Sets additional actions for annotation. @param actions PDAnnotationAdditionalActions object to be set
1304 Sets the border style of the PDF object. @param bs border style dictionary to apply
1305 Sets the parent field. @param field the parent PDTerminalField object @throws IllegalArgumentException if field shares a dictionary with its only widget
1306 Sets normal appearance for an entry. @param entry PDAppearanceEntry to be set as normal appearance
1307 Sets the normal appearance of a form field. @param ap the appearance stream to set
1308 Sets rollover appearance for a button. @param entry PDAppearanceEntry object defining the appearance
1309 Sets the rollover appearance for a button. @param ap PDAppearanceStream object representing the appearance
1310 Sets the down appearance for a PDF annotation. @param entry PDAppearanceEntry containing appearance details
1311 Sets the down appearance stream. @param ap appearance stream to be set
1312 Sets the property build filter. @param filter PDPropBuildDataDict object to be set as filter
1313 Sets publication security properties. @param pubSec PDPropBuildDataDict containing security settings
1314 Sets the application property in the dictionary. @param app PDPropBuildDataDict object representing the application data
1315 Sets the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate to be set
1316 Sets property build in dictionary. @param propBuild PDPropBuild object to be set
1317 Sets the previous sibling node in an outline. @param outlineNode the sibling node to be set
1318 Sets the next sibling in the PDF outline hierarchy. @param outlineNode the next sibling node to be linked
1319 Sets the destination for this action. @param dest PDDestination object representing the target location
1320 Sets an action for this object. @param action the action to be set
1321 Sets the structure element. @param structureElement the new structure element to set
1322 Sets the first child node in an outline. @param outlineNode the PDOutlineNode to be set as the first child
1323 Sets the last child node in an outline. @param outlineNode the PDOutlineNode to be set as the last child
1324 Sets default resources. @param dr PDResources object to be set as default
1325 Sets XFA resource in the dictionary. @param xfa PDXFAResource object to be set
1326 Sets the signature value. @param value PDSignature object to be set @throws IOException if an I/O error occurs
1327 Sets default signature value. @param value PDSignature object to be set as default
1328 Sets the seed value in the PDF document. @param sv PDSeedValue object containing the seed data
1329 Sets additional actions for the form field. @param actions PDFormFieldAdditionalActions object containing actions to be set
1330 Sets the list of child widgets. @param children list of PDAnnotationWidget objects
1331 Sets the bounding box for the PDF object. @param rectangle PDRectangle defining the bounding box
1332 Sets the measurement dictionary. @param measure PDMeasureDictionary object to be set
1333 Sets document information in the thread. @param info document information to be set
1334 Sets the thread for the bead. @param thread PDThread object to be assigned
1335 Sets the next thread bead. @param next the next bead in the sequence
1336 Sets the previous thread bead. @param previous the previous bead to set
1337 Sets the current page. @param page the PDF page to set
1338 Sets the rectangle for the bead. @param rect PDRectangle defining the area
1339 Sets the marked status. @param value true if marked, false otherwise
1340 Sets user properties flag. @param userProps boolean indicating if user properties are enabled
1341 Sets the suspect status in the dictionary. @param suspect boolean indicating if the entity is a suspect
1342 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1343 Sets the "Open" status in the COS object. @param open boolean value indicating openness
1344 Sets the FD flag in the COS object. @param fd boolean value to set the FD flag
1345 Sets the volatile flag of a file. @param fileIsVolatile true if the file is volatile, false otherwise
1346 Sets the hidden state of the object. @param hidden true to hide, false to show
1347 Sets encryption metadata flag. @param encryptMetaData true to enable encryption metadata, false otherwise
1348 Sets the annotation's caption visibility. @param cap true to show caption, false to hide
1349 Sets whether annotations should scale to fit. @param value true if annotations should scale; false otherwise
1350 Sets the rename flag in the PDF template. @param value true to enable renaming, false otherwise
1351 Enables or disables anti-aliasing. @param antiAlias true to enable, false to disable
1352 Sets stroking overprint control. @param op true to enable, false to disable
1353 Sets non-stroking overprint control. @param op true to enable, false to disable
1354 Sets automatic stroke adjustment. @param sa true to enable, false to disable
1355 Sets the alpha source flag. @param alpha true to enable alpha source, false otherwise
1356 Sets the knockout flag in the dictionary. @param tk true to enable knockout, false otherwise
1357 Sets open mode for a document. @param value OpenMode specifying how to open the document
1358 Sets open mode for a document. @param value OpenMode specifying how to open the document
1359 Sets open mode for a document. @param value OpenMode specifying how to open the document
1360 Sets the action to be synchronous or asynchronous. @param synchronous true if the action should be synchronous, false otherwise
1361 Sets the repeat flag for an action. @param repeat true to enable repeating, false otherwise
1362 Sets the mix flag in the action. @param mix boolean value to enable or disable mixing
1363 Sets the caption flag. @param cap boolean value to enable or disable caption
1364 Sets the open state of the PDF object. @param open boolean indicating if the object should be open
1365 Sets the pre-release flag in the dictionary. @param preRelease boolean indicating if it's a pre-release version
1366 Sets whether to suppress non-embedded font warnings. @param noEmbedFontWarning flag to disable warnings
1367 Sets trusted mode in the dictionary. @param trustedMode flag indicating trusted mode status
1368 Sets the need for appearances flag. @param value boolean indicating if appearance streams are needed
1369 Sets the toolbar visibility preference. @param value true to hide the toolbar, false to show it
1370 Sets whether to hide the menu bar. @param value true to hide, false to show
1371 Sets whether to hide window UI. @param value true to hide, false otherwise
1372 Sets whether to fit window on PDF open. @param value true to fit window, false otherwise
1373 Sets the center window preference. @param value true to center window, false otherwise
1374 Sets whether to display document title. @param value true to enable, false to disable
1375 Sets an array of strings in the COS object. @param name key for the array in the COS dictionary @param values array of string values to set
1376 Sets an array of names in the COS object. @param name key for the dictionary entry @param values array of string values to be set
1377 Sets an array of numbers in the PDF dictionary. @param name key for the array in the dictionary @param values float array to be set
1378 Sets the name-value pair in the document. @param key The key as a string. @param value The value to be set for the key.
1379 Sets the page mode of the document. @param mode the desired page mode to set
1380 Sets the page layout for the document. @param layout the desired page layout configuration
1381 Sets the document version. @param version the version string to be set
1382 Sets the trapped status. @param value must be "True", "False", or "Unknown"
1383 Sets or removes the style attribute. @param style new style value or null to remove it
1384 Initializes a new dictionary with a specified type. @param type the type of the dictionary
1385 Sets the owner of the document. @param owner The name of the document owner
1386 Initializes a PDMarkedContentReference with a new dictionary.
1387 Constructs a new PDObjectReference with an initialized dictionary.
1388 Sets the structure type of the PDF object. @param structureType the new structure type to be set
1389 Sets class names with revisions. @param classNames Revisions containing class names and their revision numbers
1390 Initializes a PDStructureNode with a specified type. @param type node type as a string
1391 Sets the name and notifies of change if different. @param name new name to set
1392 Sets the guideline style. @param style the new guideline style
1393 Sets the sub-filter name in the dictionary. @param subfilter the sub-filter string to be set
1394 Sets the annotation's intent. @param intent the purpose or type of the annotation
1395 Sets line ending style. @param style line ending style as a string
1396 Sets the icon name. @param icon the new icon name to be set
1397 Sets the version of the catalog. @param version the version string to be set
1398 Sets the encoding for the FDF document. @param encoding the character encoding to be used
1399 Sets the scaling option for the PDF document. @param option scaling option to be applied
1400 Sets the scaling type for an image. @param scale scaling type as a string
1401 Initializes a new pattern dictionary.
1402 Sets the type of the action. @param type the new type to be set
1403 Sets the subtype of an action. @param s the subtype string to be set
1404 Sets the subtype of the PDF object. @param subType the subtype to be set
1405 Sets the appearance state. @param as the appearance state to set
1406 Sets the attachment name. @param name the new attachment name
1407 Sets the line ending style. @param style the line ending style to be set
1408 Sets the caption positioning. @param captionPositioning new caption positioning value
1409 Sets the highlight mode. @param mode the highlight mode to apply
1410 Sets the reply type in the COS object. @param rt the reply type to be set
1411 Sets the intent of the document. @param it the intent string to be set
1412 Sets the name of the COS object. @param name the new name to set
1413 Sets the name of the COS object. @param name the new name to set
1414 Sets the highlighting mode for a link. @param highlightingMode valid modes: 'N', 'I', 'O', 'P', 'T'
1415 Sets the style of the PDF object. @param s the style string to be applied
1416 Constructs a new PDExternalDataDictionary instance. Initializes with a COSDictionary and sets its type to "ExData".
1417 Sets the subtype of the COS object. @param subtype the new subtype value to be set
1418 Sets the name in the dictionary. @param name the new name to set
1419 Sets the URL type in the dictionary. @param urlType the type of URL to be set
1420 Initializes a new PDF document outline. Sets the type to "Outlines" in the underlying COS object.
1421 Initializes a new PDDocumentOutline from a COSDictionary. @param dic dictionary containing outline data
1422 Sets default value for COS object. @param value default string value to be set
1423 Initializes a new PDMeasureDictionary with a COSDictionary. Sets the type to "Measure".
1424 Sets the subtype of the COS object. @param subtype the subtype to be set
1425 Initializes a new number format dictionary.
1426 Sets the name of the COSObject. @param name the new name to set
1427 Creates a new transition with the specified style. @param style the transition effect style
1428 Sets the transition dimension. @param dimension the new transition dimension to be set
1429 Sets the transition motion. @param motion the transition motion to apply
1430 Sets non-full screen page mode. @param value the mode to be set
1431 Sets the reading direction preference. @param value the desired reading direction
1432 Sets the view area preference. @param value boundary value to define the view area
1433 Sets the view clipping boundary. @param value the new clipping boundary to apply
1434 Sets the print area boundary. @param value boundary value to be set
1435 Sets print clipping boundary. @param value boundary value to be set
1436 Sets duplex printing preference. @param value duplex mode to be set
1437 Sets the print scaling preference. @param value the desired print scaling option
1438 Sets a date value in the PDF document. @param key the COSName key to associate with the date @param date the Calendar object representing the date
1439 Sets a string value in the PDF dictionary. @param key the key under which to store the value @param value the string value to store
1440 Sets a string value in an embedded dictionary. @param embedded the name of the embedded dictionary @param key the key under which to store the value @param value the string value to set
1441 Sets the document's language. @param language ISO 639-1 language code (e.g., "en" for English)
1442 Sets the document's title. @param title the new title for the document
1443 Sets the document's author. @param author name of the document author
1444 Sets document subject. @param subject document subject string
1445 Sets document keywords. @param keywords comma-separated list of keywords
1446 Sets the document creator. @param creator name of the document creator
1447 Sets the PDF producer. @param producer name of the producer application
1448 Sets or removes the prefix in the root configuration. @param prefix the new prefix to set, or null to remove it
1449 Sets the Unicode filename. @param file Unicode filename to be set
1450 Sets the file path in the PDF document. @param file the path to the file
1451 Sets the file description. @param description the description to be set
1452 Sets the identifier for the element. @param id unique identifier string
1453 Sets the document title. @param title new title for the document
1454 Sets the language attribute in the COS object. @param language the language to be set
1455 Sets an alternate description. @param alternateDescription alternative text description
1456 Sets the expanded form of the object. @param expandedForm string representing the expanded form
1457 Sets the actual text for a PDF annotation. @param actualText the text to be displayed
1458 Sets the formatted value and notifies of change if different. @param formattedValue new formatted string value to set
1459 Sets the modification date. @param date the new modification date as a string
1460 Sets the name of an annotation. @param name the new name to set
1461 Sets the annotation's content text. @param contents the text to be set as the annotation's content
1462 Sets the title of an annotation. @param title the new title for the annotation
1463 Sets the document's subject. @param subject the subject to be set
1464 Sets the annotation symbol. @param symbol the type of symbol to set ("paragraph" or other)
1465 Sets the default appearance string. @param appearance appearance string to be set
1466 Sets the default style for annotations. @param style the style to be applied
1467 Sets the caption style. @param captionStyle the style to be applied to captions
1468 Sets the state of an annotation. @param state the new state value to set
1469 Sets the state model. @param stateModel the state model to set
1470 Sets the document's status. @param status new status string to be set
1471 Sets the target string for the PDF document. @param target the target destination as a string
1472 Sets the partial field name. @param partial the partial field name to be set
1473 Sets the name attribute in the COS dictionary. @param name the new name to be set
1474 Sets the name in the dictionary. @param name the name to be set
1475 Initializes PDOptionalContentProperties with default settings.
1476 Sets the JavaScript action. @param sAction JavaScript code to be executed
1477 Sets the file path. @param f file path as a string
1478 Sets the 'D' attribute in the action. @param d value to be set for the 'D' attribute
1479 Sets the "O" string in the action. @param o the value to be set
1480 Sets the print permission. @param p permission string to be set
1481 Sets the URI for an action. @param uri the new URI to be set
1482 Sets the filename in the dictionary. @param filename the name of the file to be set
1483 Sets the annotation's name. @param name the name to be assigned to the annotation
1484 Sets the filename in the PDF document parameters. @param file the name of the file to be set
1485 Sets the directory path. @param dir directory path to be set
1486 Sets the operation string in parameters. @param op the operation to be set
1487 Sets execution parameter. @param param parameter value to be set
1488 Sets the contents of the document. @param value the content string to be set
1489 Sets the modified date of the PDF document. @param m date string to be set
1490 Sets the annotation name. @param nm the new annotation name
1491 Sets default appearance value. @param daValue default appearance string to be set
1492 Sets the default style string in the COS object. @param defaultStyleString the style string to be set
1493 Sets the title of a popup. @param t the title string to set
1494 Sets the subject of the document. @param subj the subject string to be set
1495 Sets the state of the COS object. @param state new state value to set
1496 Sets the state model of the COS object. @param stateModel the state model to be set
1497 Sets the normal text caption. @param caption the caption string to be set
1498 Sets the rollover caption for an object. @param caption text to display on rollover
1499 Sets an alternate caption. @param caption the new alternate caption text
1500 Sets the date in the dictionary. @param date the date string to set
1501 Sets the URL in the dictionary. @param url the URL to be stored
1502 Sets the URL in the dictionary. @param url the URL to be set
1503 Sets the name in the dictionary. @param name the new name to be set
1504 Sets the document's location. @param location the location string to set
1505 Sets the reason for an action. @param reason description of the action's purpose
1506 Sets the contact information. @param contactInfo the contact details to be stored
1507 Sets the title of the PDF document. @param title the new title to be set
1508 Sets default appearance value in dictionary. @param daValue default appearance string to be set
1509 Sets default value for a field. @param value the default value to be set
1510 Sets the partial name for a dictionary entry. @param name the partial name to set; must not contain a period
1511 Sets the alternate field name. @param alternateFieldName the new alternate field name to be set
1512 Sets the mapping name in the dictionary. @param mappingName the name to be mapped
1513 Sets the string value of a PDF field. @param value the new string value for the field
1514 Sets the value of the COS object. @param value the new value to set @throws IOException if an I/O error occurs
1515 Sets default value for COS object. @param value default string value to be set
1516 Sets default appearance for annotations. @param daValue the new default appearance string
1517 Sets the scale ratio in the COS object. @param scaleRatio the scaling ratio as a string
1518 Sets an integer value in PDF document. @param key the key associated with the integer value @param value the integer value to be set
1519 Sets an integer value in a nested dictionary. @param embeddedDictionary name of the embedded dictionary @param key name of the key to set @param value integer value to store
1520 Sets a specific bit flag for a given field. @param field the COSName representing the field @param bitFlag the bit flag to set or clear @param value true to set the flag, false to clear it
1521 Sets the number of structure parent objects. @param structParents count of structure parent objects
1522 Sets the rotation of a PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1523 Initializes a PDPageTree with a given root dictionary and document. @param root the COSDictionary representing the page tree root @param document the PDDocument containing this page tree
1524 Removes a node from the PDF structure. @param node the COSDictionary node to remove
1525 Adds a page to the PDF document. @param page PDPage object to be added
1526 Sets the starting index for pagination. @param start positive integer representing the starting index
1527 Sets bits per sample in COS object. @param bps number of bits per sample
1528 Sets the MCID value for the COS object. @param mcid the Marked Content Identifier to be set
1529 Sets the revision number for a COS object. @param revisionNumber non-negative integer representing the revision number
1530 Sets the next key in the parent tree. @param parentTreeNextkey the new value for the next key
1531 Sets the length in the cryptographic filter dictionary. @param length the new length value to be set
1532 Sets the version of the dictionary. @param version the new version number to be set
1533 Sets the length of the dictionary. @param length new length value to be set
1534 Sets the document revision number. @param revision new revision number to be set
1535 Sets document permissions. @param permissions permission flags as integer
1536 Sets the current page number. @param page the page number to set
1537 Sets text justification for annotations. @param justification "left", "centered", or "right"
1538 Sets the rotation of an annotation. @param rotation degrees to rotate (0, 90, 180, or 270)
1539 Sets field flags. @param ff integer representing field flags
1540 Sets field flags in COSName. @param ff integer representing field flags
1541 Sets clear field flags. @param ff flag value to set
1542 Sets widget field flags. @param f flag value to be set
1543 Sets widget field flags. @param ff flag values to be set
1544 Sets widget field flags. @param ff integer representing field flags
1545 Sets document flags. @param flags flag values to be set
1546 Sets character widths in a PDF font dictionary. @param font the font dictionary to update @param glyphList mapping of glyph names to Unicode @throws IOException if an I/O error occurs
1547 Sets the paint type. @param paintType the paint type to be set
1548 Sets the pattern type. @param patternType the type of pattern to be set
1549 Sets the paint type for the object. @param paintType the type of painting to apply
1550 Sets the tiling type. @param tilingType the tiling type value to set
1551 Sets the shading type in the dictionary. @param shadingType the type of shading to apply
1552 Sets the number of bits per flag. @param bitsPerFlag the number of bits to be set for each flag
1553 Sets the number of vertices per row. @param verticesPerRow the number of vertices to be set
1554 Sets the number of bits per color component. @param bitsPerComponent number of bits for each color component
1555 Sets the number of bits per coordinate. @param bitsPerCoordinate number of bits to set
1556 Sets line cap style. @param style line cap style to be set
1557 Sets line join style. @param style join style to be applied
1558 Sets the overprint mode. @param overprintMode the new overprint mode value or null to remove it
1559 Sets action flags. @param flags integer representing action flags
1560 Sets action flags. @param flags integer representing action flags
1561 Sets the page number in a dictionary. @param pageNumber the new page number to set
1562 Sets annotation index in dictionary. @param index the annotation index to set
1563 Sets annotation flags. @param flags integer representing annotation flags
1564 Sets the structure parent index. @param structParent index of the parent structure element
1565 Sets the Q attribute in the COS object. @param q value to be set for Q
1566 Sets the rotation of the PDF page. @param rotation angle in degrees (0, 90, 180, or 270)
1567 Sets the value of P in the dictionary. @param p integer value; must be between 0 and 3
1568 Sets whether timestamp is required. @param flag true if timestamp is required, false otherwise
1569 Sets the number of times the document has been opened. @param openCount the new count of document openings
1570 Sets the Q value in the dictionary. @param q integer value to be set
1571 Sets field flags in the dictionary. @param flags integer representing field flags
1572 Sets the top index of a PDF annotation. @param topIndex the new top index value; null removes the entry
1573 Sets maximum length. @param maxLen new maximum length value
1574 Sets the Q value in the COS object. @param q the value to be set
1575 Sets a long value in PDF document. @param key the key associated with the value @param value the long value to be set
1576 Writes the trailer to a PDF document. @param doc the COSDocument to write the trailer to @throws IOException if an I/O error occurs
1577 Sets the document revision number. @param revision new revision number to be set
1578 Sets the minimum revision number. @param revision the new minimum revision value
1579 Sets a float value in the PDF document. @param key the key associated with the float value @param value the float value to be set
1580 Sets the user unit for a PDF page. @param userUnit the scaling factor for user space coordinates (must be positive)
1581 Sets guideline width. @param width new guideline width value
1582 Sets the opacity of an annotation. @param opacity float value representing the opacity (0.0 to 1.0)
1583 Sets the leader line length. @param leaderLength the length of the leader line
1584 Sets the leader line extension. @param leaderExtend length of the leader line extension
1585 Sets the leader line offset. @param leaderOffset the new offset value
1586 Sets the font weight. @param fontWeight the font weight value to set
1587 Sets the italic angle of the font. @param angle the italic angle value to be set
1588 Sets the font ascent value. @param ascent the ascent value to be set
1589 Sets the descent value for font metrics. @param descent the descent value to be set
1590 Sets the leading (line spacing) in the dictionary. @param leading the line spacing value to be set
1591 Sets the cap height of the font. @param capHeight the new cap height value
1592 Sets the X-height value. @param xHeight the new X-height value to be set
1593 Sets the vertical stem width. @param stemV the vertical stem width value
1594 Sets the stem height. @param stemH new stem height value
1595 Sets the average width of characters. @param averageWidth the average width to be set
1596 Sets the maximum width. @param maxWidth the maximum width value to set
1597 Sets the missing width in the dictionary. @param missingWidth the width value to be set
1598 Sets the X step value. @param xStep the new X step value to be set
1599 Sets Y step value. @param yStep new Y step value to be set
1600 Sets the audio volume. @param volume audio level from -1.0 (mute) to 1.0 (max)
1601 Sets the length of the leader line. @param leaderLineLength the desired length of the leader line
1602 Sets the leader line extension length. @param leaderLineExtensionLength the new length for leader lines
1603 Sets the leader line offset length. @param leaderLineOffsetLength the new offset length for leader lines
1604 Sets constant opacity. @param ca opacity value (0.0 to 1.0)
1605 Sets the width of a PDF object. @param w width value to be set
1606 Sets the minimum required capability. @param minimumRequiredCapability the capability value to set
1607 Sets the CYX value in the COS object. @param cyx the float value to be set
1608 Parses a COSStream from a dictionary. @param dic dictionary containing stream information @return parsed COSStream object @throws IOException if parsing fails or required data is missing
1609 Parses a COSDictionary from the input stream. @param isDirect indicates if the dictionary is direct @return parsed COSDictionary object @throws IOException on parsing error
1610 Parses a PDF or FDF file. @param lenient whether to parse leniently @return PDDocument object representing the parsed PDF @throws IOException if parsing fails
1611 Processes operators in a PDF content stream. @param contentStream the PDF content stream to process
1612 Parses input into a list of tokens. @return List containing parsed objects or null if no more tokens are available @throws IOException if an I/O error occurs during parsing
1613 Parses PDF stream to extract glyph bounding box. @return PDRectangle representing the glyph bounds or null if not found
1614 Parses PDF to get width. @return float value representing width @throws IOException if parsing fails
1615 Writes a PDF document. @param doc PDDocument to be written @throws IOException if an I/O error occurs
1616 Saves incremental PDF to output stream. @param output destination for the saved PDF @throws IOException if an I/O error occurs
1617 Saves incremental PDF changes to output stream. @param output destination for the PDF data @param objectsToWrite set of COSDictionary objects to write @throws IOException if an I/O error occurs
1618 Initializes a new PDDocument with an in-memory cache. Uses IOUtils to create a memory-only stream cache.
1619 Retrieves the document catalog. Initializes it if not already created. @return PDDocumentCatalog object
1620 Retrieves a COSDictionary representing a PDF page by its 1-based index. @param pageNum 1-based index of the page to retrieve @param node current node in the PDF structure tree @param encountered number of pages already processed @return COSDictionary of the specified page or throws an exception if not found
1621 Creates a PDF file specification from a COSBase object. @param base the COSBase object representing the file specification @return PDFileSpecification object or null if base is null @throws IOException if the base type is unknown
1622 Notifies attribute change to associated structure element.
1623 Appends a COSObjectable as a kid. @param objectable the object to append
1624 Inserts a COSObjectable before another. @param newKid the object to insert @param refKid reference object for insertion point
1625 Removes an object from the list of kids. @param objectable the COSObjectable to remove @return true if removal was successful, false otherwise
1626 Sets the standard crypt filter dictionary. @param cryptFilterDictionary dictionary containing encryption settings
1627 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary the cryptographic filter to be set as default
1628 Constructs an FDF annotation caret.
1629 Creates a new circle annotation.
1630 Constructs a new file attachment annotation. Initializes the annotation with the subtype "FileAttachment".
1631 Initializes a new free text annotation. Sets the subtype to "FreeText".
1632 Constructs an FDFAnnotationInk. Sets the subtype to "INK".
1633 Initializes a new FDFAnnotationLine with default subtype.
1634 Initializes a new FDF annotation link.
1635 Constructs a new polygon annotation. Sets the subtype to "Polygon".
1636 Constructs a new polyline annotation. Initializes the annotation with the subtype "PolyLine".
1637 Constructs a new sound annotation. Initializes the annotation with the specified subtype.
1638 Creates a new FDF annotation of type square.
1639 Creates a new FDF annotation of type stamp. Initializes the subtype to STAMP.
1640 Creates a new FDF annotation text instance. Sets the subtype to "Text".
1641 Default constructor for FDFAnnotationTextMarkup.
1642 Builds vertical metrics for CID font. @param cidToGid mapping of CID to GID @throws IOException if I/O error occurs
1643 Builds vertical metrics for CID font. @param cidFont CID font dictionary to update @throws IOException if an I/O error occurs
1644 Constructs a new instance of PDSimpleFont.
1645 Retrieves an optional content group by name. @param name the name of the group to find @return PDOptionalContentGroup object or null if not found
1646 Retrieves optional content groups from the document. @return Collection of PDOptionalContentGroup objects
1647 Sets decode values for the object. @param decodeValues array of decode values to be set
1648 Sets decoding values for PDF object. @param decodeValues array of decoding parameters
1649 Sets the line width for PDF drawing. @param width the width of the line
1650 Sets the miter limit for line joins. @param miterLimit the miter limit value to set
1651 Sets the flatness tolerance. @param flatness new flatness value to be set
1652 Sets the smoothness tolerance. @param smoothness the smoothness value to be set
1653 Sets the stroking alpha constant. @param alpha the new alpha value
1654 Sets non-stroking alpha constant. @param alpha transparency value (0.0 to 1.0)
1655 Creates a new link annotation. Sets the subtype to 'Link' in the COS object.
1656 Constructs a new PDAnnotationMarkup instance.
1657 Creates a new PDAnnotationPopup with subtype "PopUp".
1658 Constructs a new PDAnnotationWidget.
1659 Creates a new link annotation. @param field dictionary containing annotation properties
1660 Constructs a PDAnnotationMarkup from a COSDictionary. @param dict The dictionary containing annotation properties.
1661 Constructs a new PDAnnotationPopup from a COSDictionary. @param field dictionary representing the annotation
1662 Constructs an unknown annotation from a COS dictionary. @param dic COS dictionary representing the annotation
1663 Constructs a new PDAnnotationWidget from a COSDictionary. @param field the COSDictionary representing the annotation field
1664 Sets equal differences for all sides of a rectangle. @param difference uniform difference value for all sides
1665 Sets equal differences for all sides of a rectangle. @param difference the uniform difference value to apply
1666 Sets uniform differences for all sides of a rectangle. @param difference the uniform difference value to apply to all sides
1667 Sets the border line properties. @param lineWidth width of the border line @param bs border style dictionary @param border COSArray representing the border @throws IOException if an I/O error occurs
1668 Adds key usage flags to a certificate. @param digitalSignature, nonRepudiation, etc. - boolean flags for key usage
1669 Constructs a PDCheckBox associated with a PDAcroForm. @param acroForm the form to which this checkbox belongs
1670 Creates a new PDComboBox. @param acroForm parent form to add combo box to
1671 Constructs a PDListBox from an existing PDAcroForm. @param acroForm the form to which this list box belongs
1672 Sets the value of a form field. @param value the new value to set @throws IOException if an I/O error occurs
1673 Updates selected options index based on provided values. @param values list of selected option values @param options list of available option values
1674 Retrieves or creates a border array for a PDF object. @return COSArray representing the border, defaulting to [0, 0, 1] if none exists
1675 Initializes a COSWriterCompressionPool with given document and parameters. @param document PDDocument to be compressed @param parameters compression settings, defaults to new CompressParameters if null @throws IOException if an I/O error occurs during initialization
1676 Retrieves an embedded date from a PDF document. @param embedded name of the embedded object @param key key for the date value @return Calendar object representing the embedded date or null if not found
