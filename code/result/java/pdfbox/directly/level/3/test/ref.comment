1 Constructor. @param page the page the content stream belongs to
2 Instantiate a new PDFMarkedContentExtractor object.
3 Constructor. @throws IOException If there is an error loading properties.
4 Nice method, gives you every object you want Arrays works properly too. Try "P/Annots/[k]/Rect" where k means the index of the Annots array. @param objPath the relative path to the object. @return the object
5 Gets the attribute value for a given name. @param attrName the given attribute name @return the attribute value for a given name
6 Gets the attribute value for a given name. @param attrName the given attribute name @param defaultValue the default value @return the attribute value for a given name
7 Is the attribute with the given name specified in this attribute object? @param name the attribute name @return <code>true</code> if the attribute is specified, <code>false</code> otherwise
8 Gets an array of strings. @param name the attribute name @return the array of strings
9 Gets a name value or array of name values. @param name the attribute name @param defaultValue the default value @return a String or array of Strings
10 Gets a number or a name value. @param name the attribute name @param defaultValue the default name @return a Float or a String
11 Gets a number or an array of numbers. @param name the attribute name @param defaultValue the default value @return a Float or an array of floats
12 Gets a colour. @param name the attribute name @return the colour
13 Returns a unique key for a new resource.
14 This will set an object at a specific index. @param index zero based index into array. @param intVal The object to set.
15 This factory method will get the appropriate number object. @param number The string representation of the number. @return A number object, either float or int. @throws IOException If the string is not a number.
16 Appends a marked-content sequence kid. @param mcid the marked-content id (MCID). @throws IllegalArgumentException if the mcid is negative.
17 @return the value for this direction
18 This will parse a PDF HEX string with fail fast semantic meaning that we stop if a not allowed character is found. This is necessary in order to detect malformed input and be able to skip to next object start. We assume starting '&lt;' was already read. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
19 Constructor. Initializes to 0,0,0,0
20 Constructor. @param width The width of the rectangle. @param height The height of the rectangle.
21 Returns the updated <code>Rect</code> entry for the annotation. The rectangle completely contains the cloudy border. @return Annotation <code>Rect</code>.
22 Returns the updated <code>RD</code> entry for Square and Circle annotations. @return Annotation <code>RD</code> value.
23 Get a padded rectangle. <p>Creates a new rectangle with padding applied to each side. . @param rectangle the rectangle. @param padding the padding to apply. @return the padded rectangle.
24 Get a rectangle enlarged by the differences. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
25 Get a rectangle with the differences applied to each side. <p> Creates a new rectangle with differences added to each side. If there are no valid differences, then the original rectangle is returned. @param rectangle the rectangle. @param differences the differences to apply. @return the padded rectangle.
26 Apply padding to a box. @param box box @return the padded box.
27 Create a fresh XRef stream like for a fresh file or an incremental update. @param cosDocument the COSDocmernt to be used to create a new COSStream
28 This will create a new PDObjectStream object. @param document The document that the stream will be part of. @return A new stream object.
29 Creates a new empty PDStream object. @param document The document that the stream will be part of.
30 Creates a new empty PDStream object. @param document The document that the stream will be part of.
31 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied, if any. This method closes the InputStream.
32 Creates a COS stream from raw (encoded) data.
33 Encodes data. @param input the byte stream to encode @param encoded the stream where encoded data will be written @param parameters the parameters used for encoding @param index the index to the filter being encoded @throws IOException if the stream cannot be encoded
34 Default constructor.
35 Default constructor
36 Default constructor.
37 Default Constructor.
38 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroform.
39 Creates a new ExportFormat attribute object with a given dictionary. @param dictionary the dictionary
40 Returns the entry as an appearance stream. @return the entry as an appearance stream @throws IllegalStateException if this entry is not an appearance stream
41 Returns the entry as an appearance subdictionary. @return the entry as an appearance subdictionary @throws IllegalStateException if this entry is not an appearance subdictionary
42 Creates a new XObject instance of the appropriate type for the COS stream. @param base The stream which is wrapped by this XObject. @param resources the resources of this XObject @return A new XObject instance. @throws java.io.IOException if there is an error creating the XObject.
43 Adds an OTF or TTF font to the file cache. To reduce memory, the parsed font is not cached.
44 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
45 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
46 Returns the destination corresponding to the parameter. @param name The destination name. @return The destination for that name, or null if there isn't any. @throws IOException if something goes wrong when creating the destination object.
47 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
48 This will get the destination to jump to. @return The D entry of the specific go-to action dictionary. @throws IOException If there is an error creating the destination.
49 Get the destination to be displayed when the annotation is activated. Either this or the action entry should be set, but not both. @return The destination for this annotation. @throws IOException If there is an error creating the destination.
50 Get the page destination of this node. @return The page destination of this node. @throws IOException If there is an error creating the destination.
51 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
52 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
53 Constructor for encrypted pdfs. @param source input representing the pdf. @param password password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param keyAlias alias to be used for decryption when using public key security @throws IOException if the source data could not be read
54 This will get a stream that can be written to. @return An output stream to write data to. @throws IOException If an IO error occurs during writing.
55 Writes the stream to the actual stream in the COSStream. @throws IOException If there is an error writing to the stream
56 Create a new appearance stream. @param appearance The appearance stream to write to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @throws IOException If there is an error writing to the content stream.
57 The Tm operator. Sets the text matrix to the given values. A current text matrix will be replaced with the new one. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was not allowed to be called at this time.
58 The cm operator. Concatenates the given matrix with the current transformation matrix (CTM), which maps user space coordinates used within a PDF content stream into output device coordinates. More details on coordinates can be found in the PDF 32000 specification, 8.3.2 Coordinate Spaces. @param matrix the transformation matrix @throws IOException If there is an error writing to the stream.
59 Gets the artifact's bounding box (BBox). @return the artifact's bounding box
60 Gets the bounding box. @return the bounding box.
61 The rectangle associated with this annotation. @return The annotation rectangle.
62 This will retrieve the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. @return the rectangle difference
63 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
64 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
65 This will get the fringe. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
66 This will get the fonts bounding box. @return The fonts bounding box.
67 This will get the fonts bounding box from its dictionary. @return The fonts bounding box.
68 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject's bounding box. These boundaries are used to clip the form XObject and to determine its size for caching. @return The BBox of the form.
69 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern's bounding box. @return The BBox of the pattern.
70 An array of four numbers in the form coordinate system (see below), giving the coordinates of the left, bottom, right, and top edges, respectively, of the shading's bounding box. @return the BBox of the form
71 The annotation rectangle, defining the location of the annotation on the page in default user space units. This is usually required and should not return null on valid PDF documents. But where this is a parent form field with children, such as radio button collections then the rectangle will be null. @return The Rect value of this annotation.
72 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
73 This will get the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @return the rectangle difference
74 This will retrieve the rectangle specifying the location of the viewport. @return the location
75 The rectangle on the page that this bead is part of. @return The part of the page that this bead covers.
76 @param array dash array @param phase dash phase
77 This will get the dash pattern. @return null or the D value in the dictionary.
78 Returns an ARGB image filled with the given paint and using the given image as a mask. @param paint the paint to fill the visible portions of the image with @return a masked image filled with the given paint @throws IOException if the image cannot be read @throws IllegalStateException if the image is not a stencil.
79 This will get the optional matrix of an XObjectForm. It maps the form space to user space. @return the form matrix if available, or the identity matrix.
80 Returns the pattern matrix, or the identity matrix is none is available. @return the pattern matrix
81 This will get the optional Matrix of a function based shading. @return the matrix
82 Returns the given attribute, inheriting from parent tree nodes if necessary. @param node page object @param key the key to look up @return COS value for the given key
83 This is a convenience method that will get the dictionary object that is expected to be a COSBoolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The entry converted to a boolean.
84 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the defaultvalue will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
85 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value -1 will be returned. @param firstKey The first key to the item in the dictionary. @param secondKey The second key to the item in the dictionary. @return The integer value.
86 Creates an inline image from the given parameters and data. @param parameters the image parameters @param data the image data @param resources the current resources @throws IOException if the stream cannot be decoded
87 Returns the suffix for this image type, e.g. jpg/png. @return The image suffix.
88 This will get all dictionaries objects by type. @param type1 The first possible type of the object, mandatory. @param type2 The second possible type of the object, usually an abbreviation, optional. @return This will return all objects with the specified type(s).
89 Returns the Unicode character sequence which corresponds to the given character code. @param code character code @param customGlyphList a custom glyph list to use instead of the Adobe Glyph List @return Unicode character(s)
90 This will tell if this document is encrypted or not. @return true If this document is encrypted.
91 This will parse the stream and populate the FDFDocument object. @return the parsed FDFDocument @throws IOException If there is an error reading from the stream or corrupt data is found.
92 Get the documents AcroForm. This will return null if no AcroForm is part of the document. @return The document's AcroForm.
93 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
94 Returns true if the given color space name exists in these resources. @param name Name of the color space resource. @return true if the given color space name exists in these resources, otherwise false
95 Returns the extended graphics state resource with the given name, or null if none exists. @param name Name of the graphics state resource. @return the extended graphics state with the given name or null
96 Tells whether the XObject resource with the given name is an image. @param name Name of the XObject resource. @return true if it is an image XObject, false if not.
97 Returns the names of the color space resources, if any. @return an iterable containing all names of available colorspaces
98 Returns the names of the XObject resources, if any. @return an iterable containing all names of available xobjects
99 Returns the names of the font resources, if any. @return an iterable containing all names of available fonts
100 Returns the names of the property list resources, if any. @return an iterable containing all names of available property lists
101 Returns the names of the shading resources, if any. @return an iterable containing all names of available shadings
102 Returns the names of the pattern resources, if any. @return an iterable containing all names of available patterns
103 Returns the names of the extended graphics state resources, if any. @return an iterable containing all names of available extended graphics states
104 Returns the standard crypt filter. @return the standard crypt filter if available.
105 Returns the default crypt filter (for public-key security handler). @return the default crypt filter if available.
106 Returns the stream of the glyph for the given character code @param code character code @return the stream to be used to render the glyph
107 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
108 This will return a list of appearances. In the case where there is only one appearance the map will contain one entry whose key is the string "default". If there is no rollover appearance then the normal appearance will be returned. Which means that this method will never return null. @return A list of key(java.lang.String) value(PDAppearanceStream) pairs
109 @return The first child or null if there is no child.
110 @return The last child or null if there is no child.
111 Get the signature dictionary. @return the signature dictionary
112 Returns the value corresponding to an index in the number tree. @param index The index in the number tree. @return The value corresponding to the index. @throws IOException If there is a problem creating the values.
113 This will get the number of output parameters that have a range specified. A range for output parameters is optional so this may return zero for a function that does have output parameters, this will simply return the number that have the range specified. @return The number of output parameters that have a range specified.
114 This will get the range for a certain output parameters. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The output parameter number to get the range for. @return The range for this component.
115 Clip the given input values to the ranges. @param inputValues the input values @return the clipped values
116 This will get the number of input parameters that have a domain specified. @return The number of input parameters that have a domain specified.
117 This will get the range for a certain input parameter. This is will never return null. If it is not present then the range 0 to 0 will be returned. @param n The parameter number to get the domain for. @return The domain range for this component.
118 calculate array index (structure described in p.171 PDF spec 1.7) in multiple dimensions. @param vector with coordinates @return index in flat array
119 Get the decode for the input parameter. @param paramNum The function parameter number. @return The decode parameter range or null if none is set.
120 Get the encode for the input parameter. @param n The function parameter number. @return The encode parameter range or null if none is set.
121 Is the artifact attached to the top edge? @return <code>true</code> if the artifact is attached to the top edge, <code>false</code> otherwise
122 Is the artifact attached to the bottom edge? @return <code>true</code> if the artifact is attached to the bottom edge, <code>false</code> otherwise
123 Is the artifact attached to the left edge? @return <code>true</code> if the artifact is attached to the left edge, <code>false</code> otherwise
124 Is the artifact attached to the right edge? @return <code>true</code> if the artifact is attached to the right edge, <code>false</code> otherwise
125 Constructor. @param fontDictionary The font dictionary according to the PDF specification.
126 Creates a new DictionaryEncoding for a Type 3 font from a PDF. @param fontEncoding The Type 3 encoding dictionary.
127 Creates a new DictionaryEncoding from a PDF. @param fontEncoding The encoding dictionary. @param isNonSymbolic True if the font is non-symbolic. False for Type 3 fonts. @param builtIn The font's built-in encoding. Null for Type 3 fonts.
128 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws java.io.IOException if there is an error getting the color space or doing background color conversion.
129 Get the decode for the input parameter. @param paramNum the function parameter number @return the decode parameter range or null if none is set
130 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
131 Return the signed content of the document. This is not a PDF file, nor is it the PDF file before signing, it is the byte sequence made of the input minus the area where the signature bytes will be. See "The ByteRange and signature value" in the document <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/DigitalSignaturesInPDF.pdf#page=5">Digital Signatures in a PDF</a>. @param pdfFile The signed pdf file as byte array @return a byte array containing only the signed part of the content @throws IOException if the pdfFile can't be read
132 The software module revision number, corresponding to the Date attribute. @return the revision of the software module
133 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @return the revision of the software module
134 Returns a new RandomAccessRead which reads the decoded stream data. @return RandomAccessRead containing decoded stream data. @throws IOException If the stream could not be read.
135 Gets a number value. @param name the attribute name @return the number value
136 This will return the conversion factor. @return the conversion factor
137 This will retrieve the length of the leader line. @return the length of the leader line
138 This will retrieve the length of the leader line extensions. @return the length of the leader line extensions
139 This will retrieve the length of the leader line offset. @return the length of the leader line offset
140 The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @return the minimum required capability of the signature field seed value dictionary parser
141 This will return the CYX factor. @return CYX factor
142 Gets a number value. @param name the attribute name @param defaultValue the default value @return the number value
143 This will retrieve the intensity of the applied effect. @return the intensity value 0 to 2
144 Compute the font height. Override this if you want to use own calculations. @param font the font. @return the font height. @throws IOException if there is an error while getting the font bounding box.
145 Returns the default position vector (v). @param cid CID
146 Returns the property list resource with the given name, or null if none exists. @param name Name of the property list resource. @return the property list with the given name or null
147 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
148 This will get the optional content group or optional content membership dictionary. @return The optional content group or optional content membership dictionary or null if there is none.
149 Get a list of optional content groups. @return List of optional content groups, never null.
150 This will get the optional content group or optional content membership dictionary for the annotation. @return The optional content group or optional content membership dictionary or null if there is none.
151 Check the XRef table by dereferencing all objects and fixing the offset if necessary. @throws IOException if something went wrong.
152 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
153 {@inheritDoc}
154 {@inheritDoc}
155 This will remove an element from the array. This method will also remove a reference to the object. @param o The object to remove. @return <code>true</code> if the object was removed, <code>false</code> otherwise
156 Removes a user property. @param userProperty the user property
157 removes a subject from the list @param subject byte array containing DER-encoded X.509v3 certificate
158 Removes a key usage extension @param keyUsageExtension ASCII string that consists of {0, 1, X}
159 Removes an issuer from the issuers list @param issuer A byte array containing DER-encoded X.509v3 certificate
160 removes an OID from the list @param oid Object Identifier of the certificate policy to be removed
161 {@inheritDoc}
162 {@inheritDoc}
163 Collect all updates made to the given {@link COSDictionary} and it's contained structures. @param dictionary The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSDictionary} represents a direct child structure, that would require it´s parent to be updated instead.
164 Collect all updates made to the given {@link COSObject} and it's contained structures. @param object The {@link COSObject} updates shall be collected for. @return Always returns {@code false}. {@link COSObject}s by definition are indirect and shall never cause a parent structure to be updated.
165 <p> Links the given {@link COSDocumentState} to the {@link #updated} state of the managed {@link #updateInfo}.<br> </p> <p> This shall also initialize {@link #updated} accordingly and will also set the same {@link COSDocumentState} for all possibly contained substructures. </p> <p> Should {@link #originDocumentState} already have been set, by a prior call to this method, this shall deny to overwrite it. </p> <p> {@link COSDocumentState#isAcceptingUpdates()} shall determine, whether updates to {@link #updateInfo} are allowed. </p> <p> As long as no {@link COSDocumentState} is linked to this {@link COSUpdateState}, it shall not accept updates. </p> @param originDocumentState The {@link COSDocumentState} that shall be linked to this {@link COSUpdateState}. @see #originDocumentState @see #updated
166 Get the highest value for a key in the name map. @return The highest value for a key in the map.
167 Get the lowest value for a key in the name map. @return The lowest value for a key in the map.
168 Gets a name value. @param name the attribute name @return the name value
169 This will get the rendering intent. @return null or the RI value in the dictionary.
170 This will get the name of the action to be performed. @return The name of the action to be performed.
171 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The name converted to a string.
172 Get the style for the guideline. The default is "S" for solid. @return The guideline style. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
173 This will retrieve the icon (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the PDAnnotationText.NAME_XXX constants.
174 This is the name used to draw the type of attachment. See the ATTACHMENT_NAME_XXX constants. @return The name that describes the visual cue for the attachment.
175 This will retrieve the line ending style. @return The line ending style, possible values shown in the LE_ constants section, LE_NONE if missing, never null.
176 Set the highlight mode for when the mouse is depressed. See the HIGHLIGHT_MODE_XXX constants. @return The string representation of the highlight mode.
177 This will retrieve the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @return the relationship.
178 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is DRAFT. @return The name of this rubber stamp, see the NAME_XXX constants.
179 This will retrieve the name (and hence appearance, AP taking precedence) For this annotation. The default is NOTE. @return The name of this annotation, see the NAME_XXX constants.
180 Returns the highlighting mode. Default value: <code>I</code> <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @return the highlighting mode
181 This will retrieve the border style, see the STYLE_* constants for valid values. @return the style of the border
182 returns the type of the external data dictionary. It must be "ExData", if present @return the type of the external data dictionary
183 @return the style for this transition @see PDTransitionStyle#valueOf(String)
184 @return The dimension in which the specified transition effect shall occur or the default {@link PDTransitionDimension#H} if no dimension is found. @see PDTransitionDimension
185 @return The direction of motion for the specified transition effect or the default {@link PDTransitionMotion#I} if no motion is found. @see PDTransitionMotion
186 Get the non full screen page mode preference. @return the non full screen page mode preference.
187 Get the reading direction preference. @return the reading direction preference.
188 Get the ViewArea preference. See BOUNDARY enumeration. @return the ViewArea preference.
189 Get the ViewClip preference. See BOUNDARY enumeration. @return the ViewClip preference.
190 Get the PrintArea preference. See BOUNDARY enumeration. @return the PrintArea preference.
191 Get the PrintClip preference. See BOUNDARY enumeration. @return the PrintClip preference.
192 Get the PrintScaling preference. See PRINT_SCALING enumeration. @return the PrintScaling preference.
193 Check if the cross reference table/stream can be found at the current offset. @param startXRefOffset @return the revised offset @throws IOException
194 Detects whether there are no properties in the attribute object. @return <code>true</code> if the attribute object is empty, <code>false</code> otherwise
195 Returns the parent in the structure hierarchy (P). @return the parent in the structure hierarchy
196 Creates an object for a kid of this structure node. The type of object depends on the type of the kid. It can be <ul> <li>a {@link PDStructureElement},</li> <li>a {@link PDObjectReference},</li> <li>a {@link PDMarkedContentReference},</li> <li>an {@link Integer}</li> </ul> @param kid the kid @return the object
197 creates a new encryption dictionary from the low level dictionary provided. @param dictionary a COS encryption dictionary
198 Returns the security handler specified in the dictionary's Filter entry. @return a security handler instance @throws IOException if there is no security handler available which matches the Filter
199 This will get the list of FDF Annotations. This will return a list of FDFAnnotation objects or null if the entry is not set. @return A list of FDF annotations. @throws IOException If there is an error creating the annotation list.
200 Returns true if the character set described by CIDSystemInfo is present in the given font. Only applies to Adobe-GB1, Adobe-CNS1, Adobe-Japan1, Adobe-Korea1, as per the PDF spec.
201 Returns true if this color space has the NChannel subtype. @return true if subtype is NChannel
202 Get the Document Open Action for this object. @return The action to perform when the document is opened. @throws IOException If there is an error creating the destination or action.
203 This will get the action that is associated with this field. @return The 'A' entry in the FDF field dictionary.
204 Returns the dictionary's "Doc" entry, that is, a map of key value pairs to be added to the document's JavaScript name tree. @return Map of named "JavaScript" dictionaries.
205 Get the F action. @return The F action.
206 This will get an action to be performed when the cursor enters the annotation's active area. @return The E entry of annotation's additional actions dictionary.
207 This will get an action to be performed when the cursor exits the annotation's active area. @return The X entry of annotation's additional actions dictionary.
208 This will get an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @return The d entry of annotation's additional actions dictionary.
209 This will get an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @return The U entry of annotation's additional actions dictionary.
210 This will get an action to be performed when the annotation receives the input focus. @return The Fo entry of annotation's additional actions dictionary.
211 This will get an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @return The Bl entry of annotation's additional actions dictionary.
212 This will get an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @return The PO entry of annotation's additional actions dictionary.
213 This will get an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @return The PC entry of annotation's additional actions dictionary.
214 This will get an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @return The PV entry of annotation's additional actions dictionary.
215 This will get an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @return The PI entry of annotation's additional actions dictionary.
216 This will get a JavaScript action to be performed before closing a document. The name WC stands for "will close". @return The WC entry of document catalog's additional actions dictionary.
217 This will get a JavaScript action to be performed before saving a document. The name WS stands for "will save". @return The WS entry of document catalog's additional actions dictionary.
218 This will get a JavaScript action to be performed after saving a document. The name DS stands for "did save". @return The DS entry of document catalog's additional actions dictionary.
219 This will get a JavaScript action to be performed before printing a document. The name WP stands for "will print". @return The WP entry of document catalog's additional actions dictionary.
220 This will get a JavaScript action to be performed after printing a document. The name DP stands for "did print". @return The DP entry of document catalog's additional actions dictionary.
221 This will get a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @return The K entry of form field's additional actions dictionary.
222 This will get a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @return The F entry of form field's additional actions dictionary.
223 This will get a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @return The V entry of form field's additional actions dictionary.
224 This will get a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @return The C entry of form field's additional actions dictionary.
225 This will get an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @return The O entry of page object's additional actions dictionary.
226 This will get an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @return The C entry of page object's additional actions dictionary.
227 Get the action to be performed when this annotation is to be activated. Either this or the destination entry should be set, but not both. @return The action to be performed when this annotation is activated.
228 Get the action to be performed when this annotation is to be activated. @return The action to be performed when this annotation is activated.
229 Get the action of this node. @return The action of this node.
230 Return the properties String value. <p> Allows to retrieve the low level date for validation purposes. </p> @param propertyKey the dictionaries key @return the properties value
231 This will get the value of a custom metadata information field for the document. This will return null if one is not found. @param fieldName Name of custom metadata field from pdf document. @return String Value of metadata field
232 Gets a string attribute value. @param name the attribute name @return the string attribute value
233 This will get the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @return The URI entry of the specific URI dictionary.
234 A text string indicating the version of the application implementation, as described by the <code>/Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). @return the application implementation version
235 This will return the label for the units. @return the label for the units
236 This is a convenience method that will get the dictionary object that is expected to be a string. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
237 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @param defaultValue The default value to return. @return The name converted to a string.
238 Get the operation to perform on the file. This method will not return null, OPERATION_OPEN is the default. @return The operation to perform for the file. @see PDWindowsLaunchParams#OPERATION_OPEN @see PDWindowsLaunchParams#OPERATION_PRINT
239 Get the default appearance. @return the DA element of the dictionary object
240 <p>Preferred method for getting the filename. It will determinate the recommended file name.</p> <p>First of all we try to get the unicode filename if it exist. If it doesn't exist we take a look at the DOS, MAC UNIX filenames. If no one exist the required F entry will be returned.</p> @return The preferred file name.
241 Indicates whether a particular optional content group is found in the PDF file. @param groupName the group name @return true if the group exists, false otherwise
242 Returns the fully qualified name of the field, which is a concatenation of the names of all the parents fields. @return the name of the field
243 This will get the export values from the options. <p> For options with an array of text strings the display value and export value are the same.<br> For options with an array of two-element arrays the export value is the first entry in the two-element array. </p> @return List containing all export values.
244 Encrypt or decrypt a set of data. @param objectNumber The data object number. @param genNumber The data generation number. @param data The data to encrypt. @param output The output to write the encrypted data to. @param decrypt true to decrypt the data, false to encrypt it. @throws IOException If there is an error reading the data.
245 Compute the encryption key. @param password The password to compute the encrypted key. @param o The O entry of the encryption dictionary. @param u The U entry of the encryption dictionary. @param oe The OE entry of the encryption dictionary. @param ue The UE entry of the encryption dictionary. @param permissions The permissions for the document. @param id The document id. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @param isOwnerPassword whether the password given is the owner password (for revision 6) @return The encrypted key bytes. @throws IOException If there is an error with encryption.
246 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata. @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
247 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
248 Returns the Calendar for a given COS string containing a date, or {@code null} if it cannot be parsed. The returned value will have 0 for DST_OFFSET. @param text A COS string containing a date. @return The Calendar that the text string represents, or {@code null} if it cannot be parsed.
249 Write the given {@link COSString} to the given stream. @param output The stream, that shall be written to. @param cosString The content, that shall be written.
250 Outputs a string using the correct encoding and subsetting as required. @param text The Unicode text to show. @throws IOException If an io exception occurs.
251 Constructor. @param parameters Parameters for page drawing. @throws IOException If there is an error loading properties from the file.
252 This will retrieve the color used in drawing various elements. As of PDF 1.6 these are : <ul> <li>Background of icon when closed</li> <li>Title bar of popup window</li> <li>Border of a link annotation</li> </ul> @return Color object representing the colour
253 This will retrieve the border color. @return the border color.
254 This will retrieve the background color. @return the background color.
255 Sets the highest value that is allowed. This cannot be higher than 255. @param high the highest value for the lookup table
256 Set the page number for a remote destination. For an internal destination, call {@link #setPage(PDPage) setPage(PDPage page)}. @param pageNumber The page for a remote destination.
257 This will parse a PDF string. @return The parsed PDF string. @throws IOException If there is an error reading from the stream.
258 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as InputStream. It will be closed in this method. @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
259 Will return the embedded signature between the byterange gap. @param pdfFile The signed pdf file as byte array @return a byte array containing the signature @throws IOException if the pdfFile can't be read @throws IndexOutOfBoundsException if the byterange array is not long enough
260 Constructor for immutable rectangle. @param width The width of the rectangle. @param height The height of the rectangle.
261 Returns the <code>BBox</code> entry (bounding box) for the appearance stream form XObject. @return Bounding box for appearance stream form XObject.
262 This will create a new PDMetadata object with the /Type and /Subtype entries for a document level metadata object. @param document The document that the stream will be part of.
263 {@inheritDoc}
264 Creates a new XObject of the given subtype for writing. @param document The document in which to create the XObject. @param subtype The subtype of the new XObject.
265 Creates an Image XObject in the given document. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document
266 Constructor. Reads all data from the input stream and embeds it into the document. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @throws IOException If there is an error creating the stream in the document.
267 Constructor. Reads all data from the input stream and embeds it into the document with the given filter applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filter Filter to apply to the stream. @throws IOException If there is an error creating the stream in the document.
268 Constructor. Reads all data from the input stream and embeds it into the document with the given filters applied. This method closes the InputStream. @param doc The document that will hold the stream. @param input The stream parameter. @param filters Filters to apply to the stream. @throws IOException If there is an error creating the stream in the document.
269 Creates an Image XObject in the given document using the given filtered stream. This constructor is for internal PDFBox use and is not for PDF generation. Users who want to create images should look at {@link #createFromFileByExtension(File, PDDocument) }. @param document the current document @param encodedStream an encoded stream of image data @param cosFilter the filter or a COSArray of filters @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @throws IOException if there is an error creating the XObject.
270 Default constructor.
271 Default constructor.
272 Default constructor.
273 Default constructor.
274 Creates an attribute object. @param dictionary the dictionary @return the attribute object
275 Returns the appearance stream for this annotation, if any. The annotation state is taken into account, if present. @return the appearance stream
276 Get the value which sets the check box to the On state. <p>The On value should be 'Yes' but other values are possible so we need to look for that. On the other hand the Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the value setting the check box to the On state. If an empty string is returned there is no appearance definition.
277 Returns the G entry of the soft mask object @return form containing the transparency group @throws IOException if the group could not be read
278 Find the page destination from a named destination. @param namedDest the named destination. @return a PDPageDestination object or null if not found. @throws IOException if there is an error creating the PDPageDestination object.
279 Default constructor. @param source input representing the pdf. @throws IOException if something went wrong
280 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @throws IOException If something went wrong.
281 Create a new appearance stream. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the content stream.
282 Create a new form XObject content stream. @param form The form XObject stream to write to. @throws IOException If there is an error writing to the form contents.
283 Create a new appearance stream. Note that this is not actually a "page" content stream. @param doc The document the page is part of. @param appearance The appearance stream to write to. @throws IOException If there is an error writing to the page contents.
284 Create a new tiling pattern content stream. @param pattern The tiling pattern stream to write to. @throws IOException If there is an error writing to the form contents.
285 Add the two arms of a horizontal arrow. @param cs Content stream @param x @param y @param len The arm length. Positive goes to the right, negative goes to the left. @throws IOException If the content stream could not be written
286 Draw a shape. <p> Dependent on the lineWidth and whether or not there is a background to be generated there are different commands to be used for draw a shape. @param lineWidth the line width of the path. @param hasStroke shall there be a stroking color. @param hasFill shall there be a fill color. @throws IOException If there is an error writing to the content stream.
287 Add a square diamond shape (corner on top) to the path. @param cs Content stream @param x @param y @param r Radius (to a corner) @throws IOException If the content stream could not be written
288 Add a circle shape to the path in clockwise direction. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
289 Add a circle shape to the path in counterclockwise direction. You'll need this e.g. when drawing a doughnut shape. See "Nonzero Winding Number Rule" for more information. @param cs Content stream @param x @param y @param r Radius @throws IOException If the content stream could not be written.
290 Draw a paperclip. Shape is from <a href="https://raw.githubusercontent.com/Iconscout/unicons/master/svg/line/paperclip.svg">Iconscout</a> (Apache licensed). @param contentStream @throws IOException
291 Sets the line width. The command is only emitted if the lineWidth is different to 1. @param lineWidth the line width of the path. @throws IOException If there is an error writing to the content stream. @see PDAbstractContentStream#setLineWidth(float)
292 Returns the pattern image in parent stream coordinates.
293 Returns the anchor rectangle, which includes the XStep/YStep and scaling.
294 {@inheritDoc} The returned images are not cached.
295 Extract the raw unconverted raster of the given image @param pdImage The image to get the raw raster data from @return the raw raster of this image @throws IOException
296 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @param colorKey an optional color key mask @return content of this image as an (A)RGB buffered image @throws IOException if the image cannot be read
297 A dictionary containing any resources required by the page.
298 A rectangle, expressed in default user space units, defining the boundaries of the physical medium on which the page is intended to be displayed or printed. @return the media box of the page
299 Returns the rotation angle in degrees by which the page should be rotated clockwise when displayed or printed. Valid values in a PDF must be a multiple of 90. @return The rotation angle in degrees in normalized form (0, 90, 180 or 270) or 0 if invalid or not set at this level.
300 This is a convenience method that will get the dictionary object that is expected to be a cos boolean and convert it to a primitive boolean. @param key The key to the item in the dictionary. @param defaultValue The value returned if the entry is null. @return The value converted to a boolean.
301 Get if the file is volatile. Default: false @return True if the file is volatile attribute is set.
302 Shall the property be hidden? @return <code>true</code> if the property shall be hidden, <code>false</code> otherwise
303 Will get the EncryptMetaData dictionary info. @return true if EncryptMetaData is explicitly set to false (the default is true)
304 This will retrieve if the contents are shown as a caption or not. @return boolean if the content is shown as a caption.
305 This will tell if the icon should scale to fit the annotation bounds. Default: false @return A flag telling if the icon should scale.
306 A flag telling if the fields imported from the template may be renamed if there are conflicts. @return A flag telling if the fields can be renamed.
307 Returns true if this group is isolated. Isolated groups begin with the fully transparent image, non-isolated begin with the current backdrop. @return true if this group is isolated
308 Returns true if this group is a knockout. A knockout group blends with original backdrop, a non-knockout group blends with the current backdrop. @return true if this group is a knockout
309 This will return the AntiAlias value. @return the AntiAlias value
310 This will get the overprint control. @return The overprint control or null if one has not been set.
311 This will get the automatic stroke adjustment flag. @return The automatic stroke adjustment flag or null if one has not been set.
312 This will get the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @return The alpha source flag.
313 This will get the text knockout flag. @return The text knockout flag.
314 A flag indicating whether to hide the annotation or show it @return true if annotation is hidden
315 Gets the synchronous flag. It specifyes whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @return Whether to play the sound synchronously (true) or asynchronously (false, also the default).
316 Gets whether to repeat the sound indefinitely. @return Whether to repeat the sound indefinitely (default: false).
317 Gets the flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). @return whether to mix this sound with any other sound already playing (default: false).
318 This will retrieve whether the text specified by the /Contents or /RC entries shall be shown as a caption in the appearance of the line. @return boolean if the contents shall be shown as a caption (default: false).
319 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed
320 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @return true if the software module or signature handler was a pre release.
321 If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @return true if NonEFontNoWarn is set to true @see #setNonEFontNoWarn(boolean)
322 If true, the application was in trusted mode when signing took place. @return true if the application was in trusted mode while signing. default: false
323 True if the viewing application should construct the appearances of all field widgets. The default value is false. @return the value of NeedAppearances, false if the value isn't set
324 @return true if the area that shall be flown in is rectangular and opaque. Default is false. Only for {@link PDTransitionStyle#Fly}.
325 Get the toolbar preference. @return the toolbar preference.
326 Get the menubar preference. @return the menubar preference.
327 Get the window UI preference. @return the window UI preference.
328 Get the fit window preference. @return the fit window preference.
329 Get the center window preference. @return the center window preference.
330 Get the display doc title preference. @return the display doc title preference.
331 Get an integer from an embedded dictionary. Useful for 1-1 mappings. @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @param defaultValue The value if there is no embedded dictionary or it does not contain the key. @return The value of the embedded integer.
332 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value.
333 This is a convenience method that will get the dictionary object that is expected to be an int. -1 is returned if there is no value. @param key The key to the item in the dictionary. @return The integer value..
334 This is a convenience method that will get the dictionary object that is expected to be an integer. If the dictionary value is null then the default value will be returned. @param key The key to the item in the dictionary. @param defaultValue The value to return if the dictionary item is null. @return The integer value.
335 Gets the boolean value from the flags at the given bit position. @param field The COSName of the field to get the flag from. @param bitFlag the bitPosition to get the value from. @return true if the number at bitPos is '1'
336 Returns the number of leaf nodes (page objects) that are descendants of this root within the page tree. @return the number of leaf nodes, 0 if not present
337 Returns the start value for page numbering in this page range. @return a positive integer the start value for numbering.
338 Get the order of interpolation between samples. Valid values are 1 and 3, specifying linear and cubic spline interpolation, respectively. Default is 1. See p.170 in PDF spec 1.7. @return order of interpolation.
339 Returns the revision number (R). @return the revision number
340 This will return the Length entry of the crypt filter dictionary.<br><br> The length in <b>bits</b> for the crypt filter algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
341 This will return the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. @return The encryption version to use.
342 This will return the Length entry of the encryption dictionary.<br><br> The length in <b>bits</b> for the encryption algorithm. This will return a multiple of 8. @return The length in bits for the encryption algorithm
343 This will return the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. @return The encryption revision to use.
344 This will get the permissions bit mask. @return The permissions bit mask.
345 This will get the form of quadding (justification) of the annotation text. @return The quadding of the text.
346 This will get the font flags. @return The font flags.
347 Create the correct PD Model pattern based on the COS base pattern. @param dictionary the COS pattern dictionary @param resourceCache the resource cache, may be null, useful for tiling patterns. @return the newly created pattern object @throws IOException If we are unable to create the PDPattern object.
348 This will return the paint type. @return The paint type
349 This will return the tiling type. @return The tiling type
350 Create the correct PD Model shading based on the COS base shading. @param shadingDictionary the COS shading dictionary @return the newly created shading resources object @throws IOException if we are unable to create the PDShading object
351 The bits per flag of this shading. This will return -1 if one has not been set. @return The number of bits per flag.
352 The vertices per row of this shading. This will return -1 if one has not been set. @return the number of vertices per row
353 The bits per component of this shading. This will return -1 if one has not been set. @return the number of bits per component
354 The bits per coordinate of this shading. This will return -1 if one has not been set. @return the number of bits per coordinate
355 A set of flags specifying various characteristics of the action @return the flags
356 A set of flags specifying various characteristics of the action @return the flags
357 If the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation. @return the zero based page number or -1 if the /P entry value is missing or not a number.
358 If the value in the /A entry is an integer, this will get the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @return the zero based page number or -1 if the /P entry value is missing or not a number.
359 This will get the flags for this field. @return flags The set of flags.
360 This will get the 'quadding' or justification of the text to be displayed. <br> 0 - Left (default)<br> 1 - Centered<br> 2 - Right<br> Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @return The justification of the text strings.
361 This will retrieve the rotation of the annotation widget. It must be a multiple of 90. Default is 0 @return the rotation
362 Indicates if a timestamp is required. @return true if a timestamp is required
363 Get the number of open nodes or a negative number if this node is closed. See PDF Reference 32000-1:2008 table 152 and 153 for more details. This value is updated as you append children and siblings. @return The Count attribute of the outline dictionary.
364 This will get the document-wide default value for the quadding/justification of variable text fields. <p> 0 - Left(default)<br> 1 - Centered<br> 2 - Right<br> See the QUADDING constants of {@link PDVariableText}. @return The justification of the variable text fields.
365 This will get the top index "TI" value. @return the top index, default value 0.
366 This will get all dictionaries objects by type. @param type The type of the object. @return This will return all objects with the specified type.
367 Remove all page resources from the cache to avoid relying on the implementation of the Cache. Does make sense after processing a page.
368 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
369 Get the embedded file. @return The embedded file for this file spec.
370 Get the embedded dos file. @return The embedded dos file for this file spec.
371 Get the embedded Mac file. @return The embedded Mac file for this file spec.
372 Get the embedded Unix file. @return The embedded file for this file spec.
373 Get the embedded unicode file. @return The embedded unicode file for this file spec.
374 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
375 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds the bounds of the area to paint, in device units @throws IOException if there is an error getting the color space or doing color conversion.
376 Constructor. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if there is an error getting the color space or doing background color conversion.
377 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
378 Constructor. @param stream The stream to parse. @param document The document for the current parsing. @throws IOException If there is an error initializing the stream.
379 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
380 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @param trueTypeFont The true type font used to create the parent font @throws IOException if the font could not be read
381 Reads a CMap given a COS Stream or Name. May return null if a predefined CMap does not exist. @param base COSName or COSStream @return the CMap if present @throws IOException if the CMap could not be read
382 This will write the body of the document. @param doc The document to write the body for. @throws IOException If there is an error writing the data.
383 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
384 Collect all updates made to the given {@link COSBase} and it's contained structures.<br> This shall forward all {@link COSUpdateInfo} objects to the proper specialized collection methods. @param base The {@link COSBase} updates shall be collected for. @return Returns {@code true}, if the {@link COSBase} represents a direct child structure, that would require it´s parent to be updated instead. @see #collect(COSDictionary) @see #collect(COSArray) @see #collect(COSObject)
385 // MIT added, maybe this should not be supported as trailer is a persistence construct. This will set the document trailer. @param newTrailer the document trailer dictionary
386 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given child, initializing it´s {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param child The child that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
387 The name to retrieve. @param name The name in the tree. @return The value of the name in the tree. @throws IOException If there is a problem creating the destinations.
388 Gets a name value. @param name the attribute name @param defaultValue the default value @return the name value
389 This will retrieve the border effect, see the STYLE_* constants for valid values. @return the effect of the border or {@link #STYLE_SOLID} if none is found.
390 Returns the structure tree root. @return the structure tree root
391 Returns a list of objects for the kids (K). @return a list of objects for the kids, never null.
392 This will get the encryption dictionary for this document. This will still return the parameters if the document was decrypted. As the encryption architecture in PDF documents is pluggable this returns an abstract class, but the only supported subclass at this time is a PDStandardEncryption object. @return The encryption dictionary(most likely a PDStandardEncryption object)
393 Prepare for decryption. @throws InvalidPasswordException If the password is incorrect. @throws IOException if something went wrong
394 Reads the font's Encoding entry, which should be a CMap name/stream.
395 Some Type 1 fonts have an invalid Length1, which causes the binary segment of the font to be truncated, see PDFBOX-2350, PDFBOX-3677. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @return repaired Length1 value
396 Some Type 1 fonts have an invalid Length2, see PDFBOX-3475. A negative /Length2 brings an IllegalArgumentException in Arrays.copyOfRange(), a huge value eats up memory because of padding. @param bytes Type 1 stream bytes @param length1 Length1 from the Type 1 stream @param length2 Length2 from the Type 1 stream @return repaired Length2 value
397 This will return the value for the manner to display a fractional value. @return the manner to display a fractional value
398 This will return the text to be used between orders of thousands in display of numerical values. @return thousands separator
399 This will return the text to be used as the decimal point in displaying numerical values. @return decimal separator
400 This will return the text to be concatenated to the left of the label specified by U. @return label prefix
401 This will return the text to be concatenated after the label specified by U. @return label suffix
402 This will return a value indicating the ordering of the label specified by U to the calculated unit value. @return label position
403 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary. @param key The key to the item in the dictionary. @return The name converted to a string.
404 Returns a list of matching fonts, scored by suitability. Positive scores indicate matches for certain attributes, while negative scores indicate mismatches. Zero scores are neutral. @param fontDescriptor FontDescriptor, always present. @param cidSystemInfo Font's CIDSystemInfo, may be null.
405 Check for owner password. @param ownerPassword The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
406 Parses the given text into an instruction sequence representing a Type 4 function that can be executed. @param text the Type 4 function text @return the instruction sequence
407 This will decrypt a stream. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
408 This will encrypt a stream, but not the dictionary as the dictionary is encrypted by visitFromString() in COSWriter and we don't want to encrypt it twice. @param stream The stream to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error getting the stream data.
409 This will decrypt a string. @param string the string to decrypt. @param objNum The object number. @param genNum The object generation number. @return the decrypted COSString
410 This will encrypt a string. @param string the string to encrypt. @param objNum The object number. @param genNum The object generation number. @return the encrypted COSString @throws IOException If an error occurs writing the new string.
411 Check if a plaintext password is the user password. @param password The plaintext password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The permissions set in the PDF. @param id The document id used for encryption. @param encRevision The revision of the encryption algorithm. @param keyLengthInBytes The length of the encryption key in bytes. @param encryptMetadata The encryption metadata @return true If the plaintext password is the user password. @throws IOException If there is an error accessing data.
412 Finds a font with the given PostScript name, or a suitable substitute, or null. @param postScriptName PostScript font name
413 This will print the text of the processed page to "output". It will estimate, based on the coordinates of the text, where newlines and word spacings should be placed. The text will be sorted only if that feature was enabled. @throws IOException If there is an error writing the text.
414 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
415 Writes a single operand token. @param base The operand to write to the stream. @throws IOException If there is an error writing to the stream.
416 This method prepares and writes COS data to the object stream by selecting appropriate specialized methods for the content. @param output The stream, that shall be written to. @param object The content, that shall be written. @param topLevel True, if the currently written object is a top level entry of this object stream. @throws IOException Shall be thrown, when an exception occurred for the write operation.
417 Shows the given text at the location specified by the current text matrix with the given interspersed positioning. This allows the user to efficiently position each glyph or sequence of glyphs. @param textWithPositioningArray An array consisting of String and Float types. Each String is output to the page using the current text matrix. Using the default coordinate system, each interspersed number adjusts the current text matrix by translating to the left or down for horizontal and vertical text respectively. The number is expressed in thousands of a text space unit, and may be negative. @throws IOException if an io exception occurs.
418 Shows the given text at the location specified by the current text matrix. @param text The Unicode text to show. @throws IOException If an io exception occurs. @throws IllegalArgumentException if a character isn't supported by the current font
419 Returns a new PageDrawer instance, using the given parameters. May be overridden. @param parameters parameters to be used when creating the PageDrawer instance @return a new PageDrawer instance @throws IOException id the PageDrawer instance could not be created
420 Creates a Form Image XObject for writing, in the given document. @param document The current document
421 Constructor. Reads all data from the input stream and embeds it into the document, this will close the InputStream. The /Type and /Subtype entries for a document level metadata object will be created. @param doc The document that will hold the stream. @param str The stream parameter. @throws IOException If there is an error creating the stream in the document.
422 {@inheritDoc}
423 {@inheritDoc}
424 Create a PDImageXObject using the Flate filter. @param document The document. @param byteArray array with data. @param width the image width @param height the image height @param bitsPerComponent the bits per component @param initColorSpace the color space @return the newly created PDImageXObject with the data compressed. @throws IOException
425 Default constructor. @param owner the owner of the attributes
426 Returns the attributes together with their revision numbers (A). @return the attributes as a list, never null.
427 Returns the appearance stream to process for the given annotation. May be used to render a specific appearance such as "hover". @param annotation The current annotation. @return The stream to process.
428 Add font resources from the widget to the AcroForm to make sure embedded fonts are being used and not added by ensureFontResources potentially using a fallback font. @param acroFormResources AcroForm default resources, should not be null. @param annotation annotation, should not be null.
429 Get the values to set individual buttons within a group to the on state. <p>The On value could be an arbitrary string as long as it is within the limitations of a PDF name object. The Off value shall always be 'Off'. If not set or not part of the normal appearance keys 'Off' is the default</p> @return the potential values setting the check box to the On state. If an empty Set is returned there is no appearance definition.
430 This will tell if this radio button is currently checked or not. This is equivalent to calling {@link #getValue()}. @return true If this field is checked.
431 Checks the check box. @throws IOException if the appearance couldn't be generated.
432 Constructor.
433 Constructs parser for given file using memory buffer. @param source the source of the pdf to be parsed @throws IOException If something went wrong.
434 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source input representing the pdf. @param decryptionPassword password to be used for decryption. @throws IOException If something went wrong.
435 Draw a line ending style. @param style @param cs @param x @param y @param width @param hasStroke @param hasBackground @param ending false if left, true if right of an imagined horizontal line (important for arrows). @throws IOException
436 Creates a new tiling Paint. The parameters color and colorSpace must be null for a colored tiling Paint (because it has its own colors), and non null for an uncolored tiling Paint. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param colorSpace color space for this tiling @param color color for this tiling @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
437 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @param region The region of the source image to get, or null if the entire image is needed. The actual region will be clipped to the dimensions of the source image. @param subsampling The amount of rows and columns to advance for every output pixel, a value of 1 meaning every pixel will be read. It must not be larger than the image width or height. @return the image without any masks applied @throws IOException if the image cannot be read
438 Returns the content of the given image as an AWT buffered image with an RGB color space. If a color key mask is provided then an ARGB image is returned instead. This method never returns null. @param pdImage the image to read @param colorKey an optional color key mask @return content of this image as an RGB buffered image @throws IOException if the image cannot be read
439 Pushes the given stream's resources, returning the previous resources.
440 Calculate the transform to be used when positioning the overlay. The default implementation centers on the destination. Override this method to do your own, e.g. move to a corner, or rotate. @param page The page that will get the overlay. @param overlayMediaBox The overlay media box. @return The affine transform to be used.
441 This will find the MediaBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The MediaBox at this level in the hierarchy.
442 Tells if this is a tagged PDF. @return true If this is a tagged PDF.
443 Tells if structure elements use user properties. @return A boolean telling if the structure elements use user properties.
444 Tells if this PDF contain 'suspect' tags. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @return true if the suspect flag has been set.
445 This will specify whether to track the mouse position when the URI is resolved. Default value: false. This entry applies only to actions triggered by the user's clicking an annotation; it is ignored for actions associated with outline items or with a document's OpenAction entry. @return A flag specifying whether to track the mouse position when the URI is resolved.
446 This will retrieve the initial state of the annotation, open Or closed (default closed). @return The initial state, true = open false = closed.
447 This will return the value indication if the denominator of the fractional value is reduced/truncated . @return fd
448 This will get the overprint control for non stroking operations. If this value is null then the regular overprint control value will be returned. @return The overprint control or null if one has not been set.
449 Get an integer from an embedded dictionary. Useful for 1-1 mappings. default:-1 @param embeddedDictionary The name of the embedded dictionary. @param key The key in the embedded dictionary. @return The value of the embedded integer.
450 This will return the precision or denominator of a fractional amount. @return the precision or denominator
451 Wraps and <code>OutputStream</code> in a predictor decoding stream as necessary. If no predictor is specified by the parameters, the original stream is returned as is. @param out The stream to which decoded data should be written @param decodeParams Decode parameters for the stream @return An <code>OutputStream</code> is returned, which will write decoded data into the given stream. If no predictor is specified, the original stream is returned.
452 This will get the key of this Page in the structural parent tree. @return the integer key of the page's entry in the structural parent tree or -1 if there isn't any.
453 Get the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @return Number of bits for each output value.
454 Gets the marked content identifier. @return the marked content identifier
455 Returns The next key for the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @return The next key for the parent tree
456 Gets the marked-content identifier. @return the marked-content identifier, or -1 if it doesn't exist.
457 This will get the line cap style. @return null or the LC value of the dictionary.
458 This will get the line join style. @return null or the LJ value in the dictionary.
459 This will get the key of this annotation in the structural parent tree. @return the integer key of the annotation's entry in the structural parent tree or -1 if there isn't any.
460 Return the P value. @return the P value
461 Returns the maximum number of characters of the text field. @return the maximum number of characters, returns -1 if the value isn't present
462 Gets an integer. @param name the attribute name @param defaultValue the default value @return the integer
463 Get the invisible flag. @return The invisible flag.
464 Get the hidden flag. @return The hidden flag.
465 Get the printed flag. @return The printed flag.
466 Get the noZoom flag. @return The noZoom flag.
467 Get the noRotate flag. @return The noRotate flag.
468 Get the noView flag. @return The noView flag.
469 Get the readOnly flag. @return The readOnly flag.
470 Get the locked flag. @return The locked flag.
471 Get the toggleNoView flag. @return The toggleNoView flag.
472 Get the LockedContents flag. @return The LockedContents flag.
473 Get the invisible flag. @return The invisible flag.
474 Get the hidden flag. @return The hidden flag.
475 Get the printed flag. @return The printed flag.
476 Get the noZoom flag. @return The noZoom flag.
477 Get the noRotate flag. @return The noRotate flag.
478 Get the noView flag. @return The noView flag.
479 Get the readOnly flag. @return The readOnly flag.
480 Get the locked flag. @return The locked flag.
481 Get the toggleNoView flag. @return The toggleNoView flag.
482 Get the LockedContents flag. @return The LockedContents flag. @see #setLockedContents(boolean)
483 @return true if the Filter is required
484 @return true if the SubFilter is required
485 @return true if the DigestMethod is required
486 @return true if the V entry is required
487 @return true if the Reason is required
488 @return true if the LegalAttestation is required
489 @return true if the AddRevInfo is required
490 @return true if the Subject is required
491 @return true if the Issuer is required
492 @return true if the OID is required
493 @return true if the Subject DN is required
494 @return true if the KeyUsage is required
495 @return true if the URL is required
496 A flag telling if the text should be italic. @return The italic flag.
497 A flag telling if the text should be bold. @return The bold flag.
498 Determines if SignaturesExist is set. @return true if the document contains at least one signature.
499 Determines if AppendOnly is set. @return true if the document contains signatures that may be invalidated if the file is saved.
500 Determines if push button bit is set. @return true if type of button field is a push button.
501 Determines if radio button bit is set. @return true if type of button field is a radio button.
502 Determines if Sort is set. <p> If set, the field’s option items shall be sorted alphabetically. The sorting has to be done when writing the PDF. PDF Readers are supposed to display the options in the order in which they occur in the Opt array. </p> @return true if the options are sorted.
503 Determines if MultiSelect is set. @return true if multi select is allowed.
504 Determines if DoNotSpellCheck is set. @return true if spell checker is disabled.
505 Determines if CommitOnSelChange is set. @return true if value shall be committed as soon as a selection is made.
506 Determines if Combo is set. @return true if value the choice is a combo box..
507 Determines if Edit is set. @return true if the combo box shall include an editable text box as well as a drop-down list.
508 @return true if the field is readonly
509 @return true if the field is required to have a value at the time it is exported by a submit-form action.
510 @return true if the field is not to be exported.
511 @return true If the flag is set for radios in unison.
512 @return true if the field is multiline
513 @return true if the field is a password field.
514 @return true if the field is a file select field.
515 @return true if the field is not suppose to spell check.
516 @return true if the field is not suppose to scroll.
517 @return true if the field is not suppose to comb the text display.
518 @return true if the field is a rich text field.
519 Prepares everything to decrypt the document. @param encryption encryption dictionary, can be retrieved via {@link PDDocument#getEncryption()} @param documentIDArray document id which is returned via {@link org.apache.pdfbox.cos.COSDocument#getDocumentID()} (not used by this handler) @param decryptionMaterial Information used to decrypt the document. @throws IOException If there is an error accessing data. If verbose mode is enabled, the exception message will provide more details why the match wasn't successful.
520 This will get the O entry in the standard encryption dictionary. @return A 32 byte array or null if there is no owner key. @throws IOException If there is an error accessing the data.
521 This will get the U entry in the standard encryption dictionary. @return A 32 byte array or null if there is no user key. @throws IOException If there is an error accessing the data.
522 Returns the displacement vector (w0, w1) in text space, for the given character. For horizontal text only the x component is used, for vertical text only the y component. @param code character code @return displacement vector @throws IOException if the data could not be read
523 Returns the width of the given Unicode string. @param text The text to get the width of. @return The width of the string in 1/1000 units of text space. @throws IOException If there is an error getting the width information. @throws IllegalArgumentException if a character isn't supported by the font.
524 Returns the pattern resource with the given name, or null if none exists. @param name Name of the pattern resource. @return the pattern with the given name or null @throws IOException if something went wrong.
525 Returns the shading resource with the given name, or null if none exists. @param name Name of the shading resource. @return the shading state with the given name or null @throws IOException if something went wrong.
526 This will get the shading resources for this pattern. @return The shading resources for this pattern. @throws IOException if something went wrong
527 @return true if this node count is greater than zero, false otherwise.
528 Creates a COSField subclass from the given field. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created @return the corresponding PDField instance
529 Returns the XObject resource with the given name, or null if none exists. @param name Name of the XObject resource. @return the XObject with the given name or null @throws IOException if something went wrong.
530 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
531 Returns a new InputStream which reads the decoded stream data. @return InputStream containing decoded stream data. @throws IOException If the stream could not be read.
532 Parse the object with the given key from the object stream with the given number. @param objstmObjNr the number of the offset stream @param key the key of the object to be parsed @return the parsed object @throws IOException if something went wrong when parsing the object
533 Returns the content stream(s) of this page as a single input stream. @return An InputStream, never null. Multiple content streams are concatenated and separated with a newline. An empty stream is returned if the page doesn't have any content stream. @throws IOException If the stream could not be read
534 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param parent The parent font. @throws IOException if the font could not be read
535 Returns the descendant CIDFont.
536 Collect all updates made to the given {@link COSArray} and it's contained structures. @param array The {@link COSDictionary} updates shall be collected for. @return Returns {@code true}, if the {@link COSArray}´s elements changed. A {@link COSArray} shall always be treated as a direct structure, that would require it´s parent to be updated instead.
537 Returns all indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s.<br> Calling this method will cause the increment to be initialized. @return All indirect {@link COSBase}s, that shall be written to an increment as top level {@link COSObject}s. @see #objects
538 This will add an object to the array. @param object The object to add to the array.
539 Add the specified object at the ith location and push the rest to the right. @param i The index to add at. @param object The object to add at that index.
540 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
541 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
542 <p> Shall call {@link #update()} for this {@link COSUpdateState} and shall {@link #setOriginDocumentState(COSDocumentState)} for the given children, initializing their {@link #updated} state and {@link #originDocumentState}. </p> <p> This shall have no effect for a child, that is not an instance of {@link COSUpdateInfo}. </p> @param children The children that shall also be updated. @see #update() @see #setOriginDocumentState(COSDocumentState)
543 Returns the role map. @return the role map
544 Adds the given {@link COSBase} to this pool, using the given {@link COSObjectKey} as it's referencable ID. This method shall determine an appropriate key, for yet unregistered objects, to register them. Depending on the type of object, it shall either be appended as-is or shall be appended to a compressed {@link COSWriterObjectStream}. @param key The {@link COSObjectKey} that shall be used as the {@link COSBase}s ID, if possible. @param base The {@link COSBase}, that shall be registered in this pool.
545 Protects the document with a protection policy. The document content will be really encrypted when it will be saved. This method only marks the document for encryption. It also calls {@link #setAllSecurityToBeRemoved(boolean)} with a false argument if it was set to true previously and logs a warning. <p> Do not use the document after saving, because the structures are encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @see org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy @see org.apache.pdfbox.pdmodel.encryption.PublicKeyProtectionPolicy @param policy The protection policy. @throws IOException if there isn't any suitable security handler.
546 Returns the name of the glyph with the given character code. This is done by looking up the code in the parent font's ToUnicode map and generating a glyph name from that.
547 Returns the GID for the given character code. @param code character code @return GID @throws IOException if the mapping could not be read
548 Get the mac subtype. @return The mac subtype.
549 Get the mac Creator. @return The mac Creator.
550 Get the mac ResFork. @return The mac ResFork.
551 Finds a CFF CID-Keyed font with the given PostScript name, or a suitable substitute, or null. This method can also map CJK fonts via their CIDSystemInfo (ROS). @param fontDescriptor FontDescriptor @param cidSystemInfo the CID system info, e.g. "Adobe-Japan1", if any.
552 Check for owner password. @param password The owner password. @param user The u entry of the encryption dictionary. @param owner The o entry of the encryption dictionary. @param permissions The set of permissions on the document. @param id The document id. @param encRevision The encryption algorithm revision. @param keyLengthInBytes The encryption key length in bytes. @param encryptMetadata The encryption metadata @return True If the ownerPassword param is the owner password. @throws IOException If there is an error accessing data.
553 This will print the processed page text to the output stream. @throws IOException If there is an error writing the text.
554 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary or if the date was invalid. @param key The key to the item in the dictionary. @return The name converted to a date.
555 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
556 This will get the creation date of the document. This will return null if no creation date exists. @return The creation date of the document.
557 This will get the modification date of the document. This will return null if no modification date exists. @return The modification date of the document.
558 The annotation create date. @return The date of the creation of the annotation date @throws IOException If there is an error converting the string to a Calendar object.
559 This will retrieve the date and time the annotation was created. @return the creation date/time.
560 Returns the sign date. @return the sign date
561 Writes a single operator token. @param op The operator to write to the stream. @throws IOException If there is an error writing to the stream.
562 Writes all prepared {@link COSObject}s to the given {@link COSStream}. @param stream The stream for the compressed objects. @return The given {@link COSStream} of this object stream. @throws IOException Shall be thrown, if writing the object stream failed.
563 Write the given {@link COSDictionary} to the given stream. @param output The stream, that shall be written to. @param cosDictionary The content, that shall be written.
564 Creates a Transparency Group for writing, in the given document. @param document The current document
565 Creates a Form Image XObject for writing, in the given document. @param document The current document
566 Creates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @param dpi the desired dpi (resolution) value of the JPEG to be stored in metadata. This value has no influence on image content or size. @return a new Image XObject @throws IOException if the JPEG data cannot be written
567 Checks value. @param value Name of radio button to select @throws IllegalArgumentException if the value is not a valid option.
568 This will load a document from a file. @param file The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
569 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. To read the stream {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used @return The document that was loaded. @throws IOException If there is an error reading from the stream.
570 Constructor. Unrestricted main memory will be used for buffering PDF streams. @param source source representing the pdf. @throws IOException If something went wrong.
571 Creates a new colored tiling Paint, i.e. one that has its own colors. @param drawer renderer to render the page @param pattern tiling pattern dictionary @param xform device scale transform @throws java.io.IOException if something goes wrong while drawing the pattern
572 Returns an RGB buffered image containing the opaque image stream without any masks applied. If this Image XObject is a mask then the buffered image will contain the raw mask. @return the image without any masks applied @throws IOException if the image cannot be read
573 {@inheritDoc}
574 Appends a marked-content sequence kid. @param markedContent the marked-content sequence with the MCID. @throws IllegalArgumentException if the mcid is negative or doesn't exist.
575 Fetches the corresponding UCS2 CMap if the font's CMap is predefined.
576 Determine if the appearance shall provide a comb output. <p> May be set only if the MaxLen entry is present in the text field dictionary and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs. </p> @return the comb state
577 Prepares everything to decrypt the document. Only if decryption of single objects is needed this should be called. @param encryption encryption dictionary @param documentIDArray document id @param decryptionMaterial Information used to decrypt the document. @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error accessing data.
578 Determines the width of the space character. This is very important for text extraction. @return the width of the space character
579 A convenience method that checks the flag bit. @return The flag value.
580 A convenience method that checks the flag bit. @return The flag value.
581 A convenience method that checks the flag bit. @return The flag value.
582 A convenience method that checks the flag bit. @return The flag value.
583 A convenience method that checks the flag bit. @return The flag value.
584 A convenience method that checks the flag bit. @return The flag value.
585 A convenience method that checks the flag bit. @return The flag value.
586 A convenience method that checks the flag bit. @return The flag value.
587 A convenience method that checks the flag bit. @return The flag value.
588 Returns the pattern for the given color. @param color color containing a pattern name @return pattern for the given color @throws java.io.IOException if the pattern name was not found.
589 Creates a COSField subclass from the given COS field. This is for reading fields from PDFs. @param form the form that the field is part of @param field the dictionary representing a field element @param parent the parent node of the node to be created, or null if root. @return a new PDField instance
590 Returns the contents of the stream as a PDF "text string". @return the PDF string representation of the stream content
591 This will get a stream that can be read from. @return An input stream that can be read from. @throws IOException If an IO error occurs during reading.
592 Create a patch list from a data stream, the returned list contains all the patches contained in the data stream. @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @return the obtained patch list @throws IOException when something went wrong
593 Creates a new PDCIDFont instance with the appropriate subclass. @param dictionary descendant font dictionary @return a PDCIDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
594 Return an iterator for the determined {@link #objects} contained in this {@link COSIncrement}. @return An iterator for the determined {@link #objects} contained in this {@link COSIncrement}.
595 This will add an object to the array. @param object The object to add to the array.
596 This will add the object until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array. @param object The object to fill the array with.
597 Clear the current contents of the COSArray and set it with the float[]. @param value The new value of the float array.
598 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
599 Returns the stream of the XRef. @return the XRef stream @throws IOException if something went wrong
600 Constructor with an initial range of 0..1.
601 Returns all encode values as COSArray. @return the encode array.
602 Constructor. @param function The function.
603 Default constructor.
604 Creates a blank font setting, font will be null, size will be 1.
605 This will return the whitepoint tristimulus. As this is a required field this will never return null. A default of 1,1,1 will be returned if the pdf does not have any values yet. @return the whitepoint tristimulus
606 This will return the BlackPoint tristimulus. This is an optional field but has defaults so this will never return null. A default of 0,0,0 will be returned if the pdf does not have any values yet. @return the blackpoint tristimulus
607 Returns the color component values as a COS array @return the color component values as a COS array
608 Creates a new DeviceN color space.
609 Creates a new gamma. Defaults all values to 0, 0, 0.
610 Returns a list of alternate color spaces for non-conforming readers. WARNING: Do not use the information in a conforming reader. @return A list of alternateColorSpace color spaces. @throws IOException If there is an error getting the alternateColorSpace color spaces.
611 Creates a new Indexed color space. Default DeviceRGB, hival 255.
612 creates a range array with default values (-100..100 -100..100). @return the new range array.
613 Creates a new pattern color space. @param resources The current resources.
614 Creates a new Separation color space.
615 Constructor. Defaults all values to 0, 0, 0.
616 Constructor from COS object. @param array the array containing the XYZ values
617 Sets the optional Matrix entry for the form XObject. @param transform the transformation matrix
618 Creates a new JPEG Image XObject from a byte array containing JPEG data. @param document the document where the image will be created @param byteArray bytes of JPEG image @return a new Image XObject @throws IOException if the input stream cannot be read
619 Returns a COS array which represent the geometric relevant components of the matrix. The last column of the matrix is ignored, only the first two columns are returned. This is analog to the Matrix(COSArray) constructor. @return a COSArray representing the geometric relevant components of the matrix
620 This will set an object at a specific index. @param index zero based index into array. @param object The object to set.
621 Set the value in the array as an integer. @param index The index into the array. @param value The value to set.
622 Set the value in the array as a name. @param index The index into the array. @param name The name to set in the array.
623 Set the value in the array as a string. @param index The index into the array. @param string The string to set in the array.
624 This will set the minimum value for the range. @param min The new minimum for the range.
625 This will set the maximum value for the range. @param max The new maximum for the range.
626 This will set the lower left x coordinate. @param value The lower left x.
627 This will set the lower left y coordinate. @param value The lower left y.
628 This will set the upper right x coordinate. @param value The upper right x .
629 This will set the upper right y coordinate. @param value The upper right y.
630 Sets the colour by edge index. @param index the edge index @param colour the colour
631 This will decrypt an array. @param array The array to decrypt. @param objNum The object number. @param genNum The object generation number. @throws IOException If there is an error accessing the data.
632 This will set the string for an available option. @param opt One of the available options.
633 This will set the default appearance string. @param da The default appearance string.
634 This will set the size of the font. @param size The new size of the font.
635 Sets the color space attributes. If null is passed in then all attribute will be removed. @param attributes the color space attributes, or null
636 This will set the alternate color space. @param cs The alternate color space.
637 Sets the r value of the tristimulus. @param r the r value for the tristimulus
638 Sets the g value of the tristimulus. @param g the g value for the tristimulus
639 Sets the b value of the tristimulus. @param b he b value for the tristimulus
640 Sets the range for this color space. @param range the new range for the a component @param n the component to set the range for
641 Sets the base color space. @param base the base color space
642 Sets the colorant name. @param name the name of the colorant
643 Sets the alternate color space. @param colorSpace The alternate color space.
644 Sets the x value of the tristimulus. @param x the x value for the tristimulus
645 Sets the y value of the tristimulus. @param y the y value for the tristimulus
646 Sets the z value of the tristimulus. @param z the z value for the tristimulus
647 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
648 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
649 This will set an item in the dictionary. @param key The key to the dictionary object. @param value The value to the dictionary object.
650 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
651 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
652 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
653 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
654 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
655 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
656 Creates a new COSStream using the current configuration for scratch files. Not for public use. Only COSParser should call this method. @param dictionary the corresponding dictionary @param startPosition the start position within the source @param streamLength the stream length @return the new COSStream @throws IOException if the random access view can't be read
657 This will set the encryption dictionary, this should only be called when encrypting the document. @param encDictionary The encryption dictionary.
658 This will set the document ID. This should be an array of two strings. This method cannot be used to remove the document id by passing null or an empty array; it will be recreated. Only the first existing string is used when writing, the second one is always recreated. If you don't want this, you'll have to modify the {@code COSWriter} class, look for {@link COSName#ID}. @param id The document id.
659 Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended. This method lets you add a q/Q pair around the existing page's content. @param page the page @throws IOException if an I/O error occurs
660 Update the P reference to the new parent dictionary. @param kArray the kids array @param newParent the new parent @param newStructureType the new structure type in /S or null so it doesn't get replaced
661 Brute force search for all trailer marker. @param trailer dictionary to be used as trailer dictionary @throws IOException if something went wrong
662 Search for the different parts of the trailer dictionary. @param trailer dictionary to be used as trailer dictionary @return true if the root was found, false if not. @throws IOException if something went wrong
663 The initial parse will first parse only the trailer, the xrefstart and all xref tables to have a pointer (offset) to all the pdf's objects. It can handle linearized pdfs, which will have an xref at the end pointing to an xref at the beginning of the file. Last the root object is parsed. @throws InvalidPasswordException If the password is incorrect. @throws IOException If something went wrong.
664 This will parse the next token in the stream. @return The next token in the stream or null if there are no more tokens in the stream. @throws IOException If an io error occurs while parsing the stream.
665 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @param signInterface class to be used for signing; {@code null} if external signing would be performed or there will be no signing at all @throws IOException If an error occurs while generating the data. @throws IllegalStateException If the document has an encryption dictionary but no protection policy.
666 This will get the document info dictionary. If it doesn't exist, an empty document info dictionary is created in the document trailer. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#getMetadata()}. @return The documents /Info dictionary, never null.
667 This will set the document information for this document. <p> In PDF 2.0 this is deprecated except for two entries, /CreationDate and /ModDate. For any other document level metadata, a metadata stream should be used instead, see {@link PDDocumentCatalog#setMetadata(org.apache.pdfbox.pdmodel.common.PDMetadata) PDDocumentCatalog#setMetadata(PDMetadata)}. @param info The updated document information.
668 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of.
669 Returns the document's article threads. @return a list of all threads of the document
670 @return The Additional Actions for this Document
671 Add an OutputIntent to the list. If there is not OutputIntent, the list is created and the first element added. @param outputIntent the OutputIntent to add.
672 Constructor. @param cat The document catalog that this dictionary is part of.
673 This will set the CropBox for this page. @param cropBox The new CropBox for this page.
674 Get the page actions. @return The Actions for this Page
675 Constructor for embedding.
676 Helper to get kids from malformed PDFs. @param node page tree node @return list of kids
677 {@inheritDoc}
678 {@inheritDoc}
679 Default Constructor.
680 Constructor. Creates empty COSDictionary if dict is null. @param dict The dictionary that fulfils this file specification.
681 This will set the range values. @param rangeValues The new range values.
682 This will set the domain values. @param domainValues The new domain values.
683 This will set the encode values. @param encodeValues The new encode values.
684 This will set the decode values. @param decodeValues The new decode values.
685 Sets an attribute. @param attrName the attribute name @param attrValue the attribute value
686 Removes an attribute object. @param attributeObject the attribute object
687 Updates the revision number for the given attribute object. @param attributeObject the attribute object
688 Adds a class name. @param className the class name
689 Removes a class name. @param className the class name
690 Appends a COS base kid. @param object the COS base
691 Inserts an COS base kid before a reference kid. @param newKid the COS base @param refKid the reference kid
692 Removes a COS base kid. @param object the COS base @return <code>true</code> if the kid was removed, <code>false</code> otherwise
693 Sets the K entry. @param k the K value
694 Sets the property value. @param value the property value
695 Get the RGB color to be used for the guidelines. This is guaranteed to not return null. The default color is [0,0,0]. @return The guideline color.
696 Get the line dash pattern for this box style. This is guaranteed to not return null. The default is [3],0. @return The line dash pattern.
697 Set the line dash pattern associated with this box style. @param dashArray The patter for this box style.
698 This will set the crypt filter method. Allowed values are: NONE, V2, AESV2, AESV3 @param cfm name of the crypt filter method.
699 Sets the filter entry of the encryption dictionary. @param filter The filter name.
700 This will set the O entry in the standard encryption dictionary. @param o A 32 byte array or null if there is no owner key. @throws IOException If there is an error setting the data.
701 This will set the U entry in the standard encryption dictionary. @param u A 32 byte array. @throws IOException If there is an error setting the data.
702 This will set the OE entry in the standard encryption dictionary. @param oe A 32 byte array or null if there is no owner encryption key. @throws IOException If there is an error setting the data.
703 This will set the UE entry in the standard encryption dictionary. @param ue A 32 byte array or null if there is no user encryption key. @throws IOException If there is an error setting the data.
704 This will set the Recipients field of the dictionary. This field contains an array of string. @param recipients the array of bytes arrays to put in the Recipients field. @throws IOException If there is an error setting the data.
705 Sets the crypt filter with the given name. @param cryptFilterName the name of the crypt filter @param cryptFilterDictionary the crypt filter to set
706 Sets the name of the filter which is used for de/encrypting streams. @param streamFilterName the name of the filter
707 Sets the name of the filter which is used for de/encrypting strings. @param stringFilterName the name of the filter
708 Set the Perms entry in the encryption dictionary. @param perms A 16 byte array. @throws IOException If there is an error setting the data.
709 remove CF, StmF, and StrF entries. This is to be called if V is not 4 or 5.
710 Default constructor.
711 Set the annotation color. @param c The annotation color.
712 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
713 This will set interior color of the drawn area. @param color The interior color of the circle.
714 This will set the coordinates of the callout line. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, Four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
715 This will set start and end coordinates of the line (or leader line if LL entry is set). @param line array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
716 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
717 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
718 This will set the vertical offset of the caption. @param offset vertical offset of the caption
719 This will set the coordinates of the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
720 This will set interior color of the drawn area. @param color The interior color of the drawn area.
721 This will set the coordinates of the the vertices. @param vertices array of floats [x1, y1, x2, y2, ...] vertex coordinates in default user space.
722 This will set interior color of the line endings defined in the LE entry. @param color The interior color of the line endings.
723 This will set interior color of the drawn area. @param color The interior color of the circle.
724 Set the coordinates of individual words or group of words. The quadliterals shall encompasses a word or group of contiguous words in the text underlying the annotation. The coordinates for each quadrilateral shall be given in the order x1 y1 x2 y2 x3 y3 x4 y4. @param coords an array of 8 􏰍 n numbers specifying the coordinates of n quadrilaterals.
725 This will set the FDF id. @param id The new id for the FDF.
726 This will set the differences stream. @param diff The new differences stream.
727 You should pass a String, or a List&lt;String&gt; to set the value. @param value The value that should populate when imported. @throws IOException If there is an error setting the value.
728 Sets the COS value of this field. @param value COS value.
729 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
730 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
731 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
732 This will set the widget field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
733 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
734 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear widget field flags".
735 This will set the rich text value. @param rv The rich text value for the stream.
736 This will set the rich text value. @param rv The rich text value for the stream.
737 This will set the javascript code the will get execute before the import. @param before A reference to some javascript code.
738 This will set the javascript code the will get execute after the import. @param after A reference to some javascript code.
739 Constructor for embedding.
740 Package-private constructor, for embedding.
741 This will set the font name. @param fontName The new name for the font.
742 This will set the font family. @param fontFamily The font family.
743 This will set the font stretch. @param fontStretch The new stretch for the font.
744 Set the fonts bounding box. @param rect The new bounding box.
745 This will set the character set for the font. @param charSet The new character set for the font.
746 Creates a new DictionaryEncoding for embedding. @param baseEncoding the base encoding of this encoding @param differences the differences of this encoding with regard to the base encoding
747 Set the gamma value. @param value The new gamma value.
748 Returns the gamma value. If none is present then the default of 1,1,1 will be returned. @return the gamma value
749 Sets the gamma value. @param gamma the new gamma value
750 Sets the linear interpretation matrix. Passing in null will clear the matrix. @param matrix the new linear interpretation matrix, or null
751 Returns a map of colorants and their associated Separation color space. @param resources resources, can be null. @return map of colorants to color spaces, never null. @throws IOException If there is an error reading a color space
752 Creates a group object with /Transparency subtype entry.
753 Creates a new optional content membership dictionary (OCMD).
754 Sets the visibility policy name. Valid names are AllOff, AllOn, AnyOff, AnyOn (default). @param visibilityPolicy the visibility policy name
755 Sets the optional Matrix entry for the Pattern. @param transform the transformation matrix
756 This will set the BBox (bounding box) for this Pattern. @param bbox The new BBox for this Pattern.
757 This will set the background. @param newBackground the new background
758 This will set the BBox (bounding box) for this Shading. @param newBBox the new BBox
759 This will set the color space for the shading. @param colorSpace the color space
760 This will set the functions COSArray for the color conversion. @param newFunctions the new COSArray containing all functions
761 Sets the optional Matrix entry for the function based shading. @param transform the transformation matrix
762 Sets the optional Domain entry for the function based shading. @param newDomain the domain array
763 Sets the optional Extend entry for this shading. @param newExtend the extend array
764 Sets the optional Domain entry for this shading. @param newDomain the domain array
765 Sets the Coords entry for this shading. @param newCoords the coordinates array
766 This will set the decode values. @param decodeValues the new decode values
767 Default constructor, creates blank graphics state.
768 Set the blending mode. @param bm blend mode
769 This will set a float object. @param key The key to the data that we are setting. @param value The value that we are setting.
770 This will set the transfer function of the /TR dictionary. @param transfer The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.
771 This will set the transfer function of the /TR2 dictionary. @param transfer2 The transfer function. According to the PDF specification, this is either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function, and the name Default denotes the transfer function that was in effect at the start of the page.
772 @param t annotation or annotations
773 @param h hide flag
774 @param array the array of fields
775 Sets the sound object. @param sound the sound object defining the sound that shall be played.
776 @param array the array of fields
777 @param d The destination.
778 @param b The destination.
779 Set the relationship between the current document and the target (which may be an intermediate target). @param relationship Valid values are P (the target is the parent of the current document) and C (the target is a child of the current document). throws IllegalArgumentException if the parameter is not P or C.
780 Constructor.
781 Constructor. @param dict The annotations dictionary.
782 This will set the rectangle for this annotation. @param rectangle The new rectangle values.
783 This will set the border array. @param borderArray the border array to set.
784 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
785 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
786 This will set the coordinates of the callout line. (PDF 1.6 and higher) Only relevant if the intent is FreeTextCallout. @param callout An array of four or six numbers specifying a callout line attached to the free text annotation. Six numbers [ x1 y1 x2 y2 x3 y3 ] represent the starting, knee point, and ending coordinates of the line in default user space, four numbers [ x1 y1 x2 y2 ] represent the starting and ending coordinates of the line.
787 Sets the paths that make this annotation. @param inkList An array of arrays, each representing a stroked path. Each array shall be a series of alternating horizontal and vertical coordinates. If the parameter is null the entry will be removed.
788 This will set start and end coordinates of the line (or leader line if LL entry is set). @param l array of 4 floats [x1, y1, x2, y2] line start and end points in default user space.
789 This will set the horizontal offset of the caption. @param offset the horizontal offset of the caption
790 This will set the vertical offset of the caption. @param offset vertical offset of the caption
791 This will set the set of quadpoints which encompass the areas of this annotation which will activate. @param quadPoints an array representing the set of area covered.
792 This will set the rich text stream which is displayed in the popup window. @param rc the rich text stream.
793 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
794 This will set the numbers that shall represent the alternating horizontal and vertical coordinates. @param points an array with the numbers that shall represent the alternating horizontal and vertical coordinates.
795 This will set the markup annotation which this popup relates to. @param annot the markup annotation.
796 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. @param differenceLeft left difference from the annotations /Rect entry @param differenceTop top difference from the annotations /Rect entry @param differenceRight right difference from the annotations /Rect entry @param differenceBottom bottom difference from the annotations /Rect entry
797 This will set the set of quadpoints which encompass the areas of this annotation. @param quadPoints an array representing the set of area covered
798 Constructor for embedding.
799 This will set the dash style used for drawing the border. @param dashArray the dash style to use
800 This will retrieve the dash style used for drawing the border. @return the dash style of the border
801 Indicates the operating system. The string format isn't specified yet. Value will be stored as first item of the array, as specified in PDF Signature Build Dictionary Specification for PDF v1.7. @param os is a string with the system id or name.
802 Default constructor.
803 (Optional) The signature handler that shall be used to sign the signature field. @param filter is the filter that shall be used by the signature handler
804 <p>(Optional; PDF 1.6) A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signatures as an author signature. The value 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary.</p> <p>If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.</p> @param mdp dictionary
805 <p>(Optional; PDF 1.6) A time stamp dictionary containing two entries. URL which is a ASCII string specifying the URL to a rfc3161 conform timestamp server and Ff to indicate if a timestamp is required or optional.</p> @param timestamp dictionary
806 Default constructor.
807 (Optional) byte array containing DER-encoded X.509v3 certificate that is acceptable for signing. works like {@link #setSubject(List)} but one byte array @param subject byte array containing DER-encoded X.509v3 certificate
808 (Optional; PDF 1.7) specifies an acceptable key-usage extension that must be presennt in the signing certificate for works like {@link #setKeyUsage(List)} but takes only one string @param keyUsageExtension String that consist only of {0, 1, X}
809 array of bytes containing DER-encoded X.509v3 certificates of acceptable issuers. If the signer’s certificate chains up to any of the specified issuers (either directly or indirectly), the certificate is considered acceptable for signing. @param issuer A byte array containing DER-encoded X.509v3 certificate
810 works like {@link #setOID(List)} but for one object @param oid Object Identifier of a certificate policy to be added
811 Default constructor.
812 Set the dictionary type. @param type is the dictionary type.
813 Set the filter. @param filter the filter to be used
814 Set a subfilter that specify the signature that should be used. @param subfilter the subfilter that shall be used.
815 Sets the byte range. @param range the byte range to be used
816 Sets the contents. @param bytes contents to be used
817 Set the RGB text color for this node. @param textColor The text color for this node.
818 Constructor. @param doc The document that this form is part of.
819 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
820 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
821 Sets the value of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param object the new value
822 Sets the default of this field. This may be of any kind which is valid for this field's children. <p> <b>Note:</b> while non-terminal fields <b>do</b> inherit field values, this method returns the local value, without inheritance. @param value the default value
823 @see PDTerminalField#PDTerminalField(PDAcroForm) @param acroForm The acroForm for this field.
824 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
825 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
826 Set the fields rich text value. <p> Setting the rich text value will not generate the appearance for the field. <br> You can set {@link PDAcroForm#setNeedAppearances(Boolean)} to signal a conforming reader to generate the appearance stream. </p> Providing null as the value will remove the default style string. @param richTextValue a rich text string
827 This will set the origin of the coordinate system. @param coordSystemOrigin the origin
828 Default constructor.
829 Sets the direction in which the specified transition effect shall move. Only for {@link PDTransitionStyle#Wipe}, {@link PDTransitionStyle#Glitter}, {@link PDTransitionStyle#Fly}, {@link PDTransitionStyle#Cover}, {@link PDTransitionStyle#Uncover} and {@link PDTransitionStyle#Push}. @param direction the direction in which the specified transition effect shall move
830 @param duration The duration of the transition effect, in seconds.
831 @param scale The starting or ending scale at which the changes shall be drawn. Only for {@link PDTransitionStyle#Fly}.
832 @param opaque If true, the area that shall be flown in is rectangular and opaque. Only for {@link PDTransitionStyle#Fly}.
833 This will add all objects to this array. @param objectList The list of objects to add.
834 Returns the standard structure type, the actual structure type is mapped to in the role map. @return the standard structure type
835 Attempts to find yet unregistered streams and dictionaries in the given structure. @param current The object to be added for compressing. @throws IOException Shall be thrown, if compressing the object failed.
836 This is a convenience method that will get the dictionary object that is expected to be a date. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a date.
837 This is a convenience method that will get the dictionary object that is expected to be a date. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @param defaultValue The default value to return if the entry does not exist in the dictionary or if the date was invalid. @return The name converted to a string.
838 Generate the appearance for comb fields. @param contents the content stream to write to @param appearanceStream the appearance stream used @param font the font to be used @param fontSize the font size to be used @throws IOException
839 Creates a new JPEG PDImageXObject from a BufferedImage and a given quality. <p> Do not read a JPEG image from a stream/file and call this method; you'll get more speed and quality by calling {@link #createFromStream(org.apache.pdfbox.pdmodel.PDDocument, java.io.InputStream) createFromStream()} instead. The image will be created with a dpi value of 72 to be stored in metadata. @param document the document where the image will be created @param image the BufferedImage to embed @param quality The desired JPEG compression quality; between 0 (best compression) and 1 (best image quality). See {@link ImageWriteParam#setCompressionQuality(float)} for more details. @return a new Image XObject @throws IOException if the JPEG data cannot be written
840 This will load a document from a file. @param filename The name of the file to load. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
841 Generates the first intermediate curl for a cloudy polygon.
842 Returns a template for intermediate curls in a cloudy polygon.
843 Called when a glyph is to be processed. The heuristic calculations here were originally written by Ben Litchfield for PDFStreamEngine.
844 Break the paragraph into individual lines. @param font the font used for rendering the text. @param fontSize the fontSize used for rendering the text. @param width the width of the box holding the content. @return the individual lines. @throws IOException
845 Returns the value of the symbolic flag, allowing for the fact that the result may be indeterminate. @return the value of the isSymbolic flag form the font descriptor
846 Attempts to find a good fallback based on the font descriptor.
847 Returns an AWT paint for the given PDColor. @param color The color to get a paint for. This can be an actual color or a pattern. @return an AWT paint for the given PDColor @throws IOException if the AWT paint could not be created
848 This will return all of the documents root fields. A field might have children that are fields (non-terminal field) or does not have children which are fields (terminal fields). The fields within an AcroForm are organized in a tree structure. The documents root fields might either be terminal fields, non-terminal fields or a mixture of both. Non-terminal fields mark branches which contents can be retrieved using {@link PDNonTerminalField#getChildren()}. @return A list of the documents root fields, never null. If there are no fields then this method returns an empty list.
849 This will find one of the child elements. The name array are the components of the name to search down the tree of names. The nameIndex is where to start in that array. This method is called recursively until it finds the end point based on the name array. @param name An array that picks the path to the field. @param nameIndex The index into the array. @return The field at the endpoint or null if none is found.
850 Returns this field's children. These may be either terminal or non-terminal fields. @return the list of child fields. Be aware that this list is <i>not</i> backed by the children of the field, so adding or deleting has no effect on the PDF document until you call {@link #setChildren(java.util.List) setChildren()} with the modified list.
851 Get a text or text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
852 This will get the value for the field. The return type will either be: <ul> <li>String: for Checkboxes, Radio Button, Textfields</li> <li>List&lt;String&gt;: for a Choice Field</li> </ul> @return The value of the field. @throws IOException If there is an error getting the value.
853 This will set the rich text that is associated with this field. @return The rich text XHTML stream.
854 This will get the javascript that is executed before the import. @return Some javascript code.
855 This will get the javascript that is executed after the import. @return Some javascript code.
856 @return The Javascript Code.
857 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
858 Get a text as text stream. Some dictionary entries allow either a text or a text stream. @param base the potential text or text stream @return the text stream
859 Create a LayoutPage object from given PDPage object. @return @throws IOException
860 This will copy the stream into a byte array. @return The byte array of the filteredStream. @throws IOException if an I/O error occurs.
861 Get all sample values of this function. @return an array with all samples.
862 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @param controlPoints number of control points, 12 for type 6 shading and 16 for type 7 shading @throws IOException if something went wrong
863 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream
864 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param cm the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @throws IOException if something went wrong
865 Adds an attribute object. @param attributeObject the attribute object
866 Adds a user property. @param userProperty the user property
867 Creates a new ICC color space with an empty stream. @param doc the document to store the ICC data
868 Creates a new uncolored tiling pattern color space. @param resources The current resources. @param colorSpace The underlying color space.
869 This will set the changes along the x-axis. @param changeXs changes along the x-axis
870 This will set the changes along the y-axis. @param changeYs changes along the y-axis
871 This will set the distances. @param distances distances
872 This will set the areas. @param areas areas
873 This will set the angles. @param angles angles
874 This will set the sloaps of a line. @param lineSloaps the sloaps of a line
875 This will add null values until the size of the array is at least as large as the parameter. If the array is already larger than the parameter then nothing is done. @param size The desired size of the array.
876 Get the RGB text color of this node. Default is black and this method will never return null. @return The structure element of this node.
877 Creates a clone of the source. @param src source dictionary or array. @param dstParent for the /P entry; parameter needed because arrays don't keep a parent. @param currentPageDict used to remember whether we have a page parent somewhere or not. Starts with null. @return a clone, or null if source is null or if there is no clone because it belongs to a different page or to no page.
878 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
879 Constructor. @param stream The stream to parse. @throws IOException If there is an error initializing the stream.
880 This will get the next action, or sequence of actions, to be performed after this one. The value is either a single action dictionary or an array of action dictionaries to be performed in order. @return The Next action or sequence of actions.
881 Returns the range for a certain component number. This will never return null. If it is not present then the range 0..1 will be returned. @param n the component number to get the range for @return the range for this component
882 Get the encode for the input parameter. @param paramNum The function parameter number. @return The encode parameter range or null if none is set.
883 Gets a single colour or four colours. @param name the attribute name @return the single ({@link PDGamma}) or a ({@link PDFourColours})
884 Build widths with Identity CIDToGIDMap (for embedding full font).
885 This will set the dash pattern for the graphics state. @param dashPattern The dash pattern
886 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
887 Set the color space instance for this box style. This must be a PDDeviceRGB! @param color The new colorspace value.
888 This will set the color used in drawing various elements. As of PDF 1.6 these are : Background of icon when closed Title bar of popup window Border of a link annotation Colour is in DeviceRGB colourspace @param c colour in the DeviceRGB colourspace
889 This will set interior color of the line endings defined in the LE entry. color is in DeviceRGB color space. @param ic color in the DeviceRGB color space.
890 This will set interior color. @param ic color.
891 This will set interior color of the line endings defined in the LE entry. @param ic color.
892 This will set interior color of the drawn area color is in DeviceRGB colorspace. @param ic color in the DeviceRGB color space.
893 This will set the border color. @param c the border color
894 This will set the background color. @param c the background color
895 Set the RGB text color for this node. @param textColor The text color for this node.
896 This will get the valid range for the "a" component. If none is found then the default will be returned, which is -100..100. @return the "a" range.
897 This will get the valid range for the "b" component. If none is found then the default will be returned, which is -100..100. @return the "b" range.
898 Creates a new JPEG Image XObject from an input stream containing JPEG data. The input stream data will be preserved and embedded in the PDF file without modification. @param document the document where the image will be created @param stream a stream of JPEG data @return a new Image XObject @throws IOException if the input stream cannot be read
899 This will set the font for this font setting. @param font The new font.
900 This will set the tint transform function. @param tint The tint transform function.
901 Sets the tint transform function. @param tint the tint transform function
902 Set the page for a local destination. For an external destination, call {@link #setPageNumber(int) setPageNumber(int pageNumber)}. @param page The page for a local destination.
903 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
904 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
905 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
906 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
907 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
908 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
909 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
910 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
911 This will set the line ending style for the start point, see the LE_ constants for the possible values. @param style The new style.
912 This will set the line ending style for the end point, see the LE_ constants for the possible values. @param style The new style.
913 Set the highest value for the key in the map. @param upper The new highest value for a key in the map.
914 Set the lowest value for the key in the map. @param lower The new lowest value for a key in the map.
915 Clips the given box to the bounds of the media box.
916 This will create a translated rectangle based off of this rectangle, such that the new rectangle retains the same dimensions(height/width), but the lower left x,y values are zero. <br> 100, 100, 400, 400 (llx, lly, urx, ury ) <br> will be translated to 0,0,300,300 @return A new rectangle that has been translated back to the origin.
917 Sets the colour for the before edge. @param colour the colour for the before edge
918 Sets the colour for the after edge. @param colour the colour for the after edge
919 Sets the colour for the start edge. @param colour the colour for the start edge
920 Sets the colour for the end edge. @param colour the colour for the end edge
921 This will dispatch to the correct method. @param obj The object to decrypt. @param objNum The object number. @param genNum The object generation Number. @return the encrypted/decrypted COS object @throws IOException If there is an error getting the stream data.
922 This will set an item in the dictionary. If value is null then the result will be the same as removeItem( key ). @param key The key to the dictionary object. @param value The value to the dictionary object.
923 Sets the AcroForm for this catalog. @param acroForm The new AcroForm.
924 Sets the viewer preferences. @param prefs The new viewer preferences.
925 Sets the document outlines. @param outlines The new document outlines.
926 Sets the metadata for this object. This can be null. @param meta The meta data for this object.
927 Sets the Document Open Action for this object. @param action The action you want to perform.
928 Sets the additional actions for the document. @param actions The actions that are associated with this document.
929 Sets the names dictionary for the document. @param names The names dictionary that is associated with this document.
930 Set information about the doc's usage of tagged features. @param markInfo The new MarkInfo data.
931 Sets the document level URI. @param uri The new document level URI.
932 Sets the document's structure tree root. @param treeRoot The new structure tree.
933 Sets the page label descriptor for the document. @param labels the new page label descriptor to set.
934 Set the named destinations that are associated with this document. @param dests The destination names.
935 Set the named embedded files that are associated with this document. @param ef The new embedded files
936 Set the named javascript entries that are associated with this document. @param js The new Javascript entries.
937 Creates a new instance of PDPage for embedding. @param mediaBox The MediaBox of the page.
938 This will set the resources for this page. @param resources The new resources for this page.
939 This will set the mediaBox for this page. @param mediaBox The new mediaBox for this page.
940 This will set the BleedBox for this page. @param bleedBox The new BleedBox for this page.
941 This will set the TrimBox for this page. @param trimBox The new TrimBox for this page.
942 This will set the ArtBox for this page. @param artBox The new ArtBox for this page.
943 This will set the contents of this page. @param contents The new contents of the page.
944 Set the metadata for this object. This can be null. @param meta The meta data for this object.
945 Set the page actions. @param actions The actions for the page.
946 @param transition The new transition to set on this page.
947 Convenient method to set a transition and the display duration @param transition The new transition to set on this page. @param duration The maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page.
948 Sets the value of a given named resource.
949 Set the embedded file for this spec. You should also call {@link #setEmbeddedFileUnicode(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFileUnicode(PDEmbeddedFile)} for cross-platform and cross-language compatibility. @param file The file to be embedded.
950 Set the embedded Unicode file for this spec. If you call this, then do not forget to also call {@link #setEmbeddedFile(org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile) setEmbeddedFile(PDEmbeddedFile)} or the attachment will not be visible on some viewers. @param file The Unicode file to be embedded.
951 Sets the page. @param page the page
952 Sets the referenced annotation. @param annotation the referenced annotation
953 Sets the referenced XObject. @param xobject the referenced XObject
954 Sets the page on which the object shall be rendered. This is optional and overrides the /PG entry in the structure element containing the object reference; shall be used if the structure element contained no such entry. @param page
955 Sets the parent in the structure hierarchy (P). @param structureNode the parent in the structure hierarchy
956 Sets the page on which some or all of the content items designated by the K entry shall be rendered (Pg). @param page the page on which some or all of the content items designated by the K entry shall be rendered.
957 Sets the parent tree.<p> The keys correspond to a single page of the document or to an individual object, e.g. an annotation or an XObject, which have a <b>/StructParent</b> or <b>/StructParents</b> entry.<p> The values of type {@link PDParentTreeValue} are either a dictionary or an array. It's a dictionary for individual objects like an annotation or an XObject, and an array for a page object or a content stream containing marked-content sequences identified by an MCID. <p> To create an empty parent tree, call {@code new PDNumberTreeNode(PDParentTreeValue.class)}. @param parentTree the parent tree
958 Set the rectangle associated with this annotation. @param rectangle The annotation rectangle.
959 This will set the border style dictionary, specifying the width and dash pattern used in drawing the annotation. @param bs the border style dictionary to set.
960 This will set the border effect dictionary, describing the effect applied to the border described by the BS entry. @param be the border effect dictionary to set.
961 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. @param fringe the fringe
962 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
963 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
964 This will set the fringe rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param fringe the fringe
965 This will set the FDF document. @param fdf The new FDF dictionary.
966 This will set the signature that is associated with this catalog. @param sig The new signature.
967 This will set the file specification. @param fs The file specification.
968 This will set the JavaScript entry. @param js The javascript entries.
969 This will set the FDF catalog for this FDF document. @param cat The FDF catalog.
970 This will set the appearance dictionary. @param ap The appearance dictionary.
971 This will set the named page references. @param ref The named page references.
972 This will set the icon fit 'IF' entry. @param fit The icon fit object.
973 This will set the action that is associated with this field. @param a The new action.
974 This will set the additional actions that are associated with this field. @param aa The additional actions.
975 This will set frational space to allocate. @param space The space to allocate.
976 This will set the file specification for this named page reference. @param fs The file specification to set.
977 This will set the page info. @param info The new page info dictionary.
978 This will set the template reference. @param tRef The template reference.
979 Set the type 1 font program. @param type1Stream The type 1 stream.
980 Set the true type font program. @param ttfStream The true type stream.
981 Set a stream containing a font program that is not true type or type 1. @param stream The font program stream.
982 Set a stream containing a CIDSet. @param stream The font program stream.
983 This will set the whitepoint tristimulus. As this is a required field, null should not be passed into this function. @param whitepoint the whitepoint tristimulus. @throws IllegalArgumentException if null is passed as argument.
984 This will set the BlackPoint tristimulus. @param blackpoint the BlackPoint tristimulus
985 This will set the external graphics state for this pattern. @param extendedGraphicsState The new extended graphics state for this pattern.
986 This will set the shading resources for this pattern. @param shadingResources The new shading resources for this pattern.
987 This will set the resources for this pattern. @param resources The new resources for this pattern.
988 This will set the function for the color conversion. @param newFunction the new function
989 This will set the font setting for this graphics state. @param fs The new font setting.
990 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
991 This will set the file in which the destination is located. @param fs The file specification.
992 Sets the target directory. @param targetDirectory the target directory
993 This will set the destination to jump to. @param d The destination. @throws IllegalArgumentException if the destination is not a page dictionary object.
994 This will set the file in which the destination is located. @param fs The file specification.
995 This will set the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @param fs The file specification.
996 This will set a dictionary containing Windows-specific launch parameters. @param win The action to be performed.
997 This will set the file in which the destination is located. @param fs The file specification.
998 This will set the file in which the destination is located. @param fs The file specification.
999 This will set the file in which the destination is located. @param fs The file specification.
1000 Set the F action. @param action Get the F action.
1001 This will set an action to be performed when the cursor enters the annotation's active area. @param e The action to be performed.
1002 This will set an action to be performed when the cursor exits the annotation's active area. @param x The action to be performed.
1003 This will set an action to be performed when the mouse button is pressed inside the annotation's active area. The name D stands for "down". @param d The action to be performed.
1004 This will set an action to be performed when the mouse button is released inside the annotation's active area. The name U stands for "up". @param u The action to be performed.
1005 This will set an action to be performed when the annotation receives the input focus. @param fo The action to be performed.
1006 This will set an action to be performed when the annotation loses the input focus. The name Bl stands for "blurred". @param bl The action to be performed.
1007 This will set an action to be performed when the page containing the annotation is opened. The action is executed after the O action in the page's additional actions dictionary and the OpenAction entry in the document catalog, if such actions are present. @param po The action to be performed.
1008 This will set an action to be performed when the page containing the annotation is closed. The action is executed before the C action in the page's additional actions dictionary, if present. @param pc The action to be performed.
1009 This will set an action to be performed when the page containing the annotation becomes visible in the viewer application's user interface. @param pv The action to be performed.
1010 This will set an action to be performed when the page containing the annotation is no longer visible in the viewer application's user interface. @param pi The action to be performed.
1011 This will set a JavaScript action to be performed before closing a document. The name WC stands for "will close". @param wc The action to be performed.
1012 This will set a JavaScript action to be performed before saving a document. The name WS stands for "will save". @param ws The action to be performed.
1013 This will set a JavaScript action to be performed after saving a document. The name DS stands for "did save". @param ds The action to be performed.
1014 This will set a JavaScript action to be performed before printing a document. The name WP stands for "will print". @param wp The action to be performed.
1015 This will set a JavaScript action to be performed after printing a document. The name DP stands for "did print". @param dp The action to be performed.
1016 This will set a JavaScript action to be performed when the user types a keystroke into a text field or combo box or modifies the selection in a scrollable list box. This allows the keystroke to be checked for validity and rejected or modified. @param k The action to be performed.
1017 This will set a JavaScript action to be performed before the field is formatted to display its current value. This allows the field's value to be modified before formatting. @param f The action to be performed.
1018 This will set a JavaScript action to be performed when the field's value is changed. This allows the new value to be checked for validity. The name V stands for "validate". @param v The action to be performed.
1019 This will set a JavaScript action to be performed in order to recalculate the value of this field when that of another field changes. The order in which the document's fields are recalculated is defined by the CO entry in the interactive form dictionary. The name C stands for "calculate". @param c The action to be performed.
1020 This will set an action to be performed when the page is opened. This action is independent of any that may be defined by the OpenAction entry in the document catalog, and is executed after such an action. @param o The action to be performed.
1021 This will set an action to be performed when the page is closed. This action applies to the page being closed, and is executed before any other page opened. @param c The action to be performed.
1022 Sets the target directory. @param targetDirectory the target directory or null if the current document is the target file containing the destination.
1023 This will set a named destination in the current document that provides the page number of the file attachment annotation. @param dest a named destination or null if the entry is to be removed.
1024 This will set the appearance associated with this annotation. @param appearance The appearance dictionary for this annotation.
1025 Sets the optional content group or optional content membership dictionary for the annotation. @param oc The optional content group or optional content membership dictionary.
1026 This will set the corresponding page for this annotation. This is optional but recommended. Not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. @param page is the corresponding page
1027 Set the attached file. @param file The file that is attached.
1028 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.6 and higher. @param be The border effect dictionary to set.
1029 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1030 Set the annotation action. Either this or the destination entry should be set, but not both. @param action The annotation action.
1031 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1032 The new destination value. Either this or the action entry should be set, but not both. @param dest The updated destination.
1033 This will set the previous URI action, in case it needs to be retrieved at later date. @param pa The previous URI.
1034 This will set the popup annotation used for entering/editing the text for this annotation. @param popup the popup annotation.
1035 This will set the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @param irt the annotation this one is "In Reply To".
1036 This will set the external data dictionary. @param externalData the external data dictionary
1037 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1038 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1039 This will set the border effect dictionary, specifying effects to be applied when drawing the line. This is supported by PDF 1.5 and higher. @param be The border effect dictionary to set.
1040 This will set the rectangle difference rectangle. Giving the difference between the annotations rectangle and where the drawing occurs. (To take account of any effects applied through the BE entry for example) @param rd the rectangle difference
1041 Sets the appearance characteristics dictionary. @param appearanceCharacteristics the appearance characteristics dictionary
1042 Set the annotation action. As of PDF 1.6 this is only used for Widget Annotations @param action The annotation action.
1043 Set the actions of the field. @param actions The field actions.
1044 This will set the border style dictionary, specifying the width and dash pattern used in drawing the line. @param bs the border style dictionary to set.
1045 Set the parent field of a widget annotation. This is only required if this widget annotation is one of multiple children in a field, and not to be set otherwise. You will usually not need this, because in most cases, fields have only one widget and share a common dictionary. A usage can be found in the CreateMultiWidgetsForm example. @param field the parent field. @throws IllegalArgumentException if setParent() was called for a field that shares a dictionary with its only widget.
1046 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1047 This will set the normal appearance when there is only one appearance to be shown. @param ap The appearance stream to show.
1048 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1049 This will set the rollover appearance when there is rollover appearance to be shown. @param ap The appearance stream to show.
1050 This will set a list of appearances. If you would like to set the single appearance then you should use the key "default", and when the PDF is written back to the filesystem then there will only be one stream. @param entry appearance stream or subdictionary
1051 This will set the down appearance when there is down appearance to be shown. @param ap The appearance stream to show.
1052 Set the build data dictionary for the signature handler. This entry is optional but is highly recommended for the signatures. @param filter is the PDPropBuildFilter
1053 Set the build data dictionary for the PubSec Software module. @param pubSec is the PDPropBuildPubSec
1054 Set the build data dictionary for the viewing application software module. @param app is the PDPropBuildApp
1055 (Optional) A certificate seed value dictionary containing information about the certificate to be used when signing. @param certificate dictionary
1056 PDF signature build dictionary. Provides information about the signature handler. @param propBuild the prop build
1057 Set the previous sibling, this will be maintained by this class. @param outlineNode The new previous sibling.
1058 Set the next sibling, this will be maintained by this class. @param outlineNode The new next sibling.
1059 Set the page destination for this node. @param dest The new page destination for this node.
1060 Set the action for this node. @param action The new action for this node.
1061 Set the structure element for this node. @param structureElement The new structure element for this node.
1062 Set the first child, this will be maintained by this class. @param outlineNode The new first child.
1063 Set the last child, this will be maintained by this class. @param outlineNode The new last child.
1064 This will set the default resources for the acroform. @param dr The new default resources.
1065 Set the XFA resource, this is only used for PDF 1.5+ forms. @param xfa The xfa resource.
1066 Sets the value of this field to be the given signature. @param value is the PDSignatureField @throws IOException if the new value could not be applied
1067 Sets the default value of this field to be the given signature. @param value is the PDSignatureField
1068 <p>(Optional; PDF 1.) A seed value dictionary containing information that constrains the properties of a signature that is applied to the field.</p> @param sv is the seed value dictionary as PDSeedValue
1069 Set the actions of the field. @param actions The field actions.
1070 This will set the rectangle specifying the location of the viewport. @param rectangle the rectangle specifying the location.
1071 This will set the measure dictionary. @param measure the measure dictionary
1072 Set the thread info, can be null. @param info The info dictionary about this thread.
1073 Set the thread that this bead is part of. This is only required for the first bead in a thread. Note: This property is set for you by the PDThread.setFirstBead() method. @param thread The thread that this bead is part of.
1074 Set the next bead in the thread. @param next The next bead.
1075 Set the previous bead in the thread. @param previous The previous bead.
1076 Set the page that this bead is part of. This is a required property and must be set when creating a new bead. The PDPage object also has a list of beads in the natural reading order. It is recommended that you add this object to that list as well. @param page The page that this bead is on.
1077 Set the rectangle on the page that this bead covers. @param rect The portion of the page that this bead covers.
1078 Set if this is a tagged PDF. @param value The new marked value.
1079 Set if the structure elements contain user properties. @param userProps The new value for this property.
1080 Set the value of the suspects property. See PDF Reference 1.6 section 10.6 "Logical Structure" for more information about this property. @param suspect The new "Suspects" value.
1081 This will specify whether to track the mouse position when the URI is resolved. @param value The flag value.
1082 This will set the initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed.
1083 This will set the value indication if the denominator of the fractional value is reduced/truncated . The denominator may not be reduced/truncated if true @param fd fd
1084 Tell if the underlying file is volatile and should not be cached by the reader application. Default: false @param fileIsVolatile The new value for the volatility of the file.
1085 Specifies whether the property shall be hidden. @param hidden <code>true</code> if the property shall be hidden, <code>false</code> otherwise
1086 Set the EncryptMetaData dictionary info. @param encryptMetaData true if EncryptMetaData shall be set.
1087 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
1088 This will tell the icon to scale. @param value The flag value.
1089 This will set if the fields can be renamed. @param value The flag value.
1090 This will set the AntiAlias value. @param antiAlias the new AntiAlias value
1091 This will set the overprint control(OP). @param op The overprint control.
1092 This will set the overprint control(OP). @param op The overprint control.
1093 This will set the automatic stroke adjustment flag. @param sa The new automatic stroke adjustment flag.
1094 This will set the alpha source flag (“alpha is shape”), that specifies whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false). @param alpha The alpha source flag.
1095 This will set the text knockout flag. @param tk The text knockout flag.
1096 This will specify whether to open the destination document in a new window. @param value The flag value.
1097 This will specify whether to open the destination document in a new window. @param value The flag value.
1098 This will specify whether to open the destination document in a new window. @param value The flag value.
1099 A flag specifying whether to play the sound synchronously or asynchronously. When true, the reader allows no further user interaction other than canceling the sound until the sound has been completely played. @param synchronous Whether to play the sound synchronously (true) or asynchronously (false).
1100 A flag specifying whether to repeat the sound indefinitely. @param repeat Whether to repeat the sound indefinitely.
1101 The flag specifying whether to mix this sound with any other sound already playing. If this flag is false, any previously playing sound shall be stopped before starting this sound; this can be used to stop a repeating sound (see Repeat). Default value: false. @param mix whether to mix this sound with any other sound already playing. (false).
1102 This will set if the contents are shown as a caption to the line. @param cap Boolean value.
1103 This will set initial state of the annotation, open or closed. @param open Boolean value, true = open false = closed
1104 A flag that can be used by the signature handler or software module to indicate that this signature was created with unrelease software. @param preRelease is true if the signature was created with a unrelease software, otherwise false.
1105 If true, the reader should not display a warning about fonts not being embedded. @param noEmbedFontWarning true if there is a Legal dictionary in the catalog and the NonEmbeddedFonts attribute has a non-zero value Documentation says: (Optional; PDF 1.5) If there is a LegalPDF dictionary in the catalog of the PDF file and the NonEmbeddedFonts attribute in this dictionary has a non zero value, and the viewing application has a preference set to suppress the display of this warning then the value of this attribute will be set to true. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/Acrobat_Signature_BuildDict.pdf#page=6">Digital Signature Build Dictionary Specification</a> @see #getNonEFontNoWarn() @see COSName#NON_EFONT_NO_WARN
1106 If true, the application was in trusted mode when signing took place. @param trustedMode true if the application is in trusted mode.
1107 Set the NeedAppearances value. If this is false, PDFBox will create appearances for all field widget. @param value the value for NeedAppearances
1108 Set the toolbar preference. @param value Set the toolbar preference.
1109 Set the menubar preference. @param value Set the menubar preference.
1110 Set the window UI preference. @param value Set the window UI preference.
1111 Set the fit window preference. @param value Set the fit window preference.
1112 Set the center window preference. @param value Set the center window preference.
1113 Set the display doc title preference. @param value Set the display doc title preference.
1114 Sets an array of strings. @param name the attribute name @param values the array of strings
1115 Sets an array of name values. @param name the attribute name @param values the array of name values
1116 Sets an array of float numbers. @param name the attribute name @param values the float numbers
1117 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
1118 This is a convenience method that will convert the value to a COSName object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1119 Sets the page mode. @param mode The new page mode.
1120 Sets the page layout. @param layout The new page layout.
1121 Sets the PDF specification version this document conforms to. @param version the PDF version (e.g. "1.4")
1122 This will set the trapped of the document. This will be 'True', 'False', or 'Unknown'. @param value The new trapped value for the document. @throws IllegalArgumentException if the parameter is invalid.
1123 Sets the numbering style for this page range. @param style one of the STYLE_* constants or {@code null} if no page numbering is desired.
1124 Creates a new instance with a given type. @param type the type (Type)
1125 Sets the owner of the attributes. @param owner the owner of the attributes
1126 Default constructor
1127 Default Constructor.
1128 Sets the structure type (S). @param structureType the structure type
1129 Constructor. @param type the type
1130 Sets the property name. @param name the property name
1131 Set the style for the box. @param style The style for the box line. @see PDBoxStyle#GUIDELINE_STYLE_DASHED @see PDBoxStyle#GUIDELINE_STYLE_SOLID
1132 Set the subfilter entry of the encryption dictionary. @param subfilter The value of the subfilter field.
1133 The intent of the annotation. @param intent The annotation's intent.
1134 This will set the line ending style. @param style The new style.
1135 This will set the icon (and hence appearance, AP taking precedence) For this annotation. See the PDAnnotationText.NAME_XXX constants for valid values. @param icon The name of the annotation
1136 This will set the version of the FDF document. @param version The new version for the FDF document.
1137 This will set the encoding. @param encoding The new encoding.
1138 This will set the scale option for the icon. Set the SCALE_OPTION_XXX constants. @param option The scale option.
1139 This will set the scale type. See the SCALE_TYPE_XXX constants. @param scale The scale type.
1140 Creates a new Pattern dictionary.
1141 This will set the type of PDF object that the actions dictionary describes. If present must be Action for an action dictionary. @param type The new Type for the PDF object.
1142 This will set the type of action that the actions dictionary describes. @param s The new type of action.
1143 This will set the sub type (and hence appearance, AP taking precedence) For this annotation. See the SUB_TYPE_XXX constants for valid values. @param subType The subtype of the annotation
1144 This will set the annotations appearance state name. @param as The name of the appearance stream.
1145 Set the name used to draw the attachment icon. See the ATTACHMENT_NAME_XXX constants. @param name The name of the visual icon to draw.
1146 This will set the line ending style. @param style The new style.
1147 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionPositioning caption positioning
1148 Set the highlight mode. See the HIGHLIGHT_MODE_XXX constants. @param mode The new highlight mode.
1149 This will set the Reply Type (relationship) with the annotation in the IRT entry See the RT_* constants for the available values. @param rt the reply type.
1150 This will set the intent of the annotation The values and meanings are specific to the actual annotation See the IT_* constants for the annotation classes. @param it the intent
1151 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the rubber stamp.
1152 This will set the name (and hence appearance, AP taking precedence) For this annotation. See the NAME_XXX constants for valid values. @param name The name of the annotation
1153 Sets the highlighting mode. <dl> <dt><code>N</code></dt> <dd>(None) No highlighting.</dd> <dt><code>I</code></dt> <dd>(Invert) Invert the contents of the annotation rectangle.</dd> <dt><code>O</code></dt> <dd>(Outline) Invert the annotation's border.</dd> <dt><code>P</code></dt> <dd>(Push) Display the annotation's down appearance, if any. If no down appearance is defined, the contents of the annotation rectangle shall be offset to appear as if it were pushed below the surface of the page</dd> <dt><code>T</code></dt> <dd>(Toggle) Same as <code>P</code> (which is preferred).</dd> </dl> @param highlightingMode the highlighting mode the defined values
1154 This will set the border style, see the STYLE_* constants for valid values. @param s the border style to use
1155 Constructor.
1156 This will set the subtype of the external data dictionary. @param subtype the subtype of the external data dictionary
1157 The name of the software module that was used to create the signature. @param name is the name of the software module
1158 (Optional; PDF 1.7) A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: <ul> <li>Browser, The URL references content that should be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit is ignored for this usage.</li> <li>ASSP, The URL references a signature web service that can be used for server-based signing. If the Ff attribute’s URL bit indicates that this is a required constraint, this implies that the credential used when signing must come from this server.</li> </ul> Third parties can extend the use of this attribute with their own attribute values, which must conform to the guidelines specified in <a href="http://www.adobe.com/content/dam/acom/en/devnet/pdf/PDF32000_2008.pdf#page=681">PDF Spec 1.7 Appendix E (PDF Name Registry)</a> if urlType is not set the default is Browser for URL @param urlType String of the urlType
1159 Default Constructor.
1160 Constructor for an existing document outline. @param dic The storage dictionary.
1161 Sets the default value. @param value Name of option to select @throws IllegalArgumentException if the value is not a valid option.
1162 Constructor.
1163 This will set the subtype of the measure dictionary. @param subtype the subtype of the measure dictionary
1164 Constructor.
1165 This will set the name of the viewport. @param name the name of the viewport
1166 creates a new transition with the given style. @param style the style to be used to create the new transition
1167 Sets the dimension in which the specified transition effect shall occur. Only for {@link PDTransitionStyle#Split} and {@link PDTransitionStyle#Blinds}. @param dimension the dimension in which the specified transition effect shall occur
1168 Sets the direction of motion for the specified transition effect. Only for {@link PDTransitionStyle#Split}, {@link PDTransitionStyle#Blinds} and {@link PDTransitionStyle#Fly}. @param motion the direction of motion for the specified transition effect
1169 Set the date object. @param key The key to the date. @param date The date to set.
1170 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param key The key to the object, @param value The string value for the name.
1171 This is a convenience method that will convert the value to a COSString object. If it is null then the object will be removed. @param embedded The embedded dictionary to set the item in. @param key The key to the object, @param value The string value for the name.
1172 Sets the Language for the document. @param language The new document language.
1173 This will set the title of the document. @param title The new title for the document.
1174 This will set the author of the document. @param author The new author for the document.
1175 This will set the subject of the document. @param subject The new subject for the document.
1176 This will set the keywords of the document. @param keywords The new keywords for the document.
1177 This will set the creator of the document. @param creator The new creator for the document.
1178 This will set the producer of the document. @param producer The new producer for the document.
1179 Sets the page label prefix for this page range. @param prefix the page label prefix for this page range, or {@code null} to unset the prefix.
1180 This will set the unicode file name. If you call this, then do not forget to also call {@link #setFile(java.lang.String) setFile(String)} or the attachment will not be visible on some viewers. @param file The name of the file.
1181 This will set the file name. You should also call {@link #setFileUnicode(java.lang.String) setFileUnicode(String)} for cross-platform and cross-language compatibility. @param file The name of the file.
1182 Set the file description. @param description The file description
1183 Sets the element identifier (ID). @param id the element identifier
1184 Sets the title (T). @param title the title
1185 Sets the language (Lang). @param language the language
1186 Sets the alternate description (Alt). @param alternateDescription the alternate description
1187 Sets the expanded form (E). @param expandedForm the expanded form
1188 Sets the actual text (ActualText). @param actualText the actual text
1189 Sets the string for the property value. @param formattedValue the string for the property value
1190 The annotation modification date. @param date The date to store in the FDF annotation.
1191 Set a unique name for an annotation. @param name The unique annotation name.
1192 Set the contents, or a description, for an annotation. @param contents The annotation contents, or a description.
1193 Set a unique title for an annotation. @param title The annotation title.
1194 A short description of the annotation. @param subject The annotation subject.
1195 This will set the symbol that shall be associated with the caret. @param symbol the symbol
1196 Set the default appearance string. @param appearance The new default appearance string.
1197 Set the default style string. @param style The new default style string.
1198 This will set the caption positioning. Allowed values are: "Inline" and "Top" @param captionStyle caption positioning
1199 This will set the annotation state. @param state the annotation state
1200 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
1201 This will set the status string. @param status The new status string.
1202 This will set the target frame in the browser to open this document. @param target The new target frame.
1203 This will set the partial field name. @param partial The partial field name.
1204 This will set the name of the referenced page. @param name The referenced page name.
1205 Sets the name of the optional content group. @param name the name
1206 Creates a new optional content properties dictionary.
1207 @param sAction The JavaScript.
1208 This will set the file name to be launched or the document to be opened or printed, in standard Windows pathname format. If the name string includes a backslash character (\), the backslash must itself be preceded by a backslash. This value must be a single string; it is not a file specification. @param f The file name to be launched.
1209 This will set the string specifying the default directory in standard DOS syntax. @param d The default directory.
1210 This will set the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched. Default value: open. @param o The operation to perform.
1211 This will set a parameter string to be passed to the application designated by the F entry. This entry should be omitted if F designates a document. @param p The parameter string.
1212 This will set the uniform resource identifier to resolve, encoded in 7-bit ASCII. @param uri The uniform resource identifier.
1213 Sets the name of the file as found in the EmbeddedFiles name tree. This is only to be used if the target is a child of the current document. @param filename a filename or null if the entry is to be deleted.
1214 This will get the value of the /NM entry in the annotation dictionary. @param name the /NM value of an annotation dictionary or null if the entry is to be removed.
1215 Set the file to launch. @param file The executable/document to launch.
1216 Set the dir to launch from. @param dir The dir of the executable/document to launch.
1217 Set the operation to perform.. @param op The operation to perform on the file.
1218 Set the parameter to pass the executable. @param param The parameter for the executable.
1219 Set the "contents" of the field. @param value the value of the contents.
1220 This will set the date and time the annotation was modified. @param m the date and time the annotation was created. Date values used in a PDF shall conform to a standard date format, which closely follows that of the international standard ASN.1 (Abstract Syntax Notation One), defined in ISO/IEC 8824. A date shall be a text string of the form (D:YYYYMMDDHHmmSSOHH'mm). Alternatively, use {@link #setModifiedDate(java.util.Calendar)}
1221 This will set the name, a string intended to uniquely identify each annotation within a page. Not to be confused with some annotations Name entry which impact the default image drawn for them. @param nm The identifying name for the annotation.
1222 Set the default appearance. @param daValue a string describing the default appearance.
1223 Set the default style string. Providing null as the value will remove the default style string. @param defaultStyleString a string describing the default style.
1224 Set the string used as the title of the popup window shown when open and active (by convention this identifies who added the annotation). @param t The title of the popup.
1225 This will set the short description of the subject of the annotation. @param subj short description of the subject.
1226 This will set the annotation state. @param state the annotation state
1227 This will set the annotation state model. Allowed values are "Marked" and "Review" @param stateModel the annotation state model
1228 This will set the normal caption. @param caption the normal caption
1229 This will set the rollover caption. @param caption the rollover caption
1230 This will set the alternate caption. @param caption the alternate caption
1231 The build date of the software module. This string is normally produced by the compiler. @param date is the build date of the software module
1232 (Optional) A URL, the use for which is defined by the URLType entry. @param url String of the URL
1233 Sets the URL. @param url the URL to be set as URL
1234 Sets the name of the person or authority signing the document. According to the PDF specification, this value should be used only when it is not possible to extract the name from the signature. @param name the name to be used
1235 Sets the CPU host name or physical location of the signing. @param location the location to be used
1236 Sets the reason for the signing, such as (I agree...). @param reason the reason to be used
1237 Sets the contact info provided by the signer to enable a recipient to contact the signer to verify the signature, e.g. a phone number. @param contactInfo the contact info to be used
1238 Set the title for this node. @param title The new title for this node.
1239 Set the default appearance. @param daValue a string describing the default appearance
1240 Sets the default value of this field. @param value The name of the selected item.
1241 This will set the partial name of the field. @param name The new name for the field. @throws IllegalArgumentException If the name contains a period character.
1242 This will set the alternate name of the field ("shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field)"). The text appears as a tool tip in Adobe Reader. Because of the usage for error or status messages, it should be different for each field. @param alternateFieldName the alternate name of the field.
1243 This will set the mapping name of the field. @param mappingName the mapping name of the field
1244 Sets the plain text value of this field. @param value Plain text @throws IOException if the value could not be set
1245 Set the plain text value of this field, and try to update the visual appearance. @param value Plain text @throws IOException if the value could not be set
1246 Sets the default value of this field. @param value Plain text
1247 Set the default appearance. This will set the local default appearance for the variable text field only, not affecting a default appearance in the parent hierarchy. Providing null as the value will remove the local default appearance. <p> This method can also be used to change the font of a field, by replacing the font name from this string with another font name found in the AcroForm default resources <u>before</u> calling {@link #setValue(java.lang.String) setValue(String)}, see also <a href="https://stackoverflow.com/questions/47995062/pdfbox-api-how-to-handle-cyrillic-values">this stackoverflow answer</a>. For example, "/Helv 10 Tf 0 g" can be replaced with "/F1 10 Tf 0 g". Performance may go down (see <a href="https://issues.apache.org/jira/browse/PDFBOX-4508">PDFBOX-4508)</a> if this is done for many fields and with a very large font (e.g. ArialUni); to avoid this, save and reload the file after changing all fields. @param daValue a string describing the default appearance
1248 This will set the scale ration. @param scaleRatio the scale ratio.
1249 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1250 This is a convenience method that will convert the value to a COSInteger object. @param embeddedDictionary The embedded dictionary. @param key The key to the object, @param value The int value for the name.
1251 Sets the given boolean value at bitPos in the flags. @param field The COSName of the field to set the value into. @param bitFlag the bit position to set the value in. @param value the value the bit position should have.
1252 This will set the key for this page in the structural parent tree. @param structParents The new key for this page.
1253 This will set the rotation for this page. @param rotation The new rotation for this page in degrees.
1254 Constructor for reading. @param root A page tree root. @param document The document which contains "root".
1255 Removes the given COS page.
1256 Adds the given page to this page tree. @param page The page to add.
1257 Sets the start value for page numbering in this page range. @param start a positive integer representing the start value. @throws IllegalArgumentException if {@code start} is not a positive integer
1258 Set the number of bits that the output value will take up. Valid values are 1,2,4,8,12,16,24,32. @param bps The number of bits for each output value.
1259 Sets the marked content identifier. @param mcid the marked content identifier
1260 Sets the revision number (R). @param revisionNumber the revision number
1261 Sets the next key in the parent tree. This is a number greater than any existing key, and which shall be used for the next entry to be added to the tree. @param parentTreeNextkey The next key in the parent tree.
1262 This will set the number of bits to use for the crypt filter algorithm. @param length The new key length.
1263 This will set the V entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.13. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param version The new encryption version.
1264 This will set the number of bits to use for the encryption algorithm. @param length The new key length.
1265 This will set the R entry of the encryption dictionary.<br><br> See PDF Reference 1.4 Table 3.14. <br><br> <b>Note: This value is used to decrypt the pdf document. If you change this when the document is encrypted then decryption will fail!.</b> @param revision The new encryption version.
1266 This will set the permissions bit mask. @param permissions The new permissions bit mask
1267 This will set the page. @param page The page number.
1268 This will set the form of quadding (justification) of the annotation text. @param justification The quadding of the text.
1269 This will set the clockwise rotation in degrees. @param rotation The number of degrees of clockwise rotation.
1270 This will set the field flags that are associated with this field. The 'Ff' entry in the FDF field dictionary. @param ff The new value for the field flags.
1271 This will set the field flags that are associated with this field. The 'SetFf' entry in the FDF field dictionary. @param ff The new value for the "set field flags".
1272 This will set the field flags that are associated with this field. The 'ClrFf' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
1273 This will set the field flags that are associated with this field. The 'F' entry in the FDF field dictionary. @param f The new value for the field flags.
1274 This will set the widget field flags that are associated with this field. The 'SetF' entry in the FDF field dictionary. @param ff The new value for the "set widget field flags".
1275 This will set the field flags that are associated with this field. The 'ClrF' entry in the FDF field dictionary. @param ff The new value for the "clear field flags".
1276 This will set the font flags. @param flags The new font flags.
1277 Sets the glyph widths in the font dictionary.
1278 This will set the paint type. @param paintType The new paint type.
1279 This will set the pattern type. @param patternType The new pattern type.
1280 This will set the paint type. @param paintType The new paint type.
1281 This will set the tiling type. @param tilingType The new tiling type.
1282 This will set the shading type. @param shadingType the new shading type
1283 Set the number of bits per flag. @param bitsPerFlag the number of bits per flag
1284 Set the number of vertices per row. @param verticesPerRow the number of vertices per row
1285 Set the number of bits per component. @param bitsPerComponent the number of bits per component
1286 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
1287 This will set the line cap style for the graphics state. @param style The new line cap style to set.
1288 This will set the line join style. @param style The new line join style.
1289 This will set the overprint mode(OPM). @param overprintMode The overprint mode
1290 @param flags the flags
1291 @param flags the flags
1292 Set the page number (zero-based) in the current document containing the file attachment annotation. @param pageNumber the zero based page number. If this is &lt; 0 then the entry is removed.
1293 This will set the index (zero-based) of the annotation in the /Annots array of the page specified by the /P entry. @param index the zero based index. If this is &lt; 0 then the entry is removed.
1294 This will set the flags for this field. @param flags The new flags.
1295 This will set the key for this annotation in the structural parent tree. @param structParent The new key for this annotation.
1296 This will set the quadding/justification of the text. Please see the QUADDING_CONSTANTS in {@link PDVariableText }. @param q The new text justification.
1297 This will set the rotation. @param rotation the rotation as a multiple of 90
1298 Set the P value. @param p the value to be set as P
1299 Sets if a timestamp is reuqired or not. @param flag true if a timestamp is required
1300 Set the open count. This number is automatically managed for you when you add items to the outline. @param openCount The new open count.
1301 This will set the document-wide default value for the quadding/justification of variable text fields. See the QUADDING constants of {@link PDVariableText}. @param q The justification of the variable text fields.
1302 This will set the flags for this field. @param flags The new flags.
1303 This will set top index "TI" value. @param topIndex the value for the top index, null will remove the value.
1304 Sets the maximum number of characters of the text field. @param maxLen the maximum number of characters
1305 This will set the quadding/justification of the text. See QUADDING constants. @param q The new text justification.
1306 This is a convenience method that will convert the value to a COSInteger object. @param key The key to the object, @param value The int value for the name.
1307 This will write the trailer to the PDF document. @param doc The document to create the trailer for. @throws IOException If there is an IOError while writing the document.
1308 The software module revision number, corresponding to the Date attribute. @param revision is the software module revision number
1309 The software module revision number, used to determinate the minimum version of software that is required in order to process this signature. <p> NOTE: this entry is deprecated for PDF v1.7 </p> @param revision is the software module revision number
1310 This is a convenience method that will convert the value to a COSFloat object. @param key The key to the object, @param value The int value for the name.
1311 Get the user unit. This is a positive number that shall give the size of default user space units, in multiples of 1/72 inch. This is supported by PDF 1.6 and higher. @param userUnit throws IllegalArgumentException if the parameter is not positive.
1312 Set the guideline width. @param width The width in default user space units.
1313 Set the annotation opacity. @param opacity The new opacity value.
1314 This will set the length of the leader line. @param leaderLength length of the leader line
1315 This will set the length of the leader line extensions. @param leaderExtend length of the leader line extensions
1316 This will set the length of the leader line offset. @param leaderOffset length of the leader line offset
1317 Set the weight of the font. @param fontWeight The new weight of the font.
1318 This will set the italic angle for the font. @param angle The new italic angle for the font.
1319 This will set the ascent for the font. @param ascent The new ascent for the font.
1320 This will set the descent for the font. @param descent The new descent for the font.
1321 This will set the leading for the font. @param leading The new leading for the font.
1322 This will set the cap height for the font. @param capHeight The new cap height for the font.
1323 This will set the x height for the font. @param xHeight The new x height for the font.
1324 This will set the stem V for the font. @param stemV The new stem v for the font.
1325 This will set the stem H for the font. @param stemH The new stem h for the font.
1326 This will set the average width for the font. @param averageWidth The new average width for the font.
1327 This will set the max width for the font. @param maxWidth The new max width for the font.
1328 This will set the missing width for the font. @param missingWidth The new missing width for the font.
1329 This will set the XStep value. @param xStep The new XStep value.
1330 This will set the YStep value. @param yStep The new YStep value.
1331 Gets the volume at which to play the sound, in the range −1.0 to 1.0. @param volume The volume at which to play the sound, in the range −1.0 to 1.0. @throws IllegalArgumentException if the volume parameter is outside of the range −1.0 to 1.0.
1332 This will set the length of the leader line. @param leaderLineLength length of the leader line
1333 This will set the length of the leader line extensions. @param leaderLineExtensionLength length of the leader line extensions
1334 This will set the length of the leader line offset. @param leaderLineOffsetLength length of the leader line offset
1335 This will set the constant opacity value used when rendering the annotation (excluing any popup). @param ca the constant opacity value.
1336 This will set the border width in points, 0 = no border. There is a bug in Adobe Reader DC, float values are ignored for text field widgets. As a workaround, floats that are integers (e.g. 2.0) are written as integer in the PDF. <p> In Adobe Acrobat DC, the values are shown as "0 = Invisible, 1 = Thin, 2 = Medium, 3 = Thick" for widget and link annotations. @param w float the width in points
1337 (Optional) The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. @param minimumRequiredCapability is the minimum required capability of the signature field seed value dictionary parser
1338 This will set the CYX factor. @param cyx CYX factor
1339 This will read a COSStream from the input stream using length attribute within dictionary. If length attribute is a indirect reference it is first resolved to get the stream length. This means we copy stream data without testing for 'endstream' or 'endobj' and thus it is no problem if these keywords occur within stream. We require 'endstream' to be found after stream data is read. @param dic dictionary that goes with this stream. @return parsed pdf stream. @throws IOException if an error occurred reading the stream, like problems with reading length attribute, stream does not end with 'endstream' after data read, stream too short etc.
1340 Merges two objects of the same type by deep-cloning its members. <br> Base and target must be instances of the same class. @param base the base object to be cloned @param target the merge target @throws IOException if an I/O error occurs
1341 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. @param lenient activate leniency if set to true @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
1342 Processes the operators of the given content stream. @param contentStream to content stream to parse. @throws IOException if there is an error reading or parsing the content stream.
1343 This will parse all the tokens in the stream. This will close the stream when it is finished parsing. @return All of the tokens in the stream. @throws IOException If there is an error while parsing the stream.
1344 Calculate the bounding box of this glyph. This will work only if the first operator in the stream is d1. @return the bounding box of this glyph, or null if the first operator is not d1. @throws IOException If an io error occurs while parsing the stream.
1345 Get the width from a type3 charproc stream. @return the glyph width. @throws IOException if the stream could not be read, or did not have d0 or d1 as first operator, or if their first argument was not a number.
1346 This will write the pdf document. If signature should be created externally, {@link #writeExternalSignature(byte[])} should be invoked to set signature after calling this method. @param doc The document to write. @throws IOException If an error occurs while generating the data.
1347 Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file or a stream, not if the document was created in PDFBox itself. There must be a path of objects that have {@link COSUpdateInfo#isNeedToBeUpdated()} set, starting from the document catalog. For signatures this is taken care by PDFBox itself. <p> Other usages of this method are for experienced users only. You will usually never need it. It is useful only if you are required to keep the current revision and append the changes. A typical use case is changing a signed file without invalidating the signature. <p> If your modification includes annotations, make sure these link back to their page by calling {@link PDAnnotation#setPage(PDPage)}. Although this is optional, not doing it <a href="https://stackoverflow.com/questions/74836898/">can cause trouble when PDFs get signed</a>. (PDFBox already does this for signature widget annotations) <p> Another problem with page-based modifications can occur if the page tree isn't flat: there won't be an closed update path from the catalog to the page. To fix this, add code like this: <pre>{@code COSDictionary parent = page.getCOSObject().getCOSDictionary(COSName.PARENT); while (parent != null) { parent.setNeedToBeUpdated(true); parent = parent.getCOSDictionary(COSName.PARENT); } }</pre> Don't use the input file as target as this will produce a corrupted file. @param output stream to write to. It will be closed when done. It <i><b>must never</b></i> point to the source file or that one will be harmed! @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream.
1348 Creates an empty PDF document. You need to add at least one page for the document to be valid.
1349 This will get the document CATALOG. This is guaranteed to not return null. @return The documents /Root dictionary
1350 Returns the given COS page using a depth-first search. @param pageNum 1-based page number @param node page tree node to search @param encountered number of pages encountered so far @return COS dictionary of the Page object @throws IllegalStateException if the requested page number isn't found @throws IndexOutOfBoundsException if the requested page number is higher than the page count
1351 A file specification can either be a COSString or a COSDictionary. This will create the file specification either way. @param base The cos object that describes the fs. @return The file specification for the COSBase object. @throws IOException If there is an error creating the file spec.
1352 Notifies the attribute object change listeners about a change in this attribute object.
1353 Appends an objectable kid. @param objectable the objectable
1354 Inserts an objectable kid before a reference kid. @param newKid the objectable @param refKid the reference kid
1355 Removes an objectable kid. @param objectable the objectable @return <code>true</code> if the kid was removed, <code>false</code> otherwise
1356 Sets the standard crypt filter. @param cryptFilterDictionary the standard crypt filter to set
1357 Sets the default crypt filter (for public-key security handler). @param defaultFilterDictionary the standard crypt filter to set
1358 Default constructor.
1359 Default constructor.
1360 Default constructor.
1361 Default constructor.
1362 Default constructor.
1363 Default constructor.
1364 Default constructor.
1365 Default constructor.
1366 Default constructor.
1367 Default constructor.
1368 Default constructor.
1369 Default constructor.
1370 Default constructor.
1371 Default constructor.
1372 Build vertical metrics with Identity CIDToGIDMap (for embedding full font).
1373 Constructor for embedding.
1374 Returns the first optional content group of the given name. @param name the group name @return the optional content group or null, if there is no such group
1375 Returns the collection of all optional content groups. @return the optional content groups
1376 This will set the line width. @param width The line width for the object.
1377 This will set the miter limit for the graphics state. @param miterLimit The new miter limit value
1378 This will set the flatness tolerance. @param flatness The new flatness tolerance
1379 This will set the smoothness tolerance. @param smoothness The new smoothness tolerance
1380 This will set the stroking alpha constant. @param alpha The new stroking alpha constant.
1381 This will set the non stroking alpha constant. @param alpha The new non stroking alpha constant.
1382 Constructor.
1383 Constructor.
1384 Constructor.
1385 Constructor.
1386 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
1387 Constructor. @param dict The annotations dictionary.
1388 Creates a popup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
1389 Creates an arbitrary annotation from a COSDictionary, expected to be a correct object definition for some sort of annotation. @param dic The dictionary which represents this Annotation.
1390 Creates a PDWidget from a COSDictionary, expected to be a correct object definition for a field in PDF. @param field the PDF object to represent as a field.
1391 This will set the difference between the annotations "outer" rectangle defined by /Rect and boundaries of the underlying. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1392 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p>This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1393 This will set the difference between the annotations "outer" rectangle defined by /Rect and the border. <p> This will set an equal difference for all sides</p> @param difference from the annotations /Rect entry
1394 Convenience method for annotations: sets the line with and dash style. @param lineWidth The line width. @param bs The border style, may be null. @param border The border array, must have at least three entries. This is only used if the border style is null. @throws IOException If there is an error writing to the content stream.
1395 works like {@link #addKeyUsage(String)} but enters each character separately @param digitalSignature char that is one of {0, 1, X} @param nonRepudiation char that is one of {0, 1, X} @param keyEncipherment char that is one of {0, 1, X} @param dataEncipherment char that is one of {0, 1, X} @param keyAgreement char that is one of {0, 1, X} @param keyCertSign char that is one of {0, 1, X} @param cRLSign char that is one of {0, 1, X} @param encipherOnly char that is one of {0, 1, X} @param decipherOnly char that is one of {0, 1, X}
1396 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1397 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1398 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
1399 Set the selected value of this field, and try to update the visual appearance. @param value The name of the selected item. @throws IOException if the value could not be set
1400 This will retrieve the border array. If none is available then it will create and return a default array, which is [0 0 1]. The array consists of at least three numbers defining the horizontal corner radius, vertical corner radius, and border width. The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. If the array has less than three elements, the original array will be copied and missing elements with value 0 will be added. @return the border array, never null.
1401 <p> Constructs an object that can be used to compress the contents of a given {@link PDDocument}. It provides the means to: </p> <ul> <li>Compress the COSStructure of the document, by streaming {@link COSBase}s to compressed {@link COSWriterObjectStream}s</li> </ul> @param document The document, that shall be compressed. @param parameters The configuration of the compression operations, that shall be applied. @throws IOException Shall be thrown if a compression operation failed.
1402 This is a convenience method that will get the dictionary object that is expected to be a name and convert it to a string. Null is returned if the entry does not exist in the dictionary. @param embedded The embedded dictionary to get. @param key The key to the item in the dictionary. @return The name converted to a string.
