1 Creates a corner curl for polygons and ellipses.
2 Draws an ellipse without a cloudy border effect.
3 Format the text block. @throws IOException if there is an error writing to the stream.
4 My "not so great" method for calculating the fontsize. It does not work superb, but it handles ok. @return the calculated font-size @throws IOException If there is an error getting the font information.
5 Reads the Encoding from the Font dictionary or the embedded or substituted font file. Must be called at the end of any subclass constructors. @throws IOException if the font file could not be read
6 Internal implementation of isSymbolic, allowing for the fact that the result may be indeterminate. @return true if isSymbolic
7 Finds a TrueType font with the given PostScript name, or a suitable substitute, or null. @param fontDescriptor FontDescriptor
8 Finds a font with the given PostScript name, or a suitable substitute, or null. This allows any font to be substituted with a PFB, TTF or OTF. @param fontDescriptor the FontDescriptor of the font to find
9 This will tell if the AcroForm is a dynamic XFA form. @return true if the AcroForm is a dynamic XFA form
10 This will retrieve the rich text stream which is displayed in the popup window. @return the rich text stream.
11 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
12 Get the fields rich text value. @return the rich text value string
13 Constructor. @param functionStream The function stream. @throws IOException if an I/O error occurs while reading the function
14 Do a linear interpolation if the two coordinates can be known, or call itself recursively twice. @param coord coord partially set coordinate (not set from step upwards); gets fully filled in the last call ("leaf"), where it is used to get the correct sample @param step between 0 (first call) and dimension - 1 @return interpolated result sample
15 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
16 Constructor creates an instance to be used for fill operations. @param shading the shading type to be used @param colorModel the color model to be used @param xform transformation for user to device space @param matrix the pattern matrix concatenated with that of the parent content stream @param deviceBounds device bounds @throws IOException if something went wrong
17 Get the XFA content as byte array. The XFA is either a stream containing the entire XFA resource or an array specifying individual packets that together make up the XFA resource. A packet is a pair of a string and stream. The string contains the name of the XML element and the stream contains the complete text of this XML element. Each packet represents a complete XML element, with the exception of the first and last packet, which specify begin and end tags for the xdp:xdp element. [IS0 32000-1:2008: 12.7.8] @return the XFA content @throws IOException if the XFA content could not be created
18 Default constructor.
19 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
20 Default constructor.
21 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
22 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
23 Default constructor.
24 Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The left x coordinate.
25 Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The bottom y coordinate.
26 Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used. @param x The right x coordinate.
27 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
28 Default constructor.
29 Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used. @param y The top ycoordinate.
30 Set if this page destination should just fit the bounding box. The default is false. @param fitBoundingBox A flag indicating if this should fit the bounding box.
31 Default constructor.
32 Set the left x-coordinate, values 0 or -1 imply that the current x-coordinate will be used. @param x The left x coordinate.
33 Set the top y-coordinate, values 0 or -1 imply that the current y-coordinate will be used. @param y The top ycoordinate.
34 Set the zoom value for the page, values 0 or -1 imply that the current zoom will be used. @param zoom The zoom value.
35 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
36 Get the list of decode parameters. Each entry in the list will refer to an entry in the filters list. @return The list of decode parameters. @throws IOException if there is an error retrieving the parameters.
37 Load the ICC profile, or init alternateColorSpace color space.
38 This will create an Appearance dictionary from an appearance XML element. @param appearanceXML The XML element that contains the appearance data.
39 Create a new CalGray color space.
40 Creates a new CalRGB color space.
41 Creates a new Lab color space.
42 Creates a new CalGray color space using the given COS array. @param array the COS array which represents this color space
43 Creates a new CalRGB color space using the given COS array. @param rgb the cos array which represents this color space
44 Creates a new Lab color space from a PDF array. @param lab the color space array
45 This will set the a range for the "a" component. @param range the new range for the "a" component, or null if defaults (-100..100) are to be set.
46 This will set the "b" range for this color space. @param range the new range for the "b" component, or null if defaults (-100..100) are to be set.
47 Set the children of this number tree. @param kids The children of this number tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNumbers(Map)} with a map and pass a single element list here.
48 Set the numbers for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param numbers The map of numbers to objects, or <code>null</code> for nothing.
49 A rectangle, expressed in default user space units, defining the visible region of default user space. When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle. @return the cropbox of the page
50 Resolve the bounding box. @param fieldWidget the annotation widget. @param appearanceStream the annotations appearance stream. @return the resolved boundingBox.
51 Sets the bounding box. @param bbox the bounding box
52 Sets a colour. @param name the attribute name @param value the colour
53 Sets four colours. @param name the attribute name @param value the four colours
54 Creates a new PDPage instance for embedding, with a size of U.S. Letter (8.5 x 11 inches).
55 Adds the given resource if it does not already exist.
56 Sets the font resource with the given name. @param name the name of the resource @param font the font to be added
57 Sets the color space resource with the given name. @param name the name of the resource @param colorSpace the color space to be added
58 Sets the extended graphics state resource with the given name. @param name the name of the resource @param extGState the extended graphics state to be added
59 Sets the shading resource with the given name. @param name the name of the resource @param shading the shading to be added
60 Sets the pattern resource with the given name. @param name the name of the resource @param pattern the pattern to be added
61 Sets the property list resource with the given name. @param name the name of the resource @param properties the property list to be added
62 Sets the XObject resource with the given name. @param name the name of the resource @param xobject the XObject to be added
63 This will get the FDF dictionary. @return The FDF dictionary.
64 Constructor, creates a new FDF document.
65 This will get the FDF Catalog. This is guaranteed to not return null. @return The documents /Root dictionary
66 This is guaranteed to never return null.<br> To quote the PDF Spec "An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon. A value of [0.0 0.0] positions the icon at the bottom-left corner of the annotation rectangle; a value of [0.5 0.5] centers it within the rectangle. This entry is used only if the icon is scaled proportionally. Default value: [0.5 0.5]." @return The fractional space to allocate.
67 Builds the CIDSet entry, required by PDF/A. This lists all CIDs in the font, including those that don't have a GID.
68 Creates a new tiling pattern.
69 Get the annotations appearance dictionary. <p> This will get the annotations appearance dictionary. If this is not existent an empty appearance dictionary will be created. @return the annotations appearance dictionary
70 Insert a single sibling before this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
71 Insert a single sibling after this node. @param newSibling The item to insert. @throws IllegalArgumentException if the given sibling node is part of a list (i.e. if it has a previous or a next sibling)
72 Appends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
73 Prepends the child to the linked list of children. This method only adjust pointers but doesn't take care of the Count key in the parent hierarchy. @param newChild
74 This will set the first bead in the thread. When this is set it will also set the thread property of the bead object. @param bead The first bead in the thread.
75 Default constructor.
76 Append a bead after this bead. This will correctly set the next/previous beads in the linked list. @param append The bead to insert.
77 Sets the role map. @param roleMap the role map
78 Sets a name value. @param name the attribute name @param value the name value
79 This will set the rendering intent for the graphics state. @param ri The new rendering intent
80 This will set the name of the action to be performed. @param name The name of the action to be performed.
81 This will set the border effect, see the STYLE_* constants for valid values. @param s the border effect to use
82 Creates an empty page label dictionary for the given document. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)
83 Constructor with required values. @param structureType The structure type. Constants are available in the {@link StandardStructureTypes} class. @param parent The parent structure node.
84 Default Constructor.
85 Creates a new shading pattern.
86 Default constructor.
87 Get the outline associated with this document or null if it does not exist. @return The document's outline.
88 @return The parent of this node or null if there is no parent.
89 Set the selected option given its index, and try to update the visual appearance. NOTE: this method is only usable if there are export values and used for radio buttons with FLAG_RADIOS_IN_UNISON not set. @param index index of option to be selected @throws IOException if the value could not be set @throws IllegalArgumentException if the index provided is not a valid index.
90 Constructor.
91 creates a new transition with default "replace" style {@link PDTransitionStyle#R}
92 Set the value of a date entry in the dictionary. @param key The key to the date value. @param date The date value.
93 Set the date object. @param embedded The embedded dictionary. @param key The key to the date. @param date The date to set.
94 This will set the creation date of the document. @param date The new creation date for the document.
95 This will set the modification date of the document. @param date The new modification date for the document.
96 Set the creation date. @param date The date the annotation was created.
97 This will set the date and time the annotation was modified. @param c the date and time the annotation was created.
98 This will set the date and time the annotation was created. @param creationDate the date and time the annotation was created.
99 Set the sign date. @param cal the date to be used as sign date
100 Set the custom metadata value. @param fieldName The name of the custom metadata field. @param fieldValue The value to the custom metadata field.
101 Sets a string attribute value. @param name the attribute name @param value the string attribute value
102 This will set the base URI to be used in resolving relative URI references. URI actions within the document may specify URIs in partial form, to be interpreted relative to this base address. If no base URI is specified, such partial URIs will be interpreted relative to the location of the document itself. The use of this entry is parallel to that of the body element &lt;BASE&gt;, as described in the HTML 4.01 Specification. @param base The base URI to be used.
103 A text string indicating the version of the application implementation, as described by the <code>Name</code> attribute in this dictionary. When set by Adobe Acrobat, this entry is in the format: major.minor.micro (for example 7.0.7). <p> NOTE: Version value is specific for build data dictionary when used as the <code>App</code> dictionary in a build properties dictionary. </p> @param applicationVersion the application implementation version
104 This will set the label for the units. @param units the label for the units
105 This will set the value for the manner to display a fractional value. Allowed values are "D", "F", "R", "T" and null. @param fractionalDisplay the manner to display a fractional value
106 This will set the text to be used between orders of thousands in display of numerical values. @param thousandsSeparator thousands separator
107 This will set the text to be used as the decimal point in displaying numerical values. @param decimalSeparator decimal separator
108 This will set the text to be concatenated to the left of the label specified by U. @param labelPrefixString label prefix
109 This will set the text to be concatenated after the label specified by U. @param labelSuffixString label suffix
110 This will set the value indicating the ordering of the label specified by U to the calculated unit value. Possible values are "S", "P" and null. @param labelPositionToValue label position
111 Set the mac subtype. @param macSubtype The mac subtype.
112 Set the mac Creator. @param macCreator The mac Creator.
113 Set the mac ResFork. @param macResFork The mac ResFork.
114 This will create an FDF field from an XFDF XML document. @param fieldXML The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
115 Creates a new optional content group (OCG). @param name the name of the content group
116 Adds an optional content group (OCG). @param ocg the optional content group
117 Returns the base state for optional content groups. @return the base state
118 Sets the base state for optional content groups. @param state the base state
119 Enables or disables an optional content group. @param group the group object @param enable true to enable, false to disable @return true if the group already had an on or off setting, false otherwise
120 Sets an integer. @param name the attribute name @param value the integer
121 Sets an integer number. @param name the attribute name @param value the integer number
122 This will set the precision or denominator of a fractional amount. @param denominator the precision or denominator
123 Set the invisible flag. @param invisible The new invisible flag.
124 Set the hidden flag. @param hidden The new hidden flag.
125 Set the printed flag. @param printed The new printed flag.
126 Set the noZoom flag. @param noZoom The new noZoom flag.
127 Set the noRotate flag. @param noRotate The new noRotate flag.
128 Set the noView flag. @param noView The new noView flag.
129 Set the readOnly flag. @param readOnly The new readOnly flag.
130 Set the locked flag. @param locked The new locked flag.
131 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
132 Set the LockedContents flag. @param lockedContents The new LockedContents flag.
133 Set the invisible flag. @param invisible The new invisible flag.
134 Set the hidden flag. @param hidden The new hidden flag.
135 Set the printed flag. @param printed The new printed flag.
136 Set the noZoom flag. @param noZoom The new noZoom flag.
137 Set the noRotate flag. @param noRotate The new noRotate flag.
138 Set the noView flag. @param noView The new noView flag.
139 Set the readOnly flag. @param readOnly The new readOnly flag.
140 Set the locked flag. @param locked The new locked flag.
141 Set the toggleNoView flag. @param toggleNoView The new toggleNoView flag.
142 Set the LockedContents flag. If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size. @param lockedContents The new LockedContents flag value. @see <a href="https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=393">PDF 32000-1:2008 12.5.3, Table 165</a> @see #isLockedContents() @see #FLAG_LOCKED_CONTENTS @since PDF 1.7
143 set true if the filter shall be required. @param flag if true, the specified Filter shall be used when signing.
144 set true if the subfilter shall be required. @param flag if true, the first supported SubFilter in the array shall be used when signing.
145 set true if the DigestMethod shall be required. @param flag if true, one digest from the array shall be used.
146 set true if the V entry shall be required. @param flag if true, the V entry shall be used.
147 set true if the Reason shall be required. @param flag if true, the Reason entry shall be used.
148 set true if the LegalAttestation shall be required. @param flag if true, the LegalAttestation entry shall be used.
149 set true if the AddRevInfo shall be required. @param flag if true, the AddRevInfo shall be used.
150 set true if subject shall be required as a constraint on signature. @param flag if true, the specified Subject shall be enforced as a constraint.
151 set true if Issuer shall be required as a constraint on signature. @param flag if true, the specified Issuer shall be enforced as a constraint.
152 set true if OID shall be required as a constraint on signature. @param flag if true, the specified OID shall be enforced as a constraint.
153 set true if subject DN shall be required as a constraint on signature. @param flag if true, the specified Subject DN shall be enforced as a constraint.
154 set true if KeyUsage shall be required as a constraint on signature. @param flag if true, the specified KeyUsage shall be enforced as a constraint.
155 set true if URL shall be required as a constraint on signature. @param flag if true, the specified URL shall be enforced as a constraint.
156 Set the italic property of the text. @param italic The new italic flag.
157 Set the bold property of the text. @param bold The new bold flag.
158 Set the SignaturesExist bit. @param signaturesExist The value for SignaturesExist.
159 Set the AppendOnly bit. @param appendOnly The value for AppendOnly.
160 Set the Sort bit. @see #isSort() @param sort The value for Sort.
161 Set the MultiSelect bit. @param multiSelect The value for MultiSelect.
162 Set the DoNotSpellCheck bit. @param doNotSpellCheck The value for DoNotSpellCheck.
163 Set the CommitOnSelChange bit. @param commitOnSelChange The value for CommitOnSelChange.
164 Set the Combo bit. @param combo The value for Combo.
165 Set the Edit bit. @param edit The value for Edit.
166 sets the field to be read-only. @param readonly The new flag for readonly.
167 sets the flag whether the field is to be required to have a value at the time it is exported by a submit-form action. @param required The new flag for required.
168 sets the field to be not exported. @param noExport The new flag for noExport.
169 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
170 @see PDField#PDField(PDAcroForm) @param acroForm The acroform.
171 From the PDF Spec <br> If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons). @param radiosInUnison The new flag for radiosInUnison.
172 Set the multiline bit. @param multiline The value for the multiline.
173 Set the password bit. @param password The value for the password.
174 Set the file select bit. @param fileSelect The value for the fileSelect.
175 Set the doNotSpellCheck bit. @param doNotSpellCheck The value for the doNotSpellCheck.
176 Set the doNotScroll bit. @param doNotScroll The value for the doNotScroll.
177 Set the comb bit. @param comb The value for the comb.
178 Set the richText bit. @param richText The value for the richText.
179 {@inheritDoc}
180 Check if all entries of the pages dictionary are present. Those which can't be dereferenced are removed. @param root the root dictionary of the pdf @throws java.io.IOException if the page tree root is null
181 Returns all pages in the document, as a page tree. @return PDPageTree providing all pages of the document
182 Constructor for reading. @param root A page tree root.
183 Removes the given page from the page tree. @param page The page to remove.
184 Insert a page before another page within a page tree. @param newPage the page to be inserted. @param nextPage the page that is to be after the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
185 Insert a page after another page within a page tree. @param newPage the page to be inserted. @param prevPage the page that is to be before the new page. @throws IllegalArgumentException if one attempts to insert a page that isn't part of a page tree.
186 Increments th revision number.
187 Creates a new CCITT group 4 (T6) compressed image XObject from a b/w BufferedImage. This compression technique usually results in smaller images than those produced by {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) }. @param document the document to create the image as part of. @param image the image. @return a new image XObject. @throws IOException if there is an error creating the image. @throws IllegalArgumentException if the BufferedImage is not a b/w image.
188 Creates a new CCITT Fax compressed image XObject from a TIFF file. @param document the document to create the image as part of. @param reader the random access TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject, or null if no such page @throws IOException if there is an error reading the TIFF data.
189 Set the number of bits per component. @param bitsPerComponent the number of bits per component
190 Set the number of bits per component. @param bitsPerComponent the number of bits per component
191 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
192 Set the number of bits per coordinate. @param bitsPerCoordinate the number of bits per coordinate
193 Sets a float number. @param name the attribute name @param value the float number
194 This will set the intensity of the applied effect. @param i the intensity of the effect values 0 to 2
195 This will set the conversion factor. @param conversionFactor the conversion factor
196 Brute force search for all objects streams of a pdf. @param xrefTable the cross reference table of the document @throws IOException if something went wrong
197 Parses an xref object stream starting with indirect object id. @return value of PREV item in dictionary or <code>-1</code> if no such item exists
198 Update the Pg and Obj references to the new (merged) page.
199 This will parse a directory object from the stream. @return The parsed object. @throws IOException If there is an error during parsing.
200 This will parse the stream and populate the PDDocument object. This will close the keystore stream when it is done parsing. Lenient mode is active by default. @return the populated PDDocument @throws InvalidPasswordException If the password is incorrect. @throws IOException If there is an error reading from the stream or corrupt data is found.
201 Processes a transparency group stream. @param group transparency group to be processed @throws IOException if the transparency group cannot be processed
202 Processes a Type 3 character stream. @param charProc Type 3 character procedure @param textRenderingMatrix the Text Rendering Matrix @throws IOException if there is an error reading or parsing the character content stream.
203 Process the given annotation with the specified appearance stream. @param annotation The annotation containing the appearance stream to process. @param appearance The appearance stream to process. @throws IOException If there is an error reading or parsing the appearance content stream.
204 Process the given tiling pattern. Allows the pattern matrix to be overridden for custom rendering. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @param patternMatrix the pattern matrix, may be overridden for custom rendering. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
205 Process a content stream. @param contentStream the content stream @throws IOException if there is an exception while processing the stream
206 This will write the pdf document. @throws IOException If an error occurs while generating the data. @param doc The document to write.
207 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
208 Returns the PDF specification version this document conforms to. @return the PDF version (e.g. 1.4f)
209 Returns the page at the given index. @param index zero-based index @return the page at the given index @throws IllegalStateException if the requested index isn't found or doesn't point to a valid page dictionary @throws IndexOutOfBoundsException if the requested index is higher than the page count
210 Removes the page with the given index from the page tree. @param index zero-based page index
211 Returns the index of the given page, or -1 if it does not exist. @param page The page to search for. @return the zero-based index of the given page, or -1 if the page is not found.
212 This will get the file specification for this stream. This is only required for external files. @return The file specification. @throws IOException If there is an error creating the file spec.
213 The source file or target file: the PDF document file that this FDF file was exported from or is intended to be imported into. @return The F entry of the FDF dictionary. @throws IOException If there is an error creating the file spec.
214 This will get the list of embedded FDF entries, or null if the entry is null. This will return a list of PDFileSpecification objects. @return A list of embedded FDF files. @throws IOException If there is an error creating the file spec.
215 This will get the file specification of this reference. An optional parameter. @return The F entry for this dictionary. @throws IOException If there is an error creating the file spec.
216 This will get the file in which the destination is located. @return The F entry of the specific embedded go-to action dictionary. @throws IOException If there is an error creating the file spec.
217 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
218 This will get the application to be launched or the document to be opened or printed. It is required if none of the entries Win, Mac or Unix is present. If this entry is absent and the viewer application does not understand any of the alternative entries it should do nothing. @return The F entry of the specific launch action dictionary. @throws IOException If there is an error creating the file spec.
219 This will get the file in which the destination is located. @return The F entry of the specific remote go-to action dictionary. @throws IOException If there is an error creating the file spec.
220 This will get the file in which the destination is located. @return The F entry of the specific Submit-From action dictionary. @throws IOException If there is an error creating the file spec.
221 This will get the file in which the destination is located. @return The F entry of the specific thread action dictionary. @throws IOException If there is an error creating the file spec.
222 Return the attached file. @return The attached file. @throws IOException If there is an error creating the file spec.
223 Notifies the attribute object change listeners if the attribute is changed. @param oldBase old value @param newBase new value
224 Appends a structure element kid and sets the parent property (/P) to this. @param structureElement the structure element
225 Inserts a structure element kid before a reference kid. @param newKid the structure element @param refKid the reference kid
226 Removes a structure element kid and if successful also removes the parent property (/P). @param structureElement the structure element @return <code>true</code> if the kid was removed, <code>false</code> otherwise.
227 Default constructor.
228 Default constructor.
229 Default constructor.
230 Default constructor.
231 Constructor.
232 Constructor.
233 Constructor.
234 Constructor.
235 Constructor.
236 Constructor.
237 Creates a Circle or Square annotation of the specified sub type. @param subType the subtype the annotation represents.
238 Constructor.
239 Creates a TextMarkup annotation of the specified sub type. @param subType the subtype the annotation represents
240 Creates a Caret annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
241 Creates a Link annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
242 Creates a FreeText annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
243 Constructor. @param dict The annotations dictionary.
244 Creates a Line annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
245 Constructor. @param dict The annotations dictionary.
246 Constructor. @param dict The annotations dictionary.
247 Creates a Rubber Stamp annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
248 Creates a sound annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
249 Constructor. @param dict The annotations dictionary.
250 Creates a Text annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
251 Creates a TextMarkup annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
252 This will retrieve the popup annotation used for entering/editing the text for this annotation. @return the popup annotation.
253 Returns the widget annotations associated with this field. @return The list of widget annotations. Be aware that this list is <i>not</i> backed by the actual widget collection of the field, so adding or deleting has no effect on the PDF document until you call {@link #setWidgets(java.util.List) setWidgets()} with the modified list.
254 Sets the entry "V" to the given values. Requires {@link #isMultiSelect()} to be true. @param values the list of values @throws IOException if the appearance couldn't be generated.
255 This will write the compressed body of the document. @param document The document to write the body for. @throws IOException If there is an error writing the data.
256 Cloudy polygon implementation. @param vertices polygon vertices; first and last point must be equal @param isEllipse specifies if the polygon represents an ellipse
257 Returns true if the font is a symbolic (that is, it does not use the Adobe Standard Roman character set). @return true if the font is a symbolic
258 Test for dynamic XFA content. @param acroForm the AcroForm @return true if there is a dynamic XFA form.
259 Create the correct PD Model function based on the COS base function. @param function The COS function dictionary. @return The PDModel Function object, never null. @throws IOException If we are unable to create the PDFunction object.
260 Calculate the interpolation. @return interpolated result sample
261 Extract the matte color from a softmask. @param softMask @return the matte color. @throws IOException if the color conversion fails.
262 Get the XFA content as W3C document. @see #getBytes() @return the XFA content @throws IOException if something went wrong when reading the XFA content.
263 Tries to compress the image using a predictor. @return the image or null if it is not possible to encoded the image (e.g. not supported raster format etc.)
264 A convenience method that will create an XYZ destination using only the defaults. @param page The page to refer to.
265 Creates a new ICC color space using the PDF array. @param iccArray the ICC stream object. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
266 Sets the parent to the given node. @param parentNode the node to be set as parent
267 Set the children of this named tree. @param kids The children of this named tree. These have to be in sorted order. Because of that, it is usually easier to call {@link #setNames(Map)} with a map and pass a single element list here.
268 Set the names for this node. This method will set the appropriate upper and lower limits based on the keys in the map and take care of the ordering. @param names map of names to objects, or <code>null</code> for nothing.
269 Initializes the stream engine for the given page.
270 A rectangle, expressed in default user space units, defining the region to which the contents of the page should be clipped when output in a production environment. The default is the CropBox. @return The BleedBox attribute.
271 A rectangle, expressed in default user space units, defining the intended dimensions of the finished page after trimming. The default is the CropBox. @return The TrimBox attribute.
272 A rectangle, expressed in default user space units, defining the extent of the page's meaningful content (including potential white space) as intended by the page's creator The default is the CropBox. @return The ArtBox attribute.
273 This will find the CropBox with rotation applied, for this page by looking up the hierarchy until it finds them. @return The CropBox at this level in the hierarchy.
274 Create a new PDPage content stream. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @param resetContext Tell if the graphic context should be reset. This is only relevant when the appendContent parameter is set to {@link AppendMode#APPEND}. You should use this when appending to an existing stream, because the existing stream may have changed graphic properties (e.g. scaling, rotation). @throws IOException If there is an error writing to the page contents.
275 Adds the given font to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param font the font to add @return the name of the resource in the resources dictionary
276 Adds the given color space to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param colorSpace the color space to add @return the name of the resource in the resources dictionary
277 Adds the given extended graphics state to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param extGState the extended graphics state to add @return the name of the resource in the resources dictionary
278 Adds the given shading to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param shading the shading to add @return the name of the resource in the resources dictionary
279 Adds the given pattern to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param pattern the pattern to add @return the name of the resource in the resources dictionary
280 Adds the given property list to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param properties the property list to add @return the name of the resource in the resources dictionary
281 Adds the given image to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param image the image to add @return the name of the resource in the resources dictionary
282 Adds the given form to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param form the form to add @return the name of the resource in the resources dictionary
283 Adds the given XObject to the resources of the current page and returns the name for the new resources. Returns the existing resource name if the given item already exists. @param xobject the XObject to add @param prefix the prefix to be used when creating the resource name @return the name of the resource in the resources dictionary
284 This will export all FDF form data. @return An FDF document used to export the document. @throws IOException If there is an error when exporting the document.
285 Get the annotations down appearance. <p> This will get the annotations down appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the down appearance.
286 Get the annotations rollover appearance. <p> This will get the annotations rollover appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the rollover appearance.
287 Get the annotations normal appearance. <p> This will get the annotations normal appearance. If this is not existent an empty appearance entry will be created. @return the appearance entry representing the normal appearance.
288 Adds the given node to the bottom of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
289 Adds the given node to the top of the children list. @param newChild The node to add. @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
290 Creates an page label dictionary for a document using the information in the given COS dictionary. <p> Note that the page label dictionary won't be automatically added to the document; you will still need to do it manually (see {@link org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels)}. </p> @param document The document the page label dictionary is created for. @param dict an existing page label dictionary @see org.apache.pdfbox.pdmodel.PDDocumentCatalog#setPageLabels(PDPageLabels) @throws IOException If something goes wrong during the number tree conversion.
291 Default constructor.
292 Default constructor.
293 Default Constructor
294 Default constructor.
295 Constructor #1.
296 Default constructor.
297 Default constructor.
298 Default constructor.
299 Default constructor.
300 Default constructor.
301 Default constructor.
302 Default Constructor
303 Default constructor.
304 Default constructor.
305 The count parameter needs to be updated when you add, remove, open or close outline items. @param delta The amount to update by.
306 Set the selected option given its name, and try to update the visual appearance. @param value Name of option to select @throws IOException if the value could not be set @throws IllegalArgumentException if the value is not a valid option.
307 Indicates whether an optional content group is enabled. @param group the group object @return true if the group is enabled
308 Enables or disables all optional content groups with the given name. @param groupName the group name @param enable true to enable, false to disable @return true if at least one group with this name already had an on or off setting, false otherwise
309 Returns the page tree. @return the page tree
310 This will return the total page count of the PDF document. @return The total number of pages in the PDF document.
311 A convenience method that sets the flag bit. @param flag The flag value.
312 A convenience method that sets the flag bit. @param flag The flag value.
313 A convenience method that sets the flag bit. @param flag The flag value.
314 A convenience method that sets the flag bit. @param flag The flag value.
315 A convenience method that sets the flag bit. @param flag The flag value.
316 A convenience method that sets the flag bit. @param flag The flag value.
317 A convenience method that sets the flag bit. @param flag The flag value.
318 A convenience method that sets the flag bit. @param flag The flag value.
319 A convenience method that sets the flag bit. @param flag The flag value.
320 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
321 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @param number TIFF image number, starting from 0 @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
322 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting data from the element.
323 Rebuild the trailer dictionary if startxref can't be found. @param xrefTable the cross reference table of the pdf @return the rebuild trailer dictionary @throws IOException if something went wrong
324 Parse the object for the given object key. @param objKey key of object to be parsed @param requireExistingNotCompressedObj if <code>true</code> the object to be parsed must be defined in xref (comment: null objects may be missing from xref) and it must not be a compressed object within object stream (this is used to circumvent being stuck in a loop in a malicious PDF) @return the parsed object (which is also added to document object) @throws IOException If an IO error occurs.
325 Parses cross reference tables. @param document the corresponding COS document of the pdf. @param startXRefOffset start offset of the first table @return the trailer dictionary @throws IOException if something went wrong
326 This will parse a PDF array object. @return The parsed PDF array. @throws IOException If there is an error parsing the stream.
327 Parses a PDF. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
328 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
329 Shows a transparency group from the content stream. @param form transparency group (form) XObject @throws IOException if the transparency group cannot be processed
330 Processes a soft mask transparency group stream. @param group transparency group used for the soft mask @throws IOException if the transparency group cannot be processed
331 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
332 Shows the given annotation. @param annotation An annotation on the current page. @throws IOException If an error occurred reading the annotation
333 Process the given tiling pattern. @param tilingPattern the tiling pattern @param color color to use, if this is an uncoloured pattern, otherwise null. @param colorSpace color space to use, if this is an uncoloured pattern, otherwise null. @throws IOException if there is an error reading or parsing the tiling pattern content stream.
334 Shows a form from the content stream. @param form form XObject @throws IOException if the form cannot be processed
335 This will save the document to an output stream. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param output The stream to write to. It is recommended to wrap it in a {@link java.io.BufferedOutputStream}, unless it is already buffered. @throws IOException if the output could not be written
336 Save the document using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
337 Create a new document to write the split contents to. @return the newly created PDDocument. @throws IOException If there is an problem creating the new document.
338 Sets the PDF specification version for this document. @param newVersion the new PDF version (e.g. 1.4f)
339 Returns the page at the given 0-based index. <p> This method is too slow to get all the pages from a large PDF document (1000 pages or more). For such documents, use the iterator of {@link PDDocument#getPages()} instead. @param pageIndex the 0-based page index @return the page at the given index.
340 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
341 Prepare the document for encryption. @param doc The document that will be encrypted. @throws IOException If there is an error while encrypting.
342 Constructor.
343 Constructor.
344 Constructor.
345 Constructor.
346 Creates a circle annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
347 Creates a square annotation from a COSDictionary, expected to be a correct object definition. @param field the PDF object to represent as a field.
348 Constructor. @param dict The annotations dictionary.
349 Constructor. @param dict The annotations dictionary.
350 Constructor. @param dict The annotations dictionary.
351 Constructor. @param dict The annotations dictionary.
352 This will import a fdf field from a fdf document. @param fdfField The fdf field to import. @throws IOException If there is an error importing the data for this field.
353 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
354 Creates a cloudy border for a Polygon annotation. @param path polygon path @throws IOException If there is an error writing to the stream.
355 Cloudy rectangle implementation is based on converting the rectangle to a polygon.
356 Returns an iterator which walks all fields in the tree, in order.
357 {@inheritDoc}
358 Creates a new DeviceN color space from the given COS array. @param deviceN an array containing the color space information @param resources resources, can be null. @throws IOException if the colorspace could not be created
359 This will get the tint transform function. @return The tint transform function. @throws IOException if there is an error creating the function.
360 Creates a new Separation color space from a PDF color space array. @param separation an array containing all separation information. @param resources resources, can be null. @throws IOException if the color space or the function could not be created.
361 This will return the function used to convert the color values. @return the function @throws java.io.IOException if we were not able to create the function.
362 Provide the function(s) of the shading dictionary as array. @return an array containing the function(s). @throws IOException if we were unable to create a function.
363 Returns the transfer function. @return the transfer function @throws IOException If we are unable to create the PDFunction object.
364 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @param resources the resources, can be null. Allows to use its cache for the colorspace. @throws IOException if the colorspace could not be created
365 {@inheritDoc}
366 {@inheritDoc}
367 Creates a new lossless encoded image XObject from a BufferedImage. <p> <u>New for advanced users from 2.0.12 on:</u><br> If you created your image with a non standard ICC colorspace, it will be preserved. (If you load images in java using ImageIO then no need to read this segment) However a new colorspace will be created for each image. So if you create a PDF with several such images, consider replacing the colorspace with a common object to save space. This is done with {@link PDImageXObject#getColorSpace()} and {@link PDImageXObject#setColorSpace(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace) PDImageXObject.setColorSpace()} @param document the document where the image will be created @param image the BufferedImage to embed @return a new image XObject @throws IOException if something goes wrong
368 Creates a new ICC color space using the PDF array, optionally using a resource cache. @param iccArray the ICC stream object. @param resources resources to use as cache, or null for no caching. @return an ICC color space. @throws IOException if there is an error reading the ICC profile or if the parameter is invalid.
369 This will initialize and process the contents of the stream. @param page the page to process @throws IOException if there is an error accessing the stream
370 Process a child stream of the given page. Cannot be used with {@link #processPage(PDPage)}. @param contentStream the child content stream @param page the page to be used for processing @throws IOException if there is an exception while processing the stream
371 Create a new PDPage content stream. This constructor overwrites all existing content streams of this page. @param document The document the page is part of. @param sourcePage The page to write the contents to. @throws IOException If there is an error writing to the page contents.
372 Create a new PDPage content stream. If the appendContent parameter is set to {@link AppendMode#APPEND}, you may want to use {@link #PDPageContentStream(PDDocument, PDPage, PDPageContentStream.AppendMode, boolean, boolean)} instead, with the fifth parameter set to true. @param document The document the page is part of. @param sourcePage The page to write the contents to. @param appendContent Indicates whether content will be overwritten, appended or prepended. @param compress Tell if the content stream should compress the page contents. @throws IOException If there is an error writing to the page contents.
373 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
374 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
375 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
376 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
377 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
378 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
379 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
380 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
381 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. @param compress whether the content stream is to be compressed. Set this to true when creating long content streams. @return the appearance entry representing the normal appearance. @throws IOException
382 Returns the page labels descriptor of the document. @return the page labels descriptor of the document. @throws IOException If there is a problem retrieving the page labels.
383 Constructor. @param js Some javascript code.
384 Indicates whether <em>at least one</em> optional content group with this name is enabled. There may be disabled optional content groups with this name even if this function returns true. @param groupName the group name @return true if at least one group is enabled
385 Indicates whether an optional content group is enabled. @param group the group @return true if the group is enabled
386 Replace the page destinations, if the source and destination pages are in the target document. This must be called after all pages (and its annotations) are processed. @param destinationDocument
387 This will add a page to the document. This is a convenience method, that will add the page to the root of the hierarchy and set the parent of the page to the root. @param page The page to add to the document.
388 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param page The page to remove from the document.
389 Remove the page from the document. Do not use this method if other pages link to this one or if your document has a structure tree for accessibility unless you are able to fix these as well. In such cases it is better to use the splitter() class which will do these fixes. @param pageNumber 0 based index to page number.
390 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left). @param renderer the document renderer. Useful if {@link PDFRenderer} has been subclassed.
391 Creates a new PDFRenderer. @param document the document to render
392 Creates a new instance of PageExtractor @param sourceDocument The document to split.
393 Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values. The returned map will contain at most as much entries as the document has pages. <p> <strong>NOTE:</strong> If the document contains duplicate page labels, the returned map will contain <em>less</em> entries than the document has pages. The page index returned in this case is the <em>highest</em> index among all pages sharing the same label. </p> @return a mapping from labels to 0-based page indices.
394 Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array. The array will have exactly as much entries as the document has pages. @return an array mapping from 0-based page indices to labels.
395 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero, and optionally be centered. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI @param center true if the content is to be centered on the page (otherwise top-left).
396 Returns a PDFontDescriptor for the given PFB. @throws IOException if the font bounding box isn't available
397 Returns a PDFontDescriptor for the given AFM. Used only for Standard 14 fonts. @param metrics AFM
398 Creates a new font descriptor dictionary for the given TTF.
399 Creates a new CCITT Fax compressed image XObject from a specific image of a TIFF file stored in a byte array. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(PDDocument, BufferedImage) } or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param byteArray the TIFF file in a byte array which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
400 Creates a new CCITT Fax compressed image XObject from the first image of a TIFF file. Only single-strip CCITT T4 or T6 compressed TIFF files are supported. If you're not sure what TIFF files you have, use {@link LosslessFactory#createFromImage(org.apache.pdfbox.pdmodel.PDDocument, java.awt.image.BufferedImage)} or {@link CCITTFactory#createFromImage(PDDocument, BufferedImage) } instead. @param document the document to create the image as part of. @param file the TIFF file which contains a suitable CCITT compressed image @return a new Image XObject @throws IOException if there is an error reading the TIFF data.
401 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
402 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
403 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
404 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
405 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
406 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
407 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
408 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
409 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
410 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
411 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
412 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
413 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
414 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
415 Read the trailer information and provide a COSDictionary containing the trailer information. @return a COSDictionary containing the trailer information @throws IOException if something went wrong
416 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
417 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws IOException in case of a file reading or parsing error
418 Parses a PDF. Unrestricted main memory will be used for buffering PDF new streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
419 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
420 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
421 Parses a PDF. Unrestricted main memory will be used for buffering new/altered PDF streams. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException In case of a reading or parsing error.
422 Parses a PDF. @param randomAccessRead random access read representing the pdf to be loaded. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
423 Reads the visual signature from the given file. @param file the file containing the visual signature @throws IOException when something went wrong during parsing
424 Reads the visual signature from the given input stream. @param is the input stream containing the visual signature @throws IOException when something went wrong during parsing
425 Called when a glyph is to be processed. This method is intended for overriding in subclasses, the default implementation does nothing. @param textRenderingMatrix the current text rendering matrix, T<sub>rm</sub> @param font the current font @param code internal PDF character code for the glyph @param displacement the displacement (i.e. advance) of the glyph in text space @throws IOException if the glyph cannot be processed
426 Build a PDF with a visible signature step by step, and return it as a stream. @param properties properties to be used for the creation @return InputStream stream containing the pdf holding the visible signature @throws IOException if the PDF could not be created
427 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param file The file to save as. @throws IOException if the output could not be written
428 Save the document to a file using the given compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @param compressParameters The parameters for the document's compression. @throws IOException if the output could not be written
429 Helper method for creating new documents at the appropriate pages. @throws IOException If there is an error creating the new document.
430 This will write the header to the PDF document. @param doc The document to get the data from. @throws IOException If there is an error writing to the stream.
431 Sets the optional content properties dictionary. The document version is incremented to 1.5 if lower. @param ocProperties the optional properties dictionary
432 Create a LayoutPage object from the first page of the given document. @param doc @return @throws IOException
433 Each page of document can be different sizes. This method calculates the page size based on the page media box. @param document @param page The 1-based page number for which the page size should be calculated. @throws IllegalArgumentException if the page argument is lower than 0.
434 This method will attempt to find the page in this PDF document that this outline points to. If the outline does not point to anything then this method will return null. If the outline is an action that is not a GoTo action then this method will also return null. @param doc The document to get the page from. @return The page that this outline will go to when activated or null if it does not point to anything. @throws IOException If there is an error when trying to find the page.
435 {@inheritDoc} Returns the actual physical size of the pages in the PDF file. May not fit the local printer.
436 Returns the page number for this destination, regardless of whether this is a page number or a reference to a page. @see org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem @return the 0-based page number, or -1 if the destination type is unknown.
437 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
438 Prepare document for encryption. @param document The document to encrypt. @throws IOException If there is an error accessing data.
439 Create the correct annotation from the base COS object. @param base The COS object that is the annotation. @return The correctly typed annotation object, never null. @throws IOException If the annotation type is unknown.
440 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
441 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
442 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
443 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
444 Draw an inline image at the x,y coordinates and a certain width and height. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @param width The width of the inline image to draw. @param height The height of the inline image to draw. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
445 Creates a cloudy border for a rectangular annotation. The rectangle is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. <p> This can be used for Square and FreeText annotations. However, this does not produce the text and the callout line for FreeTexts. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
446 Cloudy ellipse implementation.
447 Retrieve all signature fields from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
448 Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields. @throws IOException if the appearance streams could not be refreshed
449 Returns an iterator which walks all fields in the field tree, in order. @return an iterator which walks all fields in the field tree
450 This will tell this form to cache the fields into a Map structure for fast access via the getField method. The default is false. You would want this to be false if you were changing the COSDictionary behind the scenes, otherwise setting this to true is acceptable. @param cache A boolean telling if we should cache the fields.
451 This will get a field by name, possibly using the cache if setCache is true. @param fullyQualifiedName The name of the field to get. @return The field with that name of null if one was not found.
452 Convert the input values using the functions of the shading dictionary. @param input the input values @return the output values @throws IOException thrown if something went wrong
453 Creates a new indexed color space from the given PDF array. @param indexedArray the array containing the indexed parameters @throws IOException if the colorspace could not be created
454 {@inheritDoc} The returned images are cached via a SoftReference.
455 Creates a color space given a name or array. Abbreviated device color names are not supported here, please replace them first. This method is for PDFBox internal use only, others should use {@link #create(COSBase, PDResources)}. @param colorSpace the color space COS object @param resources the current resources. @param wasDefault if current color space was used by a default color space. @return a new color space. @throws MissingResourceException if the color space is missing in the resources dictionary @throws IOException if the color space is unknown or cannot be created.
456 Build the base image object from the IDATs and profile information
457 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
458 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
459 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
460 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
461 Set the font and font size to draw text with. @param font The font to use. @param fontSize The font size to draw the text. @throws IOException If there is an error writing the font information.
462 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
463 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
464 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
465 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
466 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
467 Set an extended graphics state. @param state The extended graphics state to be added to the content stream @throws IOException If the content stream could not be written.
468 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
469 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
470 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
471 Fills the clipping area with the given shading. @param shading Shading resource @throws IOException If the content stream could not be written @throws IllegalStateException If the method was called within a text block.
472 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
473 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
474 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
475 Begin a marked content sequence with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
476 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
477 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
478 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
479 Set a marked content point with a reference to an entry in the page resources' Properties dictionary. @param tag the tag to be added to the content stream @param propertyList property list to be added to the content stream @throws IOException If the content stream could not be written
480 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
481 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
482 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
483 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
484 Draw an image at the x,y coordinates, with the given size. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @param width The width to draw the image. @param height The height to draw the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
485 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
486 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
487 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
488 Draw an image at the origin with the given transformation matrix. @param image The image to draw. @param matrix The transformation matrix to apply to the image. @throws IOException If there is an error writing to the stream. @throws IllegalStateException If the method was called within a text block.
489 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
490 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
491 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
492 Draws the given Form XObject at the current location. @param form Form XObject @throws IOException if the content stream could not be written @throws IllegalStateException If the method was called within a text block.
493 Get the annotations normal appearance content stream. <p> This will get the annotations normal appearance content stream, to 'draw' to. It will be uncompressed. @return the appearance entry representing the normal appearance. @throws IOException
494 This will set this node to be open when it is shown in the viewer. By default, when a new node is created it will be closed. This will do nothing if the node is already open.
495 Close this node.
496 This will import and copy the contents from another location. Currently the content stream is stored in a scratch file. The scratch file is associated with the document. If you are adding a page to this document from another document and want to copy the contents to this document's scratch file then use this method otherwise just use the {@link #addPage addPage()} method. <p> Unlike {@link #addPage addPage()}, this method creates a new PDPage object. If your page has annotations, and if these link to pages not in the target document, then the target document might become huge. What you need to do is to delete page references of such annotations. See <a href="http://stackoverflow.com/a/35477351/535646">here</a> for how to do this. <p> Inherited (global) resources are ignored because these can contain resources not needed for this page which could bloat your document, see <a href="https://issues.apache.org/jira/browse/PDFBOX-28">PDFBOX-28</a> and related issues. If you need them, call <code>importedPage.setResources(page.getResources());</code> <p> This method should only be used to import a page from a loaded document, not from a generated document because these can contain unfinished parts, e.g. font subsetting information. @param page The page to import. @return The page that was imported. @throws IOException If there is an error copying the page.
497 Creates a PDDocument and adds the page parameter to it and keeps this as a template in the PDF template Structure. @param page the page to be added @throws IOException if the document could not be created
498 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used. @param center true if the content is to be centered on the page (otherwise top-left).
499 Creates a new PDFPageable. @param document the document to print
500 Creates a new PDFPageable with the given page orientation. @param document the document to print @param orientation page orientation policy
501 Creates a new PDFPageable with the given page orientation and with optional page borders shown. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed
502 Creates a new PDFPageable with the given page orientation and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer if non-zero. @param document the document to print @param orientation page orientation policy @param showPageBorder true if page borders are to be printed @param dpi if non-zero then the image will be rasterized at the given DPI
503 This will load a PFB to be embedded into a document. @param doc The PDF document that will hold the embedded font. @param dict The Font dictionary to write to. @param pfbStream The pfb input. @throws IOException If there is an error loading the data.
504 Constructor for Standard 14.
505 Creates a new TrueType font for embedding.
506 Create a PDImageXObject from an image file. The file format is determined by the file name suffix. The following suffixes are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
507 Create a PDImageXObject from an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromStream}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param file the image file. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
508 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
509 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
510 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
511 Constructor. @param element An XFDF element. @throws IOException If there is an error extracting information from the element.
512 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException In case of a reading or parsing error.
513 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
514 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
515 Parses a PDF. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param streamCacheCreateFunction a function to create an instance of a stream cache to be used for buffering new/altered PDF streams @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error
516 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @param password password to be used for decryption @param keyStore key store to be used for decryption when using public key security @param alias alias to be used for decryption when using public key security @return loaded document @throws IOException in case of a file reading or parsing error
517 Reads the visual signature from the given visual signature properties @param visSignatureProperties the <code>PDVisibleSigProperties</code> object containing the visual signature @throws IOException when something went wrong during parsing
518 start building of visible signature @throws IOException if the output could not be written
519 Save the document to a file using default compression. <p> Don't use the input file as target as this will produce a corrupted file. <p> If encryption has been activated (with {@link #protect(org.apache.pdfbox.pdmodel.encryption.ProtectionPolicy) protect(ProtectionPolicy)}), do not use the document after saving because the contents are now encrypted. The same applies if your file was created from parts of another file and that one is to be used after saving. @param fileName The file to save as. @throws IOException if the output could not be written
520 Imports OCProperties from source document to target document so hidden layers can still be hidden after import. @param srcDoc The source PDF document that contains the /OCProperties to be copied. @throws IOException If an I/O error occurs.
521 Rebuild a font subset.
522 Constructor. @param document Already created PDDocument of your PDF document. @param imageStream Image as a stream. @param page The 1-based page number for which the page size should be calculated. @throws IOException If we can't read, flush, or can't close stream.
523 Constructor. @param document Already created PDDocument of your PDF document. @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated.
524 This will write this element as an XML document. @param output The stream to write the xml to. @throws IOException If there is an error writing the XML.
525 This will return a list of the annotations for this page. @param annotationFilter the annotation filter provided allowing to filter out specific annotations @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
526 Gets a higher-level object for the referenced object. Currently this method may return a {@link PDAnnotation}, a {@link PDXObject} or <code>null</code>. @return a higher-level object for the referenced object
527 This will retrieve the annotation to which this one is "In Reply To" the actual relationship is specified by the RT entry. @return the other annotation or null if there is none. @throws IOException if there is an error creating the other annotation.
528 This will retrieve the markup annotation which this popup relates to. @return The parent markup annotation.
529 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
530 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
531 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
532 Draw an inline image at the x,y coordinates, with the default size of the image. @param inlineImage The inline image to draw. @param x The x-coordinate to draw the inline image. @param y The y-coordinate to draw the inline image. @throws IOException If there is an error writing to the stream.
533 Creates a cloudy border for a Circle annotation. The ellipse is specified by the <code>RD</code> entry and the <code>Rect</code> entry that was passed in to the constructor. @param rd entry <code>RD</code>, or null if the entry does not exist @throws IOException If there is an error writing to the stream.
534 Retrieve all signature dictionaries from the document. @return a <code>List</code> of <code>PDSignatureField</code>s
535 This method will import an entire FDF document into the PDF document that this acroform is part of. @param fdf The FDF document to import. @throws IOException If there is an error doing the import.
536 Convert the input value using the functions of the shading dictionary. @param inputValue the input value @return the output values @throws IOException thrown if something went wrong
537 Convert color to RGB color value, using function if required, then convert from the shading color space to an RGB value, which is encoded into an integer.
538 Returns the non-stroking AWT Paint. You may need to call this if you override {@link #showGlyph(Matrix, PDFont, int, Vector) showGlyph()}. See <a href="https://issues.apache.org/jira/browse/PDFBOX-5093">PDFBOX-5093</a> for more. @return The non-stroking AWT Paint. @throws IOException if the non-stroking AWT Paint could not be created
539 Returns the color space resource with the given name, or null if none exists. This method is for PDFBox internal use only, others should use {@link #getColorSpace(COSName)}. @param name Name of the color space resource. @param wasDefault if current color space was used by a default color space. This parameter is to @return a new color space. @throws IOException if something went wrong.
540 This will initialize and process the contents of the stream. @param page the page to process @throws java.io.IOException if there is an error accessing the stream.
541 This will process the contents of a page. @param page The page to process. @throws IOException If there is an error processing the page.
542 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
543 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
544 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
545 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
546 Sets the stroking color and, if necessary, the stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
547 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
548 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
549 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
550 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
551 Sets the non-stroking color and, if necessary, the non-stroking color space. @param color Color in a specific color space. @throws IOException If an IO error occurs while writing to the stream.
552 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
553 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
554 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
555 Draw an image at the x,y coordinates, with the default size of the image. @param image The image to draw. @param x The x-coordinate to draw the image. @param y The y-coordinate to draw the image. @throws IOException If there is an error writing to the stream.
556 Places the given form over the existing content of the indicated page (like an overlay). The form is enveloped in a marked content section to indicate that it's part of an optional content group (OCG), here used as a layer. This optional group is returned and can be enabled and disabled through methods on {@link PDOptionalContentProperties}. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before calling this method to make sure that the graphics state is reset. @param targetPage the target page @param form the form to place @param transform the transformation matrix that controls the placement of your form. You'll need this if your page has a crop box different than the media box, or if these have negative coordinates, or if you want to scale or adjust your form. @param layerName the name for the layer/OCG to produce @return the optional content group that was generated for the form usage @throws IOException if an I/O error occurs
557 {@inheritDoc}
558 For advanced users, to extract the transparency group into a separate graphics device. @param form the transparency group to be extracted @param graphics the target graphics device @throws IOException if the transparency group could not be extracted
559 {@inheritDoc}
560 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. The image will be rasterized at the given DPI before being sent to the printer. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed @param dpi if positive non-zero then the image will be rasterized at the given DPI. If set to the special value RASTERIZE_DPI_AUTO, the dpi of the printer will be used.
561 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @param encoding encoding to be used for the font @throws IOException if the font could not be read
562 Constructor for Standard 14.
563 Constructor. @param fontDictionary Font dictionary.
564 Creates a new TrueType font embedder for the given TTF as a PDCIDFontType2. @param document parent document @param dict font dictionary @param ttf True Type Font @param parent parent Type 0 font @throws IOException if the TTF could not be read
565 Creates a new TrueType font embedder for the given TTF as a PDTrueTypeFont. @param document The parent document @param dict Font dictionary @param ttf TrueType font @param encoding The PostScript encoding vector to be used for embedding. @throws IOException if the TTF could not be read
566 Create a PDImageXObject from an image file, see {@link #createFromFileByExtension(File, PDDocument)} for more details. @param imagePath the image file path. @param doc the document that shall use this PDImageXObject. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject, or if the image type is not supported.
567 This will create an FDF dictionary from an XFDF XML document. @param fdfXML The XML document that contains the XFDF data.
568 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param input byte array that contains the document. {@link org.apache.pdfbox.io.RandomAccessReadBuffer} is used to read the data. @return loaded document @throws InvalidPasswordException If the PDF required a non-empty password. @throws IOException In case of a reading or parsing error.
569 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @param password password to be used for decryption @return loaded document @throws InvalidPasswordException If the password is incorrect. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File, String)} instead
570 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded. {@link org.apache.pdfbox.io.RandomAccessReadBufferedFile} is used to read the file. @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error
571 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param page the page in the source PDF document to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
572 Constructor. @param documentSource Original PDF document as RandomAccessRead @param imageStream Image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
573 Constructor. @param documentSource Original PDF document as RandomAccessRead @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
574 This will save the document to an output stream and close the stream. @param output The stream to write to. @throws IOException If there is an error writing the document.
575 This will return a list of the annotations for this page. @return List of the PDAnnotation objects, never null. The returned list is backed by the annotations COSArray, so any adding or deleting in this list will change the document too. @throws IOException If there is an error while creating the annotation list.
576 This will return the last signature from the field tree. Note that this may not be the last in time when empty signature fields are created first but signed after other fields. @return the last signature as <code>PDSignatureField</code>.
577 Save PDF incrementally without closing for external signature creation scenario. The general sequence is: <pre> PDDocument pdDocument = ...; OutputStream outputStream = ...; SignatureOptions signatureOptions = ...; // options to specify fine tuned signature options or null for defaults PDSignature pdSignature = ...; // add signature parameters to be used when creating signature dictionary pdDocument.addSignature(pdSignature, signatureOptions); // prepare PDF for signing and obtain helper class to be used ExternalSigningSupport externalSigningSupport = pdDocument.saveIncrementalForExternalSigning(outputStream); // get data to be signed InputStream dataToBeSigned = externalSigningSupport.getContent(); // invoke signature service byte[] signature = sign(dataToBeSigned); // set resulted CMS signature externalSigningSupport.setSignature(signature); // last step is to close the document pdDocument.close(); </pre> <p> Note that after calling this method, only {@code close()} method may invoked for {@code PDDocument} instance and only AFTER {@link ExternalSigningSupport} instance is used. </p> <p> Don't use the input file as target as this will produce a corrupted file. @param output stream to write the final PDF. It will be closed when the document is closed. It <i><b>must never</b></i> point to the source file or that one will be harmed! @return instance to be used for external signing and setting CMS signature @throws IOException if the output could not be written @throws IllegalStateException if the document was not loaded from a file or a stream or signature options were not set.
578 Renders a glyph. @param path the GeneralPath for the glyph @param font the font @param code character code @param displacement the glyph's displacement (advance) @param at the transformation @throws IOException if something went wrong
579 Build a indexed image
580 Returns the color space resource with the given name, or null if none exists. @param name Name of the color space resource. @return a new color space. @throws IOException if something went wrong.
581 This will process all of the pages and the text that is in them. @param pages The pages object in the document. @throws IOException If there is an error parsing the text.
582 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
583 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
584 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
585 Set the stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
586 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
587 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
588 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
589 Set the non-stroking color using an AWT color. Conversion uses the default sRGB color space. @param color The color to set. @throws IOException If an IO error occurs while writing to the stream.
590 Initialize the content of the appearance stream. Get settings like border style, border width and colors to be used to draw a rectangle and background color around the widget @param widget the field widget @param appearanceCharacteristics the appearance characteristics dictionary from the widget or null @param appearanceStream the appearance stream to be used @throws IOException in case we can't write to the appearance stream
591 Write font name, font size and color from the /DA string to the given content stream. @param contents The content stream. @param zeroFontSize The calculated font size to use if the /DA string has a size 0 (autosize). Otherwise the size from the /DA string is used.
592 Creates a new PDFPrintable with the given page scaling and with optional page borders shown. @param document the document to print @param scaling page scaling policy @param showPageBorder true if page borders are to be printed
593 Creates a new Type 1 font for embedding. @param doc PDF document to write to @param pfbIn PFB file stream @throws IOException if the font could not be read
594 Creates a Type 1 standard 14 font for embedding. @param baseFont One of the standard 14 PostScript names, e.g. {@link FontName#HELVETICA_BOLD}.
595 Constructor. @param fontDictionary Font dictionary.
596 Constructor for reading a Type0 font from a PDF file. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the descendant font is missing.
597 Private. Creates a new PDType0Font font for embedding. @param document @param ttf @param embedSubset @param closeTTF whether to close the ttf parameter after embedding. Must be true when the ttf parameter was created in the load() method, false when the ttf parameter was passed to the load() method. @param vertical whether to enable vertical substitutions. @throws IOException
598 Creates a new TrueType font for embedding.
599 This will create an FDF catalog from an XFDF XML document. @param element The XML document that contains the XFDF data.
600 Parses a PDF. Unrestricted main memory will be used for buffering PDF streams. @param file file to be loaded @return loaded document @throws InvalidPasswordException If the file required a non-empty password. @throws IOException in case of a file reading or parsing error @deprecated use {@link Loader#loadPDF(File)} instead
601 Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document. <p> You may want to call {@link #wrapInSaveRestore(PDPage) wrapInSaveRestore(PDPage)} before invoking the Form XObject to make sure that the graphics state is reset. @param sourceDoc the source PDF document that contains the page to be copied @param pageNumber the 0-based page number of the page to be copied @return a Form XObject containing the original page's content @throws IOException if an I/O error occurs
602 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
603 Update the StructParents and StructParent values in a PDPage. @param page the new page @param structParentOffset the offset which should be applied
604 Clone the structure tree from the source to the current destination document. This must be called after all pages are processed. @param destinationDocument @throws IOException
605 Clone all annotations because of changes possibly made, and because the structure tree is cloned. @param imported @throws IOException
606 This will add a signature to the document. If the 0-based page number in the options parameter is smaller than 0 or larger than max, the nearest valid page number will be used (i.e. 0 or max) and no exception will be thrown. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
607 Build a map of page => set of widgets to be flattened @param fields a list of fields to be flattened @param pages the page tree @return @throws IOException
608 Get the points from the triangles, calculate their color and add point-color mappings.
609 Fills and then strokes the path. @param windingRule The winding rule this path will use. @throws IOException If there is an IO error while filling the path.
610 Convert the image using the state. @param doc the document to put the image in @param state the parser state containing the PNG chunks. @return null or the converted image
611 RG Set the stroking colour space to DeviceRGB and set the colour to use for stroking operations. @param operator The operator that is being executed. @param arguments List @throws IOException If the color space cannot be read.
612 This will take a PDDocument and write the text of that document to the print writer. @param doc The document to get the data from. @param outputStream The location to put the text. @throws IOException If the doc is in an invalid state.
613 Generate and insert text content and clipping around it.
614 Draws the page to the requested context. @param g The graphics context to draw onto. @param pageSize The size of the page to draw. @throws IOException If there is an IO error while drawing the page.
615 Creates a new PDFPrintable with the given page scaling. @param document the document to print @param scaling page scaling policy
616 Provide standard 14 Helvetica font as default if there isn't any font available. @return the default font
617 Returns the mapped font for the specified Standard 14 font. The mapped font is cached. @param baseName name of the standard 14 font @return the mapped font
618 Creates a new TrueType font from a Font dictionary. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
619 Constructor. @param fontDictionary the corresponding dictionary @throws IOException it something went wrong
620 Creates a Type 1 font from a Font dictionary in a PDF. @param fontDictionary font dictionary. @throws IOException if there was an error initializing the font. @throws IllegalArgumentException if /FontFile3 was used.
621 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @param resourceCache Resource cache, can be null. @throws IOException if the font could not be created
622 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param randomAccessRead source of a TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @param vertical whether to enable vertical substitutions. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
623 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
624 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param ttf A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
625 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead. </p> @param doc The PDF document that will hold the embedded font. @param ttf A true type font @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
626 Loads a TTF to be embedded into a document as a simple font. <p> <b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead. </p> @param doc The PDF document that will hold the embedded font. @param randomAccessRead the source of the TTF. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
627 This will create an FDF document from an XFDF XML document. @param doc The XML document that contains the XFDF data. @throws IOException If there is an error reading from the dom.
628 Constructor. @param filename Path of the PDF file @param imageStream image as a stream @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
629 Constructor. @param filename Path of the PDF file @param image the image to be used for the visible signature @param page The 1-based page number for which the page size should be calculated. @throws IOException if the new instance of PDVisibleSignDesigner could not be created
630 This will save this document to the filesystem. @param fileName The file to save as. @throws IOException If there is an error saving the document.
631 Interface to start processing a new page. @param page The page that is about to get processed. @throws IOException If there is an error creating the new document.
632 Add parameters of signature to be created externally. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param options signature options @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
633 Add a signature to be created using the instance of given interface. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @param signatureInterface is an interface whose implementation provides signing capabilities. Can be null if external signing if used. @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
634 This will flatten the specified form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> @param fields a list of fields to be flattened @param refreshAppearances if set to true the appearances for the form field widgets will be updated @throws IOException if something went wrong flattening the fields
635 append all pages from source to destination. @param destination the document to receive the pages @param source the document originating the new pages @throws IOException If there is an error accessing data from either document.
636 Try to convert a PNG into a PDImageXObject. If for any reason the PNG can not be converted, null is returned. <p> This usually means the PNG structure is damaged (CRC error, etc.) or it uses some features which can not be mapped to PDF. @param doc the document to put the image in @param imageData the byte data of the PNG @return null or the PDImageXObject built from the png
637 This will return the text of a document. See writeText. <br> NOTE: The document must not be encrypted when coming into this method. <p>IMPORTANT: By default, text extraction is done in the same sequence as the text in the PDF page content stream. PDF is a graphic format, not a text format, and unlike HTML, it has no requirements that text one on page be rendered in a certain order. The order is the one that was determined by the software that created the PDF. To get text sorted from left to right and top to botton, use {@link #setSortByPosition(boolean)}. @param doc The document to get the text from. @return The text of the PDF document. @throws IOException if the doc state is invalid or it is encrypted.
638 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @param destination controlling visibility of optional content groups @return the rendered page image @throws IOException if the PDF cannot be read
639 Renders a given page to an AWT Graphics2D instance. <p> Known problems: <ul> <li>rendering of PDF files with transparencies is not supported on Ubuntu, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4581">PDFBOX-4581</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-6689349">JDK-6689349</a>. Rendering will not abort, but the pages will be rendered incorrectly.</li> <li>Clipping the Graphics2D will not work properly, see <a href="https://issues.apache.org/jira/browse/PDFBOX-4583">PDFBOX-4583</a>.</li> </ul> If you encounter these problems, then you should render into an image by using the {@link #renderImage(int) renderImage} methods. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @param destination controlling visibility of optional content groups @throws IOException if the PDF cannot be read
640 Creates a new PDFPrintable. @param document the document to print
641 Process text from the PDF Stream. You should override this method if you want to perform an action when encoded text is being processed. @param string the encoded text @throws IOException if there is an error processing the string
642 Returns the path for the character with the given name for the specified Standard 14 font. The mapped font is cached. The path may differ in different environments as it depends on the mapped font. @param baseName name of the standard 14 font @param glyphName name of glyph @return the mapped font @throws IOException if the data could not be read
643 Creates an MMType1Font from a Font dictionary in a PDF. @param fontDictionary font dictionary @throws IOException if the font could not be read
644 Constructor. @param fontDictionary The font dictionary according to the PDF specification. @throws IOException if the font could not be created
645 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
646 Loads a TTF to be embedded into a document as a Type 0 font. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @param embedSubset True if the font will be subset before embedding. Set this to false when creating a font for AcroForm. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
647 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param file A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font file.
648 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
649 Loads a TTF to be embedded into a document as a vertical Type 0 font. @param doc The PDF document that will hold the embedded font. @param input A TrueType font. @param embedSubset True if the font will be subset before embedding @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
650 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, File)} instead.</p> @param doc The PDF document that will hold the embedded font. @param file A TTF file. @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
651 Loads a TTF to be embedded into a document as a simple font. <p><b>Note:</b> Simple fonts only support 256 characters. For Unicode support, use {@link PDType0Font#load(PDDocument, InputStream)} instead.</p> @param doc The PDF document that will hold the embedded font. @param input A TTF file stream @param encoding The PostScript encoding vector to be used for embedding. @return a PDTrueTypeFont instance. @throws IOException If there is an error loading the data.
652 This will load a document from an input stream. The stream is loaded to the memory to establish random access to the data. @param input The stream that contains the document. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
653 This will add overlays to a document. @param specificPageOverlayMap Optional map of overlay files of which the first page will be used for specific pages of the input document. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong. @throws IllegalArgumentException if the input document is missing.
654 This will add overlays documents to a document. If you created the overlay documents with subsetted fonts, you need to save them first so that the subsetting gets done. @param specificPageOverlayDocumentMap Optional map of overlay documents for specific pages. The page numbers are 1-based. The map must be empty (but not null) if no specific mappings are used. @return The modified input PDF document, which has to be saved and closed by the caller. If the input document was passed by {@link #setInputPDF(PDDocument) setInputPDF(PDDocument)} then it is that object that is returned. @throws IOException if something went wrong
655 Interface method to handle the start of the page processing. @throws IOException If an IO error occurs.
656 Add parameters of signature to be created externally using default signature options. See {@link #saveIncrementalForExternalSigning(OutputStream)} method description on external signature creation scenario details. <p> Only one signature may be added in a document. To sign several times, load document, add signature, save incremental and close again. @param sigObject is the PDSignatureField model @throws IOException if there is an error creating required fields @throws IllegalStateException if one attempts to add several signature fields.
657 This will flatten all form fields. <p> Flattening a form field will take the current appearance and make that part of the pages content stream. All form fields and annotations associated are removed. </p> <p> Invisible and hidden fields will be skipped and will not become part of the page content stream </p> <p> The appearances for the form fields widgets will <strong>not</strong> be generated </p> @throws IOException if something went wrong flattening the fields
658 Merge the list of source documents, saving the result in the destination file. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
659 Create a PDImageXObject from an image byte array. This overloaded version allows providing a custom factory to handle specific image formats, such as BMP and GIF, or to act as a fallback strategy when the default converters (e.g., for PNG or TIFF) fail. @param document the document that shall use this PDImageXObject. @param byteArray bytes from an image file. @param name name of image file for exception messages, can be null. @param customFactory optional factory used to handle BMP, GIF, or fallback cases (e.g., for PNG or TIFF). If {@code null}, this method delegates to {@link #createFromByteArray(PDDocument, byte[], String)}. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
660 Returns the given page as an RGB or ARGB image at the given scale. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
661 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scaleX the scale to draw the page at for the x-axis, where 1 = 72 DPI @param scaleY the scale to draw the page at for the y-axis, where 1 = 72 DPI @throws IOException if the PDF cannot be read
662 Called when a string of text is to be shown. @param string the encoded text @throws IOException if there was an error showing the text
663 Called when a string of text with spacing adjustments is to be shown. @param array array of encoded text strings and adjustments @throws IOException if there was an error showing the text
664 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @param resourceCache resource cache, only useful for type 3 fonts, can be null @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
665 Loads a TTF to be embedded and subset into a document as a Type 0 font. If you are loading a font for AcroForm, then use the 3-parameter constructor instead. @param doc The PDF document that will hold the embedded font. @param input An input stream of a TrueType font. It will be closed before returning. @return A Type0 font with a CIDFontType2 descendant. @throws IOException If there is an error reading the font stream.
666 This will load a document from a file. @param filename The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
667 This will load a document from a file. @param file The name of the file to load. @return The document that was loaded. @throws IOException If there is an error reading from the stream.
668 This will take a document and split into several other documents. @param document The document to split. @return A list of all the split documents. These should all be saved before closing any documents, including the source document. Any further operations should be made after reloading them, to avoid problems due to resource sharing. For the same reason, they should not be saved with encryption. @throws IOException If there is an IOError
669 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @param compressParameters defines if compressed object streams are enabled @throws IOException If there is an error saving the document.
670 Create a PDImageXObject from bytes of an image file. The file format is determined by the file content. The following file types are supported: JPG, JPEG, TIF, TIFF, GIF, BMP and PNG. This is a convenience method that calls {@link JPEGFactory#createFromByteArray}, {@link CCITTFactory#createFromFile} or {@link ImageIO#read} combined with {@link LosslessFactory#createFromImage}. (The later can also be used to create a PDImageXObject from a BufferedImage). Starting with 2.0.18, this call will create an image directly from a PNG file without decoding it (when possible), which is faster. However the result size depends on the compression skill of the software that created the PNG file. If file size or bandwidth are important to you or to your clients, then create your PNG files with a tool that has implemented the <a href="https://blog.codinghorror.com/zopfli-optimization-literally-free-bandwidth/">Zopfli algorithm</a>, or use the two-step process mentioned above. @param byteArray bytes from an image file. @param document the document that shall use this PDImageXObject. @param name name of image file for exception messages, can be null. @return a PDImageXObject. @throws IOException if there is an error when reading the file or creating the PDImageXObject. @throws IllegalArgumentException if the image type is not supported.
671 Returns the given page as an RGB image at the given scale. A scale of 1 will render at 72 DPI. @param pageIndex the zero-based index of the page to be converted @param scale the scaling factor, where 1 = 72 DPI @return the rendered page image @throws IOException if the PDF cannot be read
672 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @return the rendered page image @throws IOException if the PDF cannot be read
673 Returns the given page as an RGB image at the given DPI. @param pageIndex the zero-based index of the page to be converted @param dpi the DPI (dots per inch) to render at @param imageType the type of image to return @return the rendered page image @throws IOException if the PDF cannot be read
674 Renders a given page to an AWT Graphics2D instance. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @param scale the scaling factor, where 1 = 72 DPI @throws IOException if the PDF cannot be read
675 Returns the font resource with the given name, or null if none exists. @param name Name of the font resource. @return the font with the given name or null @throws IOException if something went wrong.
676 Creates a new PDFont instance with the appropriate subclass. @param dictionary a font dictionary @return a PDFont instance, based on the SubType entry of the dictionary @throws IOException if something goes wrong
677 This will take a document and extract the desired pages into a new document. Both startPage and endPage are included in the extracted document. If the endPage is greater than the number of pages in the source document, it will go to the end of the document. If startPage is less than 1, it'll start with page 1. If startPage is greater than endPage or greater than the number of pages in the source document, a blank document will be returned. @return The extracted document @throws IOException If there is an IOError
678 Merge the list of source documents, saving the result in the destination file. The source list is not reset after merge. If you want to merge one document at a time, then it's better to use {@link #appendDocument(org.apache.pdfbox.pdmodel.PDDocument, org.apache.pdfbox.pdmodel.PDDocument)}. @param streamCacheCreateFunction a function to create an instance of a stream cache; in case of <code>null</code> unrestricted main memory is used @throws IOException If there is an error saving the document.
679 Returns the given page as an RGB image at 72 DPI @param pageIndex the zero-based index of the page to be converted. @return the rendered page image @throws IOException if the PDF cannot be read
680 Renders a given page to an AWT Graphics2D instance at 72 DPI. <p> Read {@link #renderPageToGraphics(int, java.awt.Graphics2D, float, float, org.apache.pdfbox.rendering.RenderDestination) renderPageToGraphics(int, Graphics2D, float, float, RenderDestination)} before using this. @param pageIndex the zero-based index of the page to be converted @param graphics the Graphics2D on which to draw the page @throws IOException if the PDF cannot be read
681 Process the set font and font size operator. @param operands the font name and size @throws IOException in case there are missing operators or the font is not within the resources
682 Copies any needed resources from the document’s DR dictionary into the stream’s Resources dictionary. Resources with the same name shall be left intact.
683 This will get the font for this font setting. @return The font for this setting of null if one was not found. @throws IOException If there is an error getting the font.
684 This is used to handle an operation. @param operator The operation to perform. @param operands The list of arguments. @throws IOException If there is an error processing the operation.
685 Constructs and sets new contents for given appearance stream.
686 This will implement the gs operator. @param gs The state to copy this dictionaries values into. @throws IOException If there is an error copying font information.
687 Processes the operators of the given content stream. @param content the content to parse. @throws IOException if there is an error reading or parsing the content stream.
688 Constructor for reading an existing DA string. @param defaultResources DR entry @param defaultAppearance DA entry @throws IOException If the DA could not be parsed
689 Get the default appearance. This is an inheritable attribute. The default appearance contains a set of default graphics and text operators to define the field’s text size and color. @return the DA element of the dictionary object
690 This is the public method for setting the appearance stream. @param apValue the String value which the appearance should represent @throws IOException If there is an error creating the stream.
691 Constructs a COSAppearance from the given field. @param field the field which you wish to control the appearance of @throws IOException
