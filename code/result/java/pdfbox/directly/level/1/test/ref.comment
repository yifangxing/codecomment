1 private constructor
2 Creates a new OperatorProcessor. @param context the processing context to be used
3 Constructor.
4 Creates a new {@link COSUpdateState} for the given {@link COSUpdateInfo}. @param updateInfo The {@link COSUpdateInfo}, that shall be managed by this {@link COSUpdateState}.
5 Constructs an empty DecodeOptions instance
6 Constructs an instance specifying the region of the image that should be decoded. The actual region will be clipped to the dimensions of the image. @param sourceRegion Region of the source image that should be decoded
7 Constructs an instance specifying the image should be decoded using subsampling. The subsampling will be the same for the X and Y axes. @param subsampling The number of rows and columns to advance in the source for each pixel in the decoded image.
8 Constructor.
9 Creates a new instance of PageExtractor @param sourceDocument The document to split. @param startPage The first page you want extracted (1-based, inclusive) @param endPage The last page you want extracted (1-based, inclusive)
10 Creates a crossreference stream entry of the given {@link XReferenceType}. @param type The {@link XReferenceType} of the crossreference stream entry.
11 This will create a new content stream writer. @param out The stream to write the data to.
12 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
13 Constructor. Internal PDFBox use only! If you need to get the document catalog, call {@link PDDocument#getDocumentCatalog()}. @param doc The document that this catalog is part of. @param rootDictionary The root dictionary that this object wraps.
14 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
15 Constructor. @param dict The dictionary of names and corresponding destinations.
16 Constructor. @param cat The document that this dictionary is part of. @param names The names dictionary.
17 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
18 Creates a new instance of PDPage for reading. @param pageDictionary A page dictionary in a PDF document.
19 Creates a new instance with a given COS dictionary. @param dictionary the dictionary
20 Constructor. @param dict The dictionary that holds the name information.
21 Creates a new page label range object from the given dictionary. @param dict the base dictionary for the new object.
22 Constructor assumes a starting index of 0. @param range The array that describes the range.
23 Constructor with an index into an array. Because some arrays specify multiple ranges ie [ 0,1, 0,2, 2,3 ] It is convenient for this class to take an index into an array. So if you want this range to represent 0,2 in the above example then you would say <code>new PDRange( array, 1 )</code>. @param range The array that describes the index @param index The range index into the array for the start of the range.
24 Creates a PDStream which wraps the given COSStream. @param str The stream parameter.
25 Constructor for an existing MarkInfo element. @param dic The existing dictionary.
26 Constructor for an existing marked content reference. @param dictionary the page dictionary
27 Constructor for an existing object reference. @param theDictionary The existing dictionary.
28 Constructor for an existing structure node. @param dictionary The existing dictionary.
29 Constructor.
30 Constructor for subclasses. @param dict the dictionary to be used to create an instance of PDPropertyList
31 Constructor for an existing BoxStyle element. @param dic The existing dictionary.
32 Create a new access permission object. By default, all permissions are granted.
33 Creates a new access permission object from a single integer. @param permissions The permission bits.
34 creates a new crypt filter dictionary from the low level dictionary provided. @param d the low level dictionary that will be managed by the newly created object
35 Constructor.
36 Constructor. @param a The FDF annotation.
37 Constructor. @param cat The FDF documents catalog.
38 Constructor. @param fdfDictionary The FDF documents catalog.
39 Constructor. @param f The FDF field.
40 Constructor. @param f The icon fit dictionary.
41 Constructor. @param javaScript The FDF java script.
42 Constructor. @param r The FDF named page reference dictionary.
43 Constructor. @param o The option element.
44 Constructor. @param p The FDF page.
45 Constructor. @param p The FDF page.
46 Constructor. @param t The FDF page template.
47 Creates a PDFontDescriptor from a COS dictionary. @param desc The wrapped COS Dictionary.
48 Constructs a font setting from an existing array. @param fs The new font setting value.
49 Creates a new line dash pattern, with no dashes and a phase of 0.
50 Creates a PDColor containing the given pattern name. @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern is defined
51 Creates a new DeviceN colour space attributes dictionary from the given dictionary. @param attributes a dictionary that has all of the attributes
52 Creates a new DeviceN Process Dictionary from the given attributes. @param attributes a DeviceN attributes dictionary
53 Creates a new gamma from a COS array. @param array the array containing the XYZ values
54 Constructor from COS object. @param array the array containing the XYZ values
55 Creates a group object from a given dictionary @param dic {@link COSDictionary} object
56 Creates a new instance based on a given {@link COSDictionary}. @param props the dictionary
57 Creates a new Pattern dictionary from the given COS dictionary. @param dictionary The COSDictionary for this pattern.
58 Constructor using the given shading dictionary. @param shadingDictionary the dictionary for this shading
59 Create a graphics state from an existing dictionary. @param dictionary The existing graphics state. @param resourceCache Resource cache, may be null.
60 Creates a new soft mask. @param dictionary The soft mask dictionary. @param resourceCache Resource cache, may be null.
61 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
62 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
63 Constructor. @param a The action dictionary.
64 Utility Class.
65 Constructor. @param a The action dictionary.
66 Constructor. @param a The action dictionary.
67 Constructor. @param a The action dictionary.
68 Constructor. @param a The action dictionary.
69 Constructor. @param a The action dictionary.
70 Create a target directory from an existing dictionary. @param dictionary The existing graphics state.
71 Constructor. @param dictionary the corresponding dictionary
72 Constructor. @param p The params dictionary.
73 Constructor. @param dict dictionary
74 Constructor for reading. @param dictionary The annotations dictionary.
75 Constructor for reading. @param entry the dictionary of the appearance entry
76 Constructor. @param dict a border style dictionary.
77 Constructor. @param dict a border style dictionary.
78 Constructor. @param dictionary Dictionary
79 Creates a new <code>CloudyBorder</code> that writes to the specified content stream. @param stream content stream @param intensity intensity of cloudy effect (entry <code>I</code>); typically 1.0 or 2.0 @param lineWidth line width for annotation border (entry <code>W</code>) @param rect annotation rectangle (entry <code>Rect</code>)
80 Constructor. @param dict The signature dictionary.
81 Constructor. @param dict The signature dictionary.
82 Constructor. @param dict The signature dictionary.
83 Constructor. @param dict The certificate seed value dictionary.
84 Constructor. @param dict The signature dictionary.
85 Constructor. @param dict The signature dictionary.
86 Constructor. @param dict The signature dictionary.
87 Creates the default signature options.
88 Constructor. @param templateBuilder the template builder
89 Constructor.
90 Constructor. @param acroForm The form that this field is part of. @param field the PDF object to represent as a field. @param parent the parent node of the node
91 Constructor. @param xfaBase The xfa resource.
92 Constructor. @param dictionary the corresponding dictionary
93 Constructor. @param dictionary the corresponding dictionary
94 Constructor. @param dictionary the dictionary
95 Constructor that is used for a preexisting dictionary. @param t The underlying dictionary.
96 Constructor that is used for a preexisting dictionary. @param b The underlying dictionary.
97 Constructor that is used for a preexisting dictionary. @param dic The underlying dictionary.
98 Package-private constructor.
99 Instantiate a new PDFTextStripper object.
100 Constructor. This produces an identity matrix.
101 Constructor. This produces a matrix with the given array as data. The source array is not copied or cloned.
102 Creates a transformation matrix with the given 6 elements. Transformation matrices are discussed in 8.3.3, "Common Transformations" and 8.3.4, "Transformation Matrices" of the PDF specification. For simple purposes (rotate, scale, translate) it is recommended to use the static methods below. Produces the following matrix: a b 0 c d 0 e f 1 @see Matrix#getRotateInstance(double, float, float) @see Matrix#getScaleInstance(float, float) @see Matrix#getTranslateInstance(float, float) @param a the X coordinate scaling element (m00) of the 3x3 matrix @param b the Y coordinate shearing element (m10) of the 3x3 matrix @param c the X coordinate shearing element (m01) of the 3x3 matrix @param d the Y coordinate scaling element (m11) of the 3x3 matrix @param e the X coordinate translation element (m02) of the 3x3 matrix @param f the Y coordinate translation element (m12) of the 3x3 matrix
103 Utility class, should not be instantiated.
104 Creates a new PDFStreamEngine.
105 Adds an operator processor to the engine. @param op operator processor
106 This will set the terminating character. @param term The terminating character.
107 This will tell the splitting algorithm where to split the pages. The default is 1, so every page will become a new document. If it was two then each document would contain 2 pages. If the source document had 5 pages it would split into 3 new documents, 2 documents containing 2 pages and 1 document containing one page. @param split The number of pages each split document should contain. @throws IllegalArgumentException if the page is smaller than one.
108 This will set the start page. @param start the 1-based start page @throws IllegalArgumentException if the start page is smaller than one.
109 This will set the end page. @param end the 1-based end page @throws IllegalArgumentException if the end page is smaller than one.
110 Change the parser leniency flag. This method can only be called before the parsing of the file. @param lenient try to handle malformed PDFs.
111 Sets the number of objects, that can be contained in compressed object streams. Higher object stream sizes may cause PDF readers to slow down during the rendering of PDF documents, therefore a reasonable value should be selected. A value of 0 disables the compression. @param objectStreamSize The number of objects, that can be contained in compressed object streams.
112 Sets the blend mode in the current graphics state @param blendMode blend mode @throws IllegalArgumentException if blendMode is null.
113 Constructor for reading. @param acroForm the AcroForm containing the fields.
114 Returns the length of the encoded stream. @return length in bytes
115 Instantiate a new PDFMergerUtility.
116 Creates an object stream for compressible objects from the given {@link COSWriterCompressionPool}. The objects must first be prepared for this object stream, by adding them via calling {@link COSWriterObjectStream#prepareStreamObject(COSObjectKey, COSBase)} and will be written to this {@link COSStream}, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @param compressionPool The compression pool an object stream shall be created for.
117 Begin buffering the text clipping path, if any.
118 Add a source file to the list of files to merge. @param source File representing source document @throws FileNotFoundException If the file doesn't exist
119 Add a source to the list of documents to merge. @param source RandomAccessRead representing source document. To pass an InputStream, wrap it into a {@link RandomAccessReadBuffer}.
120 Add a name (ex. an operator) @param name the name
121 Adds a proc (sub-sequence of instructions). @param child the child proc
122 Adds a new recipient to the recipients list. @param recipient A new recipient.
123 Add a new region to group text by. @param regionName The name of the region. @param rect The rectangle area to retrieve the text from. The y-coordinates are java coordinates (y == 0 is top), not PDF coordinates (y == 0 is bottom).
124 Adds trailer information for current XRef object. @param trailer the current document trailer dictionary
125 Returns the {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key. @param key The {@link COSObjectKey} a registered {@link COSBase} shall be found for. @return The {@link COSBase}, that is registered for the given {@link COSObjectKey}, or null if no object is registered for that key.
126 Returns the operator for the given operator name. @param operatorName the operator name @return the operator (or null if there's no such operator
127 Returns the name for a given sequence of Unicode characters. @param unicodeSequence sequence of Unicode characters @return PostScript glyph name, or ".notdef"
128 @return Returns the graphicsState.
129 Pops the current graphics state from the stack.
130 @return Returns the size of the graphicsStack.
131 Transforms the given point by this matrix. @param x x-coordinate @param y y-coordinate @return the transformed point.
132 Decrease the level. Call this after running a potentially recursive operation. A log message is shown if the level is below 0. This can happen if the level is not decreased after an operation is done, e.g. by using a "finally" block.
133 Adds an int value. @param value the value
134 Throws if the random access backing store has been closed. Helpful for catching cases where a user tries to use a COSStream which has outlived its COSDocument.
135 Unsupported. @throws IOException telling that this is an unsupported action.
136 Unsupported. @throws IOException always throw as reset is an unsupported feature.
137 This will get the encryption dictionary. The document must be parsed before this is called. @return The encryption dictionary of the document that was parsed. @throws IOException If there is an error getting the document.
138 This will get the AccessPermission. The document must be parsed before this is called. @return The access permission of document that was parsed. @throws IOException If there is an error getting the document.
139 Creates a new InvalidPasswordException. @param message A msg to go with this exception.
140 Constructor. @param aOperator The operator that this object will represent. @throws IllegalArgumentException if the operator starts with "/".
141 This will print a string rep of this class. @return A string rep of this class.
142 {@inheritDoc}
143 {@inheritDoc}
144 Returns a filter instance given its COSName. @param filterName the name of the filter to retrieve @return the filter that matches the name @throws IOException if the filter name was invalid
145 Adds a real value. @param value the value
146 @param width signature image width @return Visible Signature Configuration Object
147 @param height signature image height @return Visible Signature Configuration Object
148 Calculate the distance from point ps to point pe. @param ps one end of a line @param pe the other end of the line @return length of the line
149 A line from point p1 to point p2 defines an equation, adjust the form of the equation to let the rhs equals 0, then calculate the lhs value by plugging the coordinate of p in the lhs expression. @param p target point @param p1 one end of a line @param p2 the other end of a line @return calculated value
150 Creates a new marked content object. @param tag the tag @param properties the properties
151 This will return the paint type. @return The type of object that this is.
152 This will return the type. @return the type of object that this is
153 Returns the default value, if any. @return A non-null string.
154 Unchecks the check box. @throws IOException if the appearance couldn't be generated.
155 Tests if the current point is the white point. @return true if the current point is the white point.
156 Calculate the color on the axial line and store them in an array. @return an array, index denotes the relative position, the corresponding value is the color on the axial line @throws IOException if the color conversion fails.
157 Calculate the color on the line that connects two circles' centers and store the result in an array. @return an array, index denotes the relative position, the corresponding value the color
158 Init the code table with 1 byte entries and the EOD and CLEAR_TABLE markers.
159 This will get an object from the array. This will NOT dereference the COS object. @param index The index into the array to get the object. @return The object at the requested index.
160 {@inheritDoc}
161 This will get the size of this array. @return The number of elements in the array.
162 {@inheritDoc}
163 Returns the number of recipients @return the number of recipients
164 Returns true if the container is empty, false otherwise. @return true if the container is empty, false otherwise
165 {@inheritDoc}
166 Removes a recipient from the recipients list. @param recipient The recipient to remove. @return true If a recipient was found and removed.
167 Get access to the list. @return an iterator over the array elements
168 {@inheritDoc}
169 Returns an iterator to browse the list of recipients. Object found in this iterator are <code>PublicKeyRecipient</code>. @return The recipients list iterator.
170 Return contents of COSArray as a Java List. @return the COSArray as List
171 This will return a list of names if the COSArray consists of COSNames only. @return the list of names of the COSArray of COSNames
172 This will return a list of names if the COSArray consists of COSStrings only. @return the list of names of the COSArray of COSStrings
173 This will get the boolean value. @param value Parameter telling which boolean value to get. @return The single boolean instance that matches the parameter.
174 Return a string representation of this object. @return The string value of this object.
175 This will write this object out to a PDF stream. @param output The stream to write this object out to. @throws IOException If an error occurs while writing out this object.
176 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
177 Writes binary data to the content stream. @param data as byte formatted to be added to the content stream @throws IOException If the underlying stream has a problem being written to.
178 Returns the name-value entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return name-value entries in this dictionary
179 Is the value changed? @param oldEntry old entry @param newEntry new entry @return <code>true</code> if the entry is changed, <code>false</code> otherwise
180 This will return the number of elements in this dictionary. @return The number of elements in the dictionary.
181 This will do a lookup into the dictionary. @param key The key to the object. @return The item that matches the key.
182 Returns the names of the entries in this dictionary. The returned set is in the order the entries were added to the dictionary. @since Apache PDFBox 1.1.0 @return names of the entries in this dictionary
183 This will get all of the values for the dictionary. @return All the values for the dictionary.
184 This will add all of the dictionaries keys/values to this dictionary. Existing key/value pairs will be overwritten. @param dict The dictionaries to get the key/value pairs from.
185 @see java.util.Map#containsKey(Object) @param name The key to find in the map. @return true if the map contains this key.
186 Split at spaces but keep them @param s @return
187 Parses a value of type "int". @param token the token to be parsed @return the parsed value
188 {@inheritDoc}
189 set the length in (bits) of the secret key that will be used to encrypt document data. The default value is 40 bits, which provides a low security level but is compatible with old versions of Acrobat Reader. @param l the length in bits (must be 40, 128 or 256)
190 This will set the first page to be extracted by this class. @param startPageValue New value of 1-based startPage property. @throws IllegalArgumentException if the parameter is below 1.
191 This will set the last page to be extracted by this class. @param endPageValue New value of 1-based endPage property. @throws IllegalArgumentException if the parameter is below 1.
192 Constructor. Triggers a brute force search for all objects of the document. @param cosDocument the corresponding COS document @param cosParser the COSParser to be used for reading the pdf @throws IOException if the source data could not be read
193 Default constructor.
194 Default constructor.
195 Constructor for reading. @param resourceDictionary The cos dictionary for this resource.
196 Constructor for reading. @param resourceDictionary The cos dictionary for this resource. @param resourceCache The document's resource cache, may be null.
197 Creates a new Operators object with the default set of operators.
198 Constructor. @param doc The document that this form is part of. @param form The existing acroForm.
199 Returns the count of trailers. @return the count of trailers.
200 This will get an object from the pool. @param key The object key. @return The object in the pool or a new one if it has not been parsed yet.
201 Parses a value of type "real". @param token the token to be parsed @return the parsed value
202 Check and coerce the value field to be between MIN_NORMAL and MAX_VALUE. @param floatValue the value to be checked @return the coerced value
203 Return the direction/orientation of the string in this object based on its text matrix. Only angles of 0, 90, 180, or 270 are supported. To get other angles, use this code: <pre> TextPosition text = ... Matrix m = text.getTextMatrix().clone(); m.concatenate(text.getFont().getFontMatrix()); int angle = (int) Math.round(Math.toDegrees(Math.atan2(m.getShearY(), m.getScaleY()))); </pre> @return The direction of the text (0, 90, 180, or 270).
204 {@inheritDoc}
205 {@inheritDoc}
206 Builds, if needed, and returns the string representation of the current value. @return current value as string.
207 Write {@link COSNull} to the given stream. @param output The stream, that shall be written to.
208 Creates a new {@link COSIncrement} for the given {@link COSUpdateInfo}, the increment will use it´s {@link COSDocumentState} as it´s own origin and shall collect all updates contained in the given {@link COSUpdateInfo}.<br> Should the given object be {@code null}, the resulting increment shall be empty. @param incrementOrigin The {@link COSUpdateInfo} serving as an update source for this {@link COSIncrement}.
209 Creates a new instance for the given target document. @param dest the destination PDF document that will receive the clones
210 Constructor providing a parameter to enable/disable the stable object cache. @param enableStableCache enables/disables the stable object cache
211 Get the update state for the COSWriter. This indicates whether an object is to be written when there is an incremental save. @return the update state.
212 Returns {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @param base The {@link COSBase} to check. @return {@code true}, if the given {@link COSBase} is already known to and has been processed by this {@link COSIncrement}. @see #objects @see #processedObjects
213 Returns {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @param base The {@link COSBase} to check for exclusion. @return {@code true}, if the given {@link COSBase} has been excluded from the increment, and hence is contained in {@link #excluded}. @see #excluded
214 The given object and actual {COSBase}s shall be part of the increment and must be added to {@link #objects}, if possible.<br> {@code null} values shall be skipped. @param object The {@link COSBase} to add to {@link #objects}. @see #objects
215 The given {@link COSObject} has been processed, or is being processed. It shall be added to {@link #processedObjects} to skip it, should it be encountered again.<br> {@code null} values shall be ignored. @param base The {@link COSObject} to add to {@link #processedObjects}. @see #processedObjects
216 For internal PDFBox use when creating PDF documents: register a TrueTypeFont to make sure it is closed when the PDDocument is closed to avoid memory leaks. Users don't have to call this method, it is done by the appropriate PDFont classes. @param ttf the TrueTypeFont to be registered
217 Constructor. @param is The input stream to actually read from.
218 Creates a CCITTFaxDecoderStream. This constructor may be used for CCITT streams embedded in PDF files, which use EncodedByteAlign. @param stream the compressed CCITT stream. @param columns the number of columns in the stream. @param type the type of stream, must be one of {@code COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE}, {@code COMPRESSION_CCITT_T4} or {@code COMPRESSION_CCITT_T6}. @param options CCITT T.4 or T.6 options. @param byteAligned enable byte alignment used in PDF files (EncodedByteAlign).
219 {@inheritDoc}
220 {@inheritDoc}
221 This will output this string as a PDF object. @param output The stream to write to. @throws IOException If there is an error writing to the stream.
222 {@inheritDoc}
223 Returns the base name of the font which the given font name maps to. @param fontName name of font, either a base name or an alias @return the base name or null if this is not one of the known names
224 This will get the selected export values. <p> A RadioButton might have an export value to allow field values which can not be encoded as PDFDocEncoding or for the same export value being assigned to multiple RadioButtons in a group.<br> To define an export value the RadioButton must define options {@link #setExportValues(List)} which correspond to the individual items within the RadioButton.</p> <p> The method will either return the corresponding values from the options entry or in case there is no such entry the fields value</p> @return the export value of the field.
225 Returns true if the name is the empty string. @return true if the name is the empty string.
226 Write a comment line. @param comment the comment to be added to the content stream @throws IOException If the content stream could not be written. @throws IllegalArgumentException If the comment contains a newline. This is not allowed, because the next line could be ordinary PDF content.
227 Writes a newline to the content stream as ASCII. @throws IOException If the underlying stream has a problem being written to.
228 Takes the characters in the given string, convert it to bytes in UTF16-BE format and build a char array that corresponds to the ASCII hex encoding of the resulting bytes. Example: <pre> getCharsUTF16BE("ab") == new char[]{'0','0','6','1','0','0','6','2'} </pre> @param text The string to convert @return The string converted to hex
229 This will get the object that this object encapsulates. @return The encapsulated object.
230 Constructor. @param num The object number. @param gen The object generation number. @param index The index within a compressed object stream
231 {@inheritDoc}
232 Returns the x-scaling factor of this matrix. This is calculated from the scale and shear. @return The x-scaling factor.
233 Returns the y-scaling factor of this matrix. This is calculated from the scale and shear. @return The y-scaling factor.
234 Constructor. @param out The output stream to write to.
235 Constructor. @param out The underlying stream to write to.
236 Constructor. @param out The underlying stream to write to. @param position The current position of output stream.
237 Returns the raw bytes of the string using a new byte array. Best used with a PDF <i>byte string</i>. @return a clone of the underlying byte[] representation of the COSString
238 Write an incremental update for a non signature case. This can be used for e.g. augmenting signatures. @throws IOException
239 Returns the content of this string as a PDF <i>ASCII string</i>. @return the ASCII string representation of the COSString
240 Returns {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @return {@code true}, if the linked {@link #originDocumentState} {@link COSDocumentState#isAcceptingUpdates()} and such a {@link COSDocumentState} has been linked to this {@link COSUpdateState}. @see #originDocumentState @see COSDocumentState#isAcceptingUpdates()
241 Returns the string representation of the given PDFDocEncoded bytes.
242 This will read an operator from the stream. @return The operator that was read from the stream. @throws IOException If there is an error reading from the stream.
243 Returns the given string encoded with PDFDocEncoding.
244 Returns true if the given character is available in PDFDocEncoding. @param character UTF-16 character
245 {@inheritDoc}
246 Returns true if the given font name is one of the known names, including alias. @param fontName the name of font, either a base name or alias @return true if the name is one of the known names
247 Returns an unmodifiable view of the code -&gt; name mapping. @return the code -&gt; name map
248 Returns an unmodifiable view of the name -&gt; code mapping. More than one name may map to the same code. @return the name -&gt; code map
249 {@inheritDoc}
250 This will read the next byte from the stream. @return The next byte read from the stream. @throws IOException If there is an error reading from the wrapped stream.
251 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
252 This will write a single byte. @param b The byte to write. @throws IOException If there is an error writing to the stream.
253 This will flush the data to the stream. @throws IOException If there is an error writing the data to the stream.
254 This will take the password and truncate or pad it as necessary. @param password The password to pad or truncate. @return The padded or truncated password.
255 Close the content stream. This must be called when you are done with this object. @throws IOException If the underlying stream has a problem being written to.
256 Import an XMP stream into the PDF document. @param xmp The XMP data. @throws IOException If there is an error generating the XML document.
257 Check if it is necessary to create a new document. By default a split occurs at every page. If you wanted to split based on some complex logic then you could override this method. For example. <code> protected void splitAtPage() { // will split at pages with prime numbers only return isPrime(pageNumber); } </code> @param pageNumber the 0-based page number to be checked as splitting page @return true If a new document should be created.
258 Sets the region of the source image that should be decoded. The region will be clipped to the dimensions of the source image. Setting this value to null will result in the entire image being decoded. @param sourceRegion The source region to decode, or null if the entire image should be decoded.
259 Sets the number of columns to advance in the source for every pixel decoded @param ssX The x-axis subsampling value
260 Sets the number of rows to advance in the source for every pixel decoded @param ssY The y-axis subsampling value
261 Sets the horizontal subsampling offset for decoding images @param ssOffsetX The x-axis subsampling offset
262 Sets the vertical subsampling offset for decoding images @param ssOffsetY The y-axis subsampling offset
263 {@inheritDoc}
264 {@inheritDoc}
265 {@inheritDoc}
266 {@inheritDoc}
267 {@inheritDoc}
268 returns visible signature text @return the visible signature's text
269 @param signatureText - adds the text on visible signature @return the signature design
270 <b>This will throw an UnsupportedOperationException if used as the signature fields value can't be set using a String</b> @param value the plain text value. @throws UnsupportedOperationException in all cases!
271 @return the ZIP compression level configured for PDFBox
272 {@inheritDoc}
273 Constructor. @param inputStream The input stream to actually read from.
274 This will close the underlying stream and release any resources. @throws IOException If there is an error closing the underlying stream.
275 Set image and its height and width. @param image
276 Decodes a single line of data in-place. @param predictor Predictor value for the current line @param colors Number of color components, from decode parameters. @param bitsPerComponent Number of bits per components, from decode parameters. @param columns Number samples in a row, from decode parameters. @param actline Current (active) line to decode. Data will be decoded in-place, i.e. - the contents of this buffer will be modified. @param lastline The previous decoded line. When decoding the first line, this parameter should be an empty byte array of the same length as <code>actline</code>.
277 Returns true, if a {@link COSBase} is registered for the given {@link COSObjectKey}. @param key The {@link COSObjectKey} that shall be checked for a registered {@link COSBase}. @return True, if a {@link COSBase} is registered for the given {@link COSObjectKey}.
278 Determines if the encoding has a mapping for the given name value. @param name PostScript glyph name @return true if the encoding has a mapping for the given name value
279 Determines if the encoding has a mapping for the given code value. @param code character code @return if the encoding has a mapping for the given code value
280 Escape special characters. @param input the string to be escaped. @return the resulting string
281 This will set the BBox (bounding box) for this form. @param bbox The new BBox for this form.
282 Decodes a hex String into a byte array. @param s A String with ASCII hex. @return decoded byte array.
283 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
284 This will close the underlying COSDocument object. @throws IOException If there is an error releasing resources.
285 Returns the stream. @return The stream for this object.
286 Creates a new XObject from the given stream and subtype. @param stream The stream to read. @param subtype the subtype to be used for this XObject
287 Returns the stream. {@inheritDoc}
288 Returns the metadata stream for this object, or null if there is no metadata stream. @return the metadata stream, or null if there is none
289 Sets the metadata stream that is associated with this color space. @param metadata the new metadata stream
290 {@inheritDoc}
291 {@inheritDoc}
292 {@inheritDoc}
293 Default constructor.
294 This will tell if the next byte is a digit or not. @return true if the next byte in the stream is a digit. @throws IOException If there is an error reading from the stream.
295 Populate XRef HashMap of current XRef object. Will add an Xreftable entry that maps ObjectKeys to byte offsets in the file. @param objKey The objkey, with id and gen numbers @param offset The byte offset in this file
296 This will add a character encoding. An already existing mapping is preserved when creating the reverse mapping. Should only be used during construction of the class. @see #overwrite(int, String) @param code character code @param name PostScript glyph name
297 This will tell if the next byte is a space or not. @return true if the next byte in the stream is a space character. @throws IOException If there is an error reading from the stream.
298 Skip one line break, such as CR, LF or CRLF. @param linebreak the first character to be checked. @return true if a line break was found and removed. @throws IOException if something went wrong
299 This is really a bug in the Document creators code, but it caused a crash in PDFBox, the first bug was in this format: /Title ( (5) /Creator which was patched in 1 place. However it missed the case where the number of opening and closing parenthesis isn't balanced The second bug was in this format /Title (c:\) /Producer @param bracesParameter the number of braces currently open. @return the corrected value of the brace counter @throws IOException
300 This will tell if the next byte to be read is an end of line byte. @param c The character to check against end of line @return true if the next byte is 0x0A or 0x0D.
301 This method is used to read a token by the {@linkplain #readInt()} and the {@linkplain #readLong()} method. Valid delimiters are any non digit values. @return the token to parse as integer or long by the calling method. @throws IOException throws by the {@link #source} methods.
302 Tries to decode the buffer content to an UTF-8 String. If that fails, tries the alternative Encoding. @param buffer the {@link ByteArrayOutputStream} containing the bytes to decode @return the decoded String
303 Read one char and throw an exception if it is not the expected value. @param ec the char value that is expected. @throws IOException if the read char is not the expected value or if an I/O error occurs.
304 This will tell if the next byte is whitespace or not. @return true if the next byte in the stream is a whitespace character. @throws IOException If there is an error reading from the stream.
305 This will parse the startxref section from the stream. The startxref value is ignored. @return the startxref value or -1 on parsing error @throws IOException If an IO error occurs.
306 Brute force search for the last EOF marker. @throws IOException if something went wrong
307 Brute force search for all xref entries (tables). @throws IOException if something went wrong
308 The number of color components of this shading. @return number of color components of this shading @throws IOException if the data could not be read
309 Brute force search for all /XRef entries (streams). @throws IOException if something went wrong
310 Returns the resulting cross reference table. @return
311 Looks for and parses startxref. We first look for last '%%EOF' marker (within last {@link #DEFAULT_TRAIL_BYTECOUNT} bytes (or range set via {@link #setEOFLookupRange(int)}) and go back to find <code>startxref</code>. @return the offset of StartXref @throws IOException If something went wrong.
312 This method will read through the current stream object until we find the keyword "endstream" meaning we're at the end of this object. Some pdf files, however, forget to write some endstream tags and just close off objects with an "endobj" tag so we have to handle this case as well. This method is optimized using buffered IO and reduced number of byte compare operations. @param out stream we write out to. @throws IOException if something went wrong
313 Creates a new ToUnicode CMap writer.
314 Sets the page label range beginning at the specified start page. @param startPage the 0-based index of the page representing the start of the page label range. @param item the page label item to set. @throws IllegalArgumentException if the startPage parameter is &lt; 0.
315 Adds the given CID to Unicode mapping. @param cid CID @param text Unicode text, up to 512 bytes.
316 Looks up an amount of bytes if they contain only ASCII characters (no control sequences etc.), and that these ASCII characters begin with a sequence of 1-3 non-blank characters between blanks @return <code>true</code> if next bytes are probably printable ASCII characters starting with a PDF operator, otherwise <code>false</code>
317 Checks if the next char is a space or a return. @return true if the next char is a space or a return @throws IOException if something went wrong
318 Add an new entry to the XRef stream. @param entry new entry to be added
319 determines the minimal length required for all the lengths. @return the length information
320 Creates a map of {@link COSBase} instances to {@link COSObjectKey}s, allowing bidirectional lookups. This constructor can be used for pre - initialized structures to start the assignment of new object numbers starting from the hereby given offset. @param highestXRefObjectNumber The highest known object number.
321 Returns the first trailer if at least one exists. @return the first trailer or null
322 Returns the last trailer if at least one exists. @return the last trailer ir null
323 Returns object numbers which are referenced as contained in object stream with specified object number. This will scan resolved xref table for all entries having negated stream object number as value. @param objstmObjNr object number of object stream for which contained object numbers should be returned @return set of object numbers referenced for given object stream or <code>null</code> if {@link #setStartxref(long)} was not called before so that no resolved xref table exists
324 Returns the value for the first column of the crossreference stream entry. (The numeric representation of this entry's (The numeric representation of this entry's {@link XReferenceType}.) @return The value for the first column of the crossreference stream entry.
325 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set next free {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
326 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
327 Returns the value for the second column of the crossreference stream entry. (This is byte offset of the {@link COSObject} in the PDF file - for entries of this type.) @return The value for the second column of the crossreference stream entry.
328 Returns the value for the third column of the crossreference stream entry. (This is the generation number of the set {@link COSObjectKey} - for entries of this type.) @return The value for the third column of the crossreference stream entry.
329 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
330 Returns the value for the second column of the crossreference stream entry. (This is object number from the {@link COSObjectKey} of the object stream, that is containing the object represented by this entry - for entries of this type..) @return The value for the second column of the crossreference stream entry.
331 Returns the value for the third column of the crossreference stream entry. (This is index of the {@link COSObject} in the containing object stream - for entries of this type.) @return The value for the third column of the crossreference stream entry.
332 Returns a string representation of this crossreference stream entry. @return A string representation of this crossreference stream entry.
333 This will write some byte to the stream. @param b The source byte array. @param off The offset into the array to start writing. @param len The number of bytes to write. @throws IOException If the underlying stream throws an exception.
334 This will write a single byte to the stream. @param b The byte to write to the stream. @throws IOException If there is an error writing to the underlying stream.
335 This will write an EOL to the stream. @throws IOException If there is an error writing to the stream
336 Returns true, if the resulting document shall be compressed. @return True, if the resulting document shall be compressed.
337 add an entry in the x ref table for later dump. @param entry The new entry to add.
338 Write the given {@link COSObjectKey} to the given stream. @param output The stream, that shall be written to. @param indirectReference The content, that shall be written.
339 @return MD5 message digest
340 @return SHA-1 message digest
341 @return SHA-256 message digest
342 Returns the highest object number, that is registered in this compression pool. @return The highest object number, that is registered in this compression pool.
343 Returns all {@link COSObjectKey}s, that shall be added to the object stream, when {@link COSWriterObjectStream#writeObjectsToStream(COSStream)} is called. @return All {@link COSObjectKey}s, that shall be added to the object stream.
344 This will add a character encoding. An already existing mapping is overwritten when creating the reverse mapping. Should only be used during construction of the class. @see Encoding#add(int, String) @param code character code @param name PostScript glyph name
345 Delete a region to group text by. If the region does not exist, this method does nothing. @param regionName The name of the region to delete.
346 Sets the maximum number of digits allowed for fractional numbers. @see NumberFormat#setMaximumFractionDigits(int) @param fractionDigitsNumber the maximum number of digits allowed for fractional numbers
347 Create a new appearance stream. @param document may be null @param outputStream The appearances output stream to write to. @param resources The resources to use
348 Returns the y-component of the vertical displacement vector (w1). @param code character code @return w1y
349 Returns the provided default value in case 'standard' value is <code>null</code>. To be used in cases unboxing may lead to a NPE. @param standardValue 'standard' value @param defaultValue default value @return 'standard' value if not <code>null</code> otherwise default value
350 Zoom signature image with some percent. @param percent increase (positive value) or decrease (negative value) image with x percent. @return Visible Signature Configuration Object
351 @return signature image width
352 @return signature image height
353 Adjust signature for page rotation. This is optional, call this after all x and y coordinates have been set if you want the signature to be positioned regardless of page orientation. @return Visible Signature Configuration Object
354 Create an affine transform from this matrix's values. @return An affine transform with this matrix's values.
355 Encodes the given string for use in a PDF content stream. @param text Any Unicode text. @return Array of PDF content stream bytes. @throws IOException If the text could not be encoded. @throws IllegalArgumentException if a character isn't supported by the font.
356 Returns the name for the given Unicode code point. @param codePoint Unicode code point @return PostScript glyph name, or ".notdef"
357 Retrieve the glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. The encoded glyph IDs are also written to the specified output stream. @param gsubWorker The GSUB worker which defines the GSUB transformations to apply. @param out The output stream to write the glyph IDs to. @param font The font whose cmap table will be used to map characters to glyph IDs. @param word The word which is being converted from characters to glyph IDs. @return The glyph IDs for the characters in the specified word, after applying any relevant GSUB rules. @throws IllegalStateException If we cannot find a glyph ID for any characters in the specified word.
358 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source input representing the pdf @param permission he access permissions of the pdf
359 Constructor that uses an existing document. The COSDocument that is passed in must be valid. @param doc The COSDocument that this document wraps. @param source The source that will be closed when this document gets closed, can be null.
360 {@inheritDoc}
361 {@inheritDoc}
362 {@inheritDoc}
363 {@inheritDoc}
364 {@inheritDoc}
365 {@inheritDoc}
366 {@inheritDoc}
367 {@inheritDoc}
368 {@inheritDoc}
369 {@inheritDoc}
370 Returns the set of known font names, including aliases. @return the set of known font names
371 {@inheritDoc}
372 Method to convert the COS value in the number tree to the PD Model object. The default implementation will simply use reflection to create the correct object type. Subclasses can do whatever they want. @param base The COS object to convert. @return The converted PD Model object. @throws IOException If there is an error during creation.
373 a..z, aa..zz, aaa..zzz ... labeling as described in PDF32000-1:2008, Table 159, Page 375.
374 Returns the number of page label ranges. <p> This will be always &gt;= 1, as the required default entry for the page range starting at the first page is added automatically by this implementation (see PDF32000-1:2008, p. 375). </p> @return the number of page label ranges.
375 Returns the page label range starting at the given page, or {@code null} if no such range is defined. @param startPage the 0-based page index representing the start page of the page range the item is defined for. @return the page label range or {@code null} if no label range is defined for the given start page.
376 Get an ordered set of page indices having a page label range. @return set of page indices.
377 Returns the dash array. @return the dash array, never null.
378 Creates a PDColor containing the given color component values. @param components array of color component values @param colorSpace color space in which the components are defined
379 Returns the components of this color value. @return the components of this color value, never null.
380 Constructor. @param p point @param c color
381 {@inheritDoc}
382 get the boundary of a triangle. @return {xmin, xmax, ymin, ymax}
383 Pops a number (int or real) from the stack. If it's neither data type, a ClassCastException is thrown. @return the number
384 Pops a value of type int from the stack. If the value is not of type int, a ClassCastException is thrown. @return the int value
385 Pops a number from the stack and returns it as a real value. If the value is not of a numeric type, a ClassCastException is thrown. @return the real value
386 Adds a bool value. @param value the value
387 Creates a new execution context. @param operatorSet the operator set
388 returns a list of regular expression Patterns representing different common list item formats. For example numbered items of form: <ol> <li>some text</li> <li>more text</li> </ol> or <ul> <li>some text</li> <li>more text</li> </ul> etc., all begin with some character pattern. The pattern "\\d+\." (matches "1.", "2.", ...) or "\[\\d+\]" (matches "[1]", "[2]", ...). <p> This method returns a list of such regular expression Patterns. @return a list of Pattern objects.
389 Creates a String representation of an Object array. @param array the Object array @return the String representation
390 Creates a String representation of a float array. @param array the float array @return the String representation
391 Adds a text position to the contents. @param text the text position
392 Adds a marked content to the contents. @param markedContent the marked content
393 Adds an XObject to the contents. @param xobject the XObject
394 Set if the user can print. <p> This method will have no effect if the object is in read only mode. @param allowPrinting A boolean determining if the user can print.
395 Set if the user can modify the document. <p> This method will have no effect if the object is in read only mode. @param allowModifications A boolean determining if the user can modify the document.
396 Set if the user can extract content from the document. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
397 Set if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even the parameter here is false. <p> This method will have no effect if the object is in read only mode. @param allowAnnotationModification A boolean determining the new setting.
398 Set if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. Therefore, if you want to prevent a user from filling in interactive form fields, you need to call {@link #setCanModifyAnnotations(boolean) setCanModifyAnnotations(false)} as well. <p> This method will have no effect if the object is in read only mode. @param allowFillingInForm A boolean determining if the user can fill in interactive forms.
399 Set if the user can extract content from the document for accessibility purposes. <p> This method will have no effect if the object is in read only mode. @param allowExtraction A boolean determining if the user can extract content from the document.
400 Set if the user can insert/rotate/delete pages. <p> This method will have no effect if the object is in read only mode. @param allowAssembly A boolean determining if the user can assemble the document.
401 Set if the user can print the document in a faithful format or in a degraded format (if print is enabled). The PDF version must be 1.5 or higher. <p> This method will have no effect if the object is in read only mode. @param canPrintFaithful A boolean determining if the user can print the document in a faithful format.
402 This will tell if the user can print. @return true If supplied with the user password they are allowed to print.
403 This will tell if the user can modify contents of the document. @return true If supplied with the user password they are allowed to modify the document
404 This will tell if the user can extract text and images from the PDF document. @return true If supplied with the user password they are allowed to extract content from the PDF document
405 This will tell if the user can add or modify text annotations and fill in interactive forms fields and, if {@link #canModify() canModify()} returns true, create or modify interactive form fields (including signature fields). Note that if {@link #canFillInForm() canFillInForm()} returns true, it is still possible to fill in interactive forms (including signature fields) even if this method here returns false. @return true If supplied with the user password they are allowed to modify annotations.
406 This will tell if the user can fill in interactive form fields (including signature fields) even if {@link #canModifyAnnotations() canModifyAnnotations()} returns false. @return true If supplied with the user password they are allowed to fill in form fields.
407 This will tell if the user can extract text and images from the PDF document for accessibility purposes. @return true If supplied with the user password they are allowed to extract content from the PDF document
408 This will tell if the user can insert/rotate/delete pages. @return true If supplied with the user password they are allowed to assemble the document.
409 This will tell if the user can print the document in a faithful format or in a degraded format (if print is enabled). @return true If supplied with the user password they are allowed to print the document in a faithful format.
410 returns The private key that will be used to open the document protection. @return The private key. @throws KeyStoreException If there is an error accessing the key.
411 Returns a SecureRandom If customSecureRandom is not defined, instantiate a new SecureRandom @return SecureRandom
412 This will reset the key to be used. @param key The RC4 key used during encryption.
413 This will encrypt and write the next byte. @param aByte The byte to encrypt. @param output The stream to write to. @throws IOException If there is an error writing to the output stream.
414 Combine the diacritic, for example, convert non-combining diacritic characters to their combining counterparts. @param str String to normalize @return Normalized string
415 Return true if the given {@code codepoint} is a prohibited character as defined by <a href="https://tools.ietf.org/html/rfc4013#section-2.3">RFC 4013, Section 2.3</a>.
416 Computes the version number of the {@link SecurityHandler} based on the encryption key length. See PDF Spec 1.6 p 93 and <a href="https://www.adobe.com/content/dam/acom/en/devnet/pdf/adobe_supplement_iso32000.pdf">PDF 1.7 Supplement ExtensionLevel: 3</a> and <a href="http://intranet.pdfa.org/wp-content/uploads/2016/08/ISO_DIS_32000-2-DIS4.pdf">PDF Spec 2.0</a>. @return The computed version number.
417 Returns the provider to be used for advanced encrypting/decrypting. Default is the BouncyCastleProvider. @return the security provider
418 This will get the text value of an element. @param node The node to get the text value for. @return The text of the node.
419 Write a Java string to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
420 Fetches the predefined CMap from disk (or cache). @param cMapName CMap name @return The predefined CMap, never null. @throws IOException
421 Parse the given CMap. @param randomAccessRead the source of the CMap to be read @return the parsed CMap
422 Gets alternative names, as seen in some PDFs, e.g. PDFBOX-142.
423 Calculate the points of a line with Bresenham's line algorithm <a href="http://en.wikipedia.org/wiki/Bresenham's_line_algorithm">Bresenham's line algorithm</a> @param x0 coordinate @param y0 coordinate @param x1 coordinate @param y1 coordinate @return all the points on the rasterized line from (x0, y0) to (x1, y1)
424 Calculate the degree value of a triangle. @param p 3 vertices coordinates @return number of unique points in the 3 vertices of a triangle, 3, 2 or 1
425 Adds the given FontBox font to the cache. @param info the FontInfo to be used as key @param font the font to be cached
426 Returns the FontBox font associated with the given FontInfo. @param info the FontInfo of the cached font @return the cached font if available, otherwise null
427 Adds a top-priority substitute for the given font. @param match PostScript name of the font to match @param replace PostScript name of the font to use as a replacement
428 Finds the named font with the given format.
429 Returns the substitutes for a given font.
430 This will take a character code and get the name from the code. @param code character code @return PostScript glyph name
431 Returns the Type 2 charstring for the given CID, or null if the substituted font does not contain Type 2 charstrings. @param cid CID @return the Type 2 charstring for the given CID or null @throws IOException if the charstring could not be read
432 Returns the CID for the given character code. If not found then CID 0 is returned. @param code character code @return CID
433 Returns the packed RGB value for this color, if any. @return RGB @throws IOException if the color conversion fails @throws UnsupportedOperationException if this color value is a pattern.
434 Computes the backdrop removal equation. <code>C = Cn + (Cn - C0) * (alpha0 / alphagn - alpha0)</code>
435 Get the data of this chunk as a byte array @return a byte-array with only the data of the chunk
436 Returns the font's glyph list.
437 extract all useful "cmap" subtables.
438 Returns true if the fsType in the OS/2 table permits embedding.
439 Returns true if the fsType in the OS/2 table permits subsetting.
440 Returns the Unicode character sequence for the given glyph name, or null if there isn't any. @param name PostScript glyph name @return Unicode character(s), or null.
441 Creates a PDColor containing the given color component values and pattern name. @param components array of color component values @param patternName the name of a pattern in a pattern dictionary @param colorSpace color space in which the pattern/components are defined
442 Returns the given raster as BufferedImage with the given awtColorSpace using a ComponentColorModel. @param raster the source raster @param awtColorSpace the AWT colorspace @return a BufferedImage in this colorspace
443 Returns the (A)RGB equivalent of the given raster, using the given AWT color space to perform the conversion. @param raster the source raster @param colorSpace the AWT @return an (A)RGB buffered image
444 Returns true if the given profile represents sRGB. (unreliable on the data of ColorSpace.CS_sRGB in openjdk)
445 Returns the type of the color space in the ICC profile. If the ICC profile is invalid, the type of the alternate colorspace is returned, which will be one of {@link ColorSpace#TYPE_GRAY TYPE_GRAY}, {@link ColorSpace#TYPE_RGB TYPE_RGB}, {@link ColorSpace#TYPE_CMYK TYPE_CMYK}, or -1 if that one is invalid. @return an ICC color space type. See {@link ColorSpace#getType()} and the static values of {@link ColorSpace} for more details.
446 Initialize the encoder and set all final fields
447 High-quality image scaling.
448 Convert this image to a COS object. @return The cos object that matches this image object.
449 Constructor of Patch. @param color 4 corner's colors
450 This will get the current clipping path. Do not modify this Area object! @return The current clipping path.
451 Construct the text block from a single value. Constructs the text block from a single value splitting into individual {@link Paragraph} when a new line character is encountered. @param textValue the text block string.
452 {@inheritDoc}
453 Returns the <code>Matrix</code> entry for the appearance stream form XObject. @return Matrix for appearance stream form XObject.
454 Computes parameters for a cloudy polygon: n, alpha, and dx.
455 Flattens an ellipse into a polygon.
456 Returns true if the given path is rectangular.
457 @return template height
458 @param x - x coordinate @param y - y coordinate @return Visible Signature Configuration Object
459 @param affineTransform the affine transformation @return Visible Signature Configuration Object
460 @param node @throws IllegalArgumentException if the given node is part of a list (i.e. if it has a previous or a next sibling)
461 @return An {@link Iterable} view of the items children
462 Sets high-quality rendering hints on the current Graphics2D.
463 PDFBOX-5715 / PR#73: This was added to fix a problem with missing fine lines when printing on MacOS. Lines vanish because CPrinterJob sets graphics scale to 1 for Printable so after scaling lines often have a width smaller than 1 after scaling and clipping. This change enlarges the clip bounds to cover at least 1 point plus 0.5 on one and another side in the device space to allow to draw the linePath inside the clip. The linePath can consists from different lines but when its bounds width or height is less than 1.0 it seems safe to use a rectangle as a clip instead of the real path. A more detailed explanation can be read <a href="https://github.com/apache/pdfbox/pull/173">here</a>. @param linePath @return
464 Calculates the subsampling frequency for a given PDImage based on the current transformation and its calculated transform. Extend this method if you want to use your own strategy. @param pdImage PDImage to be drawn @param at Transform that will be applied to the image when drawing @return The rounded-down ratio of image pixels to drawn pixels. Returned value will always be &gt;=1.
465 Returns the closest integer which is larger than the given number. Uses BigDecimal to avoid floating point error which would cause gaps in the tiling.
466 Return the X starting coordinate of the text, adjusted by the given rotation amount. The rotation adjusts where the 0,0 location is relative to the text. @param rotation Rotation to apply (0, 90, 180, or 270). 0 will perform no adjustments. @return X coordinate
467 This will get the y position of the character with 0,0 in lower left. This will be adjusted by the given rotation. @param rotation Rotation to apply to text to adjust the 0,0 location (0,90,180,270) @return The y coordinate of the text
468 Get the length or width of the text, based on a given rotation. @param rotation Rotation that was used to determine coordinates (0,90,180,270) @return Width of text in display units
469 Write the string in TextPosition to the output stream. @param text The text to write to the stream. @throws IOException If there is an error when writing the text.
470 Show the string data for this text position. @return A human readable form of this object.
471 Get the text for the region, this should be called after extractRegions(). @param regionName The name of the region to get the text from. @return The text that was identified in that region.
472 Start a new article, which is typically defined as a column on a single page (also referred to as a bead). Default implementation is to do nothing. Subclasses may provide additional information. @param isLTR true if primary direction of text is left to right. @throws IOException If there is any error writing to the stream.
473 End an article. Default implementation is to do nothing. Subclasses may provide additional information. @throws IOException If there is any error writing to the stream.
474 Write the line separator value to the output stream. @throws IOException If there is a problem writing out the line separator to the document.
475 Write the word separator value to the output stream. @throws IOException If there is a problem writing out the word separator to the document.
476 Write something (if defined) at the start of a paragraph. @throws IOException if something went wrong
477 Write something (if defined) at the start of a page. @throws IOException if something went wrong
478 Write something (if defined) at the end of a page. @throws IOException if something went wrong
479 Handles the LTR and RTL direction of the given words. The whole implementation stands and falls with the given word. If the word is a full line, the results will be the best. If the word contains of single words or characters, the order of the characters in a word or words in a line may wrong, due to RTL and LTR marks and characters! Based on http://www.nesterovsky-bros.com/weblog/2013/07/28/VisualToLogicalConversionInJava.aspx @param word The word that shall be processed @return new word with the correct direction of the containing characters
480 This method parses the bidi file provided as inputstream. @param inputStream - The bidi file as inputstream @throws IOException if any line could not be read by the LineNumberReader
481 Same as {@link #getUnicode()} except that returned text is ensured to be visually ordered (i.e. same order you would see them displayed on screen when looking from left to right). This is important for Arabic/Hebrew where several unicode characters can be composed in one glyph with logical order (the order in which it would be normally typed from right to left). @return The string on the screen in visual order.
482 {@inheritDoc}
483 @return True if the current character is a diacritic char.
484 Update the zone ID based on the raw offset. This is either GMT, GMT+hh:mm or GMT-hh:mm, where n is between 1 and 14. The highest negative hour is -14, the highest positive hour is 12. Zones that don't fit in this schema are set to zone ID "unknown". @param tz the time zone to update.
485 Returns a hex string of the given byte. @param b the byte to be converted @return the hex string representing the given byte
486 Returns a hex string of the given byte array. @param bytes the bytes to be converted @return the hex string representing the given bytes
487 Returns the bytes corresponding to the ASCII hex encoding of the given byte. @param b the byte to be converted @return the ASCII hex encoding of the given byte
488 Returns the bytes corresponding to the ASCII hex encoding of the given bytes. @param bytes the bytey to be converted @return the ASCII hex encoding of the given bytes
489 Writes the given byte as hex value to the given output stream. @param b the byte to be written @param output the output stream to be written to @throws IOException exception if anything went wrong
490 Decode a base64 String. @param base64Value a base64 encoded String. @return the decoded String as a byte array. @throws IllegalArgumentException if this isn't a base64 encoded string.
491 Creates a matrix with the same elements as the given AffineTransform. @param at matrix elements will be initialize with the values from this affine transformation, as follows: scaleX shearY 0 shearX scaleY 0 transX transY 1
492 Transforms the given point by this matrix. @param point point to transform
493 Fast variant to format a floating point value to a ASCII-string. The format will fail if the value is greater than {@link Long#MAX_VALUE}, smaller or equal to {@link Long#MIN_VALUE}, is {@link Float#NaN}, infinite or the number of requested fraction digits is greater than {@link #MAX_FRACTION_DIGITS}. When the number contains more fractional digits than {@code maxFractionDigits} the value will be rounded. Rounding is done to the nearest possible value, with the tie breaking rule of rounding away from zero. @param value The float value to format @param maxFractionDigits The maximum number of fraction digits used @param asciiBuffer The output buffer to write the formatted value to @return The number of bytes used in the buffer or {@code -1} if formatting failed
494 Returns the version of PDFBox. @return the version of PDFBox
495 This will parse an XML stream and create a DOM document. @param is The stream to get the XML from. @param nsAware activates namespace awareness of the parser @return The DOM document. @throws IOException It there is an error creating the dom.
496 Return the most specific value stored for this byte sequence. If not found, returns <code>null</code> or a default values as specified by calling {@link ByteTrie#setDefaultValue}. @param bytes @return
