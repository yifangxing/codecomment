1 Initializes an empty OperatorName instance.
2 Initializes an OperatorProcessor instance with the given PDFStreamEngine context. @param context the parent engine context
3 Initializes a new COSBase instance.
4 Initializes the COSUpdateState with provided COSUpdateInfo. @param updateInfo COSUpdateInfo object containing update details
5 Initializes DecodeOptions instance with default settings.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion rectangle defining the source area
7 Initializes decoder options with uniform subsampling. @param subsampling X and Y subsampling factor (same value used for both)
8 Initializes a new instance of the Filter class.
9 Initializes PageExtractor with a PDDocument and page range. @param sourceDocument the document to extract pages from @param startPage starting page index (inclusive) @param endPage ending page index (inclusive)
10 Initializes an AbstractXReference instance with specified XReferenceType. @param type XReferenceType enumeration value
11 Initializes ContentStreamWriter with an output stream. @param out target output stream to write content to.
12 Initializes cache creation with stability flag. @param enableStableCache true to enable stable caching, false otherwise
13 Creates PDDocumentCatalog instance from given PDDocument and root dictionary. @param doc target PDDocument @param rootDictionary root dictionary of the catalog
14 Initializes a new instance of PDDocumentInformation from a COSDictionary object. @param dic the dictionary containing document information.
15 Initializes name destination dictionary from COS dictionary. @param dict COS dictionary containing name information
16 Initializes PDDocumentNameDictionary object with document catalog and name dictionary. @param cat PDDocumentCatalog instance @param names COSDictionary containing user names
17 Initializes a new PDF page from the provided COS dictionary. @param pageDictionary COS dictionary containing page metadata.
18 Initializes a new PDPage instance from a COS dictionary and resource cache. @param pageDictionary COS dictionary representing the page @param resourceCache shared cache for resources used by the page
19 Initializes a new instance of PDDictionaryWrapper with the given COS dictionary. @param dictionary the underlying dictionary to be wrapped.
20 Initializes a new PDNameTreeNode from a COSDictionary. @param dict COSDictionary object to initialize with
21 Initializes a new PDPageLabelRange instance from a COSDictionary. @param dict COS dictionary containing label range data
22 Initializes a new PDRange instance from an existing COSArray range. @param range COSArray containing range data
23 Initializes a new PDRange instance from a given COSArray and index. @param range COSArray containing range data @param index starting index within the range array
24 Initializes a new PDStream instance from an existing COSStream. @param str input COSStream to wrap
25 Initializes PDMarkInfo with COSDictionary data. @param dic COSDictionary containing mark info
26 Initializes a new instance of PDMarkedContentReference from a COSDictionary. @param dictionary COSDictionary containing reference data
27 Initializes a new PDObjectReference instance from the given COSDictionary. @param theDictionary COS dictionary containing object reference data
28 Initializes a new PDStructureNode instance from a given COSDictionary. @param dictionary COSDictionary containing node data
29 Initializes a new instance of the Revisions class.
30 Initializes a new instance of PDPropertyList from a COS dictionary. @param dict underlying COS dictionary
31 Initializes a new instance of PDBoxStyle with the given COS dictionary. @param dic COS dictionary representing the box style
32 Initializes access permissions with default settings.
33 Initializes an instance with specified access permissions. @param permissions integer representation of permissions
34 Initializes the PDCryptFilterDictionary instance with the given COS dictionary. @param d the COS dictionary to initialize from
35 Initializes RC4 cipher with 256-byte salt array.
36 Initializes an FDFAnnotation instance from a COS dictionary. @param a COSDictionary containing annotation data
37 Initializes an FDFCatalog instance from a COS dictionary. @param cat the COS dictionary representing the FDF catalog
38 Initializes an instance of FDFDictionary from a COSDictionary object. @param fdfDictionary COSDictionary representation of FDF data
39 Initializes an FDFField object with the provided COSDictionary. @param f COSDictionary containing field data
40 Initializes FDFIconFit with COSDictionary. @param f COSDictionary object containing icon data
41 Initializes an instance of FDFJavaScript with a given JavaScript COS dictionary. @param javaScript COS dictionary containing JavaScript script data
42 Initializes an FDFNamedPageReference object from a COS dictionary. @param r COS dictionary containing reference data
43 Initializes FDFOptionElement with COSArray data. @param o COSArray containing option data
44 Constructs an FDFPage instance from a COSDictionary. @param p COSDictionary representing the PDF page
45 Initializes an instance of FDFPageInfo from a COSDictionary object. @param p COSDictionary containing page information
46 Initializes an FDFTemplate instance from a COS dictionary. @param t COS dictionary containing template data
47 Initializes a new instance of PDFontDescriptor with a given COS dictionary. @param desc COS dictionary containing font descriptor information
48 Initializes a PDFontSetting instance from a COSArray. @param fs COSArray containing font setting data
49 Initializes an empty line dash pattern with default phase.
50 Initializes a PDF color object with specified pattern name and color space. @param patternName unique identifier of the color pattern @param colorSpace color profile to be used for the color
51 Initializes the device N-attributes with the provided COS dictionary. @param attributes COS dictionary containing device N-attributes information
52 Initializes a new PDDeviceNProcess instance from a COSDictionary of attributes.
53 Initializes a PDGamma object from a COSArray. @param array COSArray containing gamma data
54 Initializes a new instance of PDTristimulus from an array of color values. @param array COSArray containing tristimulus data
55 Initializes PDTransparencyGroupAttributes with COSDictionary. @param dic COSDictionary object containing transparency group attributes
56 Initializes Optional Content Properties from COSDictionary. @param props COS dictionary containing properties.
57 Initializes a new instance of the abstract pattern with the provided COS dictionary. @param dictionary COS dictionary containing pattern data
58 Initializes a new instance of PDShading from a COSDictionary. @param shadingDictionary COSDictionary containing shading data
59 Constructs a PDExtendedGraphicsState object from a COSDictionary and ResourceCache. @param dictionary COSDictionary containing graphics state information @param resourceCache ResourceCache for caching resources
60 Initializes a new instance of PDSoftMask with the given PDF dictionary and resource cache. @param dictionary COSDictionary containing mask data @param resourceCache ResourceCache for accessing shared resources
61 Initializes a new paragraph with given text content. @param text input text to be displayed in this paragraph.
62 Initializes a new Word object with given text content. @param text word text to be stored
63 Initializes a new PDAction object with the specified dictionary. @param a COSDictionary containing action data
64 Constructs a utility instance of PDActionFactory.
65 Initializes PDAdditionalActions with a COSDictionary. @param a input COS dictionary containing additional actions data
66 Initializes PDAnnotationAdditionalActions with a dictionary of additional actions. @param a COSDictionary containing annotation actions
67 Initializes catalog additional actions with provided dictionary. @param a COSDictionary containing additional action data
68 Initializes an instance of PDFormFieldAdditionalActions from a COS dictionary. @param a COS dictionary containing additional form field actions.
69 Initializes additional page actions from a COS dictionary. @param a COS dictionary containing action data
70 Initializes a new instance of PDTargetDirectory with the provided COS dictionary. @param dictionary COS dictionary containing target directory data.
71 Initializes a new instance of PDURIDictionary from a COSDictionary. @param dictionary COSDictionary object containing URI data
72 Initializes PDWindowsLaunchParams with a COS dictionary. @param p COSDictionary containing launch parameters
73 Initializes PDAppearanceCharacteristicsDictionary object with COS dictionary. @param dict COSDictionary instance containing appearance characteristics data
74 Initializes PDAppearanceDictionary with a COSDictionary object. @param dictionary COSDictionary containing appearance data
75 Constructs a PDAppearanceEntry instance from a COSDictionary object. @param entry COS dictionary containing appearance data
76 Initializes the border effect dictionary with the provided Cos dictionary. @param dict COS dictionary containing border effect data
77 Initializes PDBorderStyleDictionary with provided COSDictionary. @param dict COSDictionary object to be used as backing store
78 Initializes an external data dictionary with a COS dictionary. @param dictionary COS dictionary to initialize from
79 Initializes a CloudyBorder with given parameters. @param stream ContentStream to draw on @param intensity Border opacity (0.0 - 1.0) @param lineWidth Border width @param rect Bounding box for the border
80 Initializes a new PDPropBuild object from a COSDictionary. @param dict COSDictionary instance containing property build data
81 Initializes PDPropBuildDataDict with a COSDictionary. @param dict COSDictionary instance to initialize from.
82 Initializes PDSeedValue object from COSDictionary. @param dict COSDictionary containing seed value data
83 Initializes an instance of PDSeedValueCertificate from a COS dictionary. @param dict COS dictionary containing certificate data
84 Initializes MDP (Multidimensional Presentation) seed value from COS dictionary. @param dict COS dictionary containing seed value data
85 Initializes PDSeedValueTimeStamp with COSDictionary. @param dict input dictionary to populate object
86 Constructs a new PDSignature instance from a given COSDictionary. @param dict the COSDictionary containing signature data
87 Initializes new SignatureOptions instance with default page number.
88 Initializes PDFTemplateCreator with a PDFTemplateBuilder instance. @param templateBuilder builder used to create PDF templates
89 Default constructor. Initializes internal state.
90 Initializes a new PDF form field object with the given AcroForm, COS dictionary and parent field.
91 Initializes a new instance of PDXFAResource with the given XFA base. @param xfaBase COSBase object representing the XFA resource.
92 Initializes a new instance of PDMeasureDictionary from an existing COSDictionary. @param dictionary COSDictionary containing measurement data
93 Constructs a PDNumberFormatDictionary instance from a COSDictionary. @param dictionary input COSDictionary to initialize the instance
94 Constructs a PDViewportDictionary instance from a COSDictionary object. @param dictionary COSDictionary containing viewport data
95 Initializes a new PDThread instance from a COSDictionary representation. @param t COSDictionary containing thread data
96 Constructs a PDThreadBead object from a given COSDictionary. @param b COS dictionary containing thread bead data
97 Initializes viewer preferences from a given dictionary. @param dic COSDictionary object containing viewer preference settings
98 Initializes PageDrawerParameters object with provided settings. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed flag for subsampling support
99 Initializes an empty LineItem with no text position.
100 Initializes a default Matrix with a 3x3 affine transformation matrix.
101 Initializes Matrix with a 1D array of floats. @param src 1D array containing matrix data
102 Initializes a Matrix with the given coefficients. @param a, b, c, d, e, f matrix coefficients
103 Initializes an empty instance of XMLUtil.
104 Initializes a new instance of PDFStreamEngine.
105 Adds an operator processor to the internal registry. @param op OperatorProcessor instance to register
106 Sets the character terminator within a specified range. @param term valid character (118-126, excluding 'z')
107 Sets the number of pages to split content at. @param split positive integer indicating page count
108 Sets the start page number, validating it's greater than zero. @param start the desired start page number
109 Sets the end page number. @param end valid non-zero integer end page value
110 Configures whether to perform lenient parsing. @param lenient true for lenient, false otherwise
111 Initializes CompressParameters with object stream size. @param objectStreamSize positive integer representing the stream size
112 Sets the graphics blending mode. @param blendMode valid BlendMode enumeration value
113 Initializes a PDFieldTree from an existing PDAcroForm. @param acroForm root PDAcroForm to create tree from
114 Returns the length of the COS stream. @throws IllegalStateException if an OutputStream is associated with this COSStream
115 Initializes an empty list to store source PDF files.
116 Initializes a new COSWriterObjectStream instance with the provided compression pool. @param compressionPool Compression pool to be used by the stream writer
117 Initializes text clipping buffer to hold individual clipping areas.
118 Adds a file to the collection of sources. @param source File object representing the new source
119 Adds a new RandomAccessRead source to the collection. @param source the source object to be added
120 Adds a user instruction to the list. @param name user-provided instruction text
121 Adds an InstructionSequence to the collection of instructions. @param child InstructionSequence object to be added
122 Adds a new recipient to the list. @param recipient PublicKeyRecipient object to be added
123 Adds a new region with specified name and bounding rectangle. @param regionName unique identifier for the region @param rect bounding rectangle of the region
124 Sets the trailer for the current cross reference object. @param trailer COSDictionary representing the trailer data
125 Retrieves an object from the key pool by its unique identifier. @param key unique identifier of the object to fetch
126 Retrieves an Operator instance by name. @param operatorName unique identifier of the Operator
127 Retrieves the name of a Unicode character from its sequence. @param unicodeSequence unique Unicode sequence identifier @return character name as string, or ".notdef" if not found
128 Retrieves the current graphics state from the stack. @return GraphicsState object at top of the stack
129 Removes the current graphics state from the stack and restores the previous one. @throws StackEmptyException if stack is empty
130 Returns the number of elements in the graphics stack. @return size of graphics stack
131 Applies matrix transformation to point coordinates. @param x x-coordinate of the point @param y y-coordinate of the point @return transformed point coordinates as Point2D.Float object
132 Decreases the current level by one and logs an error if it becomes negative.
133 Adds an integer to the collection of instructions. @param value the integer to be added
134 Verifies COSStream is not closed before attempting to read from it. @throws IOException if COSStream has been closed
135 Throws an IOException when attempting to reset. @throws IOException always, as reset is unsupported
136 Throws an IOException when attempting to reset.
137 Retrieves PDEncryption object associated with parsed document. @throws IOException if document has not been parsed
138 Retrieves access permission for parsed document. @throws IOException if document has not been parsed
139 Constructs an InvalidPasswordException with specified error message. @param message detailed description of invalid password reason
140 Constructs an Operator object from a given string. @param aOperator operator string (must not start with '/')
141 Returns a string representation of this PDFOperator instance. @return formatted string containing the operator's name
142 Returns a string representation of this COS array. @return human-readable string describing the array contents.
143 Returns a string representation of the COSObject instance. The string format is "{key}" where key is obtained from getKey().
144 Retrieves a filter by name, throwing an exception if not found. @param filterName unique filter identifier
145 Adds real value to the collection of instructions. @param value numeric instruction value
146 Sets the visible sign designer's width. @param width new image width @return This PDVisibleSignDesigner instance for chaining
147 Sets image height and updates formatter rectangle parameters. @param height new image height value @return PDVisibleSignDesigner instance for method chaining
148 Calculates the distance between two points. @param ps starting point @param pe ending point @return Euclidean distance or 0 if identical points
149 Calculates the value of the edge equation for a given point. @param p the point to evaluate @param p1 one endpoint of the edge @param p2 the other endpoint of the edge @return the value of the edge equation at point p
150 Initializes PDMarkedContent with a given XML tag and properties. @param tag XML tag name (null for default) @param properties dictionary of content properties
151 Retrieves the name of the pattern type. @return Pattern name as string
152 Retrieves the type of shading. @return string representation of the shading type
153 Retrieves the default value from inheritable attributes. @return default value as a string, or empty string if not found.
154 Unchecks the current attribute value.
155 Checks if the white point coordinates are at (1, 1, 1).
156 Generates color table based on axially shaded function. @return Array of RGB values representing the color table
157 Calculates a color table based on the given factor and shading type. @return array of RGB values representing the color table
158 Creates and returns a list of byte arrays representing the initial code table.
159 Retrieves an object from the collection at the specified index. @param index position of the desired object in the collection
160 Returns an element at the specified index. @param index position of the desired element in the collection
161 Returns the number of elements in the collection. @return size of the collection
162 Returns the number of elements in the collection.
163 Returns the total number of recipients. @return size of recipient collection
164 Checks whether the collection is empty. @return true if the collection contains no elements, false otherwise
165 Checks if this collection is empty. @return true if collection has no elements, false otherwise
166 Removes a PublicKeyRecipient from the collection. @param recipient PublicKeyRecipient to be removed @return true if recipient was found and removed, false otherwise
167 Returns an iterator over the collection of COSBase objects. @return Iterator object containing all COSBase elements in this container.
168 Returns an iterator over this collection's elements. @return Iterator instance wrapping the underlying collection's iterator
169 Returns an iterator over the list of public key recipients. @return Iterator over PublicKeyRecipient objects
170 Converts collection of COSBase objects to list. @return List of COSBase objects
171 Converts COSName objects to a list of name strings.
172 Converts COSString objects to a list of strings.
173 Wraps a primitive boolean in a COSBoolean object and calls the overloaded function. @param value the boolean value to wrap
174 Returns a string representation of this object's value.
175 Writes a PDF indicator (TRUE or FALSE) to the specified output stream. @param output OutputStream to write to
176 Writes PDF NULL bytes to the specified output stream. @param output OutputStream to write the PDF data to
177 Writes specified byte array to output stream. @param data byte array to be written
178 Returns a set of key-value pairs (COSName, COSBase) representing item metadata.
179 Checks if entry has changed between old and new versions. @param oldEntry previous entry object @param newEntry current entry object @return true if change detected, false otherwise
180 Returns the number of items in the collection.
181 Retrieves an item from the internal collection by its unique key. @param key unique identifier of the item to retrieve
182 Returns a set of COS names (keys).
183 Returns a collection of COSBase objects. @return Collection of COSBase objects or empty if none present
184 Adds all entries from the specified dictionary to this collection.
185 Checks if a COSName key exists in the collection. @param name the key to check
186 Tokenizes input string into array on spaces. @param s input string @return array of tokenized strings or null if invalid input
187 Converts string representation to integer value. @param token input string to parse @return parsed integer value or throws NumberFormatException if invalid
188 Returns a string representation of this object as 'FunctionType' followed by its type.
189 Sets the encryption key length to one of the supported values: 40, 128, or 256. @param l valid key length (40, 128, or 256)
190 Sets the start page value to a valid 1-based index. @param startPageValue the new start page value (must be > 0)
191 Sets the end page value. @param endPageValue 1-based page identifier (must be greater than 0)
192 Initializes BruteForceParser with COS document and parser. @param cosDocument COS document to parse @param cosParser COS parser to use for parsing
193 Initializes an empty XrefTrailer object with default table type. @param none
194 Resolves the trailer object at a given byte position.
195 Initializes a PDResources object from the provided COS dictionary. @param resourceDictionary COS dictionary containing resource data
196 Initializes PDResources object with provided dictionary and cache. @param resourceDictionary COSDictionary containing PDF resources @param resourceCache ResourceCache for storing cached resources
197 Initializes a map of built-in mathematical and logical operators.
198 Initializes an AcroForm from a PDF document and COS dictionary. @param doc PDF document to associate with @param form COS dictionary containing AcroForm data
199 Returns the count of trailer entries in the byte position to XREF map.
200 Retrieves an object from the pool using its unique key. @param key unique identifier for the COSObject in the pool @return the associated COSObject instance or null if not found
201 Converts string token to a floating-point number. @param token input string representation of a real value @return parsed float value or throws NumberFormatException if invalid
202 Coerces a float value by returning MAX_VALUE for infinity and -MAX_VALUE for minus infinity, or 0 for values smaller than the smallest representable float.
203 Calculates the text orientation (direction) based on the transformation matrix. @return Orientation in degrees (0-360)
204 Checks if this COSFloat object is equal to another object. @param o the other object to compare with @return true if both objects have the same value, false otherwise
205 Computes the hash code based on the 'value' field. @return The hash code value as an integer.
206 Formats the numeric value into a human-readable string. @return formatted string representation of the value or null if not initialized
207 Writes "null" to the output stream followed by a space. @param output OutputStream to write to
208 Initializes COSIncrement with origin update information. @param incrementOrigin COSUpdateInfo object containing origin details
209 Initializes a new instance of the utility class with a destination PDDocument.
210 Initializes the cache with stability enabled flag. @param enableStableCache true to enable stable caching, false otherwise
211 Checks if the object's update state indicates it needs to be updated. @return true if the object requires an update, false otherwise
212 Checks if the given COSBase object is present in the collection. @param base COSBase instance to search for @return true if found, false otherwise
213 Checks if COSBase instance is excluded from processing. @param base COSBase object to check
214 Adds a COSBase object to the collection. @param object COSBase instance to be added
215 Adds a COSObject to the processed objects list if it's not null. @param base COSObject instance to be added
216 Registers TrueType font to close when application exits. @param ttf TrueTypeFont object to be closed
217 Initializes ASCII85 stream decoder with input stream.
218 Initializes CCITT fax decoder stream. @param stream input stream to read from @param columns number of columns in the image @param type compression type (CCITT T4, T6, or modified Huffman RLE) @param options encoding options (bit-aligned, 2D encoding, fill bits, uncompressed) @param byteAligned whether data is bit-aligned
219 Checks for equality with another object. @param o Object to compare, must be a COSInteger instance
220 Returns a string representation of this COSInt object. @return string in format "COSInt{value}"
221 Writes user value as ISO-8859-1 encoded PDF content to the specified output stream. @param output target output stream for writing PDF data
222 Retrieves value associated with specified key. @param key unique identifier or lookup key @return Value object or null if not found
223 Retrieves the mapped font name from the aliases table. @param fontName original font name @return Mapped font name or null if not found
224 Retrieves selected export values based on the current field value. @return List of String values or empty list if no selection is made
225 Checks if the name field is empty. @return true if name is empty, false otherwise
226 Writes user-provided comment to output stream, enforcing ASCII-only content. @param comment string to be written (must not contain newlines)
227 Writes a newline character to the output stream.
228 Converts input string to UTF-16BE encoded char array. @param text input string @return char array representing the string in UTF-16BE encoding
229 Retrieves the underlying COS object. @return COSBase object or null if not dereferenced
230 Constructs a COSObjectKey with specified object number, generation, and stream index. @param num non-negative object number @param gen non-negative generation number @param index stream index value
231 Computes hash code based on numberAndGeneration field value.
232 Calculates the absolute value of the X scaling factor. @return absolute scaling factor value
233 Calculates the scaling factor for Y-axis based on input values. @return scaling factor as a float value
234 Initializes ASCII85OutputStream with the specified OutputStream. @param out target output stream for encoded data
235 Constructs a COSStandardOutputStream instance with the specified output stream. @param out the underlying output stream to write to.
236 Initializes COSStandardOutputStream with given OutputStream and file position. @param out OutputStream to write to @param position initial file position in bytes
237 Returns a copy of the internal byte array. @return A new byte array containing all elements from the original.
238 Writes an incremental PDF update to a file. @throws IOException if I/O operation fails
239 Returns ASCII representation of bytes as a string. @return ASCII-encoded string or null if failed
240 Checks whether the originating document is accepting updates. @return true if the original document allows updates, false otherwise
241 Converts binary array to a human-readable string. @param bytes input byte array @return String representation or '?' if byte value is unknown
242 Reads an operator string from the input stream. @throws IOException if a read error occurs
243 Converts a string to a byte array using Unicode code point values. @param text input string @return byte array representation of the string or null if invalid input
244 Checks if a given Unicode character exists in the mapping. @param character the Unicode character to check @return true if found, false otherwise
245 Checks if map contains specified key. @param key object to search in map @return true if key exists, false otherwise
246 Checks if font name alias exists in dictionary. @param fontName unique font identifier
247 Returns an unmodifiable map mapping code integers to their corresponding names.
248 Returns an unmodifiable map mapping names to unique codes.
249 Disables updating of existing data by throwing an exception. @throws UnsupportedOperationException always
250 Reads the next byte from an Ascii85 encoded stream. @throws IOException if end of file or invalid data is encountered
251 Closes the file resource and releases associated memory.
252 Writes a single byte to the output stream, potentially triggering ASCII85 transformation and newline writes. @throws IOException if write operation fails
253 Flushes output, writing ASCII85 encoded data and terminator.
254 Pads or truncates input byte array to fixed length. @param password input byte array @return padded byte array of fixed length
255 Closes resources and logs a warning if endText() was not called in text mode.
256 Writes XMP metadata to an output stream. @param xmp XMP metadata as a byte array
257 Determines if page split should occur at specified page number. @param pageNumber current page index
258 Disables modification of this instance's source region. @throws UnsupportedOperationException always thrown.
259 Disables setting subsampling X due to immutable instance restriction.
260 Sets subsampling in Y-axis; operation is unsupported and always throws exception.
261 Disables modification of subsampling offset X. @throws UnsupportedOperationException always, as this instance is immutable.
262 Disables modification of subsampling offset Y.
263 Throws unsupported exception since JPX encoding is not implemented.
264 Throws UnsupportedOperation exception as this class is immutable.
265 Throws an exception when attempting to modify UpperRightX coordinate. This class is immutable and does not allow modifications.
266 Throws an exception when attempting to modify lower left y-coordinate. This property is immutable and cannot be changed.
267 Disallows modification of lower left X coordinate. @throws UnsupportedOperationException always
268 Returns the text content of the signature. @return the signature text or null if not available
269 Returns a PDVisibleSignDesigner instance with custom text. @param signatureText user-provided sign designer text
270 Disables string-based value setting; use setValue(PDSignature value) instead. @throws UnsupportedOperationException always thrown.
271 Returns the current compression level for Deflater. @return Compression level between -1 and BEST_COMPRESSION
272 Checks whether this collection actually contains the specified element. @param o the object to search for @return true if the object is found, false otherwise
273 Initializes FlateFilterDecoderStream with input stream and skips Zlib header.
274 Closes underlying resources and releases this context. @throws IOException if an I/O error occurs during closing
275 Sets the image to be processed and updates dimension parameters. @param image BufferedImage object to process
276 Applies predictor row to the given byte array. @param predictor prediction method code @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of pixels in a row @param actline current line bytes @param lastline previous line bytes
277 Checks if a COSObjectKey is present in the key pool. @param key unique object identifier to search for
278 Checks if a given name exists in the inverted index. @param name unique identifier to search for @return true if found, false otherwise
279 Checks if a given product code exists in the code-to-name mapping. @param code unique product identifier @return true if code found, false otherwise
280 Escapes special XML characters in the input string. @param input String to be processed @return Escaped XML string
281 Sets the bounding box for this object. @param bbox PDRectangle object or null to clear existing bbox
282 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null on error
283 Closes resources and throws the first encountered IOException. @throws IOException if an error occurs during closing
284 Closes the document and associated resources. @throws IOException if an error occurs during closure
285 Returns a COS object, either the underlying function stream or dictionary.
286 Initializes PDXObject with subtype and COS object from the given PDStream. @param stream PDStream containing COS object @param subtype subtype name as a COSName object
287 Returns the COS object associated with this stream. @return COS object or null if not available
288 Retrieves a COS stream containing metadata.
289 Sets metadata for the COSStream object. @param metadata stream containing metadata to be attached
290 Compares this PDAnnotation object with another Object for equality. @param o the object to compare with @return true if objects are equal, false otherwise
291 Returns a set of keys from the underlying map. @return Set of K keys
292 Returns a collection view of the actual values. @return Collection of V objects representing actual values
293 Initializes parser with a source PDF document. @param pdfSource RandomAccessRead object containing the PDF data
294 Checks if the next character in the input stream is a digit. @throws IOException if an I/O error occurs while reading from source
295 Adds or updates an XRef entry with the specified key and offset. @param objKey COSObjectKey representing the XRef entry @param offset long value representing the offset
296 Adds a new code-name mapping to the internal data structures. @param code unique identifier @param name descriptive name associated with the code
297 Checks if the next character in the source stream is whitespace. @throws IOException if an I/O error occurs during peeking
298 Determines whether to skip a line break. @param linebreak character code of the line break @return true if line break is CR or LF, false otherwise
299 Checks for end of input string. @param bracesParameter initial parameter value, updated if necessary @return 0 if end of string found, otherwise the original parameter value
300 Checks if given character is an End-Of-Line marker. @param c character to check @return true if LF or CR, false otherwise
301 Reads a string number from the input stream. @return StringBuilder containing the read number or null if EOF
302 Decodes the provided byte array stream into a UTF-8 encoded string. @param buffer ByteArrayOutputStream containing encoded bytes
303 Verifies the next character in the input stream matches an expected value. @param ec expected character
304 Checks if next character in input stream is whitespace.
305 Parses and returns the start XREF value. @return The byte offset of the first object referenced by the xref or null if not found.
306 Searches for the last EOF marker in the PDF stream. @return The position of the last EOF marker, or Long.MAX_VALUE if not found
307 Searches PDF for Xref table offsets. @return List of Xref table offsets or empty list if not found
308 Retrieves the number of color components based on function or color space type. @return The number of color components (1 if function is valid, otherwise from color space)
309 Searches for XRef streams in the PDF and returns their offsets. @return List of stream offsets or empty list if not found
310 Retrieves cross-reference table from trailer resolver. @return map of object keys to timestamps or null if not available
311 Calculates the offset of the startxref preceding EOF. @throws IOException if unable to read or find markers
312 Reads input stream until encountering the 'endstream' keyword. @param out EndstreamFilterStream to write content to @return length of filtered content
313 Initializes writer mode to Unicode.
314 Stores a page label range at the specified start page. @param startPage non-negative page number @param item PDPageLabelRange object to store
315 Adds a Unicode mapping for the given CID and text. @param cid unique identifier within 0 to FFFF range @param text non-empty string to map to CID
316 Checks if the input stream has binary data after reading a PDF header. @return true if no binary data is detected, false otherwise
317 Checks for space or return character in input buffer. @return true if space or return character found, false otherwise
318 Adds a new reference entry to the collection. @param entry XReferenceEntry object with referenced key
319 Calculates the minimum number of bytes required to display each column. @return array of integers representing min bytes for each column
320 Updates the highest XRef object number pool. @param highestXRefObjectNumber new maximum object reference ID
321 Retrieves the first trailer from the dictionary, or null if empty.
322 Returns the last trailer dictionary in the COSDictionary map. @return LastTrailer object or null if map is empty
323 Retrieves object numbers contained in the given object. @param objstmObjNr object identifier @return set of object numbers or null if trailer is not resolved
324 Retrieves the first numeric value from the type's attribute.
325 Returns the generation value of the referenced key.
326 Returns a human-readable representation of this FreeReference object.
327 Returns value from second column. @return Offset in bytes or 0 if not available
328 Retrieves the generation value from the referenced key. @return Generation value as a long integer
329 Returns a human-readable string representation of the object.
330 Retrieves the value from the second column. @return Number value of the parent key.
331 Returns the value of the third column in the stream. @return long value representing the column's index
332 Returns a human-readable string representation of this ObjectStreamEntry. @return formatted string with key, type, object stream index, and parent
333 Writes bytes to output stream with specified offset and length. @param b byte array to write @param off starting offset in the array @param len number of bytes to write
334 Writes a single byte to the output stream. @param b the byte to be written. @throws IOException if an I/O error occurs while writing.
335 Writes end-of-line character only if not already on a new line.
336 Checks whether compression is enabled based on configuration. @return true if compression is enabled, false otherwise
337 Adds an XReferenceEntry to the collection of existing entries. @param entry XReferenceEntry object to be added
338 Writes an object reference to the given OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing ID and generation of referenced object
339 Retrieves MD5 message digest instance.
340 Retrieves a SHA-1 message digest instance.
341 Retrieves a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing
342 Retrieves the highest XRef object number from the object pool.
343 Returns an unmodifiable list of prepared keys. @return List of COSObjectKey objects
344 Updates the reverse mapping for a given user ID and name. @param code unique user identifier @param name user profile name
345 Removes a region by name from storage. @param regionName unique identifier of the region to be removed
346 Sets maximum decimal places for formatting. @param fractionDigitsNumber the desired number of decimal places
347 Initializes a content stream for the given document and output stream. @param document PDDocument instance to associate with the stream @param outputStream OutputStream to write content to @param resources PDResources instance providing additional data
348 Retrieves the Y-component of the vertical displacement vector for a given code. @param code unique identifier @return Float value representing the Y-displacement or default value if not found
349 Returns value from standardValue unless it's null, then returns defaultValue. @param standardValue nullable Float to return if not null @param defaultValue fallback float value to return when standardValue is null
350 Zooms the sign designer by specified percentage. @param percent zoom factor (e.g. 50 for 50%)
351 Retrieves the width of an image. @return The actual width of the image in pixels.
352 Retrieves the height of an image. @return Image height as a floating-point value.
353 Adjusts the PDVisibleSignDesigner for rotation (90, 180, or 270 degrees). @return This object with updated transformations
354 Creates an AffineTransform object from predefined single matrix values. @return AffineTransform object representing a 2D geometric transformation
355 Encodes input string into a byte array using multi-byte encoding. @param text the input string to encode @return encoded byte array or throws IOException if an error occurs
356 Converts Unicode code point to its corresponding name. @param codePoint integer representation of a single Unicode character
357 Applies GSUB rules to a word and encodes the transformed glyph IDs. @param gsubWorker worker applying the transforms @param out output stream for encoded glyph IDs @param font PDType0Font instance @param word input string with code points @return list of glyph IDs after transformation
358 Initializes a new PDDocument instance from the provided COSDocument and input streams. @param doc COSDocument containing PDF metadata @param source RandomAccessRead stream for reading PDF data @param permission AccessPermission object controlling document access rights
359 Initializes an FDFDocument object with the given COSDocument and input stream. @param doc COSDocument instance @param source input stream for reading FDF data
360 Returns array representation of collection. @return Array containing all elements in this collection.
361 Returns index of specified element in this collection. @param o object to search for
362 Compares this object with the given object based on its internal state. @param o the object to compare with @return true if both objects have the same internal state, false otherwise
363 Returns hash code of the underlying actual object. @return hash code as an integer
364 Returns index of last occurrence of specified element in this list. @param o element to search for
365 Returns a ListIterator instance for traversing this collection. @return iterator over the elements in this collection
366 Returns a list iterator starting at the specified index. @param index index in the underlying list to start iteration from
367 Returns a sublist of elements from the current list within specified range. @param fromIndex starting index (inclusive) of the sublist @param toIndex ending index (exclusive) of the sublist
368 Checks if a specific value exists in the map of actual values. @param value the value to search for
369 Returns an unmodifiable Set of key-value pairs in this map.
370 Returns an unmodifiable set of alias names.
371 Returns a string representation of the actuals. @return Formatted string containing actual values
372 Converts COSBase object to PD object of specified type. @param base COSBase object to convert
373 Generates a string of repeating letter labels based on the input number. @param num input number to determine label length and repetition @return concatenated string of letter labels or null if invalid input
374 Returns total number of page ranges.
375 Retrieves page label range from collection by given start page number. @param startPage starting page number (1-based index) @return PageLabelRange object associated with the start page or null if not found
376 Returns a set of page indices as unique integer keys.
377 Retrieves a copy of the dash array. @return cloned float array representing the dash style
378 Initializes a PDColor object with specified components and color space. @param components array of color components (e.g. RGB or CMYK values) @param colorSpace reference to a PDColorSpace object
379 Copies the color components array, considering the colorspace's component count. @return float[] with updated length if necessary
380 Initializes a CoordinateColorPair object with point and color data. @param p Point2D object representing coordinates @param c array of floating-point values for the color
381 Returns a string representation of FunctionType2, including C0, C1, and N values.
382 Calculates the minimum and maximum X and Y coordinates of a polygon. @return int[] array containing minX, maxX, minY, maxY
383 Removes and returns the top number from the stack. @return Number object or null if stack is empty
384 Removes and returns an integer from the top of the stack. @return the popped integer value
385 Retrieves and returns the real (floating-point) value from the top of the stack. @return real value as a float or throws exception if not available
386 Adds a boolean value to the instruction list. @param value boolean value to be added
387 Initializes ExecutionContext with an operator set. @param operatorSet collection of available operators
388 Retrieves a list of compiled patterns for list item expressions. @return List of Pattern objects or null if initialized
389 Converts an object array to a comma-separated string. @param array array of objects to convert
390 Converts a float array to a comma-separated string. @param array input float array @return formatted string representation of the array or null if empty
391 Adds given text at specified position to contents list. @param text Text object containing text and position information
392 Adds marked content to the collection. @param markedContent PDMarkedContent object to be added
393 Adds an XObject to the contents. @param xobject PDXObject instance to be added
394 Sets whether printing is allowed. @param allowPrinting true to enable or false to disable printing
395 Updates permission to modify based on input flag. @param allowModifications true to enable modification or false otherwise
396 Sets permission to extract content based on user input. @param allowExtraction true to enable or false to disable extraction
397 Enables or disables modification of annotations. @param allowAnnotationModification true to allow annotation modification, false otherwise
398 Sets whether user can fill in form. @param allowFillingInForm true to enable, false to disable
399 Sets whether accessibility extraction is allowed. @param allowExtraction true to enable, false to disable
400 Sets document assembly permission based on provided flag. @param allowAssembly true to enable or false to disable document assembly
401 Sets whether faithful print is allowed. @param canPrintFaithful true to allow, false otherwise
402 Checks if print permission bit is enabled. @return true if print permission is granted, false otherwise
403 Checks if modification permission bit is set. @return true if user can modify, false otherwise
404 Checks if content extraction permission is enabled. @return true if extract bit is set, false otherwise
405 Checks if annotation modification permission is enabled. @return true if user has permission to modify annotations, false otherwise
406 Checks if user has permission to fill in form. @return true if permission bit is set, false otherwise
407 Checks if the extract for accessibility permission bit is enabled. @return true if enabled, false otherwise
408 Checks if document assembly permission is enabled. @return true if permission is granted, false otherwise
409 Checks if faithful printing permission bit is enabled. @return true if enabled, false otherwise
410 Retrieves a private key from the keystore, either by iterating through aliases or using a specific alias. @throws KeyStoreException if the key cannot be retrieved or the keystore does not contain the given alias. @throws UnrecoverableKeyException if the private key is not recoverable. @throws NoSuchAlgorithmException if the necessary algorithm to recover the key is unavailable.
411 Retrieves a secure random number generator instance. @return a SecureRandom object, either a custom instance or the default one
412 Initializes the key using the provided byte array. @param key input key bytes
413 Writes a byte to the output stream with XOR encryption using a rotating salt array. @param aByte the byte to encrypt @param output the output stream to write the encrypted byte to
414 Combines diacritic characters in the input string. @param str input string to combine diacritics from
415 Checks if a Unicode code point is prohibited from use. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
416 Calculates the version number based on key length and AES preference. @return int representing the version number
417 Returns singleton instance of Bouncy Castle cryptographic provider.
418 Extracts text value from an XML Element. @param node the element to parse @return concatenated text values or empty string if none found
419 Writes string to output stream. @param text input string to be written
420 Retrieves a predefined CMap by name, falling back to parsing if not cached. @param cMapName unique name of the predefined CMap @return CMap object or null if parsing fails
421 Parses a CMap from the provided RandomAccessRead. @param randomAccessRead input data stream @return parsed CMap object or null if invalid
422 Returns a set of PostScript font names for the given name. @param postScriptName unique PostScript font identifier @return Set containing original and hyphen-less variant names
423 Calculates line points between two coordinates. @param x0 initial X coordinate @param y0 initial Y coordinate @param x1 end X coordinate @param y1 end Y coordinate @return Set of Point objects representing the line
424 Calculates the number of unique points in an array. @param p array of Point2D objects @return count of distinct points
425 Adds a font to the cache with its associated information. @param info FontInfo object containing font metadata @param font FontBoxFont object representing the font to add
426 Retrieves cached FontBoxFont instance based on provided FontInfo. @param info Font information object @return FontBoxFont object or null if not found in cache
427 Adds a string substitution rule to the cache. @param match regular expression pattern to match @param replace replacement string for matched patterns
428 Retrieves FontInfo by PostScript name and format. @param format FontFormat to match @param postScriptName unique font identifier (may be subset-adjusted) @return FontInfo object or null if not found matching the given format
429 Retrieves list of substitutes for given PostScript name. @param postScriptName unique identifier
430 Retrieves string representation of given code value. @param code unique identifier @return corresponding name or ".notdef" if not found
431 Retrieves the Type 2 character string for a given CID. @param cid unique identifier @return Type 2 char string or null if not available
432 Converts internal code to CID (Code Identifier). @param code internal code value @return corresponding CID value or -1 if invalid
433 Converts color components to a single RGB integer value. @return RGB integer or throws IOException on conversion failure
434 Calculates the blended color value for backdrop removal. @param groupRGB RGB value of the group @param backdropRGB RGB value of the backdrop @param shift bit shift to apply @param alphaFactor blending factor (0-1) @return blended color value (0-255)
435 Returns a subset of bytes starting from 'start' index with specified 'length'.
436 Retrieves Adobe glyph list. @return GlyphList instance containing Adobe glyphs
437 Extracts the "cmap" table from the TTF and initializes relevant subtables.
438 Checks whether TrueTypeFont embedding is permitted. @param ttf TrueTypeFont object to check
439 Checks if subsetting is permitted for the given TrueType font. @param ttf TrueTypeFont object to check
440 Converts a string to its Unicode representation. @param name input string @return the Unicode equivalent or null if not found
441 Constructs a PDColor object from the specified components, pattern name, and color space. @param components array of color components @param patternName COSName identifier for the pattern @param colorSpace PDColorSpace representing the color model
442 Creates a raw image from the given WritableRaster and ColorSpace. @param raster WritableRaster to create the image from @param awtColorSpace ColorSpace for the resulting image @return BufferedImage containing the raw image data
443 Converts WritableRaster to RGB BufferedImage using specified ColorSpace. @param raster input raster data @param colorSpace target color space @return RGB BufferedImage or null for tiny images (1x1)
444 Checks if the provided ICC profile is in sRGB color space. @param profile ICC profile to check @return true if the profile represents the sRGB color space, false otherwise
445 Determines the color space type based on the ICC profile or alternate settings. @return ColorSpace type (TYPE_GRAY, TYPE_RGB, TYPE_CMYK, etc.) or -1 for invalid configuration
446 Initializes PredictorEncoder with PDDocument and BufferedImage. @param document input PDF document @param image input image to encode
447 Resizes and interpolates an image to the specified dimensions. @param image original image @param width new width @param height new height @param type image format (e.g. TYPE_BYTE_GRAY, TYPE_INT_RGB) @param interpolate whether to perform interpolation (true) or not (false) @return resized image or null on error
448 Returns the underlying COS dictionary representation of this object. @return COSDictionary instance representing the object's internal structure
449 Sets patch corner color from provided 2D array. @param color 2D array of float values representing patch colors
450 Calculates and returns the intersected overall area of all clipping paths.
451 Initializes a new TextAttribute instance with the given name. @param name unique identifier for this text attribute.
452 Calculates hash code based on dictionary content. @return unique integer hash value
453 Returns an AffineTransform matrix for translating the bounding box. @return AffineTransform object representing translation by -bboxMinX and -bboxMinY
454 Computes parameters for a polygon segment based on intermediate and corner advances. @param advInterm intermediate advance @param advCorner corner advance @param k curvature factor @param r radius @param length polygon segment length @param array output array containing alpha and dx values @return number of intermediate curls in the current polygon segment or -1 if invalid input
455 Flattens an ellipse into a series of connected line segments. @param left ellipse's left x-coordinate @param bottom ellipse's bottom y-coordinate @param right ellipse's right x-coordinate @param top ellipse's top y-coordinate @return array of Point2D.Double objects representing the flattened ellipse
456 Checks if a GeneralPath represents a rectangular shape. @param path the input GeneralPath @return true if the path is rectangular, false otherwise
457 Returns the height of the current page's template.
458 Sets coordinates and returns designer instance. @param x horizontal coordinate @param y vertical coordinate @return PDVisibleSignDesigner instance for chaining calls
459 Applies an affine transformation to this designer. @param affineTransform transformation matrix @return This designer instance with updated transformation
460 Ensures a PDOutlineItem node has no siblings. @param node the item to validate
461 Returns an iterable sequence of child outline items. @return Iterable<PDOutlineItem> iterator over child items
462 Sets rendering hints for graphics context.
463 Adjusts a GeneralPath for clipping based on the current graphics transform. @param linePath path to adjust
464 Calculates optimal subsampling factor based on image size and transform determinant. @param pdImage input PDImage object @param at AffineTransform object @return integer subsampling factor (1-8)
465 Rounds input number up to nearest integer with 5 decimal places. @param num input number to be rounded up
466 Calculates the X rotation based on input rotation value. @param rotation angle of rotation in degrees @return X position or 0 if invalid rotation
467 Calculates Y-coordinate for lower-left rotation point based on given rotation angle. @param rotation rotation angle in degrees @return calculated Y-coordinate or 0 if invalid rotation angle provided
468 Calculates the width of a rotated rectangle. @param rotation angle in degrees (90 or 270 returns height, others return width)
469 Writes Unicode characters from the provided TextPosition to the output stream. @param text TextPosition containing Unicode code points to be written
470 Returns a string representation of this object using Unicode encoding.
471 Retrieves formatted text for a given region. @param regionName name of the region
472 Begins writing an article, specifying LTR (Left-To-Right) language direction. @param isLTR true to indicate Left-To-Right language, false otherwise
473 Writes article end content to output stream. @throws IOException if write operation fails
474 Writes line separator to output stream.
475 Writes the word separator to the output stream.
476 Writes start of a paragraph, resetting the paragraph flag. @throws IOException on write error
477 Writes the start of an HTML page to the output stream.
478 Writes page end content to output stream.
479 Reorders Unicode text based on bidi direction. @param word input text string @return reordered text with mirrored characters corrected
480 Parses BIDI file contents from input stream, populating mirroring character map. @param inputStream ASCII-encoded input stream containing BIDI file data
481 Determines if the Unicode string requires visual reversal. @return The original string or its reversed version if RTL characters are present
482 Processes a text position within the current region. @param text TextPosition object to process
483 Checks if a character is a diacritic. @return true if the character represents a diacritic, false otherwise
484 Updates Timezone ID based on offset and timezone. @param tz Timezone object to update
485 Converts a byte to its hexadecimal string representation. @param b input byte value
486 Converts a byte array to a hexadecimal string representation. @param bytes input byte array @return hex-encoded string or null (not applicable)
487 Converts a single byte to its hexadecimal representation as two bytes. @param b the input byte @return array of two bytes representing the high and low nibbles of b
488 Converts binary bytes to ASCII-formatted hexadecimal string. @param bytes binary byte array @return formatted byte array or null if invalid input
489 Writes a byte as two hexadecimal digits to the specified output stream. @param b single byte value @param output output stream to write to
490 Decodes a Base64-encoded string. @param base64Value encoded data as a string @return byte array representation of the decoded data
491 Initializes a Matrix instance from an AffineTransform. @param at the AffineTransform to convert
492 Applies linear transformation to the given 2D point. @param point Point2D object to transform
493 Formats a float value into an ASCII string with specified maximum fraction digits. @param value the float value to format @param maxFractionDigits maximum number of decimal places to display @param asciiBuffer buffer to store formatted result @return length of the resulting string or -1 on error
494 Retrieves the PDFBox library version from a properties file. @return String representation of the version or null on failure
495 Parses an XML document from the given InputStream. @param is input stream containing the XML data @param nsAware whether to make the parser namespace-aware @return Document object representing the parsed XML, or null if parsing fails
496 Searches for a value in the trie by traversing children based on bytes. @param bytes array of bytes to search @return T object or null if not found
