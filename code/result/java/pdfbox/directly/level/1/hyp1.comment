1 Private constructor to prevent instantiation of the class.
2 Initializes an OperatorProcessor with a given PDFStreamEngine. @param context the PDF processing engine to use
3 Initializes a new instance of COSBase.
4 Initializes a new instance of COSUpdateState with given update information. @param updateInfo details about the update
5 Default constructor for DecodeOptions.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion defines the area to decode
7 Initializes DecodeOptions with uniform subsampling. @param subsampling value for both X and Y subsampling
8 Default constructor for Filter class.
9 Initializes a PageExtractor with a document and page range. @param sourceDocument the PDF document to extract pages from @param startPage the starting page index (inclusive) @param endPage the ending page index (exclusive)
10 Initializes XrefParser with a COSParser. @param cosParser the COSParser instance to use
11 Initializes an XReference with a specified type. @param type the XReferenceType to set
12 Initializes a new ContentStreamWriter with an output stream. @param out the OutputStream to write content to
13 Initializes cache creation with stable cache option. @param enableStableCache flag to enable or disable stable cache
14 Initializes a new PDDocumentCatalog. @param doc the PDDocument to associate with this catalog @param rootDictionary the root dictionary for the catalog
15 Initializes document information from a dictionary. @param dic dictionary containing document metadata
16 Initializes a new PDDocumentNameDestinationDictionary with the given dictionary. @param dict COSDictionary containing name destination information
17 Initializes a new document name dictionary. @param cat PDDocumentCatalog instance @param names COSDictionary containing names
18 Initializes a new PDPage with a given COS dictionary. @param pageDictionary Dictionary representing the PDF page
19 Constructs a PDPage from a COSDictionary and resource cache. @param pageDictionary PDF dictionary representing the page @param resourceCache cache for resources like fonts and images
20 Initializes a COSDictionaryMap with provided maps. @param actualsMap backing map for actual values @param dicMap COSDictionary to map keys to values
21 Initializes a new PDDictionaryWrapper with the given COSDictionary. @param dictionary the underlying COSDictionary to wrap
22 Initializes a PDNameTreeNode with a given dictionary. @param dict the COSDictionary to initialize the node with
23 Initializes a PDNumberTreeNode with a dictionary and value class. @param dict the COSDictionary containing node data @param valueClass the class type of values in the node
24 Initializes a PDPageLabelRange with a given dictionary. @param dict COSDictionary containing page label information
25 Initializes a PDRange with a given COSArray. @param range the COSArray representing the range
26 Initializes a PDRange with a given COSArray and an index. @param range the COSArray containing the range values @param index the starting index within the array
27 Constructs a PDStream from a COSStream. @param str underlying COSStream object
28 Initializes PDMarkInfo with a given COSDictionary. @param dic the COSDictionary to initialize with
29 Initializes a new instance with a given COSDictionary. @param dictionary COSDictionary to be used
30 Initializes a PDObjectReference with a given COSDictionary. @param theDictionary the dictionary to be used for initialization
31 Initializes a new PDStructureNode with a given COSDictionary. @param dictionary the underlying COSDictionary
32 Constructs a new Revisions object.
33 Initializes a property list with a given dictionary. @param dict COSDictionary containing properties
34 Initializes a new PDBoxStyle with a given dictionary. @param dic COSDictionary containing style information
35 Initializes AccessPermission with default settings. Sets bytes to DEFAULT_PERMISSIONS.
36 Constructs an AccessPermission with specified integer value. @param permissions integer representing access permissions
37 Initializes a new PDCryptFilterDictionary with the given COSDictionary. @param d the COSDictionary to initialize with
38 Initializes the RC4 cipher with a 256-element salt array.
39 Initializes a new FDF annotation with the given COS dictionary. @param a COS dictionary representing the annotation
40 Initializes a new FDFCatalog with a given COSDictionary. @param cat COSDictionary representing the catalog data
41 Constructs an FDFDictionary from a COSDictionary. @param fdfDictionary the underlying COSDictionary to use
42 Constructs an FDFField with a given COSDictionary. @param f COSDictionary representing the field data
43 Initializes FDFIconFit with given dictionary. @param f COSDictionary to be used for fitting
44 Constructs an FDFJavaScript object with the given COSDictionary. @param javaScript the COSDictionary containing JavaScript data
45 Initializes a new FDFNamedPageReference with a COSDictionary. @param r COSDictionary representing the reference
46 Initializes an FDFOptionElement with a COSArray. @param o the COSArray representing the option
47 Constructs an FDFPage with the given dictionary. @param p COSDictionary representing the page data
48 Initializes FDFPageInfo with given dictionary. @param p COSDictionary containing page information
49 Initializes a new FDFTemplate with a given COSDictionary. @param t COSDictionary representing the template
50 Initializes a font descriptor with a given dictionary. @param desc dictionary containing font descriptor information
51 Constructs a PDFontSetting with a given COSArray. @param fs COSArray representing font settings
52 Initializes an empty line dash pattern with no dashes.
53 Initializes a new BlendMode with specified parameters. @param name the COSName representing the blend mode @param blendChannel the channel-specific blending function @param blend the overall blending function
54 Constructs a PDColor with a specified pattern name and color space. @param patternName the name of the pattern @param colorSpace the color space for the color
55 Initializes a new PDDeviceNAttributes instance with given attributes. @param attributes COSDictionary containing device N attributes
56 Initializes a PDDeviceNProcess with given attributes. @param attributes COSDictionary containing process attributes
57 Initializes PDGamma with a COSArray. @param array COSArray containing gamma values
58 Constructs a PDTristimulus from a COSArray. @param array the COSArray containing the tristimulus values
59 Constructs a PDTransparencyGroupAttributes with given COSDictionary. @param dic COSDictionary containing transparency group attributes
60 Initializes PDF optional content properties with given dictionary. @param props COSDictionary containing properties
61 Initializes a pattern with a given dictionary. @param dictionary COSDictionary containing pattern properties
62 Initializes a new instance of PDShading with a given COSDictionary. @param shadingDictionary the COSDictionary representing the shading
63 Initializes a PDExtendedGraphicsState with a COSDictionary and ResourceCache. @param dictionary the COSDictionary containing graphics state information @param resourceCache the ResourceCache for managing resources
64 Initializes a PDSoftMask with given dictionary and resource cache. @param dictionary PDF dictionary containing mask properties @param resourceCache cache for managing resources
65 Initializes a new PDAction with a given COSDictionary. @param a dictionary representing the action's properties
66 Private constructor to prevent instantiation of utility class.
67 Initializes PDAdditionalActions with a COSDictionary. @param a dictionary containing action data
68 Initializes additional annotation actions from a dictionary. @param a COSDictionary containing action settings
69 Constructs an additional actions catalog. @param a COSDictionary containing action settings
70 Initializes additional field actions with provided dictionary. @param a COSDictionary containing action details
71 Constructs a new instance with the given dictionary. @param a COSDictionary containing page actions
72 Initializes a PDTargetDirectory with a COSDictionary. @param dictionary the COSDictionary to initialize with
73 Initializes a new instance of PDURIDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
74 Constructs PDWindowsLaunchParams with a given dictionary. @param p COSDictionary containing launch parameters
75 Constructs a PDAppearanceCharacteristicsDictionary from a COSDictionary. @param dict dictionary containing appearance characteristics
76 Initializes a PDAppearanceDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to use
77 Constructs a PDAppearanceEntry from a COSDictionary. @param entry dictionary containing appearance data
78 Initializes a new border effect dictionary. @param dict COSDictionary containing border effect properties
79 Constructs a border style from a COS dictionary. @param dict the COS dictionary containing border style information
80 Constructs a new PDExternalDataDictionary from a COSDictionary. @param dictionary the underlying COSDictionary to use
81 Initializes a CloudyBorder with specified parameters. @param stream PDAppearanceContentStream for drawing @param intensity visual intensity of the border @param lineWidth width of the border line @param rect bounding rectangle for the border
82 Constructs a PDPropBuild object with a given COSDictionary. @param dict the COSDictionary to be used for property building
83 Initializes PDPropBuildDataDict with a COSDictionary. @param dict the COSDictionary to be used
84 Initializes a PDSeedValue with a given COSDictionary. @param dict the COSDictionary to be used for initialization
85 Initializes a PDSeedValueCertificate with a given COSDictionary. @param dict the COSDictionary to initialize with
86 Initializes a PDSeedValueMDP with a given COSDictionary. @param dict the COSDictionary to be used
87 Initializes PDSeedValueTimeStamp with a COSDictionary. @param dict the dictionary to be used
88 Initializes a PDSignature with a COSDictionary. @param dict the COSDictionary containing signature data
89 Initializes a new instance of SignatureOptions with default page number.
90 Initializes a new PDF template creator. @param templateBuilder builder object to construct templates
91 Private constructor to prevent instantiation of utility class.
92 Initializes a new PDField. @param acroForm the form containing the field @param field the COSDictionary representing the field @param parent the parent non-terminal field
93 Initializes PDXFA resource with COSBase. @param xfaBase XFA base object to be used
94 Constructs a PDMeasureDictionary from a COSDictionary. @param dictionary the underlying COSDictionary
95 Constructs a number format dictionary. @param dictionary COSDictionary containing number format settings
96 Initializes a PDViewportDictionary with a given COSDictionary. @param dictionary the underlying COSDictionary to be used
97 Constructs a PDThread with a given dictionary. @param t COSDictionary representing the thread
98 Constructs a PDThreadBead with a given COSDictionary. @param b COSDictionary representing the thread bead
99 Initializes PDViewerPreferences with a given dictionary. @param dic COSDictionary containing viewer preferences
100 Initializes parameters for PDF page drawing. @param renderer PDFRenderer instance @param page PDPage to draw @param subsamplingAllowed flag for subsampling images @param destination RenderDestination for output @param renderingHints RenderingHints for image quality @param imageDownscalingOptimizationThreshold threshold for image downscaling
101 Wraps a TextPosition. @param position TextPosition to be wrapped
102 Initializes a 3x3 identity transformation matrix. @param none @return none
103 Initializes a matrix with a source array. @param src source array of float values
104 Initializes a 2x3 transformation matrix. @param a, b, c, d, e, f matrix coefficients
105 Private constructor to prevent instantiation of XMLUtil class.
106 Initializes a new instance of PDFStreamEngine.
107 Adds an operator processor. @param op OperatorProcessor to be added
108 Sets the terminator character. @param term character to use as terminator (must be 118-126 excluding 'z')
109 Sets the page at which to split content. @param split number of pages, must be greater than zero
110 Sets the starting page number. @param start page number, must be greater than zero
111 Sets the end page number. @param end the last page number, must be greater than zero
112 Sets parser leniency. @param lenient true for lenient parsing, false otherwise @throws IllegalArgumentException if called after initial parse
113 Initializes CompressParameters with object stream size. @param objectStreamSize size of the object stream
114 Initializes PDResources with given dictionaries and caches. @param resourceDictionary PDF resource dictionary @param resourceCache shared resource cache @param directFontCache font cache for direct fonts
115 Sets the blending mode. @param blendMode the new blending mode to apply
116 Constructs a PDFieldTree with the given PDAcroForm. @param acroForm the root PDAcroForm object, must not be null
117 Returns the length of the stream. Throws IllegalStateException if there's an open OutputStream.
118 Initializes a new instance of PDFMergerUtility. Sets up an empty list to store source PDFs.
119 Initializes a new COSWriterObjectStream with a given compression pool. @param compressionPool pool used for managing compression resources
120 Constructs a new instance of PublicKeyProtectionPolicy.
121 Initializes text clipping storage. Resets the list to hold new clipping areas.
122 Adds a file source to the list. @param source File object representing the source to be added @throws FileNotFoundException if the file does not exist
123 Adds a source to the list of sources. @param source RandomAccessRead object to be added
124 Adds a name to the instructions list. @param name the name to be added
125 Adds an instruction sequence to the list. @param child InstructionSequence to be added
126 Adds a recipient to the list of public key recipients. @param recipient PublicKeyRecipient object to be added
127 Adds a new region with its bounding rectangle. @param regionName unique name for the region @param rect bounding area of the region as a Rectangle2D
128 Sets the trailer dictionary for the current cross-reference. @param trailer the COSDictionary representing the trailer
129 Retrieves an object from the pool using its key. @param key unique identifier of the object @return COSBase object associated with the key, or null if not found
130 Retrieves an Operator by name. @param operatorName unique identifier for the operator @return Operator object or null if not found
131 Converts Unicode sequence to character name. @param unicodeSequence Unicode sequence as a string @return Character name or ".notdef" if not found
132 Handles operator exceptions by logging or rethrowing based on type. @param operator the operator causing the exception @param operands list of COSBase operands @param exception the IOException to handle
133 Retrieves the current graphics state from the stack. @return PDGraphicsState object representing the current graphics state
134 Restores previous graphics state from stack.
135 Returns the size of the graphics stack. @return number of elements in the graphics stack
136 Transforms a point using an affine transformation matrix. @param x the x-coordinate of the point @param y the y-coordinate of the point @return transformed Point2D.Float object
137 Decreases the level by one. Logs an error if level becomes negative.
138 Adds an integer to the instructions list. @param value integer value to be added
139 Checks if the COSStream is closed and throws IOException if so.
140 Throws an exception as reset operation is unsupported. @throws IOException indicating that reset is not supported
141 Throws an exception as reset operation is unsupported. @throws IOException indicating reset operation is not supported
142 Retrieves the encryption settings of the document. @return PDEncryption object representing the encryption settings @throws IOException if the document has not been parsed yet
143 Retrieves access permission for the parsed document. @throws IOException if document is not parsed
144 Constructs an InvalidPasswordException with a specified message. @param message detail message explaining the exception
145 Initializes an Operator object. @param aOperator the operator string to be set @throws IllegalArgumentException if the operator starts with '/'
146 Returns string representation of PDFOperator. @return formatted string with operator name
147 Returns string representation of COSArray. @return formatted string with array contents
148 Returns string representation of COSObject. @return formatted string with key
149 Retrieves a filter by its name. @param filterName the name of the filter to retrieve @return the Filter object associated with the given name @throws IOException if the filter is not found
150 Checks if all elements in the list are instances of the specified class. @param operands list of COSBase objects to check @param clazz class to compare against @return true if all elements match the class, false otherwise
151 Adds a real number to the instructions list. @param value the real number to be added
152 Sets the width of the visible signature. @param width the desired width in pixels @return the PDVisibleSignDesigner instance for method chaining
153 Sets the height of the visible signature. @param height the desired height in float @return PDVisibleSignDesigner instance for method chaining
154 Calculates the Euclidean distance between two points. @param ps starting point @param pe ending point @return distance as a double
155 Calculates the value of the edge equation for a point. @param p the point to evaluate @param p1 first point defining the edge @param p2 second point defining the edge @return signed distance from point to edge
156 Initializes a new PDMarkedContent with a tag and properties. @param tag the content tag name @param properties dictionary containing content properties
157 Returns the type as a string. @return "Pattern" indicating the object type
158 Returns the type name of the shading. @return String representing the shading type
159 Retrieves the default value of an attribute. @return String representation of the default value or empty string if none
160 Unchecks the item by setting its value to "Off". @throws IOException if an I/O error occurs during value setting
161 Refreshes appearances for a list of PDF form fields. @param fields List of PDField objects to update
162 Checks if the point is a white point. @return true if wpX, wpY, and wpZ are all equal to 1, false otherwise
163 Calculates color table for shading. @return int array of RGB values @throws IOException if function evaluation fails
164 Calculates color table for shading. @return int array of RGB values @throws IOException if function evaluation fails
165 Creates and initializes a code table. @return List of byte arrays representing the code table
166 Adds multiple RandomAccessRead sources to the collection. @param sourcesList list of RandomAccessRead objects to be added
167 Retrieves an element from the list by index. @param index position of the element in the list @return COSBase object at the specified index
168 Retrieves element at specified index. @param index position of the element to retrieve @return element at the given index
169 Returns the number of elements in the collection. @return integer count of elements
170 Returns the number of elements in the collection. @return Size of the collection as an integer
171 Returns the number of recipients. @return count of recipients
172 Checks if the collection is empty. @return true if no elements are present, false otherwise
173 Checks if the collection is empty. @return true if the collection contains no elements, false otherwise
174 Removes a recipient from the list. @param recipient the PublicKeyRecipient to remove @return true if removed, false otherwise
175 Returns an iterator over the COSBase objects. @return Iterator of COSBase elements
176 Returns an iterator over the elements in this collection. @return Iterator object for traversing the collection
177 Returns an iterator over the list of public key recipients. @return Iterator<PublicKeyRecipient> object
178 Converts internal objects list to an ArrayList. @return ArrayList of COSBase objects
179 Converts COSBase objects to a list of COSName strings. @return List of COSName strings
180 Converts list of COSString objects to a list of strings. @return List of string values extracted from COSString objects
181 Converts Boolean to COSBoolean. @param value Java Boolean object @return COSBoolean representation of the input
182 Returns string representation of the value. @return String form of the value
183 Writes boolean value as PDF to OutputStream. @param output stream to write PDF data @throws IOException if writing fails
184 Writes NULL bytes to the specified output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
185 Writes byte array to output stream. @param data byte array to be written @throws IOException if an I/O error occurs
186 Returns an unmodifiable set of entries in the dictionary. @return Set of Map.Entry objects representing key-value pairs
187 Checks if an entry has changed. @param oldEntry the original entry @param newEntry the updated entry @return true if entries differ, false otherwise
188 Returns the number of items in the collection. @return Size of the collection as an integer
189 Retrieves item by key. @param key unique identifier for the item @return COSBase object or null if not found
190 Returns the set of keys from the underlying map. @return Set containing all COSName keys
191 Applies an action to each key-value pair in the map. @param action the action to be performed on each entry
192 Returns the collection of values from the items map. @return Collection of COSBase objects
193 Adds all key-value pairs from another dictionary. @param dict source dictionary containing items to add
194 Checks if the map contains a key. @param name the key to check @return true if the key is present, false otherwise
195 Splits string into tokens on spaces. @param s input string to split @return array of tokens including spaces as separate elements
196 Converts string to integer. @param token string representation of an integer @return parsed integer value
197 Returns string representation of FunctionType. @return concatenated string with function type
198 Sets the encryption key length. @param l key length, must be 40, 128, or 256
199 Sets the starting page value. @param startPageValue 1-based page number @throws IllegalArgumentException if startPageValue is less than 1
200 Sets the end page value. @param endPageValue 1-based end page number @throws IllegalArgumentException if endPageValue is less than or equal to 0
201 Initializes a new BruteForceParser instance. @param cosDocument the COSDocument to parse @param cosParser the COSParser used for parsing @throws IOException if an I/O error occurs
202 Initializes a new XrefTrailerObj with TABLE xref type.
203 Initializes PDResources with a COSDictionary. @param resourceDictionary the dictionary containing resources @throws IllegalArgumentException if resourceDictionary is null
204 Initializes PDResources with a dictionary and cache. @param resourceDictionary the COSDictionary containing resources @param resourceCache the ResourceCache for caching resources
205 Initializes a map with operator names and their corresponding enum values.
206 Constructs a PDAcroForm from a document and a form dictionary. @param doc PDDocument containing the form @param form COSDictionary representing the form data
207 Returns the count of trailers. @return number of trailer entries in the map
208 Retrieves an object from the pool by key. @param key unique identifier for the object @return COSObject if found, otherwise null
209 Adds entries to the cross-reference table. @param xrefTableValues map of COSObjectKey to Long values
210 Parses a string to a floating-point number. @param token string representation of the number @return parsed float value
211 Coerces a float value to handle special cases. @param floatValue input floating-point number @return coerced float value with special cases handled
212 Determines the text direction based on matrix transformations. @return Direction in degrees (0, 90, 180, 270)
213 Compares this COSFloat with another object. @param o the object to compare @return true if objects are equal, false otherwise
214 Generates hash code based on float value. @return hash code of the float value
215 Formats the numeric value as a string. Handles scientific notation conversion if necessary. @return formatted string representation of the value
216 Writes "null" followed by a space to the output stream. @param output the OutputStream to write to @throws IOException if an I/O error occurs
217 Constructs a COSIncrement with the given update info. @param incrementOrigin the original update information
218 Initializes PDF cloning utility with destination document. @param dest PDDocument to clone content into
219 Initializes the resource cache. @param enableStableCache flag to enable or disable stable caching
220 Checks if the update state indicates an update is needed. @return true if updated, false otherwise
221 Checks if the collection contains the specified COSBase. @param base the COSBase to check for presence @return true if found, false otherwise
222 Checks if a COSBase object is in the exclusion list. @param base the COSBase object to check @return true if excluded, false otherwise
223 Adds a COSBase object to the list. @param object the COSBase object to add
224 Adds a processed COSObject to the list. @param base the COSObject to be added
225 Clones a COSBase object for a new document. @param base the original COSBase object to be cloned @return the cloned TCOSBase object @throws IOException if an I/O error occurs during cloning
226 Registers TrueTypeFont for closing. @param ttf TrueTypeFont object to be registered
227 Creates a set of COSDictionary objects from PDF fields. @param fields list of PDField objects representing form fields @return set of COSDictionary objects representing widget dictionaries
228 Initializes a COSInputStream with an input stream and decode results. @param input the source input stream @param decodeResults list of decoding results
229 Initializes an ASCII85 input stream. @param is the underlying input stream
230 Initializes CCITTFaxDecoderStream with given parameters. @param stream input stream for fax data @param columns number of columns in the image @param type compression type (e.g., CCITT_T4, CCITT_T6) @param options additional options for decoding @param byteAligned flag indicating if byte alignment is required
231 Retrieves or creates a COSInteger. @param val long value to convert @return COSInteger instance
232 Checks equality with another object. @param o object to compare @return true if equal, false otherwise
233 Returns string representation of COSInt. @return formatted string with value
234 Writes value to PDF stream. @param output OutputStream to write to @throws IOException if writing fails
235 Retrieves value by key from the underlying map. @param key unique identifier for the value @return value associated with the key or null if not found
236 Retrieves mapped font name. @param fontName original font name @return mapped FontName object or null if not found
237 Maps an alias to a base font name. @param alias alternative name for the font @param baseName standard font name
238 Retrieves selected export values based on field value. @return List of selected export values
239 Checks if the name is empty. @return true if name is empty, false otherwise
240 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if an I/O error occurs
241 Writes a newline character to the output stream. @throws IOException if an I/O error occurs
242 Converts a string to its UTF-16BE hexadecimal representation. @param text input string @return char array containing the hexadecimal values in UTF-16BE format
243 Returns the COS object. @return COSBase object or null if not found
244 Constructs a COSObjectKey with specified object and generation numbers. @param num object number (must be non-negative) @param gen generation number (must be non-negative) @param index stream index
245 Generates hash code based on numberAndGeneration. @return hash code of the long value
246 Calculates the X scaling factor from a transformation matrix. @return The absolute value of the X scaling factor.
247 Calculates the Y scaling factor. @return Y scaling factor based on array values
248 Initializes a COSOutputStream with specified filters, parameters, and output stream. @param filters list of filters to apply @param parameters dictionary of additional parameters @param output underlying OutputStream for data @param streamCache cache for random access streams @throws IOException if an I/O error occurs during initialization
249 Initializes ASCII85OutputStream with an underlying OutputStream. @param out the target OutputStream for encoded data
250 Constructs a COSStandardOutputStream. @param out underlying output stream
251 Initializes a new COSStandardOutputStream with an output stream and position. @param out the underlying OutputStream to write data to @param position the initial position in the stream
252 Closes resources, marking scratch file pages as free. @throws IOException if an I/O error occurs during closure
253 Closes resources, marking scratch file pages as free. @throws IOException if an I/O error occurs during closing
254 Returns a copy of the internal byte array. @return new byte array containing the same data as the internal array
255 Writes incremental updates to a PDF. @throws IOException if an I/O error occurs
256 Converts byte array to ASCII string. @return ASCII representation of bytes
257 Checks if the document is accepting updates. @return true if updates are accepted, false otherwise
258 Converts byte array to string using a code-to-unicode mapping. @param bytes input byte array @return resulting string or '?' for unmappable bytes
259 Reads an operator from the source. @return String representation of the operator @throws IOException if reading fails
260 Converts a string to a byte array using a mapping. @param text input string to convert @return byte array representation of the string
261 Checks if the Unicode to code map contains the specified character. @param character the character to check @return true if the character is in the map, false otherwise
262 Checks if the map contains a mapping for the specified key. @param key key whose presence in this map is to be tested @return true if this map contains a mapping for the specified key
263 Checks if a font name is in the aliases map. @param fontName the font name to check @return true if fontName exists in the map, false otherwise
264 Returns an unmodifiable map of code to name mappings. @return Map with integer codes as keys and corresponding names as values
265 Returns an unmodifiable map of name to code mappings. @return Map containing names as keys and codes as values
266 Throws UnsupportedOperationException as this method is not implemented.
267 Reads a byte from the Ascii85 encoded stream. @return next byte or -1 if end of stream @throws IOException on read error
268 Closes the resource and marks it as end-of-file.
269 Writes a byte to output stream, encoding it in ASCII85. @param b byte to write @throws IOException if an I/O error occurs
270 Flushes the ASCII85 encoded data to the output stream. Ensures proper padding and line breaks are applied.
271 Truncates or pads the input password to match encryption padding length. @param password input password as a byte array @return byte array of fixed length with password and padding
272 Closes the output stream and logs a warning if text mode was used without ending it.
273 Writes XMP metadata to an output stream. @param xmp byte array containing XMP metadata @throws IOException if an I/O error occurs
274 Determines if page should be split. @param pageNumber current page number @return true if page is a split point, false otherwise
275 Throws an exception as JPX encoding is not supported.
276 Throws an exception as this operation is not supported.
277 Throws UnsupportedOperationException as the class is immutable. @param value float value to be set (unused)
278 Throws exception as class is immutable. @param value upper right X coordinate
279 Throws exception as class is immutable. @param value Y-coordinate to be set (not used)
280 Throws exception as the class is immutable. @param value x-coordinate to set (not used)
281 Placeholder method to retrieve signature text. Throws UnsupportedOperationException as it's not yet implemented.
282 Sets the signature text. @param signatureText the text to be used as the signature @return this PDVisibleSignDesigner instance @throws UnsupportedOperationException if the method is not yet implemented
283 Throws exception as signature fields do not support setting value as String.
284 Retrieves the compression level for deflation. @return integer representing the compression level, default is DEFAULT_COMPRESSION
285 Checks if the collection contains the specified element. @param o element to be checked @return true if the collection contains the element, false otherwise
286 Creates a FlateFilterDecoderStream to decode compressed data. @param inputStream source of compressed data @throws IOException if an I/O error occurs
287 Closes the stream and releases resources. Ends decompression and closes parent stream.
288 Initializes a new instance of PDVisibleSigBuilder. Creates a PDF structure template and logs the creation.
289 Sets the image and updates dimensions. @param image the BufferedImage to set
290 Finds the index of a pattern in a code table. @param codeTable list of byte arrays representing codes @param pattern byte array to search for @return index of pattern in code table or -1 if not found
291 Decodes a predictor row in an image. @param predictor prediction algorithm type @param colors number of color channels @param bitsPerComponent bits per color component @param columns number of columns in the row @param actline current active line to decode @param lastline previous line for reference (used by some predictors)
292 Checks if the pool contains a specific COSObjectKey. @param key the COSObjectKey to check @return true if the key is present, false otherwise
293 Registers a security handler with a given name and protection policy. @param name unique identifier for the security handler @param securityHandler class implementing SecurityHandler @param protectionPolicy class implementing ProtectionPolicy @throws IllegalStateException if the handler name is already registered
294 Checks if the map contains a key with the specified name. @param name the key to search for @return true if the key is present, false otherwise
295 Checks if a code is present in the map. @param code the code to check @return true if the code exists, false otherwise
296 Escapes special XML characters in a string. @param input the original string to escape @return a new string with XML special characters replaced
297 Sets the bounding box for a PDF element. @param bbox PDRectangle representing the bounding box or null to remove it
298 Decodes a hexadecimal string to a byte array. @param s hexadecimal string input @return decoded byte array or empty if invalid characters found
299 Closes all resources and handles exceptions. Ensures all IO resources are closed and logs errors.
300 Closes the document and associated streams. @throws IOException if an I/O error occurs during closing
301 Returns the COS object associated with the function. @return COSDictionary representing the function's COS object
302 Initializes a PDXObject with a given stream and subtype. @param stream the PDStream associated with this object @param subtype the subtype of the XObject
303 Returns the underlying COSStream. @return COSStream object
304 Retrieves metadata from the PDF document. @return COSStream containing metadata or null if not found
305 Sets metadata for the PDF stream. @param metadata COSStream containing metadata to be set
306 Checks if the widget is annotated with a signature. @param annotations list of PDF annotations @param widget PDF annotation widget to check @return true if widget has a signature annotation, false otherwise
307 Compares this annotation with another for equality. @param o the object to compare with @return true if equal, false otherwise
308 Returns a set of all keys in the map. @return Set containing all keys from the underlying map
309 Checks if the iterator contains a matching signature field. @param fieldIterator iterator for form fields @param signatureField the signature field to match @return true if a match is found, false otherwise
310 Returns a collection of all values in the map. @return Collection containing all values from the underlying map
311 Initializes a new parser with a PDF source. @param pdfSource the PDF file to parse
312 Checks if the next character in the source is a digit. @return true if the next character is a digit, false otherwise @throws IOException if an I/O error occurs while reading from the source
313 Sets XRef entry for an object. @param objKey key of the COSObject @param offset file offset of the object
314 Adds a mapping from code to name and vice versa. @param code unique identifier @param name associated with the code
315 Checks if the next character in the source is a space. @return true if the next character is a space, false otherwise @throws IOException if an I/O error occurs while reading from the source
316 Determines if a line break should be skipped. @param linebreak character code of the current line break @return true if line break is skipped, false otherwise
317 Checks for end-of-string markers in a byte stream. @param bracesParameter current count of open braces @return updated count of open braces or 0 if end marker found @throws IOException if an I/O error occurs
318 Checks if character is end-of-line. @param c character to check @return true if character is line feed or carriage return, false otherwise
319 Reads a numeric string from the source until a non-digit character is encountered. @return StringBuilder containing the read number or an empty StringBuilder if no digits are found @throws IOException if reading fails or the number exceeds MAX_LENGTH_LONG
320 Decodes a ByteArrayOutputStream to a UTF-8 string. @param buffer the ByteArrayOutputStream containing encoded data @return decoded string or alternative charset if UTF-8 fails
321 Reads and checks for an expected character. @param ec expected character to read @throws IOException if the actual character does not match the expected one
322 Checks if the next character in the source is whitespace. @return true if the next character is whitespace, false otherwise
323 Parses the start XRef position in a PDF file. @return the byte offset of the first object reference, or -1 if not found @throws IOException if an I/O error occurs during parsing
324 Searches for the last valid EOF marker in a file. @return Position of the last EOF marker or Long.MAX_VALUE if none found
325 Searches for xref table offsets in a PDF. @return List of offsets where xref tables are found
326 Retrieves the number of color components. @return number of color components or throws IOException if an error occurs
327 Searches for XRef stream offsets in a PDF file. @return List of XRef stream offsets or empty list if none found @throws IOException if an I/O error occurs
328 Retrieves the cross-reference table. @return Map of COSObjectKey to Long representing the xref table
329 Finds the offset of the startxref in a PDF file. @throws IOException if an I/O error occurs @return offset of startxref or throws exception if not found
330 Reads until 'endstream' or 'endobj' is found. @param out stream to filter content @return length of filtered content @throws IOException if an I/O error occurs
331 Initializes a new ToUnicodeWriter with mode set to 0.
332 Sets a page label range starting from the specified page. @param startPage the starting page index (must be non-negative) @param item the PDPageLabelRange to associate with the startPage
333 Adds a mapping from CID to Unicode text. @param cid character identifier (must be 0-65535) @param text Unicode string to map to CID
334 Checks if there is no binary data after 'EI'. @return true if no binary data, false otherwise
335 Checks if the next character in source is a space or return. @return true if next char is space or return, false otherwise
336 Adds an XReferenceEntry to the stream data. @param entry XReferenceEntry to be added
337 Calculates the maximum width for each column in bytes. @return An array of integers representing the max byte width for each of the three columns.
338 Initializes object pool with given highest XRef number. @param highestXRefObjectNumber the maximum XRef object number to initialize
339 Retrieves the first trailer dictionary. @return COSDictionary of the first trailer or null if none exists
340 Retrieves the last trailer from the byte position map. @return COSDictionary representing the last trailer or null if empty
341 Retrieves object numbers contained in a stream. @param objstmObjNr Object stream number to check @return Set of contained object numbers or null if trailer is unresolved
342 Returns the numeric value of the column type. @return Numeric value representing the column type
343 Retrieves the generation value from the referenced key. @return long representing the generation value
344 Returns a string representation of the FreeReference. @return formatted string with key, nextFreeObject, and type information
345 Retrieves the second column value as byte offset. @return byte offset value of the second column
346 Retrieves the generation value from the referenced key. @return The generation value as a long.
347 Returns string representation of the reference. @return formatted string with key, type, and byte offset
348 Retrieves the value of the second column. @return numeric value from the parent key's number field
349 Returns the index of the third column in the object stream. @return The index value as a long.
350 Returns a string representation of the ObjectStreamEntry. @return String containing key, type, index, and parent information
351 Writes bytes to output stream. @param b byte array to write @param off offset in the byte array @param len number of bytes to write @throws IOException if an I/O error occurs
352 Writes a single byte to the output stream. @param b byte to be written @throws IOException if an I/O error occurs
353 Writes an end-of-line character if not already on a new line. @throws IOException if an I/O error occurs
354 Checks if compression is enabled. @return true if compression is enabled, false otherwise
355 Adds an XReferenceEntry to the list. @param entry the XReferenceEntry to be added
356 Writes object reference to the given output stream. @param output stream to write to @param indirectReference key of the COSObject @throws IOException if an I/O error occurs
357 Extracts and groups reference ranges from a list of XReferenceEntry. @param xRefEntriesList list of cross-reference entries @return array of Long containing start and count of each range
358 Returns an MD5 MessageDigest instance. @return MessageDigest object for MD5 hashing
359 Returns a SHA-1 MessageDigest instance. @return MessageDigest object for SHA-1 hashing
360 Returns a SHA-256 MessageDigest instance. @return SHA-256 MessageDigest object
361 Writes FDF document to output. @param doc FDFDocument to write @throws IOException if writing fails
362 Retrieves the highest cross-reference object number. @return the highest XRef object number in the pool
363 Returns an unmodifiable list of prepared COS object keys. @return List of COSObjectKey objects
364 Updates the mapping for a given code with a new name. Removes existing reverse mapping if present. @param code unique identifier for the mapping @param name associated name for the code
365 Removes a region by name. @param regionName name of the region to be removed
366 Sets the maximum number of fractional digits in decimal formatting. @param fractionDigitsNumber the maximum number of fractional digits
367 Initializes a content stream for PDF document. @param document the PDDocument to write to @param outputStream the output stream for writing content @param resources the PDResources for managing resources
368 Retrieves vertical displacement vector Y. @param code unique identifier for the vector @return float value of vertical displacement or default value if not found
369 Returns the standard value or a default if it's null. @param standardValue the value to check @param defaultValue the fallback value @return the standard value or default if null
370 Zooms the image by a specified percentage. @param percent zoom factor as a percentage @return PDVisibleSignDesigner instance for chaining
371 Returns the width of the image. @return width of the image in pixels
372 Returns the height of the image. @return height in pixels
373 Adjusts sign design for rotation. @return PDVisibleSignDesigner instance with adjusted dimensions and transform
374 Creates an AffineTransform from a float array. @return AffineTransform object initialized with matrix values
375 Encodes a string into a byte array using custom encoding. @param text the input string to encode @return byte array representing encoded data @throws IOException if an I/O error occurs
376 Converts a Unicode code point to its corresponding name. @param codePoint the Unicode code point @return the name of the code point or ".notdef" if not found
377 Converts COSName to corresponding RenderState. @param state PDF name representing a render state @return RenderState object or null if input is null
378 Returns BaseState based on COSName. @param state COSName representing the state @return corresponding BaseState or ON if null
379 Applies GSUB rules to transform and encode glyphs. @param gsubWorker worker to apply transforms @param out output stream for encoded glyphs @param font font containing cmap lookup @param word input string to process @return list of transformed glyph IDs
380 Constructs a new PDF document. @param doc COSDocument representing the PDF structure @param source RandomAccessRead for reading the PDF file @param permission AccessPermission for handling user permissions
381 Initializes a new FDFDocument. @param doc COSDocument to be used @param source RandomAccessRead source for the document
382 Converts the collection to an array. @return An array containing all elements of the collection.
383 Converts collection to array. @param a target array or null @return array containing all elements
384 Returns the index of the first occurrence of the specified element. @param o element to search for @return index of the element or -1 if not found
385 Checks if this collection contains all elements of the specified collection. @param c collection to be checked for containment in this collection @return true if this collection contains all elements of the specified collection, false otherwise
386 Removes all elements from this collection that are contained in the specified collection. @param c collection containing elements to be removed @return true if any element was removed, false otherwise
387 Retains only elements contained in the specified collection. @param c collection containing elements to retain @return true if this list changed as a result of the call
388 Checks equality based on the wrapped object. @param o the object to compare @return true if equal, false otherwise
389 Returns the hash code of the actual object. @return hash code value of the actual object
390 Returns the last index of the specified element. @param o the element to search for @return the last index of the element, or -1 if not found
391 Returns a list iterator over the elements in this list. @return ListIterator object for traversing the list
392 Returns a list iterator over the elements in this list. @param index starting index for iteration @return ListIterator starting from the specified index
393 Returns a sublist of elements between specified indices. @param fromIndex starting index (inclusive) @param toIndex ending index (exclusive) @return List containing elements from fromIndex to toIndex
394 Checks if the collection contains a specific value. @param value the value to search for @return true if the value is found, false otherwise
395 Returns an unmodifiable set view of the entries. @return Unmodifiable set containing all map entries
396 Returns an unmodifiable set of alias names. @return Set containing all alias names
397 Returns string representation of actuals. @return String representation of actuals object
398 Converts a COSBase object to a COSObjectable. @param base the COSBase object to convert @return a COSObjectable instance @throws IOException if conversion fails
399 Generates a letter label from a numeric value. @param num numeric input to convert @return String representing the letter label
400 Returns the count of label ranges. @return number of label ranges
401 Retrieves page label range starting from a given page. @param startPage index of the first page in the range @return PDPageLabelRange object or null if not found
402 Returns sorted page indices. @return NavigableSet of page indices
403 Returns a copy of the dash array. @return cloned float array representing dashes
404 Initializes a PDColor with components and color space. @param components array of color components @param colorSpace the color space for the color
405 Returns a copy of the color components. @return float array of color components
406 Initializes a CoordinateColorPair with a point and a color. @param p Point2D representing the coordinate @param c float array representing the color (RGB values)
407 Returns a string representation of the FunctionType2 object. @return formatted string with C0, C1, and N values
408 Calculates the bounding box for three corner points. @return int array [minX, maxX, minY, maxY]
409 Removes and returns the top number from the stack. @return The top number or null if the stack is empty
410 Removes and returns the top integer from the stack. @return the top integer value
411 Pops and returns the top element as a float. @return The popped float value from the stack
412 Adds a boolean value to the instructions list. @param value boolean value to be added
413 Initializes an execution context with a set of operators. @param operatorSet the set of operators to be used in execution
414 Returns compiled regex patterns for list items. Initializes and caches the patterns if not already done. @return List of compiled Pattern objects
415 Initializes MacExpertEncoding with entries from a table.
416 Initializes MacRomanEncoding with entries from MAC_ROMAN_ENCODING_TABLE.
417 Initializes encoding map with standard entries.
418 Initializes symbol encoding by populating a map.
419 Initializes WinAnsiEncoding with standard and default mappings.
420 Initializes the Zapf Dingbats encoding by populating a map.
421 Converts an array to a string representation. @param array the input array of objects @return a string with array elements joined by commas, enclosed in brackets
422 Converts float array to string representation. @param array array of floats to convert @return string with array elements separated by commas, enclosed in brackets
423 Adds a TextPosition to the contents. @param text TextPosition object to be added
424 Adds marked content to the document. @param markedContent the content to be added
425 Adds an XObject to the contents. @param xobject the XObject to be added
426 Sets print permission. @param allowPrinting true to enable printing, false otherwise
427 Sets modification permission. @param allowModifications true to allow modifications, false otherwise
428 Sets permission to extract content. @param allowExtraction true to allow extraction, false otherwise
429 Sets permission to modify annotations. @param allowAnnotationModification flag indicating modification permission
430 Sets permission to fill in form. @param allowFillingInForm flag indicating if form can be filled
431 Sets permission to extract content for accessibility. @param allowExtraction flag indicating extraction permission
432 Sets permission to assemble documents. @param allowAssembly true to allow, false to disallow
433 Sets the permission to print faithfully. @param canPrintFaithful flag indicating if printing is allowed
434 Checks if print permission is granted. @return true if print permission is enabled, false otherwise
435 Checks if modification permission is granted. @return true if modification is allowed, false otherwise
436 Checks if content extraction permission is enabled. @return true if extraction is allowed, false otherwise
437 Checks if annotations can be modified. @return true if modification permission is enabled, false otherwise
438 Checks if user has permission to fill in forms. @return true if permission is granted, false otherwise
439 Checks if permission to extract content for accessibility is granted. @return true if permission is enabled, false otherwise
440 Checks if the document assembly permission is granted. @return true if permission is enabled, false otherwise
441 Checks if print permission for faithful users is enabled. @return true if permission is granted, false otherwise
442 Retrieves a private key from the keystore. @return PrivateKey object or throws exception if issues occur. @throws KeyStoreException on errors accessing the keystore or recovering the key.
443 Returns a SecureRandom instance. @return existing customSecureRandom if set, otherwise a new SecureRandom instance
444 Sets the encryption key. @param key byte array representing the key (1-32 bytes) @throws IllegalArgumentException if key length is outside valid range
445 Writes a byte to the output stream with RC4 encryption. @param aByte the byte to be written @param output the OutputStream to write to @throws IOException if an I/O error occurs
446 Combines diacritic characters in a string. @param str input string with potential diacritic marks @return normalized string with combined diacritics
447 Checks if a Unicode code point is prohibited. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
448 Computes version number based on key length and protection policy. @return integer representing the computed version number
449 Returns the singleton instance of the BouncyCastleProvider. @return BouncyCastleProvider instance
450 Retrieves text content of a DOM element. @param node the DOM element to process @return concatenated text content of the element's children
451 Writes a string to the output stream. @param text the string to be written @throws IOException if an I/O error occurs
452 Retrieves a predefined CMap by name, caching results. @param cMapName name of the CMap @return CMap object or throws IOException if parsing fails
453 Parses a CMap from a random access read. @param randomAccessRead source of data to parse @return parsed CMap object or null if parsing fails
454 Generates a set of postscript names. @param postScriptName original postscript name @return set containing the original and hyphen-free names
455 Calculates points on a line using Bresenham's algorithm. @param x0, y0 starting point coordinates @param x1, y1 ending point coordinates @return Set of Points representing the line
456 Calculates the number of unique points from an array. @param p array of Point2D objects @return count of unique points after rounding coordinates
457 Adds a font to the cache. @param info font information @param font the FontBoxFont object
458 Retrieves font from cache. @param info font information @return FontBoxFont object or null if not found
459 Maps a font name to its alias. @param baseName the original FontName object
460 Adds a substitution pair. @param match the string to match (case-insensitive) @param replace the replacement string
461 Retrieves font information by format and PostScript name. @param format the desired font format @param postScriptName the font's PostScript name @return FontInfo object or null if not found
462 Retrieves substitutes for a given postscript name. @param postScriptName the name of the postscript @return list of substitute names or empty list if none found
463 Retrieves name associated with a code. @param code unique identifier for the name @return corresponding name or ".notdef" if not found
464 Prints and returns the highest scoring FontMatch from a priority queue. @param queue sorted queue of FontMatch objects @return FontMatch with the highest score
465 Retrieves Type 2 CharString for CID. @param cid character identifier @return Type2CharString object or null if not found @throws IOException if an I/O error occurs
466 Converts character code to CID. @param code character code @return CID value
467 Converts color components to RGB integer. @return RGB value as an integer @throws IOException if conversion fails
468 Adjusts color intensity based on backdrop and alpha factor. @param groupRGB RGB value of the group @param backdropRGB RGB value of the backdrop @param shift bit shift for color channel extraction @param alphaFactor blending factor @return adjusted color intensity, clamped between 0 and 255
469 Retrieves a subset of bytes from an array. @return byte array containing the specified range of data
470 Retrieves the Adobe glyph list. @return GlyphList containing Adobe glyphs
471 Extracts and initializes CMAP tables for different platforms. @throws IOException if an I/O error occurs during extraction
472 Loads font metrics from an AFM file. @param fontName the name of the font @throws IOException if the resource is not found or parsing fails
473 Checks if font embedding is permitted. @param ttf TrueTypeFont object to check @return true if embedding is allowed, false otherwise
474 Checks if subsetting is permitted for a TrueType font. @param ttf the TrueTypeFont object to check @return true if subsetting is allowed, false otherwise
475 Generates a base25 encoded tag from a map of group IDs to counts. @param gidToCid mapping of group IDs to their respective counts @return 7-character string with base25 encoding and '+' suffix
476 Converts a name to its corresponding Unicode character. @param name the input string representing a Unicode name or code @return the Unicode character as a String, or null if not found
477 Initializes encoding with character metrics. @param fontMetrics FontMetrics object containing character data
478 Constructs a PDColor with specified components, pattern name, and color space. @param components array of color components @param patternName the name of the pattern @param colorSpace the color space for the color
479 Creates a PDColorSpace from a COSBase object. @param colorSpace base object representing the color space @return PDColorSpace instance @throws IOException if an error occurs during creation
480 Converts a WritableRaster to a BufferedImage. @param raster the source raster data @param awtColorSpace the color space for the image @return BufferedImage created from the raster and color space
481 Converts a WritableRaster to a BufferedImage in RGB format. @param raster the source raster data @param colorSpace the color space for conversion @return a BufferedImage in RGB format
482 Checks if the given ICC profile is sRGB. @param profile ICC profile to check @return true if the profile is sRGB, false otherwise
483 Returns the color space type. @return Color space type identifier or -1 if unknown
484 Creates an image object from a BufferedImage. @param document PDF document to add the image to @param image source BufferedImage @return PDImageXObject created from the image @throws IOException if there is an error processing the image
485 Initializes a PredictorEncoder with a document and image. @param document PDDocument to be used @param image BufferedImage to encode
486 Scales an image to a new size with optional interpolation. @param image the original BufferedImage to scale @param width target width for scaling @param height target height for scaling @param type image type (e.g., BufferedImage.TYPE_INT_RGB) @param interpolate whether to use interpolation during scaling @return scaled BufferedImage
487 Retrieves the underlying COS dictionary. @return COSDictionary representing the object
488 Parses PNG chunks from image data. @param imageData byte array containing PNG data @return PNGConverterState object or null if parsing fails
489 Combines IDAT chunks into a single input stream. @param state PNG conversion state containing IDAT chunks @return Combined InputStream of all IDAT data
490 Sets the corner colors. @param color 2D array of colors to be applied
491 Returns the current clipping path as a single Area object. @return Combined Area representing all clipping paths or null if none exist
492 Constructs a PlainText object from a list of strings. @param listValue list of string paragraphs
493 Generates hash code based on dictionary content. @return hash code of the dictionary
494 Returns an affine transform to translate coordinates. @return AffineTransform object translating by negative bboxMinX and bboxMinY
495 Computes parameters for a polygon segment. @param advInterm intermediate advance distance @param advCorner corner advance distance @param k curvature factor @param r radius of the arc @param length total length of the segment @param array output: [angle, fitting error] @return number of intermediate curls or -1 if length is zero
496 Computes angle for ellipse parameters. @param pt current point @param ptNext next point @param r radius @param curlAdv curvature adjustment @return computed angle or 0 if out of bounds
497 Ensures polygon vertices are in positive direction. @param points array of polygon vertices
498 Flattens an ellipse into a series of line segments. @param left x-coordinate of the ellipse's left boundary @param bottom y-coordinate of the ellipse's bottom boundary @param right x-coordinate of the ellipse's right boundary @param top y-coordinate of the ellipse's top boundary @return Array of points representing the flattened ellipse
499 Checks if a GeneralPath represents a rectangle. @param path the path to check @return true if the path forms a rectangle, false otherwise
500 Returns the height of the template. @return height as a float value
501 Sets sign coordinates. @param x horizontal coordinate @param y vertical coordinate @return updated PDVisibleSignDesigner instance
502 Applies an affine transformation to the sign designer. @param affineTransform the transformation to apply @return the updated PDVisibleSignDesigner instance
503 Constructs a PDPageFitDestination from a COSArray. @param arr COSArray containing destination information
504 Creates a PDPageFitHeightDestination from a COSArray. @param arr array representing the destination
505 Constructs a PDPageFitRectangleDestination from a COSArray. @param arr array containing destination information
506 Creates a new PDPageFitWidthDestination from a COSArray. @param arr COSArray containing destination information
507 Constructs a PDPageXYZDestination from a COSArray. @param arr array representing the destination
508 Ensures a node has no siblings. @param node the node to check
509 Returns an iterator over child outline items. @return Iterable of PDOutlineItem objects
510 Sorts a list of KeyValue pairs by their value. @param pairs List of KeyValue objects to be sorted
511 Sorts a list of KeyValue pairs by their key. @param pairs List of KeyValue objects to sort
512 Applies rendering hints to the graphics context. @param renderingHints collection of rendering hints to apply
513 Adjusts clip path based on transformation. @param linePath original GeneralPath to adjust @return adjusted GeneralPath or original if no change needed
514 Calculates subsampling factor for an image based on transformation scale. @param pdImage the image to process @param at the affine transformation applied to the image @return calculated subsampling factor, clamped between 1 and 8
515 Rounds a double number up to the nearest integer. @param num the number to round @return the rounded integer value
516 Calculates X rotation based on the given rotation angle. @param rotation angle in degrees (0, 90, 180, 270) @return calculated X rotation value or 0 for other angles
517 Calculates the Y coordinate of the lower-left corner after rotation. @param rotation angle in degrees (0, 90, 180, 270) @return Y coordinate based on rotation
518 Calculates width based on rotation. @param rotation angle of rotation in degrees @return calculated width as float
519 Writes characters from TextPosition to output. @param text TextPosition containing characters to write @throws IOException if an I/O error occurs
520 Returns the Unicode representation of the object. @return Unicode string
521 Retrieves text for specified region. @param regionName name of the region @return text associated with the region or empty string if not found
522 Writes article start to output. @param isLTR true if text direction is left-to-right @throws IOException if an I/O error occurs
523 Writes article termination to output. @throws IOException if writing fails
524 Writes a line separator to the output. @throws IOException if an I/O error occurs
525 Writes the word separator to the output. @throws IOException if an I/O error occurs
526 Writes paragraph end and updates state. @throws IOException if an I/O error occurs
527 Writes the start of an HTML page. @throws IOException if writing fails
528 Writes the end of the page to the output. @throws IOException if an I/O error occurs
529 Matches a string against a list of patterns. @param string the input string to match @param patterns a list of compiled regex patterns @return the first matching Pattern or null if no match is found
530 Handles bidirectional text processing. @param word input string to process @return processed string with correct direction and mirroring
531 Parses a BIDI file and populates MIRRORING_CHAR_MAP. @param inputStream input stream of the BIDI data
532 Checks and reverses Unicode string if it contains right-to-left characters. @return Reversed string if any right-to-left character is found, otherwise original string
533 Processes text position within defined regions. @param text TextPosition object to process
534 Checks if a character is a diacritic. @return true if the character is a diacritic, false otherwise
535 Updates the TimeZone ID based on its offset. @param tz TimeZone object to update
536 Converts byte to hexadecimal string. @param b input byte @return 2-character hex representation
537 Converts byte array to hexadecimal string. @param bytes input byte array @return hexadecimal representation of the byte array
538 Converts byte to hex bytes array. @param b input byte @return 2-byte array representing hex values
539 Converts byte array to ASCII representation. @param bytes input byte array @return ASCII byte array representing input bytes in hexadecimal format
540 Writes a byte as two hex characters to an OutputStream. @param b the byte to write @param output the OutputStream to write to @throws IOException if I/O error occurs
541 Decodes a Base64 encoded string. @param base64Value Base64 encoded string with optional spaces @return Decoded byte array or empty if input is null
542 Merges two sorted subarrays into one. @param arr the array containing elements to merge @param aux auxiliary array for merging @param from starting index of the first subarray @param mid ending index (exclusive) of the first subarray and start of the second @param to ending index (inclusive) of the second subarray @param cmp comparator defining element order
543 Initializes a Matrix from an AffineTransform. @param at the AffineTransform to convert
544 Transforms a 2D point using an affine transformation matrix. @param point the Point2D object to transform
545 Formats a float into an ASCII buffer with specified fraction digits. @param value the float to format @param maxFractionDigits maximum number of fractional digits @param asciiBuffer buffer to store formatted string @return length of formatted string or -1 if input is invalid
546 Retrieves the PDFBox version. @return Version string or null if unavailable
547 Parses XML input stream into a Document. @param is input stream containing XML data @param nsAware true to enable namespace awareness @return parsed Document object @throws IOException if parsing fails
548 Searches for a value in the trie using byte array. @param bytes input byte array key @return associated value or default if not found
