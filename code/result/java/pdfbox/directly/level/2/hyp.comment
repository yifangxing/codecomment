1 Initializes a COSBoolean instance with a given boolean value. @param aValue the initial boolean value of this COSBoolean object
2 Constructs a new COSName instance with the given name. @param aName the name to be assigned
3 Prevents instantiation of this class by making it private and limiting creation to one instance.
4 Creates a new COSString instance from a byte array. @param bytes input byte data @param forceHex whether to force hexadecimal representation
5 Initializes a new COSDictionary instance with an internal COSUpdateState.
6 Initializes COSObject with the given COSBase object. @param object COSBase object to wrap
7 Initializes a COSObject with the given base object and parser. @param object COSBase object to wrap @param parser ICOSParser instance for parsing purposes
8 Initializes a COSObject instance with a given key and parser. @param key COSObjectKey identifier @param parser ICOSParser for parsing the object data
9 Initializes DecodeOptions with a rectangle bounds. @param x left boundary @param y top boundary @param width rectangle width @param height rectangle height
10 Constructs a new FreeXReference object with the given COSObjectKey and next free object value. @param key COSObjectKey to identify the free object @param nextFreeObject ID of the next available free object in the pool
11 Creates an ObjectStreamXReference instance. @param objectStreamIndex index of the object stream @param key COSObjectKey reference @param object COSBase object being referenced @param parentKey COSObjectKey of the parent object (if any)
12 Initializes the DefaultResourceCacheCreateImpl instance with default settings.
13 Initializes wrapper with given COS dictionary.
14 Initializes an instance of PDAttributeObject from a COSDictionary. @param dictionary COSDictionary containing attribute data
15 Initializes user property with COS dictionary and user attribute object. @param dictionary COS dictionary containing property data @param userAttributeObject User attribute object associated with the property
16 Initializes a new PDOutlineNode instance from a COS dictionary. @param dict COS dictionary containing node data
17 Initializes a new transition with the provided COS dictionary. @param dictionary COS dictionary containing transition data.
18 Constructs a PDDestinationNameTreeNode from a COSDictionary. @param dic COSDictionary containing node data
19 Initializes an instance of PDEmbeddedFilesNameTreeNode from a given COSDictionary. @param dic COS dictionary containing relevant data
20 Initializes a new PD Javascript Name Tree Node from a COS dictionary. @param dic COS dictionary containing node data
21 Constructs a PDStructureElementNameTreeNode from a COS dictionary.
22 Creates a child node of type PDNumberTreeNode. @param dic dictionary containing node data
23 Initializes PDMetadata with data from specified COS stream. @param str COS stream containing metadata data
24 Constructs a new PDObjectStream instance from the given COS stream. @param str the COS stream to wrap
25 Initializes an embedded file instance from a COS stream. @param str COS stream containing file data and metadata.
26 Initializes a PDFunction object from a COSBase. @param function the COSBase to initialize with, must be a stream or dictionary
27 Initializes a PDXObject with the given COSStream and subtype. @param stream COSStream to read from @param subtype COSName of object subtype
28 Initializes a new instance of the PDStructureElement class from an existing COS dictionary. @param dic COS dictionary containing structure element data
29 Constructs a new PDStructureTreeRoot instance from a COS dictionary. @param dic COS dictionary containing initialization data
30 Initializes a new instance of the SecurityHandler class. This constructor is empty and does not perform any specific initialization.
31 Initializes SecurityHandler with a specified protection policy. @param protectionPolicy encryption policy to use
32 Constructs an instance of FDFAnnotationCaret from a COS dictionary. @param a COS dictionary containing annotation caret data
33 Constructs an FDFAnnotationCircle object from a COS dictionary. @param a COS dictionary containing annotation circle data
34 Initializes an FDF annotation file attachment from a COS dictionary. @param a COS dictionary containing attachment data
35 Creates a new instance of FDFAnnotationFreeText from a COS dictionary. @param a COS dictionary containing annotation data
36 Constructs an instance of FDFAnnotationInk from a COS dictionary. @param a COS dictionary containing annotation ink data
37 Constructs an instance of FDFAnnotationLine from the given COS dictionary.
38 Initializes an FDFAnnotationLink object from a COSDictionary. @param a COS dictionary containing link data
39 Creates an instance of FDFAnnotationPolygon from a COS dictionary.
40 Constructs an FDFAnnotationPolyline object from a COS dictionary. @param a COS dictionary containing polyline data
41 Constructs an FDFAnnotationSound object from a COS dictionary. @param a COS dictionary containing sound annotation data
42 Initializes an FDFAnnotationSquare object from a COS dictionary. @param a COS dictionary containing annotation square data.
43 Constructs an FDFAnnotationStamp object from a COS dictionary. @param a COS dictionary representing the annotation stamp
44 Initializes FDFAnnotationText with COS dictionary. @param a COS dictionary containing annotation text data
45 Creates an instance of FDFAnnotationTextMarkup from COS dictionary. @param a COS dictionary containing annotation text markup data.
46 Extracts and returns PDPanose classification from bytes array. @return PDPanoseClassification object
47 Creates a Composite instance based on blend mode and alpha value. @param blendMode the blending mode to use (cannot be null) @param constantAlpha the alpha value (clamped between 0 and 1)
48 Retrieves and initializes the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not available
49 Initializes a new instance of the PDShadingPattern class from a COS dictionary. @param resourceDictionary COS dictionary containing pattern resources
50 Initializes a new instance of PDTilingPattern with the given dictionary and resource cache. @param dictionary COS dictionary containing pattern data @param resourceCache resource cache for accessing external resources
51 Initializes PDShadingType1 with COSDictionary. @param shadingDictionary dictionary containing shading data
52 Initializes a new instance of PDShadingType2 with the given shading dictionary. @param shadingDictionary COS dictionary containing shading type 2 data.
53 Initializes AxialShadingPaint with specified shading type and transformation matrix.
54 Initializes Radial Shading Paint with specified shading and transformation. @param shading type of radial shading @param matrix transformation matrix for the paint's position and size
55 Initializes a Type1ShadingPaint object with given shading and transformation matrix.
56 Initializes a new instance of Type4ShadingPaint with the given PDShadingType4 and transformation matrix. @param shading Type4 shading object @param matrix Transformation matrix for painting
57 Initializes a new instance of Type5ShadingPaint with specified shading and transformation. @param shading Type 5 PD Shading object @param matrix Transformation matrix to apply to the shading
58 Constructs a new Type 6 Shading Paint object. @param shading Type 6 shading type @param matrix transformation matrix
59 Initializes Type 7 Shading Paint with given parameters. @param shading Type 7 shading data @param matrix Transformation matrix
60 Constructs an extended graphics state from a COS dictionary. @param dictionary input dictionary containing graphics state information
61 Constructs a PDSoftMask instance from a COS dictionary. @param dictionary COS dictionary containing mask data
62 Constructs PlainText object from input text value. @param textValue input string to parse into paragraphs
63 Initializes an embedded Go To action with given COS dictionary.
64 Initializes a new GoTo action with the given dictionary. @param a COSDictionary containing action properties
65 Constructs a new Hide action with the given COS dictionary.
66 Initializes an importer data action with a COS dictionary. @param a COS dictionary containing import data settings
67 Constructs a JavaScript action from a COS dictionary. @param a COS dictionary containing action data
68 Initializes a new instance of PDActionLaunch from a COSDictionary. @param a COS dictionary containing action launch properties
69 Initializes a new instance of PDActionMovie from a COS dictionary. @param a COS dictionary containing movie data
70 Initializes a named action from a COS dictionary. @param a COSDictionary containing action data
71 Creates a new instance of PDActionRemoteGoTo with the given dictionary.
72 Initializes a new instance of the PDActionResetForm class. @param a COS dictionary containing initialization data
73 Initializes a new instance of PDActionSound with COSDictionary data.
74 Initializes a new PDActionSubmitForm instance from the given COS dictionary. @param a COS dictionary containing form data
75 Initializes a new instance of PDActionThread with the specified COS dictionary.
76 Constructs a PDActionURI object from a COS dictionary. @param a COS dictionary containing action URI data
77 Converts key-value pairs to a list of KeyValue objects. @param key list of unique keys @param value corresponding values for each key @return List of KeyValue objects or empty list if input lists are empty
78 Initializes a non-terminal PDDocumentField with given parameters. @param acroForm the AcroForm containing this field @param field the underlying COS dictionary for the field @param parent the parent field in the document hierarchy
79 Initializes a PDAcroForm field instance with given parameters. @param acroForm the enclosing AcroForm object @param field the field dictionary @param parent the non-terminal field parent (if any)
80 Initializes linear measure dictionary from COS dictionary.
81 Creates an independent copy of this matrix. @return cloned Matrix object
82 Creates a scale matrix instance with specified X and Y scaling factors. @param x horizontal scaling factor @param y vertical scaling factor
83 Creates a translation matrix instance with specified X and Y offsets. @param x horizontal offset @param y vertical offset
84 Creates a rotation matrix instance with the given angle and translation. @param theta rotation angle in radians @param tx translation along X-axis @param ty translation along Y-axis @return RotationMatrix object initialized with provided parameters
85 Transforms input vector by matrix multiplication. @param vector input vector to be transformed @return transformed vector result
86 Scales a vector by multiplying its components with a scalar factor. @param sxy scalar value to multiply x and y components @return scaled Vector object
87 Returns a tree structure of fields associated with this instance.
88 Sets the default value of the underlying data structure. @param defaultValue new default value to be assigned
89 Retrieves an object from the collection at the specified index. @param index position of the desired object in the collection @return the object at the given index or null if out of bounds
90 Returns the number of objects in the collection. @return Size of the object collection
91 Retrieves revision number at specified index. @param index position of revision in list @return revision number (or -1 if out of bounds)
92 Adds an object with its corresponding revision number to the collection. @param object the object to be added @param revisionNumber the identifier for the object's version
93 Updates the revision number of a specific object in the collection. @param object object to update @param revisionNumber new revision value
94 Retrieves Encoding instance by COSName. @param name COSName identifier for desired encoding @return corresponding Encoding object or null if not found
95 Creates a PDSoftMask from the given dictionary. @param dictionary COSBase object representing the mask @param resourceCache ResourceCache instance for resolving resources @return PDSoftMask object or null on invalid input
96 Returns the index of the first visible widget (-1 if none are visible).
97 Adds a file as a source by its path. @param source file path to be added
98 Parses the PDF trailer, resolving cross-reference table issues and setting the resolved trailer. @throws IOException if an I/O error occurs during parsing
99 Retrieves an object from the pool using the provided key. @param key unique identifier for the desired object
100 Executes a sequence of instructions on the provided ExecutionContext. @param context ExecutionContext object containing execution state and operators
101 Initializes COS document with a new Stream Cache and parser. @param streamCacheCreateFunction function to create the stream cache @param parser COS parser instance
102 Processes an operator with given operands. @param operator Operator to process @param operands list of COSBase operands
103 Retrieves text line matrix from current graphics state. @return TextLineMatrix object representing the current text rendering settings.
104 Sets the text line matrix to the specified 3x3 transformation matrix. @param value 3x3 matrix representing the transformation
105 Retrieves text matrix from graphics state. @return Text matrix object
106 Sets the text matrix for graphics rendering. @param value Matrix to set as the current text transformation matrix
107 Transforms the input width by applying scaling/shearing matrix factors. @param width original width value @return transformed width value based on current graphics state
108 Retrieves the non-stroking color from the graphics state.
109 Sets non-stroking color in graphics state. @param color PDColor to be set
110 Retrieves the color space from the graphics state.
111 Retrieves the current stroking color from the graphics state.
112 Sets the stroking color in the graphics state. @param color PDColor object representing the new color
113 Retrieves the stroking color space from the graphics state.
114 Creates an input stream for reading from the underlying data. @throws IOException if underlying data has not been written or is in use by a writer
115 Creates a raw output stream for writing data. @return OutputStream object for writing data
116 Finds an ImageReader for the given file format. @param formatName name of the image file format @param errorCause reason for failure to find reader @throws MissingImageReaderException if no suitable reader is found
117 Finds a raster-capable ImageReader for the specified format name. @param formatName unique format identifier @param errorCause reason for failure to find reader @return ImageReader object or null if not found @throws MissingImageReaderException if no suitable reader is found
118 Retrieves an Operator instance by its name. @param operator unique identifier of the Operator @return Operator object or newly created one if not found
119 Returns string representation of COSArrayList instance. Includes contents of underlying array.
120 Checks if an edge is a line based on control points. @param ctl array of Point2D control points @return true if edge is a line, false otherwise
121 Retrieves the lower-left X-coordinate from the rectangle array.
122 Returns the lower-left Y value from the rect array. @return Lower-left Y coordinate as a floating-point number
123 Retrieves the X-coordinate of the upper-right corner of a rectangle.
124 Returns the upper-right Y coordinate of the rectangle. @return Upper-right Y value as a floating-point number
125 Retrieves font size from settings.
126 Retrieves cosine value from first element in values collection. @return COSNumber object's float value representation
127 Retrieves the cosine value at index 1 from values collection. @return COS value as a float
128 Retrieves the cosine value of 'b' from values collection. @return The cosine value as a floating-point number.
129 Retrieves the x-coordinate value from the values collection. @return The x-coordinate as a floating-point number
130 Returns the Y-coordinate value from the values list. @return Y-coordinate as a float
131 Retrieves z-coordinate value from data storage. @return z-coordinate as a floating-point number
132 Retrieves an integer value from the collection at specified index or returns default value. @param index position of the integer in the collection @param defaultValue value to return if index is out of range @return integer value or default value if not found
133 Retrieves the name at a specified index, returning the default value if out of bounds. @param index the index to retrieve (0-based) @param defaultValue the default value to return if index is invalid @return the name at the given index or the default value if not found
134 Searches for the specified COSBase object within the collection. @param object COSBase object to find @return index of found object, or -1 if not found
135 Retrieves a list of filters from the COSBase object. @return List of Filter objects or empty list if not found
136 Initializes COSArrayList with actual list and corresponding COSArray. @param actualList original data collection @param cosArray associated COSArray object
137 Evaluates the function using exponential interpolation. @param input array of values to evaluate @return array of evaluated results or null if an error occurs
138 Retrieves a list of filter names from the stream. @return List of COSName objects or an empty list if not found
139 Retrieves a list of file filter names from the stream dictionary. @return List of filter names or an empty list if not found
140 Writes a boolean value to PDF stream. @param output OutputStream for writing data @param cosBoolean COSBoolean object containing the value
141 Writes ASCII-encoded string to output stream. @param text input string to be written
142 Notifies user of attribute change if entry has changed. @param oldEntry previous object state @param newEntry current object state
143 Returns the number of elements in the underlying map. @return Size of the map
144 Retrieves a COSObject instance associated with the given key. @param key name of the COSObject to fetch @return COSObject instance or null if not found
145 Retrieves a COSBase object by either the primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search (used if primary key is not found) @return COSBase object or null if not found
146 Returns the length of the recipients list in the dictionary. @return integer size of the recipients list
147 Retrieves recipient string at specified index from 'RECIPIENTS' array in dictionary. @param i index of desired recipient string
148 Retrieves direction data from underlying COS object. @return Direction COSBase object or zero value if not available
149 Retrieves unique metadata keys from the COS information. @return Set of String metadata keys
150 Retrieves attribute names for the COS object. @return List of attribute names
151 Filters and adds trailer dictionary items to the stream. @param trailerDict trailer information dictionary
152 Creates a copy of the given COSDictionary instance. @param dict dictionary to clone
153 Checks if the COSDictionary represents an info object. @param dictionary COSDictionary to inspect @return true if the dictionary is an info object, false otherwise
154 Checks if the dictionary contains width information. @return true if WIDTHS or MISSING_WIDTH is present, false otherwise
155 Checks if missing width is present in dictionary. @return true if missing width found, false otherwise
156 Checks if XFA is present in the dictionary. @return true if XFA exists, false otherwise
157 Sets the current cross-reference object and associates it with a given start byte position. @param startBytePos unique byte position identifier @param type XRefType enumeration value indicating the cross-reference type
158 Parses and coerces a float string into a COSFloat object. @param aFloat string representation of a float value @throws IOException if the input is not a valid float
159 Returns a string representation of COSFloat object. Includes formatted float value within curly braces.
160 Writes PDF content to the specified output stream. @param output target output stream for writing PDF data
161 Creates a new COSIncrement instance with given update info. @param updateInfo information about increment operation
162 Initializes LayerUtility with a PDDocument instance. @param targetDoc PDDocument object to clone and manage
163 Initializes the cache with default settings.
164 Checks if a COS object needs to be updated based on its update info. @param base COSBase object containing update information
165 Appends child user by MCID. @param mcid unique identifier of the child user
166 Returns the COORDINATE SYSTEM (COS) base as an integer. @return COSBase object representing the coordinates system
167 Writes a COS integer to an OutputStream. @param output OutputStream to write to @param cosInteger COS integer data
168 Writes user comment to output stream. @param comment ASCII-encoded comment text
169 Writes user comment to output stream. @param comment ASCII-encoded comment string
170 Writes user comment to output stream, sanitizing for ASCII compatibility. @param comment user-provided comment string
171 Adds user comment to output stream, enforcing ASCII format and disallowing newline characters. @param comment text of the comment to be added
172 Retrieves an object from the collection at the specified index. @param index unique index identifier @return COSBase object or null if not found or null value
173 Searches for the specified object in the collection. @param object COSBase object to search for @return index of the object if found, -1 otherwise
174 Recursively collects indirect object keys from the given collection. @param indirectObjects collection to populate with object keys
175 Checks if the map 'items' contains a specific value. @param value object to search for in the map @return true if found, false otherwise
176 Retrieves the COSName key associated with a given value. @param value object to search for @return matching COSName key or null if not found
177 Retrieves the dictionary object associated with the given key. @param key unique dictionary key @return Dictionary object or null if not found or null value
178 Retrieves the linearized dictionary from the XREF table. @return COSDictionary object containing linearization data or null if not found
179 Closes all I/O streams and stream cache, logging exceptions. @throws IOException if any stream cannot be closed or an error occurs
180 Accepts the provided visitor and traverses the COSBase object tree. @param visitor ICOSVisitor instance to process the object
181 Checks if the given value is a self-reference of the provided COSBase parent. @param parent COSBase object being checked for self-reference @param value COSBase object to check against parent @return true if self-reference found, false otherwise
182 Retrieves the COSNumber value from a given COSBase object. @param lengthBaseObj COSBase object containing length information @return COSNumber value or null if not found or invalid
183 Creates a NormalXReference with specified byte offset, key, and object. @param byteOffset the byte offset of the reference @param key the unique identifier for the referenced object @param object the COSBase that is being referenced
184 Retrieves a unique identifier for the given COSBase object. @param object COSBase object to fetch key from @return COSObjectKey or null if not found in pool
185 Checks if object is in the pool or has a contained COSObject. @param object COSBase to check for containment
186 Adds a stream object to the preparation queue. @param key unique identifier for the stream object @param object COSBase object containing stream data
187 Constructs a COSObjectKey with default version. @param num unique object identifier @param gen generation number
188 Compares this XReferenceEntry with another based on referenced key. @param xReferenceEntry XReferenceEntry to compare with @return negative if this entry's key is less than the other, positive otherwise
189 Retrieves the X-axis scaling factor from the text matrix. @return scaling factor value (float)
190 Retrieves Y-axis scaling factor from text matrix. @return vertical scaling multiplier
191 Initializes COSWriter with output stream and compression parameters. @param outputStream OutputStream to write PDF content @param compressParameters Compression settings for the document
192 Initializes the COSWriter with an OutputStream and RandomAccessRead data. @param outputStream output stream for writing @param inputData random access read data to incrementally update
193 Updates the 'updated' flag based on the provided value, but only if updates are currently being accepted.
194 Extracts string from byte array using UTF-16BE/UTF-16LE or PDFDocEncoding. @return extracted string or null if not applicable
195 Encodes a string into PDFDocEncoding or UTF-16BE with BOM. @param text the input string to encode @param forceHex whether to always use hex encoding (even if not necessary)
196 Checks if PDF document contains a standard Type 1 font. @return true if font is standard Type 1, false otherwise
197 Reads up to 'len' bytes from internal buffer into 'data' array. @param data destination byte array @param offset starting index in 'data' @param len number of bytes to read @return actual number of bytes read or -1 if EOF reached
198 Closes this stream and releases associated resources. Flushes any pending data, calls superclass close method, and sets input/output buffers to null.
199 Closes the output stream, warning about uncommitted text in text mode.
200 Closes the output stream and logs a warning if in text mode without calling endText().
201 Closes the output stream and logs a warning if endText() was not called. @throws IOException if an I/O error occurs during stream closure
202 Closes the output stream and logs a warning if text mode was enabled without calling endText().
203 Reads the next byte from the data stream. @return The next byte (-1 at end of file) or throws IOException.
204 Reads up to <code>length</code> bytes from the underlying data source into the given array. @param data target byte array @param offset starting index in the array @param length maximum number of bytes to read @return actual number of bytes read, or -1 if end-of-file reached @throws IOException if an I/O error occurs
205 Reads and sets image from input stream. @param stream InputStream containing image data
206 Encodes input data using the LZW compression algorithm. @param rawData input data to encode @param encoded output stream for encoded data @param parameters additional encoding settings (not used)
207 Chooses the data row to write based on estimated compression sum. @return The chosen data row as a byte array
208 Resets all XrefTrailer objects and clears current/tracked references.
209 Closes all overlays and documents, releasing resources.
210 Initializes a new PDFormXObject instance from a given PDF stream. @param stream PDF stream containing form object data
211 Initializes parser with PDF content stream.
212 Constructs a new instance of PDFStreamParser from a byte array. @param bytes the input byte data to parse
213 Parses an object from the underlying data stream. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found or parsing failed
214 Reads and returns a map of object IDs to their respective numbers. @return Map of Long (object ID) to Integer (number)
215 Initializes built-in encoding with mapping of codes to names. @param codeToName map of integer codes to string names
216 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object or null if invalid input
217 Skips white spaces and line breaks from input stream.
218 Skips a line break (CR, LF, or CRLF) in the input stream.
219 Reads the next line from the input source. @throws IOException if end-of-file reached or error occurs
220 Skips leading whitespace and comments, positioning the input stream at the first non-whitespace character. @throws IOException on I/O error
221 Retrieves the number of color components. @return The number of color components (1 or as defined by the color space)
222 Returns the number of color components (e.g. RGB values). @return int value or -1 if not initialized
223 Searches for the nearest XREF offset by comparing table and stream offsets. @param xrefOffset target XREF offset @return nearest XREF offset or -1 if not found
224 Parses and validates PDF header information. @return true if parsing was successful, false otherwise
225 Parses FDF header and returns true if successful. @throws IOException if an I/O error occurs
226 Parses and returns a map of COS objects. @return Map of COS object keys to base objects or an empty map if parsing fails.
227 Generates a digested key based on the object number and generation number. @param objectNumber unique object identifier @param genNumber generation number of the object @return the final digested key as an array of bytes
228 Initializes PDAppearanceContentStream with given appearance and output stream. @param appearance PDAppearanceStream object @param outputStream OutputStream to write content to
229 Initializes a new page content stream with the specified document, appearance, and output stream. @param doc the parent document @param appearance the associated appearance stream @param outputStream the output stream for writing page content
230 Transforms a point by applying the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D object
231 Creates a PaintContext with transformed AffineTransform. @param cm ColorModel @param deviceBounds Device bounds rectangle @param userBounds User bounds rectangle2D @param xform Transform matrix to apply @param hints RenderingHints
232 Concatenates input matrix with the current matrix. @param matrix input Matrix to be concatenated
233 Updates the translation attributes of a 3D point. @param tx x-axis translation @param ty y-axis translation
234 Scales the 3D transform matrix by specified factors. @param sx horizontal scaling factor @param sy vertical scaling factor
235 Multiplies this matrix with another matrix. @param other the other matrix to be multiplied
236 Encodes input text for GSUB using a GsubWorker and glyph IDs. @param gsubWorker GSUB worker instance @param glyphIds set of glyph IDs to apply rules on @param font PDType0Font object @param text input text string @return encoded byte array or null if failed
237 Creates a new document instance with specified settings and permissions.
238 Creates a new PDDocument instance from a COSDocument and input stream. @param doc COSDocument containing PDF data @param source input stream to read from
239 Creates a SecurityHandler instance for the given ProtectionPolicy. @param policy ProtectionPolicy object @return SecurityHandler<ProtectionPolicy> or null if not found
240 Creates a SecurityHandler instance for the specified filter. @param name unique filter identifier @return SecurityHandler<ProtectionPolicy> instance or null if not found
241 Sets stroking color based on provided PDColor. @param color the color to apply, or null to reset @return true if successful, false otherwise
242 Sets the non-stroking color based on the provided color. @param color the PDColor to apply @return true if successful, false otherwise
243 Initializes MacOS Roman Encoding by populating the character table from MAC_OS_ROMAN_ENCODING_TABLE.
244 Checks if the user has owner permissions, i.e., all editing capabilities.
245 Checks for existence of Revision 3 permission set. @return true if any associated permission is present, false otherwise
246 Writes an array of bytes to the specified OutputStream. @param data array of bytes to be written @param output target output stream
247 Writes a specified portion of binary data to the given OutputStream. @param data array containing binary data @param offset starting index of data to write @param len length of data to write @param output target OutputStream for writing data
248 Inserts a diacritic into the text at the specified position. @param i text position to insert diacritic at @param diacritic TextPosition object containing diacritic to insert
249 Writes formatted string to output with specified positions. @param text string content @param textPositions list of text positions
250 Initializes a new line by cloning points and colors. @param p0 starting Point @param p1 ending Point @param c0 color of the first point (cloned) @param c1 color of the second point (cloned)
251 Initializes SoftMask with specified parameters. @param paint Paint object @param mask BufferedImage for masking @param bboxDevice Device bounding box (Rectangle2D) @param backdropColor Color of the backdrop or null for default @param transferFunction Transfer function to apply (or null for identity)
252 Removes a backdrop image from the specified BufferedImage, offset by offsetX and offsetY. @param backdrop the image to remove @param offsetX x-coordinate offset of backdrop @param offsetY y-coordinate offset of backdrop
253 Retrieves FontMetrics for the specified font name. @param fontName unique font identifier @return FontMetrics object or null if not found or failed to load
254 Initializes a GlyphList with data from an InputStream. @param input InputStream containing glyph data @param numberOfEntries expected number of glyphs in the list
255 Constructs a new GlyphList instance by copying an existing one and loading glyphs from the given input stream. @param glyphList existing GlyphList to copy from @param input InputStream containing glyphs to load
256 Maps a glyph code to its corresponding GID. @param code the glyph code @return the mapped GID or 0 if not found
257 Retrieves font glyph name for a given string, or returns '.notdef' if not found. @param name the input string to resolve
258 Fetches the name of a glyph in font, using alternative names and Unicode code points. @param name glyph name to search for
259 Initializes rendering components by loading CMYK color profile and setting flags.
260 Applies a mask to the provided image, scaling and composing alpha as needed. @param image source image @param mask mask image @param interpolateMask whether to interpolate the mask @param isSoft whether the mask is soft @param matte optional matte values for color correction @return the resulting image with applied mask
261 Verifies a chunk's validity and sanity. @param chunk Chunk object to check
262 Initializes a cubic Bezier curve with specified control points and level. @param ctrlPnts array of Point2D objects representing control points @param l the level of detail for the curve
263 Checks if a point is contained within this polygon. @param p Point to check @return true if point is inside, false otherwise
264 Calculates the color at a given 2D point using various interpolation methods. @param p the input point
265 Intersects clipping path with provided GeneralPath. @param path GeneralPath to intersect
266 Intersects clipping path with given Area. @param area geometric region to intersect
267 Sets the current clipping path for graphics operations. @param graphics Graphics2D context to update
268 Draws a tiling pattern using the provided Graphics2D context. @param g graphics context to draw on @param pattern tiling pattern to render @param colorSpace color space for rendering @param color drawing color @param patternMatrix transformation matrix for the pattern
269 Calculates adjusted X-axis direction. @return Adjusted X-axis value based on rotation and direction.
270 Initializes TextPosition with page dimensions, font, and text characteristics. @param pageRotation rotation of the page (0-180) @param pageWidth width of the page @param pageHeight height of the page @param textMatrix initial transformation matrix for the text @param endX x-coordinate of the text's end position @param endY y-coordinate of the text's end position @param maxHeight maximum allowed height for the text @param individualWidth width of each character (excluding space) @param spaceWidth width of a single space character @param unicode Unicode string to be typeset @param charCodes array of character codes for the Unicode string @param font PDFont object defining the font characteristics @param fontSize font size in points @param fontSizePt font size in points (alternative representation)
271 Calculates the adjusted Y-coordinate based on the page rotation. @return Adjusted Y-coordinate or 0 if not applicable
272 Returns the width of the object. @return The width as a floating-point value.
273 Calculates width adjustment based on direction. @return adjusted width value as a float.
274 Starts an article process.
275 Writes start of a paragraph, ending any previous one if necessary.
276 Matches list item pattern based on provided text position. @param pw PositionWrapper object containing text position
277 Normalizes a word by applying Unicode normalization and handling special cases. @param word input string to be normalized
278 Formats a Calendar object as a string. @param cal the Calendar object to format
279 Converts Calendar object to ISO8601 formatted string. @param cal Calendar object to convert
280 Converts byte array to hexadecimal string representation. @return hexadecimal string value of bytes
281 Writes an external signature to the PDF, overwriting existing signature contents. @param cmsSignature CMS signature bytes to write
282 Writes a PDF-compatible string representation of the object's name to the given OutputStream. @param output target stream for writing the PDF data
283 Writes an array of hexadecimal byte values to a stream. @param bytes the byte array to write @param output the target output stream
284 Iteratively mergesort an array of type T using a comparator. @param arr the input array to sort @param cmp the comparator for sorting elements
285 Parses an InputStream into a Document. @param is input stream containing document data
286 Detects the file type based on stream contents. @param inputStream input stream to read from @return FileType object or null if not found
287 Initializes legacy PDF stream engine operators in sequence.
288 Fetches or creates a COSName instance for the given name. @param aName unique PDF name @return COSName object or null if not found or created
289 Constructs COSString from raw byte array. @param bytes raw byte data to parse @param ignoreLength whether to ignore length prefix (default=false)
290 Initializes an empty COSArray instance.
291 Creates a COSArray from a list of COSObjectable instances. @param cosObjectables list of objects to convert and add to the array
292 Initializes COSStream object with given cache. @param streamCache RandomAccessStreamCache instance
293 Creates an unmodifiable COS dictionary from a given map. @param dict input COS dictionary
294 Creates a default DecodeResult instance with an empty COS dictionary. @return Default DecodeResult object
295 Initializes a new instance of PDDocumentInformation with an empty COS dictionary.
296 Initializes PDResources object with empty dictionary and font cache.
297 Converts a Java map to a PDF dictionary. @param someMap input map containing key-value pairs
298 Initializes an empty dictionary wrapper with a new COSDictionary instance.
299 Initializes a new PDNameTreeNode instance with an empty dictionary.
300 Creates a new PDNumberTreeNode with the specified value class. @param valueClass the type of object to store in this node
301 Constructs an empty PDPageLabelRange instance with default properties.
302 Initializes a new instance of PDMarkInfo with an empty dictionary.
303 Initializes an empty PDF property list.
304 Initializes an empty PDF box style with an internal dictionary.
305 Initializes PDCryptFilterDictionary with an empty COS dictionary.
306 Initializes PDEncryption object with an empty dictionary.
307 Initializes an empty FDF Catalog with a default dictionary.
308 Initializes an empty FDF dictionary.
309 Initializes an empty FDFField object. Creates a new COSDictionary instance to store field data.
310 Initializes an empty FDFIconFit object with a new COSDictionary instance.
311 Initializes a new JavaScript object with an empty dictionary.
312 Initializes an empty named page reference dictionary.
313 Initializes an empty FDFPage object with a new COSDictionary instance.
314 Initializes an empty FDFPageInfo object. @param none
315 Initializes FDFTemplate with an empty COS dictionary.
316 Initializes PDDeviceNAttributes with an empty COSDictionary.
317 Initializes a new device N process with an empty dictionary.
318 Initializes a new PDF shading object. Creates an empty dictionary to store shading properties.
319 Initializes additional actions with an empty dictionary.
320 Initializes an empty dictionary to store additional annotation actions.
321 Initializes catalog additional actions with an empty dictionary.
322 Initializes an instance of PDFormFieldAdditionalActions with an empty dictionary.
323 Initializes an empty set of additional page actions.
324 Initializes an empty target directory with an underlying dictionary.
325 Initializes an empty PDURIDictionary instance.
326 Initializes an empty launch parameters dictionary.
327 Initializes an empty border effect dictionary.
328 Initializes an empty PDBorderStyleDictionary instance.
329 Initializes PDPropBuild object with an empty COSDictionary.
330 Initializes a new PDPropBuildDataDict object with an empty COSDictionary.
331 Initializes an empty PDF seed value MDP with a direct dictionary.
332 Initializes a new PDSeedValueTimeStamp object with an empty dictionary.
333 Initializes a PDField with an associated PDAcroForm. @param acroForm parent AcroForm instance
334 Initializes an empty viewport dictionary.
335 Initializes viewer preferences with an empty dictionary.
336 Initializes a COSObject instance from a COSBase and key. @param object the COSBase to initialize with @param objectKey the COSObjectKey for this instance
337 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary input dictionary containing attribute data
338 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary COSDictionary containing attribute data
339 Initializes a new instance from a COS dictionary.
340 Constructs a PDOutlineItem instance from a COS dictionary. @param dic COS dictionary containing item data
341 Retrieves PDMetadata object from the stream. @return PDMetadata object or null if not found @throws IllegalStateException if unexpected metadata type is encountered
342 Retrieves metadata as a PDMetadata object. @return PDMetadata object or null if not available
343 Retrieves the extended objects of a PDF page. @return Stream containing extended objects or null if empty
344 Constructs a PDFunctionType0 instance from a COSBase object. @param function the COSBase object to initialize with.
345 Initializes PDFunctionType3 from input stream. @param functionStream COSBase object containing function data
346 Constructs a PDF PostScript XObject from the given COS stream. @param stream COS stream containing PostScript data
347 Initializes a new PDFormXObject instance from a COS stream. @param stream input COS stream containing form object data
348 Initializes a new instance of PDFormXObject from a COS stream and resource cache. @param stream COS stream containing form object data @param cache Resource cache for resolving resource references
349 Initializes a new instance of PublicKeySecurityHandler.
350 Initializes a new instance of the StandardSecurityHandler class.
351 Initializes a new instance of PublicKeySecurityHandler with the given protection policy.
352 Initializes the StandardSecurityHandler with a StandardProtectionPolicy. @param standardProtectionPolicy policy to be used by this handler
353 Constructs an FDFAnnotationHighlight object from a COS dictionary. @param a COS dictionary containing annotation highlight data
354 Initializes an instance of FDFAnnotationSquiggly from a COS dictionary. @param a COS dictionary containing annotation data
355 Constructs an FDFAnnotationStrikeOut object from a COS dictionary. @param a COS dictionary containing strikeout annotation properties
356 Constructs an FDFAnnotationUnderline object from a COS dictionary. @param a COS dictionary containing annotation underline properties
357 Initializes a new PDTilingPattern instance from a COSDictionary. @param dictionary COSDictionary containing pattern data
358 Initializes a new instance of PDShadingType3 from a COS dictionary. @param shadingDictionary COS dictionary containing shading properties
359 Initializes PDShadingType4 from COS dictionary. @param shadingDictionary COS dictionary containing shading data
360 Initializes a PDShadingType5 object from a COS dictionary. @param shadingDictionary dictionary containing shading data
361 Initializes a PDButton object with the given parameters. @param acroForm PDAcroForm instance @param field COSDictionary representing button field data @param parent PDNonTerminalField instance as parent element
362 Initializes a PDSignatureField with its parent and field dictionary. @param acroForm the containing AcroForm @param field the underlying field dictionary @param parent the parent non-terminal field
363 Initializes variable text field in PDF document. @param acroForm parent AcroForm dictionary @param field COSDictionary representing the field @param parent PDNonTerminalField containing this field
364 Generates a unique partial field name by appending an integer suffix.
365 Returns a human-readable string representation of the object collection.
366 Creates a new PDSoftMask instance from COSBase dictionary. @param dictionary COSBase representation of soft mask properties
367 Creates a new COSDocument instance from the given ICOSParser. @param parser COS document parser
368 Creates a new COSDocument instance using the given stream cache creation function. @param streamCacheCreateFunction function to create stream cache
369 Processes an operator with specified arguments. @param operation unique operator identifier @param arguments list of COSBase objects for the operator
370 Creates a marked content object based on the provided tag. @param tag COSName representing the type of marked content @return PDMarkedContent object or subclass if applicable
371 Calculates width by subtracting lower-left x from upper-right x. @return width as a floating-point value
372 Checks if point (x, y) is within the bounding box. @param x horizontal coordinate @param y vertical coordinate @return true if point is inside the box, false otherwise
373 Calculates height by subtracting lower left Y-coordinate from upper right Y-coordinate. @return Height value as a float
374 Transforms a GeneralPath using a specified Matrix. @param matrix transformation matrix
375 Converts the current shape to a GeneralPath object. @return GeneralPath representation of the shape
376 Returns a string representation of the rectangle in [x1,y1,x2,y2] format.
377 Returns an integer from the array at the specified index. @param index position in the array to retrieve
378 Fetches name at specified index. @param index position of name to retrieve
379 Creates an output stream for writing to the COS object. @param filters optional filter to apply to the stream @return FilterOutputStream instance or throws IOException if error occurs
380 Initializes a PDImageXObject from a PDStream and resources. @param stream the input stream @param resources associated resources
381 Determines the file suffix based on image filter settings. @return Suffix string (e.g. "png", "jpg") or null if unknown
382 Writes a float operand to the output stream. @param real the floating-point value to write
383 Writes an operand value as decimal-formatted string. @param integer the operand value to be written
384 Writes an operator to the output stream. @param text operator value as string
385 Checks whether this collection is empty.
386 Parses string representation of a COSNumber. @param number string to parse (e.g. "123", "-456.789") @return COSNumber object or throws IOException if invalid
387 Writes a COS float value to the specified OutputStream. @param output OutputStream to write to @param cosFloat COS float object containing the value to be written
388 Converts to Increment state.
389 Converts object array to float array. @return float array representation of the objects or zeros if not numbers
390 Converts COS numbers to a list of Float values. @return List of Float values for COS numbers, nulls otherwise.
391 Converts COS objects to a list of integers, replacing non-COSNumber instances with null.
392 Retrieves the minimum value from the range array. @return Minimum value as a float
393 Returns the maximum value from the range array. @return maximum value as a float
394 Retrieves a PDGamma object by its index from the underlying array. @param index unique index of the target object @return PDGamma object or null if not found at specified index
395 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode COSBase object containing blend mode data @return corresponding BlendMode instance or NORMAL if not found
396 Retrieves colorant names from COSArray. @return List of String colorant names
397 Returns the alternate color space, lazily creating it from resources if not already loaded.
398 Retrieves colorant name from internal array. @return Colorant name as string or null if not found
399 Creates a PDDestination object from the given COSBase. @param base COSBase object containing destination data
400 Retrieves the first PDPage object from the array, or null if empty. @return PDPage object or null
401 Retrieves the page number from the first object in the array. @return The page number as an integer, or -1 if not found
402 Retrieves zoom value from PDF document. @return zoom factor as a float, or -1 if invalid
403 Initializes a Matrix object from COSArray data. @param array COSArray containing matrix values
404 Recursively collects indirect object keys from the current object and its children. @param indirectObjects collection to store the collected keys
405 Retrieves a dictionary object by the first key; if not found, attempts to retrieve it by the second key. @param firstKey primary key to search for @param secondKey secondary key to search for if first is null @return COSBase object or null if not found in either key
406 Retrieves a COSName object from the dictionary by its key. @param key COSName identifier @return COSName object or null if not found in dictionary
407 Retrieves a COSDictionary object by its name. @param key unique key to identify the dictionary @return COSDictionary object or null if not found
408 Retrieves a COSStream object by name, or returns null if not found. @param key unique stream identifier
409 Retrieves a COSArray from the dictionary using the specified key. @param key key to search for in the dictionary @return COSArray object or null if not found as an array
410 Retrieves a COSName value from the dictionary or returns the default value. @param key the COSName to fetch @param defaultValue the default COSName to return if not found
411 Retrieves the value of a key as a long, or returns the default value if not found. @param key unique COSName identifier @param defaultValue default value to return if key is missing
412 Retrieves the floating-point value associated with a given key from an underlying dictionary. @param key unique identifier for the desired value @param defaultValue default float value to return if key is missing or invalid @return The float value, or the provided default value if not found or invalid
413 Retrieves an iterator over the content streams in the document. @return Iterator of PDStream objects, or empty iterator if none found
414 Checks if the page has contents. @return true if the page contains a non-empty stream or array, false otherwise
415 Retrieves class names and revision numbers from the PDF document. @return Revisions of String class names with corresponding revision numbers
416 Retrieves the K dictionary object from the COSBase. @return COSBase object containing the K dictionary or null if not found
417 Retrieves the value from the dictionary. @return COSBase object representing the value
418 Checks if encryption metadata is enabled. @return true if enabled, false otherwise
419 Retrieves the owner encryption key from the dictionary. @return a 32-byte byte array containing the encryption key or null if not present
420 Retrieves and returns the user's encryption key as a 32-byte array.
421 Retrieves PDF permissions as a byte array. @return byte[] containing the permissions or null if not found
422 Retrieves the page number from the annotation dictionary. @return The page number as an Integer, or null if not found.
423 Retrieves the COSBase value associated with a field. @return COSBase object or null if unknown type
424 Retrieves the field flags as an integer value. @return Field flags value or null if not available
425 Retrieves the set flags from the field dictionary. @return Integer value of SET FF or null if not found
426 Retrieves clear field flags from the field dictionary. @return Clear Field Flags integer value or null if not found
427 Retrieves widget field flags as an integer value. @return Widget field flags or null if not available
428 Retrieves the widget field flags as an integer value. @return Field flags or null if not found
429 Retrieves clear widget field flags value. @return Integer flag value or null if not set
430 Retrieves the default width value from PDF dictionary or sets a fallback value of 1000 if not found.
431 Retrieves the color space of a PDF document. @return The color space as a PDColorSpace object, or null if not found
432 Retrieves the color space from the PDF resources, creating it if not already present. @param resources PDF resources @return PDColorSpace object or null if not found
433 Constructs an OCG (Optional Content Group) from a given dictionary. @param dict COSDictionary containing the OCG data
434 Initializes a PDOptionalContentMembershipDictionary object from a COSDictionary. @param dict COSDictionary containing membership data
435 Retrieves the overprint mode as an integer. @return Overprint mode value or null if undefined
436 Retrieves and converts the soft mask dictionary object to a PDSoftMask instance. @return PDSoftMask object or null if not found in the dictionary
437 Retrieves the float value associated with the given key from the dictionary. @param key unique identifier for the dictionary entry
438 Retrieves the transfer object from the dictionary. @return Transfer object or null if invalid
439 Retrieves the transfer dictionary, returning a COSBase object or null if invalid.
440 Returns the backdrop color, lazily loading it from the COS dictionary if not already set. @return COSArray containing RGB values or null if not loaded
441 Determines the open mode for a new window based on PDF settings. @return OpenMode enum value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
442 Retrieves and returns the T object from the action dictionary. @return The T object (Dictionary, String or Array) or null if not found.
443 Determines the open mode for a new window based on user preference or COS object settings. @return OpenMode enum value (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
444 Returns the open mode preference: new window, same window, or user preference. @return OpenMode enum value indicating preferred behavior
445 Retrieves the named destination from the dictionary. @return PDNamedDestination object or null if not found
446 Retrieves the contents of a PDF file as a byte array. @return byte array containing file contents or empty array if not found
447 Retrieves XFA resource from PDF dictionary. @return PDXFAResource object or null if not found
448 Retrieves an inheritable attribute from the dictionary, its parent, or the AcroForm. @param key COSName of the attribute to fetch
449 Retrieves the value from the dictionary of the parent COS object. @return The COSBase value or null if not found
450 Retrieves the value as a string from the COS object. @return string representation of the field value, or an empty string if null
451 Retrieves the default value from the dictionary. @return COSBase object representing the default value
452 Closes visual signature and PDF source resources.
453 Writes a COS object to the output stream, creating an xref entry. @param key COSObjectKey with object number and generation @param obj COSBase object to write
454 Retrieves the key associated with a given COS object. @param object COSBase object to retrieve key from @return COSObjectKey or null if not found
455 Checks if an object exists in the pool. @param object COSBase instance to search for
456 Creates a list of COSWriterObjectStream objects based on the object stream size specified by parameters. Each stream is initialized and prepared with an object from the pool.
457 Retrieves the object key for a given PDF object number and generation. @param num object number @param gen generation @return COSObjectKey instance or a new one if not cached
458 Searches for objects in the PDF stream. @throws IOException if an I/O error occurs
459 Searches for object streams offsets and returns a map of positions to COSObjectKey objects.
460 Parses Xref trailer and populates the resolver with objIDs and offsets. @param resolver XrefTrailerResolver to populate with parsed data
461 Finds COSObjectKey by ID and offset. @param objectKey existing COSObjectKey to search for @param offset file position to start searching from @param xrefOffset map of object keys to their offsets @return updated or matching COSObjectKey, or null if not found
462 Parses the cross-reference table starting at the specified byte offset. @param startByteOffset unique identifier for the xref table
463 Retrieves or generates a unique key for the given PDF object. @param obj the PDF object to fetch or create a key for @return COSObjectKey instance representing the object's identifier
464 Inserts or updates COSBase object in the object pool with a new key. @param key new key for the object @param object COSBase object to insert/update @return updated COSObjectKey (or null if existing key found)
465 Constructs COSWriter instance with given OutputStream. @param outputStream output stream to write compressed data
466 Initializes COSWriter with a set of dictionaries to write. @param objectsToWrite set of COSDictionary objects to include in writing process
467 Sets the need-to-be-updated flag. @param flag true to update, false otherwise
468 Updates the current object's state by calling the overloaded update method with default parameters.
469 Retrieves a string value at the specified index or returns the default value. @param index 0-based index of the desired string @param defaultValue default string to return if index is out-of-bounds @return The string at the given index, or the default value if not found.
470 Extracts the string value from a COSName object. @param key COSName object to extract value from @return String representation of the COSName, or null if not applicable
471 Retrieves a string value from the dictionary using the specified key. @param key unique identifier for the desired string value @return the string value or null if not found
472 Converts a COSDictionary to a COSDictionaryMap with basic types (String, Integer, Float, Boolean). @param map the COSDictionary to convert @return a COSDictionaryMap or null if input is null
473 Retrieves and returns the file contents as a string. @return The file contents or null if not available.
474 Retrieves and returns the string value of an option object.
475 Retrieves default appearance string from COS data. @return Default appearance string or null if not found
476 Retrieves the string or name value of the named destination. @return the destination value as a String, or null if not set
477 Retrieves a list of string items from the provided COSBase object, using the specified index to select either the first or second item. @param items COSBase object containing string items @param pairIdx 0 for the first item, 1 for the second item @return List of strings, or empty list if not found
478 Retrieves export values as a list of strings. @return List of strings or empty list if no values found
479 Retrieves the value for a given COSName as a list of strings. @param name COSName identifier
480 Retrieves the default appearance string from inheritable attributes. @return default appearance string or null if not found
481 Constructs a COSString object from a given text. @param text the initial string content
482 Initializes the designer with an image from the provided input stream. @param imageStream InputStream containing the image data
483 Loads image from file and sets it as the designer's signature. @param path file system path to the image file
484 Initializes a new transparency group from the given stream. @param stream input stream containing transparency group data
485 Reads a string from the input source, skipping leading spaces and trailing whitespace.
486 Verifies the expected string against input stream, throwing exception on mismatch. @param expectedString array of characters to match @param skipSpaces whether to skip leading/trailing spaces
487 Reads a string of specified length from the input stream. @param length maximum number of characters to read
488 Reads and parses an integer from the input stream. @throws IOException if invalid integer format is encountered
489 Reads and parses a long integer value from the input stream. @throws IOException if invalid long value is encountered
490 Calculates fixed reference offset for a given object offset. @param objectOffset unique object identifier @return Fixed reference offset or 0 if not found
491 Computes user password based on input parameters. @param password password to encrypt @param owner ID of the owner @param permissions permissions flags @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return encrypted user password or empty byte array for REVISION_5/6
492 Computes and returns the owner password for a given user password. @param ownerPassword owner's password bytes @param userPassword user's password bytes @param encRevision encryption revision number @param length expected length of the user password @return encrypted owner password bytes or throws IOException if invalid input
493 Rotates the current transformation matrix by angle theta. @param theta rotation angle in radians
494 Applies text adjustments to the graphics state. @param tx horizontal adjustment amount @param ty vertical adjustment amount
495 Translates a 2D Vector by calling translate operation on its X and Y components.
496 Concatenates two matrices by performing matrix multiplication. @param a first matrix to multiply @param b second matrix to multiply (resulting as concatenation)
497 Creates a new PDDocument instance from an existing COSDocument. @param doc the COSDocument to initialize the PDF document with
498 Processes input text as a token. @param text input string to process
499 Retrieves the current access permission. @return AccessPermission object representing the current access level
500 Computes the revision number based on the provided version and access permissions. @param version application version
501 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key @param data input stream to read from @param output output stream to write to @param decrypt whether to encrypt (false) or decrypt (true)
502 Encrypts or decrypts data using AES256 algorithm. @param data input data to encrypt/decrypt @param output output stream for encrypted/decrypted data @param decrypt true for decryption, false for encryption
503 Encrypts data using RC4 algorithm with provided key. @param finalKey encryption key @param input data to be encrypted @param output OutputStream for encrypted data
504 Copies InputStream to OutputStream in chunks. @param data input stream @param output output stream
505 Prepares SASL query string. @param str input string to prepare
506 Prepares stored string for SASL authentication. @param str input string to be prepared
507 Writes a line of text containing multiple words. @param line list of WordWithTextPositions objects
508 Retrieves the FontBoxFont object associated with this element. @return cached or newly loaded FontBoxFont instance
509 Saves installed fonts information to disk cache.
510 Loads disk cache of FSFontInfo objects from a file. @param files list of File objects to check for existence in the cache @return List<FSFontInfo> object or null if cache needs to be re-built
511 Sets the FontProvider instance and updates internal font info map. @param fontProvider FontProvider instance to use
512 Initializes a ShadedTriangle object from given points and colors. @param p array of 3 Point2D objects representing triangle corners @param c 2x3 float matrix representing triangle color values
513 Writes a CID-to-Unicode CMap to the given OutputStream. @param out OutputStream to write to
514 Loads a glyph list from a resource file. @param filename name of the glyph list file @param numberOfEntries number of entries to load @return GlyphList object or null if loading fails
515 Initializes and returns a map of GID to code mappings. @return Map of unique GIDs to corresponding codes
516 Validates the PNG converter state. @param state PNGConverterState object to check @return true if valid, false otherwise
517 Resets text clipping by intersecting with buffered clip and clearing clippings list.
518 Updates graphics clipping based on current clipping paths. @param graphics Graphics context to transfer clip to
519 Returns input stream for signing incremental PDF part. @throws IOException if error occurs during stream construction
520 Merges a single Unicode character diacritic into the TextPosition string. @param diacritic the diacritic character to merge
521 Checks if two TextPositions overlap. @param tp2 TextPosition to check for overlap @return true if overlapping, false otherwise
522 Checks if the current TextPosition completely contains another one. @param tp2 TextPosition to check @return true if contained, false otherwise
523 Writes paragraph separator by writing end and start of paragraph.
524 Determines whether to start a new paragraph based on position and last line's characteristics. @param position current text position @param lastPosition previous text position @param lastLineStartPosition start of the previous line @param maxHeightForLine maximum height for a line
525 Creates a WordWithTextPositions object from a normalized word and its text positions. @param word the normalized word @param wordPositions list of TextPosition objects for the word
526 Writes PDF name to specified OutputStream. @param output OutputStream to write to @param cosName COSName object containing PDF name data
527 Writes an operand (COSName) to the output stream. @param name COSName object representing the operand
528 Writes a string to the output stream as ASCII or hex-encoded bytes. @param bytes input byte array @param forceHex forces encoding as hex if true @param output output stream to write to
529 Sorts a list using merge sort algorithm. @param list the list to be sorted @param cmp comparator to determine order
530 Initializes PDF marked content extractor with specified encoding. @param encoding character encoding for extracted content
531 Initializes PDF text stripper with required operators.
532 Retrieves dictionary object by its key. @param key unique key of the object to fetch @return COSBase object representing the dictionary item, or null if not found
533 Retrieves item by key. @param key unique item identifier as a string @return COSBase object representing the item or null if not found
534 Checks if a PDF Name exists in the COS dictionary. @param name PDF Name to search for @return true if found, false otherwise
535 Retrieves PDF filter by name. @param filterName unique filter identifier @return Filter object or null if not found
536 Parses a COS name from the input stream.
537 Initializes a PDColor object from a COSArray, which can contain either color components and a name or just color components. @param array COSArray containing color data @param colorSpace PDColorSpace associated with the color
538 Parses a hexadecimal-encoded string into a COSString object. @param hex the input hexadecimal string to parse
539 Creates a COSArray from a list of integers. @param integer list of integers to convert @return COSArray containing the converted integers
540 Converts list of string names to a COSArray of PDF COS Names. @param strings list of string names @return COSArray containing PDF COS Names
541 Creates a COSArray from a list of string values. @param strings collection of string values @return COSArray containing the input strings
542 Initializes an empty COSArrayList instance.
543 Initializes an instance of COSArrayList with a given dictionary and key. @param dictionary the COSDictionary containing the data @param dictionaryKey the unique key identifying the array in the dictionary
544 Initializes an empty destination array.
545 Initializes PDRectangle with position and dimensions. @param x left X-coordinate @param y top Y-coordinate @param width rectangle's width @param height rectangle's height
546 Initializes PDRectangle from a BoundingBox. @param box bounding box with x and y coordinates
547 Sets filter criteria by populating an array of COSNames. @param filters list of COSName objects representing filter values
548 Sets alternate color spaces for the PDF document. @param list List of PDColorSpace objects
549 Creates a new COSStream instance and adds it to the collection for later closure. @return COSStream object or null if creation fails
550 Initializes COSStream with no input stream.
551 Initializes COSStream with a stream cache and read view. @param streamCache RandomAccessStreamCache instance @param randomAccessReadView RandomAccessReadView object with length information
552 Returns an unmodifiable dictionary view of this COS dictionary. @return Unmodifiable COSDictionary object
553 Retrieves the last or default decode result. @return Last decode result, or default result if empty.
554 Retrieves PDF resources. @return PDResources object or null if not found
555 Initializes a new instance of the PDAttributeObject class.
556 Initializes a new instance of PDUserProperty with the specified user attribute object.
557 Initializes an empty outline node.
558 Constructs an empty PDDestinationNameTreeNode instance.
559 Initializes PDEmbeddedFilesNameTreeNode object.
560 Initializes an empty PD Javascript Name Tree Node.
561 Initializes this PDStructureElementNameTreeNode instance.
562 Constructs a PDNonTerminalField from an associated PDAcroForm. @param acroForm associated acrobat form
563 Initializes TerminalField with an AcroForm. @param acroForm PDAcroForm instance to associate with
564 Initializes PDLayoutAttributeObject from COSDictionary. @param dictionary input data to populate object properties
565 Initializes a new instance from a COSDictionary. @param dictionary COS dictionary containing attribute data
566 Constructs a PDPrintFieldAttributeObject from a COSDictionary.
567 Constructs a PDTableAttributeObject from a COSDictionary.
568 Initializes a PDAppearanceStream instance from a COSStream object. @param stream COSStream to initialize from
569 Initializes a new instance of PDTransparencyGroup from a COS stream and resource cache.
570 Adds TrueType fonts from the specified collection to the font list. @param ttcFile TrueType font file
571 Adds TrueType font information to the list. @param fontHeaders Font headers containing metadata @param file The TTF file being processed @param hash Unique identifier for the font
572 Adds Type1 font metadata from a PFB file. @param pfbFile PostScript font binary file
573 Initializes a checkbox widget with the specified parameters. @param acroForm form containing this widget @param field field dictionary for this widget @param parent non-terminal field that contains this widget
574 Initializes a push button widget with specified form, field dictionary and parent widget. @param acroForm the PDF form containing this button @param field the field dictionary for this button @param parent the parent non-terminal field widget
575 Initializes radio button form field with given parameters. @param acroForm parent AcroForm object @param field COSDictionary representing the field @param parent PDNonTerminalField parent field
576 Constructs a PDChoice object. @param acroForm PDAcroForm instance @param field COSDictionary representing the choice field @param parent PDNonTerminalField parent of this choice
577 Initializes a PDTextField with given parameters. @param acroForm PDAcroForm instance @param field COSDictionary representing the field @param parent PDNonTerminalField instance as parent
578 Saves the current graphics state by cloning and pushing it onto the stack.
579 Saves and resets the graphics stack. @return The original graphics stack deque
580 Initializes a new COSDocument instance with an in-memory stream cache.
581 Initializes COSParser with source data, encryption credentials, and stream cache settings. @param source input data to parse @param password decryption password @param keyStore encrypted key store input stream @param keyAlias alias of the decryption key @param streamCacheCreateFunction function to create a stream cache
582 Returns a human-readable string representation of the COSDictionary object. Uses getDictionaryString to generate the string, falling back to an error message if IOException occurs.
583 Clips the graphics state to a rectangular region. @param rectangle clipping rectangle in PDF coordinates
584 Transforms the appearance stream's bounding box using its matrix. @param appearanceStream Appearance stream to transform @return The transformed bounding box as a Rectangle2D object
585 Initializes graphics state with page clipping path. @param page bounding box of the page
586 Returns the integer value at index 2 of the internal array. @return The left value as an integer
587 Returns element at index 2 from the array. @return integer value of the third element in the array
588 Retrieves the value at index 3 from the underlying array.
589 Retrieves value from array at index 4. @return integer value stored at index 4
590 Retrieves the integer value at index 5 from the internal array. @return The integer value or default if not present
591 Retrieves the top value from an indexed array. @return The integer value at index 2 of the array.
592 Returns element at index 2 of the underlying array. @return integer value at specified position in the array
593 Retrieves the value at the fourth index (index 3) from an underlying array.
594 Checks if bounding box is of type BOUNDED. @return true if it's BOUNDED, false otherwise
595 Checks if the current array fits in a bounded type box. @return true if the array is of type TYPE_BOUNDED, false otherwise
596 Checks if the array has a bounded type with index 1. @return true if the array has a bounded type at index 1, false otherwise
597 Creates an output stream with default settings.
598 Creates an output stream with specified COSName filter. @param filter COSName used to filter output
599 Creates a thumbnail image from the given COS stream. @param cosStream input stream containing image data
600 Retrieves the mask image from the PDF object. @return PDImageXObject representing the mask image, or null if not found
601 Retrieves the soft mask image from the PDF object. @return PDImageXObject representing the soft mask or null if not found
602 Writes the given AffineTransform to output stream. @param transform affine transformation matrix
603 Begins text mode, writing the BEGIN_TEXT operator and setting flag. @throws IOException if an I/O error occurs
604 Ends text mode and writes the END_TEXT operator. @throws IOException if an I/O error occurs
605 Sets text leading margin. @param leading new leading value in points
606 Inserts a newline character in text mode. @throws IOException on write error
607 Inserts a newline at specified offset in text mode. @param tx x-coordinate of the newline @param ty y-coordinate of the newline
608 Saves the current graphics state for later restoration.
609 Restores graphics state by popping color spaces and font from stacks.
610 Sets the stroking color to RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
611 Sets stroking color using CMYK values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
612 Sets the stroking color to a gray value. @param g grayscale value between 0 and 1
613 Sets the non-stroking color with RGB values (0..1). @param r red component @param g green component @param b blue component
614 Sets non-stroking CMYK color with specified components. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
615 Sets non-stroking color to a gray value within the 0..1 range. @param g grayscale value between 0 and 1
616 Adds a rectangle to the current drawing context. @param x top-left X-coordinate @param y top-left Y-coordinate @param width rectangle width @param height rectangle height
617 Draws a quadratic Bézier curve defined by three points. @param x1 x-coordinate of control point 1 @param y1 y-coordinate of control point 1 @param x2 x-coordinate of control point 2 @param y2 y-coordinate of control point 2 @param x3 x-coordinate of end point @param y3 y-coordinate of end point
618 Adds a Bezier curve to the drawing, replicating the initial point. @param x2 y-coordinate of the second control point @param y2 x-coordinate of the second control point @param x3 y-coordinate of the third control point @param y3 x-coordinate of the third control point
619 Writes Bezier curve segment to output stream. @param x1 first control point X-coordinate @param y1 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
620 Moves to a point on the canvas by writing X and Y coordinates. @param x horizontal coordinate @param y vertical coordinate
621 Adds a line to the current drawing path with specified coordinates. @param x float value of X-coordinate @param y float value of Y-coordinate
622 Executes stroke operation. @throws IOException on I/O error
623 Closes and strokes the current graphics context, throwing an error if in text mode.
624 Fills non-zero data into the current operator.
625 Fills even and odd values into the output stream.
626 Fills and strokes the current graphics path. @throws IOException if an I/O error occurs @throws IllegalStateException if called from within a text block
627 Fills and strokes the shape with even-odd rule.
628 Closes, fills non-zero areas, and strokes the shape. @throws IOException if an I/O error occurs
629 Closes, fills, and strokes even/odd paths. @throws IOException if an I/O error occurs
630 Closes the current path, throwing an error if called within a text block.
631 Clamps the current path.
632 Clamps even and odd coordinates in current path.
633 Sets the line width using the specified value. @param lineWidth new line width in pixels
634 Sets the line join style. @param lineJoinStyle integer value (0-2) representing the desired line join style
635 Sets the line cap style to one of the three predefined values. @param lineCapStyle integer value (0, 1 or 2) representing the cap style
636 Sets a line dash pattern with specified phase. @param pattern array of float values representing the pattern @param phase float value representing the initial phase of the pattern
637 Sets the miter limit for line operations. @param miterLimit non-negative value to set as the miter limit
638 Closes marked content section.
639 Sets character spacing to specified value. @param spacing new character spacing (in pixels)
640 Sets word spacing to specified value. @param spacing new word spacing (in points)
641 Sets horizontal scaling factor. @param scale floating-point value to set as text horizontal scaling
642 Sets rendering mode for text rendering. @param rm RenderingMode enum value to set
643 Sets text rise value. @param rise new text rise value
644 Constructs a PDRectangle from a 4-element float array, clamping large values. @param array input array containing rectangle coordinates
645 Initializes PDLineDashPattern with array and phase values. @param array COSArray of dash lengths @param phase initial phase value, adjusted if negative
646 Returns a human-readable string representation of this PDRange. The format is "PDRange{min, max}" where min and max are the range's minimum and maximum values.
647 Evaluates a type 4 function and returns an array of float results. @param input array of input values to be evaluated @return array of output values or throws exception if incorrect size
648 Reads and interprets a patch from the given image input stream. @param input ImageInputStream to read from @param isFree whether this is a free-form patch (no implicit edges) @return Patch object or null if end-of-file reached
649 Reads a vertex from the image stream with specified coordinate and color ranges. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-coordinate range @param rangeY Y-coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform affine transform @return Vertex object or throws IOException if invalid data
650 Returns colour before current one. @return PDGamma object representing previous colour or null if not available
651 Returns the color after the current one in the gamma sequence. @return PDGamma object representing the next color in the sequence
652 Returns start colour by index.
653 Returns end colour of PDGamma. @return Colour object at index 3 or null if not found
654 Retrieves blend mode instance from dictionary object. @return BlendMode object or null if not found
655 Retrieves and returns a PDDestination object associated with the COS dictionary.
656 Retrieves the destination object from the COS dictionary. @return PDDestination object or null if not found
657 Retrieves the destination from the COS object. @return PDDestination object representing the destination
658 Retrieves the destination object from COS dictionary. @return PDDestination object or null if not found
659 Creates a Matrix object from the provided COSBase. @param base COSBase instance to extract matrix data from
660 Updates the document's highest XRef object number. @param importedPage PDPage object containing imported objects
661 Retrieves a COSDictionary object from the provided keys. @param firstKey primary key to identify the dictionary @param secondKey secondary key for additional context @return COSDictionary object or null if not found
662 Retrieves a boolean value from the dictionary using two keys. @param firstKey primary key for dictionary lookup @param secondKey secondary key for dictionary lookup @param defaultValue default value to return if not found or invalid @return true/false or defaultValue if lookup fails
663 Retrieves integer value from dictionary by key. @param firstKey primary key @param secondKey secondary key @param defaultValue default value if not found @return integer value or default value if missing
664 Retrieves filter values as a list of strings. @return List of filter names or an empty list if not found
665 Retrieves the PDF color space. @return PDColorSpace object or null if not initialized
666 Checks if the given COSDictionary represents a catalog. @param dictionary COSDictionary object to inspect @return true if it's a catalog, false otherwise
667 Checks if a COSDictionary represents a page tree node. @param node COSDictionary to check @return true if the dictionary is a page tree node, false otherwise
668 Retrieves the COSName of the cryptographic filter method. @return COSName object representing the CFM (Cryptographic Filter Method) name
669 Returns the stream filter name, or IDENTITY if not set.
670 Returns string filter name from dictionary or IDENTITY if not found. @return COSName object representing the string filter name
671 Decrypts specified COS objects within a dictionary. @param dictionary the dictionary to decrypt @param objNum object number (not used in this method) @param genNum generation number (not used in this method)
672 Converts a code point to its Unicode string representation using the ToUnicode CMap or Identity-* CMaps if available. @param code the code point to convert @return the Unicode string or null if not found
673 Retrieves the subtype of a COS object, initializing it if not set. @return COSName representing subtype or null if uninitialized
674 Retrieves relationship attribute as a COSName object. @return COSName object representing relationship or null if not set
675 Retrieves the appearance state of the COS object. @return COSName representing the appearance state or null if not available
676 Checks if the PDF document is encrypted. @return true if encrypted, false otherwise
677 Retrieves encryption dictionary from trailer. @return COSDictionary object containing encryption data
678 Initializes the parser by parsing the PDF trailer and root dictionary.
679 Retrieves and applies the AcroForm content with fixes. @param acroFormFixup fixes to apply to the AcroForm @return PDAcroForm object or null if not found or already applied
680 Retrieves viewer preferences from the PDF document's dictionary. @return PDViewerPreferences object or null if not found
681 Retrieves the document's name dictionary. @return Name dictionary or null if not found
682 Retrieves the document's name destinations dictionary. @return PDDocumentNameDestinationDictionary or null if not found
683 Retrieves mark info from the PDF document. @return PDMarkInfo object or null if not found
684 Retrieves the URI dictionary from the document. @return a PDURIDictionary object or null if not found
685 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
686 Retrieves optional content properties from the PDF document. @return PDDocument's optional content properties or null if not found
687 Retrieves a tree node containing destination names from the document catalog. @return PDDestinationNameTreeNode object or null if not found
688 Retrieves embedded files tree node from the user's profile. @return PDEmbeddedFilesNameTreeNode object or null if not available
689 Retrieves JavaScript object from the PDF document. @return PDJavascriptNameTreeNode object or null if not found
690 Retrieves the transition object associated with this page. @return PDTransition object or null if not available
691 Retrieves an indirect COSObject by name from a dictionary of the given kind. @param kind type of resources to search @param name name of the indirect object to fetch @return COSObject if found, or null otherwise
692 Retrieves an object from a dictionary by its name. @param kind type of dictionary to search @param name object name to retrieve @return COSBase object or null if not found in the specified dictionary
693 Retrieves an iterable collection of COS names associated with the given COS name type. @param kind COS name type @return Iterable<COSName> containing associated names or empty set if none found
694 Retrieves a PDPage object associated with this page. @return PDPage object or null if not found
695 Retrieves a PDF page object from the underlying COS dictionary. @return PDPage object or null if not found
696 Retrieves a PDF page object from the PDF document. @return PDPage object or null if not found
697 Retrieves the ID tree node from the COS dictionary. @return PDNameTreeNode containing ID tree data or null if not found
698 Retrieves the parent tree node from the current object. @return PDNumberTreeNode representing the parent tree or null if not found
699 Maps PDF classes to their attributes.
700 Retrieves the encryption filter dictionary for a given name. @param cryptFilterName unique name of the encryption filter @return PDCryptFilterDictionary object or null if not found
701 Retrieves border style dictionary from annotation. @return BorderStyle dictionary or null if not found
702 Retrieves border effect dictionary from annotation. @return PDBorderEffectDictionary object or null if not found
703 Retrieves the user's digital signature from the catalog. @return PDSignature object or null if not found
704 Retrieves JavaScript code from FDF document. @return FDFJavaScript object or null if not found
705 Retrieves appearance dictionary from PDF field. @return PDAppearanceDictionary object or null if not found
706 Retrieves appearance stream reference from the field dictionary. @return FDFNamedPageReference object or null if not found
707 Retrieves icon fit information from the PDF field's dictionary. @return FDFIconFit object if found, or null otherwise
708 Retrieves additional actions from PDF document. @return PDAdditionalActions object or null if not available
709 Retrieves the FDF page info from the given document. @return FDFPageInfo object or null if not found
710 Retrieves a named page reference from the PDF template. @return FDFNamedPageReference object or null if not found
711 Retrieves CID system info from the dictionary. @return PDCIDSystemInfo object or null if not found
712 Retrieves the Panose value from the style dictionary. @return PDPanose object or null if not found
713 Retrieves and caches PDF resources. @return PDResources object or null if not found
714 Retrieves character procedures dictionary. @return COSDictionary object containing character procedures or null if not initialized
715 Retrieves the N-Process object from the PDF document dictionary. @return PDDeviceNProcess object or null if not found in the dictionary
716 Retrieves the render state based on the specified destination. @param destination target output location (PRINT, VIEW, or EXPORT) @return RenderState enum value for the given destination or null if not found
717 Retrieves the extended graphics state, initializing it from the COS dictionary if necessary. @return PDExtendedGraphicsState object or null if not initialized
718 Retrieves PDF resources dictionary. @return PDResources object or null if not found
719 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
720 Retrieves Windows launch parameters from associated COS dictionary. @return PDWindowsLaunchParams object or null if not found
721 Retrieves the target directory from the PDF dictionary. @return PDTargetDirectory object or null if not found
722 Retrieves the appearance dictionary from the PDF document. @return PDAppearanceDictionary object or null if not found
723 Retrieves a PDF page object from the underlying COS dictionary. @return PDPage object or null if not found
724 Retrieves the border effect dictionary. @return BorderEffectDictionary object or null if not found
725 Retrieves border style dictionary. @return BorderStyleDictionary object or null if not found
726 Returns the URI of the previous action in a PDF document. @return PDActionURI object or null if not found
727 Retrieves external data dictionary for PDF document. @return ExternalDataDictionary object or null if not found
728 Retrieves border style dictionary. @return BorderStyleDictionary object or null if not found
729 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
730 Retrieves the border effect dictionary for this PDF document. @return PDBorderEffectDictionary object or null if not found
731 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
732 Retrieves additional annotation actions from PDF document. @return PDAnnotationAdditionalActions object or null if not found
733 Retrieves border style dictionary from COS object. @return BorderStyleDictionary object or null if not found
734 Retrieves normal appearance data from the dictionary. @return PDAppearanceEntry object or null if not found
735 Retrieves the filter data as a PDPropBuildDataDict object. @return PDPropBuildDataDict object or null if not available
736 Retrieves the public security build data. @return PDPropBuildDataDict object or null if not found
737 Retrieves the application data dictionary. @return PDPropBuildDataDict object or null if not found
738 Retrieves MDP (Metadata/Properties Dictionary) object from the dictionary. @return PDSeedValueMDP instance or null if not found
739 Retrieves seed value certificate from PDF document. @return PDSeedValueCertificate object or null if not found
740 Retrieves time stamp value from document. @return PDSeedValueTimeStamp object or null if not found
741 Retrieves the Prop Build object from the PDF dictionary. @return PDPropBuild object or null if not found
742 Retrieves structure element from PDF data. @return PDStructureElement object or null if not found
743 Checks if the current object has children. @return true if the object has children, false otherwise
744 Retrieves default resources for a PDF document. @return PDResources object or null if not found
745 Retrieves additional form actions from the PDF document. @return PDFormFieldAdditionalActions object or null if not available
746 Retrieves a PDSignature object from the underlying dictionary. @return PDSignature object or null if not found
747 Retrieves default PDSignature from the document's dictionary. @return PDSignature object or null if not found
748 Retrieves the seed value from the PDF document. @return PDSeedValue object or null if not found
749 Retrieves a PDMeasureDictionary object from the PDF document. @return PDMeasureDictionary object or null if not found
750 Retrieves thread information as a PDDocumentInformation object. @return PDDocumentInformation object or null if not found
751 Retrieves the first bead from the thread, or null if not found. @return PDThreadBead object representing the bead, or null
752 Retrieves a PD thread object from the given dictionary. @return PDThread object or null if not found
753 Retrieves the next bead in the thread. @return The next PDThreadBead object or null if none exists
754 Retrieves the previous bead in the thread. @return Previous PDThreadBead object or null if not found
755 Retrieves a PDPage object associated with the current page. @return PDPage object or null if not found
756 Retrieves metadata from the PDF document. @return PDMetadata object or null if not found
757 Retrieves PDMetadata object associated with this page. @return PDMetadata object or null if not found
758 Retrieves differences stream from FDF object. @return COSStream containing differences data
759 Retrieves font file as a PDStream object. @return PDStream object or null if not found
760 Retrieves the font file stream from dictionary. @return PDStream object or null if not found
761 Retrieves the font file from the PDF document. @return PDStream object containing the font data or null if not found
762 Retrieves the CID set as a PD stream. @return PDStream object or null if not found
763 Retrieves the sound stream from the Action object.
764 Retrieves the normal icon as a PDFormXObject from the COS object. @return PDFormXObject representation of the icon or null if not found
765 Retrieves the rollover icon as a PDFormXObject. @return PDFormXObject object or null if not found
766 Retrieves alternate icon as a PDFormXObject from the COSStream. @return PDFormXObject object or null if not available
767 Retrieves and returns the document ID as a COSArray.
768 Retrieves a list of output intents from the PDF document. @return List of PDOutputIntent objects
769 Retrieves a list of thread beads from the page. @return List<PDThreadBead> containing thread bead objects
770 Retrieves a list of PDF viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if not found
771 Retrieves a list of child nodes for the current node. @return List<PDNameTreeNode<T>> containing child nodes or null if none found
772 Retrieves a map of name-value pairs from the COS array. @return Map<String, T> or null if no names are found
773 Retrieves a list of child PDNumberTreeNode objects. @return List of child nodes or null if none exist
774 Retrieves a map of numerical values keyed by integer indices from the 'NUMS' array. @return Map<Integer, COSObjectable> or null if array is empty or malformed
775 Retrieves the upper limit value from the node's COS array. @return The upper limit integer value, or null if not found
776 Retrieves the lower limit value from the COS array. @return Lower limit integer or null if not found
777 Retrieves the array of range values. @return COSArray containing range values or null if not initialized
778 Retrieves an array of domain values from the underlying COS object. @return COSArray containing domain values or null if not initialized
779 Retrieves the size array from the COS object, caching it if not already fetched. @return COSArray representing the document's size
780 Retrieves COS array containing decode values. @return COSArray object with decode values or null if not set
781 Returns an array of functions. @return COSArray containing function names or null if not initialized
782 Retrieves or initializes the bounds array. @return COSArray representing object's bounds
783 Retrieves and returns the encoded array. @return COSArray object or null if not initialized
784 Retrieves a list of owner user properties. @return List of PDUserProperty objects
785 Checks if the given edge is attached. @param edge edge identifier @return true if attached, false otherwise
786 Retrieves color value from annotation. @return Color object or null if not set
787 Retrieves the interior color from annotation data. @return Color object or null if not available
788 Retrieves callout data as a float array. @return float array containing callout values or null if not available
789 Retrieves the ink list from the annotation, which contains a collection of float arrays. @return List of float arrays representing the ink data or null if not found.
790 Retrieves the line data from the annotation. @return Line data as a float array or null if not found
791 Retrieves the start point ending style from annotation attributes. @return The ending style as a string (e.g. LE_NONE, LE_SQUARE) or LE_NONE if not found
792 Returns the ending style of a line annotation's endpoint. @return String representing the endpoint style (e.g. LE_NONE, LE_SQUARE, etc.)
793 Retrieves the interior color from the annotation. @return Color object or null if not available
794 Retrieves horizontal caption offset from COS array. @return Horizontal offset value or 0.0f if not found
795 Retrieves caption vertical offset from annotation.
796 Retrieves an array of vertices from the annotation. @return Array of vertex values or null if not available
797 Retrieves the interior color from annotations. @return Color object or null if not found
798 Retrieves an array of vertices from the annotation.
799 Retrieves the start point ending style from the annotation. @return The style as a string (e.g. LE_NONE, LE_SQUARE etc.) or default if not found
800 Retrieves the ending style of the annotation line endpoint. @return EndpointEndingStyle constant or default value if not found
801 Retrieves the interior color of an object as a Color object. @return Color object or null if not available
802 Retrieves the interior color from annotation. @return Color object or null if not available
803 Returns an array of float coordinates.
804 Retrieves the ID COSArray from FDF. @return COSArray containing user ID or null if not found
805 Retrieves a list of FDF fields from the underlying COS structure. @return List<FDFField> collection of fields or null if empty
806 Retrieves a list of FDFPages from the PDF file. @return List of FDFPage objects or null if not found
807 Retrieves a list of child fields for the given field. @return List<FDFField> containing child fields or null if none found
808 Retrieves a list of option elements. @return List of option elements or null if not available
809 Retrieves a list of templates from the page's COSArray. @return List<FDFTemplate> containing template objects or null if empty
810 Retrieves a list of FDF fields from the template. @return List of FDFField objects or null if no fields exist
811 Returns a list of width values as floats. @return List of float widths or empty list if not available
812 Returns the transformation matrix from the dictionary. @return a float array representing the matrix or a default identity matrix if not found
813 Retrieves a list of component names from the dictionary. @return List of component names or an empty list if not found
814 Retrieves the background COSArray from the underlying dictionary. @return COSArray representing the background or null if not found
815 Retrieves the domain object as a COSArray. @return COSArray representing the domain or null if not set
816 Retrieves and returns the Extend array, lazily initializing it from the COS document if needed.
817 Retrieves the domain as a COSArray. @return The domain array or null if not initialized
818 Retrieves and returns the coordinates array. @return COSArray object containing coordinate values or null if not initialized
819 Retrieves and returns the decode values array. @return COSArray containing decode values, or null if not initialized
820 Retrieves font setting from PDF document dictionary. @return PDFontSetting object or null if not found
821 Retrieves an array of field names from the underlying object.
822 Retrieves COS array of fields from action. @return COSArray containing field information
823 Returns an array of rectangle differences.
824 Returns an array of rectangle differences.
825 Retrieves callout data as a float array. @return float array containing callout data or null if not found
826 Retrieves the list of ink objects from the PDF document. @return 2D array of floats representing the ink list, or empty array if not found
827 Converts COS array to float array. @return float array representation of L coordinate system
828 Retrieves the start point ending style from the COSArray. @return starting point ending style or default value (LE_NONE) if not available.
829 Retrieves the ending style of a PDF end point. @return String representing the ending style or default value if not found
830 Retrieves horizontal offset of a caption.
831 Returns vertical offset of caption from its base position.
832 Returns quad points as a float array. @return Quad point coordinates or null if not available
833 Returns an array of vertices. @return float array of vertex coordinates or null if not available
834 Retrieves the path as a 2D array of floats. @return 2D array of floats representing the path, or null if not found
835 Retrieves the start point ending style from COS array. @return line style as a string or LE_NONE if not found
836 Returns the end point ending style for a line annotation. @return style as a string or default (PDAnnotationLine.LE_NONE) if not found
837 Retrieves an array of 3D vertex coordinates. @return a float array or null if not available
838 Returns an array of rectangle differences.
839 Retrieves quad points from COS object. @return Array of four floats representing quad point coordinates or null if not found
840 Retrieves list of sub-filter names from the dictionary. @return list of filter names or empty list if not found
841 Retrieves a list of supported digest methods from the given dictionary. @return List of digest method names or empty list if not available
842 Retrieves a list of reasons from the provided dictionary.
843 Retrieves a list of legal attestations from the provided dictionary. @return List of strings representing legal attestations or an empty list if none found
844 Retrieves a list of subject byte arrays from the PDF document. @return List of subject byte arrays or null if not found
845 Retrieves a list of string values representing key usage. @return List of strings or null if KEY_USAGE array is missing
846 Retrieves a list of issuer certificates as byte arrays. @return List of issuer certificate byte arrays or null if not found
847 Retrieves OID values as a list of byte arrays from the PDF dictionary.
848 Retrieves the PDF byte range from the dictionary. @return array of integers representing the byte range
849 Retrieves the calculation order of PDFields from the COSArray. @return List of PDField objects in the calculated order
850 Retrieves a list of selected option indices. @return List of integers representing the index values or an empty list if no options are selected
851 Retrieves an array of PDNumberFormat dictionaries. @return Array of PDNumberFormat dictionaries or null if empty
852 Retrieves an array of Y number format dictionaries from the PDF catalog. @return PDNumberFormatDictionary[] or null if not found
853 Retrieves an array of distance dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
854 Retrieves an array of area dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
855 Retrieves an array of angle number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not available
856 Retrieves an array of line slope dictionaries. @return Array of PDNumberFormatDictionary objects or null if not available
857 Retrieves the origin of the coordinate system as a float array. @return Origin coordinates (x, y) or null if not found
858 Retrieves the visibility policy as a COSName. @return COSName representing visibility policy (P or ANY_ON)
859 Retrieves a long value from the PDF dictionary by its name. @param key unique PDF dictionary key
860 Retrieves the long value associated with the given COSName. @param key unique identifier
861 Retrieves a long value from PDF metadata using the specified key. @param key unique identifier of the metadata field @param defaultValue default value to return if not found
862 Applies a series of filters to an encoded InputStream, returning the filtered result in a RandomAccessRead buffer. @param encoded InputStream containing encoded data @param filterList List of Filter objects to apply sequentially @param parameters COSDictionary with decoding options and metadata @param options DecodeOptions for filtering process @param results Optional list to store intermediate DecodeResult objects @return RandomAccessRead buffer containing filtered result
863 Sets the startxref trailer by ID. @param startxrefBytePosValue unique byte position identifier
864 Retrieves float value associated with the given PDF name. @param key unique PDF name
865 Retrieves float value associated with given COS name. @param key unique COS identifier
866 Retrieves a floating-point value from the COS dictionary by key. @param key unique COS name @param defaultValue default value to return if not found @return float value or defaultValue if not present
867 Retrieves and returns the user's unit value, defaulting to 1.0 if invalid. @return user's unit value (float)
868 Retrieves guideline width from configuration. @return guideline width value as a float
869 Retrieves the opacity value from an annotation. @return opacity value in the range [0, 1] or NaN if not available
870 Retrieves font weight value from configuration dictionary. @return Font weight as a floating-point number or default 0.0 if not found
871 Retrieves italic angle value from font dictionary. @return italic angle in degrees or default value (0) if not found
872 Retrieves the ascent value from the dictionary. @return Ascent value in radians or 0 if not set
873 Retrieves descent value from configuration. @return Descent value as a float (defaulting to 0 if not configured)
874 Retrieves leading value from dictionary. @return Leading value or default 0 if not found
875 Returns the font's cap height; returns absolute value if initially negative.
876 Returns the x-height of a font. @return x-height value or recalculated if previously set to negative infinity
877 Retrieves the stem velocity value from the dictionary. @return stem velocity value or default 0 if not found
878 Retrieves the stem height value from the dictionary. @return Stem height value or default of 0 if not found
879 Retrieves average width from dictionary. @return Average width value or default 0 if not found
880 Retrieves maximum width value from configuration. @return max width as a float or default 0 if not set
881 Retrieves missing width value from dictionary. @return missing width value as a float or default value (0) if not found
882 Retrieves gamma value from dictionary. @return Gamma value (defaulting to 1.0 if not present)
883 Retrieves X-step value from COS object. @return X-step measurement or 0 if not available
884 Retrieves Y-step value from COS object. @return Y-step value as a float or default 0 if not available
885 Retrieves and sanitizes the volume value from the action. @return Volume between -1 and 1 (inclusive), or 1 if out of range
886 Retrieves the length of the leader line. @return Length of the leader line (float)
887 Retrieves leader line extension length from COS object. @return Leader line extension length or default value (0) if not set.
888 Retrieves leader line offset length from COS object. @return Leader line offset length as a floating-point value.
889 Retrieves constant opacity value from COS object. @return Constant opacity value as a floating-point number
890 Retrieves document width. @return float width value or 0 if not applicable
891 Retrieves duration value from COS Object. @return Duration as a floating-point number
892 Retrieves the fly scale value from the COS object. @return Fly scale value as a float
893 Initializes extraction for all specified regions on the given page. @param page PDPage object to extract from
894 Retrieves color space.
895 Creates a PDF property list based on the provided COS dictionary type. @param dict COS dictionary to create the list from
896 Retrieves line width from stored settings. @return line width as a floating-point value or null if not set
897 Retrieves miter limit value from CSSOM. @return Miter limit as a floating-point number or null if not available
898 Retrieves flatness tolerance value. @return Flatness tolerance as a floating-point number
899 Returns smoothness tolerance value. @return Smoothness tolerance as a Float value
900 Retrieves stroking alpha constant from core graphics settings. @return Alpha value as a float or null if unavailable
901 Retrieves non-stroking alpha constant value.
902 Parses a dictionary value from the PDF source. @return COSBase object or null if parsing fails
903 Returns a map of COS object offsets, triggering a background search if necessary. @throws IOException on error
904 Adds and writes a COS object to storage. @param obj COSBase object to write
905 Writes a PDF reference to standard output. @param obj COSBase object to extract key from
906 Serializes and writes user profile data to an output stream. @param output OutputStream to write data to
907 Clears all stored objects and triggers an update of the underlying state.
908 Removes all specified COSBase objects from the collection. @param objectsList list of COSBase objects to remove
909 Updates retained collection of COSBase objects. @param objectsList list of objects to retain
910 Sets an integer value at a specified index in the object list. @param index the position to update @param intVal the new integer value
911 Removes entry at specified index and updates state. @param i index of element to be removed @return removed COSBase object or null if index out of bounds
912 Removes specified object from collection and updates update state if successful. @param o the object to be removed @return true if object was successfully removed, false otherwise
913 Clears all items and updates the update state.
914 Removes an item from storage by its COSName key. @param key unique identifier of the item to be removed
915 Updates the origin state only when it differs from the previous state. @param updateState COSUpdateState object to be updated
916 Resets object reference to null, updating state if previously non-null.
917 Sets the origin document state and updates related update info as needed. @param originDocumentState new origin document state @param dereferencing whether to dereference the update info
918 Returns string at specified index. @param index position of desired string @return string at given index or null if out of bounds
919 Retrieves name as string using COSName.getPDFName. @param key PDF object reference
920 Returns user name as string, or default value if not available. @param key COSName object to fetch name from @param defaultValue default name to use if fetching fails
921 Checks if the PDF file contains an XRef stream starting at the specified offset. @param startXRefOffset the offset to check @return true if an XRef stream is found, false otherwise
922 Retrieves the page mode from the root element. @return PageMode enum value or USE_NONE if not found or invalid.
923 Retrieves the page layout from the root element and returns a corresponding PageLayout enum value. If invalid, falls back to SINGLE_PAGE.
924 Retrieves the version string from the COS.
925 Retrieves trapped status as a string. @return "true" if trapped, otherwise empty string
926 Retrieves the style attribute from the root element. @return Style value as a string or null if not found
927 Retrieves the type of COS object. @return COS object name as string
928 Retrieves the owner's name from the COS object. @return The owner's name as a string, or null if not found
929 Retrieves structure type from COS object. @return Structure name as string or null if not available
930 Creates a PDStructureNode based on the provided COSDictionary. @param node COS dictionary containing type information
931 Retrieves the type of COS object. @return The name of the TYPE attribute as a string
932 Retrieves the name as a string from the underlying COS object. @return The user's name as a string.
933 Retrieves user language. @return Language string or null if not found
934 Retrieves the type of an object. @return string representation of the object's type
935 Retrieves the subtype value as a string. @return subtype name or empty string if not found
936 Retrieves filter name from dictionary. @return filter name as string or null if not found
937 Returns the sub-filter name from the dictionary. @return name of the sub-filter or null if not found
938 Creates a FDFAnnotation object from the given COSDictionary. @param fdfDic COS dictionary containing annotation data
939 Retrieves the intent name as a string. @return Intent name or null if not set
940 Retrieves the line ending style as a string. @return The line ending style (e.g., "LF", "CRLF") or null if unknown.
941 Retrieves the application version as a string. @return Application version identifier or null if not found
942 Retrieves the encoding used in the PDF document. @return Encoding name as a string, defaulting to "PDFDocEncoding" if not found.
943 Retrieves scale option based on Fit object's SW name or default value.
944 Retrieves scale type as string, or default if not set.
945 Retrieves the base font name from PDF dictionary. @return Font name or null if not set
946 Retrieves the type name from the dictionary. @return The COS type string or null if not found
947 Retrieves subtype name from dictionary. @return Subtype string or null if not found
948 Retrieves font name from COS dictionary. @return Font name string or null if not available
949 Retrieves font stretch value from PDF dictionary. @return Font stretch string (e.g. "ultra condensed", etc.) or null if not found
950 Retrieves the base font name from the dictionary. @return Base font name as a string or null if not found
951 Returns the base font name from the document dictionary. @return base font name as a string or null if not available
952 Retrieves the base font name from the dictionary. @return The base font name as a string or null if not found
953 Retrieves the base font name from the dictionary. @return the base font string or null if not found
954 Checks if the subtype matches 'NChannel' in the dictionary. @return true if subtype matches, false otherwise
955 Retrieves the type of this action.
956 Returns subtype of the action based on its name. @return Subtype string or null if not found
957 Creates a PDAction object based on the provided COSDictionary. @param action COSDictionary containing action details @return PDAction object or null if invalid
958 Retrieves the subtype name from the COS object. @return subtype name as a string
959 Retrieves caption positioning from COS object. @return Caption positioning string or null if not available
960 Retrieves the intent from the COS object.
961 Retrieves subtype name as a string from COS object.
962 Retrieves the name from the dictionary. @return Name as a string or null if not available
963 Retrieves filter name from dictionary. @return filter name as string or null if not found
964 Retrieves the URL type from the dictionary. @return String representation of the URL type
965 Retrieves filter name from configuration. @return Filter name as string or null if not found
966 Retrieves sub-filter name from configuration dictionary. @return name of sub-filter as string or null if not found
967 Returns field type as string from COS object.
968 Retrieves the name of the COS object associated with this instance. @return The name string or null if not available
969 Retrieves duplex printing setting as string. @return Duplex printing setting or null if not set
970 Retrieves string value from PDF using COS name. @param key unique identifier of the string to fetch
971 Returns string value associated with a given COS key, or default value if not found. @param key COSName key to lookup @param defaultValue fallback string value if key is missing
972 Retrieves the language of the current document. @return Language string (e.g. "en", "fr") or null if not set
973 Retrieves title from stored information.
974 Retrieves the author name from the metadata. @return The author string or null if not available
975 Retrieves subject from metadata. @return subject string value or null if not present
976 Retrieves keywords associated with this entity. @return Keywords string or null if not available
977 Retrieves creator name from metadata. @return Creator's name as a string or null if not found
978 Retrieves the producer name from metadata. @return producer name as a string or null if not found
979 Retrieves the prefix from the root node. @return Prefix string or null if not set
980 Retrieves Unicode file name. @return file name as a string
981 Retrieves file content as a string.
982 Retrieves DOS file information from the COS. @return File name as a string or null if not found
983 Retrieves file MAC address from COS. @return MAC address as a string or null if not available
984 Retrieves file path in Unix format. @return string representation of file path in Unix style
985 Retrieves file description from configuration. @return File description string
986 Retrieves the ID of the current COSObject. @return string identifier or null if not set
987 Retrieves the title from the COS object. @return the COS string value of "T" (title) or null if not available
988 Retrieves the language setting from the COS. @return language code (e.g. "en", "fr") or null if not set
989 Retrieves alternate description from COS object. @return Alternate description as string or null if not available
990 Retrieves the expanded form of the COS object.
991 Retrieves the actual text value from COS object. @return Actual text string or null if not set
992 Retrieves and formats the COS string value. @return formatted string value or null if not available
993 Retrieves actual text from properties. @return Actual text string or null if not found
994 Retrieves alternate description from properties. @return alternate description string or null if not found
995 Retrieves the expanded form of the object. @return Expanded string representation or null if properties are missing
996 Retrieves the date from annotation data. @return Date string in format defined by COSName.M
997 Retrieves name from annotation. @return Name string or null if missing
998 Retrieves the contents from the annotation. @return contents string or null if not available
999 Retrieves the title from the annotation data. @return title string value or null if not available
1000 Retrieves subject from annotation. @return subject string or null if absent
1001 Retrieves the symbol associated with this annotation.
1002 Retrieves rotation annotation value. @return Rotation angle string from COS (Common Object Services) annotations
1003 Retrieves default appearance value from annotation. @return String representation of DA (Default Appearance) COS name
1004 Retrieves default style string from annotation. @return Default style string or null if not available
1005 Retrieves caption style from annotation. @return CSS string representing caption style.
1006 Retrieves the current state from the annotation. @return State string value or null if not set.
1007 Retrieves the state model from annotations. @return string representation of state model or null if not set
1008 Retrieves the user status from the FDF database. @return The user's current status as a string or null if not found.
1009 Retrieves the target value from the PDF document. @return target string or null if not present
1010 Returns partial field name from COS string. @return Partial field name as a string
1011 Retrieves the name from the COSName enum value. @return The user's name as a string
1012 Retrieves font family from configuration dictionary. @return Font family string or null if not found
1013 Retrieves the character set from the dictionary. @return Character set string or null if not available
1014 Retrieves user's full name from dictionary. @return Full name as a string or null if not found
1015 Retrieves an array of group names from the underlying dictionary. @return Array of group names, or empty array if none found.
1016 Retrieves the value of F from COSName constants. @return string representation of F or null if not found
1017 Retrieves the value of COSName.D from the action's string pool.
1018 Retrieves a string value associated with COSName.O.
1019 Retrieves string value associated with COSName.P.
1020 Retrieves the URI value from the PDF dictionary. @return URI string in UTF-8 encoding or null if not found
1021 Retrieves filename from dictionary.
1022 Retrieves annotation name from dictionary. @return The annotation name as a string.
1023 Retrieves filename from parameters. @return Filename string or null if missing
1024 Retrieves directory value from parameters. @return Directory string value
1025 Retrieves execute parameter value from params collection. @return Execute parameter string or null if not found
1026 Retrieves contents string from dictionary. @return Contents string or null if not available
1027 Retrieves the modified date in string format from COS object. @return modified date as a string or null if not set
1028 Retrieves the annotation name from the COS object. @return The annotation name as a string or null if not available
1029 Retrieves the default appearance from COS data. @return The default appearance as a string.
1030 Retrieves default style string from COS object. @return Default style string as a string.
1031 Retrieves title popup string from COS object. @return title popup string or null if not available
1032 Retrieves subject string from COS object. @return Subject string or null if not available
1033 Retrieves the document state as a string. @return Document state (e.g. "new", "modified") or null if not set
1034 Retrieves state model string from COS object. @return State model string or null if not available
1035 Retrieves the normal caption string from the COS object. @return Normal caption string or null if not available.
1036 Retrieves rollover caption from COS object. @return String representation of rollover caption or null if not found
1037 Retrieves alternate caption from COS object. @return Alternate caption string or null if not available
1038 Retrieves the date value from the dictionary. @return Date string stored in the COSName.DATE key
1039 Retrieves the operating system from the PDF document. @return OS name or null if not present in COS array, otherwise returns string value of /OS key
1040 Extracts a list of subject DNs from the dictionary. @return List of Map objects containing subject DN attributes
1041 Retrieves URL from configuration dictionary. @return The stored URL as a string or null if not set
1042 Retrieves URL value from configuration dictionary. @return the URL string or null if not set
1043 Retrieves the name from the dictionary. @return name string as per COSName.NAME key
1044 Retrieves location from internal dictionary. @return Location string or null if not present
1045 Retrieves reason string from dictionary. @return Reason string or null if missing
1046 Retrieves contact information from the dictionary. @return Contact info string or null if not available
1047 Retrieves document title from COS object. @return document title as string or null if not available
1048 Retrieves and returns partial name from dictionary. @return partial name as string or null if not found
1049 Retrieves alternate field name from dictionary. @return The TU value as a string.
1050 Retrieves the mapping name from the dictionary. @return The mapping name as a string or null if not found
1051 Retrieves default style string from COS object. @return Default style string or null if not available
1052 Retrieves scale ratio from COS object. @return Scale ratio string or null if not available
1053 Returns a map of role information. @return Map of role names to objects or an empty map if not available
1054 Retrieves a list of options from the COS dictionary.
1055 Retrieves display values for options. @return list of option display values
1056 Retrieves string value from inheritable attribute or returns default if not numeric index.
1057 Retrieves value for COSName.V. @return list of strings representing the value
1058 Retrieves default value from storage. @return list of strings containing default values
1059 Initializes an empty PDSimpleFileSpecification object.
1060 Sets the file name. @param fileName the file name to be set
1061 Initializes a new PDNamedDestination instance with the provided destination string. @param dest the name of the destination to initialize with
1062 Sets a named PDF destination from the specified string. @param dest the destination string or null to clear
1063 Validates and returns the generation number from input stream. @throws IOException if invalid generation number is encountered
1064 Validates and returns a non-negative object number with less than 10 digits. @throws IOException if the number exceeds threshold
1065 Retrieves user password based on owner and encryption revision. @param ownerPassword existing password (ignored for rev 5-6) @param owner unique user identifier @param encRevision encryption revision level @param length password length @return encoded password or empty byte array for rev 5-6
1066 Initializes TensorPatch with control points and color data. @param tcp array of 2D points representing control points @param color 2D float array for tensor patch color information
1067 Encrypts data using RC4 algorithm with a given key. @param finalKey encryption key as byte array @param input input stream containing data to encrypt @param output output stream for encrypted data
1068 Returns the active font provider instance. @return FontProvider instance or DefaultFontProvider if not initialized
1069 Creates a list of shaded triangles from the given patch of coordinates and colors. @param patchCC 2D array of CoordinateColorPair objects representing the patch @return List of ShadedTriangle objects
1070 Initializes a Coons Patch with given control points and colors. @param points array of 2D points defining the patch's shape @param color array of float arrays representing the patch's color data
1071 Processes a text position, suppressing duplicates and overlapping text. @param text TextPosition object to process
1072 Processes a text position based on the actual text and suppression rules. @param text the text position to process
1073 Removes consecutive spaces from the provided text positions list. @param textList list of TextPositions to process
1074 Handles line separation for a given position, updating start positions and writing necessary separators. @param current current position wrapper @param lastPosition previous position wrapper @param lastLineStartPosition previous line start position wrapper @param maxHeightForLine maximum height for a line @return updated last line start position wrapper
1075 Processes a LineItem, adding characters to a StringBuilder and positions to a List. @param normalized list of processed words @param lineBuilder StringBuilder for current line @param wordPositions List of TextPosition objects for the line @param item LineItem object being processed @return updated StringBuilder for the next line or null if finalized
1076 Parses a date string into a Calendar object. @param text date string in specified format
1077 Begins marked content section. @param tag COSName representing the marked content type
1078 Begins marked content sequence with specified MCID. @param tag COSName representing the marked content @param mcid unique identifier for the marked content sequence
1079 Sets marked content point to specified COSName value. @param tag COSName identifier for marked content point
1080 Writes a COSString to an OutputStream. @param string COSString object containing the data to be written @param output OutputStream where the data will be written
1081 Writes string representation of byte array to output stream. @param bytes input byte array @param output stream for writing the string
