1 Constructs a COSBoolean with the specified boolean value. @param aValue the boolean value to set
2 Constructs a new COSName with the specified name. @param aName the string representation of the name
3 Private constructor to restrict instantiation.
4 Constructs a COSString from byte array. @param bytes input byte array @param forceHex if true, forces hexadecimal representation
5 Initializes a new COSDictionary with an update state.
6 Initializes a COSObject with a given base object. @param object The underlying COSBase object
7 Initializes a COSObject with a base object and parser. @param object the underlying COSBase object @param parser the ICOSParser instance
8 Initializes a COSObject with a key and parser. @param key object identifier @param parser for parsing COS data
9 Initializes DecodeOptions with specified dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
10 Creates a new FreeXReference. @param key Object key for the reference @param nextFreeObject Next free object identifier
11 Constructs an ObjectStreamXReference. @param objectStreamIndex index of the object stream @param key unique identifier for the object @param object COSBase object reference @param parentKey unique identifier for the parent object
12 Constructs a DefaultResourceCacheCreateImpl with default behavior. @param enableCaching whether to enable caching (default is true)
13 Constructs a PDTypedDictionaryWrapper from a COSDictionary. @param dictionary the underlying COSDictionary to wrap
14 Initializes a new PDAttributeObject with the given COSDictionary. @param dictionary the underlying COSDictionary
15 Initializes a PDUserProperty with a COSDictionary and a user attribute object. @param dictionary the COSDictionary to initialize with @param userAttributeObject the user attribute object associated with the property
16 Constructs a PDOutlineNode from a COSDictionary. @param dict the dictionary containing outline node data
17 Constructs a PDTransition from a COSDictionary. @param dictionary the COSDictionary containing transition properties
18 Constructs a new PDDestinationNameTreeNode from a COSDictionary. @param dic dictionary containing destination information
19 Constructs a PDEmbeddedFilesNameTreeNode from a dictionary. @param dic dictionary containing node data
20 Constructs a PDJavascriptNameTreeNode from a dictionary. @param dic the COSDictionary to initialize with
21 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic dictionary representing the node structure
22 Creates a child node from a dictionary. @param dic dictionary containing node data @return PDNumberTreeNode instance
23 Constructs a PDMetadata from a COSStream. @param str the COSStream containing metadata
24 Constructs a PDObjectStream from a COSStream. @param str the underlying COSStream
25 Constructs a PDEmbeddedFile from a COSStream. @param str content stream containing embedded file data
26 Initializes a PDFunction from a COSBase. @param function the underlying COSBase object
27 Initializes a PDXObject with a given stream and subtype. @param stream the underlying COSStream object @param subtype the COSName representing the subtype of the XObject
28 Constructs a PDStructureElement from a COSDictionary. @param dic dictionary representing the structure element
29 Constructs a PDStructureTreeRoot from a COSDictionary. @param dic dictionary representing the structure tree root
30 Default constructor for SecurityHandler.
31 Initializes security handler with specified policy. @param protectionPolicy encryption policy to apply
32 Constructs a new FDFAnnotationCaret from a COSDictionary. @param a dictionary containing annotation data
33 Constructs a circle annotation from a COS dictionary. @param a COS dictionary representing the annotation
34 Constructs an FDFAnnotationFileAttachment. @param a COSDictionary containing annotation properties
35 Constructs a FDFAnnotationFreeText from a COSDictionary. @param a dictionary containing annotation properties
36 Constructs an FDFAnnotationInk from a COSDictionary. @param a dictionary representing annotation properties
37 Constructs an annotation line from a COS dictionary. @param a COS dictionary representing the annotation
38 Constructs a new FDF annotation link. @param a COSDictionary representing the annotation data
39 Constructs a new FDFAnnotationPolygon from a COSDictionary. @param a dictionary representing the annotation
40 Constructs a new FDF annotation polyline from a COS dictionary. @param a COS dictionary containing annotation properties
41 Constructs a sound annotation. @param a COSDictionary containing sound properties
42 Constructs an FDF annotation square. @param a COSDictionary containing annotation properties
43 Constructs an FDF annotation stamp from a COS dictionary. @param a COS dictionary representing the annotation
44 Constructs an FDFAnnotationText from a COSDictionary. @param a dictionary containing annotation data
45 Constructs a text markup annotation from a COS dictionary. @param a COS dictionary representing the annotation
46 Extracts and returns Panose classification from font bytes. @return PDPanoseClassification object containing Panose data
47 Creates a Composite instance based on blend mode and alpha. @param blendMode the blending mode to apply @param constantAlpha the alpha value (clamped between 0 and 1) @return Composite object for rendering
48 Retrieves transparency group attributes. @return PDTransparencyGroupAttributes object or null if not present
49 Constructs a PDShadingPattern from a COSDictionary. @param resourceDictionary PDF dictionary containing shading pattern details
50 Initializes a PDTilingPattern with a given dictionary and resource cache. @param dictionary PDF dictionary containing pattern information @param resourceCache cache for managing resources
51 Constructs a PDShadingType1 from a COSDictionary. @param shadingDictionary dictionary containing shading details
52 Constructs a PDShadingType2 from a dictionary. @param shadingDictionary COSDictionary representing the shading
53 Constructs an AxialShadingPaint with specified shading and transformation. @param shadingType2 The axial shading type to use @param matrix The transformation matrix to apply
54 Constructs a RadialShadingPaint with specified shading and matrix. @param shading PDShadingType3 object representing the radial shading @param matrix transformation matrix for the paint
55 Constructs a Type1ShadingPaint with specified shading and transformation. @param shading PDShadingType1 object representing the shading pattern @param matrix transformation matrix to apply to the shading
56 Constructs a Type4ShadingPaint with specified shading and transformation. @param shading PDShadingType4 object defining the shading pattern @param matrix transformation matrix to apply to the shading
57 Constructs a Type5ShadingPaint object. @param shading PDShadingType5 instance representing the shading @param matrix transformation matrix to apply
58 Constructs a Type6ShadingPaint. @param shading PDShadingType6 object representing the shading @param matrix transformation matrix for the shading
59 Creates a new Type7ShadingPaint instance. @param shading PDShadingType7 object representing the shading pattern @param matrix transformation matrix for the shading
60 Creates a new PDExtendedGraphicsState from a COSDictionary. @param dictionary the COSDictionary to use for initialization
61 Constructs a PDSoftMask from a COSDictionary. @param dictionary the COSDictionary containing mask properties
62 Constructs a PlainText object from a given text value. @param textValue the input text to be processed
63 Constructs a PDActionEmbeddedGoTo from a COS dictionary. @param a COS dictionary representing the action
64 Constructs a PDActionGoTo from a dictionary. @param a the COS dictionary
65 Constructs a new PDActionHide from a COS dictionary. @param a the COS dictionary representing the action
66 Constructs a PDActionImportData from a COSDictionary. @param a dictionary representing the action
67 Constructs a new PDActionJavaScript from a COSDictionary. @param a dictionary containing action details
68 Constructs a PDActionLaunch from a COSDictionary. @param a dictionary representing the action
69 Constructs a PDActionMovie from a COSDictionary. @param a dictionary containing action details
70 Constructs a PDActionNamed from a COSDictionary. @param a COSDictionary representing the action
71 Constructs a PDActionRemoteGoTo from a COSDictionary. @param a dictionary representing the action
72 Constructs a PDActionResetForm from a COSDictionary. @param a dictionary representing the action
73 Constructs a PDActionSound from a COSDictionary. @param a dictionary representing the sound action
74 Constructs a PDActionSubmitForm from a COSDictionary. @param a dictionary representing the action
75 Constructs a PDActionThread from a COSDictionary. @param a dictionary representing the action thread
76 Constructs a PDActionURI from a COSDictionary. @param a the COSDictionary containing action data
77 Converts two lists of keys and values into a list of KeyValue objects. @param key list of keys @param value list of corresponding values @return List of KeyValue objects
78 Constructs a PDNonTerminalField. @param acroForm the form containing this field @param field the dictionary representing this field @param parent the parent terminal field
79 Constructs a PDTerminalField. @param acroForm parent form containing the field @param field dictionary representing the field @param parent non-terminal parent field
80 Constructs a PDRectlinearMeasureDictionary from a COSDictionary. @param dictionary the underlying COSDictionary
81 Creates a shallow copy of the matrix. @return A new Matrix instance with cloned single array
82 Creates a scaling matrix instance. @param x scale factor along X-axis @param y scale factor along Y-axis @return Matrix representing the scaling transformation
83 Creates a translation matrix. @param x horizontal translation @param y vertical translation @return Matrix representing the translation
84 Creates a rotation matrix with translation. @param theta angle of rotation in radians @param tx horizontal translation @param ty vertical translation @return Matrix representing the rotation and translation
85 Transforms a 2D vector using an affine transformation matrix. @param vector input 2D vector to be transformed @return transformed 2D vector
86 Scales vector by a factor. @param sxy scaling factor @return new scaled Vector
87 Returns a field tree for the current document. @return PDFieldTree object representing the document's fields
88 Sets default value for the root element. @param defaultValue the default value to be set
89 Retrieves an object by its index. @param index position of the object in the list @return the object at the specified index or throws IndexOutOfBoundsException if invalid
90 Returns the number of objects in the collection. @return integer count of objects
91 Retrieves the revision number at the specified index. @param index position of the revision number in the list @return revision number as an integer
92 Adds an object with its revision number. @param object the object to add @param revisionNumber the associated revision number
93 Sets the revision number for a given object. @param object the object to update @param revisionNumber the new revision number
94 Returns the appropriate Encoding instance based on the given COSName. @param name the COSName representing the encoding type @return Encoding instance or null if not supported
95 Creates a PDSoftMask from a given COSBase. @param dictionary the COSBase object representing the soft mask @param resourceCache the ResourceCache for resources @return PDSoftMask object or null if invalid
96 Returns the index of the first selected annotation widget. @return Index of the selected widget or -1 if none is selected
97 Adds a source file to the system. @param source path to the source file @throws FileNotFoundException if the file does not exist
98 Parses the PDF trailer and updates the XRef resolver. @return true if parsing is successful, false otherwise @throws IOException if an I/O error occurs
99 Retrieves an object from the pool by its key. @param key unique identifier for the object @return COSBase object or null if not found
100 Executes a sequence of instructions in the provided context. @param context execution environment containing operators and stack
101 Initializes COSDocument with a stream cache and parser. @param streamCacheCreateFunction function to create stream cache @param parser parser for document processing
102 Processes an operator with given operands. @param operator the Operator to process @param operands list of COSBase operands @throws IOException if processing fails
103 Retrieves the current text line matrix. @return Matrix representing the text line transformation
104 Sets the text line matrix. @param value new text line matrix to apply
105 Retrieves the current text matrix. @return TextMatrix object representing the current transformation state
106 Sets the text matrix in the graphics state. @param value new text transformation matrix to apply
107 Transforms width using the current transformation matrix. @param width original width value @return transformed width value
108 Retrieves the non-stroking color from the graphics state. @return PDColor object representing the non-stroking color
109 Sets non-stroking color in graphics context. @param color PDColor object to set
110 Retrieves the non-stroking color space from the graphics state. @return PDColorSpace object representing the current non-stroking color space
111 Retrieves the stroking color from the current graphics state. @return PDColor object representing the stroking color
112 Sets the stroking color in the graphics state. @param color PDColor object to be set as stroking color
113 Retrieves the stroking color space from the graphics state. @return PDColorSpace object representing the current stroking color space
114 Creates a raw input stream for reading. @return InputStream for reading data @throws IOException if stream is closed or no data has been written
115 Creates a raw output stream for writing. @return OutputStream for writing data @throws IOException if an I/O error occurs
116 Finds an image reader for a given format. @param formatName the image format name (e.g., "JPEG") @param errorCause additional information about the error @return ImageReader instance if found, throws exception otherwise @throws MissingImageReaderException if no suitable reader is available
117 Finds a raster image reader for the specified format. @param formatName name of the image format @param errorCause cause of the error if no reader is found @return ImageReader that can read rasters @throws MissingImageReaderException if no suitable reader is available
118 Retrieves or creates an Operator instance. @param operator the operator name as a string @return Operator object corresponding to the input name
119 Returns string representation of COSArrayList. @return formatted string including underlying array's content
120 Checks if an edge is a line. @param ctl array of control points @return true if edge is approximately a line, false otherwise
121 Retrieves the x-coordinate of the lower-left corner. @return float value representing the x-coordinate
122 Retrieves the y-coordinate of the lower-left corner. @return y-coordinate as a float
123 Returns the x-coordinate of the upper-right corner. @return x-coordinate as a float
124 Retrieves the upper-right Y coordinate of the rectangle. @return The Y coordinate as a float
125 Retrieves font size from settings. @return Font size as a float
126 Retrieves the R value from the list of values. @return float representation of the R value
127 Retrieves the second value as a float. @return float representation of the second value
128 Retrieves the third value as a float. @return float value of the third element in values list
129 Returns the X coordinate value. @return float representing the X coordinate
130 Retrieves the y-coordinate value. @return The y-coordinate as a float.
131 Retrieves the z-coordinate value. @return z-coordinate as a float
132 Retrieves integer value at specified index, or default if not a COSNumber. @param index position in the list @param defaultValue value to return if index is out of bounds or not a COSNumber @return integer value at index or default
133 Retrieves name from list at given index. @param index position in the list @param defaultValue default value if not found @return name as String or defaultValue
134 Returns the index of the first occurrence of the specified object. @param object the COSBase object to search for @return index of the object or -1 if not found
135 Retrieves list of filters. @return List of Filter objects @throws IOException if invalid filter type encountered
136 Initializes COSArrayList with actual list and COSArray. @param actualList List of elements @param cosArray Underlying COSArray
137 Evaluates input using exponential interpolation. @param input array containing the base value for interpolation @return interpolated float array clipped to range
138 Retrieves the list of filters for a stream. @return List of COSName objects representing filters, or empty list if none
139 Retrieves file filters from a PDF stream. @return List of filter names or empty list if none found
140 Writes a COSBoolean to the given OutputStream. @param output the OutputStream to write to @param cosBoolean the COSBoolean object to write @throws IOException if an I/O error occurs
141 Writes text to output stream using ASCII encoding. @param text string to be written @throws IOException if an I/O error occurs
142 Notifies of property change if entries differ. @param oldEntry previous entry value @param newEntry current entry value
143 Returns the number of key-value pairs in the map. @return size of the map
144 Retrieves COSObject by key. @param key the key to look up @return COSObject associated with the key or null if not found
145 Retrieves item by primary or secondary key. @param firstKey primary key to search @param secondKey secondary key to search if primary not found @return COSBase object or null if both keys are missing
146 Returns the number of recipients in the COSArray. @return size of the recipients array
147 Retrieves recipient string at specified index. @param i index of the recipient @return COSString object representing the recipient or null if not found
148 Retrieves direction value from PDF dictionary. @return COSBase object representing direction, or zero if not found
149 Retrieves all metadata keys. @return Sorted set of metadata keys
150 Retrieves a list of attribute names from the COS object. Filters out the key 'O' and maps keys to their string names. @return List of attribute names as strings
151 Adds trailer information to the PDF document. @param trailerDict dictionary containing trailer entries
152 Constructs a COSDictionary by copying entries from another dictionary. @param dict source dictionary to copy entries from
153 Checks if the dictionary represents document info. @param dictionary PDF dictionary to check @return true if dictionary contains document info keys, false otherwise
154 Checks if dictionary contains width information. @return true if WIDTHS or MISSING_WIDTH key exists, false otherwise
155 Checks if the dictionary contains the "MissingWidth" key. @return true if "MissingWidth" is present, false otherwise
156 Checks if the PDF document contains XFA. @return true if XFA is present, false otherwise
157 Initializes a new cross-reference object. @param startBytePos starting byte position for the XRef @param type type of cross-reference
158 Constructs COSFloat from string representation. @param aFloat string to parse as float @throws IOException if parsing fails
159 Returns string representation of COSFloat. @return formatted string with float value
160 Writes formatted string to PDF. @param output stream to write PDF data @throws IOException if an I/O error occurs
161 Creates and returns a new COSIncrement instance. @return COSIncrement object initialized with updateInfo
162 Initializes a LayerUtility with a target document. @param targetDoc the PDDocument to be manipulated
163 Initializes a new instance with default settings.
164 Checks if a PDF object needs to be updated. @param base the PDF object to check @return true if the object needs updating, false otherwise
165 Appends a kid to the current object. @param mcid Media Content Identifier, must be non-negative
166 Retrieves the COSBase representation of degrees. @return COSBase object representing the degrees
167 Writes a COSInteger to an OutputStream. @param output target OutputStream @param cosInteger COSInteger to write @throws IOException if I/O error occurs
168 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if writing fails
169 Adds a comment to the output stream. @param comment text of the comment, must not contain newlines @throws IOException if an I/O error occurs
170 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if an I/O error occurs
171 Adds a comment to the output stream. @param comment text to add, must not contain newlines @throws IOException if writing fails
172 Retrieves an object by index, resolving indirect references. @param index the position of the object in the list @return resolved COSBase object or null if it's a COSNull
173 Finds the index of a specific object in the list. @param object the object to search for @return index of the object or -1 if not found
174 Collects indirect object keys recursively. @param indirectObjects collection to store keys
175 Checks if the map contains a specified value. @param value the value to check for @return true if the map contains the value or a COSObject wrapping the value, false otherwise
176 Retrieves the key associated with a given value. @param value the value to search for @return COSName key or null if not found
177 Retrieves object from dictionary by key. @param key the dictionary key @return the corresponding COSBase object or null if not found
178 Retrieves the linearized dictionary from the PDF. @return COSDictionary containing linearization info or null if not found
179 Closes all resources and streams. @throws IOException if an I/O error occurs during closing
180 Accepts a visitor to process the PDF object. @param visitor ICOSVisitor instance for processing @throws IOException if an I/O error occurs during visitor execution
181 Checks if the given value has a self-reference to its parent. @param parent the parent COSBase object @param value the COSBase value to check @return true if there is a self-reference, false otherwise
182 Retrieves the length as a COSNumber from the given base object. @param lengthBaseObj the base object containing or referencing the length @return COSNumber representing the length, or null if not found @throws IOException if an error occurs in reading the length
183 Constructs a NormalXReference. @param byteOffset offset in the PDF file @param key unique object identifier @param object associated COSBase object
184 Retrieves the COSObjectKey for a given COSBase. @param object the COSBase object to find the key for @return COSObjectKey associated with the object, or from pool if not directly found
185 Checks if the pool contains a given COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
186 Prepares stream objects for processing. @param key unique identifier of the COS object @param object the COSBase object to be processed
187 Constructs a COSObjectKey with a given number and generation. @param num object number @param gen object generation
188 Compares entries based on referenced key. @param xReferenceEntry entry to compare with @return comparison result: -1, 0, or 1
189 Retrieves the horizontal scaling factor. @return X-axis scaling factor as a float
190 Returns the vertical scaling factor. @return Y-axis scaling factor as a float
191 Initializes a COSWriter with an output stream and compression parameters. @param outputStream the destination for writing data @param compressParameters configuration for data compression
192 Initializes a COSWriter for incremental updates. @param outputStream destination for final output @param inputData source input data @throws IOException if an I/O error occurs
193 Updates the status of an object. @param updated new status indicating whether the object is updated
194 Converts byte array to string using UTF-16BE or PDFDocEncoding. @return String representation of the byte array
195 Constructs a COSString from text. @param text string to be encoded @param forceHex if true, forces hex encoding
196 Checks if the font is part of the Standard 14 fonts. @return true if it's a Standard 14 font, false otherwise
197 Reads bytes from input into buffer. @param data byte array to store read data @param offset starting position in the data array @param len number of bytes to read @return actual number of bytes read or -1 if end of stream
198 Closes the stream, flushing any buffered output and releasing resources.
199 Closes the output stream. Logs a warning if in text mode without calling endText(). @throws IOException if an I/O error occurs while closing
200 Closes the output stream and logs a warning if text mode was used without ending it.
201 Closes the output stream. Logs a warning if in text mode without calling endText(). @throws IOException if an I/O error occurs while closing
202 Closes the output stream. Logs a warning if endText() was not called in text mode.
203 Reads a byte from the input source. @return next byte as an integer or -1 if end of stream is reached @throws IOException if an I/O error occurs
204 Reads data into a byte array. @param data destination buffer @param offset starting position in the buffer @param length number of bytes to read @return number of bytes actually read, -1 if end of stream @throws IOException if an I/O error occurs
205 Reads an image from the input stream and sets it. @param stream the input stream containing image data @throws IOException if an I/O error occurs while reading the image
206 Encodes input data using a custom encoding scheme. @param rawData input stream of raw data to encode @param encoded output stream for the encoded data @param parameters additional encoding parameters (not used)
207 Selects the byte array with the highest estimated compression sum. @return selected byte array for writing
208 Resets all XrefTrailerObjs and clears current references.
209 Closes all open overlays and documents.
210 Constructs a PDF form object from a given stream. @param stream the PDF stream containing the form data
211 Initializes a new PDFStreamParser. @param pdContentstream content stream to parse @throws IOException if an I/O error occurs
212 Initializes a PDFStreamParser with byte array data. @param bytes PDF content as a byte array
213 Parses a COSBase object by its number. @param objectNumber the object number to parse @return COSBase object or null if not found @throws IOException if an I/O error occurs
214 Reads object numbers from a source. @return Map of object IDs to their counts @throws IOException if an I/O error occurs
215 Initializes encoding map from provided code to name mappings. @param codeToName map of integer codes to their corresponding names
216 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object
217 Skips leading whitespaces and optional line breaks in the input stream.
218 Checks and skips a line break in the input. @return true if a line break is skipped, false otherwise
219 Reads a line from the input source. @return the next line as a String, or throws IOException if end-of-file is reached @throws IOException if an I/O error occurs or end-of-file is encountered
220 Skips whitespace and comments in the input source.
221 Retrieves the number of color components. @return number of color components or throws IOException if an error occurs
222 Returns the number of color components. @return number of color components, or -1 if not yet determined @throws IOException if an I/O error occurs
223 Searches for the nearest XRef offset. @param xrefOffset target offset to search for @return nearest offset found, or -1 if none is found
224 Parses PDF header to verify version. @return true if header is valid, false otherwise @throws IOException on I/O errors during parsing
225 Parses FDF header. @return true if parsing successful, false otherwise @throws IOException on I/O errors
226 Parses all objects in a PDF document. @return Map of COSObjectKey to COSBase representing parsed objects @throws IOException if an I/O error occurs during parsing
227 Calculates the final encryption key. @param objectNumber PDF object number @param genNumber generation number @return derived encryption key
228 Initializes a new content stream for PDF appearance. @param appearance PDF appearance stream to use @param outputStream output stream to write to
229 Initializes a content stream for an appearance. @param doc PDF document containing the appearance @param appearance appearance stream to write to @param outputStream output stream for the content
230 Transforms a point using the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed Point2D.Float object
231 Creates a PaintContext for the pattern. @param cm ColorModel to be used @param deviceBounds bounding box of the device space @param userBounds bounding box of the user space @param xform transformation from user space to device space @param hints rendering hints @return PaintContext object for the pattern
232 Concatenates two matrices by multiplying their single arrays. @param matrix second matrix to concatenate with
233 Translates matrix by given offsets. @param tx horizontal translation offset @param ty vertical translation offset
234 Scales the matrix by given factors. @param sx scale factor for x-axis @param sy scale factor for y-axis
235 Multiplies this matrix with another matrix. @param other the matrix to multiply with @return a new Matrix object representing the result of the multiplication
236 Encodes text for GSUB rules. @param gsubWorker worker for applying GSUB rules @param glyphIds set to collect used glyph IDs @param font PDType0Font to encode text @param text input string to be encoded @return byte array of encoded text
237 Creates a new PDF document. @return PDDocument object @throws IOException if an I/O error occurs
238 Constructs a PDDocument from a COSDocument and source. @param doc The COSDocument to use @param source The RandomAccessRead source of the document
239 Creates a SecurityHandler for a given ProtectionPolicy. @param policy the ProtectionPolicy to handle @return SecurityHandler instance or null if no handler is found
240 Creates a new security handler for a given filter name. @param name the name of the filter @return SecurityHandler instance or null if not found
241 Sets the stroking color using a PDF color. @param color PDColor object to be used for stroking @return true if color is successfully set, false otherwise @throws IOException if an I/O error occurs
242 Sets non-stroking color using the given PDColor. @param color PDColor object to be used for coloring @return true if color is successfully set, false otherwise
243 Initializes MacOS Roman encoding with custom entries.
244 Checks if user has full owner permissions. @return true if all owner permissions are granted, false otherwise
245 Checks if any revision 3 permissions are granted. @return true if any of the revision 3 permissions are set, false otherwise
246 Writes byte array to an OutputStream. @param data byte array to write @param output OutputStream to write to @throws IOException if I/O error occurs
247 Writes a portion of a byte array to an output stream. @param data the byte array containing the data @param offset the starting index in the data array @param len the number of bytes to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
248 Inserts a diacritic at a specified position in the text. @param i index where diacritic should be inserted @param diacritic TextPosition object representing the diacritic
249 Writes string with associated positions. @param text The string to write @param textPositions List of TextPosition objects @throws IOException if an I/O error occurs
250 Initializes a Line with two points and their corresponding colors. @param p0 first endpoint of the line @param p1 second endpoint of the line @param c0 color array for the first point @param c1 color array for the second point
251 Initializes a SoftMask with specified parameters. @param paint the paint object for rendering @param mask the BufferedImage representing the mask @param bboxDevice the device space bounding box @param backdropColor the background color, may be null @param transferFunction the transfer function, identity functions are ignored
252 Removes a backdrop from an image by adjusting pixel colors. @param backdrop the image to be removed @param offsetX horizontal offset for backdrop positioning @param offsetY vertical offset for backdrop positioning
253 Retrieves FontMetrics for a given font name. @param fontName name of the font @return FontMetrics object or null if not found
254 Initializes glyph list from input stream. @param input stream containing glyph data @param numberOfEntries number of entries to expect @throws IOException if reading fails
255 Creates a GlyphList by copying another and loading from an InputStream. @param glyphList existing GlyphList to copy mappings from @param input stream containing glyph data @throws IOException if there is an error reading the input stream
256 Converts character code to glyph ID. @param code character encoding code @return glyph ID or 0 if not found @throws IOException if I/O error occurs
257 Retrieves the name of a character in the font. @param name character name to check @return font-specific name or ".notdef" if not found @throws IOException if an I/O error occurs
258 Retrieves font name for a given glyph. @param name glyph name to find in font @return font name or ".notdef" if not found @throws IOException if an I/O error occurs
259 Initializes CMYK color space and profile. Throws IOException if default profile cannot be loaded.
260 Applies mask to image. @param image source image to be masked @param mask alpha mask to apply @param interpolateMask true if interpolation is used for scaling mask @param isSoft true if soft mask effect is applied @param matte color correction array, null if none @return modified image with mask applied
261 Validates a chunk's integrity. @param chunk the chunk to validate @return true if valid, false otherwise
262 Initializes a cubic Bezier curve. @param ctrlPnts array of control points @param l recursion level for curve generation
263 Checks if a point is inside a polygon. @param p the Point2D to check @return true if the point is inside or on the boundary of the polygon, false otherwise
264 Calculates interpolated color based on point and degree. @param p input point for color calculation @return float array representing the calculated color
265 Intersects current clipping path with another path. @param path the path to intersect with
266 Intersects current clipping path with another area. @param area the Area to intersect with
267 Transfers the current clipping path to the provided Graphics2D object. @param graphics the target Graphics2D object for setting the clip
268 Draws a tiling pattern using the specified parameters. @param g Graphics2D context to draw on @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for coloring @param color PDColor to apply @param patternMatrix transformation matrix for the pattern @throws IOException if an I/O error occurs
269 Returns adjusted X direction based on current rotation. @return Adjusted X direction value as a float
270 Initializes a TextPosition object with text metrics and font details. @param pageRotation rotation of the page in degrees @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text @param endX x-coordinate of the end position @param endY y-coordinate of the end position @param maxHeight maximum height of the text @param individualWidth width of a single character @param spaceWidth width of a space character @param unicode Unicode string of the text @param charCodes array of character codes @param font PDFont object representing the font @param fontSize size of the font in user space units @param fontSizeInPt size of the font in points
271 Adjusts Y direction based on rotation. @return adjusted Y coordinate
272 Retrieves width adjusted by rotation. @param rotation current rotation angle @return adjusted width based on rotation
273 Returns adjusted width based on direction. @return Adjusted width as float
274 Starts article processing. @throws IOException if an I/O error occurs
275 Starts a new paragraph, ensuring proper closure of any existing one. @throws IOException if an I/O error occurs during writing
276 Matches list item pattern in text position. @param pw PositionWrapper containing text position @return Pattern matched or null if no match
277 Normalizes a word by handling specific Unicode ranges and font quirks. @param word the input string to normalize @return normalized string with direction handled
278 Converts Calendar to formatted date string. @param cal Calendar object to convert @return Formatted date string or null if Calendar is null
279 Converts Calendar to ISO 8601 formatted string. @param cal Calendar instance to convert @return ISO 8601 formatted date-time string
280 Converts byte array to hexadecimal string. @return Hexadecimal representation of bytes
281 Writes CMS signature to PDF. @param cmsSignature byte array of the CMS signature @throws IOException if I/O error occurs or not enough space
282 Writes the name as a PDF object to the given OutputStream. @param output stream where the PDF name is written @throws IOException if an I/O error occurs
283 Writes byte array as hex values to an OutputStream. @param bytes the byte array to convert @param output the OutputStream to write to @throws IOException if writing fails
284 Sorts an array using iterative merge sort. @param arr array to be sorted @param cmp comparator for element comparison
285 Parses an InputStream into a Document. @param is input stream containing XML data @return parsed Document object @throws IOException if an I/O error occurs
286 Detects the file type by reading initial bytes from the stream. @param inputStream input stream to read file data from @return FileType enum representing detected file type or null if undetermined @throws IOException if stream does not support mark/reset or ends prematurely
287 Initializes LegacyPDFStreamEngine with various text and graphics operators.
288 Retrieves or creates a PDF name from the cache. @param aName the name to retrieve or create @return COSName object associated with the given name
289 Constructs a COSString from byte array. @param bytes byte array representing string data
290 Constructs an empty COSArray with default capacity and auto-grow enabled.
291 Constructs a COSArray from a list of COSObjectable objects. @param cosObjectables List of COSObjectable objects to convert
292 Initializes a COSStream with a given cache. @param streamCache cache to store stream data
293 Creates an unmodifiable dictionary from another COSDictionary. @param dict the source dictionary to wrap
294 Creates a default decode result with an empty dictionary. @return DecodeResult object initialized with a new COSDictionary
295 Initializes a new PDDocumentInformation with an empty dictionary.
296 Initializes PDResources with an empty dictionary and caches.
297 Converts a Map to a COSDictionary. @param someMap map with String keys and COSObjectable values @return COSDictionary representation of the input map
298 Initializes a new PDDictionaryWrapper with an empty COSDictionary.
299 Initializes a new instance of PDNameTreeNode. Constructs an empty COSDictionary for the node.
300 Initializes a PDNumberTreeNode with a specific value class. @param valueClass the class of objects stored in the tree nodes
301 Constructs a new PDPageLabelRange using an empty dictionary.
302 Initializes a new instance with an empty dictionary. @param none @return void
303 Initializes a new instance of PDPropertyList with an empty dictionary.
304 Initializes a new PDBoxStyle with an empty COSDictionary.
305 Initializes a new instance of PDCryptFilterDictionary. Creates and sets up an empty COSDictionary.
306 Initializes a new PDEncryption with an empty COSDictionary.
307 Initializes a new FDFCatalog with an empty dictionary.
308 Constructs an FDFDictionary with a new COSDictionary.
309 Constructs a new FDFField with an empty dictionary.
310 Initializes a new FDFIconFit with an empty COSDictionary.
311 Initializes a new FDFJavaScript with an empty dictionary.
312 Initializes a new instance of FDFNamedPageReference. Sets up the underlying COSDictionary for reference.
313 Constructs a new FDFPage instance. Initializes the page with a COSDictionary.
314 Initializes a new instance of FDFPageInfo with an empty COSDictionary.
315 Initializes a new FDFTemplate with an empty COSDictionary.
316 Initializes a new instance of PDDeviceNAttributes. Constructs a COSDictionary for storing attributes.
317 Initializes a new PDDeviceNProcess with an empty dictionary.
318 Initializes a new PDShading instance with an empty COSDictionary.
319 Initializes a new instance of PDAdditionalActions with an empty COSDictionary.
320 Initializes a new instance of PDAnnotationAdditionalActions. Sets up an empty COSDictionary for storing annotation actions.
321 Initializes a new instance of PDDocumentCatalogAdditionalActions. Sets up an empty dictionary for storing additional actions.
322 Initializes a new instance of PDFormFieldAdditionalActions. Creates an empty COSDictionary for storing field action mappings.
323 Initializes a new instance of PDPageAdditionalActions with an empty dictionary.
324 Initializes a new PDTargetDirectory with an empty dictionary.
325 Initializes a new PDURIDictionary with an empty COSDictionary.
326 Initializes PDWindowsLaunchParams with a new COSDictionary.
327 Constructs a new PDBorderEffectDictionary with an empty COSDictionary.
328 Initializes a new PDBorderStyleDictionary with an empty COSDictionary.
329 Initializes a PDPropBuild with a direct COSDictionary.
330 Initializes a new PDPropBuildDataDict with an empty COSDictionary. Sets the dictionary to use direct objects as per the specification.
331 Initializes a new instance of PDSeedValueMDP with an empty direct COSDictionary.
332 Initializes a PDSeedValueTimeStamp with an empty direct COSDictionary.
333 Constructs a PDField with an empty dictionary. @param acroForm parent form containing the field
334 Initializes a new PDViewportDictionary with an empty COSDictionary.
335 Initializes a PDViewerPreferences with an empty dictionary.
336 Initializes a COSObject with a given base object and key. @param object the underlying COSBase object @param objectKey unique identifier for the COSObject
337 Constructs a PDDefaultAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
338 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary the COSDictionary containing user attributes
339 Initializes a standard attribute object from a COS dictionary. @param dictionary the COS dictionary containing attributes
340 Constructs a PDOutlineItem from a dictionary. @param dic the COSDictionary containing outline item data
341 Retrieves metadata from the PDF stream. @return PDMetadata object or null if not found
342 Retrieves metadata from the PDF document. @return PDMetadata object or null if no metadata is found
343 Retrieves the extends object stream. @return PDObjectStream object or null if not found
344 Constructs a Type 0 PDF function. @param function COSBase object representing the function
345 Constructs a Type 3 PDF function. @param functionStream stream containing the function data
346 Constructs a PDPostScriptXObject from a COSStream. @param stream the PostScript content stream
347 Constructs a PDFormXObject from a COSStream. @param stream the underlying COSStream
348 Constructs a PDFormXObject from a COSStream. @param stream the underlying COSStream @param cache resource cache for form objects
349 Constructs a new instance of PublicKeySecurityHandler.
350 Initializes a new instance of StandardSecurityHandler.
351 Initializes a new PublicKeySecurityHandler. @param publicKeyProtectionPolicy policy for public key protection
352 Initializes a new instance of StandardSecurityHandler. @param standardProtectionPolicy policy to be applied
353 Constructs a new highlight annotation. @param a COSDictionary representing the annotation
354 Constructs a new FDFAnnotationSquiggly from a COSDictionary. @param a dictionary representing the annotation
355 Constructs a new FDFAnnotationStrikeOut from a COSDictionary. @param a COSDictionary representing the annotation
356 Constructs an underline annotation. @param a COSDictionary containing annotation properties
357 Constructs a PDTilingPattern from a COSDictionary. @param dictionary the COSDictionary to use for initialization
358 Constructs a PDShadingType3 from a COSDictionary. @param shadingDictionary dictionary representing the shading
359 Constructs a new PDShadingType4 from a COSDictionary. @param shadingDictionary dictionary representing the shading type 4
360 Constructs a PDShadingType5 from a COSDictionary. @param shadingDictionary dictionary containing shading details
361 Constructs a PDButton. @param acroForm the form containing this button @param field the dictionary representing the button @param parent the parent field of this button
362 Constructs a PDSignatureField. @param acroForm The form containing the signature field. @param field The dictionary representing the field. @param parent The parent non-terminal field.
363 Constructs a PDVariableText instance. @param acroForm the form containing this field @param field the dictionary representing the field @param parent the parent field if any
364 Generates a unique partial field name for "Signature". @return Unique partial name string
365 Generates a string representation of the object list and revision numbers. @return Formatted string with objects and their revision numbers
366 Creates a PDSoftMask from a COSBase dictionary. @param dictionary the COSBase dictionary to use @return PDSoftMask object or null if creation fails
367 Constructs a COSDocument with a memory-only stream cache. @param parser ICOSParser instance used to parse the document
368 Constructs a COSDocument with a specified StreamCacheCreateFunction. @param streamCacheCreateFunction function to create cache for streams
369 Processes an operator with given arguments. @param operation operator name as a string @param arguments list of COSBase arguments for the operator @throws IOException if processing fails
370 Creates a PDMarkedContent object based on the tag. @param tag the COSName tag for the marked content @param properties dictionary of properties for the marked content @return PDArtifactMarkedContent if tag is ARTIFACT, else PDMarkedContent
371 Returns the width of the rectangle. @return width as a float value
372 Checks if a point is within the bounding box. @param x x-coordinate of the point @param y y-coordinate of the point @return true if the point is inside the bounding box, false otherwise
373 Calculates the height of the bounding box. @return Height as a floating-point number
374 Transforms the shape using a matrix. @param matrix transformation matrix to apply @return GeneralPath representing transformed shape
375 Converts rectangle bounds to a GeneralPath. @return GeneralPath representing the rectangle
376 Returns a string representation of the rectangle. Format: [lowerLeftX, lowerLeftY, upperRightX, upperRightY]
377 Retrieves an integer value at the specified index. @param index position of the integer in the list @return integer value or -1 if not found
378 Retrieves name at specified index. @param index position in the list @return name as a String or null if not found
379 Creates an output stream for writing data with optional filters. @param filters filter configuration for the stream @return OutputStream for writing data @throws IOException if an I/O error occurs
380 Initializes a PDImageXObject with a given stream and resources. @param stream the image data stream @param resources associated resources for the image
381 Determines image file suffix based on stream filters. @return file extension or null if unknown filter
382 Writes a float operand to the output stream. @param real the float value to write @throws IOException if an I/O error occurs
383 Writes an integer operand to the output stream. @param integer the integer value to write @throws IOException if an I/O error occurs
384 Writes text followed by a new line. @param text the string to be written @throws IOException if an I/O error occurs
385 Checks if the collection is empty. @return true if the collection has no elements, false otherwise
386 Parses a string to a COSNumber. @param number the string representation of the number @return COSNumber object representing the parsed number @throws IOException if the string is not a valid number
387 Writes a COSFloat to the OutputStream. @param output the OutputStream to write to @param cosFloat the COSFloat to write @throws IOException if an I/O error occurs
388 Converts update state to an increment. @return COSIncrement object representing the increment
389 Converts the list of COSBase objects to a float array. @return float array containing numeric values from COSBase objects
390 Converts COSBase objects to a list of Floats. @return List of Floats, null for non-COSNumber objects
391 Converts COSNumber objects to a list of integers. @return List of Integer values or null for non-COSNumber entries
392 Retrieves the minimum value from a range array. @return The minimum value as a float.
393 Retrieves the maximum value from a range array. @return the maximum value as a float
394 Retrieves PDGamma by index from array. @param index position in the array @return PDGamma object or null if not a COSArray
395 Retrieves a BlendMode instance from a PDF blend mode object. @param cosBlendMode PDF blend mode object @return corresponding BlendMode or NORMAL if not found
396 Retrieves colorant names from the COSArray. @return List of colorant names as strings
397 Retrieves the alternate color space. @return PDColorSpace object or throws IOException if creation fails
398 Retrieves the colorant name from an array. @return the colorant name as a string
399 Creates a PDDestination from a COSBase object. @param base the COSBase object representing the destination @return a PDDestination object or null if input is null @throws IOException if the base cannot be converted to a Destination
400 Retrieves the first page from a PDF document. @return PDPage object or null if no pages are present
401 Retrieves the first page number from an array. @return page number as integer, or -1 if not found
402 Retrieves zoom level from a PDF array. @return zoom value as float, or -1 if not found
403 Initializes a Matrix from a COSArray. @param array COSArray containing matrix elements
404 Collects keys of all indirect objects. @param indirectObjects collection to store object keys
405 Retrieves an object from the dictionary using keys. @param firstKey primary key to search @param secondKey secondary key to search if first key is not found @return COSBase object or null if neither key is present
406 Retrieves a COSName from the dictionary using a given key. @param key the key to look up in the dictionary @return the COSName associated with the key or null if not found
407 Retrieves a COSDictionary by key. @param key the key to search for in the dictionary @return COSDictionary object or null if not found
408 Retrieves a COSStream by key. @param key the dictionary key @return COSStream object or null if not found
409 Retrieves a COSArray by key. @param key the dictionary key @return COSArray object or null if not found
410 Retrieves a COSName from the dictionary using a given key. @param key the key to look up in the dictionary @param defaultValue the default value to return if the key is not found or not a COSName @return the COSName associated with the key, or the default value if not applicable
411 Retrieves a long value by key with a default. @param key the dictionary key @param defaultValue the value to return if key not found @return the long value or default if not found
412 Retrieves a float value by key from the dictionary. @param key the COSName key to look up @param defaultValue default float value if key not found @return float value associated with the key or default value
413 Retrieves content streams from a PDF page. @return Iterator of PDStream objects representing content streams
414 Checks if the page has content. @return true if page contains data, false otherwise
415 Retrieves class names from PDF dictionary. @return Revisions object containing class names and their revision numbers
416 Retrieves the "K" dictionary object from the COS base. @return COSBase object associated with key "K"
417 Retrieves the value associated with key "V" from the COS object. @return COSBase object representing the value or null if not found
418 Checks if metadata encryption is enabled. @return true if metadata encryption is enabled, false otherwise
419 Retrieves the owner encryption key. @return byte array containing the owner encryption key or null if not found @throws IOException if an I/O error occurs while accessing the dictionary
420 Retrieves the user encryption key. @return byte array containing the encryption key or null if not found @throws IOException if an I/O error occurs
421 Retrieves permissions from a dictionary. @return byte array of permissions or null if not found
422 Retrieves the page number associated with an annotation. @return Integer representing the page number or null if not set
423 Retrieves the COS value of a field. @return COSBase object or null if not found @throws IOException if an unknown type is encountered
424 Retrieves field flags from a PDF form field. @return Integer representing field flags or null if not set
425 Retrieves field flags for a PDF form. @return Integer representing field flags or null if not set
426 Retrieves clear field flags from a PDF form field. @return Integer value of clear field flags or null if not set
427 Retrieves widget field flags. @return Integer representing field flags or null if not set
428 Retrieves the set widget field flags. @param none @return Integer value of SET_F flag or null if not found
429 Retrieves clear widget field flags. @return Integer value of clear flags or null if not set
430 Retrieves the default width, initializing from PDF dictionary if not set. @return default width as a float
431 Retrieves the color space from the PDF dictionary. @return PDColorSpace object or null if not found @throws IOException if an error occurs during creation
432 Retrieves the color space for a resource. @param resources PDF resources object @return PDColorSpace object or null if not found @throws IOException if an I/O error occurs
433 Constructs a PDOptionalContentGroup from a COSDictionary. @param dict the COSDictionary representing the optional content group @throws IllegalArgumentException if the dictionary is not of type 'OCG'
434 Initializes a PDOptionalContentMembershipDictionary from a COSDictionary. @param dict the underlying COSDictionary with OCMD type @throws IllegalArgumentException if dict is not of OCMD type
435 Retrieves the overprint mode from a dictionary. @return Integer representing the overprint mode or null if not set
436 Retrieves the soft mask from the dictionary. @return PDSoftMask object or null if not found
437 Retrieves a float value from the dictionary for a given key. @param key the dictionary key @return Float value or null if not found or not a number
438 Retrieves transfer information from a dictionary. @return COSBase object or null if invalid
439 Retrieves the transfer function for color conversion. @return COSBase object representing the transfer function or null if invalid
440 Retrieves the backdrop color as a COSArray. @return the COSArray representing the backdrop color, or null if not set
441 Determines the open mode for a document. @return OpenMode indicating how to open the document (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
442 Retrieves the "T" entry from the action dictionary. @return COSBase object representing the "T" entry or null if not found
443 Determines the open mode for a document. @return OpenMode indicating how to open the document (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
444 Determines the open mode for a document. @return OpenMode enum indicating NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE
445 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found
446 Retrieves the contents as a byte array. @return byte array of contents or empty array if not available
447 Retrieves XFA resource from the PDF dictionary. @return PDXFAResource object or null if not found
448 Retrieves inheritable attribute from dictionary or parent. @param key the attribute key to retrieve @return COSBase object of the attribute, or null if not found
449 Retrieves the value associated with the key "V". @return COSBase object representing the value or null if not found
450 Retrieves field value as string. @return Field value as string or empty if null
451 Retrieves default value from COS dictionary. @return COSBase object representing the default value or null if not found
452 Closes resources: visualSignature and pdfSource. @throws IOException if an I/O error occurs while closing resources
453 Writes a COSBase object to the output stream. @param key unique identifier for the COSObject @param obj the COSBase object to write @throws IOException if an I/O error occurs
454 Retrieves key from pool for given COSBase object. @param object COSBase object to get key for @return COSObjectKey associated with the object
455 Checks if the pool contains the specified COSBase object. @param object the COSBase object to check @return true if the object is in the pool, false otherwise
456 Creates object streams for COS objects. @return List of COSWriterObjectStream objects
457 Retrieves COSObjectKey using num and gen. @param num object number @param gen generation number @return COSObjectKey from cache or newly created if not found
458 Searches for PDF objects using a breadth-first approach. @throws IOException if an I/O error occurs
459 Searches for object stream offsets using backward search. @return Map of offsets to COSObjectKey or empty map if none found
460 Parses XRef trailer and resolves object references. @param resolver object for resolving cross-reference entries @throws IOException if an I/O error occurs
461 Finds and validates an object key in a PDF file. @param objectKey initial object key to search for @param offset starting position in the file @param xrefOffset map of object keys to their offsets @return validated COSObjectKey or null if not found @throws IOException if an I/O error occurs
462 Parses an XRef table from the PDF source. @param startByteOffset starting byte offset of the XRef table @return true if parsing is successful, false otherwise
463 Retrieves or assigns a unique object key for a given PDF object. @param obj the PDF object to process @return the COSObjectKey associated with the object
464 Adds a COSBase object to the pool with a specified or generated key. @param key desired key for the object, may be null @param object COSBase object to add @return actual key used for the object, or null if not added
465 Initializes a COSWriter with an OutputStream and default compression parameters. @param outputStream destination for writing COS data
466 Initializes a new COSWriter with specified output stream and input data. @param outputStream target stream to write PDF content @param inputData source of PDF data @param objectsToWrite set of COSDictionary objects to be written @throws IOException if an I/O error occurs
467 Sets the update state flag. @param flag indicates whether an update is needed
468 Calls update with default fullUpdate flag.
469 Retrieves a string from the list at the specified index. @param index position in the list @param defaultValue value to return if index is out of bounds or object is not a COSString @return string at the index or default value
470 Retrieves the string value of a dictionary object by key. @param key the key to look up in the dictionary @return the string representation of the value or null if not applicable
471 Retrieves string value for a given key. @param key the key to look up in the dictionary @return the string value or null if not found
472 Converts basic COS types in a dictionary to Java objects. @param map input COSDictionary with basic types @return COSDictionaryMap with converted Java objects or null if input is null @throws IOException for unknown object types
473 Retrieves the file content as a string. @return The content of the file as a string.
474 Retrieves the string value of the first option. @return The string representation of the first option or null if not applicable.
475 Retrieves default appearance string. @return default appearance as a string
476 Retrieves the string value of a named destination. @return The name as a string, or null if not applicable
477 Extracts strings from a PDF item based on index. @param items COSBase object containing the data @param pairIdx index to access within nested arrays (0 or 1) @return List of extracted strings
478 Retrieves export values from PDF attributes. @return List of export values as strings
479 Retrieves values associated with a given COSName. @param name the COSName key to search for @return List of strings corresponding to the key, or empty list if not found
480 Retrieves the default appearance string. @return default appearance as a String or null if not found
481 Constructs a COSString with given text. @param text string content to be stored
482 Initializes a new PDVisibleSignDesigner with an image. @param imageStream InputStream containing the signature image @throws IOException if there is an issue reading the input stream
483 Sets signature image from file path. @param path file path to the signature image @return PDVisibleSignDesigner instance for method chaining @throws IOException if file cannot be read
484 Constructs a PDTransparencyGroup from a given stream. @param stream the source stream containing transparency group data
485 Reads a string from the input source. @return The read string or an empty string if no valid characters are found. @throws IOException if an I/O error occurs
486 Reads and verifies an expected string from the input source. @param expectedString the string to be read @param skipSpaces flag to skip spaces before and after reading @throws IOException if the expected string does not match or an I/O error occurs
487 Reads a string of specified length from the input source. @param length maximum number of characters to read @return the read string or an empty string if no valid characters are found @throws IOException if an I/O error occurs
488 Reads and parses an integer from the input. @return parsed integer value @throws IOException if parsing fails or unexpected data is encountered
489 Reads and parses a long integer from the input source. @return parsed long value @throws IOException if parsing fails or invalid data is encountered
490 Calculates fixed offset for XRef table/stream. @param objectOffset initial offset of the object @return fixed offset or 0 if not found @throws IOException if an I/O error occurs
491 Computes user password encryption. @param password user's password bytes @param owner document owner bytes @param permissions access permissions @param id unique identifier bytes @param encRevision encryption revision @param keyLengthInBytes length of encryption key in bytes @param encryptMetadata flag to encrypt metadata @return encrypted password bytes or empty array for unsupported revisions @throws IOException if an I/O error occurs
492 Computes the owner password for encryption. @param ownerPassword the owner's password @param userPassword the user's password @param encRevision the encryption revision @param length the expected length of the key @return the computed owner password as a byte array @throws IOException if there is an error during computation
493 Rotates the current matrix by a given angle. @param theta angle in radians to rotate
494 Applies a translation to the current text position. @param tx horizontal translation @param ty vertical translation
495 Translates the object by the vector's x and y components. @param vector translation vector specifying x and y displacements
496 Concatenates two matrices by multiplying them in reverse order. @param a first matrix @param b second matrix @return result of b multiplied by a
497 Constructs a new PDDocument from a COSDocument. @param doc the underlying COSDocument
498 Processes a character sequence as a token. @param text the input character sequence to process
499 Returns current access permission. Initializes to owner permissions if not set. @return AccessPermission object
500 Computes the appropriate revision number based on version and permissions. @param version current document version @return computed revision number
501 Encrypts or decrypts data using AES. @param finalKey encryption key @param data input stream containing the data to process @param output output stream for processed data @param decrypt true if decrypting, false if encrypting @throws IOException on I/O errors or security issues
502 Encrypts or decrypts data using AES-256. @param data input stream containing the data to process @param output output stream for the processed data @param decrypt true to decrypt, false to encrypt @throws IOException if an I/O error occurs
503 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data @throws IOException on I/O error
504 Writes data from InputStream to OutputStream. @param data input stream containing the data to be written @param output output stream where data will be written @throws IOException if an I/O error occurs
505 Prepares string for SASL using default options. @param str input string to prepare @return prepared string suitable for SASL
506 Prepares string using SASLprep without allowing unmapped characters. @param str input string to prepare @return prepared string or original if preparation fails
507 Writes a line of text with positions. @param line list of words with text positions
508 Retrieves or loads a FontBoxFont. @return loaded FontBoxFont or null if not found
509 Saves font information to disk cache. Handles exceptions during file writing and security issues.
510 Loads font information from disk cache. @param files list of font files to check @return list of FSFontInfo objects or null if cache is invalid
511 Sets the font provider and updates font information. @param fontProvider new FontProvider instance
512 Initializes a shaded triangle with vertices and colors. @param p array of three Point2D representing the triangle's corners @param c 2D float array of colors for each corner
513 Writes a CMap file for CID to Unicode mapping. @param out OutputStream to write the CMap data @throws IOException if an I/O error occurs
514 Loads glyph list from a specified resource file. @param filename name of the glyph list file @param numberOfEntries expected number of entries in the glyph list @return GlyphList object containing parsed data @throws RuntimeException if an I/O error occurs
515 Returns a map of GIDs to codes. @return Map with GIDs as keys and corresponding codes as values @throws IOException if an I/O error occurs
516 Validates PNG converter state. @param state PNGConverterState object to validate @return true if valid, false otherwise
517 Ends text clipping by intersecting current clip with buffered text shapes.
518 Sets the current graphics clip. @param graphics the Graphics2D object to set the clip on
519 Retrieves data to be signed for a PDF. @return InputStream containing the data range to sign @throws IOException if an I/O error occurs
520 Merges a diacritic into the text position. @param diacritic the diacritic to merge
521 Checks if the current TextPosition overlaps with another by at least 15% in width. @param tp2 the other TextPosition to compare @return true if there is significant overlap, false otherwise
522 Checks if the current TextPosition completely contains another. @param tp2 the other TextPosition to check @return true if this TextPosition fully encloses tp2, false otherwise
523 Writes a paragraph separator by ending and starting a new paragraph. @throws IOException if an I/O error occurs during writing
524 Determines if a paragraph separation is needed. @param position current text position @param lastPosition previous text position @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line
525 Creates a WordWithTextPositions object. @param word raw word text @param wordPositions list of TextPosition objects @return WordWithTextPositions with normalized word and positions
526 Writes a COSName to an OutputStream. @param output stream to write to @throws IOException if writing fails
527 Writes a COSName operand to the output stream. @param name the COSName to write @throws IOException if an I/O error occurs
528 Writes a byte array as a string to an OutputStream. @param bytes the byte array to write @param forceHex if true, forces writing in hexadecimal format @param output the OutputStream to write to @throws IOException if an I/O error occurs
529 Sorts a list using iterative merge sort. @param list the list to be sorted @param cmp comparator defining the sort order
530 Initializes PDF marked content extraction with specified encoding. @param encoding character encoding for text extraction
531 Initializes PDFTextStripper with content operators.
532 Retrieves an object from the dictionary using a string key. @param key the dictionary key as a string @return the corresponding COSBase object or null if not found
533 Retrieves item by key from PDF dictionary. @param key item identifier as a string @return COSBase object associated with the key
534 Checks if a key exists in the map. @param name key to check as a string @return true if the key exists, false otherwise
535 Retrieves a filter by name. @param filterName name of the filter @return Filter object or null if not found @throws IOException if an I/O error occurs
536 Parses a PDF name from the input source. @return COSName object representing the parsed name @throws IOException if an I/O error occurs or parsing fails
537 Constructs a PDColor from a COSArray and color space. @param array PDF array containing color components and optional pattern name @param colorSpace the color space associated with the color
538 Parses a hexadecimal string into a COSString. @param hex the input hexadecimal string @return COSString representing parsed bytes @throws IOException if the hex string is invalid
539 Converts a list of integers to a COSArray. @param integer List of integers to convert @return COSArray containing COSIntegers
540 Converts a list of strings to a COSArray of COSNames. @param strings list of string names @return COSArray containing COSName objects
541 Converts a list of strings to a COSArray of COSStrings. @param strings list of input strings @return COSArray containing COSString objects
542 Initializes a new COSArrayList with empty underlying structures. @param none @return none
543 Initializes a COSArrayList with a dictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the key for the list in the dictionary
544 Initializes a new PDPageDestination with an empty COSArray.
545 Initializes a PDRectangle with specified dimensions. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height
546 Constructs a PDRectangle from a BoundingBox. @param box bounding box defining rectangle corners
547 Sets the list of filters for the stream. @param filters list of COSName filter identifiers
548 Sets alternate color spaces. @param list of PDColorSpace objects
549 Creates a new COSStream and adds it to the document's collection. @return the newly created COSStream
550 Constructs a new COSStream with no initial filter.
551 Initializes COSStream with cache and read view. @param streamCache cache for stream data @param randomAccessReadView read view for stream content @throws IOException if an I/O error occurs
552 Returns an unmodifiable view of this dictionary. @return UnmodifiableCOSDictionary instance
553 Returns the most recent decode result. @return DecodeResult object or default if none available
554 Retrieves resources from the COS object. @return PDResources object or null if not found
555 Default constructor for PDAttributeObject.
556 Constructs a PDUserProperty with a given user attribute object. @param userAttributeObject the user attribute object to initialize with
557 Default constructor for PDOutlineNode.
558 Constructs a new instance of PDDestinationNameTreeNode.
559 Constructs a new PDEmbeddedFilesNameTreeNode instance.
560 Constructs an empty PDJavascriptNameTreeNode instance.
561 Constructs a new PDStructureElementNameTreeNode. Initializes with default settings by calling superclass constructor.
562 Initializes a new PDNonTerminalField instance. @param acroForm the parent PDAcroForm object
563 Constructs a PDTerminalField with an associated PDAcroForm. @param acroForm the PDAcroForm to associate with this field
564 Constructs a PDLayoutAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary to use
565 Constructs a PDListAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
566 Constructs a PDPrintFieldAttributeObject from a COSDictionary. @param dictionary underlying COSDictionary
567 Constructs a PDTableAttributeObject from a COSDictionary. @param dictionary the underlying COSDictionary
568 Constructs a PDAppearanceStream from a COSStream. @param stream the underlying COSStream to use
569 Constructs a PDTransparencyGroup from a COSStream and ResourceCache. @param stream PDF stream containing transparency group data @param cache resource cache for managing resources
570 Adds TrueType collection from a file. @param ttcFile the TrueType collection file to process
571 Adds a TrueType font to the list. @param fontHeaders headers containing font information @param file font file @param hash unique identifier for the font
572 Adds a Type 1 font from a PFB file. @param pfbFile the PFB file containing the font data
573 Constructs a PDCheckBox. @param acroForm form containing the checkbox @param field dictionary representing the checkbox field @param parent parent non-terminal field
574 Constructs a new PDPushButton. @param acroForm the form containing this button @param field the dictionary representing the button @param parent the parent field of this button
575 Constructs a PDRadioButton. @param acroForm the form containing the radio button @param field the dictionary representing the radio button @param parent the parent non-terminal field
576 Initializes a PDChoice object. @param acroForm the form containing the field @param field the dictionary representing the choice field @param parent the parent non-terminal field
577 Constructs a PDTextField. @param acroForm the form containing this field @param field the dictionary representing this field @param parent the parent field, if any
578 Saves the current graphics state by cloning and pushing onto stack.
579 Saves the current graphics stack and resets it with a clone of the top state. @return The original graphics stack before reset
580 Initializes a new COSDocument with an in-memory cache.
581 Initializes a COSParser with encryption details. @param source input stream for PDF parsing @param password decryption password @param keyStore InputStream for keystore @param keyAlias alias of the key in the keystore @param streamCacheCreateFunction function to create cache streams @throws IOException if initialization fails
582 Converts dictionary to string representation. @return String representation of the dictionary or error message if an exception occurs
583 Clips the current graphics state to a specified rectangle. @param rectangle the boundary rectangle for clipping
584 Transforms and returns the bounding box of an appearance stream. @param appearanceStream PDF appearance stream to process @return Transformed bounding box as Rectangle2D
585 Initializes graphics state with page boundaries. @param page page dimensions and coordinates
586 Retrieves the integer value at index 2 of the array. @return Integer value stored at index 2
587 Retrieves the integer value at index 2 of the array. @return integer value from the array
588 Retrieves the integer value at index 3 of the array. @return integer value at index 3
589 Retrieves the right value from an array. @return integer value at index 4 of the array
590 Retrieves the top element from the array. @return integer value at index 5 of the array
591 Retrieves the third element from an array. @return The integer value at index 2 of the array
592 Retrieves the left value from an array. @return integer value at index 2 of the array
593 Retrieves the top element from the array. @return integer value at index 3 of the array
594 Checks if the array name at index 1 is "TYPE_BOUNDED". @return true if array name matches, false otherwise
595 Checks if the bounding box fits. @return true if bounding box is fitted, false otherwise
596 Checks if the bounding box fits. @return true if bounding box is fitted, false otherwise
597 Creates an output stream with no specific encoding. @return OutputStream instance @throws IOException if an I/O error occurs
598 Creates an output stream with specified filter. @param filter compression or encoding filter @return OutputStream for writing data @throws IOException if I/O error occurs
599 Creates a thumbnail image from a COS stream. @param cosStream the input COS stream @return PDImageXObject representing the thumbnail
600 Retrieves the mask image for this object. @return PDImageXObject representing the mask or null if none exists
601 Retrieves the soft mask image. @return PDImageXObject of the soft mask or null if none exists
602 Writes affine transformation matrix to output. @param transform the AffineTransform object to write
603 Starts text mode for PDF document. Throws exception if already in text mode.
604 Ends text mode and writes the END_TEXT operator. Throws IllegalStateException if not in text mode.
605 Sets text leading. @param leading line spacing value @throws IOException if I/O error occurs
606 Writes a newline in text mode. Throws IllegalStateException if not in text mode.
607 Moves text cursor to a new line at specified offset. @param tx horizontal offset @param ty vertical offset @throws IOException if an I/O error occurs
608 Saves the current graphics state. Throws IllegalStateException if in text mode.
609 Restores the graphics state. Throws IllegalStateException if called within text mode.
610 Sets the stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
611 Sets the stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0) @throws IOException if an I/O error occurs
612 Sets the stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
613 Sets non-stroking color using RGB values. @param r red component (0.0 to 1.0) @param g green component (0.0 to 1.0) @param b blue component (0.0 to 1.0) @throws IOException if an I/O error occurs
614 Sets non-stroking color using CMYK values. @param c cyan component (0.0 to 1.0) @param m magenta component (0.0 to 1.0) @param y yellow component (0.0 to 1.0) @param k black component (0.0 to 1.0)
615 Sets non-stroking color to grayscale. @param g grayscale value (0.0 to 1.0) @throws IOException if an I/O error occurs
616 Adds a rectangle to the document. @param x top-left corner x-coordinate @param y top-left corner y-coordinate @param width rectangle width @param height rectangle height @throws IOException if an I/O error occurs
617 Draws a cubic Bézier curve. @param x1,y1 control point 1 coordinates @param x2,y2 control point 2 coordinates @param x3,y3 endpoint coordinates @throws IOException if an I/O error occurs
618 Adds a quadratic Bézier curve to the path. @param x2 control point x-coordinate @param y2 control point y-coordinate @param x3 end point x-coordinate @param y3 end point y-coordinate @throws IOException if an I/O error occurs
619 Draws a cubic Bézier curve with a replicated final point. @param x1 the x-coordinate of the first control point @param y1 the y-coordinate of the first control point @param x3 the x-coordinate of the third control point (final point) @param y3 the y-coordinate of the third control point (final point) @throws IOException if an I/O error occurs while writing to the output stream
620 Moves the graphics cursor to specified coordinates. @param x horizontal coordinate @param y vertical coordinate @throws IOException if an I/O error occurs
621 Draws a line to the specified coordinates. @param x target X coordinate @param y target Y coordinate @throws IOException if an I/O error occurs
622 Strokes the current path. Throws exception if called in text mode.
623 Closes and strokes the current path. Throws an exception if called within a text block. @throws IOException if an I/O error occurs
624 Fills the current path using non-zero winding rule. Throws IllegalStateException if called in text mode.
625 Fills the shape using even-odd rule. Throws IllegalStateException if called in text mode.
626 Fills and strokes the current path. Throws exception if called in text mode.
627 Fills and strokes path using even-odd rule. Throws exception if called in text mode.
628 Closes path, fills it using non-zero winding rule, and strokes it. Throws exception if called in text mode.
629 Closes path, fills using even-odd rule, and strokes it. Throws exception if called in text mode.
630 Closes the current path. Throws IllegalStateException if called within a text block.
631 Clips the current path. Throws IOException if an I/O error occurs. Throws IllegalStateException if called within a text block.
632 Clips the current path using even-odd rule. Throws IllegalStateException if called in text mode.
633 Sets line width for graphics operations. @param lineWidth the desired line width @throws IOException if an I/O error occurs
634 Sets the line join style. @param lineJoinStyle join style (0, 1, or 2) @throws IOException if I/O error occurs
635 Sets the line cap style. @param lineCapStyle valid values are 0, 1, or 2 @throws IOException if an I/O error occurs
636 Sets line dash pattern. @param pattern array of dash lengths @param phase starting point of the pattern
637 Sets the line miter limit. @param miterLimit the miter limit value, must be greater than 0 @throws IOException if an I/O error occurs while writing
638 Ends marked content in PDF. @throws IOException if an I/O error occurs
639 Sets character spacing in the document. @param spacing the amount of space between characters @throws IOException if an I/O error occurs
640 Sets word spacing in PDF. @param spacing the amount of space between words @throws IOException if an I/O error occurs
641 Sets horizontal scaling for text. @param scale scaling factor to apply @throws IOException if I/O error occurs
642 Sets text rendering mode. @param rm rendering mode to apply @throws IOException if I/O error occurs
643 Sets text rise value. @param rise amount of text rise @throws IOException if I/O error occurs
644 Constructs a PDRectangle from a COSArray. @param array COSArray containing rectangle coordinates
645 Initializes a line dash pattern with an array and phase. @param array COSArray representing the dash pattern @param phase offset for starting the dash pattern
646 Returns string representation of PDRange. @return formatted string with min and max values
647 Evaluates input through a Type 4 function. @param input float array of input values @return float array of evaluated output values
648 Reads and processes patch data from input stream. @param input source image input stream @param isFree flag indicating if edge points are implicit @param implicitEdge predefined edge points array @param implicitCornerColor predefined corner colors array @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis coordinate range @param rangeY Y-axis coordinate range @param colRange color component ranges @param matrix transformation matrix @param xform additional affine transform @param controlPoints number of control points @return Patch object or null if EOF encountered @throws IOException if reading fails
649 Reads a vertex from an image input stream. @param input the image input stream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X coordinate range @param rangeY Y coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform additional affine transform @return Vertex object with transformed coordinates and colors @throws IOException if an I/O error occurs
650 Retrieves the color at index 0. @return PDGamma object representing the color
651 Retrieves the after color. @return PDGamma object representing the after color
652 Retrieves the start color. @return PDGamma representing the start color
653 Retrieves the end color of the gradient. @return PDGamma representing the end color
654 Retrieves the blend mode from dictionary. @return BlendMode instance or null if not found
655 Retrieves the destination from the PDF object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
656 Retrieves the destination object. @return PDDestination object or null if not found @throws IOException if an error occurs during retrieval
657 Retrieves the destination from a PDF object. @return PDDestination object representing the destination @throws IOException if an I/O error occurs
658 Retrieves destination from COS object. @return PDDestination object or null if not found @throws IOException if an I/O error occurs
659 Creates a matrix from a COSBase object. @param base the base object to create the matrix from @return a new Matrix object, or an empty Matrix if input is invalid
660 Updates document's highest XRef object number based on imported page. @param importedPage the page to be processed
661 Retrieves a COSDictionary using two keys. @param firstKey the primary key to access the dictionary @param secondKey the secondary key within the nested dictionary @return COSDictionary object or null if not found
662 Retrieves a boolean value from a dictionary. @param firstKey primary key in the dictionary @param secondKey secondary key in the dictionary @param defaultValue default boolean value if not found @return boolean value associated with the keys or default if missing
663 Retrieves integer value from nested dictionary. @param firstKey primary key for the dictionary @param secondKey secondary key within the nested dictionary @param defaultValue default value to return if not found @return integer value or default if missing
664 Retrieves filter names from PDF parameters. @return List of filter names or empty list if none found
665 Retrieves the color space. @return PDColorSpace object representing the color space @throws IOException if an I/O error occurs
666 Checks if a dictionary represents a PDF catalog. @param dictionary the COSDictionary to check @return true if the dictionary is a catalog, false otherwise
667 Checks if a dictionary represents a page tree node. @param node the COSDictionary to check @return true if the node is a page tree node, false otherwise
668 Retrieves the cryptographic filter method from the dictionary. @return COSName representing the cryptographic filter method or null if not set
669 Retrieves stream filter name from dictionary. @return COSName of the stream filter or IDENTITY if not set
670 Retrieves string filter name from dictionary. @return COSName of the string filter or IDENTITY if not set
671 Decrypts PDF dictionary entries. @param dictionary the COSDictionary to decrypt @param objNum object number of the dictionary @param genNum generation number of the dictionary
672 Converts a character code to its Unicode representation using ToUnicode CMap or encoding. @param code character code to convert @return Unicode string or null if conversion fails
673 Retrieves the subtype of a PDF object. @return COSName representing the subtype or null if not set
674 Retrieves the relationship name from the dictionary. @return COSName object representing the relationship or null if not found
675 Retrieves the appearance state of the PDF object. @return COSName representing the appearance state or null if not set
676 Checks if the document is encrypted. @return true if encrypted, false otherwise
677 Retrieves the encryption dictionary from the trailer. @return COSDictionary containing encryption details or null if not present
678 Parses PDF trailer and retrieves root dictionary. Throws IOException if root is missing.
679 Retrieves or creates an AcroForm with optional fixes. @param acroFormFixup fix to apply to the AcroForm @return PDAcroForm object or null if not found
680 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
681 Retrieves document name dictionary. @return PDDocumentNameDictionary object or null if not found
682 Retrieves destination dictionary from the document. @return PDDocumentNameDestinationDictionary object or null if not found
683 Retrieves mark info from PDF document. @return PDMarkInfo object or null if not found
684 Retrieves URI dictionary from the PDF document. @return PDURIDictionary object or null if not found
685 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
686 Retrieves optional content properties. @return PDOptionalContentProperties object or null if not found
687 Retrieves destination names from the document's name dictionary or catalog. @return PDDestinationNameTreeNode containing destinations or null if none found
688 Retrieves the embedded files node from the document. @return PDEmbeddedFilesNameTreeNode representing embedded files or null if none exist
689 Retrieves JavaScript dictionary node. @return PDJavascriptNameTreeNode object or null if not found
690 Retrieves the transition effect for the page. @return PDTransition object or null if no transition is defined
691 Retrieves an indirect COSObject from resources by kind and name. @param kind type of resource dictionary @param name key for the resource item @return COSObject if found, otherwise null
692 Retrieves an object from the resources dictionary. @param kind type of resource dictionary @param name key for the object in the dictionary @return COSBase object or null if not found
693 Retrieves names of resources by type. @param kind type of resource to retrieve @return iterable set of resource names or empty set if not found
694 Retrieves a page from the document. @return PDPage object or null if not found
695 Retrieves a PDF page. @return PDPage object or null if not found
696 Retrieves a page from the PDF document. @return PDPage object or null if not found
697 Retrieves the ID tree node. @return PDNameTreeNode containing structure elements or null if not found
698 Retrieves the parent tree node. @return PDNumberTreeNode representing the parent tree or null if not present
699 Retrieves and processes the class map from a PDF document. @return A map of class names to their corresponding attribute objects or lists of attribute objects.
700 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName the name of the cryptographic filter @return PDCryptFilterDictionary object or null if not found
701 Retrieves the border style dictionary of the annotation. @return PDBorderStyleDictionary object or null if not found
702 Retrieves border effect dictionary from annotation. @return PDBorderEffectDictionary or null if not present
703 Retrieves the signature from the PDF document. @return PDSignature object or null if no signature exists
704 Retrieves JavaScript associated with the FDF document. @return FDFJavaScript object or null if none exists
705 Retrieves the appearance dictionary of the field. @return PDAppearanceDictionary object or null if not found
706 Retrieves appearance stream reference for a form field. @return FDFNamedPageReference object or null if not found
707 Retrieves icon fit settings from a field. @return FDFIconFit object or null if not found
708 Retrieves additional actions from a PDF field. @return PDAdditionalActions object or null if not found
709 Retrieves page info from PDF. @return FDFPageInfo object or null if not available
710 Retrieves template reference from dictionary. @return FDFNamedPageReference object or null if not found
711 Retrieves CID system information. @return PDCIDSystemInfo object or null if not found
712 Retrieves Panose classification from font dictionary. @return PDPanose object or null if not available
713 Retrieves PDF resources. @return PDResources object or null if not found
714 Retrieves character procedures dictionary. @return COSDictionary containing character procedures or null if not present
715 Retrieves the DeviceN color process from the dictionary. @return PDDeviceNProcess object or null if not found
716 Retrieves render state for a given destination. @param destination target rendering destination (PRINT, VIEW) @return RenderState object or null if not found
717 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not found
718 Retrieves resources from a PDF object. @return PDResources object or null if not found
719 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
720 Retrieves Windows-specific launch parameters. @return PDWindowsLaunchParams object or null if not available
721 Retrieves the target directory from a dictionary. @return PDTargetDirectory object or null if not found
722 Retrieves the appearance dictionary. @return PDAppearanceDictionary object or null if not present
723 Retrieves the first page of the PDF document. @return PDPage object representing the first page or null if not found
724 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
725 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
726 Retrieves the previous URI action. @return PDActionURI object or null if not found
727 Retrieves external data dictionary. @return PDExternalDataDictionary object or null if not present
728 Retrieves the border style dictionary. @return PDBorderStyleDictionary object or null if not present
729 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
730 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not present
731 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
732 Retrieves additional actions for the annotation. @return PDAnnotationAdditionalActions object or null if not present
733 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
734 Retrieves normal appearance settings. @return PDAppearanceEntry object or null if not found
735 Retrieves the filter data dictionary. @return PDPropBuildDataDict object or null if not found
736 Retrieves public security settings. @return PDPropBuildDataDict object or null if not found
737 Retrieves the application properties dictionary. @return PDPropBuildDataDict object or null if not found
738 Retrieves MDP seed value from dictionary. @return PDSeedValueMDP object or null if not found
739 Retrieves seed value certificate from dictionary. @return PDSeedValueCertificate object or null if not found
740 Retrieves the timestamp from the dictionary. @return PDSeedValueTimeStamp object or null if not found
741 Retrieves the property build from the PDF dictionary. @return PDPropBuild object or null if not found
742 Retrieves structure element from the PDF object. @return PDStructureElement or null if not found
743 Checks if the PDF object has child objects. @return true if there are child objects, false otherwise
744 Retrieves default resources from the PDF document. @return PDResources object or null if not found
745 Retrieves additional actions associated with a form field. @return PDFormFieldAdditionalActions object or null if none exist
746 Retrieves the signature from the PDF document. @return PDSignature object or null if not present
747 Retrieves default signature. @return PDSignature object or null if not present
748 Retrieves seed value from dictionary. @return PDSeedValue object or null if not found
749 Retrieves measure dictionary from PDF. @return PDMeasureDictionary object or null if not present
750 Retrieves document information from the thread. @return PDDocumentInformation object or null if not found
751 Retrieves the first thread bead. @return PDThreadBead object or null if not found
752 Retrieves thread information from bead. @return PDThread object or null if not found
753 Retrieves the next bead in the thread. @return PDThreadBead object representing the next bead or null if not found
754 Retrieves the previous bead in the thread. @return PDThreadBead object representing the previous bead
755 Retrieves a page from the current bead. @return PDPage object or null if not found
756 Retrieves PDF metadata. @return PDMetadata object or null if not found
757 Retrieves PDF metadata. @return PDMetadata object or null if not available
758 Retrieves differences stream from FDF document. @return COSStream containing differences or null if not found
759 Retrieves font file as a PDStream. @return PDStream containing font data or null if not found
760 Retrieves font file stream. @return PDStream object for font file or null if not found
761 Retrieves the font file stream. @return PDStream containing font data or null if not present
762 Retrieves CID set stream from dictionary. @return PDStream of CID set or null if not found
763 Retrieves the sound stream from an action. @return COSStream containing sound data or null if not present
764 Retrieves the normal icon from the form object. @return PDFormXObject representing the normal icon or null if not present
765 Retrieves rollover icon from the form. @return PDFormXObject representing the rollover icon, or null if not present
766 Retrieves the alternate icon. @return PDFormXObject representing the alternate icon or null if not present
767 Retrieves the document ID from the trailer. @return COSArray containing the document ID or null if not found
768 Retrieves output intents from the document. @return List of PDOutputIntent objects representing output intents
769 Retrieves thread beads from a PDF page. @return List of PDThreadBead objects representing the beads on the page
770 Retrieves viewport dictionaries from the page. @return List of PDViewportDictionary objects or null if none exist
771 Retrieves child nodes. @return List of PDNameTreeNode objects or null if no children exist
772 Retrieves a map of names and their corresponding values. @return Unmodifiable map with string keys and generic type T values, or null if not available @throws IOException if an I/O error occurs during processing
773 Retrieves child nodes of the current node. @return List of PDNumberTreeNode objects representing children
774 Retrieves a map of page label numbers. @return Map of integers to COSObjectable or null if not found @throws IOException if an I/O error occurs
775 Retrieves the upper limit from a COSArray. @return Integer representing the upper limit or null if not found
776 Retrieves the lower limit value from a COSArray. @return Integer representing the lower limit or null if not found
777 Retrieves the range values as a COSArray. @return COSArray containing range values or null if not set
778 Retrieves or initializes the domain values. @return COSArray containing domain values
779 Returns the SIZE array from the COS object. @return COSArray representing the size or null if not found
780 Retrieves or creates decode array. @return COSArray containing decode values or defaults
781 Retrieves the array of functions. @return COSArray containing functions or null if not set
782 Retrieves or initializes the bounds array. @return COSArray representing the bounds
783 Retrieves the encode array from the COS object. @return COSArray containing encode information or null if not present
784 Retrieves owner user properties. @return List of PDUserProperty objects representing user properties
785 Checks if an edge is attached. @param edge the edge to check @return true if edge is attached, false otherwise
786 Retrieves the color from an annotation. @return Color object or null if not available
787 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
788 Retrieves callout coordinates from annotation. @return Array of floats representing callout points or null if not available
789 Retrieves ink list from annotation. @return List of float arrays representing ink data or null if not found
790 Retrieves line coordinates from annotation. @return float array of line coordinates or null if not present
791 Retrieves the ending style of a line annotation. @return The name of the ending style or LE_NONE if not set.
792 Retrieves the endpoint style of a line annotation. @return endpoint style as a string, default is LE_NONE if not set
793 Retrieves the interior color of an annotation. @return Color object or null if not available
794 Retrieves horizontal offset of annotation caption. @return horizontal offset value or 0 if not set
795 Retrieves vertical offset of annotation caption. @return vertical offset value or 0 if not set
796 Retrieves vertices of an annotation. @return Array of vertex coordinates or null if not available
797 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
798 Retrieves vertices of an annotation. @return array of vertex coordinates or null if not available
799 Retrieves the starting point ending style of an annotation. @return The name of the starting point ending style or LE_NONE if not set.
800 Retrieves the endpoint style of a line annotation. @return endpoint style name or LE_NONE if not set
801 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not specified
802 Retrieves the interior color of an annotation. @return Color object representing the interior color or null if not set
803 Retrieves annotation coordinates. @return float array of coordinates or null if missing
804 Retrieves the ID array from the FDF document. @return COSArray containing the document ID or null if not present
805 Retrieves all FDF fields. @return List of FDFField objects or null if no fields are present
806 Retrieves a list of FDF pages. @return List of FDFPage objects or null if no pages are found
807 Retrieves child fields of the current field. @return List of FDFField objects or null if no children exist
808 Retrieves options from a field. @return List of option values or null if none exist
809 Retrieves templates from a PDF page. @return List of FDFTemplate objects or null if no templates exist
810 Retrieves form fields from a PDF template. @return List of FDFField objects or null if no fields are present
811 Retrieves the list of character widths. @return List of Float representing character widths or empty list if not available
812 Retrieves the transformation matrix. @return a 9-element float array representing the matrix or identity if none exists
813 Retrieves a list of component names from the dictionary. @return List of component names or an empty list if none found
814 Retrieves the background array from the dictionary. @return COSArray representing the background or null if not set
815 Retrieves the domain array from the PDF object. @return COSArray containing domain information or null if not set
816 Returns the EXTEND array from the COS object. @return COSArray representing EXTEND or null if not present
817 Retrieves the domain array from the PDF document. @return COSArray containing domain information or null if not set
818 Retrieves or initializes the coordinates array. @return COSArray containing coordinate data
819 Retrieves decode values as a COSArray. @return COSArray containing decode values or null if not present
820 Retrieves font settings from a dictionary. @return PDFontSetting object or null if no font array is found
821 Retrieves an array of form fields. @return COSArray containing form field data
822 Retrieves the fields array from the action. @return COSArray containing form fields or null if not present
823 Retrieves rectangle differences as a float array. @return Array of floats representing rectangle differences or empty if none
824 Retrieves rectangle differences from a PDF object. @return Array of floats representing the rectangle differences, or an empty array if none found.
825 Retrieves callout array from PDF object. @return float array representing callout or null if not present
826 Retrieves the ink list from a PDF object. @return 2D array of floats representing the ink list, or an empty array if not found
827 Retrieves line coordinates. @return array of floats representing line coordinates or null if not found
828 Retrieves the starting point ending style. @return String representing the ending style or default if not set
829 Retrieves the endpoint style from a PDF object. @return endpoint style as a string or default value if not found
830 Retrieves horizontal offset of caption. @return Horizontal offset as a float, default is 0.0 if not set
831 Retrieves vertical offset of caption. @return float value representing the vertical offset
832 Retrieves quadrilateral points from a PDF annotation. @return Array of quad points or null if not present
833 Retrieves vertex coordinates. @return array of vertex floats or null if not present
834 Retrieves the path data from a PDF object. @return 2D array of floats representing the path or null if not found
835 Retrieves the ending style of a line annotation's starting point. @return String representing the ending style or LE_NONE if not specified
836 Retrieves the ending style of the line annotation. @return String representing the line ending style or LE_NONE if not set
837 Retrieves vertex coordinates. @return array of vertex floats or null if not available
838 Retrieves rectangle differences array. @return Array of floats representing rectangle differences or empty if none
839 Retrieves quadrilateral points from a PDF annotation. @return array of float values representing the quad points, or null if not available
840 Retrieves subfilters from a PDF dictionary. @return List of subfilter names or empty list if none found
841 Retrieves digest methods from dictionary. @return List of digest method names or empty list if none found
842 Retrieves a list of reasons from the document. @return List of reason strings or empty list if none present
843 Retrieves legal attestation fields from the document. @return List of legal attestation field names or empty list if none found
844 Retrieves subject byte arrays from the document. @return List of byte arrays representing the subject or null if not found
845 Retrieves key usage extensions from a dictionary. @return List of key usage strings or null if not found
846 Retrieves issuer information from a PDF document. @return List of byte arrays representing the issuer or null if not present
847 Retrieves OID list from dictionary. @return List of byte arrays representing OIDs or null if not found
848 Retrieves byte range from dictionary. @return array of integers representing byte ranges or empty if none found
849 Retrieves calculation order of form fields. @return List of PDField objects in calculation order
850 Retrieves selected options' indices. @return List of selected option indices or empty list if none
851 Retrieves the number format dictionaries for changes. @return Array of PDNumberFormatDictionary objects or null if not found
852 Retrieves number format dictionaries for Y-axis changes. @return Array of PDNumberFormatDictionary objects or null if not found
853 Retrieves distances as number format dictionaries. @return array of PDNumberFormatDictionary or null if not found
854 Retrieves number format dictionaries from the PDF. @return array of PDNumberFormatDictionary objects or null if none found
855 Retrieves angle format dictionaries. @return array of PDNumberFormatDictionary or null if not available
856 Retrieves line slope dictionaries. @return Array of PDNumberFormatDictionary objects or null if not available
857 Retrieves coordinate system origin. @return array of floats representing the origin or null if not found
858 Retrieves the visibility policy. @return COSName representing the visibility policy or ANY_ON if not specified
859 Retrieves a long value by key. @param key the key to look up @return the long value associated with the key, or -1 if not found
860 Retrieves a long value by key with a default. @param key the COSName key to look up @return the long value if found, otherwise -1
861 Retrieves a long value by key with a default. @param key the configuration key as a String @param defaultValue the default long value if key not found @return the long value associated with the key or default
862 Decodes an input stream using a list of filters. @param encoded the input stream to decode @param filterList list of filters for decoding @param parameters dictionary containing decode parameters @param options decode options @param results optional list to store decode results @return decoded RandomAccessRead object @throws IOException if an I/O error occurs
863 Sets the startxref byte position and resolves XRef trailers. @param startxrefBytePosValue the byte position of the startxref entry
864 Retrieves a float value by key. @param key the key associated with the float value @return the float value or -1 if not found
865 Retrieves a float value by key. @param key the COSName key to search for @return the float value or -1 if not found
866 Retrieves a float value by key with a default. @param key PDF key as string @param defaultValue fallback value if not found @return float value or default
867 Retrieves user unit from PDF page. @return User unit value or default 1.0 if invalid
868 Retrieves the guideline width. @return float value representing the guideline width, default is 1 if not set
869 Retrieves the opacity of an annotation. @return opacity value as a float, defaulting to 1.0 if not set
870 Retrieves the font weight. @return font weight as a float, defaulting to 0 if not found
871 Retrieves the italic angle of the font. @return italic angle as a float value
872 Retrieves the ascent value from the dictionary. @return the ascent value as a float, defaulting to 0 if not found
873 Retrieves the descent value. @return Descent value as a float, defaulting to 0 if not found
874 Retrieves leading value from dictionary. @return leading value as float or 0 if not found
875 Returns the font's cap height. @return cap height value, adjusted for negative values
876 Retrieves X height of font. @return Absolute X height value
877 Retrieves the vertical stem width. @return vertical stem width as a float, defaulting to 0 if not specified
878 Retrieves the stem height value. @return stem height as a float, defaulting to 0 if not set
879 Retrieves the average width of characters. @return average width as a float, defaulting to 0 if not set
880 Retrieves the maximum width value. @return maximum width as a float, defaulting to 0 if not set
881 Retrieves the missing width from the dictionary. @return the missing width as a float, defaulting to 0 if not found
882 Retrieves the gamma value from the dictionary. @return gamma value as a float, defaulting to 1.0 if not found
883 Retrieves the X step value from the COS object. @return the X step as a float, defaulting to 0 if not set
884 Retrieves the Y step value from the COS object. @return the Y step as a float, defaulting to 0 if not set
885 Retrieves the volume level. @return Volume as a float between -1 and 1, defaulting to 1 if out of range
886 Retrieves leader line length from COS object. @return float value representing leader line length or default of 0
887 Retrieves the leader line extension length. @return The extension length as a float value.
888 Retrieves leader line offset length. @return float value of leader line offset or 0 if not set
889 Retrieves constant opacity value. @return opacity as float, default is 1 if not set
890 Returns the width value. @return float representing the width or 0 if COSName is found
891 Retrieves the duration value. @return duration as a float, defaulting to 1 if not found
892 Retrieves the fly scale value. @return float representing the fly scale
893 Extracts text regions from a PDF page. @param page the PDF page to process
894 Retrieves the color space. @throws IOException if an I/O error occurs @return PDColorSpace object
895 Creates a PDPropertyList from a COSDictionary. @param dict dictionary containing PDF properties @return PDPropertyList or subclass based on dictionary type
896 Retrieves line width from PDF dictionary. @return line width as a float or null if not set
897 Retrieves the miter limit value. @return float representing the miter limit or null if not set
898 Retrieves flatness tolerance value. @return float representing flatness tolerance or null if not set
899 Retrieves the smoothness tolerance value. @return the smoothness tolerance as a Float
900 Retrieves the stroking alpha constant. @return Float value representing the stroking alpha constant or null if not found
901 Retrieves the non-stroking alpha constant. @return float value representing the non-stroking alpha constant
902 Parses a COS dictionary value from the source. @return Parsed COSBase object or null if invalid
903 Retrieves COS object offsets. @return Map of COSObjectKey to Long representing offsets or null if not found
904 Writes an object to output. @param obj the COSBase object to write @throws IOException if writing fails
905 Writes object reference to output. @param obj COSBase object to write @throws IOException if I/O error occurs
906 Saves the current object to an OutputStream. @param output stream to write the object data @throws IOException if an I/O error occurs during writing
907 Clears all objects and updates state.
908 Removes all specified objects from the collection and updates state. @param objectsList list of COSBase objects to remove
909 Retains only elements in objects that are also in objectsList. @param objectsList collection of COSBase objects to retain
910 Sets an integer value at a specified index. @param index position in the list to update @param intVal integer value to set
911 Removes and returns an element at a specific index. @param i index of the element to remove @return the removed COSBase object or null if out of bounds
912 Removes an object from the collection. @param o the object to be removed @return true if the object was successfully removed, false otherwise
913 Clears all items and updates the state.
914 Removes an item by key from the collection. @param key unique identifier of the item to remove
915 Updates the state if origins differ. @param updateState state to be updated
916 Sets baseObject to null and updates state. @param none @return none
917 Sets the origin document state. @param originDocumentState new document state to set @param dereferencing flag indicating if dereferencing is needed
918 Retrieves a string at the specified index. @param index position of the string to retrieve @return string at the given index or default if not found
919 Retrieves name as string from PDF name. @param key key to fetch the name @return name in string format
920 Retrieves name as string from COSName with a default value. @param key the COSName key to look up @param defaultValue the default value to return if not found @return the name as a string, or default value if null
921 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset for XRef check @return true if valid XRef stream, false otherwise
922 Retrieves the page mode from the root dictionary. @return PageMode enum value, defaulting to USE_NONE if invalid or not found
923 Retrieves the page layout from a PDF document. @return PageLayout enum or SINGLE_PAGE if invalid or not set
924 Retrieves the version string from the root element. @return Version string or null if not found
925 Retrieves trapped status from document information. @return Trapped status as a string or null if not set
926 Retrieves the style name. @return Style name as a string
927 Retrieves the type of the COS object. @return The string representation of the type or null if not set.
928 Retrieves the owner's name from the COS object. @return Owner's name as a string or null if not found
929 Retrieves the structure type from the COS object. @return the structure type as a string or null if not found
930 Creates a PDStructureNode from a COSDictionary. @param node the COSDictionary representing the structure node @return PDStructureNode instance based on the Type entry @throws IllegalArgumentException if Type is invalid
931 Retrieves the type of the COS object. @return Type as a string or null if not found
932 Retrieves the name from the COS object. @return The name as a String or null if not found
933 Retrieves language property. @return language as string or null if not set
934 Returns the type of the PDF object. @return Type as a string
935 Retrieves the subtype property as a string. @return The value of the SUBTYPE property or null if not found.
936 Retrieves the filter name from the dictionary. @return the filter name as a string or null if not present
937 Retrieves the sub-filter name from the dictionary. @return The sub-filter name as a string or null if not found
938 Creates an FDFAnnotation based on the given dictionary. @param fdfDic COSDictionary containing annotation details @return Specific FDFAnnotation instance or null if unsupported
939 Retrieves the intent of the annotation. @return The intent as a string or null if not set.
940 Retrieves the line ending style. @return Line ending style as a string
941 Retrieves the version name from the catalog. @return version string or empty if not set
942 Retrieves the encoding name from FDF document. Returns "PDFDocEncoding" if no specific encoding is found. @return Encoding string
943 Retrieves scale option. @return Scale option as string, defaulting to "Always" if null
944 Retrieves scale type, defaulting to proportional. @return scale type as string
945 Retrieves the base font name. @return Base font name as a string
946 Retrieves the type name from the dictionary. @return Type name as a string or null if not found
947 Retrieves the subtype as a string. @return The subtype name or null if not found
948 Retrieves the font name from the dictionary. @return The font name as a string or null if not found.
949 Retrieves the font stretch value. @return font stretch as string or null if not set
950 Retrieves the base font name. @return Base font name as a string
951 Retrieves the base font name. @return base font name as a string or null if not found
952 Retrieves the base font name. @return Base font name as a string or null if not found
953 Retrieves the base font name. @return base font name as a string or null if not found
954 Checks if the dictionary represents an NChannel. @return true if the subtype is "NChannel", false otherwise
955 Retrieves the type of the action. @return String representing the action type
956 Retrieves the subtype of the action. @return Subtype as a string or null if not found
957 Creates a PDAction based on the action type. @param action COSDictionary containing action details @return PDAction object or null if unsupported type
958 Retrieves the subtype of the current object. @return The subtype as a string, or null if not set.
959 Retrieves caption positioning. @return Caption positioning as a string or null if not set
960 Retrieves the intent of the COSObject. @return The intent as a string or null if not found.
961 Retrieves the subtype of the current object. @return Subtype as a string or null if not available
962 Retrieves the name as a string from the dictionary. @return The name in string format or null if not found.
963 Retrieves the filter name from the dictionary. @return The filter name as a string or null if not found.
964 Retrieves the URL type from the dictionary. @return The URL type as a string or null if not found.
965 Retrieves the filter name from the dictionary. @return filter name as a string or null if not found
966 Retrieves the sub-filter name. @return Sub-filter name as a string or null if not found
967 Retrieves the field type from the COS object. @return Field type as a string or null if not found
968 Retrieves the name from the COSObject. @return the name as a String
969 Retrieves duplex setting from preferences. @return duplex setting as string or null if not found
970 Retrieves string value by key. @param key unique identifier for the string @return string value associated with the key
971 Retrieves string value by key with a default. @param key the COSName key to search for @param defaultValue the default value if key is not found @return the string value or default if key is null
972 Retrieves the language setting from the PDF document. @return Language string or null if not set
973 Retrieves the title from document information. @return Title as a string or null if not set
974 Retrieves the author from document information. @return Author as a String or null if not set
975 Retrieves the subject from document info. @return Subject string or null if not set
976 Retrieves keywords from document metadata. @return String containing keywords or empty string if none
977 Retrieves the creator of the document. @return The name of the creator as a String.
978 Retrieves the producer information from document metadata. @return Producer name as a string or null if not available
979 Retrieves the prefix string from the root. @return the prefix value as a String
980 Retrieves the Unicode file name. @return The Unicode string representing the file name.
981 Retrieves file name from PDF document. @return File name as a string or null if not present
982 Retrieves DOS file system information. @return String containing DOS file system details or null if not available
983 Retrieves the MAC (Message Authentication Code) from the file. @return MAC value as a string or null if not available
984 Retrieves the Unix file name. @return the Unix file name as a String
985 Retrieves file description from metadata. @return Description of the file as a string
986 Retrieves the element identifier. @return The string value of the ID or null if not present.
987 Retrieves the title from the COSObject. @return The title as a String or null if not present
988 Retrieves the language of the document. @return Language string or null if not set
989 Retrieves alternate description from COS object. @return Alternate description as a string or null if not present
990 Retrieves the expanded form of the PDF object. @return The expanded form as a string or null if not available.
991 Retrieves the actual text from the COS object. @return The actual text as a String or null if not present
992 Retrieves formatted value from COS object. @return Formatted string value or null if not found
993 Retrieves actual text from properties. @return Actual text as a string or null if not available
994 Retrieves alternate description from properties. @return alternate description string or null if not available
995 Retrieves expanded form property. @return Expanded form string or null if properties are null
996 Retrieves the date string from an annotation. @return Date string or null if not present
997 Retrieves the name from an annotation. @return The name as a String or null if not present.
998 Retrieves the contents of an annotation. @return The string content of the annotation or null if not set.
999 Retrieves the title from an annotation. @return The title as a string or null if not present
1000 Retrieves the subject of an annotation. @return The subject string or null if not set.
1001 Retrieves the symbol from the annotation. @return The symbol string or null if not present.
1002 Retrieves the rotation value of an annotation. @return String representing the rotation angle or null if not set
1003 Retrieves the default appearance string. @return The default appearance string or null if not found.
1004 Retrieves the default style from annotations. @return default style as a string or null if not found
1005 Retrieves the caption style from annotations. @return the caption style as a string
1006 Retrieves the state value from an annotation. @return the state as a String or null if not present
1007 Retrieves the state model value. @return the state model as a string
1008 Retrieves the status string from the PDF document. @return The status as a String or null if not found.
1009 Retrieves the target string from the PDF document. @return The target string or null if not found
1010 Retrieves partial field name from COSName. @return Partial field name as a string
1011 Retrieves the name from a COSString reference. @return The name as a String.
1012 Retrieves the font family name. @return Font family as a string or null if not found
1013 Retrieves the character set from the dictionary. @return character set as a string or null if not present
1014 Retrieves the name from the dictionary. @return The name as a string or null if not found
1015 Retrieves group names from a PDF dictionary. @return array of group names or empty array if none found
1016 Retrieves the value of the "F" key from the COS dictionary. @return String value associated with the "F" key or null if not found
1017 Retrieves the 'D' attribute as a string. @return The value of the 'D' attribute or null if not present.
1018 Retrieves the "O" string from the action. @return The value of the "O" string or null if not present.
1019 Retrieves the value of the "P" entry from the COS dictionary. @return The string value associated with the "P" key or null if not present.
1020 Retrieves URI from PDF action. @return decoded URI string or null if not found
1021 Retrieves the filename from the dictionary. @return Filename as a string or null if not present
1022 Retrieves annotation name from dictionary. @return Annotation name as a string
1023 Retrieves the filename from parameters. @return filename as a String
1024 Retrieves directory path from parameters. @return Directory path as a string or null if not found
1025 Retrieves the execute parameter from the PDF document. @return The value of the "P" parameter as a string.
1026 Retrieves contents string from dictionary. ```
1027 Retrieves the modified date of the document. @return Modified date as a string or null if not available
1028 Retrieves the annotation name. @return The name of the annotation as a string.
1029 Retrieves the default appearance string. @return default appearance string or null if not set
1030 Retrieves the default style string from the COS object. @return default style string or null if not found
1031 Retrieves the title popup text. @return The title popup string or null if not present
1032 Retrieves the subject of the document. @return The subject string or null if not set
1033 Retrieves the state from the COS object. @return The state as a string, or null if not present.
1034 Retrieves the state model of the COS object. @return The state model as a string or null if not found.
1035 Retrieves the normal caption from the COS object. @return The normal caption as a string or null if not found.
1036 Retrieves the rollover caption from the COS object. @return The rollover caption as a String, or null if not present
1037 Retrieves alternate caption from COS object. @return String containing alternate caption or null if not present
1038 Retrieves the date string from the dictionary. @return Date string or null if not present
1039 Retrieves the operating system information from a PDF document. @return OS name as a String or null if not available
1040 Retrieves subject distinguished names from a dictionary. @return List of maps containing key-value pairs for each DN or null if not found
1041 Retrieves URL from dictionary. @return URL string or null if not present
1042 Retrieves URL from dictionary. @return URL string or null if not present
1043 Retrieves the name from the dictionary. @return The name as a String or null if not found.
1044 Retrieves location from dictionary. @return Location string or null if not present
1045 Retrieves the reason from the dictionary. @return Reason string or null if not found
1046 Retrieves contact information from the dictionary. @return Contact information as a string or null if not present
1047 Retrieves the title from the COS object. @return The title as a String or null if not present
1048 Retrieves partial name from dictionary. @return Partial name as a string or null if not found
1049 Retrieves alternate field name from dictionary. @return Alternate field name as String or null if not found
1050 Retrieves the mapping name from the dictionary. @return The string value of the TM key or null if not found.
1051 Retrieves default style string from COS object. @return default style as string or null if not found
1052 Retrieves the scale ratio from the COS object. @return Scale ratio as a string or null if not found
1053 Retrieves role map from COS object. @return Map containing role mappings or empty map if not found
1054 Retrieves options from a PDF form field. @return List of option strings or empty list if none found
1055 Retrieves display values for options. @return List of option display values
1056 Retrieves a string value based on attribute V or returns "Off" by default. @return String value from export list or "Off"
1057 Retrieves values associated with COSName.V. @return List of strings containing the values
1058 Retrieves default value. @return List of default values as strings
1059 Initializes a new PDF simple file specification with an empty string. @param none @return none
1060 Sets the file name. @param fileName name of the file to be set
1061 Constructs a named destination from a string. @param dest destination name as a string
1062 Sets a named destination. @param dest the destination string to set @throws IOException if an I/O error occurs
1063 Reads and validates a generation number. @return validated generation number @throws IOException if the number is invalid
1064 Reads a long value and validates it. @return validated object number @throws IOException if the number is invalid
1065 Retrieves user password based on encryption revision. @param ownerPassword owner's password bytes @param owner user identifier bytes @param encRevision encryption revision number @param length expected password length @return user password bytes or empty array for unsupported revisions @throws IOException if an I/O error occurs
1066 Initializes a TensorPatch with given points and colors. @param tcp array of control points defining the patch @param color 2D array representing color data
1067 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input source of data to encrypt @param output destination for encrypted data @throws IOException if an I/O error occurs
1068 Returns the current FontProvider. Initializes with DefaultFontProvider if not already set. @return FontProvider instance
1069 Generates shaded triangles from a grid of color-coordinates. @param patchCC 2D array of CoordinateColorPair objects @return List of ShadedTriangle objects representing the grid's shaded areas
1070 Initializes a CoonsPatch with given points and colors. @param points array of 12 boundary points for the patch @param color 2D array representing color values at each point
1071 Processes a text position, handling duplicates and diacritics. @param text TextPosition object to process
1072 Processes a text position, handling duplicates and diacritics. @param text TextPosition object to process
1073 Removes spaces from list that are completely contained within another TextPosition. @param textList list of TextPosition objects to process
1074 Handles line and paragraph separation. @param current current position wrapper @param lastPosition last processed position wrapper @param lastLineStartPosition start of the last line @param maxHeightForLine maximum height for a line @return updated last line start position @throws IOException if an I/O error occurs
1075 Normalizes and processes words from a line item. @param normalized list to store processed words @param lineBuilder accumulates characters of the current word @param wordPositions stores text positions for the current word @param item current line item being processed @return updated line builder after processing the item
1076 Converts a date string to a Calendar object. @param text date string in specific format @return Calendar object or null if conversion fails
1077 Begins marked content with a specified tag. @param tag COSName representing the tag for marking content @throws IOException if an I/O error occurs during writing
1078 Begins marked content in PDF with a tag and MCID. @param tag the content tag @param mcid the mark identifier, must be non-negative @throws IOException if an I/O error occurs
1079 Sets a marked content point with a given tag. @param tag COSName representing the content tag @throws IOException if an I/O error occurs
1080 Writes a COSString to an OutputStream. @param string the COSString to write @param output the OutputStream to write to @throws IOException if an I/O error occurs
1081 Writes byte array to OutputStream. @param bytes data to write @param output destination stream @throws IOException if an I/O error occurs
