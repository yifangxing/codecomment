1 Initializes an empty OperatorName instance.
2 Initializes an OperatorProcessor instance with the given PDFStreamEngine context. @param context the parent engine context
3 Initializes a new COSBase instance.
4 Initializes the COSUpdateState with provided COSUpdateInfo. @param updateInfo COSUpdateInfo object containing update details
5 Initializes DecodeOptions instance with default settings.
6 Initializes DecodeOptions with a specified source region. @param sourceRegion rectangle defining the source area
7 Initializes decoder options with uniform subsampling. @param subsampling X and Y subsampling factor (same value used for both)
8 Initializes a new instance of the Filter class.
9 Initializes PageExtractor with a PDDocument and page range. @param sourceDocument the document to extract pages from @param startPage starting page index (inclusive) @param endPage ending page index (inclusive)
10 Initializes an AbstractXReference instance with specified XReferenceType. @param type XReferenceType enumeration value
11 Initializes ContentStreamWriter with an output stream. @param out target output stream to write content to.
12 Initializes cache creation with stability flag. @param enableStableCache true to enable stable caching, false otherwise
13 Creates PDDocumentCatalog instance from given PDDocument and root dictionary. @param doc target PDDocument @param rootDictionary root dictionary of the catalog
14 Initializes a new instance of PDDocumentInformation from a COSDictionary object. @param dic the dictionary containing document information.
15 Initializes name destination dictionary from COS dictionary. @param dict COS dictionary containing name information
16 Initializes PDDocumentNameDictionary object with document catalog and name dictionary. @param cat PDDocumentCatalog instance @param names COSDictionary containing user names
17 Initializes a new PDF page from the provided COS dictionary. @param pageDictionary COS dictionary containing page metadata.
18 Initializes a new PDPage instance from a COS dictionary and resource cache. @param pageDictionary COS dictionary representing the page @param resourceCache shared cache for resources used by the page
19 Initializes a new instance of PDDictionaryWrapper with the given COS dictionary. @param dictionary the underlying dictionary to be wrapped.
20 Initializes a new PDNameTreeNode from a COSDictionary. @param dict COSDictionary object to initialize with
21 Initializes a new PDPageLabelRange instance from a COSDictionary. @param dict COS dictionary containing label range data
22 Initializes a new PDRange instance from an existing COSArray range. @param range COSArray containing range data
23 Initializes a new PDRange instance from a given COSArray and index. @param range COSArray containing range data @param index starting index within the range array
24 Initializes a new PDStream instance from an existing COSStream. @param str input COSStream to wrap
25 Initializes PDMarkInfo with COSDictionary data. @param dic COSDictionary containing mark info
26 Initializes a new instance of PDMarkedContentReference from a COSDictionary. @param dictionary COSDictionary containing reference data
27 Initializes a new PDObjectReference instance from the given COSDictionary. @param theDictionary COS dictionary containing object reference data
28 Initializes a new PDStructureNode instance from a given COSDictionary. @param dictionary COSDictionary containing node data
29 Initializes a new instance of the Revisions class.
30 Initializes a new instance of PDPropertyList from a COS dictionary. @param dict underlying COS dictionary
31 Initializes a new instance of PDBoxStyle with the given COS dictionary. @param dic COS dictionary representing the box style
32 Initializes access permissions with default settings.
33 Initializes an instance with specified access permissions. @param permissions integer representation of permissions
34 Initializes the PDCryptFilterDictionary instance with the given COS dictionary. @param d the COS dictionary to initialize from
35 Initializes RC4 cipher with 256-byte salt array.
36 Initializes an FDFAnnotation instance from a COS dictionary. @param a COSDictionary containing annotation data
37 Initializes an FDFCatalog instance from a COS dictionary. @param cat the COS dictionary representing the FDF catalog
38 Initializes an instance of FDFDictionary from a COSDictionary object. @param fdfDictionary COSDictionary representation of FDF data
39 Initializes an FDFField object with the provided COSDictionary. @param f COSDictionary containing field data
40 Initializes FDFIconFit with COSDictionary. @param f COSDictionary object containing icon data
41 Initializes an instance of FDFJavaScript with a given JavaScript COS dictionary. @param javaScript COS dictionary containing JavaScript script data
42 Initializes an FDFNamedPageReference object from a COS dictionary. @param r COS dictionary containing reference data
43 Initializes FDFOptionElement with COSArray data. @param o COSArray containing option data
44 Constructs an FDFPage instance from a COSDictionary. @param p COSDictionary representing the PDF page
45 Initializes an instance of FDFPageInfo from a COSDictionary object. @param p COSDictionary containing page information
46 Initializes an FDFTemplate instance from a COS dictionary. @param t COS dictionary containing template data
47 Initializes a new instance of PDFontDescriptor with a given COS dictionary. @param desc COS dictionary containing font descriptor information
48 Initializes a PDFontSetting instance from a COSArray. @param fs COSArray containing font setting data
49 Initializes an empty line dash pattern with default phase.
50 Initializes a PDF color object with specified pattern name and color space. @param patternName unique identifier of the color pattern @param colorSpace color profile to be used for the color
51 Initializes the device N-attributes with the provided COS dictionary. @param attributes COS dictionary containing device N-attributes information
52 Initializes a new PDDeviceNProcess instance from a COSDictionary of attributes.
53 Initializes a PDGamma object from a COSArray. @param array COSArray containing gamma data
54 Initializes a new instance of PDTristimulus from an array of color values. @param array COSArray containing tristimulus data
55 Initializes PDTransparencyGroupAttributes with COSDictionary. @param dic COSDictionary object containing transparency group attributes
56 Initializes Optional Content Properties from COSDictionary. @param props COS dictionary containing properties.
57 Initializes a new instance of the abstract pattern with the provided COS dictionary. @param dictionary COS dictionary containing pattern data
58 Initializes a new instance of PDShading from a COSDictionary. @param shadingDictionary COSDictionary containing shading data
59 Constructs a PDExtendedGraphicsState object from a COSDictionary and ResourceCache. @param dictionary COSDictionary containing graphics state information @param resourceCache ResourceCache for caching resources
60 Initializes a new instance of PDSoftMask with the given PDF dictionary and resource cache. @param dictionary COSDictionary containing mask data @param resourceCache ResourceCache for accessing shared resources
61 Initializes a new paragraph with given text content. @param text input text to be displayed in this paragraph.
62 Initializes a new Word object with given text content. @param text word text to be stored
63 Initializes a new PDAction object with the specified dictionary. @param a COSDictionary containing action data
64 Constructs a utility instance of PDActionFactory.
65 Initializes PDAdditionalActions with a COSDictionary. @param a input COS dictionary containing additional actions data
66 Initializes PDAnnotationAdditionalActions with a dictionary of additional actions. @param a COSDictionary containing annotation actions
67 Initializes catalog additional actions with provided dictionary. @param a COSDictionary containing additional action data
68 Initializes an instance of PDFormFieldAdditionalActions from a COS dictionary. @param a COS dictionary containing additional form field actions.
69 Initializes additional page actions from a COS dictionary. @param a COS dictionary containing action data
70 Initializes a new instance of PDTargetDirectory with the provided COS dictionary. @param dictionary COS dictionary containing target directory data.
71 Initializes a new instance of PDURIDictionary from a COSDictionary. @param dictionary COSDictionary object containing URI data
72 Initializes PDWindowsLaunchParams with a COS dictionary. @param p COSDictionary containing launch parameters
73 Initializes PDAppearanceCharacteristicsDictionary object with COS dictionary. @param dict COSDictionary instance containing appearance characteristics data
74 Initializes PDAppearanceDictionary with a COSDictionary object. @param dictionary COSDictionary containing appearance data
75 Constructs a PDAppearanceEntry instance from a COSDictionary object. @param entry COS dictionary containing appearance data
76 Initializes the border effect dictionary with the provided Cos dictionary. @param dict COS dictionary containing border effect data
77 Initializes PDBorderStyleDictionary with provided COSDictionary. @param dict COSDictionary object to be used as backing store
78 Initializes an external data dictionary with a COS dictionary. @param dictionary COS dictionary to initialize from
79 Initializes a CloudyBorder with given parameters. @param stream ContentStream to draw on @param intensity Border opacity (0.0 - 1.0) @param lineWidth Border width @param rect Bounding box for the border
80 Initializes a new PDPropBuild object from a COSDictionary. @param dict COSDictionary instance containing property build data
81 Initializes PDPropBuildDataDict with a COSDictionary. @param dict COSDictionary instance to initialize from.
82 Initializes PDSeedValue object from COSDictionary. @param dict COSDictionary containing seed value data
83 Initializes an instance of PDSeedValueCertificate from a COS dictionary. @param dict COS dictionary containing certificate data
84 Initializes MDP (Multidimensional Presentation) seed value from COS dictionary. @param dict COS dictionary containing seed value data
85 Initializes PDSeedValueTimeStamp with COSDictionary. @param dict input dictionary to populate object
86 Constructs a new PDSignature instance from a given COSDictionary. @param dict the COSDictionary containing signature data
87 Initializes new SignatureOptions instance with default page number.
88 Initializes PDFTemplateCreator with a PDFTemplateBuilder instance. @param templateBuilder builder used to create PDF templates
89 Default constructor. Initializes internal state.
90 Initializes a new PDF form field object with the given AcroForm, COS dictionary and parent field.
91 Initializes a new instance of PDXFAResource with the given XFA base. @param xfaBase COSBase object representing the XFA resource.
92 Initializes a new instance of PDMeasureDictionary from an existing COSDictionary. @param dictionary COSDictionary containing measurement data
93 Constructs a PDNumberFormatDictionary instance from a COSDictionary. @param dictionary input COSDictionary to initialize the instance
94 Constructs a PDViewportDictionary instance from a COSDictionary object. @param dictionary COSDictionary containing viewport data
95 Initializes a new PDThread instance from a COSDictionary representation. @param t COSDictionary containing thread data
96 Constructs a PDThreadBead object from a given COSDictionary. @param b COS dictionary containing thread bead data
97 Initializes viewer preferences from a given dictionary. @param dic COSDictionary object containing viewer preference settings
98 Initializes PageDrawerParameters object with provided settings. @param renderer PDFRenderer instance @param page PDPage to be rendered @param subsamplingAllowed flag for subsampling support
99 Initializes an empty LineItem with no text position.
100 Initializes a default Matrix with a 3x3 affine transformation matrix.
101 Initializes Matrix with a 1D array of floats. @param src 1D array containing matrix data
102 Initializes a Matrix with the given coefficients. @param a, b, c, d, e, f matrix coefficients
103 Initializes an empty instance of XMLUtil.
104 Initializes a new instance of PDFStreamEngine.
105 Adds an operator processor to the internal registry. @param op OperatorProcessor instance to register
106 Sets the character terminator within a specified range. @param term valid character (118-126, excluding 'z')
107 Sets the number of pages to split content at. @param split positive integer indicating page count
108 Sets the start page number, validating it's greater than zero. @param start the desired start page number
109 Sets the end page number. @param end valid non-zero integer end page value
110 Configures whether to perform lenient parsing. @param lenient true for lenient, false otherwise
111 Initializes CompressParameters with object stream size. @param objectStreamSize positive integer representing the stream size
112 Sets the graphics blending mode. @param blendMode valid BlendMode enumeration value
113 Initializes a PDFieldTree from an existing PDAcroForm. @param acroForm root PDAcroForm to create tree from
114 Returns the length of the COS stream. @throws IllegalStateException if an OutputStream is associated with this COSStream
115 Initializes an empty list to store source PDF files.
116 Initializes a new COSWriterObjectStream instance with the provided compression pool. @param compressionPool Compression pool to be used by the stream writer
117 Initializes text clipping buffer to hold individual clipping areas.
118 Adds a file to the collection of sources. @param source File object representing the new source
119 Adds a new RandomAccessRead source to the collection. @param source the source object to be added
120 Adds a user instruction to the list. @param name user-provided instruction text
121 Adds an InstructionSequence to the collection of instructions. @param child InstructionSequence object to be added
122 Adds a new recipient to the list. @param recipient PublicKeyRecipient object to be added
123 Adds a new region with specified name and bounding rectangle. @param regionName unique identifier for the region @param rect bounding rectangle of the region
124 Sets the trailer for the current cross reference object. @param trailer COSDictionary representing the trailer data
125 Retrieves an object from the key pool by its unique identifier. @param key unique identifier of the object to fetch
126 Retrieves an Operator instance by name. @param operatorName unique identifier of the Operator
127 Retrieves the name of a Unicode character from its sequence. @param unicodeSequence unique Unicode sequence identifier @return character name as string, or ".notdef" if not found
128 Retrieves the current graphics state from the stack. @return GraphicsState object at top of the stack
129 Removes the current graphics state from the stack and restores the previous one. @throws StackEmptyException if stack is empty
130 Returns the number of elements in the graphics stack. @return size of graphics stack
131 Applies matrix transformation to point coordinates. @param x x-coordinate of the point @param y y-coordinate of the point @return transformed point coordinates as Point2D.Float object
132 Decreases the current level by one and logs an error if it becomes negative.
133 Adds an integer to the collection of instructions. @param value the integer to be added
134 Verifies COSStream is not closed before attempting to read from it. @throws IOException if COSStream has been closed
135 Throws an IOException when attempting to reset. @throws IOException always, as reset is unsupported
136 Throws an IOException when attempting to reset.
137 Retrieves PDEncryption object associated with parsed document. @throws IOException if document has not been parsed
138 Retrieves access permission for parsed document. @throws IOException if document has not been parsed
139 Constructs an InvalidPasswordException with specified error message. @param message detailed description of invalid password reason
140 Constructs an Operator object from a given string. @param aOperator operator string (must not start with '/')
141 Returns a string representation of this PDFOperator instance. @return formatted string containing the operator's name
142 Returns a string representation of this COS array. @return human-readable string describing the array contents.
143 Returns a string representation of the COSObject instance. The string format is "{key}" where key is obtained from getKey().
144 Retrieves a filter by name, throwing an exception if not found. @param filterName unique filter identifier
145 Adds real value to the collection of instructions. @param value numeric instruction value
146 Sets the visible sign designer's width. @param width new image width @return This PDVisibleSignDesigner instance for chaining
147 Sets image height and updates formatter rectangle parameters. @param height new image height value @return PDVisibleSignDesigner instance for method chaining
148 Calculates the distance between two points. @param ps starting point @param pe ending point @return Euclidean distance or 0 if identical points
149 Calculates the value of the edge equation for a given point. @param p the point to evaluate @param p1 one endpoint of the edge @param p2 the other endpoint of the edge @return the value of the edge equation at point p
150 Initializes PDMarkedContent with a given XML tag and properties. @param tag XML tag name (null for default) @param properties dictionary of content properties
151 Retrieves the name of the pattern type. @return Pattern name as string
152 Retrieves the type of shading. @return string representation of the shading type
153 Retrieves the default value from inheritable attributes. @return default value as a string, or empty string if not found.
154 Unchecks the current attribute value.
155 Checks if the white point coordinates are at (1, 1, 1).
156 Generates color table based on axially shaded function. @return Array of RGB values representing the color table
157 Calculates a color table based on the given factor and shading type. @return array of RGB values representing the color table
158 Creates and returns a list of byte arrays representing the initial code table.
159 Retrieves an object from the collection at the specified index. @param index position of the desired object in the collection
160 Returns an element at the specified index. @param index position of the desired element in the collection
161 Returns the number of elements in the collection. @return size of the collection
162 Returns the number of elements in the collection.
163 Returns the total number of recipients. @return size of recipient collection
164 Checks whether the collection is empty. @return true if the collection contains no elements, false otherwise
165 Checks if this collection is empty. @return true if collection has no elements, false otherwise
166 Removes a PublicKeyRecipient from the collection. @param recipient PublicKeyRecipient to be removed @return true if recipient was found and removed, false otherwise
167 Returns an iterator over the collection of COSBase objects. @return Iterator object containing all COSBase elements in this container.
168 Returns an iterator over this collection's elements. @return Iterator instance wrapping the underlying collection's iterator
169 Returns an iterator over the list of public key recipients. @return Iterator over PublicKeyRecipient objects
170 Converts collection of COSBase objects to list. @return List of COSBase objects
171 Converts COSName objects to a list of name strings.
172 Converts COSString objects to a list of strings.
173 Wraps a primitive boolean in a COSBoolean object and calls the overloaded function. @param value the boolean value to wrap
174 Returns a string representation of this object's value.
175 Writes a PDF indicator (TRUE or FALSE) to the specified output stream. @param output OutputStream to write to
176 Writes PDF NULL bytes to the specified output stream. @param output OutputStream to write the PDF data to
177 Writes specified byte array to output stream. @param data byte array to be written
178 Returns a set of key-value pairs (COSName, COSBase) representing item metadata.
179 Checks if entry has changed between old and new versions. @param oldEntry previous entry object @param newEntry current entry object @return true if change detected, false otherwise
180 Returns the number of items in the collection.
181 Retrieves an item from the internal collection by its unique key. @param key unique identifier of the item to retrieve
182 Returns a set of COS names (keys).
183 Returns a collection of COSBase objects. @return Collection of COSBase objects or empty if none present
184 Adds all entries from the specified dictionary to this collection.
185 Checks if a COSName key exists in the collection. @param name the key to check
186 Tokenizes input string into array on spaces. @param s input string @return array of tokenized strings or null if invalid input
187 Converts string representation to integer value. @param token input string to parse @return parsed integer value or throws NumberFormatException if invalid
188 Returns a string representation of this object as 'FunctionType' followed by its type.
189 Sets the encryption key length to one of the supported values: 40, 128, or 256. @param l valid key length (40, 128, or 256)
190 Sets the start page value to a valid 1-based index. @param startPageValue the new start page value (must be > 0)
191 Sets the end page value. @param endPageValue 1-based page identifier (must be greater than 0)
192 Initializes BruteForceParser with COS document and parser. @param cosDocument COS document to parse @param cosParser COS parser to use for parsing
193 Initializes an empty XrefTrailer object with default table type. @param none
194 Resolves the trailer object at a given byte position.
195 Initializes a PDResources object from the provided COS dictionary. @param resourceDictionary COS dictionary containing resource data
196 Initializes PDResources object with provided dictionary and cache. @param resourceDictionary COSDictionary containing PDF resources @param resourceCache ResourceCache for storing cached resources
197 Initializes a map of built-in mathematical and logical operators.
198 Initializes an AcroForm from a PDF document and COS dictionary. @param doc PDF document to associate with @param form COS dictionary containing AcroForm data
199 Returns the count of trailer entries in the byte position to XREF map.
200 Retrieves an object from the pool using its unique key. @param key unique identifier for the COSObject in the pool @return the associated COSObject instance or null if not found
201 Converts string token to a floating-point number. @param token input string representation of a real value @return parsed float value or throws NumberFormatException if invalid
202 Coerces a float value by returning MAX_VALUE for infinity and -MAX_VALUE for minus infinity, or 0 for values smaller than the smallest representable float.
203 Calculates the text orientation (direction) based on the transformation matrix. @return Orientation in degrees (0-360)
204 Checks if this COSFloat object is equal to another object. @param o the other object to compare with @return true if both objects have the same value, false otherwise
205 Computes the hash code based on the 'value' field. @return The hash code value as an integer.
206 Formats the numeric value into a human-readable string. @return formatted string representation of the value or null if not initialized
207 Writes "null" to the output stream followed by a space. @param output OutputStream to write to
208 Initializes COSIncrement with origin update information. @param incrementOrigin COSUpdateInfo object containing origin details
209 Initializes a new instance of the utility class with a destination PDDocument.
210 Initializes the cache with stability enabled flag. @param enableStableCache true to enable stable caching, false otherwise
211 Checks if the object's update state indicates it needs to be updated. @return true if the object requires an update, false otherwise
212 Checks if the given COSBase object is present in the collection. @param base COSBase instance to search for @return true if found, false otherwise
213 Checks if COSBase instance is excluded from processing. @param base COSBase object to check
214 Adds a COSBase object to the collection. @param object COSBase instance to be added
215 Adds a COSObject to the processed objects list if it's not null. @param base COSObject instance to be added
216 Registers TrueType font to close when application exits. @param ttf TrueTypeFont object to be closed
217 Initializes ASCII85 stream decoder with input stream.
218 Initializes CCITT fax decoder stream. @param stream input stream to read from @param columns number of columns in the image @param type compression type (CCITT T4, T6, or modified Huffman RLE) @param options encoding options (bit-aligned, 2D encoding, fill bits, uncompressed) @param byteAligned whether data is bit-aligned
219 Checks for equality with another object. @param o Object to compare, must be a COSInteger instance
220 Returns a string representation of this COSInt object. @return string in format "COSInt{value}"
221 Writes user value as ISO-8859-1 encoded PDF content to the specified output stream. @param output target output stream for writing PDF data
222 Retrieves value associated with specified key. @param key unique identifier or lookup key @return Value object or null if not found
223 Retrieves the mapped font name from the aliases table. @param fontName original font name @return Mapped font name or null if not found
224 Retrieves selected export values based on the current field value. @return List of String values or empty list if no selection is made
225 Checks if the name field is empty. @return true if name is empty, false otherwise
226 Writes user-provided comment to output stream, enforcing ASCII-only content. @param comment string to be written (must not contain newlines)
227 Writes a newline character to the output stream.
228 Converts input string to UTF-16BE encoded char array. @param text input string @return char array representing the string in UTF-16BE encoding
229 Retrieves the underlying COS object. @return COSBase object or null if not dereferenced
230 Constructs a COSObjectKey with specified object number, generation, and stream index. @param num non-negative object number @param gen non-negative generation number @param index stream index value
231 Computes hash code based on numberAndGeneration field value.
232 Calculates the absolute value of the X scaling factor. @return absolute scaling factor value
233 Calculates the scaling factor for Y-axis based on input values. @return scaling factor as a float value
234 Initializes ASCII85OutputStream with the specified OutputStream. @param out target output stream for encoded data
235 Constructs a COSStandardOutputStream instance with the specified output stream. @param out the underlying output stream to write to.
236 Initializes COSStandardOutputStream with given OutputStream and file position. @param out OutputStream to write to @param position initial file position in bytes
237 Returns a copy of the internal byte array. @return A new byte array containing all elements from the original.
238 Writes an incremental PDF update to a file. @throws IOException if I/O operation fails
239 Returns ASCII representation of bytes as a string. @return ASCII-encoded string or null if failed
240 Checks whether the originating document is accepting updates. @return true if the original document allows updates, false otherwise
241 Converts binary array to a human-readable string. @param bytes input byte array @return String representation or '?' if byte value is unknown
242 Reads an operator string from the input stream. @throws IOException if a read error occurs
243 Converts a string to a byte array using Unicode code point values. @param text input string @return byte array representation of the string or null if invalid input
244 Checks if a given Unicode character exists in the mapping. @param character the Unicode character to check @return true if found, false otherwise
245 Checks if map contains specified key. @param key object to search in map @return true if key exists, false otherwise
246 Checks if font name alias exists in dictionary. @param fontName unique font identifier
247 Returns an unmodifiable map mapping code integers to their corresponding names.
248 Returns an unmodifiable map mapping names to unique codes.
249 Disables updating of existing data by throwing an exception. @throws UnsupportedOperationException always
250 Reads the next byte from an Ascii85 encoded stream. @throws IOException if end of file or invalid data is encountered
251 Closes the file resource and releases associated memory.
252 Writes a single byte to the output stream, potentially triggering ASCII85 transformation and newline writes. @throws IOException if write operation fails
253 Flushes output, writing ASCII85 encoded data and terminator.
254 Pads or truncates input byte array to fixed length. @param password input byte array @return padded byte array of fixed length
255 Closes resources and logs a warning if endText() was not called in text mode.
256 Writes XMP metadata to an output stream. @param xmp XMP metadata as a byte array
257 Determines if page split should occur at specified page number. @param pageNumber current page index
258 Disables modification of this instance's source region. @throws UnsupportedOperationException always thrown.
259 Disables setting subsampling X due to immutable instance restriction.
260 Sets subsampling in Y-axis; operation is unsupported and always throws exception.
261 Disables modification of subsampling offset X. @throws UnsupportedOperationException always, as this instance is immutable.
262 Disables modification of subsampling offset Y.
263 Throws unsupported exception since JPX encoding is not implemented.
264 Throws UnsupportedOperation exception as this class is immutable.
265 Throws an exception when attempting to modify UpperRightX coordinate. This class is immutable and does not allow modifications.
266 Throws an exception when attempting to modify lower left y-coordinate. This property is immutable and cannot be changed.
267 Disallows modification of lower left X coordinate. @throws UnsupportedOperationException always
268 Returns the text content of the signature. @return the signature text or null if not available
269 Returns a PDVisibleSignDesigner instance with custom text. @param signatureText user-provided sign designer text
270 Disables string-based value setting; use setValue(PDSignature value) instead. @throws UnsupportedOperationException always thrown.
271 Returns the current compression level for Deflater. @return Compression level between -1 and BEST_COMPRESSION
272 Checks whether this collection actually contains the specified element. @param o the object to search for @return true if the object is found, false otherwise
273 Initializes FlateFilterDecoderStream with input stream and skips Zlib header.
274 Closes underlying resources and releases this context. @throws IOException if an I/O error occurs during closing
275 Sets the image to be processed and updates dimension parameters. @param image BufferedImage object to process
276 Applies predictor row to the given byte array. @param predictor prediction method code @param colors number of color components per pixel @param bitsPerComponent bits per color component @param columns number of pixels in a row @param actline current line bytes @param lastline previous line bytes
277 Checks if a COSObjectKey is present in the key pool. @param key unique object identifier to search for
278 Checks if a given name exists in the inverted index. @param name unique identifier to search for @return true if found, false otherwise
279 Checks if a given product code exists in the code-to-name mapping. @param code unique product identifier @return true if code found, false otherwise
280 Escapes special XML characters in the input string. @param input String to be processed @return Escaped XML string
281 Sets the bounding box for this object. @param bbox PDRectangle object or null to clear existing bbox
282 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null on error
283 Closes resources and throws the first encountered IOException. @throws IOException if an error occurs during closing
284 Closes the document and associated resources. @throws IOException if an error occurs during closure
285 Returns a COS object, either the underlying function stream or dictionary.
286 Initializes PDXObject with subtype and COS object from the given PDStream. @param stream PDStream containing COS object @param subtype subtype name as a COSName object
287 Returns the COS object associated with this stream. @return COS object or null if not available
288 Retrieves a COS stream containing metadata.
289 Sets metadata for the COSStream object. @param metadata stream containing metadata to be attached
290 Compares this PDAnnotation object with another Object for equality. @param o the object to compare with @return true if objects are equal, false otherwise
291 Returns a set of keys from the underlying map. @return Set of K keys
292 Returns a collection view of the actual values. @return Collection of V objects representing actual values
293 Initializes parser with a source PDF document. @param pdfSource RandomAccessRead object containing the PDF data
294 Checks if the next character in the input stream is a digit. @throws IOException if an I/O error occurs while reading from source
295 Adds or updates an XRef entry with the specified key and offset. @param objKey COSObjectKey representing the XRef entry @param offset long value representing the offset
296 Adds a new code-name mapping to the internal data structures. @param code unique identifier @param name descriptive name associated with the code
297 Checks if the next character in the source stream is whitespace. @throws IOException if an I/O error occurs during peeking
298 Determines whether to skip a line break. @param linebreak character code of the line break @return true if line break is CR or LF, false otherwise
299 Checks for end of input string. @param bracesParameter initial parameter value, updated if necessary @return 0 if end of string found, otherwise the original parameter value
300 Checks if given character is an End-Of-Line marker. @param c character to check @return true if LF or CR, false otherwise
301 Reads a string number from the input stream. @return StringBuilder containing the read number or null if EOF
302 Decodes the provided byte array stream into a UTF-8 encoded string. @param buffer ByteArrayOutputStream containing encoded bytes
303 Verifies the next character in the input stream matches an expected value. @param ec expected character
304 Checks if next character in input stream is whitespace.
305 Parses and returns the start XREF value. @return The byte offset of the first object referenced by the xref or null if not found.
306 Searches for the last EOF marker in the PDF stream. @return The position of the last EOF marker, or Long.MAX_VALUE if not found
307 Searches PDF for Xref table offsets. @return List of Xref table offsets or empty list if not found
308 Retrieves the number of color components based on function or color space type. @return The number of color components (1 if function is valid, otherwise from color space)
309 Searches for XRef streams in the PDF and returns their offsets. @return List of stream offsets or empty list if not found
310 Retrieves cross-reference table from trailer resolver. @return map of object keys to timestamps or null if not available
311 Calculates the offset of the startxref preceding EOF. @throws IOException if unable to read or find markers
312 Reads input stream until encountering the 'endstream' keyword. @param out EndstreamFilterStream to write content to @return length of filtered content
313 Initializes writer mode to Unicode.
314 Stores a page label range at the specified start page. @param startPage non-negative page number @param item PDPageLabelRange object to store
315 Adds a Unicode mapping for the given CID and text. @param cid unique identifier within 0 to FFFF range @param text non-empty string to map to CID
316 Checks if the input stream has binary data after reading a PDF header. @return true if no binary data is detected, false otherwise
317 Checks for space or return character in input buffer. @return true if space or return character found, false otherwise
318 Adds a new reference entry to the collection. @param entry XReferenceEntry object with referenced key
319 Calculates the minimum number of bytes required to display each column. @return array of integers representing min bytes for each column
320 Updates the highest XRef object number pool. @param highestXRefObjectNumber new maximum object reference ID
321 Retrieves the first trailer from the dictionary, or null if empty.
322 Returns the last trailer dictionary in the COSDictionary map. @return LastTrailer object or null if map is empty
323 Retrieves object numbers contained in the given object. @param objstmObjNr object identifier @return set of object numbers or null if trailer is not resolved
324 Retrieves the first numeric value from the type's attribute.
325 Returns the generation value of the referenced key.
326 Returns a human-readable representation of this FreeReference object.
327 Returns value from second column. @return Offset in bytes or 0 if not available
328 Retrieves the generation value from the referenced key. @return Generation value as a long integer
329 Returns a human-readable string representation of the object.
330 Retrieves the value from the second column. @return Number value of the parent key.
331 Returns the value of the third column in the stream. @return long value representing the column's index
332 Returns a human-readable string representation of this ObjectStreamEntry. @return formatted string with key, type, object stream index, and parent
333 Writes bytes to output stream with specified offset and length. @param b byte array to write @param off starting offset in the array @param len number of bytes to write
334 Writes a single byte to the output stream. @param b the byte to be written. @throws IOException if an I/O error occurs while writing.
335 Writes end-of-line character only if not already on a new line.
336 Checks whether compression is enabled based on configuration. @return true if compression is enabled, false otherwise
337 Adds an XReferenceEntry to the collection of existing entries. @param entry XReferenceEntry object to be added
338 Writes an object reference to the given OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing ID and generation of referenced object
339 Retrieves MD5 message digest instance.
340 Retrieves a SHA-1 message digest instance.
341 Retrieves a SHA-256 MessageDigest instance. @return MessageDigest object for SHA-256 hashing
342 Retrieves the highest XRef object number from the object pool.
343 Returns an unmodifiable list of prepared keys. @return List of COSObjectKey objects
344 Updates the reverse mapping for a given user ID and name. @param code unique user identifier @param name user profile name
345 Removes a region by name from storage. @param regionName unique identifier of the region to be removed
346 Sets maximum decimal places for formatting. @param fractionDigitsNumber the desired number of decimal places
347 Initializes a content stream for the given document and output stream. @param document PDDocument instance to associate with the stream @param outputStream OutputStream to write content to @param resources PDResources instance providing additional data
348 Retrieves the Y-component of the vertical displacement vector for a given code. @param code unique identifier @return Float value representing the Y-displacement or default value if not found
349 Returns value from standardValue unless it's null, then returns defaultValue. @param standardValue nullable Float to return if not null @param defaultValue fallback float value to return when standardValue is null
350 Zooms the sign designer by specified percentage. @param percent zoom factor (e.g. 50 for 50%)
351 Retrieves the width of an image. @return The actual width of the image in pixels.
352 Retrieves the height of an image. @return Image height as a floating-point value.
353 Adjusts the PDVisibleSignDesigner for rotation (90, 180, or 270 degrees). @return This object with updated transformations
354 Creates an AffineTransform object from predefined single matrix values. @return AffineTransform object representing a 2D geometric transformation
355 Encodes input string into a byte array using multi-byte encoding. @param text the input string to encode @return encoded byte array or throws IOException if an error occurs
356 Converts Unicode code point to its corresponding name. @param codePoint integer representation of a single Unicode character
357 Applies GSUB rules to a word and encodes the transformed glyph IDs. @param gsubWorker worker applying the transforms @param out output stream for encoded glyph IDs @param font PDType0Font instance @param word input string with code points @return list of glyph IDs after transformation
358 Initializes a new PDDocument instance from the provided COSDocument and input streams. @param doc COSDocument containing PDF metadata @param source RandomAccessRead stream for reading PDF data @param permission AccessPermission object controlling document access rights
359 Initializes an FDFDocument object with the given COSDocument and input stream. @param doc COSDocument instance @param source input stream for reading FDF data
360 Returns array representation of collection. @return Array containing all elements in this collection.
361 Returns index of specified element in this collection. @param o object to search for
362 Compares this object with the given object based on its internal state. @param o the object to compare with @return true if both objects have the same internal state, false otherwise
363 Returns hash code of the underlying actual object. @return hash code as an integer
364 Returns index of last occurrence of specified element in this list. @param o element to search for
365 Returns a ListIterator instance for traversing this collection. @return iterator over the elements in this collection
366 Returns a list iterator starting at the specified index. @param index index in the underlying list to start iteration from
367 Returns a sublist of elements from the current list within specified range. @param fromIndex starting index (inclusive) of the sublist @param toIndex ending index (exclusive) of the sublist
368 Checks if a specific value exists in the map of actual values. @param value the value to search for
369 Returns an unmodifiable Set of key-value pairs in this map.
370 Returns an unmodifiable set of alias names.
371 Returns a string representation of the actuals. @return Formatted string containing actual values
372 Converts COSBase object to PD object of specified type. @param base COSBase object to convert
373 Generates a string of repeating letter labels based on the input number. @param num input number to determine label length and repetition @return concatenated string of letter labels or null if invalid input
374 Returns total number of page ranges.
375 Retrieves page label range from collection by given start page number. @param startPage starting page number (1-based index) @return PageLabelRange object associated with the start page or null if not found
376 Returns a set of page indices as unique integer keys.
377 Retrieves a copy of the dash array. @return cloned float array representing the dash style
378 Initializes a PDColor object with specified components and color space. @param components array of color components (e.g. RGB or CMYK values) @param colorSpace reference to a PDColorSpace object
379 Copies the color components array, considering the colorspace's component count. @return float[] with updated length if necessary
380 Initializes a CoordinateColorPair object with point and color data. @param p Point2D object representing coordinates @param c array of floating-point values for the color
381 Returns a string representation of FunctionType2, including C0, C1, and N values.
382 Calculates the minimum and maximum X and Y coordinates of a polygon. @return int[] array containing minX, maxX, minY, maxY
383 Removes and returns the top number from the stack. @return Number object or null if stack is empty
384 Removes and returns an integer from the top of the stack. @return the popped integer value
385 Retrieves and returns the real (floating-point) value from the top of the stack. @return real value as a float or throws exception if not available
386 Adds a boolean value to the instruction list. @param value boolean value to be added
387 Initializes ExecutionContext with an operator set. @param operatorSet collection of available operators
388 Retrieves a list of compiled patterns for list item expressions. @return List of Pattern objects or null if initialized
389 Converts an object array to a comma-separated string. @param array array of objects to convert
390 Converts a float array to a comma-separated string. @param array input float array @return formatted string representation of the array or null if empty
391 Adds given text at specified position to contents list. @param text Text object containing text and position information
392 Adds marked content to the collection. @param markedContent PDMarkedContent object to be added
393 Adds an XObject to the contents. @param xobject PDXObject instance to be added
394 Sets whether printing is allowed. @param allowPrinting true to enable or false to disable printing
395 Updates permission to modify based on input flag. @param allowModifications true to enable modification or false otherwise
396 Sets permission to extract content based on user input. @param allowExtraction true to enable or false to disable extraction
397 Enables or disables modification of annotations. @param allowAnnotationModification true to allow annotation modification, false otherwise
398 Sets whether user can fill in form. @param allowFillingInForm true to enable, false to disable
399 Sets whether accessibility extraction is allowed. @param allowExtraction true to enable, false to disable
400 Sets document assembly permission based on provided flag. @param allowAssembly true to enable or false to disable document assembly
401 Sets whether faithful print is allowed. @param canPrintFaithful true to allow, false otherwise
402 Checks if print permission bit is enabled. @return true if print permission is granted, false otherwise
403 Checks if modification permission bit is set. @return true if user can modify, false otherwise
404 Checks if content extraction permission is enabled. @return true if extract bit is set, false otherwise
405 Checks if annotation modification permission is enabled. @return true if user has permission to modify annotations, false otherwise
406 Checks if user has permission to fill in form. @return true if permission bit is set, false otherwise
407 Checks if the extract for accessibility permission bit is enabled. @return true if enabled, false otherwise
408 Checks if document assembly permission is enabled. @return true if permission is granted, false otherwise
409 Checks if faithful printing permission bit is enabled. @return true if enabled, false otherwise
410 Retrieves a private key from the keystore, either by iterating through aliases or using a specific alias. @throws KeyStoreException if the key cannot be retrieved or the keystore does not contain the given alias. @throws UnrecoverableKeyException if the private key is not recoverable. @throws NoSuchAlgorithmException if the necessary algorithm to recover the key is unavailable.
411 Retrieves a secure random number generator instance. @return a SecureRandom object, either a custom instance or the default one
412 Initializes the key using the provided byte array. @param key input key bytes
413 Writes a byte to the output stream with XOR encryption using a rotating salt array. @param aByte the byte to encrypt @param output the output stream to write the encrypted byte to
414 Combines diacritic characters in the input string. @param str input string to combine diacritics from
415 Checks if a Unicode code point is prohibited from use. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
416 Calculates the version number based on key length and AES preference. @return int representing the version number
417 Returns singleton instance of Bouncy Castle cryptographic provider.
418 Extracts text value from an XML Element. @param node the element to parse @return concatenated text values or empty string if none found
419 Writes string to output stream. @param text input string to be written
420 Retrieves a predefined CMap by name, falling back to parsing if not cached. @param cMapName unique name of the predefined CMap @return CMap object or null if parsing fails
421 Parses a CMap from the provided RandomAccessRead. @param randomAccessRead input data stream @return parsed CMap object or null if invalid
422 Returns a set of PostScript font names for the given name. @param postScriptName unique PostScript font identifier @return Set containing original and hyphen-less variant names
423 Calculates line points between two coordinates. @param x0 initial X coordinate @param y0 initial Y coordinate @param x1 end X coordinate @param y1 end Y coordinate @return Set of Point objects representing the line
424 Calculates the number of unique points in an array. @param p array of Point2D objects @return count of distinct points
425 Adds a font to the cache with its associated information. @param info FontInfo object containing font metadata @param font FontBoxFont object representing the font to add
426 Retrieves cached FontBoxFont instance based on provided FontInfo. @param info Font information object @return FontBoxFont object or null if not found in cache
427 Adds a string substitution rule to the cache. @param match regular expression pattern to match @param replace replacement string for matched patterns
428 Retrieves FontInfo by PostScript name and format. @param format FontFormat to match @param postScriptName unique font identifier (may be subset-adjusted) @return FontInfo object or null if not found matching the given format
429 Retrieves list of substitutes for given PostScript name. @param postScriptName unique identifier
430 Retrieves string representation of given code value. @param code unique identifier @return corresponding name or ".notdef" if not found
431 Retrieves the Type 2 character string for a given CID. @param cid unique identifier @return Type 2 char string or null if not available
432 Converts internal code to CID (Code Identifier). @param code internal code value @return corresponding CID value or -1 if invalid
433 Converts color components to a single RGB integer value. @return RGB integer or throws IOException on conversion failure
434 Calculates the blended color value for backdrop removal. @param groupRGB RGB value of the group @param backdropRGB RGB value of the backdrop @param shift bit shift to apply @param alphaFactor blending factor (0-1) @return blended color value (0-255)
435 Returns a subset of bytes starting from 'start' index with specified 'length'.
436 Retrieves Adobe glyph list. @return GlyphList instance containing Adobe glyphs
437 Extracts the "cmap" table from the TTF and initializes relevant subtables.
438 Checks whether TrueTypeFont embedding is permitted. @param ttf TrueTypeFont object to check
439 Checks if subsetting is permitted for the given TrueType font. @param ttf TrueTypeFont object to check
440 Converts a string to its Unicode representation. @param name input string @return the Unicode equivalent or null if not found
441 Constructs a PDColor object from the specified components, pattern name, and color space. @param components array of color components @param patternName COSName identifier for the pattern @param colorSpace PDColorSpace representing the color model
442 Creates a raw image from the given WritableRaster and ColorSpace. @param raster WritableRaster to create the image from @param awtColorSpace ColorSpace for the resulting image @return BufferedImage containing the raw image data
443 Converts WritableRaster to RGB BufferedImage using specified ColorSpace. @param raster input raster data @param colorSpace target color space @return RGB BufferedImage or null for tiny images (1x1)
444 Checks if the provided ICC profile is in sRGB color space. @param profile ICC profile to check @return true if the profile represents the sRGB color space, false otherwise
445 Determines the color space type based on the ICC profile or alternate settings. @return ColorSpace type (TYPE_GRAY, TYPE_RGB, TYPE_CMYK, etc.) or -1 for invalid configuration
446 Initializes PredictorEncoder with PDDocument and BufferedImage. @param document input PDF document @param image input image to encode
447 Resizes and interpolates an image to the specified dimensions. @param image original image @param width new width @param height new height @param type image format (e.g. TYPE_BYTE_GRAY, TYPE_INT_RGB) @param interpolate whether to perform interpolation (true) or not (false) @return resized image or null on error
448 Returns the underlying COS dictionary representation of this object. @return COSDictionary instance representing the object's internal structure
449 Sets patch corner color from provided 2D array. @param color 2D array of float values representing patch colors
450 Calculates and returns the intersected overall area of all clipping paths.
451 Initializes a new TextAttribute instance with the given name. @param name unique identifier for this text attribute.
452 Calculates hash code based on dictionary content. @return unique integer hash value
453 Returns an AffineTransform matrix for translating the bounding box. @return AffineTransform object representing translation by -bboxMinX and -bboxMinY
454 Computes parameters for a polygon segment based on intermediate and corner advances. @param advInterm intermediate advance @param advCorner corner advance @param k curvature factor @param r radius @param length polygon segment length @param array output array containing alpha and dx values @return number of intermediate curls in the current polygon segment or -1 if invalid input
455 Flattens an ellipse into a series of connected line segments. @param left ellipse's left x-coordinate @param bottom ellipse's bottom y-coordinate @param right ellipse's right x-coordinate @param top ellipse's top y-coordinate @return array of Point2D.Double objects representing the flattened ellipse
456 Checks if a GeneralPath represents a rectangular shape. @param path the input GeneralPath @return true if the path is rectangular, false otherwise
457 Returns the height of the current page's template.
458 Sets coordinates and returns designer instance. @param x horizontal coordinate @param y vertical coordinate @return PDVisibleSignDesigner instance for chaining calls
459 Applies an affine transformation to this designer. @param affineTransform transformation matrix @return This designer instance with updated transformation
460 Ensures a PDOutlineItem node has no siblings. @param node the item to validate
461 Returns an iterable sequence of child outline items. @return Iterable<PDOutlineItem> iterator over child items
462 Sets rendering hints for graphics context.
463 Adjusts a GeneralPath for clipping based on the current graphics transform. @param linePath path to adjust
464 Calculates optimal subsampling factor based on image size and transform determinant. @param pdImage input PDImage object @param at AffineTransform object @return integer subsampling factor (1-8)
465 Rounds input number up to nearest integer with 5 decimal places. @param num input number to be rounded up
466 Calculates the X rotation based on input rotation value. @param rotation angle of rotation in degrees @return X position or 0 if invalid rotation
467 Calculates Y-coordinate for lower-left rotation point based on given rotation angle. @param rotation rotation angle in degrees @return calculated Y-coordinate or 0 if invalid rotation angle provided
468 Calculates the width of a rotated rectangle. @param rotation angle in degrees (90 or 270 returns height, others return width)
469 Writes Unicode characters from the provided TextPosition to the output stream. @param text TextPosition containing Unicode code points to be written
470 Returns a string representation of this object using Unicode encoding.
471 Retrieves formatted text for a given region. @param regionName name of the region
472 Begins writing an article, specifying LTR (Left-To-Right) language direction. @param isLTR true to indicate Left-To-Right language, false otherwise
473 Writes article end content to output stream. @throws IOException if write operation fails
474 Writes line separator to output stream.
475 Writes the word separator to the output stream.
476 Writes start of a paragraph, resetting the paragraph flag. @throws IOException on write error
477 Writes the start of an HTML page to the output stream.
478 Writes page end content to output stream.
479 Reorders Unicode text based on bidi direction. @param word input text string @return reordered text with mirrored characters corrected
480 Parses BIDI file contents from input stream, populating mirroring character map. @param inputStream ASCII-encoded input stream containing BIDI file data
481 Determines if the Unicode string requires visual reversal. @return The original string or its reversed version if RTL characters are present
482 Processes a text position within the current region. @param text TextPosition object to process
483 Checks if a character is a diacritic. @return true if the character represents a diacritic, false otherwise
484 Updates Timezone ID based on offset and timezone. @param tz Timezone object to update
485 Converts a byte to its hexadecimal string representation. @param b input byte value
486 Converts a byte array to a hexadecimal string representation. @param bytes input byte array @return hex-encoded string or null (not applicable)
487 Converts a single byte to its hexadecimal representation as two bytes. @param b the input byte @return array of two bytes representing the high and low nibbles of b
488 Converts binary bytes to ASCII-formatted hexadecimal string. @param bytes binary byte array @return formatted byte array or null if invalid input
489 Writes a byte as two hexadecimal digits to the specified output stream. @param b single byte value @param output output stream to write to
490 Decodes a Base64-encoded string. @param base64Value encoded data as a string @return byte array representation of the decoded data
491 Initializes a Matrix instance from an AffineTransform. @param at the AffineTransform to convert
492 Applies linear transformation to the given 2D point. @param point Point2D object to transform
493 Formats a float value into an ASCII string with specified maximum fraction digits. @param value the float value to format @param maxFractionDigits maximum number of decimal places to display @param asciiBuffer buffer to store formatted result @return length of the resulting string or -1 on error
494 Retrieves the PDFBox library version from a properties file. @return String representation of the version or null on failure
495 Parses an XML document from the given InputStream. @param is input stream containing the XML data @param nsAware whether to make the parser namespace-aware @return Document object representing the parsed XML, or null if parsing fails
496 Searches for a value in the trie by traversing children based on bytes. @param bytes array of bytes to search @return T object or null if not found
497 Initializes a new instance of the COSBoolean class with the specified boolean value.
498 Initializes COSName with a given name. @param aName user-provided name to be stored
499 Creates and returns a singleton instance of COSNull.
500 Creates a COSString instance from byte array. @param bytes input byte data @param forceHex whether to force hexadecimal representation
501 Initializes COSDictionary with an internal COSUpdateState instance.
502 Initializes a COSObject with an underlying COSBase. @param object COSBase instance to wrap
503 Initializes a COSObject with the given object and parser. @param object COSBase object to initialize from @param parser ICOSParser instance for parsing
504 Initializes a COSObject instance with the given key and parser. @param key unique COS object identifier @param parser COS parsing engine instance
505 Initializes DecodeOptions with rectangle boundaries. @param x left X-coordinate @param y top Y-coordinate @param width image width @param height image height
506 Constructs a new FreeXReference object with given key and next free object. @param key COSObjectKey representing the referenced object @param nextFreeObject unique identifier of the next available object
507 Creates a new XReference for an Object Stream entry. @param objectStreamIndex index of the object stream @param key COSObjectKey for the referenced object @param object COSBase representing the referenced object @param parentKey COSObjectKey for the referencing object (if any)
508 Initializes the default resource cache creation implementation.
509 Initializes a PDTypedDictionaryWrapper instance from a COS Dictionary. @param dictionary input dictionary to wrap
510 Constructs a PDAttributeObject from a COSDictionary. @param dictionary input dictionary containing attribute data
511 Initializes PDUserProperty object with COSDictionary and PDUserAttributeObject. @param dictionary underlying PDF dictionary @param userAttributeObject attribute data for the property
512 Constructs a PDOutlineNode instance from a COSDictionary.
513 Initializes a new transition from the provided COS dictionary. @param dictionary COS dictionary containing transition data
514 Initializes an instance of PDDestinationNameTreeNode from a COS dictionary. @param dic COS dictionary containing node data
515 Initializes an Embedded Files Name Tree Node from a COS dictionary. @param dic COS dictionary containing node data
516 Constructs PD Javascript Name Tree Node from COS dictionary. @param dic COS dictionary containing node data
517 Constructs a new PDStructureElementNameTreeNode instance from the given COS dictionary.
518 Creates child node with given dictionary and value type. @param dic COSDictionary object
519 Constructs a new PDMetadata object from a COSStream input. @param str COSStream containing metadata data
520 Initializes PDObjectStream from a COSStream. @param str input stream containing PDF object data
521 Initializes an embedded file from a COS stream. @param str COS stream containing embedded file data
522 Initializes a PDFunction object from a COSBase representation. @param function COSBase instance to parse
523 Initializes a PDXObject from a COSStream with subtype. @param stream COSStream containing object data @param subtype COSName representing the object's subtype
524 Constructs a new PDSimpleFileSpecification with the specified file name. @param fileName the name of the file to be specified
525 Initializes a new PDStructureElement instance from the specified dictionary. @param dic COSDictionary containing structure element data
526 Initializes a new instance of the PDStructureTreeRoot class from a COS dictionary. @param dic the COS dictionary containing the structure tree root data
527 Initializes StandardDecryptionMaterial with a given password. @param pwd password to be used for decryption
528 Initializes a new instance of PublicKeyProtectionPolicy.
529 Constructs a new StandardProtectionPolicy instance. @param ownerPassword password for the policy owner @param userPassword password for users accessing the policy @param permissions access permissions granted to users
530 Initializes SecurityHandler instance.
531 Creates an instance of FDFAnnotationCaret from a COS dictionary. @param a COS dictionary containing annotation caret properties
532 Constructs an FDFAnnotationCircle object from a COS dictionary. @param a COS dictionary containing annotation circle data
533 Constructs an FDFAnnotationFileAttachment from a COS dictionary. @param a COS dictionary containing attachment data
534 Creates an instance of FDFAnnotationFreeText from a COS dictionary.
535 Initializes an instance of FDFAnnotationInk from a COS dictionary. @param a COS dictionary containing annotation ink data
536 Constructs an FDFAnnotationLine instance from a COS dictionary. @param a COS dictionary containing annotation line data
537 Constructs an FDFAnnotationLink object from a COSDictionary.
538 Constructs an instance of FDFAnnotationPolygon from a COS dictionary.
539 Constructs an FDFAnnotationPolyline object from a COS dictionary. @param a COS dictionary containing polyline data
540 Constructs an instance of FDFAnnotationSound from a COS dictionary.
541 Constructs an FDFAnnotationSquare PDF annotation from a COS dictionary. @param a COS dictionary containing annotation data
542 Constructs an FDFAnnotationStamp instance from a COS dictionary.
543 Constructs an instance of FDFAnnotationText from a COS dictionary.
544 Initializes FDF annotation text markup from COS dictionary. @param a COS dictionary containing markup data
545 Extracts and returns Panose classification data.
546 Creates a Composite instance based on blend mode and alpha value. @param blendMode desired blending behavior @param constantAlpha alpha transparency level (0-1)
547 Retrieves transparency group attributes. @return PDTransparencyGroupAttributes object or null if not initialized
548 Initializes a new instance of the PDShadingPattern class from a COS dictionary. @param resourceDictionary The dictionary containing shading pattern resources.
549 Initializes a PDTilingPattern object from a COSDictionary and a ResourceCache. @param dictionary COSDictionary containing pattern data @param resourceCache cache for resources used by the pattern
550 Initializes a new instance of the PDShadingType1 class from a COS dictionary. @param shadingDictionary COS dictionary containing shading information.
551 Initializes PDShadingType2 object from given shading dictionary. @param shadingDictionary COS dictionary containing shading properties
552 Initializes an Axial Shading paint object with specified shading type and transformation matrix. @param shadingType2 PDShadingType2 enum value @param matrix transformation matrix for the paint
553 Initializes radial shading paint with specified type and transformation. @param shading type of shading @param matrix transformation matrix
554 Initializes a Type1Shading object with the given PDShadingType1 and transformation matrix.
555 Initializes a Type 4 Shading Paint object from provided shading and transformation data. @param shading Type 4 shading type @param matrix Transformation matrix
556 Initializes a new instance of Type5ShadingPaint with the given shading and transformation matrix.
557 Constructs a Type 6 Shading Paint object. @param shading Shading data @param matrix Transformation matrix
558 Initializes a new instance of Type7ShadingPaint with the specified shading and transformation.
559 Constructs an extended graphics state from the given COS dictionary. @param dictionary the COS dictionary containing the extended graphics state
560 Initializes a new instance of PDSoftMask from a COSDictionary. @param dictionary COSDictionary containing soft mask data
561 Initializes PlainText object from text value. @param textValue input text to be parsed into paragraphs. If empty, creates a single empty paragraph. Otherwise, splits the text by line breaks and spaces, creating a paragraph for each non-empty part.
562 Initializes an embedded "goto" action in a PDF document. @param a COS dictionary containing action properties
563 Initializes a new PDActionGoTo instance from the given COS dictionary. @param a COS dictionary containing action properties
564 Constructs a PDActionHide instance with the specified COS dictionary.
565 Constructs an instance of PDActionImportData from a COS dictionary. @param a COS dictionary containing import data
566 Creates a new JavaScript action from the given COS dictionary. @param a COS dictionary containing JavaScript action data
567 Initializes a new instance of PDActionLaunch with the given dictionary.
568 Initializes a new instance of PDActionMovie from a COS dictionary. @param a COS dictionary containing movie data
569 Constructs a Named action from a COS dictionary.
570 Initializes remote Go To action with dictionary data. @param a dictionary containing action details
571 Initializes action reset form with COS dictionary data.
572 Constructs a new PDActionSound object from a COS dictionary.
573 Initializes an action submit form with given COS dictionary. @param a COS dictionary containing form data
574 Initializes a new instance of the thread with the specified COS dictionary.
575 Constructs a PDActionURI object from a COSDictionary. @param a COS dictionary containing action URI data
576 Initializes PDF structure builder with default settings.
577 Initializes a Named Destination with the given PDF destination string. @param dest PDF destination string
578 Initializes a PDNamedDestination with a given COS name. @param dest COSName object representing the destination
579 Initializes a new instance of PDNamedDestination with default values.
580 Initializes a new instance of the page destination from an array. @param arr COSArray containing page destination settings
581 Constructs a non-terminal PDDocumentField. @param acroForm PDAcroForm instance @param field COSDictionary representing the field @param parent parent PDNonTerminalField instance
582 Constructs a PDAcroForm object representing a Terminal Field. @param acroForm parent AcroForm @param field COSDictionary for the Field @param parent parent Non-Terminal Field
583 Initializes linear measure dictionary from COS dictionary. @param dictionary COS dictionary containing measurement data
584 Creates a deep copy of this matrix. @return cloned Matrix object
585 Creates a scale matrix with given X and Y factors. @param x horizontal scale factor @param y vertical scale factor
586 Creates a translation matrix instance with specified X and Y offsets. @param x horizontal offset @param y vertical offset
587 Creates a rotation matrix instance with the specified angle and translation. @param theta rotation angle in radians @param tx translation along X-axis @param ty translation along Y-axis @return RotationMatrix object representing the transformation
588 Applies linear transformation to a 2D vector. @param vector input vector @return transformed vector with updated coordinates
589 Scales the current vector by a scalar factor. @param sxy scalar multiplier @return scaled Vector object
590 Initializes expert encodings from predefined table.
591 Initializes Mac Roman encoding table by adding entries to the encoding map.
592 Initializes the Standard Encoding table by populating it with predefined entries. @param none
593 Initializes symbol encodings from pre-defined table.
594 Initializes a new instance of Type1Encoding.
595 Initializes encoding table with character metrics from FontMetrics.
596 Initializes WinAnsiEncoding table with mappings from code point to name. Maps unused codes (41-255) to bullet character.
597 Initializes and populates the Zapf Dingbats encoding table.
598 Returns the field tree associated with this instance.
599 Retrieves an object at the specified index from the underlying collection. @param index the position of the desired object @return the requested object, or null if out of bounds
600 Returns the number of objects in the collection. @return size of the object collection
601 Retrieves revision number at specified index. @param index position of revision to retrieve @return revision number or -1 if out of range
602 Parses PNG image data and extracts metadata. @param imageData byte array containing PNG image data @return PNGConverterState object or null if parsing fails
603 Retrieves an Encoding instance based on the provided name. @param name COSName enum value identifying the encoding type @return corresponding Encoding object or null if unknown
604 Creates a PDSoftMask object from the given COSBase dictionary. @param dictionary COSBase dictionary containing mask data @param resourceCache Resource cache for resolving resources @return PDSoftMask object or null if invalid input provided
605 Retrieves the index of the first enabled PDAnnotationWidget. @return Index of selected widget or -1 if none found
606 Adds a file as a source. @param source path to the file to add
607 Parses the PDF trailer, skipping extra entries if necessary. @return true if successful, false otherwise
608 Retrieves an object from the pool based on its key. @param key unique identifier for the desired object
609 Executes a sequence of instructions, executing operators and pushing/popping objects onto/from the execution context's stack.
610 Retrieves the current text line matrix from graphics state. @return Text line matrix object
611 Sets text line matrix using the provided Matrix. @param value Matrix object to set
612 Retrieves text matrix from graphics state. @return Text matrix object
613 Sets the text matrix in the graphics state. @param value text matrix to be set
614 Computes transformed width based on current transformation matrix. @param width original width value
615 Retrieves the current non-stroking color from the graphics state.
616 Sets non-stroking color in graphics state. @param color PDColor object to set as non-stroking color
617 Retrieves the color space from the graphics state.
618 Retrieves the current stroking color from the graphics state.
619 Sets the stroking color in the graphics state. @param color PDColor object representing the new color
620 Retrieves the current stroking color space from graphics state. @return ColorSpace object representing the current stroking colorspace.
621 Creates a raw input stream for reading. @throws IOException if no data has been written or an invalid state is encountered
622 Finds and returns an ImageReader for the specified format name. @param formatName image format (e.g. JPEG, PNG) @param errorCause reason for failure to find reader @return ImageReader object or throws MissingImageReaderException if not found
623 Finds and returns a raster-capable ImageReader for the specified format. @param formatName unique format identifier @param errorCause error message to include in exception (if thrown) @return ImageReader object or null if not found @throws MissingImageReaderException if no suitable reader is found
624 Retrieves an Operator instance by its name. @param operator unique identifier for the requested Operator @return Operator object or null if not found
625 Returns string representation of COSArrayList. @return human-readable string containing contents of inner array.
626 Determines if a given edge is a line based on control points. @param ctl array of 4 Point2D objects representing the edge's control points
627 Retrieves the lower-left X-coordinate from the first COSNumber in rectArray.
628 Returns lower left y-coordinate of rectangle. @return vertical offset from top to lower left corner
629 Returns the x-coordinate of the upper-right corner of the rectangle.
630 Retrieves the Y-coordinate of the upper right corner from the rect array.
631 Retrieves font size from settings. @return Font size as a floating-point value
632 Retrieves the R value from the first COSNumber in the values collection. @return The R value as a float.
633 Retrieves COS value at index 1. @return Cosine of angle in radians as a float
634 Retrieves the value at index 2 from values collection as a COS number and returns its float value.
635 Retrieves the X value from the first COSNumber object in values. @return The X value as a float or NaN if not found
636 Retrieves the y-coordinate value from the array. @return The y-value as a floating-point number.
637 Retrieves the Z-coordinate value from the values collection. @return The Z-coordinate as a floating-point number
638 Retrieves integer value at specified index, or returns default value if out of range. @param index the index to retrieve (0-based) @param defaultValue the default value to return if index is invalid @return the integer value at the given index, or the default value if not found
639 Retrieves name at specified index or returns default value if out of bounds. @param index the index to retrieve @param defaultValue the default name to return when index is invalid @return the retrieved name or the default value
640 Searches for the index of a given COSBase object in this collection. @param object COSBase object to search for @return Index of the object, or -1 if not found
641 Retrieves the list of filters from the COSBase. @return List of Filter objects or empty list if none found
642 Evaluates the polynomial expression using exponential interpolation. @param input array of input values @return array of evaluated results
643 Converts stream filter to a list of COSName objects. @return List of COSName objects or empty list if not found
644 Retrieves list of file filter names from PDF document. @return List of String filter names or empty list if not found
645 Writes a boolean value to the specified OutputStream in PDF format. @param output OutputStream to write to @param cosBoolean boolean value to be written
646 Writes ASCII-encoded string to output stream. @param text input string to encode and write
647 Notifies user of attribute change if entry has changed. @param oldEntry previous object state @param newEntry current object state
648 Returns the number of elements in the underlying map. @return Size of the map as an integer
649 Retrieves a COSObject from the document by its name. @param key unique identifier for the COSObject @return COSObject instance or null if not found
650 Retrieves a COSBase object by key; attempts alternate key if first is not found. @param firstKey primary key to search @param secondKey secondary key to search if first is null or not found @return COSBase object or null if neither key is found
651 Returns the length of the recipients list. @return number of recipient entries
652 Retrieves recipient string at specified index from the 'RECIPIENTS' array. @param i zero-based index of desired recipient
653 Returns direction indicator value as a COSBase object. @return COSBase object representing the direction or COSInteger.ZERO if not found
654 Retrieves a set of metadata key names.
655 Retrieves a list of attribute names from the COS object. @return List of unique attribute names
656 Adds trailer info from COSDictionary to the stream. @param trailerDict dictionary containing trailer information
657 Copies all entries from the given dictionary. @param dict COSDictionary to copy from
658 Checks if the given COSDictionary represents an info object. @param dictionary COSDictionary to check
659 Checks if the dictionary contains WIDTHS or MISSING_WIDTH keys. @return true if either key exists, false otherwise
660 Checks if missing width is defined in the dictionary. @return true if missing width key exists, false otherwise
661 Checks if XFA entry exists in dictionary. @return true if XFA is present, false otherwise
662 Initializes an instance of XrefParser with a COSParser. @param cosParser COSParser instance to use as source
663 Returns string representation of COSFloat object. Includes formatted value from formatString().
664 Writes PDF data to the specified OutputStream. @param output target stream where PDF content will be written
665 Writes a COSArray to the specified OutputStream. @param output OutputStream to write to @param cosArray array of COSBase objects to serialize
666 Creates and returns a COSIncrement object with updated information.
667 Initializes LayerUtility with a PDDocument object. @param targetDoc PDDocument instance to clone and analyze
668 Initializes a new instance of the DefaultResourceCache with caching enabled.
669 Checks if a PDF file needs to be updated based on its update info. @param base COSBase object containing the update information @return true if the file needs updating, false otherwise
670 Writes FDF document to underlying PDF structure. @param doc FDFDocument object to write
671 Writes a COS integer to the specified OutputStream. @param output OutputStream to write the integer to @param cosInteger COS integer object containing the value to be written
672 Retrieves an object at the specified index, potentially nested within a COSObject. @param index index of the object to retrieve @return COSBase object or null if not found or null
673 Searches for the index of a specific object within the collection. @param object COSBase object to search for @return index if found, -1 otherwise
674 Checks if the collection contains a specified object or its contained object. @param value Object to search for, may be wrapped in COSObject
675 Retrieves the key associated with a given value from the map of items. @param value The value to search for @return The corresponding key, or null if not found
676 Retrieves the dictionary object associated with the given key. @param key unique dictionary key @return COSBase object or null if not found or is a null value
677 Retrieves the linearized dictionary from the PDF's XREF table. @return COSDictionary object or null if not found
678 Closes this object and all associated I/O streams, logging exceptions.
679 Accepts the given ICOSVisitor and traverses the COSBase object hierarchy. @param visitor ICOSVisitor instance to process the object
680 Checks if the given COSBase value contains a self-reference. @param parent parent COSObject @param value COSBase value to check @return true if value has a self-reference, false otherwise
681 Retrieves COSNumber object representing the length. @param lengthBaseObj base object containing length
682 Initializes a NormalXReference with the given byte offset, key, and object. @param byteOffset byte offset of the reference @param key unique identifier for the referenced object @param object COSBase representing the referenced object
683 Retrieves a COSObjectKey from the pool or creates a new one for the given object. @param object COSBase object to fetch a key for
684 Checks if an object is contained within the pool. @param object COSBase object to search for in the pool
685 Prepares stream object by adding key and contents to internal collections. @param key unique identifier for the object @param object COSBase object or COSObject instance to process
686 Constructs a COSObjectKey instance with default retention policy. @param num object number @param gen generation
687 Compares this XReferenceEntry with another based on the referenced key. @param xReferenceEntry XReferenceEntry to compare with @return negative if this entry's key is less than, positive if greater, or zero for equal keys
688 Retrieves X-axis scaling factor from text matrix. @return Scaling factor as a floating-point value
689 Returns Y-axis scaling factor from text matrix.
690 Creates a raw OutputStream for writing to the stream. @throws IOException if an I/O error occurs
691 Initializes COSWriter with output stream and compression parameters. @param outputStream OutputStream to write compressed data @param compressParameters CompressParameters for the writer
692 Initializes a COSWriter with an OutputStream and RandomAccessRead data. @param outputStream Output stream to write to @param inputData Input data for random access read operations
693 Updates internal state with whether updates are being accepted. @param updated true if accepting updates, false otherwise
694 Extracts a string from byte array, handling UTF-16BE, UTF-16LE, and PDFDoc encoding. @return extracted text string or null if invalid format
695 Converts string to COSString object with specified encoding. @param text input string @param forceHex whether to use PDFDocEncoding or UTF-16BE with BOM if needed
696 Checks if the current font is a standard 14 font. @return true if it's a standard 14 font, false otherwise
697 Reads specified number of bytes into the given array, handling EOF condition. @param data target byte array @param offset starting index in the array @param len number of bytes to read @return actual number of bytes read or -1 if at EOF
698 Closes resources and releases any held locks.
699 Reads a single byte from the input stream. @return next byte value or -1 when end-of-file is reached
700 Reads specified number of bytes from data source. @param data buffer to store read data @param offset starting index in data buffer @param length number of bytes to read @return actual number of bytes read, or -1 if EOF reached
701 Reads an image from a stream and sets it as the current image. @param stream input stream containing the image data
702 Encodes raw input data using a dynamic code table. @param rawData input stream to encode @param encoded output stream for encoded data @param parameters COSDictionary parameters (unused)
703 Selects the data row with estimated compression sum greater than others.
704 Returns a RenderState instance by its COSName representation. @param state COSName object containing the render state name
705 Returns the corresponding BaseState enumeration value based on the given COSName. @param state COSName object to resolve
706 Closes all overlays and documents, releasing system resources.
707 Constructs a PDFormXObject from a PDStream. @param stream PDStream object to initialize from
708 Initializes the parser with the given content stream. @param pdContentstream content stream to parse
709 Initializes parser with byte array data. @param bytes input byte array to parse
710 Parses an object from the underlying data stream by its number. @param objectNumber unique object identifier @return COSBase representation of the parsed object or null if not found
711 Reads and returns a map of object IDs to their respective numbers. @return Map<Long, Integer> containing object ID-number pairs or null if failed
712 Skips white spaces and line breaks from the input stream.
713 Skips the next line break in the input stream. @return true if line break skipped successfully, false otherwise
714 Reads the next line from the input source. @throws IOException if end-of-file reached unexpectedly
715 Skips whitespace characters and inline comments from input stream.
716 Finds the nearest XREF offset by searching tables and streams. @param xrefOffset target offset to search for @return nearest XREF offset or -1 if not found
717 Parses PDF header and returns true if successful.
718 Parses the FDF header. @return true if parsing is successful, false otherwise
719 Parses and returns a map of COS objects from the current PDF source. @return Map of COS objects keyed by their object keys
720 Calculates the final encryption key based on object and generation numbers. @param objectNumber unique object identifier @param genNumber generation number @return byte array representing the final encryption key
721 Initializes a new PDAppearanceContentStream instance from an existing PDAppearanceStream. @param appearance the underlying appearance stream @param outputStream output stream for content data
722 Initializes a new PDF page content stream instance. @param doc the underlying document @param appearance the appearance stream for this page @param outputStream the output stream for writing page content
723 Applies the current transformation matrix to a point. @param x original X coordinate @param y original Y coordinate @return transformed Point2D object
724 Creates a PaintContext with transformed coordinates. @param xform AffineTransform to apply @return PaintContext object
725 Concatenates input matrix with existing data. @param matrix Matrix to be concatenated
726 Updates translation values in the single array. @param tx x-axis translation value @param ty y-axis translation value
727 Scales the transformation matrix by given factors. @param sx horizontal scale factor @param sy vertical scale factor
728 Performs matrix multiplication on this and given matrices. @param other the second matrix to be multiplied
729 Creates a PDDocument instance with specified document and source.
730 Constructs a PDDocument object from a COS document and random access read source. @param doc COS document to initialize the PDF @param source Random access read source for additional data
731 Creates a security handler for the specified protection policy. @param policy ProtectionPolicy instance @return SecurityHandler instance or null if unsupported policy
732 Creates a SecurityHandler instance for the specified filter. @param name unique name of the filter
733 Sets stroking color on demand with the specified color. @param color PD color object to use
734 Sets non-stroking color based on provided PDColor object. @param color the PDColor to set as non-stroking color @return true if successful, false otherwise
735 Verifies if the user has owner permissions based on various document editing capabilities.
736 Checks for presence of any revision 3 permission set.
737 Writes an array of bytes to the specified output stream. @param data array of bytes to be written @param output target output stream
738 Writes a specified length of data from the provided byte array to the given OutputStream. @param data the source byte array @param offset starting index within the array @param len number of bytes to write @param output target OutputStream to write to
739 Inserts a Unicode combining diacritic at specified position. @param i insertion index @param diacritic diacritic to combine with base character
740 Initializes a line segment with two points and their colors. @param p0 starting Point of the line @param p1 ending Point of the line @param c0 color array for point 0 @param c1 color array for point 1
741 Initializes SoftMask instance with given paint, mask, bounding box, and transfer function. @param paint Paint object @param mask BufferedImage for soft masking @param bboxDevice Rectangle2D bounding box in device space @param backdropColor PDColor for color conversion (optional) @param transferFunction PDFunction to apply (or null for identity)
742 Removes a backdrop image from the specified group image, offset by x and y. @param offsetX horizontal offset of backdrop @param offsetY vertical offset of backdrop
743 Retrieves FontMetrics for a given font name, loading metrics if necessary. @param fontName unique font identifier @return FontMetrics object or null if not found
744 Creates a GlyphList object from an InputStream containing glyph data. @param input InputStream with glyph entries to load @param numberOfEntries number of glyphs to expect in the list
745 Copies the given GlyphList and loads glyphs from the specified input stream. @param glyphList source GlyphList to copy @param input InputStream containing glyphs to load
746 Converts font code to GID. @param code font code @return glyph ID or 0 if not found
747 Fetches font name for given character, using Unicode fallback if necessary. @param name character to look up @return Font name or ".notdef" if not found
748 Attempts to fetch the name of a glyph in a font, falling back to alternative names and Unicode codes. @param name the glyph name to search for @return the found glyph name or .notdef if not found
749 Initializes PDJPXColorSpace with an AWT ColorSpace object. @param colorSpace AWT ColorSpace instance to be used
750 Initializes rendering engine, loading CMYK color profile and configuring color conversion. @throws IOException if default CMYK profile cannot be loaded
751 Applies an alpha mask to the input image. @param image the image to be masked @param mask the alpha mask image @param interpolateMask whether to interpolate the mask if it's smaller than the image @param isSoft whether to use a soft mask (fast) or a hard mask (slow) @param matte the matte values for each color channel (optional)
752 Initializes cubic Bezier curve with given control points and level. @param ctrlPnts array of Point2D objects representing control points @param l the level to which generate the curve points
753 Checks if a point (p) is contained within this polygon. @param p Point to check containment for
754 Calculates the color at a given 2D point based on interpolation or averaging. @param p Point2D object representing the location
755 Intersects clipping path with provided GeneralPath. @param path GeneralPath object to intersect
756 Intersects clipping path with given Area object. @param area input area to intersect with clipping path
757 Sets the current clipping path for graphics rendering. @param graphics Graphics2D context to apply clipping path to
758 Draws a tiling pattern using the specified Graphics2D context and parameters. @param g Graphics2D context to draw on @param pattern Tiling pattern object @param colorSpace Color space of the pattern @param color Pattern color @param patternMatrix Transformation matrix for the pattern
759 Calculates the X-direction adjustment based on the current direction. @return the adjusted X value as a float
760 Initializes TextPosition object with page dimensions, font, and text metrics. @param pageRotation rotation of the page (0-360) @param pageWidth page width @param pageHeight page height @param textMatrix text transformation matrix
761 Calculates the adjusted y-coordinate for a rotated PDF page. @return Adjusted y-coordinate (float)
762 Returns the width of the object. @return The width as a floating-point value.
763 Calculates width direction adjustment based on current orientation. @return adjusted width value as float
764 Starts an article with default settings.
765 Writes end of paragraph and resets paragraph flag.
766 Normalizes a word by applying Unicode normalization and handling special cases. @param word input string to normalize
767 Formats a Calendar object as a string in the format "D:yyyyMMddHHmmss'offset'". @param cal Calendar object to format @return formatted string or null if input is null
768 Converts Calendar object to ISO8601 formatted string. @param cal Calendar object containing date and timezone information @return ISO8601 formatted string representation of the calendar or null if invalid
769 Converts byte array to hexadecimal string.
770 Writes external signature bytes to PDF document. @param cmsSignature CMS signature data in byte array form
771 Writes a PDF "Name Object" to the specified OutputStream. @param output OutputStream to write the PDF data to
772 Writes an array of hexadecimal bytes to the specified output stream. @param bytes array of bytes to be written @param output target output stream
773 Parses input stream into a Document object. @param is InputStream to parse from
774 Detects the file type based on its magic number. @param inputStream input stream containing the file data @return FileType enum value or throws IOException if invalid
775 Initializes PDF stream engine with legacy operators.
776 Retrieves PDF name for the given string name, using caching with weak references. @param aName input string name @return COSName object or null if not found
777 Initializes a new COSFloat instance with the given floating-point value. @param aFloat the floating-point number to be stored
778 Initializes COSFloat object with float value and string representation. @param aFloat the float value @param valueString string representation of the float value
779 Parses and coerces the given string into a COS float value. @param aFloat input string to be parsed @throws IOException if parsing fails or invalid format is encountered
780 Initializes COSInteger with given value and validity status. @param val long integer value @param valid true if value is valid, false otherwise
781 Constructs a COSString instance from an array of bytes. @param bytes byte array containing string data
782 Initializes an empty COSArray instance.
783 Initializes a new COSStream object with the given RandomAccessStreamCache. @param streamCache cache for storing and retrieving streams
784 Creates an unmodifiable COS dictionary from a given COS dictionary. @param dict COS dictionary to be wrapped and made unmodifiable
785 Creates a default DecodeResult instance with an empty COS dictionary.
786 Initializes an empty PDDocumentInformation object with a COS dictionary.
787 Initializes PDResources object with empty dictionary and caches.
788 Initializes a new instance of PDDictionaryWrapper with an empty dictionary.
789 Initializes a new PDNameTreeNode instance with an empty dictionary.
790 Initializes PDF page label range with an empty dictionary.
791 Initializes a new instance of PDMarkInfo with an empty COSDictionary.
792 Initializes a new PDF property list. Creates an empty dictionary to store properties.
793 Initializes a new instance of PDBoxStyle with an empty COS dictionary.
794 Initializes filter dictionary with an empty COS dictionary.
795 Initializes PDEncryption object with an empty encryption dictionary.
796 Initializes an empty FDF catalog using a COS dictionary.
797 Initializes an empty FDF dictionary.
798 Initializes an empty FDFField object with a new COSDictionary instance.
799 Initializes an empty FDF icon fit dictionary.
800 Initializes an empty JavaScript object.
801 Initializes a new instance of an FDF named page reference.
802 Initializes a new instance of FDFPage. Creates an empty COS dictionary as the page's data structure.
803 Initializes an empty FDFPageInfo instance with a new COS dictionary.
804 Initializes an empty FDF template.
805 Initializes a new instance of PDDeviceNAttributes with an empty dictionary.
806 Initializes a new PDF device N process with an empty COS dictionary.
807 Initializes a new instance of the PDShading class with an empty dictionary.
808 Initializes a new instance of PDF additional actions with an empty dictionary.
809 Initializes an empty dictionary of additional annotation actions.
810 Initializes additional actions catalog with an empty dictionary.
811 Initializes a new instance of PDFormFieldAdditionalActions with an empty dictionary.
812 Initializes additional page actions with an empty dictionary.
813 Initializes an empty PDF target directory. Creates a new COS dictionary to store target directory data.
814 Initializes an empty PDURIDictionary instance.
815 Initializes an empty launch parameters dictionary.
816 Initializes PDBorderEffectDictionary with an empty COSDictionary.
817 Initializes an empty border style dictionary.
818 Initializes a new PDPropBuild object with an empty COSDictionary.
819 Initializes an empty PDPropBuildData dictionary.
820 Initializes a new PDSeedValue MDP object with an empty dictionary.
821 Initializes a new instance of PDSeedValueTimeStamp with an empty COSDictionary.
822 Initializes a PDField with an existing PDAcroForm and an empty dictionary.
823 Initializes a new instance of PDViewportDictionary. @param none
824 Initializes viewer preferences with an empty dictionary.
825 Constructs a new COSObject instance from a given COSBase and key. @param object the COSBase to wrap @param objectKey the COSObjectKey to associate with this object
826 Initializes a new instance of PDDefaultAttributeObject from a COSDictionary.
827 Initializes a new instance of PDUserAttributeObject from a COSDictionary. @param dictionary COSDictionary containing attribute data
828 Initializes PDStandardAttributeObject from COSDictionary. @param dictionary COS dictionary containing attribute data.
829 Constructs a new PDOutlineItem from a COS dictionary. @param dic COS dictionary containing item data
830 Retrieves PDMetadata object from the stream. @return PDMetadata object or null if not found
831 Retrieves the metadata object from the COS stream. @return PDMetadata object or null if not found
832 Retrieves the extends stream from the PDF object. @return a PDObjectStream or null if not available
833 Initializes a new instance of the class with the given COS-based function. @param function COSBase representing the function to initialize from.
834 Initializes a new instance of PDFunctionType3 from the given COSBase stream. @param functionStream COSBase representation of the function data
835 Constructs a new PDPostScriptXObject from the given COSStream. @param stream underlying COS stream
836 Initializes a PDFormXObject from a COS stream. @param stream input COS stream containing object data
837 Constructs a PDF form XObject from a COS stream and resource cache. @param stream COS stream containing the form data @param cache Resource cache for storing and retrieving resources
838 Initializes new instance of PublicKeySecurityHandler.
839 Initializes a new instance of the StandardSecurityHandler.
840 Initializes the PublicKeySecurityHandler with the specified protection policy. @param publicKeyProtectionPolicy security settings for public key encryption
841 Initializes a new instance of StandardSecurityHandler with the specified protection policy. @param standardProtectionPolicy protection policy to associate with this handler.
842 Initializes an FDFAnnotationHighlight object from a COS dictionary. @param a COS dictionary containing annotation highlight data
843 Initializes an instance of FDFAnnotationSquiggly from a COS dictionary. @param a COS dictionary containing annotation data
844 Initializes a strike-out annotation with the specified dictionary. @param a COSDictionary containing annotation properties.
845 Constructs an underlined annotation from the given COS dictionary.
846 Initializes a new instance of PDTilingPattern from a COSDictionary. @param dictionary COSDictionary containing pattern data
847 Initializes a new instance of PDShadingType3 from a COS dictionary. @param shadingDictionary COS dictionary containing shading properties
848 Initializes a new instance of the class from a COS dictionary. @param shadingDictionary COS dictionary containing type 4 shading information
849 Initializes a new instance of PDShadingType5 from a COS dictionary. @param shadingDictionary dictionary containing type 5 shading data
850 Initializes a new instance of PDPageFitDestination from a COS array. @param arr COS array containing initialization data
851 Constructs a PDPageFitHeightDestination from an array of COS objects. @param arr array of COS objects representing destination properties
852 Constructs a new PDPageFitRectangleDestination with parameters from the given COS array. @param arr COS array containing destination parameters.
853 Initializes a new PDPageFitWidthDestination instance from an array of PDF objects. @param arr COSArray containing PDF page destination data
854 Constructs a PDPageXYZDestination object from a COSArray. @param arr COSArray containing page destination coordinates
855 Initializes a PDButton object from given form and field data. @param acroForm PDAcroForm containing the button's form @param field COSDictionary representing the button's field @param parent PDNonTerminalField as the button's parent
856 Initializes a new PDSignatureField object from an AcroForm, Field and Parent.
857 Initializes a variable text field. @param acroForm AcroForm object @param field COS dictionary representing the field @param parent Parent non-terminal field
858 Initializes MacOS Roman Encoding by populating the character table.
859 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object populated from the input encoding
860 Generates a unique partial name by appending an incremented integer to the base field name "Signature".
861 Returns a human-readable string representation of the object collection. @return A comma-separated list of objects with their revision numbers.
862 Creates a new PDSoftMask instance from the provided COSBase dictionary. @param dictionary COSBase dictionary containing mask data
863 Creates a new COSDocument instance from the provided ICOSParser. @param parser COS parser to read document data from.
864 Creates a marked content object based on the provided tag and properties. @param tag COSName representing the type of marked content @param properties COSDictionary containing additional properties
865 Calculates the width of the rectangle. @return The width as a floating-point value
866 Checks if a point (x, y) lies within the current bounding box. @param x horizontal coordinate to check @param y vertical coordinate to check @return true if point is inside the box, false otherwise
867 Calculates and returns the height of the bounding box. @return Height as a floating-point value
868 Transforms a GeneralPath using the provided affine matrix. @param matrix 2x2 transformation matrix @return transformed GeneralPath object
869 Converts to a GeneralPath object. @return GeneralPath representation of this polygon
870 Returns a string representation of the bounding box coordinates.
871 Returns integer value at specified index (defaulting to -1 if out of bounds). @param index position of desired integer value
872 Returns the name at the specified index. @param index The position of the name to retrieve
873 Creates an output stream for writing to a COS file. @param filters optional filter settings @return OutputStream object for writing to the COS file
874 Initializes PDImageXObject from a PDStream and resources. @param stream the image data @param resources associated resources
875 Determines the file suffix based on the stream's filters. @return file suffix (e.g. png, jpg, jpx, tiff) or null if unknown
876 Writes a float operand to the output stream, handling non-finite numbers and fast-formatted vs. formatted cases.
877 Writes an operand value as a decimal string to output stream. @param integer the decimal value to be written
878 Writes an operator (e.g. keyword) to the output stream.
879 Checks if collection is empty. @return true if no elements, false otherwise
880 Writes a COS float value to the specified OutputStream. @param output OutputStream to write to @param cosFloat COS float object containing value to be written
881 Converts to increment state.
882 Converts the object array to a float array. @return Array of floats representing the values in the original object array
883 Converts COSNumbers to a list of Float values. @return List of Floats, or null for non-COSNumber objects.
884 Converts COSNumber objects to a list of integers.
885 Returns the minimum value from the range array. @return the minimum value as a float
886 Returns the maximum value from the range array.
887 Retrieves a PDGamma object by its index from the internal array. @param index the position of the PDGamma object in the array @return the PDGamma object at the specified index or null if not found
888 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode COSBase object representing a blend mode @return BlendMode instance or NORMAL if not found
889 Retrieves colorant names as a list of strings from the COS array.
890 Retrieves the alternate color space, creating it if not already initialized.
891 Retrieves colorant name from array.
892 Retrieves the first PDF page from the collection, or null if empty. @return PDPage object or null.
893 Retrieves the page number from the first object in the array. @return page number as an integer, or -1 if not found
894 Retrieves zoom value from PDF document. @return Zoom factor as a float, or -1.0 if invalid
895 Initializes a Matrix object from a COSArray. @param array COSArray containing matrix data
896 Tries to retrieve a dictionary object by first key, or falls back to second key. @param firstKey primary key for lookup @param secondKey secondary key for lookup (used if first key is not found) @return COSBase object representing the retrieved value, or null if neither key matches
897 Retrieves a COSName object from the dictionary using the provided key. @param key unique identifier for the desired COSName @return COSName object or null if not found in the dictionary
898 Retrieves a COSDictionary instance associated with the given key. @param key name of the dictionary to fetch @return COSDictionary object or null if not found
899 Retrieves a COSStream object from the dictionary by its name. @param key unique identifier of the COS stream @return COSStream object or null if not found
900 Retrieves a COSArray instance from the dictionary using the specified key. @param key unique key for identifying the COSArray object @return COSArray instance or null if not found
901 Retrieves a COSName object from the dictionary or returns the default value. @param key COSName to retrieve @param defaultValue fallback name to use if key is not found @return COSName object or defaultValue if not found
902 Retrieves a long value from the dictionary using the given key. @param key unique identifier for the value to retrieve @param defaultValue default value to return if not found @return long value or default value if not present
903 Retrieves a floating-point value from the dictionary using the specified key. @param key unique key to look up in the dictionary @param defaultValue default value to return if not found or invalid @return The actual float value, or the default value if not found or invalid.
904 Retrieves an iterator over the content streams of a PDF page. @return Iterator over PDStream objects or empty iterator if none found
905 Checks if the page has contents. @return true if the page contains a non-empty stream or array, false otherwise
906 Fetches class names and revision numbers from the PDF object dictionary.
907 Retrieves the value of the "K" dictionary object from the underlying COS structure. @return COSBase object representing the value of the "K" key, or null if not present.
908 Retrieves the value from the dictionary. @return COSBase object representing the value
909 Checks whether encryption metadata is enabled. @return true if enabled, false otherwise
910 Retrieves the owner encryption key from the dictionary. @return byte array containing the owner encryption key, or null if not found.
911 Retrieves the user encryption key from the dictionary. @return byte array containing the user's encryption key or null if not found
912 Retrieves the permissions string from the dictionary. @return byte array containing the permissions data or null if not found
913 Retrieves the page number from the annotation dictionary. @return Integer page number or null if not found
914 Retrieves the COSBase value from a dictionary object. @return COSBase value or null if unknown
915 Retrieves the field flags as an integer value. @return Field flags or null if not available
916 Retrieves the set field flags as an integer value. @return Integer flag value or null if not available
917 Retrieves clear flag value from the field dictionary. @return Clear flag integer value or null if not found
918 Retrieves widget field flags as an integer value. @return Integer flag value or null if not available
919 Retrieves the flags for a widget's SET field. @return integer representing the flags or null if not set
920 Retrieves the clear widget field flags. @return Integer value of field flags or null if not found
921 Returns the default width, either from the dictionary or a fallback value. @return default width in float units
922 Retrieves the color space from the PDF document. @return PDColorSpace object or null if not found
923 Retrieves and initializes the color space for the given resources. @param resources PDF resources @return PDColorSpace object or null if not found and initialized
924 Initializes an Optional Content Group object from a PDF dictionary. @param dict PDF dictionary representing the OCG
925 Initializes an Optional Content Membership Dictionary from a given COS dictionary. @param dict the COS dictionary to initialize from
926 Retrieves the overprint mode as an integer value. @return Overprint mode or null if undefined
927 Retrieves a soft mask object from the dictionary. @return PDSoftMask object or null if not found
928 Retrieves the float value associated with the given key from the dictionary. @param key unique identifier for the dictionary item @return Float value or null if not found or not a number
929 Retrieves the transfer object from the dictionary, ensuring it's a valid 4-element array. @return COSBase object or null if invalid
930 Retrieves the transfer dictionary object from the document, returning it as a COSBase. @return COSBase object representing the transfer data or null if invalid.
931 Retrieves the backdrop color as a COSArray, initializing it from the PDF dictionary if not already set. @return COSArray containing the backdrop color or null if initialization fails
932 Returns the open mode preference for new window. @return OpenMode value based on user or document settings
933 Retrieves the dictionary object with name T. @return COSBase object representing the result, may be null if not found
934 Retrieves the open mode for new window based on user preference or COS dictionary. @return OpenMode (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
935 Returns the open mode based on PDF's "New Window" preference. @return mode to open PDF in (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
936 Retrieves the named destination from the dictionary. @return PDNamedDestination object or null if not found
937 Retrieves the contents of a PDF document. @return byte array representation of the document contents or empty array if not found.
938 Retrieves XFA resource from PDF dictionary. @return PDXFAResource object or null if not found
939 Retrieves an inheritable attribute value from the dictionary, its parent, or the Acrobat form's dictionary if no parent exists. @param key name of the attribute to fetch
940 Retrieves the value from the current dictionary object. @return The COSBase object containing the value
941 Returns user ID as a string, or an empty string if not available.
942 Retrieves default value from dictionary. @return COSBase object representing default value
943 Closes the visual and PDF sources, ensuring proper resource release.
944 Clones COSBase object for new document. @param base COSBase to clone @return cloned TCOSBase object or null if not found/created
945 Writes a COS object to the output stream, including its key and contents. @param key COSObjectKey representing the object's ID @param obj COSBase object being written
946 Retrieves COSObjectKey from the given COSBase object. @param object COSBase object to fetch key from @return COSObjectKey or null if not found
947 Checks if the given COSBase object exists in the object pool. @param object COSBase object to search for
948 Creates a list of object streams based on the number of objects and stream size. @return List of COSWriterObjectStream instances
949 Retrieves or creates a COSObjectKey instance for the given object ID and generation. @param num object ID @param gen object generation @return COSObjectKey instance or newly created one if not cached
950 Searches for objects in the PDF stream. @throws IOException if an I/O error occurs during search
951 Searches for object stream offsets and returns a map of positions to COSObjectKey objects.
952 Resolves Xref trailer by parsing and resolving objects. @param resolver XrefTrailerResolver instance to resolve objects
953 Parses the cross-reference (XRef) table at the specified offset. @param startByteOffset starting byte position of the XRef table @return true if parsing was successful, false otherwise
954 Resolves and updates the COSObjectKey for a given COSBase object. @param obj the COSBase object to resolve the key for @return the resolved COSObjectKey or null if not found
955 Assigns a COSBase object to the given COSObjectKey and updates internal pools. @param key unique identifier for the object @param object COSBase object to be assigned @return updated COSObjectKey key or null if assignment was redundant
956 Initializes COSWriter with output stream and optional compress parameters. @param outputStream output stream to write compressed data
957 Updates the update state with the given flag. @param flag true to mark for update, false otherwise
958 Updates the entity with default values.
959 Retrieves a string value at the specified index, or returns default value if out of bounds. @param index array index @param defaultValue default string to return if index is invalid @return string value at index, or default value if not found
960 Retrieves the name as a string from the given key. @param key unique identifier for the name @return name value as a string or null if not found
961 Retrieves string value associated with the given COSName key. @param key unique COSName identifier @return string value or null if not found
962 Converts a COS dictionary to a basic types map. @param map input COS dictionary @return COSDictionaryMap or null if input is null
963 Retrieves the file path as a string. @return The file path or null if empty.
964 Retrieves and returns the string value of an option object. @return The string value of the option object or null if empty
965 Retrieves default appearance string from COS data. @return Default appearance string or null if not available
966 Extracts the destination name from a PDF object. @return String representation of the destination or null
967 Retrieves a list of pairable items from the provided COSBase object. @param items COSBase object to fetch items from @param pairIdx 0-based index into two-element arrays (only 0 and 1 are allowed) @return List of String objects representing pairable items, or an empty list if not found
968 Retrieves export values as a list of strings. @return List of strings or empty list if no values found
969 Retrieves the string value associated with a given COSName. @param name COSName identifier
970 Retrieves the default appearance as a string. @return Default appearance string or null if not set
971 Creates a COSString instance from a plain string. @param text input text to be wrapped in COSString
972 Initializes PDVisibleSignDesigner with an image stream. @param imageStream InputStream containing the design image
973 Loads image from file at specified path and reads it into the designer. @param path absolute or relative path to the image file
974 Constructs a transparency group from a given stream. @param stream input stream to initialize the group
975 Parses a COSDictionary from the input stream. @param isDirect whether this is a direct dictionary
976 Reads a string from the input source, skipping leading spaces. @return The read string or null on end-of-file
977 Reads and verifies expected string from input, skipping spaces if requested. @param expectedString the expected character array @param skipSpaces whether to skip leading/trailing whitespace characters
978 Reads a string of specified length from input stream, skipping leading spaces. @param length maximum number of characters to read @return the read string or null if end-of-file reached
979 Reads and parses an integer value from the input stream. @throws IOException if invalid integer format is encountered
980 Reads and parses a long integer value from the input stream. @throws IOException if invalid long data is encountered
981 Calculates fixed offset for xref table/stream by brute force search. @param objectOffset starting offset to search from @return new offset or 0 if not found
982 Computes user password based on input parameters. @param password user password @param owner user ID @param permissions permissions flags @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes encryption key length @param encryptMetadata whether to encrypt metadata @return encrypted password or empty byte array for REVISION_5/6
983 Computes and returns the owner password after encryption using RC4. @param ownerPassword initial owner password @param userPassword user password to be encrypted @param encRevision encryption revision number @param length data length (5 for revision 2) @return encrypted owner password as byte array
984 Rotates the current matrix by angle theta. @param theta rotation angle in radians
985 Applies text adjustment translation to the graphics state. @param tx horizontal offset @param ty vertical offset
986 Translates a 2D vector to its corresponding screen coordinates. @param vector input vector with x and y values
987 Concatenates two matrices by performing multiplication in reverse order. @param a first matrix @param b second matrix (resulting matrix will be concatenation of b and a)
988 Constructs a new PDDocument instance using an existing COSDocument. @param doc the underlying document data
989 Processes input text as a single token. @param text CharSequence to be processed
990 Returns the current access permission. @return AccessPermission object or null if not initialized
991 Calculates the effective revision number based on the provided version. @param version the target revision to evaluate @return the computed revision number or a fallback value if necessary
992 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key @param data input stream to process @param output output stream for encrypted/decrypted data @param decrypt true for decryption, false for encryption
993 Encrypts or decrypts data using AES256 with the provided key and initialization vector. @param data InputStream containing data to be encrypted/decrypted @param output OutputStream where encrypted/decrypted data will be written @param decrypt whether to encrypt (false) or decrypt (true) the data
994 Encrypts data using RC4 algorithm with provided key. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
995 Copies InputStream to OutputStream in chunks. @param data input stream containing data @param output target output stream for data
996 Prepares SASL query string according to IETF RFC 2831. @param str input string
997 Prepares stored string for SASL authentication. @param str input string to be prepared
998 Retrieves FontBoxFont instance for this object. @return FontBoxFont object or null if not found in cache
999 Saves font information to disk cache.
1000 Sets the provider and updates font info by name. @param fontProvider FontProvider instance to use
1001 Initializes a shaded triangle with the given points and colors. @param p array of 3 Point2D objects representing the triangle's vertices @param c 3x2 float matrix containing the RGB values for each vertex color
1002 Writes a CID font to the specified OutputStream. @param out OutputStream to write to
1003 Loads glyph list from file. @param filename glyph list file name @param numberOfEntries number of entries to load @return GlyphList object or null if not found
1004 Populates and returns a map of GID to code values. @return Map of integer GIDs to corresponding codes (0-255)
1005 Initializes a PDICCBased object from an ICC color profile array. @param iccArray COS representation of the ICC color profile
1006 Resets text clipping by intersecting with buffered clip and clearing clippings list.
1007 Updates the current clipping paths and notifies graphics of changes. @param graphics graphics context to notify
1008 Returns incremental PDF data to be signed. @throws IOException if an I/O error occurs
1009 Merges a single-character diacritic into the existing text position, inserting it at the optimal position based on overlap and containment.
1010 Checks if two TextPosition objects overlap by at least 15% in the x-coordinate. @param tp2 the other TextPosition object to check for overlap @return true if overlapping, false otherwise
1011 Checks if the current TextPosition completely contains another. @param tp2 TextPosition to check containment for
1012 Writes paragraph separator by writing end and start tags.
1013 Writes COS name to PDF stream. @param output OutputStream to write to @param cosName COSName object to serialize
1014 Writes an operand (COSName) to the PDF output stream. @param name COSName object representing the operand to be written
1015 Writes a string to an OutputStream, optionally forcing hexadecimal encoding. @param bytes input byte array @param forceHex whether to use hexadecimal encoding (default: false) @param output output stream to write to
1016 Initializes the PDF marked content extractor with specified encoding. @param encoding character encoding for extracted content
1017 Initializes PDF text stripper with default properties and marked content sequences.
1018 Retrieves dictionary object by name. @param key unique dictionary key @return COSBase object or null if not found
1019 Retrieves an item from the PDF document by its key. @param key unique identifier of the item
1020 Checks if a PDF name exists in the COSName cache. @param name string to search @return true if found, false otherwise
1021 Retrieves a COS filter by name. @param filterName name of the filter to retrieve
1022 Parses a COS name from the input stream.
1023 Initializes a PDColor object from COSArray and color space. @param array COSArray containing color components or pattern name @param colorSpace the color space of the PDColor object
1024 Retrieves a cached or newly created COSInteger instance for the given value. @param val long integer value
1025 Parses a hexadecimal string into a byte array. @param hex input hexadecimal string
1026 Initializes an empty COSArrayList instance.
1027 Initializes an instance of COSArrayList with a given dictionary and key. @param dictionary the parent dictionary @param dictionaryKey the key referencing this array in the dictionary
1028 Initializes page destination with an empty array.
1029 Initializes a PDRectangle with specified bounds. @param x left x-coordinate @param y top y-coordinate @param width rectangle width @param height rectangle height
1030 Initializes a PDRectangle from the given BoundingBox. @param box bounding box to convert
1031 Creates a new COSStream instance and adds it to the collection for later cleanup. @return COSStream instance or null (not applicable in this case)
1032 Constructs an empty COSStream instance.
1033 Initializes COSStream with stream cache and read view. @param streamCache RandomAccessStreamCache instance @param randomAccessReadView RandomAccessReadView instance to fetch length from
1034 Returns an unmodifiable dictionary view of this COS dictionary. @return Unmodifiable COS dictionary
1035 Returns the last decoded result or a default result if none exist.
1036 Retrieves PDF resources dictionary. @return PDResources object or empty if not found, or null if key exists but has no value
1037 Initializes a new instance of PDAttributeObject.
1038 Initializes a new PDUserProperty instance with the specified user attribute object. @param userAttributeObject User attribute data to be associated with this property.
1039 Constructs an empty PDOutlineNode instance.
1040 Initializes an empty PDDestinationNameTreeNode instance.
1041 Constructs an instance of PDEmbeddedFilesNameTreeNode.
1042 Initializes an empty PD Javascript Name Tree Node.
1043 Initializes a new instance of PDStructureElementNameTreeNode.
1044 Constructs a PDNonTerminalField instance from an associated PDAcroForm object. @param acroForm associated PDAcroForm object
1045 Initializes a TerminalField with an AcroForm. @param acroForm parent form to associate with this field
1046 Constructs a PDLayoutAttributeObject from a COS dictionary. @param dictionary COS dictionary containing object data
1047 Constructs a PDListAttributeObject from a COS dictionary. @param dictionary COS dictionary to initialize object with
1048 Initializes a new instance of PDPrintFieldAttributeObject from a COS dictionary.
1049 Constructs PDTableAttributeObject from COSDictionary. @param dictionary COSDictionary containing attribute data
1050 Initializes PDAppearanceStream with the given COSStream.
1051 Initializes a new instance of PDTransparencyGroup from a COSStream and ResourceCache. @param stream COSStream containing transparency group data @param cache ResourceCache for resolving resource references
1052 Adds TrueType fonts from the specified collection to the list of available fonts. @param ttcFile File object representing the TrueType font collection
1053 Adds a TrueType font implementation to the list. @param fontHeaders font metadata @param file font file @param hash font hash
1054 Adds Type1 font information from a PFB file. @param pfbFile the PFB file to process
1055 Creates a PDDestination object from a COSBase. @param base input COSBase object @return PDDestination object or throws IOException on failure
1056 Initializes a new PDCheckBox instance with the given parameters. @param acroForm PDAcroForm to associate with this checkbox @param field COSDictionary representing the field data @param parent PDNonTerminalField parent of this checkbox
1057 Initializes a PDPushButton with the specified form, field, and parent. @param acroForm PDAcroForm instance @param field COSDictionary representing the field @param parent PDNonTerminalField parent of this button
1058 Initializes radio button object with given parameters. @param acroForm parent form @param field COS dictionary for radio button @param parent non-terminal field parent
1059 Initializes a PDChoice object with given parameters. @param acroForm PDAcroForm instance @param field COSDictionary representing the choice field @param parent PDNonTerminalField parent field
1060 Initializes a PDTextField instance with its form and field details. @param acroForm the PDAcroForm that contains this text field @param field the COSDictionary representing the PDF field @param parent the PDNonTerminalField parent of this text field
1061 Saves current graphics state by cloning and pushing it onto the stack.
1062 Saves the current graphics stack and replaces it with a clone of its top element. @return The original graphics stack deque, now preserved.
1063 Initializes a new COSDocument instance using an in-memory stream cache.
1064 Returns a string representation of the COSDictionary object. If an IOException occurs, returns a formatted string with the error message.
1065 Updates clipping path to match the specified rectangular region. @param rectangle the bounding box to clip to
1066 Transforms the appearance stream's bounding box using its matrix. @param appearanceStream Appearance stream containing transformation data
1067 Initializes graphics state with a clipping path from the given page rectangle. @param page rectangle defining the initial clipping region
1068 Retrieves the integer value at index 2 from an array. @return The integer value at index 2 or a default value if not available
1069 Retrieves the value at index 3 in the underlying array. @return integer value at specified index or default value if out of bounds
1070 Retrieves the value at index 3 from the array. @return integer value stored at index 3
1071 Retrieves the value at index 4 from the array. @return the integer value at index 4
1072 Retrieves the value at index 5 from an array. @return integer value at specified index or default if not found
1073 Retrieves the value at index 2 from the array. @return The integer value stored in the third position.
1074 Retrieves left value from array at index 3. @return integer value representing left position
1075 Retrieves the value at index 3 from an underlying array. @return integer value at specified index
1076 Checks if the first element in the array fits the bounded type. @return true if matches, false otherwise
1077 Checks if bounding box type matches expected value. @return true if match, false otherwise
1078 Checks if an item fits within a bounded box. @return true if item fits in box, false otherwise
1079 Creates an empty output stream. @throws IOException if I/O error occurs
1080 Creates an output stream with specified filter. @param filter COSName representing the filter to apply
1081 Creates a thumbnail image from the given COS stream. @param cosStream input stream containing image data
1082 Retrieves the image mask as a PDImageXObject, or null if no explicit mask is defined.
1083 Retrieves the soft mask image from the PDF object. @return PDImageXObject representing the soft mask or null if not found
1084 Writes the given AffineTransform to output. @param transform the transformation matrix to serialize
1085 Begins text mode, writing the BEGIN_TEXT operator and setting flag to true. @throws IOException if an I/O error occurs
1086 Ends text mode and writes END_TEXT operator. @throws IOException if an I/O error occurs
1087 Sets text leading to the specified value. @param leading new leading value
1088 Advances to next line in text mode. @throws IOException on write error
1089 Writes a newline operation at the specified text offset. @param tx x-coordinate of the newline position @param ty y-coordinate of the newline position
1090 Saves the current graphics state. @throws IOException on write error
1091 Restores graphics state by popping color spaces and fonts from stacks.
1092 Sets stroking color to RGB value within 0..1 range. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1093 Sets stroking color using CMYK values. @param c cyan value (0-1) @param m magenta value (0-1) @param y yellow value (0-1) @param k black value (0-1)
1094 Sets the stroking color to a gray value. @param g grayscale value between 0 and 1
1095 Sets non-stroking color by writing RGB components to the output stream. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1096 Sets non-stroking CMYK color values. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1097 Sets non-stroking color to grayscale value. @param g grayscale value in range [0,1]
1098 Adds a rectangle to the current drawing context. @param x top-left X coordinate @param y top-left Y coordinate @param width rectangle width @param height rectangle height
1099 Draws a cubic Bezier curve from (x1, y1) to (x2, y2) and then to (x3, y3). @param x1 start x-coordinate @param y1 start y-coordinate @param x2 control point x-coordinate @param y2 control point y-coordinate @param x3 end x-coordinate @param y3 end y-coordinate
1100 Draws a quadratic Bezier curve to replicate the initial point. @param x2 x-coordinate of the first control point @param y2 y-coordinate of the first control point @param x3 x-coordinate of the second control point @param y3 y-coordinate of the second control point
1101 Writes a Bezier curve to the output stream. @param x1 first control point X-coordinate @param y1 first control point Y-coordinate @param x3 second control point X-coordinate @param y3 second control point Y-coordinate
1102 Moves to the specified coordinates on the canvas. @param x horizontal position @param y vertical position
1103 Adds a line segment to the current drawing path. @param x target X-coordinate @param y target Y-coordinate
1104 Performs a stroke operation on the current path, throwing an exception if in text mode.
1105 Closes and strokes the current graphics context, throwing an exception if in text mode.
1106 Fills the data with non-zero values, disallowed in text mode.
1107 Fills even and odd values in the current data set. @throws IOException if an I/O error occurs
1108 Fills and strokes the current graphical object. @throws IOException on operation failure
1109 Fills and strokes shapes in even/odd mode.
1110 Closes, fills non-zero areas, and strokes the shape. @throws IOException if an I/O error occurs
1111 Closes, fills and strokes even/odd paths in drawing mode. @throws IOException if an I/O error occurs
1112 Closes the current path in graphics context. @throws IOException on write error
1113 Clamps non-zero values in the current graphics context.
1114 Clamps even and odd paths in the current graphics context.
1115 Sets the line width to the specified value. @param lineWidth new line width in floating-point format
1116 Sets the line join style to a specified integer value. @param lineJoinStyle one of BEVEL, MITER, or ROUND (0-2)
1117 Sets the line cap style using a numeric code (0-2). @param lineCapStyle integer representing the desired line cap style (0=butt, 1=square, 2=round)
1118 Sets line dash pattern with specified values and phase. @param pattern array of float values for the pattern @param phase float value representing the phase
1119 Sets the miter limit for line drawing. @param miterLimit positive float value
1120 Closes marked content section.
1121 Sets character spacing to specified value. @param spacing desired spacing value
1122 Sets word spacing to specified value. @param spacing new word spacing value
1123 Sets horizontal scaling factor. @param scale floating-point value to set as horizontal scaling factor
1124 Sets rendering mode to specified value. @param rm RenderingMode enum value to set
1125 Sets text rise value. @param rise new text rise amount
1126 Initializes a PDRectangle from a 4-element float array. @param array input array containing rectangle coordinates
1127 Initializes a line dash pattern with the given array and phase. @param array COSArray of dash lengths @param phase initial dash phase, adjusted if negative
1128 Returns a string representation of this PDRange object. The format is "min, max", where min and max are the range's minimum and maximum values.
1129 Evaluates a type 4 function with specified input and returns an array of output values. @param input input values to be evaluated @return array of output values or throws exception if not enough output values are returned.
1130 Reads and processes a patch from the input stream. @param isFree whether to read free-form data or explicit edge points
1131 Reads a vertex from the given image input stream. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-coordinate range @param rangeY Y-coordinate range @param colRangeTab color component ranges @param matrix transformation matrix @param xform affine transform to apply @return Vertex object with transformed point and color components, or null on error
1132 Returns the colour before the current one in the sequence. @return PDGamma object representing the previous colour
1133 Returns the color after the current one in the gamma sequence.
1134 Returns start colour of gamma by fetching it from index 2. @return PDGamma object representing the start colour
1135 Returns end colour of PDGamma. @return Colour at index 3 or null if not found
1136 Retrieves and returns the blend mode instance from the provided dictionary object.
1137 Creates a Matrix object from a COSBase instance. @param base COSBase instance containing matrix data
1138 Updates the document's highest XRef object number if a higher one is found in the imported page. @param importedPage PDPage to search for high XRef numbers
1139 Retrieves a COSDictionary object by name. @param firstKey key of the first dictionary entry @param secondKey key of the second dictionary entry @return COSDictionary object or null if not found
1140 Retrieves a boolean value from the dictionary using two keys. @param firstKey first key to search in the dictionary @param secondKey second key to search in the dictionary @param defaultValue default value to return if not found @return true or false based on the dictionary's content, or defaultValue if not found
1141 Retrieves integer value from dictionary using key names. @param firstKey first key name @param secondKey second key name @param defaultValue default value to return if not found @return integer value or default value if not found
1142 Retrieves a list of filter names or values. @return List of String representing filter names or values
1143 Retrieves the color space from the PDF document. @return PDColorSpace object or null if not initialized
1144 Checks if given COSDictionary represents a catalog or FDF. @param dictionary COSDictionary to check @return true if catalog or FDF, false otherwise
1145 Checks if a COSDictionary represents a page tree node. @param node COSDictionary to inspect @return true if the dictionary is a page tree node, false otherwise
1146 Retrieves the COSName of the cryptographic filter method. @return COSName object representing the CFM method
1147 Returns the stream filter name (STM_F) from the dictionary, or IDENTITY if not found.
1148 Returns COSName filter name, defaulting to IDENTITY if STR_F is not found in the dictionary.
1149 Decrypts specified COS objects within dictionary. @param dictionary the dictionary to decrypt @param objNum object number @param genNum generation number
1150 Fetches Unicode representation of a code point using ToUnicode CMap or identity streams. @param code code point value (0-65535) @return Unicode character as String or null if not found
1151 Retrieves the subtype name from the underlying COS object. @return COSName representing the subtype, or null if not initialized
1152 Retrieves relationship name from dictionary. @return COSName object representing relationship type
1153 Retrieves the appearance state as a COSName object. @return COSName representing appearance state or null if not set
1154 Checks if the PDF document is encrypted. @return true if encrypted, false otherwise
1155 Retrieves encryption dictionary from trailer. @return COSDictionary object representing encryption settings or null if not found
1156 Initializes parsing by retrieving the PDF trailer and root dictionary.
1157 Retrieves the AcroForm content with optional fixes applied. @param acroFormFixup Optional document fixup for AcroForm @return The AcroForm object or null if not found
1158 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
1159 Retrieves document name dictionary. @return PDDocumentNameDictionary object or null if not found
1160 Retrieves the document's destinations (named pages) dictionary. @return PDDocumentNameDestinationDictionary object or null if not found
1161 Retrieves MarkInfo from the PDF document. @return PDMarkInfo object or null if not found
1162 Retrieves URI dictionary from PDF document. @return PDURIDictionary object or null if not found
1163 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
1164 Retrieves optional content properties from PDF document. @return PDOptionalContentProperties object if found, or null otherwise
1165 Retrieves a tree node containing destination names from the document catalog. @return PDDestinationNameTreeNode object or null if not found
1166 Retrieves embedded files node from user profile dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
1167 Retrieves JavaScript tree node from dictionary. @return PDJavascriptNameTreeNode object or null if not found
1168 Retrieves the PDF transition from the page dictionary. @return PDTransition object or null if not found
1169 Retrieves an indirect COSObject from the resources by kind and name. @param kind type of resources to search @param name name of the indirect object to retrieve @return COSObject instance or null if not found or invalid
1170 Retrieves an object from a dictionary based on its name. @param kind type of dictionary @param name identifier for the desired object @return COSBase object or null if not found
1171 Retrieves an iterable collection of COS names associated with the given kind. @param kind type of COS name (e.g. COSName.ANY, COSName.DOCUMENT)
1172 Retrieves a PDF page object from the COS dictionary. @return PDPage object or null if not found
1173 Retrieves a PDF page object from the underlying COS dictionary. @return PDPage object or null if not found
1174 Retrieves a PDF page object from the document. @return PDPage object or null if not found
1175 Retrieves the ID tree from the PDF structure. @return PDNameTreeNode representing the ID tree or null if not found
1176 Retrieves the parent tree node from the COS dictionary. @return PDNumberTreeNode object or null if not found
1177 Builds a map of classes from the CLASS_MAP dictionary. @return Map of class names to their corresponding PDAttributeObjects
1178 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName name of the filter to fetch @return PDCryptFilterDictionary object or null if not found
1179 Retrieves border style dictionary from annotation. @return BorderStyleDictionary object or null if not found
1180 Retrieves border effect dictionary from annotation. @return PDBorderEffectDictionary object or null if not found
1181 Retrieves the digital signature from the catalog. @return PDSignature object or null if not found
1182 Retrieves JavaScript code from FDF document. @return FDFJavaScript object or null if not available
1183 Retrieves appearance dictionary from PDF field. @return PDAppearanceDictionary object or null if not found
1184 Retrieves the appearance stream reference from the field dictionary. @return FDFNamedPageReference object or null if not found
1185 Retrieves icon fit settings from the PDF document. @return FDFIconFit object containing icon fit parameters or null if not found
1186 Retrieves additional actions from the PDF document. @return PDAdditionalActions object or null if not found
1187 Retrieves the FDF page info from the PDF document. @return FDFPageInfo object or null if not found
1188 Retrieves the named page reference from the template. @return FDFNamedPageReference object or null if not found
1189 Retrieves CID system info from the dictionary. @return PDCIDSystemInfo object or null if not found
1190 Retrieves the Panose value from the style dictionary. @return PDPanose object or null if not found
1191 Retrieves the PDF Resources object. @return PDResources object or null if not initialized
1192 Retrieves character procedures dictionary. @return COSDictionary object containing character procedures or null if not initialized
1193 Retrieves the N-level process from the PDF document. @return PDDeviceNProcess object or null if not found
1194 Retrieves the render state for a given destination. @param destination the target destination (PRINT, VIEW, or EXPORT) @return RenderState enum value or null if not found
1195 Retrieves the extended graphics state, initializing it from COS dictionary if needed. @return PDExtendedGraphicsState object or null if not initialized
1196 Retrieves PDF resources as a PDResources object. @return PDResources object or null if not available
1197 Retrieves a PDTargetDirectory object from the PDF document. @return PDTargetDirectory object or null if not found
1198 Retrieves Windows launch parameters from the action's COS dictionary. @return PDWindowsLaunchParams object or null if not found
1199 Retrieves the Target Directory from the document dictionary. @return PDTargetDirectory object or null if not found
1200 Retrieves and returns a PDAppearanceDictionary object for the current appearance. @return Appearance data as a PDAppearanceDictionary or null if not available
1201 Retrieves a PDPage object from the COS dictionary. @return PDPage object or null if not found
1202 Retrieves the border effect dictionary. @return BorderEffectDictionary object or null if not found
1203 Retrieves border style dictionary from COS object. @return Border style dictionary or null if not found
1204 Retrieves previous URI from the PDF action dictionary. @return PDActionURI object or null if not found
1205 Retrieves external data dictionary from the PDF object. @return ExternalDataDictionary object or null if not found
1206 Retrieves border style dictionary from COS object. @return PDBorderStyleDictionary object or null if not found
1207 Retrieves the Border Effect dictionary. @return PDBorderEffectDictionary object or null if not found
1208 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1209 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
1210 Retrieves additional annotation actions from the PDF document. @return PDAnnotationAdditionalActions object or null if not found
1211 Retrieves border style dictionary. @return BorderStyleDictionary object or null if not found
1212 Retrieves normal appearance entry from PDF document. @return PDAppearanceEntry object or null if not found
1213 Retrieves the filter data from the PDF document. @return PDPropBuildDataDict object representing the filter or null if not found
1214 Retrieves public security data from the dictionary. @return PDPropBuildDataDict object or null if not found
1215 Retrieves the application data as a PDPropBuildDataDict object. @return PDPropBuildDataDict object or null if not found
1216 Returns the MDP (Measurement Data Package) as a PDSeedValueMDP object. @return PDSeedValueMDP object or null if not found
1217 Retrieves seed value certificate from PDF document. @return PDSeedValueCertificate object or null if not found
1218 Retrieves time stamp from PDF document. @return PDSeedValueTimeStamp object or null if not found
1219 Retrieves the PDF property build object from the dictionary. @return PDPropBuild object or null if not found
1220 Retrieves the structure element from the PDF document. @return PDStructureElement object or null if not found
1221 Checks if this COS object has children. @return true if it has children, false otherwise
1222 Retrieves default resources for the PDF document. @return PDResources object or null if unavailable
1223 Retrieves additional actions for a PDF form field. @return PDFormFieldAdditionalActions object or null if not available
1224 Retrieves PDSignature object from COS dictionary. @return PDSignature object or null if not found
1225 Retrieves default signature object from PDF document. @return PDSignature object or null if not found
1226 Retrieves seed value from the underlying PDF document. @return PDSeedValue object or null if not found
1227 Retrieves the measure dictionary from the COS object. @return PDMeasureDictionary object or null if not found
1228 Retrieves thread information as a PDDocumentInformation object. @return non-null PDDocumentInformation if found, or null otherwise.
1229 Retrieves the first bead from a PDF thread. @return PDThreadBead object or null if not found
1230 Retrieves the thread object associated with this document. @return PDThread object or null if not found
1231 Returns the next bead in the thread. @return PDThreadBead object representing the next bead or null if none exists
1232 Retrieves the previous thread bead in the sequence. @return PDThreadBead object representing the previous bead or null if not found
1233 Retrieves the page object associated with this PDF element. @return PDPage object or null if not found
1234 Retrieves PDF metadata from the underlying COS stream. @return PDMetadata object or null if not found
1235 Retrieves the PDMetadata object associated with this page. @return PDMetadata object or null if not available
1236 Returns the differences COS stream.
1237 Retrieves font file as a PDStream object. @return PDStream object containing the font file or null if not found
1238 Retrieves font file from PDF document. @return PDStream object or null if not found
1239 Retrieves font file from PDF document. @return PDStream object containing font data or null if not found
1240 Retrieves the CID set from the dictionary and returns it as a PDF stream. @return PDStream object containing the CID set or null if not found
1241 Retrieves the sound stream from the action. @return COSStream object containing sound data
1242 Retrieves the normal icon as a PDFormXObject from the COS object. @return PDFormXObject representation of the icon or null if not found
1243 Retrieves rollover icon as a PDFormXObject. @return PDFormXObject object or null if not found
1244 Retrieves alternate icon as a PDFormXObject. @return PDFormXObject object or null if not found
1245 Retrieves the document ID from the trailer as a COS array. @return COSArray containing the document ID or null if not found
1246 Retrieves a list of output intents from the PDF document. @return List of PDOutputIntent objects
1247 Retrieves a list of thread beads from the PDF page. @return List<PDThreadBead> containing individual thread bead objects
1248 Retrieves a list of PDF viewports from the page's COS array. @return List of PDViewportDictionary objects or null if not found
1249 Retrieves a list of child nodes for the current node. @return List of PDNameTreeNode objects or null if no children exist
1250 Retrieves a map of user names to their corresponding values. @return Map<String, T> or null if no names are present
1251 Retrieves a list of child nodes for the current node. @return List of PDNumberTreeNode objects or null if empty
1252 Retrieves a map of indexed values from the COS array. @return Map of integers to COSObjectables or null if empty
1253 Retrieves the upper limit from the 'LIMITS' array. @return Upper limit value or null if not found
1254 Retrieves the lower limit from the node's limits array. @return Lower limit value or null if not found
1255 Retrieves an array of range values. @return COSArray object containing range values
1256 Retrieves the array of domain values. @return COSArray containing domain information or null if not initialized
1257 Retrieves the document's size as a COS array. @return COSArray object containing document size, or null if not initialized
1258 Retrieves the decoded values as a COSArray. @return COSArray containing decoded values or default range values if not found
1259 Retrieves the array of functions from the underlying COS object. @return COSArray containing function definitions or null if not initialized
1260 Retrieves the bounding box array. @return COSArray containing bounding box information or null if not set
1261 Retrieves the encoded array from the COS object. @return the COSArray representing the encoded data or null if not set
1262 Retrieves a list of owner user properties. @return List of PDUserProperty objects
1263 Checks if an edge is attached based on the ATTACHED COSArray. @param edge edge to check for attachment @return true if edge is attached, false otherwise
1264 Retrieves the color associated with this object. @return Color object or null if not set
1265 Retrieves the interior color based on annotation data. @return Color object or null if not applicable
1266 Converts annotated COSArray to a float array. @return float array representation of the annotated data or null if invalid
1267 Retrieves the ink list from the annotation. @return List of float arrays representing ink points or null if not found
1268 Returns line data as a float array. @return Line data or null if not found
1269 Retrieves the line ending style from the annotation. @return string representation of the line ending style or LE_NONE if not found
1270 Returns the end point style of the annotation line. @return The style (e.g., LE_NONE, LE_SQUARE, etc.) or the default value if not set.
1271 Retrieves the interior color from annotation. @return Color object or null if not present
1272 Retrieves horizontal caption offset from annotation. @return horizontal caption offset (0 if not found)
1273 Retrieves vertical offset of caption from annotation's CO array. @return Vertical offset value (0 if not found)
1274 Returns an array of vertices. @return Array of float values or null if not found
1275 Retrieves the interior color from annotation. @return Color object or null if not found
1276 Returns an array of vertices. @return Array of floats or null if not found
1277 Retrieves the start point ending style of an annotation. @return style name (e.g. LE_NONE, LE_SQUARE, etc.) or default value if not found
1278 Retrieves the line ending style from annotation properties. @return string value of the line ending style (e.g. LE, LE_NONE)
1279 Retrieves interior color from annotation. @return Color object or null if not found
1280 Retrieves the interior color as a Color object. @return Color object or null if no color is specified
1281 Retrieves the quad points coordinates. @return float array of coordinates or null on failure.
1282 Retrieves the ID value from the COS array. @return COSArray containing the ID value
1283 Retrieves a list of FDF fields from the underlying data structure. @return List of FDFField objects or null if no fields exist
1284 Retrieves a list of FDFPages from the COSArray. @return List<FDFPage> or null if no pages exist
1285 Retrieves a list of child fields from the parent field's KIDS array. @return List<FDFField> or null if no children exist
1286 Retrieves a list of options from the field's COSArray. @return List of option elements or null if not available
1287 Retrieves a list of FDF templates from the page. @return List of FDFTemplate objects or null if not found
1288 Retrieves a list of FDF fields from the template. @return List<FDFField> if successful, or null otherwise
1289 Returns the list of widths, either from cached data or by parsing the WIDTHS key.
1290 Returns the transformation matrix. @return A 3x3 or identity matrix as a float array.
1291 Retrieves the list of component names from the dictionary. @return List of String component names or empty list if not found
1292 Retrieves and caches the background COS array, if not already loaded. @return The background COS array or null if not found
1293 Retrieves and returns the domain as a COSArray object.
1294 Retrieves the EXTEND array from the underlying COS object. @return COSArray representing the EXTEND attribute or null if not available
1295 Retrieves the domain as a COS array.
1296 Retrieves COS array of coordinates. @return COSArray object containing coordinates or null if not initialized
1297 Retrieves and returns an array of decode values. @return COSArray object containing decode values
1298 Retrieves and initializes the PDF font setting. @return PDFontSetting object or null if not set
1299 Retrieves COS fields array. @return COSArray containing field data or null if not available
1300 Retrieves the array of field names. @return COSArray containing field names
1301 Returns an array of rectangle differences.
1302 Returns an array of rectangle differences.
1303 Retrieves and converts the callout array to a float array. @return float[] containing callout data or null if not found
1304 Retrieves the list of inks as a 2D array of floats. @return 2D array of ink properties or empty array if not available
1305 Retrieves line data as a float array. @return float array representation of the line or null if not found
1306 Retrieves the start point ending style from the COS array. @return starting and ending style of a line segment or LE_NONE if not found
1307 Returns the ending style of a PDF end point. @return The ending style as a string or LE_NONE if not found
1308 Retrieves horizontal offset from caption array. @return Horizontal offset value in pixels, or 0 if not set.
1309 Retrieves the vertical offset of the caption. @return The vertical offset value or 0 if not available
1310 Retrieves quad points as a float array from the COS object. @return Quad point coordinates or null if not available
1311 Retrieves an array of vertices from the COS object.
1312 Retrieves the path coordinates as a 2D array of floats. @return 2D array or null if path is unavailable
1313 Retrieves the starting point ending style from COSArray LE. @return Ending style as a string or default value if not found.
1314 Retrieves the ending style of a PDF annotation line end point. @return String representing the ending style (e.g. LE_NONE) or default if not found
1315 Returns an array of vertex coordinates. @return array of floats representing 3D vertices or null if not found
1316 Retrieves differences from rectangle margins as a float array.
1317 Retrieves quad points from COS array. @return float array of quad points or null if not found
1318 Retrieves list of sub-filter values from the dictionary. @return List of String values or empty list if not found
1319 Retrieves a list of digest methods from the underlying dictionary. @return List of String values representing supported digest methods
1320 Retrieves a list of reasons from the dictionary. @return List of reason strings or empty list if not found
1321 Retrieves the list of legal attestations from the document. @return List of String values or empty list if not found
1322 Retrieves subject data from the dictionary as a list of byte arrays. @return List of byte arrays or null if not found
1323 Retrieves a list of string key usages from the dictionary. @return List of strings representing key usage or null if not found
1324 Retrieves a list of issuer certificates. @return List of byte arrays representing issuer certificates or null if not found
1325 Retrieves OID as a list of byte arrays.
1326 Retrieves the byte range from the dictionary. @return array of integers representing the byte range or empty array if not found
1327 Retrieves the calculation order of PDFields from the dictionary. @return List of PDField objects in calculation order
1328 Retrieves a list of selected option indices.
1329 Retrieves an array of X number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1330 Retrieves an array of Y number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1331 Retrieves an array of distance dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1332 Retrieves an array of PDF area dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1333 Retrieves an array of angle dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1334 Retrieves line slopes from the document. @return array of PDNumberFormatDictionary objects or null if not found
1335 Retrieves origin coordinates of the current coordinate system. @return array of two floats (x, y) or null if not found
1336 Retrieves visibility policy as COSName. @return COSName enum value representing visibility policy
1337 Retrieves a 64-bit integer value from a PDF document by key. @param key unique key to identify the value
1338 Retrieves a Long value from the COSName cache. @param key unique identifier
1339 Retrieves a long value from configuration using the given key. @param key configuration key @param defaultValue default value to return if not found @return long value associated with the key or the default value
1340 Sets the start xref value and resolves the trailer object. @param startxrefBytePosValue unique byte position of the start xref
1341 Retrieves a float value associated with the given key from PDF metadata. @param key unique key to retrieve the float value for
1342 Retrieves a float value from the COSName. @param key unique identifier of the COSName
1343 Retrieves and returns a float value from the PDF dictionary using the given key. If the key is not found, returns the specified default value. @param key unique dictionary key @param defaultValue fallback float value if key is missing
1344 Retrieves and returns the user's unit value (defaulting to 1.0 if not set). @return user's unit value or default value of 1.0 if not found
1345 Retrieves the guideline width from the internal dictionary. @return guideline width as a floating-point value
1346 Retrieves opacity value from annotation. @return opacity value between 0 and 1
1347 Retrieves font weight value from dictionary. @return Font weight value (0 by default)
1348 Retrieves the italic angle value from font dictionary. @return italic angle in degrees or default 0 if not found
1349 Retrieves the ascent value from the dictionary. @return The user's elevation gain in feet or zero if not found
1350 Retrieves descent value from dictionary. @return Descent value as a float or default 0 if not found.
1351 Retrieves the leading value from the dictionary. @return The leading value as a float or default 0 if not found.
1352 Returns the cap height of a font. @return the cap height value or recalculated if previously invalid
1353 Returns the x-height value or calculates it if initially unknown. @return the absolute x-height value
1354 Retrieves the stem velocity value from the dictionary. @return Stem velocity as a floating-point number
1355 Retrieves stem height from dictionary. @return stem height as a floating-point value or default 0 if not found
1356 Retrieves the average width value from configuration. @return Average width value or 0 if not set
1357 Retrieves maximum width value from configuration dictionary. @return Maximum width value as a float or default 0 if not found.
1358 Retrieves missing width value from configuration dictionary. @return Missing width value or 0 if not found.
1359 Retrieves gamma value from the dictionary. @return Gamma value as a float (default to 1.0 if not found)
1360 Retrieves the X-step value from COS object. @return X-step value as a float or default to 0 if not found
1361 Retrieves the Y-step value from the COS object. @return the Y-step value or 0 if not found
1362 Returns the audio volume as a value between -1 and 1. @return Volume value or clamped to 1 if out of range
1363 Retrieves leader line length from COS object. @return Leader line length in pixels or 0 if undefined
1364 Retrieves the leader line extension length from COS object. @return the leader line extension length in floating-point value
1365 Retrieves the leader line offset length from COS object. @return The leader line offset length as a floating-point number.
1366 Retrieves constant opacity value from COS object. @return Constant opacity as a float value.
1367 Retrieves the width value from the PDF document. @return width as a floating-point number (defaulting to 1 if not found)
1368 Retrieves duration value from COS object. @return duration as a floating-point number
1369 Retrieves the fly scale value from COS object. @return Fly scale value as a float
1370 Initializes extraction for specified regions on a given PDF page. @param page PDPage object to extract text from
1371 Retrieves color space of the current document.
1372 Creates a PDPropertyList object based on the COSDictionary type. @param dict COSDictionary containing the property list data
1373 Retrieves line width value from configuration. @return line width as float or null if undefined
1374 Retrieves the miter limit value. @return Miter limit as a float or null if not set
1375 Retrieves flatness tolerance as a float value. @return flatness tolerance as a float or null if not available
1376 Retrieves smoothness tolerance value from configuration. @return Smoothness tolerance as a float or null if not set
1377 Retrieves stroking alpha constant. @return alpha value as Float or null if undefined
1378 Retrieves non-stroking alpha constant as a float value. @return Non-stroking alpha constant as a float, or null if not found
1379 Retrieves offsets for COS objects in batch search results. @return Map of COS object keys to their corresponding offsets
1380 Adds an object to be written and updates relevant metadata. @param obj COSBase object to write
1381 Writes reference information to standard output. @param obj COSBase object containing key data
1382 Saves this document to the specified OutputStream. @param output target output stream
1383 Clears all objects and triggers an update of the underlying state.
1384 Removes entry at specified index and updates update state. @param i zero-based index of entry to remove @return removed COSBase object or null if not found
1385 Removes a COSBase object from the collection and updates the update state if successful. @param o COSBase object to remove @return true if removal was successful, false otherwise
1386 Clears all items and triggers an update.
1387 Removes an item from storage by its COSName key. @param key unique identifier of the item to be removed
1388 Updates the update state when origin differs. @param updateState COSUpdateState object to be updated
1389 Resets the object to null, updating the state if a non-null value was present.
1390 Sets the origin document state and updates the update info as needed. @param originDocumentState new origin document state @param dereferencing whether to dereference the update info
1391 Returns string at specified index (null if none). @param index index of desired string
1392 Retrieves name as a string using COSName.getPDFName(). @param key input key to be converted
1393 Returns name as a string with default value if not found. @param key COSName object to retrieve @param defaultValue fallback value if retrieval fails @return Name as a string, or default value if null
1394 Checks if the given offset in a PDF file points to a valid XRef stream. @param startXRefOffset offset value to check @return true if offset points to an XRef stream, false otherwise
1395 Retrieves the current page mode from the root element. @return PageMode enum value or USE_NONE if not specified
1396 Retrieves the page layout from COS and returns a PageLayout enum value. @return PageLayout enum value (defaulting to SINGLE_PAGE if invalid)
1397 Retrieves the application version as a string. @return The version of the application or null if unknown.
1398 Retrieves the "trapped" status as a string.
1399 Retrieves style value from root element.
1400 Retrieves the type of COS object associated with this instance. @return The name of the TYPE attribute as a string, or null if not found
1401 Retrieves the owner name from the COS object.
1402 Retrieves the structure type from the COS object. @return The name as string of the COS object at S attribute.
1403 Creates a PD structure node based on the provided COS dictionary. @param node COS dictionary containing node type @return PDStructureNode object or throws exception if invalid
1404 Retrieves the type of COSObject. @return Type string or null if not found
1405 Retrieves the name as a string from the COS object. @return The name of the object as a string.
1406 Retrieves the user's language as a string. @return The language, or null if properties are not set.
1407 Retrieves the type of an entity. @return COSName object representing the entity's type
1408 Retrieves subtype name as a string. @return Subtype name or null if not available
1409 Retrieves filter name from underlying dictionary. @return filter name as string or null if not found
1410 Returns the sub-filter name from the underlying dictionary. @return sub-filter string value or null if not found
1411 Creates an FDFAnnotation object from the given COSDictionary. @param fdfDic COS dictionary containing annotation data
1412 Retrieves the intent from the current annotation. @return Intent string or null if not set
1413 Retrieves line ending style from annotation. @return Line ending style as string (e.g., "LF", "CRLF") or null if not found
1414 Retrieves the software version from the catalog. @return The current software version as a string.
1415 Retrieves the character encoding used in the PDF document. @return encoding scheme as a string (e.g. "PDFDocEncoding")
1416 Retrieves scale option value as string, falling back to default if not found.
1417 Returns scale type, either from COS or using default proportional value.
1418 Retrieves base font name from dictionary. @return Font name or empty string if not found
1419 Retrieves the type of an entity from the dictionary.
1420 Retrieves subtype name from dictionary. @return string representation of subtype or null if not found
1421 Retrieves font name from underlying dictionary. @return Font name as a string or null if not available
1422 Retrieves font stretch value from dictionary. @return font stretch string or null if not found
1423 Retrieves the base font name from the dictionary. @return string representation of the base font or null if not found
1424 Retrieves the base font name from the document dictionary. @return Base font name or null if not found
1425 Retrieves the base font from the dictionary. @return The name of the base font as a string or null if not found
1426 Retrieves the base font name from the dictionary. @return The base font name as a string or null if not found
1427 Checks if the current subtype matches 'NChannel'. @return true if subtype is 'NChannel', false otherwise
1428 Retrieves the type of an action. @return The name of the TYPE as a string
1429 Retrieves subtype of an action based on its name. @return Subtype string or null if not found
1430 Creates a PDAction object based on the provided COSDictionary. @param action dictionary containing action details @return PDAction object or null if invalid
1431 Retrieves subtype name from underlying COS object. @return subtype name as string or null if not available
1432 Retrieves caption positioning from COS object. @return Caption positioning string or null if not available
1433 Retrieves the COS Intent from the current COS Object.
1434 Retrieves the subtype name from the COS object. @return subtype name as a string or null if not found
1435 Retrieves name from dictionary. @return name as string or null if not available
1436 Retrieves filter name from configuration dictionary. @return Filter name as string or null if not found
1437 Retrieves the URL type from the dictionary. @return string representation of the URL type
1438 Retrieves filter name from configuration. @return Filter name as string or null if not set
1439 Retrieves the sub-filter name from the dictionary. @return The sub-filter name as a string, or null if not found
1440 Retrieves field type from COS object. @return Field type string or null if not found
1441 Retrieves the name of the COS object. @return The name as a string or null if not available
1442 Retrieves duplex printing preference as a string. @return Duplex printing preference (e.g. "Horizontal", "Vertical") or null if not set
1443 Retrieves string value from PDF using provided key. @param key unique identifier for the desired string @return The associated string value or null if not found
1444 Returns string value associated with COSName key or default value if not found. @param key unique COSName identifier @param defaultValue default string to return if key is unknown
1445 Retrieves the language attribute from the COS (Character Object Specification). @return The language as a string or null if not available.
1446 Retrieves the title from the information map. @return The title string or null if not found
1447 Retrieves author information from metadata. @return Author name as a string or null if not available
1448 Retrieves the subject from metadata. @return subject string value
1449 Retrieves keywords from the stored user data. @return The keywords string or null if not available
1450 Retrieves creator name from metadata. @return Creator's name or null if not available
1451 Retrieves the producer name from the data source. @return The producer name as a string or null if not found
1452 Retrieves the prefix from the root node. @return string value of prefix or empty string if not set
1453 Retrieves file Unicode string from COS. @return the Unicode string or null if not available
1454 Retrieves file path from underlying storage system. @return File path as a string or null if not available
1455 Retrieves the DOS file name from the COS.
1456 Retrieves file's MAC address. @return MAC address string or null if not available
1457 Retrieves file system path in Unix format.
1458 Retrieves file description from configuration. @return file description string or null if unavailable
1459 Retrieves element identifier as a string. @return unique ID of the COS object
1460 Retrieves document title from COS (Core Object Structure). @return document title as a string or null if not set
1461 Retrieves the language of the COS object. @return The language as a string or null if not set
1462 Retrieves alternate description from COS object. @return Alternate description string or null if not set
1463 Retrieves the expanded form of a COS object. @return Expanded form as a string or null if not available
1464 Retrieves the actual text from the COS object. @return Actual text as a string or null if not available
1465 Retrieves and formats a string value from COS Object. @return Formatted string or null if not available
1466 Retrieves actual text from properties. @return Actual text as string, or null if properties are absent
1467 Retrieves alternate description from properties. @return string value or null if not set
1468 Retrieves the expanded form from properties. @return Expanded form string or null if properties are null
1469 Returns the date value from annotation.
1470 Retrieves the name from annotation. @return user's name as a string or null if not present
1471 Retrieves contents string from annotation. @return contents string or null if not applicable
1472 Retrieves title from annotation.
1473 Retrieves subject from annotation. @return subject string value
1474 Retrieves the symbol from annotation. @return The symbol as a string or null if not available
1475 Retrieves rotation annotation value. @return Rotation angle as string or null if not present
1476 Retrieves default appearance from annotations. @return Default appearance string or null if not available
1477 Retrieves default style value from annotation. @return Default style string or null if not available
1478 Retrieves caption style from annotation. @return CSS style string for caption element
1479 Retrieves the state value from annotation.
1480 Retrieves state model string from annotation. @return State model string or null if not found
1481 Retrieves status value from FDF. @return user status as string or null if not available
1482 Retrieves the target value from the COS. @return The target string or null if not set
1483 Retrieves the partial field name from the COSName enum. @return the T value of the COSName enum as a string
1484 Retrieves the name from the COS reference. @return The user's name as a string or null if not available
1485 Retrieves font family from configuration dictionary. @return Font family string or null if not found
1486 Retrieves the character set from the dictionary. @return The character set string or null if not found
1487 Retrieves the name from the dictionary. @return The user's name or null if not found
1488 Retrieves an array of group names from the OCGS dictionary. @return Array of group name strings or empty array if not found
1489 Retrieves value of F from COSName enum. @return string representation or null if not found
1490 Retrieves string value associated with COSName.D. @return The retrieved string or null if not found.
1491 Retrieves the value of COSName.O as a string.
1492 Retrieves string value from COS using key P.
1493 Retrieves the URI as a string from the PDF action dictionary. @return URI string or null if not found
1494 Retrieves filename from dictionary. @return filename string
1495 Retrieves the annotation name from the dictionary. @return The annotation name as a string.
1496 Retrieves filename from parameters. @return filename string or null if not available
1497 Retrieves directory path from parameters. @return Directory path as string or null if not available
1498 Retrieves execute parameter value from parameters map. @return execute parameter string or null if not found
1499 Retrieves contents string from dictionary. @return Contents string associated with COSName.CONTENTS key
1500 Retrieves the modified date as a string from COS.
1501 Retrieves the annotation name from the COS object.
1502 Retrieves the default appearance string from COS object. @return the default appearance value as a string or null if not set
1503 Retrieves default style string from COS object. @return Default style string or null if not available
1504 Retrieves title from COS object. @return Title string or null if not available
1505 Retrieves the subject from the COS object. @return subject string or null if not available
1506 Retrieves the state of the COS object. @return the current state as a string
1507 Retrieves the state model string from COS.
1508 Retrieves the normal caption from the COS object. @return Normal caption as a string or null if not available
1509 Retrieves rollover caption from COS object. @return string representation of rollover caption or null if not found
1510 Retrieves alternate caption from COS object. @return Alternate text or null if not available
1511 Retrieves date string from dictionary. @return Date value as a string or null if missing
1512 Retrieves the operating system from the PDF document's metadata. @return OS name as a string, or an empty string if not found
1513 Extracts a list of subject DN dictionaries from the X.509 certificate.
1514 Retrieves the URL from the dictionary. @return The URL string as stored in the dictionary.
1515 Retrieves URL from dictionary. @return URL string associated with COSName.URL key
1516 Retrieves the name from the dictionary. @return The user's name as a string or null if not found
1517 Retrieves location from application settings. @return Location string or empty string if not set
1518 Retrieves the reason from the dictionary. @return The stored reason as a string or null if not set
1519 Retrieves contact information from the dictionary. @return String representation of contact info or null if missing
1520 Retrieves document title from COS (Core Object Service) object. @return Document title as a string or null if not set
1521 Retrieves partial name from dictionary. @return Partial name as string or null if not found
1522 Retrieves alternate field name from dictionary. @return String representation of COSName.TU value
1523 Retrieves mapping name from dictionary. @return The TM key value as string or null if not found
1524 Retrieves default style string from COS object. @return Default style string or null if not available
1525 Retrieves the scale ratio from the COS object. @return scale ratio as a string or null if not available
1526 Converts role map dictionary to a Java Map. @return A Map of String to Object representing the role map, or an empty Map if not found
1527 Retrieves a list of string options from the COS dictionary.
1528 Retrieves display values from options dictionary. @return list of option display values
1529 Retrieves a string value from inheritable attribute 'V' or returns 'Off' if not found. If value is a numeric index, returns corresponding export value; otherwise, returns the value as-is.
1530 Retrieves list of values for V. @return List of String values
1531 Retrieves default value as a list of strings. @return List of default values or null if not found
1532 Initializes an empty PDSimpleFileSpecification object. @param none
1533 Sets the file name to the specified value. @param fileName unique identifier of the file to set
1534 Initializes a new PD Named Destination with the given destination string. @param dest destination string to be used in the PDF document.
1535 Sets a named destination for the PDF output. @param dest the name of the destination, or null to clear it
1536 Validates and returns the generation number from input. @throws IOException if out-of-range generation number is detected
1537 Validates and returns a user-provided object number. @throws IOException if the number exceeds 10 digits or is negative
1538 Retrieves user password based on the encryption revision. @param ownerPassword existing password hash @param owner unique user identifier @param encRevision encryption revision (e.g. REVISION_5, REVISION_6) @param length password length @return password bytes or empty array for certain revisions
1539 Initializes TensorPatch object with control points and color data. @param tcp array of Point2D objects representing control points @param color 2D float array representing image color values
1540 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input input stream to encrypt @param output output stream for encrypted data
1541 Returns the current FontProvider instance. If none exists, it is initialized with the default provider.
1542 Assembles shaded triangles from the given 2D patch of color-coordinated points. @param patchCC 2D array of CoordinateColorPair objects representing the patch @return List of ShadedTriangle objects or empty list if none found
1543 Creates a PDICC color space from the provided ICC array. @param iccArray ICC array to base the color space on @param resources PDF resources for indirect object caching @return PDICC color space object or null if not found
1544 Initializes Coons Patch with control points and color data. @param points array of 2D control points @param color array of triangle colors
1545 Processes a single TextPosition, potentially suppressing duplicates and merging diacritics. @param text the TextPosition to process
1546 Processes a TextPosition by determining whether to show the character, suppressing duplicate overlapping text, and assigning it to an article division. @param text TextPosition object to process
1547 Converts COSString to Calendar object. @param text COSString containing date information
1548 Begins marked content in PDF output. @param tag COSName identifier of the marked content
1549 Begins marked content sequence with specified MCID. @param tag COSName for the marked content @param mcid unique marked content identifier
1550 Sets marked content point using the specified COSName. @param tag COSName object representing a named element in a PDF document
1551 Writes a COSString to an OutputStream. @param string COSString object containing data to be written @param output OutputStream where the data will be written
1552 Writes string representation of byte array to output stream. @param bytes byte array containing string data @param output target output stream
1553 Initializes the PDFGraphicsStreamEngine with a PDPage object. @param page the PDPage to be processed
1554 Initializes an instance of PDFMarkedContentExtractor with no input stream.
1555 Initializes PDF text stripper with default settings. Disables separation by beads.
1556 Retrieves a nested object from the current COSBase instance using a path string. @param objPath path to the desired object, using array indices or dictionary keys
1557 Retrieves attribute value from dictionary by name. @param attrName name of the attribute to retrieve @return COSBase object representing attribute value or null if not found
1558 Retrieves the attribute value from the dictionary or returns a default value. @param attrName name of the attribute to fetch @param defaultValue value to return if attribute is not found
1559 Checks if COS dictionary object exists with specified name. @param name name of the object to search for @return true if object found, false otherwise
1560 Retrieves an array of string values from the COS dictionary. @param name key to fetch array for @return array of strings or null if not found
1561 Retrieves name as a single value or an array of names. @param name key to fetch @param defaultValue default value to return if not found @return String or array of Strings or null if not found
1562 Retrieves a numeric or string value from the dictionary, returning the default value if not found. @param name key to look up in the dictionary @param defaultValue value to return if lookup fails
1563 Retrieves a number or array of numbers from the dictionary. @param name key to search for @param defaultValue default value to return if not found @return float, float[] or null/defaultValue if not found
1564 Retrieves a color object by its name. @param name unique color identifier @return PDGamma color object or null if not found
1565 Creates a unique key for a COS dictionary. @param kind COSDictionary type @param prefix base key name prefix @return generated COSName key or null if not possible
1566 Sets an integer value at the specified index in the object array. @param index array index to update @param intVal new integer value to set
1567 Parses and returns a COSNumber object for the given string representation. @param number string to parse (e.g. "123", "-0.5", "+1")
1568 Appends a kid to the current collection using their MCID. @param mcid unique identifier of the kid to append
1569 Retrieves COS integer value representing degrees. @return COS integer object or null if invalid
1570 Parses a hexadecimal string from the input source. @return COSString object representing the parsed data or null if invalid
1571 Constructs an empty PDRectangle with default coordinates.
1572 Constructs a PDRectangle with specified width and height. @param width rectangle's width @param height rectangle's height
1573 Returns a PDRectangle object representing the bounding box of this element.
1574 Calculates the difference rectangle between the annotation and bounding box rectangles.
1575 Creates a padded version of the given rectangle. @param rectangle original rectangle @param padding amount to add around the rectangle @return new rectangle with added padding
1576 Computes a new PDRectangle with modified coordinates based on provided differences. @param rectangle original PDRectangle @param differences array of 4 floats: [x, y, width, height] to modify the rectangle @return updated PDRectangle or original if input is invalid
1577 Updates a PDRectangle with specified differences. @param rectangle original rectangle @param differences array of 4 floats [dx, dy, dw, dh]
1578 Applies uniform padding to a PDF rectangle. @param box the original rectangle @param padding the amount of padding to apply @return the padded rectangle with adjusted dimensions
1579 Initializes a new PDF cross-reference stream from the given COS document. @param cosDocument source COS document to create the stream from
1580 Creates a PDObjectStream instance from the given PDDocument. @param document input PDF document
1581 Initializes a new PDStream instance from the given PDDocument. @param document PDDocument instance to create COSStream from
1582 Initializes a new PDStream instance from the given COSDocument. @param document the parent COSDocument to create the stream from
1583 Creates a PDF stream from the given document and input stream. @param doc PDDocument object @param input InputStream to read from @param filters COSBase filter settings
1584 Creates a COS stream from the given input stream. @param document PDDocument instance @param rawInput InputStream containing raw data
1585 Encodes input stream into an output stream using specified parameters. @param input input data to be encoded @param encoded output stream for encoded data @param parameters dictionary of encoding parameters @param index index parameter (purpose unknown)
1586 Initializes a new instance of the PDDefaultAttributeObject class.
1587 Initializes a new PDUserAttributeObject instance with predefined owner set to USER_PROPERTIES.
1588 Initializes a new instance of the PDStandardAttributeObject class.
1589 Constructs an empty PDOutlineItem instance.
1590 Initializes a new instance of the PDVariableText class from the given PDAcroForm.
1591 Initializes a new instance of PDExportFormatAttributeObject from a COS dictionary.
1592 Retrieves the appearance stream for this entry. @return PDAppearanceStream object or throws exception if not applicable
1593 Returns a subdictionary's appearance streams. @return Map of COSName to PDAppearanceStream
1594 Creates a PDXObject instance from the given COSBase and resources. @param base COS object containing the XObject data @param resources PDResources for caching and resolving resources @return PDXObject instance or null if not supported
1595 Adds a TrueType font from the specified file. @param ttfFile file containing the font data
1596 Initializes a new instance of PDShadingType6 from a COS dictionary. @param shadingDictionary COS dictionary containing type 6 shading data
1597 Initializes PDShadingType7 instance from COS dictionary. @param shadingDictionary COS dictionary containing type-specific data
1598 Retrieves a PDDestination object by name. @param name unique destination identifier @return PDDestination object or null if not found
1599 Retrieves PDDestination object from COS dictionary.
1600 Retrieves the destination object from COS dictionary. @return PDDestination object or null if not found.
1601 Retrieves a PD destination object from the COS dictionary. @return PDDestination object, or null if not found
1602 Retrieves the destination COS object and returns it as a PDDestination.
1603 Initializes a new PDComboBox instance. @param acroForm the associated AcroForm @param field the underlying field dictionary @param parent the parent non-terminal field
1604 Initializes a new instance of the PDListBox class. @param acroForm AcroForm object to associate with @param field COSDictionary representing the form field @param parent PDNonTerminalField that contains this list box
1605 Constructs a COSParser instance using provided parameters. @param source source data to parse @param password encryption password (if applicable) @param keyStore InputStream containing cryptographic keys @param keyAlias alias of the key used for decryption
1606 Creates an output stream using the underlying stream.
1607 Writes byte array to PDAppearanceStream output stream. @param data byte array to write @param appearanceStream output stream for COS object
1608 Creates a content stream for the given PDAppearanceStream. @param appearance appearance stream to create content stream from @param compress whether to enable compression (true) or not (false)
1609 Sets text transformation matrix for rendering. @param matrix 2D matrix to apply as affine transform
1610 Applies a non-text affine transformation to the current object. @param matrix Transformation matrix (must be applied in graphics mode)
1611 Retrieves the bounding box of the PDF page. @return PDRectangle object containing the bounding box coordinates or null if not set
1612 Retrieves the page box dimensions. @return PDRectangle object or null if not available
1613 Retrieves PDF rectangle annotation from the document. @return PDRectangle object or null if not found
1614 Retrieves the fringe rectangle from annotations. @return PDRectangle object or null if not found
1615 Retrieves the fringe rectangle from annotation. @return PDRectangle object or null if not found
1616 Retrieves fringe rectangle from annotation. @return PDRectangle object or null if not found
1617 Retrieves fringe rectangle from annotation. @return PDRectangle object or null if not available
1618 Retrieves the font bounding box as a PDRectangle object. @return PDRectangle object or null if not available
1619 Retrieves font bounding box information. @return PDRectangle object or null if not available
1620 Retrieves bounding box of the PDF object. @return PDRectangle object or null if not available
1621 Retrieves bounding box (BBOX) as a rectangle from the PDF page. @return PDRectangle object or null if not available
1622 Retrieves the bounding box of this PDF object. @return PDRectangle instance or null if not available
1623 Retrieves the page rectangle from the dictionary. @return PDRectangle object or null if not found
1624 Calculates the rectangle difference from the COS array. @return PDRectangle object or null if not found
1625 Calculates and returns the rectangle representing differences.
1626 Retrieves the bounding box of a page. @return PDRectangle object representing the bounding box or null if not set
1627 Retrieves a rectangle object from the COS Array. @return PDRectangle object or null if not found
1628 Sets the line dash pattern using the specified array and phase. @param array COSArray containing dash lengths @param phase initial phase of the pattern
1629 Returns the line dash pattern for this PDF object. @return PDLineDashPattern object or null if undefined
1630 Generates a stencil image from the given PDImage and Paint. @param pdImage input image @param paint paint to use for masking @return BufferedImage representing the stencil image
1631 Retrieves matrix from COS object. @return Matrix object or null if not found
1632 Retrieves a matrix from COS object. @return Matrix object or null if not available
1633 Retrieves matrix from COS object. @return Matrix object or null if not found
1634 Retrieves an inheritable attribute from a PDF node or its parent. @param node the PDF node to check @param key the name of the attribute to fetch @return the attribute value if found, otherwise null
1635 Retrieves boolean value from COS by key, returning default if not found. @param key unique identifier in COS @param defaultValue default boolean value to return if key is missing
1636 Retrieves integer value from configuration by key; falls back to default if not found. @param key COSName representing the configuration key @param defaultValue integer value to return if key is not present in config
1637 Returns integer value associated with two specified keys. @param firstKey primary key @param secondKey secondary key
1638 Decodes and initializes a PDInlineImage object from provided data. @param parameters COSDictionary containing image parameters @param data byte array representing the image data @param resources PDResources associated with the image
1639 Returns image file suffix based on applied filters. @return Suffix ("png", "jpg", or "tiff") depending on filter types.
1640 Retrieves COS objects by type from the cross-reference table. @param type1 first object type @param type2 second object type @return list of matching COSObject instances
1641 Converts character code to Unicode string representation. @param code character code point
1642 Checks if the associated document is encrypted.
1643 Parses an FDF file into a FDFDocument object. @return FDFDocument object or throws IOException on parsing error
1644 Retrieves the AcroForm object associated with this document.
1645 Retrieves a PDColorSpace instance by name, potentially caching it. @param name COSName identifier @param wasDefault whether the color space is default @return PDColorSpace object or null if not found
1646 Checks if color space with specified name exists. @param name COSName identifier of the color space
1647 Retrieves an extended graphics state by name from the cache or creates a new one. @param name COSName of the extended graphics state
1648 Checks if the specified XObject is an image. @param name COSName of the XObject to check @return true if it's an image, false otherwise
1649 Retrieves an iterable collection of color space names. @return COSName objects representing color spaces
1650 Retrieves names of XObjects. @return iterable collection of COSName objects
1651 Retrieves all font names from COS. @return iterable collection of COSName objects representing fonts
1652 Retrieves names of properties. @return Iterable of COSName objects representing property names
1653 Retrieves shading names from COS database. @return iterable collection of COSName objects for shading
1654 Retrieves a collection of pattern names. @return an iterable collection of COSName objects representing patterns
1655 Retrieves names of extended graphics state objects. @return iterable collection of COSName objects
1656 Retrieves standard crypt filter dictionary.
1657 Returns default cryptographic filter dictionary.
1658 Retrieves a PDF Type 3 character procedure by code. @param code unique character identifier @return PDType3CharProc object or null if not found
1659 Retrieves rollover appearance entry from the PDF dictionary. @return PDAppearanceEntry object or normal appearance if not found
1660 Retrieves down appearance entry from the provided dictionary. @return PDAppearanceEntry object or normal appearance if not found
1661 Retrieves the first child item in the outline. @return PDOutlineItem object or null if no children exist
1662 Retrieves the last child outline item. @return The last child PDOutlineItem or null if not found
1663 Retrieves and returns the PDSignature instance.
1664 Fetches value associated with given index from numbers or kids. @param index integer index to look up
1665 Calculates the number of output parameters based on the range values. @return Number of output parameters or 0 if not found.
1666 Returns a PDRange object for output with specified index 'n'. @param n index of the range value to use
1667 Clips input values to specified ranges. @param inputValues array of float values to clip
1668 Calculates the number of input parameters. @return Number of input values, or recalculated if initial value was -1
1669 Retrieves the domain range for input value 'n'. @param n input value
1670 Calculates the sample index from a given vector. @param vector input array of integers
1671 Retrieves a parameter's decode range from the decode values array. @param paramNum unique parameter number @return PDRange object or null if not found
1672 Returns encoded range values for parameter with specified index. @param n parameter index
1673 Checks if an attachment is attached at top position.
1674 Checks if the bottom attachment is present. @return true if attached, false otherwise
1675 Checks if left attachment is present. @return true if left attachment exists, false otherwise
1676 Checks if the right attachment is present. @return true if attached, false otherwise
1677 Initializes a PDCIDFont object from the given COS dictionary and parent font. @param fontDictionary COS dictionary containing font data @param parent PDType0Font parent font object
1678 Initializes the DictionaryEncoding with a COSDictionary, populating encoding and differences. @param fontEncoding COSDictionary containing font encoding information
1679 Initializes DictionaryEncoding with font encoding, symbolic status and built-in encoding. @param fontEncoding COS dictionary of font encoding @param isNonSymbolic whether the font is non-symbolic @param builtIn built-in encoding for symbolic fonts
1680 Initializes ShadingContext with PDShading, ColorModel, affine transform, and transformation matrix. @param shading PDShading object @param cm color model @param xform affine transform @param matrix transformation matrix
1681 Retrieves parameter decoding range based on the given parameter number. @param paramNum unique parameter identifier @return PDRange object or null if not found or insufficient data
1682 Extracts signed content from PDF file. @param pdfFile input stream of the PDF file to process @return byte array containing extracted signed content or null on error
1683 Extracts and returns signed content from a PDF file. @param pdfFile PDF byte array to process
1684 Retrieves the revision number from the underlying data source. @return The current revision as a 64-bit integer value
1685 Retrieves the minimum revision value from the dictionary. @return the minimum revision as a long integer value
1686 Creates a view of the data with optional filtering. @return filtered data in a RandomAccessRead object
1687 Retrieves a float value from COS by name. @param name unique identifier of the value to fetch
1688 Retrieves COS conversion factor. @return Conversion factor value as a floating-point number
1689 Retrieves the leader length value from annotation. @return Leader length as a floating-point number.
1690 Retrieves leader extend value from annotations. @return Leader extend value as a float.
1691 Retrieves the leader offset value. @return lead-in distance in floating-point format
1692 Retrieves and returns the value of V from the dictionary. @return The floating-point value associated with key COSName.V or 0 if not found.
1693 Retrieves the CYX value from the COS object.
1694 Retrieves a COS object's float value by name or returns default value. @param name COS object key @param defaultValue fallback value if not found @return float value or default value
1695 Retrieves intensity value from COS data. @return intensity value as a floating-point number
1696 Calculates the font height based on the provided PDFont object. @param font the PDFont to compute the height for @return the calculated font height in points
1697 Calculates default position vector by CID. @param cid unique category identifier
1698 Retrieves a PDF property list by name. @param name COSName of the properties to fetch @return PDPropertyList object or null if not found
1699 Retrieves the optional content dictionary as a PDPropertyList object. @return PDPropertyList object or null if not found
1700 Returns the Optional Content dictionary as a PDPropertyList. @return PDPropertyList object or null if not found
1701 Retrieves a list of OC groups from the PDF dictionary. @return List of PDPropertyList objects representing OC groups
1702 Retrieves the optional content dictionary as a PDPropertyList. @return PDPropertyList object or null if not found
1703 Validates and possibly replaces XREF offsets with brute-force parser results. @throws IOException if an I/O error occurs
1704 Saves data to file by OutputStream. @param fileName unique file name
1705 Removes the specified element from this List. @param o object to remove @return true if removed, false otherwise
1706 Removes an element at the specified index. @param index position of the element to remove @return removed element or null if filtered list
1707 Removes specified object from collection, searching within nested objects. @param o COSBase object to remove @return true if object was found and removed, false otherwise
1708 Removes a user property by ID. @param userProperty PDUserProperty object to be removed
1709 Removes a subject from the PDF document. @param subject byte array representing the subject to remove
1710 Removes a specific key usage extension from the KEY_USAGE array. @param keyUsageExtension identifier of the extension to remove
1711 Removes an issuer from the certificate's dictionary. @param issuer byte array representing the issuer's name
1712 Removes an OID from the dictionary. @param oid OID to be removed as byte array
1713 Clears all data from this object.
1714 Removes item from collection by specified key. @param key unique identifier for removal @return value associated with the removed key or null if not found
1715 Recursively collects a COSDictionary and its children into an increment. @param dictionary COSDictionary to collect @return true if the dictionary or any of its children demand the parent update, false otherwise
1716 Recursively collects objects and their children, excluding duplicates. @param object COSObject to collect
1717 Sets the origin document state. @param originDocumentState COSDocumentState object to be set
1718 Retrieves the upper limit value from the 'LIMITS' array. @return String representation of the upper limit or null if not found
1719 Retrieves the lower limit value from the 'LIMITS' array. @return String representation of the lower limit or null if not found
1720 Retrieves COS object name as string. @param name input parameter (not used in this implementation)
1721 Retrieves the rendering intent from a dictionary, or returns null if not found. @return RenderingIntent object or null if missing
1722 Retrieves the value of "N" from the action's configuration. @return String representation of the "N" value
1723 Returns name as string using COSName.getPDFName() and default value if not found. @param key PDF object key @param defaultValue default name to return if key is invalid or empty
1724 Retrieves the guideline style from the dictionary. @return Style string (SOLID) as a string
1725 Retrieves icon name from annotation. @return icon name as string or null if not available
1726 Retrieves attachment name from COS object. @return Attachment name as string or null if not available
1727 Retrieves line ending style from COS object. @return Line ending style as string (e.g. "none", "unix", etc.)
1728 Retrieves highlight mode from COS object. @return Highlight mode name or empty string if not found
1729 Returns the reply type as a string.
1730 Retrieves the name of the COS object. @return name as string or null if not available
1731 Retrieves name as a string from COS object. @return name as a string or null if not available
1732 Retrieves the highlighting mode as a string ("H" or "I").
1733 Retrieves the style of the COS object. @return Style as string (e.g. "solid")
1734 Retrieves the type of COS object. @return Type string or default if not found.
1735 Retrieves the style of the COS object. @return The name of the style as a string
1736 Retrieves dimension name as string. @return Dimension name or null if not found
1737 Retrieves the motion type as a string.
1738 Retrieves non-full screen page mode setting. @return name of the selected mode or "none" if not set
1739 Returns the user's preferred reading direction. @return "L2R" or "R2L" string indicating left-to-right or right-to-left reading order.
1740 Retrieves the view area as a string from preferences.
1741 Returns the user's view clip as a string.
1742 Retrieves the print area name as a string.
1743 Retrieves the print clip from user preferences. @return string representation of the print clip
1744 Retrieves print scaling preference value. @return current print scaling setting as string
1745 Validates XREF table offset and returns corrected position. @param startXRefOffset initial offset to validate @return corrected offset or -1 if invalid
1746 Checks if this container has exactly one entry, which must be its owner.
1747 Retrieves the parent PD structure node. @return Parent PDStructureNode or null if not found
1748 Creates an object from the given COSBase, which can be a dictionary or an integer. @param kid COSBase to create object from
1749 Initializes PDEncryption object with COSDictionary. @param dictionary COSDictionary containing encryption settings
1750 Retrieves the security handler instance. @return SecurityHandler<ProtectionPolicy> instance or null if not initialized
1751 Retrieves a list of FDF annotations from the COS array. @return List of FDFAnnotation objects or null if empty
1752 Checks if the character set of the provided CID system info matches the FontInfo. @param cidSystemInfo PDC ID system info to compare @param info Font information containing CID system info or code page range @return true if sets match, false otherwise
1753 Checks if the entity is an N-channel component. @return true if it's an N-channel, false otherwise
1754 Retrieves the open action from the PDF document. @return PDDestinationOrAction object representing the open action, or null if not present
1755 Retrieves a PDAction instance based on COS dictionary field A.
1756 Retrieves a map of JavaScript actions from the document. @return Map of JavaScript action names to corresponding PDActionJavaScript objects
1757 Creates and returns a PDAction object from the COS dictionary F.
1758 Creates and returns a PDAction object from the 'e' dictionary. @return PDAction object or null if dictionary is missing
1759 Retrieves and returns the X action from the actions dictionary. @return PDAction object or null if not found
1760 Retrieves a PDAction object from the dictionary with key 'D'. @return PDAction object or null if not found
1761 Retrieves a PD Action instance from the 'U' dictionary in the document. @return PDAction object or null if not found
1762 Retrieves FO action from dictionary, creating a new PDAction if found. @return PDAction object or null if not found in dictionary
1763 Retrieves the "BL" action from the dictionary and creates a PDAction instance. @return The PDAction object or null if not found
1764 Retrieves a PO (Purchase Order) action from the dictionary. @return PDAction object or null if not found
1765 Retrieves and initializes a PC action from COS dictionary. @return PDAction object or null if not found
1766 Retrieves the PV action from the dictionary of actions. @return The associated PDAction object or null if not found
1767 Retrieves and converts the 'PI' dictionary to a PDAction object. @return PDAction object or null if 'PI' dictionary is not found
1768 Creates WC action from dictionary. @return PDAction object or null if not found
1769 Creates and returns a PDAction object from the 'WS' dictionary. @return PDAction object or null if 'WS' dictionary is not found
1770 Creates and returns a PDAction instance from the document's structure dictionary.
1771 Retrieves PDAction object from WP dictionary. @return PDAction object or null if not found
1772 Retrieves the digital properties action from the given actions dictionary. @return PDAction object or null if not found
1773 Retrieves and converts a COSDictionary into a PDAction object. @return PDAction object or null if dictionary is not found
1774 Retrieves the 'F' action from the actions dictionary, creating a PDAction instance if found. @return PDAction object or null if not found
1775 Creates and returns a PDAction instance based on 'V' dictionary from the actions collection. @return PDAction object or null if 'V' dictionary not found
1776 Creates and returns a PDAction object from the COS dictionary at key C.
1777 Creates and returns a PDAction object from a COSDictionary with key 'O'. @return PDAction object or null if dictionary is null.
1778 Creates and returns a PDAction object from the COS dictionary with key 'C'. @return PDAction object or null if COS dictionary is null
1779 Creates and returns a PDAction object from underlying dictionary. @return PDAction object or null if creation fails
1780 Creates and returns a PDAction object from the COS dictionary 'A' in the COS object. @return PDAction object or null if dictionary is not found
1781 Creates and returns a PDAction object from COS dictionary A.
1782 Retrieves the string value of a specified property. @param propertyKey unique key identifying the property
1783 Retrieves custom metadata value by field name. @param fieldName unique identifier of the field
1784 Retrieves a string value from COS (Common Object Service) using the provided name. @param name unique identifier of the string to fetch
1785 Retrieves the base value from the COS object. @return string representation of the base value
1786 Retrieves application version from configuration. @return Version string as defined in the dictionary.
1787 Retrieves unit value from COS object. @return Unit string or null if not available
1788 Retrieves string value by key from underlying storage, returning default if not found. @param key unique identifier @param defaultValue default string value to return if key is unknown
1789 Retrieves a string value from an embedded dictionary. @param embedded embedded dictionary @param key name of the string to retrieve @param defaultValue default value if not found or null in dictionary @return retrieved string or default value
1790 Retrieves operation type from parameters. @return Operation string value (e.g. "OPEN")
1791 Retrieves default appearance from dictionary. @return default appearance string or empty string if not found
1792 Tries various methods to fetch a filename, returning the first non-null result.
1793 Checks if a group with the specified name exists. @param groupName name of the group to check @return true if group found, false otherwise
1794 Returns the fully qualified name by combining partial and parent names. @return Fully qualified name as a string, or null if no parents
1795 Returns list of export values from options. @return List of strings representing option values
1796 Encrypts or decrypts user data using RC4 and AES algorithms. @param objectNumber unique identifier for encryption context @param genNumber generation number for encryption key @param data input stream of data to encrypt/decrypt @param output output stream for encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
1797 Computes encrypted key based on revision. @param password user password @param o other bytes (varies by revision) @param u additional bytes (varies by revision) @param oe other encryption bytes (varies by revision) @param ue additional encryption bytes (varies by revision) @param permissions access level @param id unique identifier @param encRevision encryption scheme revision @param keyLengthInBytes desired key length @param encryptMetadata whether to include metadata in the key @param isOwnerPassword whether password belongs to owner
1798 Validates user password based on encryption revision. @param password encrypted password @param user user identifier @param owner owner identifier @param permissions access permissions @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes key length in bytes @param encryptMetadata whether to encrypt metadata @return true if password is valid, false otherwise
1799 Finds and returns a FontBoxFont instance by PostScript name. @param format the font format to search in @param postScriptName unique PostScript name of the font @return FontBoxFont object or null if not found
1800 Converts COS String object to Calendar instance. @param text COS String object containing calendar data @return Calendar object or null if input is invalid
1801 Writes a COS string to an OutputStream. @param output OutputStream to write to @param cosString COS string data to be written
1802 Renders formatted text to the PDF output stream. @param text input text to be rendered
1803 Initializes a new PageDrawer instance from given parameters. @param parameters PageDrawerParameters containing page, renderer, and other settings
1804 Returns the color of the current page.
1805 Retrieves the border color of a PDF element. @return PDColor object representing the border color
1806 Retrieves the background color. @return PDColor representing the current background color
1807 Sets the value at index 2 of the underlying collection to the specified high value. @param high the new high value
1808 Sets the page number to the specified value. @param pageNumber the new page number
1809 Parses a COS string from the input stream, handling escape sequences and parentheses. @throws IOException if parsing fails
1810 Extracts PDF contents from the given InputStream. @param pdfFile input stream containing the PDF file @return byte array representing the extracted contents or null if failed
1811 Extracts the contents of a PDF file. @param pdfFile complete PDF file contents @return contents of the PDF file as a byte array
1812 Initializes an immutable rectangle with specified width and height. @param width rectangle width in units @param height rectangle height in units
1813 Returns the bounding box of this PDRectangle. @return PDRectangle representing the bounds of this object
1814 Initializes PDMetadata with a PDDocument. @param document PDDocument instance to associate metadata with
1815 Initializes an Embedded File object from a given PDDocument. @param document PDDocument instance to embed file in
1816 Initializes PDXObject with given document and subtype. @param document parent PDDocument @param subtype COSName representing XObject subtype
1817 Creates a new PDImageXObject instance from the specified PDDocument.
1818 Creates a new PDStream instance from a PDDocument and an InputStream. @param doc the PDDocument to associate with this stream @param input the InputStream containing the PDF data
1819 Initializes a new PDStream instance from a PDDocument and stream. @param doc the parent document @param input the input stream @param filter the filter to apply
1820 Constructs a PDStream object from the given PDDocument, InputStream and filter array. @param doc parent PDDocument instance @param input stream containing PDF data @param filters COSArray of PDF filters to apply
1821 Creates a PDImageXObject from the given parameters. @param document PDDocument instance @param encodedStream InputStream containing image data @param cosFilter filter to apply to image @param width, height image dimensions in pixels @param bitsPerComponent image bit depth @param initColorSpace initial color space for the image
1822 Initializes a new instance with layout owner. @param OWNER_LAYOUT predefined layout attribute owner identifier
1823 Initializes PDListAttributeObject with default owner set to OWNER_LIST.
1824 Initializes a new PDPrintFieldAttributeObject instance with default owner set to OWNER_PRINT_FIELD.
1825 Initializes a new instance of PDTableAttributeObject with owner set to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the owner specified in the dictionary. @param dictionary COSDictionary containing attribute information
1827 Retrieves a user's normal appearance stream. @return Normal appearance stream or null if not found
1828 Retrieves the "on" value from the first PDAnnotationWidget's appearance dictionary.
1829 Retrieves the transparency group object for this PDF element. @return PDTransparencyGroup object or null if not found
1830 Retrieves a named PDF destination page. @param namedDest named user-defined destination @return PDPageDestination object or null if not found
1831 Initializes COSParser with a RandomAccessRead source. @param source input data stream
1832 Constructs a new PDF parser instance. @param source input stream containing the PDF data @param decryptionPassword password for decrypting the PDF (if needed) @param keyStore input stream containing the keystore file @param alias alias of the keystore entry to use
1833 Creates a new instance of PDAppearanceContentStream from an existing PDAppearanceStream. @param appearance the parent PDAppearanceStream instance
1834 Initializes content stream with form resources. @param form form object containing content and resources
1835 Constructs a new PDPageContentStream instance with an automatically created output stream.
1836 Initializes PDPatternContentStream with given PDTilingPattern. @param pattern PDTilingPattern instance containing content stream and resources.
1837 Draws an arrow at the specified position with the given length. @param x horizontal position @param y vertical position @param len arrow length
1838 Draws a shape with specified line width, stroke, and fill. @param lineWidth the shape's border thickness @param hasStroke whether to draw a border @param hasFill whether to fill the shape
1839 Draws a diamond shape at specified coordinates with given radius. @param cs content stream for drawing @param x x-coordinate of the diamond's center @param y y-coordinate of the diamond's center @param r radius of the diamond
1840 Draws a circle with specified radius at given coordinates. @param cs content stream to draw on @param x center x-coordinate of the circle @param y center y-coordinate of the circle @param r circle radius
1841 Draws a circle with specified radius at given position. @param cs graphics content stream @param x center x coordinate @param y center y coordinate @param r circle radius
1842 Draws a paperclip shape on the PDAppearanceContentStream.
1843 Sets line width on demand, writing command only if not equal to default (1). @param lineWidth requested line width value
1844 Creates a BufferedImage representation of the tiling pattern. @param drawer PageDrawer instance for rendering @param pattern Tiling pattern to render @param colorSpace Color space for the pattern @param color Pattern color @param xform AffineTransform to apply to the image @param anchorRect Rectangle2D bounds of the image @return The rendered BufferedImage or null on failure
1845 Calculates and returns the scaled anchor rectangle for a tiling pattern. @param pattern the tiling pattern to process
1846 Returns the stencil image for this object. @param paint Paint configuration to use @return Stencil image as BufferedImage or throws exception if not applicable
1847 Retrieves the raw image data as a WritableRaster object. @param pdImage PDImage to fetch from @return WritableRaster containing the raw image data or null if invalid
1848 Converts a PDImage to a BufferedImage with specified region and subsampling. @param pdImage source image @param region clipped region of interest @param subsampling factor for downscaling @param colorKey optional color key (null if not needed) @return resulting BufferedImage or throws IOException on failure
1849 Retrieves the page resources from the PDF page. @return PDResources object or null if not found
1850 Retrieves the PDF page's media box. @return PDRectangle object representing the media box; null if not found
1851 Retrieves page rotation in degrees, ensuring it's within the range of 0-360.
1852 Retrieves boolean value from PDF dictionary by key. @param key unique key identifier @param defaultValue default boolean value if not found @return true or false value for the given key, or provided default
1853 Checks if the file system is volatile. @return true if file system is volatile, false otherwise
1854 Checks if the COS object has an 'H' attribute set to true.
1855 Checks if metadata encryption is enabled in the standard dictionary. @return true by default, false otherwise
1856 Retrieves caption value from annotation. @return true if caption is present, false otherwise
1857 Checks if annotation should scale to fit. @return true if annotation should be scaled, false otherwise
1858 Determines whether to rename based on COSName.RENAME flag.
1859 Checks whether the document is isolated. @return true if isolated, false otherwise
1860 Checks if knockout is enabled. @return true if knockout is enabled, false otherwise
1861 Retrieves anti-aliasing flag from settings. @return true if enabled, false otherwise
1862 Retrieves stroking overprint control from the dictionary. @return true if enabled, false otherwise
1863 Retrieves whether automatic stroke adjustment is enabled. @return true if enabled, false otherwise
1864 Retrieves the alpha source flag from the dictionary. @return true if enabled, false otherwise
1865 Retrieves knockout flag from configuration dictionary. @return true if knockout is enabled, false otherwise
1866 Retrieves the value of H from the action's properties. @return true if set, false otherwise
1867 Checks whether this action is synchronous. @return true if action is synchronous, false otherwise
1868 Retrieves repeat flag value from COS. @return true if repeat is enabled, false otherwise
1869 Retrieves a boolean value indicating mix state.
1870 Checks if document has caption. @return true if caption is present, false otherwise
1871 Retrieves the 'Open' flag from the PDF object. @return true if the document is open, false otherwise
1872 Retrieves pre-release status from configuration dictionary. @return true if pre-release is enabled, false otherwise
1873 Retrieves non-E font flag value from configuration. @return true if non-E font no warn is enabled, false otherwise
1874 Retrieves trusted mode flag from configuration. @return true if trusted mode is enabled, false otherwise
1875 Checks if need appearances is enabled. @return true/false indicating whether need appearances is on or off
1876 Checks if fly area is opaque. @return true if opaque, false otherwise
1877 Determines whether to show or hide the toolbar based on user preference. @return true if toolbar should be hidden, false otherwise
1878 Checks whether menubar should be hidden based on user preferences.
1879 Returns whether window UI should be hidden. @return true if hidden, false otherwise
1880 Checks if window should be resized to fit content. @return true if window should be resized, false otherwise
1881 Checks if window should be centered. @return true if window should be centered, false otherwise
1882 Retrieves preference to display document title. @return true if enabled, false otherwise
1883 Retrieves an integer value from a dictionary. @param embeddedDictionary dictionary to search in @param key name of the desired integer value @param defaultValue default value if not found @return integer value or specified default value
1884 Retrieves integer value from PDF dictionary by key. @param key unique identifier of the value to retrieve
1885 Retrieves integer value associated with given COSName key. @param key COSName object representing key to fetch
1886 Retrieves integer value from PDF dictionary using the given key. @param key string identifier @param defaultValue default integer value to return if not found @return integer value or defaultValue if not available
1887 Checks if specified flag is set in given COSName field. @param field COSName field to inspect @param bitFlag specific flag to look for
1888 Retrieves the count of items from the underlying data structure. @return The current item count or 0 if not available
1889 Retrieves the start value from the root node. @return The start value as an integer (defaulting to 1 if not found)
1890 Retrieves the current order value. @return Current order integer value
1891 Retrieves the revision number from the COS object. @return The current revision number (defaulting to 0 if not found)
1892 Retrieves the length value from the dictionary. @return The length value (defaulting to 40)
1893 Retrieves version from dictionary. @return The stored version number or default value 0 if not found.
1894 Retrieves the length of a dictionary value. @return The length as an integer or default value 40 if not set
1895 Retrieves the revision number from the dictionary. @return Revision number or default version if not found
1896 Retrieves permissions value from dictionary. @return Permissions integer value or default 0 if not found.
1897 Retrieves justification value from annotation. @return justification string or default if not set
1898 Retrieves and returns user flags. @return integer value representing user flags or -1 for initialization
1899 Creates a PDAbstractPattern instance based on the provided COSDictionary. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for pattern resources @return PDAbstractPattern object or throws IOException for unknown type
1900 Retrieves paint type from the underlying COS object. @return Paint type integer value (defaulting to 0 if not found)
1901 Retrieves the tiling type from the COS object. @return Tiling type value (0 or greater)
1902 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary dictionary containing shading details @return PDShading object or throws IOException for unknown shading types
1903 Retrieves COS object's bits per flag value. @return Bits per flag value or -1 if not available
1904 Retrieves number of vertices per row from COS object. @return Number of vertices per row or -1 if not found
1905 Retrieves the number of bits per color component. @return bits per color component or -1 if not set
1906 Retrieves the number of bits per coordinate. @return Number of bits used to represent each coordinate
1907 Retrieves flags value from COS. @return integer flags value or 0 if not set
1908 Retrieves flags value from COS. @return integer flags value or default 0 if not found
1909 Retrieves the current page number from the dictionary. @return Page number or -1 if not found
1910 Retrieves annotation index from dictionary. @return annotation index or -1 if not found
1911 Retrieves annotation flags from COSObject. @return integer value of annotation flags
1912 Retrieves the value of Q from COS object. @return The integer value of Q or 0 if not found
1913 Retrieves rotation value from COS object. @return Rotation value (integer) or default value if not set
1914 Checks if timestamp is required based on configuration value. @return true if timestamp is required, false otherwise
1915 Retrieves the open count from COS object. @return current open count value
1916 Retrieves Q value from dictionary. @return Q value or default 0 if not found
1917 Retrieves the top index from COS object. @return Top index value (defaulting to 0 if not set)
1918 Retrieves COS objects by specified type. @param type COS object type to search for
1919 Removes page-specific resources from cache.
1920 Resolves color space by name. @param name COSName identifier of color space
1921 Retrieves the embedded file from the PDF object. @return PDEmbeddedFile object or null if not found
1922 Retrieves DOS embedded file from the dictionary. @return Embedded file object or null if not found
1923 Retrieves the embedded Mac file from the document. @return PDEmbeddedFile object or null if not found
1924 Retrieves embedded file for Unix systems. @return PDEmbeddedFile object or null if not found
1925 Retrieves embedded file as a Unicode stream. @return PDEmbeddedFile object or null if not found
1926 Initializes AxialShadingContext with provided parameters. @param shading PDShadingType2 object defining shading properties @param colorModel ColorModel object specifying color model @param xform AffineTransform representing transformation to device space @param matrix Matrix object for affine transformations @param deviceBounds Rectangle specifying device bounds
1927 Initializes RadialShadingContext with provided parameters. @param shading radial shading type @param colorModel color model @param xform transform to apply @param matrix coordinate transformation matrix @param deviceBounds bounding box of the device space
1928 Initializes Triangle-Based Shading context with provided parameters. @param shading PDShading object for shading @param cm ColorModel for color management @param xform AffineTransform for spatial transformations @param matrix Matrix for geometric transformations
1929 Initializes Type1ShadingContext with the given parameters. @param shading PDShadingType1 object @param colorModel ColorModel instance @param xform AffineTransform for coordinate transformation @param matrix Matrix for further transformations
1930 Initializes PDF parser with COSStream and associated document. @param stream the object stream to parse @param document the related document object
1931 Initializes a PDCIDFontType0 object from the given COS dictionary and parent PDType0Font. @param fontDictionary COS dictionary containing font information @param parent parent PDType0Font
1932 Initializes a PDCIDFontType2 from the given font dictionary and true type font. @param fontDictionary COS dictionary for the font @param parent PD Type0 font parent @param trueTypeFont TrueType font to initialize from (null if not available) @throws IOException if an I/O error occurs during initialization
1933 Parses a COSBase into a CMap. @param base COSName for predefined CMap or COSStream for embedded CMap
1934 Writes COS objects to output stream, preserving origin object numbers. @param doc COSDocument containing trailer and objects
1935 Saves data to a file with the specified name. @param fileName unique file identifier
1936 Recursively collects and handles COSBase objects. @param base object to process @return true if successfully processed, false otherwise
1937 Sets the trailer dictionary and updates its origin document state. @param newTrailer COSDictionary object to be set as the trailer
1938 Updates the origin document state based on the provided COS update info. @param child COSBase object containing update information
1939 Retrieves value associated with the given name from a hierarchical structure. @param name unique identifier for which to retrieve value @return T object if found, otherwise null
1940 Retrieves COS object name as a string, with default value if not found. @param name COS object name to retrieve @param defaultValue default value to return if retrieval fails @return COS object name or default value
1941 Retrieves style string from COS object. @return Style string or null if not found
1942 Retrieves the topmost tree root node from the structure hierarchy. @return PDStructureTreeRoot instance or null if not found
1943 Retrieves a list of child objects.
1944 Returns the encryption object, initializing it if necessary. @return PDEncryption instance or null if not initialized
1945 Prepares decryption settings from encryption dictionary and key store. @throws IOException on decryption preparation or security handler creation errors
1946 Reads and initializes the encoding for this font. @throws IOException if CMap is missing or invalid
1947 Calculates and returns the valid repair length. @param bytes byte array to search in @param length1 initial length value to validate @return corrected length or original value if invalid
1948 Calculates the actual length of bytes to be processed after repairing Length2. @param bytes input byte array @param length1 fixed length to consider @return adjusted length or maximum available length if invalid
1949 Retrieves the fractional display value from the COS object.
1950 Retrieves thousands separator from COS configuration. @return Thousands separator as comma-separated string
1951 Returns the decimal separator used in COS (Common Object Service). @return decimal separator character (e.g., ".")
1952 Retrieves the label prefix string from COS. @return Label prefix string or default value if not found
1953 Retrieves label suffix string from COS object. @return Label suffix string or default value if not found
1954 Retrieves label position to value string from COS object. @return Label position to value string or null if not found
1955 Retrieves an embedded string value from the given COSName object. @param embedded the COSName object to search @param key the key for the embedded string value
1956 Fetches font matches for the given PDFontDescriptor and PDCIDSystemInfo. @param fontDescriptor PDFontDescriptor to match against @param cidSystemInfo PDCIDSystemInfo for filtering (optional) @return PriorityQueue of FontMatch objects, ordered by score
1957 Verifies owner password based on encryption revision. @param ownerPassword encrypted password @param user unused parameter (legacy) @param owner unused parameter (legacy) @param permissions unused parameter (legacy) @param id unused parameter (legacy) @param encRevision current encryption revision @param keyLengthInBytes unused parameter (legacy) @param encryptMetadata unused parameter (legacy)
1958 Parses input text into an instruction sequence. @param text input text to parse @return parsed InstructionSequence or null if parsing fails
1959 Decrypts a COS stream with specified object and generation numbers. @param stream encrypted COS stream @param objNum object number @param genNum generation number
1960 Encrypts a COS stream with the specified object and generation numbers. @param stream COS stream to be encrypted @param objNum object number for encryption context @param genNum generation number for encryption context
1961 Decrypts a COSString using the provided object and generation numbers. @param string encrypted COSString to decrypt @param objNum object number associated with the encryption @param genNum generation number associated with the encryption @return decrypted COSString or original if decryption failed
1962 Encrypts a string using the specified object and generation numbers. @param string input string to be encrypted @param objNum object number for encryption context @param genNum generation number for encryption context @return encrypted COSString object
1963 Determines if the provided password matches the user's credentials. @param password The password to verify @return true if the password is valid, false otherwise
1964 Finds FontBoxFont by searching for matching Type1, TrueType, and OpenType fonts. @param postScriptName the PostScript name of the font to find
1965 Writes a page of text from the list of TextPositions. @throws IOException on I/O errors.
1966 Extracts a date from the specified dictionary key. @param key unique key identifier @return Calendar object or null if not found or invalid
1967 Writes COSBase token to output stream. @param base COSBase object to serialize
1968 Writes a PDF object to an output stream. @param output the output stream @param object the COSBase object to write @param topLevel true for top-level objects, false otherwise
1969 Writes text with positioning to output, using array of Floats and Strings. @param textWithPositioningArray array containing text and positions
1970 Displays user-provided text on screen. @param text text to display
1971 Creates a PageDrawer instance with provided parameters and annotation filter. @param parameters PageDrawerParameters object for configuration
1972 Initializes a new PDFormXObject instance from a PDDocument.
1973 Initializes PDMetadata object from a PDDocument and input stream. @param doc PDDocument to associate with metadata @param str InputStream containing XML data for the metadata
1974 Creates an embedded file in the PDDocument. @param doc the parent document @param str input stream containing the file data
1975 Creates a new PDEmbeddedFile object from the given document and stream. @param doc parent PDDocument instance @param input InputStream containing file data @param filter COSName representing filtering criteria
1976 Creates a PDImageXObject from the provided byte array. @param document PDDocument instance @param byteArray input image data @param width output image width @param height output image height @param bitsPerComponent output image color depth @param initColorSpace initial color space for the image @return PDImageXObject object or throws IOException
1977 Initializes PDExportFormatAttributeObject with specified owner. @param owner unique identifier of the object's owner
1978 Retrieves attribute revisions for the structure element. @return Revisions<PDAttributeObject> collection of attribute objects and their revisions
1979 Retrieves appearance stream from given PDAnnotation object. @param annotation PDAnnotation instance to fetch appearance from
1980 Copies fonts from an annotation's widget resources to the AcroForm's PDResources. @param acroFormResources target resources to add fonts to @param annotation annotation containing widget resources
1981 Retrieves a set of on-values from export values or annotation widgets. @return Set of on-values
1982 Checks if checkbox value equals on-value. @return true if values match, false otherwise
1983 Sets value to on state when invoked.
1984 Initializes FontProvider by scanning local system for fonts and populating cache. @param cache FontCache instance to store font information
1985 Initializes an instance of FDFParser from a RandomAccessRead source. @param source input data stream to parse from
1986 Initializes PDF parser with given input stream and password. @param source RandomAccessRead object containing PDF data @param decryptionPassword optional password for encrypted PDFs
1987 Draws various line styles on the content stream. @param style the type of line to draw @param cs the content stream to draw on @param x y width position and dimensions for drawing @param ending flag indicating if this is an ending line
1988 Creates a tiling texture paint from the given drawing context and parameters. @param drawer PageDrawer object @param pattern PDTilingPattern instance @param colorSpace PDColorSpace for color management @param color PDColor for fill color @param xform AffineTransform to apply to the pattern
1989 Retrieves an opaque RGB image within the specified region. @param region rectangle defining the region of interest @param subsampling horizontal subsampling factor
1990 Converts PDImage to RGB image using provided color key. @param pdImage input PDF image data @param colorKey color map for conversion
1991 Retrieves and sets resources for the content stream, with fallbacks to page or parent resources. @param contentStream target content stream @return original parent resources
1992 Calculates the affine transform to center a rectangle within another. @param page PDPage object @param overlayMediaBox the rectangle to be centered @return AffineTransform object or null if invalid input
1993 Returns the rotated media box of a page if rotation is 90 or 270 degrees. @param page PDPage object to fetch media box from
1994 Checks if an item is marked. @return true if marked, false otherwise
1995 Checks if UserProperties are being used. @return true/false indicating usage status
1996 Checks if user is flagged as suspect. @return true if marked as suspect, false otherwise
1997 Determines whether to track mouse position based on IsMap setting. @return true if "IsMap" is enabled, otherwise false
1998 Retrieves the 'Open' status from COS. @return true if open, false otherwise
1999 Checks if FD flag is set. @return true if FD is enabled, false otherwise
2000 Returns non-stroking overprint control value based on dictionary and stroking overprint control.
2001 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary dictionary to search @param key name of the integer value to retrieve @return integer value or -1 if not found
2002 Retrieves the denominator value from COS object. @return Denominator integer value
2003 Wraps the output stream with a predictor stream if enabled. @param out original OutputStream to wrap @param decodeParams COSDictionary containing prediction parameters @return wrapped OutputStream or original OutputStream if no prediction
2004 Retrieves parent structure IDs. @return integer value representing parent structure IDs
2005 Retrieves the bits per sample value from the COS object. @return The number of bits used to represent each sample.
2006 Retrieves the MCID (Membership Control ID) as an integer value.
2007 Retrieves the next key in parent tree by ID.
2008 Retrieves MCID (Master Control ID) from user properties. @return MCID value or -1 if properties are null
2009 Retrieves line cap style from dictionary. @return integer value representing line cap style
2010 Retrieves the line join style from the dictionary. @return integer value representing the line join style
2011 Retrieves the parent structure ID from the COS object. @return Parent structure ID or 0 if not set
2012 Retrieves integer value associated with COSName.P from the dictionary. @return Integer value or 0 if not found
2013 Retrieves the maximum length value from COSObject. @return Maximum length integer value
2014 Retrieves an integer value from COS object by name or returns default value if not found. @param name name of the integer property @param defaultValue default integer value to return if property is missing
2015 Checks if an annotation flag indicates invisibility. @return true if invisible, false otherwise
2016 Checks whether an annotation has the hidden flag set. @return true if hidden, false otherwise
2017 Checks if document has been printed. @return true if printed, false otherwise
2018 Checks if no zoom flag is set. @return true if F flag indicates no zoom, false otherwise
2019 Checks if no rotation flag is set. @return true if no rotation flag is enabled, false otherwise
2020 Checks if no view flag is set. @return true if no view flag is enabled, false otherwise
2021 Checks whether the document is read-only. @return true if the document is read-only, false otherwise
2022 Checks if an annotation flag indicates that this element is locked. @return true if locked, false otherwise
2023 Checks toggle flag for no view preference. @return true if toggle has no view preference, false otherwise
2024 Checks if contents are locked. @return true if locked, false otherwise
2025 Checks whether an object is invisible. @return true if object is invisible, false otherwise
2026 Checks if an object is hidden. @return true if flag F is set to hidden, false otherwise
2027 Checks whether the document has been printed. @return true if printed, false otherwise
2028 Checks whether NO ZOOM flag is set. @return true if NO ZOOM flag is enabled, false otherwise
2029 Checks whether rotation is disabled. @return true if no rotation flag is set, false otherwise
2030 Checks if the document has no view. @return true if the flag is set, false otherwise
2031 Checks if the object is read-only. @return true if the object is read-only, false otherwise
2032 Checks if the document is locked. @return true if locked, false otherwise
2033 Checks toggle flag for no view visibility. @return true if toggle is enabled, false otherwise
2034 Checks if contents are locked. @return true if locked, false otherwise
2035 Checks if filter is required based on COS flag. @return true if filter is required, false otherwise
2036 Checks if a sub-filter is required based on the COS object flag.
2037 Checks if digest method flag is set in COS object. @return true if flag is set, false otherwise
2038 Checks whether the V flag is set in the COS object.
2039 Checks whether reason flag is set in the COS object.
2040 Checks if legal attestation is required based on FF flag in COS object. @return true if legal attestation is required, false otherwise
2041 Checks if add revision information is required. @return true if flag is set, false otherwise
2042 Checks if subject is required based on configuration flag. @return true if subject is required, false otherwise
2043 Checks whether issuer information is required. @return true if issuer info is needed, false otherwise
2044 Checks if OID is required based on configuration flag. @return true if OID is required, false otherwise
2045 Checks if subject DN is required based on certificate flags. @return true if subject DN is required, false otherwise
2046 Checks if key usage flag is set in the dictionary. @return true if key usage required, false otherwise
2047 Checks whether URL is required based on flag value. @return true if URL is required, false otherwise
2048 Checks if font style is italic. @return true if italic, false otherwise
2049 Checks if font style is bold. @return true if bold, false otherwise
2050 Checks if signatures exist in the dictionary. @return true if signatures exist, false otherwise
2051 Checks if database is append-only. @return true if database has append-only flag set, false otherwise
2052 Checks if the underlying object represents a push button.
2053 Checks if the current form field is a radio button. @return true if the field is a radio button, false otherwise
2054 Checks whether sorting flag is set.
2055 Checks whether multi-select flag is set. @return true if multi-select enabled, false otherwise
2056 Checks whether spell checking should be disabled. @return true if spell checking is disabled, false otherwise
2057 Checks if commit on selection change flag is enabled. @return true if enabled, false otherwise
2058 Checks if combo flag is set. @return true if combo flag is set, false otherwise
2059 Checks if document is editable. @return true if editable, false otherwise
2060 Checks if the document is read-only. @return true if the document is read-only, false otherwise
2061 Checks if field is required. @return true if field is required, false otherwise
2062 Checks if FF flag indicates no export. @return true if no export, false otherwise
2063 Checks if radio frequencies are in unison. @return true if radios are in unison, false otherwise
2064 Checks if the COS object has the multiline flag set.
2065 Checks whether the password flag is set. @return true if password is enabled, false otherwise
2066 Checks if file selection flag is set. @return true if file select flag is enabled, false otherwise
2067 Indicates whether to disable spell checking. @return true if spell checking is disabled, false otherwise
2068 Checks whether scrolling is disabled in the COS object. @return true if scrolling is disabled, false otherwise
2069 Checks whether the document is in comb mode. @return true if comb mode active, false otherwise
2070 Checks if document contains rich text. @return true if rich text flag is set, false otherwise
2071 Prepares for decryption by fetching and processing the provided encryption material. @param encryption PDEncryption object @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial to be used for decryption @throws IOException if an error occurs during preparation
2072 Retrieves the owner key from a dictionary. @return byte[] owner key or null if not found
2073 Retrieves the user key as a byte array. @return byte array representing the user key or null if not found
2074 Calculates displacement vector from given code. @param code unique identifier
2075 Calculates the width of a string by encoding it and summing up glyph widths. @param text input string to measure @return total width in pixels or throws IOException if encoding fails
2076 Retrieves a PDF pattern by name, caching results for future use. @param name unique pattern identifier @return PDAbstractPattern object or null if not found
2077 Retrieves a PDShading object by name. @param name COSName identifier @return PDShading instance or null if not found
2078 Retrieves the PDF Shading object, creating it from the underlying COS dictionary if necessary. @return PDShading object or null if not created
2079 Checks if there are any open nodes. @return true if at least one node is open, false otherwise
2080 Creates a PDField instance based on the provided COSDictionary and parent field. @param form PDAcroForm to associate with the new field @param field COSDictionary representing the field's properties @param parent PDNonTerminalField or null if not applicable @return PDField object (e.g. PDTextField, PDSignatureField) or null on error
2081 Retrieves a PDXObject instance by name. @param name COSName identifier for the object
2082 Initializes a new GouraudShadingContext instance. @param shading PDShading object to be used for rendering @param colorModel ColorModel representing the color space @param xform AffineTransform describing spatial transformation @param matrix Matrix containing additional rendering data
2083 Creates an input stream for the COS (Core Object Structure) representation. @throws IOException if an I/O error occurs
2084 Fetches a specific object from the compressed object stream by key. @param objstmObjNr unique object stream identifier @param key object key to fetch @return COSBase object or null if not found
2085 Returns input stream containing file contents. @throws IOException on error accessing contents
2086 Constructs a new PDCIDFontType2 instance from the given COS dictionary and parent Type 0 font. @param fontDictionary dictionary containing font information @param parent parent Type 0 font
2087 Retrieves and returns a PDCIDFont object.
2088 Recursively collects updates from array entries and their descendants. @param array COSArray to traverse @return true if any update is demanded, false otherwise
2089 Retrieves collection of COSBase objects.
2090 Adds a COSBase object to the collection. @param object COSBase object instance to add
2091 Adds a COSBase object to the collection at specified index. @param i index in the collection @param object COSBase object to add
2092 Sets an object in the collection at specified index. @param index position to set the object in the collection @param object COSBase object to be added or replaced
2093 Sets a named item in the collection. @param key COSName identifier for the item @param value COSBase object to store or null to remove
2094 Updates the COSArray of child elements. @param children array of child elements to update
2095 Returns the role map from the structure tree root. @return Map of roles or empty map if no root is found
2096 Adds a COSBase object to the pool, handling indirect objects and streams. @param key COSObjectKey for the object (null if not applicable) @param base COSBase object to add @return The added object or null if it's already in the pool
2097 Applies security policy to the object using a specified protection handler. @param policy ProtectionPolicy instance
2098 Retrieves the glyph name for a given Unicode code point. @param code unique integer identifier
2099 Converts a glyph ID code to a GID, handling embedded and non-embedded fonts. @param code glyph ID code to convert @return GID or 0 if not found; may return the original CID in some cases
2100 Retrieves the MAC subtype from the parameters dictionary. @return Embedded string value of MAC subtype or null if not found
2101 Retrieves the Mac creator string from the parameters dictionary. @return The Mac creator string or null if not found
2102 Retrieves MAC resource fork from COS dictionary. @return embedded string value or null if not found
2103 Fetches CIDFont mapping by base font and CID system info. @param baseFont the original font name @param fontDescriptor PDFont descriptor @param cidSystemInfo PDCID system info @return CIDFontMapping object or null if not found
2104 Verifies owner password with provided credentials. @param password owner password to verify
2105 Writes page content by iterating over regions, setting article character count and text. @throws IOException if writing to output stream fails
2106 Retrieves calendar date based on given PDF name. @param key unique identifier for PDF name
2107 Returns a calendar object associated with the given COS name, or uses the default value if not found. @param key unique COS identifier @param defaultValue Calendar to use in case of missing key
2108 Retrieves the creation date of the calendar. @return Calendar object representing the creation date
2109 Retrieves the modification date of the underlying data. @return Calendar object representing the modification date
2110 Retrieves creation date from COS annotation. @return Calendar object representing creation date or null if not found
2111 Retrieves document creation date. @return Date object representing creation date
2112 Retrieves sign date from calendar dictionary. @return Calendar instance representing sign date or null if not found
2113 Writes an Operator token to the output stream. @param op the Operator object to be written
2114 Writes prepared objects to the specified COSStream, including a byte offset map. @param stream target COSStream
2115 Writes a COS dictionary to an output stream. @param output OutputStream for writing the dictionary @param cosDictionary COS dictionary object to write
2116 Initializes a new Transparency Group object from a PDDocument. @param document PDDocument instance to create transparency group from
2117 Initializes a new appearance stream from the given PDF document. @param document the underlying PDF document
2118 Creates a PDImageXObject from a buffered image. @param document PDDocument object @param image BufferedImage to convert @param quality JPEG compression quality (0.0 - 1.0) @param dpi Resolution in dots per inch
2119 Validates a given string value against allowed options. @param value input string to validate
2120 Loads FDFDocument from a file. @param file the input file to load
2121 Loads an FDF document from the provided InputStream. @param input InputStream containing the FDF file data @return FDFDocument object or null on parsing failure
2122 Initializes a new instance of the PDFParser class from the specified RandomAccessRead source. @param source input PDF data to parse
2123 Initializes TilingPaint object with given parameters. @param drawer PageDrawer instance for rendering @param pattern PDTilingPattern to apply @param transform AffineTransform for image manipulation
2124 Retrieves an opaque image representation. @throws IOException on image loading failure
2125 Decodes LZW-encoded data and writes it to the output stream. @param encoded input stream containing encoded data @param decoded output stream for decoded data @param parameters dictionary of decoding parameters @param index current encoding index @return DecodeResult object with decoding details
2126 Appends a kid to the current content with a given PDMarkedContent. @param markedContent PDMarkedContent object for the kid to append
2127 Fetches predefined CMap with UCS-2 encoding. @throws IOException if the map cannot be found
2128 Checks if the field should be a combobox. @return true if field is a single-line text field with max length and no password/file select, false otherwise
2129 Prepares for decryption processing. @param encryption PDEncryption object @param documentIDArray COSArray of document IDs @param decryptionMaterial Decryption material to use @throws IOException if an error occurs during preparation
2130 Calculates and returns the width of a space character in the current font. @return Space width as a float value, or 250 if an error occurs.
2131 Checks if pitch is fixed. @return true if flag indicates fixed pitch, false otherwise
2132 Checks if serif font style is enabled. @return true if serif font style is on, false otherwise
2133 Checks if the current profile is symbolic. @return true if symbolic, false otherwise
2134 Checks if script flag is set. @return true if script flag is on, false otherwise
2135 Checks if non-symbolic flag is set. @return true if non-symbolic, false otherwise
2136 Checks if italic formatting is enabled. @return true if italic flag is set, false otherwise
2137 Checks if all flags are set to uppercase. @return true if all flags are UPPERCASE, false otherwise
2138 Checks if font style is small cap. @return true if small cap flag is set, false otherwise
2139 Checks if force bold flag is enabled.
2140 Retrieves a PDF pattern by its associated color. @param color the color containing the pattern name @return PDAbstractPattern object or null if not found
2141 Creates a PDField instance from a COSDictionary. @param form PDAcroForm to associate with the field @param field COSDictionary containing field data @param parent PDNonTerminalField (optional)
2142 Converts object to text string representation. @return text string or empty string on failure
2143 Creates an input stream for the COS data.
2144 Collects patches from a PDF image stream. @param xform Affine transform @param matrix Matrix @param controlPoints Number of control points @return List of Patch objects or empty list if not found
2145 Creates a descendant font based on the provided dictionary and parent font. @param dictionary COSDictionary containing font metadata @param parent PDType0Font to serve as parent for the created font @return PDCIDFont instance or throws IOException if invalid font type is encountered
2146 Returns an iterator over COSBase objects. @return iterator instance or null if collection is empty
2147 Wraps and passes a COSObjectable instance as a COSBase to the underlying add method.
2148 Grows the collection to the specified size by adding and updating objects. @param size target size of the collection @param object COSBase object to be added and updated
2149 Sets an array of floating-point values to be stored in a collection. @param value array of floats to be added
2150 Parses a PDF COSArray from the input stream. @return COSArray object or null if parsing fails
2151 Generates and returns a cross-reference stream for the PDF document. @throws IOException if an I/O error occurs
2152 Initializes a new PDRange instance with default values. Sets the range to [0, 1] and starting index to 0.
2153 Retrieves the encoded values array. @return COSArray of encoded values or a default array if not set
2154 Initializes PDFunctionType2 with a given function. @param function the input function to initialize from
2155 Initializes an empty FDFOptionElement with default values.
2156 Initializes default PDF font settings.
2157 Returns the whitepoint tristimulus. @return PDTristimulus object representing whitepoint or default if not defined
2158 Returns the black point of the device as a tristimulus value. @return PDTristimulus object representing the black point
2159 Converts internal components to a COSArray, optionally adding pattern name. @return COSArray representation of internal state
2160 Initializes a PDF device with default settings.
2161 Initializes gamma value array with default [0, 0, 0] values.
2162 Returns the alternate color space, either from the PDF stream or a default based on the number of components.
2163 Initializes a PDIndexed object with default properties.
2164 Returns a default range array with values (-100, 100) for both x and y axes.
2165 Initializes a PDPattern object with given resources. @param resources PDResources instance to associate with the pattern
2166 Initializes the PDSeparation object with a COSArray containing PDF separation names and values.
2167 Initializes PDTristimulus with default XYZ color values.
2168 Initializes a PDTristimulus object from an array of 1-3 float values. @param array array of tristimulus values (red, green, blue)
2169 Sets the transformation matrix from a given AffineTransform object. @param transform an AffineTransform with a 6-element matrix
2170 Creates a PDImageXObject from the provided byte array. @param document PDDocument instance @param byteArray image data in byte array form @return PDImageXObject object or null on error
2171 Converts internal float array to a COSArray object. @return COSArray containing the converted floats
2172 Sets an object at a specified index in the collection. @param index position of the object to set @param object COSObjectable instance or null to remove
2173 Sets an integer field at specified index. @param index field index @param value integer value to set
2174 Sets the name at specified index using PDF equivalent. @param index index of field to update @param name new value for field
2175 Sets a string at the specified index in this array. @param index position to insert or update string @param string value to assign (or null for removal)
2176 Sets minimum value of a data range. @param min minimum value to be set
2177 Sets the maximum value of an array element. @param max the new maximum value
2178 Sets the lower left X-coordinate of a rectangle. @param value new X-value (must be within valid range)
2179 Sets lower left y-coordinate of rectangle to specified float value. @param value float value representing y-coordinate
2180 Sets the upper-right X coordinate of the bounding box. @param value X-coordinate value
2181 Sets the upper-right Y-coordinate of a rectangle. @param value new Y-value
2182 Sets colour value at specified index in array. @param index position to set colour @param colour PDGamma object or null for unset
2183 Decrypts each element in the provided COSArray. @param array COSArray to be decrypted @param objNum object number used for decryption @param genNum generation number used for decryption
2184 Sets an option value. @param opt the option to be set as a string
2185 Sets default appearance string. @param da the default appearance value
2186 Sets the font size to the specified value. @param size font size in points
2187 Sets device N attributes and updates internal array accordingly. @param attributes PDVDeviceNAttributes object to set
2188 Sets the alternate color space for this object. @param cs PDColorSpace object to set as alternate
2189 Sets the radius value. @param r radius value as a float
2190 Sets gravitational acceleration value. @param g gravitational acceleration in m/s^2
2191 Sets value at index 2 to a float representation of 'b'. @param b floating-point value to be stored in the model.
2192 Sets the range for a component to specified values. @param range PDRange object containing min and max values @param n index of range in array (0-based)
2193 Sets the base color space. @param base the new PDColorSpace object
2194 Sets the colorant name in the underlying data structure. @param name the name of the colorant to set
2195 Sets the alternate color space for this object. @param colorSpace alternate color space to use
2196 Sets the first value to a floating-point number. @param x the floating-point value
2197 Sets the Y value of this object. @param y new Y coordinate value
2198 Sets the Z-coordinate value in the internal data structure. @param z the new Z-coordinate value
2199 Sets an item in the COS object with the given key and value. @param key unique identifier for the item @param value the item's value (null to remove existing item)
2200 Sets a boolean value in the PDF document. @param key unique key for the boolean value @param value true or false value to be set
2201 Sets a boolean value in the COS object. @param key unique identifier for the setting @param value true or false value to be stored
2202 Sets an item in the PDF document with the given key and value. @param key unique identifier of the item @param value COSBase object containing the new item data
2203 Sets a document metadata item by name and value. @param key unique identifier for the item @param value string value of the item
2204 Sets a string value for the specified key in the COS. @param key unique key identifier @param value string value to be stored
2205 Sets an integer property with the specified key and value. @param key unique identifier for the property @param value the integer value to be stored
2206 Sets a 64-bit integer value in the document. @param key unique identifier for the value @param value 64-bit integer value to store
2207 Sets a floating-point number in the PDF document. @param key unique name for the field @param value the floating-point value to store
2208 Creates a COS stream from the provided dictionary and stream parameters. @param dictionary COS dictionary to populate the stream @param startPosition starting position of the stream data @param streamLength total length of the stream data @return populated COSStream object, or null on failure
2209 Sets encryption dictionary in PDF trailer. @param encDictionary COSDictionary object containing encryption settings
2210 Sets document ID from given COS array. @param id unique document identifier as COS array
2211 Wraps the given page's content in a PDF save/restore pair (q/Q) for controlled environment. @param page PDPage object to modify
2212 Updates parent entry in the specified COSArray with a new COSDictionary and structure type. @param kArray COSArray to update @param newParent new parent dictionary @param newStructureType optional new structure type name
2213 Performs a brute-force search to locate and parse a trailer dictionary. @param trailer trailer dictionary to be parsed @return true if the trailer is successfully found, otherwise false
2214 Searches for trailer items in the PDF document. @param trailer COSDictionary to store found trailer items @return true if ROOT item is found, false otherwise
2215 Initializes PDF parsing by retrieving trailer and root dictionary. @throws IOException if missing or malformed data is encountered
2216 Parses the next token from the content stream.
2217 Writes the given PDF document to the underlying COSDocument. @param doc PDF document to write @param signInterface Signature interface for encryption and signing
2218 Retrieves and initializes document information. @return PDDocumentInformation object or null if not initialized
2219 Sets document information and updates trailer item. @param info PDDocumentInformation object to be stored
2220 Initializes a new PDDocumentCatalog instance for the given PDDocument. @param doc the associated PDDocument object
2221 Retrieves a list of PDF threads from the document's root object. @return List of PDThread objects or an empty list if not found
2222 Retrieves the additional actions from the document catalog. @return PDDocumentCatalogAdditionalActions object or null if not found
2223 Adds output intent to the document's OUTPUT_INTENTS array. @param outputIntent PDOutputIntent object to add
2224 Initializes PDDocumentNameDictionary with the given PDDocumentCatalog. @param cat The document catalog to retrieve or create the names dictionary from.
2225 Sets the crop box for the page. @param cropBox PDRectangle representing the new crop box or null to clear it
2226 Returns the additional actions for a PDF page. @return PDPageAdditionalActions object
2227 Initializes a new PDPageTree object with an empty page tree structure.
2228 Retrieves child dictionaries from a given COS dictionary node. @param node the parent COS dictionary to fetch children from @return list of child COS dictionaries or an empty list if none found
2229 Clears the internal data structures, removing any references to this object. If this object has a parent dictionary, it will be updated to reflect its removal.
2230 Creates a COS dictionary with label values. @return COSDictionary object containing key-value pairs
2231 Initializes a new instance of PDComplexFileSpecification. @param none
2232 Initializes a PDComplexFileSpecification object from the given dictionary. @param dict COSDictionary containing file specification data or null to create an empty object. @return this PDComplexFileSpecification instance.
2233 Sets the range values and updates the underlying COS object. @param rangeValues array of COS elements representing the range
2234 Sets domain values and updates COS object. @param domainValues array of domain values
2235 Sets encode values for COS object. @param encodeValues array of encoded values to be stored
2236 Sets decode values and updates underlying COS object. @param decodeValues array of decode values to be stored
2237 Sets an attribute on the PDF object. @param attrName name of the attribute to set @param attrValue new value for the attribute
2238 Removes the specified PDAttributeObject from the underlying COS dictionary. @param attributeObject the object to remove
2239 Updates the revision number for a given attribute in the PDF document. @param attributeObject the PDAttributeObject whose revision needs updating
2240 Adds a class name to the PDF dictionary. @param className the class name to add
2241 Removes a class name from the PDF document. @param className name to remove
2242 Adds a child (kid) to the parent's dictionary. @param object COSBase object representing the kid to append
2243 Inserts a new user into the existing collection. @param newKid new user object @param refKid reference kid object
2244 Removes a kid from the current object. @param object COSBase object to remove @return true if removed successfully, false otherwise
2245 Sets the value of the K item in the COS object. @param k new value for the K item
2246 Sets the value of the item with COS name V. @param value new value to set
2247 Returns the guideline color in device RGB space. @return PDColor object representing the guideline color
2248 Retrieves or creates the default line dash pattern for a PDF graphics state. @return PDLineDashPattern object representing the line dash pattern
2249 Sets the line dash pattern using a specified array of lengths. @param dashArray array of lengths for dash and space in the pattern
2250 Sets the cryptographic filter method. @param cfm COSName object representing the filter method
2251 Sets a PDF filter based on the provided string value. @param filter PDF filter name as a string
2252 Sets the owner key as a byte array. @param o the byte array representing the owner key
2253 Sets user key in dictionary. @param u byte array containing user key data
2254 Sets owner encryption key. @param oe byte array containing owner encryption key data
2255 Sets user encryption key in PDF document. @param ue byte array representing encryption key
2256 Sets PDF document recipients. @param recipients 2D array of recipient names
2257 Sets the cryptographic filter dictionary with a given name and value. @param cryptFilterName unique name of the filter @param cryptFilterDictionary COS object containing filter data
2258 Sets the name of the stream filter. @param streamFilterName COSName representing the stream filter
2259 Sets the filter name to the specified COSName. @param stringFilterName name of the filter as a COSName object
2260 Sets PDF permissions as a byte array. @param perms byte array representing PDF permissions
2261 Removes V4.5 filters from the dictionary.
2262 Initializes an empty FDF annotation. @param none
2263 Sets the fill color of an annotation item. @param c Color object to set
2264 Sets rich contents for an item. @param rc rich content string
2265 Sets the interior color of an annotation item. @param color Color object to set as interior color
2266 Sets callout data. @param callout array of float values representing callout
2267 Sets a 2D line using an array of floats. @param line array of x and y coordinates
2268 Sets the interior color of a PDF annotation. @param color Color object to set
2269 Sets the horizontal caption offset. @param offset float value for horizontal offset
2270 Sets the vertical caption offset in PDF annotation. @param offset offset value to be set (in points)
2271 Sets 3D vertices data. @param vertices array of float values representing vertex coordinates
2272 Sets the interior color of a PDF object. @param color the desired Color or null to clear
2273 Sets 3D vertex data. @param vertices array of float values representing 3D coordinates
2274 Sets the interior color to the specified Color value. @param color the new interior color
2275 Sets the interior color of an annotation item. @param color Color object to set
2276 Sets 2D coordinates of an item. @param coords array of float values representing x and y coordinates
2277 Sets user ID from COSArray. @param id array containing user identifier
2278 Sets differences stream in FDF item. @param diff COSStream object containing differences
2279 Sets the value of a PDF field to a specified object. @param value object representing field content (string, list, or COSObject)
2280 Sets the value of the underlying field using the provided COSBase object. @param value COSBase object to set as the field's value
2281 Sets field flags using a unique integer identifier. @param ff unique field flag value to set
2282 Sets SETFIELDFLAGS field with the specified flag value. @param ff flag value to set
2283 Sets clear field flags to the specified integer value. @param ff Clear field flags as an Integer object
2284 Sets widget field flags to the specified integer value. @param f flag value as an Integer object
2285 Sets the widget field flags using a Java integer value. @param ff the flag value to set
2286 Sets the clear widget field flags. @param ff Integer flag value or null to reset
2287 Sets rich text value in COS item. @param rv rich text string
2288 Sets rich text content from COSStream.
2289 Sets the "before" item in the dictionary to the specified string value. @param before the value to be stored
2290 Sets the "after" item in the dictionary with the specified value. @param after string to be stored as the "after" item
2291 Initializes a PDFont object with default settings.
2292 Initializes a font descriptor dictionary with basic attributes.
2293 Sets the font name for a PDF document. @param fontName the name of the font to use
2294 Sets the font family for a PDF document. @param fontFamily string representing the font family (e.g. "Arial")
2295 Sets the font stretch property in the dictionary. @param fontStretch string value for font stretch (e.g. "ultracondensed")
2296 Sets the font bounding box for a PDF element. @param rect PDRectangle object representing the bounding box
2297 Sets the character set for the document. @param charSet the character encoding (e.g. "UTF-8") or null to clear
2298 Initializes a DictionaryEncoding with the given base encoding and differences. @param baseEncoding the underlying encoding to modify (null for standard) @param differences the array of modifications to apply
2299 Sets gamma value in PDF document. @param value float value to be set
2300 Returns the PDF gamma value(s) from the catalog. @return PDGamma object or default values if not found
2301 Sets the gamma value in the PDF. @param gamma PDGamma object to set
2302 Sets the matrix item in the dictionary with the provided values. @param matrix Matrix object to set
2303 Retrieves and maps colorant information from the PDF resources. @param resources PDResources object @return Map of colorant names to their corresponding PDSeparation objects or null if not found
2304 Initializes a PDTransparencyGroupAttributes object with default settings.
2305 Initializes membership dictionary with OCMD as its type.
2306 Sets the visibility policy using the provided COSName. @param visibilityPolicy COSName representing the new visibility policy
2307 Sets the transformation matrix. @param transform AffineTransform object
2308 Sets or clears the bounding box (BBox) of a PDF object. @param bbox PDRectangle object representing the new BBox; null to clear
2309 Sets the background of the document to the specified COS array. @param newBackground COS array representing the new background
2310 Sets the bounding box and updates the PDF dictionary accordingly. @param newBBox the new bounding box rectangle
2311 Updates the PDF document's color space. @param colorSpace PDColorSpace object to set or null for removal
2312 Sets the function array to the provided COSArray instance. @param newFunctions COSArray containing function data
2313 Sets the transformation matrix from a given AffineTransform object. @param transform the AffineTransform to set
2314 Sets the document's domain to the provided COSArray. @param newDomain COSArray containing domain information
2315 Sets the extension array of the COS object. @param newExtend new COSArray to be extended
2316 Sets the user's domain to the specified COS array. @param newDomain COS array containing the updated domain information
2317 Sets user coordinates and updates COS item. @param newCoords array of coordinate values
2318 Sets decode values from COS array. @param decodeValues COSArray containing decode values
2319 Initializes an extended graphics state with default settings.
2320 Sets the blend mode of an object. @param bm BlendMode to apply
2321 Sets a float item in the dictionary. @param key unique identifier for the item @param value float value to set (null removes the item)
2322 Sets the transfer item in the dictionary. @param transfer COSBase object representing the transfer
2323 Sets the COSBase object representing TRANSFER 2 data. @param transfer2 TRANSFER 2 data to be stored
2324 Sets the T value. @param t COSBase object to be assigned
2325 Sets the 'h' flag on an item. @param h true to enable, false otherwise
2326 Sets fields in COSArray. @param array COSArray of field values
2327 Sets the sound stream item. @param sound COSStream object containing audio data
2328 Sets fields in action item using provided COSArray. @param array COSArray containing field values
2329 Sets the COS item D. @param d COSBase object to assign
2330 Sets the value of item B to the provided COSBase object. @param b COSBase object to be assigned to item B
2331 Sets the user's relationship type (P or C). @param relationship COSName value for relationship (P or C)
2332 Initializes a new PD annotation with default values.
2333 Initializes a PDAnnotation object from a COSDictionary. @param dict dictionary containing annotation metadata
2334 Sets a PDF rectangle within the dictionary. @param rectangle PDRectangle object containing width and height
2335 Sets the PDF page border using a COSArray. @param borderArray array of border elements (e.g., width, style)
2336 Sets the differences between the rectangle's bounds and its parent. @param differenceLeft left boundary difference @param differenceTop top boundary difference @param differenceRight right boundary difference @param differenceBottom bottom boundary difference
2337 Sets rectangle differences for PDF manipulation. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
2338 Sets a float array as a custom callout. @param callout the float array to be set
2339 Sets the list of ink paths. @param inkList 2D array of float arrays representing ink paths
2340 Sets line data in COS object. @param l array of floating-point values representing the line
2341 Sets the horizontal caption offset. @param offset float value for horizontal offset
2342 Sets the vertical caption offset in PDF document. @param offset vertical offset value
2343 Sets the quad points for the PDF page. @param quadPoints array of float values representing the quad points
2344 Sets rich contents of a COS object. @param rc rich content string
2345 Sets vertices for a 3D object from an array of point coordinates. @param points array of 3D point coordinates (x, y, z)
2346 Sets vertices data using an array of floats. @param points array of float values representing vertex coordinates
2347 Sets the parent annotation markup. @param annot PDAnnotationMarkup object to be assigned as parent
2348 Sets rectangle differences (margins) for a PDF object. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2349 Sets quad points for an object. @param quadPoints float array of quad point coordinates
2350 Initializes a new instance of the PDAppearanceDictionary class with an empty dictionary and sets the 'N' item.
2351 Sets the dash style of a line. @param dashArray COSArray containing dash pattern values
2352 Retrieves the line dash pattern for this object. @return PDLineDashPattern object representing the dash style
2353 Sets the operating system name in the PDF document. @param os the OS name to set (null to remove)
2354 Initializes a PD Seed Value object with default settings.
2355 Sets filter by name. @param filter COSName of the filter to apply
2356 Sets MDP value in the dictionary. @param mdp PDSeedValueMDP object or null to clear
2357 Sets the time stamp value in the dictionary. @param timestamp PDSeedValueTimeStamp object or null to clear
2358 Initializes a new PDSeedValueCertificate object.
2359 Adds a subject to the PDF metadata. @param subject byte array representing the subject string
2360 Validates and adds a key usage extension to the PDF dictionary. @param keyUsageExtension string containing 0s, 1s, or X (wildcard) characters
2361 Adds an issuer to the dictionary. @param issuer byte array representing the issuer
2362 Adds OID byte array to the PDF document. @param oid byte array representing the OID
2363 Initializes a new instance of PDSignature with default values.
2364 Sets the type of an item in the dictionary. @param type COSName representing the new type
2365 Sets the filter name. @param filter COSName object containing the new filter value
2366 Sets the sub-filter to be used in the filter. @param subfilter name of the sub-filter to apply
2367 Sets byte range in PDF document. @param range array of 4 integers representing the byte range
2368 Sets contents of PDF document from byte array. @param bytes contents data in byte form
2369 Sets text color in PDF document. @param textColor PDColor object representing desired text color
2370 Initializes an AcroForm object from a given PDF document. @param doc the PDF document to initialize from
2371 Initializes a PDF button with the given AcroForm.
2372 Initializes a new instance of the PDChoice class with an associated PDAcroForm. @param acroForm the parent PDAcroForm
2373 Sets the value of an item in a COS object. @param object the new value for the V item
2374 Sets the default value for this COS object. @param value The new default value to be set.
2375 Initializes PDSignatureField with given acroForm. @param acroForm PDAcroForm instance
2376 Initializes a new PDTextField instance with the given PDAcroForm. @param acroForm The parent form containing this text field.
2377 Sets the default style string for this object. @param defaultStyleString the new default style string or null to remove it
2378 Sets rich text value for the document. @param richTextValue string representation of rich text content
2379 Sets the origin of the coordinate system. @param coordSystemOrigin array of float values representing the new origin
2380 Initializes a new PDF thread object. @param none
2381 Sets transition direction using COS-based direction value. @param direction transition direction to be set
2382 Sets video duration to specified value. @param duration video duration in seconds
2383 Sets the fly scale to the specified value. @param scale the desired fly scale (float)
2384 Sets fly area opacity. @param opaque true to make fly area opaque, false otherwise
2385 Adds all objects from the provided array to this collection. @param objectList COSArray containing objects to add
2386 Returns the standard structure type, possibly overridden by a mapped value.
2387 Adds structure to the object pool, handling indirect references and nested objects. @param current COSBase instance to process
2388 Retrieves date value from COS using given key. @param key unique identifier of date field @param defaultValue default calendar to return if not found @return Calendar object representing the date value or defaultValue
2389 Retrieves a date from the embedded dictionary, or returns the default value if not found. @param embedded embedded dictionary to search in @param key COSName of the date key to fetch @param defaultValue Calendar object to return if date is not found
2390 Inserts generated combination appearance into the content stream. @param contents content stream to insert into @param appearanceStream appearance stream to use for formatting @param font font to use for text rendering @param fontSize font size to use for text rendering
2391 Creates a PDImageXObject from a BufferedImage. @param document parent PDDocument instance @param image source image data @param quality compression level (0.0-1.0)
2392 Loads an FDF document from a file. @param filename path to the FDF file to load @return loaded FDFDocument object or null on failure
2393 Adds first intermediate curl segment to the drawing. @param angleCur current angle @param r radius of arc segments @param alpha angle offset for curl segments @param cx center x coordinate of arcs @param cy center y coordinate of arcs
2394 Calculates intermediate curl template by generating three arc segments. @param angleCur initial angle @param r radius of arcs @return array of Point2D.Double objects representing arc segments
2395 Processes a single glyph in the PDF stream. @param textRenderingMatrix current text rendering matrix @param font font used to render the glyph @param code character code of the glyph @param displacement horizontal and vertical displacement of the glyph
2396 Fetches lines of text from a PDF content. @param font the font to use for rendering @param fontSize the font size to use for rendering @param width the maximum line width @return List of Line objects containing words with their attributes
2397 Retrieves symbolic font flag. @return Boolean indicating whether font is symbolic, or null if unknown
2398 Returns a fallback font name based on the provided PDFontDescriptor. @param fontDescriptor descriptor containing font information
2399 Creates a Paint object based on the provided PDColor. @param color the input color @return Paint object or null if not found
2400 Retrieves a list of PDF fields from the dictionary. @return List of PDField objects or empty list if not found
2401 Recursively searches for a nested kid field by name and index. @param name array of parent field names @param nameIndex current index in the name array @return PDField object or null if not found
2402 Retrieves a list of child fields for the current form. @return List of PDField objects or an empty list if none found
2403 Converts COSBase to a string representation, handling null inputs and stream types. @param base COSBase object to convert
2404 Retrieves the value of a PDF field, handling various data types. @return The field's value as String or null if not present
2405 Retrieves rich text value from the dictionary. @return Rich text string or null if not found
2406 Retrieves the "before" value as a string from the dictionary. @return string representation of "before" or null if invalid
2407 Retrieves the after value from the dictionary, returning a string representation. @return String representation of the after value or null if not found
2408 Retrieves the action string value from the AcroForm dictionary. @return Action string or null if not found in a valid format.
2409 Retrieves rich content string from PDF dictionary. @return Rich content string or null if not found
2410 Retrieves string value from COSBase, or stream content as a string. @param base COS object to extract value from @return String representation of the input object's contents
2411 Creates a LayoutPage object from the provided PDF page. @param page PDPage object to extract layout information from
2412 Converts object to byte array. @return byte array representation of the object or null on IO error
2413 Retrieves and populates the samples array from the PDF stream. @return 2D int array containing the sample values
2414 Initializes a PatchMeshesShadingContext with the specified parameters. @param shading PDMeshBasedShadingType to use @param colorModel Color model for rendering @param xform AffineTransform for mesh transformation @param matrix Matrix for mesh transformation @param deviceBounds Rectangle representing device bounds @param controlPoints Number of control points for patching
2415 Initializes Type4ShadingContext with given parameters. @param shading PDShadingType4 object @param cm ColorModel for context @param xform AffineTransform for coordinate transformation @param matrix Matrix for spatial transformation @param deviceBounds Rectangle representing device bounds
2416 Initializes Type5 shading context. @param shading PDShadingType5 object @param cm ColorModel @param xform AffineTransform @param matrix Matrix @param deviceBounds Rectangle representing device bounds
2417 Adds an attribute object to the PDF document. @param attributeObject PDAttributeObject instance to be added
2418 Adds a new user property to the document. @param userProperty PDUserProperty object to add
2419 Initializes PDICCBased with a PDDocument. @param doc the document to create ICCBased from
2420 Initializes a PDPattern object with given resources and color space. @param resources PDResources instance @param colorSpace PDColorSpace instance for the pattern's color space
2421 Sets the 'X' item in the document with an array of PDNumberFormat dictionaries. @param changeXs Array of format dictionaries
2422 Sets an array of PD number format dictionaries as the 'changeY' item in the COS object. @param changeYs array of PDNumberFormatDictionary objects
2423 Sets the distances in a PDF document. @param distances array of PDNumberFormatDictionary objects
2424 Sets the areas of a PDF document. @param areas array of PDNumberFormatDictionary objects
2425 Sets an array of PDNumberFormatDictionary objects representing page layout angles. @param angles collection of page orientation and scaling settings
2426 Sets an array of line sloaps in the PDF number format dictionary. @param lineSloaps array of PDNumberFormatDictionary objects
2427 Dynamically adjusts the object's size to match the specified value. @param size desired size
2428 Returns the text color as a PDColor object. @return PDColor object representing the text color
2429 Creates a clone of the given object in the specified parent dictionary. @param src source object to clone @param dstParent destination parent dictionary @param currentPageDict current page dictionary context @return cloned object or original if not cloneable
2430 Parses the current directory object from the input stream.
2431 Initializes a new instance of PDFXrefStreamParser from the given COSStream. @param stream COSStream object containing PDF cross-reference data
2432 Retrieves a list of next actions in the PDF. @return List of PDAction objects or null if no actions found
2433 Retrieves the PDF range for a given component index. @param n the component index (0-based) @return PDRange object representing the range or an empty range if invalid
2434 Retrieves encoding range for a parameter. @param paramNum index of the parameter @return PDRange object or null if not enough values available
2435 Retrieves color information by name, returning a single color or four-color object. @param name unique color identifier
2436 Populates the CID font with glyph widths. @param cidFont target COS dictionary
2437 Sets line dash pattern using the specified COS object. @param dashPattern line dash pattern to apply
2438 Constructs a PDCIEDictionaryBasedColorSpace object from a COSArray containing RGB data. @param rgb COSArray containing color space information
2439 Sets the guide line color using a PDColor object. @param color PDColor object representing the new line color
2440 Sets the color of the COS object. @param c PDColor to set as the new color
2441 Sets interior color using PDColor. @param ic interior color to apply
2442 Sets interior color of an object. @param ic PDColor representing desired interior color
2443 Sets interior color of PDF document. @param ic interior color object
2444 Sets interior color of a PDF object. @param ic interior color to be assigned
2445 Sets the border color of the PDF object. @param c PDColor object representing the new border color
2446 Sets background color using PDColor object. @param c PDColor object representing new background color
2447 Sets text color using a PDF color object. @param textColor PDF color to use
2448 Retrieves the ARange from the PDF document. @return PDRange object representing the ARange or default range if not found
2449 Retrieves the B-range from the PDF document's dictionary. @return PDRange object representing the B-range or a default range if not found
2450 Creates an image XObject from a stream. @param document PDDocument instance @param stream InputStream containing image data @return PDImageXObject or null if creation fails
2451 Sets the font to be used in the document. @param font PDFont object representing the desired font
2452 Sets tint transformation function. @param tint PDFunction to apply as tint transform
2453 Sets tint transform function. @param tint PDFunction object defining the tint transformation
2454 Sets the first element of the internal array to the specified PDPage object.
2455 Sets the upper limit of a PDF document's page range. @param upper the new upper limit value or null to reset it
2456 Sets the lower limit value for a node's limits array. @param lower the new lower limit value or null to clear it
2457 Sets the line ending style for annotation start point. @param style desired line ending style (null for default)
2458 Sets the end point style of a PDF annotation. @param style style to set (null for default)
2459 Sets the starting point ending line style for a PDF annotation. @param style the style to set (null for default)
2460 Sets the end point ending style for a PDF annotation. @param style desired line ending style (e.g. "square", "triangle")
2461 Sets the start point ending style of an annotation line. @param style style to set (or null for default)
2462 Sets the end point style for a line annotation. @param style line ending style (e.g. "square", "triangle", etc.)
2463 Sets the start point ending style for a PDF annotation. @param style desired style (null to reset)
2464 Sets the end point style for a PDF annotation. @param style the desired style (e.g. LE_NONE, LE_SQUARE, etc.)
2465 Sets the upper limit value for the current node. @param upper string representation of the upper limit
2466 Sets the lower limit value for the document. @param lower new lower limit string
2467 Clamps the given rectangle to fit within the media box. @param box the rectangle to clip @return a new rectangle representing the clipped bounds
2468 Creates a rectangle with dimensions matching the current component's bounds.
2469 Sets the before colour using PDGamma object. @param colour PDGamma colour value
2470 Sets the after-colour to the specified PDGamma. @param colour the new after-colour value
2471 Sets the start color of the PDGamma object. @param colour the new start color
2472 Sets the end color of an annotation. @param colour PDGamma object representing the new end color
2473 Decrypts a PDF object based on its type. @param obj the object to decrypt @param objNum the object number of the object being decrypted @param genNum the generation number of the object being decrypted
2474 Sets an item in the PDF document using its COS name. @param key the item's key @param value the item's value
2475 Sets the AcroForm item and resets cached form data. @param acroForm PDAcroForm object to be set
2476 Sets viewer preferences on the print job. @param prefs PDViewerPreferences object to apply
2477 Sets the document outline. @param outlines PDDocumentOutline object to be set
2478 Sets metadata item in the PDL document. @param meta PDMetadata object to be assigned
2479 Sets the open action for the document. @param action PDDestinationOrAction object representing the new open action
2480 Sets additional document catalog actions. @param actions PDDocumentCatalogAdditionalActions object to be added
2481 Sets the document name dictionary. @param names PDDocumentNameDictionary object to be assigned
2482 Sets PDMarkInfo details in PDF document. @param markInfo PDMarkInfo object with mark information
2483 Sets URI dictionary in the PDU. @param uri URI data to be set
2484 Sets the root of the structure tree to the specified PDStructureTreeRoot object. @param treeRoot PDStructureTreeRoot object to be set as root
2485 Sets page labels for the PDF document. @param labels PDPageLabels object containing label values
2486 Sets destinations in the PDF document. @param dests PDDestinationNameTreeNode object containing destination names
2487 Sets embedded files for the current item. @param ef PDEmbeddedFilesNameTreeNode object containing file information
2488 Sets JavaScript item in name dictionary. @param js JavaScript node to store
2489 Initializes a PDF page with the specified media box. @param mediaBox rectangle defining the page's size and position
2490 Sets the resources for a page. @param resources PDResources object containing page resources or null to clear existing ones
2491 Sets the media box for a PDF page. @param mediaBox PDRectangle representing the media box dimensions
2492 Sets the bleed box for the page. @param bleedBox rectangle representing the bleed area or null to clear it
2493 Sets the trim box for the page. @param trimBox PDRectangle object representing the trim box (null to remove)
2494 Sets the Art Box rectangle for the PDF page. @param artBox the new Art Box dimensions (null to remove)
2495 Sets contents of a PDF page. @param contents PDStream object containing document content
2496 Sets metadata for the current page. @param meta PDMetadata object to be assigned
2497 Sets additional actions for the page. @param actions PDPageAdditionalActions object
2498 Sets the transition of a PD item. @param transition PDTransition object to be set
2499 Sets the transition effect and duration for a page. @param transition PDTransition object to apply @param duration duration of the transition in seconds
2500 Adds an item to the specified dictionary. @param kind unique dictionary key @param name item key within the dictionary @param object item value to store
2501 Sets the embedded file for this PDF object. @param file PDEmbeddedFile to be set
2502 Sets embedded file with Unicode data. @param file PDEmbeddedFile object to set
2503 Sets the PDF page to be rendered. @param page PDPage object containing page content
2504 Sets the referenced object in COS structure. @param annotation PDAnnotation object to be set
2505 Sets the referenced object in the COS item. @param xobject PDXObject to be set
2506 Sets the current PDF page. @param page PDPage object to be set
2507 Sets the parent node of the current PDStructureNode. @param structureNode new parent node to associate with this node
2508 Sets the current PDF page. @param page PDPage object to set
2509 Sets the parent tree node in the COS object. @param parentTree PDNumberTreeNode instance to set as parent
2510 Sets the rectangle annotation item. @param rectangle PDRectangle object to be set
2511 Sets border style of an item using PDBorderStyleDictionary. @param bs PDBorderStyleDictionary object containing border styles
2512 Sets border effect using PDBorderEffectDictionary. @param be dictionary of border effects
2513 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object defining the fringe
2514 Sets the fringe of an annotation item. @param fringe PDRectangle object representing the fringe
2515 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object representing the fringe
2516 Sets the fringe of a PDF annotation item. @param fringe PDRectangle object defining the fringe
2517 Sets FDF dictionary for the catalog item. @param fdf FDFDictionary object to be associated
2518 Sets PDSignature object as document signature. @param sig PDSignature to be assigned
2519 Sets the file specification for the PDF item. @param fs PDFileSpecification object containing file details
2520 Sets JavaScript script associated with FDF document. @param js FDFJavaScript object containing script content
2521 Sets catalog to PDF document's trailer. @param cat FDFCatalog object
2522 Sets the appearance dictionary for an item. @param ap PDAppearanceDictionary object to assign
2523 Sets the appearance stream reference. @param ref FDFNamedPageReference object to assign
2524 Sets icon fitting style. @param fit FDFIconFit enum value
2525 Sets the action associated with this item. @param a PDAction object to be assigned
2526 Sets additional actions for the item. @param aa PDAdditionalActions object to be stored
2527 Sets fractional space to allocate for item A. @param space PDRange object representing allocated space
2528 Sets file specification with provided PDFileSpecification object. @param fs the PDF file specification to be set
2529 Sets the FDF page information. @param info FDFPageInfo object containing page details
2530 Sets the FDF named page reference for the template. @param tRef FDFNamedPageReference object to assign
2531 Sets font file from PDF stream. @param type1Stream PDF stream containing font data
2532 Sets font file 2 from a PDStream object. @param ttfStream The font file as a PDStream object
2533 Sets the font file 3 for the PDF document. @param stream PDStream object containing font data
2534 Sets the CID set from the provided PDF stream. @param stream PDF data containing CID set information
2535 Sets the tristimulus white point for this object. @param whitepoint PDTristimulus representing the white point
2536 Sets the black point of the device. @param blackpoint PDTristimulus object representing the black point
2537 Sets the extended graphics state for PDF rendering. @param extendedGraphicsState PDExtendedGraphicsState object to set
2538 Sets the shading resources and updates the COS object. @param shadingResources PDShading object containing shading data
2539 Sets the PDF resources. @param resources COS object representing PDF resources
2540 Sets the current function to the specified PDFunction. @param newFunction the new function to be set
2541 Sets font setting in PDF dictionary. @param fs PDFontSetting object containing font details
2542 Sets the destination for a page jump action. @param d PDDestination object to set
2543 Sets file specification based on COS item F. @param fs PDFileSpecification object to be set
2544 Sets the target directory using a PDTargetDirectory object. @param targetDirectory target directory to be set
2545 Sets the destination for a PDF document's GoTo action. @param d PDDestination object to set as destination
2546 Sets the file specification for an item in the PDF document. @param fs PDFileSpecification object containing file details
2547 Sets the file specification for the COS object. @param fs PDFileSpecification containing file details
2548 Sets Windows launch parameters. @param win PDWindowsLaunchParams object containing launch settings
2549 Sets file specification for an item. @param fs file specification to be assigned
2550 Sets the file specification for an item. @param fs PDFileSpecification object containing file details
2551 Sets the file specification for the item. @param fs PDFileSpecification object containing file details
2552 Sets item F in actions list with given PDAction. @param action PDAction to be assigned
2553 Sets the item at COSName.E in the actions collection. @param e PDAction object to be assigned
2554 Sets the action associated with X item. @param x action to be assigned
2555 Sets the D item in the actions collection. @param d PDAction object to assign
2556 Sets item U of the actions collection to the specified PDAction object. @param u the PDAction object to be assigned
2557 Sets FO (First Opportunity) action. @param fo PDAction object representing the new opportunity
2558 Sets the business logic action. @param bl business logic action to be set
2559 Sets the Purchase Order (PO) action. @param po PDAction object representing the PO
2560 Sets the PC action to the specified value. @param pc the new PC action
2561 Sets PV (Process Variable) action. @param pv ProcessVariable object
2562 Sets the PI action. @param pi PDAction object to assign
2563 Sets the Work Center (WC) action. @param wc PDAction object representing the WC
2564 Sets the WS action. @param ws PDAction object to set
2565 Sets Data Source (DS) action. @param ds PDAction object representing data source
2566 Sets the Word Press action. @param wp WPAction object to be assigned
2567 Sets the default page (DP) action. @param dp PDAction object representing the new DP behavior
2568 Sets the action associated with key K. @param k PDAction object to be assigned
2569 Sets the action with name F. @param f the action to be assigned
2570 Sets the action associated with V in the item collection. @param v The PDAction object to be assigned
2571 Sets the action at COSName.C. @param c PDAction object to be set
2572 Sets the action with COSName O. @param o PDAction object to be set
2573 Sets item C in actions to specified action. @param c PDAction object to assign
2574 Sets the target directory for processing. @param targetDirectory PDTargetDirectory object to be stored
2575 Sets the named destination for this object. @param dest PDNamedDestination to set or null to remove existing one
2576 Sets the appearance of an item in the PDDictionary. @param appearance PDAppearanceDictionary object to be assigned
2577 Sets optional content of a COS object. @param oc PDPropertyList containing optional content
2578 Sets the PDF page to be used in the document. @param page PDPage object representing the page
2579 Sets the PDFileSpecification object for the current COS item. @param file specification of the file to be set
2580 Sets the border effect dictionary. @param be PDBorderEffectDictionary object to apply
2581 Sets the rectangle difference (RD) to the specified value. @param rd PDRectangle object containing the RD values
2582 Sets an Action item in the COS object. @param action PDAction object to store
2583 Sets border style of COS object. @param bs PDBorderStyleDictionary instance
2584 Sets the destination for the COS object. @param dest PDDestination object to be set
2585 Sets the previous URI action. @param pa PDActionURI object to store
2586 Sets the PD annotation popup object. @param popup PD Annotation Popup instance to set
2587 Sets the In-Reply-To (IRT) annotation. @param irt The IRT annotation to be set
2588 Sets external data dictionary. @param externalData PDExternalDataDictionary object to be stored
2589 Sets border style of COS object. @param bs PDBorderStyleDictionary instance to apply
2590 Sets the border effect using the provided dictionary. @param be PDBorderEffectDictionary object
2591 Sets border effect dictionary based on provided PDBorderEffectDictionary. @param be PDBorderEffectDictionary object to set as border effect
2592 Sets rectangle difference using PDRectangle object. @param rd PDRectangle object containing rectangle data
2593 Sets appearance characteristics for the COS object. @param appearanceCharacteristics dictionary of appearance characteristics
2594 Sets the action associated with this object. @param action PDAction object to be stored
2595 Sets PDAnnotationAdditionalActions for the COS item AA. @param actions additional annotation actions
2596 Sets border style dictionary for COS object. @param bs PDBorderStyleDictionary instance to apply
2597 Sets the parent of this object. @param field PDTerminalField instance to set as parent
2598 Sets normal appearance for a PDAppearanceEntry. @param entry PDAppearanceEntry object to store
2599 Sets normal appearance stream in PDAppearanceDictionary. @param ap PDAppearanceStream object to store
2600 Sets rollover appearance in the dictionary. @param entry PDAppearanceEntry object
2601 Sets rollover appearance in the dictionary. @param ap PDAppearanceStream object to be stored
2602 Sets the down appearance of an item in the dictionary. @param entry PDAppearanceEntry object containing appearance details
2603 Sets down appearance stream in PDAppearance dictionary. @param ap PDAppearanceStream object to be stored
2604 Sets the build filter property in the PDPropBuildDataDict. @param filter PDPropBuildDataDict object to be assigned
2605 Sets the public security property of PDPropBuildData. @param pubSec public security data
2606 Sets application data in PD property build dictionary. @param app PDPropBuildDataDict object containing application details
2607 Sets seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object to store
2608 Sets the build property of the item in the dictionary. @param propBuild PDPropBuild object containing build data
2609 Sets the previous sibling node in the outline. @param outlineNode PDOutlineNode to be set as previous sibling
2610 Sets the next sibling node in the outline hierarchy. @param outlineNode PDOutlineNode instance to be assigned
2611 Sets destination PDDestination object. @param dest PDDestination to be set
2612 Sets the action item in the COS object. @param action PDAction object to be set
2613 Sets the structure element in the COS object. @param structureElement PDStructureElement to be set
2614 Sets the first child node of the PDOutlineNode. @param outlineNode the new first child node
2615 Sets the last child node of an outline. @param outlineNode PDOutlineNode object to be set as last child
2616 Sets default resources. @param dr PDResources object to be assigned as default
2617 Sets XFA resource in PDF document. @param xfa PDXFAResource object to store
2618 Sets PDSignature value in COS object and applies changes. @param value PDSignature to be set
2619 Sets the default signature item in the COS object. @param value PDSignature to be set as the default
2620 Sets the seed value. @param sv PDSeedValue object to be stored
2621 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object
2622 Sets the bounding box of the PDF page. @param rectangle PDRectangle object defining the bounds
2623 Sets the measurement dictionary. @param measure PDMeasureDictionary object to store
2624 Sets document information in the thread. @param info PDDocumentInformation object containing metadata
2625 Sets the thread item in the bead data structure. @param thread PDThread object to be stored
2626 Sets the next bead in the thread. @param next the PDThreadBead to be assigned
2627 Sets the previous bead in the thread. @param previous the new previous bead
2628 Sets the current PDF page. @param page PDPage object to set as current page
2629 Sets the rectangle item of a PDF page. @param rect the rectangle to be set
2630 Sets the 'Marked' field in the dictionary to the specified boolean value. @param value true if marked, false otherwise
2631 Sets user properties flag in the internal dictionary. @param userProps true to enable or false to disable user properties
2632 Sets suspect flag to false in the dictionary. @param suspect ignored (always set to false)
2633 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
2634 Sets the 'Open' property of the COS object. @param open whether the object is open or not
2635 Sets the FD boolean value on the underlying COS object. @param fd true/false flag to enable/disable FD functionality
2636 Sets volatile flag on file. @param fileIsVolatile true if file is volatile, false otherwise
2637 Sets the visibility of the object and notifies listeners if changed. @param hidden true to hide, false to show
2638 Sets encryption metadata flag. @param encryptMetaData true to enable data encryption
2639 Sets caption visibility. @param cap true to show, false to hide caption
2640 Enables/disables scale-to-fit annotation behavior. @param value true to enable, false otherwise
2641 Sets whether to rename the document upon saving. @param value true to enable renaming, false otherwise
2642 Sets rendering anti-aliasing preference. @param antiAlias true to enable anti-aliasing
2643 Sets stroking overprint control flag. @param op true to enable stroking overprint control
2644 Sets non-stroking overprint control flag in dictionary. @param op true to enable, false otherwise
2645 Sets automatic stroke adjustment mode. @param sa true to enable, false to disable
2646 Sets the alpha source flag in the dictionary. @param alpha true to enable or false to disable
2647 Sets the text knockout flag in the dictionary. @param tk true to enable or false to disable text knockout
2648 Sets whether to open in a new window based on given OpenMode. @param value OpenMode to apply (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2649 Sets whether to open a PDF in a new window based on provided mode. @param value OpenMode enum value (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2650 Sets whether to open the document in a new window. @param value OpenMode specifying how to open the document
2651 Sets whether the action will execute synchronously. @param synchronous true to run synchronously, false otherwise
2652 Sets whether the action is repeated. @param repeat true to enable repetition, false otherwise
2653 Sets the MIX boolean attribute. @param mix true/false value to enable/disable mixing
2654 Sets the caption boolean attribute. @param cap whether to enable or disable captioning
2655 Sets the "Open" property of the PDF document. @param open true to set the document as open, false otherwise
2656 Sets whether the feature is in pre-release mode. @param preRelease true to enable pre-release, false otherwise
2657 Sets whether to suppress embedded font warnings. @param noEmbedFontWarning true to disable warnings for non-embeddable fonts
2658 Sets trusted mode flag in dictionary. @param trustedMode true to enable trusted mode, false otherwise
2659 Sets whether to need appearances in the dictionary. @param value true to require appearances, false otherwise
2660 Sets whether to hide toolbar. @param value true to hide toolbar, false otherwise
2661 Sets whether to hide menubar. @param value true to hide, false otherwise
2662 Sets whether to hide window UI. @param value true to hide, false otherwise
2663 Sets whether to fit window to content. @param value true to enable fitting
2664 Sets whether to center the window. @param value true to center, false otherwise
2665 Sets whether to display document title in UI. @param value true to show document title, false otherwise
2666 Sets an array of strings in the PDF dictionary. @param name key for the array @param values array of string values to set
2667 Sets an array of names in the PDF dictionary. @param name unique name for the array @param values list of string values to add to the array
2668 Sets an array of numbers in the PDF document dictionary. @param name key to store the array under @param values array of float values to set
2669 Parses appearance XML for a stamp annotation and creates a COSDictionary. @param appearanceXML Element containing the appearance data @return COSDictionary object representing the parsed appearance data
2670 Sets name-value pair in COS object. @param key unique identifier @param value associated string value
2671 Sets the page mode for the document. @param mode PageMode value to set
2672 Sets the page layout of the document to the specified value. @param layout PageLayout object containing layout details
2673 Sets the application version. @param version new version string to be assigned.
2674 Sets the trapped flag to a specific value. @param value one of: True, False, Unknown
2675 Sets the style of this object. @param style new style value or null to remove existing style
2676 Initializes a typed dictionary wrapper with the specified data type. @param type string representation of the data type
2677 Sets the owner of the COS object. @param owner new owner's name
2678 Initializes a new instance of PDMarkedContentReference with default dictionary and type.
2679 Initializes a new PDObjectReference instance with default type.
2680 Sets the COS name of the underlying object to the specified structure type. @param structureType new structure type value
2681 Initializes structure node with specified type. @param type unique type identifier
2682 Updates user's display name and potentially notifies listeners of change. @param name new display name
2683 Sets the guideline style in the dictionary. @param style new style to apply
2684 Sets the sub-filter value in the dictionary. @param subfilter new filter value
2685 Sets the COS name of an IT intent. @param intent the new IT intent value
2686 Sets the line ending style in annotation. @param style desired line ending style
2687 Sets the icon name. @param icon unique icon identifier
2688 Sets the software version. @param version new version string to be assigned
2689 Sets document encoding. @param encoding encoding scheme (e.g. "UTF-8")
2690 Sets scale option using COS name. @param option desired scale option value
2691 Sets the scale type by assigning it to the 'S' attribute of the fit object. @param scale the new scale type value
2692 Initializes an abstract pattern with a dictionary containing type information.
2693 Sets the type of an action. @param type new type value
2694 Sets the subtype of an action based on the provided string. @param s subtype value to be assigned
2695 Sets subtype of COS object. @param subType new subtype value
2696 Sets appearance state of COS object. @param as appearance state string
2697 Sets attachment name in COS (Collaborative Office Server) object. @param name new attachment name
2698 Sets the line ending style in the COS object. @param style desired line ending style (e.g. "lf", "crlf", etc.)
2699 Sets the positioning of the document caption. @param captionPositioning new positioning value
2700 Sets the highlighting mode for the COS object. @param mode new highlighting mode (e.g. "highlight", "underline")
2701 Sets the reply type using the provided string value. @param rt the new reply type to be assigned
2702 Sets the intent value in COS. @param it new intent value
2703 Sets the user's display name. @param name new display name value
2704 Sets the name of the COS object. @param name the new name to be set
2705 Sets the highlighting mode for COS object. @param highlightingMode one of 'N', 'I', 'O', 'P', or 'T'
2706 Sets the style of the COS object. @param s the new style value
2707 Initializes an empty external data dictionary with type 'ExData'.
2708 Sets the subtype of an object. @param subtype new subtype value
2709 Sets the user's display name in the underlying data store. @param name new display name for the user
2710 Sets the URL type in the dictionary. @param urlType new URL type value
2711 Initializes document outline with default type and name.
2712 Initializes a new PDDocumentOutline from a COSDictionary. @param dic the COS dictionary containing outline data
2713 Sets default value in COS object. @param value new default value to be set
2714 Initializes the measure dictionary with default values.
2715 Sets the subtype of the COS object. @param subtype new subtype value
2716 Initializes the number format dictionary with default values.
2717 Sets user's name. @param name new username value
2718 Constructs a PDTransition object with the specified style. @param style PDTransitionStyle enumeration value
2719 Sets transition dimension using specified PDTransitionDimension. @param dimension PDTransitionDimension object to be applied
2720 Sets motion to be applied by transition. @param motion PDTransitionMotion object containing motion details
2721 Sets the date using a Calendar object. @param key COSName of the date field @param date Calendar instance to serialize as string
2722 Sets string attribute with given key and value. @param key unique attribute key @param value attribute value
2723 Sets an embedded string in a COS dictionary. @param embedded the COS name containing the dictionary @param key the key for the string value @param value the string to be set
2724 Sets the application language to the specified value. @param language desired language code (e.g., "en", "fr")
2725 Sets document title. @param title new title value
2726 Sets the document's author field to the specified value. @param author new author string
2727 Sets the document subject to the specified string. @param subject new subject value
2728 Sets keywords value in profile. @param keywords string containing keywords (e.g. "java", "programming")
2729 Sets the creator of the document. @param creator string value to be assigned as the creator
2730 Sets the producer string in the underlying data structure. @param producer the new producer value
2731 Sets the prefix value in the storage. @param prefix new prefix to be stored or null to remove it.
2732 Sets the Unicode file path. @param file the new file path
2733 Sets the specified file path. @param file new file path to be stored
2734 Sets file description. @param description new file description text
2735 Sets the element identifier. @param id unique identifier string
2736 Sets the document title. @param title new title string
2737 Sets the document language. @param language the new language value
2738 Sets alternate description. @param alternateDescription new alternate description text
2739 Sets the expanded form string in the COS object. @param expandedForm new expanded form value
2740 Sets the actual text value in the COS object. @param actualText new text value to be set
2741 Updates the formatted value and notifies if changed. @param formattedValue new formatted string to set
2742 Sets the date field of COSName structure. @param date new date value
2743 Sets the user's name. @param name new name to be assigned
2744 Sets document contents. @param contents new content string
2745 Sets the title of an annotation. @param title new title string
2746 Sets the subject of an annotation. @param subject new subject value
2747 Sets the annotation symbol to a paragraph symbol or "None" if not specified. @param symbol "paragraph" to set symbol to "P", null otherwise
2748 Sets default appearance for annotation. @param appearance new appearance value
2749 Sets the default stylesheet. @param style CSS or other stylesheet string
2750 Sets the caption style. @param captionStyle new text formatting string
2751 Sets the state string. @param state new user state value
2752 Sets the state model string value. @param stateModel the state model string to set
2753 Sets the user's status to the specified value. @param status new status string
2754 Sets the target value in FDF document. @param target new target string value
2755 Sets partial field name for database query. @param partial partial field name to filter by
2756 Sets the user's name. @param name new name value to be set
2757 Sets the user's name in the underlying dictionary. @param name new name to be set
2758 Initializes PDOptionalContentProperties with default values. @param none
2759 Sets JavaScript action string. @param sAction JavaScript action to be set
2760 Sets the value of field 'f' in the underlying data structure. @param f new value to assign
2761 Sets the value of the COSName.D field to the specified string. @param d the new string value
2762 Sets the value of O string attribute. @param o new value for O string attribute
2763 Sets the value of parameter P. @param p new value for parameter P
2764 Sets the URI string value. @param uri the new URI string
2765 Sets the filename in the dictionary. @param filename new file name to store
2766 Sets the annotation name in the dictionary. @param name new annotation name
2767 Sets the filename using the specified string value. @param file new filename to be assigned
2768 Sets the directory path. @param dir new directory value
2769 Sets the operation parameter. @param op operation string (e.g. "eq", "neq")
2770 Sets an execute parameter by name. @param param executable parameter value
2771 Sets the contents of the dictionary using the specified string value. @param value the new contents to store in the dictionary
2772 Sets modified date as a string on the underlying COS object. @param m modified date value in string format
2773 Sets annotation name. @param nm new name value
2774 Sets default appearance value. @param daValue new default appearance string
2775 Sets the default style string in the COS object. @param defaultStyleString new style string value
2776 Sets title popup text. @param t new title popup string
2777 Sets the subject string in the COS object. @param subj new subject value
2778 Sets the state attribute of the COS object. @param state new state value
2779 Sets the state model string in the COS object. @param stateModel new state model value
2780 Sets normal caption to the COS object. @param caption new caption string
2781 Sets rollover caption. @param caption text to display on rollover
2782 Sets an alternate caption string for the COS object. @param caption new caption value
2783 Sets the date value in the dictionary. @param date the new date value to be set
2784 Sets the URL string in the dictionary. @param url new URL value to store
2785 Sets the URL value in the dictionary. @param url new URL to be stored
2786 Sets the user's name in the underlying data structure. @param name new name to be assigned
2787 Sets the user's location to the specified value. @param location the new location value
2788 Sets the reason associated with this entity. @param reason user-provided reason string
2789 Sets user's contact information. @param contactInfo new contact details to store
2790 Sets the document title. @param title new title value
2791 Sets the default appearance value. @param daValue new default appearance string
2792 Sets the default value as a string. @param value the new default value
2793 Sets partial name for a field, ensuring it does not contain a period. @param name partial name string
2794 Sets an alternate field name for the current user profile. @param alternateFieldName new field name to use
2795 Sets the mapping name in the dictionary. @param mappingName the new mapping name
2796 Sets a string value on the underlying COS object. @param value the new string value
2797 Sets string value on COS object and applies changes. @param value new string value to set
2798 Sets default string value in COS object. @param value default string value to be set
2799 Sets the default appearance value for all widgets. @param daValue new default appearance string
2800 Sets the scale ratio as an Acrobat string attribute. @param scaleRatio the desired scale ratio value
2801 Sets an integer value associated with the specified key in PDF. @param key unique string identifier @param value integer value to be stored
2802 Sets an integer value in a dictionary embedded within another name. @param embeddedDictionary parent name containing the dictionary @param key unique identifier for the integer value @param value integer to be stored in the dictionary
2803 Sets a flag in the specified field with the given bitFlag. @param field COSName of the field to modify @param bitFlag bitwise flag value to enable or disable @param value true to enable, false to disable the flag
2804 Sets the structure parents identifier. @param structParents unique identifier of structure parents
2805 Sets the page rotation in degrees. @param rotation angle of rotation (0-360)
2806 Initializes a PDPageTree object from a COSDictionary page tree root and PDDocument. @param root COSDictionary representing the page tree @param document PDDocument associated with the page tree
2807 Removes the specified dictionary from its parent's kids array and updates ancestor counts. @param node COSDictionary to be removed
2808 Adds a PDPage to the document tree. @param page PDPage object to be added
2809 Sets the starting page number for pagination. @param start positive integer representing the first page
2810 Sets the bits per sample value. @param bps Bits per sample value
2811 Sets the MCID (Member ID) of the COS object. @param mcid new member identifier value
2812 Sets the revision number of a COS object. @param revisionNumber non-negative integer identifier
2813 Sets the next key of the parent tree. @param parentTreeNextkey new value for PARENT_TREE_NEXT_KEY property
2814 Sets the document length in the filter dictionary. @param length new length value
2815 Sets the application version. @param version new version number to store
2816 Sets the document length to the specified value. @param length new length in units
2817 Sets the document revision number. @param revision new revision value to store in the document
2818 Sets permissions value in user profile. @param permissions integer permission level
2819 Sets the page number in the PDF annotation. @param page the 1-based page number to set
2820 Sets text justification (quadding) based on given string. @param justification "centered", "right" or null to reset
2821 Sets rotation value. @param rotation new rotation angle (in degrees)
2822 Sets field flags to specified value. @param ff field flag integer value
2823 Sets flags on a field's SET value. @param ff flag values to apply
2824 Sets clear field flags using the specified integer value. @param ff integer value representing clear field flags
2825 Sets flags for widget fields. @param f bitwise combination of field flag values
2826 Sets widget field flags using the specified integer value. @param ff integer flag value
2827 Sets flags for clear widget fields. @param ff integer value representing flag settings
2828 Sets user flags to the specified value. @param flags integer representing user flags
2829 Sets widths for a range of glyphs based on the provided font and glyph list. @param font COSDictionary representing the font @param glyphList GlyphList containing the glyph data
2830 Sets the paint type in the pattern dictionary. @param paintType integer value representing the paint type
2831 Sets the pattern type in the pattern dictionary. @param patternType integer value representing the pattern type
2832 Sets the paint type to the specified value. @param paintType integer representing the paint type
2833 Sets the document's tiling type. @param tilingType integer representing the tiling type
2834 Sets the shading type using the specified integer value. @param shadingType integer representation of shading type
2835 Sets the number of flags per bit. @param bitsPerFlag integer value representing flags per bit
2836 Sets the number of vertices per row in the COS object. @param verticesPerRow the new vertex count
2837 Sets the number of bits per color component. @param bitsPerComponent new bit depth value
2838 Sets the number of bits per coordinate. @param bitsPerCoordinate new bit depth value
2839 Sets the line cap style. @param style integer value representing the line cap style
2840 Sets line join style. @param style integer value representing line join style
2841 Sets the overprint mode based on the provided integer value. @param overprintMode integer value for overprint mode (null to clear)
2842 Sets flag integer value. @param flags flag value to be assigned
2843 Sets flags using CosObject's int property. @param flags integer flag value to be set
2844 Sets page number in dictionary. @param pageNumber new page value (negative to remove)
2845 Sets annotation index in internal dictionary. @param index new index value or -1 to remove the annotation
2846 Sets annotation flags. @param flags integer flag value
2847 Sets the parent structure ID. @param structParent unique identifier of the parent structure
2848 Sets the Q property value. @param q new Q property value
2849 Sets document rotation in degrees. @param rotation new rotation value
2850 Sets the P value to a valid range [0, 3]. @param p value to be set (0-3)
2851 Sets whether timestamp is required in the document. @param flag true to require timestamp, false otherwise
2852 Sets the open count value in the COS object. @param openCount new count value to be set
2853 Sets the value of Q in the dictionary. @param q integer value to be stored
2854 Sets field flags in the dictionary. @param flags integer value representing field flags
2855 Sets or clears the top index value. @param topIndex new top index value (null to clear)
2856 Sets the maximum length limit. @param maxLen new maximum length value
2857 Sets the Q value. @param q new Q value to be set
2858 Sets a long value in the COS dictionary using a given key. @param key unique key for the value @param value long value to be stored
2859 Updates the document trailer with the necessary information. @param doc the COSDocument to update
2860 Sets the document revision. @param revision unique revision identifier
2861 Sets the minimum revision number. @param revision long value representing the minimum revision
2862 Sets a floating-point value in PDF metadata. @param key unique key @param value floating-point value to be set
2863 Sets user unit value. Must be a positive number. @param userUnit user's measurement unit
2864 Sets the guideline width to the specified value. @param width new width value
2865 Sets the opacity of an annotation. @param opacity value between 0.0 (fully transparent) and 1.0 (fully opaque)
2866 Sets the length of the leader annotation. @param leaderLength new value for the leader length
2867 Sets the leader extend value. @param leaderExtend extent of the leader
2868 Sets the leader offset value. @param leaderOffset new leader offset value
2869 Sets font weight using specified value. @param fontWeight new font weight value
2870 Sets italic angle in font dictionary. @param angle angle value (in radians) to be set
2871 Sets the camera's vertical ascent value. @param ascent new ascent value
2872 Sets the descent value in the dictionary. @param descent float value representing the descent
2873 Sets the leading value in the document dictionary. @param leading the new leading measurement
2874 Sets the cap height value in the dictionary and updates the local capHeight field. @param capHeight new cap height value
2875 Sets the X-height property to the specified value. @param xHeight new X-height value
2876 Sets the stem voltage value. @param stemV new stem voltage value
2877 Sets stem height value. @param stemH new stem height in float
2878 Sets the average width of a shape. @param averageWidth the new average width value
2879 Sets maximum width for layout element. @param maxWidth new maximum width value
2880 Sets the missing width value. @param missingWidth new missing width value
2881 Sets the X step value in the underlying COS object. @param xStep new X step value
2882 Sets the Y step value. @param yStep float representing the new Y step
2883 Sets audio volume within valid range (-1.0 to 1.0). @param volume float value in the range -1.0 to 1.0
2884 Sets the length of the leader line. @param leaderLineLength length in units (typically PDF points)
2885 Sets the leader line extension length. @param leaderLineExtensionLength new length value
2886 Sets leader line offset length in COS document. @param leaderLineOffsetLength offset length value
2887 Sets the constant opacity value. @param ca opacity value in range [0.0f, 1.0f]
2888 Sets the width of this object. @param w new width value; integer values are stored as integers, others as floats
2889 Sets the minimum required capability (V) in the underlying data structure. @param minimumRequiredCapability value to be stored
2890 Sets CYX attribute of COS object to specified value. @param cyx float value to assign to CYX attribute
2891 Parses a COS stream from the given dictionary. @param dic COSDictionary containing stream metadata @return COSStream object or null if parsing fails
2892 Merges and clones the contents of two COSObjectables. @param base source object to clone @param target destination object to merge into
2893 Parses a PDF file into a PDDocument object. @param lenient true to ignore missing versioninfo, false for strict parsing @return PDDocument object or throws IOException if error occurs
2894 Processes stream operators and operands in the given content stream. @param contentStream PDF content stream to process
2895 Parses input stream into a list of objects. @return List of parsed objects or empty list if none found
2896 Parses PDF stream to extract glyph bounding box. @return PDRectangle object or null if not found
2897 Parses PDF operator to fetch width value. @throws IOException if parsing fails or unexpected EOF
2898 Writes PDDocument to an unspecified output location. @param doc the document to be written
2899 Writes incremental PDF data to the specified output stream. @param output OutputStream where PDF data will be written
2900 Creates an empty PDDocument instance with in-memory storage. @param streamCache memory-only stream cache
2901 Retrieves the catalog of documents. @return PDDocumentCatalog object or null if not found
2902 Recursively fetches a COSDictionary by 1-based page number. @param pageNum the desired page number (1-indexed) @param node starting search root @param encountered current page count
2903 Creates a PDFileSpecification object based on the provided COSBase. @param base COSBase instance to create the specification from @return PDFileSpecification object or null if invalid input
2904 Notifies the parent structure element of attribute changes.
2905 Appends COSObjectable's kid to the current collection. @param objectable COSObjectable containing kid to append
2906 Inserts a new COS object before the specified reference object. @param newKid COS object to insert @param refKid Object to insert before
2907 Removes an objectable kid from the current context. @param objectable COSObjectable to be removed @return true if removal was successful, false otherwise
2908 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to configure
2909 Sets the default cryptographic filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary to be set as default
2910 Initializes an FDF annotation caret with subtype.
2911 Initializes an FDF annotation circle with subtype.
2912 Initializes FDF annotation file attachment with subtype. @param SUBTYPE subtype of the attachment
2913 Initializes FDFAnnotationFreeText with subtype. @param SUBTYPE subtype name
2914 Initializes an FDF annotation ink with subtype. @param SUBTYPE subtype of the annotation ink
2915 Initializes annotation line with subtype. @param SUBTYPE annotation subtype name
2916 Initializes an FDF annotation link with subtype. @param SUBTYPE type of annotation link (e.g. "Highlight")
2917 Initializes a new polygon annotation with subtype.
2918 Initializes an instance of FDFAnnotationPolyline with subtype.
2919 Initializes an FDF annotation sound object with subtype.
2920 Initializes an FDF annotation square with subtype. @param SUBTYPE annotation subtype (e.g. text, image)
2921 Initializes FDF annotation stamp with subtype. @param SUBTYPE subtype of annotation stamp (e.g., "Embedded")
2922 Initializes a new FDFAnnotationText object with subtype. @param subtype subtype name for annotation
2923 Initializes an instance of text markup annotation.
2924 Builds vertical metrics for the given CID font. @param cidFont COSDictionary containing CID font data
2925 Initializes a simple font with default settings.
2926 Retrieves an Optional Content Group by name. @param name group name to search for @return PDOptionalContentGroup object or null if not found
2927 Retrieves a collection of optional content groups from the PDF. @return Collection of PDOptionalContentGroup objects
2928 Sets line width in graphics context. @param width new line width (float value)
2929 Sets the miter limit value. @param miterLimit new miter limit value
2930 Sets the flatness tolerance value. @param flatness new flatness tolerance value
2931 Sets smoothness tolerance value. @param smoothness new smoothness threshold
2932 Sets stroking alpha constant to specified value. @param alpha transparency level (0.0 - 1.0) for stroke
2933 Sets non-stroking alpha constant to specified value. @param alpha non-negative float value
2934 Initializes sub-type annotation link with given subtype. @param SUB_TYPE sub-type value to set in COS object
2935 Initializes an empty PD Annotation Markup object.
2936 Initializes popup annotation subtype. @param SUB_TYPE subtype name (e.g. "Square")
2937 Initializes PD annotation widget with subtype. @param SUB_TYPE widget subtype name
2938 Initializes an annotation link with the given COS dictionary. @param field COS dictionary containing link data
2939 Constructs a PDAnnotationMarkup object from a COS dictionary. @param dict COSDictionary containing annotation markup data
2940 Initializes PDAnnotationPopup instance from COSDictionary. @param field COS dictionary containing annotation data.
2941 Initializes an unknown annotation with the given COS dictionary. @param dic COS dictionary containing annotation data
2942 Initializes PD annotation widget with subtype. @param field COS dictionary containing field data
2943 Sets the same difference value for all four sides of a rectangle. @param difference single value to be applied to left, top, right, and bottom
2944 Sets all four differences of a rectangle to the specified value. @param difference single side difference value
2945 Sets differences of all sides (width and height) in a single call. @param difference difference to apply to width and height
2946 Sets the border line characteristics. @param lineWidth desired line width @param bs style dictionary (optional) @param border border array (optional)
2947 Concatenates and adds key usage bits to the internal state. @param digitalSignature bit for digital signature @param nonRepudiation bit for non-repudiation @param keyEncipherment bit for key encipherment @param dataEncipherment bit for data encipherment @param keyAgreement bit for key agreement @param keyCertSign bit for key certificate signing @param cRLSign bit for CRL signing @param encipherOnly bit for encipher only @param decipherOnly bit for decipher only
2948 Initializes a new instance of the PDCheckBox class from an existing PDAcroForm.
2949 Initializes PDComboBox with PDAcroForm. @param acroForm PDAcroForm object associated with this combo box
2950 Initializes a new instance of the PDListBox class with the specified PDAcroForm. @param acroForm The parent form containing the list box.
2951 Sets the value of a COS object and applies changes. @throws IOException if an error occurs during processing
2952 Returns the PDF document's border array, ensuring it has at least 3 elements. @return COSArray containing border values or a default array if not found
2953 Initializes COS writer compression pool for the given document. @param document target PDDocument instance @param parameters optional CompressParameters object (defaults to new instance if null)
2954 Retrieves embedded date value from calendar. @param embedded COSName representing embedded calendar @param key COSName for the date field to fetch
2955 Creates a PDImageXObject from the given BufferedImage. @param document PDDocument context @param image BufferedImage to convert
2956 Calculates and adds corner curl segment to the path. @param anglePrev previous angle @param angleCur current angle @param radius curve radius @param cx curve center x-coordinate @param cy curve center y-coordinate @param alpha correction angle @param alphaPrev previous correction angle @param addMoveTo flag to include 'move to' command
2957 Draws a basic ellipse within the specified rectangle. @param left left edge of rectangle @param bottom bottom edge of rectangle @param right right edge of rectangle @param top top edge of rectangle
2958 Formats text content by processing paragraphs according to wrapping and alignment settings.
2959 Calculates font size based on content area and font characteristics. @param font PDFont object representing the font to use @return calculated font size or original default size if zero is specified
2960 Reads and initializes font encoding from PDF dictionary or default fallback. @throws IOException if I/O error occurs
2961 Checks if the font is symbolic (non-standard). @return Boolean value indicating whether the font is symbolic or not.
2962 Retrieves TrueType font mapping by base font name or fallback font name. @param baseFont base font name to search for @param fontDescriptor PDFontDescriptor object containing font metadata @return FontMapping<TrueTypeFont> object or null if not found; indicates whether the font is a strict requirement (false) or not (true)
2963 Retrieves FontBoxFont for a given base font and PDFontDescriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @return FontMapping<FontBoxFont> or null if not found, with indication of fallback usage.
2964 Checks if XFA is dynamic (has data but no fields). @return true if XFA is dynamic, false otherwise
2965 Retrieves rich contents from annotation dictionary. @return Rich contents string or null if not available
2966 Writes field XML to the specified writer. @param output Writer to write XML to
2967 Retrieves rich text value from inheritable attribute. @return Rich text string or null if not found
2968 Parses PDFunctionType4 from input stream. @param functionStream COSBase object containing function data
2969 Recursively interpolates a value at the given coordinate step. @param coord current coordinate values @param step current step index @return interpolated float array of output values
2970 Constructs a Type6 Shading Context with specified parameters. @param shading PDShadingType6 object @param colorModel Color model for the context @param xform Affine transformation for the context @param matrix Matrix for the context @param deviceBounds Device bounds of the context
2971 Constructs a Type7 Shading Context with the specified parameters. @param shading PDShadingType7 object @param colorModel ColorModel for context @param xform AffineTransform to apply @param matrix Matrix to transform coordinates @param deviceBounds Rectangle bounds of the device
2972 Retrieves XFA data as a byte array. @return Byte array representation of the XFA, or empty array if not found
2973 Initializes page fit destination with default values.
2974 Sets whether to include bounding box in array representation. @param fitBoundingBox true for bounded box, false for default type
2975 Initializes PDPageFitHeightDestination with default values.
2976 Sets the left value at index 2 in the array. @param x integer value to set (-1 for null)
2977 Sets flag to control bounding box fitting and updates array accordingly. @param fitBoundingBox true for bounded, false for normal type
2978 Initializes destination rectangle page fit properties. @param array an instance of PDPageFitRectangleDestinationProperties
2979 Sets the left value to a specified integer. @param x the new left value (or -1 to clear)
2980 Sets the bottom value to the specified position in the array. @param y new bottom value or -1 to clear it
2981 Sets the right value in the array to a specified integer. @param x integer value to be set (or -1 to unset)
2982 Sets the top element of an internal array to a specified integer value. If value is -1, sets the top element to null; otherwise, sets it to the given value. @param y the integer value to be set (or -1 for null)
2983 Initializes page destination with default settings. @param array underlying data structure
2984 Sets the top value in the array to a specified integer or null. @param y the new top value (or -1 for null)
2985 Sets whether to fit bounding box within image. @param fitBoundingBox true to enable fitting, false otherwise
2986 Initializes PDPageXYZDestination with default values. @param array internal data structure (implementation detail)
2987 Sets the left value in the array to a specified integer. @param x the new left value (-1 will set array[2] to null)
2988 Sets the top value to a specified integer or clears it. @param y the new top value (or -1 to clear)
2989 Sets the zoom value in the array. @param zoom new zoom value (negative to clear it)
2990 Parses a COS dictionary value with optional object number and generation number. @return COSBase object or null if invalid
2991 Retrieves decode parameters from the COS object.
2992 Retrieves file decode parameters. @return list of decode parameter objects or empty list if none found
2993 Initializes a new instance of the PDCalGray class with default calculation type.
2994 Initializes PDCalRGB with default color space (CALRGB).
2995 Initializes a new instance of PDLab with predefined COSName.
2996 Constructs a PDCalGray instance from a COSArray. @param array COSArray containing calibration data
2997 Initializes a new PDCalRGB instance from an RGB color array. @param rgb COSArray containing color values
2998 Initializes a new PDLab instance from a COSArray representation. @param lab COSArray containing lab data
2999 Loads ICC profile from stream; may fall back to alternate color space if necessary.
3000 Sets the A-range of the component to the specified PDRange. @param range PDRange object representing the new A-range
3001 Sets B component range. @param range PDRange object containing new range values
3002 Returns the crop box rectangle for this page. @return PDRectangle object representing the crop box or media box if not set
3003 Resolves the bounding box for a PDF annotation widget. @param fieldWidget PDAnnotationWidget instance @param appearanceStream PDAppearanceStream instance @return PDRectangle object representing the bounding box
3004 Updates the bounding box (BBox) of a PDF object. @param bbox new bounding box value
3005 Updates the color value for a given name. @param name unique color identifier @param value new PDGamma color value or null to remove
3006 Updates the four colors dictionary with a new value. @param name unique key for the dictionary @param value new PDFourColours object or null to clear
3007 Initializes a new page with standard letter dimensions.
3008 Adds an object to a dictionary with a unique key. @param kind type of dictionary (e.g. FONT) @param prefix prefix for the new key @param object value to add @return newly generated key or existing key if item already exists
3009 Sets the default font. @param name COSName representing the font @param font PDFont object to set as default
3010 Sets the color space for the given name. @param name COSName identifier @param colorSpace PDColorSpace object
3011 Sets extended graphics state. @param name COSName identifier @param extGState PDExtendedGraphicsState object
3012 Sets shading object with given COSName. @param name unique identifier @param shading shading object to set
3013 Adds a pattern to the COS object with the specified name. @param name name of the pattern @param pattern the pattern to add
3014 Sets user property by name. @param name COSName object representing property key @param properties PDPropertyList containing property value
3015 Sets an XObject with a given COSName. @param name unique identifier @param xobject object to store
3016 Retrieves the FDF dictionary, creating a new one if it doesn't exist. @return FDFDictionary object or a newly created instance if not found
3017 Initializes an empty FDFDocument object with default settings.
3018 Retrieves the FDF catalog, either creating a default one or populating it from the document trailer.
3019 Calculates and returns fractional space to allocate. @return PDRange object with minimum and maximum values
3020 Initializes a new Tiling Pattern object.
3021 Returns the appearance dictionary, creating a new one if not already set.
3022 Inserts a sibling item before the current item in the outline. @param newSibling PDOutlineItem to insert
3023 Inserts a sibling item after the current item. @param newSibling PDOutlineItem to insert
3024 Adds a child item to the outline, updating sibling relationships. @param newChild the PDOutlineItem to append
3025 Adds a new child item to the beginning of this outline. @param newChild the item to prepend
3026 Sets the first bead of the thread. @param bead the new bead to set
3027 Initializes a new thread bead with default values. Sets the bead's type and establishes itself as next and previous bead.
3028 Adds a bead to the end of the thread, updating its and adjacent beads' references. @param append the new bead to be appended
3029 Updates the name-value pair in the underlying dictionary. @param name the name of the property @param value the updated value
3030 Sets rendering intent value in dictionary. @param ri Rendering Intent string to be stored
3031 Sets the 'N' value in the user profile. @param name new value to assign
3032 Sets style value in COS object. @param s new style string to be assigned
3033 Initializes page label range for the given PDDocument. @param document PDDocument instance to configure
3034 Constructs a PDStructureElement with specified type and parent node. @param structureType element type @param parent the parent PDStructureNode
3035 Initializes a new instance of PDStructureTreeRoot with default type.
3036 Initializes a new Shading Pattern object with default values.
3037 Initializes a new instance of PDAction with default settings.
3038 Retrieves the document outline, if present. @return PDDocumentOutline object or null if not found
3039 Retrieves the parent node of a PDOutlineNode. @return Parent PDOutlineNode or PDDocumentOutline object, or null if none
3040 Sets a value at a specified index in export values. @param index the index where the value should be set
3041 Initializes linear measure dictionary with subtype set to predefined value.
3042 Initializes a new instance with default transition style (R).
3043 Sets PDF metadata date value using the specified key. @param key unique metadata key @param date Date to be set in the PDF document
3044 Sets embedded date in the specified dictionary. @param embedded COSName to update with date @param key COSName for date field @param date Calendar object containing date value
3045 Sets creation date in user profile. @param date Calendar object representing creation date
3046 Sets the modification date of an object. @param date Calendar object representing the new modification date
3047 Sets the creation date of an annotation. @param date Calendar object representing the creation date
3048 Sets the modified date of the COS object to the specified calendar value.
3049 Sets the creation date of the COS object. @param creationDate Calendar instance representing the creation date
3050 Sets date of sign-up. @param cal Calendar object representing sign-up date
3051 Sets custom metadata value. @param fieldName unique field identifier @param fieldValue new field value to store
3052 Updates a dictionary property with a string value. @param name unique property identifier @param value new string value to set
3053 Sets the base value in COS. @param base new base value
3054 Sets the application version in the dictionary. @param applicationVersion current version of the application
3055 Sets the measurement units. @param units string representation of units (e.g. "kg", "m/s")
3056 Sets the display format for fractional values. @param fractionalDisplay "D" for decimal, "F" for fraction, "R" for rounded, "T" for truncated, or null
3057 Sets the thousands separator for number formatting. @param thousandsSeparator character to use as thousand's separator
3058 Sets the decimal separator for COS object. @param decimalSeparator new decimal separator value
3059 Sets the prefix string for labels. @param labelPrefixString new prefix value
3060 Sets the label suffix string in COS. @param labelSuffixString string to be stored as "SS" in COS
3061 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null
3062 Sets the MAC subtype for the document. @param macSubtype MAC subtype value
3063 Sets the Mac creator string. @param macCreator creator string to set
3064 Sets the Mac resource fork value. @param macResFork resource fork string
3065 Initializes FDFField object from XML element. @param fieldXML XML representation of the field
3066 Initializes an Optional Content Group with the specified name. @param name unique name of the content group
3067 Adds a content group to the document. @param ocg PDOptionalContentGroup object to add
3068 Retrieves base state from document dictionary. @return BaseState enum value or null if not found
3069 Enables or disables a content group. @param group the PDOptionalContentGroup to modify @param enable true to enable, false to disable @return true if the group was modified, false otherwise
3070 Sets an integer value in the dictionary. @param name key to update @param value new integer value
3071 Updates the integer value associated with a given name in the COS dictionary. @param name unique identifier for the dictionary key @param value new integer value to be stored
3072 Sets the denominator value in the COS object. @param denominator integer value to be stored in "D" attribute
3073 Sets the visibility flag on the annotation. @param invisible true to make invisible, false otherwise
3074 Sets the hidden flag on an annotation. @param hidden true to mark as hidden, false otherwise
3075 Sets the printed flag. @param printed true if document has been printed
3076 Sets the "no zoom" flag for annotations. @param noZoom whether to disable zooming
3077 Sets flag to prevent rotation. @param noRotate true to disable rotation
3078 Sets flag indicating whether to suppress view in annotation. @param noView true if view should be suppressed, false otherwise
3079 Sets read-only flag on annotation. @param readOnly true to mark as read-only, false otherwise
3080 Sets the locked flag of the annotation. @param locked true to lock, false otherwise
3081 Sets toggle flag to control view visibility. @param toggleNoView true to hide, false to show
3082 Sets the flag indicating if contents are locked. @param lockedContents true to lock, false to unlock
3083 Sets the invisibility flag of the COS object. @param invisible true to make the object invisible, false otherwise
3084 Sets the hidden flag on the underlying COS object. @param hidden true to hide, false to show
3085 Sets whether this object has been printed. @param printed true if printed, false otherwise
3086 Sets the "no zoom" flag in the PDF document. @param noZoom true to disable zooming, false otherwise
3087 Sets rotation flag on COS object. @param noRotate whether to disable rotation
3088 Sets the 'no view' flag on the COS object. @param noView true to hide the object from view, false otherwise
3089 Sets the read-only flag on the underlying COS object. @param readOnly true to make the object read-only, false otherwise
3090 Sets lock status on user account. @param locked true to lock, false to unlock
3091 Sets flag to toggle view of COS object based on provided boolean value. @param toggleNoView true to hide, false to show the object
3092 Sets the locked contents flag. @param lockedContents true to lock contents, false otherwise
3093 Sets filter requirement flag. @param flag true to require filter, false otherwise
3094 Sets whether sub-filter is required. @param flag true to require sub-filter, false otherwise
3095 Sets whether digest method is required. @param flag true to require digest method, false otherwise
3096 Sets whether video is required based on the provided flag. @param flag true to require video, false otherwise
3097 Sets whether reason is required. @param flag true to require reason, false otherwise
3098 Sets legal attestation required flag. @param flag true to enable, false otherwise
3099 Sets whether to include revision information in add operations. @param flag true to require revision info; false otherwise
3100 Sets whether subject is required in form flags. @param flag true to require subject, false otherwise
3101 Sets issuer required flag in the dictionary. @param flag true to require issuer, false otherwise
3102 Sets OID required flag in the dictionary. @param flag true to require OID, false otherwise
3103 Sets whether subject DN is required in certificate validation. @param flag true if subject DN is required, false otherwise
3104 Sets whether key usage is required in a certificate. @param flag true to require key usage, false otherwise
3105 Sets whether URL is required or not. @param flag true to require URL, false otherwise
3106 Sets italic flag on the underlying COS object. @param italic true to enable italic formatting
3107 Sets font bold flag. @param bold true to make text bold, false otherwise
3108 Sets flag indicating existence of user signatures. @param signaturesExist true if signatures exist, false otherwise
3109 Sets flag to indicate whether the dictionary is in append-only mode. @param appendOnly true to enable append-only mode, false otherwise
3110 Sets flag to enable/disable sorting. @param sort true to enable sorting, false otherwise
3111 Sets the multi-select flag on the COS object. @param multiSelect true to enable multi-selection, false otherwise
3112 Sets flag to prevent spell checking. @param doNotSpellCheck true to disable spell checking
3113 Sets whether to commit changes on selection change. @param commitOnSelChange true to enable, false otherwise
3114 Sets the combo flag on the COS object. @param combo true to enable, false to disable
3115 Sets the edit flag on the COS object.
3116 Sets read-only flag on user profile. @param readonly true to enable read-only mode, false otherwise
3117 Sets whether the field is required or not. @param required true to mark as required, false otherwise
3118 Sets export flag in dictionary. @param noExport true to prevent export, false otherwise
3119 Initializes a push button with specified AcroForm. @param acroForm parent form object
3120 Initializes radio button with specified PDAcroForm.
3121 Sets radio frequency synchronization flag. @param radiosInUnison true to enable, false to disable
3122 Sets the multiline flag in the COS object. @param multiline true to enable multiline mode, false otherwise
3123 Sets user password flag. @param password true to set password, false otherwise
3124 Sets the file selection flag on the underlying COS object. @param fileSelect true to enable file selection, false otherwise
3125 Enables or disables spell checking for a document. @param doNotSpellCheck true to disable, false to enable
3126 Sets flag to prevent scrolling in PDF viewer. @param doNotScroll true to disable scrolling, false otherwise
3127 Sets the COMB flag on the COS object. @param comb true to enable or false to disable the COMB flag
3128 Sets the rich text flag on the COS object. @param richText true to enable rich text formatting
3129 Decodes input data stream and writes output to specified stream. @param encoded input data stream @param decoded output stream @param parameters additional decoding parameters @param index currently processed image index (not used) @param options decoding options @return DecodeResult object containing decoding result
3130 Validates the pages dictionary in the PDF trailer. @param root COSDictionary representing the PDF trailer
3131 Returns a tree-like structure representing all pages in the PDF.
3132 Initializes PD page tree with given COS dictionary as root. @param root COS dictionary representing root of the PDF page tree
3133 Removes a PDPage from the document. @param page PDPage object to be removed
3134 Inserts a new PDF page before an existing one in the document structure. @param newPage the page to be inserted @param nextPage the existing page to insert before
3135 Inserts a new PDF page after the specified previous page. @param newPage new PDPage object @param prevPage previous PDPage object
3136 Increments revision number by one.
3137 Creates a PDImageXObject from a buffered image. @param document PDDocument instance @param image BufferedImage object (1-bit b/w images only) @return PDImageXObject object or null on failure
3138 Creates a PDImageXObject from a RandomAccessRead stream. @param document PDDocument instance @param reader RandomAccessRead stream to extract TIFF data from @param number Number of images to process @return PDImageXObject or null if extraction failed
3139 Updates the specified float value in the dictionary with the given name. @param name dictionary key @param value new float value
3140 Sets intensity value in COS object. @param i intensity level (float)
3141 Sets the conversion factor as a float property in the COS object. @param conversionFactor The new value to be assigned.
3142 Parses the cross reference object stream at a given byte offset. @param objByteOffset the byte offset of the XRef object @param isStandalone whether this is a standalone XRef table @return the previous object number in the parsed dictionary
3143 Parses the document into a PDF format. @return PDDocument object representing the parsed document
3144 Processes a transparency group, applying its transformation and stream operators. @param group PDTransparencyGroup object to process
3145 Processes a Type 3 font stream. @param charProc PDType3CharProc object @param textRenderingMatrix Matrix to replace current transformation matrix
3146 Processes a PDAnnotation within its appearance stream. @param annotation the annotation to process @param appearance the appearance stream containing the annotation
3147 Processes a tiling pattern by applying the provided transformation and graphics state. @param tilingPattern the pattern to process @param color the color of the pattern (may be null for non-colored patterns) @param colorSpace the color space of the pattern (null if not specified) @param patternMatrix the transformation matrix to apply to the pattern
3148 Processes a PDF content stream, applying transformations and clipping. @param contentStream the PDContentStream to process
3149 Writes the COS document to an output stream. @param doc COS document object
3150 Saves a document to the specified output stream with optional compression. @param output OutputStream to write the document to @param compressParameters Compression parameters (null for no compression)
3151 Returns the highest version number from the document and catalog. @return The maximum of the two versions or the single document version if 1.4+
3152 Retrieves a PDF page at the specified index. @param index zero-based index of the desired page
3153 Removes dictionary at specified index from tree structure. @param index position of dictionary to be removed
3154 Searches for a PDPage instance in the document hierarchy and returns its index. @param page the target PDPage instance @return index of the page or -1 if not found
3155 Retrieves PDF file specification from the document stream. @return PDFileSpecification object or null if not found
3156 Retrieves PDF file specification from FDF dictionary. @return PDFileSpecification object or null if not found
3157 Retrieves a list of embedded FDFs from the PDF document. @return List of PDFileSpecification objects or null if none found
3158 Creates and returns a file specification object based on dictionary data.
3159 Retrieves file specification from COS object. @return PDFileSpecification object or null if not available
3160 Creates and returns a PDFileSpecification object from dictionary data.
3161 Retrieves file specification from COS object. @return PDFileSpecification object or null if not found
3162 Retrieves PDF file specification from the dictionary object.
3163 Retrieves file specification for the action. @return PDFileSpecification object or null if not found
3164 Retrieves PDF file specification from underlying document. @return PDFileSpecification object representing the PDF file
3165 Retrieves the file specification from the PDF document. @return PDFileSpecification object representing the file specification
3166 Checks if the document has changed and notifies listeners accordingly. @param oldBase previous COSBase object @param newBase current COSBase object
3167 Adds a child element to the PD Structure. @param structureElement element to be appended
3168 Inserts a PDStructureElement before another element. @param newKid the new structure element to add @param refKid the reference element to insert before
3169 Removes a kid from the current PDStructureElement and updates its parent. @param structureElement PDStructureElement to remove kid from @return true if kid was successfully removed, false otherwise
3170 Initializes annotation highlight with subtype. @param SUBTYPE annotation subtype
3171 Initializes an FDFAnnotationSquiggly object with subtype.
3172 Initializes an FDFAnnotationStrikeOut object with subtype.
3173 Initializes an underline annotation with subtype. @param SUBTYPE subtype of the underline annotation (e.g. "S")
3174 Initializes attachment subtype with specified value. @param SUB_TYPE subtype name
3175 Initializes PD annotation ink with subtype.
3176 Initializes a PDAnnotationLine object with subtype and line values.
3177 Initializes annotation polygon with subtype. @param SUB_TYPE subtype value
3178 Initializes the annotation polyline with subtype. @param SUB_TYPE subtype name
3179 Initializes PDAnnotationRubberStamp with subtype. @param SUB_TYPE subtype value
3180 Initializes annotation square circle with subtype. @param subType subtype value to be assigned
3181 Initializes annotation text with subtype.
3182 Initializes PDAnnotationTextMarkup with subtype and no quad points. @param subType annotation subtype (e.g., highlight, underline)
3183 Initializes a new instance of PDAnnotationCaret from a COS dictionary.
3184 Constructs a PDAnnotationFileAttachment object from a COS dictionary. @param field COS dictionary containing attachment data
3185 Creates a new instance of PDAnnotationFreeText from the given COS dictionary.
3186 Constructs a PDAnnotationInk object from a COS dictionary. @param dict COS dictionary containing annotation ink data
3187 Constructs a PDAnnotationLine object from a COS dictionary. @param field COSDictionary containing annotation line data
3188 Initializes a PDAnnotationPolygon object from a COS dictionary. @param dict COSDictionary containing polygon data
3189 Constructs a PDAnnotationPolyline object from a COS dictionary. @param dict COS dictionary containing polyline data
3190 Initializes a new PDAnnotationRubberStamp instance from a COS dictionary.
3191 Constructs a PDAnnotationSound object from a COS dictionary.
3192 Initializes a new instance of PDAnnotationSquareCircle from a COS dictionary. @param dict COS dictionary containing annotation data
3193 Constructs a PDAnnotationText object from a COS dictionary.
3194 Initializes annotation text markup from COS dictionary. @param field COS dictionary containing markup data
3195 Retrieves the annotation popup object associated with this PDF. @return PDAnnotationPopup object or null if not found
3196 Retrieves a list of annotation widgets associated with the COS object.
3197 Writes compressed body to document. @param document COSDocument object
3198 Determines if this symbol is symbolic (font-based) or not. @return true if symbolic, false otherwise
3199 Checks if an AcroForm has dynamic XFA properties. @param acroForm AcroForm object to evaluate @return true if dynamic, false otherwise
3200 Initializes the iterator with a list of fields from the given PDAcroForm. @param form the source AcroForm to iterate over
3201 Creates a PDF function from the given COSBase object. @param function COSBase object representing the function
3202 Interpolates input values into a float array. @return interpolated float array
3203 Extracts the soft mask image as a float array from a PDImageXObject. @param softMask input image object @return matte data as a float array, or null if invalid
3204 Parses XML representation of the document into a PDFBox Document object. @return Document object or null if parsing fails
3205 Encodes a BufferedImage into a compressed PDImageXObject.
3206 Sets the destination for a PDF page. @param page PDPage object to associate with the destination
3207 Initializes the current page with provided PDPage object. @param page non-null PDPage instance
3208 Returns the bleed box rectangle, or crop box if not available.
3209 Retrieves the trim box rectangle from the PDF page. @return Trim box rectangle or crop box if not available
3210 Retrieves the Art Box rectangle from the PDF page, clipping it to the Media Box if available. @return Art Box rectangle or Crop Box as a fallback
3211 Returns the rotated crop box for a given page, swapping width and height if rotation is 90 or 270 degrees. @param page PDPage object to fetch crop box from
3212 Adds a font to the COSName object. @param font PDFont object representing the font
3213 Adds a color space to the COS object. @param colorSpace color space to be added
3214 Adds an extended graphics state to the COS dictionary. @param extGState extended graphics state object
3215 Adds a PDShading object to the COSName collection. @param shading PDShading object to be added
3216 Adds PD Abstract Pattern to COS Name. @param pattern PD Abstract Pattern object
3217 Adds a property list to the optional content group. @param properties PDPropertyList object to be added
3218 Adds an image to the PDF document. @param image the image to be added
3219 Adds a PD Form XObject to the PDF document. @param form PD Form XObject to be added
3220 Adds an XObject to a COS with the specified prefix. @param xobject PDX object to add @param prefix name prefix for the added object
3221 Exports the document as a FDF (Fill-in Form Data) file. @return FDFDocument object containing the exported data
3222 Retrieves the down appearance entry from the appearance dictionary. If the entry is a sub-dictionary, creates a new appearance entry and updates the dictionary.
3223 Retrieves the rollover appearance entry from the appearance dictionary. If it's a sub-dictionary, creates a new COS stream-based appearance entry.
3224 Retrieves the normal appearance entry from the dictionary, creating a new one if necessary.
3225 Adds a child PDOutlineItem to the end of the current node. @param newChild the item to be added, must be a single node
3226 Adds a new child item at the beginning of the outline. @param newChild PDOutlineItem to be added
3227 Initializes a PDPageLabels object from the given document and dictionary. @param document PDDocument instance @param dict COSDictionary containing page label settings
3228 Initializes embedded 'go to' action with specified subtype.
3229 Initializes a new PDActionGoTo instance. @param SUB_TYPE subtype constant value
3230 Initializes a new instance of PDActionHide with the specified subtype. @see #setSubType(int)
3231 Initializes PDActionImportData with subtype.
3232 Initializes JavaScript action with subtype. @see #setSubType(String)
3233 Initializes action launch with subtype. @param SUB_TYPE predefined subtype value
3234 Initializes a new instance of PDActionMovie with default subtype.
3235 Initializes a new PDActionNamed instance with subtype.
3236 Initializes remote "Go To" action. @param SUB_TYPE type of sub-action (e.g. page number)
3237 Initializes PDActionResetForm with subtype. @param none
3238 Initializes a new instance of PDActionSound with default subtype.
3239 Initializes submit form with specified subtype.
3240 Initializes a new instance of PDActionThread with default subtype.
3241 Initializes PDActionURI with subtype. @param SUB_TYPE predefined action URI subtype
3242 Updates the open count of this node's parent outline. @param delta change in open count to apply
3243 Sets a new value, potentially updating export values or the main value. @throws IOException on any errors during the process
3244 Checks if a specific content group is enabled. @param group PDOptionalContentGroup object to check @return true if enabled, false otherwise (default to 'on' state)
3245 Enables or disables a group by name. @param groupName unique group identifier @param enable true to enable, false to disable @return true if the group was found and updated, false otherwise
3246 Retrieves the document catalog's page tree. @return PDPageTree object representing the page structure
3247 Returns the total number of pages in the document catalog.
3248 Sets the fixed pitch flag. @param flag true to enable fixed pitch, false otherwise
3249 Sets serif flag. @param flag true to enable, false to disable
3250 Sets symbolic debug flag. @param flag true to enable symbolic debugging
3251 Sets script execution flag. @param flag true to enable or false to disable script execution
3252 Sets non-symbolic flag. @param flag true to enable, false to disable
3253 Sets italic formatting flag. @param flag true to enable or false to disable italic formatting
3254 Sets all-cap flag. @param flag true to enable, false to disable
3255 Sets small-cap flag. @param flag true to enable or false to disable small-cap feature
3256 Sets whether to force bold font style. @param flag true to enable, false otherwise
3257 Creates a PDImageXObject from a byte array. @param document PDDocument instance @param byteArray image data as byte array @param number image index @return PDImageXObject object or null if creation fails
3258 Creates a PDImageXObject from a file. @param document PDDocument instance @param file File to read from @param number index for multiple images in the file @return PDImageXObject or null if creation fails
3259 Initializes a FDFAnnotation object from an XML Element. @param element the XML Element containing the annotation's attributes
3260 Dynamically parses a PDF object by key. @param objKey unique object identifier @param requireExistingNotCompressedObj whether to require existing non-compressed object @return parsed COSBase object or null if not found
3261 Parses XREF tables and object streams, resolving references and validating offsets. @param document COSDocument to update with parsed xref data @param startXRefOffset starting offset of the first xref table @return Trailer dictionary or null if parsing fails
3262 Processes and displays the specified transparency group. @param form TransparencyGroup object containing form data
3263 Processes a soft mask transparency group, preserving graphics state. @param group PDTransparencyGroup to process
3264 Processes Type 3 glyph for given PDF character code. @param code unique PDF character code
3265 Displays a PDAnnotation object with its associated appearance stream. @param annotation PDAnnotation object to display
3266 Processes a tiling pattern with the specified color and color space. @param tilingPattern Tiling pattern to process @param color Color of the tiling pattern @param colorSpace Color space of the tiling pattern
3267 Processes and displays a form object on the current page. @param form PDFormXObject to be shown @throws IOException if processing fails
3268 Saves data to an OutputStream using default compression. @param output OutputStream to write to
3269 Saves compressed data to the specified file. @param file File to save to @param compressParameters Compression parameters
3270 Creates a new PDF document with properties copied from the source document. @return A PDDocument object
3271 Updates the version of a PDF document. @param newVersion new version to set (must be >= current version)
3272 Returns an iterator over pages in this collection. @return iterator over PDPage objects starting from root page
3273 Retrieves a page from the document catalog by index. @param pageIndex zero-based index of the desired page
3274 Writes XML representation of PDFileSpecification and FDFFields to the given Writer. @param output writer to write XML data to
3275 Prepares a PDDocument for encryption by updating the document's encryption dictionary. @param doc the document to prepare
3276 Initializes a new instance of PDAnnotationHighlight with subtype.
3277 Initializes a new instance of PDAnnotationSquiggly with specified subtype.
3278 Initializes a new instance of the PDAnnotationStrikeout class with subtype set to SUB_TYPE.
3279 Initializes a new instance of PDAnnotationUnderline.
3280 Initializes a circle annotation from a COS dictionary. @param field COS dictionary containing circle annotation data
3281 Initializes a new instance of PDAnnotationSquare from a COS dictionary.
3282 Constructs a PDAnnotationHighlight object from a COS dictionary.
3283 Initializes a new instance of PDAnnotationSquiggly from a COS dictionary.
3284 Initializes a new strikeout annotation from the given dictionary. @param dict COSDictionary to initialize from
3285 Initializes a new instance of PDAnnotationUnderline from a COS dictionary.
3286 Imports FDF field data into the current document. @param fdfField FDF field to import
3287 Draws a PDInlineImage at specified coordinates with given width and height. @param inlineImage image to draw @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner @param width image width @param height image height
3288 Creates a cloudy polygon from the provided 2D path data. @param path 2D array of float coordinates (x,y) or (x,y,z,w)
3289 Draws a rectangular shape with optional ellipsoidal curvature. @param left lower-left x-coordinate @param bottom lower-left y-coordinate @param right upper-right x-coordinate @param top upper-right y-coordinate @param isEllipse whether to draw an ellipse instead of rectangle
3290 Returns an iterator over PDFields in this AcroForm. @return Iterator of PDFields or null if empty
3291 Evaluates a type 3 function by determining which child function to call based on input value. @param input input value for the function @return array of output values or null if partition not found
3292 Initializes a device N object from COS array and resources. @param deviceN COS array containing device N data @param resources PDResources for color space creation
3293 Retrieves and caches the Tint Transform function. @return PDFunction object or cached instance if already created
3294 Initializes PDSeparation object from COS array and resources. @param separation COS array containing separation data @param resources PDResources object for color space creation
3295 Returns the PDF function object, loading it from the dictionary if necessary.
3296 Retrieves the array of functions. @return Array of PDFunction objects, or null if uninitialized
3297 Retrieves the PDF transfer function, creating it if necessary. @return PDFunction object representing the transfer function
3298 Initializes PDIndexed object with color table and RGB conversion. @param indexedArray COS array containing color space and table @param resources PDF resources for creating color space
3299 Evaluates input values using linear interpolation based on sample points. @param input input array to evaluate @return float array of evaluated output values
3300 Fetches a region of the image based on the given rectangle and subsampling factor. @param region Rectangle specifying the region to fetch @param subsampling Subsampling factor for the image @return BufferedImage representing the fetched image or null if not found
3301 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to associate with the image @param image source BufferedImage @return PDImageXObject or null on failure
3302 Processes a page by initializing and processing its contents. @param page PDPage object to process
3303 Processes a child stream for the current page. @param contentStream child PDF content stream @param page PDPage object to associate with the stream
3304 Initializes a PDPageContentStream for writing on top of an existing page. @param document the PDDocument instance @param sourcePage the page to overwrite
3305 Sets the font and font size for the current page. @param font PDFont object @param fontSize font size in points
3306 Sets graphics state parameters. @param state PDExtendedGraphicsState object containing new parameters
3307 Fills the current page with the specified PDShading object. @param shading PDShading object to fill the page with
3308 Begins marked content sequence with specified resource. @param tag COSName for the marked content sequence @param propertyList PDPropertyList containing resources and MCID
3309 Sets a marked content point with properties. @param tag COSName representing the tag @param propertyList PDPropertyList containing properties
3310 Draws an image at specified position and size. @param image PDImageXObject to draw @param x left coordinate of the image @param y top coordinate of the image @param width image width @param height image height
3311 Draws an image onto the graphics context, applying given transformation. @param image PDImageXObject to draw @param matrix AffineTransform object for scaling/rotation
3312 Draws a PDFormXObject on the page. @param form PDFormXObject object to be drawn
3313 Retrieves normal appearance as a content stream. @param compress whether to compress the output @return ContentStream object or throws IOException if error occurs
3314 Retrieves page labels from the PDF document. @return PDPageLabels object or null if not found
3315 Constructs JavaScript action with specified script. @param js JavaScript code to execute
3316 Checks if a group with the given name is enabled. @param groupName unique group identifier @return true if the group is enabled, false otherwise
3317 Checks if an optional content group is enabled in the document. @param group the Optional Content Group to check @return true if enabled, false otherwise
3318 Updates PDPageDestinations to reference valid pages within the document. @param destinationDocument PDDocument containing pages to validate against.
3319 Adds a new PDPage to the collection and updates highest imported object number. @param page PDPage object to be added
3320 Removes the specified PDPage from the collection. @param page PDPage object to be removed
3321 Removes page at specified index from internal page list. @param pageNumber unique page identifier (index)
3322 Initializes a PDFPrintable object with the specified parameters. @param document PDDocument instance to fetch page tree from @param scaling Scaling factor for rendering @param showPageBorder Whether to display page borders @param dpi Resolution in dots per inch @param center Whether to center the content @param renderer PDFRenderer instance for rendering pages
3323 Initializes a new instance of the PDFRenderer with the specified PDDocument. @param document the underlying PDDocument to render pages from
3324 Initializes PageExtractor with a PDDocument. @param sourceDocument input PDF document
3325 Computes page indices by labels and returns a map of label to index.
3326 Retrieves an array of labels corresponding to page indices.
3327 Initializes a PDFPageable object from a PDDocument. @param document the underlying document @param orientation page orientation (e.g. Portrait, Landscape) @param showPageBorder whether to display page borders @param dpi dots per inch resolution @param center whether to center the content
3328 Builds a PDF font descriptor from a Type 1 font. @param type1 the Type 1 font to convert @return PDFontDescriptor object representing the font's metadata
3329 Builds a PDF font descriptor from FontMetrics. @param metrics FontMetrics object containing font properties
3330 Creates a PDFontDescriptor from the provided TrueType font. @param ttf TrueType font object @return PDFontDescriptor object describing the font's characteristics
3331 Creates an image object from a byte array. @param document PDDocument instance (not used in this method) @param byteArray byte array containing the image data
3332 Creates an image object from a file. @param document PDDocument instance @param file input file to read from
3333 Initializes an FDFAnnotationCaret object from the given XML Element. @param element XML Element containing caret annotation data
3334 Constructs a FDFAnnotationCircle object from an Element. @param element input XML element
3335 Constructs an FDFAnnotationFileAttachment object from an XML Element. @param element XML Element containing attachment data
3336 Initializes a FDFAnnotationFreeText object from an XML Element. @param element the XML Element containing annotation data
3337 Initializes FDFAnnotationInk with an XML Element. @param element the input XML Element
3338 Creates an FDFAnnotationLine object from the provided XML Element. @param element XML representation of the annotation line data
3339 Initializes FDFAnnotationLink from given Element. @param element input Element containing annotation data
3340 Initializes FDFAnnotationPolygon from Element. @param element XML representation of the polygon
3341 Initializes an FDFAnnotationPolyline object from a given PDF Element. @param element the underlying PDF Element to create the annotation from
3342 Constructs an FDF annotation sound object from the given XML Element. @param element XML representation of the annotation sound
3343 Initializes a FDFAnnotationSquare object from an Element. @param element XML representation of the annotation
3344 Initializes a FDFAnnotationStamp object from an XFDF Element. @param element XFDF Element containing stamp information
3345 Initializes FDFAnnotationText from given Element. @param element XML element containing annotation data
3346 Parses FDF annotation text markup from XML element. @param element XML Element containing 'coords' attribute
3347 Retrieves the PDF trailer dictionary. If trailer is missing or invalid, a new one is rebuilt if lenient mode is enabled.
3348 Loads a PDF document from byte array and encrypted with PGP. @param input PDF byte array to load @param password encryption password @param keyStore keystore containing decryption keys @param alias alias of the decryption key in the keystore
3349 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead input data stream
3350 Loads a PDF document from a RandomAccessRead stream. @param randomAccessRead input stream containing the PDF data @param password optional password for encrypted PDFs
3351 Loads a PDF document from the provided RandomAccessRead and encrypted with the given password. @param randomAccessRead input stream containing the PDF data @param password encryption key for the PDF @param keyStore keystore containing the private key for decryption @param alias identifier of the private key in the keystore
3352 Sets visual signature from a file. @param file input file containing visual signature data
3353 Initializes visual signature from input stream. @param is InputStream containing visual data
3354 Renders a single glyph using either Type 3 or TrueType fonts. @param textRenderingMatrix transformation matrix for rendering @param font the PDFont to use (may be Type 3 or TrueType) @param code Unicode code point of the glyph to render @param displacement additional offset for rendering
3355 Builds a PDF document with visible signature from given designer properties. @param properties PDVisibleSignDesigner object containing design parameters @return InputStream containing the built PDF document or null on error
3356 Saves a file to storage with default compression. @param file File object to be saved
3357 Saves file with specified name and compression parameters. @param fileName unique file identifier @param compressParameters compression settings
3358 Creates a new document if necessary, based on current page number or missing destination document.
3359 Writes PDF document header, updating version if compression is enabled. @param doc COSDocument object
3360 Sets OC properties and updates document version if necessary. @param ocProperties PDOptionalContentProperties object to set
3361 Retrieves the layout page from the given PDDocument. @param doc PDDocument object containing page data
3362 Calculates the size of a single PDF page. @param document PDDocument object @param page page number (1-based index)
3363 Finds the destination page in the given PDF document. @param doc the target PDF document @return the destination PDPage object or null if not found
3364 Retrieves the PageFormat object for a given page index. @param pageIndex unique page identifier
3365 Retrieves the page number from the array, or returns index of page tree if found. @return page number as int, or -1 if not found
3366 Writes an XML representation of the FDF dictionary to the specified writer. @param output the Writer object to which the XML will be written
3367 Prepares a PDDocument for encryption by setting up the encryption dictionary. @param document the document to be encrypted
3368 Creates a PDAnnotation object based on the provided COSBase. @param base COSBase object containing annotation data @return PDAnnotation object or null if unknown subtype
3369 Draws an image at specified coordinates. @param inlineImage PDInlineImage object to draw @param x horizontal coordinate @param y vertical coordinate
3370 Creates a cloudy rectangle by applying differences to the provided PD Rectangle. @param rd input PD Rectangle
3371 Draws a cloudy ellipse with curled ends and adjustable curl density. @param leftOrig left origin of the ellipse @param bottomOrig bottom origin of the ellipse @param rightOrig right origin of the ellipse @param topOrig top origin of the ellipse
3372 Retrieves a list of signature fields from the document's AcroForm. @return List of PDSignatureField objects or an empty list if none found
3373 Recursively updates appearance settings for terminal fields in the data tree.
3374 Returns an iterator over the fields of this PDF document. @return iterator over PDField objects
3375 Enables or disables caching of PD fields. @param cache true to cache, false to clear cache
3376 Retrieves a PDField by fully qualified name, first checking the cache then the field tree. @param fullyQualifiedName unique field identifier @return PDField object or null if not found
3377 Creates a PDColorSpace object from the given COSBase. @param colorSpace COSBase representation of the color space @param resources PDResources to use for default and built-in color spaces @param wasDefault true if this is a default color space, false otherwise
3378 Evaluates a collection of functions and returns their combined output. @param input input data to be evaluated @return array of float values representing the function outputs
3379 Constructs a new PDIndexed instance from a COSArray. @param indexedArray array containing index information
3380 Fetches and returns an image associated with this object.
3381 Processes a PDPage, extracting rotation and size information. @param page the PDF page to process
3382 Sets the stroking color using the provided PDColor object. @param color PDColor object with color and optional pattern information
3383 Sets the non-stroking color to the specified PDF color. @param color the new non-stroking color
3384 Draws an image at specified coordinates. @param image PDImageXObject to be drawn @param x horizontal coordinate @param y vertical coordinate
3385 Returns normal appearance as content stream. @return ContentStream object representing normal appearance.
3386 Toggles node state by opening it if not already open.
3387 Closes the current node, updating its state and count as needed.
3388 Imports a PDPage instance from the given page, adding it to the current document. @param page PDPage instance to import
3389 Creates a PDF template by adding a given PDPage to the document. @param page PDPage object to be added as template
3390 Initializes a PDF printable object with the given parameters. @param document PDDocument instance @param scaling Scaling factor for rendering @param showPageBorder whether to display page borders @param dpi dots per inch resolution @param center whether to center the content
3391 Initializes PDFPageable with a PDDocument instance. @param document PDDocument object to operate on
3392 Initializes a PDFPageable instance with the given PDDocument and Orientation.
3393 Constructs a new PDFPageable instance with default page range (0-Total pages). @param document the PDDocument to create pageable for @param orientation the Orientation of the pageable @param showPageBorder whether to display page borders
3394 Initializes a new instance of PDFPageable with default settings. @param document the PDDocument to be used
3395 Embeds a Type1 font into the PDF document. @param doc the parent PDDocument @param dict the COSDictionary to store font metadata @param pfbStream the InputStream containing the font's PFB data @param encoding the Encoding object or null for auto-detection
3396 Embeds TrueType font into PDDocument. @param document the document to embed in @param dict COSDictionary for the font descriptor @param ttf TrueTypeFont object to embed @param embedSubset whether to embed the entire font or a subset
3397 Creates a PDImageXObject from the given file based on its extension. @param file input image file @param doc parent PDDocument object @return PDImageXObject or throws exception if unsupported type
3398 Creates a PDImageXObject from the specified file. @param file input image file @param doc parent PDDocument @return created PDImageXObject or null if creation fails
3399 Initializes an FDF annotation highlight with the given Element. @param element the XML element to initialize from
3400 Initializes an FDFAnnotationSquiggly object from an Element. @param element the underlying Element to initialize with
3401 Initializes an FDFAnnotationStrikeOut object from the given Element. @param element Element to initialize from
3402 Constructs an underlined annotation.
3403 Loads PDF document from byte array. @param input PDF data as a byte array @param password optional decryption password
3404 Loads PDF document from file with optional encryption password. @param file File containing the PDF content @param password Optional password for encrypted PDF files @throws IOException if loading fails
3405 Loads a PDF document from a file with optional password and keystore encryption. @param file the PDF file to load @param password the password for decryption (optional) @param keyStore the keystore containing encryption keys (optional) @param alias the alias of the key in the keystore (optional)
3406 Sets visual signature properties from provided PDVisibleSigProperties. @param visSignatureProperties contains visible signature details
3407 Builds a visible signature for the PDF template. @throws IOException if an I/O error occurs
3408 Saves data to a file using the specified file name. @param fileName unique identifier of the output file
3409 Copies OC properties from source document to target document. @param srcDoc source PDF document
3410 Initializes PDVisibleSignDesigner with document and image stream. @param document PDDocument instance @param imageStream InputStream containing image data @param page target page number
3411 Initializes PDVisibleSignDesigner with document and image data. @param document PDDocument object @param image BufferedImage to be used in design @param page target page number for calculation
3412 Writes XML document to the specified writer. @param output Writer object for outputting XML content
3413 Retrieves annotations that match the specified filter criteria. @param annotationFilter Filter object to select desired annotations @return List of PDAnnotations or an empty list if none matched
3414 Retrieves the referenced object from the COS dictionary. @return Referenced object (XObject, Annotation, or null)
3415 Retrieves the annotation in reply to, if present. @return PDAnnotation object or null if not found
3416 Retrieves the parent PDAnnotationMarkup object. @return PDAnnotationMarkup object or null if not found or error occurs
3417 Creates a cloudy ellipse within the specified rectangle. @param rd PDRectangle object defining the cloud area
3418 Retrieves a list of PDSignature objects from the PDF document.
3419 Imports FDF fields from the provided document. @param fdf FDFDocument containing field data
3420 Evaluates function at given input value. @param inputValue single input value to evaluate
3421 Evaluates a shading function and converts the result to RGB color values. @param values input array of float values @return int[] RGB color values or throws IOException if evaluation fails
3422 Returns the non-stroking paint with applied soft mask. @throws IOException if an I/O error occurs
3423 Processes a single PDF page, updating internal state and resources. @param page PDPage object to process
3424 Sets stroking color with specified components and color space. @param color PDColor object to set as stroking color
3425 Sets non-stroking color with specified components. @param color PDColor object containing color data
3426 Appends a form as an optional content group (layer) to the specified page. @param targetPage the page where the form will be appended @param form the form to append @param transform the transformation matrix for the form @param layerName the unique name of the layer @return the created PDOptionalContentGroup object
3427 Displays form data while preserving current content rendering state. @param form PDFormXObject to display
3428 Renders TransparencyGroup on Graphics2D device. @param form PDTransparencyGroup to render @param graphics Graphics2D device to draw on
3429 Begins a marked content sequence, incrementing hidden OCG count if necessary. @param tag XML tag for the sequence @param properties dictionary of sequence properties
3430 Constructs a PDF printable object from a PDDocument instance. @param document the underlying PDDocument @param scaling scaling factor for printing @param showPageBorder flag to include page borders in print @param dpi dots per inch resolution for printing
3431 Creates a PDType1Font object from PFB data, embedding it in the given document. @param doc the PDDocument to embed the font into @param pfbIn input stream containing the font's binary data @param encoding the character encoding for the font (or null to use default)
3432 Initializes a PDFont object from the given COSDictionary. @param fontDictionary dictionary containing font information
3433 Initializes a Type 2 CID font embedder from the given document and COS dictionary. @param document PDDocument instance @param dict COSDictionary containing font metadata @param ttf TrueTypeFont to embed @param embedSubset whether to embed the entire font or just subsets @param parent PDType0Font parent font @param vertical whether this is a vertical CID font
3434 Embeds a TrueTypeFont into a PDDocument. @param document target PDF document @param dict COSDictionary containing font metadata @param ttf TrueTypeFont object to embed @param encoding font encoding scheme
3435 Creates an image XObject from a file. @param imagePath path to the image file @param doc parent document
3436 Parses FDF XML and populates the FDFDictionary object. @param fdfXML FDF XML Element to parse
3437 Loads PDF document from byte array. @param input PDF data as byte array
3438 Loads a PDF document from a file with optional encryption. @param file the file to load @param password encryption password (null or empty if none) @return PDDocument object or null on failure
3439 Loads PDF document from specified file. @param file input PDF file
3440 Imports a page from the given source document as a PDF FormXObject. @param sourceDoc the source PDDocument @param page the page to import @return the imported PDF FormXObject or null if failed
3441 Initializes PDVisibleSignDesigner with document source and page. @param documentSource RandomAccessRead to source document data @param imageStream InputStream for visible signature image @param page current page number
3442 Initializes PDVisibleSignDesigner with a document source and an image. @param documentSource RandomAccessRead object for document data access @param image BufferedImage representation of the visible sign @param page current page number
3443 Saves XFDF document to the specified writer. @param output Writer object for outputting data
3444 Retrieves all annotations for the current entity. @return list of PDAnnotation objects
3445 Retrieves the last signature dictionary from the list. @return PDSignature object or null if empty
3446 Saves incremental external signing support to output stream. @param output OutputStream for writing data @return SigningSupport object or null if an error occurs
3447 Draws a glyph using the provided path, font and displacement. @param path GeneralPath to draw @param font PDFont containing glyph metrics @param code character code of glyph @param displacement Vector representing position and scale @param at AffineTransform for transformation
3448 Processes a collection of PDF pages, extracting text from each page with contents. @param pages PDPageTree containing the PDF pages to process
3449 Initializes the appearance content for a PDAnnotationWidget. @param widget annotation widget @param appearanceCharacteristics appearance characteristics dictionary @param appearanceStream appearance stream to write to
3450 Writes PDAppearanceContentStream with font and color settings. @param contents stream to write to @param zeroFontSize fallback font size
3451 Initializes a new instance with the given PDDocument and scaling settings. @param document PDDocument object to print @param scaling Scaling options for the printed output @param showPageBorder flag indicating whether to display page borders
3452 Initializes font object from PFB data stream. @param doc parent document @param pfbIn input stream containing font binary data
3453 Initializes a simple PDL font with the given dictionary.
3454 Constructs a PDType0Font object from the given font dictionary. @param fontDictionary COSDictionary containing font data
3455 Initializes a PDType0 font from a TrueType font, optionally embedding or closing it. @param document PDDocument object @param ttf TrueTypeFont object @param embedSubset whether to embed the font subset @param closeTTF whether to close the underlying TTF data source @param vertical whether the font is being used in a vertical layout
3456 Initializes a PDTrueTypeFont object from a TrueType font file. @param document PDDocument instance @param ttf TrueType font to embed @param encoding Font encoding (e.g., Identity-H) @param closeTTF whether to close the TTF after embedding
3457 Initializes an FDF catalog from the given XML Element.
3458 Loads a PDDocument from a local file. @param file PDF file to load
3459 Imports a page from a PDF document as a form XObject. @param sourceDoc the original PDF document @param pageNumber the page to import (1-indexed)
3460 Saves XFDF document to a file. @param fileName the output file name
3461 Updates parent offsets for a PDPage and its annotations. @param page the PDF page to update @param structParentOffset offset value to add to parent IDs
3462 Clones the structure tree from the source document to the destination document. @param destinationDocument target PDDocument for cloning
3463 Processes annotations on a given page by cloning and adjusting them as needed. @param imported the PDPage containing annotations to process
3464 Adds a digital signature to the document using the provided PDSignature object and SignatureInterface. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface used for signing @param options SignatureOptions controlling the signature process @throws IOException if an I/O error occurs during signature addition
3465 Fills and strokes a cloned path with the specified winding rule. @param windingRule determines how interior and exterior regions are handled
3466 Writes text content to a PDF document. @param doc PDDocument object to populate @param outputStream Writer stream for outputting the PDF file
3467 Inserts the generated appearance for a widget into an output stream. @param widget the PDAnnotationWidget @param appearanceStream PDAppearanceStream @param output OutputStream to write to @throws IOException if writing fails
3468 Draws a page, applying transformations and rendering hints. @param g Graphics2D context to draw on @param pageSize PDRectangle specifying the page size and bounds
3469 Creates a new PDF printable instance from a PDDocument with specified scaling. @param document PDDocument to create printables from @param scaling scaling factor for the printable
3470 Returns the default font used in generated PDFs. @return PDType1Font object for Helvetica font
3471 Initializes a TrueType font from the provided COS dictionary. @param fontDictionary the PDF font descriptor
3472 Initializes a Type1C font from the given COS dictionary. @param fontDictionary unique font identifier
3473 Creates a Type1 Font object from the given COS dictionary. @param fontDictionary COS dictionary containing font metadata
3474 Initializes a PDF Type 3 font from the given dictionary and cache. @param fontDictionary COS dictionary containing font data @param resourceCache Resource cache for font resources
3475 Loads a Type 0 font from the given PDDocument and RandomAccessRead. @param doc PDDocument instance @param randomAccessRead random access read stream to font data @param embedSubset whether to embed subset of font in document @param vertical whether to load font for vertical layout
3476 Loads a Type 0 font from a TrueType font. @param doc PDDocument instance @param ttf TrueType font to load @param embedSubset whether to embed subset of the font
3477 Loads a vertical font from a TrueType font. @param doc PDDocument instance @param ttf TrueTypeFont to load from @param embedSubset whether to embed the subset
3478 Loads and creates a PDTrueTypeFont instance from the given PDDocument and TrueType font. @param doc PDDocument instance to associate with the font @param ttf TrueType font data @param encoding Encoding scheme for the font
3479 Loads a TrueType font from the given PDDocument and data stream. @param doc the target document @param randomAccessRead the font data stream @param encoding the font's character encoding
3480 Initializes FDFDocument from an imported XFDF document. @param doc XFDF document to import
3481 Initializes PDVisibleSignDesigner with file name, image stream, and page number. @param filename PDF file name @param imageStream input stream for visible signature image @param page page number to initialize the designer for
3482 Initializes a PDVisibleSignDesigner with provided file, image, and page parameters. @param filename path to PDF document file @param image visible sign image as BufferedImage @param page target page number for signature placement
3483 Saves XFDF file to specified location. @param fileName path and name of output file
3484 Processes a PDF page, importing necessary resources and annotations. @param page PDPage object to be processed
3485 Adds a user signature to the PDS. @param sigObject signature object to be added @param options optional configuration for the signature operation
3486 Adds a digital signature to the PDSignature object. @param sigObject PDSignature object to add signature to @param signatureInterface interface for signature operation
3487 Merges two PDF documents into one. @param destination the target document @param source the source document to be merged
3488 Converts a PNG image to a PDImageXObject. @param doc PDDocument instance @param imageData byte array containing the PNG image data @return PDImageXObject or null if conversion fails
3489 Extracts text from PDDocument and returns it as a string. @param doc input PDF document
3490 Renders a PDF page as an image. @param pageIndex unique page identifier @param scale scaling factor for the rendered image @param imageType desired image type (e.g. ARGB, RGB) @param destination target location for the rendered image @return the rendered image or null on failure
3491 Renders a specific page to the given graphics context. @param pageIndex unique page identifier @param graphics Graphics2D object for rendering @param scaleX horizontal scale factor for transformation @param scaleY vertical scale factor for transformation @param destination RenderDestination where output will be written
3492 Creates a new PDFPrintable instance from a PDDocument. @param document PDDocument to create printable from @param scaling (default: SHRINK_TO_FIT) scaling mode for the printable
3493 Renders a string of bytes as glyphs on the graphics context. @param string the input byte array to render @throws IOException if an error occurs during rendering
3494 Initializes PDMMType1Font from COS dictionary. @param fontDictionary COS dictionary containing font data
3495 Constructs a PDType3Font object from the given COS dictionary. @param fontDictionary COS dictionary containing font information.
3496 Loads font from PDDocument and specified file. @param doc the document to load from @param file file containing font data @throws IOException if loading fails
3497 Loads a font from an InputStream into a PDDocument. @param doc the document to add the font to @param input InputStream containing the font data @param embedSubset whether to embed subset fonts in the output PDF
3498 Loads vertical font from specified file into PDDocument. @param doc the document to load into @param file file containing font data @return loaded PDType0Font object or null on failure
3499 Loads vertical font from given InputStream. @param doc PDDocument instance @param input InputStream containing font data
3500 Loads a vertical PDF font from an input stream. @param doc the PDDocument instance @param input the InputStream containing the font data @param embedSubset whether to embed and subset the font
3501 Loads PDDocument with a TrueType font from a file. @param doc the document to update @param file the font file @param encoding the font encoding
3502 Loads TrueType font from stream into PDDocument. @param doc the target PDDocument @param input input stream containing font data @param encoding character encoding for font metadata
3503 Loads an XFDF document from an InputStream. @param input InputStream containing XFDF data @return loaded FDFDocument object or null on failure
3504 Processes document pages within a specified page range. @throws IOException on input/output errors
3505 Adds a digital signature to the PDS. @param sigObject the signature object to be added
3506 Flattens the PDF form by recursively processing its fields. @throws IOException if an I/O error occurs during flattening
3507 Creates a PDImageXObject from the given byte array. @param document PDDocument context @param byteArray image data @param name image name @param customFactory optional factory for unsupported types @return PDImageXObject or throws exception if type is not supported
3508 Renders an image at the specified page index and scale. @param pageIndex the page to render (1-indexed) @param scale the scaling factor @param imageType the type of image to render
3509 Renders a page to the specified graphics context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX horizontal scale factor @param scaleY vertical scale factor
3510 Displays text represented as a byte array. @param string input text as bytes
3511 Displays text strings and/or displacements from the provided COSArray. @param array input array containing text strings or displacements
3512 Creates a PDFont object based on the provided COSDictionary. @param dictionary COS dictionary containing font metadata @param resourceCache Resource cache for type 3 fonts @return PDFont object or null if not found
3513 Loads a Type 0 font from an InputStream. @param doc parent PDDocument instance @param input stream containing font data
3514 Loads XFDF document from file. @param filename path to XFDF file @return loaded FDFDocument object or null on failure
3515 Loads XFDF document from specified file. @param file file to load XFDF data from
3516 Splits a PDDocument into multiple documents based on processing rules. @return List of split PDDocuments
3517 Creates a PDImageXObject from a byte array. @param document PDDocument instance @param byteArray image data as bytes @param name image name
3518 Renders an image at specified page index and scale. @param pageIndex unique page identifier @param scale image scaling factor
3519 Renders image with specified DPI. @param pageIndex page index (usage context unclear) @param dpi desired dots per inch value
3520 Renders an image with specified DPI for a given page. @param pageIndex index of the page to render @param dpi desired dots per inch value @param imageType type of the image to generate (e.g. PNG, JPEG) @return rendered BufferedImage or null on error
3521 Renders page to graphics with specified scale. @param pageIndex unique page identifier @param graphics Graphics context for rendering @param scale scaling factor for rendering
3522 Retrieves a PDFont object by name, caching for future use. @param name COSName identifier of the font to fetch
3523 Creates a PDF font from the provided COS dictionary. @param dictionary COS dictionary representing the font
3524 Extracts a document fragment from the source document. @return PDDocument object representing the extracted fragment
3525 Renders an image from a given page index. @param pageIndex unique page identifier
3526 Renders page to graphics object. @param pageIndex index of page to render @param graphics graphics context for rendering
3527 Copies required fonts and resources to the given PDAppearanceStream. @param appearanceStream target stream for resource copying
3528 Retrieves a PDFont object from the specified font setting.
3529 Updates the appearance stream of a PDAnnotationWidget with generated content. @param widget PDAnnotationWidget to update @param appearanceStream PDAppearanceStream to modify
3530 Copies graphics state parameters from the provided dictionary into the target graphics state.
3531 Processes appearance string operators and their operands. @param content byte array containing PDF stream data
3532 Initializes the default appearance and resources. @param defaultAppearance the default appearance string @param defaultResources the default resources object
3533 Retrieves the default appearance string from inheritable attributes or default resources. @return PDDefaultAppearanceString object representing the default appearance.
3534 Sets the appearance value for a given field. @param apValue the formatted appearance value
3535 Initializes AppearanceGeneratorHelper with a PDVariableText field. @param field the PDVariableText field to process
