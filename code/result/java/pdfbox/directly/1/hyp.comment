1 Constructs a PDExtendedGraphicsState instance from a COS dictionary. @param dictionary COS dictionary containing extended graphics state data
2 Initializes PlainText object with text value. @param textValue input text to be parsed into paragraphs
3 Constructs an instance of PDActionImportData from a COS dictionary. @param a COS dictionary to initialize this object from
4 Retrieves a COSObject instance by its name. @param key unique identifier for the COSObject @return COSObject instance or null if not found
5 Initializes a new PDActionURI object from a COS dictionary. @param a COS dictionary containing action URI data
6 Initializes an instance of PDActionSubmitForm from a COS dictionary. @param a COS dictionary containing form data
7 Initializes a new PDActionSound instance from a COS dictionary. @param a COS dictionary containing sound properties
8 Creates an action to hide a page. @param a COS dictionary representing the action properties
9 Initializes a new instance of PDActionMovie with the given COS dictionary. @param a COS dictionary containing movie action data
10 Initializes PDActionLaunch with a COS dictionary.
11 Initializes a new instance of PDActionResetForm with the specified COS dictionary. @param a COS dictionary containing form reset action parameters
12 Constructs a new PDActionRemoteGoTo instance from the given dictionary.
13 Constructs a GoTo action with the specified dictionary. @param a COSDictionary representing the action's properties
14 Constructs an embedded GoTo action. @param a COS dictionary containing action parameters.
15 Constructs a named action from the given dictionary. @param a COSDictionary containing action data.
16 Constructs a new PDActionThread instance from the given COS dictionary. @param a the COS dictionary to initialize with
17 Constructs a PDActionJavaScript instance from a COS dictionary. @param a dictionary containing action parameters
18 Creates a raw input stream for reading. @throws IOException if no data has been written or seeking is not supported
19 Finds and returns an ImageReader for the specified format. @param formatName unique image file format name @param errorCause reason for failure to find reader @return ImageReader object or throws exception if not found
20 Finds and returns a raster-capable ImageReader for the given format. @param formatName unique image format name @param errorCause cause of failure if reader not found @return ImageReader object or null if not found (throws exception instead)
21 Retrieves an Operator object by its name. @param operator unique operator identifier @return Operator object or null if not found
22 Returns a string representation of this COSArrayList object. The string includes the string representation of its underlying array.
23 Checks if a given edge is a line based on control points. @param ctl array of Point2D objects representing control points
24 Returns the lower left X-coordinate of the rectangle. @return Lower left X value as a float
25 Retrieves the lower-left y-coordinate from the rect array. @return Lower-left y-coordinate as a float value
26 Returns the X-coordinate of the upper-right corner. @return x-coordinate value as a floating-point number
27 Returns the Y-coordinate of the upper-right corner of the rectangle.
28 Retrieves font size from settings.
29 Retrieves and returns the COS value as a float.
30 Retrieves COS value at index 1 as a floating-point number.
31 Retrieves value at index 3 from values collection and returns it as a float.
32 Retrieves the first COSNumber value as a float.
33 Retrieves the y-coordinate value from the stored values. @return the y-coordinate value as a float
34 Retrieves the stroking color space from the graphics state.
35 Sets the stroking color to the specified PD color. @param color PDF color object to apply as the new stroke color
36 Retrieves the current stroking color from the graphics state.
37 Retrieves encoding instance based on the given COSName. @param name COSName enum value to fetch corresponding Encoding instance @return Encoding instance or null if invalid COSName is provided
38 Creates a PDSoftMask object from the provided dictionary. @param dictionary COSBase object containing soft mask data @param resourceCache ResourceCache instance for resolving resources
39 Returns the index of the first selected PDAnnotationWidget. @return Index or -1 if none found
40 Parses PNG image chunks to extract metadata. @param imageData input image data bytes @return PNGConverterState object or null if malformed
41 Adds a source file to the system by creating a new File object from the specified path. @param source absolute or relative path to the source file
42 Parses the PDF trailer, handling irregularities and missing EOLs. @return true if successful, false otherwise
43 Retrieves the Z value from the collection of values. @return Z coordinate as a floating-point number
44 Retrieves an object from the pool based on the provided key. @param key unique identifier of the object to retrieve
45 Retrieves the current text line matrix from graphics state. @return TextLineMatrix object representing current transformation
46 Sets the text line matrix of the graphics state. @param value Matrix object to apply
47 Retrieves the current text matrix from graphics state. @return Text matrix object representing transformation parameters.
48 Scales user-specified width based on current transformation matrix. @param width original width value
49 Retrieves the non-stroking color from the graphics state.
50 Sets the non-stroking color using the provided PDColor. @param color the new color to set
51 Retrieves non-stroking color space from graphics state.
52 Executes a sequence of instructions, pushing objects onto the execution context's stack and executing operators. @param context ExecutionContext object for managing the instruction sequence
53 Retrieves integer value at specified index, or returns default value if out of bounds. @param index the array index @param defaultValue the default integer value to return @return the integer value at the index, or the default value
54 Retrieves revision number at specified index. @param index position of desired revision number
55 Writes a boolean value to PDF stream. @param output OutputStream for writing to PDF file @param cosBoolean COSBoolean object containing the value
56 Creates a deep copy of this matrix.
57 Initializes a linear measure dictionary from a COS dictionary. @param dictionary COS dictionary containing measurement data
58 Constructs a PDAcroForm field. @param acroForm the containing AcroForm @param field the underlying form dictionary @param parent the parent non-terminal field
59 Constructs a non-terminal field in an Acrobat form. @param acroForm the containing Acrobat form @param field the underlying COS dictionary @param parent the parent non-terminal field (or null for root)
60 Notifies user with changed attribute if entry has changed. @param oldEntry previous entry object @param newEntry updated entry object
61 Returns the number of elements in the underlying map. @return Size of the map
62 Writes ASCII-formatted string to output stream. @param text input string to be written
63 Creates a translation matrix instance with given X and Y offsets. @param x horizontal offset @param y vertical offset @return TranslationMatrix object representing the transformation
64 Returns the number of objects in the collection.
65 Retrieves an object from the collection at specified index. @param index position of the desired object in the collection @return Object at given index or null if out of bounds
66 Returns a tree structure of fields associated with this object. @return PDFieldTree instance representing field hierarchy
67 Retrieves the name at a specified index, returning default value if out of range. @param index int index to access @param defaultValue fallback string value @return COSName object or default value if not found
68 Searches for the index of a given COSBase object within this collection. @param object COSBase object to search for @return Index of the object, or -1 if not found
69 Retrieves a list of filters, either as a single COSName or an array of COSNames.
70 Creates a scale transformation matrix. @param x horizontal scaling factor @param y vertical scaling factor
71 Retrieves filter list from stream, converting to COSName list. @return List of COSName objects or empty list if not found
72 Retrieves list of file filters from PDF stream. @return List of filter names or empty list if not found
73 Scales a 2D vector by a factor. @param sxy scaling factor @return scaled Vector object
74 Applies linear transformation to a 2D vector. @param vector input vector @return transformed vector
75 Creates a rotation matrix instance with the specified angle and translation. @param theta rotation angle in radians @param tx translation along x-axis @param ty translation along y-axis @return Matrix object representing the rotation and translation
76 Evaluates the interpolating function using exponential interpolation. @param input input value @return array of interpolated values or null if an error occurs
77 Sets the text matrix in the graphics state. @param value Matrix to be set
78 Compares this XReferenceEntry to the given entry based on referenced key. @param xReferenceEntry entry to compare with @return -1 if this entry's key is null, 1 if other entry's key is null, otherwise comparison result
79 Returns the length of the recipients array in the dictionary. @return number of recipients
80 Initializes a new instance of Type7ShadingPaint with given shading and transformation. @param shading PDShadingType7 object @param matrix transformation matrix
81 Scales the 6-element float array by the specified factors. @param sx scale factor for x-coordinates @param sy scale factor for y-coordinates
82 Multiplies this matrix by another, element-wise. @param other The matrix to multiply with @return A new matrix containing the product
83 Creates a SecurityHandler instance for the given ProtectionPolicy. @param policy policy to create handler for
84 Creates a SecurityHandler instance for the specified filter type. @param name unique filter identifier
85 Sets stroking color based on the provided PDColor object. @param color PDColor object with color components @return true if color was successfully applied, false otherwise
86 Sets non-stroking color on demand from the provided PDColor object. @param color PDColor object with color components
87 Translates the 3D vector by a given 2D offset. @param tx horizontal translation amount @param ty vertical translation amount
88 Retrieves the name of a character in the specified font, handling alternative and Unicode names. @param name character name to lookup @return character name if found, .notdef otherwise
89 Initializes rendering resources, synchronizing access to ensure atomicity. @throws IOException if default CMYK color profile cannot be loaded
90 Applies an alpha mask to the input image. @param image the input image @param mask the alpha mask @param interpolateMask whether to interpolate the mask @param isSoft whether to use a soft mask @param matte the matte values (optional) @return the masked image
91 Initializes cubic Bezier curve with control points and level. @param ctrlPnts array of Point2D objects defining the control points @param l the level of detail for the curve generation
92 Checks if a point is contained within this polygon. @param p Point to check @return true if point lies within or on the polygon, false otherwise
93 Calculates the color at a given point using various interpolation methods. @param p the input point @return an array of float values representing the calculated color
94 Intersects clipping path with provided GeneralPath. @param path GeneralPath to intersect
95 Draws a tiling pattern using the provided Graphics2D context and parameters. @param g Graphics2D context to draw on @param pattern Tiling pattern to draw @param colorSpace Color space for the pattern @param color Pattern color @param patternMatrix Transformation matrix for the pattern
96 Intersects given area with clipping path. @param area Area to be clipped
97 Sets the clipping region for drawing operations.
98 Retrieves font name for the given glyph, falling back to Unicode code point. @param name glyph name @return font name or ".notdef" if not found
99 Inserts a Unicode combining diacritic at specified position. @param i insertion index @param diacritic TextPosition object containing diacritic data
100 Maps a code point to its corresponding GID. @param code the code point to map @return the mapped GID or 0 if not found
101 Initializes and loads a glyph list from an InputStream. @param input InputStream containing glyph data @param numberOfEntries expected number of entries in the list
102 Initializes a Line object with two points and their associated colors. @param p0 starting Point @param p1 ending Point @param c0 color of the first point @param c1 color of the second point
103 Normalizes Unicode Alphabetic and Arabic Presentation forms in a given word. @param word the input string to normalize @return normalized word or result of handleDirection() if no normalization needed
104 Initializes a SoftMask object with specified parameters. @param paint the Paint object to be masked @param mask the BufferedImage used for masking @param bboxDevice the device-space bounding box @param backdropColor the background color (optional) @param transferFunction the transfer function to apply (or null for identity)
105 Removes a backdrop image from the specified group image. @param backdrop The backdrop image to remove @param offsetX X offset of the backdrop within the group image @param offsetY Y offset of the backdrop within the group image
106 Copies a GlyphList instance and loads glyphs from an input stream. @param glyphList existing list to copy @param input InputStream containing glyphs to add
107 Concatenates input matrix with current state. @param matrix Matrix to be concatenated
108 Parses an InputStream into a Document object. @param is input stream containing document data
109 Writes a COS integer to a PDF stream. @param output OutputStream for writing the PDF data @param cosInteger COS integer object to be written
110 Retrieves X-axis scaling factor from text matrix. @return X-scale value as a float
111 Returns vertical scaling factor of the text matrix. @return float value representing Y-axis scale factor
112 Creates a raw output stream for writing. @return OutputStream object or null if failed
113 Initializes COSWriter with output stream and compression parameters. @param outputStream OutputStream to write compressed data @param compressParameters Compression settings for the writer
114 Initializes a COSWriter with output stream and input data. @param outputStream OutputStream for writing compressed COS data @param inputData RandomAccessRead for reading incremental input data
115 Extracts string data from byte array, handling UTF-16BE and LE encodings. @return extracted text as a String or null if not found
116 Encodes a string as PDFDocEncoding or UTF-16BE with BOM. @param text input string @param forceHex whether to use PDFDocEncoding even if not applicable
117 Returns cached or created COSInteger instance for the given value. The result is pre-allocated within a fixed range [LOW, HIGH]. @param val long value to fetch or create COSInteger instance
118 Writes FDF document to underlying PDF structure. @param doc the FDFDocument object to write
119 Checks if a font is a standard 14 font based on its name. @return true if font is a standard 14 font, false otherwise
120 Initializes a new instance of LayerUtility with the given PDDocument. @param targetDoc the document to operate on
121 Retrieves recipient string at specified index from the RECIPIENTS array. @param i index of desired recipient string
122 Retrieves direction value from COS object. @return COSBase representing the direction or ZERO if not found
123 Retrieves a set of metadata keys from the COSName collection.
124 Retrieves a list of attribute names from the COS object. @return List of attribute names as strings
125 Adds trailer information from the provided dictionary to the stream. @param trailerDict Trailer dictionary containing info to add
126 Creates a new COSDictionary instance by copying all entries from another dictionary. @param dict COSDictionary to copy from
127 Checks if the given COSDictionary represents metadata (info). @param dictionary COSDictionary to inspect @return true if dictionary contains info fields, false otherwise
128 Checks if widths are defined in the dictionary. @return true if WIDTHS or MISSING_WIDTH is present, false otherwise
129 Checks if missing width is present in the dictionary. @return true if missing width is present, false otherwise
130 Checks if XFA exists in the dictionary. @return true if COSName.XFA is present, false otherwise
131 Returns a string representation of this COSFloat object. Includes formatted data in the format defined by formatString().
132 Writes formatted string as ISO-8859-1 encoded PDF content to specified output stream. @param output target OutputStream for writing the PDF data
133 Writes a COSArray to the specified OutputStream. @param output stream to write to @param cosArray array of COS objects to serialize
134 Creates and returns a COSIncrement object. @param updateInfo required data for increment creation
135 Initializes the cache with default settings.
136 Reads specified number of bytes from internal buffer or external source. @param data target byte array @param offset starting index in data array @param len number of bytes to read @return actual number of bytes read or -1 if end-of-file reached
137 Retrieves a map of object IDs to their respective numbers from the source. @return A map where keys are unique object IDs and values represent their counts, or null if an error occurs
138 Parses and returns a map of COS objects by their keys. @return Map of COSObjectKey to COSBase object or null on error
139 Constructs a new PDPageFitWidthDestination with parameters from the given array. @param arr input array containing destination parameters
140 Initializes the destination rectangle from an array of coordinates. @param arr array containing x1, y1, x2, y2 values
141 Calculates the final encryption key based on object number and generation number. @param objectNumber unique identifier of the object @param genNumber generation number of the object @return the calculated final key as a byte array
142 Initializes a new PDPageFitHeightDestination with the given COS array. @param arr COS array containing initialization data
143 Initializes a new PDPageFitDestination instance from an array of values.
144 Initializes PDAppearanceContentStream with given appearance and output stream. @param appearance PDAppearanceStream object @param outputStream OutputStream to write content to
145 Parses and validates a string representation of a float. @param aFloat input string to parse @throws IOException if parsing fails
146 Initializes a new PDPageContentStream instance. @param doc The parent PDDocument object @param appearance The page's appearance stream @param outputStream Output stream for content generation
147 Transforms a point by applying the current transformation matrix. @param x original x-coordinate @param y original y-coordinate @return transformed point with updated coordinates
148 Creates a PaintContext with transformed pattern matrix. @param cm ColorModel @param deviceBounds Device bounds rectangle @param userBounds User bounds rectangle @param xform AffineTransform to apply @param hints RenderingHints @return PaintContext object or null if failed
149 Parses an object by its unique identifier. @param objectNumber unique identifier of the object to parse @return COSBase object or null if not found
150 Initializes parser with byte array data. @param bytes input byte array to parse
151 Initializes parser with contents from PDContentStream. @param pdContentstream content stream to parse
152 Converts FontBox Encoding to a Type1Encoding object. @param encoding the FontBox Encoding instance @return Type1Encoding object populated from the input encoding
153 Initializes MacOS Roman Encoding by adding character mappings from the predefined table.
154 Constructs a PDPageXYZDestination object from a COS array. @param arr COS array containing page destination coordinates
155 Fetches a COSBase object by either the primary or secondary key. @param firstKey primary COSName identifier @param secondKey secondary COSName identifier (used if primary is not found) @return COSBase object or null if neither are found
156 Reads the next byte from the data stream. Returns -1 on end-of-file or decoding failure.
157 Reads up to 'length' bytes from decoded data into the provided buffer, starting at offset. Returns actual number of bytes read, or -1 on EOF.
158 Reads image from InputStream and sets it as current image. @param stream input stream containing image data
159 Encodes input data using adaptive Huffman coding. @param rawData input stream to encode @param encoded output stream containing encoded data @param parameters COSDictionary object (not used in this method)
160 Chooses the best DataRow to write based on estimated compression sum.
161 Returns a RenderState enum value based on the provided COSName. @param state COSName containing the state name @return RenderState enum value or null if state is null
162 Returns BaseState enum value based on COSName or returns ON if input is null. @param state COSName object to fetch the corresponding BaseState
163 Initializes Type 6 Shading paint with specified parameters. @param shading Type 6 shading to be used @param matrix Transformation matrix for the shading
164 Constructs a new PDSoftMask object from a COSDictionary. @param dictionary COSDictionary containing soft mask data
165 Initializes Type4 Shading Paint with provided shading and transformation matrix. @param shading PDShadingType4 object @param matrix transformation matrix
166 Adds given text at specified position to contents.
167 Adds marked content to the collection of contents. @param markedContent PDMarkedContent object to be added
168 Sets whether printing is allowed based on permission. @param allowPrinting true to enable or false to disable printing
169 Enables or disables modification capability based on read-only status. @param allowModifications true to allow modifications, false otherwise
170 Sets whether content extraction is allowed. @param allowExtraction true to enable, false to disable
171 Enables or disables modification of annotations. @param allowAnnotationModification true to enable, false to disable
172 Adds a PDXObject to the contents. @param xobject PDXObject instance to be added
173 Updates form fill-in permission based on the provided flag. @param allowFillingInForm true to enable or false to disable filling in form
174 Retrieves the highest XREF object number from the object pool.
175 Applies GSUB rules to a word, transforming glyph IDs and writing them to an output stream. @param gsubWorker GSUB transformation worker @param out OutputStream for transformed glyph IDs @param font PDType0Font object for glyph encoding @param word input string to transform @return List of transformed glyph IDs
176 Initializes a PDDocument object from a COSDocument and input stream. @param doc COSDocument instance @param source RandomAccessRead stream containing PDF data @param permission AccessPermission object for security settings
177 Initializes an FDFDocument object from a COSDocument and a data source. @param doc the COSDocument to initialize @param source the RandomAccessRead data source for FDF content
178 Returns a string representation of this FunctionType2 object. @return formatted string with C0, C1, and N values
179 Sets whether accessibility data extraction is allowed. @param allowExtraction true to enable or false to disable extraction
180 Sets whether faithful print is allowed. @param canPrintFaithful true to enable, false to disable
181 Returns Adobe glyph list.
182 Initializes a PDColor with specified color values, pattern name, and color space. @param components array of color components (e.g. R, G, B) @param patternName COSName representing the pattern @param colorSpace PDColorSpace object describing the color model
183 Sets whether document assembly is allowed. @param allowAssembly true to enable, false to disable
184 Checks if print permission is enabled. @return true if print permission is set, false otherwise
185 Checks if modification permission bit is enabled. @return true if modification permission is granted, false otherwise
186 Checks if content extraction permission is enabled. @return true if permitted, false otherwise
187 Checks if user has permission to modify annotations. @return true if annotation modification permission is enabled, false otherwise
188 Checks if user has permission to fill in form. @return true if permission bit is set, false otherwise
189 Checks if accessibility extraction permission is enabled. @return true if enabled, false otherwise
190 Checks permission to assemble documents. @return true if assembly permission is enabled, false otherwise
191 Checks if faithfull printing permission bit is enabled. @return true if enabled, false otherwise
192 Initializes encryption key from byte array. @param key input key bytes (length must be between 1 and 32)
193 Checks if a Unicode code point has prohibited properties. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
194 Calculates the version number based on key length and policy. @return Version number (1-5) indicating encryption algorithm used
195 Converts numeric code to CID (Character ID) using parent's CMap. @param code numeric code to convert @return corresponding CID value
196 Writes a byte to the output stream after modifying the internal salt array. @param aByte byte to be written @param output OutputStream to write to
197 Writes an object reference to the specified OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing object ID and generation
198 Checks whether compression parameters are set to compress. @return true if compression enabled, false otherwise
199 Checks whether the entity needs to be updated.
200 Compares this integer object with another Object instance. @param o the other object to compare with @return true if both objects are equal, false otherwise
201 Initializes COSObjectKey with object number, generation and stream index. @param num positive object number @param gen non-negative generation number @param index stream index
202 Checks whether the document is accepting updates. @return true if the document allows updates, false otherwise
203 Writes a single byte to the output stream, potentially triggering ASCII85 encoding and newline handling. @throws IOException if write operation fails
204 Flushes output buffer, writing transformed data and terminator.
205 Calculates the text orientation in degrees. @return orientation angle (0-360)
206 Applies a predictor row to the given byte array. @param predictor type of prediction (1: none, 2: sub, 10: none, etc.) @param colors number of color components @param bitsPerComponent bit depth per component @param columns number of pixel columns @param actline output byte array to fill with predicted values @param lastline previous row's byte array (used for some predictors)
207 Sets the bounding box of this object. @param bbox PDRectangle bounding box or null to remove it
208 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null on parsing error
209 Closes resources and throws the first encountered IOException. @throws IOException if an error occurs during resource closure
210 Closes the document and associated I/O streams. @throws IOException if an error occurs during closure
211 Wraps primitive boolean into COSBoolean object. @param value primitive boolean value
212 Initializes PDMarkedContent with given tag and properties. @param tag COSName representing the content type @param properties COSDictionary containing additional metadata
213 Initializes Type 5 Shading paint with given parameters. @param shading PDShadingType5 object @param matrix transformation matrix
214 Retrieves the type of this COS name. @return the name pattern as a string
215 Returns the type of shading.
216 Retrieves the default value for this object. @return The default value as a string or an empty string if not found.
217 Clears the check box value to its default state.
218 Adds an XReferenceEntry to the collection of existing entries. @param entry XReferenceEntry object to be added
219 Initializes a PDXObject instance from the given PDStream and subtype. @param stream PDStream containing object data @param subtype COSName representing the subtype of the object
220 Calculates the offset of the first 'startxref' marker preceding EOF.
221 Reads from the source stream until it finds the 'endstream' keyword. @param out EndstreamFilterStream to write filtered content to @return length of the filtered output
222 Checks if next character in buffer is space or return. @throws IOException if an I/O error occurs while reading from source.
223 Adds a new XReferenceEntry to the data stream, skipping duplicates based on referenced key number. @param entry XReferenceEntry object to be added
224 Retrieves the numeric value from the first column of the data type. @return The numeric value as a long integer.
225 Retrieves generation value from referenced key. @return long representing key generation
226 Retrieves cross-reference table from trailer resolver. @return Map of COS object keys to timestamp values
227 Returns a string representation of the FreeReference object. @return String in format "FreeReference{key=<key>, nextFreeObject=<nextFreeObject>, type=<type>}"
228 Retrieves the generation value from the referenced key. @return Generation value as a long integer
229 Returns a string representation of this object, including its type and offset.
230 Retrieves the value from the second column of the parent key. @return The numeric value of the parent key's second column
231 Returns the value of the third column in the data stream. @return long integer representing the third column's value
232 Returns a string representation of this ObjectStreamEntry, including its key, type, index, and parent.
233 Writes bytes to output stream. @param b byte array to write @param off starting offset in the array @param len number of bytes to write
234 Writes single byte to output stream. @param b single byte value to be written
235 Writes end-of-line character if not already on a new line.
236 Returns the value of the second column based on the byte offset. @return The second column's value as a long integer, or 0 if not applicable.
237 Returns a COS dictionary representing the function object. @return COSDictionary instance, or the function dictionary if no stream is present
238 Searches for XRef streams in the PDF and returns their offsets.
239 Searches for the last EOF Marker in the input stream. @return Last found EOF Marker position or Long.MAX_VALUE if not found
240 Returns the underlying COS object as a COSStream. @return COSStream representation of the internal COS object
241 Retrieves the metadata COSStream from the underlying COS object. @return COSStream containing metadata or null if not found
242 Sets metadata COSStream object. @param metadata COSStream containing metadata information
243 Compares this PD Annotation with another object for equality. @param o the object to compare with @return true if both objects are equal, false otherwise
244 Searches for Xref tables in the PDF and returns offsets. @return List of Xref table offsets or empty list if not found
245 Checks if the next character in input stream is a digit. @return true if digit found, false otherwise
246 Adds XRef entry to the trailer object. @param objKey unique COSObjectKey identifier @param offset long value representing the offset
247 Checks if next character in input stream is whitespace.
248 Determines whether to skip a line break. @param linebreak ASCII value of the character @return true if CR or LF, false otherwise
249 Checks for end of string indicator within the next 3 bytes. @param bracesParameter current parameter value @return updated parameter value or 0 if end of string found
250 Checks whether the given character marks the end of a line. @param c the character to check @return true if LF or CR, false otherwise
251 Reads a numeric string from the input stream. @return StringBuilder containing the numeric string or null if end of stream reached
252 Checks if next character in input stream is whitespace. @return true if whitespace, false otherwise
253 Extracts start XREF value from PDF document. @return The byte offset of the first object referenced by the xref, -1 if not found.
254 Returns the underlying COS dictionary of this object.
255 Initializes COSBoolean with given boolean value.
256 Initializes COSName object with given name. @param aName the name to be stored in the object
257 Prevents instantiation of COSNull class.
258 Initializes COSString object from byte array with optional hex formatting. @param bytes input data to be converted @param forceHex whether to always use hexadecimal representation
259 Initializes COSDictionary with an internal COSUpdateState.
260 Initializes a COSObject instance from a given COSBase object. @param object the COSBase object to wrap
261 Initializes a COSObject instance from a COSBase object and an ICOSParser. @param object the COSBase object to initialize @param parser the ICOSParser instance for parsing
262 Initializes COSObject with provided key and parser. @param key COSObjectKey object @param parser ICOSParser instance for parsing COS data
263 Constructs a new FreeXReference object with the given COSObjectKey and next free object ID. @param key unique identifier for the referenced object @param nextFreeObject ID of the next available free object
264 Creates a new XReference for an Object Stream entry. @param objectStreamIndex index of the associated object stream @param key unique identifier of the referenced object @param object referenced object (can be null) @param parentKey key of the parent object (if any)
265 Initializes the default resource cache with enabled flag set to true.
266 Initializes a new instance of PDTypedDictionaryWrapper from a COSDictionary. @param dictionary COSDictionary to wrap
267 Constructs PDAttributeObject from COSDictionary.
268 Initializes PDShadingType2 with given shading dictionary. @param shadingDictionary COSDictionary containing type 2 shading information
269 Constructs a PDUserProperty object from a COS dictionary and user attribute object. @param dictionary COS dictionary containing property data @param userAttributeObject associated user attribute object
270 Initializes a new PDOutlineNode instance from a COSDictionary.
271 Creates an FDF annotation link from the given COS dictionary. @param a COS dictionary containing link data
272 Constructs an FDFAnnotationPolygon object from a COSDictionary. @param a COSDictionary containing polygon data
273 Constructs a new polyline annotation from a COS dictionary.
274 Initializes an FDFAnnotationSound object from a COS dictionary. @param a COS dictionary containing annotation sound properties
275 Constructs an FDFAnnotationSquare object from the given COS dictionary. @param a COS dictionary representing the annotation square
276 Constructs an instance of FDFAnnotationStamp from the given COS dictionary. @param a COS dictionary containing stamp annotation data
277 Constructs an instance of FDFAnnotationText from a COSDictionary. @param a COSDictionary containing annotation text properties
278 Constructs an instance of FDFAnnotationTextMarkup from the given COS dictionary. @param a COS dictionary containing annotation data
279 Initializes a new instance of PDShadingType1 from a COS dictionary. @param shadingDictionary dictionary containing shading data
280 Creates an FDFAnnotationLine object from a COSDictionary. @param a input dictionary containing annotation line data
281 Initializes a new instance of the PDTilingPattern class. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for accessing resources
282 Retrieves the transparency group attributes, creating a new instance if not already initialized. @return PDTransparencyGroupAttributes object or null if not found
283 Retrieves a Composite instance based on blend mode and alpha value. @param blendMode blend mode to use (cannot be null) @param constantAlpha composite alpha value (clamped between 0 and 1)
284 Extracts and returns PDPanose classification from binary data. @return PDPanoseClassification object representing the extracted values
285 Initializes a new instance of PDShadingPattern from the given COS dictionary. @param resourceDictionary the dictionary containing shading pattern data.
286 Constructs an FDFAnnotationInk object from a COS dictionary. @param a COS dictionary containing annotation ink data
287 Constructs an instance of FDFAnnotationFreeText from a COS dictionary. @param a COS dictionary containing annotation data
288 Constructs an FDFAnnotationFileAttachment object from a COS dictionary. @param a COS dictionary containing file attachment data
289 Initializes a transition from a COS dictionary. @param dictionary COS dictionary containing transition data
290 Constructs a PDDestinationNameTreeNode instance from a COS dictionary.
291 Constructs an instance of PDEmbeddedFilesNameTreeNode from a COSDictionary. @param dic COSDictionary containing node data
292 Constructs a PDJavascriptNameTreeNode instance from the given COS dictionary. @param dic the COS dictionary containing node data
293 Constructs a PDStructureElementNameTreeNode from a COSDictionary.
294 Creates a child node of type PDNumberTree with given dictionary. @param dic COSDictionary to initialize the node
295 Constructs a new PDMetadata instance from a given COSStream. @param str input stream containing metadata data
296 Constructs a new PDObjectStream from the given COSStream. @param str input stream to initialize the object with
297 Initializes an embedded file from a COS stream. @param str COS stream containing file data
298 Initializes a PDFunction object from a COSBase representation. @param function COSBase object containing function data
299 Initializes a PDXObject from a COSStream with the specified subtype. @param stream input COSStream containing object data @param subtype type of object being created (e.g. XObject)
300 Constructs a new PDStructureElement instance from the given COSDictionary.
301 Constructs a PDStructureTreeRoot instance from a COS dictionary. @param dic the COS dictionary to initialize with
302 Initializes an empty SecurityHandler instance.
303 Initializes an FDFAnnotationCaret object from a COS dictionary. @param a COS dictionary containing caret information
304 Constructs an FDFAnnotationCircle object from a COS dictionary. @param a COS dictionary containing circle annotation properties
305 Constructs DecodeOptions from rectangle coordinates. @param x left coordinate @param y top coordinate @param width rectangle width @param height rectangle height
306 Returns the input Unicode string with right-to-left characters visually ordered. @return modified Unicode string or original if no RTL characters found
307 Converts a single byte to an array of two hexadecimal bytes. @param b the input byte
308 Converts binary byte array to ASCII-formatted string. @param bytes input binary byte array @return ASCII-formatted byte array or null if invalid input
309 Writes a single byte as two hexadecimal characters to the specified output stream. @param b the byte value to write @param output the output stream where the hexadecimal representation will be written
310 Formats a floating point number into an ASCII buffer. @param value float value to format @param maxFractionDigits maximum number of decimal digits @param asciiBuffer buffer to store the formatted string @return length of the formatted string, or -1 on error
311 Initializes AxialShadingPaint with specified shading type and transformation matrix. @param shadingType2 PDShading type 2 @param matrix transformation matrix for paint application
312 Initializes Radial Shading Paint with specified shading and transformation. @param shading type of radial shading @param matrix transformation matrix for the paint
313 Retrieves a value of type T from the trie by traversing the nodes corresponding to the given byte array. @param bytes the byte array to traverse @return the found value or null if not found
314 Returns string representation of character as Unicode code point.
315 Converts byte array to a hexadecimal string representation. @param bytes input byte array
316 Converts a single byte to its hexadecimal string representation. @param b the input byte @return the hexadecimal string (e.g., "AB") or null if invalid
317 Starts an article section based on language direction. @param isLTR true if language is left-to-right, false otherwise
318 Calculates the width of a rotated text based on its rotation angle. @param rotation the rotation angle in degrees (0-360) @return the width of the rotated text or 0 if undefined
319 Writes the article ending to the output stream.
320 Calculates y-coordinate of lower-left corner after rotation. @param rotation angle in degrees
321 Writes the platform-specific line separator to the output stream.
322 Calculates the X rotation value based on input angle. @param rotation input rotation in degrees (0-360) @return calculated X rotation value
323 Writes word separator to output stream.
324 Writes start of a paragraph, ending current one if any.
325 Writes the start of the current page to the output stream.
326 Writes page end content to output stream.
327 Sets design coordinate and returns this instance. @param x horizontal position @param y vertical position
328 Checks if character is a diacritic (non-spacing mark or modifier).
329 Ensures a PDOutlineItem has no siblings, throwing exception otherwise. @param node the item to check
330 Initializes Type 1 Shading paint with given PDShadingType1 and transformation matrix.
331 Writes Unicode characters from provided TextPosition to output. @param text TextPosition object containing Unicode data
332 Returns the template height as the page height.
333 Creates a new COSDocument instance from the given ICOSParser. @param parser COS parser to read document data from
334 Checks if the given point (x, y) lies within the bounding box. @param x horizontal coordinate @param y vertical coordinate @return true if the point is inside the box, false otherwise
335 Constructs a PDSignatureField object. @param acroForm the AcroForm containing this field @param field the COSDictionary representing this field @param parent the PDNonTerminalField that contains this field
336 Returns a string representation of the object collection, including each object and its revision number.
337 Generates a unique partial field name by appending an incremented integer to the base "Signature" field.
338 Initializes a PDButton object with its parent form and field. @param acroForm the PDAcroForm containing this button @param field the underlying PDF field @param parent the parent non-terminal field
339 Initializes a Variable Text field in the given AcroForm with specified parent field. @param acroForm the form containing this field @param field the underlying COS dictionary for this field @param parent the parent non-terminal field of this variable text field
340 Creates a new PDSoftMask object from the provided COS dictionary. @param dictionary COS dictionary containing soft mask data
341 Initializes a new instance of PDShadingType5 from a COSDictionary. @param shadingDictionary dictionary containing type 5 shading data
342 Initializes a new instance of PDShadingType4 from a COS dictionary.
343 Initializes a new instance of PDShadingType3 from a COS dictionary. @param shadingDictionary dictionary containing type 3 font shading data
344 Initializes PDTilingPattern with COSDictionary and no parent.
345 Initializes an instance of FDFAnnotationUnderline with the given COS dictionary. @param a COS dictionary containing annotation underline properties
346 Initializes an FDFAnnotationStrikeOut object from a COS dictionary. @param a COS dictionary containing strike-out annotation data
347 Initializes an instance of FDFAnnotationSquiggly with the given COS dictionary.
348 Constructs an FDFAnnotationHighlight instance from a COS dictionary. @param a COSDictionary containing annotation highlight data
349 Initializes StandardSecurityHandler with a given protection policy. @param standardProtectionPolicy the policy to enforce
350 Initializes the handler with the provided public key protection policy. @param publicKeyProtectionPolicy Public key protection policy to be used.
351 Constructs an instance of StandardSecurityHandler.
352 Initializes a new instance of PublicKeySecurityHandler.
353 Initializes a new PDFormXObject instance from a COS stream and resource cache. @param stream COS stream containing form object data @param cache Resource cache for resolving dependencies
354 Initializes a new PDFormXObject from a COS stream. @param stream input COS data to parse
355 Calculates height by subtracting lower left Y-coordinate from upper right Y-coordinate.
356 Converts this object to a GeneralPath.
357 Retrieves a FontBoxFont instance, either from cache or by loading it. @return FontBoxFont object or null if not loaded
358 Saves installed fonts information to disk cache.
359 Sets the FontProvider instance and updates font info by name. @param fontProvider provider of fonts to use
360 Initializes a shaded triangle from given points and colors. @param p array of Point2D vertices @param c 3x2 matrix representing vertex colors
361 Loads a glyph list from a file resource. @param filename name of the glyph list file @param numberOfEntries number of entries to load into the GlyphList object @return populated GlyphList object or null if not found
362 Initializes a new COSString instance with the specified text, without formatting.
363 Retrieves the document's default appearance as a string. @return Default appearance string or null if not set
364 Retrieves export values as a list of strings.
365 Retrieves a list of string items from the given COSBase object, filtered by pair index (0 or 1) when dealing with nested arrays. @param items COSBase object containing the item(s) @param pairIdx index into two-element arrays (0 or 1) @return List of String objects or empty list if not found
366 Retrieves the destination name (string or name) from the namedDestination object. @return Destination name as a string, or null if not found
367 Retrieves the file string representation. @return The file contents as a string or null if not set
368 Encrypts or decrypts input data using AES-256 algorithm. @param data InputStream containing the data to encrypt/decrypt @param output OutputStream where encrypted/decrypted data will be written @param decrypt true for decryption, false for encryption
369 Encrypts or decrypts data using AES with a given key and initialization vector. @param finalKey encryption key @param data input stream containing the data to encrypt/decrypt @param output output stream for encrypted/decrypted data @param decrypt true to decrypt, false to encrypt
370 Processes input text as a token.
371 Concatenates two matrices by multiplying the second matrix with the first. @param a first matrix @param b second matrix to be multiplied with the first
372 Translates a 2D Vector by calling the corresponding method on its components. @param vector input vector to be translated
373 Applies text adjustment translation to the graphics state. @param tx horizontal adjustment factor @param ty vertical adjustment factor
374 Rotates the current matrix by an angle of 'theta' radians. @param theta rotation angle in radians
375 Computes and returns the encrypted owner password. @param ownerPassword raw owner password @param userPassword raw user password @param encRevision encryption revision (2, 3, or 4) @param length data length (5 for rev 2) @return encrypted byte array
376 Computes user password based on input parameters. @param password raw password data @param owner owner information @param permissions access permissions @param id unique identifier @param encRevision encryption revision ( REV_5, REV_6, etc. ) @param keyLengthInBytes encrypted key length @param encryptMetadata whether to encrypt metadata @return encrypted password data or empty array for REV_5/REV_6
377 Loads and processes image from file at specified path. @param path file system path to the image file
378 Initializes PDVisibleSignDesigner with an image stream. @param imageStream InputStream containing the image data.
379 Initializes and returns a map of GIDs to codes. @return Map of unique integers (GIDs) to corresponding code values.
380 Initializes a new PDPostScriptXObject instance from a COSStream.
381 Checks if collection is empty. @return true if no elements exist, false otherwise
382 Writes an operator to the output stream, followed by a newline. @param text the operator value to be written
383 Writes an integer operand to the output stream, formatted as decimal. @param integer integer value to be written
384 Writes a floating-point operand to the output stream. @param real the operand value (throws IllegalArgumentException for non-finite numbers)
385 Determines image suffix based on stream filters. @return file extension (e.g. png, jpg, jpx) or null if unknown
386 Initializes a JPX image object from the given stream and resources. @param stream input stream containing image data @param resources resource dictionary for the image
387 Creates an output stream with optional filters. @param filters COSBase filter to apply @return OutputStream object for writing
388 Returns name at specified index. @param index position of name to retrieve
389 Returns integer value at specified index (defaulting to -1). @param index position of desired integer value
390 Returns a string representation of the rectangle's coordinates. @return String in format [x1,y1,x2,y2]
391 Transforms a GeneralPath using the given matrix. @param matrix transformation matrix @return transformed GeneralPath object
392 Retrieves a string value at the specified index, returning the default value if out of bounds. @param index array index @param defaultValue default string to return if index is invalid @return string value or default value if index is invalid
393 Initializes a COSWriter instance with an OutputStream and default compression parameters. @param outputStream output stream to write to
394 Retrieves the integer value of degrees as a COSBase object. @return COSBase representation of degrees integer value
395 Appends a kid to the current entity with specified MCID. @param mcid unique identifier of the child
396 Parses string representation of a COSNumber. @param number input string to parse
397 Converts this state to an increment operation. @return Increment operation object.
398 Writes a COS float value to the given OutputStream. @param output OutputStream to write to @param cosFloat COS float value to be written
399 Resets text clipping by intersecting with buffered clip path.
400 Updates current clipping paths and transfers them to graphics context. @param graphics graphics context to transfer clipping paths to
401 Calculates width by subtracting lower left X from upper right X. @return Width as a floating-point number
402 Initializes a PDFunctionType0 instance from a COSBase representation. @param function COSBase object containing function data
403 Retrieves FontMetrics for a given font name, loading metrics if not cached. @param fontName unique font identifier @return FontMetrics object or null if failed to load
404 Writes a specified portion of binary data to an output stream. @param data the byte array containing the data to be written @param offset starting index within the data array @param len number of bytes to be written @param output target OutputStream for writing the data
405 Writes an array of bytes to an OutputStream. @param data array of bytes to be written @param output OutputStream to write the data to
406 Checks for any revision 3 permission set. @return True if any permission is granted, false otherwise
407 Checks if the user has owner permission by verifying all advanced edit permissions.
408 Calculates X-direction adjustment based on direction. @return adjusted value in X-direction
409 Detects the file type based on its contents. @param inputStream input stream containing file data @return FileType enum value or throws IOException if unable to determine file type
410 Writes an array of hexadecimal byte values to the specified output stream. @param bytes input byte array to convert and write @param output OutputStream to write the hexadecimal representation
411 Writes a PDF-compatible name to the specified OutputStream. @param output target stream for writing the name
412 Writes external signature to PDF document. @param cmsSignature CMS signature as byte array
413 Converts byte array to hexadecimal string representation. @return hex-encoded string or empty string if input is null
414 Converts Calendar object to ISO8601 formatted string. @param cal Calendar object containing date and timezone info @return ISO8601 formatted string representation of the date or null if invalid.
415 Formats a Calendar object as a string. @param cal the calendar to format (cannot be null)
416 Writes paragraph end and resets paragraph flag.
417 Initiates article processing.
418 Calculates adjusted width direction based on current direction and rotation. @return Adjusted width direction value as a float.
419 Calculates and returns the width of the object. @return The width value as a floating-point number.
420 Calculates Y-direction adjustment for rotated pages. @return adjusted Y-coordinate value
421 Initializes TextPosition object with page and text attributes. @param pageRotation rotation of the page (0, 90, 180, or 270) @param pageWidth and height of the page @param textMatrix transformation matrix for text rendering @param endX and Y coordinates of the text's end position @param maxHeight maximum allowed text height @param individualWidth width of a single character @param spaceWidth width of a space between characters @param unicode string to render, and its corresponding char codes @param font used for rendering the text @param fontSize and fontSizePt (points) of the rendered text
422 Skips whitespace characters and comments from the input stream.
423 Reads the next line from the input source. @throws IOException if end-of-file reached unexpectedly
424 Skips the next line break in the input stream. @return true if skipped successfully, false otherwise
425 Skips leading white spaces and line breaks in the input stream.
426 Initializes form XObject from given PDF stream. @param stream the PDF stream containing form data
427 Searches for the nearest xref offset within tables and streams. @param xrefOffset target offset to search for @return closest matching offset, or -1 if not found
428 Closes resources and releases data buffers. @throws IOException if an I/O error occurs during closing
429 Updates the internal 'updated' flag based on provided status. @param updated true to indicate updates are accepted, false otherwise
430 Constructs COSObjectKey with version number and generation. @param num version number @param gen object generation
431 Checks if an update is required for the given object. @param base COSBase object to check @return true if update is needed, false otherwise
432 Closes all overlays and documents, releasing system resources.
433 Parses the PDF header and returns true if successful.
434 Parses FDF header. @return true if parsing is successful, false otherwise
435 Creates a new PDDocument instance from a COS document and source. @param doc COS document to load @param source source of the document data
436 Creates a new PDF document instance. @return A PDDocument object representing the newly created document.
437 Initializes a PDFunctionType3 instance from a COS stream. @param functionStream input stream containing COS data
438 Initializes an empty instance of PDWindowsLaunchParams with a new dictionary.
439 Initializes an empty target directory object.
440 Initializes an empty URI dictionary.
441 Initializes PDEncryption object with an empty COS dictionary.
442 Initializes an empty PDBorderEffectDictionary instance. @param none @return none
443 Initializes an empty PDCryptFilterDictionary instance.
444 Initializes an empty border style dictionary.
445 Initializes a new PDPropBuild object with an internal dictionary.
446 Initializes a new instance of the PDBoxStyle class. Creates an empty COSDictionary instance to store style attributes.
447 Initializes an empty PDF property list.
448 Initializes PDMarkInfo with an empty COSDictionary.
449 Initializes a new instance of PDF property build data dictionary.
450 Initializes a new instance of PDSeedValueMDP with an empty dictionary.
451 Initializes an empty PDF timestamp object.
452 Initializes a PDField with an AcroForm and an empty dictionary. @param acroForm associated PDAcroForm object
453 Initializes a new instance of PDViewportDictionary. Creates an empty viewport dictionary.
454 Initializes viewer preferences with an empty dictionary.
455 Initializes additional page actions with an empty dictionary.
456 Initializes form field additional actions with an empty dictionary.
457 Initializes catalog additional actions with an empty dictionary.
458 Initializes additional actions dictionary.
459 Initializes an empty JavaScript object using a COSDictionary.
460 Initializes an instance of FDFIconFit with an empty dictionary.
461 Initializes an empty FDFField object with a new COSDictionary.
462 Initializes an empty FDF dictionary.
463 Creates a default DecodeResult instance with an empty COSDictionary. @return A DecodeResult object initialized with an empty dictionary.
464 Initializes an empty FDF Catalog.
465 Initializes an empty named page reference with an underlying dictionary.
466 Initializes an empty FDFPage instance with a new COSDictionary.
467 Initializes PDDefaultAttributeObject with a COSDictionary. @param dictionary input COS dictionary
468 Initializes an instance of FDFPageInfo with an empty COS dictionary.
469 Initializes an empty FDFTemplate instance with a new COSDictionary.
470 Initializes a new instance of PDDeviceNAttributes with an empty COSDictionary.
471 Initializes a new instance of PDDeviceNProcess with an empty dictionary.
472 Initializes a new instance of the PDShading class with an empty dictionary.
473 Initializes COSStream object with specified cache. @param streamCache RandomAccessStreamCache instance
474 Initializes an empty COSArray instance with default settings.
475 Initializes an empty dictionary of additional PDF actions.
476 Wraps an existing COS dictionary in an unmodifiable map. @param dict the original dictionary, which cannot be modified after this call.
477 Constructs a PDUserAttributeObject from a COSDictionary.
478 Initializes COSObject with COSBase and COSObjectKey. @param object COSBase object to wrap @param objectKey COSObjectKey for referencing
479 Constructs a PDStandardAttributeObject instance from a COSDictionary.
480 Initializes a new instance of the PDNameTreeNode class with an empty dictionary.
481 Initializes an empty PDDictionaryWrapper with a new COSDictionary instance.
482 Constructs an empty page label range with default properties. @param dictionary underlying PDF dictionary (default is new COSDictionary())
483 Retrieves PDF metadata from the stream. @return PDMetadata object or null if not found
484 Retrieves the metadata as a PDMetadata object. @return PDMetadata object or null if not available
485 Constructs a new PDOutlineItem from a given COS dictionary. @param dic COS dictionary containing outline item data
486 Initializes an empty PDF document information object.
487 Initializes PDResources object with empty dictionary and font caches.
488 Creates a new COSString instance from the given byte array. @param bytes the input byte array
489 Retrieves the COSName instance for a given PDF name, creating it if not found. @param aName unique PDF name
490 Initializes legacy PDF stream engine with default operators.
491 Retrieves the Extends stream from the PDF object. @return PDObjectStream object or null if not found
492 Checks if a COSName exists in the collection. @param name unique identifier of the COSName to check @return true if COSName exists, false otherwise
493 Retrieves an item from the PDF document by its key. @param key unique identifier of the item to retrieve
494 Parses a COS name from the input stream. @throws IOException on parsing error
495 Initializes PDColor from a COSArray and color space. @param array COSArray containing color components and/or pattern name @param colorSpace the color space of the PDColor object
496 Retrieves a COS filter by name. @param filterName unique filter identifier @return Filter object or null if not found
497 Creates a thumbnail image from the provided COS stream. @param cosStream input stream containing image data
498 Writes a byte array as either an ASCII or hex string to the specified output stream. @param bytes input byte data @param forceHex forces writing in hex format even if the data is ASCII @param output output stream for the written string
499 Initializes a PDF marked content extractor with specified encoding. @param encoding string encoding for extracted content
500 Fetches incremental data for signing. @return InputStream containing incremental bytes to be signed
501 Begins text mode, writing the BEGIN_TEXT operator and setting flag to true. @throws IOException on write failure @throws IllegalStateException if already in text mode
502 Merges a single Unicode character diacritic into this TextPosition, inserting it at the optimal position between existing characters. @param diacritic the diacritic to merge
503 Checks if two TextPosition objects overlap. @param tp2 the second position to check @return true if they overlap, false otherwise
504 Checks if this TextPosition completely contains another. @param tp2 the TextPosition to check against @return true if completely contained, false otherwise
505 Writes paragraph separator by writing both end and start tags.
506 Writes the given affine transformation matrix as a series of operands. @param transform AffineTransform object to serialize
507 Retrieves the soft mask image from the PDF object. @return PDImageXObject representing the soft mask or null if not found.
508 Initializes PDF text stripper with basic marked content sequences.
509 Writes an operand (COSName) to PDF output stream. @param name COSName object containing operand data
510 Retrieves the mask image from the PDF object. @return PDImageXObject representing the mask or null if not found
511 Writes COS name to output stream with trailing space. @param output OutputStream for writing data @param cosName COSName object containing PDF content
512 Initializes a PDRectangle from the given BoundingBox. @param box bounding box containing lower left and upper right coordinates
513 Creates an output stream based on the specified filter. @param filter COSName representing the filter to apply
514 Initializes a push button form field with specified parameters. @param acroForm the parent AcroForm @param field the underlying COS dictionary @param parent the parent non-terminal field
515 Initializes a new PDCheckBox instance with the given parameters. @param acroForm PDAcroForm containing the form @param field COSDictionary representing the checkbox field @param parent PDNonTerminalField that contains this checkbox
516 Creates an empty output stream.
517 Initializes radio button with specified form, field dictionary, and parent field. @param acroForm the form containing this field @param field COSDictionary for the radio button field @param parent PDNonTerminalField that contains this radio button
518 Initializes a PDChoice object with its parameters. @param acroForm PDAcroForm to associate with this choice @param field COSDictionary representing the field data @param parent PDNonTerminalField that contains this choice
519 Initializes a text field within a PDF document. @param acroForm parent form containing the field @param field COS dictionary representing the field properties @param parent non-terminal parent field
520 Saves the current graphics state by cloning and pushing it onto the stack.
521 Transforms appearance stream bounding box by its matrix. @param appearanceStream PDAppearanceStream object
522 Clips the current graphics state to the specified rectangular region. @param rectangle the PDRectangle to clip to
523 Retrieves left value from array at index 2. @return integer value of left element in array
524 Retrieves the value at index 3 from an underlying array. @return integer value stored in the array at index 3
525 Retrieves integer value at index 4 from array. @return integer value or throws exception if index out of bounds
526 Retrieves the value at index 5 from an internal array. @return integer value stored in the array
527 Retrieves element at index 2 from an array. @return integer value of the third element
528 Retrieves the top element from an indexed array. @return integer value at index 3 or equivalent
529 Checks if array type is bounded by first element. @return true if bounded, false otherwise
530 Checks if the first element in the array matches the bounded type. @return true if element at index 1 is of bounded type, false otherwise
531 Initializes a new COSDocument instance with an in-memory stream cache.
532 Checks if the bounding box is of type BOUNDING_BOX. @return true if the box has TYPE_BOUNDED, false otherwise
533 Saves the current graphics state and returns the original stack. @return The original graphics state Deque or null (not applicable)
534 Returns the value at index 2 from an underlying array. @return integer value stored at array index 2
535 Adds Type1 font information from a PFB file. @param pfbFile PFB file to process
536 Returns an unmodifiable dictionary view of this COS dictionary. @return An immutable dictionary representation
537 Initializes COSStream from a RandomAccessStreamCache and RandomAccessReadView. @param streamCache cache for random access streams @param randomAccessReadView view of the underlying read stream
538 Initializes a new COSStream instance with default settings.
539 Creates a new COSStream instance and adds it to the collection for garbage collection. @return A new COSStream object.
540 Ends text mode and writes END_TEXT operator to output. @throws IOException if an I/O error occurs
541 Retrieves the most recent or default decode result. @return The latest DecodeResult object or a default one if none exist.
542 Initializes a PDRectangle object with the specified coordinates and dimensions. @param x left edge X-coordinate @param y top edge Y-coordinate @param width rectangle width @param height rectangle height
543 Initializes COSArrayList with a dictionary and key. @param dictionary the parent dictionary @param dictionaryKey the key identifying this array in the dictionary
544 Initializes an empty COSArrayList instance.
545 Converts a hexadecimal string into a COSString. @param hex input hexadecimal string @return COSString object or null if invalid input
546 Initializes page destination with an empty array.
547 Writes this document to the specified OutputStream.
548 Retrieves PDF Resources dictionary, creating an empty one if not found. @return PDResources object or null if not present
549 Adds TrueType font implementation details to the list. @param fontHeaders font metadata @param file font file @param hash unique font identifier
550 Adds TrueType Collection to the system. @param ttcFile TrueType Collection file to process
551 Constructs a new transparency group from the given COS stream and resource cache. @param stream COS stream containing transparency data @param cache Resource cache for accessing cached resources
552 Initializes PDAppearanceStream from COSStream. @param stream COSStream object to initialize from
553 Initializes an instance of PDTableAttributeObject from a COSDictionary.
554 Creates a new PDPrintFieldAttributeObject instance from a COS dictionary.
555 Constructs a PDListAttributeObject from a COS dictionary.
556 Initializes a PDLayoutAttributeObject from a COSDictionary. @param dictionary COS dictionary containing attribute data
557 Initializes terminal field with given AcroForm. @param acroForm parent form containing this field
558 Initializes an empty PDStructureElementNameTreeNode.
559 Initializes an empty PD Javascript Name Tree Node.
560 Initializes an instance of PDEmbeddedFilesNameTreeNode.
561 Initializes an empty PDDestinationNameTreeNode instance.
562 Initializes an empty PDOutlineNode object.
563 Initializes PDUserProperty instance from given user attribute object. @param userAttributeObject User attribute data to initialize with.
564 Initializes a new instance of a PDAttributeObject.
565 Constructs a PDNonTerminalField instance from an associated PDAcroForm object.
566 Sets text leading value. @param leading new text leading value
567 Sets rendering mode using specified mode value. @param rm RenderingMode to be applied
568 Sets horizontal scaling factor. @param scale float value representing new scaling factor
569 Sets word spacing to specified value. @param spacing new word spacing value
570 Sets character spacing to specified value. @param spacing float value representing new spacing
571 Closes marked content section. @throws IOException if I/O error occurs during writing
572 Sets the miter limit for line rendering. @param miterLimit non-negative float value
573 Sets line dash pattern with specified values and phase. @param pattern array of dash segment lengths @param phase initial phase value
574 Sets the line cap style. @param lineCapStyle integer value representing the desired line cap style (0-2)
575 Sets the line join style to the specified value. @param lineJoinStyle integer value between 0 and 2 (inclusive)
576 Sets line width to specified value. @param lineWidth new line width in float units
577 Sets text rise value. @param rise desired text rise value
578 Clips even and odd paths.
579 Closes the current path. @throws IOException on write error @throws IllegalStateException when called within a text block
580 Closes, fills, and strokes even/odd shapes. @throws IOException if an I/O error occurs
581 Closes, fills non-zero areas, and strokes the shape. @throws IOException if an I/O error occurs
582 Fills and strokes shapes in even/odd mode. @throws IOException if an I/O error occurs
583 Fills and strokes the current shape, throwing an exception if in text mode.
584 Fills even and odd values into the output.
585 Fills the data structure with non-zero values.
586 Closes and strokes the current drawing, throwing an exception if in text mode.
587 Performs stroke operation on the current drawing path. @throws IOException if an I/O error occurs
588 Draws a line to specified coordinates. @param x the x-coordinate @param y the y-coordinate
589 Advances to next line in text mode. @throws IllegalStateException if not in text mode
590 Moves the cursor to specified coordinates. @param x horizontal position @param y vertical position
591 Converts COSString object to Calendar object. @param text COSString object containing date information
592 Creates a marked content object based on the provided tag and properties. @param tag COSName representing the type of marked content @param properties COSDictionary containing additional attributes
593 Fetches user password based on encryption revision. @param ownerPassword owner's encrypted password @param owner unique owner identifier @param encRevision encryption revision (e.g. REVISION_5, REVISION_6) @param length password length @return byte array representing the user password or null if not found
594 Initializes a TensorPatch object with control points and color data. @param tcp array of Point2D objects representing control points @param color 2D float array for color information
595 Returns the FontProvider instance, initializing it to the default provider if not already set.
596 Generates a list of shaded triangles from the provided patch data. @param patchCC 2D array of CoordinateColorPairs representing the patch
597 Initializes Coons Patch object with given control points and colors. @param points array of 2D coordinate points @param color 2D array of color values
598 Writes Bezier curve to graphics context. @param x1 initial point's X-coordinate @param y1 initial point's Y-coordinate @param x3 final point's X-coordinate @param y3 final point's Y-coordinate
599 Clips the current graphics context to the non-zero area.
600 Performs a binary search for objects in the PDF file. @throws IOException if an I/O error occurs
601 Reads a string of specified length from input stream, skipping leading spaces. @param length maximum characters to read
602 Reads and parses an integer from the input stream. @throws IOException if invalid integer format is encountered
603 Reads and parses a long integer value from the input stream. @throws IOException if invalid data is encountered
604 Calculates fixed XRef offset by searching brute force. @param objectOffset input file offset to search @return fixed XRef offset or 0 if not found
605 Constructs a new PDDocument instance from a COSDocument. @param doc COSDocument to initialize the document from
606 Initializes PDGraphicsState with a clipping path from a given page rectangle. @param page PDRectangle representing the page bounds
607 Retrieves current access permission. @return AccessPermission object or owner's default permission if not set
608 Computes revision number based on provided version. @param version The input version to compute the revision for
609 Encrypts data using RC4 algorithm with provided key. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
610 Copies InputStream to OutputStream in chunks. @param data input stream containing data @param output output stream to write data to
611 Prepares SASL query string. @param str input string to prepare
612 Prepares stored SASL password string. @param str input password string
613 Writes a CID-to-Unicode map to the specified output stream. @param out OutputStream to write to
614 Sets a named destination for the PDF document. @param dest string value of the named destination
615 Initializes a named destination from a string. @param dest string representation of the named destination
616 Sets the file name to be used in the COS string object. @param fileName the name of the file to be set
617 Restores graphics state by popping color and font stacks.
618 Initializes an empty PDSimpleFileSpecification.
619 Retrieves a string value from inheritable attribute V or returns 'Off' if not set. @return string value or 'Off' by default
620 Retrieves string at specified index (defaulting to null). @param index numerical index of desired string
621 Saves the current graphics state to allow for later restoration.
622 Writes a newline at the specified text offset. @param tx x-coordinate of the newline @param ty y-coordinate of the newline
623 Verifies input matches expected string, skipping spaces if requested. @param expectedString array of characters to match @param skipSpaces whether to skip leading and trailing whitespace
624 Retrieves the object key for a given PDF object number and generation. @param num object number @param gen object generation @return COSObjectKey instance or a newly created one if not cached
625 Reads a string from the input stream, skipping leading spaces. @return string value or empty string if end of name is reached
626 Sets stroking color using CMYK values. @param c cyan (0..1) @param m magenta (0..1) @param y yellow (0..1) @param k black (0..1)
627 Sets the stroking color to a grayscale value. @param g grayscale value between 0 and 1
628 Sets non-stroking color in RGB format. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
629 Sets non-stroking CMYK color using individual components. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
630 Sets non-stroking color to a gray value within 0..1 range. @param g grayscale value between 0 and 1
631 Adds a rectangle to the current drawing, appending its coordinates and dimensions. @throws IOException if an I/O error occurs
632 Updates the current object with latest data.
633 Updates internal update state based on provided flag. @param flag true to mark as needing update, false otherwise
634 Draws a quadratic Bezier curve from (x1, y1) to (x2, y2) and then to (x3, y3). @param x1 start point X-coordinate @param y1 start point Y-coordinate @param x2 control point X-coordinate @param y2 control point Y-coordinate @param x3 end point X-coordinate @param y3 end point Y-coordinate
635 Writes Bezier curve segment to output stream. @param x2, y2 coordinates of second control point @param x3, y3 coordinates of third control point
636 Parses the xref table from the PDF source stream. @param startByteOffset starting offset of the xref table
637 Parses XREF trailer data using the provided resolver. @param resolver resolves object references and stream information
638 Searches for object stream offsets and returns a map of positions to COSObjectKey objects.
639 Constructs a transparency group from an input stream. @param stream input stream containing transparency data
640 Retrieves value at index 3 from the array. @return integer value or default if invalid index
641 Sets the stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
642 Removes a COSBase object from the collection and updates the update state. @param o COSBase object to remove @return true if removal was successful, false otherwise
643 Parses a hexadecimal string from the input source, stopping at the first '>' character. @return COSString object representing the parsed hexadecimal data
644 Initializes PDRectangle with default coordinates (0, 0).
645 Constructs a rectangle with specified width and height. @param width rectangle's width @param height rectangle's height
646 Returns a rectangle representing the current bounding box.
647 Calculates the rectangular difference between annotation and bounding box.
648 Sets integer value at specified index in object collection. @param index position to update @param intVal new integer value to set
649 Adjusts the bounds of a PDRectangle by applying user-provided differences. @param rectangle original rectangle @param differences array of four floats representing x/y offset and width/height adjustments @return modified PDRectangle object or original if invalid input
650 Adjusts a PDRectangle by applying the provided size differences. @param differences array of 4 floats representing x, y, width, and height adjustments @return updated PDRectangle or original if input is invalid
651 Calculates a padded rectangle from the given box. @param box original rectangle to pad @param padding amount of space to add around the box @return new PDRectangle with added padding
652 Initializes a new PDF XRef Stream instance from the given COS document. @param cosDocument the COS document to create the XRef stream from
653 Creates a PDObjectStream from the given PDDocument. @param document input PDF document
654 Initializes a new PDStream instance from an existing PDDocument. @param document the parent document to create the COS stream from
655 Creates a padded rectangle by adding specified padding to the original rectangle. @param rectangle original PDRectangle @param padding amount of padding to add @return new PDRectangle with added padding
656 Initializes the PDF text stripper with default settings.
657 Initializes the extractor with no input content.
658 Reads and validates the generation number from input. @throws IOException if invalid generation number is encountered
659 Validates and returns a user-defined object number. @throws IOException if the number exceeds 10 digits or is negative
660 Encrypts data using RC4 algorithm. @param finalKey encryption key @param input source stream to read from @param output destination stream to write encrypted data to
661 Processes a single character's position in the text. @param text TextPosition object containing character data
662 Processes a TextPosition object to determine whether it should be displayed. @param text the TextPosition object to process
663 Begins marked content with specified tag. @param tag COSName representing the markup tag to use
664 Begins marked content sequence with specified MCID. @param tag COSName specifying the type of content @param mcid unique identifier for the marked content sequence
665 Sets marked content point using COSName object. @param tag COSName representing marked content point
666 Writes COSString contents to an OutputStream. @param string COSString object to serialize @param output OutputStream target for the serialized data
667 Writes a string representation of byte array to the specified output stream. @param bytes byte array to convert and write @param output target output stream
668 Initializes PDF graphics engine with page and adds necessary operators. @param page PDPage object to render
669 Initializes a new PDStream instance from the given COSDocument. @param document COSDocument to create stream from
670 Creates a COSStream from the given PDDocument and InputStream. @param doc the parent PDDocument @param input the input stream to transfer @param filters COSBase filter object
671 Creates a COSStream from the given InputStream. @param rawInput input stream containing PDF data @return COSStream object representing the created stream
672 Removes an item by its unique COSName identifier. @param key COSName of the item to be removed
673 Clears all items and updates the update state.
674 Removes an object at specified index and updates update state. @param i index of the object to be removed @return removed COSBase object or null if not found
675 Clears internal data and triggers an update.
676 Writes byte array to COS object output stream. @param data byte array to write @param appearanceStream PDAppearanceStream instance for writing
677 Initializes a new PDAppearanceContentStream object from an existing PDAppearanceStream. @param appearance the parent stream @param compress whether to compress the output with FLATE (default: true)
678 Sets the text transformation matrix. @param matrix transformation matrix
679 Applies a transform to the underlying matrix. @param matrix The matrix to be transformed
680 Updates the COS update state when origin changes. @param updateState COS update state to refresh
681 Resets the object to null, updating the state if previously non-null.
682 Encodes input stream into output stream based on provided parameters and index. @param input input stream to be encoded @param encoded output stream for encoded data @param parameters encoding parameters (as unmodifiable dictionary) @param index index value used in encoding process
683 Initializes a new instance of the default attribute object.
684 Initializes a new PDUserAttributeObject instance with default owner set to OWNER_USER_PROPERTIES.
685 Initializes an empty standard attribute object.
686 Initializes a new PDOutlineItem instance.
687 Initializes a new instance of the class with the specified AcroForm. @param acroForm The PDAcroForm object to initialize from.
688 Constructs an instance from a COSDictionary. @param dictionary input dictionary containing attribute data
689 Returns the appearance stream associated with this entry, or throws exception if not a valid stream.
690 Adds a TrueType font from the specified file. @param ttfFile font file to add
691 Initializes PDShadingType6 from COS dictionary. @param shadingDictionary input dictionary containing shading data
692 Initializes a new instance of PDShadingType7 from the given COS dictionary. @param shadingDictionary COS dictionary containing shading data
693 Initializes a new PDComboBox instance from given parameters. @param acroForm parent AcroForm @param field COSDictionary representing the combo box field @param parent PDNonTerminalField parent field
694 Initializes a PDListBox instance from given parameters. @param acroForm underlying AcroForm object @param field COS dictionary representing the list box field @param parent non-terminal field that contains this list box
695 Initializes COS parser with provided credentials. @param source input stream to read from @param password encryption password (if applicable) @param keyStore keystore containing cryptographic keys @param keyAlias identifier for the key to use
696 Creates an output stream from the underlying stream.
697 Sets the origin document state and updates associated update info. @param originDocumentState new origin document state @param dereferencing whether to dereference the state
698 Saves data to file specified by unique filename. @param fileName unique file identifier
699 Verifies user password based on encryption revision. @param password encrypted password @param user user data (for revisions 2-6) @param owner owner data (for revisions 2-4) @param permissions permissions (for revisions 2-4) @param id unique user identifier @param encRevision encryption revision @param keyLengthInBytes key length in bytes @param encryptMetadata whether to encrypt metadata @return true if password is valid, false otherwise
700 Finds a FontBox font by PostScript name. @param format the font format to search for @param postScriptName the PostScript name of the font @return FontBoxFont object or null if not found
701 Converts COSString object to Calendar instance. @param text COSString object containing calendar data
702 Parses a COS dictionary value and returns associated object. @throws IOException if parsing fails
703 Computes encrypted key based on password and various metadata. @param password user password @param o unknown byte array @param u unknown byte array @param oe owner encryption bytes @param ue unknown encryption bytes @param permissions access control value @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes length of encrypted key @param encryptMetadata whether to encrypt metadata @param isOwnerPassword whether password is owner's
704 Retrieves COS object offsets for the current batch of objects. @return map of COS object keys to their respective offset values
705 Constructs a new PDAppearanceContentStream instance from an existing PDAppearanceStream. @param appearance parent PDAppearanceStream object
706 Writes a page of text, handling sorting, spacing, and line wrapping. @param charactersByArticle list of text positions by article
707 Finds FontBox font by PostScript name. @param postScriptName PostScript name of the font @return FontBoxFont object or null if not found
708 Validates user password based on encryption revision. @param password user password @param user user data @param owner owner data @param permissions access permissions @param id unique identifier @param encRevision encryption revision @param keyLengthInBytes encryption key length @param encryptMetadata whether to encrypt metadata @return true if valid, false otherwise
709 Verifies owner password based on encryption revision. @param ownerPassword encrypted owner password @param user user ID @param owner owner ID @param permissions unknown purpose @param id unknown purpose @param encRevision encryption revision (2-6) @param keyLengthInBytes unknown purpose @param encryptMetadata whether to encrypt metadata @return true if password is valid, false otherwise
710 Initializes a new PDF parser instance with specified password and key store. @param source input stream to read from @param decryptionPassword password for decrypting PDF content @param keyStore InputStream containing cryptographic keys @param alias identifier of the key to use in the key store
711 Parses a CharSequence into an InstructionSequence. @param text input sequence to parse
712 Sets the origin document state to the specified value. @param originDocumentState new origin document state
713 Removes item associated with given key from cache. @param key unique identifier of the item to remove @return cached value or null if not found
714 Initializes a PDFormContentStream instance from the given PDFormXObject. @param form PDFormXObject to create content stream for
715 Clears all data from this object.
716 Initializes new instance of PDPrintFieldAttributeObject with owner set to PRINT_FIELD.
717 Initializes a new PDListAttributeObject instance with default owner set to OWNER_LIST.
718 Initializes a new instance of PDLayoutAttributeObject with default owner set to OWNER_LAYOUT.
719 Initializes COS parser with input stream. @param source RandomAccessRead object representing input data
720 Constructs a PDPageContentStream from the given PDDocument and PDAppearanceStream. @param doc the parent document @param appearance the associated appearance stream
721 Sets the line width only if it differs from the default value (1). @param lineWidth new line width value
722 Draws a paperclip shape on the content stream.
723 Draws a circle with specified radius on the content stream. @param cs graphics content stream @param x center X coordinate @param y center Y coordinate @param r circle radius
724 Draws a circle with specified radius on the given content stream. @param cs PDAppearanceContentStream to draw on @param x center X-coordinate of the circle @param y center Y-coordinate of the circle @param r radius of the circle
725 Draws a diamond shape with given radius at specified position. @param cs graphics stream @param x x-coordinate of the center @param y y-coordinate of the center @param r radius of the diamond
726 Draws a shape based on line width and style preferences. @param lineWidth the thickness of the shape's outline @param hasStroke whether to include an outline @param hasFill whether to fill the shape with color
727 Creates a PDImageXObject from the given document and encoded stream. @param document PDDocument instance @param encodedStream InputStream containing image data @param cosFilter COSBase filter object @param width image width in pixels @param height image height in pixels @param bitsPerComponent number of color components per pixel @param initColorSpace initial PDColorSpace for the image
728 Draws an arrow at the specified position with the given length. @param x horizontal position of arrow tip @param y vertical position of arrow tip @param len total length of arrow (head + tail)
729 Removes the element at the specified index. @param index position of the element to remove @return removed element or null if index was out of bounds
730 Initializes table attribute object with default owner.
731 Constructs PDStream from PDDocument and filter array. @param doc PDDocument instance @param input InputStream containing PDF data @param filters COSArray of filters to apply
732 Returns the bounding box of this element. @return PDRectangle representing the element's size and position
733 Initializes an immutable rectangle with specified width and height. @param width positive floating-point value representing the rectangle's width @param height positive floating-point value representing the rectangle's height
734 Parses a COS string from the input source. @throws IOException if parsing fails
735 Sets the page number in the internal array. @param pageNumber new value to set
736 Removes the specified element from this List. @param o element to remove @return true if removed, false otherwise
737 Sets high value at specific index in array. @param high new value to be assigned
738 Initializes PageDrawer with provided parameters. @param parameters PageDrawerParameters object containing page and rendering settings
739 Writes formatted text to the output stream. @throws IOException on write failure @throws IllegalStateException if not in text mode or missing font
740 Writes a COS string to an OutputStream. @param output the output stream to write to @param cosString the COS string data
741 Initializes metadata for a given PDF document. @param document the associated PDDocument object
742 Encrypts or decrypts data using RC4 or AES algorithms. @param objectNumber unique object identifier @param genNumber generation number @param data input data stream @param output output stream for encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
743 Initializes an Embedded File object from a PDDocument. @param document the parent document
744 Saves data to a file using the specified file name. @param fileName unique file identifier
745 Recursively collects updated elements in a COSArray. @param array input array to search for updates @return true if any element demands parent update, false otherwise
746 Constructs a new PDStream from the given PDDocument and InputStream, using the specified filter.
747 Initializes PDStream from PDDocument and InputStream. @param doc PDDocument object @param input InputStream to read from
748 Validates and potentially replaces XREF offsets using brute force parsing.
749 Initializes image XObject from PDDocument. @param document parent PDDocument instance
750 Initializes a PDXObject with the given document and subtype. @param document PDDocument instance @param subtype COSName representing the object's subtype
751 Constructs a PDMetadata object from the given PDDocument and InputStream. @param doc PDDocument instance @param str InputStream containing metadata data
752 Draws a style annotation at the specified position with the given parameters. @param style The type of annotation to draw (e.g. arrow, line, etc.) @param cs Content stream for drawing @param x X-coordinate of the annotation @param y Y-coordinate of the annotation @param width Width of the annotation @param hasStroke Whether the annotation should have a stroke @param hasBackground Whether the annotation should have a background color @param ending Whether this is an ending annotation (indicates direction)
753 Verifies owner password with provided credentials. @param password to verify
754 Initializes this form XObject with the given PDDocument. @param document PDDocument instance
755 Retrieves the COS object associated with this instance. @return The COS object or null if not available
756 Updates the origin document state based on provided update info. @param child COSBase object containing update information
757 Sets the trailer object and updates its origin document state. @param newTrailer COSDictionary to be assigned as the trailer
758 Recursively collects updatable objects from the given PDF object. @param base COSBase to traverse @return true if any updatable objects were found, false otherwise
759 Writes page content by iterating over regions and calling superclass write logic. @throws IOException if I/O error occurs during writing
760 Initializes an FDFParser instance from a random access read source. @param source input stream containing FDF data to parse
761 Creates and configures a PageDrawer instance. @param parameters PageDrawer creation parameters
762 Displays the given text in an output stream. @param text string to display
763 Displays a text with positioning data from the given array. @param textWithPositioningArray array containing string text and float positioning values
764 Creates a PDEmbeddedFile object from the given document and input stream. @param doc the parent PDDocument instance @param str the embedded file's InputStream content
765 Creates a new embedded file in the PDDocument. @param doc parent document object @param input InputStream containing file data @param filter COSName representing file filter (e.g., image type)
766 Writes COS token to output stream. @param base COS token object
767 Initializes PDF parser with provided input stream and password. @param source RandomAccessRead object containing PDF data @param decryptionPassword password for decrypting PDF content (if necessary)
768 Encrypts a COS stream with the given object and generation numbers. @param stream COS stream to be encrypted @param objNum object number to use for encryption @param genNum generation number to use for encryption
769 Decrypts a COSString using the provided object and generation numbers. @param string encrypted string @param objNum object number @param genNum generation number @return decrypted COSString or original if decryption fails
770 Initializes a font provider by scanning the local system for fonts and populating the FontCache. @param cache the cache to populate with font information
771 Creates a PDImageXObject from a byte array. @param document PDDocument instance @param byteArray input image data @param width image width @param height image height @param bitsPerComponent color depth @param initColorSpace initial color space
772 Encrypts a string using the provided object and generation numbers. @param string input string to be encrypted @param objNum object number for encryption @param genNum generation number for encryption @return encrypted COSBase object or throws IOException if error occurs
773 Decrypts a COS stream with specified object and generation numbers. @param stream encrypted COS stream @param objNum object number @param genNum generation number
774 Initializes PDExportFormatAttributeObject with the specified owner. @param owner unique identifier of the entity owning this object
775 Retrieves or creates a unique key for the given PDF object. @param obj the object to fetch a key for @return COSObjectKey instance associated with the object
776 Checks if the given COSBase value contains a self-reference to its parent. @param parent parent COSBase @param value COSBase value to check @return true if value has a self-reference, false otherwise
777 Checks if the collection contains a specified value or its equivalent COSObject. @param value Object to search for @return true if found, false otherwise
778 Accepts a visitor for the COS object, delegating to its actual contents. @param visitor ICOSVisitor instance to be notified
779 Closes all resources and throws the first encountered IOException. @throws IOException first exception occurred during close operation or null if successful
780 Retrieves the linearized dictionary from the PDF. @return COSDictionary object or null if not found
781 Retrieves the unique identifier for a given value. @param value object to find the identifier for @return COSName key or null if not found
782 Searches for the given object in this collection. @param object The COSBase object to search for @return Index of the object if found, -1 otherwise
783 Retrieves a dictionary object by its name. @param key unique identifier of the object to fetch @return COSBase object or null if not found or is null
784 Retrieves a COSNumber representing the length from a given COSBase object. @param lengthBaseObj the COSBase object to extract the length from @return the extracted COSNumber or null if not found or invalid
785 Recursively collects COSDictionary entries as part of an increment. @param dictionary the dictionary to collect from @return true if parent update is demanded, false otherwise
786 Initializes a new Transparency Group object from a PDDocument.
787 Initializes PDAppearanceStream with the given PDDocument. @param document PDDocument instance to associate with this stream.
788 Creates an image object from a buffered image within a PDF document. @param document the PDF document to embed the image in @param image the image data to embed @param quality the compression quality (0.0-1.0) @param dpi the dots per inch of the image
789 Initializes a PDF parser from a RandomAccessRead source. @param source input data stream
790 Recursively collects and processes COSObjects, skipping duplicates. @param object the COSObject to collect @return true if collection was successful, false otherwise
791 Constructs a NormalXReference with the specified byte offset, key, and object. @param byteOffset offset in bytes @param key unique identifier for the object @param object COSBase representing the object to reference
792 Retrieves an object from the collection at specified index, potentially recursively resolving nested objects. @param index unique index of the target object @return COSBase object or null if not found or resolved
793 Retrieves and initializes a set of COSBase objects. @return Set of COSBase objects
794 Adds a PDF object to the collection. @param object COSBase object to add, must be dictionary or array with key
795 Adds a COSBase object to the collection at specified index. @param i index to add object at @param object COSBase object to add
796 Sets an object at the specified index in the collection. @param index 0-based index of the object to set @param object COSBase object to be stored (can be dictionary or array)
797 Sets an item in the collection with the given key and value. If value is null, removes the item instead. @param key unique item identifier @param value COSBase object to store or null to remove
798 Removes a specified object from the collection, recursively searching for it in child objects. @param o COSBase object to remove @return true if object was found and removed, false otherwise
799 Updates child elements in the COS array. @param children COSArray of child elements to be updated
800 Prepares a stream object by adding its key and content to internal collections. @param key unique identifier for the object @param object COSBase object to be prepared
801 Checks if the provided COSBase object is present in the object pool. @param object COSBase object to search for @return true if found, false otherwise
802 Retrieves the object key for a given COSBase object. @param object COSBase object to fetch key from @return COSObjectKey or null if not found
803 Retrieves colorant names as a list of strings.
804 Retrieves the alternate color space, creating it from a resource if not already initialized. @return the created or existing alternate color space object
805 Retrieves a BlendMode instance from the provided COSBase object. @param cosBlendMode COSBase object containing blend mode data @return corresponding BlendMode enum value or NORMAL if not found
806 Retrieves a float value from the dictionary using the specified key. @param key unique identifier for the value to retrieve @param defaultValue default value to return if key is not found or invalid @return float value associated with the key, or the default value if not found
807 Retrieves a PDGamma object at the specified index from the underlying array. @param index integer index of the desired PDGamma object @return PDGamma object or null if not found at the given index
808 Returns the maximum value in the range array.
809 Retrieves the minimum value from the range array. @return The minimum value as a float
810 Converts the document to a list of integers representing COSNumbers. @return List of integers or nulls for non-COSNumber objects
811 Sets a float item in the dictionary. @param key unique identifier for the item @param value float value to be stored (null to remove)
812 Initializes an extended graphics state dictionary.
813 Sets the document border using a COSArray. @param borderArray array of border styles and values
814 Sets a rectangle item in the dictionary. @param rectangle PDRectangle object to be stored
815 Initializes PDAnnotation object from COSDictionary. @param dict COSDictionary containing annotation data
816 Initializes a new PDAnnotation object. Sets its type to 'Annot' and initializes an internal dictionary.
817 Sets the user's relationship type (P for parent or C for child). @param relationship COSName object representing the relationship type
818 Sets the B item to the specified COSBase object. @param b COSBase object to assign to the B item
819 Sets the D item of an action to the specified COSBase object. @param d COSBase object representing the new value for item D
820 Sets fields from COSArray to action item. @param array COSArray containing field data
821 Sets the sound item to the specified COSStream object. @param sound COSStream object representing the new sound
822 Sets fields in action item with provided COSArray. @param array COSArray containing field values
823 Sets the 'h' item of the action to a boolean value. @param h true or false state of the 'h' item
824 Sets the COS item T. @param t COSBase object to be set
825 Sets the second transfer value in the dictionary. @param transfer2 COSBase object containing transfer data
826 Sets the transfer COSBase item in the dictionary. @param transfer COSBase object representing a transfer
827 Retrieves the page number from the first object in the array. @return page number as an integer, or -1 if not found
828 Retrieves the first PDPage object from the array. @return The PDPage object or null if the array is empty
829 Sets the blend mode for this object. @param bm BlendMode to apply
830 Retrieves colorant name from a predefined array.
831 Converts COSNumber objects to a list of Float values. @return List of Float values, or null for non-COSNumber elements
832 Sets the rich text value for the object. @param richTextValue the rich text content or null to clear it
833 Sets decode values and updates COS object accordingly. @param decodeValues array of COS objects containing decode values
834 Sets the AffineTransform matrix. @param transform AffineTransform object containing transformation data
835 Sets the visibility policy for this object. @param visibilityPolicy COSName representing the new policy
836 Adds all objects from the provided array to this collection. @param objectList COSArray containing objects to add
837 Sets the bounding box (BBox) of this object. @param bbox PDRectangle representing the new BBox or null to clear it
838 Adds first intermediate curl segment to the path. @param angleCur current angle @param r radius of the curl @param alpha angle offset for the curl @param cx x-coordinate of the curl center @param cy y-coordinate of the curl center
839 Generates intermediate curl template by calculating and combining arc segments. @param angleCur initial angle @param r radius of the curls @return array of Point2D objects representing the template's shape
840 Initializes the content membership dictionary with OCMD type.
841 Creates an image XObject from a buffered image and adds it to the document. @param document PDDocument instance to add image to @param image BufferedImage source image @param quality JPEG compression quality (0-1.0)
842 Converts the object array to a float array, using float values from COSNumber objects. @return Array of floats with size equal to the number of objects in this collection
843 Sets the document's background to the specified COS array. @param newBackground COS array representing the new background
844 Sets the color space for a PDF object. @param colorSpace PDColorSpace object or null to remove existing color space
845 Sets user coordinates. @param newCoords array of coordinate values
846 Sets the domain to the specified COSArray value. @param newDomain new domain array
847 Sets and persists the COSArray extension. @param newExtend the new extension array
848 Sets the domain to the specified COSArray value and updates the underlying COS object. @param newDomain COSArray containing the domain information
849 Sets the transformation matrix. @param transform AffineTransform object to set
850 Sets the default style string. @param defaultStyleString the new style string value or null to reset
851 Updates the bounding box and synchronizes with PDF dictionary. @param newBBox new rectangle bounds to set
852 Updates the function array with a new COSArray instance. @param newFunctions COSArray containing function data
853 Sets the origin of the coordinate system. @param coordSystemOrigin array of float values representing the new origin coordinates
854 Initializes a PDF thread object with default properties.
855 Sets the transition direction of a PD object. @param direction new transition direction
856 Sets the duration of an object. @param duration time in seconds
857 Sets the fly scale value. @param scale float value representing the fly scale
858 Sets the fly area opacity. @param opaque true to make the fly area opaque
859 Sets rectangular differences (margins) for the PDF object. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
860 Sets the callout data. @param callout float array containing callout values
861 Sets the list of ink paths. @param inkList 2D array of float arrays representing ink paths
862 Sets line data in COS object. @param l line data as float array
863 Returns the open mode for new window, based on document preferences or explicit setting. @return OpenMode enum value: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE.
864 Retrieves dictionary object named "T". @return COSBase object representing T value.
865 Determines the open mode based on the 'NEW_WINDOW' preference. @return OpenMode value: NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE.
866 Determines the open mode for a new window based on user preference or COS dictionary settings. @return OpenMode enum value (NEW_WINDOW, SAME_WINDOW, USER_PREFERENCE)
867 Retrieves a named destination from the dictionary. @return PDNamedDestination object or null if not found
868 Retrieves contents as a byte array from the PDF document. @return contents as a byte array or an empty array if not found
869 Retrieves the XFA resource from the PDF dictionary. @return PDXFAResource object or null if not found
870 Retrieves an inheritable attribute by key. @param key COSName of the attribute to fetch
871 Retrieves the backdrop color, initializing it from COS dictionary if not already set. @return COSArray containing backdrop color or null if uninitialized
872 Retrieves the value from the current PDF dictionary. @return The dictionary's value as a COSBase object or null if not found
873 Retrieves the default value from the PDF document. @return COSBase object representing the default value
874 Closes underlying resources, including visual signature and PDF source.
875 Retrieves the key associated with the given COSBase object. @param object COSBase object to fetch the key for
876 Checks if an object exists in the pool. @param object COSBase instance to search for
877 Creates a list of COSWriterObjectStream objects based on the number of object stream parameters. @return List of COSWriterObjectStream objects
878 Retrieves the value of the specified COSName key or returns a default value. @param key COSName key to fetch @param defaultValue fallback value if key is not found @return COSName object associated with the key, or the default value
879 Assigns a unique COSObjectKey to the given COSBase object. @param key existing key or null @param object COSBase object to assign key to @return assigned COSObjectKey or null if no change occurred
880 Retrieves the name as a string from the provided COSName object. @param key COSName object to extract name from @return Name as a string, or null if not found
881 Retrieves the string value associated with the given key. @param key name of the key to fetch @return string value or null if not found
882 Converts a COSDictionary to a Map with basic types (String, Integer, Boolean, Float). @param map the COSDictionary to convert @return a COSDictionaryMap or null if input is null
883 Returns the value as a string representation of the underlying COS object.
884 Retrieves the string value of an option from the COS object. @return The string value of the first child node in the COS object.
885 Retrieves the transfer dictionary object from the PDF document. @return COSBase object representing the transfer data or null if invalid
886 Retrieves a floating-point item from the dictionary. @param key unique identifier for the item to retrieve @return Float value or null if not found
887 Retrieves an iterator over the content streams in a PDF document. @return Iterator over PDStream objects, or empty iterator if none found
888 Checks if the page has contents. @return true if contents exist, false otherwise
889 Retrieves class names and revision numbers from the COS dictionary. @return Revisions of class names with associated revision numbers
890 Retrieves and returns the K object from the dictionary. @return COSBase object representing the K value or null if not found
891 Retrieves the value of a COSBase object. @return The dictionary value associated with 'V' key, or null if not found.
892 Checks if encryption metadata is enabled. @return true if enabled, false otherwise
893 Retrieves the owner's encryption key in binary format. @return byte array containing the owner's encryption key or null if not found
894 Retrieves the user encryption key from the dictionary. @return byte array representing the encryption key, or null if not found
895 Retrieves user permissions as a byte array. @return Permissions data or null if not available
896 Retrieves the page number from the annotation dictionary. @return The page number as an Integer, or null if not found.
897 Retrieves the COSBase value associated with a field. @return COSBase object or null if unknown or invalid
898 Retrieves the transfer dictionary object from the given dictionary. @return COSBase object representing the transfer, or null if invalid
899 Retrieves the field flags value from the field dictionary. @return Integer field flags value or null if not available
900 Retrieves the clear field flags as an integer value. @return Clear field flags or null if not found
901 Retrieves the widget field flags as an integer value. @return Integer widget field flags or null if not available
902 Retrieves the flags value from the SET_F field. @return Integer flag value or null if not set
903 Retrieves clear widget field flags as an integer value. @return Integer flag value or null if undefined
904 Returns the default width, either from the dictionary or a fallback value of 1000.
905 Retrieves the color space from the PDF document's metadata. @return PDColorSpace object or null if not present
906 Retrieves the color space from PDF resources. @param resources PDF resource object
907 Initializes a PDOptionalContentGroup object from a COSDictionary. @param dict the COSDictionary to initialize with, must be of type OCG
908 Initializes an OCMD membership dictionary from a given COS dictionary. @param dict COS dictionary to initialize from
909 Retrieves the overprint mode as an integer value. @return Overprint mode value or null if not found
910 Retrieves soft mask object from dictionary. @return PDSoftMask object or null if not found
911 Retrieves the SET_FIELD_FLAGS value from the field dictionary. @return Integer representation of the flag or null if not set
912 Returns default appearance string from COS data. @return Default appearance string or null if not available
913 Retrieves string or array values for the given COSName. @param name COSName to fetch value for
914 Initializes a PDTextField with an AcroForm. @param acroForm parent form
915 Updates the document's highest XRef object number. @param importedPage PDPage object containing imported objects
916 Initializes a PDSeedValueCertificate object with default properties.
917 Sets the time stamp value in the dictionary. @param timestamp PDSeedValueTimeStamp object to set
918 Sets MDP value in dictionary. @param mdp MDP object to be set
919 Initializes a PDSignature object with default values.
920 Sets the filter name. @param filter COSName representing the filter to be applied
921 Initializes an empty PDF seed value object.
922 Sets the line dash style using a COSArray of lengths and spacings. @param dashArray array of dash and space lengths
923 Initializes a new PDAppearanceDictionary instance with a required 'N' child dictionary.
924 Sets the quad points for the PDF page. @param quadPoints array of float values representing quad point coordinates
925 Sets the rectangle differences for a PDF object. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
926 Sets parent annotation markup. @param annot PDAnnotationMarkup object to assign as parent
927 Sets vertices for the object by passing in an array of float values. @param points array of 3D coordinates representing vertex positions
928 Sets vertices data using an array of float points. @param points array of 2D point coordinates
929 Sets rich contents value from provided string. @param rc rich contents string to be set
930 Sets quad points for an object. @param quadPoints array of float values representing quad point coordinates
931 Sets the document type. @param type COSName representing the new document type
932 Sets the filter item in the dictionary. @param filter COSName representing the new filter value
933 Sets the PDF sub-filter. @param subfilter COSName representing the sub-filter to set
934 Initializes PDSignatureField with given acroForm. @param acroForm parent AcroForm object
935 Retrieves a dictionary object by its key. @param key unique dictionary key
936 Creates a PDDestination object from the given COSBase. @param base COSBase object containing destination data
937 Returns a string representation of the COSDictionary object. @return A human-readable string describing the dictionary, or an error message if I/O occurs.
938 Retrieves a COSArray object from the dictionary using the specified key. @param key unique identifier for the desired COSArray @return COSArray object or null if not found in dictionary
939 Retrieves a COSStream object from the dictionary by its name. @param key unique COSName identifier @return COSStream object or null if not found
940 Retrieves COSDictionary instance by key. @param key unique COS name identifier @return COSDictionary object or null if not found
941 Retrieves a COSName object by its key. @param key COSName to search for @return COSName object or null if not found
942 Retrieves a dictionary object by either the first or second key. @param firstKey primary key to search @param secondKey secondary key to search if first is not found @return COSBase object or null if neither key exists
943 Initializes Matrix object from COSArray. @param array COSArray containing matrix elements
944 Retrieves zoom value from document object. @return Zoom value as a float, or -1.0f if not found
945 Sets default value in COS object. @param value COSBase object representing the new default value
946 Sets the value of a COSBase object. @param object COSBase object to set as value
947 Constructs a PDChoice object from an AcroForm and initializes its type. @param acroForm the parent PDAcroForm instance
948 Initializes a button widget with default properties.
949 Initializes an AcroForm object from a PDDocument. @param doc the source document
950 Sets text color for PDF output. @param textColor PDColor object representing desired color
951 Sets document contents from byte array. @param bytes binary data to be stored as document contents
952 Sets the byte range of a PDF document. @param range array of 4 integers representing the byte range
953 Retrieves a long value from the dictionary using the given key. @param key unique identifier for the desired key @param defaultValue default value to return if key is not found @return long value associated with the key or the provided default value
954 Writes a COS object to output, including xref entry and object data. @param key COSObjectKey containing object ID @param obj COSBase object being written (null or empty objects skipped)
955 Sets the rectangle differences (margins) for a PDF page. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
956 Initializes transparency group attributes with default values.
957 Sets an integer value in the COS object. @param key unique identifier for the value @param value integer value to be stored
958 Sets a string value for the given key. @param key unique identifier @param value string value to be set
959 Sets a PDF name property with the given value. @param key unique identifier for the property @param value the new name value or null to clear it
960 Sets an item in the PDF document using a string key. @param key string identifier of the item @param value COSBase object to be stored
961 Sets a boolean property with the given name to the specified value. @param key unique identifier of the property @param value true or false value to be assigned
962 Sets a boolean value in the PDF document. @param key unique key for the boolean value @param value the boolean value to be set (true or false)
963 Sets item with specified key and optional COS object value. @param key name of the item @param value COS objectable value to associate with key (null for no value)
964 Sets the Z-coordinate value. @param z the new Z-coordinate value
965 Sets the Y-axis value of an object. @param y the new Y-coordinate value
966 Sets the X value to the specified float value. @param x the new X value
967 Sets the alternate color space for this object. @param colorSpace alternate PDColorSpace to use
968 Sets the colorant name in the internal array. @param name desired colorant name
969 Sets the base color space for the PDF document. @param base ColorSpace object to use as the new base
970 Sets value at index 2 to specified floating-point number. @param b float value to be assigned
971 Sets gravitational acceleration (g) value. @param g gravitational acceleration in m/s^2
972 Sets the radial value (r) to the specified float value. @param r radial value
973 Sets the alternate color space for the PDF document. @param cs alternate color space object to set
974 Sets device attributes and updates internal data structure. @param attributes PDDeviceNAttributes object to store
975 Sets the font size to the specified value. @param size the desired font size
976 Sets the default appearance string. @param da the default appearance value to be set
977 Sets a 64-bit integer value in the underlying COS structure. @param key unique identifier for the value @param value 64-bit integer to be stored
978 Sets an option value in the COSString instance. @param opt the option string to be set
979 Sets a floating-point value in the PDF document. @param key unique name of the field @param value the floating-point value to be set
980 Sets encryption dictionary in PDF document. @param encDictionary encryption data to be stored
981 Clears internal data structures and possibly updates parent dictionary. @param none
982 Initializes a new PDPageTree with an empty page tree structure.
983 Sets the crop box for this page. @param cropBox PDRectangle object defining the crop box boundaries
984 Initializes a new PDDocumentCatalog instance for the given PDDocument. @param doc the PDDocument object to associate with this catalog
985 Sets document information and updates trailer item. @param info PDDocumentInformation object containing updated metadata
986 Parses the next token from the input stream. @return The parsed token or null if end-of-file is reached
987 Updates parent entry for all dictionary entries in the given array. @param kArray COSArray containing dictionary entries to update @param newParent updated parent dictionary @param newStructureType optional structure type name (null if not applicable)
988 Sets the document ID from the provided COSArray. @param id array containing the document ID
989 Creates a COSStream instance from the given COSDictionary. @param dictionary COSDictionary to convert @param startPosition starting position in the underlying stream @param streamLength length of the underlying stream @return COSStream instance or throws IOException on failure
990 Decrypts all elements in the provided COSArray using the given object and generation numbers.
991 Sets the colour at a specified index in the array. @param index array index to update @param colour PDGamma object or null for a default value
992 Sets the upper-right Y-coordinate of the rectangle. @param value new Y-coordinate value
993 Initializes a PDFontSetting object with default values.
994 Initializes an empty FDFOptionElement object with default values.
995 Initializes a PDRange object with default values. Sets the range array to [0, 1] and starting index to 0.
996 Creates a COS stream with xref and index entries. @return the created COSStream object
997 Replaces existing array with new float values. @param value new float array to be added
998 Grows the collection to a specified size by adding and updating objects. @param size target collection size @param object COSBase object to be added and updated
999 Adds a COSObjectable instance to this collection. @param object COSObjectable instance to be added
1000 Returns an iterator over COSBase objects. @return Iterator instance or null if collection is empty
1001 Retrieves a date as a Calendar object from the specified key. @param key unique identifier for the date value in the dictionary @return Calendar object representing the date or null if not found
1002 Converts object components into a COSArray, optionally adding the pattern name. @return COSArray representation of object components and optional pattern name.
1003 Initializes a PDF device with an empty name and three null attributes.
1004 Initializes gamma matrix with zeros.
1005 Sets the X-coordinate of the upper-right corner of the rectangle. @param value X-coordinate to be assigned
1006 Sets the lower-left y-coordinate of the rectangle. @param value the new y-value
1007 Sets lower left X-coordinate of rectangle to specified float value. @param value new X-coordinate value
1008 Sets the maximum value of the range array. @param max the new maximum value
1009 Sets the minimum value of the range. @param min the new minimum value
1010 Sets the string at a specified index in the document. @param index zero-based index of the string to set @param string the string value (null for unset)
1011 Sets the name at the specified index. @param index unique index identifier @param name string value to be assigned
1012 Sets an integer value at a specified index in this object. @param index index to set @param value integer value to store
1013 Sets an object at the specified index, converting it to a COSBase if necessary. @param index the position in the collection @param object the object to be set (may be null)
1014 Writes object reference to standard output. @param obj COSBase object reference
1015 Creates a PDImageXObject from the given byte array, using the provided PDDocument context. @param document PDDocument object @param byteArray image data as byte array @return PDImageXObject or throws IOException if failed
1016 Sets the AffineTransform matrix. @param transform AffineTransform object containing transformation data
1017 Initializes a PDTristimulus object from an array of 1-3 float values. @param array array of color component values (e.g. XYZ coordinates)
1018 Initializes PDTristimulus with default XYZ color values (0, 0, 0).
1019 Initializes PDSeparation with a COSArray containing PDF name and null values.
1020 Initializes a new PDPattern instance with the given resources. @param resources PDResources object containing pattern data
1021 Returns a default 2D coordinate system array with bounds (-100, 100) for x and y axes.
1022 Initializes a PDF Indexed object with standard properties.
1023 Returns the alternate color space, creating one if it doesn't exist. @throws IOException if an error occurs while processing the PDF stream
1024 Converts single array values to a COSArray. @return COSArray containing float values
1025 Wraps the existing page's content in a save/restore PDF pair (q/Q). @param page PDPage object to modify
1026 Creates a COSDictionary object containing user labels. @return COSDictionary with key-value pairs for each label
1027 Sets widget field flags. @param f Integer flag value or null to clear the flag
1028 Sets the clear field flags for the current field. @param ff Clear field flags integer value
1029 Sets the SET_FIELD_FLAGS field with the specified flag value. @param ff the flag value to set
1030 Sets field flags to the specified integer value. @param ff Integer flag value or null to clear
1031 Sets the value of the field to the specified COSBase object. @param value COSBase object containing the new field value
1032 Sets the value of a field with unknown type. @param value object to set as field value @throws IOException if value has unknown or unsupported type
1033 Sets differences stream in FDF item. @param diff COS stream containing document differences
1034 Sets the ID attribute using a COSArray. @param id unique identifier as a COSArray
1035 Sets quadpoints coordinates for item annotation. @param coords array of 4 float values representing x,y coordinates
1036 Sets the interior color using a Color object. @param color interior color to set
1037 Sets the interior color of an annotation. @param color Color object to set as interior color
1038 Sets vertices array for annotation item. @param vertices float array of vertex coordinates
1039 Sets the interior color of an annotation. @param color Color object to set
1040 Sets the vertex data. @param vertices array of float values representing vertices
1041 Sets interior color of the item. @param color Color object to set
1042 Sets the 2D line coordinates. @param line array of float values representing x and y coordinates
1043 Sets widget field flags using the specified integer value. @param ff the flag value to set
1044 Sets clear widget field flags. @param ff Integer flag value or null to reset
1045 Sets rich text data for the item. @param rv COSStream containing rich text data
1046 Sets the matrix item in the dictionary. @param matrix 3x3 matrix to store
1047 Sets the Gamma value in the PDF dictionary. @param gamma PDGamma object containing the new value
1048 Sets gamma value in PDF document. @param value new gamma value
1049 Sets the character set for the PDF document. @param charSet string representing the character set (e.g. "UTF-8")
1050 Sets the font bounding box to the specified rectangle. @param rect PDRectangle object containing font metrics
1051 Sets font stretch property in PDF dictionary. @param fontStretch string value for font stretch (e.g. 'ultracondensed') or null to clear
1052 Sets the font family for a PDF document. @param fontFamily the desired font family (null to clear)
1053 Sets the PDF font name. @param fontName string representation of the font name
1054 Retrieves options from dictionary object. @return list of option strings
1055 Initializes a font descriptor dictionary. @param none
1056 Initializes a PDFont object with default settings.
1057 Sets the "after" item in the dictionary to the specified string value. @param after string value to be stored as the "after" item
1058 Sets the "before" item in the dictionary with the specified string value. @param before the string to be stored as the "before" item
1059 Retrieves display values from options dictionary. @return list of display values as strings
1060 Sets callout values in annotation item. @param callout array of float values representing callouts
1061 Sets rich text value. @param rv COSString containing rich text data
1062 Sets the filter to be applied in the PDF document. @param filter name of the filter to apply
1063 Sets the owner key in the document. @param o byte array containing the owner key data
1064 Removes a PDAttributeObject from the COS dictionary. @param attributeObject object to be removed
1065 Sets the cryptographic filter method. @param cfm COSName representing the filter method
1066 Sets the line dash pattern using the provided array of lengths. @param dashArray array of dash and space lengths
1067 Sets the interior color of a PDF annotation. @param color Color object to set
1068 Sets range values and updates associated COS object. @param rangeValues array of range values
1069 Sets user key from byte array. @param u user key data as byte array
1070 Sets the K value of the COS object. @param k new K value to be set
1071 Removes kid from the object's kids dictionary. @param object COSBase object to remove @return true if removed successfully, false otherwise
1072 Sets domain values and updates COS object. @param domainValues array of domain values
1073 Inserts a new object before the specified reference object in the dictionary. @param newKid COSBase object to insert @param refKid Object to insert before (can be null if only one kid exists)
1074 Sets and stores encode values. @param encodeValues COSArray containing encode information
1075 Sets decode values and updates COS object. @param decodeValues array of decode values
1076 Adds or updates a child profile (kid) to the existing collection. @param object COSBase representation of the kid profile
1077 Initializes a new PDComplexFileSpecification object.
1078 Sets the owner encryption key. @param oe byte array containing the encryption key
1079 Removes a class name from the PDF object model. @param className class name to remove
1080 Sets user encryption key. @param ue byte array representing user encryption key
1081 Sets document recipients from a byte array. @param recipients array of recipient data
1082 Sets rich contents for the annotation item. @param rc rich content string to be set
1083 Sets the name of the stream filter. @param streamFilterName unique identifier of the stream filter
1084 Sets the fill color of an annotation item. @param c Color object to set
1085 Sets the filter name for string data. @param stringFilterName COSName object specifying the filter name
1086 Sets PDF permissions using a byte array. @param perms byte array containing permission settings
1087 Initializes a PDComplexFileSpecification object from a COSDictionary. @param dict COS dictionary containing file specification data (or null to create an empty specification)
1088 Removes V4.5 filters from the dictionary.
1089 Initializes an empty FDF annotation with default properties.
1090 Sets growth target to specified size. @param size desired size of the object
1091 Initializes a PDPattern object with the given resources and color space. @param resources PDResources object @param colorSpace PDColorSpace object representing the underlying color space
1092 Sets an array of custom number formats. @param changeXs Array of PDNumberFormatDictionary objects
1093 Sets the areas in a PDF using the provided dictionary array. @param areas array of PDNumberFormatDictionary objects
1094 Sets the list of distance dictionaries. @param distances array of PDNumberFormatDictionary objects
1095 Creates a clone of the given COSBase object. @param src original COSBase object to clone @param dstParent parent dictionary for cloning (null if not applicable) @param currentPageDict current page dictionary (for resolving references)
1096 Sets the angles dictionary. @param angles Array of PDNumberFormatDictionary objects
1097 Returns the text color as a PDColor object.
1098 Sets the line sloaps using a dictionary array. @param lineSloaps array of PDNumberFormatDictionary objects
1099 Sets the Y-axis number format dictionaries. @param changeYs array of PDNumberFormatDictionary objects
1100 Sets a range for a component with specified ID. @param range PDRange object containing min and max values @param n component ID
1101 Sets interior color of document. @param ic PDColor object representing desired color
1102 Retrieves color information from COSArray. @param name unique array identifier @return Color object or null for invalid arrays
1103 Sets the first element of the array to the specified PDPage object. @param page PDPage object to be stored
1104 Sets the tint transform function. @param tint PDFunction to apply as tint transform
1105 Sets tint transform function. @param tint PDFunction object representing tint transformation
1106 Sets the font of the document to the specified font. @param font PDFont object representing the new font
1107 Creates an image XObject from a byte array. @param document PDDocument instance (not used in this method) @return PDImageXObject instance or null if creation fails
1108 Retrieves the page box range from the PDF dictionary. @return PDRange object representing the page box range or default values if not found
1109 Retrieves the annotation range from the PDF document. @return PDRange object representing the annotation range
1110 Sets text color using a specified PDF color. @param textColor PDF color to use
1111 Sets the background color of the PDF document. @param c PDColor object to set as background
1112 Sets border color of the PDF document. @param c new border color to apply
1113 Sets the interior color of the object. @param ic the new interior color
1114 Sets interior color of an object. @param ic interior color to be set
1115 Sets interior color of PDF object. @param ic interior color to be applied
1116 Sets color to PDF document. @param c PDColor object representing new color
1117 Sets the guide line color using a PDColor object. @param color the color to set (null for default)
1118 Sets line dash pattern using the provided COS object. @param dashPattern COS object representing the dash pattern
1119 Builds width map for font. @param cidFont COS dictionary to store widths
1120 Retrieves the PDF range for a specified component index. @param n component index (0-based) @return PDRange object or default range if not found
1121 Initializes PDICCBased object from PDDocument. @param doc input document
1122 Retrieves and maps colorants from the PDF resources. @param resources PDResources object @return Map of colorants with their corresponding PDSeparation objects
1123 Retrieves date from PDF using given key. @param key unique identifier of date in PDF @return Calendar object representing the date or null if not found
1124 Initializes parsing of PDF document.
1125 Sets the value of a COS item with name V. @param value new value to set
1126 Returns the guideline color based on PDF document's 'C' entry. @return The guideline color as a PDColor object
1127 Retrieves the line end style from annotation. @return string representation of line end style or "LE_NONE" if not set
1128 Sets the horizontal caption offset in PDF document. @param offset offset value (x-coordinate)
1129 Sets vertical caption offset for the presentation. @param offset vertical offset value
1130 Sets the cryptographic filter dictionary. @param cryptFilterName name of the cryptographic filter @param cryptFilterDictionary COS object representing the filter dictionary
1131 Adds a byte[] OID to the PDF document. @param oid byte array representing the OID
1132 Adds issuer identifier to the X.509 certificate. @param issuer byte array containing issuer's name
1133 Sets the operating system (OS) value in the document. @param os OS name to set or null to remove
1134 Validates and adds key usage extension to PDF document. @param keyUsageExtension string value containing 0, 1, or X characters
1135 Sets the vertical caption offset. @param offset vertical offset value (in pixels)
1136 Sets horizontal offset for annotation caption. @param offset new offset value in PDF units
1137 Adds or updates the subject byte array in the dictionary. @param subject byte array representing the subject
1138 Retrieves the document information from the PDF trailer. @return PDDocumentInformation object containing document metadata or null if not initialized
1139 Retrieves the black point tristimulus values from the dictionary. @return PDTristimulus object containing RGB values or default black point if not found
1140 Retrieves a list of PDF threads from the root object. @return List of PDThread objects or an empty list if not found
1141 Returns the whitepoint tristimulus value. @return PDTristimulus object representing the whitepoint
1142 Returns user's calendar date or default calendar value. @param key unique COSName identifier @param defaultValue Calendar object to use when key is not found
1143 Retrieves the creation date of the current object. @return Calendar object representing the creation date
1144 Retrieves modification date from user info. @return Calendar object representing the modification date or null if not set
1145 Retrieves the creation date of the annotated object. @return The creation date as a Calendar object or null if unavailable
1146 Retrieves the creation date of the COS object. @return Calendar object representing the creation date or null if not set
1147 Retrieves the sign date from the dictionary.
1148 Writes an Operator token to output stream. @param op Operator object to serialize
1149 Adds a new user property to the document. @param userProperty PDUserProperty object to add
1150 Retrieves child COS dictionaries from the given node. @param node parent COS dictionary to fetch children from @return list of child COS dictionaries or empty list if none found
1151 Retrieves the Gamma array from the PDF dictionary or initializes it with default values if not found. @return PDGamma object representing the Gamma array
1152 Sets the upper limit for a PDF node. @param upper new upper limit value or null to reset
1153 Returns additional actions for the current PDF page.
1154 Initializes a PDDocumentNameDictionary instance from the given PDDocumentCatalog. @param cat the parent document catalog
1155 Adds an output intent to the PDF document. @param outputIntent PDOutputIntent object containing output settings
1156 Retrieves and initializes the additional actions dictionary for the document catalog. @return PDDocumentCatalogAdditionalActions object
1157 Sets the lower limit of a range. @param lower integer value for lower limit or null to clear
1158 Sets the annotation rectangle to the specified PDRectangle object. @param rectangle the new rectangle value
1159 Sets the end point ending style for a PDF annotation. @param style line ending style (e.g. LE_NONE, LE_SQUARE, etc.)
1160 Sets the mapping name in the dictionary. @param mappingName new mapping name value
1161 Sets the alternate field name in the dictionary. @param alternateFieldName new alternate field identifier string
1162 Sets the partial name for a field. @param name string containing the partial name (no periods allowed)
1163 Sets the default value in the COS object. @param value new default value to be set
1164 Sets default appearance value. @param daValue new default appearance string
1165 Sets the document title to the specified value. @param title new title string
1166 Sets user's contact information. @param contactInfo new contact details to be stored
1167 Sets the reason for an entity in the dictionary. @param reason user-provided reason string
1168 Sets the user's location. @param location new location value
1169 Sets the user's name in the underlying data structure. @param name new name to be assigned to the user
1170 Sets the URL value in the dictionary. @param url the new URL string
1171 Sets the URL value in the dictionary. @param url new URL value to be stored
1172 Sets the date in the user profile. @param date new date value as string
1173 Sets a string value on the underlying COS object. @param value new string value to set
1174 Sets alternate caption for COS object. @param caption string value of alternate caption
1175 Sets normal caption using the given string. @param caption new caption text
1176 Sets the state model string value in the COS object. @param stateModel new state model string
1177 Sets the user's state to the specified value. @param state new state value
1178 Sets the subject field of the COS object. @param subj new subject value
1179 Sets title popup string. @param t new title text to display
1180 Sets the default style string in the COS object. @param defaultStyleString the new style string value
1181 Sets default appearance value. @param daValue new default appearance string
1182 Sets annotation name. @param nm new annotation name
1183 Sets modified date string. @param m new modified date string
1184 Sets the contents of the dictionary with a given string value. @param value the new contents to be stored
1185 Sets an execution parameter. @param param parameter value to be set
1186 Sets the operation to be performed. @param op the operation string (e.g. "add", "subtract")
1187 Sets the directory path. @param dir new directory to be assigned
1188 Sets rollover caption. @param caption new caption text
1189 Sets the string value of COS object V. @throws IOException if an I/O error occurs during operation
1190 Sets default string value in COS object. @param value the default string to be set
1191 Sets the default appearance value for this annotation. @param daValue new default appearance value
1192 Sets user flags as an integer value. @param flags user flags
1193 Sets clear widget field flags. @param ff flag value to set
1194 Sets flags for widget fields. @param ff integer flag value
1195 Sets widget field flags. @param f integer representing field flags
1196 Sets clear field flags using FF integer value. @param ff Clear Field Flags integer value
1197 Sets flags for the SET field. @param ff integer value representing flag settings
1198 Sets the field flags to the specified value. @param ff integer representing field flags
1199 Sets the rotation of an annotation by ID. @param rotation new rotation value
1200 Sets text justification based on the provided string value. @param justification "centered", "right" or other values to ignore
1201 Sets the page number in the PDF document. @param page the desired page number
1202 Sets permission flags for the current user. @param permissions integer value representing permission flags
1203 Sets document revision number. @param revision new revision value to be stored
1204 Sets the document length. @param length new length value
1205 Sets the version of the dictionary. @param version new version number to store
1206 Sets the length of the COS filter dictionary. @param length new length value
1207 Sets the next key of the parent tree. @param parentTreeNextkey new value for the PARENT_TREE_NEXT_KEY attribute
1208 Sets the revision number for the COS object. @param revisionNumber non-negative revision identifier
1209 Sets the MCID attribute in the COS object. @param mcid unique MCID value
1210 Sets bits per sample value. @param bps number of bits per sample
1211 Sets the starting page number. @param start positive integer representing the first page
1212 Initializes a page tree from the given COSDictionary and PDDocument. @param root COSDictionary representing the page tree @param document associated PDDocument instance
1213 Sets the rotation angle of the PDF page. @param rotation angle in degrees to rotate the page
1214 Sets the parent structure ID. @param structParents unique identifier of the parent structure
1215 Sets an integer value in a nested dictionary. @param embeddedDictionary parent dictionary @param key unique key for the value @param value integer to store
1216 Sets an integer property by name. @param key unique property identifier @param value integer value to set
1217 Sets the scale ratio as a string value in the COS object. @param scaleRatio the new scale ratio value
1218 Sets the filename attribute. @param file the new filename value
1219 Sets widths for a range of characters in the provided font. @param font font to modify @param glyphList list of glyphs
1220 Sets the annotation name in the dictionary. @param name new annotation name to store
1221 Sets the URI string to be used by the COS object. @param uri The new URI value
1222 Sets file description to the provided string value. @param description new file description text
1223 Sets the file path to be used in subsequent operations. @param file the new file path to use
1224 Sets the Unicode file path. @param file new file path
1225 Sets or removes the prefix from the underlying data store. @param prefix new prefix value or null to remove it
1226 Sets the producer string in the metadata. @param producer the new producer value
1227 Sets the creator of an object. @param creator name of the creator
1228 Sets the keywords associated with this profile. @param keywords string containing keywords
1229 Sets the subject of a PDF document. @param subject the new subject value
1230 Sets the document's author metadata. @param author new author value
1231 Sets the title of the document. @param title new title value
1232 Sets the application language. @param language the new language code (e.g. "en", "fr")
1233 Sets a string value in the embedded dictionary. @param embedded COSName of the embedded dictionary @param key COSName of the key to set @param value String value to store
1234 Sets string attribute by key. @param key unique PDF name @param value attribute value
1235 Sets the element identifier as a string property. @param id unique identifier value
1236 Sets the date value by converting it to a string and storing it. @param key unique key identifier @param date Calendar object representing the date
1237 Sets the transition motion to the specified object. @param motion PDTransitionMotion object with desired settings
1238 Sets transition dimension. @param dimension PDTransitionDimension object containing dimension data
1239 Initializes a new PDTransition object with the specified style. @param style transition style (e.g. "none", "forwards", etc.)
1240 Sets user's name. @param name new name to be assigned
1241 Initializes PDNumberFormatDictionary with default values.
1242 Sets the subtype attribute of the underlying COS object. @param subtype new subtype value
1243 Sets document title. @param title new title to be set
1244 Sets the document language. @param language desired language code
1245 Sets alternate description of COS object. @param alternateDescription new description value
1246 Sets the value of the P property. @param p new string value
1247 Sets the value of O attribute. @param o new value to assign
1248 Sets the value of parameter "D" in the COSName enum. @param d new value for COSName.D
1249 Sets the value of F. @param f new value to assign to F
1250 Sets JavaScript action string. @param sAction action string to be set
1251 Initializes PDOptionalContentProperties with default values. Sets up internal dictionaries and sets 'D' to a dictionary containing the name 'Top'.
1252 Sets the user's name. @param name new name to be assigned
1253 Sets the user's display name. @param name new display name as string
1254 Sets partial field name. @param partial partial field value as string
1255 Sets the target value in the FDF document. @param target new target string value
1256 Sets the user's status. @param status new user status value
1257 Sets the state model string in the annotation. @param stateModel the new state model value
1258 Sets the state property of the annotation. @param state new state value to be set
1259 Sets the caption style. @param captionStyle new style value
1260 Sets the default style for annotations. @param style new default style value
1261 Sets the default appearance of an annotation. @param appearance string value representing the appearance
1262 Sets the symbol to use for annotations. @param symbol "paragraph" to set to 'P', or any other value (default: "None")
1263 Sets the subject of this annotation. @param subject new subject value
1264 Sets document title to specified string. @param title new title value
1265 Sets document contents to specified string value. @param contents new content string
1266 Sets the user's name. @param name new name value
1267 Sets the date value in COS annotation. @param date date string to be set
1268 Sets the actual text content. @param actualText new text value
1269 Sets the expanded form of the COS object. @param expandedForm string representation to be assigned
1270 Sets the filename associated with this COS entry. @param filename new filename value
1271 Initializes a new instance of the PDMeasureDictionary class.
1272 Creates an empty FDFAnnotationTextMarkup object.
1273 Initializes an FDF annotation text object with subtype. @param SUBTYPE subtype value
1274 Initializes an FDFAnnotationStamp with subtype. @param SUBTYPE annotation subtype name
1275 Initializes an FDFAnnotationSquare object with subtype. @param SUBTYPE annotation subtype
1276 Initializes an FDF annotation sound with subtype. @param SUBTYPE subtype of the annotation sound
1277 Initializes an annotation polyline with subtype. @param SUBTYPE annotation subtype name
1278 Initializes an FDFAnnotationPolygon object with default subtype.
1279 Initializes FDF annotation link with subtype. @param SUBTYPE annotation subtype name
1280 Initializes a new FDF annotation line with specified subtype. @param SUBTYPE name of the annotation subtype
1281 Initializes an FDF annotation ink with subtype.
1282 Initializes Free Text annotation with subtype. @param SUBTYPE annotation subtype
1283 Initializes an FDF annotation circle with subtype.
1284 Initializes an FDF annotation caret with specified subtype.
1285 Removes an objectable kid from the current context. @param objectable COSObjectable to remove @return true if removed, false otherwise
1286 Inserts a COSObjectable before the specified reference object. @param newKid COSObjectable to insert @param refKid Object to insert before
1287 Appends child object to internal collection. @param objectable COSObjectable instance to append
1288 Creates a PDF file specification from the given COSBase object. @param base COSBase object containing file specification data @return PDFileSpecification object or null if invalid input
1289 Retrieves the document catalog from the PDF trailer. @return PDDocumentCatalog object or newly created instance if not found
1290 Initializes a new PDF document instance with in-memory stream caching.
1291 Extracts width value from PDF stream. @throws IOException if parsing fails or unexpected EOF
1292 Extracts the bounding box for a glyph from PDF stream data. @return PDRectangle object representing the bounding box or null if not found
1293 Parses and returns a list of objects from a stream. @return List of parsed objects or empty list if none found
1294 Clones and merges the contents of a COS object into another. @param base source COS object @param target destination COS object
1295 Initializes an FDFAnnotationFileAttachment object with subtype. @param SUBTYPE annotation file attachment subtype
1296 Builds vertical metrics for the given CID font. @param cidFont COSDictionary representing the CID font
1297 Initializes and returns a simple font instance.
1298 Draws a basic ellipse within the specified bounds. @param left left edge of bounding box @param bottom bottom edge of bounding box @param right right edge of bounding box @param top top edge of bounding box
1299 Adds corner curl to the path using two arc segments. @param anglePrev previous angle @param angleCur current angle @param radius segment radius @param cx curve x-coordinate @param cy curve y-coordinate @param alpha curve angle @param alphaPrev previous curve angle @param addMoveTo whether to add 'move to' command
1300 Creates a PDImageXObject from a given BufferedImage and PDDocument. @param document the PDDocument to associate with the image object @param image the BufferedImage to convert into an image object
1301 Returns the PDF page's border settings as a COSArray. If not present, creates default values (0, 0, 1).
1302 Constructs a new PDListBox instance associated with the given PDAcroForm. @param acroForm parent form containing this list box
1303 Initializes a new instance of PDComboBox with the given PDAcroForm. @param acroForm The parent AcroForm to associate with this combo box.
1304 Initializes a PDCheckBox instance with an associated PDAcroForm. @param acroForm the AcroForm containing this check box
1305 Sets all four sides of a rectangle to have the same difference value.
1306 Sets all four sides of the rectangle to have the same difference. @param difference the uniform difference value
1307 Sets equal differences for all four sides of a rectangle. @param difference single-sided difference value
1308 Initializes PDAnnotationWidget with COSDictionary. @param field COSDictionary containing annotation data
1309 Constructs a PDAnnotationUnknown object from a COS dictionary.
1310 Initializes popup with annotation data from COS dictionary. @param field COSDictionary containing annotation details
1311 Constructs a PDAnnotationMarkup object from a COS dictionary. @param dict COS dictionary containing annotation markup data
1312 Constructs a PDAnnotationLink object from a COS dictionary.
1313 Initializes widget with subtype annotation.
1314 Initializes popup annotation subtype. @param SUB_TYPE annotation subtype value
1315 Initializes a new instance of PDAnnotationMarkup.
1316 Initializes annotation link with subtype. @param SUB_TYPE subtype value
1317 Sets non-stroking alpha constant to the specified value. @param alpha non-stroking transparency value (0.0 - 1.0)
1318 Sets stroking alpha constant to specified value. @param alpha transparency level (0.0 - 1.0)
1319 Sets smoothness tolerance. @param smoothness new smoothness value
1320 Sets flatness tolerance value. @param flatness tolerance value as a float
1321 Sets the miter limit value. @param miterLimit new miter limit value
1322 Sets line width to specified value. @param width new line width (in default units)
1323 Parses a COS stream from the given dictionary. @param dic COS dictionary containing stream metadata @return parsed COS stream or null on error
1324 Sets the CYX value in the COS object. @param cyx new CYX value (float)
1325 Sets the width of a PDF page. @param w width value; integer for pixel-perfect values, float otherwise
1326 Sets the top index value in the COS object. @param topIndex new top index value or null to clear
1327 Sets field flags using specified integer value. @param flags integer representing field flags
1328 Sets the value of question count 'q' in the dictionary. @param q new question count value
1329 Sets the open count attribute. @param openCount new value of open count
1330 Sets whether timestamp is required in database operations. @param flag true to require timestamp, false otherwise
1331 Sets the value of P to a specified integer within valid range. @param p value in range [0, 3] or throws IllegalArgumentException otherwise
1332 Sets the rotation value in the COS object. @param rotation new rotation value
1333 Sets the Q value in the COS object. @param q new value of Q
1334 Sets the parent structure ID. @param structParent unique ID of parent structure
1335 Sets annotation flags in the COS object. @param flags integer value representing annotation flags
1336 Sets annotation index; removes A item from dictionary if index is negative.
1337 Sets or removes page number from dictionary. @param pageNumber non-negative integer value to set (-1 to remove)
1338 Sets the FLAGS attribute of the action. @param flags integer value representing flags
1339 Sets the maximum length of data. @param maxLen new maximum length value
1340 Sets user action flags. @param flags integer value representing user action flags
1341 Sets the line join style using a specific integer value. @param style integer value representing the line join style
1342 Sets the line cap style based on the provided integer value. @param style integer representing the desired line cap style (e.g. butt, round, square)
1343 Sets the number of bits per coordinate. @param bitsPerCoordinate new bit count
1344 Sets the number of bits per color component. @param bitsPerComponent the new bit depth (e.g., 8, 16)
1345 Sets the number of vertices per row. @param verticesPerRow the desired vertex count
1346 Sets the number of flags per bit. @param bitsPerFlag number of flags represented by each bit
1347 Sets the shading type to the specified value. @param shadingType new shading type (integer value)
1348 Sets the tiling type of the COS object. @param tilingType integer value representing the tiling type
1349 Sets the paint type. @param paintType integer value of paint type
1350 Sets the type of pattern in the dictionary. @param patternType unique identifier for the pattern type
1351 Sets the paint type in the pattern dictionary. @param paintType integer value representing the paint type
1352 Sets the overprint mode for the PDF document. @param overprintMode integer value for overprint mode or null to remove current setting
1353 Sets the Q property value. @param q new Q property value
1354 Sets a long value in the PDF dictionary. @param key unique key for the value @param value long value to be stored
1355 Updates and writes the PDF trailer. @param doc COSDocument object
1356 Sets constant opacity value. @param ca float representing the constant opacity (0.0 to 1.0)
1357 Sets the length of leader line offset. @param leaderLineOffsetLength new length value
1358 Sets the extension length of the leader line. @param leaderLineExtensionLength new extension length value
1359 Sets the length of the leader line. @param leaderLineLength length in units
1360 Sets audio volume within the valid range (-1.0 to 1.0). @param volume float value representing volume level
1361 Sets the Y-step value. @param yStep new Y-step value
1362 Sets the X-step value in the COS object. @param xStep new X-step value
1363 Sets the missing width value in the dictionary. @param missingWidth width to be assigned
1364 Sets the maximum width of an element. @param maxWidth The new maximum width value.
1365 Sets the average width of a shape in a graphics context. @param averageWidth new average width value
1366 Sets stem height to the specified value. @param stemH new stem height value
1367 Sets the stem voltage value. @param stemV stem voltage value in float format
1368 Sets the X-height of the font to the specified value. @param xHeight new X-height value
1369 Sets font cap height to specified value. @param capHeight new cap height in points
1370 Sets the leading space value. @param leading new leading space value
1371 Sets the descent value in the dictionary. @param descent new descent value
1372 Sets the ascent value in the dictionary. @param ascent new ascent value
1373 Sets italic font angle in document dictionary. @param angle angle value to be stored (in radians)
1374 Sets font weight to the specified value. @param fontWeight new font weight as a floating-point number
1375 Sets the leader offset value in the annotation. @param leaderOffset new leader offset value
1376 Sets leader extend value. @param leaderExtend new leader extension value
1377 Sets the length of the leader annotation. @param leaderLength length to be assigned (in units)
1378 Sets the opacity of an annotation. @param opacity value between 0.0 and 1.0 representing transparency
1379 Sets the guideline width to the specified value. @param width new guideline width in pixels
1380 Sets a positive user unit value. @param userUnit non-zero float value for user unit
1381 Sets a floating-point value in PDF document. @param key unique key or name of the field @param value the value to be stored
1382 Sets the minimum allowed revision. @param revision long value representing the minimum revision
1383 Sets the database revision. @param revision long unique identifier of database state
1384 Sets the minimum required capability V. @param minimumRequiredCapability the new value for V
1385 Sets the start point and ending style of an annotation line. @param style style to set (e.g. "Solid", "Dashed") or null for default ("None")
1386 Constructs a PDDocumentOutline object from a COS dictionary. @param dic the COS dictionary containing outline data
1387 Sets the URL type in the dictionary.
1388 Sets Windows launch parameters for an item. @param win PDWindowsLaunchParams object to be set
1389 Sets the file specification. @param fs file specification object
1390 Sets the file specification for an item. @param fs PDFileSpecification object containing file details
1391 Sets the destination for a 'GoTo' action. @param d PDDestination object to set
1392 Sets the target directory for the COS object. @param targetDirectory PDTargetDirectory instance to store
1393 Sets the file specification of the COS object. @param fs PDFileSpecification instance to be assigned
1394 Sets the destination for a GoToE action. @param d PDPageDestination object or subclass
1395 Sets font settings for the PDF document. @param fs Font setting object to apply
1396 Updates the current function with the provided PDFunction object. @param newFunction new function to be set
1397 Sets the resources item in the COS object. @param resources PDResources object to be set
1398 Sets user-defined shading resources. @param shadingResources shading resource object
1399 Sets the extended graphics state for the PDF page. @param extendedGraphicsState extended graphics state settings
1400 Sets file specification for an item in the PDF document. @param fs file specification details
1401 Sets the black point of the color space. @param blackpoint PDTristimulus object representing the black point
1402 Sets the CID Set item in the DicomItem dictionary. @param stream PDStream object containing CID Set data
1403 Sets the font file 3 for the PDF document. @param stream the font file data as a PDStream object
1404 Sets font file 2 using the provided TTF stream. @param ttfStream TTF stream to be used as font file 2
1405 Sets font file for PDF document. @param type1Stream font file stream
1406 Sets the FDF named page reference for the document template. @param tRef FDFNamedPageReference object to assign
1407 Sets page information using FDFPageInfo object. @param info FDFPageInfo object containing page metadata
1408 Sets file specification for the current item. @param fs PDFileSpecification object containing file details
1409 Sets fractional space to allocate in PDRange. @param space range of spaces to allocate
1410 Sets additional actions for an item. @param aa PDAdditionalActions object to assign
1411 Sets the action associated with an item. @param a PDAction object to be assigned
1412 Sets the icon fit type for an FDF item. @param fit Icon fit type to be applied
1413 Sets the appearance stream reference in the PDF document. @param ref FDFNamedPageReference object to be assigned
1414 Sets the white point for this color profile. @param whitepoint PDTristimulus object representing the white point
1415 Sets file specification for an item. @param fs PDFileSpecification object containing file details
1416 Sets a file specification for the item. @param fs PDFileSpecification object to assign
1417 Sets item F of the actions collection to the specified action. @param action PDAction object to be stored
1418 Sets rectangle differences using PDF specification. @param rd PDRectangle object containing differences
1419 Sets the border effect based on the provided dictionary. @param be PDBorderEffectDictionary instance to apply
1420 Sets the file specification for this object. @param file PDFileSpecification to be assigned
1421 Sets the current page in the PDF document. @param page PDPage object to set as the current page
1422 Sets optional content in the COS object. @param oc PDPropertyList containing optional content
1423 Sets user profile appearance data. @param appearance PDAppearanceDictionary object to store
1424 Sets the named destination for this object. @param dest PDNamedDestination to be set or null to remove it
1425 Sets the target directory for processing. @param targetDirectory Target directory object
1426 Sets item C in actions list to specified action. @param c PDAction object to set
1427 Sets the item at COSName.O to the provided PDAction object. @param o the PDAction object to be set
1428 Sets action C using provided PDAction object. @param c PDAction to be assigned to item COSName.C
1429 Sets the value of item V in the actions list. @param v PDAction object to be assigned
1430 Sets the action associated with COSName.F. @param f PDAction object to assign
1431 Sets the K action in the item collection. @param k PDAction object to be assigned
1432 Sets the Data Provider (DP) action. @param dp PDAction object to be assigned
1433 Sets the Work Package (WP) action. @param wp WorkPackage object to be assigned
1434 Sets the Document Services (DS) action. @param ds the DS action to be set
1435 Sets the WS item in the action list. @param ws PDAction object representing workspace settings
1436 Sets the Work Center (WC) action. @param wc PDAction object representing the WC
1437 Sets the PI action. @param pi PDAction object representing the PI
1438 Sets the PV (Process Variable) action. @param pv PDAction object representing the Process Variable
1439 Sets PC action. @param pc PDAction object representing PC action
1440 Sets the PO (Purchase Order) action. @param po the Purchase Order action to be set
1441 Sets the BL action. @param bl PDAction instance to be assigned
1442 Sets FO (Field of View) action. @param fo PDAction object representing Field of View
1443 Sets the action associated with COSName U. @param u PDAction object to be assigned
1444 Sets the item with COS name 'D' to the specified action. @param d the action to be set
1445 Sets the action associated with X item. @param x the new action to assign
1446 Sets action E with given PDAction instance. @param e PDAction object to be assigned
1447 Sets appearance dictionary for an item. @param ap PDAppearanceDictionary object to be assigned
1448 Sets the action item in the COS object. @param action PDAction object to be stored
1449 Sets the FDF catalog for this PDF document. @param cat the FDF catalog to be set
1450 Sets the file specification for the PDF document. @param fs PDFileSpecification object containing file details
1451 Sets the root of the structure tree. @param treeRoot PDStructureTreeRoot object to set as root
1452 Sets the URI (Uniform Resource Identifier) dictionary. @param uri PDURIDictionary instance to be assigned
1453 Sets the PDMarkInfo object associated with the current item. @param markInfo PDMarkInfo data to be stored
1454 Sets document names from provided dictionary. @param names PDDocumentNameDictionary containing name values
1455 Sets additional actions for the PDF document catalog. @param actions PDDocumentCatalogAdditionalActions object to be set
1456 Sets the open action destination or action. @param action PDDestinationOrAction object to set as open action
1457 Sets metadata on the PDDocument's root item. @param meta metadata to be set
1458 Sets the document outline of a PDF document. @param outlines PDDocumentOutline object to be assigned
1459 Sets viewer preferences for the document. @param prefs PDViewerPreferences object to apply
1460 Sets the AcroForm item in the PDF document. @param acroForm PDAcroForm object to set
1461 Sets an item in the PDF document using its native name. @param key unique item identifier @param value COSObjectable instance to be stored
1462 Decrypts a COSBase object and its associated objects. @param obj the COSBase object to be decrypted @param objNum object number @param genNum generation number
1463 Sets end color of PDGamma. @param colour end color to be assigned
1464 Sets page labels for the PDF document. @param labels PDPageLabels object containing label information
1465 Sets the start colour of the PDGamma. @param colour new colour to use
1466 Sets the color before the first element in the PDGamma sequence. @param colour new color to set
1467 Creates a retranslated rectangle with dimensions matching the current component. @return PDRectangle object representing the rectangle
1468 Sets the lower limit of a PDF page's range. @param lower string representation of the lower limit
1469 Sets the upper limit value in the node's limits array. @param upper new upper limit string
1470 Sets the end-point style for a PDF annotation. @param style desired line ending style (e.g. "square", "circle")
1471 Sets the line ending style for a PDF annotation. @param style style to apply (e.g. LE_NONE, LE_CIRCLE, etc.)
1472 Sets the end point style for a PDF annotation. @param style desired line ending style (e.g. LE_NONE, LE_SQUARE, etc.)
1473 Sets the line ending style for a PDF annotation. @param style the desired style (or null for default)
1474 Sets the end point style for a PDF annotation. @param style desired line ending style (null to reset to none)
1475 Sets the line ending style for a PDF annotation. @param style desired style (null to reset)
1476 Sets the after-colour of the PDGamma object.
1477 Sets destinations in the document's names dictionary. @param dests PDDestinationNameTreeNode object containing destinations
1478 Sets embedded files for the item. @param ef PDEmbeddedFilesNameTreeNode object containing file information
1479 Sets JavaScript item in the name dictionary. @param js JavaScript item to be set
1480 Sets the item in the catalog with COSName.SIG to the provided PDSignature. @param sig PDSignature object to be stored
1481 Sets FDF (Forms Data Format) dictionary. @param fdf FDF dictionary object
1482 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object representing the fringe dimensions
1483 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle representing the fringe bounds
1484 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object defining the fringe
1485 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle representing the new fringe bounds
1486 Sets border effect dictionary. @param be PDBorderEffectDictionary object
1487 Sets border style of an annotation item. @param bs PDBorderStyleDictionary object
1488 Sets the parent tree node in the COS object. @param parentTree PDNumberTreeNode instance to be stored
1489 Sets the current PDF page. @param page PDPage object to set
1490 Sets the parent PDStructureNode. @param structureNode the new parent node
1491 Sets the current PDF page. @param page PDPage object to be set
1492 Sets the referenced object in PDX. @param xobject PDXObject to be set
1493 Sets the referenced object in the COS item. @param annotation PDAnnotation instance to be stored
1494 Sets the current page to the specified PDPage object. @param page the new PDPage object
1495 Adds an item to a dictionary by kind and name. @param kind unique identifier for the dictionary @param name key for the item within the dictionary @param object value associated with the key
1496 Sets transition animation parameters. @param transition PDTransition object @param duration duration of the animation in seconds
1497 Sets the transition element in the page item map. @param transition PDTransition object to be set
1498 Sets additional page actions. @param actions PDPageAdditionalActions object
1499 Sets metadata for the current page. @param meta PDMetadata object containing metadata to be set
1500 Sets the contents of a PDF stream. @param contents PDStream object to be set
1501 Sets the Art Box rectangle for the page. @param artBox PDRectangle object or null to clear existing value
1502 Sets the trim box for a PDF page. @param trimBox rectangle defining the trim box (or null to remove)
1503 Sets the bleed box for a print document. @param bleedBox rectangle object defining the bleed area or null to remove it
1504 Sets the media box for a PDF page. @param mediaBox the new media box rectangle or null to clear it
1505 Sets the resources for a page. @param resources PDResources object or null to clear
1506 Initializes a new PDF page with specified media box. @param mediaBox the bounding box of the page content
1507 Sets JavaScript code in FDF document. @param js JavaScript to be added
1508 Initializes document outline with default type and name.
1509 Sets the border style of an object using a PDBorderStyleDictionary. @param bs dictionary containing border style information
1510 Sets the previous URI of a PD Action. @param pa PDActionURI object containing the new URI
1511 Initializes a typed dictionary wrapper with a specified data type. @param type name of the underlying COS object type
1512 Sets or removes the style attribute from the underlying XML node. @param style new style value or null to remove existing style
1513 Validates and sets the trapped status. @param value one of 'True', 'False', or 'Unknown'
1514 Sets the version of the entity. @param version new version string to be assigned
1515 Sets the page layout using the provided PageLayout object. @param layout PageLayout instance to be assigned
1516 Sets the page mode of the document. @param mode desired PageMode value
1517 Sets the value of a PDF name (key) to the specified string. @param key unique PDF name identifier @param value new value for the PDF name
1518 Sets an array of numbers in the PDF document. @param name key for the array @param values float values to store in the array
1519 Sets an array of values for a given dictionary key. @param name dictionary key to update @param values string values to add to the array
1520 Sets an array of strings in the PDF document dictionary. @param name key to store the array under @param values string array elements to add
1521 Sets whether to display document title in UI. @param value true to show, false to hide
1522 Sets whether to center the application window. @param value true to center window, false otherwise
1523 Sets whether to fit the window to its content. @param value true to enable fitting, false otherwise
1524 Sets the owner of the COS object. @param owner new owner name
1525 Sets whether to hide window UI. @param value true to hide, false otherwise
1526 Sets preference to hide toolbar. @param value true to hide, false otherwise
1527 Sets whether need appearances is required. @param value true to enable or false to disable
1528 Sets trusted mode flag in the underlying dictionary. @param trustedMode true to enable, false to disable trusted mode
1529 Sets whether to suppress non-embeddable font warnings. @param noEmbedFontWarning true to disable warnings, false otherwise
1530 Sets the pre-release flag in the dictionary. @param preRelease true to mark as pre-release, false otherwise
1531 Sets the "Open" property of the COS object. @param open true to set as open, false otherwise
1532 Sets the caption boolean attribute of the COSObject. @param cap true to enable caption, false otherwise
1533 Sets whether to enable mixing. @param mix true to enable mixing, false otherwise
1534 Sets whether an action should be repeated. @param repeat true to repeat the action, false otherwise
1535 Sets synchronous flag on the action. @param synchronous true for synchronous execution, false otherwise
1536 Sets whether to open a file in a new window based on user preference. @param value OpenMode enum (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
1537 Sets whether to open in a new window based on the provided mode. @param value OpenMode enumeration value
1538 Sets whether to open in new window based on OpenMode value. @param value OpenMode enum specifying the mode
1539 Sets whether to hide menubar. @param value true to hide menubar, false otherwise
1540 Initializes a new instance of PDMarkedContentReference. @param TYPE name of marked content type
1541 Initializes a new PDObjectReference instance with default values. Sets the type to TYPE and initializes an empty dictionary.
1542 Sets the COS structure type. @param structureType new structure type value
1543 Sets the user's display name in the underlying data store. @param name new name to be set
1544 Sets the subtype of the COS object. @param subtype new subtype value
1545 Initializes an empty external data dictionary with type 'ExData'.
1546 Sets the style of the COS object. @param s new style value
1547 Sets the highlighting mode to one of the predefined values. @param highlightingMode valid modes: N, I, O, P, T
1548 Sets the user's display name. @param name new display name
1549 Sets the user's full name. @param name the new full name value
1550 Sets intent to COS object. @param it new intent value
1551 Sets reply type in COS object. @param rt new reply type value
1552 Sets highlight mode to specified value. @param mode string identifier for highlight mode
1553 Sets caption positioning on COS object. @param captionPositioning new positioning value
1554 Sets the line ending style in the COS object. @param style string representing the line ending style
1555 Sets attachment name. @param name new attachment file name
1556 Sets the appearance state of the COS object. @param as new appearance state value
1557 Sets subtype attribute on the underlying COS object. @param subType new subtype value
1558 Sets the subtype of an action. @param s subtype value as string
1559 Sets the type of the action. @param type the new type value
1560 Initializes an empty PDF abstract pattern object.
1561 Sets the scale type for a chart. @param scale string representing the scale type
1562 Sets scale option in COSName. @param option selected scale option
1563 Sets the encoding scheme for PDF data. @param encoding desired encoding name (e.g. "UTF-8")
1564 Sets the software version. @param version new version string to be assigned
1565 Sets the icon name. @param icon new icon name to be assigned
1566 Sets line ending style in annotation. @param style line ending style (e.g. "LF", "CR", etc.)
1567 Sets the COS intent to the specified value. @param intent the new intent value
1568 Sets the COS filter name. @param subfilter new filter value
1569 Sets the guideline style in the dictionary. @param style new style value
1570 Initializes a PDStructureNode with a specified type. @param type the node's type, stored in the dictionary.
1571 Sets the knockout flag in the dictionary. @param tk true to set the flag, false otherwise
1572 Sets document destination to specified PDDestination object. @param dest PDDestination object to be set
1573 Sets the Alpha Source Flag in the dictionary. @param alpha whether to enable or disable the flag
1574 Sets non-stroking overprint control value in PDF dictionary. @param op true to enable, false to disable
1575 Sets a PDF structure element. @param structureElement PDStructureElement to be set
1576 Sets the action to the specified PDAction object. @param action the action to be set
1577 Sets the destination for this COS object. @param dest PDDestination object to be stored
1578 Sets the next sibling node in the outline hierarchy. @param outlineNode PDOutlineNode instance to set as next sibling
1579 Sets the previous sibling node in the outline. @param outlineNode PDOutlineNode to be assigned as previous sibling
1580 Sets the build property of the document. @param propBuild PDPropBuild object to be assigned
1581 Sets the seed value certificate in the dictionary. @param certificate PDSeedValueCertificate object to store
1582 Sets application data in the dictionary. @param app PDPropBuildDataDict object containing application details
1583 Sets the build public security property in the PDPropBuildDataDict. @param pubSec public security data to be stored
1584 Sets the build filter for PD property data. @param filter PDPropBuildDataDict object to apply
1585 Sets down appearance stream in PDAppearance dictionary. @param ap PDAppearanceStream object to store
1586 Sets the down appearance of an item in the dictionary. @param entry PDAppearanceEntry object to be assigned
1587 Sets rollover appearance stream in dictionary. @param ap PDAppearanceStream object to be set
1588 Sets rollover appearance settings. @param entry PDAppearanceEntry object to store
1589 Sets normal appearance entry in dictionary. @param entry PDAppearanceEntry object to be stored
1590 Sets the parent field of this COS object. @param field Parent PDTerminalField
1591 Sets the border style of the COS object. @param bs PDBorderStyleDictionary instance to apply
1592 Sets additional annotation actions. @param actions PDAnnotationAdditionalActions object
1593 Sets the PDAction object associated with the document. @param action PDAction object to be stored
1594 Sets appearance characteristics dictionary. @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary object
1595 Sets the rectangle difference in the COS object. @param rd PDRectangle representing the rectangle difference
1596 Sets border effect using PDBorderEffectDictionary. @param be dictionary containing border effect settings
1597 Sets border effect using the provided dictionary. @param be PDBorderEffectDictionary object to apply
1598 Sets the border style of a PDF object. @param bs PDBorderStyleDictionary containing border styles
1599 Sets external data in COS object. @param externalData dictionary of external data to be set
1600 Sets the In-Reply-To annotation. @param irt PDAnnotation object to be set
1601 Sets annotation popup object. @param popup PDAnnotationPopup instance to be saved
1602 Sets normal appearance stream in PDDictionary. @param ap Normal appearance stream to be stored
1603 Sets the first child node of this PDOutlineNode. @param outlineNode new first child node
1604 Sets the last child node of the outline. @param outlineNode PDOutlineNode object representing the new last child
1605 Sets default resources. @param dr PDResources object to set as default
1606 Sets stroking overprint control. @param op true to enable or false to disable
1607 Sets anti-aliasing preference in PDF document. @param antiAlias true to enable, false to disable
1608 Sets whether to rename on update. @param value true to enable renaming, false otherwise
1609 Sets scale to fit annotation flag. @param value true to enable, false otherwise
1610 Sets caption flag on annotation. @param cap true to enable caption, false otherwise
1611 Sets encryption metadata flag. @param encryptMetaData true to enable, false to disable
1612 Sets volatile flag on file. @param fileIsVolatile true to mark as volatile
1613 Sets boolean flag "FD" on COS object. @param fd true/false value for FD flag
1614 Sets the 'Open' attribute of the COS object. @param open true to indicate the object is open, false otherwise
1615 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
1616 Sets whether the user is suspected. @param suspect true if suspected, false otherwise
1617 Sets whether to include user properties in data. @param userProps true to include user props, false otherwise
1618 Sets the 'Marked' flag in the internal dictionary. @param value true to mark, false otherwise
1619 Sets rectangle item in PDF document. @param rect the rectangle to be set
1620 Sets the current PDF page. @param page PDPage object to be set as the current page
1621 Sets the previous bead in the thread. @param previous The new bead to set as previous
1622 Sets the next bead in the thread. @param next The new bead to be assigned
1623 Sets the thread associated with the item. @param thread the thread to be assigned
1624 Sets document information on the current thread. @param info PDDocumentInformation object to be set
1625 Sets the measure dictionary in COS. @param measure PDMeasureDictionary object
1626 Sets the bounding box (BBox) of a PDF object. @param rectangle PDRectangle object representing the bounds
1627 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object
1628 Sets seed value using the provided PDSeedValue object. @param sv PDSeedValue object to be set
1629 Sets default signature for PDF document. @param value PDSignature object to be set as default
1630 Sets PDSignature value and applies changes. @param value PDSignature object to set
1631 Sets XFA resource in PDF document. @param xfa PDXFAResource object to be set
1632 Sets automatic stroke adjustment flag in the dictionary. @param sa true to enable, false to disable
1633 Returns the end point style of the annotation line.
1634 Retrieves the type of COS object associated with this instance. @return The name of the TYPE attribute as a string, or an empty string if not found
1635 Retrieves the upper limit value from the 'LIMITS' COSArray. @return Integer upper limit value or null if not found
1636 Retrieves the lower limit value from the LIMITS COSArray. @return The lower limit as an Integer, or null if not found.
1637 Retrieves an array of range values. @return COSArray containing range values or null if not available
1638 Retrieves the domain values from the COS array.
1639 Retrieves the size array from the COS object, lazily initializing it if necessary. @return COSArray containing document size information
1640 Retrieves the decode array for COS decoding. @return COSArray containing decode values or null if not found
1641 Retrieves and returns the array of functions.
1642 Retrieves and returns the bounds array associated with this object. @return COSArray containing bounds data or null if uninitialized
1643 Retrieves default value from configuration. @return list of strings representing default values or null if none found
1644 Retrieves a list of values based on COSName.V. @return A list of strings representing the values.
1645 Retrieves the encoded array. @return COSArray object representing the encoded data
1646 Converts role map dictionary to a Java map. @return Map of role data or an empty map if conversion fails
1647 Retrieves the scale ratio from the COS object. @return Scale ratio as string or null if not available
1648 Retrieves default style string from COSObject. @return default style string or null if not available
1649 Retrieves mapping name from dictionary. @return Mapping name as string or null if not found
1650 Retrieves alternate field name from dictionary. @return string value associated with COSName.TU
1651 Retrieves partial name from dictionary. @return Partial name as string or empty if not found
1652 Retrieves the state model string from the COS object. @return State model string or null if not available
1653 Retrieves and returns the normal caption from the COS object. @return The normal caption as a string, or null if not available.
1654 Retrieves the rollover caption from the COS object. @return The rollover caption as a string, or null if not set.
1655 Retrieves alternate caption from COS object. @return Alternate caption string or null if not available
1656 Retrieves date value from dictionary. @return formatted date string
1657 Retrieves the operating system from the PDF document. @return OS name as a string or an empty string if not found
1658 Retrieves a map of numerical indices to corresponding COSObjectable values. @return Map of integers to COSObjectable objects, or null if not found
1659 Extracts subject DN data as a list of key-value maps.
1660 Retrieves URL from configuration dictionary. @return The stored URL value as a string or null if not set
1661 Retrieves name from dictionary. @return Name string or null if empty
1662 Retrieves location string from the dictionary. @return Location string or null if not set
1663 Retrieves reason string from dictionary. @return Reason string or null if not available.
1664 Retrieves contact information from configuration dictionary. @return Contact info string or null if not available
1665 Retrieves document title from COS (Common Object Services) object. @return document title as string or null if not available
1666 Retrieves URL from configuration dictionary. @return configured URL string or empty string if not set
1667 Retrieves the state of the COS object. @return State as a string or null if not available
1668 Retrieves a list of child nodes for the current node. @return List of PDNumberTreeNode objects or null if none exist
1669 Retrieves a list of child nodes for the current node. @return List<PDNameTreeNode<T>> containing child nodes or null if none
1670 Retrieves additional actions from the PDF form field. @return PDFormFieldAdditionalActions object or null if not available
1671 Retrieves the PDSignature object from the underlying dictionary. @return PDSignature object or null if not found
1672 Retrieves default PDSignature from the document. @return PDSignature object or null if not found
1673 Retrieves the seed value from the PDF document. @return PDSeedValue object or null if not found
1674 Retrieves the measure dictionary from the COS object. @return PDMeasureDictionary object or null if not found
1675 Retrieves thread information as a PDDocumentInformation object.
1676 Retrieves and constructs the first thread bead from the thread's dictionary. @return PDThreadBead object or null if not found
1677 Retrieves the thread object from the COS dictionary. @return PDThread object or null if not found
1678 Retrieves the next bead in thread. @return PDThreadBead object representing the next bead
1679 Retrieves the previous thread bead in the sequence. @return The preceding PDThreadBead object.
1680 Retrieves the page object associated with this PDF document. @return PDPage object or null if not found
1681 Retrieves metadata from the PDF document. @return PDMetadata object or null if not found
1682 Retrieves the PDMetadata object associated with this page. @return PDMetadata object or null if not available
1683 Retrieves the differences COS stream from the FDF object. @return COSStream containing differences or null if not available
1684 Retrieves font file as a PDStream object or null if not found.
1685 Retrieves font file 2 as a PDStream object. @return PDStream object or null if not found
1686 Retrieves font file PDStream from dictionary. @return PDStream object or null if not found
1687 Retrieves a list of PDViewports from the document. @return List of PDViewportDictionary objects or null if empty
1688 Retrieves a list of thread beads from the PDF page. @return List<PDThreadBead> containing thread bead objects or empty list if not found
1689 Retrieves a list of output intents from the PDF document. @return List of PDOutputIntent objects or empty list if none found
1690 Creates a PDAttributeObject instance based on the owner string from the COSDictionary. @param dictionary COSDictionary containing owner information @return PDAttributeObject instance or PDDefaultAttributeObject if unknown owner
1691 Retrieves the document ID from the trailer as a COS array. @return COSArray containing the document ID or null if not available
1692 Retrieves a map of name-value pairs from the COSArray. @return A read-only map of string keys to value objects, or null if empty.
1693 Retrieves alternate icon as a PDFormXObject. @return PDFormXObject object or null if not available
1694 Retrieves the normal icon of a PDF form object. @return PDFormXObject representing the icon or null if not found
1695 Returns export values from previously fetched options. @return List of export value strings or null if not fetched
1696 Retrieves sound stream from action. @return COSStream object representing sound data
1697 Retrieves CID set stream from dictionary. @return PDStream object or null if not found
1698 Retrieves rollover icon as a PDFormXObject from the COS object.
1699 Returns default resources for the PDF document.
1700 Retrieves subject string from COS object. @return Subject string or null if not available
1701 Retrieves default style string from COS object. @return Default style string or null if not available
1702 Retrieves the name from annotation. @return Name as string or null if unavailable
1703 Retrieves and returns the date value from annotation.
1704 Retrieves the expanded form of the object's properties. @return Expanded string value or null if properties are not set
1705 Retrieves alternate description from user properties. @return string value of ALT property or null if not found
1706 Retrieves actual text from properties. @return Actual text as string or null if properties are null.
1707 Retrieves and formats the F value from COS object. @return formatted string representation of F value
1708 Retrieves the actual text from the COS object. @return Actual text as a string or null if not available
1709 Retrieves the expanded form of a COS object. @return Expanded form as a string or null if not found
1710 Retrieves alternate description from COS metadata. @return Alternate description as a string or null if not available.
1711 Retrieves the language from the COS object. @return Language string or null if not available
1712 Retrieves the title from the underlying COS object. @return The title string or null if not available
1713 Retrieves the ID element from the COS (Core Object Service) object. @return the ID as a string or null if not available
1714 Retrieves file description from configuration.
1715 Retrieves file path as Unix-style string. @return File path in Unix format (e.g., /path/to/file) or null if not found
1716 Retrieves the file's MAC address from the COS.
1717 Retrieves file system DOS name. @return string representation of DOS file system name
1718 Retrieves file path as a string from configuration. @return file path or null if not set
1719 Retrieves the field type as a string. @return COS name of the field type (e.g. "Integer", "String") or null if invalid
1720 Retrieves the name of the COS object. @return Name as a string or null if not available
1721 Retrieves duplex setting from preferences. @return Duplex setting as string or null if not set
1722 Retrieves string value from COS dictionary by given key. @param key unique key identifier
1723 Returns string value associated with given COSName key or the default value if not set. @param key unique identifier for the string value @param defaultValue string to return when key is not found
1724 Retrieves the language code from the COS data. @return language code as string or null if not available
1725 Retrieves the contents string from the annotation. @return Contents string or null if not available
1726 Retrieves title from the 'info' map. @return Title string or null if not available
1727 Retrieves the subject from the information map. @return The subject string or null if not found
1728 Retrieves keywords from stored data. @return keywords string or empty string if not available
1729 Retrieves the creator's name from the metadata. @return Creator's name or null if not available
1730 Retrieves the producer name from the metadata.
1731 Retrieves the prefix value from the root configuration. @return The prefix string or null if not set
1732 Retrieves file Unicode from file system. @return file Unicode as string or null if not available
1733 Retrieves the author name from metadata. @return author's full name as a string or null if not available
1734 Retrieves title string from COS object. @return Title string or null if not available
1735 Retrieves subject from annotations. @return Subject string value
1736 Retrieves rotation annotation value. @return rotation angle as string or null if not set
1737 Retrieves the default appearance from the COS object.
1738 Retrieves annotation name from COS object. @return Annotation name as string or null if not found
1739 Retrieves the modified date as a string. @return The last modification date of the COS object
1740 Retrieves the contents string from the dictionary.
1741 Retrieves execute parameter value from parameters map. @return Execute parameter string or null if not found
1742 Retrieves directory path from parameters. @return Directory path as string or null if not set
1743 Returns the filename parameter value. @return filename string
1744 Retrieves annotation name from dictionary. @return Annotation name as string or null if not found
1745 Retrieves filename from dictionary. @return Filename string as stored in COSName dictionary
1746 Retrieves the URI value from the PDF action dictionary. @return URI string or null if not found or malformed
1747 Retrieves value of COSName.P. @return string representation of P value
1748 Retrieves string value associated with COSName.O.
1749 Retrieves COSName.D value as a string. @return D value from the action object.
1750 Retrieves string value associated with COSName.F. @return string value or null if not found
1751 Retrieves an array of group names from the OCGS dictionary. @return Array of group names or empty array if not found
1752 Retrieves the name from the dictionary. @return The user's name as a string or null if not found
1753 Retrieves default appearance from COS annotation. @return default appearance as string or null if not set
1754 Retrieves default style from annotation. @return Style string as annotated in COS or null if not set
1755 Retrieves caption style from annotation. @return CSS string representing caption style or null if not set
1756 Retrieves the state from the annotation. @return The current state as a string.
1757 Retrieves the state model value from annotations. @return State model string or null if not found
1758 Retrieves status from FDF (Facility Data File). @return status string or null if not available
1759 Retrieves the symbol attribute from the annotation. @return The annotated symbol as a string.
1760 Retrieves the target string from the FDF document. @return The target string value or null if not available
1761 Retrieves the name value from the COS reference. @return The user's name as a string or null if not available
1762 Retrieves the font family from the dictionary. @return The name of the font family or null if not available.
1763 Retrieves character set from dictionary. @return Character set string or null if not available
1764 Retrieves the partial field name from the COS string. @return partial field name as a string
1765 Checks if this object has children.
1766 Retrieves the structure element from the PDF document. @return PDStructureElement object or null if not found
1767 Retrieves string filter name from dictionary, or returns IDENTITY if not found.
1768 Converts font code to Unicode string using ToUnicode CMap or Identity-x mapping. @param code font code value @return Unicode string representation of the character or null if not possible
1769 Retrieves subtype name, initializing it if not already set. @return COSName object representing the subtype or null if uninitialized
1770 Retrieves relationship name from dictionary. @return COSName object representing relationship or null if not found
1771 Retrieves the appearance state of the COS object. @return COSName representation of the appearance state
1772 Checks if PDF document contains encryption information. @return true if encrypted, false otherwise
1773 Retrieves encryption dictionary from trailer. @return COSDictionary object containing encryption information
1774 Initializes parsing by retrieving and validating the PDF trailer.
1775 Retrieves the AcroForm for this document. @param acroFormFixup fixup object to apply if not already applied @return PDAcroForm instance or null if not found
1776 Retrieves viewer preferences from the PDF document. @return PDViewerPreferences object or null if not found
1777 Retrieves the document's name dictionary. @return PDDocumentNameDictionary object or null if not found
1778 Retrieves the destination dictionary from the PDF document. @return PDDocumentNameDestinationDictionary object or null if not found
1779 Retrieves mark information from the PDF document. @return PDMarkInfo object or null if not found
1780 Retrieves URI dictionary from the PDF document. @return PDURIDictionary object or null if not found
1781 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
1782 Retrieves optional content properties from the PDF document. @return OptionalContentProperties object or null if not found
1783 Retrieves destination names from the document catalog or name dictionary. @return PDDestinationNameTreeNode object containing destinations, or null if not found
1784 Removes a specified key usage extension from the KEY_USAGE array. @param keyUsageExtension extension to be removed
1785 Removes a subject from the PDF document. @param subject byte array representing the subject to remove
1786 Removes user property from the P array. @param userProperty PDUserProperty object to be removed
1787 Retrieves a PDF page object, or null if not found. @return PDPage object representing the page, or null if absent
1788 Retrieves the PDF page object from the underlying COS dictionary. @return PDPage object or null if not found
1789 Retrieves the PDF page object associated with this page. @return PDPage object or null if not found
1790 Returns stream filter name, or IDENTITY if not set.
1791 Retrieves COS dictionary object by name. @param kind COS type (dictionary) @param name unique object identifier @return COSBase object or null if not found
1792 Retrieves an indirect COSObject by name from the dictionary with specified kind. @param kind COSName representing the dictionary type @param name COSName of the desired indirect object @return COSObject if found, otherwise null
1793 Retrieves the page's transition information. @return PDTransition object or null if not found
1794 Retrieves JavaScript tree node from dictionary. @return PDJavascriptNameTreeNode object or null if not found
1795 Retrieves embedded files node from the user profile dictionary. @return EmbeddedFilesNameTreeNode object or null if not found
1796 Retrieves all COS names associated with the given kind. @param kind COS name type @return Iterable of COS names or an empty set if not found
1797 Removes issuer from the certificate's Issuer field. @param issuer byte[] representing the issuer to remove
1798 Retrieves the COSName of the cryptographic filter method. @return COSName object representing the CFM (Cryptographic Filter Method)
1799 Checks if the provided dictionary represents a catalog. @param dictionary COSDictionary object to inspect @return true if the dictionary is a catalog, false otherwise
1800 Parses a COSDictionary from the input stream. @param isDirect whether to parse as direct or indirect dictionary
1801 Initializes a PDRectangle from a 4-element float array. @param array input array containing rectangle coordinates
1802 Initializes a line dash pattern with the given array and phase. @param array COSArray of dash lengths @param phase initial phase, adjusted if negative to meet PDF specification
1803 Returns a string representation of this range in the format "min, max". @return Formatted string with min and max values.
1804 Evaluates a type 4 function and returns output values. @param input input values to be processed @return output values as an array of floats
1805 Reads and processes a patch from the given input stream. @param input ImageInputStream to read from @param isFree whether free-form data or explicit edge points are expected
1806 Reads a vertex from the given image input stream. @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-coordinate range @param rangeY Y-coordinate range @param colRangeTab array of color component ranges @param matrix transformation matrix @param xform affine transform @return Vertex object or null if not found
1807 Returns the color before the current one in the gamma sequence.
1808 Retrieves colour at index 1 (after) from PDGamma object. @return Colour object or null if not found
1809 Returns start colour of gamma by fetching colour at index 2. @return PDGamma object representing start colour
1810 Retrieves end colour of gamma distribution. @return Colour object at index 3
1811 Retrieves the blend mode instance from dictionary. @return BlendMode object or null if not found
1812 Retrieves the color space for this object. @return PDColorSpace object or null if not initialized
1813 Checks if provided COSDictionary represents a page tree node. @param node COSDictionary to check @return true if it's a page tree node, false otherwise
1814 Retrieves filter values as a list of strings. @return List of filter names or empty list if not found
1815 Retrieves integer value from dictionary using keys. @param firstKey first key to search for @param secondKey second key to search for @param defaultValue default value if not found @return integer value or default value
1816 Retrieves a boolean value from the dictionary using the provided keys. @param firstKey key for the dictionary @param secondKey secondary key for the dictionary (if needed) @param defaultValue default boolean value to return if not found @return true or false as retrieved from the dictionary, or the default value
1817 Retrieves a COSDictionary object by its first and second keys. @param firstKey key of the dictionary @param secondKey secondary key for dictionary lookup @return COSDictionary object or null if not found
1818 Creates a Matrix from the given COSBase, ensuring it conforms to specific requirements. @param base COSBase instance
1819 Removes OID from the dictionary. @param oid byte array representing OID to remove
1820 Retrieves the upper limit value from the 'LIMITS' array. @return String representation of the upper limit or null if not found
1821 Retrieves a PDPage object from the COS dictionary. @return PDPage object or null if not found
1822 Retrieves the border effect dictionary, or null if not found. @return PDBorderEffectDictionary object
1823 Retrieves border style dictionary. @return PDBorderStyleDictionary object or null if not found
1824 Retrieves the previous URI from the PDF Action dictionary. @return PDActionURI object or null if not found
1825 Retrieves external data dictionary for PDF document. @return External data dictionary as PDExternalDataDictionary or null if not found
1826 Retrieves border style dictionary. @return Border style dictionary or null if not found
1827 Retrieves border effect dictionary. @return BorderEffectDictionary object or null if not found
1828 Retrieves the border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1829 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
1830 Retrieves additional annotation actions from the PDF document. @return PDAnnotationAdditionalActions object or null if not available
1831 Retrieves border style dictionary from COS object. @return BorderStyle dictionary or null if not found
1832 Retrieves normal appearance entry from PDF dictionary. @return PDAppearanceEntry object or null if not found
1833 Retrieves filter data as a PDPropBuildDataDict object. @return Filter data or null if not available
1834 Retrieves public security data from the document. @return PDPropBuildDataDict object containing public security data or null if not found
1835 Retrieves the application properties as a PDPropBuildDataDict object. @return PDPropBuildDataDict object or null if not found in dictionary
1836 Retrieves the PDF properties build object from the COSDictionary. @return PDPropBuild object or null if not found in dictionary
1837 Retrieves the time stamp from the document's dictionary. @return PDSeedValueTimeStamp object or null if not found
1838 Retrieves the seed value certificate from the PDF document. @return SeedValueCertificate object or null if not found
1839 Navigates to a COSBase object at the specified path. @param objPath path to the target object, using array indices and dictionary keys
1840 Retrieves a dictionary attribute value by name. @param attrName name of the attribute to fetch @return COSBase object containing the attribute value or null if not found
1841 Retrieves a dictionary attribute by name or returns the default value if not found. @param attrName name of the attribute to fetch @param defaultValue value to return if attribute is missing
1842 Retrieves the appearance dictionary from the PDF document. @return PDAppearanceDictionary object or null if not found
1843 Checks if a COS dictionary object exists with the specified name. @param name name of the object to check @return true if object exists, false otherwise
1844 Retrieves a single name or an array of names from the PDF dictionary. @param name key to search for @param defaultValue default value to return if not found @return individual name, array of names, or default value
1845 Retrieves a COSNumber or COSName by name, returning its float value or string name respectively, or the default value if not found. @param name dictionary key @param defaultValue fallback value if key is missing
1846 Retrieves a single number or an array of numbers from the PDF dictionary. @param name key to look up in the dictionary @param defaultValue value to return if not found, or UNSPECIFIED for null @return float value(s) or default value if not found
1847 Retrieves a PDGamma object by its name from the document dictionary. @param name unique identifier for the color @return PDGamma object or null if not found
1848 Generates a unique COS key by incrementing the prefix until an unused key is found. @param kind COS dictionary kind @param prefix initial key prefix @return unique COSName object or null if dictionary is null
1849 Retrieves MDP (Metadata Dictionary) as a PDSeedValueMDP object. @return PDSeedValueMDP instance or null if not found
1850 Retrieves an array of string values from a COSArray object. @param name the key to look up in the dictionary @return String[] array or null if not found
1851 Retrieves the target directory from the PDF document's dictionary. @return PDTargetDirectory object or null if not found
1852 Retrieves Windows launch parameters from the action's dictionary. @return PDWindowsLaunchParams object or null if not found
1853 Retrieves a PDTargetDirectory object from the COS dictionary. @return PDTargetDirectory object or null if not found
1854 Retrieves a PDDestination object from the dictionary by name. @param name unique destination identifier @return PDDestination object or null if not found
1855 Retrieves a PDDestination object from the COS dictionary. @return PDDestination object or null if not found
1856 Retrieves destination COS object and returns as PDDestination.
1857 Returns a PDDestination object representing the document's destination.
1858 Retrieves the destination PD object. @return PDDestination object or null if not found
1859 Retrieves JavaScript code associated with a PDF Form. @return FDFJavaScript object or null if not available
1860 Retrieves the PDF signature from the catalog. @return a PDSignature object or null if not found
1861 Retrieves border style dictionary from annotation. @return BorderStyleDictionary object or null if not found
1862 Retrieves a cryptographic filter dictionary by name. @param cryptFilterName unique name of the filter to fetch @return PDCryptFilterDictionary object or null if not found
1863 Creates a map of PDF class attributes. @return Map of attribute names to values (objects or arrays)
1864 Retrieves the parent tree as a PDNumberTreeNode object. @return PDNumberTreeNode instance or null if not found
1865 Returns the ID tree of the PDF structure. @return PDNameTreeNode representing the ID tree or null if not found
1866 Retrieves the lower limit from the node's LIMITS array. @return lower limit as a string, or null if not available.
1867 Retrieves border effect dictionary. @return PDBorderEffectDictionary object or null if not found
1868 Retrieves sub-filter name from configuration dictionary. @return Sub-filter name as a string or null if not found
1869 Retrieves appearance dictionary for the field. @return PDAppearanceDictionary object or null if not found
1870 Creates a PDXObject from the given COSBase and resources. @param base COSBase object to create PDXObject from @param resources PDResources for creating PDXObject (optional) @return PDXObject instance or null if base is null
1871 Retrieves PDF resources as a PDResources object. @return PDResources object or null if not found
1872 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not initialized
1873 Retrieves the render state for a given destination. @param destination the target output (PRINT, VIEW, or EXPORT) @return the corresponding RenderState enum value or null if not found
1874 Retrieves the PDF process from the COS dictionary. @return PDDeviceNProcess object or null if not found
1875 Retrieves character procedures dictionary. @return COSDictionary object or null if not initialized
1876 Retrieves and caches PDF resources. @return PDResources object or null if not found in dictionary
1877 Retrieves appearance stream reference from field dictionary. @return FDFNamedPageReference object or null if not found
1878 Fetches the Panose value from the Style dictionary. @return PDPanose object or null if not found
1879 Retrieves a named page reference from the PDF template. @return FDFNamedPageReference object or null if not found
1880 Retrieves the FDF page info from the PDF document. @return FDFPageInfo object or null if not found
1881 Retrieves additional actions from PDF document. @return PDAdditionalActions object or null if not found
1882 Retrieves the icon fit settings from the PDF document. @return FDFIconFit object or null if not found
1883 Returns a map of sub-dictionary entries with their corresponding PDF appearance streams. @throws IllegalStateException if this entry is not an appearance subdictionary
1884 Retrieves CID system information from the dictionary. @return PDCIDSystemInfo object or null if not found
1885 Retrieves filter name from dictionary. @return Filter name as string or null if not found
1886 Retrieves the title from annotations.
1887 Retrieves filter name from configuration dictionary. @return Filter name as string or null if not found.
1888 Retrieves a long value from COS with default value if not found. @param key unique identifier @param defaultValue fallback value to return if key is missing @return retrieved long value or default value if missing
1889 Retrieves a 64-bit value from the COS using the specified key. @param key unique identifier in the COS
1890 Retrieves a 64-bit value from the underlying store using the given key. @param key unique identifier for the value
1891 Returns the visibility policy as a COSName object. @return COSName representing access control policy
1892 Retrieves the origin of the current coordinate system as a float array. @return Origin coordinates (x, y) or null if not available
1893 Retrieves an array of line sloaps from the PDF document. @return An array of PDNumberFormatDictionary objects or null if not found
1894 Retrieves an array of angle dictionaries. @return Array of PDNumberFormatDictionary objects or null if not available
1895 Retrieves an array of PDF number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1896 Retrieves an array of distance dictionaries from the PDF document. @return Array of PDNumberFormatDictionary objects or null if not found
1897 Retrieves an array of number format dictionaries for Y-axis changes. @return Array of PDNumberFormatDictionary objects or null if not found
1898 Retrieves an array of PDNumberFormat dictionaries for 'X' entries. @return Array of PDNumberFormat objects or null if 'X' is not found
1899 Retrieves a list of selected option indices. @return List of integers representing the indices or an empty list if not found
1900 Retrieves the calculation order of fields from the dictionary. @return List of PDField objects representing the ordered fields
1901 Retrieves the byte range from the dictionary. @return array of integers representing the byte range, or an empty array if not found
1902 Retrieves a list of OID (Object Identifier) values from the PDF dictionary. @return List of byte arrays or null if not found
1903 Retrieves a list of issuer identifiers from the PDF document. @return List of byte arrays representing issuer names or null if not found
1904 Retrieves a list of key usage extensions from the dictionary. @return List of String values or null if not found
1905 Retrieves subject data as an array of byte arrays.
1906 Retrieves a list of legal attestations from the document. @return List of String values or an empty list if not found
1907 Retrieves a list of reasons from the underlying dictionary. @return List of reason strings or an empty list if not available
1908 Sets the start xref trailer with a given byte position value. @param startxrefBytePosValue unique byte position identifier
1909 Retrieves the float value associated with the given COSName key. @param key unique identifier of the COSName
1910 Retrieves the Y-axis step value from the COS object. @return the Y-step value as a float or 0 if not found
1911 Retrieves the X-step value from COS object. @return X-step value as a float or default 0 if not found
1912 Retrieves gamma value from dictionary. @return gamma value or default 1.0 if not found
1913 Retrieves missing width value from configuration. @return The missing width value or default of 0 if not set.
1914 Retrieves maximum width value from configuration dictionary.
1915 Retrieves the average width value from configuration. @return Average width as a floating-point number
1916 Retrieves the stem height from the dictionary. @return Stem height value or default 0 if not found
1917 Retrieves stem velocity value from data storage. @return Stem velocity as a floating-point number
1918 Returns the X-Height of a font. @return X-Height value or calculated absolute value if initially negative
1919 Returns the cap height of a font. @return Cap height value or absolute value if previously set to negative infinity
1920 Retrieves the leading value from the dictionary. @return The leading value as a float or 0 if not found
1921 Retrieves the descent value from the dictionary. @return descent value as a float or default of 0 if not found
1922 Retrieves the ascent value from the dictionary. @return The ascent value or default to 0 if not found.
1923 Retrieves italic angle from font dictionary. @return italic angle in degrees or default value (0) if not found
1924 Retrieves font weight value from configuration dictionary. @return font weight value (defaulting to 0 if not set)
1925 Retrieves opacity value from annotation data. @return opacity value (0.0 to 1.0)
1926 Retrieves guideline width from dictionary. @return Guideline width value (default=1) if available
1927 Returns the user's unit value (defaulting to 1.0 if not set). @return User's unit value or default value of 1.0
1928 Retrieves a float value by key from COS data. @param key unique identifier of the value to fetch @param defaultValue default value to return if not found @return float value or default value if not present
1929 Retrieves a float value from the PDF document by key. @param key unique identifier of the value to retrieve
1930 Retrieves list of digest methods from dictionary. @return List of method names or empty list if not found
1931 Retrieves and converts sub-filter array into a list of strings. @return List of sub-filter values or empty list if not found
1932 Retrieves quad points from COSArray. @return float array of quad points or null if not found
1933 Retrieves and returns the background COSArray, initializing it from dictionary if not already set.
1934 Returns a list of component names from the COSArray. @return List of String component names
1935 Retrieves the interior color from annotations. @return Color object or null if not found
1936 Retrieves the transformation matrix from the dictionary. @return a float array representing the matrix (default or retrieved)
1937 Retrieves the list of widths from the PDF dictionary. @return List of Float values representing widths or an empty list if not found.
1938 Retrieves a list of FDF fields from the template. @return List<FDFField> containing all defined fields or null if none are found
1939 Retrieves a list of FDF templates from the document. @return List of FDFTemplate objects or null if not found
1940 Retrieves a list of options associated with the field. @return List of option elements or null if none found.
1941 Retrieves a list of child fields for the current field. @return List<FDFField> or null if no children found
1942 Retrieves a list of FDF pages from the underlying PDF structure.
1943 Retrieves a list of FDF fields from the underlying COS structure. @return List<FDFField> containing all fields or null if none found
1944 Retrieves the ID of an object as a COSArray. @return COSArray containing the object's ID
1945 Retrieves the interior color from annotations. @return Color object or null if not found
1946 Retrieves the coordinates of an annotation. @return float array containing the coordinates or null if not found
1947 Retrieves the domain as a COSArray. @return COSArray object representing the domain or null if not initialized
1948 Retrieves and returns the "extend" array. @return COSArray object representing the "extend" property
1949 Returns the domain as a COSArray, lazily loading it from the COS object if necessary.
1950 Retrieves coordinates array from COS object. @return COSArray containing coordinates or null if not initialized
1951 Retrieves differences of a rectangle's dimensions.
1952 Returns an array of vertex coordinates. @return Array of floats representing the vertices or null if not found
1953 Returns the ending style of the PDF annotation line end point. @return String representing the ending style (e.g. LE_NONE) or default value if not found
1954 Retrieves the line end style for a PDF annotation start point. @return one of PDAnnotationLine constants (e.g. LE_NONE, LE_SQUARE, etc.)
1955 Retrieves the path data as a 2D array of floats. @return 2D array of floats or null if unavailable
1956 Retrieves the 2D vertices of a shape as an array of floats. @return float[] containing vertex coordinates or null if not found
1957 Retrieves quad points from COS object. @return array of 4 floats representing quad points or null if not found
1958 Retrieves caption vertical offset from COS object. @return vertical offset value in pixels or 0 if not found
1959 Retrieves horizontal caption offset from COS data. @return Horizontal offset value in float format, or 0 if not found
1960 Retrieves normalized volume value between -1 and 1. @return Volume as a floating-point number
1961 Returns the end-point ending style of a line. @return String representation of the style (e.g. LE_NONE) or default value if not found
1962 Retrieves URL type from configuration. @return string representation of COSName.URL_TYPE
1963 Retrieves a list of ink values. @return 2D array of floats representing ink data or empty if not found
1964 Retrieves and converts the callout array to a float array. @return An array of floats representing the callout data or null if not found
1965 Retrieves array of rectangle differences.
1966 Retrieves an array of rectangular differences. @return Array of floating-point values or empty array if not found
1967 Retrieves the fields array from the underlying COS object. @return COSArray containing field names
1968 Retrieves the fields array from the action.
1969 Retrieves and initializes PDFontSetting object from COSArray FONT in the dictionary. @return PDFontSetting object or null if FONT is missing
1970 Retrieves and returns the decode values array.
1971 Retrieves the start point ending style from the COS array. @return The start point ending style as a string or default value if not found
1972 Retrieves leader line length from COS object. @return Leader line length value as a float
1973 Retrieves line data as an array of floats. @return Array of float values or null if not available
1974 Retrieves length of leader line offset. @return Offset length as a floating-point value
1975 Retrieves the product version from the catalog. @return version string as specified in COSName.VERSION
1976 Retrieves the intent from COS annotation. @return Intent string as per COS standard
1977 Creates an FDFAnnotation object based on the provided COSDictionary. @param fdfDic a dictionary containing annotation data @return FDFAnnotation instance or null if unknown/unsupported type
1978 Retrieves the sub-filter name from the dictionary. @return The sub-filter name as a string or null if not found
1979 Retrieves filter name from configuration dictionary. @return Filter string value or null if not found
1980 Retrieves the subtype name from properties. @return subtype name as string or null if not found
1981 Retrieves document type as a string. @return Document type name or null if not found
1982 Retrieves the user's language setting from the properties. @return language code or null if not specified
1983 Retrieves name as a string from the COS object. @return name of the object as a string or null if not set
1984 Creates a PD structure node based on the provided COS dictionary. @param node COS dictionary containing type information
1985 Retrieves the structure type from the COS object. @return structure type as a string
1986 Retrieves the owner name from the COS object. @return the owner's name as a string or null if not found
1987 Retrieves the type of COS Object.
1988 Retrieves style value from root element. @return Style string or null if not available
1989 Retrieves trapped information from COS.
1990 Retrieves the software version as a string. @return Version string (e.g., "1.2.3") or null if unavailable
1991 Retrieves the page layout by parsing a string representation. @return PageLayout object or default single-page layout if invalid
1992 Retrieves the current page mode from the root element. @return PageMode enum value or PageMode.USE_NONE if not set
1993 Checks if the given offset points to a valid XRef stream. @param startXRefOffset starting offset of potential XRef stream @return true if valid XRef stream found, false otherwise
1994 Retrieves the document's character encoding. @return Character encoding string or default value ("PDFDocEncoding") if not specified
1995 Returns the name as a string, or the default value if not found. @param key COSName object to retrieve from @param defaultValue fallback string value
1996 Retrieves scale option value, falling back to default if unavailable.
1997 Retrieves the base font from the dictionary. @return The name of the base font as a string or null if not found
1998 Retrieves the name from the dictionary. @return The user's name as a string.
1999 Retrieves subtype name from COS object. @return subtype name as string or null if not available
2000 Retrieves leader line extension length from COS object. @return Leader line extension length in pixels or default (0) if not available
2001 Retrieves the intent name from the COS object.
2002 Retrieves caption positioning from COS object. @return Caption positioning string
2003 Retrieves the subtype of the COS object.
2004 Creates a PDAction object based on the provided COSDictionary action. @param action COSDictionary containing action details
2005 Retrieves the subtype of an action. @return Subtype string or null if not applicable
2006 Returns the type of this action. @return The name of the TYPE attribute as a string
2007 Checks if the current subtype matches 'NChannel'. @return true if subtype matches, false otherwise
2008 Retrieves base font name from dictionary. @return Base font name as string or null if not found
2009 Retrieves base font name from dictionary. @return Font name as string or null if not found
2010 Retrieves the base font from the dictionary. @return Font name as a string or null if not found
2011 Retrieves the base font name from the dictionary. @return Font name as a string or null if not found
2012 Retrieves font stretch attribute from dictionary. @return Font stretch value as string (e.g. "normal", "condensed") or null if missing
2013 Retrieves the font name from the COS dictionary. @return Font name as a string or null if not available
2014 Retrieves subtype name from dictionary. @return Subtype string or null if not available
2015 Retrieves type as a string from dictionary. @return COSName object representing the type
2016 Retrieves scale type based on the current fitness level's name. @return scale type string or null if unknown, defaulting to proportional scale type.
2017 Retrieves name as a string from COSName. @param key PDFName to fetch
2018 Retrieves line ending style from annotation. @return string representation of line ending style ("CR", "LF", or "CRLF")
2019 Checks if the given edge is attached. @param edge edge to check @return true if edge is attached, false otherwise
2020 Retrieves horizontal offset of caption. @return Horizontal offset value or 0 if not set
2021 Returns the vertical offset of a caption based on its CO annotation. @return vertical offset value, or 0f if not found
2022 Writes an object to storage and updates internal references. @param obj COSBase object to write
2023 Returns an array of vertex coordinates.
2024 Retrieves the interior color based on XFA annotation. @return Color object or null if not found
2025 Retrieves an array of vertices. @return Array of floats or null if not available
2026 Retrieves non-stroking alpha constant. @return Non-stroking alpha value as a float
2027 Retrieves stroking alpha constant as a float value. @return Stroke transparency factor (0-1) or null if undefined
2028 Retrieves smoothness tolerance value. @return Smoothness tolerance as a float or null if not available
2029 Retrieves flatness tolerance value. @return float representation of flatness tolerance or null if not found
2030 Retrieves interior color from annotations. @return Color object or null if not available
2031 Retrieves the miter limit value from the style dictionary. @return Miter limit as a float value
2032 Creates a PDPropertyList object based on the provided COSDictionary. @param dict input dictionary containing type information
2033 Returns the color space of the current PDF page. @throws IOException if an error occurs while accessing the PDF file
2034 Retrieves a list of user properties owned by the current user.
2035 Initializes text extraction for specified regions on a given page. @param page PDPage object to extract text from
2036 Retrieves the fly scale value from COS object. @return fly scale factor as a float value
2037 Retrieves duration value from COS object. @return duration value as a floating-point number
2038 Retrieves the width value from the PDF COS object. @return width value as a float (0 by default if W is not found)
2039 Retrieves constant opacity value from COS object. @return Constant opacity as a float value between 0 and 1
2040 Retrieves line width as a floating-point value. @return Line width in points or null if not found
2041 Writes the given PDF object to the specified output stream, handling various types and compression. @param output target output stream @param object COSBase object to write @param topLevel true if top-level object, false otherwise
2042 Retrieves the ending style of a PDF annotation endpoint. @return The style (e.g. LE_NONE, LE_SQUARE, etc.) or default value if not set
2043 Retrieves the list of ink points from the annotation. @return List of float arrays, each containing an ink point's coordinates, or null if not found.
2044 Retrieves the color from annotation. @return Color object or null if not available
2045 Retrieves interior color from annotation. @return Color object or null if not found
2046 Retrieves the line data from the annotation. @return array of floating point values or null if not available
2047 Retrieves callout values as an array of floats. @return Array of float values or null if not available
2048 Retrieves the line end style from annotation. @return string representation of end style (e.g. LE_NONE, LE_SQUARE, etc.)
2049 Adds a PDX object to the specified COS name. @param name unique COS identifier @param xobject PDX data to store
2050 Sets the unit of measurement. @param units text representation of the unit (e.g., "kg" or "lbs")
2051 Sets the display format for fractional values. @param fractionalDisplay "D" for decimal, "F" for fraction, "R" for round, "T" for truncate; or null
2052 Retrieves the bounding box of this PDF object. @return PDRectangle object or null if not available
2053 Retrieves rectangle annotation from PDF page. @return PDRectangle object or null if not found
2054 Returns the fringe rectangle of the annotation, or null if not set.
2055 Retrieves the fringe rectangle from the annotation. @return PDRectangle object or null if not found
2056 Retrieves the PDF rectangle (fringe) from the annotation's COS array. @return PDRectangle object or null if not found
2057 Retrieves the fringe rectangle from annotations. @return PDRectangle object or null if not found
2058 Retrieves the font bounding box as a PDRectangle object. @return null or a PDRectangle representing the font's bounding box
2059 Retrieves the font bounding box as a PDF rectangle. @return PDRectangle object or null if not found
2060 Retrieves the bounding box of a PDF page. @return PDRectangle object containing the page's width, height and other metrics
2061 Returns an iterable collection of shading names.
2062 Retrieves the bounding box of the PDF rectangle. @return PDRectangle object or null if not found
2063 Adds a named pattern to the model. @param name unique identifier of the pattern @param pattern abstract representation of the pattern
2064 Retrieves the bounding box of a page, if available. @return PDRectangle object with width and height or null if not found
2065 Initializes an empty FDFDocument instance with default settings.
2066 Resolves the bounding box for a PDF annotation widget. @param fieldWidget widget to resolve bounding box for @param appearanceStream stream containing annotation appearance @return PDRectangle object representing the bounding box or null if not found
2067 Sets the bounding box (BBox) for the PDF object. @param bbox new bounding box value
2068 Updates the color object with a new name and/or PDGamma value. @param name new color name @param pdgamma new color value (null to clear)
2069 Determines image file suffix based on filters. @return Suffix (e.g. png, jpg, tiff) or default value if no filter matches
2070 Updates the four-colors field in the PDF document. @param name field name @param value new FourColours object or null to remove
2071 Initializes an empty page with standard letter size. @param pageSize The default page dimensions (default: LETTER)
2072 Retrieves the FDF dictionary from catalog or initializes a new one if not found. @return FDFDictionary object representing the FDF data.
2073 Adds an object to resources with a generated key or returns existing key if already present. @param kind COSName of resource type (e.g. FONT) @param prefix prefix for new key @param object COSObjectable to add @return generated or existing key as COSName
2074 Sets the default font using the specified name and font.
2075 Sets the color space for this COS object. @param name unique identifier for the color space
2076 Sets extended graphics state. @param name COSName of the extended graphics state @param extGState PDExtendedGraphicsState object to set
2077 Sets shading with specified name. @param name COSName identifier @param shading PDShading object to set
2078 Adds user profile with specified properties. @param name unique user identifier @param properties property list to associate with the user profile
2079 Retrieves the bounding box of a PDF object. @return PDRectangle representing the bounding box or null if not set
2080 Retrieves the bounding box of a page. @return PDRectangle object or null if not available
2081 Retrieves the rectangle difference from PDF object. @return PDRectangle object or null if not available
2082 Retrieves a PDColorSpace object by name or COSName. @param name the name of the color space to fetch @param wasDefault whether this is the default color space @return PDColorSpace object or null if not found
2083 Sets the embedded file with Unicode support. @param file PDEmbeddedFile object to embed
2084 Sets the embedded file for a PDF document. @param file PDEmbeddedFile object to embed
2085 Retrieves a matrix object from COS dictionary. @return Matrix object or null if not found
2086 Checks if color space with specified name exists. @param name COSName identifier of color space
2087 Retrieves or creates PDExtendedGraphicsState by name. @param name COSName of the extended graphics state @return PDExtendedGraphicsState object or null if not found
2088 Checks if the given XObject has an image subtype. @param name COSName to check @return true if the object is an image, false otherwise
2089 Retrieves font names from the COS data structure. @return iterable collection of COSName objects representing font names
2090 Retrieves names of X-objects. @return iterable collection of COSName objects.
2091 Retrieves color space names. @return iterable collection of COSName objects
2092 Retrieves an inheritable attribute from a PDF document node or its parent. @param node the PDF node to search @param key the name of the attribute @return the attribute value if found, otherwise null
2093 Returns a boolean value associated with the given COSName key. @param key unique identifier @param defaultValue default boolean value to return if not found
2094 Retrieves integer value associated with two specified keys. @param firstKey primary key @param secondKey secondary key
2095 Retrieves the PDF rectangle from the document dictionary. @return PDRectangle object or null if invalid or missing
2096 Retrieves and returns a matrix from COS object. @return Matrix object or null if not available
2097 Retrieves the AcroForm associated with this PDF document.
2098 Retrieves rectangle representing differences from PDF document. @return PDRectangle object or null if not available
2099 Retrieves integer value associated with given COSName key; returns default value if not found.
2100 Retrieves the page rectangle from the COSArray. @return PDRectangle object or null if not found
2101 Sets the line dash pattern from a COSArray and phase. @param array COSArray containing dash lengths @param phase initial phase of the pattern
2102 Retrieves the line dash pattern from the dictionary. @return PDLineDashPattern object or null if not found
2103 Creates a stencil image from the provided PDImage and Paint. @param pdImage source image @param paint paint to use for masking @return BufferedImage with alpha channel or null if failed
2104 Retrieves matrix object from COS dictionary. @return Matrix object or null if not found
2105 Retrieves COS objects by specified types. @param type1 first object type @param type2 second object type @return List of COSObject instances matching the given types
2106 Initializes a PDInlineImage object from COSDictionary parameters, image data, and resources. @param parameters dictionary of image parameters @param data raw image bytes @param resources related PDF resources
2107 Converts character code to Unicode string representation. @param code character code point
2108 Checks if the attached document is encrypted. @return true if encrypted, false otherwise
2109 Parses the FDF document into an FDFDocument object. @throws IOException on parsing errors or resource leaks
2110 Initializes a new thread bead with default properties.
2111 Sets the application version in the dictionary. @param applicationVersion new version string to store
2112 Initializes linear measure dictionary with subtype set to SUBTYPE. @param None @return None
2113 Retrieves an Optional Content Group by name. @param name group identifier to search for @return PDOptionalContentGroup object or null if not found
2114 Retrieves a collection of optional content groups from the PDF document.
2115 Retrieves an iterable collection of pattern names. @return Iterable of COSName objects representing patterns
2116 Sets modified date of COS object. @param c Calendar object representing new modified date
2117 Sets document creation date. @param creationDate Calendar object representing new creation date
2118 Sets the sign date in the dictionary using the provided Calendar object. @param cal Calendar instance representing the sign date
2119 Concatenates key usage flags and adds them to the profile. @param digitalSignature whether for digital signature @param nonRepudiation whether for non-repudiation @param keyEncipherment whether for key encipherment @param dataEncipherment whether for data encipherment @param keyAgreement whether for key agreement @param keyCertSign whether for key certificate signing @param cRLSign whether for CRL signing @param encipherOnly whether for encipher only @param decipherOnly whether for decipher only
2120 Retrieves the parent outline node of this PDOutlineNode. @return Parent node as a PDDocumentOutline or PDOutlineItem, or null if no parent exists
2121 Retrieves the document outline from the PDF. @return PDDocumentOutline object or null if not found
2122 Initializes a new PDAction instance with default settings. @param TYPE predefined type of PDF action
2123 Initializes PDShadingPattern with default type.
2124 Initializes a new instance of the PDStructureTreeRoot class.
2125 Initializes a new PDStructureElement with specified type and parent node. @param structureType the element's type @param parent the parent node for this element
2126 Sets custom metadata value for specified field. @param fieldName name of the metadata field @param fieldValue new value to be assigned
2127 Initializes page label manager with a default decimal range. @param document PDDocument instance
2128 Updates the formatted value and notifies if changed. @param formattedValue new formatted string value
2129 Sets a string field in the underlying dictionary. @param name field name @param value new string value
2130 Updates user's name and potentially notifies observers of change. @param name new user name
2131 Parses a PDF file into a PDDocument object. @param lenient true to ignore parsing errors, false for strict parsing @return PDDocument object or throws IOException on error
2132 Sets modification date in XML metadata. @param date Calendar object representing new modification date
2133 Sets the creation date of an object. @param date Calendar instance representing the creation date
2134 Sets the creation date of an object. @param date Calendar instance representing the creation date
2135 Sets the embedded date in a COS dictionary. @param embedded COS object to update @param key name of date field @param date Calendar date value to set
2136 Sets the base value in the COS object. @param base new base string to store
2137 Initializes a new instance of PDTransition with default style (R). @param none
2138 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to be set
2139 Sets the default crypt filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary to be set as default
2140 Sets date to PDF metadata. @param key unique metadata key @param date calendar object representing date value
2141 Sets the style to the specified string value. @param s new style value
2142 Sets the value of the 'N' attribute in the user profile. @param name new value for the 'N' attribute
2143 Sets the top value in the array to a specified integer or null. @param y the new top value (-1 sets it to null)
2144 Initializes a new page destination with width fit. @param TYPE type of the destination (e.g., PDF)
2145 Sets the top value in the array to a specified integer or null. @param y the new top value (or -1 to set it to null)
2146 Sets the fit bounding box flag and updates the corresponding array element. @param fitBoundingBox true for bounded box, false otherwise
2147 Initializes PDPageXYZDestination object with default settings.
2148 Sets the left value with optional reset of underlying array size. @param x new left value or -1 to clear; if -1, array size is set to 5 and element at index 2 is cleared
2149 Sets the top value to the given integer or clears it if -1 is provided. @param y either an integer to set as top or -1 to clear it
2150 Sets the zoom factor and updates the underlying data structure. @param zoom zoom factor value (negative to clear)
2151 Sets the right value in the array to the specified integer. @param x the new right value (or -1 to clear it)
2152 Decrypts encrypted values within a dictionary for the specified object and generation numbers. @param dictionary COS dictionary to decrypt @param objNum object number @param genNum generation number
2153 Retrieves decode parameters from COS.
2154 Retrieves the FDF catalog, initializing a default one if not found. @return FDFCatalog object representing the document's catalog
2155 Sets the audio range of this component. @param range PDRange object containing audio range values
2156 Sets the B-range component of the device. @param range PDRange object representing the new value
2157 Retrieves decode parameters for the current object.
2158 Sets the bottom coordinate to the specified value. @param y new bottom value; -1 to remove existing value
2159 Sets the left value to a specified integer or clears it. @param x the new left value (-1 to clear)
2160 Initializes PDPageFitRectangleDestination object with default settings. @param array underlying data structure
2161 Sets rendering intent to specified value. @param ri Rendering Intent string
2162 Updates the named attribute with a new value. @param name attribute name @param value new attribute value
2163 Adds a new bead to the thread, linking it to adjacent beads. @param append PDThreadBead object to be appended
2164 Sets the first bead in a thread. @param bead bead to be set as the first item
2165 Inserts a new sibling after the current item. @param newSibling PDOutlineItem to insert
2166 Inserts a sibling item before this item in the outline. @param newSibling PDOutlineItem to insert
2167 Retrieves the appearance dictionary for the annotation, creating a new one if not present.
2168 Initializes a new Tiling Pattern object. @param none
2169 Retrieves the fractional space to allocate for a PDF page range. @return PDRange object with min and max values, or null if not set
2170 Initializes page fit destination with default values. @param array internal data structure
2171 Sets whether to include bounding box in the fit mode. @param fitBoundingBox true to include bounding box, false otherwise
2172 Initializes page destination with fixed height. @param array backing data structure
2173 Sets the left value to a specific integer. @param x the new left value (-1 to clear)
2174 Sets whether to include bounding box in the array. @param fitBoundingBox true to include bounding box, false otherwise
2175 Retrieves an iterable collection of extended graphics state names.
2176 Retrieves names of properties. @return iterable collection of COSName objects
2177 Retrieves standard cryptographic filter dictionary. @return PDCryptFilterDictionary object
2178 Retrieves an embedded string value from a COS dictionary. @param embedded COS object containing the embedded data @param key name of the desired string value @param defaultValue default value to return if key is not found @return the retrieved string value or the default value if not found
2179 Retrieves string value from PDF catalog by key. @param key unique key identifier @param defaultValue default value to return if not found @return string value or default value if not available
2180 Retrieves the units string from the COS object. @return The units string or null if not available
2181 Retrieves application version from configuration dictionary. @return Version string (e.g. "1.2.3") or null if not found
2182 Retrieves the base value from COS object. @return Base string value or null if not available
2183 Retrieves string value from COS object by name. @param name name of the string to retrieve
2184 Retrieves custom metadata value by field name. @param fieldName unique identifier of the field
2185 Retrieves string value of specified property. @param propertyKey unique key of property to fetch
2186 Creates and returns a PDAction object based on COS dictionary A.
2187 Retrieves and converts a PDF Action object from the COS dictionary. @return PDAction object or null if not found
2188 Retrieves a PDF Action object from the COS dictionary. @return PDAction object or null if not found in dictionary
2189 Retrieves a PDF action from COSDictionary 'C'. @return PDAction object or null if dictionary is empty
2190 Creates a PDAction object from the COSDictionary with name "O". @return PDAction object or null if not found
2191 Retrieves and converts COS dictionary 'C' to a PDAction object. @return PDAction object or null if dictionary is empty
2192 Retrieves the operation type (open/close) based on COSName.O parameter value. @return Operation type as string ("open" or "close")
2193 Retrieves a PDAction object from the 'V' dictionary. @return PDAction object or null if dictionary is empty
2194 Retrieves default appearance value from dictionary. @return string representation of default appearance or empty string if not found
2195 Retrieves the "On" value from widget appearance. @return COS name string or empty string if not found
2196 Returns the normal appearance stream from the user's dictionary. @return Normal appearance stream or null if not found
2197 Creates a DictionaryEncoding instance from the provided base encoding and differences. @param baseEncoding COSName of the base encoding @param differences COSArray of encoding differences
2198 Extracts and converts PDF content from provided file. @param pdfFile input PDF file as byte array @return extracted and converted PDF contents
2199 Retrieves the contents of a PDF file, applying filtering and conversion. @param pdfFile InputStream to the PDF file @return Filtered byte array representation or throws IOException on error
2200 Retrieves background color. @return Color of background element.
2201 Retrieves the border color of a PDF element. @return The color as a PDColor object
2202 Retrieves color value from COS dictionary. @return Color value as PDColor object
2203 Constructs fully qualified name by appending parent's name (if any) to partial name.
2204 Checks if a group with the given name exists. @param groupName name of the group to search for @return true if group is found, false otherwise
2205 Retrieves the file name using various platform-specific methods. @return the file name, or null if all methods fail
2206 Retrieves and creates a PDAction object from the 'F' dictionary. @return PDAction object or null if 'F' dictionary is not found
2207 Retrieves the 'K' action from the dictionary and converts it to a PDAction object. @return PDAction object or null if not found
2208 Creates and returns a PDAction object from the document's "DP" dictionary. @return PDAction object or null if "DP" dictionary is not found
2209 Returns the line dash pattern for this object. @return PDLineDashPattern instance or default if not set
2210 Verifies if the character set of a font matches the provided CID system info. @param cidSystemInfo CID system information @param info Font metadata @return true if sets match, false otherwise
2211 Retrieves a list of FDF annotations from the given document. @return List of FDFAnnotations or null if not found
2212 Returns the SecurityHandler instance associated with the ProtectionPolicy. @throws IOException if no security handler is configured
2213 Initializes PDEncryption instance with COSDictionary. @param dictionary COSDictionary object to initialize encryption
2214 Creates an object from the given COSBase, returning its value or null if invalid. @param kid COSBase to create object from
2215 Retrieves the parent node of a PDF structure element. @return Parent PDStructureNode object or null if none exists
2216 Checks if this collection has exactly one entry, which is its owner.
2217 Checks if the entity is an N-Channel. @return true if N-Channel, false otherwise
2218 Retrieves the open action from the PDF document. @return PDDestinationOrAction object or null if not found
2219 Retrieves the action associated with this field's COS dictionary. @return The action object or null if not found
2220 Creates a PDAction object from the WP dictionary. @return PDAction object or null if WP dictionary is not found
2221 Retrieves the Data Structure (DS) action from the PDF document. @return PDAction object representing the DS or null if not found
2222 Retrieves the Web Service action. @return a PDAction object or null if not found
2223 Retrieves WC (Work Content) action from the actions dictionary. @return PDAction object or null if not found
2224 Retrieves and converts the PDF's Processing Intent from a COS dictionary. @return PDAction object representing the intent or null if not found
2225 Retrieves the PV (Process Variable) action. @return PDAction object representing the PV or null if not found
2226 Retrieves a PC action from the dictionary. @return PDAction object or null if not found
2227 Retrieves the transparency group associated with this object. @return PDTransparencyGroup object or null if not found
2228 Retrieves PO (Purchase Order) action from dictionary. @return PDAction object or null if not found
2229 Retrieves FO (Forms Object) action from the dictionary. @return PDAction object or null if not found
2230 Retrieves and converts the 'U' dictionary into a PDAction object. @return PDAction object or null if 'U' dictionary is not found
2231 Creates a PDAction object from the 'd' dictionary. @return PDAction object or null if 'd' dictionary is not found
2232 Retrieves and converts the 'X' dictionary into a PDAction object.
2233 Creates and returns a PDAction object from the 'e' dictionary if found.
2234 Retrieves a PDAction instance based on COS dictionary F.
2235 Retrieves a map of JavaScript actions from the document. @return Map of action names to PDActionJavaScript objects or null if empty
2236 Retrieves the 'BL' action from the actions dictionary and creates a PDAction object if found. @return PDAction object or null if not found
2237 Validates and adjusts XREF table offset. @param startXRefOffset initial offset value
2238 Retrieves a named destination page. @param namedDest PDNamedDestination object @return PDPageDestination object or null if not found
2239 Retrieves the line dash pattern from the dictionary or initializes it with a default value. @return PDLineDashPattern object representing the line's dash pattern
2240 Initializes rubber stamp annotation with subtype. @param SUB_TYPE subtype of annotation (e.g., 'PD_ANNOTATION_RUBBER_STAMP')
2241 Initializes annotation polyline with subtype. @param SUB_TYPE subtype identifier
2242 Initializes annotation polygon with subtype. @param SUB_TYPE subtype value
2243 Writes a list of prepared objects to the specified COSStream. @param stream target COSStream
2244 Writes a COS dictionary to the specified OutputStream. @param output OutputStream to write the dictionary to @param cosDictionary COS dictionary to serialize
2245 Initializes a PDAnnotationLine object with subtype and line values.
2246 Initializes PDAnnotationInk with subtype name.
2247 Initializes annotation file attachment with subtype. @param SUB_TYPE subtype value
2248 Initializes an underline annotation with subtype. @see #SUBTYPE
2249 Initializes a new strikeout annotation with subtype.
2250 Initializes an FDFAnnotationSquiggly object with subtype. @param SUBTYPE annotation subtype (e.g., "Text")
2251 Initializes FDFAnnotationHighlight with subtype. @param SUBTYPE annotation subtype
2252 Removes a child element from the PDStructureElement. @param structureElement PDStructureElement to remove kid from @return true if removal was successful, false otherwise
2253 Initializes a square circle annotation with the specified subtype. @param subType subtype of the annotation
2254 Initializes a new PDAnnotationTextMarkup object with specified subtype. @param subType annotation subtype (e.g. "Highlight", "Stamp")
2255 Retrieves a list of PDF annotation widgets associated with this object.
2256 Retrieves the annotation popup object from the PDF document. @return PDAnnotationPopup object or null if not found
2257 Constructs a PDAnnotationTextMarkup object from a COS dictionary. @param field COS dictionary containing text markup annotation data
2258 Constructs a PDAnnotationText instance from a COS dictionary. @param field COS dictionary containing annotation text data
2259 Initializes a new instance of PDAnnotationSquareCircle from a COS dictionary. @param dict COS dictionary containing annotation data
2260 Constructs a new PDAnnotationSound instance from the given COS dictionary.
2261 Constructs a PDAnnotationRubberStamp object from a COSDictionary field.
2262 Initializes a polyline annotation from a COS dictionary.
2263 Constructs a PDAnnotationPolygon object from a COS dictionary. @param dict COS dictionary containing polygon data
2264 Initializes PDAnnotationLine with COS dictionary. @param field COSDictionary to initialize from.
2265 Constructs a PDAnnotationInk object from a COS dictionary. @param dict COS dictionary containing annotation ink data
2266 Constructs a PDAnnotationFreeText instance from the given COS dictionary. @param field COS dictionary representing the annotation's properties.
2267 Initializes a new PDAnnotationFileAttachment instance from COS dictionary. @param field COS dictionary containing annotation file attachment data
2268 Constructs a PDAnnotationCaret from a COS dictionary. @param field COS dictionary containing caret annotation data
2269 Initializes PD annotation text with subtype. @param SUB_TYPE subtype identifier (e.g., 'Text')
2270 Inserts a new PDStructureElement before the specified reference element. @param newKid the new element to be inserted @param refKid the existing element to insert before
2271 Adds a new kid element to the current PDStructureElement. @param structureElement kid element to be appended
2272 Retrieves PDF file specification from COS dictionary. @return PDFileSpecification object or null if not found
2273 Creates a PDImageXObject from a single-bit black-and-white BufferedImage. @param document PDDocument instance @param image BufferedImage to convert (1-bit b/w only) @return PDImageXObject object or null on failure
2274 Initializes the page tree with the given COS dictionary as root node.
2275 Returns a tree of pages from the COS dictionary.
2276 Validates the page structure in the COSDictionary. @param root The COSDictionary to check.
2277 Retrieves the encoding values as a COSArray.
2278 Initializes PDFunctionType2 with a COS-based function. @param function the input function
2279 Retrieves revisions of attribute objects. @return Revisions collection containing attribute objects and revision numbers
2280 Retrieves value associated with the given name. @param name unique identifier of the value to fetch @return Value object of type T, or null if not found
2281 Performs a brute-force search for the trailer dictionary in the COS stream. @param trailer the trailer dictionary to search for @return true if the trailer is found, false otherwise
2282 Searches for trailer items in the document and populates them into the provided COSDictionary. @param trailer dictionary to populate with trailer items @return true if at least one trailer item was found, false otherwise
2283 Sets an attribute on the PDF object. @param attrName unique attribute name @param attrValue new value for the attribute
2284 Retrieves the file specification from the PDF action. @return PDFileSpecification object or null if not found
2285 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found
2286 Creates and returns a PDFileSpecification object based on dictionary data. @return PDFileSpecification object or null if creation fails
2287 Retrieves file specification from COS object. @return PDFileSpecification object or null if not found
2288 Retrieves the file specification from the action. @return PDFileSpecification object or null if not found
2289 Retrieves file specification from COS object. @return PDFileSpecification object or null if not found
2290 Creates and returns a PD file specification object.
2291 Initializes PDPatternContentStream with tiling pattern and resources. @param pattern PDTilingPattern instance
2292 Retrieves a list of embedded FDFs from the PDF file. @return List of PDFileSpecifications or null if not found
2293 Retrieves PDF file specification from document dictionary. @return PDFileSpecification object or null if not found
2294 Returns the latest version information from either the document or catalog. @return The maximum of the two versions (or just the document version if 1.4 is not reached)
2295 Sets the conversion factor as a float value in COS object. @param conversionFactor new conversion factor value
2296 Sets the intensity value in the COS object. @param i float representing the new intensity level
2297 Updates a float value in the PDF dictionary. @param name unique key for the value @param value updated numerical value
2298 Retrieves file specification from PDF document dictionary. @return PDFileSpecification object or null if not found
2299 Retrieves print scaling preference value. @return string representation of print scaling setting
2300 Retrieves print area name as a string.
2301 Sets the Mac creator string. @param macCreator the Mac creator value to set
2302 Creates a view of the underlying data with optional filtering. @return filtered RandomAccessRead object or buffer if no filters are applied
2303 Retrieves the minimum revision from the dictionary. @return Minimum revision value as a Long.
2304 Retrieves the revision number from the dictionary. @return Revision number as a long integer value
2305 Retrieves a list of next-level actions in the PDF structure. @return List of PDAction objects or null if not found
2306 Extracts signed content from a PDF file. @param pdfFile input PDF byte array @return signed content as byte array or null if not found
2307 Sets the MAC resource fork value. @param macResFork string value to set
2308 Constructs a PDCIEDictionaryBasedColorSpace object from a COSArray. @param rgb COSArray containing color space data
2309 Retrieves the decode range for a given parameter. @param paramNum unique parameter identifier @return PDRange object or null if not found
2310 Initializes ShadingContext with provided parameters. @param shading PDShading object to be processed @param cm ColorModel for output @param xform AffineTransform for transformation @param matrix Transformation matrix
2311 Extracts signed content from a PDF file. @param pdfFile input stream containing the PDF data @return byte array representing the signed content or null on failure
2312 Returns default PDCryptFilterDictionary instance.
2313 Sets the MAC subtype in the PDF document's parameters dictionary. @param macSubtype unique identifier for a MAC type
2314 Retrieves and returns a float value associated with the given COS object key. @param name COS object key
2315 Retrieves the base state from the COS dictionary. @return BaseState enum value or null if not found
2316 Adds a user group to the PDF document. @param ocg PDOptionalContentGroup object to add
2317 Initializes a DictionaryEncoding instance from the provided COSDictionary. @param fontEncoding COS dictionary containing font encoding information
2318 Retrieves a floating-point value from COS object by name. @param name name of the value to retrieve @param defaultValue default value if not found @return the retrieved value or the specified default
2319 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null to reset
2320 Retrieves CYX value from COS object. @return CYX value as a float
2321 Retrieves leader offset value. @return Leader offset in units of measurement.
2322 Retrieves leader extend value from annotation. @return Leader extend value as a float.
2323 Retrieves the leader length value from annotations. @return Leader length as a floating-point number.
2324 Retrieves the conversion factor from COS data. @return Conversion factor value as a float
2325 Sets the label prefix string on the COS object. @param labelPrefixString new label prefix value
2326 Parses a directory object from the input stream.
2327 Retrieves the value of 'V' from the dictionary. @return the float value associated with key V or 0 if not found
2328 Enables or disables a PDOptionalContentGroup. @param group the group to enable/disable @param enable true to enable, false to disable @return true if group was modified, false otherwise
2329 Sets the decimal separator for numeric data. @param decimalSeparator new decimal separator value (e.g. '.')
2330 Creates PDRange object for output based on given index 'n'. @param n output index
2331 Clips input values to the specified ranges. @param inputValues array of float values to clip
2332 Returns the number of input parameters. Calculates and caches result if not previously determined.
2333 Returns a PDRange object representing the domain values based on input 'n'. @param n input value
2334 Calculates sample index from a vector and size values. @param vector input vector
2335 Retrieves the decode range for a given parameter index. @param paramNum unique parameter index @return PDRange object or null if invalid
2336 Calculates the number of output parameters. @return Number of output values, or 0 if unable to determine
2337 Creates a PDRange object for encoding a parameter value. @param n input value to be encoded
2338 Checks if attachment type is "Top".
2339 Checks if the bottom attachment is present.
2340 Checks if left attachment is present. @return true if left attachment exists, false otherwise
2341 Checks if right attachment is present. @return true if attached, false otherwise
2342 Initializes PDCIDFont object with given COS dictionary and PDType0Font parent. @param fontDictionary COS dictionary for the font @param parent PDType0Font parent of the CID font
2343 Sets the thousand separator to use in numeric formatting. @param thousandsSeparator string representation of the thousands separator (e.g. ",")
2344 Retrieves a value by index from the internal data structure or child nodes. @param index unique identifier for the value to retrieve @return Object representing the retrieved value or null if not found
2345 Retrieves a PDF Type 3 character procedure by code. @param code the character code to fetch @return PDType3CharProc object or null if not found
2346 Retrieves rollover appearance from the PDF dictionary. @return PDAppearanceEntry object or normal appearance if not found
2347 Retrieves down-appearance entry from the dictionary. @return DownAppearanceEntry object or normal appearance if not found
2348 Retrieves the last child outline item. @return The last child PDOutlineItem or null if none exist.
2349 Returns the signature associated with this object. @return PDSignature object representing the signature
2350 Initializes DictionaryEncoding with font encoding, non-symbolic flag and built-in encoding. @param fontEncoding COSDictionary containing font encoding @param isNonSymbolic true for nonsymbolic fonts, false otherwise @param builtIn built-in encoding to use (null for symbolic fonts)
2351 Parses field XML and populates an FDFField object. @param fieldXML containing the field data
2352 Returns the first child outline item. @return The first child PDOutlineItem or null if none exist
2353 Updates integer value in dictionary object. @param name key to update @param value new integer value
2354 Constructs an Optional Content Group with the specified name. @param name unique identifier of the content group
2355 Sets the denominator value in the underlying COS object. @param denominator new denominator value
2356 Retrieves the name of an attachment.
2357 Retrieves icon string from annotation.
2358 Retrieves the guideline style from the dictionary. @return The solid guideline style string or null if not found
2359 Retrieves name as string using COSName service. @param key unique identifier @param defaultValue default value to return if not found
2360 Retrieves the properties of a PDF object by name. @param name COSName identifier for the PDF object @return PDPropertyList containing object properties or null if not found
2361 Retrieves date from embedded dictionary or returns default value. @param embedded embedded dictionary to search @param key date key to fetch @param defaultValue Calendar object to return if not found
2362 Retrieves the optional content from the COS dictionary. @return PDPropertyList object representing the optional content or null if not found
2363 Retrieves calendar date by PDF name. @param key PDF name of date to fetch @param defaultValue default calendar value if not found @return Calendar object or defaultValue if unknown
2364 Retrieves the value of 'N' from an Action instance. @return String representation of 'N' or null if not found
2365 Updates the integer value associated with a given name in the underlying dictionary. @param name unique identifier for the value @param value new integer value to set
2366 Retrieves the rendering intent from dictionary, or returns null if not found. @return RenderingIntent object representing formatting or color mode.
2367 Retrieves print clip value from preferences under CropBox boundary. @return Clip string or null if not found
2368 Sets the label suffix string value in COS. @param labelSuffixString new label suffix string value
2369 Retrieves COS object name as a string. @param name input name to fetch (optional)
2370 Retrieves the Optional Content property list, or null if not found.
2371 Retrieves the optional content dictionary as a PDPropertyList object. @return PDPropertyList representation of optional content or null if absent
2372 Retrieves the highlight mode setting as an inverted color string.
2373 Retrieves the line ending style. @return Line ending style (e.g. "none", "macintosh", etc.)
2374 Retrieves the user's name from the COS object. @return The user's name as a string or null if not found
2375 Retrieves intensity value from COS object. @return intensity value or 0 if not found
2376 Calculates the font height of a given PDFont object. @param font PDFont to compute height for @return calculated font height in points
2377 Retrieves view clip string from preferences. @return View clip value or null if not set
2378 Retrieves the view area as a string. @return View area name or null if not found
2379 Retrieves reading direction as a string.
2380 Retrieves non-full screen page mode preference value.
2381 Retrieves motion name from COS object. @return Motion name as string or null if not available
2382 Retrieves the dimension name from the COS object.
2383 Retrieves reply type from COS object. @return reply type string or null if not set
2384 Retrieves the transition style from the COS object. @return transition style as string or null if not available
2385 Returns the type of ExData object. @return Type as string or default value if not found
2386 Returns default position vector for given CID. @param cid unique content identifier
2387 Retrieves style name as a string. @return Style name (e.g., "solid") or null if not found
2388 Retrieves highlighting mode from COS object. @return Highlighting mode as string ("H" or "I")
2389 Retrieves the name of the COS object. @return name as a string or null if not found
2390 Retrieves a list of OCs (Optional Content Groups).
2391 Calculates the valid repair length of a font segment. @param bytes byte array containing font data @param length1 initial length value to validate @return corrected length or original length if invalid
2392 Retrieves decimal separator symbol from COS configuration. @return decimal separator symbol (e.g. ".") or null if not set
2393 Parses a COS array from the input stream.
2394 Sets value to on state.
2395 Checks if the value is equal to the on value. @return true if the value matches the on state, false otherwise
2396 Retrieves a set of 'on' values from export values and annotation widgets. @return Set of string values or empty set if none found
2397 Adds fonts from a PDAnnotation to the AcroForm's resources. @param acroFormResources resources to update @param annotation annotation containing font resources
2398 Retrieves appearance stream from given PDAnnotation. @param annotation PDAnnotation object to fetch appearance from
2399 Initializes a new parser instance from the given PDF COS stream. @param stream input PDF COS stream
2400 Parses document into PDDocument object. @return parsed PDDocument object
2401 Calculates and returns the effective repair length. @param bytes byte array to consider @param length1 first length value @return minimum of requested Length2 or maximum possible length
2402 Retrieves an embedded string from the given COSName using the specified key. @param embedded the COSName containing the embedded string @param key the name of the embedded string to retrieve
2403 Finds index of specified PDPage within the document tree. @param page PDPage object to search for @return Index of page or -1 if not found
2404 Retrieves label position to value string from COS object. @return Label position to value string or null if not found.
2405 Retrieves label suffix string from COS.
2406 Retrieves encoded range for a given parameter number. @param paramNum parameter index @return PDRange object or null if not enough encode values
2407 Retrieves a COSDictionary representing the specified 1-based page number. @param pageNum target page number @param node current directory to search from @param encountered count of pages already processed
2408 Retrieves the label prefix string from COS. @return The PS value or default space character if not set.
2409 Retrieves the thousands separator from the COS configuration. @return thousands separator as a string (e.g. ",")
2410 Loads an FDF document from the given InputStream. @param input stream containing FDF data @return loaded FDFDocument object or null on error
2411 Loads an FDF document from a file. @param file the file containing the FDF data @return the loaded FDFDocument object or throws IOException if failed
2412 Fetches font matches for the given PDFontDescriptor. @param fontDescriptor the descriptor of the target font @param cidSystemInfo CID system info to filter by (null for no filtering) @return a priority queue of FontMatch objects
2413 Encodes a BufferedImage into a PDImageXObject. @throws IOException if an I/O error occurs
2414 Initializes PDAnnotationHighlight with subtype.
2415 Updates the document's version, ensuring it cannot be downgraded. @param newVersion the new version to set (must be >= current version)
2416 Creates a new PDDocument instance with settings from the source document. @return A new PDDocument object or null if creation failed.
2417 Retrieves the document catalog's page tree. @return PDPageTree object representing the page hierarchy
2418 Initializes a new instance of the PDAnnotationSquiggly class. @param SUB_TYPE annotation type
2419 Enables or disables a group by its name. @param groupName unique group identifier @param enable true to enable, false to disable @return true if the group was found and updated, false otherwise
2420 Initializes PDActionURI with default subtype.
2421 Initializes a new PDActionThread instance with subtype set to SUB_TYPE.
2422 Initializes action submit form with subtype.
2423 Initializes a new instance of PDActionSound with default subtype.
2424 Adds a child item to this outline, updating sibling relationships. @param newChild the PDOutlineItem to append
2425 Adds a new child item at the beginning of this outline. @param newChild the PDOutlineItem to prepend
2426 Checks whether the specified group is enabled. @param group PDOptionalContentGroup object @return true if enabled, false otherwise
2427 Initializes PDAnnotationStrikeout with specified subtype. @param SUB_TYPE annotation subtype identifier
2428 Initializes PDAnnotationUnderline with specified subtype. @see #SUB_TYPE
2429 Constructs a PDAnnotationCircle from a COS dictionary.
2430 Draws a clouded rectangle or ellipse with specified bounds and intensity. @param left left boundary @param bottom bottom boundary @param right right boundary @param top top boundary @param isEllipse true to draw an ellipse, false for a rectangle
2431 Creates a cloudy polygon from the provided 2D path data. @param path 2D float array representing polygon vertices
2432 Initializes an instance of PDAnnotationUnderline from a COS dictionary.
2433 Initializes a strikeout annotation from a COS dictionary. @param dict COS dictionary containing strikeout annotation data
2434 Constructs a PDAnnotationSquiggly object from a COS dictionary. @param dict the COS dictionary containing annotation data
2435 Constructs a PDAnnotationHighlight instance from a COSDictionary. @param dict COS dictionary containing highlight annotation data
2436 Initializes a new instance of PDLab with specified COSArray. @param lab COSArray containing lab data
2437 Initializes PDCalRGB with RGB color values from COS array. @param rgb COSArray containing RGB color data
2438 Constructs a PDCalGray object from a COSArray. @param array COSArray containing data to initialize this object.
2439 Initializes PDLab with default COSName.
2440 Initializes PDCalRGB object with default COS name.
2441 Initializes a new PDCalGray instance with default properties. @param COSName CALGRAY constructor name
2442 Initializes a square annotation from a COS dictionary. @param field COSDictionary containing annotation data.
2443 Initializes a new reset form action with default subtype.
2444 Initializes remote goto action with subtype. @see #setSubType(int)
2445 Initializes named action with subtype.
2446 Initializes a new movie action with specified subtype. @param SUB_TYPE subtype identifier
2447 Adds a PDShading object as a named resource. @param shading PDShading object to be added
2448 Sets value at specified export field index. @param index export field index (0-based)
2449 Adds extended graphics state to the PDF document. @param extGState ExtendedGraphicsState object
2450 Adds a color space to the PDF document. @param colorSpace color space object
2451 Adds a PDF font to the COSName dictionary. @param font PDFont object representing the font to add
2452 Sets the border line style and width. @param lineWidth requested border line width @param bs border style dictionary or null for manual style @param border COS array representing dash pattern or null
2453 Sets the destination of a PDF page. @param page PDPage object to configure
2454 Reads the encoding information from the font dictionary. @throws IOException if missing required CMap or other encoding errors
2455 Adds a new abstract pattern to the COSName. @param pattern PDAbstractPattern object to be added
2456 Adds a property list to the COS name. @param properties PDPropertyList object to add
2457 Adds a PDF Form XObject.
2458 Initializes a new PDActionLaunch instance with subtype. @param SUB_TYPE predefined subtype value
2459 Initializes a new JavaScript action with default subtype.
2460 Initializes import data action with sub-type.
2461 Initializes action to hide an entity. @param SUB_TYPE subtype identifier (hidden)
2462 Initializes GoTo action with subtype.
2463 Initializes an embedded "Go to" action with predefined subtype.
2464 Initializes the PDPageLabels object by parsing the given COSDictionary. @param document PDDocument instance @param dict COSDictionary containing page label information
2465 Retrieves the default user appearance entry from the dictionary. @return PDAppearanceEntry object or a newly created one if not found
2466 Retrieves rollover appearance entry from the appearance dictionary. If it's a sub-dictionary, creates a new entry and updates the dictionary.
2467 Retrieves date value from embedded calendar. @param embedded calendar containing date information @param key name of the date field
2468 Retrieves the down appearance entry from the dictionary, or creates a new one if sub-dictionary.
2469 Adds XObject to COSName with specified prefix. @param xobject PDXObject instance @param prefix name prefix
2470 Adds an image XObject to the PDF document. @param image PDImageXObject object representing the image
2471 Retrieves fractional display string from COS object. @return Fractional display string or null if not available
2472 Retrieves the start value from the configuration. @return The numeric start value (defaulting to 1 if not set)
2473 Retrieves the count of items stored in the database. @return The item count or 0 if not available.
2474 Checks if a specified bit flag is set in the given COSName field value. @param field COSName field to check @param bitFlag target bit flag to search for @return true if the bit flag is set, false otherwise
2475 Retrieves integer value from COS dictionary by key. @param key unique identifier @param defaultValue default integer value to return if not found @return integer value or defaultValue if not present in COS dictionary
2476 Retrieves integer value associated with the given COSName key. @param key COSName object representing the key to fetch
2477 Retrieves integer value associated with the given PDF name. @param key string identifier
2478 Retrieves an integer value from a dictionary or returns the default value. @param embeddedDictionary COS dictionary to query @param key name of the desired integer value @param defaultValue integer to return if key is not found in dictionary
2479 Retrieves the order value from COS. @return current order value (defaulting to 1 if not set)
2480 Checks if the window should be centered. @return true if window should be centered, false otherwise
2481 Checks if window should be resized to fit content. @return true if fitted, false otherwise
2482 Checks if menubar should be hidden based on user preferences. @return true if menubar should be hidden, false otherwise
2483 Checks whether toolbar should be hidden. @return true if toolbar should be hidden, false otherwise
2484 Checks if the fly area is opaque. @return true if opaque, false otherwise
2485 Retrieves whether need appearances setting is enabled. @return true if enabled, false otherwise
2486 Retrieves trusted mode status from configuration. @return true if trusted mode is enabled, false otherwise
2487 Checks if document title should be displayed. @return true if enabled, false otherwise
2488 Retrieves non-E font no warn flag value from dictionary. @return true if set, false otherwise
2489 Retrieves the revision number of the COS object. @return Revision number as an integer
2490 Retrieves version number from configuration dictionary. @return version number or default value if not available
2491 Retrieves annotation index from dictionary. @return index value or -1 if not found
2492 Retrieves flags value from underlying data. @return integer flag value or default 0 if not available
2493 Retrieves flags value from user's action. @return integer flag value or 0 if not set
2494 Calculates the number of bits per coordinate. @return the number of bits or -1 if not initialized
2495 Retrieves the number of bits per color component. @return Bits per color component value or -1 if not set
2496 Retrieves the number of vertices per row from COS object. @return The number of vertices per row or -1 if not found
2497 Retrieves the number of bits per flag. @return The number of bits per flag or -1 if not found
2498 Creates a PDShading object based on the provided COSDictionary. @param shadingDictionary dictionary containing shading parameters
2499 Retrieves the length of the cryptographic filter dictionary. @return Length value (default is 40)
2500 Retrieves the tiling type from the underlying COS object. @return Tiling type value or default (0) if not found
2501 Creates a PDAbstractPattern instance based on the provided dictionary. @param dictionary COSDictionary containing pattern data @param resourceCache ResourceCache for pattern resources @return PDAbstractPattern object or throws IOException for unknown type
2502 Retrieves and caches user flags value. @return cached user flags integer or loaded from dictionary if not cached
2503 Retrieves justification text based on Q annotation value. @return Justification string or empty string if not set
2504 Retrieves and returns user permissions from the dictionary. @return integer value representing user permissions or default 0 if not found.
2505 Retrieves the revision number from the dictionary. @return Revision integer value or default version if not found
2506 Retrieves the length value from the dictionary. @return integer length value or default 40 if not found
2507 Retrieves paint type from COS object. @return integer representing paint type or default value 0 if not found
2508 Retrieves annotation flags from underlying COS object. @return integer value of annotation flags
2509 Retrieves pre-release status from configuration. @return true if application is in pre-release mode, false otherwise
2510 Checks if document has a caption. @return true if caption exists, false otherwise
2511 Creates a BufferedImage from the given PDImage, clipping it to the specified region and applying subsampling. @param pdImage source image @param region rectangle to clip to @param subsampling factor to apply when resizing @param colorKey optional color key array (null for default decoding) @return resulting BufferedImage or throws IOException on error
2512 Creates a WritableRaster from the given PDImage. @param pdImage input image data @return raw raster representation or throws exception on failure
2513 Retrieves the stencil image associated with this object. @param paint Paint object used for rendering @return BufferedImage representing the stencil or null if not applicable
2514 Calculates and returns the scaled anchor rectangle for a tiling pattern. @param pattern the tiling pattern to calculate from
2515 Creates a BufferedImage representation of the given tiling pattern. @param drawer PageDrawer instance to use for rendering @param pattern PDTilingPattern object describing the pattern @param colorSpace PDColorSpace object defining the color space @param color PDColor object specifying the fill color @param xform AffineTransform object representing device scale transform (DPI) @param anchorRect Rectangle2D bounding box for the image @return BufferedImage object containing the rendered pattern, or null on failure
2516 Parses stamp annotation appearance XML and populates a COSDictionary. @param appearanceXML XML element to parse
2517 Retrieves whether PDF is open. @return true if PDF is open, false otherwise
2518 Retrieves the resources associated with a page. @return PDResources object or null if not initialized
2519 Calculates the page rotation angle in degrees. @return Rotation angle (0-360) or 0 if not set
2520 Retrieves the mix state from the action. @return true if mix is enabled, false otherwise
2521 Retrieves repeat flag value from COS. @return true if repeat is enabled, false otherwise
2522 Checks if action is synchronous. @return true if synchronous, false otherwise
2523 Retrieves the value of H property from action. @return boolean value of H property or default value (true) if not set
2524 Retrieves text knockout flag from dictionary. @return true if enabled, false otherwise
2525 Checks Alpha Source flag in dictionary. @return true if flag is set, false otherwise
2526 Returns whether automatic stroke adjustment is enabled. @return true if enabled, false otherwise
2527 Retrieves stroking overprint control value from dictionary. @return true if enabled, false otherwise
2528 Retrieves the page's media box dimensions. @return PDRectangle object representing the media box or a default (U.S. Letter) if not found
2529 Retrieves anti-aliasing setting from configuration. @return true if anti-aliasing is enabled, false otherwise
2530 Checks if isolation mode is enabled.
2531 Checks whether to rename based on template setting. @return true if renaming is enabled, false otherwise
2532 Determines whether to scale annotation based on 'Fit' property. @return true if 'Fit' is set to 'ByWidth', false otherwise
2533 Retrieves caption value from annotation. @return true if caption is present, false otherwise
2534 Checks if metadata encryption is enabled.
2535 Checks if an object is hidden. @return true if hidden, false otherwise
2536 Checks if the file system attribute 'volatile' is set. @return true if volatile, false otherwise
2537 Retrieves boolean value from PDF document using provided key. @param key unique key to identify the value @param defaultValue default boolean value if not found
2538 Checks if knockout flag is set. @return true if knockout flag is enabled, false otherwise
2539 Retrieves the Q value from the COS object. @return The Q value as an integer (defaulting to 0 if not found)
2540 Checks if the window UI should be hidden. @return true if UI should be hidden, false otherwise
2541 Checks if timestamp is required based on configuration value. @return true if timestamp is required, false otherwise
2542 Sets a flag for the specified COSName field. @param field COSName field to modify @param bitFlag bitwise flag value to set or clear @param value true to set, false to clear the flag
2543 Initializes the parser with a COSStream and COSDocument, validating mandatory entries. @param stream COSStream to parse @param document COSDocument associated with the stream
2544 Initializes a PDCIDFontType0 object from the given COS dictionary and parent type 0 font. @param fontDictionary the font's COS dictionary @param parent the parent type 0 font
2545 Initializes a PDCIDFontType2 object from the provided font dictionary and parent PDType0Font. If a TrueTypeFont is provided, it is used; otherwise, the font is fetched or substituted if necessary. @param fontDictionary COSDictionary representing the font @param parent PDType0Font parent font @param trueTypeFont optional TrueTypeFont object (if null, font will be fetched or substituted)
2546 Parses a COSBase into a CMap. @param base COSName for predefined CMap or COSStream for embedded CMap @return CMap object or throws IOException if invalid input
2547 Retrieves page rotation value from COS object. @return Rotation angle in degrees (default: 0)
2548 Writes the PDF body, including trailer objects and encryption information. @param doc COSDocument object containing the PDF data
2549 Retrieves COS object name as string with default value fallback. @param name COS object name to retrieve (optional) @param defaultValue default value to return if name is null or empty @return COS object name or default value if name is invalid
2550 Returns the current UI style as a string. @return "solid" or other valid styles (e.g. "dashed")
2551 Retrieves the top-level tree root of a structure hierarchy. @return PDStructureTreeRoot object or null if not found
2552 Retrieves a list of child objects from the current COS object. @return List of child Object instances or empty list if none found
2553 Returns PDEncryption object, generating it if necessary and encrypted.
2554 Prepares encryption settings and security handlers for decryption. @throws IOException if an I/O error occurs during the process
2555 Initializes Type1ShadingContext with specified parameters. @param shading PDShadingType1 object @param colorModel ColorModel for rendering @param xform AffineTransform to apply @param matrix Matrix for transformation
2556 Retrieves the page number from the dictionary. @return page number or -1 if not found
2557 Returns the color space with the given name. @param name COSName identifier of the color space
2558 Retrieves and returns the top index value from the COS object.
2559 Retrieves COS objects by specified type. @param type COS object type to filter by
2560 Retrieves an embedded file from the dictionary as a Unicode stream. @return PDEmbeddedFile object or null if not found
2561 Retrieves a Mac OS embedded file from the object dictionary. @return PDEmbeddedFile object or null if not found
2562 Retrieves the embedded DOS file from the EF dictionary. @return PDEmbeddedFile object or null if not found
2563 Removes page-specific resources from the cache.
2564 Retrieves the embedded file from the PDF dictionary. @return PDEmbeddedFile object or null if not found
2565 Retrieves open count from COS object. @return current open count value
2566 Retrieves a Unix embedded file from the document. @return PDEmbeddedFile object or null if not found
2567 Retrieves the value of Q from the dictionary. @return integer value associated with COSName.Q or 0 if not found
2568 Initializes AxialShadingContext with given parameters. @param shading PDShadingType2 object containing axial shading data @param colorModel ColorModel used in context @param xform AffineTransform for user/device space conversion @param matrix Matrix representing device transformation @param deviceBounds Rectangle defining device bounds
2569 Initializes triangle-based shading context with given parameters. @param shading PDShading object to use for shading @param cm ColorModel instance for color management @param xform AffineTransform to apply to the scene @param matrix Matrix representing the transformation
2570 Initializes RadialShadingContext with specified parameters. @param shading radial shading type @param colorModel color model @param xform transform to device space @param matrix matrix for transformation @param deviceBounds bounding box of the device
2571 Sets whether sub-filter is required. @param flag true to require sub-filter, false otherwise
2572 Sets locked contents flag on COS object. @param lockedContents true to lock contents, false otherwise
2573 Sets toggle flag to control view visibility. @param toggleNoView true to hide, false to show
2574 Prepares a document for encryption by initializing the encryption dictionary, generating a key and seed, and computing recipients fields. @param doc the PDDocument to prepare
2575 Sets flag to indicate if contents are locked. @param lockedContents true if contents are locked, false otherwise
2576 Sets legal attestation requirement flag. @param flag true to require legal attestation, false otherwise
2577 Sets the invisibility flag of the COS object. @param invisible true to make the object invisible
2578 Sets the visibility flag of the COS object. @param hidden true to hide, false to show
2579 Sets whether a document is printed or not. @param printed true to mark as printed, false otherwise
2580 Sets whether to disable zooming in the PDF viewer. @param noZoom true to prevent zooming, false otherwise
2581 Sets whether filter is required. @param flag true to require filter, false otherwise
2582 Sets whether reason is required. @param flag true to require reason, false otherwise
2583 Sets the rotation flag. @param noRotate true to disable rotation, false otherwise
2584 Sets the "no view" flag on the COS object. @param noView true to restrict viewing of the object
2585 Sets whether video is required. @param flag true if video is required, false otherwise
2586 Sets whether digest method is required in PDF file. @param flag true to require, false otherwise
2587 Sets document read-only flag. @param readOnly true to enable read-only mode, false otherwise
2588 Sets document locking status. @param locked true to lock, false to unlock
2589 Draws a PDInlineImage at the specified position and size. @param inlineImage image to draw @param x x-coordinate of the image @param y y-coordinate of the image @param width image width @param height image height @throws IOException if an I/O error occurs
2590 Sets the current font and size for PDF output. @param font current font to use @param fontSize new font size in points
2591 Sets whether to include revision information in the PDF. @param flag true to require add rev info, false otherwise
2592 Draws a cloudy ellipse with adjustable intensity and line width. @param leftOrig initial left position of the ellipse @param bottomOrig initial bottom position of the ellipse @param rightOrig initial right position of the ellipse @param topOrig initial top position of the ellipse
2593 Creates a cloudy rectangle based on the provided PDRectangle. @param rd input rectangle data
2594 Sets issuer required flag in the certificate dictionary. @param flag true to require issuer, false otherwise
2595 Sets whether subject is required in form. @param flag true to require subject, false otherwise
2596 Creates a PDAnnotation object based on the provided COSBase. @param base COS dictionary representing the annotation @return PDAnnotation object or null if unknown subtype
2597 Sets OC properties and updates the document version if necessary. @param ocProperties PDOptionalContentProperties object to set
2598 Writes PDF document header with version number. @param doc COSDocument object
2599 Creates a new document if necessary, based on current page number or missing document.
2600 Initializes a new instance of the PDFRenderer class. @param document PDDocument object containing the PDF to render
2601 Initializes a PDF printable object from a PDDocument. @param document PDDocument instance @param scaling Scaling options for the printout @param showPageBorder whether to display page borders @param dpi dots per inch resolution @param center whether to center content on each page @param renderer PDFRenderer used for rendering pages
2602 Updates destinations in the given PDDocument to point to existing pages. @param destinationDocument PDDocument to update
2603 Checks if an optional content group is enabled in the document. @param group PDOptionalContentGroup object to check
2604 Initializes JavaScript action with the given script. @param js the JavaScript code to execute
2605 Retrieves page labels from PDF document. @return PDPageLabels object or null if not found
2606 Draws a form object on the page. @param form PDFormXObject to be drawn
2607 Draws an image on the graphics context using a specified transformation. @param image PDImageXObject to draw @param matrix AffineTransform object for scaling and rotation
2608 Draws an image at specified coordinates with given dimensions. @param image the image to draw @param x the x-coordinate of the top-left corner @param y the y-coordinate of the top-left corner @param width the width of the image @param height the height of the image
2609 Sets marked content point with properties. @param tag COSName identifier for the operation @param propertyList PDPropertyList containing additional properties
2610 Begins marked content sequence in PDF document. @param tag COSName for the marked content sequence @param propertyList PDPropertyList containing resources and properties
2611 Performs shading fill operation using the provided PDShading object. @param shading PDShading object to apply
2612 Sets graphics state parameters. @param state PDExtendedGraphicsState object containing new parameters
2613 Checks if a group with the specified name is enabled. @param groupName unique group identifier @return true if group is enabled, false otherwise
2614 Increments the revision number by one.
2615 Sets flag to enable or disable appending only mode. @param appendOnly true to enable, false otherwise
2616 Sets sorting flag on COS object. @param sort true to enable sorting, false otherwise
2617 Sets flag to enable or disable multi-select functionality. @param multiSelect true to allow multiple selections, false otherwise
2618 Sets flag to disable spell checking. @param doNotSpellCheck true to disable spell checking
2619 Sets flag to enable or disable auto-commit on selection change. @param commitOnSelChange true to enable, false otherwise
2620 Sets the Combo flag in the COS object. @param combo true to enable, false to disable
2621 Sets the "edit" flag on the COS object. @param edit true to enable editing, false otherwise
2622 Sets the read-only flag on the underlying dictionary. @param readonly true to enable read-only mode, false otherwise
2623 Sets whether a field is required or not. @param required true if the field is mandatory, false otherwise
2624 Sets the export flag based on the provided boolean value. @param noExport true to prevent export, false otherwise
2625 Sets flag indicating whether signatures exist. @param signaturesExist true if signatures are present, false otherwise
2626 Initializes a push button widget with a given AcroForm.
2627 Initializes radio button with specified AcroForm. @param acroForm parent form of the radio button
2628 Sets radio tuning flag to indicate whether radios are in unison. @param radiosInUnison true if radios are synchronized, false otherwise
2629 Sets the multiline flag on the COS object. @param multiline true to enable multiline formatting
2630 Sets the user's password flag. @param password true to enable or false to disable password protection
2631 Sets the file select flag. @param fileSelect true to enable file selection, false otherwise
2632 Sets flag to disable spell checking. @param doNotSpellCheck true to disable spell checking, false otherwise
2633 Sets flag to prevent scrolling when rendering document. @param doNotScroll true to disable scrolling, false otherwise
2634 Sets the combination flag on the COS object. @param comb true to enable or false to disable combination
2635 Sets the rich text flag on the COS object. @param richText true to enable rich text formatting, false otherwise
2636 Creates a PDImageXObject from a RandomAccessRead stream. @param document PDDocument instance @param reader RandomAccessRead stream to extract image data from @param number Number of images to process @return PDImageXObject object or null if extraction failed
2637 Sets bold flag on the COS object. @param bold whether to enable or disable bold styling
2638 Sets whether subject DN is required in certificate. @param flag true to require subject DN, false otherwise
2639 Sets toggle flag to control view visibility. @param toggleNoView true to hide, false to show
2640 Sets the lock status of an annotation. @param locked true to lock, false to unlock
2641 Returns total number of pages in document catalog.
2642 Sets flag indicating whether view is visible or not. @param noView true to hide view, false to show
2643 Sets flag indicating whether to prevent rotation of annotation. @param noRotate true to prevent rotation, false otherwise
2644 Sets OID required flag in the dictionary. @param flag true to require OID, false otherwise
2645 Sets zooming flag on annotation. @param noZoom true to disable zooming
2646 Sets the hidden flag for an annotation. @param hidden true to hide, false to show
2647 Sets visibility flag on annotation. @param invisible true to make object invisible, false otherwise
2648 Retrieves a PDF page at the specified index. @param index zero-based page index
2649 Sets italic flag on the COS object. @param italic true to set italic, false otherwise
2650 Sets whether URL is required in the dictionary. @param flag true if URL is required, false otherwise
2651 Sets whether key usage is required in cryptographic operations. @param flag true to require key usage, false otherwise
2652 Adds a new child item at the beginning of the outline. @param newChild PDOutlineItem to be added
2653 Adds a PDOutlineItem as the last child to this parent. @param newChild item to be added
2654 Parses the cross reference object stream and returns the previous object offset. @param objByteOffset starting byte offset of the object @param isStandalone whether this is a standalone xref table
2655 Sets the printed flag in the annotation. @param printed true if annotated page is printed, false otherwise
2656 Sets document read-only flag. @param readOnly true to make document read-only, false otherwise
2657 Checks if no zoom flag is set. @return true if flag is set, false otherwise
2658 Retrieves line join style from configuration dictionary. @return integer representing line join style (e.g. miter, round, etc.)
2659 Initializes a GouraudShadingContext object with the given parameters. @param shading PDShading object to use for shading @param colorModel ColorModel used for color transformations @param xform AffineTransform applied to the context @param matrix Matrix defining the transformation space
2660 Creates an input stream for image decoding. @throws IOException if creation fails
2661 Fetches a specific object from the compressed object stream. @param objstmObjNr unique object stream identifier @param key object key to retrieve @return The retrieved COSBase object or null if not found
2662 Returns an InputStream for the contents, either using random access or a default empty stream. @throws IOException if an error occurs during content retrieval
2663 Constructs PDCIDFontType2 with the given font dictionary and parent type 0 font. @param fontDictionary COS dictionary representing the CID font @param parent the parent PDType0Font instance
2664 Checks if flag F (NO VIEW) is set. @return true if NO VIEW flag is enabled, false otherwise
2665 Returns the CID font object associated with this instance.
2666 Checks if an object is hidden. @return true if hidden, false otherwise
2667 Checks if object is invisible. @return true if flag F is set to INVISIBLE, false otherwise
2668 Checks if contents are locked. @return true if locked, false otherwise
2669 Checks if rotation is disabled. @return true if no rotation flag is set, false otherwise
2670 Retrieves an XObject instance associated with the given name. @param name COSName identifier @return PDXObject instance or null if not found
2671 Creates a tiling texture paint from the provided pattern and transformation. @param drawer PageDrawer object @param pattern PDTilingPattern object @param colorSpace PDColorSpace object @param color PDColor object @param xform AffineTransform object
2672 Checks if there are any open nodes. @return true if at least one node is open, false otherwise
2673 Checks if the document is in read-only mode. @return true if read-only, false otherwise
2674 Creates a PDField instance based on the given COSDictionary. @param form PDAcroForm to associate with the field @param field COSDictionary representing the field's properties @param parent PDNonTerminalField (if any) that this field belongs to
2675 Checks toggle flag for no view visibility. @return true if toggle is set to hide, false otherwise
2676 Checks if the annotation is locked. @return true if locked, false otherwise
2677 Checks if object is read-only. @return true if object is in read-only state, false otherwise
2678 Retrieves line cap style from dictionary. @return Line cap style value
2679 Checks if no rotation flag is set. @return true if flag is set, false otherwise
2680 Retrieves the parent structure ID. @return integer ID of the parent structure or 0 if none
2681 Retrieves integer value stored under COSName.P in the dictionary.
2682 Checks if no zoom flag is set. @return true if no zoom flag is enabled, false otherwise
2683 Retrieves maximum length value from COSObject. @return integer representing maximum allowed length
2684 Retrieves integer value from COS object by name or returns default value. @param name key to fetch integer value @param defaultValue default integer value if not found @return fetched integer value or default value
2685 Checks if an annotation is invisible. @return true if invisible, false otherwise
2686 Checks if an annotation has the hidden flag set. @return true if flag is set, false otherwise
2687 Fetches CID font mapping based on base font and PDFontDescriptor. @param baseFont the base font to search for @param fontDescriptor font descriptor to use for substitution @param cidSystemInfo CID system info (null if not applicable) @return CIDFontMapping object or null if not found
2688 Retrieves the Mac resource fork value. @return embedded string representing the Mac resource fork or null if not found
2689 Retrieves the MAC creator from the document parameters. @return Embedded string value of "MAC" key or null if not found
2690 Retrieves the MAC subtype from the parameters dictionary. @return String representing the MAC subtype or null if not found
2691 Maps a character code to its corresponding GID (glyph identifier) in a font. @param code character code to be mapped @return glyph identifier or 0 if not found
2692 Returns the glyph name for a given Unicode code point. @param code Unicode code point value
2693 Checks if print flag is set. @return true if printed, false otherwise
2694 Protects a ProtectionPolicy instance using the specified security handler. @param policy Policy to protect
2695 Adds a COSBase object to the object pool, handling indirect objects and streams. @param key object key, or null for direct objects @return the added object, or its original value if already in pool
2696 Returns the role map from the structure tree root. @return Map of roles or an empty map if not found
2697 Retrieves the MCID value from properties, returning -1 if not found.
2698 Retrieves the next parent tree key from COS object. @return Next parent tree key value or 0 if not found
2699 Retrieves MCID value from COSObject. @return MCID integer value
2700 Converts PDImage to RGB image using color key. @param pdImage input PDF image object @param colorKey color key array for conversion
2701 Fetches and sets resources for the content stream, falling back to page or document resources. @param contentStream Content stream for which to set resources @return Parent resources before modification (for potential undo)
2702 Checks if flag F indicates 'no view'. @return true if no view indicated, false otherwise
2703 Calculates the affine transform to center the given overlay media box within a page. @param page PDPage object @param overlayMediaBox PDRectangle representing the overlay content @return AffineTransform object for positioning the overlay on the page
2704 Validates input value against allowed options. @param value input string to validate
2705 Returns the rotated media box of a page. @param page PDPage object to retrieve media box from
2706 Checks if an item is marked. @return true if item is marked, false otherwise
2707 Checks if user properties are being used. @return true if user properties are enabled, false otherwise
2708 Checks if the current user is marked as suspect in the dictionary. @return true if marked as suspect, false otherwise
2709 Retrieves whether a record is open. @return true if open, false otherwise
2710 Checks whether the 'FD' flag is enabled. @return true if 'FD' flag is set to true, false otherwise
2711 Retrieves non-stroking overprint control value based on stroking overprint control. @return true if enabled, false otherwise
2712 Retrieves an integer value from a COBOL dictionary. @param embeddedDictionary the dictionary to search @param key the name of the integer to retrieve @return the integer value or -1 if not found
2713 Retrieves the denominator value from the COS object. @return Denominator integer value
2714 Wraps an OutputStream with a PredictorOutputStream if the predictor value is valid. @param out original OutputStream to wrap @param decodeParams COSDictionary containing prediction parameters @return wrapped OutputStream or original one if predictor value is invalid
2715 Retrieves the parent structure IDs from the database. @return integer array of parent structure IDs or 0 if not found
2716 Retrieves the bits per sample value from the COS object. @return The number of bits per sample
2717 Determines whether to track mouse position based on 'IsMap' setting. @return true if enabled, false otherwise
2718 Retrieves an opaque RGB image within the specified region. @param region rectangle defining the desired image area @param subsampling factor to control image resolution
2719 Writes the provided PDF document while optionally signing it and updating its metadata. @param doc the PDF document to write @param signInterface signature interface for encryption (if applicable)
2720 Checks if field flag is set as required. @return true if field is required, false otherwise
2721 Checks whether export flag is set.
2722 Checks if radios are in unison. @return true if radios are synchronized, false otherwise
2723 Checks if the COS object has the multiline flag set. @return true if the flag is set, false otherwise
2724 Checks if the current COS object has password flag set. @return true if password flag is set, false otherwise
2725 Checks whether file selection flag is set. @return true if file select flag is enabled, false otherwise
2726 Checks if spell checking is disabled.
2727 Checks if scrolling is disabled. @return true if FF flag set to DO_NOT_SCROLL, false otherwise
2728 Checks if flag FF with value COMB is set in COS object.
2729 Checks if COS object has rich text flag set.
2730 Prepares for decryption using the provided encryption material. @param encryption PDEncryption object @param documentIDArray COSArray containing document IDs @param decryptionMaterial DecryptionMaterial object (must be PublicKeyDecryptionMaterial) @throws IOException if decryption fails or invalid input is detected
2731 Retrieves the owner key from the dictionary. @return byte array representing the owner key or null if not found
2732 Checks toggle no view flag. @return true if enabled, false otherwise
2733 Returns displacement vector based on given code. @param code unique identifier @return Vector with x-coordinate in kilometers or null if invalid code
2734 Checks if the dictionary is read-only. @return true if dictionary is read-only, false otherwise
2735 Checks whether sort flag is set. @return true if sort flag is enabled, false otherwise
2736 Checks whether document is in edit mode. @return true if edit flag is set, false otherwise
2737 Checks if sub-filter is required based on COS object flag.
2738 Checks if filter flag is set. @return true if filter required, false otherwise
2739 Processes stream operators and tokens in the provided PDF content stream. @param contentStream the PDContentStream to process
2740 Checks if record has been printed. @return true if flagged as printed, false otherwise
2741 Adds a PDPage to the root tree and updates ancestor counts. @param page PDPage object to add
2742 Removes the specified dictionary from its parent's kids array. @param node COSDictionary to remove
2743 Calculates the width of a string by iterating over its encoded bytes. @return string width in pixels
2744 Checks whether to disable spell checking for this document.
2745 Sets the hidden state of the object. @param hidden true to hide, false to show
2746 Checks whether commit is enabled on selection change. @return true if commit is enabled, false otherwise
2747 Clips the provided rectangle to the media box, returning a new rectangle with intersecting bounds. @param box the rectangle to clip @return clipped PDRectangle object
2748 Checks if combo flag is set. @return true if combo flag is enabled, false otherwise
2749 Checks if contents are locked. @return true if locked, false otherwise
2750 Adds a new attribute to the document. @param attributeObject PDAttributeObject to add
2751 Checks if multi-select flag is set. @return true if multi-select enabled, false otherwise
2752 Checks if the current COS object represents a radio button. @return true if it's a radio button, false otherwise
2753 Retrieves the user key as a byte array. @return User key bytes or null if not found
2754 Retrieves a PDF abstract pattern by name from the cache or instance. @param name COSName of the pattern to retrieve @return PDAbstractPattern object or null if not found
2755 Checks if V flag is set in the COS object.
2756 Checks whether reason is required based on flag value. @return true if reason is required, false otherwise
2757 Checks if legal attestation is required based on FF flag in COS object. @return true if legal attestation is required, false otherwise
2758 Checks if adding revision information is required. @return true if required, false otherwise
2759 Checks whether subject flag is set in the dictionary.
2760 Adds a class name to the PDF object. @param className class name to add
2761 Checks whether issuer flag is set in configuration. @return true if issuer is required, false otherwise
2762 Checks if OID (Object Identifier) is required based on flag value. @return true if OID is required, false otherwise
2763 Checks if digest method flag is set on underlying COS object. @return true if digest method required, false otherwise
2764 Checks if key usage flag is required. @return true if key usage flag is required, false otherwise
2765 Checks whether URL flag is set in configuration. @return true if URL is required, false otherwise
2766 Checks whether text style is italic. @return true if italic, false otherwise
2767 Loads an FDF document from a file. @param filename path to the FDF file @return loaded FDFDocument object or null on error
2768 Checks if text is bold.
2769 Checks if signatures exist in the dictionary. @return true if signatures exist, false otherwise
2770 Checks if the document is locked. @return true if locked, false otherwise
2771 Checks if the database is append-only based on flags. @return true if append-only, false otherwise
2772 Retrieves a PDShading object by name from the cache or creates a new one. @param name COSName identifier for the shading @return PDShading object or null if not found
2773 Checks if Subject DN is required based on configuration flag.
2774 Updates the revision number for a given attribute object. @param attributeObject the PDAttributeObject that triggered the update
2775 Retrieves the PDF shading object. @return PDShading object or null if not initialized
2776 Checks whether an object has push button flag set. @return true if push button flag is set; false otherwise
2777 Initializes PDFPageable object with given parameters. @param document PDDocument instance @param orientation page orientation (e.g., Portrait, Landscape) @param showPageBorder flag to display page borders @param dpi dots per inch resolution @param center flag to center the content
2778 Loads a PDF document from a RandomAccessRead object. @param randomAccessRead PDF data stream @param password encryption password (or null if none) @param keyStore keystore containing decryption keys @param alias keystore key alias
2779 Adds a new page to the collection and updates the highest imported object number. @param page PDPage object to be added
2780 Loads a PDF document from a RandomAccessRead stream. @param randomAccessRead input stream containing the PDF data @param password optional password for encrypted PDFs
2781 Loads PDF document from RandomAccessRead stream. @param randomAccessRead input stream containing PDF data
2782 Loads a PDF document from byte array and encrypted with provided password. @param input byte array containing the PDF data @param password encryption password for the PDF @param keyStore InputStream to the keystore containing the decryption key @param alias identifier of the encryption key in the keystore
2783 Initializes a new instance of PageExtractor with a PDDocument. @param sourceDocument input PDF document
2784 Sets visual signature from a file. @param file File containing visual signature data
2785 Parses an object dynamically from the PDF document. @param objKey COSObjectKey containing the object's key @param requireExistingNotCompressedObj whether to retrieve existing non-compressed object @return parsed COSBase object or null if not found
2786 Sets whether pitch should be fixed. @param flag true to fix pitch, false otherwise
2787 Sets serif font style based on provided flag. @param flag true to enable serif, false otherwise
2788 Sets symbolic flag. @param flag true to enable, false to disable
2789 Sets script execution flag. @param flag true to enable or false to disable script execution
2790 Sets the non-symbolic flag. @param flag true to indicate a non-symbolic value
2791 Sets italic formatting based on provided flag. @param flag true to enable italic, false otherwise
2792 Parses FDFAnnotation element to initialize object properties.
2793 Creates a PDImageXObject from a file. @param document parent PDDocument @param file input image file @param number object number to assign @return PDImageXObject or null on failure
2794 Creates a PDImageXObject from the provided byte array. @param document PDDocument instance @param byteArray image data as byte array @param number image number (e.g. page index)
2795 Sets whether to force bold font on output. @param flag true to force bold, false otherwise
2796 Sets small cap flag. @param flag true to enable, false otherwise
2797 Sets all capitalization flag. @param flag true to enable, false to disable
2798 Parses XREF table and streams, resolving object references. @param startXRefOffset starting offset of the XREF table
2799 Sets visual signature from input stream. @param is InputStream containing visual signature data
2800 Updates the open count of a parent outline node. @param delta change in open count (positive to increment, negative to decrement)
2801 Sets non-stroking color with specified components. @param color PDColor object to set
2802 Sets the stroking color with specified components. @param color PDColor object containing color data
2803 Retrieves a page from the document catalog by its index. @param pageIndex zero-based index of the desired page
2804 Retrieves the page number from the first object in the array. @return The page number as an integer, or -1 if not found
2805 Prepares a PDF document for encryption by configuring the PDEncryption dictionary. @param document the PDF document to prepare
2806 Draws an inline image at specified coordinates. @param inlineImage image to be drawn @param x x-coordinate of the image's top-left corner @param y y-coordinate of the image's top-left corner
2807 Sets the value, handling export values and Opt entries. @param value new value to set
2808 Retrieves the crop box rectangle for this page. @return PDRectangle object representing the crop box or media box if not set
2809 Inserts generated combination appearance into the content stream. @param contents content stream to insert into @param appearanceStream appearance stream containing font and metrics @param font PDFont object used for rendering text @param fontSize float representing font size
2810 Adds structure to the document, pooling indirect arrays/dictionaries and objects. @param current COSBase object to process
2811 Resolves standard structure type by resolving and mapping the current type.
2812 Creates a descendant CID font based on the provided PDF dictionary and parent font. @param dictionary COSDictionary containing font metadata @param parent PDType0Font to inherit from @return PDCIDFont object or throws IOException for invalid font types
2813 Collects patches from a PDF image stream. @param xform affine transformation @param matrix matrix for color conversion @param controlPoints number of control points in the patch @return List of Patch objects or empty list if not found
2814 Creates an input stream from the underlying data source. @throws IOException if I/O operation fails
2815 Converts PDF content to a text string. @return Text representation of PDF content or empty string on failure
2816 Creates a cloudy ellipse within the specified rectangle. @param rd PDRectangle object defining the area
2817 Notifies the structure element that an attribute has changed.
2818 Saves incremental PDF data to the specified output stream. @param output OutputStream to write the PDF data to
2819 Writes PDDocument to output stream. @param doc document to write
2820 Sets default value in COS object. @param value new default value to be set
2821 Retrieves the parent PDAnnotationMarkup object. @return PDAnnotationMarkup object or null on error/exception
2822 Retrieves annotation in reply to. @return PDAnnotation object or null if not found
2823 Retrieves a referenced object from the PDF document, either as a PDXObject or PDAnnotation. @return the referenced object (PDXObject or PDAnnotation) or null if not found
2824 Filters and returns a list of annotations based on the provided filter. @param annotationFilter filter criteria for annotations @return List of PDAnnotations that match the filter or null if none found
2825 Imports optional content properties from source document to target document. @param srcDoc source PDDocument object
2826 Initializes a PDF printable object with the given parameters. @param document PDDocument instance @param scaling Scaling value @param showPageBorder flag to display page borders @param dpi dots per inch for rendering @param center flag to center content
2827 Decodes JPX image data from input stream to output stream. @param encoded input stream with encoded image data @param decoded output stream for decoded image data @param parameters additional parameters for decoding process @param index unused parameter (index of current band) @param options decode options (e.g. color space, compression level) @return DecodeResult object containing decoded image metadata
2828 Fetches the UCS-2 CMap for the current font, if predefined. @throws IOException if unable to retrieve the CMap
2829 Appends a kid with the given PDMarkedContent object. @param markedContent PDMarkedContent object containing kid's MCID
2830 Removes dictionary at specified index from root tree.
2831 Performs LZW decoding on the input stream. @param encoded input stream to decode @param decoded output stream for decoded data @param parameters COS dictionary with decoding parameters @param index index into the parameters dictionary @return DecodeResult object representing the decoding outcome
2832 Returns an opaque image representation of this object.
2833 Creates a tiling paint with the specified transformation. @param drawer PageDrawer object for drawing operations @param pattern PDTilingPattern to apply for tiling @param transform AffineTransform object (null if default)
2834 Checks if a text field is a combination input. @return true if the field is a valid combination input, false otherwise
2835 Processes a tiling pattern, applying it to the graphics state. @param tilingPattern PD Tiling Pattern object @param color non-stroking and stroking colors for the pattern @param colorSpace color space for the pattern @param patternMatrix transformation matrix for the pattern
2836 Checks if the flag indicates all uppercase text. @return true if all-cap flag is set, false otherwise
2837 Checks if italic formatting flag is set. @return true if italic, false otherwise
2838 Checks if the flag bit for non-symbolic value is set. @return true if non-symbolic, false otherwise
2839 Checks if current operation is a script. @return true if script flag is set, false otherwise
2840 Checks if the object represents a symbolic value. @return true if symbolic, false otherwise
2841 Checks if serif font flag is set. @return true if serif font is enabled, false otherwise
2842 Retrieves a PDAbstractPattern object by its associated color. @param color the color to fetch the pattern for @return the fetched PDAbstractPattern or null if not found
2843 Creates a PDField instance from a dictionary and an acroform. @param form PDAcroForm object @param field COSDictionary containing field data @param parent PDNonTerminalField parent field (if any)
2844 Inserts a new page after the given previous page in the PDF structure. @param newPage the new page to be inserted @param prevPage the previous page for insertion context
2845 Processes a PDF stream, applying transformations and clipping. @param contentStream the input stream to process
2846 Checks if the font style is small capital.
2847 Removes a PDPage instance from memory. @param page PDPage object to be removed
2848 Inserts a new page before an existing page in the page sequence. @param newPage new page to insert @param nextPage page before which to insert
2849 Processes a PDAnnotation by transforming and clipping its appearance stream. @param annotation the annotation to process @param appearance the appearance stream of the annotation
2850 Processes Type 3 font stream with given character procedure and text rendering matrix. @param charProc PDType3CharProc object for the font @param textRenderingMatrix Matrix to transform text rendering
2851 Processes a transparency group, transforming its content stream and applying graphics state changes. @param group PDTransparencyGroup object to process
2852 Prepares for decryption by processing encryption material and calculating the encrypted key. @param encryption PDEncryption object containing encryption settings @param documentIDArray COSArray of document IDs @param decryptionMaterial StandardDecryptionMaterial instance @throws IOException if decryption material is incompatible or password is invalid
2853 Checks if pitch is fixed.
2854 Calculates and returns the width of a space character for the current font. @return The width of a space character in points, or 250 by default if an error occurs.
2855 Checks whether force bold flag is enabled. @return true if force bold flag is set, false otherwise
2856 Initializes a FDFAnnotationStamp from an Element. @param element XFDF representation of the stamp
2857 Initializes FDFAnnotationSquare with given Element. @param element XML representation of the annotation
2858 Creates an FDFAnnotationFreeText object from a given XML Element. @param element XML Element containing annotation data
2859 Parses FDF annotation ink data from the provided XML Element. @param element XML Element containing ink data
2860 Creates an FDFAnnotationLine object from an XML Element. @param element the XML element to parse
2861 Initializes FDFAnnotationLink from given Element. @param element XFDF document element
2862 Initializes an FDFAnnotationPolygon from a given XML Element. @param element the XML Element containing polygon data
2863 Constructs an FDFAnnotationPolyline object from an Element. @param element the underlying Element to initialize from
2864 Retrieves all PDAnnotations.
2865 Imports a page from the source document as a form XObject. @param sourceDoc source PDF document @param page page to import @return imported form XObject or null on failure
2866 Constructs a new instance of PDFPrintable with default print settings. @param document PDDocument object to be printed @param scaling Scaling factor for the printout @param showPageBorder Flag to indicate whether to display page borders @param dpi Resolution in dots per inch
2867 Initializes an FDFAnnotationSound object from an XML Element. @param element XML representation of sound annotation
2868 Begins marked content sequence with specified tag and properties. Increments hidden OCG count if applicable or sets to 1 on first hidden OCG detection. @param tag COSName of the marked content sequence @param properties COSDictionary containing sequence properties
2869 Updates the form display by overriding superclass behavior. @param form PDFormXObject instance to render
2870 Sets non-stroking color with specified components and possibly pattern name. @param color PDColor object containing color data
2871 Retrieves the destination page from the provided PDDocument. @param doc the input PDF document @return PDPage object or null if not found
2872 Calculates the size of a PDF page based on its ID. @param document PDDocument instance @param page page number (1-indexed)
2873 Imports a page from the given PDPage object, creating a new page in the current document. @param page the source page to import
2874 Creates a PDF template from a PDPage object. @param page the PDPage to convert into a template
2875 Initializes a new instance of PDFPageable with the specified PDDocument.
2876 Initializes a new instance of PDFPageable with specified PDDocument and orientation. @param document PDDocument to be used @param orientation page orientation (e.g. Portrait or Landscape)
2877 Constructs a PDFPageable object with default zoom level. @param document PDDocument instance @param orientation page orientation (Portrait or Landscape) @param showPageBorder flag to display page border
2878 Constructs a PDFPageable object with default settings. @param document the PDDocument to be used @param orientation the page orientation
2879 Loads PDF document from byte array with optional password protection. @param input PDF data as a byte array @param password (optional) password for encrypted PDF files
2880 Loads a PDF document from a local file with optional encryption. @param file the local file containing the PDF content @param password the decryption password (null if not encrypted)
2881 Loads a PDF document from the specified file with optional encryption. @param file path to the PDF file @param password decryption password (null for unencrypted files) @param keyStore keystore containing encryption keys @param alias keystore entry identifier for encryption keys
2882 Initializes an FDFAnnotationFileAttachment from an XML Element. @param element XML Element containing file attachment data
2883 Sets the stroking color with specified components. @param color PDL color object
2884 Retrieves the PDF trailer dictionary. @return COSDictionary object representing the trailer, or null if not found
2885 Parses FDF annotation text markup from XML element. @param element XML element containing 'coords' attribute
2886 Initializes FDFAnnotationText object from given Element. @param element XML representation of annotation text
2887 Sets visual signature properties from provided PDVisibleSigProperties object. @param visSignatureProperties contains visual signature configuration
2888 Initializes FDFAnnotationCircle from given Element. @param element input XML element
2889 Removes a specific page from the collection of pages. @param page PDPage object to be removed
2890 Creates an image XObject from a file in the specified PDDocument. @param document target PDDocument @param file source file to load image from
2891 Retrieves a string representation from the given COSBase object. @param base COSBase object to extract string or stream from
2892 Recursively finds a nested field in the acroForm by name. @param name array of names to match @param nameIndex current name index @return PDField object or null if not found
2893 Retrieves a list of PDF fields from the dictionary. @return List of PDField objects or empty list if none found
2894 Creates a Paint object from the given color. @param color PDColor object to convert @return Paint object or null if not convertible
2895 Returns the fallback font name based on the provided FontDescriptor. @param fontDescriptor font descriptor object, null returns default 'Times-Roman'
2896 Returns symbolic flag value or null if font descriptor is unavailable.
2897 Extracts text lines from the given content with specified font and width. @param font PDFont object @param fontSize float font size @param width float maximum line width @return List of Line objects representing the extracted text lines
2898 Retrieves the value of a PDF field, returning it as a string or null. @return String representation of field value or null if not found
2899 Calculates and processes the position of a glyph in the PDF document. @param textRenderingMatrix current text rendering matrix @param font PDFont object representing the font used to render the glyph @param code character code of the glyph @param displacement vector representing the displacement of the glyph
2900 Saves the document to an output stream with optional compression. @param output OutputStream to write the document to @param compressParameters parameters for compression (null for no compression)
2901 Notifies listeners of changes based on value comparison. @param oldBase previous object being compared @param newBase current object being compared
2902 Initializes the current page with provided PDPage object. @param page non-null PDPage object to initialize
2903 Returns the PDF rectangle representing the bleed box. If available, returns a clipped version of the media box; otherwise, returns the crop box.
2904 Returns the trim box of a PDF page, clipping it to the media box if available. @return Trim box rectangle or crop box if not found
2905 Retrieves the Art Box rectangle from the PDF, clipping it to the Media Box if present; otherwise returns the Crop Box.
2906 Returns the rotated crop box for a given page. @param page PDPage object to fetch rotation and crop box from
2907 Writes COS document to file system. @param doc COSDocument object containing document data
2908 Retrieves rich text string from PDF content. @return Rich text string or null if not found
2909 Retrieves the "before" value as a string, handling both COSString and COSStream types. @return String representation of the "before" value or null if not found or invalid.
2910 Retrieves the after value from the dictionary as a string. @return String representation of the after value or null if invalid
2911 Initializes FDFAnnotationCaret object from given Element. @param element XML element containing caret annotation data
2912 Loads ICC profile from input stream. @throws IOException if initialization fails
2913 Initializes the compression pool for a PDDocument. @param document target PDF document @param parameters optional compressing parameters (defaults to new CompressParameters if null)
2914 Updates the field's value and applies changes. @param value new field value
2915 Initializes Type5 Shading Context with given parameters. @param shading PDShadingType5 object @param cm ColorModel @param xform AffineTransform @param matrix Matrix @param deviceBounds Rectangle for the device bounds.
2916 Initializes Type4ShadingContext with provided parameters. @param shading PDShadingType4 object @param cm ColorModel @param xform AffineTransform @param matrix Matrix @param deviceBounds Rectangle representing device bounds
2917 Initializes a PatchMeshesShadingContext with given parameters. @param shading PDMeshBasedShadingType to use @param colorModel ColorModel for rendering @param xform AffineTransform to apply @param matrix Matrix transformation @param deviceBounds Rectangle representing device bounds @param controlPoints Number of control points to collect
2918 Fetches and populates array of input/output samples from PDF stream. @return 2D int array representing samples
2919 Converts object to byte array representation. @return byte array containing object data or null on failure
2920 Creates a LayoutPage instance from the given PDF page. @param page the PDF page to convert
2921 Converts a COSBase to a string, either by extracting the string value or converting a stream. @param base COSBase object to convert
2922 Retrieves rich contents from the PDF dictionary. @return String representation of rich contents or null if not found.
2923 Retrieves the action string value from the PDF document. @return Action string or null if not found
2924 Displays a transparency group on screen. @param form PDTransparencyGroup object to display
2925 Retrieves a list of child fields from the COSArray.
2926 Renders Type 3 glyph for the specified character code using the provided font and displacement. @param textRenderingMatrix transformation matrix for rendering @param font PDType3Font object containing character procedures @param code unique character identifier @param displacement vector offset for positioning the glyph
2927 Creates a font descriptor from FontMetrics. @param metrics font metrics object containing font details @return PDFontDescriptor object representing the font properties
2928 Creates a PDF font descriptor from a Type 1 font. @param type1 the Type 1 font to convert
2929 Retrieves page labels from the document based on page indices. @return Array of page labels or null if not computed
2930 Computes and returns a map of page indices by unique labels.
2931 Removes a page from the collection by its index. @param pageNumber unique page identifier
2932 Processes and displays a form object on the current page. @param form form object to display
2933 Creates a PDFontDescriptor object from the given TrueType font. @param ttf TrueTypeFont instance to process @return PDFontDescriptor object or null if creation fails
2934 Retrieves normal appearance content stream. @param compress whether to compress the output
2935 Creates image object from byte array. @param document PDDocument instance @param byteArray image data bytes
2936 Processes a tiling pattern with the specified color and color space. @param tilingPattern Tiling pattern to process @param color Fill color for the pattern @param colorSpace Color space of the fill color
2937 Creates a new PDPageContentStream for the given page. @param document PDDocument instance @param sourcePage PDPage to stream content from
2938 Displays a user annotation with its associated visual representation. @param annotation PDAnnotation object to display
2939 Processes a soft mask transparency group. @param group PDTransparencyGroup object to process
2940 Initializes the appearance content for a PDAnnotationWidget. @param widget annotation widget @param appearanceCharacteristics appearance characteristics dictionary @param appearanceStream appearance stream
2941 Initializes StrikeOut annotation with subtype.
2942 Constructs an underline annotation from the given PDF element.
2943 Writes styled text to PDAppearanceContentStream using specified font and color. @param contents stream to write to @param zeroFontSize fallback font size when regular size is 0
2944 Initializes a PDICCBased object from an ICC color profile COSArray. @param iccArray ICC color profile data
2945 Processes a PDPage object, initializing and streaming its contents. @param page the PDPage to process
2946 Processes child stream for a given page. @param contentStream PD content stream to process @param page PD page associated with the stream
2947 Initializes the sign designer with a document and image. @param document PDDocument instance @param image BufferedImage to design on @param page page number of the document
2948 Initializes a visible sign designer with a PDDocument and an image stream. @param document the PDDocument to process @param imageStream input stream containing image data @param page the target page number
2949 Initializes a new instance of PDFPrintable with specified settings. @param document PDDocument object to print @param scaling Scaling factor for the output @param showPageBorder true to display page borders in the output
2950 Loads PDF document from byte array. @param input binary PDF data
2951 Constructs a Type7 Shading Context. @param shading the PDShadingType7 to use @param colorModel the ColorModel for this context @param xform the AffineTransform to apply @param matrix the Matrix to use @param deviceBounds the Rectangle representing device bounds
2952 Constructs a Type6ShadingContext object. @param shading PDShadingType6 object @param colorModel ColorModel object @param xform AffineTransform object for coordinate transformation @param matrix Matrix object for graphics transformation @param deviceBounds Rectangle object describing the device bounds
2953 Adds a form as an optional content group (layer) to the target page. @param targetPage page where the form will be added @param form form object to add @param transform affine transformation to apply to the form @param layerName name of the new optional content group (layer) @return the newly created PDOptionalContentGroup instance
2954 Retrieves the XFA bytes as an array. @return byte[] containing XFA data or empty if not found
2955 Recursively interpolates a value at the specified step. @param coord current coordinate @param step interpolation step @return interpolated float array or null if not found
2956 Initializes PDFunctionType4 from COSBase stream. @param functionStream input stream containing function data
2957 Writes field XML to the specified writer. @param output Writer to write XML to
2958 Retrieves rich contents from annot object. @return Rich contents as string or null if not found
2959 Checks if XFA is dynamic (has XFA but no fields). @return true if XFA is dynamic, false otherwise
2960 Retrieves FontBoxFont instance for given baseFont, falling back to fallbackName if not found. @param baseFont primary font name @param fontDescriptor additional font descriptor information @return FontMapping object or last resort font if all else fails
2961 Retrieves TrueType font mapping based on base font and descriptor. @param baseFont base font name @param fontDescriptor PDFontDescriptor object @return FontMapping<TrueTypeFont> object or last resort font if not found
2962 Determines if the font is symbolic based on its encoding and flags. @return Boolean indicating whether the font is symbolic or not
2963 Reads and resolves font encoding from PDF dictionary. @throws IOException if an error occurs during reading
2964 Calculates font size based on content rectangle. @param font PDFont object @param contentRect PDRectangle containing text @return calculated font size or default appearance size if no auto-sizing required
2965 Formats the text content by processing paragraphs and lines according to formatting settings.
2966 Initializes an FDFAnnotationSquiggly object with the given Element. @param element XML element to initialize from.
2967 Retrieves rich text value from inheritable attribute. @return Rich text string or null if not set
2968 Initializes an FDF annotation highlight object from an Element. @param element PDF document element to initialize from
2969 Loads PDF document from specified file. @param file File object containing PDF data
2970 Saves data to a file with optional compression. @param file the target file @param compressParameters parameters for compression
2971 Fetches page format by index, handling rotated media and crop boxes. @param pageIndex unique page identifier
2972 Processes annotations on a given page by cloning and modifying them as needed. @param imported the page to process
2973 Loads a PDF document from a file with optional password protection. @param file file containing the PDF document @param password (optional) password for encrypted documents @throws IOException if loading fails
2974 Saves data to an OutputStream with default compression.
2975 Returns normal appearance as content stream.
2976 Toggles the state of a node, switching between open and closed states. If the node is not currently open, it will be opened; otherwise, no action is taken.
2977 Closes the current node and updates node count. @see isNodeOpen()
2978 Retrieves the first page of a PDDocument as a LayoutPage object. @param doc the input document to extract from
2979 Displays a glyph for the given PDFont and code point. @param textRenderingMatrix transformation matrix for rendering @param font PDFont object to use for display @param code Unicode code point of the glyph to show @param displacement vector offset from the current position
2980 Clones the structure tree from the source document to the destination document. @param destinationDocument target PDF document for cloning
2981 Updates the parent entries for a PDPage and its annotations by offsetting. @param page PDPage object to update @param structParentOffset offset value for struct parents
2982 Writes the compressed document body to the output stream. @param document COSDocument instance being written
2983 Imports a page from a PDF document as a form XObject. @param sourceDoc the original PDF document @param pageNumber the index of the page to import (1-based) @return the imported PDFormXObject or null if failed
2984 Exports the form data in FDF (Fillable Forms Data) format. @return FDFDocument object containing the exported data
2985 Embeds a Type1 font into the PDF document. @param doc the PDF document to embed the font in @param dict the font dictionary where the font will be stored @param pfbStream input stream containing the PFB font data @param encoding optional font encoding (null for auto-detection)
2986 Embeds TrueType font into PDDocument, optionally as subset. @param document target PDF document @param dict COSDictionary containing font metadata @param ttf TrueTypeFont to embed @param embedSubset whether to embed full font or subset
2987 Interpolates input values into an array of floats. @return interpolated float array
2988 Extracts the matte image from a soft-masked PDF image. @param softMask PDImageXObject representing the soft-masked image @return float array representation of the matte image or null if invalid
2989 Processes a page, updating local state with rotation and size. @param page PDPage object to process
2990 Parses XML content from byte array into a PDFBox Document object. @return Document object or null if parsing fails
2991 Creates a PDType1Font object from PFB data. @param doc the parent document @param pfbIn input stream containing type 1 font data @param encoding optional character encoding for font (null for default)
2992 Initializes PDVisibleSignDesigner with a document source, image, and page number. @param documentSource RandomAccessRead object containing the document data @param image BufferedImage representing the visible signature image @param page integer identifier for the document page
2993 Creates a PDF function from the given COSBase object. @param function COSBase object containing function data
2994 Determines if this font is symbolic (i.e., non-representational). @return true if symbolic, false otherwise
2995 Checks if the provided PDAcroForm instance has dynamic XFA content. @param acroForm PDAcroForm object to check @return true if XFA is dynamic, false otherwise
2996 Parses an FDF XML document and populates the associated FDFDictionary. @param fdfXML the FDF XML document to parse
2997 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to associate with the image @param image BufferedImage to convert @return PDImageXObject or null on error
2998 Processes a PDF page, importing necessary resources and annotations. @param page PDPage object to be processed
2999 Embeds a TrueTypeFont into a PDDocument. @param document PDF document to embed into @param dict COSDictionary containing font metadata @param ttf TrueTypeFont object to embed @param encoding Font encoding scheme (e.g. Identity-H, WinAnsi)
3000 Initializes PDCIDFontType2Embedder with document and font details. @param document the PDF document @param dict the font dictionary @param ttf TrueType font data @param embedSubset whether to embed subset or not @param parent the parent Type 0 font @param vertical whether this is a vertical CIDFont
3001 Initializes a new PDFont object from the given COSDictionary. @param fontDictionary dictionary containing font metadata
3002 Creates a new PDF printable instance from a PDDocument object. @param document PDDocument to create printable from @param scaling scaling factor for the printout
3003 Creates a PDICCBased object from the given COSArray and resources. @param iccArray COSArray containing ICC profile data @param resources PDResources instance for caching and color space management @return PDICCBased object or null if not found in cache
3004 Draws a page with specified size and annotations. @param g Graphics2D context @param pageSize PDRectangle representing the page size
3005 Builds a PDF document with a visual signature. @param properties PDVisibleSignDesigner object containing design parameters @return InputStream representing the generated PDF document
3006 Saves a file with default compression settings. @param file File object to be saved
3007 Saves data to file with specified compression parameters. @param fileName unique file identifier @param compressParameters compression settings for the file
3008 Inserts the generated appearance for a form field. @param widget PDAnnotationWidget representing the field @param appearanceStream PDAppearanceStream containing the field's appearance data @param output OutputStream to write the appearance to
3009 Imports FDF data from the given FDFField. @param fdfField FDF field to import
3010 Writes XML representation of a PDFileSpecification object. @param output Writer to write XML data to
3011 Initializes PDVisibleSignDesigner with document source and image stream. @param documentSource RandomAccessRead to document data @param imageStream InputStream containing visible signature image @param page Page number for calculating document size
3012 Draws a PDImageXObject at specified coordinates. @param image image to be drawn @param x x-coordinate of the top-left corner @param y y-coordinate of the top-left corner
3013 Initializes iterator by enqueuing all fields from the given AcroForm. @param form PDAcroForm instance to iterate over
3014 Loads a PDF document from a local file. @param file the file to load
3015 Initializes FDF catalog from given XML Element. @param element XML Element containing FDF catalog data
3016 Initializes a PDTrueTypeFont object from a TrueType font file. @param document PDDocument instance associated with this font @param ttf TrueType font file to load @param encoding Font encoding (e.g. Type 1, Type 3) @param closeTTF whether to close the TTF data source after loading
3017 Initializes a PDF font object from a TrueType font. @param document PDDocument instance @param ttf TrueTypeFont object @param embedSubset whether to embed subset or not @param closeTTF whether to close TTF after initialization @param vertical whether the font is vertical
3018 Initializes a PDType0 font from the given COS dictionary. @param fontDictionary COS dictionary containing font metadata
3019 Initializes a PDSimpleFont instance from a COSDictionary. @param fontDictionary dictionary containing font data
3020 Initializes PDType1Font from PFB stream. @param doc parent document @param pfbIn input stream containing font binary data
3021 Initializes a PDVisibleSignDesigner with specified file and page information. @param filename path to PDF document @param imageStream InputStream containing visible signature image @param page page number in the document
3022 Initializes a PDVisibleSignDesigner with an image file on a specific page. @param filename path to the image file @param image BufferedImage object @param page page number to load the image on (1-indexed)
3023 Renders a PDF page as an image with the specified scale and destination. @param pageIndex unique page identifier @param scale scaling factor for the rendered image @param imageType desired image format (e.g. ARGB, RGB) @param destination rendering destination (e.g. file, screen) @return BufferedImage object representing the rendered image
3024 Iterates through document pages, processing those within specified range. @throws IOException on page processing failure
3025 Renders a PDF page to graphics, applying transformations and rendering hints. @param pageIndex unique page identifier @param graphics Graphics2D context for drawing @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination RenderDestination type (e.g. file or buffer)
3026 Initializes PDFPrintable with a PDDocument and scaling mode. @param document PDDocument to print @param scalingMode Scaling mode for printing (default: SHRINK_TO_FIT)
3027 Returns an iterator over the fields in this acroform. @return Iterator over PDField objects
3028 Saves data to file using provided name. @param fileName unique file identifier
3029 Builds and sets visible signature PDF.
3030 Creates a PDImageXObject from the specified file. @param file input image file @param doc PDDocument to associate with the image @return PDImageXObject object or throws an exception if unsupported type is encountered
3031 Creates a PDImageXObject from the specified file based on its extension. @param file input image file @param doc PDDocument instance to associate with the created image @return PDImageXObject or throws exception if unsupported file type
3032 Retrieves and caches PDFunction for tint transform. @return cached or newly created PDFunction object
3033 Initializes a PDDeviceN object from a COSArray and resources. @param deviceN COSArray containing device N attributes @param resources PDResources for color conversion cache initialization
3034 Initializes PDSeparation object from COSArray and resources. @param separation COSArray containing color space and tint transform @param resources PDResources for initialization
3035 Processes a single page, handling article sections and bead rectangles if necessary. @param page the PDPage to process
3036 Retrieves the PDF function, lazily creating it from a COS dictionary if necessary. @return PDFunction object or null if creation failed
3037 Retrieves the transfer function, initializing it from COS data if necessary. @return The transfer function as a PDFunction object or null if not initialized
3038 Evaluates a type 3 PDF function based on input value and returns an array of results. @param input single input value @return float[] array containing the result(s)
3039 Writes FDF dictionary to XML format. @param output Writer object for XML output
3040 Fetches a BufferedImage within a specified region with optional subsampling. @param region rectangle defining the region of interest @param subsampling level of detail to apply (0-1) @return BufferedImage object or null if not found
3041 Initializes PDIndexed object with COSArray and PDResources. @param indexedArray COSArray containing index data @param resources PDResources for color space creation
3042 Evaluates input values using linear interpolation based on sample points. @param input float array of input values @return float array of corresponding output values
3043 Retrieves an array of PDF functions. @return Array of PDFunction objects or null if not initialized
3044 Returns the default font used in PDF generation. @return a PDType1Font object representing Helvetica font
3045 Loads Type 0 font from PDDocument and TrueType font. @param doc PDDocument instance @param ttf TrueType font to load @param embedSubset whether to embed subset of font
3046 Creates a PDTrueTypeFont instance from the given font dictionary. @param fontDictionary COS dictionary containing font data
3047 Initializes a Type1C font from the given COS dictionary. @param fontDictionary input font data
3048 Creates a Type1 font from the given COSDictionary. @param fontDictionary COS dictionary containing font data
3049 Initializes a PDType3Font object from a COS dictionary and resource cache. @param fontDictionary COS dictionary containing font metadata @param resourceCache cache of resources used by the font
3050 Loads a Type 0 font from the given PDDocument and RandomAccessRead. @param doc PDDocument instance @param randomAccessRead font data reader @param embedSubset whether to embed subset glyphs @param vertical whether font is vertical (upside-down)
3051 Loads a vertical PDType0 font from the given PDDocument and TrueType font. @param doc PDDocument instance @param ttf TrueType font to load @param embedSubset whether to embed subset of font in PDF
3052 Loads a TrueType font from a PDDocument. @param doc the document to fetch font from @param ttf the TrueType font object @param encoding the font's encoding scheme
3053 Loads a TrueType font from the given PDDocument and InputStream. @param doc the PDDocument containing the font resource @param randomAccessRead input stream to read the font data from @param encoding character encoding for the font
3054 Imports XFDF document into an FDFDocument. @param doc XFDFDocument to import
3055 Creates an image object from a file. @param imagePath path to the image file @param doc parent document
3056 Renders a page to the given Graphics context. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scaleX scale factor for X-axis @param scaleY scale factor for Y-axis
3057 Renders an image at specified page index with given scale and type. @param pageIndex unique page identifier @param scale rendering scale factor @param imageType type of the image to render
3058 Retrieves a list of signature fields from the document catalog. @return List of PDSignatureField objects or an empty list if none found
3059 Updates terminal field appearances in the field tree.
3060 Writes XML representation of XFD data to the specified Writer. @param output Writer for XML output
3061 Splits a PDDocument into multiple documents based on its pages. @return List of split PDDocuments
3062 Creates a new instance of PDIndexed from the given COS array. @param indexedArray container array with index entries
3063 Evaluates a function for the given input and returns its output. @param input input values to evaluate @return array of float values representing the output; adjusted if out-of-range
3064 Returns a default image.
3065 Processes a tree of PDF pages, extracting text from each page with contents. @param pages PDPageTree to process
3066 Creates a PDColorSpace object from the provided COSBase. @param colorSpace COSBase to create the color space from @param resources PDResources for accessing built-in color spaces @param wasDefault boolean indicating if the default color space is being created @return PDColorSpace object or throws an exception if invalid
3067 Retrieves a PDField by fully qualified name. @param fullyQualifiedName unique identifier of the field @return PDField object or null if not found
3068 Enables or disables cache for PD fields. @param cache true to enable caching, false to disable
3069 Returns an iterator over the fields in this PDF document. @return Iterator of PDField objects representing the document's fields
3070 Renders an image from the specified page and scales it. @param pageIndex unique page identifier @param scale scaling factor for the output image
3071 Renders an image with specified DPI. @param pageIndex page index to render @param dpi dots per inch value for rendering
3072 Scales image DPI and delegates rendering to renderImage. @param pageIndex page index for rendering @param dpi desired dots per inch value (scaled from default) @param imageType type of image to render @return rendered BufferedImage object
3073 Renders a page to a graphics context at specified scale. @param pageIndex index of the page to render @param graphics Graphics2D context for rendering @param scale scaling factor for the page
3074 Extracts a subset of pages from the original document. @return PDDocument containing the extracted pages or an empty doc if invalid range
3075 Saves XFDF document to the specified writer. @param output writer to save the document to
3076 Renders a string of bytes as PDF text. @param string byte array containing the text to render
3077 Loads TrueType font from file and associates with document. @param doc PDDocument instance @param file TrueType font file @param encoding font encoding (e.g. PDFDocEncoding)
3078 Constructs a PDMMType1Font object from a COS dictionary. @param fontDictionary COS dictionary representing the font.
3079 Loads TrueType font from InputStream into PDDocument. @param doc PDDocument to add font to @param input InputStream containing font data @param encoding Encoding of the font (e.g. ASCII85, Base64)
3080 Loads a Type 0 font from a PDDocument and file. @param doc the document to load the font for @param file the file containing the font data
3081 Loads XFDF document from input stream. @param input InputStream containing XFDF data
3082 Loads Type 0 font from PDDocument and InputStream. @param doc the PDDocument to load font for @param input InputStream containing font data @param embedSubset whether to embed subset of font in document
3083 Loads a vertical font from the specified file into the given document. @param doc target PDDocument instance @param file path to the font file @return loaded PDType0Font object or null on failure
3084 Loads a vertical font from an input stream. @param doc the PDDocument instance @param input the font data as an input stream
3085 Loads a vertical font from an input stream into the provided document. @param doc PDDocument instance to store the font in @param input InputStream containing the font data @param embedSubset whether to embed and subset the font
3086 Constructs a PDType3Font object from a COS dictionary. @param fontDictionary COS dictionary containing font data
3087 Adds a digital signature to the PDF document. @param sigObject PDSignature object containing the signature data @param signatureInterface SignatureInterface instance for signing @param options SignatureOptions object with preferred size and visual signature
3088 Writes formatted text to a PDF document. @param doc the PDDocument object @param outputStream writer for output stream
3089 Retrieves a list of signature dictionaries from the PDF document. @return List of PDSignature objects, or empty list if none found
3090 Imports FDF fields from given document. @param fdf document containing fields to import
3091 Evaluates function for given input value. @param inputValue single input value to evaluate @return array of evaluation results or throws IOException on error
3092 Draws the transparency group on the Graphics2D device. @param form PDTransparencyGroup to render @param graphics Graphics2D context for drawing
3093 Returns non-stroking paint with applied soft mask. @throws IOException if error occurs while applying soft mask
3094 Evaluates a shading function and converts the result to RGB color. @param values input array of float values
3095 Renders image from specified page. @param pageIndex index of page to render (1-indexed)
3096 Loads a Type 0 font from an input stream. @param doc PDDocument instance @param input input stream containing font data
3097 Creates a PDFont object based on the provided COSDictionary and ResourceCache. @param dictionary COSDictionary containing font metadata @param resourceCache ResourceCache for font resources @return a PDFont object or null if not supported
3098 Loads XFDF document from file. @param filename path to XFDF file @return loaded FDFDocument object or null on error
3099 Displays a text string from a byte array. @param string byte array containing the text to display
3100 Loads XFDF document from specified file. @param file input file containing XFDF data @return loaded FDFDocument object or null on error
3101 Renders page to graphics at specified index. @param pageIndex unique page identifier @param graphics Graphics2D context for rendering
3102 Processes text string entries in the provided COSArray, applying adjustments and displaying strings. @param array array of COSBase objects containing text string information
3103 Adds a digital signature to an existing PDSignature object. @param sigObject PDSignature object to be signed @param options Signature options (currently ignored)
3104 Retrieves the last signature dictionary. @return PDSignature object or null if empty
3105 Saves incremental data for external signing. @param output OutputStream to write the signed PDF to @return ExternalSigningSupport object
3106 Extracts text content from a PDDocument. @param doc PDDocument instance to process
3107 Adds a digital signature to a PDSignature object. @param sigObject the PDSignature object to add signature to @param signatureInterface interface for customizing signature behavior
3108 Saves XFDF data to a file. @param fileName the file path for saving XFDF content
3109 Renders a glyph at the specified position, applying transformations and rendering mode. @param path GeneralPath representing the glyph @param font PDFont specifying the glyph's properties @param code unique character identifier @param displacement Vector of glyph position @param at AffineTransform for applying transformation
3110 Adds a PDSignature object to the collection. @param sigObject signature data to be added
3111 Creates a PDFont instance from the given COSDictionary. @param dictionary COSDictionary containing font metadata
3112 Retrieves a PDFont object by name from the cache or creates one. @param name COSName of the font to retrieve
3113 Fills and strokes a cloned path with the specified winding rule. @param windingRule the filling rule to apply.
3114 Saves XFDF document to file. @param fileName name of file to save XFDF to
3115 Flattens the PDF form by recursively processing all fields.
3116 Copies required resources to the provided PDAppearanceStream. @param appearanceStream target stream for resource copying
3117 Merges the contents of two PDF documents into a single document. @param destination The target PDF document to append to @param source The source PDF document to merge from
3118 Converts a PNG image to an XObject. @param imageData PNG image data @return PDImageXObject or null if conversion fails
3119 Creates a PDFont object from the default font setting. @return PDFont object or null if creation fails
3120 Updates the appearance stream with widget content. @param widget PDAnnotationWidget instance @param appearanceStream PDAppearanceStream to modify
3121 Creates a PDImageXObject from the given byte array. @param document PDDocument object @param byteArray image data @param name file name @param customFactory CustomFactory for unsupported image types @return PDImageXObject or throws exception if type not supported
3122 Copies graphic state parameters from the dictionary into the given graphics state.
3123 Parses appearance string tokens and processes operators. @param content PDF stream byte array to parse
3124 Creates an image XObject from a byte array. @param document the parent PDDocument @param byteArray the image data as bytes @param name the image object name
3125 Initializes PDDefaultAppearance with default resources and appearance string. @param defaultAppearance appearance string to process @param defaultResources resources for the default appearance @throws IOException if an I/O error occurs during processing
3126 Returns the default appearance string for PDF documents. @return PDDefaultAppearanceString object or null if not set
3127 Sets appearance value for a field. @param apValue appearance string to be set
3128 Initializes AppearanceGeneratorHelper with field data and validates resources. @param field PDVariableText object containing field metadata
