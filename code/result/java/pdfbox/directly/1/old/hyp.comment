1 Initializes an empty OperatorName object.
2 Constructs an OperatorProcessor instance with the given PDFStreamEngine context.
3 Initializes a new COSBase instance.
4 Initializes a COSUpdateState with provided COSUpdateInfo. @param updateInfo COSUpdateInfo object containing state information
5 Empty constructor to allow instances of DecodeOptions to be created.
6 Initializes DecodeOptions with specified source region. @param sourceRegion rectangle defining decode area
7 Initializes decode options with uniform subsampling. @param subsampling X and Y subsampling factor (same value)
8 Initializes a new instance of the Filter class.
9 Initializes a new PageExtractor instance with the given document and page range. @param sourceDocument PDDocument object to extract pages from @param startPage starting page index (inclusive) @param endPage ending page index (inclusive)
10 Initializes an AbstractXReference with the specified XReference type. @param type The type of XReference (e.g., internal or external)
11 Initializes a ContentStreamWriter with an output stream. @param out OutputStream to write content to
12 Initializes cache creation implementation with stability option. @param enableStableCache true to enable stable caching, false otherwise
13 Initializes catalog with given PDF document and root dictionary. @param doc PDF document instance @param rootDictionary root dictionary of the document's catalog
14 Initializes a new instance of PDDocumentInformation with the provided PDF document dictionary.
15 Initializes a new instance of PDDocumentNameDestinationDictionary from a COS dictionary. @param dict COS dictionary containing name destination data
16 Initializes a PDDocumentNameDictionary with a given catalog and names dictionary. @param cat the document catalog @param names the dictionary of names
17 Initializes a new PDPage instance from a COS dictionary. @param pageDictionary COS dictionary representing the PDF page.
18 Constructs a new PDF page from a COS dictionary and resource cache. @param pageDictionary COS dictionary representing the page @param resourceCache shared resources for page rendering
19 Initializes a new instance of PDDictionaryWrapper from a COSDictionary object. @param dictionary the COSDictionary to wrap
20 Initializes a PDNameTreeNode instance from a COS dictionary. @param dict COS dictionary containing node data
21 Constructs a PDPageLabelRange object from the given COS dictionary. @param dict COS dictionary containing page label range data
22 Initializes PDRange object from given COSArray. @param range array of values defining the range
23 Initializes a PDRange object from a COSArray and index. @param range COSArray containing range data @param index starting index of the range
24 Initializes a new PDStream instance from an existing COSStream. @param str the COSStream to wrap
25 Initializes a new instance of PDMarkInfo from a given COS dictionary. @param dic COS dictionary containing mark information
26 Initializes a new instance of PDMarkedContentReference from the given COSDictionary.
27 Initializes a new PDObjectReference with the given COSDictionary. @param theDictionary COS dictionary containing object reference data
28 Initializes a new instance of PDStructureNode from a COSDictionary. @param dictionary the COSDictionary to initialize with
29 Initializes a new instance of the Revisions class.
30 Constructs a new PDPropertyList instance from the given COS dictionary.
31 Initializes a new instance of PDBoxStyle from a given COSDictionary. @param dic the COSDictionary containing style information
32 Initializes AccessPermission with default permissions.
33 Initializes an AccessPermission instance with a given set of permissions. @param permissions integer representing access permissions
34 Initializes PDCryptFilterDictionary with given COS dictionary. @param d input COS dictionary
35 Initializes RC4 cipher with a 256-element salt array.
36 Initializes an FDFAnnotation object from a COSDictionary.
37 Initializes an FDFCatalog instance with the provided COS dictionary.
38 Initializes an instance of FDFDictionary from a COSDictionary. @param fdfDictionary input dictionary to initialize from
39 Initializes an FDFField object from a COS dictionary. @param f COS dictionary containing field data
40 Initializes FDFIconFit with the given COS dictionary. @param f COS dictionary containing icon fit data
41 Initializes an FDF JavaScript object from a COS dictionary. @param javaScript COS dictionary containing JavaScript data
42 Constructs an instance of FDFNamedPageReference from a COS dictionary. @param r COS dictionary containing page reference data
43 Constructs an FDFOptionElement instance from a COSArray.
44 Initializes an FDFPage object from a COSDictionary instance. @param p COSDictionary representing the PDF page data
45 Initializes an FDFPageInfo object from a COS dictionary. @param p COS dictionary containing page information
46 Initializes an FDFTemplate instance with the provided COS dictionary. @param t COS dictionary containing template data
47 Constructs a new PDFontDescriptor from a given COS dictionary. @param desc COS dictionary containing font descriptor information
48 Initializes PDFontSetting with a COSArray of font settings. @param fs COSArray containing font setting data
49 Initializes a line dash pattern with an empty array and default phase.
50 Initializes a PDColor object with a specified color space and pattern name. @param patternName COSName representing the color pattern @param colorSpace PDColorSpace defining the color model
51 Initializes PDDeviceNAttributes with given COSDictionary of attributes. @param attributes COSDictionary containing device N-attributes
52 Initializes a new PDDeviceNProcess instance with the given device attributes. @param attributes COSDictionary containing device attributes
53 Initializes PDGamma with a COSArray. @param array input data in COS format
54 Initializes a new PDTristimulus instance with the provided color data. @param array COSArray containing tristimulus color values
55 Initializes a PDTransparencyGroupAttributes instance from a COS dictionary. @param dic the COS dictionary to initialize with
56 Initializes the content properties with the given COS dictionary. @param props COSDictionary containing content properties
57 Initializes an Abstract Pattern instance from a COS dictionary. @param dictionary COSDictionary containing pattern data
58 Initializes a new PDShading instance from a COSDictionary object. @param shadingDictionary COSDictionary containing shading data
59 Initializes an instance of PDExtendedGraphicsState with a COSDictionary and ResourceCache. @param dictionary COSDictionary containing graphics state parameters @param resourceCache ResourceCache for caching resources
60 Initializes a PDSoftMask object from a COSDictionary and a ResourceCache. @param dictionary PDF document dictionary @param resourceCache cache of resources used in the document
61 Initializes a new paragraph with the given text content. @param text the text to be displayed in this paragraph.
62 Initializes a new Word object with provided text content. @param text the word's textual representation
63 Initializes a new PDAction instance from a COS dictionary. @param a COS dictionary containing action data
64 Initializes the PDActionFactory utility class.
65 Initializes PDAdditionalActions with a COSDictionary. @param a COSDictionary containing additional actions data
66 Initializes PDAnnotationAdditionalActions with a COS dictionary. @param a COS dictionary containing annotation additional actions data
67 Initializes catalog additional actions from given PDF dictionary. @param a COSDictionary containing additional actions data
68 Initializes additional form field actions from the given dictionary. @param a COSDictionary containing additional form field actions data
69 Initializes Additional Actions with a COS Dictionary. @param a COS dictionary containing additional actions data
70 Initializes a new PDTargetDirectory instance from a COSDictionary. @param dictionary input dictionary containing target directory data
71 Initializes a new instance of the class with a given COS dictionary. @param dictionary COS dictionary containing URI information
72 Initializes PDWindowsLaunchParams object from COS dictionary. @param p COS dictionary containing launch parameters
73 Initializes PDAppearanceCharacteristicsDictionary with a COSDictionary. @param dict COSDictionary to be used for initialization
74 Initializes a new instance of PDAppearanceDictionary from a given COSDictionary object. @param dictionary the COSDictionary object to initialize from
75 Initializes a new instance of PDAppearanceEntry from a COS dictionary. @param entry COS dictionary containing appearance data
76 Initializes PDBorderEffectDictionary with a COSDictionary instance. @param dict COSDictionary containing border effect data
77 Initializes border style dictionary from COS input. @param dict COSDictionary containing border style data
78 Initializes an external data dictionary instance with the provided COS dictionary. @param dictionary COSDictionary object representing the external data dictionary.
79 Initializes a CloudyBorder object with the specified appearance content stream and parameters. @param stream appearance content stream @param intensity cloudy border intensity @param lineWidth line width of the cloudy border @param rect rectangle bounds for the cloudy border
80 Initializes a new PDPropBuild object with a COSDictionary. @param dict COSDictionary containing property build data
81 Initializes PDPropBuildDataDict with COSDictionary. @param dict COSDictionary object to initialize from
82 Initializes a PDSeedValue object from a COSDictionary. @param dict COSDictionary containing seed value data
83 Initializes a new certificate instance from a COS dictionary. @param dict input dictionary containing certificate data
84 Initializes MDP from COSDictionary. @param dict COSDictionary containing MDP data
85 Initializes PDSeedValueTimeStamp from COSDictionary. @param dict input dictionary containing seed value timestamp data
86 Initializes a new PDSignature instance from a COSDictionary. @param dict COSDictionary containing signature data
87 Initializes signature options with default page number.
88 Constructs a new instance of PDFTemplateCreator with the provided builder.
89 Initializes FieldUtils instance.
90 Initializes a new PDField instance with the given AcroForm, COSDictionary, and parent non-terminal field.
91 Initializes PDXFAResource object with XFA base COS. @param xfaBase XFA base COS (xfa)
92 Initializes a new instance of PDMeasureDictionary with the given COSDictionary. @param dictionary COSDictionary containing measurement data
93 Initializes PDNumberFormatDictionary with the given COSDictionary.
94 Initializes a new instance of the viewport dictionary with the provided COS dictionary.
95 Constructs a new PDThread instance from a given COSDictionary.
96 Initializes a new PD Thread Bead from an existing COS Dictionary. @param b COS dictionary containing thread bead data
97 Initializes viewer preferences from given COS dictionary. @param dic COS dictionary containing viewer preference settings
98 Initializes PageDrawerParameters object. @param renderer PDFRenderer instance @param page PDPage to render @param subsamplingAllowed whether subsampling is allowed @param destination RenderDestination for output @param renderingHints RenderingHints for rendering options @param imageDownscalingOptimizationThreshold threshold value for optimization
99 Initializes a new instance of LineItem with no text position.
100 Initializes a Matrix object with the default transformation matrix.
101 Initializes a Matrix instance from a single float array. @param src the source array of floats to be used as matrix data
102 Initializes a Matrix object with the specified values. @param a, b, c, d, e, f matrix elements
103 Initializes an empty instance of the XMLUtil class.
104 Initializes a new instance of PDFStreamEngine.
105 Adds an OperatorProcessor to the internal registry by its name. @param op OperatorProcessor instance to be added
106 Sets the terminal character within allowed ASCII range (118-126, excluding 'z'). @param term valid terminal character
107 Sets the number of pages to split data at. @param split positive integer value for page count
108 Sets the start page number. @param start positive integer representing the start page
109 Sets the end page value. @param end valid end page number
110 Sets leniency mode for date/time parsing. @param lenient true to allow lenient parsing, false otherwise
111 Initializes CompressParameters with specified object stream size. @param objectStreamSize non-negative integer representing the size of the object stream. Negative values are not allowed.
112 Sets the blend mode for graphics operations. @param blendMode non-null BlendMode enumeration value
113 Initializes a PDFieldTree with an AcroForm. @param acroForm non-null PDAcroForm object
114 Returns the length of the COS stream. @throws IllegalStateException if an OutputStream is associated with this COSStream
115 Initializes a new instance of PDFMergerUtility with an empty list of source PDFs.
116 Initializes COSWriterObjectStream with a compression pool. @param compressionPool Compression pool to use
117 Initializes text clipping buffer to store individual clip areas.
118 Adds a new file as a source. @param source file to be added
119 Adds a new RandomAccessRead source to the collection. @param source RandomAccessRead object to be added
120 Adds a given name to the instructions list. @param name the name to be added
121 Adds an instruction sequence to the current process. @param child InstructionSequence object to be added
122 Adds a PublicKeyRecipient to the collection of recipients. @param recipient PublicKeyRecipient object to be added
123 Adds a new region with its corresponding rectangular area. @param regionName unique identifier for the region @param rect the rectangular area of the region
124 Sets the trailer for the current cross-reference object. @param trailer COSDictionary representing the trailer to set
125 Retrieves an object from the key pool by its unique identifier. @param key unique object identifier
126 Retrieves an Operator instance by name. @param operatorName unique identifier of the Operator
127 Retrieves Unicode character name from cache or returns ".notdef" if not found. @param unicodeSequence the Unicode sequence to look up
128 Retrieves current graphics state from the stack. @return GraphicsState object representing the current graphics state
129 Pops and discards top graphics state from stack.
130 Returns the size of the graphics stack. @return number of elements in the graphicsStack collection
131 Transforms 2D point using given affine matrix. @param x input x-coordinate @param y input y-coordinate @return transformed Point2D object
132 Decreases the current level by 1. If the resulting level becomes negative, logs an error message.
133 Adds an integer to the instructions collection. @param value integer value to be added
134 Throws IOException if COSStream is closed and cannot be read.
135 Throws an IOException when attempting to reset. @throws IOException always, as reset is unsupported
136 Throws an exception when attempting to reset. @throws IOException always thrown due to unsupported operation.
137 Retrieves encryption configuration for parsed document. @throws IOException if document has not been parsed
138 Returns the access permission associated with this parsed document. @throws IOException if document has not been parsed
139 Constructs an InvalidPasswordException with a custom error message. @param message a description of the invalid password condition
140 Initializes an Operator object from a string representation. @param aOperator unique operator identifier (throws exception for "/")
141 Returns a human-readable string representation of this PDFOperator. @return A string in format "PDFOperator{operatorValue}"
142 Returns a string representation of this COSArray object. @return A human-readable string containing array elements and type information.
143 Returns a string representation of this COSObject. The format is "COSObject{key}" where key is the result of calling getKey().
144 Retrieves a filter by name, throwing an IOException if not found. @param filterName unique COS filter identifier
145 Adds real-world value to instructions list. @param value numeric value to be recorded
146 Sets the visible sign designer's width. @param width new image width value @return PDVisibleSignDesigner instance for method chaining
147 Sets the image height and updates the formatter rectangle parameters. @param height new image height in pixels @return PDVisibleSignDesigner instance for chaining
148 Calculates the Euclidean distance between two points. @param ps starting point @param pe ending point @return distance as a positive double value
149 Calculates the value of the edge equation for a given point and two reference points. @param p Point to evaluate @param p1 Reference point 1 @param p2 Reference point 2
150 Initializes a PDMarkedContent object with the given tag and properties. @param tag the name of the content tag @param properties COSDictionary containing additional metadata
151 Returns the type name of the pattern.
152 Returns the type of shading resource.
153 Retrieves the default value from inheritable attributes. @return default value as a string, or empty string if not found.
154 Clears the checkbox value to "Off". @throws IOException if an I/O error occurs
155 Checks if the white point coordinates match the default values. @return true if wpX=wpY=wpZ=1.0f, false otherwise
156 Calculates a color table for axial shading based on the given domain and factor. @return Array of RGB color values, length equals to factor + 1
157 Computes color table based on radial shading function. @return array of RGB colors with length factor + 1
158 Creates and returns a code table with initial values.
159 Retrieves an object from the collection at specified index. @param index position of the desired object in the list @return COSBase object if found, null otherwise
160 Retrieves an element at the specified index from the underlying collection. @param index position of the desired element @return element at the given index or null if out of bounds
161 Returns the number of elements in the collection. @return Size of the collection as an integer.
162 Returns the number of elements in the collection. @return Size of the underlying collection.
163 Returns the number of email recipients. @return integer count of recipients in the list
164 Checks if the collection of objects is empty. @return true if no objects are present, false otherwise
165 Checks if this collection is empty. @return true if no elements are present, false otherwise
166 Removes a PublicKeyRecipient from the collection. @param recipient PublicKeyRecipient to be removed @return true if removed, false otherwise
167 Returns an iterator over the COSBase objects in this collection. @return Iterator instance iterating over the collection's elements.
168 Returns an iterator over this collection's elements. @return Iterator instance or null if actual is null
169 Returns an iterator over the list of public key recipients. @return Iterator over PublicKeyRecipient objects
170 Converts internal collection to a list of COSBase objects. @return List of COSBase objects
171 Converts COSName objects to a list of name strings.
172 Converts COS strings to a list of string values.
173 Wraps a primitive boolean in a COSBoolean object. @param value boolean value to wrap
174 Returns a string representation of the value. @return String value of this object
175 Writes a PDF representation of true or false condition to the specified output stream. @param output OutputStream where the PDF data will be written
176 Writes PDF header to the specified output stream. @param output OutputStream to write to
177 Writes raw byte array to output stream.
178 Returns an immutable set of key-value pairs (COSName, COSBase) entries.
179 Checks if an entry has changed between two versions. @param oldEntry original entry @param newEntry updated entry @return true if the entry has changed, false otherwise
180 Returns the number of elements in the collection. @return The size of the collection.
181 Retrieves an item from the collection by its name. @param key unique identifier of the item to fetch
182 Returns a set of COS file names associated with this object.
183 Returns a collection of COSBase objects from the internal map. @return Collection of COSBase values
184 Adds all key-value pairs from the provided COS dictionary to this collection. @param dict COS dictionary containing items to be added
185 Checks if the map of items contains the specified key. @param name key to search for
186 Tokenizes input string into array of substrings separated by spaces. @param s input string to be tokenized
187 Converts String to integer value. @param token input string representation of an integer @return integer value or throws NumberFormatException if invalid
188 Returns string representation of FunctionType. @return concatenated string with type name and value
189 Sets the encryption key length to one of the supported values. @param l valid key length (40, 128, or 256)
190 Sets the starting page value. @param startPageValue 1-based page number (must be > 0)
191 Sets the end page value for pagination. @param endPageValue 1-based end page number
192 Initializes BruteForceParser with COSDocument and COSParser. @param cosDocument input document to parse @param cosParser COS parser instance for parsing
193 Initializes an empty XrefTrailer object with default table type.
194 Manages the trailer object for cross-reference data.
195 Constructs a PDResources object from the given COSDictionary. @param resourceDictionary dictionary of PDF resources, cannot be null
196 Initializes the PDResources object with a COS dictionary and resource cache. @param resourceDictionary COS dictionary containing resource data @param resourceCache cache for storing preloaded resources
197 Initializes operator mapping with various mathematical and logical functions.
198 Initializes an AcroForm object from a PDF document and COS dictionary. @param doc the parent PDF document @param form the COS dictionary representing the AcroForm
199 Returns the number of trailers in the byte position to XREF map.
200 Retrieves an object from the pool using its unique key. @param key unique identifier for the object in the pool @return pooled COSObject instance or null if not found
201 Converts string representation to floating-point number. @param token input value as a string @return parsed float value or throws NumberFormatException if invalid
202 Coerces a float value into a standard range. @param floatValue input value to be coerced
203 Calculates and returns the text direction in degrees. @return direction in degrees (0-360)
204 Compares this float value with another object for equality. @param o the object to compare with
205 Computes hash code based on the 'value' field. @return Hash code as an integer
206 Formats the numeric value as a string, handling scientific notation. @return Formatted string representation of the value.
207 Writes "null" to the output stream, followed by a space.
208 Initializes COSIncrement with given update origin. @param incrementOrigin COSUpdateInfo object containing origin data
209 Initializes PDF clone utility with destination document. @param dest PDDocument instance to clone into
210 Initializes the cache with stability feature enabled. @param enableStableCache true to enable stable caching
211 Checks whether the object needs to be updated. @return true if updated, false otherwise
212 Checks if the given COSBase object is contained in the current collection of objects. @param base COSBase object to search for @return true if the object is found, false otherwise
213 Checks if COSBase instance is excluded from processing. @param base COSBase object to check
214 Adds a COSBase object to the collection. @param object COSBase object to be added
215 Adds a COSObject to the list of processed objects. @param base the COSObject instance to be added
216 Registers TrueType font to be closed when application terminates. @param ttf TrueType font object to close
217 Initializes an ASCII85 decoder input stream.
218 Initializes CCITT Fax decoder for specified columns, type and options. @param stream input stream to read from @param columns number of pixels per line @param type compression type (CCITT T4, T6 or modified Huffman RLE) @param options various flags (2D encoding, fill bits, uncompressed data) @param byteAligned whether data is byte-aligned (true) or not (false)
219 Checks if this integer is equal to another object. @param o Object to compare with, must be a COSInteger
220 Returns a string representation of this COSInt object.
221 Writes user value as PDF content to provided output stream. @param output OutputStream instance for writing PDF data
222 Retrieves a value from the backing map based on the provided key. @param key unique identifier for the desired value @return Value associated with the key or null if not found
223 Retrieves mapped font name from alias map. @param fontName original font name @return Mapped font name or null if not found
224 Retrieves selected export values from existing list. @return List of selected String values
225 Checks if the name field is empty. @return true if name is empty, false otherwise
226 Writes user comment to output stream, rejecting comments with line breaks. @param comment user-provided comment string
227 Writes a newline character to the output stream.
228 Converts a string to its UTF-16BE hexadecimal representation. @param text input string
229 Retrieves the COSBase object associated with this instance. @return COSBase object or null if not successfully dereferenced
230 Creates a COSObjectKey instance with the specified object number, generation, and stream index. @param num non-negative object number @param gen non-negative generation number @param index stream index value
231 Computes the hash code based on numberAndGeneration. @return unique hash value as an integer
232 Calculates the absolute scaling factor along X-axis. @return Scaling factor value
233 Calculates the scaling factor for the Y-axis. @return Scaling factor as a float value
234 Initializes an ASCII85OutputStream instance. @param out OutputStream to write encoded data to
235 Initializes COSStandardOutputStream with an underlying OutputStream. @param out OutputStream to wrap and stream output through.
236 Initializes a COSStandardOutputStream with an output stream and file position. @param out OutputStream to write to @param position Initial file position in bytes
237 Copies and returns the entire byte array. @return A copy of the original byte array
238 Writes incremental PDF data to output stream. @throws IOException if I/O operation fails
239 Returns the input data as an ASCII-encoded string. @return ASCII string representation of bytes or null if invalid
240 Checks whether this document is currently accepting updates. @return true if updating is allowed, false otherwise
241 Converts byte array to string representation. @param bytes input byte array @return formatted string or null if invalid data
242 Reads and extracts an operator from the input stream. @return extracted operator string or empty if not found
243 Converts a string to an array of bytes. @param text input string @return byte array representation or null if invalid input
244 Checks if a given Unicode character exists in the mapping. @param character the character to search for @return true if found, false otherwise
245 Checks if map contains specified key. @param key object to search for in map
246 Checks if given font name is an alias in font map. @param fontName name of the font to check @return true if found, false otherwise
247 Returns an unmodifiable map of code to name mappings. @return A read-only map where keys are unique integer codes and values are corresponding names.
248 Returns an unmodifiable map mapping usernames to corresponding code values.
249 Disables setting need to be updated flag. @throws UnsupportedOperationException always
250 Reads a single byte from the Ascii85 encoded stream. @throws IOException if end-of-file or invalid data is encountered
251 Closes and releases resources associated with this object.
252 Writes a single ASCII byte to the output stream, potentially triggering ASCII85 compression and newline flushing. @param b the ASCII byte to write
253 Flushes output, writing encoded data and footer. @throws IOException if I/O error occurs
254 Pads or truncates input password to fixed length. @param password input password byte array @return padded password byte array
255 Closes resources and logs a warning if text mode is active but endText() was not called.
256 Writes XMP metadata to output stream. @param xmp byte array containing XMP data
257 Determines if pagination should occur at the specified page. @param pageNumber current page number
258 Throws an exception to prevent modification of this instance.
259 Disables modification of subsampling X value. @throws UnsupportedOperationException always thrown.
260 Disallows modification of subsampling Y value. @throws UnsupportedOperationException always thrown.
261 Disables modification of subsampling offset X. @throws UnsupportedOperationException always, as this instance is immutable.
262 Disables setting subsampling offset Y due to immutability.
263 Throws an exception as JPX encoding is currently unsupported.
264 Disallows setting upper right Y coordinate due to immutable nature. @throws UnsupportedOperationException always thrown.
265 Disallows setting upper-right X coordinate due to immutability. @throws UnsupportedOperationException always.
266 Throws an exception when attempting to modify immutable property.
267 Disables setting lower-left X coordinate due to immutability. @throws UnsupportedOperationException always, as this is an immutable object
268 Returns signature text (currently unsupported). @throws UnsupportedOperationException always thrown
269 Sets designer's signature text. @param signatureText user-provided text to be displayed
270 Throws an exception when attempting to set a string value, recommending use of PDSignature parameterized method instead.
271 Retrieves the compression level for Deflater operations. @return Compression level between -1 and BEST_COMPRESSION (9)
272 Checks if an object is contained in this collection. @param o Object to search for
273 Initializes FlateFilterDecoderStream with input stream. @param inputStream InputStream to read from
274 Closes the inflator and calls superclass's close method. @throws IOException if an I/O error occurs during closing
275 Sets the image data and updates dimensions and rectangle parameters. @param image BufferedImage object to be set
276 Performs predictor row decoding based on the specified predictor type. @param predictor the type of prediction to perform @param colors number of color components in each pixel @param bitsPerComponent bits per component for each color @param columns number of pixels in each row @param actline current line being processed @param lastline previous line being processed
277 Checks if a COSObjectKey is present in the key pool. @param key COSObjectKey to search for
278 Checks if an inverted index entry exists by name. @param name unique identifier to search for @return true if found, false otherwise
279 Checks if a given product code exists in the code-to-name mapping. @param code unique product identifier @return true if code is found, false otherwise
280 Escapes special XML characters in the input string. @param input string to escape @return escaped string or null if invalid input
281 Sets the bounding box (BBox) for this object. @param bbox PDRectangle object representing the new BBox or null to remove it
282 Decodes a hexadecimal string into a byte array. @param s input hexadecimal string @return decoded byte array or null on error
283 Closes all resources and throws the first encountered IOException.
284 Closes the document and underlying I/O streams. @throws IOException if an error occurs during closure
285 Returns a COS object representation, either from the wrapped stream or dictionary. @return COSDictionary object or null if not applicable
286 Initializes a PDXObject with the given PDStream and subtype COS name. @param stream PDStream object containing document information @param subtype COSName of the subtype (e.g., XOBJECT)
287 Returns the COS object wrapped in a COSStream. @return COSStream containing the COS object
288 Retrieves metadata as a COSStream object. @return COSStream containing metadata or null if not available
289 Sets COS metadata from provided stream. @param metadata COSStream containing metadata
290 Compares this PDAnnotation object with another object for equality. @param o the object to compare with @return true if objects are equal, false otherwise
291 Returns a set of keys from the underlying map. @return Set of unique keys or an empty set if none exist.
292 Returns a collection of actual values. @return Collection of V objects
293 Initializes a new parser instance with the provided PDF source. @param pdfSource RandomAccessRead object representing the PDF file
294 Checks if the next character in the input stream is a digit.
295 Adds a cross-reference (XRef) entry with specified key and offset. @param objKey unique COSObjectKey identifier @param offset long offset value
296 Adds a new mapping from code to name and vice versa. @param code unique identifier @param name corresponding user profile name
297 Checks if the next token in the input stream is whitespace.
298 Skips line breaks (CR, LF, or CRLF) and returns whether to skip next character. @param linebreak current byte value @return true to skip next character, false otherwise
299 Checks for the end of a string based on the next 3 bytes. @param bracesParameter current position in the string @return 0 if end of string found, otherwise remaining length
300 Checks if the given character marks the end of a line. @param c input character code
301 Reads a string number from the input stream. @return StringBuilder containing the read number or null if not found
302 Decodes the ByteArrayOutputStream into a UTF-8 encoded string, or falls back to an alternative charset if decoding fails. @param buffer ByteArrayOutputStream containing encoded data
303 Verifies the next character from the input stream matches an expected value. @param ec expected character to compare with
304 Checks if next character in input stream is whitespace. @throws IOException if an I/O error occurs while peeking at source
305 Extracts the start XREF value from the input stream. @return The byte offset of the first object in the XREF, or -1 if not found
306 Searches for the last End-Of-File (EOF) marker in the PDF source. @return the position of the last EOF marker or Long.MAX_VALUE if not found
307 Searches for Xref tables in a PDF and returns their offsets.
308 Retrieves the number of color components. @return The number of color components (1 or number from color space)
309 Searches for XRef streams in the PDF and returns their offsets.
310 Retrieves cross-reference table from trailer resolver. @return Map of object keys to their corresponding IDs
311 Calculates the offset to the start of the xref table. @throws IOException if an error occurs during file processing
312 Reads stream until "endstream" keyword is found. @param out output filter stream to write intermediate content @return length of filtered stream
313 Initializes a Unicode writer. Sets write mode to text only (no graphics).
314 Sets label for a specific page range. @param startPage starting page number >= 0 @param item PDPageLabelRange object to associate with the page
315 Adds a Unicode string mapping to the specified CID. @param cid unique 16-bit identifier @param text Unicode string to store (cannot be null or empty)
316 Checks for binary data presence by analyzing a character buffer. @return true if no binary data found, false otherwise
317 Checks if next input character is space or return. @return true if next char is space or return, false otherwise
318 Adds a new reference entry to the collection. @param entry XReferenceEntry object to be added
319 Calculates the minimum number of bytes required to display each column.
320 Updates the pool's maximum object reference number. @param highestXRefObjectNumber new maximum value
321 Retrieves the first trailer dictionary from the byte position to XREF map. @return The first trailer dictionary or null if the map is empty
322 Retrieves the last trailer object from the map. @return Trailer object or null if map is empty
323 Retrieves object numbers contained in the given object. @param objstmObjNr unique object identifier @return Set of contained object numbers or null if not resolved
324 Retrieves the numeric value of the first column.
325 Returns the generation value of the referenced key.
326 Returns a human-readable string representation of this FreeReference object. @return String containing key, next free object and reference type
327 Returns the value of the second column as a 32-bit integer.
328 Returns the value of the third column in the referenced key. @return Generation value as a long integer
329 Returns a string representation of the object, including its key, type, and byte offset.
330 Retrieves the value from the second column based on parent key. @return number associated with the parent key
331 Returns the value of the third column in the data stream. @return A unique identifier (long) representing the third column's value.
332 Returns a string representation of this ObjectStreamEntry. @return A detailed string containing the entry's key, type, index, and parent key.
333 Writes bytes to output stream. @param b byte array data @param off offset in array (0 = start) @param len number of bytes to write
334 Writes a single byte to the output stream.
335 Writes end-of-line character(s) if not already on a new line. @throws IOException if an I/O error occurs while writing.
336 Checks whether compression is enabled. @return true if compression parameters are set and enabled, false otherwise
337 Adds an XReferenceEntry to the collection. @param entry XReferenceEntry object to be added
338 Writes an object reference to the OutputStream. @param output OutputStream to write to @param indirectReference COSObjectKey containing the reference details
339 Retrieves an MD5 hash algorithm instance. @return MessageDigest object for hashing strings
340 Retrieves a SHA-1 message digest instance. @return SHA-1 MessageDigest object or throws RuntimeException if not found
341 Retrieves a SHA-256 message digest instance.
342 Retrieves the highest XRef object number from the pool.
343 Returns an unmodifiable list of prepared COS object keys.
344 Updates the reverse mapping of user IDs to names and vice versa. @param code unique user identifier @param name corresponding user name
345 Removes a region by name from the collection. @param regionName unique identifier of the region to be removed
346 Sets maximum decimal places for formatting. @param fractionDigitsNumber number of decimal places to display
347 Initializes a new PDF content stream with the given parameters. @param document the parent PDDocument instance @param outputStream the output stream to write to @param resources PDResources object for this content stream
348 Retrieves the Y component of the vertical displacement vector for a given code. @param code unique identifier @return vertical displacement vector Y value or default value if not found
349 Returns standard value if present, otherwise returns default value. @param standardValue potential non-null value @param defaultValue fallback value to use when standard is null
350 Scales the PDVisibleSignDesigner by a specified percentage. @param percent zoom factor in percent
351 Returns the width of the image. @return Image width in pixels
352 Returns the height of the image. @return Height value in pixels.
353 Adjusts the sign designer's layout for rotation. @return the adjusted PDVisibleSignDesigner instance
354 Creates a new AffineTransform with values from the single array. @return AffineTransform object representing a 2D linear transformation.
355 Encodes a string into a binary format using multi-byte encoding. @param text input string to be encoded @return encoded byte array or null if an error occurs
356 Converts Unicode code point to its corresponding name. @param codePoint Unicode code point value @return name of the Unicode character or ".notdef" if not found
357 Applies GSUB rules to a word and writes the transformed glyph IDs to an output stream. @param gsubWorker GSUB worker object @param out output stream @param font PD Type 0 font object @param word input string @return list of transformed glyph IDs
358 Initializes a new PDDocument instance from the given COSDocument and data sources. @param doc COSDocument containing PDF metadata @param source RandomAccessRead stream for PDF content @param permission AccessPermission object controlling document access
359 Initializes an FDFDocument object from a COSDocument and a data source. @param doc the COSDocument to initialize from @param source the RandomAccessRead data source for the FDF file
360 Converts collection to an array. @return Array representation of this collection or null if empty
361 Retrieves index of specified object in collection. @param o object to search for
362 Compares this instance to another Object using its actual value. @param o the object to compare with, or null if none
363 Returns hash code of actual object. @return Hash code value based on actual object's implementation
364 Returns index of specified object in this list. @param o object to search for
365 Returns a list iterator over this collection's elements. @return ListIterator object to iterate through elements
366 Returns a ListIterator instance at the specified index. @param index position in the underlying list to start iteration
367 Returns a sublist of elements within the specified range. @param fromIndex start index (inclusive) of the sublist @param toIndex end index (exclusive) of the sublist
368 Checks if a specified value exists in the collection of actual values. @param value object to search for @return true if found, false otherwise
369 Returns an unmodifiable set of key-value entries in this map.
370 Returns an unmodifiable set of names. @return Set of unique strings representing names
371 Returns a string representation of this object's actuals. @return String representation of actuals
372 Converts a COSBase object into a PD-compatible object. @param base COSBase object to convert
373 Generates a string of consecutive letters based on input number. @param num positive integer count of letters @return String of letters (e.g. "abcdefghijklmnopqrstuvwxyz")
374 Returns the count of page ranges.
375 Retrieves page label range by index. @param startPage starting page number @return PDPageLabelRange object or null if not found
376 Returns a set of unique page indices. @return Set of Integer values representing page indices.
377 Returns cloned copy of dash array. @return cloned float array representing dashes
378 Initializes PDColor object with specified components and color space. @param components array of color components (e.g. RGB or CMYK values) @param colorSpace associated color space (may be null)
379 Returns the color components as a float array. @return Array of color components or cloned array if colorspace unknown
380 Initializes a CoordinateColorPair object with point and color data. @param p Point2D representing the spatial coordinates @param c array of color values (cloned to ensure immutability)
381 Returns a string representation of FunctionType2, including its constituent fields.
382 Returns the minimum and maximum X and Y coordinates of a rectangle. @return array of four integers: minX, maxX, minY, maxY
383 Removes and returns the top number from the stack. @return Number object or null if stack is empty
384 Removes and returns an integer from the top of the stack. @return the popped integer value or -1 if stack is empty
385 Retrieves and returns the real value from the top of the stack. @return the real value as a float or throws an exception if not found
386 Adds a boolean value to the instructions collection. @param value the boolean value to be added
387 Initializes ExecutionContext with an Operator set. @param operatorSet collection of available operators
388 Retrieves pre-compiled patterns for list item expressions. @return List of compiled Pattern objects
389 Converts an Object array to a comma-separated string representation. @param array the input array of Objects @return a formatted string or empty if array is null/empty
390 Converts a float array to a comma-separated string representation. @param array input float array @return formatted string or empty if array is null/empty
391 Adds a text element at specified position to content collection. @param text TextPosition object containing text and position information
392 Adds marked content to the collection. @param markedContent PDMarkedContent object containing highlighted content
393 Adds a PDXObject to the contents collection. @param xobject PDXObject instance to be added
394 Sets whether printing is allowed. @param allowPrinting true to enable, false to disable printing
395 Sets whether modifications are allowed. @param allowModifications true to enable modification, false otherwise
396 Enables or disables content extraction based on permission. @param allowExtraction true to enable, false to disable extraction
397 Sets whether annotations can be modified. @param allowAnnotationModification true to allow modification, false otherwise
398 Sets permission to fill in form based on read-only state. @param allowFillingInForm true to enable filling in form
399 Enables or disables extraction of content for accessibility. @param allowExtraction true to enable, false to disable
400 Enables or disables document assembly capability. @param allowAssembly true to permit, false to deny document assembly
401 Sets whether faithful printing is allowed. @param canPrintFaithful true to enable or false to disable faithful printing
402 Checks if print permission bit is enabled. @return true if print permission is granted, false otherwise
403 Checks if modification permission is enabled. @return true if modification bit is set, false otherwise
404 Checks if content extraction permission is enabled. @return true if permission bit is set, false otherwise
405 Checks if user has permission to modify annotations. @return true if permission granted, false otherwise
406 Checks if user has permission to fill in form. @return true if permission bit is set, false otherwise
407 Checks if accessibility extraction permission bit is set. @return true if permission granted, false otherwise
408 Checks if the user has permission to assemble documents. @return true if permission is granted, false otherwise
409 Checks if faithful print permission is enabled. @return true if permitted, false otherwise
410 Retrieves a private key from the key store. @throws KeyStoreException if key retrieval fails
411 Returns a secure random number generator instance. If a custom instance is set, it's returned; otherwise, a default one is created.
412 Initializes encryption key from provided byte array. @param key encryption key bytes @throws IllegalArgumentException if key length is invalid (1-32 bytes)
413 Writes a byte to the output stream with XOR encryption. @param aByte byte to encrypt @param output OutputStream for encrypted data
414 Replaces non-standard diacritic characters with their Unicode equivalents. @param str input string to process
415 Checks whether a Unicode code point is prohibited. @param codepoint the Unicode code point to check @return true if the code point is prohibited, false otherwise
416 Determines the version number based on key length and AES preference. @return Version number as an integer
417 Returns singleton instance of Bouncy Castle security provider. @return Provider object or existing instance if already created
418 Extracts text value from a given XML node and its children. @param node the root XML node to traverse @return concatenated text values or empty string if none found
419 Writes a string to the output stream. @param text string data to be written
420 Retrieves a predefined CMap by name, caching it if not already loaded. @param cMapName unique identifier of the predefined CMap @return preloaded CMap instance or null if unknown
421 Parses a CMap from the given RandomAccessRead object. @param randomAccessRead input data stream @return parsed CMap object or null if parsing fails
422 Generates a set of possible PostScript font names. @param postScriptName the original PostScript name @return Set containing the original and hyphen-less names
423 Calculates the set of points on a line between two points. @param x0 initial x-coordinate @param y0 initial y-coordinate @param x1 end x-coordinate @param y1 end y-coordinate @return Set of Point objects representing the line's points
424 Calculates the number of unique points in the provided array. @param p array of Point2D objects @return count of distinct points
425 Adds a font to the cache with its corresponding metadata. @param info FontInfo object containing metadata @param font FontBoxFont object representing the font to add
426 Retrieves font information from cache by ID. @param info FontInfo object containing unique identifier
427 Adds a replacement string for a given match pattern. @param match pattern to match (converted to lowercase) @param replace replacement string
428 Retrieves FontInfo by PostScript name and format. @param format font format @param postScriptName unique PostScript name identifier @return FontInfo object or null if not found matching the given parameters.
429 Retrieves list of substitutes for given PostScript name. @param postScriptName name to find substitutes for @return List of substitute names or empty list if not found
430 Retrieves display name from the given code. @param code unique identifier @return display name or ".notdef" if unknown
431 Retrieves Type 2 character string for the given CID. @param cid unique character identifier @return Type 2 char string or null if not available
432 Converts a given code to its corresponding CID. @param code input code value @return equivalent CID integer value
433 Converts color components to a single RGB integer value. @return RGB integer value in ARGB format
434 Calculates the final color value after backdrop removal. @param groupRGB RGB color of the foreground @param backdropRGB RGB color of the background @param shift bit shift to extract color component @param alphaFactor factor to blend colors (0.0 - 1.0) @return final RGB color value (0-255)
435 Extracts a specified range of bytes from internal storage. @return A byte array containing the extracted data
436 Retrieves Adobe glyph list. @return GlyphList instance containing Adobe glyphs
437 Extracts and initializes Windows, MacRoman, and Unicode BMP/2.0 CMAP tables.
438 Checks if True-Type font embedding is permitted. @param ttf True-TypeFont object to check @return true if embedding is allowed, false otherwise
439 Checks if font subsetting is permitted based on the TrueType Font's OS/2 table. @param ttf TrueType Font object @return true if subsetting allowed, false otherwise
440 Converts string to its corresponding Unicode code point. @param name input string to convert
441 Constructs a PDColor object with specified components, pattern name, and color space. @param components array of color components @param patternName COSName for the pattern @param colorSpace PDColorSpace to associate with this color
442 Creates a BufferedImage from the provided WritableRaster and AWT ColorSpace. @param raster Writable image data @param awtColorSpace AWT color space to use for the image
443 Converts WritableRaster to BufferedImage in RGB format. @param raster input image data @return RGB BufferedImage or null if unable to convert
444 Checks if the given ICC profile is sRGB. @param profile ICC profile to check @return true if profile is sRGB, false otherwise
445 Returns the color space type based on the ICC profile or alternate color space. @return ColorSpace type (e.g. TYPE_GRAY, TYPE_RGB) or -1 for unknown type
446 Initializes PredictorEncoder with image and document. @param document PDDocument object @param image BufferedImage to encode
447 Scales a BufferedImage to the specified size and type. @param image original image @param width desired width @param height desired height @param type desired image type (e.g. TYPE_INT_RGB) @param interpolate whether to use interpolation for scaling @return scaled BufferedImage or null on failure
448 Returns the underlying COS (Calendar Object Structure) dictionary. @return COSDictionary object representing the internal COS structure
449 Sets the corner color of the patch to the specified 2D color array. @param color 2D float array representing RGB values (0-1) for each corner
450 Calculates and returns the overall clipping path by intersecting all given paths. @return Area representing the combined clipping path
451 Constructs a TextAttribute with the given name. @param name unique attribute identifier
452 Calculates the hash code of this object based on its dictionary. @return unique hash value representing the object's state.
453 Returns an affine transform matrix representing the translation to the origin.
454 Computes parameters for a polygon segment based on intermediate and corner adjustments, returning the number of curls. @param advInterm intermediate adjustment value @param advCorner corner adjustment value @param k scaling factor @param r radius @param length total length of the polygon segment @return array[0] fitting error angle, array[1] fitting error per curl, n number of curls
455 Flattens an ellipse into a series of points. @param left left edge of the ellipse @param bottom bottom edge of the ellipse @param right right edge of the ellipse @return array of Point2D.Double objects representing the flattened ellipse
456 Checks if the given GeneralPath represents a rectangular shape. @param path the GeneralPath to check @return true if the path is rectangular, false otherwise
457 Returns the template height based on page height.
458 Sets coordinate and returns the PDVisibleSignDesigner instance. @param x horizontal position @param y vertical position
459 Applies an affine transformation to this designer. @param affineTransform the transformation to apply
460 Ensures a PDOutlineItem has no sibling nodes. @param node the item to validate
461 Returns an iterator over child elements of this outline item.
462 Sets rendering hints for graphics operations. @param renderingHints collection of rendering hints to apply
463 Adapts the given clip path to match the current graphics transform. @param linePath input clip path @return adjusted clip path or original if no modifications needed
464 Calculates optimal subsampling factor for scaled image. @param pdImage input image @param at AffineTransform object @return integer subsampling factor (1-8)
465 Rounds input number up to the nearest integer using 5 decimal places. @param num input double value
466 Returns x-rotation value based on input rotation angle. @param rotation input rotation angle in degrees
467 Calculates the y-coordinate of the lower left point after rotation. @param rotation angle in degrees
468 Calculates the width of a rotated text based on its rotation angle. @param rotation rotation angle in degrees (0-360) @return text width when rotated, or absolute difference between x/y coordinates for 90/270-degree rotations
469 Writes characters from a TextPosition object to the output stream. @param text TextPosition containing Unicode characters to be written
470 Returns a string representation of this object by fetching its Unicode value.
471 Retrieves and returns text content for specified region. @param regionName unique name of region to fetch text for @return text content as a string or null if not found
472 Initializes article content with specified language direction. @param isLTR true if left-to-right, false otherwise
473 Writes article ending content to the output stream.
474 Writes line separator to output stream.
475 Writes word separator to output stream. @throws IOException if I/O error occurs while writing.
476 Starts a new paragraph, writing any outstanding end marker and initializing the paragraph flag.
477 Writes initial page content to output stream. @throws IOException if an I/O error occurs during writing.
478 Writes the page end content to the output stream.
479 Reorders and mirrors text based on bidi directionality. @param word input string to process
480 Parses a BIDI file from the given input stream, populating the MIRRORING_CHAR_MAP. @param inputStream input stream containing BIDI file data
481 Returns visually ordered Unicode string by reversing RTL sequences. @return String with reversed RTL sequences or original string if none found
482 Processes a TextPosition and updates character list based on containing region.
483 Checks if a single Unicode character is a diacritic. @return true if the character is a diacritic, false otherwise
484 Updates the Zone ID of a TimeZone object based on its offset. @param tz the TimeZone to update
485 Converts a byte to its hexadecimal string representation. @param b single byte value
486 Converts byte array to hexadecimal string representation. @param bytes input byte array @return hexadecimal string or null if invalid input
487 Converts a single byte to a byte array representing its hexadecimal representation. @param b the input byte @return a 2-element byte array containing the high and low nibbles of the input as separate bytes. Each nibble is represented by its corresponding hexadecimal value (0-9, A-F).
488 Converts binary bytes to ASCII-encoded hexadecimal string. @param bytes input byte array @return encoded byte array or null if invalid input
489 Writes a byte as two hexadecimal digits to the specified output stream. @param b the byte to write @param output the output stream where the hex representation is written
490 Decodes a Base64 string into a byte array. @param base64Value the input Base64 value
491 Initializes a Matrix from an AffineTransform. @param at the AffineTransform to convert
492 Transforms a 2D point using a linear transformation defined by the 'single' array. @param point Point2D object to be transformed
493 Formats a float value into an ASCII buffer with max fraction digits. @param value the number to format @param maxFractionDigits maximum decimal places to display @param asciiBuffer buffer to store formatted result @return length of formatted string or -1 for invalid input
494 Retrieves the PDFBox library version from a properties file. @return version string or null if loading fails
495 Parses an XML document from the given InputStream. @param is input stream containing XML data @param nsAware whether to make namespace-aware parsing @return Document object or throws IOException on error
496 Searches for a value in the Trie by iterating through the provided byte array. @param bytes byte array to search @return T object associated with the matching path, or null if not found
497 Initializes COSBoolean with specified boolean value. @param aValue boolean value to initialize with
498 Constructs a COSName instance with the specified name. @param aName unique identifier to be stored in the object
499 Creates singleton instance of COSNull.
500 Creates a COSString object from a byte array. @param bytes input data as a byte array @param forceHex whether to force hexadecimal representation
501 Initializes a new COSDictionary instance with an internal COSUpdateState.
502 Initializes COSObject with a given COSBase object. @param object COSBase object to initialize from
503 Initializes a COSObject instance with the given object and parser. @param object the COSBase object to wrap @param parser the ICOSParser for parsing and validation
504 Initializes a COSObject instance with a given key and parser. @param key unique identifier for the object @param parser parser used to parse the object's contents
505 Initializes DecodeOptions with rectangle bounds. @param x left coordinate of the rectangle @param y top coordinate of the rectangle @param width rectangle width @param height rectangle height
506 Initializes a new FreeXReference instance with provided key and next free object. @param key COSObjectKey representing the reference @param nextFreeObject ID of the next available free object
507 Creates a new ObjectStreamXReference instance with the specified parameters. @param objectStreamIndex index of the object stream @param key unique identifier for the referenced object @param object COSObject to reference @param parentKey COSObjectKey of the parent object (if applicable)
508 Initializes the resource cache with default settings.
509 Initializes a new instance of the wrapper with the specified COS dictionary. @param dictionary the underlying dictionary to wrap.
510 Constructs a PDAttributeObject instance from a COSDictionary. @param dictionary COSDictionary containing attribute data
511 Constructs a PDUserProperty object from a COSDictionary and PDUserAttributeObject. @param dictionary COS dictionary containing property data @param userAttributeObject associated user attribute object
512 Initializes a new PDOutlineNode instance from a COS Dictionary.
513 Initializes a new transition from a COSDictionary. @param dictionary COSDictionary containing transition data
514 Constructs a PDDestinationNameTreeNode instance from a COS dictionary. @param dic the COS dictionary containing data for this node
515 Constructs an instance from a COS dictionary. @param dic input dictionary containing file name tree node data
516 Constructs a PDJavascriptNameTreeNode from a COS dictionary. @param dic COS dictionary containing node data
517 Constructs a PDStructureElementNameTreeNode from a COSDictionary. @param dic COS dictionary containing node data
518 Creates a child node of type PDNumberTreeNode. @param dic COSDictionary representing the node's data
519 Initializes PDMetadata instance from COSStream data. @param str COSStream containing metadata information
520 Constructs a PDObjectStream from an existing COS stream. @param str COS stream to wrap
521 Initializes an embedded file with data from the given COS stream. @param str COS stream containing file data
522 Initializes a PDFunction object from a COSBase representation. @param function COSBase to initialize the PDF function from
523 Initializes a PDXObject instance from a COSStream and subtype. @param stream input stream containing object data @param subtype type of XObject being created
524 Initializes a new PDSimpleFileSpecification with the specified file name. @param fileName The name of the file.
525 Constructs a PDStructureElement instance from a COS dictionary. @param dic COS dictionary containing element data
526 Constructs a PDStructureTreeRoot instance from a COS dictionary.
527 Initializes a new instance of StandardDecryptionMaterial with the given password. @param pwd the encryption password to use
528 Initializes a new instance of PublicKeyProtectionPolicy.
529 Constructs a new StandardProtectionPolicy object with specified owner and user passwords and access permissions. @param ownerPassword password for the policy owner @param userPassword password for users accessing the policy @param permissions AccessPermission object defining the policy's access rules
530 Initializes the security handler instance.
531 Initializes an FDFAnnotationCaret with the given COS dictionary. @param a COS dictionary containing annotation caret properties
532 Creates an instance of FDFAnnotationCircle based on the provided COSDictionary.
533 Constructs an FDFAnnotationFileAttachment instance from a COS dictionary. @param a COS dictionary containing attachment data
534 Creates a new FDFAnnotationFreeText instance from the provided COS dictionary. @param a COS dictionary containing annotation data
535 Creates an instance of FDFAnnotationInk from a COS dictionary. @param a COS dictionary containing annotation ink data.
536 Initializes an FDFAnnotationLine object from a COS dictionary.
537 Constructs an FDFAnnotationLink object from a COS dictionary. @param a COS dictionary containing annotation link data
538 Constructs an FDFAnnotationPolygon object from a COS dictionary. @param a COSDictionary containing polygon annotation data
539 Initializes an FDFAnnotationPolyline object from a COS dictionary.
540 Constructs an FDFAnnotationSound object from a COS dictionary. @param a COS dictionary containing sound annotation data
541 Initializes an FDFAnnotationSquare object from a COS dictionary. @param a COS dictionary containing annotation data
542 Initializes an annotation stamp from the given COS dictionary. @param a COS dictionary containing stamp data
543 Creates an instance of FDFAnnotationText from a COS dictionary. @param a COS dictionary containing annotation text data
544 Creates an instance of FDFAnnotationTextMarkup from a COS dictionary. @param a COS dictionary containing annotation data
545 Extracts and returns Panose classification from bytes. @return PDPanoseClassification object or null if invalid data
546 Retrieves a Composite instance based on the provided blend mode and alpha value. @param blendMode blend mode to apply (cannot be null) @param constantAlpha alpha value between 0 and 1
547 Retrieves the transparency group attributes. @return PDTransparencyGroupAttributes object or null if not initialized
548 Initializes a new instance of the PDShadingPattern class from a COS dictionary. @param resourceDictionary COS dictionary containing shading pattern data
549 Initializes a PDTilingPattern object from a COS dictionary and resource cache. @param dictionary COS dictionary containing pattern data @param resourceCache resource cache for loading pattern resources
550 Constructs an instance of PDShadingType1 from a COS dictionary. @param shadingDictionary input dictionary containing shading data
551 Initializes a new instance of PDShadingType2 from a COS dictionary. @param shadingDictionary COS dictionary containing type 2 shading information
552 Initializes an axial shading paint with specified parameters. @param shadingType2 type of shading to use @param matrix transformation matrix for the paint
553 Initializes radial shading paint with specified type and transformation matrix. @param shading PDShadingType3 instance @param matrix transformation matrix
554 Initializes Type 1 Shading paint with provided parameters. @param shading Type 1 shading data @param matrix Transformation matrix
555 Initializes Type4ShadingPaint with Shading and transformation matrix. @param shading Shading type 4 object @param matrix Transformation matrix
556 Initializes a new instance of Type 5 Shading paint with specified shading and transformation.
557 Initializes Type 6 Shading Paint with provided shading and transformation. @param shading Type 6 PDShading object @param matrix Transformation matrix
558 Initializes a new instance of Type7ShadingPaint with the given PDShadingType7 and transformation matrix.
559 Creates an instance of PDExtendedGraphicsState from COSDictionary.
560 Constructs a PDSoftMask instance from a COSDictionary. @param dictionary COS dictionary containing mask data
561 Initializes PlainText object from text value. @param textValue input string to parse into paragraphs
562 Initializes an embedded "Go To" action with the given COS dictionary. @param a COS dictionary containing action parameters
563 Initializes a new PDActionGoTo instance from a COS dictionary. @param a COS dictionary containing action data
564 Constructs an instance of PDActionHide with the given COS dictionary.
565 Constructs an instance of PDActionImportData from a COS dictionary.
566 Initializes JavaScript action with COS dictionary data. @param a dictionary containing action data
567 Initializes a new instance of PDActionLaunch with the provided dictionary. @param a COSDictionary containing action launch data
568 Initializes a movie action with COS dictionary. @param a COSDictionary containing movie action data
569 Constructs a PDActionNamed instance from a COSDictionary. @param a dictionary containing action data
570 Initializes a new instance of the remote goto action, passing in a dictionary of parameters.
571 Initializes a new PDActionResetForm instance from a COS dictionary. @param a COS dictionary containing form data
572 Constructs a new PDActionSound instance from a COS dictionary. @param a dictionary containing sound action properties
573 Initializes an action submit form with the given COS dictionary.
574 Initializes a new instance of PDActionThread from the given COS dictionary. @param a COS dictionary containing thread settings
575 Initializes a new instance of the class with the given COS dictionary. @param a COS dictionary containing initialization data
576 Initializes PDF structure builder.
577 Initializes a new PDNamedDestination object. @param dest name of the destination to create a PDF for
578 Initializes a new PDNamedDestination instance with the specified named destination. @param dest the named destination to be assigned.
579 Initializes an empty named destination.
580 Initializes a new PDPageDestination object from a COSArray. @param arr COSArray containing page destination settings
581 Initializes a new non-terminal PDPDFField instance. @param acroForm parent PDAcroForm @param field COSDictionary representing the field @param parent parent PDNonTerminalField (if any)
582 Initializes a PDAcroForm field with the given parameters. @param acroForm parent form @param field field dictionary @param parent parent non-terminal field
583 Constructs a linear measure dictionary from a COS dictionary. @param dictionary input COS dictionary to initialize from
584 Creates a deep copy of this Matrix instance. @return cloned Matrix object
585 Creates a scale transformation matrix with specified X and Y scales. @param x horizontal scale factor @param y vertical scale factor
586 Creates a translation matrix instance. @param x horizontal offset @param y vertical offset
587 Returns a rotation matrix instance with specified angle and translation. @param theta rotation angle in radians @param tx translation x-coordinate @param ty translation y-coordinate
588 Applies transformation matrix to input vector. @param vector input vector to transform @return transformed vector with updated coordinates
589 Scales a vector by a scalar factor. @param sxy scalar multiplier
590 Initializes expert encodings from predefined table.
591 Initializes the Mac Roman Encoding table by adding each entry to the collection.
592 Initializes standard encoding table by populating internal map with predefined entries.
593 Initializes symbol encodings from predefined table. Loads and adds encodings to internal map.
594 Initializes a new instance of Type1 encoding.
595 Adds all character metrics from a FontMetrics object to the encoding. @param fontMetrics FontMetrics containing character metrics
596 Initializes WinAnsiEncoding with mappings from code points to names. Maps unused codes > 40 to bullet character.
597 Initializes the Zapf Dingbats font encoding table.
598 Returns a tree-like structure representing fields of this instance.
599 Retrieves an object from the collection at specified index. @param index position of the object to retrieve @return Object at given index or null if out of bounds
600 Returns the number of objects in the collection. @return Size of the object list
601 Retrieves revision number at specified index. @param index position of revision number in list @return revision number or -1 if out of bounds
602 Parses PNG image data and extracts relevant metadata. @param imageData raw PNG byte array @return PNGConverterState object or null if invalid
603 Retrieves an Encoding instance by name. @param name COSName identifier for the desired encoding @return specific Encoding object or null if not found
604 Creates a PDSoftMask object from the provided dictionary and resource cache. @param dictionary COSBase representing soft mask data @param resourceCache ResourceCache instance for resource retrieval @return PDSoftMask object or null if invalid input
605 Returns the index of the selected widget in the list, or -1 if none is selected.
606 Adds a new file as a source. @param source path to the file to be added
607 Parses the PDF trailer object. @return true if trailer is successfully parsed, false otherwise
608 Retrieves an object from the pool using the provided key. @param key unique identifier for the object
609 Executes a sequence of instructions in the provided context. @param context execution context with operators and stack
610 Returns the current text line matrix.
611 Sets the text line matrix in the graphics state. @param value Matrix to set
612 Retrieves the current text matrix from graphics state. @return Text matrix object representing transformation factors.
613 Sets the text matrix for graphics rendering. @param value Matrix representing the transformation to apply
614 Scales the input width based on current transformation matrix. @param width original width value @return transformed width after applying scale and shear factors
615 Retrieves the non-stroking color from the graphics state.
616 Sets non-stroking color in graphics state. @param color PDColor object representing new color
617 Retrieves the color space from the graphics state. @return ColorSpace object representing the current non-stroking color space.
618 Retrieves the current stroking color from the graphics state.
619 Sets the stroking color in the graphics state. @param color PDColor object representing the new color
620 Retrieves the stroking color space from the graphics state.
621 Creates an input stream for reading from the underlying storage. @throws IOException if data has not been written or read view is available but not created.
622 Finds and returns an ImageReader for the specified image format. @param formatName name of the image format (e.g. PNG, JPEG) @param errorCause reason for failure @return ImageReader object or throws exception if not found
623 Finds a raster-capable ImageReader for the specified image format. @param formatName unique format name @param errorCause failure reason (for exception message) @return ImageReader object or throws MissingImageReaderException if not found
624 Retrieves an Operator instance by name. @param operator unique operator identifier @return Operator object or null if not found
625 Returns a string representation of this COSArrayList instance. Includes contents of underlying array.
626 Checks if a given edge is a straight line. @param ctl array of control points defining the edge
627 Retrieves the x-coordinate of the lower left corner of the rectangle. @return X-coordinate as a floating-point number
628 Returns y-coordinate of lower left corner. @return Lower left y-coordinate as a float value
629 Retrieves the x-coordinate of upper-right corner. @return float value representing the x-coordinate
630 Retrieves the upper-right Y-coordinate from the rectangle array. @return Upper-right Y-value as a floating-point number
631 Retrieves font size from settings. @return Font size as a floating-point number
632 Retrieves the cosine value of an angle from the first COSNumber in the values list. @return the cosine value as a float
633 Retrieves the cosine value of an angle from the values collection. @return COS value as a float.
634 Retrieves cosine value at index 3 from values collection. @return COSNumber value as a float.
635 Retrieves and returns the X-coordinate value. @return float representation of the X-coordinate
636 Returns the y-coordinate value from the collection. @return the y-coordinate value as a float
637 Retrieves and returns the Z-coordinate value.
638 Retrieves an integer value at the specified index or returns the default value. @param index position of the value in the collection @param defaultValue value to return if index is out of bounds @return the integer value at index or the default value, -1 if not found
639 Retrieves the name at a specified index or returns the default value. @param index the index of the desired name @param defaultValue the default name to return if not found @return the name at the given index, or the default value
640 Searches for the index of a given object within this collection. @param object COSBase object to search for
641 Retrieves a list of filters from the document.
642 Evaluates the model using exponential interpolation. @param input array of input values
643 Retrieves a list of filter names. @return List of COSName objects or empty list if no filters found
644 Retrieves file filter list from PDF document. @return List of filter names or empty list if not found
645 Writes a boolean value to the PDF output stream. @param output OutputStream for writing PDF data @param cosBoolean Boolean value to be written
646 Writes ASCII-encoded string to output stream. @param text input string to be written
647 Notifies user of attribute change if actual value has changed. @param oldEntry previous attribute entry @param newEntry current attribute entry
648 Returns the number of elements in the underlying map.
649 Retrieves a COSObject instance by its name, or null if not found. @param key unique COSName identifier
650 Tries to fetch item by the first key, then by the second key. @param firstKey primary key @param secondKey secondary key (used if first key fails) @return COSBase object or null if not found
651 Returns the number of recipients in the RECIPIENTS array. @return The length of the recipients list
652 Retrieves recipient string at specified index from the 'RECIPIENTS' array. @param i index of desired recipient string
653 Retrieves the direction value, defaulting to 0 if not specified. @return COSBase object representing the direction or COSInteger.ZERO if undefined
654 Returns a set of metadata keys.
655 Retrieves a list of attribute names from the COS object. @return List of attribute names
656 Adds trailer dictionary items to the current stream, excluding INFO, ROOT, ENCRYPT, ID, and PREV. @param trailerDict trailer dictionary containing items to add
657 Copies all entries from the given dictionary to this one. @param dict COSDictionary instance to copy from
658 Checks if the provided COSDictionary represents an info item. @param dictionary COSDictionary object to inspect @return true if it's an info item, false otherwise
659 Checks if widths are present in dictionary. @return true if WIDTHS or MISSING_WIDTH keys exist, false otherwise
660 Checks if missing width is present in dictionary. @return true if missing width exists, false otherwise
661 Checks if XFA (XML Forms Architecture) is present in the dictionary. @return true if XFA is found, false otherwise
662 Initializes XrefParser with COSParser instance. @param cosParser COSParser to associate with this XrefParser
663 Returns a string representation of this COSFloat object.
664 Writes formatted string as PDF content to specified OutputStream. @param output OutputStream to write PDF data to
665 Writes COS array to OutputStream. @param output OutputStream to write to @param cosArray COS array data
666 Creates a COSIncrement instance based on update information. @param updateInfo object containing increment data
667 Initializes LayerUtility with a PDDocument instance. @param targetDoc document to be cloned and managed
668 Initializes a new instance of the DefaultResourceCache with default settings.
669 Checks if a PDF object needs to be updated. @param base COSBase object to inspect @return true if the object requires update, false otherwise
670 Writes FDF data to a PDF document. @param doc the FDF document to write
671 Writes COS integer to PDF stream. @param output OutputStream to write to @param cosInteger COS integer object to serialize
672 Retrieves a COS object by index, recursively resolving nested objects. @param index the index of the desired object @return the retrieved object or null if not found or null
673 Searches for the index of a given object in the collection. @param object COSBase object to search for @return Index of the object if found, -1 otherwise
674 Checks for existence of a given object value in the collection. @param value the object to search for @return true if found, false otherwise
675 Retrieves the key associated with a given value from the map. @param value object to search for in the map @return matching COSName key or null if not found
676 Retrieves a dictionary object by key, handling nested objects and null values. @param key unique dictionary key @return COSBase object or null if not found or null value
677 Retrieves linearized PDF dictionary by iterating over object keys and returning the first COSDictionary with a LINEARIZED item. @return Linearized PDF dictionary or null if not found
678 Closes all resources and logs exceptions. @throws IOException if an error occurs during closing
679 Accepts a visitor to traverse and process the COS object hierarchy. @param visitor ICOSVisitor instance to perform processing
680 Checks if the given COSObject has a self-reference. @param parent The parent COSBase @param value The COSObject to check @return True if the object references itself, false otherwise
681 Retrieves the COSNumber value representing the length from a COSBase object. @param lengthBaseObj COSBase object containing the length information @return COSNumber object or null if not found
682 Creates a NormalXReference instance with the specified byte offset, key, and object. @param byteOffset unique byte identifier @param key COSObjectKey reference @param object COSBase object to be referenced
683 Retrieves the key for a given COSBase object. @param object the COSBase object to fetch the key for @return COSObjectKey or null if not found
684 Checks if the given COSBase object is contained in the object pool. @param object COSBase object to search for
685 Prepares a stream object for processing by adding it to the prepared keys and objects list. @param key unique identifier of the stream object @param object COSBase object containing stream data
686 Constructs a COSObjectKey with default revision. @param num object identifier @param gen generation number
687 Compares this XReferenceEntry with another based on referenced key. @param xReferenceEntry entry to compare with @return -1 if this entry's key is null, 1 if other entry's key is null, else comparison result of keys
688 Returns X-axis scaling factor of the text matrix.
689 Retrieves the vertical scaling factor from the text matrix. @return Y-scale value as a floating-point number
690 Creates a raw output stream with random access capabilities. @return OutputStream object for writing to the underlying stream
691 Initializes COSWriter with output stream and compression parameters. @param outputStream OutputStream to write compressed data @param compressParameters Compress settings for the writer
692 Initializes a COSWriter with the given OutputStream and RandomAccessRead data. @param outputStream OutputStream to write to @param inputData RandomAccessRead data for incremental processing
693 Updates the local 'updated' flag based on whether updates are currently being accepted. @param updated true to mark as updated, false otherwise
694 Converts byte array to string using Unicode encoding (BOM) or PDF Doc Encoding. @return String representation of input bytes
695 Encodes a string into COS format. @param text input string to encode @param forceHex whether to always use hex encoding
696 Checks if a font is a Standard 14 font. @return true if the font matches a Standard 14 font, false otherwise
697 Reads specified number of bytes from internal buffer or external source. @param data byte array to store read data @param offset starting index in the data array @param len number of bytes to read @return actual number of bytes read, or -1 if end-of-file reached
698 Closes the stream, flushing any pending data and releasing resources.
699 Reads the next byte from the data stream. Returns -1 if end of file is reached. @throws IOException on I/O error
700 Reads up to the specified length of data into the provided array, returning the actual number of bytes read. If at end-of-file, returns -1. @param data buffer to store read data @param offset starting position in buffer @param length maximum number of bytes to read @return actual number of bytes read or -1 if at EOF
701 Reads an image from a given InputStream and sets it to the current image.
702 Encodes raw input data using the LZW algorithm. @param rawData InputStream containing data to encode @param encoded OutputStream for encoded output @param parameters ignored (for future use)
703 Chooses the most compressible data row to write. @return The selected byte array for writing.
704 Returns RenderState enum instance from COSName object. @param state COSName containing render state name
705 Returns the corresponding BaseState enum value based on the provided COSName. @param state COSName to resolve
706 Closes all overlays and documents, releasing resources.
707 Initializes a new PD Form XObject instance from the given PDF stream. @param stream the PDF stream to initialize from
708 Initializes the parser with contents from the specified PD content stream. @param pdContentstream PD content stream to parse.
709 Initializes parser with byte array data. @param bytes input byte array to parse
710 Parses an object by its unique identifier. @param objectNumber unique object identifier @return COSBase representation of the parsed object or null if not found
711 Retrieves a mapping of object IDs to their corresponding counts. @return Map of object IDs (Long) to count values (Integer), or null if an error occurs.
712 Skips leading white spaces and line breaks from the input stream.
713 Skips the current line break (CR, LF, or CRLF) in the input stream. @return true if a valid line break was skipped, false otherwise
714 Reads the next line from the input source. @throws IOException if end-of-file is reached unexpectedly
715 Skips whitespace characters and comments in input stream. @throws IOException if an I/O error occurs
716 Performs a binary search for the nearest XRef offset among tables and streams. @param xrefOffset target offset value @return nearest matching offset or -1 if not found
717 Parses the PDF header and returns true if successful.
718 Parses FDF header and returns true if successful.
719 Parses and returns a map of COS objects from the PDF file. @return Map of COS objects keyed by COS object key
720 Generates a final encryption key by combining object number, generation number and encryption key. @param objectNumber unique object identifier @param genNumber generation number @return final byte array key for encryption
721 Initializes PDAppearanceContentStream with appearance and output stream. @param appearance PDAppearanceStream object @param outputStream OutputStream to write content to
722 Initializes a new page content stream from the provided document and appearance. @param doc the parent document @param appearance the associated appearance stream @param outputStream output stream to write content to
723 Applies current transformation matrix to a point. @param x initial X-coordinate @param y initial Y-coordinate @return transformed Point2D object
724 Creates a PaintContext instance with transformed pattern matrix. @param cm ColorModel @param deviceBounds rectangle for device rendering @param userBounds rectangle for user space @param xform transformation matrix @param hints RenderingHints
725 Concatenates input Matrix with current single array. @param matrix input Matrix to be concatenated
726 Updates the translation components of a 3D vector. @param tx x-coordinate translation @param ty y-coordinate translation
727 Scales the 6-element single array by specified factors. @param sx horizontal scaling factor @param sy vertical scaling factor
728 Multiplies two matrices. @param other the matrix to be multiplied @return resulting Matrix object
729 Creates a new PDF document instance. @return initialized PDDocument object
730 Initializes a new PDDocument instance from a COSDocument and input stream. @param doc COS document @param source input stream containing PDF data
731 Creates a SecurityHandler instance for the given ProtectionPolicy. @param policy ProtectionPolicy object to create handler for @return SecurityHandler instance or null if not found
732 Creates a SecurityHandler instance for the specified filter policy. @param name unique identifier of the filter policy @return SecurityHandler<ProtectionPolicy> instance or null if not found
733 Sets stroking color on demand with the specified PD Color. @param color PD Color object containing color components @return true if color was successfully set, false otherwise
734 Sets non-stroking color based on provided PDColor. @param color the color to apply @return true if color was successfully applied, false otherwise
735 Checks if the user has full document editing permissions. @return true if all edit permissions are granted, false otherwise
736 Checks for any Revision 3 permissions. @return True if any permission is granted, false otherwise
737 Writes an array of bytes to the specified output stream. @param data the byte array to be written @param output the output stream where the data will be written
738 Writes a specified portion of binary data to the given OutputStream. @param data byte array containing the data to be written @param offset starting index of the data in the array @param len length of the data to be written @param output OutputStream to write the data to
739 Inserts a diacritic character at the specified position in the text. @param i insertion index @param diacritic TextPosition containing the diacritic to insert
740 Initializes a line object with two points and their corresponding colors. @param p0 start point of the line @param p1 end point of the line @param c0 color at point 0 (as float array) @param c1 color at point 1 (as float array)
741 Initializes SoftMask object with given parameters. @param paint the Paint object to be masked @param mask the BufferedImage for masking @param bboxDevice device bounding box in user space @param backdropColor PDColor of background color or null for default @param transferFunction PDFunction describing transfer function (null for identity)
742 Removes a backdrop image from the main image. @param backdrop The backdrop image to remove @param offsetX Offset of backdrop in x-axis @param offsetY Offset of backdrop in y-axis
743 Retrieves FontMetrics for a given font name, loading it if necessary. @param fontName unique font identifier @return FontMetrics object or null if not found
744 Initializes a list of glyphs from an InputStream. @param input stream containing glyph data @param numberOfEntries expected number of entries in the list
745 Copies existing GlyphList and loads additional glyphs from input stream. @param glyphList existing list to copy @param input InputStream containing additional glyphs
746 Converts a font code to Glyph ID. @param code font code @return Glyph ID or 0 if not found
747 Fetches the name of a font glyph, either by its original name or its Unicode equivalent. @param name the original glyph name @return glyph name if found; ".notdef" otherwise
748 Resolves font name for a given glyph, using alternative names and Unicode codepoints. @param name the glyph to resolve @return font name or ".notdef" if not found
749 Initializes PDJPXColorSpace with specified AWT ColorSpace. @param colorSpace AWT ColorSpace to be used.
750 Initializes rendering components, ensuring atomicity and lazy initialization. @throws IOException if default CMYK color profile cannot be loaded
751 Applies a mask to the given image. @param image source image @param mask mask image (8 bit gray scale) @param interpolateMask true if interpolation should be used for scaling @param isSoft true if soft mask, false otherwise @param matte array of float values representing the matte (alpha) component @return The resulting masked image
752 Initializes and fetches cubic Bezier curve points. @param ctrlPnts array of control points @param l curve level (number of points to generate)
753 Checks if a point is contained within this polygon. @param p Point to check @return true if the point is inside, false otherwise
754 Calculates the color at a given point using various interpolation methods. @param p Point2D object representing the location to calculate color for
755 Intersects the clipping path with the provided GeneralPath. @param path GeneralPath to intersect with the clipping path
756 Intersects clipping path with given Area object. @param area target Area to intersect
757 Sets the graphics clip to the current clipping path or a default rectangle if it's empty.
758 Draws a tiling pattern using the specified Graphics2D context. @param g Graphics2D context to draw on @param pattern Tiling pattern to draw @param colorSpace Color space for the pattern @param color Pattern color @param patternMatrix Transformation matrix for the pattern
759 Calculates the x-direction adjustment based on the current direction. @return x-direction adjustment value as a floating-point number
760 Initializes TextPosition object with page dimensions, font, and text layout. @param pageRotation rotation of the page (0-360) @param pageWidth width of the page @param pageHeight height of the page @param textMatrix transformation matrix for text position ... (rest of parameters)
761 Calculates the adjusted Y-coordinate based on direction. @return Adjusted Y-value or value from getYLowerLeftRot() if horizontal
762 Returns the width of the object. @return width as a floating-point value
763 Calculates width direction adjustment based on current direction. @return adjusted width value
764 Initiates article processing.
765 Writes end of paragraph and resets paragraph flag.
766 Normalizes a given word by converting Unicode Alphabetic and Arabic A&B Presentation forms. @param word input string to be normalized @return normalized word or result from handleDirection() if no normalization is needed
767 Formats a Calendar object as a string. @param cal the calendar to format @return formatted string or null if input is null
768 Converts Calendar object to ISO 8601 date and time string. @param cal Calendar object to convert @return ISO 8601 formatted date and time string with timezone
769 Converts bytes to hexadecimal string representation. @return hexadecimal string representation of bytes or null if invalid
770 Writes external signature bytes to PDF, overwriting existing contents. @param cmsSignature CMS signature data as byte array
771 Writes the PDF file name to the specified OutputStream. @param output OutputStream to write to
772 Writes an array of hexadecimal byte values to the specified output stream. @param bytes array of bytes to be written as hex @param output output stream to which hex data will be written
773 Parses an InputStream into a Document. @param is input stream containing XML data
774 Detects file type by reading the first maxByteCount bytes from the input stream. @param inputStream BufferedInputStream to read from @return FileType enum value or null if unknown @throws IOException on unsupported mark/reset or premature end of stream
775 Initializes legacy PDF stream engine with essential operators.
776 Retrieves or creates a COSName instance for the given PDF file name. @param aName PDF file name @return COSName object or null if not found and creation failed
777 Initializes a new COSFloat instance with the given floating-point value. @param aFloat the floating-point number to be stored in this object
778 Initializes COSFloat object with float value and string representation. @param aFloat float value to store @param valueString string representation of the float value
779 Parses a string to a float, handling special cases and exceptions. @param aFloat input string to parse
780 Initializes COSInteger with given value and validity flag. @param val the integer value @param valid whether the value is valid or not
781 Initializes COSString from raw byte array. @param bytes binary data to wrap as string
782 Initializes a new COSArray instance with an empty list and auto-resize enabled.
783 Initializes COSStream with given RandomAccessStreamCache. @param streamCache cache of random access streams
784 Creates an unmodifiable COS dictionary from the given COS dictionary. @param dict COS dictionary to be made unmodifiable
785 Creates a default DecodeResult instance with an empty COS dictionary.
786 Initializes an empty PDF document information dictionary.
787 Initializes a new instance of PDResources with default settings.
788 Initializes a new instance of PDDictionaryWrapper with an empty dictionary.
789 Initializes a new PDNameTreeNode instance with an empty dictionary.
790 Initializes a new instance of PDPageLabelRange from an empty dictionary.
791 Initializes a new PDMarkInfo instance with an empty dictionary.
792 Initializes a new PDF property list with an empty dictionary.
793 Initializes a new instance of PDF box style with an empty dictionary.
794 Initializes an empty PDCryptFilterDictionary instance.
795 Initializes PDEncryption with an empty dictionary.
796 Initializes the FDF catalog with an empty dictionary.
797 Initializes FDFDictionary with an empty COS dictionary. @param none
798 Initializes an empty FDFField object with a new COSDictionary instance.
799 Initializes an empty FDFIconFit object.
800 Initializes an empty JavaScript object.
801 Initializes an empty FDF named page reference.
802 Initializes a new FDFPage instance with an empty COS dictionary.
803 Initializes a new instance of FDFPageInfo with an empty COS dictionary.
804 Initializes an empty FDFTemplate object.
805 Initializes device attributes with an empty dictionary.
806 Initializes a new PDDeviceNProcess instance with an empty COSDictionary.
807 Initializes a new instance of PDShading with an empty dictionary.
808 Initializes an instance of PDAdditionalActions with an empty dictionary.
809 Initializes annotation additional actions with an empty dictionary.
810 Initializes catalog additional actions with an empty dictionary.
811 Initializes an empty dictionary of additional form field actions.
812 Initializes an empty dictionary of additional page actions.
813 Initializes a new instance of PDF target directory.
814 Initializes an empty URI dictionary.
815 Initializes an empty Windows launch parameters dictionary.
816 Initializes an empty PDBorderEffectDictionary instance.
817 Initializes an empty PDBorderStyleDictionary instance.
818 Initializes a new PDF property build object with a direct COS dictionary.
819 Initializes an empty PDPropBuildData dictionary.
820 Initializes an empty PDSeedValueMDP object with a direct dictionary.
821 Initializes a new instance of PDSeedValueTimeStamp with an empty dictionary.
822 Initializes a PDField with an associated PDAcroForm. @param acroForm the parent PDAcroForm
823 Initializes a new viewport dictionary with an empty COS dictionary.
824 Initializes viewer preferences with an empty dictionary.
825 Initializes a COSObject with the given COSBase and key. @param object the underlying COSBase @param objectKey the unique identifier for the object
826 Initializes a new instance of the class with a COS dictionary. @param dictionary COS dictionary containing attribute data
827 Constructs a PDUserAttributeObject from a COSDictionary. @param dictionary input dictionary containing attribute data
828 Constructs a PDStandardAttributeObject from a COSDictionary. @param dictionary COS dictionary containing object data
829 Initializes a new PDOutlineItem from a given COS dictionary.
830 Retrieves PDF metadata from the stream. @return PDMetadata object or null if not found
831 Retrieves the metadata from the COS stream. @return PDMetadata object or null if not found
832 Retrieves the EXTENDS stream from the COS object. @return PDObjectStream or null if not found
833 Constructs a PDFunctionType0 instance from a COSBase representation. @param function COSBase object containing function data
834 Initializes a new instance of PDFunctionType3 from COS data. @param functionStream COS stream containing function data
835 Initializes a new PDF PostScript XObject from a given COS stream. @param stream COS stream containing PostScript data
836 Constructs a PDFormXObject from a COS stream. @param stream input stream containing form object data
837 Initializes a new PDFormXObject instance from a COS stream. @param stream input COS stream @param cache resource cache for form objects
838 Initializes a new instance of PublicKeySecurityHandler.
839 Constructs an empty StandardSecurityHandler instance.
840 Initializes PublicKeySecurityHandler with provided protection policy. @param publicKeyProtectionPolicy policy governing public key security
841 Initializes a new instance of the StandardSecurityHandler class with the specified protection policy. @param standardProtectionPolicy the protection policy to associate with this handler
842 Constructs an instance of FDFAnnotationHighlight from the provided COSDictionary. @param a COS dictionary containing annotation highlight data.
843 Constructs an instance from a COS dictionary.
844 Initializes an FDFAnnotationStrikeOut object from a COS dictionary.
845 Creates an instance of FDFAnnotationUnderline from a COS dictionary. @param a COSDictionary containing annotation underline properties
846 Constructs a PDTilingPattern from a COSDictionary. @param dictionary the Cos object to initialize with
847 Constructs a new instance of PDShadingType3 from a COS dictionary. @param shadingDictionary COS dictionary containing shading data
848 Constructs a PDShadingType4 instance from the given COS dictionary.
849 Initializes PDShadingType5 instance from given COSDictionary. @param shadingDictionary COS dictionary containing type 5 shading data
850 Constructs a PDPageFitDestination object from a COS array. @param arr COS array containing page fit destination parameters
851 Constructs a new PDPageFitHeightDestination with given parameters. @param arr COSArray containing destination information
852 Constructs a PDPageFitRectangleDestination instance from an array of parameters. @param arr array containing destination parameters
853 Constructs a new PDPageFitWidthDestination instance from an array of PDF page settings.
854 Constructs a PDPageXYZDestination object from a COSArray. @param arr input array containing page destination coordinates
855 Constructs a PDButton object with the given parameters. @param acroForm the associated PDAcroForm @param field the underlying COSDictionary @param parent the parent PDNonTerminalField
856 Initializes a PDSignatureField object with given parameters. @param acroForm the associated AcroForm @param field the underlying COSDictionary @param parent the parent PDNonTerminalField
857 Initializes Variable Text field with given parameters. @param acroForm PDF AcroForm object @param field COS Dictionary representing the field @param parent PDNonTerminalField parent field
858 Initializes MacOS Roman Encoding with Mac-specific character mappings.
859 Converts FontBox Encoding to Type1Encoding. @param encoding FontBox Encoding object @return Type1Encoding object populated from the input
860 Generates a unique partial name by checking for availability.
861 Returns a string representation of the object collection. @return A semicolon-separated list of objects with revision numbers.
862 Creates a PDSoftMask from a COSBase dictionary. @param dictionary COSBase object containing soft mask parameters
863 Constructs a COSDocument instance using an ICOSParser. @param parser ICOSParser instance to parse document data
864 Creates a marked content object for the specified tag and properties. @param tag COSName representing the type of marked content @param properties COSDictionary containing additional properties
865 Calculates the width of the rectangle. @return The horizontal distance between opposite corners.
866 Checks if a point (x, y) lies within the bounding box. @param x horizontal coordinate @param y vertical coordinate @return true if point is inside, false otherwise
867 Calculates height by subtracting lower left y-coordinate from upper right y-coordinate.
868 Transforms a GeneralPath using the provided Matrix. @param matrix transformation matrix
869 Converts to a GeneralPath object with a rectangle shape. @return GeneralPath representation of the current shape
870 Returns a string representation of the rectangle's coordinates. @return [lowerLeftX, lowerLeftY, upperRightX, upperRightY] as a comma-separated string
871 Returns an integer value at the specified index. @param index index of desired integer value
872 Returns name at specified index. @param index zero-based index of desired name
873 Creates a filtered output stream for writing to the COS document. @param filters optional filter settings @return OutputStream object for writing to the document
874 Initializes PDImageXObject with a PDStream and resources. @param stream PDStream object @param resources PDResources object for image processing
875 Determines image file suffix based on stream filters. @return file extension (e.g. "png", "jpg", etc.) or null if unknown
876 Writes a float operand to the output stream. @param real the float value to be written
877 Writes an operand value as a decimal string followed by a space. @param integer the operand value to be written
878 Writes an operator (e.g., comma, newline) to output stream.
879 Checks if this collection is empty. @return true if size is zero, false otherwise
880 Writes a COS float value to the specified OutputStream. @param output OutputStream to write to @param cosFloat COS float value to be written
881 Converts to increment update state.
882 Converts object array to float array. @return Array of float values or zeros for non-numeric objects
883 Converts object list to a list of float values for COSNumbers. @return List of Floats, or null if non-COSNumber objects are encountered.
884 Converts to list of integers, extracting COSNumber values. @return List of int values or nulls if not all objects are COSNumbers
885 Retrieves the minimum value from the range array. @return The minimum value as a float, or NaN if not found
886 Retrieves the maximum value from the range array. @return the maximum value as a float
887 Retrieves a gamma color object from the array by index. @param index unique index of the color object in the array @return PDGamma object or null if not found at specified index
888 Retrieves a BlendMode instance based on the provided COSBase object. @param cosBlendMode COSBase object representing a blend mode @return BlendMode instance or NORMAL if not found
889 Returns a list of colorant names from the COSArray. @return List of Colorant names or empty list if not available
890 Returns the alternate color space, creating it from the embedded array if not already loaded. @return The alternate color space or null if creation failed
891 Retrieves colorant name from array.
892 Retrieves the first page from the PDF object array. @return The first PDPage instance or null if empty
893 Retrieves the page number from the first object in the array. @return page number as an integer, or -1 if not found
894 Retrieves the zoom value from the PDF document. @return float value of the zoom or -1 if not found
895 Initializes a Matrix from COSArray elements. @param array COSArray containing matrix values
896 Tries to fetch a dictionary object by one of two provided keys. @param firstKey primary key to search @param secondKey secondary key to search if primary is not found @return COSBase object or null if neither key finds an object
897 Retrieves a COSName object by its key. @param key the COSName to retrieve @return the retrieved COSName or null if not found
898 Retrieves a COSDictionary object by the given key. @param key name of the dictionary to fetch @return COSDictionary object or null if not found
899 Retrieves a COSStream object from the dictionary by its name. @param key unique identifier for the stream @return COSStream object or null if not found
900 Retrieves a COSArray object from the dictionary using the specified key. @param key unique identifier of the desired COSArray object @return COSArray object or null if not found
901 Retrieves the COSName value from the dictionary or returns a default value. @param key The COSName key to fetch @param defaultValue The default COSName value to return if not found @return The fetched COSName value or the default value
902 Retrieves a long value from the dictionary using the given key. @param key COSName of the key to retrieve @param defaultValue default value to return if key is not found or invalid @return the retrieved long value, or default value if not found
903 Retrieves a floating-point value from the dictionary by key, or returns default value if not found. @param key unique identifier for the value @param defaultValue fallback value to use if key is missing @return float value associated with the key, or default value if absent
904 Retrieves an iterator over the content streams in the PDF page. @return Iterator of PDStream objects, or empty iterator if none found
905 Checks if the page has contents. @return true if page has non-empty stream or array, false otherwise
906 Retrieves class names and revisions from the XLSX file. @return Revisions<String> object containing class names and revision numbers
907 Retrieves the 'K' dictionary object from the COS document.
908 Retrieves the value from the dictionary. @return COSBase object representing the value
909 Checks if encryption metadata is enabled. @return true if enabled, false otherwise
910 Retrieves the owner encryption key from a dictionary. @return byte array of the owner encryption key or null if not found
911 Retrieves the user's encryption key from the dictionary. @return byte array representing the user's encryption key or null if not found
912 Retrieves user permissions as a byte array. @return byte[] containing user permissions or null if not present
913 Retrieves the page number from the annotation dictionary. @return Integer page number or null if not found
914 Retrieves the COSBase value associated with the field, or throws an exception for unknown types.
915 Retrieves the field flags as an integer value. @return Field flags or null if not present
916 Retrieves the SET_FIELD_FLAGS value from the field dictionary. @return integer value of SET_FIELD_FLAGS or null if not set
917 Retrieves the clear flag value from the field dictionary. @return The clear flag integer value or null if not present.
918 Retrieves widget field flags as an integer value. @return Integer flag value or null if not available
919 Retrieves the widget's SET flag value from its dictionary. @return The SET flag value as an Integer, or null if not set.
920 Retrieves the clear widget field flags. @return Integer value of CLR_F field or null if not present
921 Retrieves the default width value, either from a dictionary or a fallback of 1000.
922 Retrieves the color space associated with this PDF object. @return PDColorSpace object or null if not found
923 Retrieves and initializes the color space for the given PDF resources. @param resources PDF resources to fetch color space from @return PDColorSpace object or null if not found
924 Initializes a PDOptionalContentGroup instance from the given COSDictionary. @param dict COSDictionary containing the group's metadata
925 Initializes an OCMD membership dictionary from a given COS dictionary. @param dict the COS dictionary to initialize with
926 Retrieves the overprint mode from the dictionary. @return Overprint mode as an Integer, or null if not found
927 Retrieves the soft mask object from the dictionary. @return PDSoftMask object or null if not found
928 Retrieves a float value from the dictionary using the specified key. @param key unique key for the dictionary object @return Float value if found, null otherwise
929 Retrieves transfer object from dictionary, ensuring it's a 4-element array. @return COSBase object or null if invalid
930 Retrieves the transfer dictionary, returning a COSBase object or null if invalid.
931 Retrieves the backdrop color as a COS array. @return COSArray object representing the backdrop color, or null if not set.
932 Returns the open mode for new window based on PDF settings. @return OpenMode value (NEW_WINDOW, SAME_WINDOW, or USER_PREFERENCE)
933 Retrieves dictionary object with key T. @return COSBase object representing value of key T
934 Returns the open mode for new window based on PDF settings. @return OpenMode enum value indicating how to open in a new window
935 Returns the open mode for new window based on Acrobat settings. @return OpenMode value indicating whether to open in new window, same window or follow user preference
936 Retrieves the named destination from the dictionary. @return PDNamedDestination object or null if not found
937 Retrieves PDF contents as a byte array. @return Contents as a byte array or empty array if not found
938 Retrieves XFA resource from the PDF dictionary. @return PDXFAResource object or null if not found
939 Retrieves an inheritable attribute from the object's dictionary or its ancestors. @param key COSName of the attribute to fetch
940 Retrieves COS dictionary value V.
941 Returns the field value as a string, or an empty string if not found.
942 Retrieves default value dictionary from COS object. @return Dictionary object representing default value or null if not found
943 Closes resources and releases system resources. @throws IOException if an I/O error occurs while closing resources
944 Clones COSBase object for new document, caching the result if already converted. @param base COSBase object to clone @return cloned TCOSBase object or null if not convertible
945 Writes a COS object to the output stream, including its key and xref entry. @param key unique identifier for the object @param obj COSBase object to be written
946 Retrieves the key from the provided COSBase object. @param object COSBase object containing the key
947 Checks if a COSBase object is present in the object pool. @param object COSBase object to search for
948 Creates a list of COSWriterObjectStream instances based on the object stream objects. @return List of COSWriterObjectStream objects
949 Retrieves a COSObjectKey by number and generation from the document's xref table or creates a new one if not found. @param num object number @param gen object generation @return COSObjectKey instance or null if not found
950 Performs a brute-force search for objects in the PDF stream. @throws IOException if an I/O error occurs during the search process
951 Finds object stream offsets and their corresponding keys. @return Map of offsets to COSObjectKey objects
952 Resolves Xref trailer entries and populates the resolver. @param resolver XrefTrailerResolver instance to populate
953 Parses the cross-reference (Xref) table at the specified offset. @param startByteOffset starting byte offset of the Xref table
954 Retrieves or generates a unique COSObjectKey for the given COSBase object. @param obj the COSBase object to fetch or create a key for @return the corresponding COSObjectKey instance
955 Inserts an object into the pool and assigns a unique XRef object number. @param key COSObjectKey to be updated or null for automatic assignment @param object COSBase object to insert into the pool @return assigned COSObjectKey containing the new XRef object number
956 Initializes COSWriter with an OutputStream and default compression settings. @param outputStream output stream to write compressed data to
957 Sets the need-to-be-updated flag. @param flag true to trigger update, false otherwise
958 Updates the current user profile.
959 Retrieves string value at specified index, or returns default value if out of range. @param index the index to fetch (0-based) @param defaultValue the fallback string value @return the fetched string value or the default value
960 Extracts the string value from a COSName object. @param key COSName object to extract value from @return String representation or null if not found
961 Retrieves the string value associated with a given key from the dictionary. @param key unique identifier for the desired string @return the string value or null if not found
962 Converts basic types within a COSDictionary into a Java Map. @param map the COSDictionary to convert @return a COSDictionaryMap containing the converted data or null if input is null
963 Retrieves the file string representation. @return The file content as a string.
964 Retrieves an option string from the first object in the collection. @return the string value of the option or null if not found
965 Retrieves default appearance string from COS data. @return Default appearance string or null if not available
966 Retrieves the destination name from a COS object. @return String representation of the named destination, or null if not found
967 Retrieves a list of string items from the given COSBase, either as a single-element array or by indexing into an array. @param items COSBase to extract strings from @param pairIdx index into arrays (0 or 1) @return List of extracted string values
968 Retrieves export values as a list of strings. @return List of string values or empty list if none found
969 Retrieves the string value associated with a given COSName. @param name COSName to retrieve value for @return List of strings or empty list if not found
970 Retrieves the default appearance as a string value.
971 Initializes COSString with given text and default encoding. @param text input string to be stored in COSString object
972 Initializes Visible Sign Designer with an input stream of an image. @param imageStream InputStream containing the image data
973 Reads image from file and populates designer's visual properties. @param path absolute path to image file
974 Constructs a transparency group from the given stream. @param stream input stream containing transparency data
975 Parses a COSDictionary from the input stream. @param isDirect whether to parse as direct or indirect dictionary
976 Reads and returns a string from the input stream, skipping leading spaces.
977 Verifies expected string matches actual input stream content. @param expectedString char array of expected string to match @param skipSpaces whether to skip leading/trailing spaces
978 Reads a string from the input source, up to specified length. @param length maximum number of characters to read @return read string or null if at end of file
979 Reads and parses an integer from the input stream. @throws IOException if parsing fails or invalid data is encountered
980 Reads and parses a long integer from the input stream. @throws IOException if invalid input encountered
981 Calculates fixed offset of XRef table/stream. @param objectOffset starting offset to search from @return fixed XRef offset or 0 if not found
982 Computes user password based on given parameters. @param password raw password bytes @param owner owner identifier bytes @param permissions permissions flags @param id unique user ID bytes @param encRevision encryption revision number @param keyLengthInBytes encrypted key length in bytes @param encryptMetadata whether to encrypt metadata @return computed password bytes or empty array if not supported
983 Computes owner password by encryption with RC4 and multiple iteration if revision >= 3. @param ownerPassword byte array of owner's password @param userPassword byte array of user's password @param encRevision encryption revision (REVISION_2, REVISION_3, or REVISION_4) @param length length of encrypted data (must be 5 for REVISION_2) @return encrypted owner password as a byte array
984 Rotates the current matrix by an angle of 'theta' radians around the origin (0, 0). @param theta rotation angle in radians
985 Translates the text matrix by specified x and y offsets. @param tx horizontal offset to apply @param ty vertical offset to apply
986 Translates a 2D vector using separate X and Y translations. @param vector the input vector to translate
987 Concatenates two matrices by performing matrix multiplication. @param a first matrix @param b second matrix (concatenated with a)
988 Creates a new PDDocument instance from an existing COSDocument. @param doc the underlying document data
989 Processes input text as a single token. @param text CharSequence to tokenize and process
990 Retrieves and returns current access permission. @return AccessPermission object or null if not initialized
991 Computes the revision number based on the provided version and user permissions. @param version the software version to compute the revision for
992 Encrypts or decrypts data using AES algorithm. @param finalKey encryption key @param data input stream to encrypt/decrypt @param output output stream for encrypted/decrypted data @param decrypt whether to decrypt (true) or encrypt (false)
993 Encrypts or decrypts data using AES256 with the provided key. @param data InputStream containing encrypted/decrypted data @param output OutputStream to write encrypted/decrypted data @param decrypt true for decryption, false for encryption
994 Encrypts data using RC4 algorithm with provided key. @param finalKey encryption key @param input data to encrypt @param output stream for encrypted data
995 Copies InputStream to OutputStream in chunks of 1024 bytes. @param data input stream containing data to copy @param output output stream where data will be written
996 Prepares a query string for SASL authentication. @param str input string to prepare
997 Prepares stored SASL username for authentication. @param str stored username to preprocess
998 Retrieves FontBoxFont instance for this object. @return cached or newly loaded FontBoxFont
999 Saves font information to disk cache.
1000 Sets the font provider and updates the font info by name. @param fontProvider FontProvider instance
1001 Initializes a ShadedTriangle object with given points and colors. @param p array of Point2D objects representing triangle corners @param c 2D array of float values for color RGB components
1002 Writes a CID-to-Unicode CMap to the given OutputStream. @param out output stream
1003 Loads a glyph list from a resource file. @param filename name of the glyph list file @param numberOfEntries number of entries to load @return GlyphList object or null if not found
1004 Populates and returns a map of GIDs to codes (0-255). @return Map<Integer, Integer> mapping GIDs to codes
1005 Initializes a PDICCBased object from a COSArray containing ICC profile data. @param iccArray COSArray holding ICC profile information
1006 Resets text clipping by intersecting with buffered clip and clearing clippings list.
1007 Updates clipping paths and transfers them to graphics context. @param graphics graphics context object
1008 Retrieves the incremental input stream for signing. @throws IOException if an I/O error occurs
1009 Merges a single Unicode character diacritic into the existing text. @param diacritic TextPosition representing the diacritic character
1010 Checks if two TextPositions have any x and y coordinate overlap. @param tp2 second TextPosition to check for overlap @return true if overlapping, false otherwise
1011 Checks if the current TextPosition is completely contained within another. @param tp2 the other TextPosition to check against @return true if completely contained, false otherwise
1012 Writes paragraph separator by writing both start and end tags.
1013 Writes COS name to the specified OutputStream. @param output OutputStream to write to @param cosName COSName object containing PDF data and metadata
1014 Writes an operand (COSName) to the PDF output stream. @param name COSName object representing the operand to be written
1015 Writes a byte array to the OutputStream as either an ASCII or hexadecimal encoded string. @param bytes the byte array to be written @param forceHex if true, writes the contents in hexadecimal format; otherwise, attempts to write as an ASCII string @param output the OutputStream where the string will be written
1016 Initializes PDF marked content extractor with operators. @param encoding encoding scheme (not used in this method)
1017 Initializes PDF text stripper with default marked content sequences.
1018 Retrieves dictionary object from PDF by its key. @param key unique dictionary key @return COSBase object or null if not found
1019 Fetches an item from the PDF by its human-readable name. @param key human-readable key of the item to fetch @return the corresponding COSBase object or null if not found
1020 Checks if PDF Name exists in the COS dictionary. @param name PDF Name to search for @return true if found, false otherwise
1021 Retrieves a COS filter by name. @param filterName unique PDF filter identifier
1022 Parses a COS name from the input stream. @throws IOException on parsing error
1023 Constructs a PDColor object from COSArray and color space. @param array COSArray containing color components or name, plus optional components @param colorSpace PDColorSpace of the color
1024 Retrieves a cached or freshly created COSInteger instance for the given value within specified range. @param val long value to retrieve an instance for
1025 Parses a hexadecimal string into a COSString object. @param hex input hexadecimal string @return parsed COSString object or null if malformed (if FORCE_PARSING is enabled)
1026 Initializes an empty COSArrayList instance.
1027 Constructs a COSArrayList instance from a COSDictionary and key. @param dictionary the parent COSDictionary @param dictionaryKey the unique key in the dictionary
1028 Initializes page destination with an empty array.
1029 Initializes a PDRectangle object with the specified dimensions. @param x leftmost x-coordinate @param y topmost y-coordinate @param width rectangle width @param height rectangle height
1030 Initializes PDRectangle from a BoundingBox. @param box bounding box containing rectangle coordinates
1031 Creates a new COSStream instance and adds it to the collection for closure. @return COSStream object
1032 Initializes a COSStream with default settings. @param stream underlying stream (optional)
1033 Initializes COSStream with cached stream and read view. @param streamCache RandomAccessStreamCache instance @param randomAccessReadView RandomAccessReadView object
1034 Returns an unmodifiable dictionary view of this COS dictionary. @return UnmodifiableCOSDictionary instance
1035 Retrieves the latest decode result from the cache. @return DecodeResult object or default result if empty
1036 Retrieves and returns the resources dictionary from the COSObject. @return PDResources object or empty PDResources if not found, or null if absent
1037 Constructs an empty PDAttributeObject instance.
1038 Constructs a PDUserProperty object from a given PDUserAttributeObject. @param userAttributeObject attribute data to initialize property with.
1039 Constructs an empty PDOutlineNode instance.
1040 Constructs an empty PDDestinationNameTreeNode instance.
1041 Constructs an instance of PDEmbeddedFilesNameTreeNode.
1042 Initializes an empty PD Javascript Name Tree Node.
1043 Constructs a new instance of PDStructureElementNameTreeNode. Calls superclass constructor.
1044 Initializes a new instance of PDNonTerminalField with the given PDAcroForm. @param acroForm parent AcroForm object
1045 Constructs a TerminalField instance from an AcroForm. @param acroForm parent AcroForm object
1046 Constructs a PDLayoutAttributeObject instance from a COSDictionary. @param dictionary COS dictionary containing attribute data
1047 Constructs a PDListAttributeObject instance from a COSDictionary.
1048 Initializes an instance from a COSDictionary. @param dictionary PDF object dictionary to initialize from
1049 Initializes a new PDTableAttributeObject instance from a COSDictionary.
1050 Initializes a PDAppearanceStream object from a COSStream. @param stream input stream containing appearance data
1051 Initializes a new Transparency Group from a COS stream and resource cache. @param stream input stream containing transparency group data @param cache resource cache for resolving dependencies
1052 Adds a TrueType Collection to the font library. @param ttcFile TrueType Collection file to process
1053 Adds TrueType font information by parsing the provided font headers and file. @param fontHeaders Font headers containing metadata about the font @param file File representing the actual font data @param hash Unique identifier for the font (used for tracking purposes)
1054 Adds a Type1 font from a PFB file to the list. @param pfbFile the PFB file to process
1055 Creates a PDDestination object from the provided COSBase. @param base COS representation of destination data
1056 Initializes a new checkbox form field instance. @param acroForm parent AcroForm object @param field COSDictionary representing the field's properties @param parent parent PDNonTerminalField of this checkbox
1057 Initializes push button with form, field, and parent. @param acroForm the PDF form @param field the COS dictionary for the field @param parent the parent non-terminal field
1058 Initializes a new PDRadioButton with the specified form, dictionary, and parent field. @param acroForm the parent form @param field the underlying PDF field @param parent the parent non-terminal field
1059 Constructs a PDChoice object with specified parameters. @param acroForm PDAcroForm instance @param field COSDictionary representing the field @param parent PDNonTerminalField parent field
1060 Initializes PDTextField with given parameters. @param acroForm PDAcroForm instance @param field COSDictionary representing the field's properties @param parent PDNonTerminalField parent field
1061 Saves current graphics state to the stack. @see #push(GraphicsState) @see #peek()
1062 Saves the current graphics stack and replaces it with a clone of the top state. @return The original, saved graphics stack.
1063 Initializes a new COSDocument instance with an in-memory stream cache.
1064 Returns a string representation of the object as a dictionary.
1065 Clips the current graphics state to the specified rectangle. @param rectangle bounding box to intersect with clipping path
1066 Returns the transformed bounding box of the given appearance stream. @param appearanceStream PDAppearanceStream instance to transform
1067 Initializes graphics state with a clipping path from the given page rectangle. @param page rectangle defining the clip region
1068 Retrieves the value at index 2 from the array. @return Value at index 2 or default if out of bounds
1069 Retrieves the integer value at index 2 from an underlying array. @return The integer value at index 2.
1070 Retrieves the value at index 3 from an underlying integer array. @return integer value at specified array index
1071 Retrieves value at index 4 from an array. @return integer value at specified array position
1072 Returns the top element from the array. @return the integer at index 5 in the array
1073 Retrieves the value at index 2 from the underlying array. @return The value stored in the third position of the array.
1074 Retrieves the integer value at index 2 from an underlying array. @return The integer value at index 2 or its default value if not set.
1075 Retrieves the value at index 3 from the array. @return integer value at specified position in the array
1076 Checks if the bounding box fits within the array type. @return true if box is bounded, false otherwise
1077 Checks if the bounding box fits within the specified type. @return true if the box matches the type, false otherwise
1078 Checks if first element fits bounding box type. @return true if matches, false otherwise
1079 Creates an empty output stream. @throws IOException if I/O error occurs
1080 Creates an output stream with specified COS filter. @param filter COSName representing the filter to apply
1081 Creates a thumbnail image from the provided COS stream. @param cosStream input COS stream containing image data
1082 Retrieves the image mask from the COS object. @return PDImageXObject containing the mask or null if not found
1083 Retrieves the soft mask image from the COS stream. @return PDImageXObject representing the soft mask or null if not found.
1084 Writes AffineTransform object to output stream. @param transform transformation matrix
1085 Begins text mode by writing the 'BEGIN_TEXT' operator and setting the flag.
1086 Ends text mode, writing the END_TEXT operator and resetting state. @throws IOException if an I/O error occurs
1087 Sets text leading value. @param leading new leading value as float
1088 Emits a newline operator in text mode. @throws IOException on write error
1089 Writes a text move operation to output stream. @param tx x-coordinate offset @param ty y-coordinate offset
1090 Saves the current graphics state, allowing for later restoration. @throws IOException if an I/O error occurs
1091 Restores graphics state by popping font and color space stacks. @throws IOException on write error
1092 Sets stroking color with RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1093 Sets stroking color in CMYK model. @param c cyan component (0..1) @param m magenta component (0..1) @param y yellow component (0..1) @param k black component (0..1)
1094 Sets the stroking color to a grayscale value between 0 and 1. @param g grayscale value (0..1)
1095 Sets non-stroking color using RGB values. @param r red component (0..1) @param g green component (0..1) @param b blue component (0..1)
1096 Sets non-stroking CMYK color. @param c cyan value (0..1) @param m magenta value (0..1) @param y yellow value (0..1) @param k black value (0..1)
1097 Sets non-stroking color with specified gray value. @param g gray value in range 0..1
1098 Adds a rectangle to the current drawing context. @param x top-left x-coordinate @param y top-left y-coordinate @param width rectangle width @param height rectangle height
1099 Draws a Bezier curve from (x1,y1) to (x2,y2) and then to (x3,y3). @param x1 starting point X-coordinate @param y1 starting point Y-coordinate @param x2 control point 1 X-coordinate @param y2 control point 1 Y-coordinate @param x3 end point X-coordinate @param y3 end point Y-coordinate
1100 Draws a quadratic Bezier curve to the current path. @param x2, y2 control point coordinates @param x3, y3 end point coordinates
1101 Writes a Bezier curve segment to output, with control point and endpoint coordinates. @param x1 first control point's X coordinate @param y1 first control point's Y coordinate @param x3 third point's X coordinate (endpoint) @param y3 third point's Y coordinate (endpoint)
1102 Moves the current position to specified coordinates. @param x new X-coordinate @param y new Y-coordinate
1103 Draws a line to the specified coordinates. @param x end-point X-coordinate @param y end-point Y-coordinate
1104 Executes a stroke operation on the current drawing path. @throws IOException if an I/O error occurs
1105 Closes the current drawing session and strokes the path.
1106 Fills the output stream with data, throwing an error if in text mode.
1107 Fills even and odd values in the buffer.
1108 Fills and strokes the current graphic shape. @throws IOException if an I/O error occurs
1109 Fills and strokes shapes with even/odd rule.
1110 Closes, fills non-zero areas, and strokes the current path. @throws IOException if an I/O error occurs
1111 Closes and fills/strokes even/odd paths. @throws IOException if an I/O error occurs
1112 Closes the current path, throwing an error if in text mode.
1113 Clips the current graphics context, disallowing further drawing until next clip command. @throws IOException if an I/O error occurs during operation
1114 Clamps even and odd coordinates using the current clipping path.
1115 Sets the line width using the specified value. @param lineWidth new line width to be applied
1116 Sets the line join style to a specified integer value. @param lineJoinStyle one of Miter, Round, or Bevel (0-2)
1117 Sets the line cap style. @param lineCapStyle integer value (0-2) representing the desired style
1118 Sets line dash pattern with specified values and phase. @param pattern array of float values for the dash pattern @param phase float value representing the phase of the pattern
1119 Sets the miter limit for line joins. @param miterLimit positive float value (<= 0 is invalid)
1120 Closes marked content with an END_MARKED_CONTENT operator.
1121 Sets character spacing to specified value. @param spacing new character spacing value
1122 Sets word spacing in font. @param spacing spacing value
1123 Sets horizontal scaling factor for text. @param scale float value representing horizontal scaling factor
1124 Sets rendering mode to specified value. @param rm RenderingMode enum value to be set
1125 Sets text rise value. @param rise new text rise value
1126 Initializes a PDRectangle from an array of float values. @param array 4-element float array representing rectangle coordinates
1127 Initializes a line dash pattern with the given array and phase offset. @param array COSArray of dash lengths @param phase initial phase offset, adjusted if negative to match PDF 2.0 spec
1128 Returns string representation of PDRange object. @return formatted string with min and max values.
1129 Evaluates a type 4 function using the provided input values. @param input input values for the function @return array of output values or throws an exception if incorrect number of outputs is returned.
1130 Reads a patch from an ImageInputStream with optional free parameters. @param input ImageInputStream to read from @param isFree whether to use free parameters (default: false) @return Patch object or null if end of file reached
1131 Reads and transforms a vertex from the image stream. @param input ImageInputStream to read from @param maxSrcCoord maximum source coordinate value @param maxSrcColor maximum source color value @param rangeX X-axis range for interpolation @param rangeY Y-axis range for interpolation @param colRangeTab color component ranges for interpolation @param matrix transformation matrix @param xform additional affine transform @return Vertex object with transformed coordinates and colors
1132 Returns colour at index 0 (before colour). @return PDGamma object representing before colour
1133 Returns the colour after the current one in the palette. @return PDGamma object representing the next colour or null if not available
1134 Returns the start colour of the PDGamma. @return Colour object at index 2
1135 Returns end colour of PDGamma. @return Colour at index 3 in internal colour array
1136 Retrieves the blend mode instance from the dictionary. @return BlendMode object or null if not found
1137 Creates a Matrix object from the provided COSBase. @param base input data, must be a COSArray with at least 6 COSNumber elements
1138 Updates the highest imported object number in the document. @param importedPage page containing imported objects
1139 Retrieves a COSDictionary object from the given keys. @param firstKey primary key for dictionary lookup @param secondKey secondary key for dictionary lookup @return COSDictionary object or null if not found
1140 Retrieves a boolean value from the dictionary using the given keys. @param firstKey key to access the dictionary @param secondKey nested key for boolean value @param defaultValue default boolean value if not found @return true or false value, or defaultValue if not present
1141 Retrieves integer value from dictionary using first and second keys. @param firstKey primary key @param secondKey secondary key @param defaultValue default value if not found @return integer value or defaultValue if not found
1142 Retrieves filter names from the PDF parameters. @return List of filter names or empty list if none found
1143 Returns the color space for this PDF object. @return PDColorSpace object or null if not initialized
1144 Checks if the provided dictionary represents a catalog. @param dictionary COSDictionary to inspect @return true if it's a catalog, false otherwise
1145 Checks if a COSDictionary represents a page tree node. @param node COSDictionary to check
1146 Retrieves the COSName of the Cryptographic Filter Method. @return COSName representing the CFM method
1147 Returns the stream filter name, using IDENTITY if not available.
1148 Returns the string filter name from the dictionary, or IDENTITY if not found.
1149 Decrypts dictionary entries within a given PDF document. @param dictionary the COSDictionary to decrypt @param objNum object number @param genNum generation number
1150 Fetches Unicode representation of a given code point using ToUnicode CMap. @param code int code point value @return String representing the Unicode character or null if not found
1151 Retrieves or initializes the subtype name. @return COSName object representing the subtype
1152 Retrieves relationship name from dictionary. @return COSName object representing relationship
1153 Retrieves the appearance state of the COS object. @return COSName representing the appearance state, or null if not set
1154 Checks if the PDF document has an encryption.
1155 Retrieves encryption dictionary from trailer. @return COSDictionary object for encryption
1156 Initializes parsing by retrieving trailer and verifying the root object. @throws IOException if missing or malformed trailer is encountered
1157 Retrieves the AcroForm object from the PDF document. @param acroFormFixup optional fixup for AcroForm content @return PDAcroForm object or null if not found
1158 Retrieves viewer preferences for a PDF document. @return PDViewerPreferences object or null if not found
1159 Retrieves document name dictionary. @return PDDocumentNameDictionary object or null if not found
1160 Retrieves the document's destination dictionary. @return PDDocumentNameDestinationDictionary object or null if not found
1161 Retrieves MarkInfo from PDF document. @return PDMarkInfo object or null if not found
1162 Retrieves the PDF URI dictionary from the document's root. @return null if not found, otherwise a PDURIDictionary object
1163 Retrieves the structure tree root from the PDF document. @return PDStructureTreeRoot object or null if not found
1164 Retrieves optional content properties from the PDF document. @return OptionalContentProperties object or null if not available
1165 Retrieves a list of destination names from the document catalog. @return PDDestinationNameTreeNode object or null if not found
1166 Retrieves embedded files node from the user profile dictionary. @return PDEmbeddedFilesNameTreeNode object or null if not found
1167 Retrieves JavaScript tree node from dictionary. @return PDJavascriptNameTreeNode object or null if not found
1168 Retrieves the PDF transition data from the page. @return PDTransition object or null if not available
1169 Retrieves an indirect COSObject by name from a dictionary of given kind. @param kind type of dictionary to search @param name name of indirect object to fetch @return COSObject if found, otherwise null
1170 Retrieves a dictionary object by name from the specified COS dictionary. @param kind type of COS dictionary @param name name of dictionary object to retrieve @return dictionary object or null if not found
1171 Retrieves an iterable collection of names from a COS dictionary. @param kind the type of COS name to retrieve @return Iterable collection of COS names or empty set if not found
1172 Retrieves a PDF page object from the underlying COS dictionary. @return PDPage object or null if not found
1173 Retrieves a PDPage object from the PDF document. @return PDPage object or null if not found
1174 Retrieves a PDF page object. @return PDPage object or null if not found
1175 Fetches the ID tree for a PDF structure. @return PDNameTreeNode object or null if not found
1176 Retrieves the parent tree node from the COS dictionary. @return PDNumberTreeNode object or null if not found
1177 Builds a map of classes from the CLASS_MAP dictionary. @return Map of class names to objects (dictionaries or arrays)
1178 Retrieves the encryption filter dictionary by name. @param cryptFilterName unique identifier of the encryption filter @return PDCryptFilterDictionary object or null if not found
1179 Retrieves border style dictionary from annotation. @return PDBorderStyleDictionary object or null if not found
1180 Retrieves border effect dictionary. @return BorderEffectDictionary object or null if not found
1181 Retrieves and returns the user's signature as a PDSignature object, or null if not found.
1182 Retrieves JavaScript object from FDF dictionary. @return FDFJavaScript object or null if not found
1183 Retrieves appearance dictionary from PDF field. @return PDAppearanceDictionary object or null if not found
1184 Retrieves the appearance stream reference from the field's dictionary. @return FDFNamedPageReference object or null if not found
1185 Retrieves the icon fit from the field's COS dictionary. @return FDFIconFit object or null if not found
1186 Retrieves additional actions from the PDF document. @return PDAdditionalActions object or null if not found
1187 Retrieves FDFPageInfo object from the PDF page. @return FDFPageInfo object or null if not found
1188 Retrieves a named page reference from the document template. @return FDFNamedPageReference object, or null if not found
1189 Retrieves CID system info from dictionary. @return PDCIDSystemInfo object or null if not found
1190 Retrieves the Panose value from the style dictionary. @return PDPanose object or null if not found
1191 Retrieves and caches the PDF resources. @return PDResources object or null if not initialized
1192 Retrieves character procedures dictionary. @return COSDictionary object containing character procedures or null if not initialized
1193 Retrieves the N-Process associated with this device. @return PDDeviceNProcess object or null if not found
1194 Retrieves the render state for a given destination (PRINT, VIEW, or EXPORT). @param destination target rendering destination @return RenderState enum value or null if not found
1195 Retrieves the extended graphics state. @return PDExtendedGraphicsState object or null if not initialized
1196 Retrieves PDF resources from the underlying COS dictionary. @return PDResources object or null if not found
1197 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
1198 Retrieves Windows launch parameters from the action's configuration. @return PDWindowsLaunchParams object or null if not found
1199 Retrieves the target directory from the PDF document. @return PDTargetDirectory object or null if not found
1200 Retrieves appearance data as a PDAppearanceDictionary. @return Appearance data or null if not available
1201 Retrieves a PDPage object associated with this PDF document. @return PDPage object or null if not found
1202 Retrieves the border effect dictionary from the PDF COS object. @return BorderEffectDictionary object or null if not found
1203 Retrieves border style dictionary from COS object. @return PDBorderStyleDictionary object or null if not found
1204 Retrieves the URI of the previous action in a PDF document. @return PDActionURI object or null if not found
1205 Retrieves and returns the external data dictionary. @return PDExternalDataDictionary object or null if not found
1206 Retrieves PDBorderStyleDictionary object from underlying PDF structure. @return Border style dictionary or null if not found
1207 Retrieves border effect dictionary from COS object. @return BorderEffectDictionary object or null if not found
1208 Retrieves the border effect dictionary. @return BorderEffect dictionary or null if not available
1209 Retrieves appearance characteristics dictionary. @return PDAppearanceCharacteristicsDictionary object or null if not found
1210 Retrieves additional actions annotation data from the PDF document. @return PDAnnotationAdditionalActions object or null if not found
1211 Retrieves border style dictionary from the COS object. @return PDBorderStyleDictionary or null if not found
1212 Retrieves normal appearance data from dictionary. @return PDAppearanceEntry object or null if not found
1213 Retrieves the filter data from the dictionary. @return PDPropBuildDataDict object representing the filter or null if not found
1214 Retrieves public security settings as a PDPropBuildDataDict. @return PDPropBuildDataDict object or null if not found
1215 Retrieves the application build data as a PDPropBuildDataDict object. @return PDPropBuildDataDict object or null if not found in dictionary
1216 Retrieves MDP (Metadata Processing Dictionary) as a PDSeedValueMDP object. @return null if no MDP is found, otherwise the dictionary as a PDSeedValueMDP
1217 Retrieves the Seed Value Certificate from the PDF document. @return PDSeedValueCertificate object or null if not found
1218 Retrieves the time stamp from the PDF document. @return PDSeedValueTimeStamp object or null if not found
1219 Retrieves the PDF property build object. @return PDPropBuild object or null if not found
1220 Retrieves the structure element from the PDF document. @return PDStructureElement object or null if not found
1221 Checks if the current object has children. @return true if children exist, false otherwise
1222 Returns a set of default resources for the PDF document. @return PDResources object or null if not found
1223 Retrieves additional actions for a form field. @return PDFormFieldAdditionalActions object or null if not available
1224 Retrieves the PDSignature object associated with this instance. @return PDSignature object or null if not found
1225 Retrieves default PDSignature from the COS dictionary. @return PDSignature object or null if not found
1226 Retrieves the seed value from the COS dictionary. @return PDSeedValue object or null if not found
1227 Retrieves measure dictionary from COS object. @return PDMeasureDictionary or null if not found
1228 Retrieves thread information as a PDDocumentInformation object. @return PDDocumentInformation object or null if thread info is not available
1229 Retrieves the first bead of a PD thread. @return PDThreadBead object or null if not found
1230 Retrieves a PDF thread object from the underlying COS dictionary. @return PDThread object or null if not found
1231 Retrieves the next bead in a thread. @return Next PDThreadBead object or null if none found
1232 Retrieves the previous bead from the current bead's dictionary. @return Previous bead as a PDThreadBead object or null if not found.
1233 Retrieves a PDF page object from the COS dictionary. @return PDPage object or null if not found
1234 Retrieves metadata from the COS stream. @return PDMetadata object or null if not found
1235 Retrieves the PDMetadata object associated with this page. @return PDMetadata object or null if not found
1236 Retrieves differences from FDF object as a COS stream. @return COSStream containing differences or null if not available
1237 Retrieves font file as a PDStream object. @return PDStream instance containing font data or null if not found
1238 Retrieves font file as PDStream object. @return PDStream containing font data or null if not found
1239 Retrieves font file 3 as a PDStream object. @return PDStream object or null if not found in COS dictionary
1240 Retrieves CID set stream from PDF document. @return PDStream object containing CID set or null if not found
1241 Retrieves sound stream from action. @return COSStream object for sound data
1242 Retrieves the normal icon as a PDFormXObject from the COSStream at index I. @return PDFormXObject object or null if not found
1243 Retrieves rollover icon as a PDFormXObject from the PDF document. @return PDFormXObject object representing the rollover icon, or null if not found
1244 Retrieves alternate icon from PDF document. @return PDFormXObject representing the alternate icon or null if not found
1245 Retrieves the document ID from the trailer object. @return COSArray containing the document ID
1246 Retrieves a list of output intents from the PDF document. @return List of PDOutputIntent objects
1247 Retrieves a list of thread beads from the page. @return List of PDThreadBead objects or empty list if not found
1248 Retrieves a list of PDF viewports from the page's COS array. @return List of PDViewportDictionary objects or null if not found
1249 Retrieves a list of child nodes for the current PDNameTreeNode. @return List of child PDNameTreeNode objects or null if empty
1250 Retrieves a map of name-value pairs from the COSArray. @return Map<String, T> containing names and their corresponding values, or null if not found
1251 Retrieves a list of child nodes for the current PDNumberTreeNode. @return List of PDNumberTreeNode objects or null if empty
1252 Fetches a map of index-numeric pairs from the COSArray. @return Map<Integer, COSObjectable> or null if not found
1253 Retrieves the upper limit value from the 'LIMITS' array. @return Integer value of the upper limit or null if not found
1254 Retrieves the lower limit value from the 'LIMITS' COS array. @return The lower limit value as an Integer, or null if not available
1255 Retrieves an array of range values from COS. @return COSArray object containing range values or null if not available
1256 Retrieves and returns the array of domain values. @return COSArray containing domain values or null if not initialized
1257 Retrieves the COS array representing the document's size.
1258 Returns an array of decoded values. @return COSArray object containing decoded values or range values as fallback.
1259 Retrieves the array of functions. @return COSArray containing function definitions or null if uninitialized
1260 Retrieves and returns the COSArray representing the object's bounds.
1261 Retrieves and returns the encoded array. @return COSArray object representing the encoded data
1262 Retrieves a list of user properties owned by the current user. @return List of PDUserProperty objects
1263 Checks if the given edge is attached. @param edge edge to check @return true if edge is attached, false otherwise
1264 Retrieves a color object from embedded annotation data. @return Color object or null if not available
1265 Retrieves interior color from annotation. @return Color object or null if not available
1266 Returns a float array representing callout data.
1267 Retrieves the ink list from annotations. @return List of float arrays representing ink data or null if not found.
1268 Retrieves line data as a float array. @return line data or null if not available
1269 Returns the ending style of a line annotation. @return COS name or PDAnnotationLine.LE_NONE if not found
1270 Retrieves the end point ending style from the annotation. @return Style of the line ending (e.g. LE_NONE, LE_SQUARE, etc.)
1271 Retrieves the interior color from annotations. @return Color object or null if not found
1272 Retrieves horizontal caption offset from annotation's CO property.
1273 Retrieves the vertical offset of a caption. @return Vertical offset value or 0 if not found
1274 Retrieves vertices data as an array of floats.
1275 Retrieves the interior color from annotation. @return Color object or null if not found
1276 Converts COSArray of vertices to a float array. @return Array of vertex coordinates or null if not found
1277 Retrieves the start point ending style of an annotation. @return string value representing the style (e.g. LE_NONE, etc.) or default if not found
1278 Returns the endpoint style ending, or LE_NONE if not set.
1279 Retrieves the interior color from the annotation. @return Color object or null if not available
1280 Retrieves the interior color from the annotation. @return Color object or null if not available
1281 Retrieves the coordinates of an annotation. @return float array containing the coordinates or null if not found
1282 Retrieves the ID from the COS dictionary. @return COSArray containing the user's ID
1283 Retrieves a list of FDF fields. @return List of FDFField objects or null if not found
1284 Retrieves a list of FDF pages from the document. @return List of FDFPage objects or null if not found
1285 Retrieves a list of child fields from the current field. @return List of FDFFields or null if not available
1286 Retrieves a list of options from the field's COS array. @return List of Option elements or null if empty
1287 Retrieves a list of FDFTemplates from the document. @return List of FDFTemplate objects or null if not found
1288 Retrieves a list of FDF field definitions from the template. @return List of FDFField objects or null if not found
1289 Returns the list of widths, fetching from dictionary if not cached. @return List of Float values representing widths or empty list if not found.
1290 Retrieves the transformation matrix from the dictionary. @return a float array representing the matrix or default identity matrix if missing.
1291 Retrieves a list of component names from the dictionary. @return List of String component names or an empty list if not found
1292 Retrieves and caches the background array from the dictionary.
1293 Retrieves the domain as a COSArray. @return COSArray containing the domain or null if not initialized
1294 Retrieves the extension array. @return COSArray object representing the extension
1295 Retrieves the domain as a COS array. @return COSArray object representing the domain, or null if not initialized
1296 Retrieves and returns COORDS array from COS object. @return COSArray containing coordinate data or null if not available
1297 Retrieves the decode values array from the COS object. @return COSArray containing decode values or null if not initialized
1298 Retrieves the font setting from the dictionary. @return PDFontSetting object or null if not found
1299 Retrieves an array of field names from the underlying COS object. @return COSArray containing field names or null if not available
1300 Retrieves COSArray of field names. @return COSArray containing field names
1301 Retrieves an array of rectangle differences. @return Array of float values or empty array if not found
1302 Returns array of rectangle differences.
1303 Retrieves callout data as a float array. @return Callout data or null if not available
1304 Retrieves the ink list from the COS object. @return 2D array of floats representing the ink list, or empty array if not found
1305 Retrieves line data as an array of floats.
1306 Retrieves the start point ending style from the COS array. @return String representing the starting point ending style or default value if not found
1307 Retrieves the endpoint ending style from the COS array. @return The endpoint ending style as a string or LE_NONE if not found
1308 Retrieves horizontal offset of a caption.
1309 Retrieves vertical offset of caption from COS data. @return vertical offset value or 0 if not found
1310 Returns quad points as a float array. @return Quad point coordinates or null if not available
1311 Retrieves an array of vertices. @return Array of vertex values or null if not found
1312 Retrieves the animation path as a 2D array of floats. @return 2D array of floats representing the animation path or null if not found
1313 Retrieves the line ending style for the start point. @return String representation of the line ending style (e.g., LE_NONE) or default if not found
1314 Returns the end point style for a line annotation. @return String representing the end point style (e.g. LE_NONE) or default if not found
1315 Retrieves an array of vertices from the COS object. @return Array of vertex values or null if not available
1316 Returns an array of rectangular differences (RD). @return Array of float values representing RD if found, empty array otherwise
1317 Retrieves quad points from COSArray. @return float array of quad points or null if not found
1318 Retrieves and parses the sub-filter array from the dictionary. @return List of strings representing the sub-filter values or an empty list if not found
1319 Retrieves list of digest methods from the provided dictionary. @return List of String representing available digest methods
1320 Retrieves a list of reasons from the underlying dictionary. @return List of reason strings or an empty list if not found
1321 Retrieves a list of legal attestations from the document.
1322 Retrieves the subject from the dictionary as a list of byte arrays. @return List<byte[]> containing subject data or null if not present
1323 Retrieves a list of key usage extensions. @return List of String values or null if not found
1324 Retrieves issuer information as a list of byte arrays. @return List of issuer byte arrays or null if not found
1325 Retrieves OID (Object Identifier) as a list of byte arrays. @return List of byte arrays or null if not found
1326 Retrieves the byte range from the dictionary as an array of integers. @return int[] containing the byte range values or empty array if not found
1327 Retrieves the calculation order of PDF form fields. @return List of PDField objects in the calculated order
1328 Retrieves a list of selected option indices from the COSArray. @return List of Integer values or empty list if not found
1329 Retrieves an array of PDNumberFormat dictionaries. @return array of PDNumberFormat dictionaries or null if not found
1330 Retrieves an array of Y number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if empty
1331 Retrieves an array of distance number format dictionaries. @return PDNumberFormatDictionary[] or null if not found
1332 Retrieves an array of predefined number format dictionaries. @return Array of PDNumberFormatDictionary objects or null if not found
1333 Retrieves a dictionary array of angles from the PDF document. @return An array of PDNumberFormatDictionary objects or null if not found
1334 Retrieves an array of line slopes from the underlying PDF structure. @return An array of PDNumberFormatDictionary objects or null if not found
1335 Retrieves the origin coordinates of a coordinate system. @return an array of 3 floats representing x, y, and z origins or null if not found
1336 Retrieves visibility policy as COSName. @return COSName representing access control settings
1337 Retrieves long value associated with given key from PDF metadata. @param key unique identifier of the metadata field @return long value or -1 if not found
1338 Retrieves a 64-bit value associated with the given COSName. @param key unique COSName identifier
1339 Retrieves a long value from the COS using its PDF name. @param key unique identifier @param defaultValue default value to return if not found @return the retrieved long value or the default value
1340 Sets the start XRef position and resolves the trailer. @param startxrefBytePosValue unique byte position value
1341 Retrieves floating-point value from PDF by its name. @param key unique PDF field identifier
1342 Retrieves the float value associated with the given COSName key. @param key unique identifier of the float value
1343 Retrieves a float value from a PDF object using the specified key. @param key unique PDF object key @param defaultValue default float value to return if not found @return float value associated with the key or the default value
1344 Returns the user's unit value, defaulting to 1.0 if not set. @return User's unit value or a default of 1.0
1345 Retrieves guideline width from dictionary. @return guideline width value as a float
1346 Retrieves transparency value from annotation. @return opacity as a floating-point number between 0 and 1
1347 Retrieves font weight value from configuration dictionary. @return Font weight value (defaulting to 0 if not set)
1348 Retrieves italic angle value from font dictionary. @return italic angle in degrees or default 0 if not found
1349 Retrieves the ascent value from the dictionary. @return The ascent value as a float or default value (0) if not found
1350 Retrieves descent angle in radians. @return Descent angle value or default of 0 if not set
1351 Retrieves the leading value from the dictionary. @return Leading value or default of 0 if not found
1352 Calculates and returns the cap height. If initially set to negative infinity, recalculates using PDFBOX-429 workaround.
1353 Returns the x-height of a font, or calculates it if previously unknown. @return calculated x-height value
1354 Retrieves stem volume value from dictionary. @return stem volume as a float value or default 0 if not found
1355 Retrieves the stem height value from the dictionary. @return Stem height as a floating-point number or default value of 0 if not found
1356 Retrieves average font width from dictionary. @return Average font width value or 0 if not found
1357 Retrieves maximum width value from configuration dictionary. @return Maximum width as a floating-point number or default 0 if not set
1358 Returns the missing width value from the dictionary. @return the missing width value or 0 if not found.
1359 Retrieves gamma value from configuration dictionary.
1360 Retrieves the X-step value from the COS object. @return X-step value or 0 if not found
1361 Retrieves the Y-axis step value from COS object. @return The Y-step value or 0 if not set
1362 Calculates and returns the audio volume. @return normalized volume value between -1 and 1
1363 Retrieves the length of the leader line. @return length of the leader line (float value)
1364 Retrieves leader line extension length from COS object. @return Leader line extension length as a floating-point number.
1365 Retrieves the offset length of leader lines. @return Offset length value or default (0) if not set
1366 Retrieves constant opacity value from COS object. @return opacity value as a floating-point number
1367 Retrieves the width value from the PDF document. @return width as a float value or 0 if not found
1368 Retrieves duration value from COS object. @return duration in float format
1369 Retrieves fly scale value from COS object. @return fly scale value as a float
1370 Initializes extraction of regions from a PDF page. @param page the PDPage to extract regions from
1371 Returns the color space associated with this object.
1372 Creates a PDF property list based on the given COS dictionary type. @param dict COS dictionary containing type information @return instance of PDPropertyList or derived class for specific types
1373 Retrieves line width value from configuration. @return line width as float value or null if not set
1374 Retrieves the miter limit value from the style. @return Miter limit as a floating-point number
1375 Retrieves flatness tolerance value. @return float representation of flatness tolerance or null if undefined
1376 Retrieves smoothness tolerance value. @return float value representing smoothness tolerance
1377 Retrieves stroking alpha constant as a float value. @return Alpha value of stroke (0.0f - 1.0f) or null if not found
1378 Retrieves non-stroking alpha constant value. @return alpha constant value as a float or null if not found
1379 Returns a map of COS object offsets, triggering and performing a search if necessary.
1380 Adds an object to be written and retrieves its key. @param obj COSBase object to write
1381 Writes a PDF reference (object ID and generation) to standard output. @param obj COSBase object containing the reference information
1382 Writes this document to the specified OutputStream. @param output target output stream
1383 Clears internal data and triggers an update.
1384 Removes and returns an object at specified index. @param i index of object to be removed @return removed object or null if not found
1385 Removes an object from the collection and updates the update state if removed. @param o COSBase object to remove @return true if object was successfully removed, false otherwise
1386 Clears all items and triggers an update.
1387 Removes an item by its COSName key. @param key unique identifier of the item to be removed
1388 Updates the origin document state if it differs from the current state. @param updateState Current COS update state
1389 Sets this object to null, updating state if previously non-null.
1390 Sets the origin document state and updates associated update info. @param originDocumentState new origin document state @param dereferencing whether to dereference or not
1391 Returns string at specified index. @param index index of desired string @return string at index or null if not found
1392 Retrieves name as string using COSName.getPDFName. @param key PDF object reference @return Name as a string or null if not found
1393 Returns name as a string or default value if not found. @param key COSName object to fetch name from @param defaultValue name to use if key is invalid or empty
1394 Checks if the given offset points to a valid XRef stream. @param startXRefOffset offset to check @return true if valid XRef stream found, false otherwise
1395 Retrieves the page mode from the root object. @return PageMode enum value or USE_NONE if not found or invalid
1396 Retrieves the page layout based on the root element's COSName. @return The PageLayout object or SINGLE_PAGE if invalid
1397 Retrieves the application version as a string. @return The version name as a COS string or an empty string if not found
1398 Retrieves trapped name as a string. @return Name of the trapped object or null if not available
1399 Retrieves CSS style value from the root element. @return style string or null if not found
1400 Retrieves the type of COSObject. @return the name of TYPE COSObject as a string
1401 Retrieves the owner's name from the COS object. @return Owner's name as a string or null if not available
1402 Retrieves structure type from COS object. @return Structure type string or null if not available
1403 Creates a PDF structure node based on the provided dictionary type. @param node COSDictionary containing the node's properties
1404 Retrieves the type of COS object. @return The type name as a string or null if unknown
1405 Retrieves name as string from COS object. @return COS object's name or null if not available
1406 Retrieves the language of the current properties. @return Language string or null if not available
1407 Retrieves the type of an object. @return string representation of the object's type
1408 Retrieves the subtype name as a string. @return Subtype name or null if not found
1409 Retrieves filter name from internal dictionary. @return Filter name as string or null if not found
1410 Retrieves the sub-filter name from the dictionary. @return The sub-filter name as a string or null if not found
1411 Creates an instance of a specific FDFAnnotation based on the provided COSDictionary. @param fdfDic COSDictionary containing subtype information @return FDFAnnotation object or null if unknown/unsupported type
1412 Retrieves the intent from annotations. @return Intent string or empty if none found
1413 Retrieves the line ending style from the annotation.
1414 Retrieves application version from catalog. @return Version string as a COS name attribute value.
1415 Returns the PDF document's character encoding. @return Character encoding used in the PDF document, defaulting to "PDFDocEncoding" if not specified.
1416 Returns the scale option value, defaulting to 'always' if not defined in SW. @return String representing scale option ('always', etc.) or null if undefined
1417 Retrieves the scale type of a fitness plan. @return either the name string or predefined proportional value
1418 Retrieves the base font name from dictionary. @return Font name or null if not found
1419 Retrieves string representation of COS type from dictionary. @return string identifier of object type (e.g., "Folder", "File") or null if not found
1420 Retrieves subtype name from dictionary. @return Subtype string or null if not found
1421 Retrieves font name from COS dictionary. @return Font name as a string or empty if not found
1422 Retrieves the font stretch value from the dictionary. @return Font stretch string or null if not available
1423 Retrieves the base font name from the PDF dictionary.
1424 Retrieves the base font from the dictionary. @return Font name as a string or null if not found
1425 Retrieves base font name from dictionary. @return Font name as string or null if not found
1426 Retrieves the base font name from the dictionary. @return The name of the base font or null if not found.
1427 Checks if current subtype is 'NChannel'. @return true if subtype matches, false otherwise
1428 Returns the type of action. @return Type name as string or null if not set
1429 Returns the subtype of an action based on its name. @return action subtype as a string
1430 Creates a PDAction object from the given COSDictionary. @param action COS dictionary containing action data @return PDAction object or null if invalid
1431 Retrieves subtype name from COS object. @return subtype string or null if not available
1432 Retrieves caption positioning from COS object. @return Positioning string (e.g. "top") or null if not found
1433 Retrieves the intent from COS object. @return Intent string or null if not available
1434 Retrieves the subtype name from the COS object.
1435 Retrieves the name of an entity from the dictionary. @return The entity's name as a string or null if not found.
1436 Retrieves filter name from dictionary. @return Filter name as string or null if not found
1437 Retrieves the URL type from the dictionary. @return string representation of the URL type
1438 Retrieves filter name from COS dictionary. @return The filter name as a string.
1439 Retrieves the sub-filter name from the dictionary. @return Sub-filter string value or null if not found
1440 Retrieves field type from COS object. @return field type string or null if not found
1441 Retrieves the name of the COS object. @return The name as a string, or null if not available
1442 Retrieves the duplex setting as a string. @return The duplex setting value or null if not set
1443 Retrieves string value from COS dictionary by key. @param key unique identifier of the desired string
1444 Returns string value associated with given COS name or default value. @param key unique identifier for string value @param defaultValue fallback value to return when key is not found
1445 Retrieves the language of the current document. @return Language string (e.g., "en", "fr") or null if not set
1446 Retrieves title string from stored information. @return title string or null if not available.
1447 Retrieves the author name from metadata. @return The author's name or null if not present
1448 Retrieves email subject from stored metadata. @return Email subject as string or null if not set
1449 Retrieves keywords associated with this entity. @return string containing keywords or null if not set
1450 Retrieves the creator of this entity. @return The name of the creator or null if not set
1451 Retrieves producer name from metadata. @return Producer string or null if not available
1452 Retrieves the prefix value from the configuration. @return Prefix string or null if not set
1453 Retrieves Unicode file name from system. @return file name as a string or null if not available
1454 Retrieves file value from configuration. @return string representation of file value or null if not set
1455 Retrieves DOS file path from external storage. @return file path as a string or null if not found
1456 Retrieves file MAC address from configuration. @return file MAC address as a string or null if not set
1457 Retrieves file path in Unix format. @return File path as string or null if failed
1458 Retrieves file description from configuration.
1459 Retrieves the element's ID as a string. @return The unique identifier of the element.
1460 Retrieves the title from COS (Cosmos) data. @return Title string or null if not available
1461 Retrieves the language of the COS object. @return The language as a string or null if not set
1462 Retrieves alternate description from COS object. @return alternate description as string or null if not available
1463 Retrieves the expanded form of a COS object. @return string representation of the expanded form or null if not available
1464 Retrieves the actual text from the COS object. @return Actual text as a string or null if not available
1465 Retrieves and formats the value of the 'F' COS object. @return The formatted string representation of the 'F' value
1466 Retrieves the actual text from properties. @return Actual text string or null if not found
1467 Retrieves alternate description from properties. @return Alternate description string or null if not found
1468 Returns the expanded form of the property string. @return Expanded form as a string or null if properties are null
1469 Retrieves and returns the date in string format.
1470 Retrieves the name from the annotation string.
1471 Retrieves annotation contents as a string. @return contents of annotation or null if not available
1472 Retrieves title annotation from COSName.
1473 Retrieves subject from annotation.
1474 Retrieves the symbol from annotation. @return Symbol string value
1475 Retrieves rotation value from annotation. @return Rotation angle as string or null if not present
1476 Retrieves the default appearance from the annotation dictionary. @return The default appearance string or null if not found
1477 Retrieves default style attribute from annotation. @return default style value as string or null if not available
1478 Retrieves caption style from annotation. @return CSS string representing the caption style.
1479 Retrieves application state from annotation. @return State string as per COSName.STATE constant.
1480 Retrieves the state model from annotation data. @return state model as string or null if not set
1481 Retrieves the status value from the FDF data. @return Status string or null if not available
1482 Retrieves the target value from the FDF element. @return the target string or null if not found
1483 Retrieves the partial field name from the COSName enum.
1484 Retrieves the name from the COS data. @return user's name as a string or null if not available
1485 Retrieves font family from configuration dictionary. @return Font family string or null if not found
1486 Retrieves the character set from the dictionary. @return The character set as a string or null if not available
1487 Retrieves name from underlying dictionary. @return user's name as a string or null if not found
1488 Retrieves an array of group names from the OCGS dictionary. @return String[] array of group names or empty array if not found
1489 Retrieves the value associated with COSName.F from the action string.
1490 Retrieves the string value associated with COSName.D.
1491 Retrieves string value associated with COSName.O. @return The retrieved string value or null if not found
1492 Retrieves the value of property P from the COS (Core Object Structure). @return the string value of property P or null if not found
1493 Retrieves the URI from the Action dictionary and returns it as a UTF-8 encoded string. @return URI string or null if not found
1494 Retrieves filename from dictionary. @return filename string or null if not set
1495 Retrieves annotation name from dictionary. @return Name of annotation as a string or null if not found
1496 Retrieves filename from parameters. @return file name as string or null if not available
1497 Retrieves directory name from parameters. @return Directory string value
1498 Retrieves the execute parameter from the parameters collection.
1499 Retrieves contents string from dictionary. @return Contents string value or null if not present
1500 Retrieves the modified date as a string. @return Modified date in a human-readable format
1501 Retrieves annotation name from COS object. @return annotation name as a string or null if not available
1502 Retrieves the default appearance value from the COS object. @return The default appearance string or null if not set
1503 Retrieves default style string from COS object. @return Default style string or null if not available
1504 Retrieves the title from COS object. @return string representation of the title or null if not available
1505 Retrieves subject from COS object. @return subject string or null if not available
1506 Retrieves the state from the COS object. @return The current state as a string or null if not set
1507 Retrieves the state model string from COS.
1508 Retrieves the normal caption string from the COS object. @return Normal caption string or null if not available
1509 Retrieves rollover caption from COS object. @return Rollover caption string or null if not available
1510 Retrieves alternate caption from COS object. @return alternate caption as a string or null if not found
1511 Retrieves the date value from the dictionary. @return Date string as per COSName.DATE key
1512 Retrieves the operating system name from the PDF document. @return OS name as a string or null if not found
1513 Retrieves a list of subject DNs as key-value pairs. @return List of maps, each containing a subject DN and its attributes
1514 Retrieves URL value from configuration dictionary. @return The URL string, or null if not set.
1515 Retrieves URL value from configuration dictionary. @return The stored URL as a string or null if not set
1516 Retrieves name from dictionary. @return name string or null if not set
1517 Retrieves location string from internal dictionary. @return Location string or empty string if not set
1518 Retrieves the reason from the underlying dictionary. @return The reason as a string or null if not present
1519 Retrieves contact information from dictionary. @return Contact info string or null if not available
1520 Retrieves document title. @return Title string or null if not available.
1521 Retrieves partial name from dictionary. @return String representing partial name or null if not found
1522 Retrieves alternate field name from dictionary. @return Field name associated with COSName.TU
1523 Retrieves mapping name from dictionary. @return Mapping name as string or null if not found
1524 Retrieves the default style string from COS object. @return The default style string or null if not available
1525 Retrieves scale ratio from COS object. @return Scale ratio as string or null if not available
1526 Converts role map to a Java Map. @return A Map of String keys and Object values representing the role map, or an empty Map if not found
1527 Retrieves list of options from COS dictionary. @return List of option strings
1528 Retrieves display values for options from COS dictionary. @return list of string values
1529 Retrieves a value based on an inheritable attribute or explicit export values. @return Value as String, or "Off" if no other value is found
1530 Returns list of values for COSName.V. @return List of String values
1531 Retrieves default value from configuration. @return list of strings representing default values or empty list if not found
1532 Initializes an empty PDSimpleFileSpecification instance.
1533 Sets the file name to be used in the PDF document. @param fileName the name of the file (e.g. "example.pdf")
1534 Constructs a PDNamedDestination instance with the given destination string. @param dest the destination string to be assigned
1535 Sets the named destination to a specified value. @param dest the named destination string or null for no destination
1536 Validates and reads generation number from input. @throws IOException if value exceeds threshold
1537 Validates and returns a user-provided object number. @throws IOException if the number exceeds 10 digits or is negative
1538 Retrieves user password based on encryption revision. @param ownerPassword encrypted password @param owner unique identifier for the owner @param encRevision encryption revision (5 or 6 returns empty byte array) @return byte array representing user password or empty if not applicable
1539 Initializes a TensorPatch with control points and color. @param tcp array of Point2D control points @param color 2D float array representing the tensor's color
1540 Encrypts data using RC4 algorithm with a given key. @param finalKey encryption key @param input input stream to read from @param output output stream to write to
1541 Retrieves and synchronizes the FontProvider instance. @return FontProvider object or DefaultFontProvider if not initialized
1542 Assembles shaded triangles from the provided grid of coordinates and colors. @param patchCC 2D array of CoordinateColorPairs representing a grid of points and their associated colors @return List of ShadedTriangle objects, one for each valid triangle in the grid
1543 Creates a PDF ICC-based color space from the provided array and resources. @param iccArray COSArray containing ICC data @param resources PDResources for caching and color space lookup @return PDICCBased color space object or null if not found
1544 Initializes Coons Patch with given points and color data. @param points array of control points @param color 2D array of color values
1545 Processes a single TextPosition, potentially suppressing duplicates and merging diacritics. @param text the TextPosition to process
1546 Processes a TextPosition object, handling overlap and article division. @param text the TextPosition to process
1547 Converts COSString to Calendar object. @param text COSString value to convert
1548 Begins marked content with specified COSName. @param tag unique identifier for marked content
1549 Begins marked content sequence with specified ID. @param tag COSName representing the type of content @param mcid unique identifier for the marked content sequence
1550 Sets marked content point using COSName. @param tag COSName representing marked content point
1551 Writes a COSString to an OutputStream. @param string COSString object containing data to write @param output OutputStream where the data will be written
1552 Writes string representation of byte array to output stream. @param bytes input byte array @param output target output stream
1553 Initializes the graphics stream engine with a given page. Adds various operators for drawing and filling shapes, text, and images.
1554 Initializes the extractor with no input content.
1555 Initializes PDFTextStripperByArea with default settings.
1556 Retrieves an object from a PDF document using the specified path. @param objPath path to the desired object in the form of a slash-separated sequence
1557 Retrieves a dictionary attribute value by name. @param attrName name of the attribute to fetch
1558 Retrieves attribute value from COS dictionary or returns default value. @param attrName name of the attribute to fetch @param defaultValue default value to return if attribute not found
1559 Checks if a dictionary object exists with specified name. @param name name of the dictionary object to check
1560 Retrieves an array of string values from the COS dictionary. @param name key identifying the desired array @return String[] array or null if not found
1561 Retrieves a single name or an array of names from the PDF document. @param name key to search for in the PDF dictionary @param defaultValue default value to return if not found @return String or array of strings representing the name(s) or null if not found
1562 Retrieves a numeric or named value from the dictionary, returning the default value if not found. @param name key to look up in the dictionary @param defaultValue fallback value if key is missing @return COSNumber float value, COSName string value, or default value
1563 Retrieves a float value or an array of floats from the PDF dictionary. @param name key to search for in the dictionary @param defaultValue default float value if not found (used as fallback when unspecified)
1564 Retrieves a PDGamma object by its name from the PDF dictionary. @param name unique color identifier @return PDGamma object or null if not found
1565 Creates a unique key for the given kind and prefix. @param kind COS kind identifier @param prefix base name with optional increment
1566 Sets an integer value at specified object index. @param index object index to update @param intVal new integer value
1567 Parses and returns a COSNumber object from the given string representation. @param number String to parse (e.g. "123", "-0.5", "+inf")
1568 Appends a kid to the collection by MCID. @param mcid unique identifier of the kid
1569 Returns COSInteger value representing degrees.
1570 Parses a hexadecimal string from the input source. @throws IOException if malformed or missing closing bracket is encountered
1571 Initializes a new instance of PDRectangle with default coordinates (0, 0).
1572 Creates an empty PDRectangle with specified width and height. @param width rectangle's width @param height rectangle's height
1573 Returns a PDF rectangle based on the bounding box coordinates.
1574 Calculates the difference between an annotation rectangle and a bounding box. @return A PDRectangle object representing the overlap
1575 Creates a padded rectangle by adding given padding to the original rectangle. @param rectangle original rectangle @param padding amount of padding to add on each side
1576 Creates a new PDRectangle with modified coordinates based on the provided differences. @param rectangle original PDRectangle object @param differences array of four float values representing x, y, width, and height adjustments @return updated PDRectangle object or original if input is invalid
1577 Applies rect difference adjustments to a PDRectangle. @param rectangle original rectangle @param differences array of 4 float values (x, y, w, h) to adjust by
1578 Applies uniform padding to a PDF rectangle. @param box original rectangle @param padding amount of padding to apply @return padded PDRectangle object
1579 Initializes PDF cross-reference stream from COS document. @param cosDocument parent document containing cross-reference data
1580 Creates a stream object for the given PDF document. @param document PDF document to associate with the stream @return PDObjectStream instance or null (not applicable in this method)
1581 Initializes a PDStream object from a given PDDocument. @param document the source PDDocument
1582 Initializes a new PDStream instance from a COSDocument. @param document COSDocument containing the underlying PDF data
1583 Initializes a new PDStream instance by copying input data into the document. @param doc PDDocument object @param input InputStream containing data to be copied @param filters COSBase filter parameters
1584 Creates a COS stream from the provided input stream. @param document PDDocument instance @param rawInput InputStream containing raw data
1585 Encodes input stream into output stream using specified parameters and index. @param input input stream to be encoded @param encoded output stream for encoded data @param parameters encoding parameters as a dictionary @param index encoding index value
1586 Initializes a new instance of PDDefaultAttributeObject.
1587 Initializes a new PDUserAttributeObject instance with a default owner. @param OWNER_USER_PROPERTIES constant representing user properties ownership
1588 Constructs an empty PDStandardAttributeObject instance.
1589 Initializes an empty PDOutlineItem instance.
1590 Initializes a new instance of PDVariableText with the given AcroForm. @param acroForm the parent form to associate with this text field
1591 Initializes attribute object from COS dictionary. @param dictionary COS dictionary containing attribute data
1592 Returns the appearance stream associated with this entry. @return PDAppearanceStream object or throws exception if not applicable
1593 Returns a subdictionary's stream entries as a map. @throws IllegalStateException if the current entry is not an appearance subdictionary
1594 Creates a PDXObject based on the provided COSBase and resources. @param base COSBase object to create from @param resources PDResources for creating the object @return created PDXObject or null if input is invalid
1595 Adds a TrueType font from the specified file. @param ttfFile file containing the font data
1596 Constructs a PDShadingType6 instance from a COS dictionary. @param shadingDictionary COS dictionary containing type 6 shading data
1597 Initializes a new instance of PDShadingType7 from a given COS dictionary. @param shadingDictionary COS dictionary containing type 7 shading data
1598 Retrieves a PDDestination object by name. @param name unique destination identifier @return PDDestination object or null if not found
1599 Retrieves the destination object from the COS dictionary. @return PDDestination object or null if not found
1600 Retrieves a PDDestination object from the COS dictionary.
1601 Retrieves the destination COS object and returns it as a PDDestination.
1602 Retrieves the destination PD object. @return PDDestination object or null if not available
1603 Initializes a new instance of the PDComboBox class. @param acroForm the PDAcroForm to associate with @param field the COSDictionary representing the field data @param parent the PDNonTerminalField parent element
1604 Initializes PDListBox with given form, field, and parent.
1605 Constructs a COS parser with encryption. @param source input stream to read from @param password password for decryption (if applicable) @param keyStore keystore containing encryption keys @param keyAlias alias of the encryption key to use
1606 Creates an output stream instance. @throws IOException if I/O operation fails
1607 Writes byte array to COS object output stream. @param data byte array to write @param appearanceStream PDAppearanceStream instance for writing
1608 Initializes a PDAppearanceContentStream with the given appearance and compression settings. @param appearance Appearance stream to wrap @param compress Whether to enable compression (true) or not (false)
1609 Sets the text transformation matrix. @param matrix affine matrix to apply
1610 Applies a transformation to the current matrix. @param matrix input matrix to transform
1611 Retrieves the bounding box of a PDF page. @return PDRectangle object or null if not available
1612 Retrieves the bounding box of a PDF page. @return PDRectangle object or null if not available
1613 Retrieves the rectangle associated with this annotation. @return PDRectangle object or null if not found
1614 Retrieves the fringe rectangle from the annotation. @return PDRectangle object or null if not available
1615 Retrieves fringe rectangle from annotation. @return PDRectangle object or null if not found
1616 Retrieves the fringe rectangle from annotations. @return PDRectangle object or null if not found
1617 Retrieves fringe rectangle from annotation. @return PDRectangle object or null if not found
1618 Retrieves the font bounding box as a PDRectangle object. @return null if no font bounding box is present, otherwise a PDRectangle object containing the bounding box coordinates.
1619 Retrieves font bounding box from PDF dictionary. @return PDRectangle object representing the font's bounding box or null if not found
1620 Retrieves bounding box rectangle for the object. @return PDRectangle object or null if not available
1621 Returns the bounding box of this PDF object. @return PDRectangle object or null if not available
1622 Retrieves the bounding box of a PDF page, lazily initializing it from the COS dictionary. @return PDRectangle object representing the bounding box or null if not available
1623 Retrieves the PDF rectangle from the dictionary. @return PDRectangle object or null if invalid
1624 Calculates and returns the rectangle difference. @return PDRectangle object or null if not found
1625 Retrieves the rectangle representing differences between pages. @return PDRectangle object or null if not available
1626 Retrieves the bounding box (BBox) of this PDF page. @return PDRectangle object representing the BBox or null if not set.
1627 Retrieves a PDF rectangle object from the underlying COS data. @return PDRectangle object or null if not found
1628 Sets line dash pattern for graphics state. @param array COSArray containing dash lengths @param phase initial phase of the pattern
1629 Retrieves the line dash pattern from the PDF dictionary. @return PDLineDashPattern object or null if not set
1630 Creates a stencil image from the given PDImage and Paint. @param pdImage source image @param paint paint to use for masking @return BufferedImage with alpha channel, or null if an error occurs
1631 Retrieves a matrix from COS object. @return Matrix object or null if not found
1632 Retrieves matrix from COS object. @return Matrix object or null if not available
1633 Retrieves matrix data from COS object. @return Matrix object or null if not available
1634 Retrieves inheritable attribute value from the given dictionary or its parent page. @param node COSDictionary instance @param key COSName representing the attribute to fetch @return the attribute's value as a COSBase object or null if not found
1635 Retrieves boolean value from COS by key, returning default if not found. @param key unique COS key @param defaultValue default boolean value to return if key is missing
1636 Returns integer value associated with given COS name, or default value if not found.
1637 Retrieves integer value associated with given key pair. @param firstKey primary key @param secondKey secondary key
1638 Decodes image data using the specified filters and updates the PDInlineImage object. @param parameters COSDictionary containing image parameters @param data byte array representing the image data @param resources PDResources associated with the image
1639 Determines image suffix based on applied filters. @return image file extension (e.g. png, jpg, tiff)
1640 Retrieves COS objects by specified types. @param type1 first object type @param type2 second object type @return List of matching COSObject objects
1641 Converts Unicode code point to its string representation. @param code Unicode code point value
1642 Checks if the document is encrypted. @return true if encrypted, false otherwise
1643 Parses the FDF file and returns a FDFDocument object. @throws IOException if parsing fails or an I/O error occurs
1644 Retrieves the AcroForm associated with this document.
1645 Retrieves the PDColorSpace instance for a given name, potentially caching it. @param name COSName identifier @param wasDefault whether this is the default color space
1646 Checks if color space with given name exists. @param name COSName of color space to check @return true if color space found, false otherwise
1647 Retrieves extended graphics state by name. @param name COSName identifier @return PDExtendedGraphicsState object or null if not found
1648 Checks if the given XObject is an image. @param name object name to check @return true if it's an image, false otherwise
1649 Returns an iterable collection of color space names. @return Enumerable COSName objects representing color spaces
1650 Retrieves iterable names of X-Objects. @return COSName objects representing X-Object names
1651 Retrieves an iterable collection of font names. @return Iterable collection of COSName objects representing font names
1652 Retrieves names of properties.
1653 Retrieves shading names. @return iterable collection of COSName objects related to shading
1654 Returns an iterable collection of pattern names. @return COSName objects representing patterns
1655 Returns an iterable collection of external graphics state names.
1656 Retrieves the standard cryptographic filter dictionary.
1657 Returns default PDCrypt filter dictionary.
1658 Retrieves a PDF Type 3 character procedure by code. @param code unique character code @return PDType3CharProc object or null if not found
1659 Retrieves rollover appearance entry from dictionary or returns normal appearance if not found. @return PDAppearanceEntry object representing rollover appearance or normal appearance if not available
1660 Retrieves down appearance entry from dictionary. @return PDAppearanceEntry object or normal appearance if not found
1661 Retrieves the first child outline item.
1662 Retrieves last child outline item. @return Last child PDOutlineItem or null if none
1663 Retrieves and returns the signature value. @return PDSignature object containing the signature data
1664 Retrieves a value by index from either the "numbers" map or child nodes. @param index unique identifier to search for @return value associated with index, or null if not found
1665 Calculates the number of output parameters. @return Number of output parameters or 0 if unknown
1666 Returns output range based on index. @param n index to determine range values
1667 Clips input values to specified ranges. @param inputValues array of float values to clip
1668 Returns the number of input parameters. Calculates it from domain values if not already known
1669 Retrieves domain range object based on input value. @param n input value
1670 Calculates sample index from input vector and dimension sizes. @param vector input vector
1671 Fetches decoded range for a given parameter number. @param paramNum unique parameter identifier @return PDRange object or null if not found
1672 Returns a PDRange object based on encoded values and a given index. @param n index value
1673 Checks if an item is attached at top position.
1674 Checks if the bottom attachment is present. @return true if attached, false otherwise
1675 Checks if the attachment is on the left side. @return true if attached left, false otherwise
1676 Checks if right attachment exists. @return true if attached, false otherwise
1677 Initializes a new PDCIDFont object from the given COS dictionary and type 0 font. @param fontDictionary COS dictionary representing the ID font @param parent PDType0Font parent font
1678 Constructs a DictionaryEncoding from the given COSDictionary. @param fontEncoding dictionary containing font encoding information
1679 Initializes DictionaryEncoding with font-specific settings. @param fontEncoding COSDictionary containing font encoding @param isNonSymbolic true for nonsymbolic fonts, false otherwise @param builtIn built-in encoding for symbolic fonts or null
1680 Initializes ShadingContext with provided parameters. @param shading PDShading object to initialize from @param cm ColorModel for the shading context @param xform AffineTransform for coordinate transformation @param matrix Matrix for additional transformations
1681 Retrieves a parameter's decode range from the decode values array. @param paramNum unique parameter number @return PDRange object or null if not found or invalid data
1682 Retrieves signed content from a PDF file. @param pdfFile input stream containing the PDF file @return byte array representing the signed content or null if failed
1683 Extracts signed content from PDF file. @param pdfFile byte array containing PDF data @return signed content as a byte array or null if not found
1684 Retrieves the revision number from the dictionary. @return revision identifier as a long integer value
1685 Retrieves the minimum revision from the dictionary. @return The minimum revision value as a long integer.
1686 Creates a view of the underlying data, applying filters if present. @return A RandomAccessRead object or a derived class instance
1687 Retrieves a float value from the COS object by name. @param name unique identifier of the value to retrieve @return float value associated with the given name, or 0 if not found
1688 Retrieves conversion factor from COS data. @return Conversion factor as a float value
1689 Retrieves the leader length from annotation data. @return Leader length as a floating-point value.
1690 Retrieves the leader extension value from annotations. @return leader extension as a float value or default if not found.
1691 Retrieves leader offset value from annotation data. @return Leader offset in pixels.
1692 Retrieves the value of V from the dictionary. @return V value as a float or 0.0f if not found
1693 Retrieves the CYX value from the COS object. @return the CYX value as a floating-point number
1694 Retrieves a float value from COS object by name, returning default value if not found. @param name unique identifier of the value in COS @param defaultValue default value to return if value is missing or invalid
1695 Retrieves intensity value from COS object. @return Intensity value as a float or default 0 if not found
1696 Calculates the height of a font in PDF units. @param font the PDF font to compute the height for @return the font height in PDF units
1697 Creates default position vector based on CID. @param cid container ID
1698 Retrieves the properties dictionary for a given COSName. @param name COSName to fetch properties for @return PDPropertyList object or null if not found
1699 Retrieves an instance of PDPropertyList representing the optional content. @return Optional PDPropertyList object or null if not available
1700 Retrieves optional content as a PDPropertyList object. @return PDPropertyList instance or null if not available
1701 Retrieves a list of OCGs (Optional Content Groups). @return List<PDPropertyList> containing OCG properties or an empty list if none found
1702 Retrieves optional content from the PDF document. @return PDPropertyList object representing optional content or null if not found
1703 Validates and possibly replaces XREF offsets using brute-force parsing. @throws IOException if an I/O error occurs
1704 Saves data to a file. @param fileName target file path
1705 Removes the specified object from this filtered List. @param o the object to be removed (null if empty) @return true if removal was successful, false otherwise
1706 Removes element at specified index. @param index position of element to remove @return removed element or throws exception if filtering enabled
1707 Removes a specific object from the collection. @param o COSBase object to be removed @return true if found and removed, false otherwise
1708 Removes a user property from the internal data structure. @param userProperty PDUserProperty object to be removed
1709 Removes a subject from the PDF document. @param subject byte representation of the subject to remove
1710 Removes specified key usage extension from the certificate's KEY_USAGE array. @param keyUsageExtension extension to be removed
1711 Removes issuer from the document's ISSUER array. @param issuer issuer to be removed
1712 Removes an OID from the dictionary. @param oid OID to be removed
1713 Clears all data from the collection.
1714 Removes an item from the map and actuals collection based on the given key. @param key unique identifier for removal @return removed value or null if not found
1715 Recursively collects COSDictionary entries that require updates. @param dictionary COSDictionary to process @return true if collection requires parent update, false otherwise
1716 Recursively collects objects while excluding and adding processed ones. @param object COSObject to process
1717 Sets the origin document state with default overwrite flag. @param originDocumentState COSDocumentState object to set
1718 Retrieves the upper limit from the node's limits array. @return String representing the upper limit or null if not found
1719 Retrieves the lower limit value from the node's limits array. @return lower limit string or null if not found
1720 Retrieves the name from the COS object using the provided name. @param name Name to be retrieved from COS
1721 Retrieves rendering intent from dictionary or returns null.
1722 Retrieves the value of 'N' from the action. @return string representation of 'N'
1723 Retrieves name as string using COSName.getPDFName() and returns default value if not found. @param key PDF name to retrieve @param defaultValue fallback value if retrieval fails
1724 Retrieves the guideline style as a string. @return Style of guidelines (e.g. "solid")
1725 Retrieves icon name as a string. @return icon name or null if not available
1726 Retrieves attachment name from COS object.
1727 Retrieves the line ending style from COS object.
1728 Returns the highlight mode of the COS object.
1729 Retrieves reply type from COS object. @return Reply type string or null if failed
1730 Retrieves the name of the COS object as a string. @return The name of the COS object or null if not found
1731 Retrieves the name from the COS object. @return the user's name as a string
1732 Retrieves highlighting mode as a string ("H" or "I").
1733 Retrieves style value from COS object. @return Style string (e.g. solid) or null if failed
1734 Retrieves COS object type as a string. @return Type name or "ExData" if not found
1735 Retrieves PDF transition style as a string. @return Transition style name or null if not available
1736 Retrieves dimension name from COS object. @return Dimension name as string or null if not found
1737 Retrieves motion type as string. @return Motion type name or null if not found
1738 Retrieves non-full screen page mode setting from preferences.
1739 Retrieves reading direction as a string.
1740 Retrieves the view area as a string from user preferences. @return View area name or null if not set
1741 Retrieves the view clip as a string from user preferences.
1742 Retrieves the print area as a string.
1743 Retrieves the print clip name as a string from preferences.
1744 Retrieves print scaling preference value. @return string representation of print scaling preference
1745 Calculates the XREF table offset based on the provided start position. @param startXRefOffset starting offset to check @return Valid offset or -1 if not found
1746 Checks if collection has exactly one item, which is its owner.
1747 Retrieves the parent node of a PDF structure element. @return PDStructureNode object representing the parent node, or null if none exists
1748 Creates an object from the given COSBase, parsing dictionaries and integers. @param kid COSBase to parse (dictionary or integer) @return parsed object value or null if invalid
1749 Initializes PDEncryption instance with COS dictionary. @param dictionary input dictionary for encryption
1750 Retrieves the SecurityHandler instance for ProtectionPolicy. @return SecurityHandler<ProtectionPolicy> or throws IOException if not initialized
1751 Retrieves a list of FDF annotations from the PDF file. @return List of FDFAnnotation objects or null if no annotations found
1752 Checks if the character set of a font matches a given CID System Info. @param cidSystemInfo CID system info to compare with @param info Font information containing the character set data @return true if the sets match, false otherwise
1753 Checks if the entity represents an N-channel. @return true if N-channel, false otherwise
1754 Retrieves the open action from the PDF document. @return PDAction object or null if not found
1755 Creates and returns an action object based on COS dictionary A. @return PDAction object or null if creation fails
1756 Retrieves a map of JavaScript actions from the document. @return Map of action names to PDActionJavaScript objects or null if not found
1757 Retrieves an instance of PDAction from factory using COS dictionary F.
1758 Retrieves a PDAction instance from the actions dictionary. @return PDAction object or null if not found
1759 Retrieves and converts X action from COS dictionary to PDAction object. @return PDAction object or null if not found
1760 Retrieves a PDAction object from the COSDictionary with name 'D'. @return PDAction object or null if not found
1761 Creates and returns a PDAction object from the COS dictionary with name 'U'. @return PDAction object or null if not found
1762 Retrieves FO (Forms) action from dictionary. @return PDAction object or null if not found
1763 Creates and returns a PDAction object from the 'BL' dictionary. @return PDAction object or null if not found
1764 Retrieves a PO (Purchase Order) action from the dictionary. @return PDAction object or null if not found
1765 Retrieves and converts PC dictionary to a PDAction object. @return PDAction instance or null if PC dictionary is not found.
1766 Retrieves and converts the PV dictionary to a PDAction object.
1767 Retrieves the PostScript Interpretation (PI) action. @return PDAction object representing the PI or null if not found
1768 Retrieves WC action from dictionary and creates a PDAction instance if found.
1769 Retrieves WS action from dictionary. @return PDAction object or null if not found
1770 Retrieves and converts the document's data stream into a PDAction object. @return PDAction object or null if not found
1771 Retrieves a WP action from the actions collection. @return PDAction object or null if not found
1772 Creates and returns a PDAction object from the document's DP dictionary. @return PDAction object or null if not found
1773 Retrieves PDAction object from COS dictionary with key 'K'. @return PDAction object or null if not found
1774 Retrieves a PDAction instance from the actions dictionary. @return PDAction object or null if not found
1775 Creates and returns a PDAction object from the 'V' dictionary. @return PDAction object or null if dictionary not found
1776 Retrieves a PDAction object from the COSDictionary instance with key 'C'. @return PDAction object or null if COSDictionary is empty or invalid
1777 Creates a PDAction instance from the 'O' dictionary. @return PDAction object or null if dictionary is empty
1778 Retrieves a PDAction object from the COS dictionary with key C. @return PDAction object or null if not found
1779 Retrieves the action associated with this object. @return PDAction object or null if not found
1780 Creates and returns a PDAction object from the COS dictionary.
1781 Creates and returns a PDAction object based on COS dictionary A.
1782 Retrieves string value of specified property from info object. @param propertyKey unique key of property to fetch
1783 Retrieves custom metadata value by field name. @param fieldName unique identifier of metadata field
1784 Retrieves a string value from the COS object using the specified name. @param name property name to fetch @return string value or null if not found
1785 Retrieves the base value from COS object. @return Base string value or null if not found
1786 Retrieves application version from configuration dictionary. @return Version string as stored in "REx" key
1787 Retrieves the units value from COS. @return string representation of the units value
1788 Retrieves string value from COS dictionary using provided key. @param key unique key to search in COS dictionary @param defaultValue default string value to return if not found @return string value associated with the key, or default value if not found
1789 Retrieves an embedded string value from the specified dictionary. @param embedded COSName of the dictionary to search @param key COSName of the desired string key @param defaultValue default value to return if not found @return embedded string value or default value if not present
1790 Retrieves the operation type based on input parameters. @return string representing the operation (e.g. OPEN) or default value if not set
1791 Retrieves default appearance value from configuration dictionary. @return Default appearance string or empty string if not found.
1792 Retrieves a valid file name by attempting various system-specific methods. @return the first non-null file name or an empty string
1793 Checks if a group exists by name. @param groupName the name of the group to search for @return true if the group is found, false otherwise
1794 Constructs fully qualified name by joining partial name with parent's name. @return FullyQualified string or null if partial name is null.
1795 Returns list of export values from options.
1796 Encrypts/decrypts user data using RC4 or AES algorithms. @param objectNumber unique object identifier @param genNumber generation number @param data input stream to encrypt/decrypt @param output output stream for encrypted result @param decrypt true for decryption, false for encryption
1797 Computes an encrypted key based on provided parameters. @param password password to use for encryption @param o, u, oe, ue additional input bytes @param permissions access control level @param id unique identifier @param encRevision encryption revision number @param keyLengthInBytes desired key length in bytes @param encryptMetadata flag to include metadata in encrypted key @param isOwnerPassword flag to use owner password @return byte array representing the encrypted key
1798 Verifies a password against a user's credentials based on the encryption revision. @param password password to verify @param user user details @param owner user owner details @param permissions user permissions @param id user ID @param encRevision encryption revision (2-6) @param keyLengthInBytes encryption key length @param encryptMetadata whether metadata should be encrypted @return true if password is valid, false otherwise
1799 Finds FontBoxFont instance by PostScript name or named substitutes. @param format font format to match @param postScriptName unique PostScript font identifier @return FontBoxFont object or null if not found
1800 Converts COSString to a Calendar object. @param text COSString containing date info @return Calendar object or null on failure
1801 Writes a COSString to an OutputStream with trailing whitespace. @param output the OutputStream to write to @param cosString the COSString to write
1802 Writes formatted text to the PDF output stream. @param text text content
1803 Initializes PageDrawer with given parameters. @param parameters PageDrawer initialization data
1804 Retrieves color based on default COSName value C. @return Color object representing the retrieved color
1805 Retrieves the border color from the document. @return PDColor object representing the border color
1806 Returns the background color of the object.
1807 Sets the value at index 2 in the array to the specified high value. @param high new value to be assigned
1808 Sets the page number in the array. @param pageNumber the new value to store
1809 Parses a PDF string by reading characters from the input stream. @throws IOException if an error occurs during parsing
1810 Extracts contents from a PDF file. @param pdfFile input stream containing the PDF data @return contents as a byte array or null on error
1811 Extracts a specified range of bytes from the given PDF file. @param pdfFile raw PDF data @return extracted byte array
1812 Constructs a new immutable rectangle with specified width and height. @param width the horizontal extent of the rectangle @param height the vertical extent of the rectangle
1813 Returns the bounding box of this PDF page.
1814 Initializes a new PDMetadata object from the given PDDocument. @param document PDDocument instance to populate metadata for
1815 Initializes an embedded file object from a PDDocument. @param document the parent document
1816 Initializes a PDXObject with the given document and subtype. @param document parent PDDocument object @param subtype COSName representing xobject subtype
1817 Creates an image XObject from the given PDDocument. @param document the parent PDDocument
1818 Creates a new PDStream instance from an existing PDDocument and input stream. @param doc parent PDDocument instance @param input input stream to read from
1819 Constructs a PDStream object from a PDDocument and stream. @param doc the parent document @param input the stream to wrap @param filter COSName representing the filter type
1820 Constructs a PDStream object from a PDDocument and input stream, applying specified filters. @param doc the parent PDDocument @param input the input stream to read from @param filters array of COSArray filter specifications
1821 Initializes a PDImageXObject from provided parameters. @param document PDDocument instance @param encodedStream InputStream containing image data @param cosFilter COSBase filter object @param width image width in pixels @param height image height in pixels @param bitsPerComponent color depth (bits per component) @param initColorSpace initial color space for the image
1822 Initializes a new instance of PDLayoutAttributeObject with default owner.
1823 Initializes a new PDListAttributeObject instance with owner set to OWNER_LIST. @see #setOwner(String)
1824 Initializes a new instance with print field attributes. @param OWNER_PRINT_FIELD attribute owner type
1825 Initializes a new PDTableAttributeObject instance with owner set to OWNER_TABLE.
1826 Creates a PDAttributeObject based on the owner specified in the dictionary. @param dictionary COSDictionary containing attribute information
1827 Retrieves a normal appearance stream from the user's appearance dictionary. @return Appearance stream or null if not found
1828 Retrieves the on-value from the first widget's appearance.
1829 Retrieves the transparency group from the COS dictionary. @return PDTransparencyGroup object or null if not found
1830 Retrieves PDPageDestination object by its named destination. @param namedDest the named destination to find @return PDPageDestination object or null if not found
1831 Constructs a COSParser from a RandomAccessRead source.
1832 Initializes a new instance of the PDFParser class using the specified parameters. @param source input stream containing the PDF data @param decryptionPassword password for decrypting the PDF (if applicable) @param keyStore InputStream containing the keystore @param alias identifier for the private key to use in the keystore
1833 Constructs a PDAppearanceContentStream instance from a PDAppearanceStream. @param appearance the parent appearance stream
1834 Initializes a new PDFormContentStream instance. @param form PDFormXObject object containing content and resources
1835 Constructs a new PDPageContentStream instance from a given document and appearance stream. @param doc the parent PDDocument object @param appearance the associated PDAppearanceStream object
1836 Initializes PDPatternContentStream with given PDTilingPattern. @param pattern tiling pattern object
1837 Draws an arrow at specified position with given length. @param x horizontal coordinate @param y vertical coordinate @param len arrow length
1838 Draws a shape with customizable line width, stroke, and fill. @param lineWidth thickness of the shape's outline @param hasStroke whether to draw the shape's outline @param hasFill whether to fill the shape
1839 Draws a diamond shape on the content stream. @param cs Content stream to draw on @param x Center X coordinate @param y Center Y coordinate @param r Radius of the diamond
1840 Draws a circle on the specified content stream with given radius and center coordinates. @param cs Content stream to draw on @param x Center x-coordinate of the circle @param y Center y-coordinate of the circle @param r Radius of the circle
1841 Draws a circle with specified radius and center coordinates. @param cs graphics content stream @param x circle's center X coordinate @param y circle's center Y coordinate @param r circle's radius
1842 Draws a paperclip shape on the content stream.
1843 Sets line width on demand, ignoring values very close to 1. @param lineWidth desired line width
1844 Renders a tiling pattern as an image. @param drawer page drawing object @param pattern PDTilingPattern to render @param colorSpace PDColorSpace for the pattern @param color PDColor for the pattern @param xform AffineTransform for scaling and positioning @param anchorRect bounding rectangle for the image @return BufferedImage containing the rendered pattern or null on failure
1845 Calculates and returns the scaled anchor rectangle for a given tiling pattern. @param pattern the tiling pattern to calculate the anchor rectangle for
1846 Retrieves the stencil image for this object. @param paint rendering parameters @return BufferedImage representation of the stencil or null if not applicable
1847 Retrieves raw image data from a PDImage object. @param pdImage input image data
1848 Fetches a processed image by ID with specified region and subsampling. @param pdImage PDImage object @param region Rectangle representing the desired region @param subsampling Subsampling factor @param colorKey COSArray containing color key data (optional) @return BufferedImage representation of the image or null if not found
1849 Retrieves page resources. @return PDResources object or null if not available
1850 Retrieves the PDF media box. @return PDRectangle object representing the media box or default U.S. Letter if not found
1851 Calculates the page rotation angle. @return Rotation angle in degrees or 0 if not set
1852 Retrieves boolean value from PDF metadata or returns default value. @param key unique key to retrieve @param defaultValue default value if not found in PDF metadata @return boolean value or default value
1853 Checks if a field is volatile. @return true if field is volatile, false otherwise
1854 Checks if the document is hidden. @return true if hidden, false otherwise
1855 Checks if metadata encryption is enabled. @return true if enabled, false otherwise
1856 Retrieves caption value from annotation. @return true if caption exists, false otherwise
1857 Determines whether to scale annotation to fit page bounds based on FIT property. @return true if scaling is enabled, false otherwise
1858 Checks whether the file should be renamed based on COS configuration. @return true if rename is enabled, false otherwise
1859 Checks whether the COS object represents an isolated state. @return true if isolated, false otherwise
1860 Checks if an object is a knockout. @return true if knockout, false otherwise
1861 Retrieves anti-aliasing flag from dictionary.
1862 Retrieves stroking overprint control flag from dictionary. @return true if enabled, false otherwise
1863 Returns whether automatic stroke adjustment is enabled. @return true if enabled, false otherwise
1864 Retrieves flag indicating alpha source from dictionary. @return true if alpha source, false otherwise
1865 Retrieves knockout flag from dictionary. @return true if knockout is enabled, false otherwise
1866 Retrieves boolean value associated with H action. @return true if enabled, false otherwise
1867 Checks if the action is synchronous. @return true if the action runs synchronously, false otherwise
1868 Retrieves repeat flag value from COS. @return true if repeat is enabled, false otherwise
1869 Returns whether the mix is enabled. @return true if mix is enabled, false otherwise
1870 Checks if an object has a caption. @return true if caption exists, false otherwise
1871 Checks whether PDF is open. @return true if PDF is open, false otherwise
1872 Retrieves application pre-release status from configuration. @return true if pre-release, false otherwise
1873 Retrieves the value of NON_EFONT_NO_WARN setting from configuration. @return true if non-E font should not trigger warnings, false otherwise
1874 Returns whether trusted mode is enabled based on dictionary value. @return true if trusted mode is enabled, false otherwise
1875 Checks whether need appearances are enabled. @return true if enabled, false otherwise
1876 Checks if the fly area is opaque based on its COS settings. @return true if opaque, false otherwise
1877 Checks if toolbar should be hidden based on user preferences. @return true if toolbar should be hidden, false otherwise
1878 Checks whether to hide the menu bar based on user preferences. @return true if menubar should be hidden, false otherwise
1879 Checks whether to hide window UI based on user preference. @return true if window UI should be hidden, false otherwise
1880 Checks whether window should be resized to fit its content. @return true if window should fit content, false otherwise
1881 Checks whether window is centered by default. @return true if centered, false otherwise
1882 Returns whether to display document title. @return true if enabled, false otherwise
1883 Retrieves an integer value from a named dictionary, or returns the default value if not found. @param embeddedDictionary name of the dictionary to search @param key COSName identifier for the desired integer value @param defaultValue integer value to return if key is missing
1884 Retrieves integer value from PDF metadata by given key. @param key unique identifier of the value to fetch
1885 Retrieves integer value associated with given COSName key. @param key unique identifier of the key to retrieve
1886 Retrieves integer value from PDF dictionary using provided key. @param key unique key to look up @param defaultValue default value to return if key not found @return integer value associated with the key or defaultValue
1887 Checks if the specified bit flag is set in a given COSName field. @param field COSName field to check @param bitFlag specific bit flag to look for @return true if the bit flag is set, false otherwise
1888 Retrieves the count of elements in the data structure. @return integer representing the count
1889 Retrieves the start value from the data store. @return integer representing the start position
1890 Retrieves the current order value from COS. @return The current order value (defaulting to 1 if not found)
1891 Retrieves the revision number from COS object. @return current revision number (or 0 if not available)
1892 Retrieves the length value from the dictionary with default of 40.
1893 Retrieves the version value from the dictionary. @return version integer or default 0 if not found
1894 Returns the length of the current dictionary value. @return integer length or default value 40 if not found
1895 Retrieves revision number from dictionary. @return current revision as integer value
1896 Retrieves permissions value from dictionary. @return integer permission value or default 0 if not found
1897 Retrieves justification as an integer value. @return Justification value (0 by default)
1898 Retrieves the user flags value from the dictionary or initializes it to default. @return User flags integer value
1899 Creates a PDAbstractPattern instance based on the provided dictionary and resource cache. @param dictionary COSDictionary containing pattern details @param resourceCache ResourceCache for pattern resources @return PDAbstractPattern object or throws IOException for unknown pattern type
1900 Retrieves the paint type from the COS object. @return paint type integer value (defaulting to 0 if not set)
1901 Retrieves the tiling type from the COS object. @return Tiling type value or 0 if not found
1902 Creates a PDShading object based on the specified COS dictionary. @param shadingDictionary dictionary containing shading parameters
1903 Retrieves bits per flag value from COS object. @return Bits per flag value or -1 if not found
1904 Returns the number of vertices per row from COS object. @return Number of vertices per row or -1 if not found
1905 Retrieves the number of bits per color component. @return Bits per color component value or -1 if not set
1906 Retrieves the number of bits per coordinate. @return The number of bits or -1 if not initialized
1907 Retrieves flags value from COS. @return integer flag value or default 0 if not available
1908 Retrieves the flags value from the action.
1909 Retrieves the current page number from configuration. @return page number or -1 if not set
1910 Retrieves annotation index from dictionary. @return Annotation index or -1 if not found
1911 Retrieves annotation flags from COS object. @return integer value representing annotation flags
1912 Retrieves the Q value from COS object. @return Q value or default 0 if not found
1913 Retrieves the rotation value from COS object. @return Rotation integer value
1914 Checks if timestamp is required based on FT value in dictionary. @return true if timestamp is required, false otherwise
1915 Retrieves and returns the open count value from the COS object.
1916 Retrieves value of COSName.Q from dictionary and returns as integer. Defaults to 0 if not found.
1917 Retrieves the top index from COS object. @return The top index value or default if not present
1918 Retrieves COS objects by specified type. @param type COS object type
1919 Removes page-specific resources from cache.
1920 Retrieves color space based on given name. @param name COSName identifier of color space
1921 Retrieves the embedded file from the PDF dictionary. @return PDEmbeddedFile object or null if not found
1922 Retrieves a DOS embedded file from the PDF document. @return PDEmbeddedFile object or null if not found
1923 Retrieves the embedded file for Mac OS from the dictionary. @return PDEmbeddedFile object or null if not found
1924 Retrieves embedded Unix-specific file from dictionary. @return EmbeddedFile object or null if not found
1925 Retrieves an embedded file with Unicode support from the dictionary. @return a PDEmbeddedFile object or null if not found
1926 Initializes AxialShadingContext with provided parameters. @param shading PDShadingType2 object describing axial shading characteristics @param colorModel ColorModel used in rendering @param xform AffineTransform for coordinate transformation @param matrix Matrix representing device space coordinates @param deviceBounds Rectangle defining bounds of the device
1927 Initializes RadialShadingContext with provided parameters. @param shading radial shading type @param colorModel color model to use @param xform transformation to apply @param matrix matrix for device space conversion @param deviceBounds bounds of the device rectangle
1928 Initializes Triangle-Based Shading context with specified parameters. @param shading PDShading object for rendering @param cm ColorModel for color management @param xform AffineTransform for spatial transformations @param matrix Matrix for geometric transformations
1929 Initializes Type1ShadingContext with the given parameters. @param shading PDShadingType1 object @param colorModel ColorModel for shading @param xform AffineTransform to apply @param matrix Matrix to concatenate with transform
1930 Initializes PDFObjectStreamParser with a COSStream and COSDocument. @param stream COSStream to parse @param document COSDocument associated with the stream
1931 Initializes a PDCIDFontType0 object from the given COSDictionary and PDType0Font. @param fontDictionary COS dictionary containing font metadata @param parent PDType0Font to which this object belongs
1932 Initializes PDCIDFontType2 from COS dictionary, parent font and optional TrueType/OTF font. @param fontDictionary PDF object containing font metadata @param parent PDType0Font to inherit properties from @param trueTypeFont optional TrueType or OTF font to embed
1933 Retrieves a CMap from the given COSBase, either by name (predefined) or as an embedded stream. @param base COSBase object containing the CMap data @return CMap object if successful; throws IOException otherwise
1934 Writes the PDF document body to output, preserving object numbers. @param doc COSDocument instance
1935 Saves data to a file with the specified name. @param fileName unique file identifier
1936 Recursively collects and processes PDF objects. @param base the object to process @return true if processing was completed, false otherwise
1937 Updates the trailer dictionary with a new COSDictionary instance. @param newTrailer new trailer dictionary to be updated
1938 Updates origin document state based on provided COSUpdateInfo. @param child COSBase object containing update information
1939 Retrieves the value associated with the given name from a hierarchical structure. @param name the name to look up @return T object if found, or null otherwise
1940 Retrieves COS object's name as string with default value. @param name the actual name to retrieve or null @param defaultValue the default name if retrieval fails @return COS object's name as string or default value
1941 Retrieves the style of COS object as a string. @return style type (e.g., solid, dashed) or null if not found
1942 Retrieves the top-level tree root node. @return The highest-level PDStructureTreeRoot instance or null if not found
1943 Retrieves a list of child objects from the COS dictionary. @return List of child objects or empty list if not found
1944 Retrieves or initializes PDEncryption instance based on document's encryption dictionary. @return PDEncryption object; may be initialized lazily if not yet created.
1945 Prepares decryption by loading encryption dictionary, initializing PDEncryption and SecurityHandler objects. @throws IOException on decryption material initialization or security handler preparation errors
1946 Reads font encoding from dictionary, resolving CMaps and determining descendant font type. @throws IOException if required CMap is missing
1947 Calculates adjusted repair length for Type 1 font. @param bytes Font byte array @param length1 Initial repair length value @return Adjusted repair length or offset if invalid
1948 Calculates and returns the valid length of a byte array segment. @param bytes byte array to process @param length1 offset into the byte array @param length2 target length, clamped within bounds if invalid
1949 Retrieves the fractional display value from COS. @return Fractional display string or null if not available
1950 Retrieves thousands separator configuration value from COS.
1951 Retrieves decimal separator from COS settings. @return decimal separator character (e.g. ".") or null if not found
1952 Retrieves label prefix string from COS. @return Label prefix string or default (" ") if not found
1953 Retrieves label suffix string from COS. @return Label suffix string or " " if not found
1954 Retrieves label position to value string from COS object.
1955 Retrieves embedded string value by name and key. @param embedded COSName of embedded object @param key COSName of property to retrieve
1956 Calculates font matches for the given PDFontDescriptor. @param fontDescriptor PDFontDescriptor to match against @param cidSystemInfo CIDSystemInfo to filter by (null if not filtering) @return PriorityQueue of FontMatch objects representing the matching fonts
1957 Verifies owner password based on encryption revision. @param ownerPassword byte array of owner's password @param user byte array of user data @param owner byte array of owner data @param permissions integer representing user permissions @param id byte array of unique identifier @param encRevision integer specifying encryption revision @param keyLengthInBytes integer representing key length in bytes @param encryptMetadata boolean indicating metadata encryption @return true if password is valid, false otherwise
1958 Parses input text into an instruction sequence. @param text input text to be parsed @return InstructionSequence object or null if parsing fails
1959 Decrypts a COS stream based on its type and encryption status. @param stream the encrypted COS stream @param objNum the object number of the stream @param genNum the generation number of the stream
1960 Encrypts a COS stream with the specified object and generation numbers. @param stream COS stream to be encrypted @param objNum object number for encryption @param genNum generation number for encryption
1961 Decrypts a COSString using the provided object and generation numbers. @param string encrypted string @param objNum object number @param genNum generation number @return decrypted COSString or original if decryption fails
1962 Encrypts a string using COS encryption. @param string input string to be encrypted @param objNum object number for encryption @param genNum generation number for encryption @return encrypted COSString or null on error
1963 Checks if the given password matches the user's credentials. @param password the password to verify @return true if the password is valid, false otherwise
1964 Finds a FontBox font by type and name. @param postScriptName the PostScript name of the font @return FontBoxFont object or null if not found
1965 Writes a page of text to the output device. @throws IOException if an I/O error occurs while writing the page.
1966 Retrieves a date value from the dictionary as a Calendar object. @param key unique identifier for the date value @return Calendar object representing the date or null if not found
1967 Writes a COS token to output stream. @param base COSBase object containing token data
1968 Writes a PDF object to the output stream. @param output OutputStream to write to @param object COSBase object to serialize @param topLevel true if top-level object, false otherwise
1969 Writes text with positioning data to output stream. @param textWithPositioningArray array of float values (x, y) and string values (text)
1970 Displays formatted text on screen. @param text input text to display
1971 Creates a PageDrawer instance with given parameters. @param parameters PageDrawer creation parameters @return initialized PageDrawer object
1972 Initializes a new PDFormXObject instance from the given PDDocument. @param document the parent document
1973 Initializes a new PDMetadata instance from the given document and stream. @param doc the parent PDDocument @param str input stream containing metadata data
1974 Creates a new embedded file in the specified PDDocument. @param doc PDDocument instance to add the file to @param str InputStream containing the file data
1975 Creates a PDEmbeddedFile object from the given document and input stream. @param doc PDDocument instance @param input InputStream containing embedded file data @param filter COSName representing filter used for embedding
1976 Creates a PDImageXObject from the given byte array. @param document PDDocument instance @param byteArray image data @param width image width @param height image height @param bitsPerComponent image bit depth @param initColorSpace initial color space
1977 Initializes PDExportFormatAttributeObject with owner string. @param owner unique identifier of the owner
1978 Retrieves revisions of attribute objects. @return Revisions<PDAttributeObject> collection of attribute revisions
1979 Retrieves appearance stream from PD Annotation. @param annotation PDAnnotation object to retrieve from @return Appearance stream or null if not found
1980 Adds fonts from the given annotation to AcroForm resources. @param acroFormResources target resources to add fonts to @param annotation annotation containing font resources
1981 Retrieves a set of annotation values. @return Set of strings representing annotation values
1982 Checks if the value equals the on state value. @return true if value matches on state, false otherwise
1983 Updates the value to the "on" state.
1984 Initializes a FileSystemFontProvider with a FontCache instance. Scans the local system for fonts, loads cached font info if available, and builds an on-disk cache if necessary.
1985 Initializes an FDFParser instance from a given RandomAccessRead source. @param source input stream containing FDF data
1986 Constructs a PDF parser instance from a random access read source. @param source random access read source to parse @param decryptionPassword password for decrypting encrypted PDFs (if applicable)
1987 Draws the specified style on the content stream at the given position and size. @param style annotation line style (e.g. arrow, butt, diamond) @param cs content stream to draw on @param x horizontal coordinate of the drawing @param y vertical coordinate of the drawing @param width horizontal extent of the drawing @param hasStroke whether to include a stroke around the shape @param hasBackground whether to fill the shape with background color @param ending whether this is an ending annotation line (in which case the style will be mirrored)
1988 Creates a texture paint for tiling with the specified pattern and transformations. @param drawer PageDrawer instance @param pattern PDTilingPattern object @param colorSpace PDColorSpace instance @param color PDColor object @param xform AffineTransform to apply
1989 Retrieves an opaque image from the current image within the specified region. @param region rectangle defining the image area of interest @param subsampling subsampling factor for the output image
1990 Converts PDImage to RGB image. @param pdImage input PostScript image @param colorKey color key array (not used in this method)
1991 Retrieves or inherits the resources for a content stream. @param contentStream the content stream to fetch resources for @return the original resources, or the inherited ones if not found
1992 Calculates the AffineTransform to center an overlay within a page. @param page PDPage object @param overlayMediaBox media box of the overlay content @return AffineTransform for positioning the overlay in the page's media box
1993 Returns the rotated media box for a given page, swapping height and width if rotation is 90 or 270 degrees. @param page PDPage object to retrieve the media box from
1994 Checks if an item is marked. @return true if marked, false otherwise
1995 Checks if UserProperties are being used. @return true if using user properties, false otherwise
1996 Checks if user is marked as suspect. @return true if marked as suspect, false otherwise
1997 Returns whether to track mouse position based on IsMap setting. @return true if "IsMap" is enabled, false otherwise
1998 Retrieves the 'Open' property value from COS object. @return true if open, false otherwise
1999 Checks whether 'FD' field exists and has value true. @return true if 'FD' field exists and has value true, false otherwise
2000 Retrieves non-stroking overprint control value. @return true if enabled, false otherwise
2001 Retrieves an integer value from an embedded dictionary. @param embeddedDictionary dictionary to search @param key name of the integer value to fetch @return integer value or -1 if not found
2002 Retrieves the denominator value from the COS object. @return Denominator integer value
2003 Wraps the output stream with a predictor-based output stream if required. @param out original output stream @param decodeParams dictionary of decoding parameters @return wrapped output stream or original stream if no prediction required
2004 Retrieves the parent structure IDs. @return integer array of parent structure IDs
2005 Retrieves bits per sample from COS object. @return Bits per sample value
2006 Retrieves the MCID value from the COS object. @return The integer value of the MCID.
2007 Retrieves the next key in parent tree hierarchy. @return integer value of next key or -1 if not available
2008 Retrieves MCID value from properties, returning -1 if not found.
2009 Retrieves line cap style from dictionary. @return integer value of line cap style (e.g. 0, 1, etc.)
2010 Retrieves line join style from dictionary. @return integer value representing line join style
2011 Retrieves the parent structure ID. @return Parent structure ID or 0 if none
2012 Retrieves integer value associated with COSName.P from dictionary. @return integer value or 0 if not found
2013 Retrieves maximum length value from COS object. @return Maximum length integer value
2014 Retrieves integer value from COS object. @param name COS key to fetch @param defaultValue default value if not found @return fetched integer value or default value
2015 Checks if an annotation is invisible. @return true if annotation is invisible, false otherwise
2016 Checks if an annotation is hidden. @return true if annotation is hidden, false otherwise
2017 Checks if document has been printed.
2018 Checks if no zoom flag is set. @return true if no zoom flag is enabled, false otherwise
2019 Checks if no rotation flag is set. @return true if no rotation flag is enabled, false otherwise
2020 Checks if annotation flag 'no view' is set. @return true if no view flag is enabled, false otherwise
2021 Checks if the annotation is read-only.
2022 Checks whether an annotation flag indicates the entity is locked. @return true if locked, false otherwise
2023 Checks toggle flag indicating no view. @return true if flag is set, false otherwise
2024 Checks if locked contents are enabled. @return true if locked contents are enabled, false otherwise
2025 Checks if an object is invisible. @return true if flag F (flag_invISIBLE) is set, false otherwise
2026 Checks if the document is hidden. @return true if hidden, false otherwise
2027 Checks if the COS object has been printed. @return true if printed, false otherwise
2028 Checks if NO ZOOM flag is set. @return true if NO ZOOM flag is enabled, false otherwise
2029 Checks if no rotation flag is set. @return true if flag is set, false otherwise
2030 Checks if the document has no view flag set. @return true if F-Flag is set to NO VIEW, false otherwise
2031 Checks if the COS object is in read-only mode. @return true if read-only, false otherwise
2032 Checks if the document is locked. @return true if locked, false otherwise
2033 Checks toggle no view flag. @return true if enabled, false otherwise
2034 Checks if contents are locked. @return true if locked, false otherwise
2035 Checks if filter flag is set in COS object. @return true if filter required, false otherwise
2036 Checks if sub-filter is required based on flag value. @return true if sub-filter is required, false otherwise
2037 Checks if digest method is required based on FF flag.
2038 Checks if V flag is set in COS object. @return true if V flag is set, false otherwise
2039 Checks if reason flag is set in the COS object.
2040 Checks if legal attestation is required based on FF flag.
2041 Checks whether Add Rev Info flag is required. @return true if flag is set, false otherwise
2042 Checks whether subject flag is set in the dictionary.
2043 Checks if issuer is required based on flag value. @return true if issuer is required, false otherwise
2044 Checks if OID (Object Identifier) is required. @return true if OID is required, false otherwise
2045 Checks whether subject DNs are required based on configuration flags.
2046 Checks if key usage flag is set in certificate. @return true if key usage required, false otherwise
2047 Checks if URL flag is set in configuration. @return true if URL required, false otherwise
2048 Checks if the current text style is italic. @return true if italic, false otherwise
2049 Checks if paragraph text is bold.
2050 Checks existence of signatures in the dictionary. @return true if signatures exist, false otherwise
2051 Checks if the database is in append-only mode. @return true if flag is set, false otherwise
2052 Checks whether an element is a push button. @return true if the element has the FF flag set to PUSHBUTTON, false otherwise
2053 Checks if the COS object represents a radio button. @return true if it's a radio button, false otherwise
2054 Checks if sort flag is set. @return true if sort flag is enabled, false otherwise
2055 Checks whether multi-select flag is set in COS object. @return true if multi-select enabled, false otherwise
2056 Checks if spell checking should be disabled.
2057 Checks if commit is enabled on selection change. @return true if commit flag is set, false otherwise
2058 Checks if combo flag is set in COS object. @return true if combo flag is set, false otherwise
2059 Checks if edit flag is set on COS object. @return true if edit flag is set, false otherwise
2060 Checks if the document is read-only. @return true if document is read-only, false otherwise
2061 Checks if field is required based on flag in dictionary. @return true if required, false otherwise
2062 Checks if export flag is set. @return true if no export flag is enabled, false otherwise
2063 Checks if radios are in unison. @return true if radios are synchronized, false otherwise
2064 Checks if the COS object represents a multiline field.
2065 Checks if password flag is set. @return true if password flag is enabled, false otherwise
2066 Checks if file select flag is set. @return true if file select flag is enabled, false otherwise
2067 Checks if spell checking is disabled. @return true if spell checking is disabled, false otherwise
2068 Checks if scrolling is disabled. @return true if FF flag indicates no scroll, false otherwise
2069 Checks whether the current object is a combination. @return true if it's a combination, false otherwise
2070 Checks if this document contains rich text. @return true if rich text flag is set, false otherwise
2071 Prepares for decryption by validating and extracting key material. @param encryption PDEncryption object @param documentIDArray COSArray of document IDs @param decryptionMaterial DecryptionMaterial to use @throws IOException if validation fails or an error occurs during extraction
2072 Retrieves the owner key as a byte array. @return Owner key bytes or null if not found
2073 Retrieves user key as a byte array. @return User key bytes or null if not found
2074 Retrieves displacement vector based on given code. @param code unique identifier @return Vector object representing displacement in km (x, y)
2075 Calculates the total width of a string by encoding and iterating over its characters. @param text input string to measure @return total width in pixels or throws IOException if encoding fails
2076 Retrieves a PDF pattern by name from the cache or by creating it. @param name name of the pattern to fetch
2077 Retrieves a PDShading object by name, caching the result. @param name unique identifier for the shading
2078 Retrieves the PDF shading object, creating a new one from the document dictionary if necessary. @return PDShading object or null if not found
2079 Checks if there are any open nodes.
2080 Creates a PDField instance based on the provided COSDictionary. @param form PDAcroForm associated with the field @param field COSDictionary containing field properties @param parent PDNonTerminalField parent (if applicable) @return PDField object or null if invalid
2081 Retrieves a PDXObject by name, optionally caching the result. @param name COSName identifier @return PDXObject instance or null if not found
2082 Initializes a Gouraud Shading Context with the specified parameters. @param shading PDShading object @param colorModel ColorModel instance @param xform AffineTransform for transformation @param matrix Matrix for 2D transformations
2083 Creates an input stream for decoding. @throws IOException if IO error occurs
2084 Fetches a compressed object stream object by ID and key. @param objstmObjNr unique object stream number @param key COSObjectKey identifier @return COSBase object or null if not found
2085 Retrieves input stream contents, favoring random access read if available. @return InputStream containing contents or empty byte array if not found
2086 Constructs a PDCIDFontType2 instance from a COS dictionary and a parent font. @param fontDictionary COS dictionary containing font data @param parent the parent Type 0 font
2087 Retrieves and returns a CIDFont object.
2088 Recursively collects updates from array entries and their children. @param array COSArray to process @return true if any entry or child demands a parent update, false otherwise
2089 Returns a set of COSBase objects. @return Collection of COSBase objects if initialized, otherwise empty set
2090 Adds a COSBase object to the collection. @param object COSBase instance to be added
2091 Adds an object to the collection at specified index. @param i index where object will be added @param object COSBase object to add
2092 Sets an object at a specific index in the collection. @param index the position to set the object @param object the COSBase object to store (may be wrapped if necessary)
2093 Sets a named item in the collection. @param key COSName identifier for the item @param value COSBase object to store or null to remove the item
2094 Updates children array in COSArray. @param children array of child objects to be updated
2095 Returns a map representing the tree structure's role data, or an empty map if unavailable. @return Map of role data as key-value pairs
2096 Adds a COSBase object to the pool, handling indirect objects and streams. @param key COSObjectKey for the object @param base COSBase object to add
2097 Applies protection to a ProtectionPolicy instance using a security handler. @param policy the ProtectionPolicy to protect
2098 Retrieves the glyph name for a given Unicode code point. @param code Unicode code point value
2099 Maps a character code to its corresponding GID. @param code character code to map @return glyph index or 0 if not found
2100 Retrieves MAC subtype from the COS dictionary. @return embedded string value or null if not found
2101 Retrieves the Mac creator string from the document's parameters dictionary. @return the Mac creator string or null if not found
2102 Retrieves the MAC (RES_FORK) value from the parameters dictionary. @return string representation of the RES_FORK value or null if not found
2103 Fetches CIDFontMapping by name or substitutes with OTF/TTF and character collection. @param baseFont the font name to match @param fontDescriptor the PDFontDescriptor for substitution @param cidSystemInfo the PDCIDSystemInfo for character collection matching @return CIDFontMapping object or null if not found
2104 Verifies owner password using ISO-8859-1 encoding. @param password The password to verify
2105 Writes page content by iterating over regions. @throws IOException if write operation fails
2106 Retrieves date value from PDF document using given key. @param key unique identifier for date value in PDF
2107 Returns a Calendar object associated with the given COSName key. If no matching calendar is found, returns the provided default value. @param key COSName identifier @param defaultValue Calendar object to return if key not found
2108 Retrieves calendar representation of creation date. @return Calendar object representing creation date
2109 Retrieves the modification date of an item. @return Calendar object representing the modification date
2110 Retrieves creation date of an annotated object. @return Calendar object representing creation date or null if not found
2111 Retrieves the creation date of the COS object. @return Calendar object representing the creation date
2112 Retrieves sign date from calendar dictionary. @return Calendar object representing sign date or null if not found
2113 Writes an Operator token to output stream. @param op Operator object to serialize
2114 Writes a list of prepared COSBase objects to the given COSStream. @param stream COSStream object to write to
2115 Writes a COSDictionary to the specified OutputStream. @param output OutputStream to write dictionary to @param cosDictionary COSDictionary object to serialize
2116 Initializes a new Transparency Group object from a PDDocument. @param document the parent PDDocument instance
2117 Initializes a new PDAppearanceStream instance from a given PDDocument.
2118 Creates an XObject from a buffered image. @param document PDDocument instance @param image BufferedImage to convert @param quality JPEG compression quality (0-1) @param dpi Resolution in dots per inch
2119 Validates the given value against allowed options. @param value String to be validated
2120 Loads an FDF document from a file. @param file the file containing the FDF data @return loaded FDFDocument object or throws IOException if failed
2121 Loads an FDF document from the given InputStream. @param input InputStream containing the FDF data @return parsed FDFDocument object or null on parsing error
2122 Initializes PDF parser with specified RandomAccessRead source. @param source input stream containing PDF data
2123 Initializes tiling paint with given page drawer, pattern and transformation.
2124 Returns an opaque image representation.
2125 Decodes input stream using LZW algorithm. @param encoded input stream to be decoded @param decoded output stream for decoded data @param parameters dictionary with decoding parameters @param index current decode step index @return DecodeResult object containing decoding result and status
2126 Appends a kid with the given PDMarkedContent to the current object. @param markedContent PDMarkedContent object containing kid's details
2127 Fetches the UCS-2 CMap for the current composite font. @throws IOException if unable to retrieve the CMap
2128 Checks if the text field should be a combination input. @return true if valid, false otherwise
2129 Prepares decryption by resolving encryption material and calculating the encrypted key. @param encryption PDEncryption object containing document metadata @param documentIDArray COSArray of document IDs to be decrypted @param decryptionMaterial StandardDecryptionMaterial instance for password calculation @throws IOException if decryption material is incompatible with the document or invalid password
2130 Retrieves the width of a space character from various sources. @return The width of a space character in pixels
2131 Checks if font has fixed pitch.
2132 Checks if serif font style flag is set. @return true if serif font style is enabled, false otherwise
2133 Checks if the process is symbolic. @return true if symbolic, false otherwise
2134 Checks if script flag is set. @return true if script flag is enabled, false otherwise
2135 Checks if the current entity type is non-symbolic. @return true if non-symbolic, false otherwise
2136 Checks if italic formatting flag is set. @return true if italic flag is on, false otherwise
2137 Checks if all characters are uppercase. @return true if all characters are uppercase, false otherwise
2138 Checks if font style is small caps.
2139 Checks if force bold flag is enabled. @return true if flag is set, false otherwise
2140 Retrieves a PDAbstractPattern instance by its associated color. @param color the color with the desired pattern @return PDAbstractPattern object or null if not found
2141 Creates a PDField instance from a dictionary and parent field. @param form PDAcroForm instance @param field COSDictionary representing the field @param parent PDNonTerminalField parent of this field @return PDField object or null if creation fails
2142 Converts PDF document to text string. @return text representation of the PDF or an empty string on failure
2143 Creates an input stream from the underlying data source. @throws IOException if I/O operation fails
2144 Collects patches from a PDF image stream. @param xform AffineTransform object @param matrix Matrix object @param controlPoints number of control points @return List of Patch objects or empty list if not found
2145 Creates a descendant CID font based on the given dictionary and parent font. @param dictionary COSDictionary containing font metadata @param parent PDType0Font to inherit properties from @return PDCIDFont instance or throws IOException for invalid input
2146 Returns an iterator over the collection of COSBase objects. @return Iterator over COSBase objects or null if empty
2147 Adds given COSObjectable to internal collection. @param object COSObjectable instance to be added
2148 Grows the collection to a specified size by adding and updating instances of an object. @param size target collection size @param object COSBase object to add
2149 Sets the array of floating-point values. @param value array of float values to be added
2150 Parses a COSArray from the input stream.
2151 Creates a stream with compressed data and index, returning the original stream. @return The original stream with modified entries
2152 Initializes PDRange with default range [0, 1] and starting index 0.
2153 Returns the array of encoding values. @return COSArray object containing encoding values or a default value if not set
2154 Initializes a PDFunctionType2 object from the given COSBase function. @param function COS representation of the function
2155 Initializes an empty FDFOptionElement object.
2156 Initializes PDFontSetting with default font settings.
2157 Returns the white point of the device as a tristimulus color. @return PDTristimulus object representing the white point
2158 Retrieves the black point tristimulus values from the dictionary. @return PDTristimulus object containing XYZ coordinates or a default black point if not found
2159 Converts component list to a COSArray, optionally adding pattern name. @return COSArray containing components and optional pattern name
2160 Initializes a PDDeviceN object with default values.
2161 Initializes PDGamma object with default values.
2162 Returns the alternate color space as a PDColorSpace object. If not found, creates one based on the number of components. @return PDColorSpace object or null if not found
2163 Initializes a PDIndexed object with default properties.
2164 Initializes default range array with bounds (-100, 100) for both X and Y axes.
2165 Initializes PDPattern object with given PDResources and adds 'PATTERN' to an internal array.
2166 Initializes PDSeparation object with a COSArray containing PDF name and null placeholders.
2167 Initializes a PDTristimulus object with default XYZ values.
2168 Initializes a PDTristimulus object from an array of up to 3 float values. @param array array of color component values (e.g. XYZ, Lab)
2169 Sets the transformation matrix from an AffineTransform object. @param transform AffineTransform object containing the matrix values
2170 Creates a PDImageXObject from a byte array, inferring color space and dimensions. @param document PDDocument object @param byteArray image data as byte array @return PDImageXObject object or throws IOException if an error occurs
2171 Converts single object data to a COSArray. @return COSArray containing single's properties
2172 Sets a value at the specified index using the provided object. @param index the index to set @param object the COSObjectable instance or null for removal
2173 Sets an integer value at the specified index. @param index the index to update @param value the new integer value
2174 Sets the name at the specified index using PDF name conversion. @param index index to update @param name new name value
2175 Sets a string value at the specified index. @param index index of the value to be set @param string string value to be assigned (or null for removal)
2176 Sets minimum value of the numerical range. @param min the minimum value
2177 Sets the maximum value of the range array. @param max the new maximum value
2178 Sets the lower-left X-coordinate of the rectangle. @param value new X-coordinate value
2179 Sets lower-left y-coordinate of rectangle. @param value new y-value
2180 Sets the upper right x-coordinate of the rectangle. @param value new x-coordinate value
2181 Sets the upper-right y-coordinate of the bounding box. @param value Y-coordinate value
2182 Sets the colour at a specified index in the array. @param index the index to set the colour for @param colour the PDGamma object or null to clear
2183 Decrypts all elements in the given COSArray using provided object and generation numbers. @param array COSArray to be decrypted @param objNum Object number used for decryption @param genNum Generation number used for decryption
2184 Sets an option to the specified value. @param opt the option value as a string
2185 Sets the default appearance string. @param da the default appearance value to be set
2186 Sets font size using specified value. @param size font size in points
2187 Sets device attributes and updates the underlying data structure. @param attributes DeviceNAttributes object to store
2188 Sets the alternative color space for the PDF document. @param cs PDColorSpace object to set as alternate
2189 Sets the radius value. @param r the new radius value
2190 Sets gravitational acceleration value. @param g gravitational acceleration in meters per second squared
2191 Sets the value at index 2 to a floating-point number. @param b the float value to be assigned
2192 Sets a PDRange for the component with specified size. @param range PDRange object to set @param n number of ranges to store
2193 Sets the base color space for this object. @param base Color space to use as the new base
2194 Sets colorant name to specified value. @param name new colorant name
2195 Sets the alternate color space for the object. @param colorSpace PDColorSpace to use as alternative
2196 Sets the first value to a float. @param x the float value
2197 Updates the Y-coordinate of this object to the specified value. @param y the new Y-coordinate
2198 Sets the Z-value of this point. @param z floating-point value representing the Z-coordinate
2199 Sets an item in the internal data structure. @param key unique identifier of the item @param value object or COSBase to be stored, can be null
2200 Sets a boolean value in the PDF document. @param key unique key for the value @param value boolean value to be stored (true or false)
2201 Sets a boolean value in the document. @param key unique identifier of the property @param value true or false value to be stored
2202 Sets an item in the PDF document using a string key. @param key unique string identifier @param value COSBase object to be stored
2203 Sets a string value to the specified key in the document. @param key unique identifier for the key @param value the string value to be stored
2204 Sets a string attribute with the specified key and value. @param key COSName representing the attribute key @param value String value to be stored
2205 Sets an integer value in the document. @param key unique identifier @param value integer value to be stored
2206 Sets a long integer value to a specified key in the document. @param key the name of the key @param value the long integer value to be stored
2207 Sets a floating point number in a PDF document. @param key unique name for the value @param value the floating point number to be stored
2208 Creates a COS stream from the given dictionary and stream parameters. @param dictionary COSDictionary object to populate the stream @param startPosition starting position in the stream cache @param streamLength length of the stream to create @return COSStream object or throws IOException if creation fails
2209 Sets encryption dictionary from PDF document. @param encDictionary encryption dictionary to be set
2210 Sets document ID from provided COSArray object. @param id ID array to be stored in trailer
2211 Wraps the existing page's content in a save/restore pair (q/Q) to add additional content. @param page PDPage object to modify
2212 Updates parent entries in the given COSArray with new values. @param kArray COSArray containing sub-entries to update @param newParent new parent dictionary value @param newStructureType new structure type name, or null for no change
2213 Performs a brute-force search for a trailer by seeking to the first occurrence of the trailer marker. @param trailer COSDictionary object representing the trailer @return true if the trailer is found, false otherwise
2214 Searches for trailer items in the document and adds them to the provided COSDictionary. @param trailer dictionary to store found trailer items
2215 Initializes PDF parsing by retrieving trailer and setting up the root dictionary.
2216 Parses the next token from the content stream. @throws IOException if parsing fails or the stream is closed
2217 Writes the provided PDF document to a file or stream. @param doc the PDF document to write @param signInterface signature interface, currently unused
2218 Retrieves and caches the document information. @return PDDocumentInformation object containing document metadata
2219 Sets document information and updates trailer item. @param info PDDocumentInformation object containing updated metadata
2220 Initializes a new PDDocumentCatalog instance from the given PDDocument. @param doc the parent PDF document
2221 Retrieves a list of threads from the PDF document. @return List of PDThread objects
2222 Retrieves the additional actions catalog from the PDF document. @return PDDocumentCatalogAdditionalActions object or null if not initialized
2223 Adds a PDF output intent to the document. @param outputIntent PDOutputIntent object containing output settings
2224 Initializes PDDocumentNameDictionary with the given PDDocumentCatalog. @param cat PDDocumentCatalog instance to fetch and store name dictionary
2225 Sets the crop box for a PDF page. @param cropBox PDRectangle object representing the crop box or null to clear it
2226 Returns additional actions for the current page. @return PDPageAdditionalActions object or a new instance if not found
2227 Initializes a PDPageTree object with an empty dictionary and page count. @param none
2228 Retrieves child dictionaries from the given node. @param node COSDictionary to extract children from @return List of child COSDictionaries or empty list if none found
2229 Clears internal data structures and updates parent dictionary if present. @param none
2230 Creates a COSDictionary object containing label values. @return COSDictionary object with label keys and integer values
2231 Initializes a new Filespecification object.
2232 Initializes a PDComplexFileSpecification object from a COS dictionary. @param dict the COS dictionary to initialize with, or null for default values.
2233 Sets range values and updates the underlying COS object. @param rangeValues array of range values to be set
2234 Sets domain values and updates COS object. @param domainValues array of domain values
2235 Sets the encoding values and updates the COS object's ENCODE item. @param encodeValues array of encoding values
2236 Sets and stores decode values. @param decodeValues array of COS objects for decoding
2237 Sets an attribute on the underlying COS object. @param attrName name of the attribute @param attrValue new value for the attribute
2238 Removes the specified PDAttributeObject from the underlying COS dictionary. @param attributeObject PDAttributeObject to remove
2239 Updates the revision number in the 'A' key dictionary object. @param attributeObject PDAttributeObject triggering the update
2240 Adds a class name to the PDF document. @param className class name to add
2241 Removes a class name from the PDF's dictionary. @param className class name to remove
2242 Adds a child (kid) to the existing collection of children. @param object COSBase object representing the kid to add
2243 Inserts a new item before an existing reference in the dictionary. @param newKid new item to insert @param refKid reference item to position before
2244 Removes a kid from the object's COS dictionary. @param object the kid to remove @return true if removed successfully, false otherwise
2245 Sets the K item of the COS object. @param k new value for K item
2246 Sets the value and potentially notifies listeners of changes. @param value new COSBase value to set
2247 Returns the guideline color as a PDColor object. @return PDColor representing the guideline color
2248 Retrieves or initializes the line dash pattern from the dictionary. @return PDLineDashPattern object with default values if not found
2249 Sets the line dash pattern using an array of distances. @param dashArray array of distances defining the pattern
2250 Sets the cryptographic filter method in the dictionary. @param cfm COSName representing the new cryptographic filter method
2251 Sets a filter for the PDF document. @param filter name of the filter to apply
2252 Sets owner key from byte array. @param o byte array containing owner key data
2253 Sets user key by passing byte array to underlying dictionary. @param u unique byte array identifier
2254 Sets owner encryption key. @param oe byte array representing the encryption key
2255 Sets the user encryption key in the document. @param ue byte array representing the encryption key
2256 Sets the recipients of a PDF document. @param recipients byte arrays representing recipient names
2257 Sets the crypt filter dictionary with a given name and object. @param cryptFilterName unique name of the crypt filter @param cryptFilterDictionary COS object containing filter data
2258 Sets the name of the stream filter. @param streamFilterName COSName object representing the stream filter name
2259 Sets the filter name for strings. @param stringFilterName COSName object representing the filter name
2260 Sets permissions as a byte array. @param perms byte array containing permissions data
2261 Removes filters specific to V4.5 from the dictionary.
2262 Initializes a new FDF annotation with default values.
2263 Sets the color of an annotation item. @param c Color object
2264 Sets rich contents for an item. @param rc rich content string
2265 Sets the interior color of a PDF annotation. @param color the desired color
2266 Sets the callout values using an array. @param callout array of float values representing the callout
2267 Sets the line annotation with the specified float array. @param line float coordinates of the line
2268 Sets the interior color of an annotation. @param color Color object to set
2269 Sets the horizontal offset of a caption annotation. @param offset the new offset value
2270 Sets the vertical caption offset in a PDF annotation. @param offset vertical offset value (in points)
2271 Sets the 3D model's vertices using an array of float values. @param vertices array of vertex coordinates (x, y, z)
2272 Sets the interior color of an annotation item. @param color Color object to set
2273 Sets 3D vertex data for an item. @param vertices array of float values representing 3D vertex coordinates
2274 Sets interior color of an annotation item. @param color Color object to set
2275 Sets the interior color of a PDF annotation. @param color Color object to set as the interior color
2276 Sets quad points coordinates. @param coords array of float coordinates
2277 Sets user ID using COSArray. @param id unique identifier as COSArray
2278 Sets differences stream in FDF item. @param diff COSStream containing differences data
2279 Sets a field value to the specified object. @param value object to set as field value @throws IOException if unknown or unsupported type is provided
2280 Sets the value of a COS item. @param value COSBase object to set as value
2281 Sets field flags for the current field. @param ff Field flags as an integer
2282 Sets the SET_FIELD_FLAGS field with the specified integer value. @param ff integer value to set
2283 Sets clear field flags for the field item. @param ff Integer flag to set or null to reset
2284 Sets widget field flags. @param f Integer flag value or null to clear it
2285 Sets the flags for a SET widget field. @param ff integer flag value or null to clear
2286 Sets clear widget field flags. @param ff flag value (null to reset)
2287 Sets rich text value. @param rv COSString containing rich text data
2288 Sets rich text content from COSStream object. @param rv COSStream containing rich text data
2289 Sets the 'before' item in the dictionary to the specified string value. @param before the string value to be stored
2290 Sets the "after" parameter in the request. @param after value to be assigned
2291 Initializes a PDFont object with a dictionary and empty maps.
2292 Initializes font descriptor dictionary with type set to FONT_DESC.
2293 Sets the font name in the dictionary. @param fontName name of the font (e.g. "Helvetica")
2294 Sets the font family for a PDF document. @param fontFamily text to set as font family (null to clear)
2295 Sets the font stretch for a PDF document. @param fontStretch string value for font stretch (e.g. "ultracondensed")
2296 Sets the font bounding box to the specified rectangle. @param rect PDRectangle object representing the bounding box
2297 Sets the character set for this item. @param charSet string representation of the character set
2298 Initializes a DictionaryEncoding instance with the specified base encoding and differences. @param baseEncoding COSName of the underlying encoding (e.g. STANDARD_ENCODING) @param differences array of encoding differences
2299 Sets the gamma value in the PDF dictionary. @param value the gamma value to be set
2300 Returns the gamma array for a PDF. @return COSArray representing gamma values
2301 Sets the gamma value in the PDF dictionary. @param gamma PDGamma object containing gamma data
2302 Sets the matrix item in the dictionary using provided Matrix object. @param matrix input Matrix object
2303 Retrieves colorant information from the PDF resources. @param resources PDResources object @return Map of colorant names to PDSeparation objects or null if not found
2304 Initializes a PDTransparencyGroupAttributes object with default settings.
2305 Initializes an empty content membership dictionary with OCMD type.
2306 Sets the visibility policy for this object. @param visibilityPolicy COSName identifier of the new policy
2307 Sets the transformation matrix using the provided AffineTransform. @param transform affine transformation to apply
2308 Sets the bounding box for this object. @param bbox new bounding box rectangle or null to remove it
2309 Sets the background to the specified COSArray. @param newBackground COSArray containing background data
2310 Sets the bounding box of this object. @param newBBox new bounding box coordinates (null to clear)
2311 Sets the color space and updates the PDF dictionary accordingly. @param colorSpace PDColorSpace object to set or null to clear
2312 Sets the function array and updates the item in the COS object. @param newFunctions new array of functions to be set
2313 Sets the matrix of this object to the provided AffineTransform. @param transform the transformation matrix to apply
2314 Sets the domain COSArray. @param newDomain updated domain values
2315 Sets and persists the extension array. @param newExtend COSArray containing extension data
2316 Sets the domain COSArray and updates the underlying COS item. @param newDomain the new domain array to be set
2317 Sets user coordinates and updates internal COS object. @param newCoords COSArray containing updated coordinate values
2318 Sets decode values and updates COS object accordingly. @param decodeValues array of decode values to be set
2319 Initializes an extended graphics state with default settings.
2320 Sets the blend mode for graphics rendering. @param bm BlendMode value to be applied
2321 Sets a float item in the dictionary with the given key. @param key unique identifier for the item @param value float value to set (null to remove)
2322 Sets the transfer data in the dictionary. @param transfer COSBase object containing transfer data
2323 Sets the value of COSName.TR2 in the dictionary. @param transfer2 COS object to be stored
2324 Sets the T item in the action. @param t COSBase object to assign
2325 Sets the 'h' item to the specified boolean value. @param h true if enabled, false otherwise
2326 Sets the fields of an action item in a COSArray. @param array COSArray containing field values
2327 Sets sound item to specified COS stream. @param sound COSStream object containing sound data
2328 Sets fields from COSArray to item in action. @param array COSArray containing field values
2329 Sets the value of item D using a COSBase object. @param d The COSBase object to assign to item D
2330 Sets B item to specified COSBase instance. @param b COSBase object to assign to item B
2331 Sets the user's relationship to either 'P' (Parent) or 'C' (Child). @param relationship relationship type ('P' or 'C')
2332 Initializes a new annotation object with default properties.
2333 Initializes a PDAnnotation object from a COSDictionary. @param dict the dictionary containing annotation data
2334 Sets the rectangle item in the dictionary. @param rectangle PDRectangle object to be stored
2335 Sets the page border using an array of COS values. @param borderArray array of COS values defining the border
2336 Sets rectangle differences (margins) for a PDF object. @param differenceLeft left margin @param differenceTop top margin @param differenceRight right margin @param differenceBottom bottom margin
2337 Sets rectangle differences for PDF page layout. @param differenceLeft left margin difference @param differenceTop top margin difference @param differenceRight right margin difference @param differenceBottom bottom margin difference
2338 Sets callout data as an array of float values. @param callout array of float values for the callout
2339 Sets the ink list to the specified 2D float array. @param inkList 2D array of floats representing ink paths
2340 Sets line coordinates using an array of floats. @param l array of float values representing x and y coordinates
2341 Sets the horizontal offset for a caption. @param offset float value representing the new offset
2342 Sets the vertical caption offset. @param offset float value representing the offset
2343 Sets the quad points for this object. @param quadPoints array of float values representing the quad points
2344 Sets rich contents using the provided string value. @param rc rich content string to be stored
2345 Sets vertices data from an array of float values. @param points array of vertex coordinates (x, y, z) in 3D space
2346 Sets vertices of an object using 2D points array. @param points array of float values representing vertices (x, y coordinates)
2347 Sets the parent annotation markup. @param annot PDAnnotationMarkup object to be set as parent
2348 Sets the differences for a rectangle (left, top, right, bottom). @param differenceLeft left margin adjustment @param differenceTop top margin adjustment @param differenceRight right margin adjustment @param differenceBottom bottom margin adjustment
2349 Sets quad points using an array of floats. @param quadPoints array of float values for quad points
2350 Initializes a new PDAppearanceDictionary object with default settings. Creates an underlying COSDictionary and sets up the 'N' key.
2351 Sets the dash style of the COS object. @param dashArray array of dashes and spaces to cycle through
2352 Returns the line dash style pattern. @return PDLineDashPattern object representing the line style
2353 Sets the operating system in the document's metadata. @param os name of the operating system to set
2354 Initializes a new PD Seed Value object with default settings.
2355 Sets the filter by COSName. @param filter unique filter identifier
2356 Sets the MDP value in the dictionary. @param mdp PDSeedValueMDP object to set
2357 Sets the time stamp value in the dictionary. @param timestamp PDSeedValueTimeStamp object to set
2358 Initializes a new PDF seed value certificate object.
2359 Adds a subject to the PDF document's metadata. @param subject byte array representing the subject string
2360 Validates and adds key usage extension to PDF dictionary. @param keyUsageExtension string containing 0, 1 or X characters
2361 Adds an issuer to the dictionary. @param issuer byte[] containing issuer information
2362 Adds OID to the PDF document's metadata. @param oid byte array representing the OID value
2363 Initializes a PDSignature object with default settings.
2364 Sets the document type. @param type COSName object representing the new document type
2365 Sets the filter name. @param filter COS name of the filter to apply
2366 Sets the sub-filter for this item. @param subfilter COSName representation of the sub-filter
2367 Sets byte range value in PDF document. @param range array of 4 integers representing the byte range
2368 Sets PDF document contents from a byte array. @param bytes byte array containing PDF content
2369 Sets text color using a PDF color object. @param textColor PDF color to apply
2370 Initializes an AcroForm from a given PDF document. @param doc the source PDF document
2371 Initializes a PDF button with the given PDAcroForm. @param acroForm parent form to associate with this button
2372 Initializes a PDChoice object from a PDAcroForm. @param acroForm parent acrobat form
2373 Sets the value of a COS-based object. @param object the object containing the new value
2374 Sets default value for this object. @param value COSBase object representing default value
2375 Initializes a PDSignatureField with the given acroForm. @param acroForm parent form to bind this field to
2376 Initializes a PDTextField with the given PDAcroForm. @param acroForm associated PDF form
2377 Sets the default style string for the document. @param defaultStyleString the new style string or null to clear it
2378 Sets or clears the rich text value. @param richTextValue the rich text content to set (null to clear)
2379 Sets the origin of a 3D coordinate system. @param coordSystemOrigin array of float values representing the origin (x, y, z)
2380 Initializes a new PDF thread object with default values.
2381 Sets the transition direction. @param direction PDTransitionDirection to be assigned
2382 Sets the duration of an object. @param duration time in seconds
2383 Sets the fly scale to the specified value. @param scale floating-point value representing the fly scale
2384 Sets fly area transparency. @param opaque true to make fly area opaque
2385 Adds all objects from the provided array to this collection. @param objectList COSArray containing objects to add
2386 Retrieves the standard structure type by resolving a mapped value. @return Standardized string representation of the structure type
2387 Recursively adds structure elements to the pool. @param current COSBase object to process
2388 Retrieves date value from PDF metadata by key. @param key unique key identifier @param defaultValue default calendar value to return if not found
2389 Retrieves a date value from an embedded dictionary. @param embedded the embedded dictionary @param key the date key to fetch @param defaultValue default calendar if not found @return Calendar object or default value if not present
2390 Inserts generated combination appearance into the content stream. @param contents PDAppearanceContentStream to insert into @param appearanceStream PDAppearanceStream containing font and size info @param font PDFont used for rendering text @param fontSize float representing the font size
2391 Creates a PDImageXObject from a BufferedImage and a PDF document. @param document the PDDocument to associate with the image @param image the source BufferedImage @param quality the compression quality (0-1.0)
2392 Loads an FDF document from a file by its path. @param filename path to the FDF file @return loaded FDFDocument object or null on failure
2393 Adds first intermediate curl segment based on provided parameters. @param angleCur current angle @param r radius @param alpha initial angle offset @param cx center x coordinate @param cy center y coordinate
2394 Generates intermediate curl template segment. @param angleCur initial angle @param r radius @return array of Point2D.Double objects representing the template
2395 Processes a single glyph at the specified position. @param textRenderingMatrix current text rendering matrix @param font font object for the glyph @param code character code of the glyph @param displacement displacement from the previous glyph
2396 Calculates lines of text within a given width. @param font PDFont object @param fontSize float font size @param width float maximum line width @return List of Line objects containing words and their widths
2397 Retrieves symbolic flag from font descriptor, or returns null if not available.
2398 Resolves fallback font name based on the provided PDFontDescriptor. @param fontDescriptor font descriptor object with style flags and font name @return fallback font name (e.g. Times, Courier, Helvetica)
2399 Creates a Paint object based on the provided PDColor. @param color color to create paint from @return Paint object or null if not found; contains transparency when colorSpace is null
2400 Retrieves a list of PDF fields from the document dictionary.
2401 Recursively finds a nested child field by name and index in the form's dictionary. @param name array of field names to search @param nameIndex current index in the name array @return PDField object or null if not found
2402 Retrieves a list of child fields. @return List<PDField> containing child field objects
2403 Converts COSBase to a string, or an empty string if null. @param base COSBase object to convert
2404 Retrieves the value of a PDF field, handling various data types. @return The field's value as an Object (String, COSArray, COSStream, etc.) or null if not set
2405 Retrieves rich text content from the RV field. @return string representation of the rich text or null if not present
2406 Retrieves the "before" value from the dictionary. @return string representation of the "before" value or null if not found
2407 Retrieves the "after" value from the dictionary as a string. @return String representation of the after value, or null if invalid.
2408 Retrieves the action string or stream from the dictionary. @return Action value as a string, or null if not found or unsupported.
2409 Retrieves rich content from COS dictionary. @return Rich content as string, or null on failure
2410 Converts COSBase to a string representation, or an empty string if not applicable. @param base COSBase object to convert
2411 Creates a LayoutPage instance from the given PDF page. @param page The source PDF page
2412 Converts object data to a byte array. @return byte array representation of the object or null if failed
2413 Retrieves and populates user-defined array samples. @return 2D int array of sample values or null if not initialized
2414 Initializes PatchMeshesShadingContext with specified parameters. @param shading PDMeshBasedShadingType instance @param colorModel Color model to use @param xform Affine transform for patches @param matrix Transformation matrix @param deviceBounds Device rectangle bounds @param controlPoints Number of control points
2415 Initializes Type4ShadingContext with given parameters. @param shading PDShadingType4 object to process @param cm ColorModel for color conversion @param xform AffineTransform for coordinate transformation @param matrix Matrix for geometric transformations @param deviceBounds Rectangle representing device bounds
2416 Initializes a Type 5 shading context with specified parameters. @param shading PDShadingType5 object @param cm ColorModel @param xform AffineTransform for transformation @param matrix Matrix for scaling and rotation @param deviceBounds Rectangle representing device bounds
2417 Adds a new attribute to the document. @param attributeObject PDAttributeObject to add
2418 Adds a new property to the user. @param userProperty PDUserProperty object to add
2419 Initializes PDICCBased object from PDDocument. @param doc input document
2420 Initializes a PDPattern object with given resources and color space. @param resources PDResources object @param colorSpace PDColorSpace object
2421 Sets the change X values from the provided dictionary array. @param changeXs array of PDNumberFormatDictionary objects
2422 Sets an array of PDNumberFormatDictionaries for the Y-axis. @param changeYs array of number format dictionaries
2423 Sets an array of PD number format dictionaries as document metadata. @param distances array of PDNumberFormatDictionary objects
2424 Sets the list of number format dictionaries for the document. @param areas array of PDNumberFormatDictionary objects
2425 Sets the angles dictionary in the PDF document. @param angles array of PDNumberFormatDictionary objects representing angles
2426 Sets the line sloaps using the provided dictionary array. @param lineSloaps array of PDNumberFormatDictionary objects
2427 Grows the object to a specified size without animation. @param size new size of the object
2428 Returns the text color as a PDColor object. @return Color specification in RGB format
2429 Creates a clone of the given COSBase object, delegating to specific cloning methods for arrays and dictionaries. @param src source COSBase object @param dstParent destination parent COSBase object @param currentPageDict current page dictionary (not used in this method) @return cloned COSBase object or original if not cloneable
2430 Parses a directory object from the input stream.
2431 Initializes a new instance of PDFXrefStreamParser from the provided COSStream. @param stream input COSStream to parse
2432 Retrieves the next action in a sequence. @return List of PDAction objects or null if not found
2433 Retrieves the page range for a specified PDF component. @param n index of the component (starting from 1)
2434 Fetches parameter encoding range based on the given parameter number. @param paramNum unique parameter identifier @return PDRange object or null if not applicable
2435 Retrieves color definition by name, returning a single color or four-color object. @param name unique color identifier @return Color object (single or four-color) or null if not found
2436 Builds widths for the given CID font. @param cidFont COSDictionary representing the font
2437 Sets line dash pattern using PDF specification. @param dashPattern COS object representing dash pattern
2438 Initializes PDCIEDictionaryBasedColorSpace with RGB color data. @param rgb COSArray containing color space information
2439 Sets the guide line color in a PDF document. @param color the new guide line color
2440 Sets user profile color. @param c Color object to set
2441 Sets interior color of the object using the given PDColor. @param ic the new interior color
2442 Sets the interior color of the PDF object. @param ic PDColor object representing the new interior color
2443 Sets interior color using provided PDColor object. @param ic color to be applied
2444 Sets the interior color of a PDF object. @param ic Color to be applied
2445 Sets the border color of the document. @param c the new border color in PDF Color format
2446 Sets the background color of the COS object. @param c PDColor object representing the new background color
2447 Sets text color using provided color object. @param textColor color object to apply
2448 Retrieves the ARange from the PDF document or uses a default value. @return PDRange object representing the ARange
2449 Retrieves the B-range from the PDF dictionary. @return a PDRange object or default values if not found
2450 Creates an image from a byte array read from the given input stream. @param document PDDocument object (not used in this method) @param stream InputStream containing image data @return PDImageXObject instance or throws IOException if failed
2451 Sets the font for the PDF document. @param font The new font to be used (must not be null)
2452 Sets tint transform function. @param tint PDFunction to assign as tint transform
2453 Sets the tint transform function. @param tint PDFunction to apply as tint transform
2454 Sets the first element of an internal array to the provided PDPage object.
2455 Sets the upper limit of a COSArray. @param upper new upper limit value or null to reset
2456 Sets the lower limit of a node's constraints. @param lower the new lower limit value or null to reset
2457 Sets the line ending style for an annotation. @param style line ending style (e.g. "None", "Circle")
2458 Sets the line ending style for a PDF annotation. @param style one of PDAnnotationLine styles (e.g. LE_NONE, LE_SQUARE)
2459 Sets the start and end point style of an annotation. @param style style to apply (null for none)
2460 Sets the endpoint style for an annotation. @param style line ending style (e.g. PDAnnotationLine.LE_NONE)
2461 Sets the line ending style for the start point. @param style line ending style (null for default)
2462 Sets the end point ending style of a PDF annotation. @param style desired line ending style (e.g. LE_SQUARE, LE_NONE)
2463 Sets the line ending style for a PDF annotation. @param style desired line ending style (null to clear)
2464 Sets the end point style of a PDF annotation. @param style the desired style (null for none)
2465 Sets the upper limit for a PDF form field. @param upper string representing the new upper limit value
2466 Sets the lower limit of a PDF form field. @param lower new lower limit value as string
2467 Clips the provided rectangle to the media box, returning a new rectangle with intersecting bounds. @param box PDRectangle to clip @return Clipped PDRectangle or null if invalid
2468 Creates a rectangle with dimensions matching the current graphics context.
2469 Sets the color before the first element. @param colour PDGamma object representing the new color
2470 Sets color after in PDF. @param colour PDGamma object representing desired color
2471 Sets the start colour of the PDGamma object. @param colour Colour value to be assigned
2472 Sets the end color of the PDGamma object. @param colour The new end color
2473 Decrypts a given PDF object with the provided generation and object numbers. @param obj PDF object to decrypt @param objNum object number of the object to decrypt @param genNum generation number of the object to decrypt @return decrypted object or original object if not modified
2474 Sets an item in the PDF document using a string key. @param key unique string identifier @param value COSObjectable to be stored
2475 Sets the AcroForm (fillable form) of a PDF document. @param acroForm PDAcroForm object to set
2476 Sets viewer preferences for the PDF document. @param prefs PDViewerPreferences object to apply
2477 Sets document outline. @param outlines PDDocumentOutline object to be used as the outline
2478 Sets metadata for the current item. @param meta PDMetadata object containing metadata information
2479 Sets the open action item in the PDF document. @param action destination or action to set as open action
2480 Sets additional actions in the PDF document catalog. @param actions PDDocumentCatalogAdditionalActions object
2481 Sets the document name dictionary. @param names PDDocumentNameDictionary object to be assigned
2482 Sets the mark information in the PDL item. @param markInfo PDMarkInfo object to be stored
2483 Sets the URI of a COS item in the dictionary. @param uri PDURIDictionary containing the new URI value
2484 Sets the root node of the structure tree. @param treeRoot PDStructureTreeRoot object to be set as root
2485 Sets page labels on the PDF document. @param labels PDPageLabels object containing label data
2486 Sets destinations for PDF document from provided tree node. @param dests PDDestinationNameTreeNode object
2487 Sets embedded files in the name dictionary. @param ef EmbeddedFiles object to be stored
2488 Sets JavaScript configuration by ID. @param js PDJavascriptNameTreeNode object containing script details
2489 Initializes a PDF page with a specified media box. @param mediaBox the bounding box of the page content
2490 Sets the resources for the current page. @param resources PDResources object to be set or null to clear resources
2491 Sets the media box for a PDF page. @param mediaBox rectangle representing the media box dimensions
2492 Sets the bleed box for this page. @param bleedBox PDRectangle object defining the bleed area or null to clear it
2493 Sets the trim box for a PDF page. @param trimBox rectangle defining the trim box (null to clear)
2494 Sets the art box for a PD rectangle. @param artBox the new art box to set (null to remove)
2495 Sets the document contents. @param contents PDStream object containing document data
2496 Sets metadata for the current page. @param meta PDMetadata object to associate with the page
2497 Sets additional actions on a PD page. @param actions PDPageAdditionalActions object containing page actions
2498 Sets the page's transition to the specified PDTransition object. @param transition the new transition to apply
2499 Sets page transition with specified duration. @param transition PDTransition object @param duration transition duration in seconds
2500 Adds an item to a dictionary in the resources by kind. @param kind unique identifier for the dictionary @param name key for the item within the dictionary @param object value for the item
2501 Sets an embedded file for the PDF document. @param file PDEmbeddedFile object to embed
2502 Sets the embedded file with Unicode encoding for PDF. @param file PDEmbeddedFile object to be set
2503 Sets the current PDF page. @param page PDPage object to set as the current page
2504 Sets the referenced object in COS item OBJ. @param annotation PDAnnotation instance to be stored
2505 Sets the referenced object. @param xobject PDXObject instance to be assigned
2506 Sets the current PDF page. @param page PDPage object to set
2507 Sets the parent PDStructureNode. @param structureNode new parent node
2508 Sets the PDF page to be used in the COS object. @param page PDPage object to set
2509 Sets the parent tree node in the COS object. @param parentTree PDNumberTreeNode instance to be stored
2510 Sets the rectangle annotation item with the specified value. @param rectangle PDRectangle object representing the rectangle
2511 Sets the border style of an annotation item. @param bs PDBorderStyleDictionary object representing the new border style
2512 Sets border effect using provided PDBorederEffectDictionary. @param be dictionary containing border effect information
2513 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object representing the fringe
2514 Sets the fringe rectangle of an annotation item. @param fringe PDRectangle object representing the new fringe
2515 Sets the fringe of an annotation item. @param fringe PD rectangle defining the fringe's bounds
2516 Sets the fringe of an annotation item. @param fringe PDRectangle object defining the fringe
2517 Sets the FDF dictionary for the PDF catalog. @param fdf FDFDictionary object containing form data
2518 Sets PDSignature item in catalog. @param sig signature data to be stored
2519 Sets the file specification. @param fs PDFileSpecification object containing file details
2520 Sets JavaScript field in FDF document. @param js FDFJavaScript object to be set
2521 Sets the catalog of the PDF document. @param cat FDFCatalog object to be assigned
2522 Updates appearance dictionary for the item in the field. @param ap PDAppearanceDictionary object to be assigned
2523 Sets appearance stream reference in FDF document. @param ref FDFNamedPageReference object to be assigned
2524 Sets icon fitting mode. @param fit FDFIconFit enum value (e.g. STRETCH, CONTAIN)
2525 Sets the action to be performed by setting the corresponding COS item. @param a PDAction object to be assigned
2526 Sets additional actions for a PDItem. @param aa new PDAdditionalActions object
2527 Sets fractional space to allocate within page range. @param space PDRange object representing page range
2528 Sets the file specification for the item. @param fs PDFileSpecification object to be assigned
2529 Sets page information using FDFPageInfo object. @param info FDFPageInfo data to be set
2530 Sets the named page reference in the FDF template. @param tRef FDFNamedPageReference object to be set
2531 Sets font file to PDF document. @param type1Stream stream containing font data
2532 Sets the font file 2 to the specified PDF stream. @param ttfStream PDF stream containing the font data
2533 Sets font file 3 for PDF document. @param stream PDStream object containing font file data
2534 Sets the CID set from the given PDF stream. @param stream PDF stream containing CID set data
2535 Sets the white point of the device. @param whitepoint PDTristimulus object representing the white point
2536 Sets the black point in the dictionary. @param blackpoint PDTristimulus object representing black point
2537 Sets the extended graphics state for the PDF document. @param extendedGraphicsState extended graphics state settings
2538 Sets shading resources and updates underlying PDF object. @param shadingResources PDShading object to be applied
2539 Sets PDF resources. @param resources PDResources object to be set
2540 Updates the current function with a new one. @param newFunction PDFunction object to replace the existing one
2541 Sets font setting in document dictionary. @param fs PDFontSetting object to be stored
2542 Sets the destination for a PDF page. @param d PDDestination object to set
2543 Sets file specification for COS object. @param fs PDFileSpecification to be assigned
2544 Sets the target directory for processing. @param targetDirectory target directory to be set
2545 Sets the destination for this object to the specified PDDestination. @param d the destination to set (must be a PDPageDestination or compatible instance)
2546 Sets file specification for the item. @param fs PDFileSpecification object
2547 Sets the file specification for the COS object. @param fs PDFileSpecification object containing file details
2548 Sets Windows launch parameters. @param win PDWindowsLaunchParams object to be assigned
2549 Sets the file specification for the current item. @param fs PDFileSpecification object containing file details
2550 Sets the file specification for an item. @param fs PDFileSpecification object containing file details
2551 Sets file specification for PDF item. @param fs PDFileSpecification object containing file details
2552 Sets the value of F item in the action list. @param action the action to be assigned to F
2553 Sets the item at COSName.E to the specified action. @param e the action to be set
2554 Sets the X action value. @param x PDAction object to assign to COSName.X
2555 Sets the action associated with D item. @param d PDAction object to be assigned
2556 Sets the item at COSName.U with the provided PDAction object. @param u PDAction object to be stored
2557 Sets FO action in the actions collection. @param fo FO action to be set
2558 Sets the Business Logic action. @param bl the Business Logic action to be set
2559 Sets the Purchase Order (PO) action. @param po PDAction object containing purchase order data
2560 Sets PC action item. @param pc PC action object to be assigned
2561 Sets the PV (Process Variable) action. @param pv PDAction object representing the process variable
2562 Sets PI action. @param pi PDAction object to set as PI
2563 Sets a Work Center action. @param wc WorkCenter object to be assigned
2564 Sets the WS action item with the provided PDAction object. @param ws PDAction object to be assigned
2565 Sets the Data Source (DS) action. @param ds the PDAction object to be assigned
2566 Sets workflow process. @param wp workflow action to be assigned
2567 Sets the DP (Display Profile) action. @param dp Display Profile object to be set
2568 Sets the value of item K in the actions map. @param k PDAction object to be assigned
2569 Sets the F action in the item list. @param f PDAction object to assign
2570 Sets the V action in the current item. @param v PDAction object to assign
2571 Sets action C to the specified value. @param c action to be set
2572 Sets an action item with key COSName.O. @param o action to be set
2573 Sets item C to specified action. @param c PDAction object to assign
2574 Sets the target directory of a PDTargetDirectory object. @param targetDirectory the PDTargetDirectory to set
2575 Sets the named destination for this object. @param dest PDNamedDestination object to set or null to clear
2576 Sets the PDAppearanceDictionary instance as the appearance item in the dictionary. @param appearance PDAppearanceDictionary object to be stored
2577 Sets optional content using a COS property list. @param oc PDPropertyList containing optional content data
2578 Sets the page of a PDF document. @param page PDPage object to set as the current page
2579 Sets the PDFileSpecification for this object. @param file PDFileSpecification to be set
2580 Sets the border effect using the provided PDBorderEffectDictionary. @param be PDBorderEffectDictionary object representing the border effect
2581 Sets rectangle difference (RD) PDF object. @param rd PDRectangle object to be stored
2582 Sets the Action item in the COS object. @param action PDAction instance to be stored
2583 Sets border style dictionary for COS object. @param bs PDBorderStyleDictionary instance to apply
2584 Sets destination PDDestination object. @param dest PDDestination object to be set
2585 Sets the previous URI of a PD action. @param pa PDActionURI object to be stored
2586 Sets the annotation popup. @param popup PDAnnotationPopup object to be set
2587 Sets the in-reply-to annotation. @param irt PDAnnotation object containing reply data
2588 Sets external data dictionary for the COS object. @param externalData PDExternalDataDictionary instance to be stored
2589 Sets border style dictionary on COS object. @param bs PDBorderStyleDictionary instance to apply
2590 Sets border effect dictionary. @param be PDBorderEffectDictionary object
2591 Sets border effect using provided PDBorderEffectDictionary. @param be dictionary containing border effect details
2592 Sets rectangle difference in COS object. @param rd PD Rectangle object containing difference
2593 Sets appearance characteristics dictionary. @param appearanceCharacteristics dictionary of appearance characteristics
2594 Sets the action item in the COS object. @param action PDAction object to be stored
2595 Sets additional actions for a PD annotation. @param actions PDAnnotationAdditionalActions object to be stored
2596 Sets border style dictionary for COS object. @param bs PDBorderStyleDictionary instance to apply
2597 Sets the parent terminal field. @param field PDTerminalField object to set as parent
2598 Sets the normal appearance of an item in the dictionary. @param entry PDAppearanceEntry object to be assigned
2599 Sets PDAppearanceStream as normal appearance of an item in the dictionary. @param ap PDAppearanceStream object to be assigned
2600 Sets rollover appearance in the PDAppearance dictionary. @param entry PDAppearanceEntry object to be stored
2601 Sets the rollover appearance stream in the dictionary. @param ap PDAppearanceStream object to be stored
2602 Sets down appearance of an item in the dictionary. @param entry PDAppearanceEntry object to be stored
2603 Sets down appearance stream in PDL dictionary. @param ap PDAppearanceStream object to store
2604 Sets the build filter data dictionary. @param filter PDPropBuildDataDict object to be assigned
2605 Sets publication security data in PD property build data dictionary. @param pubSec publication security data to be stored
2606 Sets application data in PDProp build dictionary. @param app PDPropBuildDataDict object to be assigned
2607 Sets the seed value certificate. @param certificate SeedValueCertificate object to store
2608 Sets the property build value in the dictionary. @param propBuild PDPropBuild object to store
2609 Sets the previous sibling node in the outline. @param outlineNode PDOutlineNode to be assigned as previous sibling
2610 Sets the next sibling node in the outline. @param outlineNode the new next sibling node
2611 Sets the destination of the COS object. @param dest PDDestination object to be set
2612 Sets the action associated with this object. @param action the Action to be set
2613 Sets the PDF structure element. @param structureElement PDStructureElement object to be set
2614 Sets the first child node of the PDOutlineNode. @param outlineNode the new first child node
2615 Sets the last child node of an outline. @param outlineNode PDOutlineNode to be assigned as last child
2616 Sets default resources in the document. @param dr PDResources object to be set as default
2617 Sets the XFA (XML Forms Architecture) resource in the PDF dictionary. @param xfa PDXFAResource object containing XFA data
2618 Sets the PDSignature value in the COS object. @param value PDSignature to be set
2619 Sets default signature for COS object. @param value PDSignature to be assigned as default
2620 Sets seed value from provided PDSeedValue object. @param sv PDSeedValue containing new seed value
2621 Sets additional form field actions. @param actions PDFormFieldAdditionalActions object to be stored
2622 Sets the bounding box of the PDF document. @param rectangle PDRectangle object representing the new bounding box
2623 Sets the PD measure dictionary. @param measure PDMeasureDictionary object to be set
2624 Sets document information for the current thread. @param info PDDocumentInformation object to be set
2625 Sets the thread item in the Bead object. @param thread PDThread object to be associated with the Bead
2626 Sets the next bead in thread. @param next the new bead to be added
2627 Sets the previous bead in the thread. @param previous the bead to be assigned as previous
2628 Sets the current document page. @param page PDPage object to set as the active page
2629 Sets the rectangle item in the PDF document. @param rect the rectangle object to be set
2630 Sets the marked status in the underlying dictionary. @param value true to mark, false otherwise
2631 Sets user properties flag in the dictionary. @param userProps true to enable or false to disable user properties
2632 Sets suspect flag to false in the dictionary.
2633 Sets whether to track mouse position. @param value true to enable tracking, false otherwise
2634 Sets the state of the "Open" attribute. @param open true to set as open, false otherwise
2635 Sets the "FD" boolean attribute on the COS object. @param fd true/false value to set
2636 Sets whether the file is volatile. @param fileIsVolatile true to mark as volatile, false otherwise
2637 Sets the hidden state of an object. @param hidden true to hide, false to show
2638 Sets encryption metadata flag on COS object. @param encryptMetaData true to enable encryption
2639 Sets the caption attribute of the annotation. @param cap true to enable, false to disable caption
2640 Sets whether to scale annotation to fit. @param value true to enable scaling, false otherwise
2641 Sets the rename flag on the template. @param value true to enable renaming, false otherwise
2642 Sets anti-aliasing flag in PDF dictionary. @param antiAlias true to enable or false to disable
2643 Sets stroking overprint control flag in PDF dictionary. @param op true to enable stroking overprint control
2644 Sets non-stroking overprint control flag. @param op true to enable, false to disable
2645 Sets automatic stroke adjustment flag in the dictionary. @param sa true to enable automatic stroke adjustment, false otherwise
2646 Sets the alpha source flag in the dictionary. @param alpha true to enable alpha source, false otherwise
2647 Sets text knockout flag. @param tk true to enable, false otherwise
2648 Sets whether to open the document in a new window. @param value OpenMode specifying the desired behavior
2649 Sets whether to open in a new window. @param value OpenMode enum indicating window behavior
2650 Sets whether to open in a new window based on specified mode. @param value OpenMode enumeration value (USER_PREFERENCE, SAME_WINDOW, NEW_WINDOW)
2651 Sets whether the action should be executed synchronously or not. @param synchronous true to execute synchronously, false otherwise
2652 Sets the repeat flag for an action. @param repeat true to enable repeat, false otherwise
2653 Sets whether to enable/disable mixing in the animation. @param mix true to enable mixing, false otherwise
2654 Sets the caption attribute of the underlying COS object. @param cap true to set caption, false otherwise
2655 Sets PDF document's "Open" flag. @param open true to set as open, false otherwise
2656 Sets whether the release is pre-release or not. @param preRelease true if release is pre-release, false otherwise
2657 Sets non-embed font warning flag in PDF dictionary. @param noEmbedFontWarning whether to suppress the warning
2658 Sets trusted mode flag in the underlying dictionary. @param trustedMode true to enable trusted mode, false otherwise
2659 Sets whether to show appearance-related properties. @param value true if appearances should be shown, false otherwise
2660 Sets whether to hide toolbar. @param value true to hide, false otherwise
2661 Sets whether to hide the menubar. @param value true to hide, false otherwise
2662 Sets preference to hide window UI. @param value true to hide, false otherwise
2663 Sets whether to fit window to user's screen. @param value true to enable, false to disable
2664 Sets whether to center the window. @param value true to center, false otherwise
2665 Sets whether to display document title. @param value true to show, false to hide
2666 Sets an array of strings in the PDF document dictionary. @param name key to store the array under @param values array of string values to set
2667 Sets an array of values for a PDF name. @param name the dictionary key @param values an array of string values to set
2668 Sets an array of floating-point numbers in the PDF document dictionary. @param name key for the array @param values array of float values to store
2669 Parses the appearance XML for a PDF stamp annotation. @param appearanceXML the XML element containing the appearance data @return COSDictionary object representing the parsed appearance data
2670 Sets name attribute with specified key and value. @param key unique PDF name @param value new name value
2671 Sets the page mode using the provided PageMode enum value. @param mode the desired PageMode enumeration
2672 Sets the page layout name. @param layout PageLayout object
2673 Sets the version of the document. @param version new version string to be assigned
2674 Sets the trapped flag to a specific string value. @param value must be 'True', 'False', or 'Unknown'
2675 Sets or removes the style attribute from the root element. @param style new style value or null to clear existing style
2676 Initializes a Typed Dictionary Wrapper with specified data type. @param type data type to be associated with the wrapper
2677 Sets the document owner name. @param owner new owner name
2678 Initializes a new instance of PDMarkedContentReference with default values. Sets the dictionary type to TYPE.
2679 Initializes a new PDObjectReference instance with the specified type.
2680 Sets the COS object name to the specified structure type. @param structureType unique identifier of the structure type
2681 Initializes a PDStructureNode with the given type. @param type PDF structure node type
2682 Updates user's name and potentially notifies observers of change. @param name new name to set
2683 Sets the guideline style based on the provided string value. @param style unique identifier of the style to apply
2684 Sets the sub-filter value in the dictionary. @param subfilter new sub-filter string
2685 Sets the intent name in COS annotations. @param intent name of the intent
2686 Sets line ending style in annotation. @param style desired line ending style
2687 Sets the icon name. @param icon string representation of the icon name
2688 Sets the catalog's version. @param version new version string
2689 Sets document encoding to specified value. @param encoding encoding scheme (e.g. UTF-8)
2690 Sets scale option using COSName.SW. @param option scale option value
2691 Sets scale type by assigning it to the 'S' attribute of the Fit object. @param scale String value representing the scale type
2692 Initializes a new, empty PDF abstract pattern object.
2693 Sets the type of the action. @param type new type value
2694 Sets sub-type of an action by name. @param s new sub-type value
2695 Sets the subtype of this object. @param subType new subtype value
2696 Sets the appearance state of the COS object. @param as new appearance state value
2697 Sets attachment name on COS object. @param name new attachment name
2698 Sets the line ending style using the specified COS name. @param style COS name representing the desired line ending style
2699 Sets the positioning of the document caption. @param captionPositioning new positioning value
2700 Sets the highlighting mode for the COS object. @param mode desired highlighting mode (e.g. "highlight")
2701 Sets reply type attribute of COS object. @param rt new reply type value
2702 Sets the intent of the COS object. @param it new intent value
2703 Sets user's name. @param name new user name to be set
2704 Sets the user's name. @param name new username to be assigned
2705 Sets the highlighting mode. @param highlightingMode one of 'N', 'I', 'O', 'P', or 'T' modes
2706 Sets the style of the COS object. @param s new style value
2707 Initializes a new instance of PDExternalDataDictionary.
2708 Sets the subtype of the COS object. @param subtype new subtype value
2709 Sets the user's display name. @param name new display name value
2710 Sets URL type in the dictionary. @param urlType new URL type value
2711 Initializes document outline with default name.
2712 Constructs an outline object from a PDF dictionary. @param dic COSDictionary representing the PDF document's outline
2713 Sets default value. @param value new default value
2714 Initializes a new instance of PDMeasureDictionary.
2715 Sets the subtype of the COS object. @param subtype new subtype value
2716 Initializes a new instance of the PDNumberFormatDictionary class.
2717 Sets the user's display name. @param name new name to be assigned
2718 Initializes a PDTransition object with the specified style. @param style transition style
2719 Sets a transition dimension with the given name. @param dimension PDTransitionDimension object to be assigned
2720 Sets the transition motion to the specified PDTransitionMotion object. @param motion transition motion settings
2721 Sets the date value by converting the provided Calendar object to a string. @param key unique identifier of the date field @param date Calendar object containing the date value
2722 Sets string attribute with given key and value. @param key unique PDF name @param value string value to be set
2723 Sets an embedded string in a COSDictionary. @param embedded parent object @param key the dictionary key @param value the string value to set
2724 Sets the user interface language. @param language desired language code (e.g. "en", "fr")
2725 Sets the user's title. @param title new title value
2726 Sets the document author. @param author name of the document author
2727 Sets the document's subject field. @param subject string value to be assigned
2728 Sets the keywords for this user profile. @param keywords comma-separated list of keywords
2729 Sets the creator of an object. @param creator name of the creator
2730 Sets the producer string in the profile information. @param producer the name of the producer
2731 Sets the prefix value in the underlying data store. @param prefix new prefix to set or null to remove existing prefix
2732 Sets the Unicode filename. @param file new filename to be set
2733 Sets a file path in the COS. @param file The path to be set
2734 Sets file description. @param description new description string
2735 Sets the ID of an element in the COS object. @param id unique identifier string
2736 Sets document title. @param title new title string
2737 Sets the document language. @param language desired language code
2738 Sets alternative description value. @param alternateDescription new text to display in place of default description
2739 Sets the expanded form string of the COS object. @param expandedForm the new expanded form value
2740 Sets the actual text value in the COS object. @param actualText the new actual text string
2741 Updates the formatted value and notifies if changed. @param formattedValue new formatted string
2742 Sets the date field to the specified value. @param date date string to be assigned
2743 Sets the user's name. @param name new username to be set
2744 Sets the document contents to the specified value. @param contents new document contents
2745 Sets document title to specified string. @param title new document title
2746 Sets the subject of the annotation. @param subject new subject value
2747 Sets the paragraph symbol to either "P" or "None". @param symbol "paragraph" to set to "P", otherwise sets to "None"
2748 Sets the default appearance of an annotation. @param appearance new appearance string
2749 Sets default stylesheet by ID. @param style unique stylesheet identifier
2750 Sets the caption style of the annotation. @param captionStyle new style value
2751 Sets the application state. @param state new state value as string
2752 Sets the state model string value. @param stateModel new state model value
2753 Sets the user's status to the specified value. @param status new status text
2754 Sets the target string value. @param target the new target value
2755 Sets the partial field name. @param partial partial field value to be set
2756 Sets the user's name. @param name new name to be assigned
2757 Sets the user's name. @param name new user name to be stored
2758 Initializes Optional Content Group Settings with default values.
2759 Sets the JavaScript action string. @param sAction the JavaScript action to be set
2760 Sets the F string value. @param f the new F string value
2761 Sets the value of property D. @param d new value to assign
2762 Sets the COSName O value to the specified string. @param o new value for COSName O
2763 Sets the value of property P. @param p new value as string
2764 Sets the URI string for the action. @param uri unique identifier as a string
2765 Sets the filename in the dictionary. @param filename new filename to store
2766 Sets the annotation name in the dictionary. @param name new name to associate with the annotation
2767 Sets the filename using Adobe PDF Library's parameter interface. @param file name of the file to be set
2768 Sets the directory path. @param dir the new directory path to set
2769 Sets operation parameter to specified value. @param op operation string (e.g. "add", "subtract")
2770 Sets an execute parameter value. @param param The new parameter value
2771 Sets contents string in dictionary. @param value new contents value
2772 Updates the modified date field with the specified value. @param m new modified date string
2773 Sets the annotation name. @param nm new annotation name to be set
2774 Sets default appearance value. @param daValue new default appearance string
2775 Sets the default style string in the COS object. @param defaultStyleString the new default style string value
2776 Sets title popup string in COS object. @param t new title popup value
2777 Sets subject of COS object to specified value. @param subj new subject value
2778 Sets the user's state to the specified value. @param state new state value
2779 Sets the state model string in COS object. @param stateModel new state model value
2780 Sets the normal caption of the COS object. @param caption new caption value
2781 Sets rollover caption using COS object. @param caption text to display when hovering over an element
2782 Sets the alternate caption for the COS object. @param caption new text to display as an alternate caption
2783 Sets the date value in the underlying dictionary. @param date new date string to be set
2784 Sets the URL value in the dictionary. @param url new URL string to be stored
2785 Sets the URL value in the underlying dictionary. @param url new URL to be stored
2786 Sets the COS Name. @param name new name value
2787 Sets the user's location in the dictionary. @param location the new location value
2788 Sets the reason string in the dictionary. @param reason reason description to be stored
2789 Sets user contact information. @param contactInfo new contact info value
2790 Sets the document title to the specified value. @param title new title string
2791 Sets default appearance value in the underlying dictionary. @param daValue new default appearance string value
2792 Sets the default value of the COS object. @param value new default string value
2793 Sets partial name in the dictionary. @param name partial name string @throws IllegalArgumentException if name contains a period character
2794 Sets an alternate field name in the dictionary. @param alternateFieldName new alternate field name value
2795 Sets the name of an existing mapping. @param mappingName new name for the mapping
2796 Sets the string value for this COS object. @throws IOException if an error occurs while setting the value
2797 Sets the value of a COS object. @param value string to set in the COS object
2798 Sets the default value as a string property. @param value the new default value
2799 Sets the default appearance for this annotation. @param daValue new default appearance value
2800 Sets the scale ratio value. @param scaleRatio string representation of scale ratio
2801 Sets an integer value in PDF metadata. @param key unique key identifier @param value integer value to be stored
2802 Sets an integer value in the specified embedded dictionary. @param embeddedDictionary name of the dictionary to update @param key name of the key to store the value under @param value integer value to be stored
2803 Sets a boolean flag on the specified field using bitwise operations. @param field COSName of the field to modify @param bitFlag integer representing the flag position (1 << bitFlag) @param value new flag value (true for set, false for clear)
2804 Sets the parent structure IDs. @param structParents ID of the parent structure
2805 Sets rotation angle for the page. @param rotation new rotation value
2806 Initializes a PDPageTree object from a COSDictionary and PDDocument. @param root the page tree root dictionary (cannot be null) @param document the parent PDDocument
2807 Removes the specified node from its parent's kids and updates ancestor counts.
2808 Adds a PDPage instance to the document hierarchy. @param page PDPage object to add
2809 Sets the starting page number for pagination. @param start positive integer representing the first page
2810 Sets the number of bits per sample. @param bps bits per sample integer value
2811 Sets the MCID value in the COS object. @param mcid unique identifier to be set
2812 Sets the revision number for the COS object. @param revisionNumber non-negative revision identifier
2813 Sets the next key in the parent tree. @param parentTreeNextkey new value for the PARENT_TREE_NEXT_KEY property
2814 Sets the document length in the filter dictionary. @param length new document length value
2815 Sets the application version. @param version new version number to be stored
2816 Sets the document length. @param length new document length value
2817 Sets the document revision. @param revision new revision value
2818 Sets the permissions value in the dictionary. @param permissions new permission integer value
2819 Sets the page number in the annotation. @param page the desired page value
2820 Sets the justification type for text rendering. @param justification "centered", "right", or null to reset
2821 Sets the rotation angle. @param rotation rotation angle value
2822 Sets field flags to specified integer value. @param ff field flags as an integer
2823 Sets flags for the SET_FIELD operation. @param ff integer flag value
2824 Sets clear field flags. @param ff integer representing clear field flags
2825 Sets flags for widget fields. @param f bitwise combination of flags
2826 Sets flags for a widget field. @param ff flag value
2827 Sets clear widget field flags. @param ff flag value to be set
2828 Sets user flags to specified integer value. @param flags new flag value
2829 Populates the font's widths array with glyph advance widths. @param font COSDictionary representing the font @param glyphList GlyphList object containing glyph information
2830 Sets the paint type in the pattern dictionary. @param paintType integer value representing paint type
2831 Sets the pattern type in the dictionary. @param patternType integer value representing the pattern type
2832 Sets the paint type of the COS object. @param paintType integer value representing the paint type
2833 Sets the document's tiling type. @param tilingType integer value representing tiling type
2834 Sets the shading type in the dictionary. @param shadingType integer value representing the shading type
2835 Sets the number of flags per bit. @param bitsPerFlag integer value representing flags per bit
2836 Sets the number of vertices per row. @param verticesPerRow number of vertices in each row
2837 Sets the number of bits per color component in the COS object. @param bitsPerComponent new bit depth value
2838 Sets the number of bits per coordinate. @param bitsPerCoordinate new bit count value
2839 Sets line cap style using specified integer value. @param style integer representing line cap style (e.g. butt, round, square)
2840 Sets line join style using specified integer value. @param style integer representing line join style
2841 Sets the Overprint Mode for this object. @param overprintMode integer value of the Overprint Mode (null to clear)
2842 Sets the FLAGS attribute of the action. @param flags integer flag value
2843 Sets user action flags. @param flags integer value representing user action flags
2844 Sets the page number in the dictionary. @param pageNumber non-negative integer value or -1 to remove page info
2845 Sets annotation index; removes item A from dictionary if index is negative. @param index new annotation index
2846 Sets annotation flags. @param flags integer value representing annotation flags
2847 Sets the structural parent ID. @param structParent unique identifier of the structural parent
2848 Sets Q value in COS object. @param q integer value to be set
2849 Sets the rotation value for the COS object. @param rotation new rotation value
2850 Sets the value of P to a valid range [0, 3]. @param p value to set (must be between 0 and 3)
2851 Sets whether timestamp is required in the document. @param flag true to require timestamp, false otherwise
2852 Sets the count of open items. @param openCount integer value to set in the COS object
2853 Sets the value of Q in the dictionary. @param q new value to store
2854 Sets field flags in the underlying dictionary. @param flags integer value representing field flags
2855 Sets the top index to the specified value or removes it if null. @param topIndex new top index value or null to remove
2856 Sets the maximum length of a COS object. @param maxLen new maximum length value
2857 Sets user's Q score. @param q new Q value
2858 Sets a long value in COS using the provided key. @param key unique PDF name @param value the long value to be set
2859 Writes the PDF trailer to the output stream. @param doc the COSDocument containing the trailer
2860 Sets the document revision. @param revision unique revision identifier
2861 Sets the minimum revision number. @param revision long value representing the minimum revision
2862 Sets a float attribute with the given key. @param key unique attribute identifier @param value float value to be assigned
2863 Sets the user unit value. @param userUnit non-negative float representing the user unit
2864 Sets the guideline width for drawing. @param width desired width value in pixels
2865 Sets the opacity of an annotation. @param opacity value between 0.0 and 1.0 to control transparency
2866 Sets the leader length for annotation rendering. @param leaderLength new leader length value
2867 Sets the leader extension value. @param leaderExtend new leader extension value
2868 Sets the leader offset value. @param leaderOffset new leader offset value
2869 Sets font weight to specified value. @param fontWeight value between 0.0 and 100.0 (inclusive)
2870 Sets italic angle in font dictionary. @param angle new italic angle value
2871 Sets the aircraft's ascent value. @param ascent new ascent value
2872 Sets the descent value in the dictionary. @param descent new descent value
2873 Sets the leading value in the dictionary. @param leading the new leading value
2874 Sets the cap height value. @param capHeight desired font cap height
2875 Sets the X-height value. @param xHeight new X-height value
2876 Sets the stem voltage value. @param stemV new stem voltage value
2877 Sets the stem height value in the dictionary. @param stemH new stem height value
2878 Sets the average width value in the dictionary. @param averageWidth the new average width value
2879 Sets maximum width for layout calculations. @param maxWidth value to set as maximum width
2880 Sets the missing width value in the dictionary. @param missingWidth new width value
2881 Sets the X step value for the COS object. @param xStep new X step value
2882 Sets the Y-axis step value. @param yStep floating-point value representing the Y-step
2883 Sets audio volume within valid range (-1.0 to 1.0). @param volume float value between -1 and 1
2884 Sets the length of the leader line in a COS object. @param leaderLineLength the new length value
2885 Sets the leader line extension length. @param leaderLineExtensionLength new value for leader line extension
2886 Sets the line offset length of the leader. @param leaderLineOffsetLength new line offset value
2887 Sets constant opacity value.
2888 Sets the width of an object to a floating-point value. @param w width in points; if integer, sets as int; otherwise as float.
2889 Sets the minimum required capability for V. @param minimumRequiredCapability float value representing the minimum requirement
2890 Sets the CYX value in the COS object. @param cyx new CYX value
2891 Parses a COS Stream from the given dictionary. @param dic COSDictionary containing stream metadata
2892 Merges and clones a COS object from the source to the target. @param base source COS object @param target target COS object
2893 Parses a PDF file into a PDDocument object. @param lenient whether to throw an exception on parsing errors @return the parsed PDDocument or null if parsing fails
2894 Processes stream operators and operands in the given PDF content stream. @param contentStream PDF content stream to process
2895 Parses input into a list of objects. @return List of parsed objects or empty list if no tokens found
2896 Retrieves the bounding box of a glyph. @return PDRectangle object containing glyph's width and height, or null if not found.
2897 Parses width from PDF stream. @throws IOException if parsing fails or unexpected stream end
2898 Writes the PDDocument to an output stream. @param doc the document to be written
2899 Saves incremental PDF data to the specified output stream. @param output OutputStream target for saved PDF data
2900 Creates a new PDDocument instance with an in-memory stream cache.
2901 Retrieves the document catalog. @return PDDocumentCatalog object representing the document's catalog
2902 Recursively fetches a COSDictionary based on a 1-based page number. @param pageNum the target page number @param node the current dictionary node @param encountered the number of pages already encountered
2903 Creates a PDF file specification from the given COSBase object. @param base COSBase object to create specification from @return PDFileSpecification object or null if invalid input
2904 Notifies the parent structure element of attribute changes. @see StructureElement#attributeChanged(AttributeChangedEvent)
2905 Appends COSObjectable kid to the current object. @param objectable COSObjectable instance to append
2906 Inserts a new COSObjectable before the specified reference object. @param newKid the COSObjectable to insert @param refKid the object after which to insert (null for end)
2907 Removes an objectable kid by ID. @param objectable COSObjectable to remove
2908 Sets the standard cryptographic filter dictionary. @param cryptFilterDictionary PDCryptFilterDictionary object to configure
2909 Sets the default crypt filter dictionary. @param defaultFilterDictionary PDCryptFilterDictionary to be set as default
2910 Initializes FDFAnnotationCaret with subtype.
2911 Initializes an annotation circle with subtype.
2912 Initializes an FDF annotation file attachment with subtype.
2913 Initializes an FDF annotation with free text properties. @param SUBTYPE subtype identifier
2914 Initializes an FDFAnnotationInk object with subtype. @param SUBTYPE annotation subtype (e.g., "INK")
2915 Initializes an FDF annotation line with subtype. @param SUBTYPE type of annotation (e.g. text, image)
2916 Initializes FDFAnnotationLink with subtype value. @param SUBTYPE subtype of annotation link
2917 Initializes an FDF annotation polygon with subtype. @param SUBTYPE subtype of the polygon (e.g. "Square")
2918 Initializes an FDFAnnotationPolyline object with subtype.
2919 Initializes an instance of FDFAnnotationSound with subtype. @param SUBTYPE subtype name (default value is used if not provided)
2920 Initializes an FDF annotation square with subtype.
2921 Initializes an FDF annotation stamp with subtype. @param subtype subtype of the annotation (e.g. "Widget")
2922 Initializes an FDF annotation text with subtype. @param SUBTYPE subtype of the annotation text
2923 Creates an instance of FDFAnnotationTextMarkup. This constructor is used to initialize the annotation text markup object.
2924 Builds vertical metrics for a given font. @param cidFont COSDictionary representing the font
2925 Initializes a simple font with default settings.
2926 Retrieves an optional content group by name from the PDF structure. @param name unique group identifier @return PDOptionalContentGroup object or null if not found
2927 Retrieves a collection of optional content groups from the PDF.
2928 Sets the line width of a graphical object. @param width new line width value
2929 Sets the miter limit value. @param miterLimit new miter limit value
2930 Sets the flatness tolerance value. @param flatness new flatness tolerance value
2931 Sets smoothness tolerance value. @param smoothness new smoothness tolerance (float)
2932 Sets stroking alpha constant to specified value. @param alpha transparency level (0.0 - 1.0)
2933 Sets non-stroking alpha constant to specified value. @param alpha non-stroking alpha transparency level (0-1)
2934 Initializes annotation link with subtype. @param SUB_TYPE subtype name
2935 Constructs an empty PDAnnotationMarkup object.
2936 Initializes PDAnnotationPopup with subtype.
2937 Initializes PDAnnotationWidget with subtype.
2938 Initializes a new instance of the PDAnnotationLink class from a COS dictionary.
2939 Initializes a new instance of PDAnnotationMarkup from a COS dictionary.
2940 Initializes popup for COS annotation with given field dictionary. @param field COSDictionary representing annotation field data
2941 Constructs a PDAnnotationUnknown object from a COS dictionary.
2942 Constructs a PDAnnotationWidget object from a COS dictionary. @param field COS dictionary containing annotation widget data
2943 Sets all four sides of a rectangle to have the same difference value. @param difference difference value to apply to each side
2944 Sets all four sides of the rectangle to have equal differences from their original values. @param difference value to apply to each side
2945 Sets rectangle differences by setting all sides to a single value. @param difference a single floating-point value representing all side differences
2946 Sets the border line style and width. @param lineWidth new line width @param bs border style dictionary or null for manual specification @param border COSArray containing border data, ignored if bs is not null
2947 Constructs and adds key usage to the underlying storage. @param digitalSignature whether for digital signature @param nonRepudiation whether for non-repudiation @param keyEncipherment whether for key encipherment @param dataEncipherment whether for data encipherment @param keyAgreement whether for key agreement @param keyCertSign whether for key certificate signing @param cRLSign whether for CRL signing @param encipherOnly whether for encipher only @param decipherOnly whether for decipher only
2948 Initializes a new instance of PDCheckBox with a specified PDAcroForm. @param acroForm the parent form containing this checkbox.
2949 Initializes a PDComboBox instance tied to the given PDAcroForm. @param acroForm associated form document
2950 Initializes a new instance of PDListBox with the given PDAcroForm. @param acroForm the parent form containing this list box
2951 Sets the value of a single-valued choice field. @param value new value to set
2952 Returns the PDF document's border array. @return COSArray representing the border, defaults to [0 0 1] if not found
2953 Initializes the compression pool for a PDDocument. @param document PD document to compress @param parameters Compression settings (optional)
2954 Retrieves an embedded date value from a COS object. @param embedded COS object containing the embedded data @param key name of the embedded date field
2955 Creates an image XObject from a BufferedImage within a PDDocument. @param document the parent PDDocument @param image the source BufferedImage
2956 Calculates and adds corner curl arcs to the path. @param anglePrev previous angle @param angleCur current angle @param radius arc radius @param cx center x-coordinate @param cy center y-coordinate @param alpha rotation angle @param alphaPrev previous rotation angle @param addMoveTo whether to add a 'move to' command
2957 Draws a basic ellipse within the specified rectangle. @param left left x-coordinate of bounding box @param bottom bottom y-coordinate of bounding box @param right right x-coordinate of bounding box @param top top y-coordinate of bounding box
2958 Formats the text content by processing paragraphs with optional line wrapping and alignment.
2959 Calculates font size based on content rectangle and PDFont object. @param font PDFont object to determine font characteristics @param contentRect PDRectangle containing dimensions for text placement @return calculated font size or default font size if auto-sizing is disabled
2960 Reads and interprets PDF font encoding from the dictionary. @throws IOException if an I/O error occurs
2961 Determines if the font is symbolic based on its encoding and mappings. @return Boolean indicating whether the font is symbolic or not
2962 Retrieves TrueType font mapping based on base font and PDFontDescriptor. @param baseFont base font to search for @param fontDescriptor descriptor containing font information @return FontMapping object or null if not found (with fallbacks)
2963 Retrieves a FontBoxFont instance from cache or fallback. @param baseFont original font name @param fontDescriptor PDFontDescriptor for fallback lookup @return FontMapping object with cache hit flag
2964 Checks if XFA is dynamic (has no fields). @return true if XFA is empty, false otherwise
2965 Retrieves rich contents from annot's dictionary object. @return Rich Contents string or null if not found
2966 Writes field data to XML output stream. @param output writer to emit XML content
2967 Retrieves rich text value from inheritable attribute. @return Rich text string or null if not found
2968 Initializes a PDFunctionType4 object from the provided COSBase stream. @param functionStream input data stream
2969 Recursively interpolates input data for a given coordinate step. @param coord current coordinate values @param step current step index (used for recursion) @return interpolated output values as an array of floats
2970 Constructs a Type6ShadingContext with specified parameters. @param shading PDShadingType6 object @param colorModel ColorModel instance @param xform AffineTransform for transformation @param matrix Matrix for coordinate system @param deviceBounds Rectangle representing device bounds
2971 Initializes Type7 Shading Context with specified parameters. @param shading PDShadingType7 object @param colorModel Color model for rendering
2972 Retrieves the XFA bytes from a COS object or stream. @throws IOException if an I/O error occurs
2973 Initializes page fit destination with default values. @param array internal data structure
2974 Sets whether to include bounding box in the profile data. @param fitBoundingBox true to include bounding box, false otherwise
2975 Initializes an instance of PDPageFitHeightDestination with default settings.
2976 Sets the left value in a fixed-size array. @param x integer value to set (-1 for null)
2977 Sets whether to fit the bounding box of an object in the array. @param fitBoundingBox true to enable fitting, false otherwise
2978 Initializes page fit rectangle destination with default values.
2979 Sets the left value to the given integer. @param x the new left value (or -1 to clear it)
2980 Sets the bottom value of a data structure. @param y the new bottom value or -1 to clear it
2981 Sets the right value in the array to x or null if x is -1. @param x value to set (or -1 for a null value)
2982 Sets the top element of a data structure to a specified value. @param y the value to be set at index 5 (default or custom)
2983 Initializes destination page with fit width settings. @param array presumably an array being configured
2984 Sets the top element of a dynamically-sized array. @param y value to set at index 2 (or null if -1)
2985 Sets whether to fit bounding box in array. @param fitBoundingBox true to enable fitting, false otherwise
2986 Initializes PDPageXYZDestination object with default settings.
2987 Sets the left value in the array to a specified integer. @param x the new integer value for the left field (or -1 to clear)
2988 Sets the top value in the array to a specified integer. @param y the new top value (or -1 to clear)
2989 Sets the zoom level to a specified value. @param zoom the desired zoom factor (-1 to clear)
2990 Parses a COS dictionary value from the input source. @return COSBase object or null on error
2991 Retrieves decode parameters from the PDF document. @throws IOException if an I/O error occurs
2992 Retrieves file decode parameters. @return list of objects containing decode parameters
2993 Initializes PDCalGray with default COS name (CALGRAY).
2994 Initializes a new instance of PDCalRGB with default values.
2995 Initializes PDLab with default COS name. @param none @return none
2996 Initializes a new instance of PDCalGray from a COSArray.
2997 Initializes PDCalRGB instance from a COSArray of RGB values. @param rgb array of color components (red, green, blue)
2998 Initializes a new instance of PDLab with the specified COSArray.
2999 Loads ICC profile from stream and initializes color space. @throws IOException if loading fails
3000 Sets the A-range component of a PDRange object. @param range PDRange object to modify
3001 Sets B-range component values. @param range PDRange object containing component values
3002 Retrieves the crop box rectangle of a PDF page. @return PDRectangle object representing the crop box or null if not set
3003 Resolves the bounding box for a given annotation widget. @param fieldWidget PDAnnotationWidget instance to fetch bounds from @return PDRectangle object containing the resolved bounds or null if not found
3004 Updates the bounding box (BBox) of the object. @param bbox new PDRectangle bounding box
3005 Updates the color with the specified name and value. @param name unique color identifier @param value new color value (null to remove)
3006 Updates four colors metadata by name. @param name unique metadata identifier @param value new PDFourColours object or null to remove
3007 Initializes a new PDF page with standard A4 size.
3008 Adds an object to the dictionary with a generated key. @param kind COSName type of object (e.g. FONT, etc.) @param prefix custom prefix for key generation @param object COSObjectable object to add @return new COSName key or existing key if item already exists
3009 Sets the font for the specified COSName. @param name unique COSName identifier @param font PDFont object to be set
3010 Sets the color space for the document. @param name COSName representing the color space @param colorSpace PDColorSpace object defining the color space
3011 Sets extended graphics state with given name. @param name COSName of the extended graphics state @param extGState extended graphics state to be set
3012 Puts a shading object under a given name. @param name COSName identifier @param shading PDShading object to store
3013 Adds a pattern to the COS object with the specified name. @param name unique name of the pattern @param pattern abstract pattern object
3014 Sets user property by name. @param name unique COSName identifier @param properties associated property list
3015 Adds a PDX object to the cache with the specified name. @param name unique identifier as COSName @param xobject PDXObject instance to store
3016 Retrieves the FDF dictionary from the catalog, or creates a new one if not found. @return FDFDictionary object representing the FDF data
3017 Initializes an empty FDFDocument object with default settings.
3018 Retrieves the FDF catalog, either creating a new instance or initializing it from the document trailer. @return FDFCatalog object representing the catalog, initialized with data from the document if available
3019 Returns the fractional space to allocate for a page. @return PDRange object with min and max values or null if not calculated
3020 Initializes a new Tiling Pattern object.
3021 Returns the appearance dictionary for the given annotation.
3022 Inserts a sibling item before the current item in the outline. @param newSibling the item to insert
3023 Inserts a sibling node after the current node. @param newSibling PDOutlineItem to insert
3024 Adds a child item to the outline, updating parent and sibling relationships. @param newChild new PDOutlineItem to append
3025 Adds a child item at the beginning of the outline. @param newChild child item to prepend
3026 Sets the first bead of the thread. @param bead the new first bead, or null to clear
3027 Initializes a new thread bead with default values.
3028 Appends a bead to the thread, updating its and adjacent beads' links. @param append the bead to be appended
3029 Updates the dictionary object for a given name. @param name unique identifier in the dictionary @param value new value to set for the object
3030 Sets rendering intent based on provided string value. @param ri rendering intent to be assigned
3031 Sets the value of attribute 'N' to the specified name. @param name new value for attribute 'N'
3032 Sets the style attribute to the specified value. @param s new style value
3033 Initializes a page label range for the given PDDocument. @param document the target document
3034 Initializes a new PDStructureElement with the specified type and parent node. @param structureType element type (e.g. 'page', 'block') @param parent parent PDStructureNode
3035 Initializes PDStructureTreeRoot with default type.
3036 Initializes a new Shading Pattern object with default settings.
3037 Initializes a new Action instance with default settings. @param TYPE predefined action type (e.g. fill, stroke, etc.)
3038 Retrieves the document outline from the PDF file. @return PDDocumentOutline object or null if not found
3039 Retrieves the parent node of a PD outline item. @return Parent node as a PDDocumentOutline or PDOutlineItem, or null if no parent exists
3040 Updates value at specified index in export values list. @param index position of the value to update
3041 Initializes linear measure dictionary with subtype.
3042 Initializes a new PDTransition with default style (R). @param none
3043 Sets the value of an AcroForm field by its name and calendar date. @param key unique field identifier @param date the date to set for the field
3044 Sets embedded date in the given dictionary. @param embedded COSName to store the date @param key COSName for the date key @param date Calendar object containing the date value
3045 Sets creation date of an object. @param date Calendar object representing creation date
3046 Sets the modification date of an object. @param date modified date in Calendar format
3047 Sets creation date of an object. @param date Calendar instance representing creation date
3048 Sets modified date in COS object. @param c Calendar object containing new modification date
3049 Sets document creation date. @param creationDate Calendar object representing creation date
3050 Sets sign date in dictionary. @param cal Calendar object representing sign date
3051 Sets custom metadata value for a given field. @param fieldName unique field identifier @param fieldValue new value to be assigned
3052 Sets a string value in the underlying dictionary. @param name key to update @param value new string value
3053 Sets the "Base" property of the underlying COS object. @param base new value for the "Base" property
3054 Sets the application version in the internal dictionary. @param applicationVersion The new version string to be stored
3055 Sets the measurement units for the COS object. @param units string representing the unit of measurement
3056 Sets the display format for fractional values. @param fractionalDisplay "D" for decimal, "F" for fraction, "R" for rounded, "T" for truncated; or null
3057 Sets the thousand separator for numeric formatting. @param thousandsSeparator string to display between thousands
3058 Sets the decimal separator using the specified value. @param decimalSeparator new decimal separator (e.g., "." or ",")
3059 Sets the prefix string for labels. @param labelPrefixString new prefix value to be assigned
3060 Sets label suffix string in COS object. @param labelSuffixString new value for label suffix
3061 Sets the label position to a specified value. @param labelPositionToValue "S" for suffix, "P" for prefix, or null
3062 Sets the MAC subtype for the given parameters dictionary. @param macSubtype MAC subtype value to set
3063 Sets the Mac creator string for a PDF file. @param macCreator Mac creator string to set
3064 Sets the Mac resource fork value. @param macResFork string containing Mac resource fork data
3065 Parses field XML and populates FDFField object. @param fieldXML Element containing field data
3066 Initializes an Optional Content Group with the specified name. @param name unique group identifier
3067 Adds a content group to the document's OCGs. @param ocg PDOptionalContentGroup object to add
3068 Retrieves the base state from the dictionary. @return BaseState enumeration value or null if not found
3069 Enables or disables a content group. @param group PDOptionalContentGroup to toggle @param enable true to enable, false to disable @return true if the group was toggled, false otherwise
3070 Sets an integer value in the PDF dictionary. @param name unique key for the value @param value integer value to set
3071 Updates the integer value associated with a dictionary key. @param name dictionary key to update @param value new integer value
3072 Sets the denominator value in the COS object. @param denominator integer value to be set
3073 Sets the flag indicating whether an annotation is invisible. @param invisible true to make the annotation invisible, false otherwise
3074 Sets the hidden flag on an annotation. @param hidden true to hide, false otherwise
3075 Sets the printed flag on the annotation. @param printed true if annotated content has been printed
3076 Sets the "no zoom" flag in PDF annotation. @param noZoom true to disable zooming, false otherwise
3077 Sets the flag indicating whether to prevent rotation. @param noRotate true to prevent rotation, false otherwise
3078 Sets the "no view" flag. @param noView true to hide the view, false otherwise
3079 Sets the document's read-only flag. @param readOnly true to make the document read-only, false otherwise
3080 Sets the lock status of an annotated object. @param locked true to lock, false to unlock
3081 Sets toggle flag to control visibility of elements. @param toggleNoView true to hide, false to show
3082 Sets flag indicating if contents are locked. @param lockedContents true to lock, false otherwise
3083 Sets the invisibility flag of the COS object. @param invisible true to make the object invisible, false otherwise
3084 Sets the hidden flag on the COS object. @param hidden true to hide, false to show
3085 Sets the printed flag on the underlying COS object. @param printed true if document has been printed
3086 Sets no-zoom flag on PDF document. @param noZoom true to disable zooming, false otherwise
3087 Sets flag to prevent rotation if true. @param noRotate boolean indicating whether to disable rotation
3088 Sets the "no view" flag on the COS object. @param noView true to hide the object from view, false otherwise
3089 Sets the read-only flag on the COS object. @param readOnly true to mark as read-only, false otherwise
3090 Sets the locked flag on the COS object. @param locked true to lock, false to unlock
3091 Sets flag to toggle view visibility. @param toggleNoView true to hide, false to show
3092 Sets the flag indicating whether contents are locked. @param lockedContents true to lock, false to unlock
3093 Sets filter required flag. @param flag true to require filtering, false otherwise
3094 Sets sub-filter requirement status. @param flag true to require sub-filter, false otherwise
3095 Sets the requirement for digest method. @param flag true to require digest method
3096 Sets V field visibility requirement. @param flag true to require value, false otherwise
3097 Sets whether reason is required or not.
3098 Sets legal attestation requirement flag. @param flag true to require legal attestation, false otherwise
3099 Sets whether to include revision information in the PDF. @param flag true to require add rev info, false otherwise
3100 Sets whether subject is required in the document. @param flag true to require subject, false otherwise
3101 Sets issuer required flag in certificate dictionary. @param flag true to require issuer, false otherwise
3102 Sets OID required flag in the dictionary. @param flag true to require OID, false otherwise
3103 Sets the subject DN required flag in the certificate dictionary. @param flag true to require subject DN, false otherwise
3104 Sets whether key usage is required in the certificate. @param flag true to require key usage or false otherwise
3105 Sets whether URL is required for form submission. @param flag true to require URL, false otherwise
3106 Sets italic font flag on the underlying COS object. @param italic true to enable italic font
3107 Sets the text formatting to bold or not. @param bold true for bold, false otherwise
3108 Sets flag indicating whether signatures exist. @param signaturesExist true if signatures are present, false otherwise
3109 Sets flag to mark document as append-only. @param appendOnly true to enable append-only mode
3110 Sets sorting flag on COS object. @param sort true to enable sorting, false otherwise
3111 Enables or disables multiple selection functionality. @param multiSelect true to enable, false otherwise
3112 Sets flag to prevent spell checking. @param doNotSpellCheck true to disable spell checking, false otherwise
3113 Sets flag to enable or disable committing changes on selection change. @param commitOnSelChange true to enable, false otherwise
3114 Sets the combo flag on the COS object. @param combo boolean value to enable or disable the combo
3115 Sets the edit flag on the COS object. @param edit true to enable edit mode, false otherwise
3116 Sets document read-only flag. @param readonly true to mark as read-only, false otherwise
3117 Sets whether document field is required. @param required true to mark as required, false otherwise
3118 Sets flag to prevent exporting. @param noExport true to disable export, false otherwise
3119 Initializes a PD push button object with the given AcroForm. @param acroForm parent form to associate with this button
3120 Initializes radio button with specified PDAcroForm. @param acroForm PDAcroForm instance to associate with this radio button
3121 Sets radio frequencies to be in unison. @param radiosInUnison flag indicating whether radios are synchronized
3122 Sets the multiline flag on the COS object. @param multiline true to enable multiline mode
3123 Sets the password flag on the COS object. @param password true to enable, false to disable password protection
3124 Sets flag indicating whether to select file or not. @param fileSelect true to enable file selection, false otherwise
3125 Sets flag to disable spell checking. @param doNotSpellCheck true to disable spell check, false otherwise
3126 Sets whether to prevent scrolling of the document. @param doNotScroll true to prevent scrolling, false otherwise
3127 Sets the combined flag. @param comb true to enable, false to disable
3128 Sets the rich text flag on the COS object. @param richText true to enable rich text, false otherwise
3129 Decodes and writes the encoded image data to the output stream. @param encoded input stream containing the encoded image @param decoded output stream for the decoded image @param parameters dictionary of decoding options @param index unused parameter (kept for consistency with other decode methods) @param options additional decoding options @return DecodeResult object describing the decoding process
3130 Verifies page tree integrity and structure. @param root COSDictionary representing the PDF document's root
3131 Retrieves a tree of pages from the COS dictionary. @return PDPageTree object containing page hierarchy
3132 Constructs a new PDPageTree instance from a COSDictionary. @param root the COSDictionary representing the page tree
3133 Removes a PDPage from storage. @param page PDPage object to be removed
3134 Inserts a new page before an existing one in the PDF structure. @param newPage new page to be inserted @param nextPage page after which the new page should be inserted
3135 Inserts a new page after the specified previous page. @param newPage new page object @param prevPage previous page object
3136 Increments the revision number by one.
3137 Creates a PDImageXObject from a 1-bit binary image. @param document PDDocument instance @param image BufferedImage to convert @return PDImageXObject object or null if invalid input
3138 Creates a PDImageXObject from a RandomAccessRead and Tiff data. @param document the PDDocument @param reader the RandomAccessRead to TIFF data @param number the number of images in the TIFF file
3139 Updates a float field in the PDF dictionary. @param name unique field identifier @param value new numeric value to set
3140 Sets the intensity value in COS. @param i intensity value to be set
3141 Sets the conversion factor value in the COS object. @param conversionFactor new conversion factor value to be set
3142 Parses an indirect object stream and returns the previous offset. @param objByteOffset initial byte offset @param isStandalone true if standalone xref table, false otherwise @return previous offset or 0L if not found
3143 Parses document into a PDF object. @return PDDocument object representing the parsed document
3144 Processes transparency group, applying transformations and settings. @param group PDTransparencyGroup object to process
3145 Processes Type 3 font stream. @param charProc font character procedure @param textRenderingMatrix text rendering matrix to apply
3146 Processes a single annotation by applying its appearance stream to the graphics state. @param annotation PDAnnotation object containing the annotation's properties @param appearance PDAppearanceStream object containing the annotation's visual content
3147 Processes a tiling pattern by transforming and clipping the graphics state. @param tilingPattern pattern to process @param color fill color (optional) @param colorSpace color space for fill color (optional) @param patternMatrix transformation matrix for the pattern
3148 Processes a PDF stream, applying transformations and clipping. @param contentStream PDContentStream object to process
3149 Writes COS document to physical file system. @param doc COSDocument object to be written
3150 Saves a PDF document to the specified OutputStream with optional compression. @param output target output stream @param compressParameters parameters controlling compression (null for no compression)
3151 Returns the highest version information from the document and catalog. @return The maximum of the document's version and the catalog's version (if >= 1.4)
3152 Retrieves a page object at the specified index. @param index zero-based index of the desired page @return PDPage object or null if invalid index
3153 Removes the object at the specified index from the tree. @param index index of the object to be removed
3154 Searches for a PDPage instance in the index and returns its position. @param page PDPage object to search for @return index of the page or -1 if not found
3155 Retrieves PDF file specification from dictionary object. @return PDFileSpecification object or null if not found
3156 Retrieves file specification from PDF document dictionary. @return PDFileSpecification object or null if not found
3157 Retrieves a list of embedded FDF specifications. @return List of PDFileSpecification objects or null if empty
3158 Retrieves file specification from PDF dictionary. @return PDFileSpecification object or null if not found
3159 Retrieves a PDF file specification. @return PDFileSpecification object or null if not found
3160 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found
3161 Retrieves the PDF file specification.
3162 Retrieves file specification from dictionary object F. @return PDFileSpecification object or null if creation fails
3163 Retrieves file specification from PDF action. @return PDFileSpecification object representing the file
3164 Retrieves file specification from action dictionary. @return PDFileSpecification object or null if not found
3165 Retrieves the file specification from the PDF COS object. @return File specification as a PDFileSpecification object or null if not found
3166 Notifies listeners of potential changes based on value comparison. @param oldBase previous COS object @param newBase current COS object
3167 Appends child PDStructureElement to this object and sets its parent reference. @param structureElement the element to be appended
3168 Inserts a PDStructureElement before a specified reference element. @param newKid PDStructureElement to be inserted @param refKid Reference element to insert before
3169 Removes a kid from its parent PDStructureElement. @param structureElement the element to remove the kid from @return true if removal was successful, false otherwise
3170 Initializes FDF annotation highlight with subtype. @param SUBTYPE subtype of annotation to set
3171 Initializes an FDFAnnotationSquiggly with subtype. @param SUBTYPE annotation subtype value
3172 Initializes an FDFAnnotationStrikeOut object with predefined subtype.
3173 Initializes an underline annotation with subtype.
3174 Initializes attachment with subtype.
3175 Initializes PDAnnotationInk with subtype. @param SUB_TYPE annotation subtype name
3176 Initializes a new PDAnnotationLine object. Sets the subtype and creates an empty line representation.
3177 Initializes a new PDAnnotationPolygon with subtype. @param SUB_TYPE annotation polygon subtype
3178 Initializes annotation polyline subtype. @param SUB_TYPE subtype name
3179 Initializes the annotation rubber stamp with subtype.
3180 Initializes a new instance of PDAnnotationSquareCircle with the specified subtype. @param subType annotation subtype identifier
3181 Initializes PD annotation text with subtype. @param SUB_TYPE subtype of annotation text
3182 Initializes PDAnnotationTextMarkup object with subtype. @param subType annotation subtype (e.g. "Highlight", "StrikeOut")
3183 Initializes PDAnnotationCaret with the given COSDictionary. @param field COS dictionary containing annotation caret data
3184 Constructs a PDAnnotationFileAttachment object from a COS dictionary. @param field COS dictionary containing attachment data
3185 Creates a new instance of PDAnnotationFreeText from a COS dictionary.
3186 Constructs a PDAnnotationInk object from a COS dictionary. @param dict COS dictionary containing annotation ink data
3187 Initializes a new PDAnnotationLine instance from the given COS dictionary. @param field COS dictionary containing annotation line data
3188 Initializes a PDAnnotationPolygon object from a COS dictionary. @param dict COSDictionary containing polygon data
3189 Initializes a new PDAnnotationPolyline instance from a COS dictionary. @param dict COS dictionary containing annotation polyline data
3190 Initializes a new PDAnnotationRubberStamp instance from a COS dictionary.
3191 Constructs a PDAnnotationSound object from a COS dictionary.
3192 Initializes annotation square circle from COS dictionary. @param dict COSDictionary object containing annotation data
3193 Initializes a new PDAnnotationText instance from a COSDictionary. @param field COS dictionary containing annotation text data
3194 Initializes PDAnnotationTextMarkup from COS dictionary.
3195 Retrieves the annotation popup from the COS dictionary. @return PDAnnotationPopup object or null if not found
3196 Retrieves a list of annotation widgets associated with this object. @return List of PDAnnotationWidget objects or an empty list if none found
3197 Writes PDF document body with optional compression and encryption. @param document COSDocument instance
3198 Determines if this symbol is symbolic. @return True if symbolic, false otherwise (default is non-symbolic)
3199 Checks if an AcroForm has dynamic XFA (XML Forms Architecture). @param acroForm the PDAcroForm to check
3200 Initializes iterator with PDAcroForm fields, enqueuing children recursively. @param form PDAcroForm instance containing fields to iterate over
3201 Creates a PDFunction object from the given COSBase, which can be a dictionary or an object. @param function COSBase to create PDFunction from
3202 Interpolates missing input values using linear interpolation. @return array of interpolated float values
3203 Extracts the soft mask image from a PDF image object. @param softMask PDImageXObject containing the soft mask @return float array representing the soft mask or null on error
3204 Parses and returns a Document object from the byte representation of this document.
3205 Encodes an image in a compressed format. @return PDImageXObject or null if encoding fails
3206 Sets the destination for a PDF page. @param page PDPage object to set as destination
3207 Initializes page context with given page object. @param page non-null PDPage object to initialize
3208 Returns the PDF rectangle representing the bleed box, or the crop box if no bleed box is set.
3209 Returns the trim box as a PDRectangle, clipping it to media box if present. @return PDRectangle object representing the trim box or crop box if not found
3210 Retrieves the ArtBox rectangle, clipping to MediaBox if available. @return PDRectangle object representing the ArtBox
3211 Returns the rotated crop box of a page if rotation is 90 or 270 degrees, otherwise returns original crop box.
3212 Adds a PDFont to the COSName dictionary. @param font the PDFont object to be added
3213 Adds a color space to the PDF document. @param colorSpace PDColorSpace object representing the new color space
3214 Adds extended graphics state to the COSName. @param extGState PDExtendedGraphicsState object
3215 Adds a PDShading object to the dictionary under the key 'sh'. @param shading PDShading object to be added.
3216 Adds a PDAbstractPattern to the current COSName.
3217 Adds a property list to the COSName. @param properties PDPropertyList object containing properties
3218 Adds an image XObject to the document. @param image PDImageXObject instance to be added
3219 Adds a PD Form XObject to the document. @param form PD Form XObject to be added
3220 Adds an object to a COS name with the given prefix. @param xobject PDXObject to be added @param prefix prefix for the COS name
3221 Exports PDF form data to FDF format. @return FDFDocument object containing the exported data
3222 Returns the down appearance entry from the appearance dictionary. If it's a sub-dictionary, creates a new COS stream and updates the dictionary.
3223 Retrieves the rollover appearance entry from the appearance dictionary. @return Rollover appearance entry, potentially initialized if subdictionary
3224 Retrieves the default appearance entry from the appearance dictionary. If it doesn't exist, creates a new one and sets it as the default.
3225 Adds a PDOutlineItem as the last child to this node. @param newChild item to be added
3226 Adds a new child PDOutlineItem to the beginning of this outline. @param newChild item to be added as first child
3227 Initializes a PDF page label object from the given document and dictionary. @param document PDDocument instance @param dict COSDictionary containing page label data
3228 Initializes an embedded "goto" action with specified subtype. @see #SUB_TYPE
3229 Initializes PDActionGoTo with subtype.
3230 Initializes hide action with predefined subtype.
3231 Initializes import data action with default subtype.
3232 Initializes JavaScript action with subtype.
3233 Initializes a new PDActionLaunch instance with predefined subtype.
3234 Initializes a new movie action with default subtype. @param SUB_TYPE predefined movie subtype constant
3235 Initializes a new instance of PDActionNamed with default subtype.
3236 Initializes remote go to action. @param SUB_TYPE specific subtype of the action
3237 Initializes reset form action with subtype.
3238 Initializes a new instance of PDActionSound with default subtype. @see #setSubType(int)
3239 Initializes submit form action with default subtype.
3240 Initializes a new thread with default subtype.
3241 Initializes a new PDActionURI instance with subtype set to SUB_TYPE.
3242 Updates the open count of the parent outline node. @param delta change in open count (positive to increment, negative to decrement)
3243 Sets a new value, updating internal state and optionally exporting values. @throws IOException on failure to apply change
3244 Checks if an optional content group is enabled. @param group the PDOptionalContentGroup to check @return true if enabled, false otherwise
3245 Enables or disables a group by name. @param groupName unique group identifier @param enable true to enable, false to disable @return true if the group was found and modified, false otherwise
3246 Retrieves the page tree from the document catalog. @return PDPageTree object representing the page hierarchy
3247 Returns the total number of pages in the document catalog. @return count of pages
3248 Sets fixed pitch flag. @param flag true to enable fixed pitch, false otherwise
3249 Sets serif font flag. @param flag true to enable, false to disable
3250 Sets symbolic flag. @param flag true to enable symbolic mode
3251 Sets the script flag. @param flag true to enable or false to disable script execution
3252 Sets non-symbolic flag. @param flag true to indicate non-symbolic, false otherwise
3253 Sets italic formatting based on provided flag. @param flag true to enable italic, false otherwise
3254 Sets all-cap flag. @param flag true to set all-cap flag, false otherwise
3255 Enables or disables small capitalization formatting. @param flag true to enable, false to disable
3256 Sets force bold font style. @param flag true to enable or false to disable
3257 Creates a PDImageXObject from the given byte array and document. @param document PDDocument object @param byteArray image data as byte array @param number image index @return PDImageXObject or throws IOException if failed
3258 Creates a PDImageXObject from the specified file. @param document PDDocument instance @param file File to read image data from @param number Image index (if multiple images in file)
3259 Initializes FDFAnnotation object from the given XML Element. @param element the XML Element to parse @throws IOException if parsing fails
3260 Dynamically parses a PDF object by key. @param objKey unique COSObjectKey identifier @param requireExistingNotCompressedObj flag for existing, non-compressed object @return parsed COSBase object or null on failure
3261 Parses Xref tables and object streams from the given COSDocument. @param document COSDocument to parse @param startXRefOffset starting offset of the Xref table @return parsed Trailer object or null if not found
3262 Displays a transparency group with the given form data. @param form PDTransparencyGroup containing form details
3263 Applies soft mask for the given transparency group. @param group PDTransparencyGroup to be processed
3264 Processes Type 3 glyph for the given code. @param code unique character identifier
3265 Processes a PDAnnotation by fetching its appearance and invoking further processing. @param annotation PDAnnotation object to be processed
3266 Processes a given tiling pattern with specified color and color space. @param tilingPattern Tiling pattern to be processed @param color Color associated with the tiling pattern @param colorSpace Color space of the tiling pattern
3267 Processes a form XObject and updates the current page. @param form form data to be processed
3268 Saves data to OutputStream using default compression. @param output target output stream
3269 Saves data to the specified file with optional compression. @param file target file @param compressParameters compression parameters (if applicable)
3270 Creates a new PDDocument instance with properties from the source document. @return A new PDDocument object or null if creation fails
3271 Updates the document's version to the specified value. @param newVersion the new version number (must be >= current version)
3272 Returns an iterator over pages in the document. @return Iterator of PDPage objects
3273 Retrieves a page from the document catalog by index. @param pageIndex zero-based index of the desired page
3274 Writes XML representation of this object to the specified Writer. @param output target writer for XML output
3275 Prepares the PDDocument for encryption by setting up the encryption dictionary and computing the encryption key. @param doc the document to be encrypted
3276 Initializes a new instance of PDAnnotationHighlight with specified subtype.
3277 Initializes a new instance of PDAnnotationSquiggly with specified subtype. @param SUB_TYPE subtype identifier
3278 Initializes a new instance of PDAnnotationStrikeout.
3279 Initializes a new instance of PDAnnotationUnderline with subtype set to SUB_TYPE.
3280 Constructs a new circle annotation from a COS dictionary.
3281 Initializes a new instance of PDAnnotationSquare from a COS dictionary.
3282 Creates a new PDAnnotationHighlight instance from a COS dictionary.
3283 Initializes a new instance of the PDAnnotationSquiggly class from a COS dictionary. @param dict COS dictionary containing annotation squiggly properties
3284 Initializes strikeout annotation with COS dictionary.
3285 Initializes a new instance of PDAnnotationUnderline from a COS dictionary. @param dict COS dictionary containing annotation underline properties
3286 Imports FDF (Forms Data Format) data into the current field. @param fdfField FDF field to import
3287 Draws an inline image at specified position and size. @param inlineImage image to draw @param x x-coordinate of top-left corner @param y y-coordinate of top-left corner @param width image width @param height image height
3288 Creates a Cloudy Polygon by processing the given 2D path data. @param path 2D float array representing polygon vertices (x,y) or curve segments (x1,y1,...,x5,y5)
3289 Implements a cloud-shaped rectangle or ellipse. @param left left edge of the shape @param bottom bottom edge of the shape @param right right edge of the shape @param top top edge of the shape @param isEllipse true to draw an ellipse, false otherwise
3290 Returns an iterator over fields in the AcroForm. @return PDField iterator or null if empty
3291 Evaluates a type 3 PDF function by interpolating between child functions. @param input input value @return output values or null if not found
3292 Constructs a PDDeviceN object from a COSArray and resources. @param deviceN COSArray containing device N attributes @param resources PDResources for color space creation
3293 Retrieves tint transform function from cache or creates it on demand. @return PDFunction object representing tint transformation.
3294 Initializes PDSeparation with given separation array and resources. @param separation COSArray containing separation data @param resources PDResources for color space creation
3295 Retrieves the PDF function object, creating it from the dictionary object if necessary. @return PDFunction object or null if not created
3296 Retrieves the array of functions from the COS object. @return PDFunction[] array containing the functions, or null if not initialized
3297 Retrieves the transfer function, creating a new one if not already loaded. @return PDFunction object representing the transfer function
3298 Initializes the PDIndexed object from the provided indexed color array and resources. @param indexedArray COSArray containing indexed color information @param resources PDResources to use for color space creation
3299 Evaluates input values using linear interpolation and returns an array of output values. @param input input values to be evaluated @return output values as a float array
3300 Fetches an image within the specified region with optional subsampling. @param region rectangle defining the desired image area @param subsampling level of detail (lower values improve quality)
3301 Creates a PDImageXObject from a BufferedImage. @param document PDDocument to associate with the image @param image source BufferedImage @return PDImageXObject or null on failure
3302 Processes a PDPage, initiating and executing stream processing. @param page PDPage object to be processed
3303 Processes child stream of a page, initializing and updating the current page as needed. @param contentStream PDContentStream to be processed @param page PDPage associated with the stream
3304 Initializes PDPageContentStream for writing to a page. @param document PDDocument instance @param sourcePage PDPage to write into
3305 Sets the current font and size for text operations. @param font PDFont object to set as current @param fontSize float value of font size in points
3306 Sets graphics state parameters. @param state PDExtendedGraphicsState object containing new parameters
3307 Fills the current graphics context with the specified PDShading. @param shading PDShading object to fill with
3308 Begins marked content sequence with specified tag and properties. @param tag COSName for the marked content sequence @param propertyList PDPropertyList containing MCID or other attributes
3309 Sets marked content point with properties. @param tag COS name of the element @param propertyList PDPropertyList object containing properties
3310 Draws an image at specified coordinates and size. @param image the image to draw @param x x-coordinate of drawing position @param y y-coordinate of drawing position @param width image width @param height image height
3311 Draws an image to the graphics context, applying a transformation. @param image PDImageXObject instance to draw @param matrix AffineTransform object for scaling and rotation
3312 Draws a form object using the provided PDFormXObject. @param form the form object to be drawn
3313 Returns normal appearance as content stream. @param compress whether to compress the output
3314 Retrieves PDF page labels from the document.
3315 Constructs PDActionJavaScript instance with JavaScript code. @param js JavaScript code to be executed
3316 Checks if a group with the specified name is enabled. @param groupName unique group identifier @return true if group is enabled, false otherwise
3317 Checks if a group in the document's catalog is enabled. @param group PDOptionalContentGroup to check
3318 Updates PDPageDestinations in the given PDDocument to match their corresponding pages. @param destinationDocument PDDocument containing destinations to update
3319 Adds a PDPage object to the collection and updates highest imported object number. @param page PDPage object to be added
3320 Removes a page from the collection. @param page PDPage object to be removed
3321 Removes page by index from pages collection. @param pageNumber unique page identifier (index)
3322 Initializes a new instance of PDFPrintable with specified settings. @param document PDDocument to print from @param scaling Scaling factor for the printed content @param showPageBorder Flag to display page borders @param dpi Dots per inch resolution @param center Flag to center the content on each page @param renderer PDFRenderer instance for rendering pages
3323 Initializes the PDF renderer with a PDDocument instance. @param document the PDDocument containing the pages to render
3324 Initializes the extractor with a PDDocument instance. @param sourceDocument input document containing pages to extract
3325 Computes and returns a map of page indices keyed by unique labels.
3326 Retrieves labels for each page in the document. @return Array of page labels or null entries if not computed
3327 Initializes PDFPageable object with document and display settings. @param document PDDocument instance @param orientation Orientation to use for page display @param showPageBorder Flag to indicate if page border should be shown @param dpi Resolution in dots per inch @param center Flag to indicate if content should be centered on each page
3328 Builds a PDFontDescriptor from a Type1Font. @param type1 Type1 font object @return PDFontDescriptor object or null if failed
3329 Builds a PDFontDescriptor from FontMetrics. @param metrics FontMetrics object containing font characteristics
3330 Creates a PDFontDescriptor from the provided TrueTypeFont. @param ttf the input font to process @return PDFontDescriptor object or null if creation fails
3331 Creates an image XObject from a byte array. @param document parent PDDocument object @param byteArray image data as byte array
3332 Creates an image XObject from a file. @param document PDDocument instance @param file input file to load
3333 Initializes FDFAnnotationCaret object with given Element. @param element the Element to initialize from
3334 Initializes FDFAnnotationCircle from given Element. @param element XML representation of the annotation
3335 Constructs an FDF annotation file attachment from the given XML element. @param element XML element containing attachment data
3336 Creates a free-text annotation from the given Element. @param element XML representation of the annotation
3337 Parses FDF annotation ink data from the provided XML element. @param element The input XML element containing ink data
3338 Creates an FDFAnnotationLine object from a given XML Element. @param element the XML Element to parse
3339 Initializes FDFAnnotationLink from given Element. @param element XML element containing link data
3340 Initializes an FDFAnnotationPolygon object from a given XML element. @param element the XML element containing polygon data
3341 Initializes an FDFAnnotationPolyline object from a given Element. @param element the input Element to process.
3342 Initializes an FDFAnnotationSound object from an XML Element. @param element XML Element containing sound annotation data
3343 Creates an FDFAnnotationSquare object from a given Element. @param element XML element containing annotation data
3344 Initializes a FDFAnnotationStamp from an XFDF Element. @param element XFDF Element containing stamp information
3345 Initializes FDFAnnotationText with an XML Element. @param element XML Element containing annotation data
3346 Parses FDF annotation text markup from XML element. @param element XML element containing 'coords' attribute
3347 Retrieves and optionally rebuilds the PDF trailer dictionary. @throws IOException if trailer cannot be parsed or rebuilt
3348 Loads a PDF document from byte array and encrypted with specified password. @param input the PDF data as a byte array @param password the encryption password @param keyStore the keystore containing the decryption key @param alias the key alias in the keystore
3349 Loads a PDF document from a RandomAccessRead stream. @param randomAccessRead input stream containing the PDF data
3350 Loads a PDF document from a RandomAccessRead stream. @param randomAccessRead input stream to read the PDF from @param password optional password for encrypted PDFs
3351 Loads a PDF document from the specified input stream. @param randomAccessRead Random access read object for PDF loading @param password password to decrypt the PDF (if applicable) @param keyStore InputStream containing encryption keys @param alias alias of encryption key to use
3352 Sets visual signature from a file. @param file input file containing visual signature data
3353 Sets visual signature from input stream. @param is input stream containing visual signature data
3354 Renders a glyph for the given PDFont using the specified text rendering matrix and displacement. @param textRenderingMatrix 2D transformation matrix @param font PDFont object to render from @param code unique glyph identifier @param displacement vector offset for positioning the glyph
3355 Builds a PDF document with visual signature and related resources. @param properties PDVisibleSignDesigner object containing design parameters @return InputStream representing the generated PDF document
3356 Saves data to specified file with default compression. @param file target file to save data to
3357 Saves data to a file with specified compression parameters. @param fileName unique file name @param compressParameters compression settings
3358 Creates a new document if necessary, based on current page number or missing destination document.
3359 Writes PDF header, adjusting version if compression is enabled. @param doc COSDocument object to write header for
3360 Sets Optional Content Properties. @param ocProperties PDOptionalContentProperties object to set
3361 Retrieves the first page of the document as a layout page. @param doc input PDDocument object
3362 Calculates PDF document's page size based on specified page. @param document PDDocument object @param page the page number
3363 Fetches the destination PDPage based on the provided PDDocument. @param doc The PDDocument to search in @return The target PDPage object or null if not found
3364 Fetches PageFormat for the given page index, handling rotated media boxes and auto-orientation. @param pageIndex unique page identifier
3365 Retrieves the page number from the array, or returns -1 if not found. @return Page number as an integer, or -1 if not present
3366 Writes FDF dictionary to XML format. @param output Writer stream to write XML data to
3367 Prepares the document for encryption by updating the encryption dictionary. @param document PDDocument to be encrypted
3368 Creates a PDF Annotation object from the given COSBase. @param base COSBase to create annotation from @return PDAnnotation object or subclass of it, or null if subtype is unknown
3369 Draws an image at specified coordinates. @param inlineImage image to be drawn @param x x-coordinate of the image @param y y-coordinate of the image
3370 Creates a cloudy rectangle based on the provided PDRectangle. @param rd input rectangle
3371 Draws a cloudy ellipse with adjustable intensity and radius. @param leftOrig left origin of the ellipse @param bottomOrig bottom origin of the ellipse @param rightOrig right origin of the ellipse @param topOrig top origin of the ellipse
3372 Retrieves a list of signature fields from the PDF document catalog. @return List of PDSignatureField objects or empty list if none found
3373 Updates appearances of terminal fields in the field tree.
3374 Returns an iterator over the fields in this PD object. @return Iterator over PDField objects
3375 Enables or disables caching of PD fields. @param cache true to enable, false to disable
3376 Retrieves a PDField by fully qualified name. @param fullyQualifiedName unique identifier of the field to retrieve @return PDField object or null if not found in cache or field tree
3377 Creates a PDColorSpace object from the given COSBase. @param colorSpace COSBase representing the color space (name, array, dictionary) @param resources PDResources object @param wasDefault true if this is the default color space @return created PDColorSpace object or null if not found
3378 Evaluates a function(s) for the given input and returns adjusted float array values. @param input input data @return float array with evaluated function value(s), adjusted to valid range [0, 1]
3379 Constructs a PDIndexed instance from a COS array. @param indexedArray COS array containing index data
3380 Retrieves image data as a BufferedImage.
3381 Processes a page, extracting rotation and size, and computing a translation matrix. @param page PDPage object to process
3382 Sets the stroking color in PDF content. @param color stroke color to apply
3383 Sets the non-stroking color for a PDF object. @param color PDColor object containing color components and space information
3384 Draws an image at specified coordinates. @param image PDImageXObject to be drawn @param x X-coordinate of the top-left corner @param y Y-coordinate of the top-left corner
3385 Returns normal appearance content stream.
3386 Toggles the state of the current node, switching between open and closed. @return null (void method)
3387 Closes the current node and updates its count.
3388 Imports a PDPage from the source document, adding it to the current PDF. @param page the source page to import @return the imported page
3389 Creates a template from the given PDPage. @param page PDPage object to be used as template
3390 Initializes a PDF printable object with the given parameters. @param document PDDocument instance @param scaling Scaling factor for rendering @param showPageBorder whether to display page borders @param dpi resolution in dots per inch @param center whether to center content horizontally
3391 Initializes a new instance of PDFPageable from the specified PDDocument. @param document the PDDocument to create a pageable from
3392 Initializes a new instance of PDFPageable with the given PDDocument and Orientation. @param document PDDocument instance @param orientation page layout direction
3393 Constructs a new instance of PDFPageable with default zoom and navigation. @param document the underlying PDDocument @param orientation the page display orientation @param showPageBorder whether to display page borders
3394 Constructs a PDFPageable object with default settings. @param document PDDocument instance
3395 Embeds a Type1 font into the PDF document. @param doc the PDF document @param dict the font's dictionary @param pfbStream the PFB stream containing the font data @param encoding the font's encoding (optional)
3396 Embeds TrueType font into PDF document. @param document the PDDocument to embed into @param dict COSDictionary for font metadata @param ttf TrueTypeFont object to embed @param embedSubset whether to embed subset or full font
3397 Creates a PDImageXObject from the specified file based on its extension. @param file input image file @param doc PDDocument instance @return PDImageXObject or throws exception if unsupported image type
3398 Creates a PDImageXObject from the specified file. @param file input file @param doc PDDocument to associate with the image @return PDImageXObject or throws exception if unsupported
3399 Initializes an FDF annotation highlight with the given element. @param element Element to initialize from
3400 Initializes FDF annotation squiggly with given Element. @param element PDF document component
3401 Initializes an annotation strikeout instance. @param element PDF element to initialize from
3402 Creates an underline annotation from the given PDF Element.
3403 Loads a PDF document from byte array with optional password protection. @param input PDF data as byte array @param password (optional) password for encrypted PDFs
3404 Loads a PDF document from a file with optional encryption. @param file the PDF file to load @param password the decryption password (null for no password)
3405 Loads a PDF document from a file with optional encryption. @param file the input PDF file @param password password for encrypted PDF (null if unencrypted) @param keyStore keystore containing private key for digital signature verification @param alias alias of private key in keystore
3406 Sets visual signature properties. @param visSignatureProperties PDVisibleSigProperties object
3407 Builds a visible signature for the PDF template.
3408 Saves data to file with specified name. @param fileName unique file identifier
3409 Imports optional content properties from source document to target document. @param srcDoc source PDF document with OC properties to import
3410 Initializes visible sign designer with PDDocument and image stream. @param document the PDDocument instance @param imageStream input stream containing image data @param page the target page index
3411 Initializes a PDVisibleSignDesigner instance with a PDDocument and an image. @param document PDDocument to associate with the designer @param image BufferedImage to display in the designer @param page page index within the document
3412 Writes the XML representation of the XFD file to the specified writer. @param output Writer to write the XML content to
3413 Retrieves a filtered list of PDF annotations. @param annotationFilter filter criteria for annotations @return List of PDAnnotations that match the filter or null if none found
3414 Retrieves the referenced object from the COS dictionary, either as a PDXObject or PDAnnotation. @return The referenced object or null if not found or unable to be retrieved.
3415 Retrieves the annotation in reply to this object. @return PDAnnotation object or null if not found
3416 Retrieves the parent markup annotation. @return PDAnnotationMarkup object or null if not found or error occurred
3417 Creates a cloudy ellipse within the specified rectangular bounds. @param rd PDRectangle object containing bounding box coordinates
3418 Retrieves a list of signature dictionaries from the PDF document. @return List of PDSignature objects representing the available signatures
3419 Imports fields from FDF document into the current PDF. @param fdf FDFDocument object containing field data
3420 Evaluates mathematical function for given input value. @param inputValue single input value to be evaluated
3421 Evaluates shading function and converts result to RGB color. @param values input array of floats @return integer RGB value or throws IOException if evaluation fails
3422 Returns non-stroking paint with soft mask applied. @return Paint object representing the non-stroking color
3423 Processes a single PD page, handling start and end pages, bookmarks, and article sectioning. @param page the page to process
3424 Sets the stroking color with optional color space and pattern. @param color PDColor object to set as stroking color
3425 Sets non-stroking color with specified components. @param color PDColor object to set as non-stroking color
3426 Adds a form as an optional content group (layer) to the target page. @param targetPage page where the form will be appended @param form form object to append @param transform affine transformation for positioning the form @param layerName name of the new optional content group @return the newly created PDOptionalContentGroup instance
3427 Shows a form object, potentially overriding the current path. @param form PDFormXObject to display
3428 Draws the transparency group on the graphics device. @param form PDTransparencyGroup object to draw @param graphics Graphics2D context for drawing
3429 Begins marked content sequence with specified tag and properties. @param tag COSName of the sequence @param properties COSDictionary containing sequence properties
3430 Constructs a PDF printable object from a PDDocument instance. @param document PDDocument instance to print @param scaling scaling factor for the printout @param showPageBorder flag indicating whether to display page borders @param dpi dots per inch resolution of the printout
3431 Constructs a PDType1Font object from the given PDDocument, font program input stream and encoding.
3432 Initializes a PDFont object from the given COSDictionary. @param fontDictionary dictionary representing the font
3433 Initializes a PDCIDFontType2Embedder with the given parameters. @param document PD document to embed into @param dict COS dictionary for the font @param ttf TrueType Font data @param embedSubset whether to embed subset or not @param parent Type 0 font parent @param vertical whether to use Identity V encoding
3434 Embeds a TrueType font into a PDF document. @param document target PDDocument object @param dict COSDictionary for font metadata @param ttf TrueTypeFont object to embed @param encoding font character encoding scheme
3435 Creates an image object from a file by extension. @param imagePath path to the image file @param doc parent document for the image object
3436 Parses FDF XML and populates the FDFDictionary object. @param fdfXML The FDF XML to parse
3437 Loads PDF document from byte array. @param input PDF data as binary bytes
3438 Loads a PDF document from a file with optional password protection. @param file file containing the PDF content @param password (optional) password for encrypted PDFs @throws IOException if loading fails
3439 Loads a PDF document from a local file. @param file local file containing the PDF data
3440 Imports a page from the source document as a form XObject. @param sourceDoc original PDDocument @param page page to import @return imported PDFormXObject or null on error
3441 Initializes PDVisibleSignDesigner with document source and page information. @param documentSource RandomAccessRead object for document data @param imageStream InputStream containing visible signature image @param page page number to associate with designer
3442 Configures a PDVisibleSignDesigner instance with a document source and image. @param documentSource RandomAccessRead to the document file @param image BufferedImage containing the visible signature @param page The page number for which to configure the designer
3443 Saves XFDF document to the specified Writer. @param output writer to save the document to
3444 Retrieves all annotations for the current entity.
3445 Retrieves the last PDSignature dictionary from the list. @return Last PDSignature object or null if empty
3446 Saves incremental data for external signing to the specified output stream. @param output OutputStream where the data will be written @return SigningSupport object containing the saved data
3447 Renders a glyph at the specified position using the provided font and transformation. @param path the GeneralPath to render @param font the PDFont containing the glyph @param code the character code of the glyph @param displacement the position to draw the glyph @param at the AffineTransform to apply to the glyph
3448 Processes a tree of PDF pages, extracting text from each page with contents. @param pages PDPageTree object containing the document's pages
3449 Initializes PDF content for a widget's appearance. @param widget the PDAnnotationWidget to render @param appearanceCharacteristics PDAppearanceCharacteristicsDictionary containing styling info @param appearanceStream stream to write output to
3450 Writes text content to a PDAppearanceContentStream with customizable font size and color. @param contents stream to write the content to @param zeroFontSize default font size when actual size is 0
3451 Initializes PDFPrintable with provided parameters and default rasterization mode. @param document PDDocument object to print @param scaling scaling factor for printing @param showPageBorder flag to display page border
3452 Initializes font from PFB data in stream. @param doc parent document context @param pfbIn input stream containing font binary data
3453 Initializes a simple font from a COS dictionary. @param fontDictionary COS dictionary containing font data
3454 Initializes a PDType0Font object from the given COSDictionary. @param fontDictionary dictionary containing font metadata
3455 Initializes a PDType0 font from a TrueType Font. @param document PDDocument instance @param ttf TrueTypeFont object @param embedSubset whether to subset CID fonts @param closeTTF whether to close the TTF after initialization @param vertical whether to enable vertical substitutions
3456 Initializes a PDTrueTypeFont object from a TrueType font. @param document PDDocument instance @param ttf TrueType font file @param encoding Encoding scheme (e.g. ASCII, Unicode) @param closeTTF whether to close the TTF file after loading
3457 Initializes FDF catalog from given XML Element. @param element XML representation of FDF catalog
3458 Loads a PDF document from a local file. @param file local file containing the PDF data @return loaded PDDocument object or null on failure
3459 Imports a specified page from a PDDocument as a form XObject. @param sourceDoc source document containing the page to import @param pageNumber index of the page to import (0-based) @return PDFormXObject representation of the imported page or null if invalid
3460 Saves XFDF data to a file. @param fileName the file path to write to
3461 Updates struct parent entries for the given PDPage and offset. @param page PDPage object to update @param structParentOffset offset value to apply to struct parents
3462 Clones the structure tree of a source PDDocument and copies it to a destination document. @param destinationDocument target document for cloning
3463 Processes annotations on the specified page. @param imported the page to process
3464 Adds a signature to the PDF document. @param sigObject PDSignature object to add @param signatureInterface SignatureInterface to use for signing @param options SignatureOptions to customize signing process
3465 Fills and strokes a cloned path with the specified winding rule. @param windingRule determines how to handle self-intersecting paths
3466 Writes formatted text to a PDF document. @param doc the PDF document to write to @param outputStream writer for output stream
3467 Inserts the generated appearance for a widget into the output stream. @param widget PDAnnotationWidget to generate appearance for @param appearanceStream PDAppearanceStream containing font and color data @param output OutputStream to write the generated appearance to
3468 Draws a page with specified size and annotations. @param g Graphics context to draw on @param pageSize Page dimensions in PDF units
3469 Constructs a printable PDF object with specified scaling. @param document PDDocument object to print @param scaling Scaling factor for printing
3470 Returns the default font used for rendering text in PDF documents. Initializes and returns a Helvetica font if not already set.
3471 Initializes a PDTrueTypeFont object from the provided COSDictionary. @param fontDictionary font metadata
3472 Initializes a Type1CFont from the given COSDictionary. @param fontDictionary dictionary containing font data
3473 Initializes a Type1 font from the provided COSDictionary. @param fontDictionary unique identifier for the font
3474 Initializes a PDType3Font object from a COS dictionary and resource cache. @param fontDictionary COS dictionary containing font information @param resourceCache Resource cache used for font resources
3475 Loads a Type 0 font from the given PDF document and random access read stream. @param doc PDDocument instance @param randomAccessRead font data as a RandomAccessRead stream @param embedSubset whether to embed subset fonts @param vertical whether to load vertically
3476 Loads a Type 0 font from a TTF file into the PDF document. @param doc the PDDocument to load the font into @param ttf TrueTypeFont object containing the font data @param embedSubset whether to embed and subset the font in the PDF
3477 Loads a vertical font from a TrueType font file. @param doc PDDocument instance @param ttf TrueTypeFont to load from @param embedSubset whether to embed the subset of glyphs
3478 Creates a PDF TrueType font from the given document and TTF file. @param doc the PDDocument to load into @param ttf the TrueType font to use @param encoding the character encoding for the font
3479 Loads a TrueType font from the given document and input stream. @param doc PDDocument instance @param randomAccessRead input stream containing font data @param encoding character encoding to use
3480 Initializes a new FDFDocument instance from the given XFDF document. @param doc XFDF document to import
3481 Initializes a PDVisibleSignDesigner object with file information and image stream. @param filename name of the file to use for page size calculation @param imageStream input stream containing visible signature image @param page index of the document page to design (1-based)
3482 Initializes a PDVisibleSignDesigner with an image from a file. @param filename path to the image file @param image BufferedImage object @param page document page number
3483 Saves XFDF data to a file. @param fileName name of the file to save to
3484 Processes a single PDF page, importing necessary resources and annotations. @param page PDPage object to process
3485 Adds user signature to the PDSignature object. @param sigObject PDSignature object to update @param options Signature processing options (not used in this method)
3486 Adds a digital signature to the PDSignature object. @param sigObject PDSignature object to sign @param signatureInterface interface for signing operation
3487 Merges two PDF documents into one. @param destination the document to append to @param source the document to append from @throws IOException if an error occurs during the merge process
3488 Converts a byte array image data to a PDF Image XObject. @param doc the PDDocument to add the image to @param imageData byte array containing the PNG image data @return PDImageXObject or null if conversion fails
3489 Extracts text content from a PDDocument. @param doc input PDF document @return extracted text as string or empty if failed
3490 Renders a PDF page by ID with specified scale and image type. @param pageIndex unique page identifier @param scale scaling factor for the page content @param imageType desired image format (e.g. ARGB, RGBA) @param destination rendering destination (e.g. screen, file) @return BufferedImage object representing the rendered page
3491 Renders a PDF page to graphics with specified scale and destination. @param pageIndex unique page identifier @param graphics Graphics2D context for drawing @param scaleX horizontal scaling factor @param scaleY vertical scaling factor @param destination render destination (e.g. image file)
3492 Initializes a new instance of PDFPrintable with the given PDDocument. @param document PDDocument object to print
3493 Renders a string of characters to the graphics state. @param string array of bytes representing the string to render
3494 Initializes a new instance of PDMMType1Font from a COS dictionary. @param fontDictionary COS dictionary containing font data.
3495 Initializes a new PDType3Font object from the given COS dictionary. @param fontDictionary COS dictionary representing the font to create
3496 Loads a Type 0 font from the specified PDF document and file. @param doc PDDocument instance to access fonts @param file Font file to load from @return loaded PDType0Font object or null on failure
3497 Loads a Type 0 font from an input stream. @param doc PDDocument instance @param input InputStream to read font data from @param embedSubset whether to embed subset fonts
3498 Loads a vertical font from the specified file into the given document. @param doc target PDDocument instance @param file file containing the font data @return loaded PDType0Font object or null if load fails
3499 Loads a vertical PDType0 font from the given input stream. @param doc parent document @param input input stream containing font data
3500 Loads and returns a vertical font from the specified stream. @param doc parent document object @param input stream containing font data @param embedSubset flag to embed subset glyphs
3501 Loads TrueType font from a file into a PDDocument. @param doc the target document @param file the file containing the font data @param encoding the encoding to use for the font data
3502 Loads TrueType font from the given stream. @param doc PDDocument instance (not used in this method) @param input input stream containing font data @param encoding font encoding type @return PDTrueTypeFont object or null on failure
3503 Loads an XFDF document from the given InputStream. @param input InputStream containing XFDF data @return loaded FDFDocument object or null on IO error
3504 Processes pages within a specified range from a document. @throws IOException on I/O errors
3505 Adds a signature object to the PDSignature collection. @param sigObject the signature to be added
3506 Flattens the PDF form by recursively traversing the field tree. @throws IOException if an I/O error occurs during flattening
3507 Creates a PDImageXObject from the given byte array. @param document PDDocument instance @param byteArray image data in bytes @param name image file name @param customFactory optional factory for unsupported formats @return PDImageXObject object or null if not supported
3508 Renders an image for the specified page index with given scale and type. @param pageIndex unique page identifier @param scale image scaling factor @param imageType type of image to render (e.g. thumbnail, full-size)
3509 Renders a page to the specified graphics context. @param pageIndex index of the page to render @param graphics Graphics2D object for rendering @param scaleX horizontal scaling factor @param scaleY vertical scaling factor
3510 Displays a text string encoded in byte array format. @param string byte array containing the text to display
3511 Renders text strings from the provided COSArray, applying TJ operations. @param array COSArray containing font scaling and string data
3512 Creates a PDFont object based on the provided COSDictionary and ResourceCache. @param dictionary COSDictionary containing font metadata @param resourceCache ResourceCache for accessing font resources @return PDFont object or null if creation fails
3513 Loads a Type 0 font from an input stream. @param doc PDDocument instance @param input input stream containing font data
3514 Loads an XFDF document from a file. @param filename path to the XFDF file to load
3515 Loads XFDF document from specified file. @param file file containing XFDF data
3516 Splits a PDDocument into multiple documents based on pages. @return List of split PDDocuments
3517 Creates a PDImageXObject from a byte array. @param document the PDDocument to add the image to @param byteArray the image data as a byte array @param name the name of the image
3518 Renders an image at specified page index and scale. @param pageIndex unique page identifier @param scale image scaling factor
3519 Renders image with specified DPI. @param pageIndex page index of the image to render @param dpi desired dots per inch (DPI)
3520 Scales an image to a specific DPI and returns as BufferedImage. @param pageIndex page number for rendering (not used in this method) @param dpi desired dots per inch value @param imageType type of the image to render
3521 Renders the specified page to the provided graphics context. @param pageIndex index of the page to render @param graphics graphics context to draw on @param scale scaling factor for rendering
3522 Retrieves a PDFont object for the specified name. @param name COSName identifier of the font @return PDFont object or null if not found
3523 Creates a PDF font from a COS dictionary. @param dictionary COS dictionary containing font metadata
3524 Extracts a portion of the PDF document. @return PDDocument object representing extracted pages
3525 Renders an image page by its index. @param pageIndex unique page identifier
3526 Renders a page from the current document to the specified graphics context. @param pageIndex index of the page to render (0-based) @param graphics Graphics2D object for rendering
3527 Copies needed resources to the provided PDAppearanceStream. @param appearanceStream target stream for resource copying
3528 Retrieves a PDFont object from the specified font setting. @throws IOException if an error occurs during font creation
3529 Updates the appearance stream with widget content. @param widget PDAnnotationWidget to update @param appearanceStream PDAppearanceStream to modify
3530 Copies graphics state parameters from the input dictionary into the target graphics state. @param gs target graphics state
3531 Processes appearance string operators in the given content. @param content byte array containing PDF stream to parse
3532 Initializes default appearance and resources. @param defaultAppearance the default appearance string @param defaultResources the default resources
3533 Retrieves the default appearance string from inheritable attributes or AcroForm resources.
3534 Sets the appearance value for a widget in a PDF form. @param apValue appearance value to be set
3535 Initializes the generator with a PDVariableText field and validates resources. @param field PDVariableText field to process
